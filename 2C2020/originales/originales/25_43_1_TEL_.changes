

----STARTUP---- (24 October 2020 12:19:59) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisUniversity/CuisUniversity-4383.image!


Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRovers - Exercise'!

!classDefinition: #MarsRover category: 'MarsRovers - Exercise' stamp: 'D S 10/24/2020 12:20:35'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRovers - Exercise'!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRovers - Exercise'!

!classDefinition: #MarsRoverTest category: 'MarsRovers - Exercise' stamp: 'D S 10/24/2020 12:20:46'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRovers - Exercise'!
!MarsRoverTest methodsFor: 'no messages' stamp: 'D S 10/24/2020 12:21:05'!
test01! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'D S 10/24/2020 12:26:45' prior: 50895320!
test01
	| aMarsRover |
	
	aMarsRover := MarsRover deploy.
	
	self assert: (aMarsRover ubication) equals: 2@2 ! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 12:26:51'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 12:26:51'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'D S 10/24/2020 12:26:58'!
deploy
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeDeploy! !
!MarsRover class methodsFor: 'instance creation' stamp: 'D S 10/24/2020 12:27:13' prior: 50895335!
deploy
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	
	^self new initializeMarsRover.! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 12:27:19'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 12:27:19'!
ERROR!
!MarsRover methodsFor: 'initialization' stamp: 'D S 10/24/2020 12:27:39'!
initializeMarsRover
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'initialization' stamp: 'D S 10/24/2020 12:27:52' prior: 50895354!
initializeMarsRover
	
	^self.! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 12:27:59'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 12:27:59'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'D S 10/24/2020 12:28:06'!
ubication
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'accessing' stamp: 'D S 10/24/2020 12:28:22' prior: 50895367!
ubication

	^2@2.! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 12:28:48'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'D S 10/24/2020 12:34:55'!
test02
	| aMarsRover |
	
	aMarsRover := MarsRover deploy.
	
	self assert: (aMarsRover ubication) equals: 3@3 ! !

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 12:34:58'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 12:34:58'!
FAILURE!

!methodRemoval: MarsRoverTest #test02 stamp: 'D S 10/24/2020 12:36:08'!
test02
	| aMarsRover |
	
	aMarsRover := MarsRover deploy.
	
	self assert: (aMarsRover ubication) equals: 3@3 !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'D S 10/24/2020 12:36:44'!
test02
	| aMarsRover |
	
	aMarsRover := MarsRover deploy.
	
	self assert: (aMarsRover pointing) equals: 'N' ! !

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 12:36:48'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 12:36:48'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'D S 10/24/2020 12:36:55'!
pointing
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'accessing' stamp: 'D S 10/24/2020 12:37:31' prior: 50895405!
pointing

	^'N'.! !

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 12:37:40'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'D S 10/24/2020 12:41:37'!
test03
	| aMarsRover |
	
	aMarsRover := MarsRover deploy.
	
	self assert: (aMarsRover ubication) equals: 3@3 ! !

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 12:41:44'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 12:41:44'!
FAILURE!
!MarsRover class methodsFor: 'instance creation' stamp: 'D S 10/24/2020 12:43:03'!
deployInUbication
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	
	^self new initializeMarsRover.! !

!methodRemoval: MarsRover class #deploy stamp: 'D S 10/24/2020 12:43:03'!
deploy
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	
	^self new initializeMarsRover.!
!MarsRover class methodsFor: 'instance creation' stamp: 'D S 10/24/2020 12:43:24'!
deployInUbication: aUbication
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	
	^self new initializeMarsRover.! !

!methodRemoval: MarsRover class #deployInUbication stamp: 'D S 10/24/2020 12:43:24'!
deployInUbication
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	
	^self new initializeMarsRover.!
!MarsRover class methodsFor: 'instance creation' stamp: 'D S 10/24/2020 12:43:48' prior: 50895439!
deployInUbication: aUbication
	
	^self new initializeMarsRoverInUbication: aUbication.! !
!MarsRover methodsFor: 'initialization' stamp: 'D S 10/24/2020 12:44:05'!
initializeMarsRoverInUbication
	
	^self.! !

!methodRemoval: MarsRover #initializeMarsRover stamp: 'D S 10/24/2020 12:44:05'!
initializeMarsRover
	
	^self.!
!MarsRover methodsFor: 'initialization' stamp: 'D S 10/24/2020 12:44:23'!
initializeMarsRoverInUbication: aUbication
	
	^self.! !

!methodRemoval: MarsRover #initializeMarsRoverInUbication stamp: 'D S 10/24/2020 12:44:23'!
initializeMarsRoverInUbication
	
	^self.!

Object subclass: #MarsRover
	instanceVariableNames: 'ubication'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRovers - Exercise'!

!classDefinition: #MarsRover category: 'MarsRovers - Exercise' stamp: 'D S 10/24/2020 12:44:39'!
Object subclass: #MarsRover
	instanceVariableNames: 'ubication'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRovers - Exercise'!
!MarsRover methodsFor: 'initialization' stamp: 'D S 10/24/2020 12:44:56' prior: 50895467!
initializeMarsRoverInUbication: aUbication
	
	ubication := aUbication! !
!MarsRover methodsFor: 'accessing' stamp: 'D S 10/24/2020 12:45:04' prior: 50895371!
ubication

	^ubication.! !
!MarsRover methodsFor: 'accessing' stamp: 'D S 10/24/2020 12:45:34'!
location

	^ubication.! !

!methodRemoval: MarsRover #ubication stamp: 'D S 10/24/2020 12:45:34'!
ubication

	^ubication.!
!MarsRover class methodsFor: 'instance creation' stamp: 'D S 10/24/2020 12:45:46'!
deployInLocation: aUbication
	
	^self new initializeMarsRoverInUbication: aUbication.! !

!methodRemoval: MarsRover class #deployInUbication: stamp: 'D S 10/24/2020 12:45:46'!
deployInUbication: aUbication
	
	^self new initializeMarsRoverInUbication: aUbication.!
!MarsRover methodsFor: 'initialization' stamp: 'D S 10/24/2020 12:46:03'!
initializeMarsRoverInLocation: aUbication
	
	ubication := aUbication! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'D S 10/24/2020 12:46:03' prior: 50895503!
deployInLocation: aUbication
	
	^self new initializeMarsRoverInLocation: aUbication.! !

!methodRemoval: MarsRover #initializeMarsRoverInUbication: stamp: 'D S 10/24/2020 12:46:03'!
initializeMarsRoverInUbication: aUbication
	
	ubication := aUbication!
!MarsRover methodsFor: 'initialization' stamp: 'D S 10/24/2020 12:46:13' prior: 50895514!
initializeMarsRoverInLocation: aLocation
	
	ubication := aLocation! !
!MarsRover class methodsFor: 'instance creation' stamp: 'D S 10/24/2020 12:46:22' prior: 50895520!
deployInLocation: aLocation
	
	^self new initializeMarsRoverInLocation: aLocation.! !

!classDefinition: #MarsRover category: 'MarsRovers - Exercise' stamp: 'D S 10/24/2020 12:46:36'!
Object subclass: #MarsRover
	instanceVariableNames: 'location'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRovers - Exercise'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'D S 10/24/2020 12:46:36' prior: 50895496!
location

	^location.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'D S 10/24/2020 12:46:36' prior: 50895531!
initializeMarsRoverInLocation: aLocation
	
	location := aLocation! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'D S 10/24/2020 12:47:42' prior: 50895324!
test01
	| aMarsRover aLocation|
	
	aLocation := 2@2.
	aMarsRover := MarsRover deployInLocation: aLocation.
	
	self assert: (aMarsRover location) equals: 2@2 ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'D S 10/24/2020 12:47:56' prior: 50895415!
test03
	| aMarsRover aLocation|
	aLocation := 3@3.
	aMarsRover := MarsRover deployInLocation: aLocation.
	
	self assert: (aMarsRover ubication) equals: 3@3 ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'D S 10/24/2020 12:48:12' prior: 50895394!
test02
	| aMarsRover aLocation|
	aLocation := 2@2.
	aMarsRover := MarsRover deployInLocation: aLocation.
	
	self assert: (aMarsRover pointing) equals: 'N' ! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 12:48:16'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 12:48:16'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 12:48:16'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 12:48:16'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 12:48:27'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 12:48:27'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 12:48:27'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 12:48:27'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 12:48:31'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 12:48:52' prior: 50895570!
test03
	| aMarsRover aLocation|
	aLocation := 3@3.
	aMarsRover := MarsRover deployInLocation: aLocation.
	
	self assert: (aMarsRover location) equals: 3@3 ! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 12:48:55'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 12:48:55'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 12:48:55'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 12:49:12'!
test04
	| aMarsRover aLocation|
	aLocation := 2@2.
	aMarsRover := MarsRover deployInLocation: aLocation.
	
	self assert: (aMarsRover pointing) equals: 'S' ! !

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 12:49:17'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 12:49:17'!
FAILURE!

!classDefinition: #MarsRover category: 'MarsRovers - Exercise' stamp: 'D S 10/24/2020 12:49:47'!
Object subclass: #MarsRover
	instanceVariableNames: 'location cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRovers - Exercise'!
!MarsRover class methodsFor: 'instance creation' stamp: 'D S 10/24/2020 12:50:21'!
deployInLocation: aLocation andPointing: aCardinalPoint 
	
	^self new initializeMarsRoverInLocation: aLocation.! !

!methodRemoval: MarsRover class #deployInLocation: stamp: 'D S 10/24/2020 12:50:21'!
deployInLocation: aLocation
	
	^self new initializeMarsRoverInLocation: aLocation.!
!MarsRover class methodsFor: 'instance creation' stamp: 'D S 10/24/2020 12:50:42' prior: 50895644!
deployInLocation: aLocation andPointing: aCardinalPoint 
	
	^self new initializeMarsRoverInLocation: aLocation andPointing: aCardinalPoint.! !
!MarsRover methodsFor: 'initialization' stamp: 'D S 10/24/2020 12:51:03'!
initializeMarsRoverInLocation: aLocation andPointing: aCardinalPoint 
	
	location := aLocation! !

!methodRemoval: MarsRover #initializeMarsRoverInLocation: stamp: 'D S 10/24/2020 12:51:03'!
initializeMarsRoverInLocation: aLocation
	
	location := aLocation!
!MarsRover methodsFor: 'initialization' stamp: 'D S 10/24/2020 12:51:30' prior: 50895663!
initializeMarsRoverInLocation: aLocation andPointing: aCardinalPoint 
	
	location := aLocation.
	cardinalPoint:= aCardinalPoint! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 12:52:12' prior: 50895561!
test01
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.
	
	self assert: (aMarsRover location) equals: 2@2 ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 12:52:47' prior: 50895579!
test02
	| aMarsRover aLocation aCardinalPoint|
	
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.
	
	self assert: (aMarsRover pointing) equals: 'N' ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 12:53:02' prior: 50895608!
test03
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	self assert: (aMarsRover location) equals: 3@3 ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 12:53:17' prior: 50895623!
test04
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'S'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	self assert: (aMarsRover pointing) equals: 'S' ! !

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 12:53:36'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 12:53:36'!
FAILURE!
!MarsRover methodsFor: 'accessing' stamp: 'D S 10/24/2020 12:53:51' prior: 50895409!
pointing

	^cardinalPoint .! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 12:53:57'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 12:53:57'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 12:53:57'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 12:53:57'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 13:35:17'!
test05
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 3@2. ! !

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 13:35:22'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 13:35:22'!
ERROR!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 13:35:38'!
sendCommands: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 13:37:47' prior: 50895754!
sendCommands: aStringOfCommands
	location := 3@2.! !

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 13:37:55'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 13:38:02'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 13:38:02'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 13:38:02'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 13:38:02'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 13:38:02'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 13:38:15'!
test06
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'S'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 1@2. ! !

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 13:38:20'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 13:38:20'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 13:39:16' prior: 50895759!
sendCommands: aStringOfCommands
	
	cardinalPoint = 'N' ifTrue:[location := 3@2].
	cardinalPoint = 'S' ifTrue:[location := 1@2].! !

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 13:39:22'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 13:43:12'!
test07
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'O'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 2@1. ! !
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 13:46:45' prior: 50895794!
sendCommands: aStringOfCommands
	
	cardinalPoint = 'N' ifTrue:[location := 3@2].
	cardinalPoint = 'S' ifTrue:[location := 1@2].
	cardinalPoint = 'O' ifTrue:[location := 2@1].! !

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 14:19:44'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 14:20:03' prior: 50895803!
test07
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'E'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 2@3. ! !

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 14:20:06'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 14:20:06'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 14:20:36' prior: 50895814!
sendCommands: aStringOfCommands
	
	cardinalPoint = 'N' ifTrue:[location := 3@2].
	cardinalPoint = 'S' ifTrue:[location := 1@2].
	cardinalPoint = 'O' ifTrue:[location := 2@1].
	cardinalPoint = 'E' ifTrue:[location := 2@3].! !
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 14:20:46' prior: 50895841!
sendCommands: aStringOfCommands
	
	cardinalPoint = 'N' ifTrue:[location := 3@2].
	cardinalPoint = 'S' ifTrue:[location := 1@2].
	cardinalPoint = 'O' ifTrue:[location := 2@1].
	cardinalPoint = 'E' ifTrue:[location := 2@3].! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 14:21:06' prior: 50895825!
test07
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'O'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 2@1. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 14:21:12'!
test08
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'E'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 2@3. ! !

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 14:21:16'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 14:22:59' prior: 50895739!
test05
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 4@3. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 14:22:59' prior: 50895886!
test05
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 4@3. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 13:35:17' prior: 50895897!
test05
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 3@2. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 14:23:28'!
test09
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 4@3. ! !

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 14:23:32'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 14:23:32'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 14:25:41' prior: 50895851!
sendCommands: aStringOfCommands
	
	location = 2@2 ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := 3@2].
		cardinalPoint = 'S' ifTrue:[location := 1@2].
		cardinalPoint = 'O' ifTrue:[location := 2@1].
		cardinalPoint = 'E' ifTrue:[location := 2@3].].
	location = 3@3 ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := 4@3].]! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 14:25:44'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 14:25:44'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 14:25:44'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 14:25:44'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 14:25:44'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 14:25:44'!
ERROR!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 14:25:44'!
ERROR!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 14:25:44'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 14:25:44'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 14:26:07'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 14:26:07'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 14:26:07'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 14:26:07'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 14:26:07'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 14:26:07'!
ERROR!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 14:26:07'!
ERROR!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 14:26:07'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 14:26:07'!
ERROR!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 14:26:45' prior: 50895935!
sendCommands: aStringOfCommands
	
	(location = 2@2) ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := 3@2].
		cardinalPoint = 'S' ifTrue:[location := 1@2].
		cardinalPoint = 'O' ifTrue:[location := 2@1].
		cardinalPoint = 'E' ifTrue:[location := 2@3].].
	(location = 3@3) ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := 4@3].]! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 14:26:49'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 14:26:49'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 14:26:49'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 14:26:49'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 14:26:49'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 14:26:49'!
ERROR!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 14:26:49'!
ERROR!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 14:26:49'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 14:26:49'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 14:27:07'!
ERROR!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 14:27:23' prior: 50895991!
sendCommands: aStringOfCommands
	
	(location = (2@2)) ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := 3@2].
		cardinalPoint = 'S' ifTrue:[location := 1@2].
		cardinalPoint = 'O' ifTrue:[location := 2@1].
		cardinalPoint = 'E' ifTrue:[location := 2@3].].
	(location = (3@3)) ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := 4@3].]! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 14:27:26'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 14:27:26'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 14:27:26'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 14:27:26'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 14:27:26'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 14:27:26'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 14:27:26'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 14:27:26'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 14:27:26'!
PASSED!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 14:30:25' prior: 50896028!
sendCommands: aStringOfCommands
	
	cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
	(location = (2@2)) ifTrue:[
		cardinalPoint = 'S' ifTrue:[location := 1@2].
		cardinalPoint = 'O' ifTrue:[location := 2@1].
		cardinalPoint = 'E' ifTrue:[location := 2@3].].
	(location = (3@3)) ifTrue:[].! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 14:30:31'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 14:30:31'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 14:30:31'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 14:30:31'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 14:30:31'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 14:30:31'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 14:30:31'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 14:30:31'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 14:30:31'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 14:30:47'!
test10
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'S'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 2@3. ! !

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 14:30:50'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 14:30:50'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 14:31:08' prior: 50896063!
sendCommands: aStringOfCommands
	
	cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
	(location = (2@2)) ifTrue:[
		cardinalPoint = 'S' ifTrue:[location := 1@2].
		cardinalPoint = 'O' ifTrue:[location := 2@1].
		cardinalPoint = 'E' ifTrue:[location := 2@3].].
	(location = (3@3)) ifTrue:[
		cardinalPoint = 'S' ifTrue:[location := 2@3].
].! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 14:31:13'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 14:31:13'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 14:31:13'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 14:31:13'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 14:31:13'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 14:31:13'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 14:31:13'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 14:31:13'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 14:31:13'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 14:31:13'!
PASSED!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 14:31:46' prior: 50896113!
sendCommands: aStringOfCommands
	
	cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
	cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
	(location = (2@2)) ifTrue:[
		cardinalPoint = 'O' ifTrue:[location := 2@1].
		cardinalPoint = 'E' ifTrue:[location := 2@3].].
	(location = (3@3)) ifTrue:[].! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 14:31:50'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 14:31:50'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 14:31:50'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 14:31:50'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 14:31:50'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 14:31:50'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 14:31:50'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 14:31:50'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 14:31:50'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 14:31:50'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 14:32:00' prior: 50895861!
test07
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'O'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 3@2. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 13:43:12' prior: 50896189!
test07
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'O'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 2@1. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 14:32:21'!
test11
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'O'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 3@2. ! !

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 14:32:23'!
FAILURE!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 14:32:23'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 14:32:42' prior: 50896151!
sendCommands: aStringOfCommands
	
	cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
	cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
	(location = (2@2)) ifTrue:[
		cardinalPoint = 'O' ifTrue:[location := 2@1].
		cardinalPoint = 'E' ifTrue:[location := 2@3].].
	(location = (3@3)) ifTrue:[
		cardinalPoint = 'O' ifTrue:[location := 3@2].
].! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 14:32:46'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 14:32:46'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 14:32:46'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 14:32:46'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 14:32:46'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 14:32:46'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 14:32:46'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 14:32:46'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 14:32:46'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 14:32:46'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 14:32:46'!
PASSED!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 14:33:20' prior: 50896227!
sendCommands: aStringOfCommands
	
	cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
	cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
	cardinalPoint = 'O' ifTrue:[location := (location x) @ (location y)-1].

	(location = (2@2)) ifTrue:[
		cardinalPoint = 'O' ifTrue:[location := 2@1].
		cardinalPoint = 'E' ifTrue:[location := 2@3].].
	(location = (3@3)) ifTrue:[
		cardinalPoint = 'O' ifTrue:[location := 3@2].
].! !
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 14:33:25' prior: 50896269!
sendCommands: aStringOfCommands
	
	cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
	cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
	cardinalPoint = 'O' ifTrue:[location := (location x) @ (location y)-1].

	(location = (2@2)) ifTrue:[
		cardinalPoint = 'E' ifTrue:[location := 2@3].].
	(location = (3@3)) ifTrue:[].! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 14:33:28'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 14:33:28'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 14:33:28'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 14:33:28'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 14:33:28'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 14:33:28'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 14:33:28'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 14:33:28'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 14:33:28'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 14:33:28'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 14:33:28'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 14:33:49' prior: 50896287!
sendCommands: aStringOfCommands
	
	cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
	cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
	cardinalPoint = 'O' ifTrue:[location := (location x) @ (location y) - 1].

	(location = (2@2)) ifTrue:[
		cardinalPoint = 'E' ifTrue:[location := 2@3].].
	(location = (3@3)) ifTrue:[].! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 14:33:52'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 14:33:52'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 14:33:52'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 14:33:52'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 14:33:52'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 14:33:52'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 14:33:52'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 14:33:52'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 14:33:52'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 14:33:52'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 14:33:52'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 14:34:58' prior: 50896328!
sendCommands: aStringOfCommands
	
	cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
	cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
	cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].

	(location = (2@2)) ifTrue:[
		cardinalPoint = 'E' ifTrue:[location := 2@3].].
	(location = (3@3)) ifTrue:[].! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 14:35:02'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 14:35:02'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 14:35:02'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 14:35:02'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 14:35:02'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 14:35:02'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 14:35:02'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 14:35:02'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 14:35:02'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 14:35:02'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 14:35:02'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 14:35:20'!
test12
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'E'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 3@4. ! !

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 14:35:23'!
FAILURE!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 14:35:23'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 14:35:47' prior: 50896369!
sendCommands: aStringOfCommands
	
	cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
	cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
	cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
	
	(location = (2@2)) ifTrue:[
		cardinalPoint = 'E' ifTrue:[location := 2@3].].
	(location = (3@3)) ifTrue:[
		cardinalPoint = 'E' ifTrue:[location := 3@4].].! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 14:35:51'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 14:35:51'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 14:35:51'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 14:35:51'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 14:35:51'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 14:35:51'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 14:35:51'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 14:35:51'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 14:35:51'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 14:35:51'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 14:35:51'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 14:35:51'!
PASSED!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 14:36:10' prior: 50896425!
sendCommands: aStringOfCommands
	
	cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
	cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
	cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
	cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
	
	(location = (2@2)) ifTrue:[
		cardinalPoint = 'E' ifTrue:[location := 2@3].].
	(location = (3@3)) ifTrue:[
		cardinalPoint = 'E' ifTrue:[location := 3@4].].! !
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 14:36:13' prior: 50896470!
sendCommands: aStringOfCommands
	
	cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
	cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
	cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
	cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	
	(location = (2@2)) ifTrue:[
		cardinalPoint = 'E' ifTrue:[location := 2@3].].
	(location = (3@3)) ifTrue:[
		cardinalPoint = 'E' ifTrue:[location := 3@4].].! !
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 14:36:18' prior: 50896489!
sendCommands: aStringOfCommands
	
	cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
	cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
	cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
	cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 14:36:25'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 14:36:25'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 14:36:25'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 14:36:25'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 14:36:25'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 14:36:25'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 14:36:25'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 14:36:25'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 14:36:25'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 14:36:25'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 14:36:25'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 14:36:25'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 14:58:58'!
test13
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'b'.
	self assert: aMarsRover location equals: 1@2. ! !

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 14:59:06'!
FAILURE!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 14:59:06'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 14:59:52' prior: 50896508!
sendCommands: aStringOfCommands
	
	cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
	cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
	cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
	cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	
	aStringOfCommands = 'f' ifTrue: [location := (location x) - 1 @ (location y)]! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 14:59:59'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 14:59:59'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 14:59:59'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 14:59:59'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 14:59:59'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 14:59:59'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 14:59:59'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 14:59:59'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 14:59:59'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 14:59:59'!
FAILURE!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 14:59:59'!
FAILURE!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 14:59:59'!
FAILURE!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 14:59:59'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:00:19'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:00:19'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:00:19'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:00:19'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:00:19'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:00:19'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:00:19'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:00:19'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:00:19'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:00:19'!
FAILURE!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:00:19'!
FAILURE!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:00:19'!
FAILURE!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:00:19'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:00:31' prior: 50896566!
sendCommands: aStringOfCommands
	
	cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
	cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
	cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
	cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	
	aStringOfCommands = 'b' ifTrue: [location := (location x) - 1 @ (location y)]! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:00:35'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:00:35'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:00:35'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:00:35'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:00:35'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:00:35'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:00:35'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:00:35'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:00:35'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:00:35'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:00:35'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:00:35'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:00:35'!
FAILURE!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:00:35'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:00:55' prior: 50896645!
sendCommands: aStringOfCommands
	
	cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
	cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
	cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
	cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	
	aStringOfCommands = 'b' ifTrue: [location := 1@2]! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:01:02'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:01:02'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:01:02'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:01:02'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:01:02'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:01:02'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:01:02'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:01:02'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:01:02'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:01:02'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:01:02'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:01:02'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:01:02'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:01:20'!
test14
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'S'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'b'.
	self assert: aMarsRover location equals: 3@2. ! !

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:01:28'!
FAILURE!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:01:28'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:02:28' prior: 50896695!
sendCommands: aStringOfCommands
	
	cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
	cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
	cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
	cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue: [location := 1@2].
		cardinalPoint = 'N' ifTrue: [location := 3@2]]! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:02:31'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:02:31'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:02:31'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:02:31'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:02:31'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:02:31'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:02:31'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:02:31'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:02:31'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:02:31'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:02:31'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:02:31'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:02:31'!
FAILURE!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:02:31'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:02:49' prior: 50896757!
sendCommands: aStringOfCommands
	
	cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
	cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
	cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
	cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue: [location := 1@2].
		cardinalPoint = 'S' ifTrue: [location := 3@2]]! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:02:53'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:02:53'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:02:53'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:02:53'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:02:53'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:02:53'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:02:53'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:02:53'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:02:53'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:02:53'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:02:53'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:02:53'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:02:53'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:02:53'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:03:08' prior: 50896200!
test07
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'O'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'b'.
	self assert: aMarsRover location equals: 2@3. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 13:43:12' prior: 50896859!
test07
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'O'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 2@1. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:03:31'!
test15
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'O'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'b'.
	self assert: aMarsRover location equals: 2@3. ! !

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:03:35'!
FAILURE!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:03:35'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:04:06' prior: 50896808!
sendCommands: aStringOfCommands
	
	cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
	cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
	cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
	cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue: [location := 1@2].
		cardinalPoint = 'S' ifTrue: [location := 3@2].
		cardinalPoint = 'O' ifTrue: [location := 2@3]]! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:04:09'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:04:09'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:04:09'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:04:09'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:04:09'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:04:09'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:04:09'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:04:09'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:04:09'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:04:09'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:04:09'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:04:09'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:04:09'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:04:09'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:04:09'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:04:29'!
test16
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'E'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'b'.
	self assert: aMarsRover location equals: 2@1. ! !

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:04:32'!
FAILURE!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:04:32'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:05:05' prior: 50896897!
sendCommands: aStringOfCommands
	
	cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
	cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
	cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
	cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue: [location := 1@2].
		cardinalPoint = 'S' ifTrue: [location := 3@2].
		cardinalPoint = 'O' ifTrue: [location := 2@3].
		cardinalPoint = 'E' ifTrue: [location := 2@1]]! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:05:10'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:05:10'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:05:10'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:05:10'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:05:10'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:05:10'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:05:10'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:05:10'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:05:10'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:05:10'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:05:10'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:05:10'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:05:10'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:05:10'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:05:10'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:05:10'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:05:30'!
test17
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'b'.
	self assert: aMarsRover location equals: 2@3. ! !

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:05:33'!
FAILURE!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:05:33'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:06:36' prior: 50896968!
sendCommands: aStringOfCommands
	
	cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
	cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
	cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
	cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	
	aStringOfCommands = 'b' ifTrue: [
		location = 3@3 ifTrue:[
			cardinalPoint = 'N' ifTrue: [location := 1@2].
			cardinalPoint = 'S' ifTrue: [location := 3@2].
			cardinalPoint = 'O' ifTrue: [location := 2@3].
			cardinalPoint = 'E' ifTrue: [location := 2@1]
		]
	]! !
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:07:12' prior: 50897043!
sendCommands: aStringOfCommands
	
	cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
	cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
	cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
	cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	
	aStringOfCommands = 'b' ifTrue: [
		location = 2@2 ifTrue:[
			cardinalPoint = 'N' ifTrue: [location := 1@2].
			cardinalPoint = 'S' ifTrue: [location := 3@2].
			cardinalPoint = 'O' ifTrue: [location := 2@3].
			cardinalPoint = 'E' ifTrue: [location := 2@1]
		].
			location = 3@3 ifTrue:[
			cardinalPoint = 'N' ifTrue: [location := 2@3].
		]

	]! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:07:16'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:07:16'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:07:16'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:07:16'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:07:16'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:07:16'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:07:16'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:07:16'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:07:16'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:07:16'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:07:16'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:07:16'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:07:16'!
ERROR!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:07:16'!
ERROR!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:07:16'!
ERROR!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:07:16'!
ERROR!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:07:16'!
ERROR!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:07:57'!
ERROR!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:08:06' prior: 50897065!
sendCommands: aStringOfCommands
	
	cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
	cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
	cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
	cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	
	aStringOfCommands = 'b' ifTrue: [
		location = (2@2) ifTrue:[
			cardinalPoint = 'N' ifTrue: [location := 1@2].
			cardinalPoint = 'S' ifTrue: [location := 3@2].
			cardinalPoint = 'O' ifTrue: [location := 2@3].
			cardinalPoint = 'E' ifTrue: [location := 2@1]
		].
			location = 3@3 ifTrue:[
			cardinalPoint = 'N' ifTrue: [location := 2@3].
		]

	]! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:08:10'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:08:10'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:08:10'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:08:10'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:08:10'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:08:10'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:08:10'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:08:10'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:08:10'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:08:10'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:08:10'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:08:10'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:08:10'!
ERROR!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:08:10'!
ERROR!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:08:10'!
ERROR!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:08:10'!
ERROR!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:08:10'!
ERROR!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:08:44' prior: 50897132!
sendCommands: aStringOfCommands
	
	aStringOfCommands = 'f' ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	].
	aStringOfCommands = 'b' ifTrue: [
		location = (2@2) ifTrue:[
			cardinalPoint = 'N' ifTrue: [location := 1@2].
			cardinalPoint = 'S' ifTrue: [location := 3@2].
			cardinalPoint = 'O' ifTrue: [location := 2@3].
			cardinalPoint = 'E' ifTrue: [location := 2@1]
		].
			location = 3@3 ifTrue:[
			cardinalPoint = 'N' ifTrue: [location := 2@3].
		]

	]! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:08:47'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:08:47'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:08:47'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:08:47'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:08:47'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:08:47'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:08:47'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:08:47'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:08:47'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:08:47'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:08:47'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:08:47'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:08:47'!
ERROR!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:08:47'!
ERROR!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:08:47'!
ERROR!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:08:47'!
ERROR!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:08:47'!
ERROR!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:09:29' prior: 50897197!
sendCommands: aStringOfCommands
	
	aStringOfCommands = 'f' ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	].
	aStringOfCommands = 'b' ifTrue: [
		location = (2@2) ifTrue:[
			cardinalPoint = 'N' ifTrue: [location := 1@2].
			cardinalPoint = 'S' ifTrue: [location := 3@2].
			cardinalPoint = 'O' ifTrue: [location := 2@3].
			cardinalPoint = 'E' ifTrue: [location := 2@1]
		].
			location = (3@3) ifTrue:[
			cardinalPoint = 'N' ifTrue: [location := 2@3].
		]

	]! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:09:34'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:09:34'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:09:34'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:09:34'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:09:34'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:09:34'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:09:34'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:09:34'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:09:34'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:09:34'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:09:34'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:09:34'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:09:34'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:09:34'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:09:34'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:09:34'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:09:34'!
PASSED!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:10:23' prior: 50897263!
sendCommands: aStringOfCommands
	
	aStringOfCommands = 'f' ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	].
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
		location = (2@2) ifTrue:[
			cardinalPoint = 'S' ifTrue: [location := 3@2].
			cardinalPoint = 'O' ifTrue: [location := 2@3].
			cardinalPoint = 'E' ifTrue: [location := 2@1]
		].
			location = (3@3) ifTrue:[].

	]! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:10:27'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:10:27'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:10:27'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:10:27'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:10:27'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:10:27'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:10:27'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:10:27'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:10:27'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:10:27'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:10:27'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:10:27'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:10:27'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:10:27'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:10:27'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:10:27'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:10:27'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:10:48'!
test18
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'S'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'b'.
	self assert: aMarsRover location equals: 4@3. ! !

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 15:10:51'!
FAILURE!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 15:10:51'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:11:30' prior: 50897330!
sendCommands: aStringOfCommands
	
	aStringOfCommands = 'f' ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	].
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
		location = (2@2) ifTrue:[
			cardinalPoint = 'S' ifTrue: [location := 3@2].
			cardinalPoint = 'O' ifTrue: [location := 2@3].
			cardinalPoint = 'E' ifTrue: [location := 2@1]
		].
			location = (3@3) ifTrue:[
				cardinalPoint = 'S' ifTrue: [location := 4@3].
].

	]! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:11:33'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:11:33'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:11:33'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:11:33'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:11:33'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:11:33'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:11:33'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:11:33'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:11:33'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:11:33'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:11:33'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:11:33'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:11:33'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:11:33'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:11:33'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:11:33'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:11:33'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 15:11:33'!
PASSED!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:12:00' prior: 50897411!
sendCommands: aStringOfCommands
	
	aStringOfCommands = 'f' ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	].
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].

		location = (2@2) ifTrue:[
			cardinalPoint = 'O' ifTrue: [location := 2@3].
			cardinalPoint = 'E' ifTrue: [location := 2@1]
		].
			location = (3@3) ifTrue:[
].

	]! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:12:04'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:12:04'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:12:04'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:12:04'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:12:04'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:12:04'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:12:04'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:12:04'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:12:04'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:12:04'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:12:04'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:12:04'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:12:04'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:12:04'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:12:04'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:12:04'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:12:04'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 15:12:04'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:12:19'!
test19
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'O'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'b'.
	self assert: aMarsRover location equals: 3@4. ! !

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 15:12:22'!
FAILURE!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 15:12:22'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:12:54' prior: 50897481!
sendCommands: aStringOfCommands
	
	aStringOfCommands = 'f' ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	].
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].

		location = (2@2) ifTrue:[
			cardinalPoint = 'O' ifTrue: [location := 2@3].
			cardinalPoint = 'E' ifTrue: [location := 2@1]
		].
			location = (3@3) ifTrue:[
			cardinalPoint = 'O' ifTrue: [location := 3@4].
		].
	]! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:12:58'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:12:58'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:12:58'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:12:58'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:12:58'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:12:58'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:12:58'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:12:58'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:12:58'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:12:58'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:12:58'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:12:58'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:12:58'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:12:58'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:12:58'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:12:58'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:12:58'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 15:12:58'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 15:12:58'!
PASSED!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:13:20' prior: 50897565!
sendCommands: aStringOfCommands
	
	aStringOfCommands = 'f' ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	].
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].


		location = (2@2) ifTrue:[
			cardinalPoint = 'E' ifTrue: [location := 2@1]
		].
			location = (3@3) ifTrue:[
		].
	]! !
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:13:24' prior: 50897638!
sendCommands: aStringOfCommands
	
	aStringOfCommands = 'f' ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	].
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].


		location = (2@2) ifTrue:[
			cardinalPoint = 'E' ifTrue: [location := 2@1]
		].
			location = (3@3) ifTrue:[
		].
	]! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:13:28'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:13:28'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:13:28'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:13:28'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:13:28'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:13:28'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:13:28'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:13:28'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:13:28'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:13:28'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:13:28'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:13:28'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:13:28'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:13:28'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:13:28'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:13:28'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:13:28'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 15:13:28'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 15:13:28'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:13:42'!
test20
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'E'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'b'.
	self assert: aMarsRover location equals: 3@2. ! !

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 15:13:45'!
FAILURE!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 15:13:45'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:14:07' prior: 50897665!
sendCommands: aStringOfCommands
	
	aStringOfCommands = 'f' ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	].
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].


		location = (2@2) ifTrue:[
			cardinalPoint = 'E' ifTrue: [location := 2@1]
		].
			location = (3@3) ifTrue:[
			cardinalPoint = 'E' ifTrue: [location := 3@2]

		].
	]! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:14:11'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:14:11'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:14:11'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:14:11'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:14:11'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:14:11'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:14:11'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:14:11'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:14:11'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:14:11'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:14:11'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:14:11'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:14:11'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:14:11'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:14:11'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:14:11'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:14:11'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 15:14:11'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 15:14:11'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 15:14:11'!
PASSED!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:14:39' prior: 50897753!
sendCommands: aStringOfCommands
	
	aStringOfCommands = 'f' ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	].
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
	].! !
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:14:45' prior: 50897829!
sendCommands: aStringOfCommands
	
	aStringOfCommands = 'f' ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	].
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) - 1)].
	].! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:14:48'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:14:48'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:14:48'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:14:48'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:14:48'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:14:48'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:14:48'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:14:48'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:14:48'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:14:48'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:14:48'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:14:48'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:14:48'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:14:48'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:14:48'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:14:48'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:14:48'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 15:14:48'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 15:14:48'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 15:14:48'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:15:53' prior: 50897549!
test19
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'l'.
	self assert: aMarsRover pointing equals: 'O'. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:12:19' prior: 50897928!
test19
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'O'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'b'.
	self assert: aMarsRover location equals: 3@4. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:16:18'!
test21
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'l'.
	self assert: aMarsRover pointing equals: 'O'. ! !

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 15:16:24'!
FAILURE!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 15:16:24'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:17:20' prior: 50897855!
sendCommands: aStringOfCommands
	
	aStringOfCommands = 'f' ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	].
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) - 1)].
	].

	aStringOfCommands = 'l' ifTrue: [
		cardinalPoint = 'N' ifTrue:[cardinalPoint := 'O'].
	].! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:17:24'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:17:24'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:17:24'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:17:24'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:17:24'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:17:24'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:17:24'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:17:24'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:17:24'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:17:24'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:17:24'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:17:24'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:17:24'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:17:24'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:17:24'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:17:24'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:17:24'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 15:17:24'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 15:17:24'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 15:17:24'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 15:17:24'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:17:37'!
test22
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'O'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'l'.
	self assert: aMarsRover pointing equals: 'E'. ! !

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 15:17:40'!
FAILURE!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 15:17:40'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:17:58' prior: 50897966!
sendCommands: aStringOfCommands
	
	aStringOfCommands = 'f' ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	].
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) - 1)].
	].

	aStringOfCommands = 'l' ifTrue: [
		cardinalPoint = 'N' ifTrue:[cardinalPoint := 'O'].
		cardinalPoint = 'O' ifTrue:[cardinalPoint := 'S'].

	].! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:18:02'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:18:02'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:18:02'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:18:02'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:18:02'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:18:02'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:18:02'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:18:02'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:18:02'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:18:02'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:18:02'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:18:02'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:18:02'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:18:02'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:18:02'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:18:02'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:18:02'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 15:18:02'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 15:18:02'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 15:18:02'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 15:18:02'!
FAILURE!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 15:18:02'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:18:40' prior: 50898060!
sendCommands: aStringOfCommands
	
	aStringOfCommands = 'f' ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	].
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) - 1)].
	].

	aStringOfCommands = 'l' ifTrue: [
		cardinalPoint = 'O' ifTrue:[cardinalPoint := 'S'].
		cardinalPoint = 'N' ifTrue:[cardinalPoint := 'O'].

	].! !

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 15:18:46'!
FAILURE!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 15:18:46'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:19:07' prior: 50898044!
test22
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'O'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'l'.
	self assert: aMarsRover pointing equals: 'S'. ! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:19:12'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:19:12'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:19:12'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:19:12'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:19:12'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:19:12'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:19:12'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:19:12'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:19:12'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:19:12'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:19:12'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:19:12'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:19:12'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:19:12'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:19:12'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:19:12'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:19:12'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 15:19:12'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 15:19:12'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 15:19:12'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 15:19:12'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 15:19:12'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:19:21'!
test23
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'S'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'l'.
	self assert: aMarsRover pointing equals: 'E'. ! !

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 15:19:25'!
FAILURE!

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 15:19:25'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:19:47' prior: 50898143!
sendCommands: aStringOfCommands
	
	aStringOfCommands = 'f' ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	].
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) - 1)].
	].

	aStringOfCommands = 'l' ifTrue: [
		cardinalPoint = 'S' ifTrue:[cardinalPoint := 'E'].
		cardinalPoint = 'O' ifTrue:[cardinalPoint := 'S'].
		cardinalPoint = 'N' ifTrue:[cardinalPoint := 'O'].

	].! !

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 15:19:55'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:20:07'!
test24
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'E'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'l'.
	self assert: aMarsRover pointing equals: 'S'. ! !

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 15:20:10'!
FAILURE!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 15:20:10'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:20:52' prior: 50898257!
sendCommands: aStringOfCommands
	
	aStringOfCommands = 'f' ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	].
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) - 1)].
	].

	aStringOfCommands = 'l' ifTrue: [
		cardinalPoint = 'E' ifTrue:[cardinalPoint := 'N'].
		cardinalPoint = 'S' ifTrue:[cardinalPoint := 'E'].
		cardinalPoint = 'O' ifTrue:[cardinalPoint := 'S'].
		cardinalPoint = 'N' ifTrue:[cardinalPoint := 'O'].

	].! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:20:56'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:20:56'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:20:56'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:20:56'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:20:56'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:20:56'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:20:56'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:20:56'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:20:56'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:20:56'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:20:56'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:20:56'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:20:56'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:20:56'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:20:56'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:20:56'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:20:56'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 15:20:56'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 15:20:56'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 15:20:56'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 15:20:56'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 15:20:56'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 15:20:56'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 15:20:56'!
FAILURE!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 15:20:56'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:21:14'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:21:14'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:21:14'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:21:14'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:21:14'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:21:14'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:21:14'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:21:14'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:21:14'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:21:14'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:21:14'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:21:14'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:21:14'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:21:14'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:21:14'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:21:14'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:21:14'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 15:21:14'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 15:21:14'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 15:21:14'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 15:21:14'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 15:21:14'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 15:21:14'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 15:21:14'!
FAILURE!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 15:21:14'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:21:31' prior: 50898291!
test24
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'E'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'l'.
	self assert: aMarsRover pointing equals: 'N'. ! !
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:22:00' prior: 50898307!
sendCommands: aStringOfCommands
	
	aStringOfCommands = 'f' ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	].
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) - 1)].
	].

	aStringOfCommands = 'l' ifTrue: [
		cardinalPoint = 'E' ifTrue:[cardinalPoint := 'N']
		ifFalse:[
			cardinalPoint = 'S' ifTrue:[cardinalPoint := 'E'].
			cardinalPoint = 'O' ifTrue:[cardinalPoint := 'S'].
			cardinalPoint = 'N' ifTrue:[cardinalPoint := 'O'].
		]
	].! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:22:04'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:22:04'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:22:04'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:22:04'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:22:04'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:22:04'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:22:04'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:22:04'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:22:04'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:22:04'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:22:04'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:22:04'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:22:04'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:22:04'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:22:04'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:22:04'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:22:04'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 15:22:04'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 15:22:04'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 15:22:04'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 15:22:04'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 15:22:04'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 15:22:04'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 15:22:04'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:22:17' prior: 50897950!
test21
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'r'.
	self assert: aMarsRover pointing equals: 'E'. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:16:18' prior: 50898562!
test21
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'l'.
	self assert: aMarsRover pointing equals: 'O'. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:22:38'!
test25
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'r'.
	self assert: aMarsRover pointing equals: 'E'. ! !

!testRun: #MarsRoverTest #test25 stamp: 'D S 10/24/2020 15:22:47'!
FAILURE!

!testRun: #MarsRoverTest #test25 stamp: 'D S 10/24/2020 15:22:47'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:23:58' prior: 50898471!
sendCommands: aStringOfCommands
	
	aStringOfCommands = 'f' ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	].
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) - 1)].
	].

	aStringOfCommands = 'l' ifTrue: [
		cardinalPoint = 'E' ifTrue:[cardinalPoint := 'N']
		ifFalse:[
			cardinalPoint = 'S' ifTrue:[cardinalPoint := 'E'].
			cardinalPoint = 'O' ifTrue:[cardinalPoint := 'S'].
			cardinalPoint = 'N' ifTrue:[cardinalPoint := 'O'].
		]
	].
	aStringOfCommands = 'r' ifTrue:[
		cardinalPoint = 'N' ifTrue: [cardinalPoint := 'O']
	].! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:24:01'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:24:01'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:24:01'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:24:01'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:24:01'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:24:01'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:24:01'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:24:01'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:24:01'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:24:01'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:24:01'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:24:01'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:24:01'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:24:01'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:24:01'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:24:01'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:24:01'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 15:24:01'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 15:24:01'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 15:24:01'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 15:24:01'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 15:24:01'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 15:24:01'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 15:24:01'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'D S 10/24/2020 15:24:01'!
FAILURE!

!testRun: #MarsRoverTest #test25 stamp: 'D S 10/24/2020 15:24:01'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:24:11' prior: 50898584!
test25
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'r'.
	self assert: aMarsRover pointing equals: 'O'. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:24:13' prior: 50898699!
test25
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'r'.
	self assert: aMarsRover pointing equals: 'E'. ! !
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:24:29' prior: 50898600!
sendCommands: aStringOfCommands
	
	aStringOfCommands = 'f' ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	].
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) - 1)].
	].

	aStringOfCommands = 'l' ifTrue: [
		cardinalPoint = 'E' ifTrue:[cardinalPoint := 'N']
		ifFalse:[
			cardinalPoint = 'S' ifTrue:[cardinalPoint := 'E'].
			cardinalPoint = 'O' ifTrue:[cardinalPoint := 'S'].
			cardinalPoint = 'N' ifTrue:[cardinalPoint := 'O'].
		]
	].
	aStringOfCommands = 'r' ifTrue:[
		cardinalPoint = 'N' ifTrue: [cardinalPoint := 'E']
	].! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:24:32'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:24:32'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:24:32'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:24:32'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:24:32'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:24:32'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:24:32'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:24:32'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:24:32'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:24:32'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:24:32'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:24:32'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:24:32'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:24:32'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:24:32'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:24:32'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:24:32'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 15:24:32'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 15:24:32'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 15:24:32'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 15:24:32'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 15:24:32'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 15:24:32'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 15:24:32'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'D S 10/24/2020 15:24:32'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:24:48'!
test26
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'E'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'r'.
	self assert: aMarsRover pointing equals: 'S'. ! !

!testRun: #MarsRoverTest #test26 stamp: 'D S 10/24/2020 15:24:53'!
FAILURE!

!testRun: #MarsRoverTest #test26 stamp: 'D S 10/24/2020 15:24:53'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:25:21' prior: 50898721!
sendCommands: aStringOfCommands
	
	aStringOfCommands = 'f' ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	].
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) - 1)].
	].

	aStringOfCommands = 'l' ifTrue: [
		cardinalPoint = 'E' ifTrue:[cardinalPoint := 'N']
		ifFalse:[
			cardinalPoint = 'S' ifTrue:[cardinalPoint := 'E'].
			cardinalPoint = 'O' ifTrue:[cardinalPoint := 'S'].
			cardinalPoint = 'N' ifTrue:[cardinalPoint := 'O'].
		]
	].
	aStringOfCommands = 'r' ifTrue:[
		cardinalPoint = 'E' ifTrue: [cardinalPoint := 'S'].
		cardinalPoint = 'N' ifTrue: [cardinalPoint := 'E']
	].! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:25:25'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:25:25'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:25:25'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:25:25'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:25:25'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:25:25'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:25:25'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:25:25'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:25:25'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:25:25'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:25:25'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:25:25'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:25:25'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:25:25'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:25:25'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:25:25'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:25:25'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 15:25:25'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 15:25:25'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 15:25:25'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 15:25:25'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 15:25:25'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 15:25:25'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 15:25:25'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'D S 10/24/2020 15:25:25'!
PASSED!

!testRun: #MarsRoverTest #test26 stamp: 'D S 10/24/2020 15:25:25'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:25:42'!
test27
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'S'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'r'.
	self assert: aMarsRover pointing equals: 'O'. ! !

!testRun: #MarsRoverTest #test27 stamp: 'D S 10/24/2020 15:25:45'!
FAILURE!

!testRun: #MarsRoverTest #test27 stamp: 'D S 10/24/2020 15:25:45'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:26:59' prior: 50898833!
sendCommands: aStringOfCommands
	
	aStringOfCommands = 'f' ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	].
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) - 1)].
	].

	aStringOfCommands = 'l' ifTrue: [
		cardinalPoint = 'E' ifTrue:[cardinalPoint := 'N']
		ifFalse:[
			cardinalPoint = 'S' ifTrue:[cardinalPoint := 'E'].
			cardinalPoint = 'O' ifTrue:[cardinalPoint := 'S'].
			cardinalPoint = 'N' ifTrue:[cardinalPoint := 'O'].
		]
	].
	aStringOfCommands = 'r' ifTrue:[
		cardinalPoint = 'S' ifTrue: [cardinalPoint := 'O'].
		cardinalPoint = 'E' ifTrue: [cardinalPoint := 'S'].
		cardinalPoint = 'N' ifTrue: [cardinalPoint := 'E'].

	].! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:27:03'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:27:03'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:27:03'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:27:03'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:27:03'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:27:03'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:27:03'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:27:03'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:27:03'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:27:03'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:27:03'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:27:03'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:27:03'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:27:03'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:27:03'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:27:03'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:27:03'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 15:27:03'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 15:27:03'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 15:27:03'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 15:27:03'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 15:27:03'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 15:27:03'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 15:27:03'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'D S 10/24/2020 15:27:03'!
PASSED!

!testRun: #MarsRoverTest #test26 stamp: 'D S 10/24/2020 15:27:03'!
PASSED!

!testRun: #MarsRoverTest #test27 stamp: 'D S 10/24/2020 15:27:03'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:27:36'!
test28
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'O'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'r'.
	self assert: aMarsRover pointing equals: 'N'. ! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:27:41'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:27:42'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:27:42'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:27:42'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:27:42'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:27:42'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:27:42'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:27:42'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:27:42'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:27:42'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:27:42'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:27:42'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:27:42'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:27:42'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:27:42'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:27:42'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:27:42'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 15:27:42'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 15:27:42'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 15:27:42'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 15:27:42'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 15:27:42'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 15:27:42'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 15:27:42'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'D S 10/24/2020 15:27:42'!
PASSED!

!testRun: #MarsRoverTest #test26 stamp: 'D S 10/24/2020 15:27:42'!
PASSED!

!testRun: #MarsRoverTest #test27 stamp: 'D S 10/24/2020 15:27:42'!
PASSED!

!testRun: #MarsRoverTest #test28 stamp: 'D S 10/24/2020 15:27:42'!
FAILURE!

!testRun: #MarsRoverTest #test28 stamp: 'D S 10/24/2020 15:27:42'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:28:12' prior: 50898949!
sendCommands: aStringOfCommands
	
	aStringOfCommands = 'f' ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	].
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) - 1)].
	].

	aStringOfCommands = 'l' ifTrue: [
		cardinalPoint = 'E' ifTrue:[cardinalPoint := 'N']
		ifFalse:[
			cardinalPoint = 'S' ifTrue:[cardinalPoint := 'E'].
			cardinalPoint = 'O' ifTrue:[cardinalPoint := 'S'].
			cardinalPoint = 'N' ifTrue:[cardinalPoint := 'O'].
		]
	].
	aStringOfCommands = 'r' ifTrue:[
		cardinalPoint = 'O' ifTrue: [cardinalPoint := 'N']
		ifFalse:[
			cardinalPoint = 'S' ifTrue: [cardinalPoint := 'O'].
			cardinalPoint = 'E' ifTrue: [cardinalPoint := 'S'].
			cardinalPoint = 'N' ifTrue: [cardinalPoint := 'E'].
		]
	].! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!

!testRun: #MarsRoverTest #test26 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!

!testRun: #MarsRoverTest #test27 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!

!testRun: #MarsRoverTest #test28 stamp: 'D S 10/24/2020 15:28:19'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:31:27'!
test29
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'rf'.
	self assert: 'E' equals: aMarsRover pointing.
	self assert: (3@4) equals: aMarsRover location.! !

!testRun: #MarsRoverTest #test29 stamp: 'D S 10/24/2020 15:31:30'!
FAILURE!

!testRun: #MarsRoverTest #test29 stamp: 'D S 10/24/2020 15:31:30'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:31:49' prior: 50899242!
test29
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'rf'.
	self assert: 'E' equals: aMarsRover pointing.
! !

!testRun: #MarsRoverTest #test29 stamp: 'D S 10/24/2020 15:31:52'!
FAILURE!

!testRun: #MarsRoverTest #test29 stamp: 'D S 10/24/2020 15:31:52'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:33:38' prior: 50899133!
sendCommands: aStringOfCommands
	
	aStringOfCommands = 'f' ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	].
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) - 1)].
	].

	aStringOfCommands = 'l' ifTrue: [
		cardinalPoint = 'E' ifTrue:[cardinalPoint := 'N']
		ifFalse:[
			cardinalPoint = 'S' ifTrue:[cardinalPoint := 'E'].
			cardinalPoint = 'O' ifTrue:[cardinalPoint := 'S'].
			cardinalPoint = 'N' ifTrue:[cardinalPoint := 'O'].
		]
	].
	aStringOfCommands = 'r' ifTrue:[
		cardinalPoint = 'O' ifTrue: [cardinalPoint := 'N']
		ifFalse:[
			cardinalPoint = 'S' ifTrue: [cardinalPoint := 'O'].
			cardinalPoint = 'E' ifTrue: [cardinalPoint := 'S'].
			cardinalPoint = 'N' ifTrue: [cardinalPoint := 'E'].
		]
	].
	aStringOfCommands = 'rf' ifTrue:[
		cardinalPoint = 'N' ifTrue:[cardinalPoint:= 'O']].! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test26 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test27 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test28 stamp: 'D S 10/24/2020 15:33:41'!
PASSED!

!testRun: #MarsRoverTest #test29 stamp: 'D S 10/24/2020 15:33:41'!
FAILURE!

!testRun: #MarsRoverTest #test29 stamp: 'D S 10/24/2020 15:33:41'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:33:51' prior: 50899276!
sendCommands: aStringOfCommands
	
	aStringOfCommands = 'f' ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	].
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) - 1)].
	].

	aStringOfCommands = 'l' ifTrue: [
		cardinalPoint = 'E' ifTrue:[cardinalPoint := 'N']
		ifFalse:[
			cardinalPoint = 'S' ifTrue:[cardinalPoint := 'E'].
			cardinalPoint = 'O' ifTrue:[cardinalPoint := 'S'].
			cardinalPoint = 'N' ifTrue:[cardinalPoint := 'O'].
		]
	].
	aStringOfCommands = 'r' ifTrue:[
		cardinalPoint = 'O' ifTrue: [cardinalPoint := 'N']
		ifFalse:[
			cardinalPoint = 'S' ifTrue: [cardinalPoint := 'O'].
			cardinalPoint = 'E' ifTrue: [cardinalPoint := 'S'].
			cardinalPoint = 'N' ifTrue: [cardinalPoint := 'E'].
		]
	].
	aStringOfCommands = 'rf' ifTrue:[
		cardinalPoint = 'N' ifTrue:[cardinalPoint:= 'E']].! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test26 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test27 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test28 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!

!testRun: #MarsRoverTest #test29 stamp: 'D S 10/24/2020 15:33:57'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:34:21'!
test30
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'rf'.
	self assert: (3@4) equals: aMarsRover location.
! !

!testRun: #MarsRoverTest #test30 stamp: 'D S 10/24/2020 15:34:25'!
FAILURE!

!testRun: #MarsRoverTest #test30 stamp: 'D S 10/24/2020 15:34:25'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:35:29' prior: 50899393!
sendCommands: aStringOfCommands
	
	aStringOfCommands = 'f' ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	].
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) - 1)].
	].

	aStringOfCommands = 'l' ifTrue: [
		cardinalPoint = 'E' ifTrue:[cardinalPoint := 'N']
		ifFalse:[
			cardinalPoint = 'S' ifTrue:[cardinalPoint := 'E'].
			cardinalPoint = 'O' ifTrue:[cardinalPoint := 'S'].
			cardinalPoint = 'N' ifTrue:[cardinalPoint := 'O'].
		]
	].
	aStringOfCommands = 'r' ifTrue:[
		cardinalPoint = 'O' ifTrue: [cardinalPoint := 'N']
		ifFalse:[
			cardinalPoint = 'S' ifTrue: [cardinalPoint := 'O'].
			cardinalPoint = 'E' ifTrue: [cardinalPoint := 'S'].
			cardinalPoint = 'N' ifTrue: [cardinalPoint := 'E'].
		]
	].
	aStringOfCommands = 'rf' ifTrue:[
		cardinalPoint = 'N' ifTrue:[cardinalPoint:= 'E'.
							location := (3@4)]
		].! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test26 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test27 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test28 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test29 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!

!testRun: #MarsRoverTest #test30 stamp: 'D S 10/24/2020 15:35:33'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:35:52'!
test31
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'rf'.
	self assert: (2@3) equals: aMarsRover location.
! !

!testRun: #MarsRoverTest #test31 stamp: 'D S 10/24/2020 15:35:56'!
FAILURE!

!testRun: #MarsRoverTest #test31 stamp: 'D S 10/24/2020 15:35:56'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:37:52' prior: 50899523!
sendCommands: aStringOfCommands
	
	aStringOfCommands = 'f' ifTrue:[
		cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
	].
	aStringOfCommands = 'b' ifTrue: [
		cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
		cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
		cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
		cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) - 1)].
	].

	aStringOfCommands = 'l' ifTrue: [
		cardinalPoint = 'E' ifTrue:[cardinalPoint := 'N']
		ifFalse:[
			cardinalPoint = 'S' ifTrue:[cardinalPoint := 'E'].
			cardinalPoint = 'O' ifTrue:[cardinalPoint := 'S'].
			cardinalPoint = 'N' ifTrue:[cardinalPoint := 'O'].
		]
	].
	aStringOfCommands = 'r' ifTrue:[
		cardinalPoint = 'O' ifTrue: [cardinalPoint := 'N']
		ifFalse:[
			cardinalPoint = 'S' ifTrue: [cardinalPoint := 'O'].
			cardinalPoint = 'E' ifTrue: [cardinalPoint := 'S'].
			cardinalPoint = 'N' ifTrue: [cardinalPoint := 'E'].
		]
	].
	aStringOfCommands = 'rf' ifTrue:[
		cardinalPoint = 'N' ifTrue:[cardinalPoint:= 'E'.
							location = (3@3) ifTrue:[location := (3@4)].
							location = (2@2) ifTrue:[location:= (2@3)].
							]
		].! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test26 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test27 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test28 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test29 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test30 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!

!testRun: #MarsRoverTest #test31 stamp: 'D S 10/24/2020 15:37:56'!
PASSED!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:42:35' prior: 50899656!
sendCommands: aStringOfCommands
	
	aStringOfCommands do: [: aCharacter |
		aCharacter = $f ifTrue:[
			cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
			cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
			cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
			cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
		].
		aCharacter = $b ifTrue: [
			cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
			cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
			cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
			cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) - 1)].
		].	
	
		aCharacter = $l ifTrue: [
			cardinalPoint = 'E' ifTrue:[cardinalPoint := 'N']
			ifFalse:[
				cardinalPoint = 'S' ifTrue:[cardinalPoint := 'E'].
				cardinalPoint = 'O' ifTrue:[cardinalPoint := 'S'].
				cardinalPoint = 'N' ifTrue:[cardinalPoint := 'O'].
			]
		].
		aCharacter = $r ifTrue:[
			cardinalPoint = 'O' ifTrue: [cardinalPoint := 'N']
			ifFalse:[
				cardinalPoint = 'S' ifTrue: [cardinalPoint := 'O'].
				cardinalPoint = 'E' ifTrue: [cardinalPoint := 'S'].
				cardinalPoint = 'N' ifTrue: [cardinalPoint := 'E'].
			]
		].
	]! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test26 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test27 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test28 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test29 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test30 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!

!testRun: #MarsRoverTest #test31 stamp: 'D S 10/24/2020 15:42:38'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:44:45'!
test32
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'R$%&f'.
	self assert: 'E' equals: aMarsRover pointing.
	self assert: (2@2) equals: aMarsRover location .
! !

!testRun: #MarsRoverTest #test32 stamp: 'D S 10/24/2020 15:44:48'!
FAILURE!

!testRun: #MarsRoverTest #test32 stamp: 'D S 10/24/2020 15:44:48'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:44:58' prior: 50899896!
test32
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'r$%&f'.
	self assert: 'E' equals: aMarsRover pointing.
	self assert: (2@2) equals: aMarsRover location .
! !

!testRun: #MarsRoverTest #test32 stamp: 'D S 10/24/2020 15:45:02'!
FAILURE!

!testRun: #MarsRoverTest #test32 stamp: 'D S 10/24/2020 15:45:02'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 15:51:01' prior: 50899779!
sendCommands: aStringOfCommands
	
	aStringOfCommands do: [: aCharacter |
		aCharacter = $f ifTrue:[
			cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
			cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
			cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
			cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
		].
		aCharacter = $b ifTrue: [
			cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
			cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
			cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
			cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) - 1)].
		].	
	
		aCharacter = $l ifTrue: [
			cardinalPoint = 'E' ifTrue:[cardinalPoint := 'N']
			ifFalse:[
				cardinalPoint = 'S' ifTrue:[cardinalPoint := 'E'].
				cardinalPoint = 'O' ifTrue:[cardinalPoint := 'S'].
				cardinalPoint = 'N' ifTrue:[cardinalPoint := 'O'].
			]
		].
		aCharacter = $r ifTrue:[
			cardinalPoint = 'O' ifTrue: [cardinalPoint := 'N']
			ifFalse:[
				cardinalPoint = 'S' ifTrue: [cardinalPoint := 'O'].
				cardinalPoint = 'E' ifTrue: [cardinalPoint := 'S'].
				cardinalPoint = 'N' ifTrue: [cardinalPoint := 'E'].
			]
		].

	]! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 15:58:24' prior: 50899914!
test32
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	
	^ [aMarsRover sendCommands: 'r$%&f'.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = MarsRover invalidCommand: $$ .
			self assert: 'E' equals: aMarsRover pointing.
			self assert: (2@2) equals: aMarsRover location .
].
! !

!testRun: #MarsRoverTest #test32 stamp: 'D S 10/24/2020 15:58:30'!
FAILURE!

!testRun: #MarsRoverTest #test32 stamp: 'D S 10/24/2020 15:58:30'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 16:01:19' prior: 50899932!
sendCommands: aStringOfCommands
	
	aStringOfCommands do: [: aCharacter |
		aCharacter = $f ifTrue:[
			cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
			cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
			cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
			cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
		].
		aCharacter = $b ifTrue: [
			cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
			cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
			cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
			cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) - 1)].
		].	
	
		aCharacter = $l ifTrue: [
			cardinalPoint = 'E' ifTrue:[cardinalPoint := 'N']
			ifFalse:[
				cardinalPoint = 'S' ifTrue:[cardinalPoint := 'E'].
				cardinalPoint = 'O' ifTrue:[cardinalPoint := 'S'].
				cardinalPoint = 'N' ifTrue:[cardinalPoint := 'O'].
			]
		].
		aCharacter = $r ifTrue:[
			cardinalPoint = 'O' ifTrue: [cardinalPoint := 'N']
			ifFalse:[
				cardinalPoint = 'S' ifTrue: [cardinalPoint := 'O'].
				cardinalPoint = 'E' ifTrue: [cardinalPoint := 'S'].
				cardinalPoint = 'N' ifTrue: [cardinalPoint := 'E'].
			]
		].
		(aCharacter ~= $r or: (aCharacter ~= $l or: (aCharacter ~= $f or: (aCharacter ~= $b)))) ifTrue:[
			self error: self class invalidCommand: aCharacter.
			]

	]! !
!MarsRover class methodsFor: 'nil' stamp: 'D S 10/24/2020 16:01:52'!
invalidCommand: aCharacter

	^'Invalid Command' ,aCharacter! !
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 16:03:13' prior: 50899998!
sendCommands: aStringOfCommands
	
	aStringOfCommands do: [: aCharacter |
		aCharacter = $f ifTrue:[
			cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
			cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
			cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
			cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
		].
		aCharacter = $b ifTrue: [
			cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
			cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
			cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
			cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) - 1)].
		].	
	
		aCharacter = $l ifTrue: [
			cardinalPoint = 'E' ifTrue:[cardinalPoint := 'N']
			ifFalse:[
				cardinalPoint = 'S' ifTrue:[cardinalPoint := 'E'].
				cardinalPoint = 'O' ifTrue:[cardinalPoint := 'S'].
				cardinalPoint = 'N' ifTrue:[cardinalPoint := 'O'].
			]
		].
		aCharacter = $r ifTrue:[
			cardinalPoint = 'O' ifTrue: [cardinalPoint := 'N']
			ifFalse:[
				cardinalPoint = 'S' ifTrue: [cardinalPoint := 'O'].
				cardinalPoint = 'E' ifTrue: [cardinalPoint := 'S'].
				cardinalPoint = 'N' ifTrue: [cardinalPoint := 'E'].
			]
		].
		(aCharacter ~= $r or: (aCharacter ~= $l or: (aCharacter ~= $f or: (aCharacter ~= $b)))) ifTrue:[
			self error: self class invalidCommand: aCharacter.
			].

	]! !
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 16:03:38' prior: 50900052!
sendCommands: aStringOfCommands
	
	aStringOfCommands do: [: aCharacter |
		aCharacter = $f ifTrue:[
			cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
			cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
			cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
			cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
		].
		aCharacter = $b ifTrue: [
			cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
			cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
			cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
			cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) - 1)].
		].	
	
		aCharacter = $l ifTrue: [
			cardinalPoint = 'E' ifTrue:[cardinalPoint := 'N']
			ifFalse:[
				cardinalPoint = 'S' ifTrue:[cardinalPoint := 'E'].
				cardinalPoint = 'O' ifTrue:[cardinalPoint := 'S'].
				cardinalPoint = 'N' ifTrue:[cardinalPoint := 'O'].
			]
		].
		aCharacter = $r ifTrue:[
			cardinalPoint = 'O' ifTrue: [cardinalPoint := 'N']
			ifFalse:[
				cardinalPoint = 'S' ifTrue: [cardinalPoint := 'O'].
				cardinalPoint = 'E' ifTrue: [cardinalPoint := 'S'].
				cardinalPoint = 'N' ifTrue: [cardinalPoint := 'E'].
			]
		].
		(aCharacter ~= $r or: (aCharacter ~= $l or: (aCharacter ~= $f or: (aCharacter ~= $b)))) ifTrue:[
			self error: (self class invalidCommand: aCharacter).
			].

	]! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 16:03:41'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 16:03:41'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 16:03:41'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 16:03:41'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test25 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test26 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test27 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test28 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test29 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test30 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test31 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test32 stamp: 'D S 10/24/2020 16:03:41'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 16:04:15'!
ERROR!
!MarsRover class methodsFor: 'error description' stamp: 'D S 10/24/2020 16:05:01' prior: 50900047!
invalidCommand: aCharacter

	^'Invalid Command ' , (aCharacter asString).! !

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 16:05:26'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 16:05:51'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 16:05:51'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 16:05:51'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 16:05:51'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!

!testRun: #MarsRoverTest #test25 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!

!testRun: #MarsRoverTest #test26 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!

!testRun: #MarsRoverTest #test27 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!

!testRun: #MarsRoverTest #test28 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!

!testRun: #MarsRoverTest #test29 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!

!testRun: #MarsRoverTest #test30 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!

!testRun: #MarsRoverTest #test31 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!

!testRun: #MarsRoverTest #test32 stamp: 'D S 10/24/2020 16:05:51'!
ERROR!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 16:06:17' prior: 50900101!
sendCommands: aStringOfCommands
	
	aStringOfCommands do: [: aCharacter |
		aCharacter = $f ifTrue:[
			cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
			cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
			cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
			cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
		].
		aCharacter = $b ifTrue: [
			cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
			cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
			cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
			cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) - 1)].
		].	
	
		aCharacter = $l ifTrue: [
			cardinalPoint = 'E' ifTrue:[cardinalPoint := 'N']
			ifFalse:[
				cardinalPoint = 'S' ifTrue:[cardinalPoint := 'E'].
				cardinalPoint = 'O' ifTrue:[cardinalPoint := 'S'].
				cardinalPoint = 'N' ifTrue:[cardinalPoint := 'O'].
			]
		].
		aCharacter = $r ifTrue:[
			cardinalPoint = 'O' ifTrue: [cardinalPoint := 'N']
			ifFalse:[
				cardinalPoint = 'S' ifTrue: [cardinalPoint := 'O'].
				cardinalPoint = 'E' ifTrue: [cardinalPoint := 'S'].
				cardinalPoint = 'N' ifTrue: [cardinalPoint := 'E'].
			]
		].
		(aCharacter ~= $r and: (aCharacter ~= $l and: (aCharacter ~= $f and: (aCharacter ~= $b)))) ifTrue:[
			self error: (self class invalidCommand: aCharacter).
			].

	]! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test26 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test27 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test28 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test29 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test30 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test31 stamp: 'D S 10/24/2020 16:06:21'!
PASSED!

!testRun: #MarsRoverTest #test32 stamp: 'D S 10/24/2020 16:06:21'!
ERROR!

!testRun: #MarsRoverTest #test32 stamp: 'D S 10/24/2020 16:06:21'!
ERROR!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 16:06:40' prior: 50899976!
test32
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	
	^ [aMarsRover sendCommands: 'r$%&f'.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = MarsRover invalidCommand: $$).
			self assert: 'E' equals: aMarsRover pointing.
			self assert: (2@2) equals: aMarsRover location .
].
! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test26 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test27 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test28 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test29 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test30 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test31 stamp: 'D S 10/24/2020 16:06:42'!
PASSED!

!testRun: #MarsRoverTest #test32 stamp: 'D S 10/24/2020 16:06:42'!
ERROR!

!testRun: #MarsRoverTest #test32 stamp: 'D S 10/24/2020 16:06:42'!
ERROR!

!testRun: #MarsRoverTest #test32 stamp: 'D S 10/24/2020 16:07:20'!
ERROR!

!testRun: #MarsRoverTest #test32 stamp: 'D S 10/24/2020 16:07:20'!
ERROR!

!testRun: #MarsRoverTest #test32 stamp: 'D S 10/24/2020 16:12:06'!
ERROR!

!testRun: #MarsRoverTest #test32 stamp: 'D S 10/24/2020 16:12:06'!
ERROR!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 16:12:24' prior: 50900439!
test32
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	
	^ [aMarsRover sendCommands: 'r$%&f'.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (MarsRover invalidCommand: $$)).
			self assert: 'E' equals: aMarsRover pointing.
			self assert: (2@2) equals: aMarsRover location .
].
! !

!testRun: #MarsRoverTest #test32 stamp: 'D S 10/24/2020 16:12:28'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 18:11:42'!
test33
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'NonValid'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	
	^ [	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (MarsRover invalidCardinalPoint: aCardinalPoint)).
].
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 18:11:55' prior: 50900563!
test33
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'NonValid'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	
	^ [aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (MarsRover invalidCardinalPoint: aCardinalPoint)).
].
! !

!testRun: #MarsRoverTest #test33 stamp: 'D S 10/24/2020 18:12:00'!
FAILURE!

!testRun: #MarsRoverTest #test33 stamp: 'D S 10/24/2020 18:12:00'!
FAILURE!
!MarsRover class methodsFor: 'instance creation' stamp: 'D S 10/24/2020 18:15:30' prior: 50895656!
deployInLocation: aLocation andPointing: aCardinalPoint 
	
	(aCardinalPoint ~= 'N' and: aCardinalPoint ~= 'S' and: aCardinalPoint ~= 'E' and: aCardinalPoint ~= 'O') ifTrue:
		[self class: (self error invalidCardinalPoint: aCardinalPoint)].
	^self new initializeMarsRoverInLocation: aLocation andPointing: aCardinalPoint.! !
!MarsRover class methodsFor: 'error description' stamp: 'D S 10/24/2020 18:16:24'!
invalidCardinalPoint: aCardinalPoint

	^'Invalid Cardinal Point: ' , (aCardinalPoint).! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test26 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test27 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test28 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test29 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test30 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test31 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test32 stamp: 'D S 10/24/2020 18:16:31'!
PASSED!

!testRun: #MarsRoverTest #test33 stamp: 'D S 10/24/2020 18:16:31'!
ERROR!

!testRun: #MarsRoverTest #test33 stamp: 'D S 10/24/2020 18:16:31'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'D S 10/24/2020 18:17:22' prior: 50900600!
deployInLocation: aLocation andPointing: aCardinalPoint 
	
	(aCardinalPoint ~= 'N' and: aCardinalPoint ~= 'S' and: aCardinalPoint ~= 'E' and: aCardinalPoint ~= 'O') ifTrue:
		[self error: (self class invalidCardinalPoint: aCardinalPoint)].
	^self new initializeMarsRoverInLocation: aLocation andPointing: aCardinalPoint.! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test26 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test27 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test28 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test29 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test30 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test31 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test32 stamp: 'D S 10/24/2020 18:17:26'!
PASSED!

!testRun: #MarsRoverTest #test33 stamp: 'D S 10/24/2020 18:17:26'!
ERROR!

!testRun: #MarsRoverTest #test33 stamp: 'D S 10/24/2020 18:17:26'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'D S 10/24/2020 18:17:57' prior: 50900700!
deployInLocation: aLocation andPointing: aCardinalPoint 
	
	(aCardinalPoint ~= 'N' and: aCardinalPoint ~= 'S' and: aCardinalPoint ~= 'E' and: aCardinalPoint ~= 'O') ifTrue:
		[self error: (self invalidCardinalPoint: aCardinalPoint)].
	^self new initializeMarsRoverInLocation: aLocation andPointing: aCardinalPoint.! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test26 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test27 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test28 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test29 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test30 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test31 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test32 stamp: 'D S 10/24/2020 18:18:01'!
PASSED!

!testRun: #MarsRoverTest #test33 stamp: 'D S 10/24/2020 18:18:01'!
ERROR!

!testRun: #MarsRoverTest #test33 stamp: 'D S 10/24/2020 18:18:01'!
ERROR!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 18:21:21' prior: 50900579!
test33
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'NonValid'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	
	^ [MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (MarsRover invalidCardinalPoint: aCardinalPoint)).
].
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 18:21:29' prior: 50900888!
test33
	| aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'NonValid'.	
	
	^ [MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (MarsRover invalidCardinalPoint: aCardinalPoint)).
].
! !

!testRun: #MarsRoverTest #test33 stamp: 'D S 10/24/2020 18:21:34'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 18:23:18'!
test34
	| aLocation aCardinalPoint|
	aLocation := 'NotAValidLocation'.
	aCardinalPoint := 'N'.	
	
	^ [MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (MarsRover invalidLocation: aLocation)).
].
! !

!testRun: #MarsRoverTest #test34 stamp: 'D S 10/24/2020 18:23:21'!
FAILURE!

!testRun: #MarsRoverTest #test34 stamp: 'D S 10/24/2020 18:23:21'!
FAILURE!
!MarsRover class methodsFor: 'instance creation' stamp: 'D S 10/24/2020 18:24:44' prior: 50900794!
deployInLocation: aLocation andPointing: aCardinalPoint 
	
	(aCardinalPoint ~= 'N' and: aCardinalPoint ~= 'S' and: aCardinalPoint ~= 'E' and: aCardinalPoint ~= 'O') ifTrue:
		[self error: (self invalidCardinalPoint: aCardinalPoint)].
	(aLocation class ~~ Point) ifTrue: [self error: (self invalidLocation: aLocation)].	
	^self new initializeMarsRoverInLocation: aLocation andPointing: aCardinalPoint.! !
!MarsRover class methodsFor: 'error description' stamp: 'D S 10/24/2020 18:25:43'!
invalidLocation

	^'Invalid Location'! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 18:26:09' prior: 50900919!
test34
	| aLocation aCardinalPoint|
	aLocation := 'NotAValidLocation'.
	aCardinalPoint := 'N'.	
	
	^ [MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (MarsRover invalidLocation)).
].
! !

!testRun: #MarsRoverTest #test34 stamp: 'D S 10/24/2020 18:26:13'!
FAILURE!

!testRun: #MarsRoverTest #test34 stamp: 'D S 10/24/2020 18:26:13'!
FAILURE!
!MarsRover class methodsFor: 'instance creation' stamp: 'D S 10/24/2020 18:26:34' prior: 50900937!
deployInLocation: aLocation andPointing: aCardinalPoint 
	
	(aCardinalPoint ~= 'N' and: aCardinalPoint ~= 'S' and: aCardinalPoint ~= 'E' and: aCardinalPoint ~= 'O') ifTrue:
		[self error: (self invalidCardinalPoint: aCardinalPoint)].
	(aLocation class ~~ Point) ifTrue: [self error: (self invalidLocation aLocation)].	
	^self new initializeMarsRoverInLocation: aLocation andPointing: aCardinalPoint.! !
!MarsRover class methodsFor: 'instance creation' stamp: 'D S 10/24/2020 18:26:38' prior: 50900975!
deployInLocation: aLocation andPointing: aCardinalPoint 
	
	(aCardinalPoint ~= 'N' and: aCardinalPoint ~= 'S' and: aCardinalPoint ~= 'E' and: aCardinalPoint ~= 'O') ifTrue:
		[self error: (self invalidCardinalPoint: aCardinalPoint)].
	(aLocation class ~~ Point) ifTrue: [self error: (self invalidLocation)].	
	^self new initializeMarsRoverInLocation: aLocation andPointing: aCardinalPoint.! !

!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test26 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test27 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test28 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test29 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test30 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test31 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test32 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test33 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!

!testRun: #MarsRoverTest #test34 stamp: 'D S 10/24/2020 18:26:44'!
PASSED!


!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test26 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test27 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test28 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test29 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test30 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test31 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test32 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test33 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!

!testRun: #MarsRoverTest #test34 stamp: 'D S 10/24/2020 22:10:48'!
PASSED!


!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test26 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test27 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test28 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test29 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test30 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test31 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test32 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test33 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!

!testRun: #MarsRoverTest #test34 stamp: 'D S 10/24/2020 22:11:24'!
PASSED!


!testRun: #MarsRoverTest #test01 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test26 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test27 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test28 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test29 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test30 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test31 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test32 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test33 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!

!testRun: #MarsRoverTest #test34 stamp: 'D S 10/24/2020 22:11:53'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:12:50'!
test01InitializeWithIndicatedLocation
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.
	
	self assert: (aMarsRover location) equals: 2@2 ! !

!methodRemoval: MarsRoverTest #test01 stamp: 'D S 10/24/2020 22:12:50'!
test01
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.
	
	self assert: (aMarsRover location) equals: 2@2 !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:13:33'!
test02InitializeWithIndicatedCardinalPoint
	| aMarsRover aLocation aCardinalPoint|
	
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.
	
	self assert: (aMarsRover pointing) equals: 'N' ! !

!methodRemoval: MarsRoverTest #test02 stamp: 'D S 10/24/2020 22:13:33'!
test02
	| aMarsRover aLocation aCardinalPoint|
	
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.
	
	self assert: (aMarsRover pointing) equals: 'N' !

!methodRemoval: MarsRoverTest #test03 stamp: 'D S 10/24/2020 22:14:18'!
test03
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	self assert: (aMarsRover location) equals: 3@3 !

!methodRemoval: MarsRoverTest #test04 stamp: 'D S 10/24/2020 22:14:21'!
test04
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'S'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	self assert: (aMarsRover pointing) equals: 'S' !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:16:29'!
test05SendingfCommandIncreaseXCoordinateByOne
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 3@2. ! !

!methodRemoval: MarsRoverTest #test05 stamp: 'D S 10/24/2020 22:16:29'!
test05
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 3@2. !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:16:42'!
test05SendingfCommandWhilePointingNorthIncreaseXCoordinateByOne
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 3@2. ! !

!methodRemoval: MarsRoverTest #test05SendingfCommandIncreaseXCoordinateByOne stamp: 'D S 10/24/2020 22:16:42'!
test05SendingfCommandIncreaseXCoordinateByOne
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 3@2. !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:17:18'!
test06SendingfCommandWhilePointingSouthDecreaseXCoordinateByOne
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'S'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 1@2. ! !

!methodRemoval: MarsRoverTest #test06 stamp: 'D S 10/24/2020 22:17:18'!
test06
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'S'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 1@2. !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:17:56'!
test07SendingfCommandWhilePointingWestDecreaseYCoordinateByOne
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'O'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 2@1. ! !

!methodRemoval: MarsRoverTest #test07 stamp: 'D S 10/24/2020 22:17:56'!
test07
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'O'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 2@1. !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:18:25'!
test08SendingfCommandWhilePointingEastIncreaseYCoordinateByOne
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'E'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 2@3. ! !

!methodRemoval: MarsRoverTest #test08 stamp: 'D S 10/24/2020 22:18:25'!
test08
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'E'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 2@3. !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:18:37'!
test03SendingfCommandWhilePointingNorthIncreaseXCoordinateByOne
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 3@2. ! !

!methodRemoval: MarsRoverTest #test05SendingfCommandWhilePointingNorthIncreaseXCoordinateByOne stamp: 'D S 10/24/2020 22:18:37'!
test05SendingfCommandWhilePointingNorthIncreaseXCoordinateByOne
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 3@2. !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:18:43'!
test04SendingfCommandWhilePointingSouthDecreaseXCoordinateByOne
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'S'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 1@2. ! !

!methodRemoval: MarsRoverTest #test06SendingfCommandWhilePointingSouthDecreaseXCoordinateByOne stamp: 'D S 10/24/2020 22:18:43'!
test06SendingfCommandWhilePointingSouthDecreaseXCoordinateByOne
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'S'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 1@2. !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:18:48'!
test05SendingfCommandWhilePointingWestDecreaseYCoordinateByOne
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'O'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 2@1. ! !

!methodRemoval: MarsRoverTest #test07SendingfCommandWhilePointingWestDecreaseYCoordinateByOne stamp: 'D S 10/24/2020 22:18:48'!
test07SendingfCommandWhilePointingWestDecreaseYCoordinateByOne
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'O'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 2@1. !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:18:53'!
test06SendingfCommandWhilePointingEastIncreaseYCoordinateByOne
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'E'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 2@3. ! !

!methodRemoval: MarsRoverTest #test08SendingfCommandWhilePointingEastIncreaseYCoordinateByOne stamp: 'D S 10/24/2020 22:18:53'!
test08SendingfCommandWhilePointingEastIncreaseYCoordinateByOne
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'E'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 2@3. !

!methodRemoval: MarsRoverTest #test09 stamp: 'D S 10/24/2020 22:19:09'!
test09
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 4@3. !

!methodRemoval: MarsRoverTest #test10 stamp: 'D S 10/24/2020 22:19:12'!
test10
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'S'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 2@3. !

!methodRemoval: MarsRoverTest #test11 stamp: 'D S 10/24/2020 22:19:15'!
test11
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'O'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 3@2. !

!methodRemoval: MarsRoverTest #test12 stamp: 'D S 10/24/2020 22:19:19'!
test12
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'E'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 3@4. !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:20:10'!
test07SendingbCommandWhilePointingNorthDecreaseXCoordinateByOne
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'b'.
	self assert: aMarsRover location equals: 1@2. ! !

!methodRemoval: MarsRoverTest #test13 stamp: 'D S 10/24/2020 22:20:10'!
test13
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'b'.
	self assert: aMarsRover location equals: 1@2. !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:20:31'!
test08SendingbCommandWhilePointingSouthIncreaseXCoordinateByOne
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'S'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'b'.
	self assert: aMarsRover location equals: 3@2. ! !

!methodRemoval: MarsRoverTest #test14 stamp: 'D S 10/24/2020 22:20:31'!
test14
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'S'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'b'.
	self assert: aMarsRover location equals: 3@2. !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:21:05'!
test09SendingbCommandWhilePointingWestIncreaseYCoordinateByOne
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'O'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'b'.
	self assert: aMarsRover location equals: 2@3. ! !

!methodRemoval: MarsRoverTest #test15 stamp: 'D S 10/24/2020 22:21:05'!
test15
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'O'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'b'.
	self assert: aMarsRover location equals: 2@3. !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:21:45'!
test10SendingbCommandWhilePointingEastDecreaseYCoordinateByOne
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'E'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'b'.
	self assert: aMarsRover location equals: 2@1. ! !

!methodRemoval: MarsRoverTest #test16 stamp: 'D S 10/24/2020 22:21:45'!
test16
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'E'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'b'.
	self assert: aMarsRover location equals: 2@1. !

!methodRemoval: MarsRoverTest #test17 stamp: 'D S 10/24/2020 22:21:51'!
test17
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'b'.
	self assert: aMarsRover location equals: 2@3. !

!methodRemoval: MarsRoverTest #test18 stamp: 'D S 10/24/2020 22:21:54'!
test18
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'S'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'b'.
	self assert: aMarsRover location equals: 4@3. !

!methodRemoval: MarsRoverTest #test19 stamp: 'D S 10/24/2020 22:21:58'!
test19
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'O'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'b'.
	self assert: aMarsRover location equals: 3@4. !

!methodRemoval: MarsRoverTest #test20 stamp: 'D S 10/24/2020 22:22:01'!
test20
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'E'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'b'.
	self assert: aMarsRover location equals: 3@2. !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:26:48'!
test11SendinglCommandChargeNCardinalPointToWest
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'l'.
	self assert: aMarsRover pointing equals: 'O'. ! !

!methodRemoval: MarsRoverTest #test21 stamp: 'D S 10/24/2020 22:26:48'!
test21
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'l'.
	self assert: aMarsRover pointing equals: 'O'. !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:27:19'!
test12SendinglCommandChangeWestCardinalPointToSouth
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'O'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'l'.
	self assert: aMarsRover pointing equals: 'S'. ! !

!methodRemoval: MarsRoverTest #test22 stamp: 'D S 10/24/2020 22:27:19'!
test22
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'O'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'l'.
	self assert: aMarsRover pointing equals: 'S'. !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:27:35'!
test11SendinglCommandChangeNorthCardinalPointToWest
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'l'.
	self assert: aMarsRover pointing equals: 'O'. ! !

!methodRemoval: MarsRoverTest #test11SendinglCommandChargeNCardinalPointToWest stamp: 'D S 10/24/2020 22:27:35'!
test11SendinglCommandChargeNCardinalPointToWest
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'l'.
	self assert: aMarsRover pointing equals: 'O'. !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:27:53'!
test13SendinglCommandChangeSouthCardinalPointToEast
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'S'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'l'.
	self assert: aMarsRover pointing equals: 'E'. ! !

!methodRemoval: MarsRoverTest #test23 stamp: 'D S 10/24/2020 22:27:53'!
test23
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'S'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'l'.
	self assert: aMarsRover pointing equals: 'E'. !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:28:15'!
test14SendinglCommandChangeEastCardinalPointToNorth
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'E'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'l'.
	self assert: aMarsRover pointing equals: 'N'. ! !

!methodRemoval: MarsRoverTest #test24 stamp: 'D S 10/24/2020 22:28:15'!
test24
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'E'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'l'.
	self assert: aMarsRover pointing equals: 'N'. !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:28:47'!
test15SendingrCommandChangeNorthCardinalPointToEast
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'r'.
	self assert: aMarsRover pointing equals: 'E'. ! !

!methodRemoval: MarsRoverTest #test25 stamp: 'D S 10/24/2020 22:28:47'!
test25
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'r'.
	self assert: aMarsRover pointing equals: 'E'. !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:29:06'!
test16SendingrCommandChangeEastCardinalPointToSouth
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'E'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'r'.
	self assert: aMarsRover pointing equals: 'S'. ! !

!methodRemoval: MarsRoverTest #test26 stamp: 'D S 10/24/2020 22:29:06'!
test26
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'E'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'r'.
	self assert: aMarsRover pointing equals: 'S'. !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:29:30'!
test17SendingrCommandChangeSouthCardinalPointToWest
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'S'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'r'.
	self assert: aMarsRover pointing equals: 'O'. ! !

!methodRemoval: MarsRoverTest #test27 stamp: 'D S 10/24/2020 22:29:30'!
test27
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'S'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'r'.
	self assert: aMarsRover pointing equals: 'O'. !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:29:50'!
test18SendingrCommandChangeWestCardinalPointToNorth
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'O'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'r'.
	self assert: aMarsRover pointing equals: 'N'. ! !

!methodRemoval: MarsRoverTest #test28 stamp: 'D S 10/24/2020 22:29:50'!
test28
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'O'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'r'.
	self assert: aMarsRover pointing equals: 'N'. !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:30:38' prior: 50899260!
test29
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'rf'.
	self assert: 'E' equals: aMarsRover pointing.
	self assert: (3@4) equals: aMarsRover location.

! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:31:03'!
test19SendingMoreThanOneCommandExecutesCorrectly
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'rf'.
	self assert: 'E' equals: aMarsRover pointing.
	self assert: (3@4) equals: aMarsRover location.

! !

!methodRemoval: MarsRoverTest #test29 stamp: 'D S 10/24/2020 22:31:03'!
test29
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'rf'.
	self assert: 'E' equals: aMarsRover pointing.
	self assert: (3@4) equals: aMarsRover location.

!

!methodRemoval: MarsRoverTest #test30 stamp: 'D S 10/24/2020 22:31:30'!
test30
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 3@3.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'rf'.
	self assert: (3@4) equals: aMarsRover location.
!

!methodRemoval: MarsRoverTest #test31 stamp: 'D S 10/24/2020 22:31:35'!
test31
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'rf'.
	self assert: (2@3) equals: aMarsRover location.
!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:32:26'!
test20SendingInvalidCommandsStopsExecutionOfCommands
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	
	^ [aMarsRover sendCommands: 'r$%&f'.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (MarsRover invalidCommand: $$)).
			self assert: 'E' equals: aMarsRover pointing.
			self assert: (2@2) equals: aMarsRover location .
].
! !

!methodRemoval: MarsRoverTest #test32 stamp: 'D S 10/24/2020 22:32:26'!
test32
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	
	^ [aMarsRover sendCommands: 'r$%&f'.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (MarsRover invalidCommand: $$)).
			self assert: 'E' equals: aMarsRover pointing.
			self assert: (2@2) equals: aMarsRover location .
].
!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:32:42'!
test20SendingInvalidCommandsStopsExecutionOfCommandsAndGenerateError
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	
	^ [aMarsRover sendCommands: 'r$%&f'.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (MarsRover invalidCommand: $$)).
			self assert: 'E' equals: aMarsRover pointing.
			self assert: (2@2) equals: aMarsRover location .
].
! !

!methodRemoval: MarsRoverTest #test20SendingInvalidCommandsStopsExecutionOfCommands stamp: 'D S 10/24/2020 22:32:42'!
test20SendingInvalidCommandsStopsExecutionOfCommands
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	
	^ [aMarsRover sendCommands: 'r$%&f'.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (MarsRover invalidCommand: $$)).
			self assert: 'E' equals: aMarsRover pointing.
			self assert: (2@2) equals: aMarsRover location .
].
!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:33:09'!
test21RaiseErrorWhenInitialazingWithInvalidCardinalPoint
	| aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'NonValid'.	
	
	^ [MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (MarsRover invalidCardinalPoint: aCardinalPoint)).
].
! !

!methodRemoval: MarsRoverTest #test33 stamp: 'D S 10/24/2020 22:33:09'!
test33
	| aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'NonValid'.	
	
	^ [MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (MarsRover invalidCardinalPoint: aCardinalPoint)).
].
!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:33:35'!
test22RaiseErrorWhenInitialazingWithInvalidLocation
	| aLocation aCardinalPoint|
	aLocation := 'NotAValidLocation'.
	aCardinalPoint := 'N'.	
	
	^ [MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (MarsRover invalidLocation)).
].
! !

!methodRemoval: MarsRoverTest #test34 stamp: 'D S 10/24/2020 22:33:35'!
test34
	| aLocation aCardinalPoint|
	aLocation := 'NotAValidLocation'.
	aCardinalPoint := 'N'.	
	
	^ [MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (MarsRover invalidLocation)).
].
!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:33:52'!
test21RaiseErrorWhenInitializingWithInvalidCardinalPoint
	| aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'NonValid'.	
	
	^ [MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (MarsRover invalidCardinalPoint: aCardinalPoint)).
].
! !

!methodRemoval: MarsRoverTest #test21RaiseErrorWhenInitialazingWithInvalidCardinalPoint stamp: 'D S 10/24/2020 22:33:52'!
test21RaiseErrorWhenInitialazingWithInvalidCardinalPoint
	| aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'NonValid'.	
	
	^ [MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (MarsRover invalidCardinalPoint: aCardinalPoint)).
].
!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:34:00'!
test22RaiseErrorWhenInitializingWithInvalidLocation
	| aLocation aCardinalPoint|
	aLocation := 'NotAValidLocation'.
	aCardinalPoint := 'N'.	
	
	^ [MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (MarsRover invalidLocation)).
].
! !

!methodRemoval: MarsRoverTest #test22RaiseErrorWhenInitialazingWithInvalidLocation stamp: 'D S 10/24/2020 22:34:00'!
test22RaiseErrorWhenInitialazingWithInvalidLocation
	| aLocation aCardinalPoint|
	aLocation := 'NotAValidLocation'.
	aCardinalPoint := 'N'.	
	
	^ [MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (MarsRover invalidLocation)).
].
!

!testRun: #MarsRoverTest #test01InitializeWithIndicatedLocation stamp: 'D S 10/24/2020 22:34:02'!
PASSED!

!testRun: #MarsRoverTest #test02InitializeWithIndicatedCardinalPoint stamp: 'D S 10/24/2020 22:34:02'!
PASSED!

!testRun: #MarsRoverTest #test03SendingfCommandWhilePointingNorthIncreaseXCoordinateByOne stamp: 'D S 10/24/2020 22:34:02'!
PASSED!

!testRun: #MarsRoverTest #test04SendingfCommandWhilePointingSouthDecreaseXCoordinateByOne stamp: 'D S 10/24/2020 22:34:02'!
PASSED!

!testRun: #MarsRoverTest #test05SendingfCommandWhilePointingWestDecreaseYCoordinateByOne stamp: 'D S 10/24/2020 22:34:02'!
PASSED!

!testRun: #MarsRoverTest #test06SendingfCommandWhilePointingEastIncreaseYCoordinateByOne stamp: 'D S 10/24/2020 22:34:02'!
PASSED!

!testRun: #MarsRoverTest #test07SendingbCommandWhilePointingNorthDecreaseXCoordinateByOne stamp: 'D S 10/24/2020 22:34:02'!
PASSED!

!testRun: #MarsRoverTest #test08SendingbCommandWhilePointingSouthIncreaseXCoordinateByOne stamp: 'D S 10/24/2020 22:34:02'!
PASSED!

!testRun: #MarsRoverTest #test09SendingbCommandWhilePointingWestIncreaseYCoordinateByOne stamp: 'D S 10/24/2020 22:34:02'!
PASSED!

!testRun: #MarsRoverTest #test10SendingbCommandWhilePointingEastDecreaseYCoordinateByOne stamp: 'D S 10/24/2020 22:34:02'!
PASSED!

!testRun: #MarsRoverTest #test11SendinglCommandChangeNorthCardinalPointToWest stamp: 'D S 10/24/2020 22:34:02'!
PASSED!

!testRun: #MarsRoverTest #test12SendinglCommandChangeWestCardinalPointToSouth stamp: 'D S 10/24/2020 22:34:02'!
PASSED!

!testRun: #MarsRoverTest #test13SendinglCommandChangeSouthCardinalPointToEast stamp: 'D S 10/24/2020 22:34:02'!
PASSED!

!testRun: #MarsRoverTest #test14SendinglCommandChangeEastCardinalPointToNorth stamp: 'D S 10/24/2020 22:34:02'!
PASSED!

!testRun: #MarsRoverTest #test15SendingrCommandChangeNorthCardinalPointToEast stamp: 'D S 10/24/2020 22:34:02'!
PASSED!

!testRun: #MarsRoverTest #test16SendingrCommandChangeEastCardinalPointToSouth stamp: 'D S 10/24/2020 22:34:02'!
PASSED!

!testRun: #MarsRoverTest #test17SendingrCommandChangeSouthCardinalPointToWest stamp: 'D S 10/24/2020 22:34:02'!
PASSED!

!testRun: #MarsRoverTest #test18SendingrCommandChangeWestCardinalPointToNorth stamp: 'D S 10/24/2020 22:34:02'!
PASSED!

!testRun: #MarsRoverTest #test19SendingMoreThanOneCommandExecutesCorrectly stamp: 'D S 10/24/2020 22:34:02'!
PASSED!

!testRun: #MarsRoverTest #test20SendingInvalidCommandsStopsExecutionOfCommandsAndGenerateError stamp: 'D S 10/24/2020 22:34:02'!
PASSED!

!testRun: #MarsRoverTest #test21RaiseErrorWhenInitializingWithInvalidCardinalPoint stamp: 'D S 10/24/2020 22:34:02'!
PASSED!

!testRun: #MarsRoverTest #test22RaiseErrorWhenInitializingWithInvalidLocation stamp: 'D S 10/24/2020 22:34:02'!
PASSED!

!testRun: #MarsRoverTest #test01InitializeWithIndicatedLocation stamp: 'D S 10/24/2020 22:37:05'!
PASSED!

!testRun: #MarsRoverTest #test02InitializeWithIndicatedCardinalPoint stamp: 'D S 10/24/2020 22:37:05'!
PASSED!

!testRun: #MarsRoverTest #test03SendingfCommandWhilePointingNorthIncreaseXCoordinateByOne stamp: 'D S 10/24/2020 22:37:05'!
PASSED!

!testRun: #MarsRoverTest #test04SendingfCommandWhilePointingSouthDecreaseXCoordinateByOne stamp: 'D S 10/24/2020 22:37:05'!
PASSED!

!testRun: #MarsRoverTest #test05SendingfCommandWhilePointingWestDecreaseYCoordinateByOne stamp: 'D S 10/24/2020 22:37:05'!
PASSED!

!testRun: #MarsRoverTest #test06SendingfCommandWhilePointingEastIncreaseYCoordinateByOne stamp: 'D S 10/24/2020 22:37:05'!
PASSED!

!testRun: #MarsRoverTest #test07SendingbCommandWhilePointingNorthDecreaseXCoordinateByOne stamp: 'D S 10/24/2020 22:37:05'!
PASSED!

!testRun: #MarsRoverTest #test08SendingbCommandWhilePointingSouthIncreaseXCoordinateByOne stamp: 'D S 10/24/2020 22:37:05'!
PASSED!

!testRun: #MarsRoverTest #test09SendingbCommandWhilePointingWestIncreaseYCoordinateByOne stamp: 'D S 10/24/2020 22:37:05'!
PASSED!

!testRun: #MarsRoverTest #test10SendingbCommandWhilePointingEastDecreaseYCoordinateByOne stamp: 'D S 10/24/2020 22:37:05'!
PASSED!

!testRun: #MarsRoverTest #test11SendinglCommandChangeNorthCardinalPointToWest stamp: 'D S 10/24/2020 22:37:05'!
PASSED!

!testRun: #MarsRoverTest #test12SendinglCommandChangeWestCardinalPointToSouth stamp: 'D S 10/24/2020 22:37:05'!
PASSED!

!testRun: #MarsRoverTest #test13SendinglCommandChangeSouthCardinalPointToEast stamp: 'D S 10/24/2020 22:37:05'!
PASSED!

!testRun: #MarsRoverTest #test14SendinglCommandChangeEastCardinalPointToNorth stamp: 'D S 10/24/2020 22:37:05'!
PASSED!

!testRun: #MarsRoverTest #test15SendingrCommandChangeNorthCardinalPointToEast stamp: 'D S 10/24/2020 22:37:05'!
PASSED!

!testRun: #MarsRoverTest #test16SendingrCommandChangeEastCardinalPointToSouth stamp: 'D S 10/24/2020 22:37:05'!
PASSED!

!testRun: #MarsRoverTest #test17SendingrCommandChangeSouthCardinalPointToWest stamp: 'D S 10/24/2020 22:37:05'!
PASSED!

!testRun: #MarsRoverTest #test18SendingrCommandChangeWestCardinalPointToNorth stamp: 'D S 10/24/2020 22:37:05'!
PASSED!

!testRun: #MarsRoverTest #test19SendingMoreThanOneCommandExecutesCorrectly stamp: 'D S 10/24/2020 22:37:05'!
PASSED!

!testRun: #MarsRoverTest #test20SendingInvalidCommandsStopsExecutionOfCommandsAndGenerateError stamp: 'D S 10/24/2020 22:37:05'!
PASSED!

!testRun: #MarsRoverTest #test21RaiseErrorWhenInitializingWithInvalidCardinalPoint stamp: 'D S 10/24/2020 22:37:05'!
PASSED!

!testRun: #MarsRoverTest #test22RaiseErrorWhenInitializingWithInvalidLocation stamp: 'D S 10/24/2020 22:37:05'!
PASSED!
!MarsRover methodsFor: 'movement --PRIVATE--' stamp: 'D S 10/24/2020 22:38:00'!
executefCommand

! !
!MarsRover methodsFor: 'movement --PRIVATE--' stamp: 'D S 10/24/2020 22:38:22' prior: 50902393!
executefCommand

	cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
	cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
	cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
	cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
! !
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 22:38:51' prior: 50900311!
sendCommands: aStringOfCommands
	
	aStringOfCommands do: [: aCharacter |
		aCharacter = $f ifTrue:[self executefCommand	].
		aCharacter = $b ifTrue: [
			cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
			cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
			cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
			cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) - 1)].
		].	
	
		aCharacter = $l ifTrue: [
			cardinalPoint = 'E' ifTrue:[cardinalPoint := 'N']
			ifFalse:[
				cardinalPoint = 'S' ifTrue:[cardinalPoint := 'E'].
				cardinalPoint = 'O' ifTrue:[cardinalPoint := 'S'].
				cardinalPoint = 'N' ifTrue:[cardinalPoint := 'O'].
			]
		].
		aCharacter = $r ifTrue:[
			cardinalPoint = 'O' ifTrue: [cardinalPoint := 'N']
			ifFalse:[
				cardinalPoint = 'S' ifTrue: [cardinalPoint := 'O'].
				cardinalPoint = 'E' ifTrue: [cardinalPoint := 'S'].
				cardinalPoint = 'N' ifTrue: [cardinalPoint := 'E'].
			]
		].
		(aCharacter ~= $r and: (aCharacter ~= $l and: (aCharacter ~= $f and: (aCharacter ~= $b)))) ifTrue:[
			self error: (self class invalidCommand: aCharacter).
			].

	]! !
!MarsRover methodsFor: 'movement --PRIVATE--' stamp: 'D S 10/24/2020 22:39:13'!
executebCommand

	cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
	cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
	cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
	cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
! !
!MarsRover methodsFor: 'movement --PRIVATE--' stamp: 'D S 10/24/2020 22:39:32' prior: 50902450!
executebCommand

	cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
	cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
	cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
	cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) - 1)].
! !
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 22:39:51' prior: 50902410!
sendCommands: aStringOfCommands
	
	aStringOfCommands do: [: aCharacter |
		aCharacter = $f ifTrue:[self executefCommand	].
		aCharacter = $b ifTrue: [self executebCommand].	
	
		aCharacter = $l ifTrue: [
			cardinalPoint = 'E' ifTrue:[cardinalPoint := 'N']
			ifFalse:[
				cardinalPoint = 'S' ifTrue:[cardinalPoint := 'E'].
				cardinalPoint = 'O' ifTrue:[cardinalPoint := 'S'].
				cardinalPoint = 'N' ifTrue:[cardinalPoint := 'O'].
			]
		].
		aCharacter = $r ifTrue:[
			cardinalPoint = 'O' ifTrue: [cardinalPoint := 'N']
			ifFalse:[
				cardinalPoint = 'S' ifTrue: [cardinalPoint := 'O'].
				cardinalPoint = 'E' ifTrue: [cardinalPoint := 'S'].
				cardinalPoint = 'N' ifTrue: [cardinalPoint := 'E'].
			]
		].
		(aCharacter ~= $r and: (aCharacter ~= $l and: (aCharacter ~= $f and: (aCharacter ~= $b)))) ifTrue:[
			self error: (self class invalidCommand: aCharacter).
			].

	]! !
!MarsRover methodsFor: 'movement --PRIVATE--' stamp: 'D S 10/24/2020 22:40:27'!
executelCommand

	cardinalPoint = 'E' ifTrue:[cardinalPoint := 'N']
	ifFalse:[
		cardinalPoint = 'S' ifTrue:[cardinalPoint := 'E'].
		cardinalPoint = 'O' ifTrue:[cardinalPoint := 'S'].
		cardinalPoint = 'N' ifTrue:[cardinalPoint := 'O'].
	]
! !
!MarsRover methodsFor: 'movement --PRIVATE--' stamp: 'D S 10/24/2020 22:42:18'!
executerCommand

	cardinalPoint = 'O' ifTrue: [cardinalPoint := 'N']
	ifFalse:[
		cardinalPoint = 'S' ifTrue: [cardinalPoint := 'O'].
		cardinalPoint = 'E' ifTrue: [cardinalPoint := 'S'].
		cardinalPoint = 'N' ifTrue: [cardinalPoint := 'E'].
	]
	
! !
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 22:43:32' prior: 50902477!
sendCommands: aStringOfCommands
	
	aStringOfCommands do: [: aCharacter |
		aCharacter = $f ifTrue:[self executefCommand	].
		aCharacter = $b ifTrue: [self executebCommand].	
	
		aCharacter = $l ifTrue: [self executelCommand].
		aCharacter = $r ifTrue:[self executerCommand		].
		(aCharacter ~= $r and: (aCharacter ~= $l and: (aCharacter ~= $f and: (aCharacter ~= $b)))) 
		ifTrue:[	self error: (self class invalidCommand: aCharacter).].

	]! !
!MarsRover methodsFor: 'movement --PRIVATE--' stamp: 'D S 10/24/2020 22:43:45'!
executeCommandb

	cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
	cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
	cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
	cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) - 1)].
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'D S 10/24/2020 22:43:45' prior: 50902530!
sendCommands: aStringOfCommands
	
	aStringOfCommands do: [: aCharacter |
		aCharacter = $f ifTrue:[self executefCommand	].
		aCharacter = $b ifTrue: [self executeCommandb].	
	
		aCharacter = $l ifTrue: [self executelCommand].
		aCharacter = $r ifTrue:[self executerCommand		].
		(aCharacter ~= $r and: (aCharacter ~= $l and: (aCharacter ~= $f and: (aCharacter ~= $b)))) 
		ifTrue:[	self error: (self class invalidCommand: aCharacter).].

	]! !

!methodRemoval: MarsRover #executebCommand stamp: 'D S 10/24/2020 22:43:45'!
executebCommand

	cardinalPoint = 'N' ifTrue:[location := (location x) - 1 @ (location y)].
	cardinalPoint = 'S' ifTrue:[location := (location x) + 1 @ (location y)].
	cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) + 1)].
	cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) - 1)].
!
!MarsRover methodsFor: 'movement --PRIVATE--' stamp: 'D S 10/24/2020 22:43:57'!
executeCommandf

	cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
	cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
	cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
	cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'D S 10/24/2020 22:43:57' prior: 50902561!
sendCommands: aStringOfCommands
	
	aStringOfCommands do: [: aCharacter |
		aCharacter = $f ifTrue:[self executeCommandf	].
		aCharacter = $b ifTrue: [self executeCommandb].	
	
		aCharacter = $l ifTrue: [self executelCommand].
		aCharacter = $r ifTrue:[self executerCommand		].
		(aCharacter ~= $r and: (aCharacter ~= $l and: (aCharacter ~= $f and: (aCharacter ~= $b)))) 
		ifTrue:[	self error: (self class invalidCommand: aCharacter).].

	]! !

!methodRemoval: MarsRover #executefCommand stamp: 'D S 10/24/2020 22:43:57'!
executefCommand

	cardinalPoint = 'N' ifTrue:[location := (location x) + 1 @ (location y)].
	cardinalPoint = 'S' ifTrue:[location := (location x) - 1 @ (location y)].
	cardinalPoint = 'O' ifTrue:[location := (location x) @ ((location y) - 1)].
	cardinalPoint = 'E' ifTrue:[location := (location x) @ ((location y) + 1)].
!
!MarsRover methodsFor: 'movement --PRIVATE--' stamp: 'D S 10/24/2020 22:44:07'!
executeCommandl

	cardinalPoint = 'E' ifTrue:[cardinalPoint := 'N']
	ifFalse:[
		cardinalPoint = 'S' ifTrue:[cardinalPoint := 'E'].
		cardinalPoint = 'O' ifTrue:[cardinalPoint := 'S'].
		cardinalPoint = 'N' ifTrue:[cardinalPoint := 'O'].
	]
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'D S 10/24/2020 22:44:07' prior: 50902604!
sendCommands: aStringOfCommands
	
	aStringOfCommands do: [: aCharacter |
		aCharacter = $f ifTrue:[self executeCommandf	].
		aCharacter = $b ifTrue: [self executeCommandb].	
	
		aCharacter = $l ifTrue: [self executeCommandl].
		aCharacter = $r ifTrue:[self executerCommand		].
		(aCharacter ~= $r and: (aCharacter ~= $l and: (aCharacter ~= $f and: (aCharacter ~= $b)))) 
		ifTrue:[	self error: (self class invalidCommand: aCharacter).].

	]! !

!methodRemoval: MarsRover #executelCommand stamp: 'D S 10/24/2020 22:44:07'!
executelCommand

	cardinalPoint = 'E' ifTrue:[cardinalPoint := 'N']
	ifFalse:[
		cardinalPoint = 'S' ifTrue:[cardinalPoint := 'E'].
		cardinalPoint = 'O' ifTrue:[cardinalPoint := 'S'].
		cardinalPoint = 'N' ifTrue:[cardinalPoint := 'O'].
	]
!
!MarsRover methodsFor: 'movement --PRIVATE--' stamp: 'D S 10/24/2020 22:44:42'!
executeCommandr

	cardinalPoint = 'O' ifTrue: [cardinalPoint := 'N']
	ifFalse:[
		cardinalPoint = 'S' ifTrue: [cardinalPoint := 'O'].
		cardinalPoint = 'E' ifTrue: [cardinalPoint := 'S'].
		cardinalPoint = 'N' ifTrue: [cardinalPoint := 'E'].
	]
	
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'D S 10/24/2020 22:44:42' prior: 50902644!
sendCommands: aStringOfCommands
	
	aStringOfCommands do: [: aCharacter |
		aCharacter = $f ifTrue:[self executeCommandf	].
		aCharacter = $b ifTrue: [self executeCommandb].	
	
		aCharacter = $l ifTrue: [self executeCommandl].
		aCharacter = $r ifTrue:[self executeCommandr		].
		(aCharacter ~= $r and: (aCharacter ~= $l and: (aCharacter ~= $f and: (aCharacter ~= $b)))) 
		ifTrue:[	self error: (self class invalidCommand: aCharacter).].

	]! !

!methodRemoval: MarsRover #executerCommand stamp: 'D S 10/24/2020 22:44:42'!
executerCommand

	cardinalPoint = 'O' ifTrue: [cardinalPoint := 'N']
	ifFalse:[
		cardinalPoint = 'S' ifTrue: [cardinalPoint := 'O'].
		cardinalPoint = 'E' ifTrue: [cardinalPoint := 'S'].
		cardinalPoint = 'N' ifTrue: [cardinalPoint := 'E'].
	]
	
!

!testRun: #MarsRoverTest #test01InitializeWithIndicatedLocation stamp: 'D S 10/24/2020 22:44:48'!
PASSED!

!testRun: #MarsRoverTest #test02InitializeWithIndicatedCardinalPoint stamp: 'D S 10/24/2020 22:44:48'!
PASSED!

!testRun: #MarsRoverTest #test03SendingfCommandWhilePointingNorthIncreaseXCoordinateByOne stamp: 'D S 10/24/2020 22:44:48'!
PASSED!

!testRun: #MarsRoverTest #test04SendingfCommandWhilePointingSouthDecreaseXCoordinateByOne stamp: 'D S 10/24/2020 22:44:48'!
PASSED!

!testRun: #MarsRoverTest #test05SendingfCommandWhilePointingWestDecreaseYCoordinateByOne stamp: 'D S 10/24/2020 22:44:48'!
PASSED!

!testRun: #MarsRoverTest #test06SendingfCommandWhilePointingEastIncreaseYCoordinateByOne stamp: 'D S 10/24/2020 22:44:48'!
PASSED!

!testRun: #MarsRoverTest #test07SendingbCommandWhilePointingNorthDecreaseXCoordinateByOne stamp: 'D S 10/24/2020 22:44:48'!
PASSED!

!testRun: #MarsRoverTest #test08SendingbCommandWhilePointingSouthIncreaseXCoordinateByOne stamp: 'D S 10/24/2020 22:44:48'!
PASSED!

!testRun: #MarsRoverTest #test09SendingbCommandWhilePointingWestIncreaseYCoordinateByOne stamp: 'D S 10/24/2020 22:44:48'!
PASSED!

!testRun: #MarsRoverTest #test10SendingbCommandWhilePointingEastDecreaseYCoordinateByOne stamp: 'D S 10/24/2020 22:44:48'!
PASSED!

!testRun: #MarsRoverTest #test11SendinglCommandChangeNorthCardinalPointToWest stamp: 'D S 10/24/2020 22:44:48'!
PASSED!

!testRun: #MarsRoverTest #test12SendinglCommandChangeWestCardinalPointToSouth stamp: 'D S 10/24/2020 22:44:48'!
PASSED!

!testRun: #MarsRoverTest #test13SendinglCommandChangeSouthCardinalPointToEast stamp: 'D S 10/24/2020 22:44:48'!
PASSED!

!testRun: #MarsRoverTest #test14SendinglCommandChangeEastCardinalPointToNorth stamp: 'D S 10/24/2020 22:44:48'!
PASSED!

!testRun: #MarsRoverTest #test15SendingrCommandChangeNorthCardinalPointToEast stamp: 'D S 10/24/2020 22:44:48'!
PASSED!

!testRun: #MarsRoverTest #test16SendingrCommandChangeEastCardinalPointToSouth stamp: 'D S 10/24/2020 22:44:48'!
PASSED!

!testRun: #MarsRoverTest #test17SendingrCommandChangeSouthCardinalPointToWest stamp: 'D S 10/24/2020 22:44:48'!
PASSED!

!testRun: #MarsRoverTest #test18SendingrCommandChangeWestCardinalPointToNorth stamp: 'D S 10/24/2020 22:44:48'!
PASSED!

!testRun: #MarsRoverTest #test19SendingMoreThanOneCommandExecutesCorrectly stamp: 'D S 10/24/2020 22:44:48'!
PASSED!

!testRun: #MarsRoverTest #test20SendingInvalidCommandsStopsExecutionOfCommandsAndGenerateError stamp: 'D S 10/24/2020 22:44:48'!
PASSED!

!testRun: #MarsRoverTest #test21RaiseErrorWhenInitializingWithInvalidCardinalPoint stamp: 'D S 10/24/2020 22:44:48'!
PASSED!

!testRun: #MarsRoverTest #test22RaiseErrorWhenInitializingWithInvalidLocation stamp: 'D S 10/24/2020 22:44:48'!
PASSED!
!MarsRover methodsFor: 'movement' stamp: 'D S 10/24/2020 22:45:08' prior: 50902682!
sendCommands: aStringOfCommands
	
	aStringOfCommands do: [: aCharacter |
		aCharacter = $f ifTrue:[self executeCommandf	].
		aCharacter = $b ifTrue: [self executeCommandb].	
	
		aCharacter = $l ifTrue: [self executeCommandl].
		aCharacter = $r ifTrue:[self executeCommandr		].
		(aCharacter ~= $r and: (aCharacter ~= $l and: (aCharacter ~= $f and: (aCharacter ~= $b)))) 
		ifTrue:[	self error: (self class invalidCommand: aCharacter).].
	]! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:45:22' prior: 50901962!
test18SendingrCommandChangeWestCardinalPointToNorth
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'O'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'r'.
	self assert: aMarsRover pointing equals: 'N'. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:45:31' prior: 50901997!
test19SendingMoreThanOneCommandExecutesCorrectly
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'rf'.
	self assert: 'E' equals: aMarsRover pointing.
	self assert: (2@3) equals: aMarsRover location.

! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:45:40' prior: 50901940!
test17SendingrCommandChangeSouthCardinalPointToWest
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'S'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'r'.
	self assert: aMarsRover pointing equals: 'O'. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:45:44' prior: 50901918!
test16SendingrCommandChangeEastCardinalPointToSouth
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'E'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'r'.
	self assert: aMarsRover pointing equals: 'S'. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:45:48' prior: 50901896!
test15SendingrCommandChangeNorthCardinalPointToEast
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'r'.
	self assert: aMarsRover pointing equals: 'E'. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:45:56' prior: 50901874!
test14SendinglCommandChangeEastCardinalPointToNorth
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'E'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'l'.
	self assert: aMarsRover pointing equals: 'N'. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:45:59' prior: 50901852!
test13SendinglCommandChangeSouthCardinalPointToEast
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'S'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'l'.
	self assert: aMarsRover pointing equals: 'E'. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:46:10' prior: 50901827!
test11SendinglCommandChangeNorthCardinalPointToWest
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'N'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'l'.
	self assert: aMarsRover pointing equals: 'O'. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:46:14' prior: 50901805!
test12SendinglCommandChangeWestCardinalPointToSouth
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'O'.
	aMarsRover := MarsRover deployInLocation: aLocation andPointing: aCardinalPoint.	
	
	aMarsRover sendCommands: 'l'.
	self assert: aMarsRover pointing equals: 'S'. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:48:41'!
initializeWithLocationX2Y2AndCardinalPoint: aCardinalPoint

	^MarsRover deployInLocation: 2@2 andPointing: aCardinalPoint. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:49:27' prior: 50901330!
test01InitializeWithIndicatedLocation
	| aMarsRover aCardinalPoint|
	aCardinalPoint := 'N'.
	aMarsRover := self initializeWithLocationX2Y2AndCardinalPoint: aCardinalPoint.
	
	self assert: (aMarsRover location) equals: 2@2 ! !

!testRun: #MarsRoverTest #test01InitializeWithIndicatedLocation stamp: 'D S 10/24/2020 22:49:32'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:49:53' prior: 50901350!
test02InitializeWithIndicatedCardinalPoint
	| aMarsRover aCardinalPoint|
	
	aCardinalPoint := 'N'.
	aMarsRover := self initializeWithLocationX2Y2AndCardinalPoint: aCardinalPoint	.
	
	self assert: (aMarsRover pointing) equals: 'N' ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:50:05' prior: 50901505!
test03SendingfCommandWhilePointingNorthIncreaseXCoordinateByOne
	| aMarsRover aCardinalPoint|
	aCardinalPoint := 'N'.
	aMarsRover := self initializeWithLocationX2Y2AndCardinalPoint: aCardinalPoint	.
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 3@2. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:50:35' prior: 50901531!
test04SendingfCommandWhilePointingSouthDecreaseXCoordinateByOne
	| aMarsRover aCardinalPoint|
	aCardinalPoint := 'S'.
	aMarsRover := self initializeWithLocationX2Y2AndCardinalPoint: aCardinalPoint	.
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 1@2. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:51:07' prior: 50901557!
test05SendingfCommandWhilePointingWestDecreaseYCoordinateByOne
	| aMarsRover aCardinalPoint|
	aCardinalPoint := 'O'.
	aMarsRover := self initializeWithLocationX2Y2AndCardinalPoint: aCardinalPoint	.
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 2@1. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:51:13' prior: 50901583!
test06SendingfCommandWhilePointingEastIncreaseYCoordinateByOne
	| aMarsRover aLocation aCardinalPoint|
	aCardinalPoint := 'E'.
	aMarsRover := self initializeWithLocationX2Y2AndCardinalPoint: aCardinalPoint	.
	
	aMarsRover sendCommands: 'f'.
	self assert: aMarsRover location equals: 2@3. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:51:21' prior: 50901650!
test07SendingbCommandWhilePointingNorthDecreaseXCoordinateByOne
	| aMarsRover aCardinalPoint|
	aCardinalPoint := 'N'.
	aMarsRover := self initializeWithLocationX2Y2AndCardinalPoint: aCardinalPoint	.
	
	aMarsRover sendCommands: 'b'.
	self assert: aMarsRover location equals: 1@2. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:51:27' prior: 50901673!
test08SendingbCommandWhilePointingSouthIncreaseXCoordinateByOne
	| aMarsRover aCardinalPoint|
	aCardinalPoint := 'S'.
	aMarsRover := self initializeWithLocationX2Y2AndCardinalPoint: aCardinalPoint	.
	
	aMarsRover sendCommands: 'b'.
	self assert: aMarsRover location equals: 3@2. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:51:35' prior: 50901696!
test09SendingbCommandWhilePointingWestIncreaseYCoordinateByOne
	| aMarsRover aCardinalPoint|
	aCardinalPoint := 'O'.
	aMarsRover := self initializeWithLocationX2Y2AndCardinalPoint: aCardinalPoint	.
	
	aMarsRover sendCommands: 'b'.
	self assert: aMarsRover location equals: 2@3. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:51:42' prior: 50901719!
test10SendingbCommandWhilePointingEastDecreaseYCoordinateByOne
	| aMarsRover aLocation aCardinalPoint|
	aLocation := 2@2.
	aCardinalPoint := 'E'.
	aMarsRover := self initializeWithLocationX2Y2AndCardinalPoint: aCardinalPoint	.
	
	aMarsRover sendCommands: 'b'.
	self assert: aMarsRover location equals: 2@1. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:51:45' prior: 50903044!
test10SendingbCommandWhilePointingEastDecreaseYCoordinateByOne
	| aMarsRover aCardinalPoint|
	aCardinalPoint := 'E'.
	aMarsRover := self initializeWithLocationX2Y2AndCardinalPoint: aCardinalPoint	.
	
	aMarsRover sendCommands: 'b'.
	self assert: aMarsRover location equals: 2@1. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:51:51' prior: 50902904!
test11SendinglCommandChangeNorthCardinalPointToWest
	| aMarsRover aCardinalPoint|
	aCardinalPoint := 'N'.
	aMarsRover := self initializeWithLocationX2Y2AndCardinalPoint: aCardinalPoint	.
	
	aMarsRover sendCommands: 'l'.
	self assert: aMarsRover pointing equals: 'O'. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:51:57' prior: 50902917!
test12SendinglCommandChangeWestCardinalPointToSouth
	| aMarsRover aCardinalPoint|
	aCardinalPoint := 'O'.
	aMarsRover := self initializeWithLocationX2Y2AndCardinalPoint: aCardinalPoint	.
	
	aMarsRover sendCommands: 'l'.
	self assert: aMarsRover pointing equals: 'S'. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:52:03' prior: 50902891!
test13SendinglCommandChangeSouthCardinalPointToEast
	| aMarsRover aCardinalPoint|
	aCardinalPoint := 'S'.
	aMarsRover := self initializeWithLocationX2Y2AndCardinalPoint: aCardinalPoint	.
	
	aMarsRover sendCommands: 'l'.
	self assert: aMarsRover pointing equals: 'E'. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:52:09' prior: 50902878!
test14SendinglCommandChangeEastCardinalPointToNorth
	| aMarsRover aCardinalPoint|
	aCardinalPoint := 'E'.
	aMarsRover := self initializeWithLocationX2Y2AndCardinalPoint: aCardinalPoint	.
	
	aMarsRover sendCommands: 'l'.
	self assert: aMarsRover pointing equals: 'N'. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:52:14' prior: 50902865!
test15SendingrCommandChangeNorthCardinalPointToEast
	| aMarsRover aCardinalPoint|
	aCardinalPoint := 'N'.
	aMarsRover := self initializeWithLocationX2Y2AndCardinalPoint: aCardinalPoint	.
	
	aMarsRover sendCommands: 'r'.
	self assert: aMarsRover pointing equals: 'E'. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:52:21' prior: 50902852!
test16SendingrCommandChangeEastCardinalPointToSouth
	| aMarsRover aCardinalPoint|
	aCardinalPoint := 'E'.
	aMarsRover := self initializeWithLocationX2Y2AndCardinalPoint: aCardinalPoint	.
	
	aMarsRover sendCommands: 'r'.
	self assert: aMarsRover pointing equals: 'S'. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:52:27' prior: 50902839!
test17SendingrCommandChangeSouthCardinalPointToWest
	| aMarsRover aCardinalPoint|
	aCardinalPoint := 'S'.
	aMarsRover := self initializeWithLocationX2Y2AndCardinalPoint: aCardinalPoint	.
	
	aMarsRover sendCommands: 'r'.
	self assert: aMarsRover pointing equals: 'O'. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:52:33' prior: 50902812!
test18SendingrCommandChangeWestCardinalPointToNorth
	| aMarsRover aCardinalPoint|
	aCardinalPoint := 'O'.
	aMarsRover := self initializeWithLocationX2Y2AndCardinalPoint: aCardinalPoint	.
	
	aMarsRover sendCommands: 'r'.
	self assert: aMarsRover pointing equals: 'N'. ! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:52:39' prior: 50902825!
test19SendingMoreThanOneCommandExecutesCorrectly
	| aMarsRover aCardinalPoint|
	aCardinalPoint := 'N'.
	aMarsRover := self initializeWithLocationX2Y2AndCardinalPoint: aCardinalPoint	.
	
	aMarsRover sendCommands: 'rf'.
	self assert: 'E' equals: aMarsRover pointing.
	self assert: (2@3) equals: aMarsRover location.

! !
!MarsRoverTest methodsFor: 'tests' stamp: 'D S 10/24/2020 22:52:47' prior: 50902077!
test20SendingInvalidCommandsStopsExecutionOfCommandsAndGenerateError
	| aMarsRover aCardinalPoint|
	aCardinalPoint := 'N'.
	aMarsRover := self initializeWithLocationX2Y2AndCardinalPoint: aCardinalPoint	.
	
	
	^ [aMarsRover sendCommands: 'r$%&f'.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (MarsRover invalidCommand: $$)).
			self assert: 'E' equals: aMarsRover pointing.
			self assert: (2@2) equals: aMarsRover location .
].
! !

!testRun: #MarsRoverTest #test01InitializeWithIndicatedLocation stamp: 'D S 10/24/2020 22:53:26'!
PASSED!

!testRun: #MarsRoverTest #test02InitializeWithIndicatedCardinalPoint stamp: 'D S 10/24/2020 22:53:26'!
PASSED!

!testRun: #MarsRoverTest #test03SendingfCommandWhilePointingNorthIncreaseXCoordinateByOne stamp: 'D S 10/24/2020 22:53:26'!
PASSED!

!testRun: #MarsRoverTest #test04SendingfCommandWhilePointingSouthDecreaseXCoordinateByOne stamp: 'D S 10/24/2020 22:53:26'!
PASSED!

!testRun: #MarsRoverTest #test05SendingfCommandWhilePointingWestDecreaseYCoordinateByOne stamp: 'D S 10/24/2020 22:53:26'!
PASSED!

!testRun: #MarsRoverTest #test06SendingfCommandWhilePointingEastIncreaseYCoordinateByOne stamp: 'D S 10/24/2020 22:53:26'!
PASSED!

!testRun: #MarsRoverTest #test07SendingbCommandWhilePointingNorthDecreaseXCoordinateByOne stamp: 'D S 10/24/2020 22:53:26'!
PASSED!

!testRun: #MarsRoverTest #test08SendingbCommandWhilePointingSouthIncreaseXCoordinateByOne stamp: 'D S 10/24/2020 22:53:26'!
PASSED!

!testRun: #MarsRoverTest #test09SendingbCommandWhilePointingWestIncreaseYCoordinateByOne stamp: 'D S 10/24/2020 22:53:26'!
PASSED!

!testRun: #MarsRoverTest #test10SendingbCommandWhilePointingEastDecreaseYCoordinateByOne stamp: 'D S 10/24/2020 22:53:26'!
PASSED!

!testRun: #MarsRoverTest #test11SendinglCommandChangeNorthCardinalPointToWest stamp: 'D S 10/24/2020 22:53:26'!
PASSED!

!testRun: #MarsRoverTest #test12SendinglCommandChangeWestCardinalPointToSouth stamp: 'D S 10/24/2020 22:53:26'!
PASSED!

!testRun: #MarsRoverTest #test13SendinglCommandChangeSouthCardinalPointToEast stamp: 'D S 10/24/2020 22:53:26'!
PASSED!

!testRun: #MarsRoverTest #test14SendinglCommandChangeEastCardinalPointToNorth stamp: 'D S 10/24/2020 22:53:26'!
PASSED!

!testRun: #MarsRoverTest #test15SendingrCommandChangeNorthCardinalPointToEast stamp: 'D S 10/24/2020 22:53:26'!
PASSED!

!testRun: #MarsRoverTest #test16SendingrCommandChangeEastCardinalPointToSouth stamp: 'D S 10/24/2020 22:53:26'!
PASSED!

!testRun: #MarsRoverTest #test17SendingrCommandChangeSouthCardinalPointToWest stamp: 'D S 10/24/2020 22:53:26'!
PASSED!

!testRun: #MarsRoverTest #test18SendingrCommandChangeWestCardinalPointToNorth stamp: 'D S 10/24/2020 22:53:26'!
PASSED!

!testRun: #MarsRoverTest #test19SendingMoreThanOneCommandExecutesCorrectly stamp: 'D S 10/24/2020 22:53:26'!
PASSED!

!testRun: #MarsRoverTest #test20SendingInvalidCommandsStopsExecutionOfCommandsAndGenerateError stamp: 'D S 10/24/2020 22:53:26'!
PASSED!

!testRun: #MarsRoverTest #test21RaiseErrorWhenInitializingWithInvalidCardinalPoint stamp: 'D S 10/24/2020 22:53:26'!
PASSED!

!testRun: #MarsRoverTest #test22RaiseErrorWhenInitializingWithInvalidLocation stamp: 'D S 10/24/2020 22:53:26'!
PASSED!

!testRun: #MarsRoverTest #test01InitializeWithIndicatedLocation stamp: 'D S 10/24/2020 22:53:58'!
PASSED!

!testRun: #MarsRoverTest #test02InitializeWithIndicatedCardinalPoint stamp: 'D S 10/24/2020 22:53:58'!
PASSED!

!testRun: #MarsRoverTest #test03SendingfCommandWhilePointingNorthIncreaseXCoordinateByOne stamp: 'D S 10/24/2020 22:53:58'!
PASSED!

!testRun: #MarsRoverTest #test04SendingfCommandWhilePointingSouthDecreaseXCoordinateByOne stamp: 'D S 10/24/2020 22:53:58'!
PASSED!

!testRun: #MarsRoverTest #test05SendingfCommandWhilePointingWestDecreaseYCoordinateByOne stamp: 'D S 10/24/2020 22:53:58'!
PASSED!

!testRun: #MarsRoverTest #test06SendingfCommandWhilePointingEastIncreaseYCoordinateByOne stamp: 'D S 10/24/2020 22:53:58'!
PASSED!

!testRun: #MarsRoverTest #test07SendingbCommandWhilePointingNorthDecreaseXCoordinateByOne stamp: 'D S 10/24/2020 22:53:58'!
PASSED!

!testRun: #MarsRoverTest #test08SendingbCommandWhilePointingSouthIncreaseXCoordinateByOne stamp: 'D S 10/24/2020 22:53:58'!
PASSED!

!testRun: #MarsRoverTest #test09SendingbCommandWhilePointingWestIncreaseYCoordinateByOne stamp: 'D S 10/24/2020 22:53:58'!
PASSED!

!testRun: #MarsRoverTest #test10SendingbCommandWhilePointingEastDecreaseYCoordinateByOne stamp: 'D S 10/24/2020 22:53:58'!
PASSED!

!testRun: #MarsRoverTest #test11SendinglCommandChangeNorthCardinalPointToWest stamp: 'D S 10/24/2020 22:53:58'!
PASSED!

!testRun: #MarsRoverTest #test12SendinglCommandChangeWestCardinalPointToSouth stamp: 'D S 10/24/2020 22:53:58'!
PASSED!

!testRun: #MarsRoverTest #test13SendinglCommandChangeSouthCardinalPointToEast stamp: 'D S 10/24/2020 22:53:58'!
PASSED!

!testRun: #MarsRoverTest #test14SendinglCommandChangeEastCardinalPointToNorth stamp: 'D S 10/24/2020 22:53:58'!
PASSED!

!testRun: #MarsRoverTest #test15SendingrCommandChangeNorthCardinalPointToEast stamp: 'D S 10/24/2020 22:53:58'!
PASSED!

!testRun: #MarsRoverTest #test16SendingrCommandChangeEastCardinalPointToSouth stamp: 'D S 10/24/2020 22:53:58'!
PASSED!

!testRun: #MarsRoverTest #test17SendingrCommandChangeSouthCardinalPointToWest stamp: 'D S 10/24/2020 22:53:58'!
PASSED!

!testRun: #MarsRoverTest #test18SendingrCommandChangeWestCardinalPointToNorth stamp: 'D S 10/24/2020 22:53:58'!
PASSED!

!testRun: #MarsRoverTest #test19SendingMoreThanOneCommandExecutesCorrectly stamp: 'D S 10/24/2020 22:53:58'!
PASSED!

!testRun: #MarsRoverTest #test20SendingInvalidCommandsStopsExecutionOfCommandsAndGenerateError stamp: 'D S 10/24/2020 22:53:58'!
PASSED!

!testRun: #MarsRoverTest #test21RaiseErrorWhenInitializingWithInvalidCardinalPoint stamp: 'D S 10/24/2020 22:53:58'!
PASSED!

!testRun: #MarsRoverTest #test22RaiseErrorWhenInitializingWithInvalidLocation stamp: 'D S 10/24/2020 22:53:58'!
PASSED!

----SNAPSHOT----(24 October 2020 22:54:06) CuisUniversity-4383.image priorSource: 18036419!

!testRun: #MarsRoverTest #test01InitializeWithIndicatedLocation stamp: 'D S 10/24/2020 22:56:38'!
PASSED!

!testRun: #MarsRoverTest #test02InitializeWithIndicatedCardinalPoint stamp: 'D S 10/24/2020 22:56:38'!
PASSED!

!testRun: #MarsRoverTest #test03SendingfCommandWhilePointingNorthIncreaseXCoordinateByOne stamp: 'D S 10/24/2020 22:56:38'!
PASSED!

!testRun: #MarsRoverTest #test04SendingfCommandWhilePointingSouthDecreaseXCoordinateByOne stamp: 'D S 10/24/2020 22:56:38'!
PASSED!

!testRun: #MarsRoverTest #test05SendingfCommandWhilePointingWestDecreaseYCoordinateByOne stamp: 'D S 10/24/2020 22:56:38'!
PASSED!

!testRun: #MarsRoverTest #test06SendingfCommandWhilePointingEastIncreaseYCoordinateByOne stamp: 'D S 10/24/2020 22:56:38'!
PASSED!

!testRun: #MarsRoverTest #test07SendingbCommandWhilePointingNorthDecreaseXCoordinateByOne stamp: 'D S 10/24/2020 22:56:38'!
PASSED!

!testRun: #MarsRoverTest #test08SendingbCommandWhilePointingSouthIncreaseXCoordinateByOne stamp: 'D S 10/24/2020 22:56:38'!
PASSED!

!testRun: #MarsRoverTest #test09SendingbCommandWhilePointingWestIncreaseYCoordinateByOne stamp: 'D S 10/24/2020 22:56:38'!
PASSED!

!testRun: #MarsRoverTest #test10SendingbCommandWhilePointingEastDecreaseYCoordinateByOne stamp: 'D S 10/24/2020 22:56:38'!
PASSED!

!testRun: #MarsRoverTest #test11SendinglCommandChangeNorthCardinalPointToWest stamp: 'D S 10/24/2020 22:56:38'!
PASSED!

!testRun: #MarsRoverTest #test12SendinglCommandChangeWestCardinalPointToSouth stamp: 'D S 10/24/2020 22:56:38'!
PASSED!

!testRun: #MarsRoverTest #test13SendinglCommandChangeSouthCardinalPointToEast stamp: 'D S 10/24/2020 22:56:38'!
PASSED!

!testRun: #MarsRoverTest #test14SendinglCommandChangeEastCardinalPointToNorth stamp: 'D S 10/24/2020 22:56:38'!
PASSED!

!testRun: #MarsRoverTest #test15SendingrCommandChangeNorthCardinalPointToEast stamp: 'D S 10/24/2020 22:56:38'!
PASSED!

!testRun: #MarsRoverTest #test16SendingrCommandChangeEastCardinalPointToSouth stamp: 'D S 10/24/2020 22:56:38'!
PASSED!

!testRun: #MarsRoverTest #test17SendingrCommandChangeSouthCardinalPointToWest stamp: 'D S 10/24/2020 22:56:38'!
PASSED!

!testRun: #MarsRoverTest #test18SendingrCommandChangeWestCardinalPointToNorth stamp: 'D S 10/24/2020 22:56:38'!
PASSED!

!testRun: #MarsRoverTest #test19SendingMoreThanOneCommandExecutesCorrectly stamp: 'D S 10/24/2020 22:56:38'!
PASSED!

!testRun: #MarsRoverTest #test20SendingInvalidCommandsStopsExecutionOfCommandsAndGenerateError stamp: 'D S 10/24/2020 22:56:38'!
PASSED!

!testRun: #MarsRoverTest #test21RaiseErrorWhenInitializingWithInvalidCardinalPoint stamp: 'D S 10/24/2020 22:56:38'!
PASSED!

!testRun: #MarsRoverTest #test22RaiseErrorWhenInitializingWithInvalidLocation stamp: 'D S 10/24/2020 22:56:38'!
PASSED!

----QUIT----(24 October 2020 23:44:07) CuisUniversity-4383.image priorSource: 18294931!

----STARTUP---- (25 October 2020 17:43:30) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisUniversity/CuisUniversity-4383.image!


Object subclass: #EndOfStackNode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #EndOfStackNode category: 'Stack-Exercise' stamp: 'D S 10/25/2020 17:44:56'!
Object subclass: #EndOfStackNode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #StringNode
	instanceVariableNames: 'value next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StringNode category: 'Stack-Exercise' stamp: 'D S 10/25/2020 17:45:01'!
Object subclass: #StringNode
	instanceVariableNames: 'value next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'D S 10/25/2020 17:45:06'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'D S 10/25/2020 17:45:06'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'D S 10/25/2020 17:45:06'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'D S 10/25/2020 17:45:06'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'D S 10/25/2020 17:45:06'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'D S 10/25/2020 17:45:06'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'D S 10/25/2020 17:45:06'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'D S 10/25/2020 17:45:06'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'D S 10/25/2020 17:45:06'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'D S 10/25/2020 17:45:06'!
PASSED!

----STARTUP---- (26 October 2020 15:28:44) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisUniversity/CuisUniversity-4383.image!


!testRun: #MarsRoverTest #test01InitializeWithIndicatedLocation stamp: 'D S 10/26/2020 15:29:16'!
PASSED!

!testRun: #MarsRoverTest #test02InitializeWithIndicatedCardinalPoint stamp: 'D S 10/26/2020 15:29:16'!
PASSED!

!testRun: #MarsRoverTest #test03SendingfCommandWhilePointingNorthIncreaseXCoordinateByOne stamp: 'D S 10/26/2020 15:29:16'!
PASSED!

!testRun: #MarsRoverTest #test04SendingfCommandWhilePointingSouthDecreaseXCoordinateByOne stamp: 'D S 10/26/2020 15:29:16'!
PASSED!

!testRun: #MarsRoverTest #test05SendingfCommandWhilePointingWestDecreaseYCoordinateByOne stamp: 'D S 10/26/2020 15:29:16'!
PASSED!

!testRun: #MarsRoverTest #test06SendingfCommandWhilePointingEastIncreaseYCoordinateByOne stamp: 'D S 10/26/2020 15:29:16'!
PASSED!

!testRun: #MarsRoverTest #test07SendingbCommandWhilePointingNorthDecreaseXCoordinateByOne stamp: 'D S 10/26/2020 15:29:16'!
PASSED!

!testRun: #MarsRoverTest #test08SendingbCommandWhilePointingSouthIncreaseXCoordinateByOne stamp: 'D S 10/26/2020 15:29:16'!
PASSED!

!testRun: #MarsRoverTest #test09SendingbCommandWhilePointingWestIncreaseYCoordinateByOne stamp: 'D S 10/26/2020 15:29:16'!
PASSED!

!testRun: #MarsRoverTest #test10SendingbCommandWhilePointingEastDecreaseYCoordinateByOne stamp: 'D S 10/26/2020 15:29:16'!
PASSED!

!testRun: #MarsRoverTest #test11SendinglCommandChangeNorthCardinalPointToWest stamp: 'D S 10/26/2020 15:29:16'!
PASSED!

!testRun: #MarsRoverTest #test12SendinglCommandChangeWestCardinalPointToSouth stamp: 'D S 10/26/2020 15:29:16'!
PASSED!

!testRun: #MarsRoverTest #test13SendinglCommandChangeSouthCardinalPointToEast stamp: 'D S 10/26/2020 15:29:16'!
PASSED!

!testRun: #MarsRoverTest #test14SendinglCommandChangeEastCardinalPointToNorth stamp: 'D S 10/26/2020 15:29:16'!
PASSED!

!testRun: #MarsRoverTest #test15SendingrCommandChangeNorthCardinalPointToEast stamp: 'D S 10/26/2020 15:29:16'!
PASSED!

!testRun: #MarsRoverTest #test16SendingrCommandChangeEastCardinalPointToSouth stamp: 'D S 10/26/2020 15:29:16'!
PASSED!

!testRun: #MarsRoverTest #test17SendingrCommandChangeSouthCardinalPointToWest stamp: 'D S 10/26/2020 15:29:16'!
PASSED!

!testRun: #MarsRoverTest #test18SendingrCommandChangeWestCardinalPointToNorth stamp: 'D S 10/26/2020 15:29:16'!
PASSED!

!testRun: #MarsRoverTest #test19SendingMoreThanOneCommandExecutesCorrectly stamp: 'D S 10/26/2020 15:29:16'!
PASSED!

!testRun: #MarsRoverTest #test20SendingInvalidCommandsStopsExecutionOfCommandsAndGenerateError stamp: 'D S 10/26/2020 15:29:16'!
PASSED!

!testRun: #MarsRoverTest #test21RaiseErrorWhenInitializingWithInvalidCardinalPoint stamp: 'D S 10/26/2020 15:29:16'!
PASSED!

!testRun: #MarsRoverTest #test22RaiseErrorWhenInitializingWithInvalidLocation stamp: 'D S 10/26/2020 15:29:16'!
PASSED!

----STARTUP---- (29 October 2020 17:10:00) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisUniversity/CuisUniversity-4383.image!


Object subclass: #Table
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!

!classDefinition: #Table category: 'Terni-Lapilli' stamp: 'D S 10/29/2020 17:39:09'!
Object subclass: #Table
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!

TestCase subclass: #TableTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!

!classDefinition: #TableTest category: 'Terni-Lapilli' stamp: 'D S 10/29/2020 17:41:33'!
TestCase subclass: #TableTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!
!TableTest methodsFor: 'no messages' stamp: 'D S 10/29/2020 17:42:57'!
test01PlayersHave3TokenWhenGameStarts! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 17:45:05' prior: 50903575!
test01PlayersHave3TokenWhenGameStarts

	|aGame|
	aGame := Table startGame.
	
	self assert: 3 equals: aGame playerXRemainingTokens.
	self assert: 3 equals: aGame playerORemainingTokens.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 17:45:32'!
ERROR!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 17:45:32'!
ERROR!
!Table class methodsFor: 'instance creation' stamp: 'D S 10/29/2020 17:45:51'!
startGame
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeStartGame! !
!Table class methodsFor: 'instance creation' stamp: 'D S 10/29/2020 17:46:11' prior: 50903595!
startGame
	
	^self new initializeGame.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 17:46:17'!
ERROR!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 17:46:17'!
ERROR!
!Table methodsFor: 'initialize' stamp: 'D S 10/29/2020 17:46:32'!
initializeGame
	self shouldBeImplemented.! !

!classDefinition: #Table category: 'Terni-Lapilli' stamp: 'D S 10/29/2020 17:47:12'!
Object subclass: #Table
	instanceVariableNames: 'playerORemainingTokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!

!classDefinition: #Table category: 'Terni-Lapilli' stamp: 'D S 10/29/2020 17:47:14'!
Object subclass: #Table
	instanceVariableNames: 'playerORemainingTokens playerXRemainingTokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!
!Table methodsFor: 'initialize' stamp: 'D S 10/29/2020 17:47:00' prior: 50903613!
initializeGame
	playerORemainingTokens := 3.
	playerXRemainingTokens := 3.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 17:47:34'!
ERROR!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 17:47:34'!
ERROR!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 17:47:44'!
playerXRemainingTokens
	self shouldBeImplemented.
	^playerXRemainingTokens! !
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 17:47:51' prior: 50903644!
playerXRemainingTokens
	
	^playerXRemainingTokens! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 17:47:57'!
ERROR!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 17:47:57'!
ERROR!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 17:48:03'!
playerORemainingTokens
	self shouldBeImplemented.
	^playerORemainingTokens! !
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 17:48:10' prior: 50903660!
playerORemainingTokens
	
	^playerORemainingTokens! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 17:48:15'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 17:51:14'!
test02PlayerXMovesFirst

	|aGame|
	aGame := Table startGame.
	
	self assert: aGame isPlayingX.! !

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 17:51:36'!
ERROR!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 17:51:36'!
ERROR!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 17:52:09'!
isPlayingX
	self shouldBeImplemented.! !
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 17:52:25' prior: 50903684!
isPlayingX
	
	^true.! !

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 17:52:31'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 17:53:15'!
test03PlayerODoesntMovesFirst

	|aGame|
	aGame := Table startGame.
	
	self deny: aGame isPlayingO.! !

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 17:53:21'!
ERROR!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 17:53:21'!
ERROR!
!Table methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 17:53:44'!
isPlayingO
	self shouldBeImplemented.! !
!Table methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 17:53:59' prior: 50903706!
isPlayingO
	
	^False.! !
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 17:54:16' prior: 50903711!
isPlayingO
	
	^false.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 17:54:19'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 17:54:19'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 17:54:19'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 17:59:58'!
test04

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	
	self assert: 0@0 equals: aGame positionXTokens.! !

!testRun: #TableTest #test04 stamp: 'D S 10/29/2020 18:00:28'!
ERROR!

!testRun: #TableTest #test04 stamp: 'D S 10/29/2020 18:00:28'!
ERROR!
!Table methodsFor: 'actions' stamp: 'D S 10/29/2020 18:00:54'!
putXAt: aPoint 
	self shouldBeImplemented.! !

!classDefinition: #Table category: 'Terni-Lapilli' stamp: 'D S 10/29/2020 18:01:45'!
Object subclass: #Table
	instanceVariableNames: 'playerORemainingTokens playerXRemainingTokens positionXTokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!
!Table methodsFor: 'actions' stamp: 'D S 10/29/2020 18:01:39' prior: 50903739!
putXAt: aPoint 
	
	positionXTokens := 0@0.! !

!testRun: #TableTest #test04 stamp: 'D S 10/29/2020 18:01:58'!
ERROR!

!testRun: #TableTest #test04 stamp: 'D S 10/29/2020 18:01:58'!
ERROR!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 18:02:05'!
positionXTokens
	self shouldBeImplemented.
	^positionXTokens! !
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 18:02:18' prior: 50903760!
positionXTokens
	
	^positionXTokens! !

!testRun: #TableTest #test04 stamp: 'D S 10/29/2020 18:02:24'!
PASSED!

----SNAPSHOT----(29 October 2020 18:02:36) CuisUniversity-4383.image priorSource: 18297774!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:03:22'!
test05

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putYAt: 1@1.
	
	self assert: 1@1 equals: aGame positionYTokens.! !

!testRun: #TableTest #test05 stamp: 'D S 10/29/2020 18:04:02'!
ERROR!

!testRun: #TableTest #test05 stamp: 'D S 10/29/2020 18:04:02'!
ERROR!
!Table methodsFor: 'actions' stamp: 'D S 10/29/2020 18:04:12'!
putYAt: aPoint 
	self shouldBeImplemented.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:04:34' prior: 50903774!
test05

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putYAt: 1@1.

	self assert: 1@1 equals: aGame positionYTokens.! !

!classDefinition: #Table category: 'Terni-Lapilli' stamp: 'D S 10/29/2020 18:05:07'!
Object subclass: #Table
	instanceVariableNames: 'playerORemainingTokens playerXRemainingTokens positionXTokens positionYTokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!
!Table methodsFor: 'actions' stamp: 'D S 10/29/2020 18:05:05' prior: 50903785!
putYAt: aPoint 
	
	positionYTokens := aPoint.! !
!Table methodsFor: 'actions' stamp: 'D S 10/29/2020 18:05:16' prior: 50903752!
putXAt: aPoint 
	
	positionXTokens := aPoint.! !

!testRun: #TableTest #test05 stamp: 'D S 10/29/2020 18:08:04'!
ERROR!

!testRun: #TableTest #test05 stamp: 'D S 10/29/2020 18:08:04'!
ERROR!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 18:08:35'!
positionYTokens
	self shouldBeImplemented.
	^positionYTokens! !
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 18:08:38' prior: 50903818!
positionYTokens
	
	^positionYTokens! !

!testRun: #TableTest #test05 stamp: 'D S 10/29/2020 18:08:44'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:09:27'!
test06

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.

	self deny: aGame isPlayingX .! !

!testRun: #TableTest #test06 stamp: 'D S 10/29/2020 18:09:30'!
FAILURE!

!testRun: #TableTest #test06 stamp: 'D S 10/29/2020 18:09:30'!
FAILURE!

Object subclass: #Table
	instanceVariableNames:   'playerORemainingTokens 
						playerXRemainingTokens 
						positionXTokens 
						positionYTokens
						isXTurn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!

!classDefinition: #Table category: 'Terni-Lapilli' stamp: 'D S 10/29/2020 18:10:28'!
Object subclass: #Table
	instanceVariableNames: 'playerORemainingTokens playerXRemainingTokens positionXTokens positionYTokens isXTurn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!
!Table methodsFor: 'initialize' stamp: 'D S 10/29/2020 18:13:10' prior: 50903633!
initializeGame
	playerORemainingTokens := 3.
	playerXRemainingTokens := 3.
	isXTurn := true! !
!Table methodsFor: 'actions' stamp: 'D S 10/29/2020 18:13:43' prior: 50903810!
putXAt: aPoint 
	
	positionXTokens := aPoint.
	isXTurn := false! !
!Table methodsFor: 'actions' stamp: 'D S 10/29/2020 18:13:45' prior: 50903862!
putXAt: aPoint 
	
	positionXTokens := aPoint.
	isXTurn := false.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 18:13:50'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 18:13:50'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 18:13:50'!
PASSED!

!testRun: #TableTest #test04 stamp: 'D S 10/29/2020 18:13:50'!
PASSED!

!testRun: #TableTest #test05 stamp: 'D S 10/29/2020 18:13:50'!
PASSED!

!testRun: #TableTest #test06 stamp: 'D S 10/29/2020 18:13:50'!
FAILURE!

!testRun: #TableTest #test06 stamp: 'D S 10/29/2020 18:13:50'!
FAILURE!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 18:14:04'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 18:14:04'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 18:14:04'!
PASSED!

!testRun: #TableTest #test04 stamp: 'D S 10/29/2020 18:14:04'!
PASSED!

!testRun: #TableTest #test05 stamp: 'D S 10/29/2020 18:14:04'!
PASSED!

!testRun: #TableTest #test06 stamp: 'D S 10/29/2020 18:14:04'!
FAILURE!

!testRun: #TableTest #test06 stamp: 'D S 10/29/2020 18:14:04'!
FAILURE!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 18:14:48' prior: 50903688!
isPlayingX
	
	^isXTurn.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 18:14:50'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 18:14:51'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 18:14:51'!
PASSED!

!testRun: #TableTest #test04 stamp: 'D S 10/29/2020 18:14:51'!
PASSED!

!testRun: #TableTest #test05 stamp: 'D S 10/29/2020 18:14:51'!
PASSED!

!testRun: #TableTest #test06 stamp: 'D S 10/29/2020 18:14:51'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:24:44'!
test07

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.

	self assert: aGame isPlayingO.! !
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 18:25:00'!
positionOTokens
	
	^positionYTokens! !

!methodRemoval: Table #positionYTokens stamp: 'D S 10/29/2020 18:25:00'!
positionYTokens
	
	^positionYTokens!

!classDefinition: #Table category: 'Terni-Lapilli' stamp: 'D S 10/29/2020 18:25:35'!
Object subclass: #Table
	instanceVariableNames: 'playerORemainingTokens playerXRemainingTokens positionXTokens positionOTokens isXTurn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!
!Table methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:25:35' prior: 50903934!
positionOTokens
	
	^positionOTokens! !
!Table methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:25:35' prior: 50903806!
putYAt: aPoint 
	
	positionOTokens := aPoint.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 18:25:48'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 18:25:48'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 18:25:48'!
PASSED!

!testRun: #TableTest #test04 stamp: 'D S 10/29/2020 18:25:48'!
PASSED!

!testRun: #TableTest #test05 stamp: 'D S 10/29/2020 18:25:48'!
ERROR!

!testRun: #TableTest #test06 stamp: 'D S 10/29/2020 18:25:48'!
PASSED!

!testRun: #TableTest #test07 stamp: 'D S 10/29/2020 18:25:48'!
FAILURE!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:26:03' prior: 50903790!
test05

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putYAt: 1@1.

	self assert: 1@1 equals: aGame positionOTokens.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 18:26:07'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 18:26:07'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 18:26:07'!
PASSED!

!testRun: #TableTest #test04 stamp: 'D S 10/29/2020 18:26:07'!
PASSED!

!testRun: #TableTest #test05 stamp: 'D S 10/29/2020 18:26:07'!
PASSED!

!testRun: #TableTest #test06 stamp: 'D S 10/29/2020 18:26:07'!
PASSED!

!testRun: #TableTest #test07 stamp: 'D S 10/29/2020 18:26:07'!
FAILURE!

!testRun: #TableTest #test07 stamp: 'D S 10/29/2020 18:26:07'!
FAILURE!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 18:27:09' prior: 50903715!
isPlayingO
	
	^(isXTurn not).! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 18:27:12'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 18:27:12'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 18:27:12'!
PASSED!

!testRun: #TableTest #test04 stamp: 'D S 10/29/2020 18:27:12'!
PASSED!

!testRun: #TableTest #test05 stamp: 'D S 10/29/2020 18:27:12'!
PASSED!

!testRun: #TableTest #test06 stamp: 'D S 10/29/2020 18:27:12'!
PASSED!

!testRun: #TableTest #test07 stamp: 'D S 10/29/2020 18:27:12'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:27:46'!
test08

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putYAt: 1@1.

	self assert: aGame isPlayingX.! !

!testRun: #TableTest #test08 stamp: 'D S 10/29/2020 18:27:50'!
FAILURE!

!testRun: #TableTest #test08 stamp: 'D S 10/29/2020 18:27:50'!
FAILURE!
!Table methodsFor: 'actions' stamp: 'D S 10/29/2020 18:28:07' prior: 50903956!
putYAt: aPoint 
	
	positionOTokens := aPoint.
	isXTurn := true.! !
!Table methodsFor: 'actions' stamp: 'D S 10/29/2020 18:28:16'!
putOAt: aPoint 
	
	positionOTokens := aPoint.
	isXTurn := true.! !

!methodRemoval: Table #putYAt: stamp: 'D S 10/29/2020 18:28:16'!
putYAt: aPoint 
	
	positionOTokens := aPoint.
	isXTurn := true.!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:28:26' prior: 50903979!
test05

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.

	self assert: 1@1 equals: aGame positionOTokens.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:28:35' prior: 50904029!
test08

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.

	self assert: aGame isPlayingX.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 18:28:38'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 18:28:38'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 18:28:38'!
PASSED!

!testRun: #TableTest #test04 stamp: 'D S 10/29/2020 18:28:38'!
PASSED!

!testRun: #TableTest #test05 stamp: 'D S 10/29/2020 18:28:38'!
PASSED!

!testRun: #TableTest #test06 stamp: 'D S 10/29/2020 18:28:38'!
PASSED!

!testRun: #TableTest #test07 stamp: 'D S 10/29/2020 18:28:38'!
PASSED!

!testRun: #TableTest #test08 stamp: 'D S 10/29/2020 18:28:38'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:29:19'!
test04XTokenIsPlacedCorrectly

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	
	self assert: 0@0 equals: aGame positionXTokens.! !

!methodRemoval: TableTest #test04 stamp: 'D S 10/29/2020 18:29:24'!
test04

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	
	self assert: 0@0 equals: aGame positionXTokens.!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:29:34'!
test05YTokenIsPlacedCorrectly

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.

	self assert: 1@1 equals: aGame positionOTokens.! !

!methodRemoval: TableTest #test05 stamp: 'D S 10/29/2020 18:29:34'!
test05

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.

	self assert: 1@1 equals: aGame positionOTokens.!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:29:54'!
test06PlayerXDoesntMoveSecond

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.

	self deny: aGame isPlayingX .! !

!methodRemoval: TableTest #test06 stamp: 'D S 10/29/2020 18:29:54'!
test06

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.

	self deny: aGame isPlayingX .!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:30:00'!
test05OTokenIsPlacedCorrectly

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.

	self assert: 1@1 equals: aGame positionOTokens.! !

!methodRemoval: TableTest #test05YTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:30:00'!
test05YTokenIsPlacedCorrectly

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.

	self assert: 1@1 equals: aGame positionOTokens.!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:30:29'!
test07PlayerOMoveSecond

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.

	self assert: aGame isPlayingO.! !

!methodRemoval: TableTest #test07 stamp: 'D S 10/29/2020 18:30:29'!
test07

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.

	self assert: aGame isPlayingO.!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:31:01'!
test08PlayerXMovesAfterPlayerO

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.

	self assert: aGame isPlayingX.! !

!methodRemoval: TableTest #test08 stamp: 'D S 10/29/2020 18:31:01'!
test08

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.

	self assert: aGame isPlayingX.!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:34:47'!
test09

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.

	self assert: #(0@0 0@1) equals: aGame positionXTokens.! !

!testRun: #TableTest #test09 stamp: 'D S 10/29/2020 18:35:09'!
FAILURE!

!testRun: #TableTest #test09 stamp: 'D S 10/29/2020 18:35:09'!
FAILURE!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:35:25' prior: 50904170!
test09

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.

	self assert: #( (0@0) (0@1)) equals: aGame positionXTokens.! !

!testRun: #TableTest #test09 stamp: 'D S 10/29/2020 18:35:27'!
FAILURE!

!testRun: #TableTest #test09 stamp: 'D S 10/29/2020 18:35:27'!
FAILURE!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:36:14' prior: 50904183!
test09

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.

	self assert: #(0@0 0@1) equals: aGame positionXTokens.! !
!Table methodsFor: 'actions' stamp: 'D S 10/29/2020 18:37:19' prior: 50903867!
putXAt: aPoint 
	
	positionXTokens := positionXTokens add: aPoint.
	isXTurn := false.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 18:37:22'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 18:37:22'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 18:37:22'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:37:22'!
ERROR!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:37:22'!
ERROR!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 18:37:22'!
ERROR!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 18:37:22'!
ERROR!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 18:37:22'!
ERROR!

!testRun: #TableTest #test09 stamp: 'D S 10/29/2020 18:37:22'!
ERROR!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:37:38' prior: 50904090!
test04XTokenIsPlacedCorrectly

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	
	self assert: #(0@0) equals: aGame positionXTokens.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 18:37:41'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 18:37:41'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 18:37:41'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:37:41'!
ERROR!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:37:41'!
ERROR!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 18:37:41'!
ERROR!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 18:37:41'!
ERROR!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 18:37:41'!
ERROR!

!testRun: #TableTest #test09 stamp: 'D S 10/29/2020 18:37:41'!
ERROR!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:37:54'!
ERROR!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:37:54'!
ERROR!
!Table methodsFor: 'initialize' stamp: 'D S 10/29/2020 18:39:00' prior: 50903856!
initializeGame
	playerORemainingTokens := 3.
	playerXRemainingTokens := 3.
	positionXTokens := Set new.
	positionOTokens := Set new.
	isXTurn := true! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 18:39:03'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 18:39:03'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 18:39:03'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:39:03'!
FAILURE!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:39:03'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 18:39:03'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 18:39:03'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 18:39:03'!
PASSED!

!testRun: #TableTest #test09 stamp: 'D S 10/29/2020 18:39:03'!
ERROR!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:39:13' prior: 50904236!
test04XTokenIsPlacedCorrectly

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	
	self assert: 0@0 equals: aGame positionXTokens.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 18:39:17'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 18:39:17'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 18:39:17'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:39:17'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:39:17'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 18:39:17'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 18:39:17'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 18:39:17'!
PASSED!

!testRun: #TableTest #test09 stamp: 'D S 10/29/2020 18:39:17'!
ERROR!

!testRun: #TableTest #test09 stamp: 'D S 10/29/2020 18:39:17'!
ERROR!
!Table methodsFor: 'actions' stamp: 'D S 10/29/2020 18:41:07' prior: 50904204!
putXAt: aPoint 
	
	positionXTokens := positionXTokens add: aPoint.
	isXTurn := false.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 18:41:13'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 18:41:13'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 18:41:13'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:41:13'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:41:13'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 18:41:13'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 18:41:13'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 18:41:13'!
PASSED!

!testRun: #TableTest #test09 stamp: 'D S 10/29/2020 18:41:13'!
ERROR!

!testRun: #TableTest #test09 stamp: 'D S 10/29/2020 18:41:13'!
ERROR!
!Table methodsFor: 'actions' stamp: 'D S 10/29/2020 18:41:34' prior: 50904344!
putXAt: aPoint 
	
	positionXTokens add: aPoint.
	isXTurn := false.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 18:41:37'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 18:41:37'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 18:41:37'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:41:37'!
FAILURE!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:41:37'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 18:41:37'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 18:41:37'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 18:41:37'!
PASSED!

!testRun: #TableTest #test09 stamp: 'D S 10/29/2020 18:41:37'!
FAILURE!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:41:57' prior: 50904309!
test04XTokenIsPlacedCorrectly

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	
	self assert: #(0@0) equals: aGame positionXTokens.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 18:42:00'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 18:42:00'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 18:42:00'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:42:00'!
FAILURE!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:42:00'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 18:42:00'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 18:42:00'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 18:42:00'!
PASSED!

!testRun: #TableTest #test09 stamp: 'D S 10/29/2020 18:42:00'!
FAILURE!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:42:17'!
FAILURE!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:42:23'!
FAILURE!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:42:23'!
FAILURE!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:42:33' prior: 50904410!
test04XTokenIsPlacedCorrectly

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	
	self assert: #((0@0)) equals: aGame positionXTokens.! !

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:42:36'!
FAILURE!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:42:36'!
FAILURE!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:43:57'!
FAILURE!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:43:57'!
FAILURE!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:44:04' prior: 50904453!
test04XTokenIsPlacedCorrectly

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	
	self assert: aGame positionXTokens includes: (0@0).! !

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:44:06'!
PASSED!

!testRun: #TableTest #test09 stamp: 'D S 10/29/2020 18:46:09'!
FAILURE!

!testRun: #TableTest #test09 stamp: 'D S 10/29/2020 18:46:09'!
FAILURE!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:46:15' prior: 50904196!
test09

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.

	self assert: ((aGame positionXTokens includes: (0@0)) and: (aGame positionXTokens includes: (0@1))).! !

!testRun: #TableTest #test09 stamp: 'D S 10/29/2020 18:46:17'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:46:26' prior: 50904489!
test09

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.

	self assert: ((aGame positionXTokens includes: (0@0)) 
			and: (aGame positionXTokens includes: (0@1))).! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:47:05'!
test10

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.

	self assert: ((aGame positionOTokens includes: (1@1)) 
			and: (aGame positionOTokens includes: (1@2))).! !

!testRun: #TableTest #test10 stamp: 'D S 10/29/2020 18:47:10'!
ERROR!

!testRun: #TableTest #test10 stamp: 'D S 10/29/2020 18:47:10'!
ERROR!
!Table methodsFor: 'actions' stamp: 'D S 10/29/2020 18:47:39' prior: 50904045!
putOAt: aPoint 
	
	positionOTokens add: aPoint.
	isXTurn := true.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 18:47:42'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 18:47:42'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 18:47:42'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:47:42'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:47:42'!
FAILURE!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 18:47:42'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 18:47:42'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 18:47:42'!
PASSED!

!testRun: #TableTest #test09 stamp: 'D S 10/29/2020 18:47:42'!
PASSED!

!testRun: #TableTest #test10 stamp: 'D S 10/29/2020 18:47:42'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:47:42'!
FAILURE!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:48:09' prior: 50904129!
test05OTokenIsPlacedCorrectly

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.

	self assert: aGame positionOTokens includes: (1@1).! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 18:48:12'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 18:48:12'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 18:48:12'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:48:12'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 18:48:12'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 18:48:12'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 18:48:12'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 18:48:12'!
PASSED!

!testRun: #TableTest #test09 stamp: 'D S 10/29/2020 18:48:12'!
PASSED!

!testRun: #TableTest #test10 stamp: 'D S 10/29/2020 18:48:12'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:50:51'!
test11

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:51:29'!
test09TwoPlayersTokenArePlacedCorrectly

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.

	self assert: ((aGame positionXTokens includes: (0@0)) 
			and: (aGame positionXTokens includes: (0@1))).! !

!methodRemoval: TableTest #test09 stamp: 'D S 10/29/2020 18:51:29'!
test09

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.

	self assert: ((aGame positionXTokens includes: (0@0)) 
			and: (aGame positionXTokens includes: (0@1))).!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:51:58'!
test10TwoOTokensArePlacedCorrectly

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.

	self assert: ((aGame positionOTokens includes: (1@1)) 
			and: (aGame positionOTokens includes: (1@2))).! !

!methodRemoval: TableTest #test10 stamp: 'D S 10/29/2020 18:51:58'!
test10

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.

	self assert: ((aGame positionOTokens includes: (1@1)) 
			and: (aGame positionOTokens includes: (1@2))).!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:52:08'!
test09TwoXTokensArePlacedCorrectly

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.

	self assert: ((aGame positionXTokens includes: (0@0)) 
			and: (aGame positionXTokens includes: (0@1))).! !

!methodRemoval: TableTest #test09TwoPlayersTokenArePlacedCorrectly stamp: 'D S 10/29/2020 18:52:08'!
test09TwoPlayersTokenArePlacedCorrectly

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.

	self assert: ((aGame positionXTokens includes: (0@0)) 
			and: (aGame positionXTokens includes: (0@1))).!

!testRun: #TableTest #test11 stamp: 'D S 10/29/2020 18:53:25'!
ERROR!

!testRun: #TableTest #test11 stamp: 'D S 10/29/2020 18:53:25'!
ERROR!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 18:53:32'!
isOver
	self shouldBeImplemented.! !
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 18:53:43' prior: 50904672!
isOver
	
	^true.! !

!testRun: #TableTest #test11 stamp: 'D S 10/29/2020 18:53:48'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:54:56' prior: 50904599!
test11

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:55:07'!
test12

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 18:55:29' prior: 50904690!
test12

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@1.

	self deny: aGame isOver.! !

!testRun: #TableTest #test12 stamp: 'D S 10/29/2020 18:55:35'!
FAILURE!

!testRun: #TableTest #test12 stamp: 'D S 10/29/2020 18:55:35'!
FAILURE!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 19:03:26' prior: 50904676!
isOver
	
	(positionXTokens = #(0@0 1@1 2@2)) ifTrue: [^true].
	^false.! !

!testRun: #TableTest #test12 stamp: 'D S 10/29/2020 19:04:12'!
PASSED!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 19:04:16'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 19:04:16'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 19:04:16'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 19:04:16'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 19:04:16'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 19:04:16'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 19:04:16'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 19:04:16'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/29/2020 19:04:16'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/29/2020 19:04:16'!
PASSED!

!testRun: #TableTest #test11 stamp: 'D S 10/29/2020 19:04:16'!
FAILURE!

!testRun: #TableTest #test12 stamp: 'D S 10/29/2020 19:04:16'!
PASSED!

!testRun: #TableTest #test11 stamp: 'D S 10/29/2020 19:04:16'!
FAILURE!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 19:11:56' prior: 50904712!
isOver
	
	(positionXTokens = Set with: 0@0 with: 1@1 with: 2@2) ifTrue: [^true].
	^false.! !

!testRun: #TableTest #test12 stamp: 'D S 10/29/2020 19:12:00'!
ERROR!

!testRun: #TableTest #test11 stamp: 'D S 10/29/2020 19:12:00'!
ERROR!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 19:12:17' prior: 50904756!
isOver
	
	(positionXTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	^false.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 19:12:20'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 19:12:20'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 19:12:20'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 19:12:20'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 19:12:20'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 19:12:20'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 19:12:20'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 19:12:20'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/29/2020 19:12:20'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/29/2020 19:12:20'!
PASSED!

!testRun: #TableTest #test11 stamp: 'D S 10/29/2020 19:12:20'!
PASSED!

!testRun: #TableTest #test12 stamp: 'D S 10/29/2020 19:12:20'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 19:13:18'!
test13

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.

	self assert: aGame isOver.! !

!testRun: #TableTest #test13 stamp: 'D S 10/29/2020 19:13:22'!
FAILURE!

!testRun: #TableTest #test13 stamp: 'D S 10/29/2020 19:13:22'!
FAILURE!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 19:14:01' prior: 50904766!
isOver
	
	(positionXTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	^false.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 19:14:04'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 19:14:04'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 19:14:04'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 19:14:04'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 19:14:04'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 19:14:04'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 19:14:04'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 19:14:04'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/29/2020 19:14:04'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/29/2020 19:14:04'!
PASSED!

!testRun: #TableTest #test11 stamp: 'D S 10/29/2020 19:14:04'!
PASSED!

!testRun: #TableTest #test12 stamp: 'D S 10/29/2020 19:14:04'!
PASSED!

!testRun: #TableTest #test13 stamp: 'D S 10/29/2020 19:14:04'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 19:17:50'!
test14

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@0.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@0.


	self assert: aGame isOver.! !

!testRun: #TableTest #test14 stamp: 'D S 10/29/2020 19:17:53'!
FAILURE!

!testRun: #TableTest #test14 stamp: 'D S 10/29/2020 19:17:53'!
FAILURE!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 19:18:23' prior: 50904820!
isOver
	
	(positionXTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true]
	^false.! !
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 19:18:32' prior: 50904878!
isOver
	
	(positionXTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	^false.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 19:18:34'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 19:18:34'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 19:18:34'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 19:18:34'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 19:18:34'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 19:18:34'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 19:18:34'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 19:18:34'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/29/2020 19:18:34'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/29/2020 19:18:34'!
PASSED!

!testRun: #TableTest #test11 stamp: 'D S 10/29/2020 19:18:34'!
PASSED!

!testRun: #TableTest #test12 stamp: 'D S 10/29/2020 19:18:34'!
PASSED!

!testRun: #TableTest #test13 stamp: 'D S 10/29/2020 19:18:34'!
PASSED!

!testRun: #TableTest #test14 stamp: 'D S 10/29/2020 19:18:34'!
PASSED!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 19:18:49' prior: 50904889!
isOver
	
	(positionXTokens = (Set with: 1@1 with: 0@0 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	^false.! !

!testRun: #TableTest #test13 stamp: 'D S 10/29/2020 19:18:52'!
PASSED!

!testRun: #TableTest #test12 stamp: 'D S 10/29/2020 19:18:52'!
PASSED!

!testRun: #TableTest #test11 stamp: 'D S 10/29/2020 19:18:52'!
PASSED!

!testRun: #TableTest #test14 stamp: 'D S 10/29/2020 19:18:52'!
PASSED!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 19:19:03'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 19:19:03'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 19:19:03'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 19:19:03'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 19:19:03'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 19:19:03'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 19:19:03'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 19:19:03'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/29/2020 19:19:03'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/29/2020 19:19:03'!
PASSED!

!testRun: #TableTest #test11 stamp: 'D S 10/29/2020 19:19:03'!
PASSED!

!testRun: #TableTest #test12 stamp: 'D S 10/29/2020 19:19:03'!
PASSED!

!testRun: #TableTest #test13 stamp: 'D S 10/29/2020 19:19:03'!
PASSED!

!testRun: #TableTest #test14 stamp: 'D S 10/29/2020 19:19:03'!
PASSED!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 19:18:32' prior: 50904939!
isOver
	
	(positionXTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	^false.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 19:19:55'!
test15

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 2@1.
	aGame putOAt: 2@0.

	self assert: aGame isOver.! !

!testRun: #TableTest #test15 stamp: 'D S 10/29/2020 19:19:58'!
FAILURE!

!testRun: #TableTest #test15 stamp: 'D S 10/29/2020 19:19:58'!
FAILURE!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 19:20:41' prior: 50904998!
isOver
	
	(positionXTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].

	^false.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 19:20:47'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 19:20:47'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 19:20:47'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 19:20:47'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 19:20:47'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 19:20:47'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 19:20:47'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 19:20:47'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/29/2020 19:20:47'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/29/2020 19:20:47'!
PASSED!

!testRun: #TableTest #test11 stamp: 'D S 10/29/2020 19:20:47'!
PASSED!

!testRun: #TableTest #test12 stamp: 'D S 10/29/2020 19:20:47'!
PASSED!

!testRun: #TableTest #test13 stamp: 'D S 10/29/2020 19:20:47'!
PASSED!

!testRun: #TableTest #test14 stamp: 'D S 10/29/2020 19:20:47'!
PASSED!

!testRun: #TableTest #test15 stamp: 'D S 10/29/2020 19:20:47'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 19:36:40'!
test11XTokensInAscendingDiagonal

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test11 stamp: 'D S 10/29/2020 19:36:40'!
test11

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.

	self assert: aGame isOver.!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 19:37:08'!
test12OTokensInAscendingDiagonalEndsGame

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@1.

	self deny: aGame isOver.! !

!methodRemoval: TableTest #test12 stamp: 'D S 10/29/2020 19:37:08'!
test12

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@1.

	self deny: aGame isOver.!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 19:37:16'!
test11XTokensInAscendingDiagonalEndsGame

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test11XTokensInAscendingDiagonal stamp: 'D S 10/29/2020 19:37:16'!
test11XTokensInAscendingDiagonal

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.

	self assert: aGame isOver.!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 19:37:30'!
test13XTokensInDescendingDiagonalEndsGame

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test13 stamp: 'D S 10/29/2020 19:37:30'!
test13

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.

	self assert: aGame isOver.!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 19:37:57'!
test13OTokensInAscendingDiagonalEndsGame

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test13XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 19:37:57'!
test13XTokensInDescendingDiagonalEndsGame

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.

	self assert: aGame isOver.!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 19:38:46'!
test12NotForming3InARowDoesntEndGame

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@1.

	self deny: aGame isOver.! !

!methodRemoval: TableTest #test12OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 19:38:46'!
test12OTokensInAscendingDiagonalEndsGame

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@1.

	self deny: aGame isOver.!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 19:39:08'!
test14XTokensInDescendingDiagonalEndsGame

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@0.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@0.


	self assert: aGame isOver.! !

!methodRemoval: TableTest #test14 stamp: 'D S 10/29/2020 19:39:08'!
test14

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@0.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@0.


	self assert: aGame isOver.!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 19:39:50'!
test15OTokensInDescendingDiagonalEndsGame

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 2@1.
	aGame putOAt: 2@0.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test15 stamp: 'D S 10/29/2020 19:39:50'!
test15

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 2@1.
	aGame putOAt: 2@0.

	self assert: aGame isOver.!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 20:14:08'!
test16XTokensInMiddleRow

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@0.
	aGame putXAt: 2@1.

	self assert: aGame isOver.! !

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/29/2020 20:14:11'!
FAILURE!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/29/2020 20:14:11'!
FAILURE!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 20:14:50' prior: 50905023!
isOver
	
	(positionXTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@1 with: 1@1 with: 2@1)) ifTrue: [^true].

	^false.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 20:14:53'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 20:14:53'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 20:14:53'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 20:14:53'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 20:14:53'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 20:14:53'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 20:14:53'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 20:14:53'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/29/2020 20:14:53'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/29/2020 20:14:53'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:14:53'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/29/2020 20:14:53'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:14:53'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:14:53'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:14:53'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/29/2020 20:14:53'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 20:15:52'!
test17OTokensInMiddleRow

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.

	self assert: aGame isOver.! !

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/29/2020 20:16:18'!
FAILURE!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/29/2020 20:16:18'!
FAILURE!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 20:16:43' prior: 50905240!
isOver
	
	(positionXTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@1 with: 1@1 with: 2@1)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@1 with: 1@1 with: 2@1)) ifTrue: [^true].

	^false.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 20:18:34'!
test18XTokensInBottomRow

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 1@0.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 2@2.
	aGame putXAt: 2@0.

	self assert: aGame isOver.! !

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/29/2020 20:18:37'!
FAILURE!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/29/2020 20:18:37'!
FAILURE!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 20:19:01' prior: 50905319!
isOver
	
	(positionXTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@1 with: 1@1 with: 2@1)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@1 with: 1@1 with: 2@1)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@0 with: 1@0 with: 2@0)) ifTrue: [^true].


	^false.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 20:19:05'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 20:19:05'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 20:19:05'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 20:19:05'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 20:19:05'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 20:19:05'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 20:19:05'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 20:19:05'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/29/2020 20:19:05'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/29/2020 20:19:05'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:19:05'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/29/2020 20:19:05'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:19:05'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:19:05'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:19:05'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/29/2020 20:19:05'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/29/2020 20:19:05'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/29/2020 20:19:05'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 20:20:09'!
test19OTokensInBottomRow

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@0.

	self assert: aGame isOver.! !

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/29/2020 20:20:13'!
FAILURE!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/29/2020 20:20:13'!
FAILURE!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 20:20:26' prior: 50905352!
isOver
	
	(positionXTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@1 with: 1@1 with: 2@1)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@1 with: 1@1 with: 2@1)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@0 with: 1@0 with: 2@0)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@0 with: 2@0)) ifTrue: [^true].


	^false.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 20:20:30'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 20:20:30'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 20:20:30'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 20:20:30'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 20:20:30'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 20:20:30'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 20:20:30'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 20:20:30'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/29/2020 20:20:30'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/29/2020 20:20:30'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:20:30'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/29/2020 20:20:30'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:20:30'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:20:30'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:20:30'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/29/2020 20:20:30'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/29/2020 20:20:30'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/29/2020 20:20:30'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/29/2020 20:20:30'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 20:21:00'!
test20XTokensInTopRow

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 0@2.
	aGame putOAt: 0@0.
	aGame putXAt: 2@2.

	self assert: aGame isOver.! !

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/29/2020 20:21:21'!
FAILURE!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/29/2020 20:21:21'!
FAILURE!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 20:21:42' prior: 50905442!
isOver
	
	(positionXTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@1 with: 1@1 with: 2@1)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@1 with: 1@1 with: 2@1)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@0 with: 1@0 with: 2@0)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@0 with: 2@0)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@2 with: 1@2 with: 2@2)) ifTrue: [^true].


	^false.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 20:21:52'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 20:21:52'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 20:21:52'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 20:21:52'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 20:21:52'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 20:21:52'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 20:21:52'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 20:21:52'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/29/2020 20:21:52'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/29/2020 20:21:52'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:21:52'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/29/2020 20:21:52'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:21:52'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:21:52'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:21:52'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/29/2020 20:21:52'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/29/2020 20:21:52'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/29/2020 20:21:52'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/29/2020 20:21:52'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/29/2020 20:21:52'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 20:22:27'!
test21OTokensInTopRow

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 0@2.
	aGame putXAt: 1@0.
	aGame putOAt: 2@2.

	self assert: aGame isOver.! !

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/29/2020 20:22:31'!
FAILURE!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/29/2020 20:22:31'!
FAILURE!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 20:22:52' prior: 50905537!
isOver
	
	(positionXTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@1 with: 1@1 with: 2@1)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@1 with: 1@1 with: 2@1)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@0 with: 1@0 with: 2@0)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@0 with: 2@0)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@2 with: 1@2 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@2 with: 1@2 with: 2@2)) ifTrue: [^true].


	^false.! !

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/29/2020 20:22:56'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:22:56'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:22:56'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/29/2020 20:22:56'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/29/2020 20:22:56'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/29/2020 20:22:56'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/29/2020 20:22:56'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/29/2020 20:22:56'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:22:56'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/29/2020 20:22:56'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:22:56'!
PASSED!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 20:23:00'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 20:23:00'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 20:23:00'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 20:23:00'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 20:23:00'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 20:23:00'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 20:23:00'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 20:23:00'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/29/2020 20:23:00'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/29/2020 20:23:00'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:23:00'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/29/2020 20:23:00'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:23:00'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:23:00'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:23:00'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/29/2020 20:23:00'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/29/2020 20:23:00'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/29/2020 20:23:00'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/29/2020 20:23:00'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/29/2020 20:23:00'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/29/2020 20:23:00'!
PASSED!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 20:28:07' prior: 50905637!
isOver
	
	
	(positionXTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionXTokens allSatisfy:[:tokenPosition1 :tokenPosition2 | tokenPosition1 x = tokenPosition2 x]) ifTrue:[^true].
	(positionXTokens = (Set with: 0@1 with: 1@1 with: 2@1)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@1 with: 1@1 with: 2@1)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@0 with: 1@0 with: 2@0)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@0 with: 2@0)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@2 with: 1@2 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@2 with: 1@2 with: 2@2)) ifTrue: [^true].


	^false.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 20:28:12'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 20:28:12'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 20:28:12'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 20:28:12'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 20:28:12'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 20:28:12'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 20:28:12'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 20:28:12'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/29/2020 20:28:12'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/29/2020 20:28:12'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:28:12'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/29/2020 20:28:12'!
ERROR!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:28:12'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:28:12'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:28:12'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/29/2020 20:28:12'!
ERROR!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/29/2020 20:28:12'!
ERROR!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/29/2020 20:28:12'!
ERROR!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/29/2020 20:28:12'!
ERROR!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/29/2020 20:28:12'!
ERROR!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/29/2020 20:28:12'!
ERROR!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/29/2020 20:28:36'!
ERROR!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 20:29:08' prior: 50905760!
isOver
	
	
	(positionXTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@1 with: 1@1 with: 2@1)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@1 with: 1@1 with: 2@1)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@0 with: 1@0 with: 2@0)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@0 with: 2@0)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@2 with: 1@2 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@2 with: 1@2 with: 2@2)) ifTrue: [^true].


	^false.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 20:30:33'!
test22XTokensInMiddleColumn

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 0@2.
	aGame putXAt: 1@0.

	self assert: aGame isOver.! !

!testRun: #TableTest #test22XTokensInMiddleColumn stamp: 'D S 10/29/2020 20:30:36'!
FAILURE!

!testRun: #TableTest #test22XTokensInMiddleColumn stamp: 'D S 10/29/2020 20:30:36'!
FAILURE!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 20:30:58' prior: 50905856!
isOver
	
	
	(positionXTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@1 with: 1@1 with: 2@1)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@1 with: 1@1 with: 2@1)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@0 with: 1@0 with: 2@0)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@0 with: 2@0)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@2 with: 1@2 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@2 with: 1@2 with: 2@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 1@1 with: 1@2 with: 1@0)) ifTrue: [^true].


	^false.! !

!testRun: #TableTest #test22XTokensInMiddleColumn stamp: 'D S 10/29/2020 20:31:03'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 20:32:02'!
test23OTokensInMiddleColumn

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.
	aGame putOAt: 1@0.

	self assert: aGame isOver.! !

!testRun: #TableTest #test23OTokensInMiddleColumn stamp: 'D S 10/29/2020 20:32:05'!
FAILURE!

!testRun: #TableTest #test23OTokensInMiddleColumn stamp: 'D S 10/29/2020 20:32:05'!
FAILURE!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 20:32:36' prior: 50905898!
isOver
	
	
	(positionXTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@1 with: 1@1 with: 2@1)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@1 with: 1@1 with: 2@1)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@0 with: 1@0 with: 2@0)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@0 with: 2@0)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@2 with: 1@2 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@2 with: 1@2 with: 2@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 1@1 with: 1@2 with: 1@0)) ifTrue: [^true].
	(positionOTokens = (Set with: 1@1 with: 1@2 with: 1@0)) ifTrue: [^true].



	^false.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 20:32:39'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 20:32:39'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 20:32:39'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 20:32:39'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 20:32:39'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 20:32:39'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 20:32:39'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 20:32:39'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/29/2020 20:32:39'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/29/2020 20:32:39'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:32:39'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/29/2020 20:32:39'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:32:39'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:32:39'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:32:39'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/29/2020 20:32:39'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/29/2020 20:32:39'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/29/2020 20:32:39'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/29/2020 20:32:39'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/29/2020 20:32:39'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/29/2020 20:32:39'!
PASSED!

!testRun: #TableTest #test22XTokensInMiddleColumn stamp: 'D S 10/29/2020 20:32:39'!
PASSED!

!testRun: #TableTest #test23OTokensInMiddleColumn stamp: 'D S 10/29/2020 20:32:39'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 20:33:43'!
test24XTokensInFirstColumn

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@0.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 20:33:51'!
test22XTokensInSecondColumn

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 0@2.
	aGame putXAt: 1@0.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test22XTokensInMiddleColumn stamp: 'D S 10/29/2020 20:33:51'!
test22XTokensInMiddleColumn

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 0@2.
	aGame putXAt: 1@0.

	self assert: aGame isOver.!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 20:34:00'!
test23OTokensInSecondColumn

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.
	aGame putOAt: 1@0.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test23OTokensInMiddleColumn stamp: 'D S 10/29/2020 20:34:00'!
test23OTokensInMiddleColumn

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.
	aGame putOAt: 1@0.

	self assert: aGame isOver.!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/29/2020 20:34:14'!
FAILURE!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/29/2020 20:34:14'!
FAILURE!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 20:34:37' prior: 50905946!
isOver
	
	
	(positionXTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@1 with: 1@1 with: 2@1)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@1 with: 1@1 with: 2@1)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@0 with: 1@0 with: 2@0)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@0 with: 2@0)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@2 with: 1@2 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@2 with: 1@2 with: 2@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 1@1 with: 1@2 with: 1@0)) ifTrue: [^true].
	(positionOTokens = (Set with: 1@1 with: 1@2 with: 1@0)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@1 with: 0@2 with: 0@0)) ifTrue: [^true].



	^false.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 20:34:42'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 20:34:42'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 20:34:42'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 20:34:42'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 20:34:42'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 20:34:42'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 20:34:42'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 20:34:42'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/29/2020 20:34:42'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/29/2020 20:34:42'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:34:42'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/29/2020 20:34:42'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:34:42'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:34:42'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:34:42'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/29/2020 20:34:42'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/29/2020 20:34:42'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/29/2020 20:34:42'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/29/2020 20:34:42'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/29/2020 20:34:42'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/29/2020 20:34:42'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/29/2020 20:34:42'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/29/2020 20:34:42'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/29/2020 20:34:42'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 20:35:38'!
test25OTokensInFirstColumn

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@1.
	aGame putXAt: 1@2.
	aGame putOAt: 0@2.
	aGame putXAt: 2@2.
	aGame putOAt: 0@0.

	self assert: aGame isOver.! !

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/29/2020 20:35:41'!
FAILURE!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/29/2020 20:35:41'!
FAILURE!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 20:36:01' prior: 50906098!
isOver
	
	
	(positionXTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@1 with: 1@1 with: 2@1)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@1 with: 1@1 with: 2@1)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@0 with: 1@0 with: 2@0)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@0 with: 2@0)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@2 with: 1@2 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@2 with: 1@2 with: 2@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 1@1 with: 1@2 with: 1@0)) ifTrue: [^true].
	(positionOTokens = (Set with: 1@1 with: 1@2 with: 1@0)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@1 with: 0@2 with: 0@0)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@1 with: 0@2 with: 0@0)) ifTrue: [^true].



	^false.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 20:36:05'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 20:36:05'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 20:36:05'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 20:36:05'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 20:36:05'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 20:36:05'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 20:36:05'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 20:36:05'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/29/2020 20:36:05'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/29/2020 20:36:05'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:36:05'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/29/2020 20:36:05'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:36:05'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:36:05'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:36:05'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/29/2020 20:36:05'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/29/2020 20:36:05'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/29/2020 20:36:05'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/29/2020 20:36:05'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/29/2020 20:36:05'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/29/2020 20:36:05'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/29/2020 20:36:05'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/29/2020 20:36:05'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/29/2020 20:36:05'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/29/2020 20:36:05'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 20:36:27'!
test24XTokensInThirdColumn

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@2.
	aGame putXAt: 2@0.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 20:36:37'!
test26XTokensInThirdColumn

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@2.
	aGame putXAt: 2@0.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test24XTokensInThirdColumn stamp: 'D S 10/29/2020 20:36:37'!
test24XTokensInThirdColumn

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@2.
	aGame putXAt: 2@0.

	self assert: aGame isOver.!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/29/2020 20:36:45'!
FAILURE!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/29/2020 20:36:45'!
FAILURE!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 20:37:29' prior: 50906220!
isOver
	
	
	(positionXTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@1 with: 1@1 with: 2@1)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@1 with: 1@1 with: 2@1)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@0 with: 1@0 with: 2@0)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@0 with: 2@0)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@2 with: 1@2 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@2 with: 1@2 with: 2@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 1@1 with: 1@2 with: 1@0)) ifTrue: [^true].
	(positionOTokens = (Set with: 1@1 with: 1@2 with: 1@0)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@1 with: 0@2 with: 0@0)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@1 with: 0@2 with: 0@0)) ifTrue: [^true].
	(positionXTokens = (Set with: 2@1 with: 2@2 with: 2@0)) ifTrue: [^true].



	^false.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 20:37:33'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 20:37:33'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 20:37:33'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 20:37:33'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 20:37:33'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 20:37:33'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 20:37:33'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 20:37:33'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/29/2020 20:37:33'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/29/2020 20:37:33'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:37:33'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/29/2020 20:37:33'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:37:33'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:37:33'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:37:33'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/29/2020 20:37:33'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/29/2020 20:37:33'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/29/2020 20:37:33'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/29/2020 20:37:33'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/29/2020 20:37:33'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/29/2020 20:37:33'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/29/2020 20:37:33'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/29/2020 20:37:33'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/29/2020 20:37:33'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/29/2020 20:37:33'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/29/2020 20:37:33'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 20:38:36'!
test26OTokensInThirdColumn

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 2@0.
	aGame putXAt: 1@2.
	aGame putOAt: 2@2.
	aGame putXAt: 0@0.
	aGame putOAt: 2@1.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 20:38:45'!
test27OTokensInThirdColumn

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 2@0.
	aGame putXAt: 1@2.
	aGame putOAt: 2@2.
	aGame putXAt: 0@0.
	aGame putOAt: 2@1.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test26OTokensInThirdColumn stamp: 'D S 10/29/2020 20:38:45'!
test26OTokensInThirdColumn

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 2@0.
	aGame putXAt: 1@2.
	aGame putOAt: 2@2.
	aGame putXAt: 0@0.
	aGame putOAt: 2@1.

	self assert: aGame isOver.!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/29/2020 20:39:06'!
FAILURE!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/29/2020 20:39:06'!
FAILURE!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 20:39:25' prior: 50906364!
isOver
	
	
	(positionXTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@1 with: 2@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 2@0 with: 1@1 with: 0@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@1 with: 1@1 with: 2@1)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@1 with: 1@1 with: 2@1)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@0 with: 1@0 with: 2@0)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@0 with: 1@0 with: 2@0)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@2 with: 1@2 with: 2@2)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@2 with: 1@2 with: 2@2)) ifTrue: [^true].
	(positionXTokens = (Set with: 1@1 with: 1@2 with: 1@0)) ifTrue: [^true].
	(positionOTokens = (Set with: 1@1 with: 1@2 with: 1@0)) ifTrue: [^true].
	(positionXTokens = (Set with: 0@1 with: 0@2 with: 0@0)) ifTrue: [^true].
	(positionOTokens = (Set with: 0@1 with: 0@2 with: 0@0)) ifTrue: [^true].
	(positionXTokens = (Set with: 2@1 with: 2@2 with: 2@0)) ifTrue: [^true].
	(positionOTokens = (Set with: 2@1 with: 2@2 with: 2@0)) ifTrue: [^true].



	^false.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 20:39:29'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 20:39:29'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 20:39:29'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 20:39:29'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 20:39:29'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 20:39:29'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 20:39:29'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 20:39:29'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/29/2020 20:39:29'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/29/2020 20:39:29'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:39:29'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/29/2020 20:39:29'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:39:29'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:39:29'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:39:29'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/29/2020 20:39:29'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/29/2020 20:39:29'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/29/2020 20:39:29'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/29/2020 20:39:29'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/29/2020 20:39:29'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/29/2020 20:39:29'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/29/2020 20:39:29'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/29/2020 20:39:29'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/29/2020 20:39:29'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/29/2020 20:39:29'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/29/2020 20:39:29'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/29/2020 20:39:29'!
PASSED!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 20:47:23' prior: 50906515!
isOver
	
	^ ((positionXTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=0]) |
	(positionXTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=1]) |
	(positionXTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=2]) |
	(positionOTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=0]) |
	(positionOTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=1]) |
	(positionOTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=2]) |
	(positionXTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]) |
	(positionXTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]) |
	(positionXTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]) |
	(positionOTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]) |
	(positionOTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]) |
	(positionOTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]) |
	(positionXTokens = (Set with: 0@0 with: 1@1 with: 2@2)) |
	(positionOTokens = (Set with: 0@0 with: 1@1 with: 2@2)) |
	(positionXTokens = (Set with: 2@0 with: 1@1 with: 0@2)) |
	(positionOTokens = (Set with: 2@0 with: 1@1 with: 0@2))
	).
! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 20:47:26'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 20:47:26'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 20:47:26'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 20:47:26'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 20:47:26'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 20:47:26'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 20:47:26'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 20:47:26'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/29/2020 20:47:26'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/29/2020 20:47:26'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:47:26'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/29/2020 20:47:26'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:47:26'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:47:26'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:47:26'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/29/2020 20:47:26'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/29/2020 20:47:26'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/29/2020 20:47:26'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/29/2020 20:47:26'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/29/2020 20:47:26'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/29/2020 20:47:26'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/29/2020 20:47:26'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/29/2020 20:47:26'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/29/2020 20:47:26'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/29/2020 20:47:26'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/29/2020 20:47:26'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/29/2020 20:47:26'!
PASSED!
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 20:48:56'!
playerXWon
	
	^(isXTurn not).! !
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 20:49:00'!
playerOWon
	
	^(isXTurn not).! !
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 20:50:26' prior: 50906636!
isOver
	
	^ ((positionOTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]) |
	(positionOTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]) |
	(positionOTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]) |
	(positionOTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=0]) |
	(positionOTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=1]) |
	(positionOTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=2]) |
	(positionOTokens = (Set with: 0@0 with: 1@1 with: 2@2)) |
	(positionOTokens = (Set with: 2@0 with: 1@1 with: 0@2))).
! !
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 20:50:55' prior: 50906755!
playerXWon
	
	^((positionXTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=0]) |
	(positionXTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=1]) |
	(positionXTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=2]) |
	(positionXTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]) |
	(positionXTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]) |
	(positionXTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]) |
	(positionXTokens = (Set with: 0@0 with: 1@1 with: 2@2)) |
	(positionXTokens = (Set with: 2@0 with: 1@1 with: 0@2))).! !
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 20:51:28' prior: 50906759!
playerOWon
	
	^((positionOTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]) |
	(positionOTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]) |
	(positionOTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]) |
	(positionOTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=0]) |
	(positionOTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=1]) |
	(positionOTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=2]) |
	(positionOTokens = (Set with: 0@0 with: 1@1 with: 2@2)) |
	(positionOTokens = (Set with: 2@0 with: 1@1 with: 0@2))).! !
!Table methodsFor: 'accessing --Private--' stamp: 'D S 10/29/2020 20:53:34'!
playerXHasThreeInARow
	
	^((positionXTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=0]) |
	(positionXTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=1]) |
	(positionXTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=2])).! !
!Table methodsFor: 'accessing --Private--' stamp: 'D S 10/29/2020 20:54:05'!
playerXHasThreeInAColumn
	
	^((positionXTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]) |
	(positionXTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]) |
	(positionXTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]))! !
!Table methodsFor: 'accessing --Private--' stamp: 'D S 10/29/2020 20:55:04'!
playerXHasThreeInADiagonal
	
	^((positionXTokens = (Set with: 0@0 with: 1@1 with: 2@2)) |
	(positionXTokens = (Set with: 2@0 with: 1@1 with: 0@2))).! !
!Table methodsFor: 'accessing --Private--' stamp: 'D S 10/29/2020 20:55:20'!
playerOHasThreeInARow
	
	^((positionOTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=0]) |
	(positionOTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=1]) |
	(positionOTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=2])).! !
!Table methodsFor: 'accessing --Private--' stamp: 'D S 10/29/2020 20:55:30'!
playerOHasThreeInAColumn
	
	^((positionOTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]) |
	(positionOTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]) |
	(positionOTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]))! !
!Table methodsFor: 'accessing --Private--' stamp: 'D S 10/29/2020 20:55:39'!
playerOHasThreeInADiagonal
	
	^((positionOTokens = (Set with: 0@0 with: 1@1 with: 2@2)) |
	(positionOTokens = (Set with: 2@0 with: 1@1 with: 0@2))).! !
!Table methodsFor: 'accessing --Private--' stamp: 'D S 10/29/2020 20:56:23' prior: 50906805!
playerOWon
	
	^(self playerOHasThreeInAColumn | self playerOHasThreeInADiagonal | self playerOHasThreeInARow).! !
!Table methodsFor: 'accessing --Private--' stamp: 'D S 10/29/2020 20:56:34' prior: 50906784!
playerXWon
	
	^(self playerXHasThreeInAColumn | self playerXHasThreeInADiagonal | self playerXHasThreeInARow).! !
!Table methodsFor: 'accessing' stamp: 'D S 10/29/2020 20:57:04' prior: 50906763!
isOver
	
	^ (self playerOWon | self playerXWon).
! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 20:57:07'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 20:57:07'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 20:57:07'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 20:57:07'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 20:57:07'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 20:57:07'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 20:57:07'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 20:57:07'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/29/2020 20:57:07'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/29/2020 20:57:07'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:57:07'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/29/2020 20:57:07'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:57:07'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:57:07'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 20:57:07'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/29/2020 20:57:07'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/29/2020 20:57:07'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/29/2020 20:57:07'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/29/2020 20:57:07'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/29/2020 20:57:07'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/29/2020 20:57:07'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/29/2020 20:57:07'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/29/2020 20:57:07'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/29/2020 20:57:07'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/29/2020 20:57:07'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/29/2020 20:57:07'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/29/2020 20:57:07'!
PASSED!
!Table methodsFor: 'accessing --Private--' stamp: 'D S 10/29/2020 21:01:46'!
hasPlayerOWon
	
	^(self playerOHasThreeInAColumn | self playerOHasThreeInADiagonal | self playerOHasThreeInARow).! !
!Table methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 21:01:46' prior: 50906900!
isOver
	
	^ (self hasPlayerOWon | self playerXWon).
! !

!methodRemoval: Table #playerOWon stamp: 'D S 10/29/2020 21:01:46'!
playerOWon
	
	^(self playerOHasThreeInAColumn | self playerOHasThreeInADiagonal | self playerOHasThreeInARow).!
!Table methodsFor: 'accessing --Private--' stamp: 'D S 10/29/2020 21:01:55'!
hasPlayerXWon
	
	^(self playerXHasThreeInAColumn | self playerXHasThreeInADiagonal | self playerXHasThreeInARow).! !
!Table methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 21:01:56' prior: 50906992!
isOver
	
	^ (self hasPlayerOWon | self hasPlayerXWon).
! !

!methodRemoval: Table #playerXWon stamp: 'D S 10/29/2020 21:01:56'!
playerXWon
	
	^(self playerXHasThreeInAColumn | self playerXHasThreeInADiagonal | self playerXHasThreeInARow).!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 21:04:08'!
test28WhenPlayerXPutsTokenReduceRemainingXTokens

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@2.
	aGame putXAt: 2@0.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 21:05:01' prior: 50907019!
test28WhenPlayerXPutsTokenReduceRemainingXTokens

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 2@1.

	self assert: 2 equals: aGame remainingT.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 21:05:22' prior: 50907029!
test28WhenPlayerXPutsTokenReduceRemainingXTokens

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 2@1.

	self assert: 2 equals: aGame playerXRemainingTokens .! !

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokens stamp: 'D S 10/29/2020 21:05:25'!
FAILURE!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokens stamp: 'D S 10/29/2020 21:05:25'!
FAILURE!
!Table methodsFor: 'actions' stamp: 'D S 10/29/2020 21:05:41' prior: 50904378!
putXAt: aPoint 
	
	positionXTokens add: aPoint.
	isXTurn := false.
	playerXRemainingTokens := 2.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 21:06:05'!
test29WhenPlayerOPutsTokenReduceRemainingXTokens

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@1.

	self assert: 2 equals: aGame playerORemainingTokens .! !

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokens stamp: 'D S 10/29/2020 21:06:08'!
FAILURE!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokens stamp: 'D S 10/29/2020 21:06:08'!
FAILURE!
!Table methodsFor: 'actions' stamp: 'D S 10/29/2020 21:06:25' prior: 50904526!
putOAt: aPoint 
	
	positionOTokens add: aPoint.
	isXTurn := true.
	playerORemainingTokens := 2.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokens stamp: 'D S 10/29/2020 21:06:28'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokens stamp: 'D S 10/29/2020 21:06:28'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 21:06:39'!
test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 2@1.

	self assert: 2 equals: aGame playerXRemainingTokens .! !

!methodRemoval: TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokens stamp: 'D S 10/29/2020 21:06:45'!
test28WhenPlayerXPutsTokenReduceRemainingXTokens

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 2@1.

	self assert: 2 equals: aGame playerXRemainingTokens .!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 21:06:51'!
test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@1.

	self assert: 2 equals: aGame playerORemainingTokens .! !

!methodRemoval: TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokens stamp: 'D S 10/29/2020 21:06:51'!
test29WhenPlayerOPutsTokenReduceRemainingXTokens

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@1.

	self assert: 2 equals: aGame playerORemainingTokens .!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 21:07:17'!
test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.

	self assert: 1 equals: aGame playerXRemainingTokens .! !

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/29/2020 21:07:20'!
FAILURE!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/29/2020 21:07:20'!
FAILURE!
!Table methodsFor: 'actions' stamp: 'D S 10/29/2020 21:07:31' prior: 50907052!
putXAt: aPoint 
	
	positionXTokens add: aPoint.
	isXTurn := false.
	playerXRemainingTokens := playerXRemainingTokens - 1.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/29/2020 21:07:39'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/29/2020 21:07:39'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 21:07:51'!
test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.

	self assert: 1 equals: aGame playerXRemainingTokens .! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 21:08:06' prior: 50907318!
test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 0@0.

	self assert: 1 equals: aGame playerORemainingTokens .! !

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/29/2020 21:08:09'!
FAILURE!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/29/2020 21:08:09'!
FAILURE!
!Table methodsFor: 'actions' stamp: 'D S 10/29/2020 21:08:25' prior: 50907074!
putOAt: aPoint 
	
	positionOTokens add: aPoint.
	isXTurn := true.
	playerORemainingTokens := playerORemainingTokens - 1.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/29/2020 21:08:28'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/29/2020 21:08:28'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/29/2020 21:09:45'!
test32WhenPlayerOPutsTokenReduceRemainingOTokensByTwo

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 0@0.

	self assert: 1 equals: aGame playerORemainingTokens .! !

----SNAPSHOT----(29 October 2020 21:10:55) CuisUniversity-4383.image priorSource: 18307854!

----STARTUP---- (29 October 2020 21:11:48) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisUniversity/CuisUniversity-4383.image!


----SNAPSHOT----(29 October 2020 21:47:58) CuisUniversity-4383.image priorSource: 18425831!

----QUIT----(29 October 2020 21:48:03) CuisUniversity-4383.image priorSource: 18426062!

----STARTUP---- (31 October 2020 12:39:01) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisUniversity/CuisUniversity-4383.image!


!methodRemoval: TableTest #test32WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 12:40:33'!
test32WhenPlayerOPutsTokenReduceRemainingOTokensByTwo

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 0@0.

	self assert: 1 equals: aGame playerORemainingTokens .!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 12:40:36'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 12:40:36'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 12:51:26'!
test32PlayerXMovesTokenFromLeftBottomToCenterBottomCorrectly

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 0@2 to: 1@2.

	self assert: Set equals: aGame playerORemainingTokens .! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 12:52:49' prior: 50907582!
test32PlayerXMovesTokenFromLeftBottomToCenterBottomCorrectly

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 0@2 to: 1@2.

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionXTokens.! !

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftBottomToCenterBottomCorrectly stamp: 'D S 10/31/2020 12:54:53'!
ERROR!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftBottomToCenterBottomCorrectly stamp: 'D S 10/31/2020 12:54:53'!
ERROR!
!Table methodsFor: 'actions' stamp: 'D S 10/31/2020 12:55:05'!
xMoveTokenFrom: aPoint to: aPoint2 
	self shouldBeImplemented.! !
!Table methodsFor: 'actions' stamp: 'D S 10/31/2020 12:55:51' prior: 50907616!
xMoveTokenFrom: aPoint to: aPoint2 
	
	positionXTokens := (Set with: 1@2 with: 1@1 with: 2@1).! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 12:55:58'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftBottomToCenterBottomCorrectly stamp: 'D S 10/31/2020 12:55:58'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 12:59:14'!
test33PlayerOMovesTokenFromLeftBottomToCenterBottomCorrectly

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 0@2 to: 1@2.
	

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionXTokens.! !

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftBottomToCenterBottomCorrectly stamp: 'D S 10/31/2020 12:59:31'!
ERROR!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftBottomToCenterBottomCorrectly stamp: 'D S 10/31/2020 12:59:31'!
ERROR!
!Table methodsFor: 'actions' stamp: 'D S 10/31/2020 12:59:38'!
oMoveTokenFrom: aPoint to: aPoint2 
	self shouldBeImplemented.! !
!Table methodsFor: 'actions' stamp: 'D S 10/31/2020 12:59:51' prior: 50907748!
oMoveTokenFrom: aPoint to: aPoint2 
	
	positionOTokens := (Set with: 1@2 with: 1@1 with: 2@1)! !

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftBottomToCenterBottomCorrectly stamp: 'D S 10/31/2020 12:59:56'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:01:32'!
test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.

	self assert: (Set with: 0@2 with: 1@2 with: 2@1) equals: aGame positionXTokens.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:02:15'!
test32PlayerXMovesTokenFromLeftTopToCenterBottomCorrectly

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 0@2 to: 1@2.

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionXTokens.! !

!methodRemoval: TableTest #test32PlayerXMovesTokenFromLeftBottomToCenterBottomCorrectly stamp: 'D S 10/31/2020 13:02:15'!
test32PlayerXMovesTokenFromLeftBottomToCenterBottomCorrectly

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 0@2 to: 1@2.

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionXTokens.!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:02:42'!
test33PlayerOMovesTokenFromLeftTopToCenterBottomCorrectly

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 0@2 to: 1@2.
	

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionXTokens.! !

!methodRemoval: TableTest #test33PlayerOMovesTokenFromLeftBottomToCenterBottomCorrectly stamp: 'D S 10/31/2020 13:02:42'!
test33PlayerOMovesTokenFromLeftBottomToCenterBottomCorrectly

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 0@2 to: 1@2.
	

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionXTokens.!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:03:03'!
test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 0@2 to: 1@2.
	

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionXTokens.! !

!methodRemoval: TableTest #test33PlayerOMovesTokenFromLeftTopToCenterBottomCorrectly stamp: 'D S 10/31/2020 13:03:03'!
test33PlayerOMovesTokenFromLeftTopToCenterBottomCorrectly

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 0@2 to: 1@2.
	

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionXTokens.!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:03:15'!
test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 0@2 to: 1@2.

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionXTokens.! !

!methodRemoval: TableTest #test32PlayerXMovesTokenFromLeftTopToCenterBottomCorrectly stamp: 'D S 10/31/2020 13:03:15'!
test32PlayerXMovesTokenFromLeftTopToCenterBottomCorrectly

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 0@2 to: 1@2.

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionXTokens.!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 13:03:44'!
FAILURE!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 13:03:44'!
FAILURE!
!Table methodsFor: 'actions' stamp: 'D S 10/31/2020 13:05:53' prior: 50907621!
xMoveTokenFrom: aPoint to: aPoint2 
	
	aPoint = 0@2 ifTrue:[positionXTokens := (Set with: 1@2 with: 1@1 with: 2@1)].
	aPoint = 1@2 ifTrue:[positionXTokens := (Set with: 0@2 with: 1@2 with: 2@1)]! !

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 13:06:05'!
ERROR!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 13:06:05'!
ERROR!
!Table methodsFor: 'actions' stamp: 'D S 10/31/2020 13:06:33' prior: 50907899!
xMoveTokenFrom: aPoint to: aPoint2 
	
	(aPoint = 0@2) ifTrue:[positionXTokens := (Set with: 1@2 with: 1@1 with: 2@1)].
	(aPoint = 1@2) ifTrue:[positionXTokens := (Set with: 0@2 with: 1@2 with: 2@1)]! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 13:06:38'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 13:06:38'!
ERROR!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 13:06:38'!
ERROR!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 13:06:38'!
ERROR!
!Table methodsFor: 'actions' stamp: 'D S 10/31/2020 13:07:10' prior: 50907916!
xMoveTokenFrom: aPoint to: aPoint2 
	
	(aPoint = (0@2)) ifTrue:[positionXTokens := (Set with: 1@2 with: 1@1 with: 2@1)].
	(aPoint = (1@2)) ifTrue:[positionXTokens := (Set with: 0@2 with: 1@2 with: 2@1)]! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 13:07:17'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 13:07:17'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 13:07:17'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 13:07:17'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 13:07:17'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 13:07:17'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 13:07:17'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 13:07:17'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 13:07:17'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 13:07:17'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:07:17'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 13:07:17'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:07:17'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:07:18'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:07:18'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 13:07:18'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 13:07:18'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 13:07:18'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 13:07:18'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 13:07:18'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 13:07:18'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 13:07:18'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 13:07:18'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 13:07:18'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 13:07:18'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 13:07:18'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 13:07:18'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 13:07:18'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 13:07:18'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 13:07:18'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 13:07:18'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 13:07:18'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 13:07:18'!
FAILURE!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 13:07:18'!
FAILURE!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:08:08' prior: 50907834!
test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 0@2 to: 1@2.
	

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionOTokens.! !
!Table methodsFor: 'actions' stamp: 'D S 10/31/2020 13:08:26' prior: 50908032!
xMoveTokenFrom: aPoint to: aPoint2 
	
	(aPoint = (0@2)) ifTrue:[positionXTokens := (Set with: 1@2 with: 1@1 with: 2@1)].
	(aPoint = (1@1)) ifTrue:[positionXTokens := (Set with: 0@2 with: 1@2 with: 2@1)]! !

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 13:08:41'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 13:08:41'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 13:08:41'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:12:43'!
test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 1@1 to: 1@2.
	

	self assert: (Set with: 0@2 with: 1@2 with: 2@1) equals: aGame positionOTokens.! !

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 13:12:48'!
FAILURE!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 13:12:48'!
FAILURE!
!Table methodsFor: 'actions' stamp: 'D S 10/31/2020 13:13:08' prior: 50907753!
oMoveTokenFrom: aPoint to: aPoint2 
	
	(aPoint = (0@2)) ifTrue:[positionXTokens := (Set with: 1@2 with: 1@1 with: 2@1)].
	(aPoint = (1@1)) ifTrue:[positionXTokens := (Set with: 0@2 with: 1@2 with: 2@1)]! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:14:32' prior: 50907864!
test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 0@2 to: 0@1.

	self assert: (Set with: 0@1 with: 1@1 with: 2@1) equals: aGame positionXTokens.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:14:48'!
test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 0@2 to: 0@1.

	self assert: (Set with: 0@1 with: 1@1 with: 2@1) equals: aGame positionXTokens.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:03:15' prior: 50908217!
test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 0@2 to: 1@2.

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionXTokens.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 13:15:14'!
FAILURE!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 13:15:14'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 13:15:14'!
FAILURE!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 13:15:14'!
FAILURE!
!Table methodsFor: 'actions' stamp: 'D S 10/31/2020 13:15:37' prior: 50908207!
oMoveTokenFrom: aPoint to: aPoint2 
	
	(aPoint = (0@2)) ifTrue:[positionOTokens := (Set with: 1@2 with: 1@1 with: 2@1)].
	(aPoint = (1@1)) ifTrue:[positionOTokens := (Set with: 0@2 with: 1@2 with: 2@1)]! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 13:15:55'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 13:15:55'!
FAILURE!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 13:15:55'!
FAILURE!
!Table methodsFor: 'actions' stamp: 'D S 10/31/2020 13:16:27' prior: 50908164!
xMoveTokenFrom: aPoint to: aPoint2 
	
	(aPoint = (0@2)) ifTrue:[positionXTokens := (Set with: aPoint2 with: 1@1 with: 2@1)].
	(aPoint = (1@1)) ifTrue:[positionXTokens := (Set with: 0@2 with: 1@2 with: 2@1)]! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 13:16:31'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 13:16:31'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:17:15'!
test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 2@0.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 0@2 to: 0@1.
	

	self assert: (Set with: 0@1 with: 1@1 with: 2@1) equals: aGame positionOTokens.! !

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 13:17:21'!
FAILURE!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 13:17:21'!
FAILURE!
!Table methodsFor: 'actions' stamp: 'D S 10/31/2020 13:17:34' prior: 50908372!
oMoveTokenFrom: aPoint to: aPoint2 
	
	(aPoint = (0@2)) ifTrue:[positionOTokens := (Set with: aPoint2 with: 1@1 with: 2@1)].
	(aPoint = (1@1)) ifTrue:[positionOTokens := (Set with: 0@2 with: 1@2 with: 2@1)]! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 13:17:43'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 13:17:43'!
PASSED!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:18:04' prior: 50907763!
test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.

	self assert: (Set with: 0@2 with: 1@0 with: 2@1) equals: aGame positionXTokens.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:18:29'!
test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.

	self assert: (Set with: 0@2 with: 1@0 with: 2@1) equals: aGame positionXTokens.! !

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 13:18:37'!
FAILURE!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 13:18:37'!
FAILURE!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:33:37' prior: 50908786!
test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.

	self assert: (Set with: 0@2 with: 1@0 with: 2@1) equals: aGame positionXTokens.! !

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 13:33:50'!
FAILURE!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 13:33:50'!
FAILURE!
!Table methodsFor: 'actions' stamp: 'D S 10/31/2020 13:36:27' prior: 50908499!
xMoveTokenFrom: aPoint to: aPoint2 
	
	positionXTokens := positionXTokens remove: aPoint.
	positionXTokens:= positionXTokens add: aPoint2.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:37:47'!
test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@1 to: 0@2.
	aGame oMoveTokenFrom: 1@1 to: 1@0.

	self assert: (Set with: 0@2 with: 1@1 with: 2@1) equals: aGame positionOTokens.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:38:03' prior: 50908808!
test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.

	self assert: (Set with: 1@2 with: 1@0 with: 2@1) equals: aGame positionXTokens.! !

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 13:38:09'!
ERROR!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 13:38:09'!
ERROR!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 13:38:36'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 13:38:36'!
ERROR!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 13:38:36'!
ERROR!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 13:38:36'!
ERROR!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 13:38:36'!
ERROR!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 13:38:36'!
ERROR!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 13:38:36'!
ERROR!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 13:38:36'!
ERROR!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 13:38:36'!
ERROR!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 13:39:09'!
ERROR!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 13:39:20'!
ERROR!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 13:39:20'!
ERROR!
!Table methodsFor: 'actions' stamp: 'D S 10/31/2020 13:40:03' prior: 50908829!
xMoveTokenFrom: aPoint to: aPoint2 
	
	positionXTokens := positionXTokens remove: aPoint.
	positionXTokens:= positionXTokens add: aPoint2.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 13:40:11'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 13:40:11'!
ERROR!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 13:40:11'!
ERROR!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 13:40:11'!
ERROR!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 13:40:11'!
ERROR!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 13:40:11'!
ERROR!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 13:40:11'!
ERROR!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 13:40:11'!
ERROR!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 13:40:12'!
ERROR!
!Table methodsFor: 'actions' stamp: 'D S 10/31/2020 13:40:59' prior: 50909008!
xMoveTokenFrom: aPoint to: aPoint2 
	
	positionXTokens remove: aPoint.
	positionXTokens add: aPoint2.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 13:41:03'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 13:41:03'!
FAILURE!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 13:41:03'!
FAILURE!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:41:34' prior: 50908836!
test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly

	|aGame|
	
	aGame := Table startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@1 to: 0@2.
	aGame oMoveTokenFrom: 1@1 to: 1@0.

	self assert: (Set with: 1@2 with: 1@0 with: 2@1) equals: aGame positionOTokens.! !

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 13:41:38'!
FAILURE!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 13:41:38'!
FAILURE!
!Table methodsFor: 'actions' stamp: 'D S 10/31/2020 13:42:12' prior: 50908645!
oMoveTokenFrom: aPoint to: aPoint2 
	
	positionOTokens remove: aPoint.
	positionOTokens add: aPoint2.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 13:42:15'!
PASSED!

!classRenamed: #Table as: #Terni-Lapilli_Game stamp: 'D S 10/31/2020 13:44:55'!
Smalltalk renameClassNamed: #Table as: #Terni-Lapilli_Game!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50907185!
test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@1.

	self assert: 2 equals: aGame playerORemainingTokens .! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50908244!
test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 0@2 to: 1@2.

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionXTokens.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50907328!
test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 0@0.

	self assert: 1 equals: aGame playerORemainingTokens .! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50905522!
test20XTokensInTopRow

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 0@2.
	aGame putOAt: 0@0.
	aGame putXAt: 2@2.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50906073!
test23OTokensInSecondColumn

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.
	aGame putOAt: 1@0.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50905189!
test14XTokensInDescendingDiagonalEndsGame

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@0.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@0.


	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50905337!
test18XTokensInBottomRow

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 1@0.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 2@2.
	aGame putXAt: 2@0.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50907203!
test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.

	self assert: 1 equals: aGame playerXRemainingTokens .! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50906046!
test24XTokensInFirstColumn

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@0.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50904626!
test10TwoOTokensArePlacedCorrectly

	|aGame|
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.

	self assert: ((aGame positionOTokens includes: (1@1)) 
			and: (aGame positionOTokens includes: (1@2))).! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50904157!
test08PlayerXMovesAfterPlayerO

	|aGame|
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.

	self assert: aGame isPlayingX.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50906340!
test26XTokensInThirdColumn

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@2.
	aGame putXAt: 2@0.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50906204!
test25OTokensInFirstColumn

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@1.
	aGame putXAt: 1@2.
	aGame putOAt: 0@2.
	aGame putXAt: 2@2.
	aGame putOAt: 0@0.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50905427!
test19OTokensInBottomRow

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@0.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50908185!
test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 1@1 to: 1@2.
	

	self assert: (Set with: 0@2 with: 1@2 with: 2@1) equals: aGame positionOTokens.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50908230!
test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 0@2 to: 0@1.

	self assert: (Set with: 0@1 with: 1@1 with: 2@1) equals: aGame positionXTokens.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50905170!
test12NotForming3InARowDoesntEndGame

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@1.

	self deny: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50905206!
test15OTokensInDescendingDiagonalEndsGame

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 2@1.
	aGame putOAt: 2@0.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50906490!
test27OTokensInThirdColumn

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 2@0.
	aGame putXAt: 1@2.
	aGame putOAt: 2@2.
	aGame putXAt: 0@0.
	aGame putOAt: 2@1.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50904117!
test06PlayerXDoesntMoveSecond

	|aGame|
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 0@0.

	self deny: aGame isPlayingX .! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50909277!
test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@1 to: 0@2.
	aGame oMoveTokenFrom: 1@1 to: 1@0.

	self assert: (Set with: 1@2 with: 1@0 with: 2@1) equals: aGame positionOTokens.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50908149!
test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 0@2 to: 1@2.
	

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionOTokens.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50904473!
test04XTokenIsPlacedCorrectly

	|aGame|
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 0@0.
	
	self assert: aGame positionXTokens includes: (0@0).! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50903580!
test01PlayersHave3TokenWhenGameStarts

	|aGame|
	aGame := Terni-Lapilli_Game startGame.
	
	self assert: 3 equals: aGame playerXRemainingTokens.
	self assert: 3 equals: aGame playerORemainingTokens.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50904563!
test05OTokenIsPlacedCorrectly

	|aGame|
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.

	self assert: aGame positionOTokens includes: (1@1).! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50904145!
test07PlayerOMoveSecond

	|aGame|
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 0@0.

	self assert: aGame isPlayingO.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50908623!
test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 2@0.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 0@2 to: 0@1.
	

	self assert: (Set with: 0@1 with: 1@1 with: 2@1) equals: aGame positionOTokens.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50908773!
test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.

	self assert: (Set with: 0@2 with: 1@0 with: 2@1) equals: aGame positionXTokens.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50905622!
test21OTokensInTopRow

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 0@2.
	aGame putXAt: 1@0.
	aGame putOAt: 2@2.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50904647!
test09TwoXTokensArePlacedCorrectly

	|aGame|
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.

	self assert: ((aGame positionXTokens includes: (0@0)) 
			and: (aGame positionXTokens includes: (0@1))).! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50907168!
test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 2@1.

	self assert: 2 equals: aGame playerXRemainingTokens .! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50908851!
test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.

	self assert: (Set with: 1@2 with: 1@0 with: 2@1) equals: aGame positionXTokens.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50903694!
test03PlayerODoesntMovesFirst

	|aGame|
	aGame := Terni-Lapilli_Game startGame.
	
	self deny: aGame isPlayingO.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50905149!
test13OTokensInAscendingDiagonalEndsGame

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50905111!
test11XTokensInAscendingDiagonalEndsGame

	|aGame|
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50905304!
test17OTokensInMiddleRow

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50903673!
test02PlayerXMovesFirst

	|aGame|
	aGame := Terni-Lapilli_Game startGame.
	
	self assert: aGame isPlayingX.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50905225!
test16XTokensInMiddleRow

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@0.
	aGame putXAt: 2@1.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:44:56' prior: 50906055!
test22XTokensInSecondColumn

	|aGame|
	
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 0@2.
	aGame putXAt: 1@0.

	self assert: aGame isOver.! !

!classRenamed: #Terni-Lapilli_Game as: #Terni-Lapilli-Game stamp: 'D S 10/31/2020 13:45:16'!
Smalltalk renameClassNamed: #Terni-Lapilli_Game as: #Terni-Lapilli-Game!

!classRenamed: #Terni-Lapilli-Game as: #Game stamp: 'D S 10/31/2020 13:45:53'!
Smalltalk renameClassNamed: #Terni-Lapilli-Game as: #Game!
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:46:07' prior: 50909436!
test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@1.

	self assert: 2 equals: aGame playerORemainingTokens .! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:46:14' prior: 50909695!
test01PlayersHave3TokenWhenGameStarts

	|aGame|
	aGame := Game startGame.
	
	self assert: 3 equals: aGame playerXRemainingTokens.
	self assert: 3 equals: aGame playerORemainingTokens.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:46:18' prior: 50909836!
test02PlayerXMovesFirst

	|aGame|
	aGame := Game startGame.
	
	self assert: aGame isPlayingX.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:46:22' prior: 50909797!
test03PlayerODoesntMovesFirst

	|aGame|
	aGame := Game startGame.
	
	self deny: aGame isPlayingO.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:46:27' prior: 50909687!
test04XTokenIsPlacedCorrectly

	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	
	self assert: aGame positionXTokens includes: (0@0).! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:46:29' prior: 50909705!
test05OTokenIsPlacedCorrectly

	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.

	self assert: aGame positionOTokens includes: (1@1).! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:46:32' prior: 50909647!
test06PlayerXDoesntMoveSecond

	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.

	self deny: aGame isPlayingX .! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:46:36' prior: 50909714!
test07PlayerOMoveSecond

	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.

	self assert: aGame isPlayingO.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:46:39' prior: 50909545!
test08PlayerXMovesAfterPlayerO

	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.

	self assert: aGame isPlayingX.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:46:43' prior: 50909763!
test09TwoXTokensArePlacedCorrectly

	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.

	self assert: ((aGame positionXTokens includes: (0@0)) 
			and: (aGame positionXTokens includes: (0@1))).! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:46:46' prior: 50909533!
test10TwoOTokensArePlacedCorrectly

	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.

	self assert: ((aGame positionOTokens includes: (1@1)) 
			and: (aGame positionOTokens includes: (1@2))).! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:46:50' prior: 50909815!
test11XTokensInAscendingDiagonalEndsGame

	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:46:52' prior: 50909615!
test12NotForming3InARowDoesntEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@1.

	self deny: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:46:55' prior: 50909804!
test13OTokensInAscendingDiagonalEndsGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:47:02' prior: 50909492!
test14XTokensInDescendingDiagonalEndsGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@0.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@0.


	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:47:06' prior: 50909625!
test15OTokensInDescendingDiagonalEndsGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 2@1.
	aGame putOAt: 2@0.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:47:11' prior: 50909843!
test16XTokensInMiddleRow

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@0.
	aGame putXAt: 2@1.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:47:17' prior: 50909825!
test17OTokensInMiddleRow

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:47:19' prior: 50909503!
test18XTokensInBottomRow

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@0.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 2@2.
	aGame putXAt: 2@0.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:47:22' prior: 50909574!
test19OTokensInBottomRow

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@0.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:47:25' prior: 50909471!
test20XTokensInTopRow

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 0@2.
	aGame putOAt: 0@0.
	aGame putXAt: 2@2.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:47:28' prior: 50909752!
test21OTokensInTopRow

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 0@2.
	aGame putXAt: 1@0.
	aGame putOAt: 2@2.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:47:33' prior: 50909655!
test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@1 to: 0@2.
	aGame oMoveTokenFrom: 1@1 to: 1@0.

	self assert: (Set with: 1@2 with: 1@0 with: 2@1) equals: aGame positionOTokens.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:47:35' prior: 50909783!
test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.

	self assert: (Set with: 1@2 with: 1@0 with: 2@1) equals: aGame positionXTokens.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:47:40' prior: 50909722!
test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@0.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 0@2 to: 0@1.
	

	self assert: (Set with: 0@1 with: 1@1 with: 2@1) equals: aGame positionOTokens.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:47:43' prior: 50909601!
test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 0@2 to: 0@1.

	self assert: (Set with: 0@1 with: 1@1 with: 2@1) equals: aGame positionXTokens.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:47:46' prior: 50909585!
test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 1@1 to: 1@2.
	

	self assert: (Set with: 0@2 with: 1@2 with: 2@1) equals: aGame positionOTokens.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:47:49' prior: 50909738!
test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.

	self assert: (Set with: 0@2 with: 1@0 with: 2@1) equals: aGame positionXTokens.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:47:53' prior: 50909671!
test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 0@2 to: 1@2.
	

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionOTokens.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:47:57' prior: 50909446!
test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 0@2 to: 1@2.

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionXTokens.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:48:03' prior: 50909460!
test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 0@0.

	self assert: 1 equals: aGame playerORemainingTokens .! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:48:07' prior: 50909513!
test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.

	self assert: 1 equals: aGame playerXRemainingTokens .! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:48:15' prior: 50909774!
test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.

	self assert: 2 equals: aGame playerXRemainingTokens .! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:48:19' prior: 50909636!
test27OTokensInThirdColumn

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 2@0.
	aGame putXAt: 1@2.
	aGame putOAt: 2@2.
	aGame putXAt: 0@0.
	aGame putOAt: 2@1.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:48:22' prior: 50909553!
test26XTokensInThirdColumn

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@2.
	aGame putXAt: 2@0.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:48:27' prior: 50909563!
test25OTokensInFirstColumn

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@1.
	aGame putXAt: 1@2.
	aGame putOAt: 0@2.
	aGame putXAt: 2@2.
	aGame putOAt: 0@0.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:48:31' prior: 50909523!
test24XTokensInFirstColumn

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@0.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:48:34' prior: 50909481!
test23OTokensInSecondColumn

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.
	aGame putOAt: 1@0.

	self assert: aGame isOver.! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:48:39' prior: 50909853!
test22XTokensInSecondColumn

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 0@2.
	aGame putXAt: 1@0.

	self assert: aGame isOver.! !

Game subclass: #PlayerX
	instanceVariableNames: 'playerXRemainingTokens positionXTokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!

Game subclass: #PlayerX
	instanceVariableNames: 'remainingTokens positionTokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!

!classDefinition: #PlayerX category: 'Terni-Lapilli' stamp: 'D S 10/31/2020 13:50:14'!
Game subclass: #PlayerX
	instanceVariableNames: 'remainingTokens positionTokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!

Game subclass: #PlayerY
	instanceVariableNames: 'remainingTokens positionTokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!

!classDefinition: #PlayerY category: 'Terni-Lapilli' stamp: 'D S 10/31/2020 13:50:19'!
Game subclass: #PlayerY
	instanceVariableNames: 'remainingTokens positionTokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!

----SNAPSHOT----(31 October 2020 13:50:55) CuisUniversity-4383.image priorSource: 18426155!
!Game methodsFor: 'actions' stamp: 'D S 10/31/2020 13:51:13' prior: 50907220!
putXAt: aPoint 
	
	isXTurn := false.
	playerXRemainingTokens := playerXRemainingTokens - 1.! !
!PlayerX methodsFor: 'no messages' stamp: 'D S 10/31/2020 13:51:48' overrides: 50910315!
putXAt: aPoint

	positionTokens add: aPoint.
	remainingTokens := remainingTokens - 1
! !
!Game methodsFor: 'actions' stamp: 'D S 10/31/2020 13:52:46' prior: 50910315!
putXAt: aPoint 
	
	isXTurn := false.
! !
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:53:06' overrides: 50909141!
xMoveTokenFrom: aPoint to: aPoint2 
	
	positionTokens remove: aPoint.
	positionTokens add: aPoint2.! !

Object subclass: #Game
	instanceVariableNames: 'playerORemainingTokens positionOTokens playerMoving'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!

!classDefinition: #Game category: 'Terni-Lapilli' stamp: 'D S 10/31/2020 13:53:24'!
Object subclass: #Game
	instanceVariableNames: 'playerORemainingTokens positionOTokens playerMoving'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!

Object subclass: #Game
	instanceVariableNames: 'playerX playerY playerMoving'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!

!classDefinition: #Game category: 'Terni-Lapilli' stamp: 'D S 10/31/2020 13:54:06'!
Object subclass: #Game
	instanceVariableNames: 'playerX playerY playerMoving'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!

!classDefinition: #Game category: 'Terni-Lapilli' stamp: 'D S 10/31/2020 13:55:15'!
Object subclass: #Game
	instanceVariableNames: 'playerX playerY playerMoving playerO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!
!Game methodsFor: 'initialize' stamp: 'D S 10/31/2020 13:55:21' prior: 50904275!
initializeGame

	playerO := playerO ready.
	playerX := PlayerX ready.
	playerMoving := playerX.! !

!classRenamed: #PlayerY as: #PlayerO stamp: 'D S 10/31/2020 13:55:31'!
Smalltalk renameClassNamed: #PlayerY as: #PlayerO!

Object subclass: #Game
	instanceVariableNames: 'playerX playerO playerMoving'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!

!classDefinition: #Game category: 'Terni-Lapilli' stamp: 'D S 10/31/2020 13:55:46'!
Object subclass: #Game
	instanceVariableNames: 'playerX playerO playerMoving'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!
!Game methodsFor: 'initialize' stamp: 'D S 10/31/2020 13:55:58' prior: 50910372!
initializeGame

	playerO := PlayerO ready.
	playerX := PlayerX ready.
	playerMoving := playerX.! !
!PlayerO class methodsFor: 'nil' stamp: 'D S 10/31/2020 13:56:28'!
ready

	^PlayerO ready.! !
!PlayerO class methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:56:37' prior: 50910400!
ready

	^self ready.! !
!PlayerX class methodsFor: 'no messages' stamp: 'D S 10/31/2020 13:56:54'!
ready

	^self ready.! !
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:57:28'!
ready

	remainingTokens := 3.
	positionTokens := Set new.! !
!PlayerO methodsFor: 'no messages' stamp: 'D S 10/31/2020 13:58:03'!
ready

	remainingTokens := 3.
	positionTokens  := 3.! !
!PlayerO methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:58:06' prior: 50910417!
ready

	remainingTokens := 3.
	positionTokens  := Set new.! !
!PlayerO methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:58:24' overrides: 50909299!
oMoveTokenFrom: aPoint to: aPoint2 
	
	positionTokens remove: aPoint.
	positionTokens add: aPoint2.! !
!PlayerO methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 13:58:52' overrides: 50907346!
putOAt: aPoint 
	
	positionTokens add: aPoint.
	remainingTokens := remainingTokens - 1.! !
!Game methodsFor: 'actions' stamp: 'D S 10/31/2020 13:59:57' prior: 50909299!
oMoveTokenFrom: aPoint to: aPoint2 
	
	^playerMoving oMoveTokenFrom: aPoint to: aPoint2. ! !
!Game methodsFor: 'actions' stamp: 'D S 10/31/2020 14:00:11' prior: 50909141!
xMoveTokenFrom: aPoint to: aPoint2 
	
	^playerMoving xMoveTokenFrom: aPoint to: aPoint2.! !
!Game methodsFor: 'actions' stamp: 'D S 10/31/2020 14:00:40' prior: 50910327!
putXAt: aPoint 
	
	playerMoving putXAt: aPoint.
	playerMoving := playerO.
! !
!Game methodsFor: 'actions' stamp: 'D S 10/31/2020 14:00:56' prior: 50907346!
putOAt: aPoint 
	
	playerMoving putOAt: aPoint.
	playerMoving := playerX.
! !
!Game methodsFor: 'accessing' stamp: 'D S 10/31/2020 14:01:23' prior: 50904007!
isPlayingO
	
	^(playerMoving == playerO).! !
!Game methodsFor: 'accessing' stamp: 'D S 10/31/2020 14:01:38' prior: 50903908!
isPlayingX
	
	^playerMoving == playerX.! !
!PlayerO class methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 14:01:59' prior: 50910404!
ready

	^self readyPlayer.! !
!PlayerX class methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 14:02:06' prior: 50910408!
ready

	^self readyPlayer.! !
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 14:02:17'!
readyPlayer

	remainingTokens := 3.
	positionTokens := Set new.! !
!PlayerX class methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 14:02:17'!
readyPlayer

	^self readyPlayer.! !

!methodRemoval: PlayerX #ready stamp: 'D S 10/31/2020 14:02:17'!
ready

	remainingTokens := 3.
	positionTokens := Set new.!

!methodRemoval: PlayerX class #ready stamp: 'D S 10/31/2020 14:02:17'!
ready

	^self readyPlayer.!
!PlayerO methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 14:02:28'!
readyPlayer

	remainingTokens := 3.
	positionTokens  := Set new.! !
!PlayerO class methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 14:02:28'!
readyPlayer

	^self readyPlayer.! !

!methodRemoval: PlayerO #ready stamp: 'D S 10/31/2020 14:02:28'!
ready

	remainingTokens := 3.
	positionTokens  := Set new.!

!methodRemoval: PlayerO class #ready stamp: 'D S 10/31/2020 14:02:28'!
ready

	^self readyPlayer.!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:02:31'!
ERROR!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:02:31'!
ERROR!
!PlayerO methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 14:03:24'!
positionToken

	^positionTokens.! !
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 14:03:32'!
positionToken

	^positionTokens.! !
!Game methodsFor: 'accessing --Private--' stamp: 'D S 10/31/2020 14:07:30' prior: 50906867!
playerOHasThreeInAColumn
	|positionTokens|
	
	positionTokens := playerO positionToken.
	^((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]) |
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]) |
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]))! !
!Game methodsFor: 'accessing --Private--' stamp: 'D S 10/31/2020 14:07:47' prior: 50906856!
playerOHasThreeInARow
	|positionTokens|
	
	positionTokens := playerO positionToken.

	^((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=0]) |
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=1]) |
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=2])).! !
!Game methodsFor: 'accessing --Private--' stamp: 'D S 10/31/2020 14:08:02' prior: 50906837!
playerXHasThreeInAColumn
	|positionTokens|
	
	positionTokens := playerX positionToken.

	
	^((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]) |
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]) |
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]))! !
!Game methodsFor: 'accessing --Private--' stamp: 'D S 10/31/2020 14:08:23' prior: 50906826!
playerXHasThreeInARow
	|positionTokens|
	
	positionTokens := playerO positionToken.
	
	^((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=0]) |
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=1]) |
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=2])).! !
!Game methodsFor: 'accessing --Private--' stamp: 'D S 10/31/2020 14:08:26' prior: 50910683!
playerXHasThreeInARow
	|positionTokens|
	
	positionTokens := playerX positionToken.
	
	^((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=0]) |
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=1]) |
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=2])).! !
!Game methodsFor: 'accessing --Private--' stamp: 'D S 10/31/2020 14:08:39' prior: 50906848!
playerXHasThreeInADiagonal
	|positionTokens|
	
	positionTokens := playerX positionToken.
	
	^((positionTokens = (Set with: 0@0 with: 1@1 with: 2@2)) |
	(positionTokens = (Set with: 2@0 with: 1@1 with: 0@2))).! !
!Game methodsFor: 'accessing --Private--' stamp: 'D S 10/31/2020 14:08:49' prior: 50906878!
playerOHasThreeInADiagonal
	|positionTokens|
	
	positionTokens := playerO positionToken.
	
	^((positionTokens = (Set with: 0@0 with: 1@1 with: 2@2)) |
	(positionTokens = (Set with: 2@0 with: 1@1 with: 0@2))).! !
!Game methodsFor: 'initialize' stamp: 'D S 10/31/2020 14:09:08' prior: 50910394!
initializeGame

	playerO := PlayerO readyPlayer .
	playerX := PlayerX readyPlayer .
	playerMoving := playerX.! !
!Game methodsFor: 'initialize' stamp: 'D S 10/31/2020 14:09:10' prior: 50910729!
initializeGame

	playerO := PlayerO readyPlayer.
	playerX := PlayerX readyPlayer.
	playerMoving := playerX.! !
!Game methodsFor: 'accessing' stamp: 'D S 10/31/2020 14:09:22' prior: 50903765!
positionXTokens
	
	^playerX positionToken ! !
!Game methodsFor: 'accessing' stamp: 'D S 10/31/2020 14:09:33' prior: 50903951!
positionOTokens
	
	^playerO positionToken ! !
!Game methodsFor: 'accessing' stamp: 'D S 10/31/2020 14:09:41' prior: 50903649!
playerXRemainingTokens
	
	^playerX RemainingTokens! !
!Game methodsFor: 'accessing' stamp: 'D S 10/31/2020 14:09:46' prior: 50910750!
playerXRemainingTokens
	
	^playerX remainingTokens! !
!Game methodsFor: 'accessing' stamp: 'D S 10/31/2020 14:09:50' prior: 50903665!
playerORemainingTokens
	
	^playerO remainingTokens! !
!PlayerO methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 14:10:03'!
remainingTokens

	^remainingTokens .! !
!PlayerO methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 14:10:04' prior: 50910765!
remainingTokens

	^remainingTokens.! !
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 14:10:12'!
remainingTokens

	^remainingTokens.! !
!PlayerO class methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 14:10:39' prior: 50910501!
readyPlayer

	^self readyPlayer.! !
!PlayerO methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 14:10:44'!
ready

	remainingTokens := 3.
	positionTokens  := Set new.! !
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 14:10:49'!
ready

	remainingTokens := 3.
	positionTokens := Set new.! !

!methodRemoval: PlayerX #readyPlayer stamp: 'D S 10/31/2020 14:10:54'!
readyPlayer

	remainingTokens := 3.
	positionTokens := Set new.!

!methodRemoval: PlayerO #readyPlayer stamp: 'D S 10/31/2020 14:10:59'!
readyPlayer

	remainingTokens := 3.
	positionTokens  := Set new.!
!PlayerO class methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 14:11:04' prior: 50910779!
readyPlayer

	^self ready.! !
!PlayerX class methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 14:11:09' prior: 50910485!
readyPlayer

	^self ready.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:11:12'!
ERROR!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 14:11:25'!
ERROR!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 14:11:30'!
ERROR!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 14:11:30'!
ERROR!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 14:11:55'!
ERROR!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 14:11:55'!
ERROR!
!PlayerO class methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 14:12:16' prior: 50910802!
readyPlayer

	^self new ready.! !
!PlayerX class methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 14:12:22' prior: 50910807!
readyPlayer

	^self new ready.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:12:25'!
ERROR!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:12:25'!
ERROR!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:12:25'!
ERROR!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:12:25'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:12:25'!
ERROR!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:29:27'!
ERROR!
!Game methodsFor: 'actions' stamp: 'D S 10/31/2020 14:29:59' prior: 50910446!
xMoveTokenFrom: aPoint to: aPoint2 
	
	playerMoving xMoveTokenFrom: aPoint to: aPoint2.
	playerMoving := playerO.! !
!Game methodsFor: 'actions' stamp: 'D S 10/31/2020 14:30:11' prior: 50910440!
oMoveTokenFrom: aPoint to: aPoint2 
	
	playerMoving oMoveTokenFrom: aPoint to: aPoint2. 
	playerMoving := playerX.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:30:13'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:30:14'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:30:14'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:30:14'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:30:14'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:30:14'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:30:14'!
PASSED!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:36:36'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:36:36'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 14:42:17'!
test40
	|aGame|
	aGame := Game startGame.
	
	^ [Game putOAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game ErrorTurnX)).].

	! !

!testRun: #TableTest #test40 stamp: 'D S 10/31/2020 14:42:29'!
ERROR!

!testRun: #TableTest #test40 stamp: 'D S 10/31/2020 14:42:29'!
ERROR!
!PlayerO class methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 14:44:04'!
errorDescriptionTurnX

	^'Es el turno del jugador X'! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 14:44:21' prior: 50911354!
test40
	|aGame|
	aGame := Game startGame.
	
	^ [Game putOAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO ErrorTurnX)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 14:44:36' prior: 50911372!
test40
	|aGame|
	aGame := Game startGame.
	
	^ [aGame putOAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO ErrorTurnX)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 14:44:44' prior: 50911381!
test40
	|aGame|
	aGame := Game startGame.
	
	^ [aGame putOAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionTurnX)).].

	! !
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 14:45:28' overrides: 50910457!
putOAt: aPoint

	^self error! !
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 14:46:03' prior: 50911400 overrides: 50910457!
putOAt: aPoint

	^self error: self class errorDescriptionTurnX.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:46:06'!
PASSED!

!testRun: #TableTest #test40 stamp: 'D S 10/31/2020 14:46:06'!
FAILURE!

!testRun: #TableTest #test40 stamp: 'D S 10/31/2020 14:46:06'!
FAILURE!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 14:46:15' prior: 50911390!
test40
	|aGame|
	aGame := Game startGame.
	
	^ [aGame putOAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionTurnX)).].

	! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:46:17'!
PASSED!

!testRun: #TableTest #test40 stamp: 'D S 10/31/2020 14:46:17'!
ERROR!

!testRun: #TableTest #test40 stamp: 'D S 10/31/2020 14:46:17'!
ERROR!
!PlayerX class methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 14:46:53'!
errorDescriptionTurnX

	^'Es el turno del jugador X'! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:47:03'!
PASSED!

!testRun: #TableTest #test40 stamp: 'D S 10/31/2020 14:47:03'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 14:47:30'!
test41
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	^ [aGame putXAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionTurnO)).].

	! !

!testRun: #TableTest #test41 stamp: 'D S 10/31/2020 14:47:36'!
ERROR!

!testRun: #TableTest #test41 stamp: 'D S 10/31/2020 14:47:36'!
ERROR!
!PlayerO class methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 14:47:46'!
errorDescriptionTurnO

	^'Es el turno del jugador O'! !

!methodRemoval: PlayerO class #errorDescriptionTurnX stamp: 'D S 10/31/2020 14:47:52'!
errorDescriptionTurnX

	^'Es el turno del jugador X'!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 14:47:54'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 14:47:54'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 14:47:54'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:47:54'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test40 stamp: 'D S 10/31/2020 14:47:55'!
PASSED!

!testRun: #TableTest #test41 stamp: 'D S 10/31/2020 14:47:55'!
FAILURE!

!testRun: #TableTest #test41 stamp: 'D S 10/31/2020 14:47:55'!
FAILURE!
!PlayerO methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 14:48:19' overrides: 50910452!
putXAt: aPoint

	^self error: self class errorDescriptionTurnO.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test40 stamp: 'D S 10/31/2020 14:48:21'!
PASSED!

!testRun: #TableTest #test41 stamp: 'D S 10/31/2020 14:48:21'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 14:49:59'!
test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX
	|aGame|
	aGame := Game startGame.
	
	^ [aGame putOAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionTurnX)).].

	! !

!methodRemoval: TableTest #test40 stamp: 'D S 10/31/2020 14:49:59'!
test40
	|aGame|
	aGame := Game startGame.
	
	^ [aGame putOAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionTurnX)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 14:50:14'!
test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	^ [aGame putXAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionTurnO)).].

	! !

!methodRemoval: TableTest #test41 stamp: 'D S 10/31/2020 14:50:14'!
test41
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	^ [aGame putXAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionTurnO)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 14:52:53'!
test42
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	
	^ [aGame putOAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (aGame errorDescriptionTokenAlreadyInThatPosition)).].

	! !
!Game methodsFor: 'actions' stamp: 'D S 10/31/2020 14:54:08' prior: 50910457!
putOAt: aPoint 
	
	((self positionXTokens) includes: aPoint) ifTrue:[self error: self class errorDescriptionTokenAlreadyInThatPosition].
	playerMoving putOAt: aPoint.
	playerMoving := playerX.
! !
!Game class methodsFor: 'instance creation' stamp: 'D S 10/31/2020 14:54:50'!
errorDescriptionTokenAlreadyInThatPosition

	^'A token is already in that position'! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 14:54:54'!
PASSED!

!testRun: #TableTest #test42 stamp: 'D S 10/31/2020 14:54:54'!
ERROR!

!testRun: #TableTest #test42 stamp: 'D S 10/31/2020 14:54:54'!
ERROR!

!testRun: #TableTest #test42 stamp: 'D S 10/31/2020 14:55:39'!
ERROR!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 14:55:52' prior: 50912139!
test42
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	
	^ [aGame putOAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionTokenAlreadyInThatPosition)).].

	! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 14:55:54'!
PASSED!

!testRun: #TableTest #test42 stamp: 'D S 10/31/2020 14:55:54'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 14:56:38'!
test43
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	
	^ [aGame putXAt: 1@1.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionTokenAlreadyInThatPosition)).].

	! !

!testRun: #TableTest #test43 stamp: 'D S 10/31/2020 14:56:42'!
FAILURE!

!testRun: #TableTest #test43 stamp: 'D S 10/31/2020 14:56:42'!
FAILURE!
!Game methodsFor: 'actions' stamp: 'D S 10/31/2020 14:57:01' prior: 50910452!
putXAt: aPoint 
	
	((self positionOTokens) includes: aPoint) ifTrue:[self error: self class errorDescriptionTokenAlreadyInThatPosition].
	playerMoving putXAt: aPoint.
	playerMoving := playerO.
! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test42 stamp: 'D S 10/31/2020 14:57:05'!
PASSED!

!testRun: #TableTest #test43 stamp: 'D S 10/31/2020 14:57:05'!
PASSED!
!Game class methodsFor: 'instance creation' stamp: 'D S 10/31/2020 14:57:27'!
errorDescriptionOponentTokenInPosition

	^'A token is already in that position'! !
!Game methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 14:57:27' prior: 50912149!
putOAt: aPoint 
	
	((self positionXTokens) includes: aPoint) ifTrue:[self error: self class errorDescriptionOponentTokenInPosition].
	playerMoving putOAt: aPoint.
	playerMoving := playerX.
! !
!Game methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 14:57:27' prior: 50912463!
putXAt: aPoint 
	
	((self positionOTokens) includes: aPoint) ifTrue:[self error: self class errorDescriptionOponentTokenInPosition].
	playerMoving putXAt: aPoint.
	playerMoving := playerO.
! !

!methodRemoval: Game class #errorDescriptionTokenAlreadyInThatPosition stamp: 'D S 10/31/2020 14:57:27'!
errorDescriptionTokenAlreadyInThatPosition

	^'A token is already in that position'!
!Game class methodsFor: 'instance creation' stamp: 'D S 10/31/2020 14:57:40' prior: 50912609!
errorDescriptionOponentTokenInPosition

	^'The opponent has a token There!!'! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 14:57:45'!
PASSED!

!testRun: #TableTest #test42 stamp: 'D S 10/31/2020 14:57:45'!
ERROR!

!testRun: #TableTest #test43 stamp: 'D S 10/31/2020 14:57:45'!
ERROR!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 14:58:11' prior: 50912303!
test42
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	
	^ [aGame putOAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 14:58:16' prior: 50912448!
test43
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	
	^ [aGame putXAt: 1@1.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 14:59:02'!
test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	
	^ [aGame putOAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	! !

!methodRemoval: TableTest #test42 stamp: 'D S 10/31/2020 14:59:02'!
test42
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	
	^ [aGame putOAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 14:59:16'!
test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	
	^ [aGame putXAt: 1@1.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	! !

!methodRemoval: TableTest #test43 stamp: 'D S 10/31/2020 14:59:25'!
test43
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	
	^ [aGame putXAt: 1@1.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 15:00:21'!
test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	
	^ [aGame putXAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOwnTokenThere)).].

	! !

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:00:26'!
FAILURE!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:00:26'!
FAILURE!
!Game class methodsFor: 'instance creation' stamp: 'D S 10/31/2020 15:01:04'!
errorDescriptionOwnTokenThere

	^'You already have a token There!!'! !
!Game class methodsFor: 'instance creation' stamp: 'D S 10/31/2020 15:01:07' prior: 50912639!
errorDescriptionOponentTokenInPosition

	^'The opponent have a token There!!'! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:01:10'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:01:10'!
FAILURE!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:01:10'!
FAILURE!
!Game methodsFor: 'actions' stamp: 'D S 10/31/2020 15:02:07' prior: 50912624!
putXAt: aPoint 
	
	((self positionOTokens) includes: aPoint) ifTrue:[self error: self class errorDescriptionOponentTokenInPosition].
	(self positionXTokens includes: aPoint) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	playerMoving putXAt: aPoint.
	playerMoving := playerO.
! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:02:11'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:02:11'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 15:02:43'!
test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	^ [aGame putOAt: 1@1.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOwnTokenThere)).].

	! !

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:02:45'!
FAILURE!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:02:45'!
FAILURE!
!Game methodsFor: 'actions' stamp: 'D S 10/31/2020 15:03:12' prior: 50912615!
putOAt: aPoint 
	
	((self positionXTokens) includes: aPoint) ifTrue:[self error: self class errorDescriptionOponentTokenInPosition].
	(self positionOTokens includes: aPoint) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].

	playerMoving putOAt: aPoint.
	playerMoving := playerX.
! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:03:14'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:03:14'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 15:06:31'!
test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	^ [aGame putOAt: 1@1.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOwnTokenThere)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 15:07:32' prior: 50913358!
test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 2@1 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionCantMoveTokenOpponent)).].

	! !

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:07:41'!
FAILURE!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:07:41'!
FAILURE!
!Game methodsFor: 'actions' stamp: 'D S 10/31/2020 15:08:34' prior: 50911090!
xMoveTokenFrom: aPoint to: aPoint2 
	
	(playerX positionToken includes: aPoint2) ifTrue: [self error: self class errorDescriptionCantMoveTokenOpponent].
	playerMoving xMoveTokenFrom: aPoint to: aPoint2.
	playerMoving := playerO.! !
!Game methodsFor: 'actions' stamp: 'D S 10/31/2020 15:09:22' prior: 50913393!
xMoveTokenFrom: aPoint to: aPoint2 
	
	(playerX positionToken includes: aPoint2) ifTrue: [self error: self class errorDescriptionOponentTokenInPosition ].
	playerMoving xMoveTokenFrom: aPoint to: aPoint2.
	playerMoving := playerO.! !
!Game methodsFor: 'actions' stamp: 'D S 10/31/2020 15:09:32' prior: 50913403!
xMoveTokenFrom: aPoint to: aPoint2 
	
	(playerO positionToken includes: aPoint2) ifTrue: [self error: self class errorDescriptionOponentTokenInPosition ].
	playerMoving xMoveTokenFrom: aPoint to: aPoint2.
	playerMoving := playerO.! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 15:09:41' prior: 50913371!
test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 2@1 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:09:46'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:09:46'!
FAILURE!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:09:46'!
FAILURE!
!Game methodsFor: 'actions' stamp: 'D S 10/31/2020 15:10:07' prior: 50913413!
xMoveTokenFrom: aPoint to: aPoint2 
	
	((playerO positionToken) includes: aPoint2) ifTrue: [self error: self class errorDescriptionOponentTokenInPosition ].
	playerMoving xMoveTokenFrom: aPoint to: aPoint2.
	playerMoving := playerO.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:10:11'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:10:11'!
FAILURE!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:10:11'!
FAILURE!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 15:10:50' prior: 50913423!
test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 2@1 to: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:10:53'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:10:53'!
PASSED!
!Game methodsFor: 'actions' stamp: 'D S 10/31/2020 15:14:07' prior: 50913199!
putOAt: aPoint 
	
	((self positionXTokens) includes: aPoint) ifTrue:[self error: self class errorDescriptionOponentTokenInPosition].
	playerMoving putOAt: aPoint.
	playerMoving := playerX.
! !
!PlayerO methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 15:15:03' prior: 50910434 overrides: 50913924!
putOAt: aPoint 
	
	(positionTokens includes: aPoint) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	positionTokens add: aPoint.
	remainingTokens := remainingTokens - 1.
	! !
!PlayerO class methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 15:15:19' overrides: 50912864!
errorDescriptionOwnTokenThere

	^'You already have a token There!!'! !
!Game methodsFor: 'actions' stamp: 'D S 10/31/2020 15:15:41' prior: 50913023!
putXAt: aPoint 
	
	((self positionOTokens) includes: aPoint) ifTrue:[self error: self class errorDescriptionOponentTokenInPosition].
	playerMoving putXAt: aPoint.
	playerMoving := playerO.
! !
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 15:15:57' prior: 50910321 overrides: 50913949!
putXAt: aPoint
	
	(positionTokens includes: aPoint) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	positionTokens add: aPoint.
	remainingTokens := remainingTokens - 1
! !
!PlayerX class methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 15:16:07' overrides: 50912864!
errorDescriptionOwnTokenThere

	^'You already have a token There!!'! !

!methodRemoval: Game class #errorDescriptionOwnTokenThere stamp: 'D S 10/31/2020 15:16:18'!
errorDescriptionOwnTokenThere

	^'You already have a token There!!'!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:16:21'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:16:21'!
ERROR!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:16:21'!
ERROR!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:16:21'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 15:16:35' prior: 50912845!
test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	
	^ [aGame putXAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOwnTokenThere)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 15:16:41' prior: 50913179!
test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	^ [aGame putOAt: 1@1.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOwnTokenThere)).].

	! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:16:46'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:16:46'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 15:17:18'!
test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 2@1 to: 1@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 15:17:36' prior: 50914305!
test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 2@1 to: 1@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOwnTokenThere )).].

	! !

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:17:41'!
FAILURE!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:17:41'!
FAILURE!
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 15:17:54' prior: 50910332 overrides: 50913593!
xMoveTokenFrom: aPoint to: aPoint2 
	
	(positionTokens includes: aPoint) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	positionTokens remove: aPoint.
	positionTokens add: aPoint2.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:17:57'!
ERROR!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:17:57'!
ERROR!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:17:57'!
ERROR!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:17:57'!
ERROR!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:17:57'!
ERROR!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:17:57'!
ERROR!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:17:57'!
ERROR!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:17:57'!
ERROR!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:17:57'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:17:57'!
PASSED!
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 15:18:15' prior: 50914343 overrides: 50913593!
xMoveTokenFrom: aPoint to: aPoint2 
	
	(positionTokens includes: aPoint2) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	positionTokens remove: aPoint.
	positionTokens add: aPoint2.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:18:17'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:18:17'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 15:19:34'!
test46RaiseErrorWhenMovingTokenOWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame oMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 15:19:41'!
test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame oMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	! !

!methodRemoval: TableTest #test46RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:19:51'!
test46RaiseErrorWhenMovingTokenOWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame oMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:19:55'!
FAILURE!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:19:55'!
FAILURE!
!Game methodsFor: 'actions' stamp: 'D S 10/31/2020 15:20:33' prior: 50911097!
oMoveTokenFrom: aPoint to: aPoint2 
	
	((playerX positionToken) includes: aPoint2) ifTrue: [self error: self class errorDescriptionOponentTokenInPosition ].
	playerMoving oMoveTokenFrom: aPoint to: aPoint2. 
	playerMoving := playerX.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:20:36'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:20:36'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 15:21:43'!
test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame oMoveTokenFrom: 2@2 to: 1@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOwnTokenThere )).].

	! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:21:46'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:21:46'!
ERROR!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:21:46'!
ERROR!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 15:22:33' prior: 50914896!
test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame oMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOwnTokenThere )).].

	! !

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:22:36'!
FAILURE!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:22:36'!
FAILURE!
!PlayerO methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 15:23:07' prior: 50910427 overrides: 50914728!
oMoveTokenFrom: aPoint to: aPoint2 
	
	(positionTokens includes: aPoint2) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	positionTokens remove: aPoint.
	positionTokens add: aPoint2.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:23:10'!
PASSED!

----SNAPSHOT----(31 October 2020 15:23:31) CuisUniversity-4383.image priorSource: 18517159!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 15:27:37'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 15:27:37'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:27:37'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:27:37'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:27:37'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:27:37'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:27:37'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:27:37'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:27:37'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:27:37'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 15:28:27' prior: 50915078!
test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	^ [aGame putXAt: 1@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionNoMoreTokens )).].

	! !
!PlayerX class methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 15:29:04'!
errorDescriptionNoMoreTokens

	^'No more tokens left'! !
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 15:29:34' prior: 50913959 overrides: 50913949!
putXAt: aPoint
	
	(remainingTokens = 0) ifTrue: [self error: self class errorDescriptionNoMoreTokens ].
	(positionTokens includes: aPoint) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	positionTokens add: aPoint.
	remainingTokens := remainingTokens - 1
! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:29:37'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:29:37'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 15:29:48'!
test50RaiseErrorWhenMovingTokenOWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	^ [aGame putXAt: 1@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionNoMoreTokens )).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 15:28:27' prior: 50915313!
test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	^ [aGame putXAt: 1@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionNoMoreTokens )).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 15:22:33' prior: 50915521!
test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame oMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOwnTokenThere )).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 15:30:34'!
test50RaiseErrorWhenTryingToPutAFourthXToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	^ [aGame putXAt: 1@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionNoMoreTokens )).].

	! !

!methodRemoval: TableTest #test50RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:30:44'!
test50RaiseErrorWhenMovingTokenOWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	^ [aGame putXAt: 1@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionNoMoreTokens )).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 15:31:56'!
test51RaiseErrorWhenTryingToPutAFourthOToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame putOAt: 0@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionNoMoreTokens )).].

	! !

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 15:31:59'!
FAILURE!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 15:31:59'!
FAILURE!
!PlayerO methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 15:32:18' prior: 50913934 overrides: 50913924!
putOAt: aPoint 

	(remainingTokens = 0) ifTrue: [self error: self class errorDescriptionNoMoreTokens ].	
	(positionTokens includes: aPoint) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	positionTokens add: aPoint.
	remainingTokens := remainingTokens - 1.
	! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 15:32:22'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 15:32:22'!
ERROR!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 15:32:22'!
ERROR!
!PlayerO class methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 15:32:36'!
errorDescriptionNoMoreTokens

	^'No more tokens left'! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 15:32:39'!
PASSED!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 15:32:51'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 15:32:51'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 15:52:13'!
test52RaiseErrorWhenTryingToPutAFourthOToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame putOAt: 0@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionNoMoreTokens )).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:02:37'!
test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@2 to: 2@1.
	^ [aGame putOAt: 0@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionMovementInvalid )).].

	! !
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 21:03:53' prior: 50914508 overrides: 50913593!
xMoveTokenFrom: aPoint to: aPoint2 
	
	(positionTokens includes: aPoint2) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	(aPoint = 1@2 and: aPoint2 = 2@1) ifTrue: [self error: self class errorDescriptionInvalidMovement].
	positionTokens remove: aPoint.
	positionTokens add: aPoint2.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:04:01'!
ERROR!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:04:01'!
ERROR!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:04:01'!
ERROR!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:04:01'!
ERROR!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:04:01'!
ERROR!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:04:01'!
ERROR!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:04:01'!
ERROR!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:04:01'!
ERROR!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:04:01'!
ERROR!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:04:01'!
ERROR!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 21:04:01'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:04:01'!
ERROR!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:04:01'!
ERROR!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:04:01'!
ERROR!
!PlayerX class methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 21:04:34'!
errorDescriptionInvalidMovement

	^'That movement is invalid!!'! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:04:37'!
ERROR!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:04:37'!
ERROR!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:04:37'!
ERROR!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:04:37'!
ERROR!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:04:37'!
ERROR!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:04:37'!
ERROR!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:04:37'!
ERROR!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:04:37'!
ERROR!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:04:37'!
ERROR!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:04:37'!
ERROR!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 21:04:37'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:04:37'!
ERROR!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:04:37'!
ERROR!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:04:37'!
ERROR!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:05:08'!
ERROR!
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 21:06:18' prior: 50916162 overrides: 50913593!
xMoveTokenFrom: aPoint to: aPoint2 
	
	(positionTokens includes: aPoint2) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	(aPoint = (1@2) and: aPoint2 = (2@1)) ifTrue: [self error: self class errorDescriptionInvalidMovement].
	positionTokens remove: aPoint.
	positionTokens add: aPoint2.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:06:21'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:06:21'!
ERROR!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:06:21'!
ERROR!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:07:20' prior: 50916145!
test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@2 to: 2@1.
	^ [aGame putOAt: 0@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement )).].

	! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:07:24'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:07:24'!
ERROR!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:07:24'!
ERROR!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:07:46' prior: 50916730!
test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@2 to: 2@1.
	^ [aGame putOAt: 0@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:07:59' prior: 50916926!
test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	
	^ [aGame xMoveTokenFrom: 1@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement)).].

	! !

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:08:02'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:10:52'!
test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	
	^ [aGame xMoveTokenFrom: 1@2 to: 1@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement)).].

	! !

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 21:10:55'!
FAILURE!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 21:10:55'!
FAILURE!
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 21:20:51'!
diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2
	
	^((aPoint  x) -1 + (aPoint2 y) -1) abs = ((aPoint2 x) - 1 + (aPoint2 y) -1)! !
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 21:21:33' prior: 50916984!
diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2
	
	^(((aPoint  x) -1 + (aPoint2 y) -1) abs) = (((aPoint2 x) - 1 + (aPoint2 y) -1) abs)! !
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 21:22:28' prior: 50916537 overrides: 50913593!
xMoveTokenFrom: aPoint to: aPoint2 
	
	(positionTokens includes: aPoint2) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	(self diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2) ifTrue: [self error: self class errorDescriptionInvalidMovement].
	positionTokens remove: aPoint.
	positionTokens add: aPoint2.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:22:31'!
ERROR!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:22:31'!
ERROR!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:22:31'!
ERROR!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:22:31'!
ERROR!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:22:31'!
ERROR!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:22:31'!
ERROR!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:22:31'!
ERROR!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:22:31'!
ERROR!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:22:31'!
FAILURE!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 21:22:31'!
PASSED!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:22:38'!
ERROR!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:22:38'!
ERROR!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:22:38'!
ERROR!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:22:38'!
ERROR!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:22:38'!
ERROR!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:22:38'!
ERROR!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:22:38'!
ERROR!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:22:38'!
ERROR!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:22:38'!
FAILURE!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 21:22:38'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:22:55'!
ERROR!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:23:12'!
ERROR!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:23:12'!
ERROR!
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 21:23:40' prior: 50916991!
diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2
	
	^((((aPoint  x) -1 + (aPoint y) -1) abs) = (((aPoint2 x) - 1 + (aPoint2 y) -1) abs))! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:23:44'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:23:45'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:23:45'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 21:23:45'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:23:45'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:23:45'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:23:45'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 21:23:45'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:26:14'!
test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@0.
	aGame xMoveTokenFrom: 0@1 to: 0@	2.
	^ [aGame oMoveTokenFrom: 1@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement)).].

	! !

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:26:18'!
FAILURE!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:26:18'!
FAILURE!
!PlayerO methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 21:26:57' prior: 50915102 overrides: 50914728!
oMoveTokenFrom: aPoint to: aPoint2 
	
	(positionTokens includes: aPoint2) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	(self diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2) ifTrue: [self error: self class errorDescriptionInvalidMovement].
	positionTokens remove: aPoint.
	positionTokens add: aPoint2.! !
!PlayerO methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 21:27:08'!
diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2
	
	^((((aPoint  x) -1 + (aPoint y) -1) abs) = (((aPoint2 x) - 1 + (aPoint2 y) -1) abs))! !
!PlayerO class methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 21:27:17'!
errorDescriptionInvalidMovement

	^'That movement is invalid!!'! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 21:27:23'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:27:23'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:29:40'!
test56
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 0@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:29:45' prior: 50917806!
test56
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !
!PlayerX class methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 21:31:59'!
errorDescriptionOutOfRange

	^'La posicion indicada es invalida (fuera del tablero)'! !
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 21:33:02' prior: 50915333 overrides: 50913949!
putXAt: aPoint
	
	(remainingTokens = 0) ifTrue: [self error: self class errorDescriptionNoMoreTokens ].
	(positionTokens includes: aPoint) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	(aPoint = 3@1) ifTrue:[self error: self class errorDescriptionOutOfRange ].
	positionTokens add: aPoint.
	remainingTokens := remainingTokens - 1
! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 21:33:07'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 21:33:07'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 21:33:07'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 21:33:07'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:33:07'!
ERROR!

!testRun: #TableTest #test56 stamp: 'D S 10/31/2020 21:33:07'!
FAILURE!
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 21:33:26' prior: 50917831 overrides: 50913949!
putXAt: aPoint
	
	(remainingTokens = 0) ifTrue: [self error: self class errorDescriptionNoMoreTokens ].
	(positionTokens includes: aPoint) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	(aPoint = (3@1)) ifTrue:[self error: self class errorDescriptionOutOfRange ].
	positionTokens add: aPoint.
	remainingTokens := remainingTokens - 1
! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:33:29'!
PASSED!

!testRun: #TableTest #test56 stamp: 'D S 10/31/2020 21:33:29'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:33:43'!
test57
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 3@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test56 stamp: 'D S 10/31/2020 21:33:48'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 21:33:48'!
FAILURE!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 21:33:48'!
FAILURE!
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 21:34:14' prior: 50918031 overrides: 50913949!
putXAt: aPoint
	
	(remainingTokens = 0) ifTrue: [self error: self class errorDescriptionNoMoreTokens ].
	(positionTokens includes: aPoint) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	((aPoint x) > 2) ifTrue:[self error: self class errorDescriptionOutOfRange ].
	positionTokens add: aPoint.
	remainingTokens := remainingTokens - 1
! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test56 stamp: 'D S 10/31/2020 21:34:17'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 21:34:17'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:34:24' prior: 50918231!
test57
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 2@3.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:34:27' prior: 50918635!
test57
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 3@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:34:33'!
test58
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 2@3.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!testRun: #TableTest #test58 stamp: 'D S 10/31/2020 21:34:36'!
FAILURE!

!testRun: #TableTest #test58 stamp: 'D S 10/31/2020 21:34:36'!
FAILURE!
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 21:34:48' prior: 50918432 overrides: 50913949!
putXAt: aPoint
	
	(remainingTokens = 0) ifTrue: [self error: self class errorDescriptionNoMoreTokens ].
	(positionTokens includes: aPoint) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	((aPoint x) > 2 or: aPoint = (2@3)) ifTrue:[self error: self class errorDescriptionOutOfRange ].
	positionTokens add: aPoint.
	remainingTokens := remainingTokens - 1
! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 21:34:51'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 21:34:51'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 21:34:51'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:34:51'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:34:51'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 21:34:51'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 21:34:51'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 21:34:51'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:34:51'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test56 stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 21:34:52'!
PASSED!

!testRun: #TableTest #test58 stamp: 'D S 10/31/2020 21:34:52'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:38:00' prior: 50918653!
test58
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 1@3.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:38:02' prior: 50918874!
test58
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 2@3.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:38:07'!
test59
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 1@3.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!testRun: #TableTest #test59 stamp: 'D S 10/31/2020 21:38:10'!
FAILURE!

!testRun: #TableTest #test59 stamp: 'D S 10/31/2020 21:38:10'!
FAILURE!
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 21:38:50' prior: 50918668 overrides: 50913949!
putXAt: aPoint
	
	(remainingTokens = 0) ifTrue: [self error: self class errorDescriptionNoMoreTokens ].
	(positionTokens includes: aPoint) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	((aPoint x) > 2 or: (aPoint y) > 2) ifTrue:[self error: self class errorDescriptionOutOfRange ].
	positionTokens add: aPoint.
	remainingTokens := remainingTokens - 1
! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test56 stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test58 stamp: 'D S 10/31/2020 21:38:54'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 10/31/2020 21:38:54'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:39:08'!
test60
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: -3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!testRun: #TableTest #test60 stamp: 'D S 10/31/2020 21:39:11'!
FAILURE!

!testRun: #TableTest #test60 stamp: 'D S 10/31/2020 21:39:11'!
FAILURE!
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 21:39:33' prior: 50918907 overrides: 50913949!
putXAt: aPoint
	
	(remainingTokens = 0) ifTrue: [self error: self class errorDescriptionNoMoreTokens ].
	(positionTokens includes: aPoint) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	((aPoint x) > 2 or: (aPoint y) > 2 or: (aPoint x) < 0) ifTrue:[self error: self class errorDescriptionOutOfRange ].
	positionTokens add: aPoint.
	remainingTokens := remainingTokens - 1
! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test56 stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test58 stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 10/31/2020 21:39:36'!
PASSED!

!testRun: #TableTest #test60 stamp: 'D S 10/31/2020 21:39:36'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:40:00'!
test61
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 1@-3.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!testRun: #TableTest #test61 stamp: 'D S 10/31/2020 21:40:02'!
FAILURE!

!testRun: #TableTest #test61 stamp: 'D S 10/31/2020 21:40:02'!
FAILURE!
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 21:40:29' prior: 50919130 overrides: 50913949!
putXAt: aPoint
	
	(remainingTokens = 0) ifTrue: [self error: self class errorDescriptionNoMoreTokens ].
	(positionTokens includes: aPoint) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	((aPoint x) > 2 or: (aPoint y) > 2 or: (aPoint x) < 0 or: (aPoint y) < 0) ifTrue:[self error: self class errorDescriptionOutOfRange ].
	positionTokens add: aPoint.
	remainingTokens := remainingTokens - 1
! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 21:40:37'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 21:40:37'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 21:40:37'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:40:37'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:40:37'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test56 stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test58 stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test60 stamp: 'D S 10/31/2020 21:40:38'!
PASSED!

!testRun: #TableTest #test61 stamp: 'D S 10/31/2020 21:40:38'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:42:04'!
test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!methodRemoval: TableTest #test56 stamp: 'D S 10/31/2020 21:42:04'!
test56
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:42:31'!
test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 2@3.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!methodRemoval: TableTest #test58 stamp: 'D S 10/31/2020 21:42:31'!
test58
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 2@3.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:43:44'!
test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: -3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!methodRemoval: TableTest #test60 stamp: 'D S 10/31/2020 21:43:44'!
test60
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: -3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:44:18'!
test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 1@-3.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!methodRemoval: TableTest #test61 stamp: 'D S 10/31/2020 21:44:19'!
test61
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 1@-3.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:46:36'!
test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum
	|aGame|
	aGame := Game startGame.
	aGame := Game putXAt: 1@1.
	^ [aGame putOAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

! !

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 21:46:40'!
ERROR!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 21:46:40'!
ERROR!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:47:08' prior: 50919644!
test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum
	|aGame|
	aGame := Game startGame.
	aGame := aGame putXAt: 1@1.
	^ [aGame putOAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

! !

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 21:47:11'!
FAILURE!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 21:47:11'!
FAILURE!
!PlayerO class methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 21:47:25' prior: 50917617!
errorDescriptionInvalidMovement

	^'That movement is invalid!!'! !
!PlayerO class methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 21:47:36'!
errorDescriptionOutOfRange

	^'La posicion indicada es invalida (fuera del tablero)'! !
!PlayerO methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 21:48:22' prior: 50915604 overrides: 50913924!
putOAt: aPoint 

	(remainingTokens = 0) ifTrue: [self error: self class errorDescriptionNoMoreTokens ].	
	(positionTokens includes: aPoint) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	((aPoint x) > 2 or: (aPoint y) > 2 or: (aPoint x) < 0 or: (aPoint y) < 0) ifTrue:[self error: self class errorDescriptionOutOfRange ].
	positionTokens add: aPoint.
	remainingTokens := remainingTokens - 1.
	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:48:42' prior: 50919588!
test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow
	|aGame|
	aGame := Game startGame.
	aGame := aGame putXAt: 1@1.
	^ [aGame putOAt: 2@3.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:49:07'!
test63RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow
	|aGame|
	aGame := Game startGame.
	aGame := aGame putXAt: 1@1.
	^ [aGame putOAt: 2@3.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:49:12' prior: 50919711!
test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 2@3.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:49:23'!
test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow
	|aGame|
	aGame := Game startGame.
	aGame := aGame putXAt: 1@1.
	^ [aGame putOAt: 2@3.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!methodRemoval: TableTest #test63RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 21:49:23'!
test63RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow
	|aGame|
	aGame := Game startGame.
	aGame := aGame putXAt: 1@1.
	^ [aGame putOAt: 2@3.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:49:54'!
test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn
	|aGame|
	aGame := Game startGame.
	aGame := aGame putXAt: 1@1.
	^ [aGame putOAt: -3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:50:14'!
test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow
	|aGame|
	aGame := Game startGame.
	aGame := aGame putXAt: 1@1.
	^ [aGame putOAt: 1@-3.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 21:50:20'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 21:50:20'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:50:26' prior: 50919778!
test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow
	|aGame|
	aGame := Game startGame.
	aGame := aGame putXAt: 1@1.
	^ [aGame putOAt: 1@-3.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:50:29' prior: 50919767!
test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn
	|aGame|
	aGame := Game startGame.
	aGame := aGame putXAt: 1@1.
	^ [aGame putOAt: -3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:50:32' prior: 50919744!
test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow
	|aGame|
	aGame := Game startGame.
	aGame := aGame putXAt: 1@1.
	^ [aGame putOAt: 2@3.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 21:54:30'!
test66
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	
	^ [aGame xMoveTokenFrom: 2@0 to: 3@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!testRun: #TableTest #test66 stamp: 'D S 10/31/2020 21:54:34'!
FAILURE!

!testRun: #TableTest #test66 stamp: 'D S 10/31/2020 21:54:34'!
FAILURE!

!testRun: #TableTest #test66 stamp: 'D S 10/31/2020 22:03:40'!
FAILURE!

!testRun: #TableTest #test66 stamp: 'D S 10/31/2020 22:03:40'!
FAILURE!
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 22:04:09' prior: 50916999 overrides: 50913593!
xMoveTokenFrom: aPoint to: aPoint2 
	
	(positionTokens includes: aPoint2) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	(self diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2) ifTrue: [self error: self class errorDescriptionInvalidMovement].
	(aPoint2 x) > 2 ifTrue:[self error: self class errorDescriptionOutOfRange ].
	positionTokens remove: aPoint.
	positionTokens add: aPoint2.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:04:15'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 10/31/2020 22:04:15'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:04:39' prior: 50920044!
test66
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@2.
	aGame putOAt: 2@0.
	
	^ [aGame xMoveTokenFrom: 2@2 to: 2@3.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:04:43'!
test67
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@2.
	aGame putOAt: 2@0.
	
	^ [aGame xMoveTokenFrom: 2@2 to: 2@3.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:04:48' prior: 50920305!
test66
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	
	^ [aGame xMoveTokenFrom: 2@0 to: 3@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!testRun: #TableTest #test67 stamp: 'D S 10/31/2020 22:04:50'!
FAILURE!

!testRun: #TableTest #test67 stamp: 'D S 10/31/2020 22:04:50'!
FAILURE!
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 22:05:18' prior: 50920068 overrides: 50913593!
xMoveTokenFrom: aPoint to: aPoint2 
	
	(positionTokens includes: aPoint2) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	(self diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2) ifTrue: [self error: self class errorDescriptionInvalidMovement].
	((aPoint2 x) > 2 or: (aPoint2 y) > 2) ifTrue:[self error: self class errorDescriptionOutOfRange ].
	positionTokens remove: aPoint.
	positionTokens add: aPoint2.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 10/31/2020 22:05:22'!
PASSED!

!testRun: #TableTest #test67 stamp: 'D S 10/31/2020 22:05:22'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:05:53'!
test68
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@0.
	
	^ [aGame xMoveTokenFrom: 0@0 to: -1@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!testRun: #TableTest #test68 stamp: 'D S 10/31/2020 22:05:56'!
FAILURE!

!testRun: #TableTest #test68 stamp: 'D S 10/31/2020 22:05:56'!
FAILURE!
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 22:06:15' prior: 50920351 overrides: 50913593!
xMoveTokenFrom: aPoint to: aPoint2 
	
	(positionTokens includes: aPoint2) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	(self diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2) ifTrue: [self error: self class errorDescriptionInvalidMovement].
	((aPoint2 x) > 2 or: (aPoint2 y) > 2 or: (aPoint x) < 0) ifTrue:[self error: self class errorDescriptionOutOfRange ].
	positionTokens remove: aPoint.
	positionTokens add: aPoint2.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test67 stamp: 'D S 10/31/2020 22:06:20'!
PASSED!

!testRun: #TableTest #test68 stamp: 'D S 10/31/2020 22:06:20'!
FAILURE!

!testRun: #TableTest #test68 stamp: 'D S 10/31/2020 22:06:20'!
FAILURE!
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 22:06:31' prior: 50920609 overrides: 50913593!
xMoveTokenFrom: aPoint to: aPoint2 
	
	(positionTokens includes: aPoint2) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	(self diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2) ifTrue: [self error: self class errorDescriptionInvalidMovement].
	((aPoint2 x) > 2 or: (aPoint2 y) > 2 or: (aPoint2 x) < 0) ifTrue:[self error: self class errorDescriptionOutOfRange ].
	positionTokens remove: aPoint.
	positionTokens add: aPoint2.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test67 stamp: 'D S 10/31/2020 22:06:34'!
PASSED!

!testRun: #TableTest #test68 stamp: 'D S 10/31/2020 22:06:34'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:06:46'!
test69
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@0.
	
	^ [aGame xMoveTokenFrom: 0@0 to: 0@-1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!testRun: #TableTest #test69 stamp: 'D S 10/31/2020 22:06:50'!
FAILURE!

!testRun: #TableTest #test69 stamp: 'D S 10/31/2020 22:06:50'!
FAILURE!
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 22:07:07' prior: 50920855 overrides: 50913593!
xMoveTokenFrom: aPoint to: aPoint2 
	
	(positionTokens includes: aPoint2) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	(self diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2) ifTrue: [self error: self class errorDescriptionInvalidMovement].
	((aPoint2 x) > 2 or: (aPoint2 y) > 2 or: (aPoint2 x) < 0 or: (aPoint2 y) < 0) ifTrue:[self error: self class errorDescriptionOutOfRange ].
	positionTokens remove: aPoint.
	positionTokens add: aPoint2.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test67 stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test68 stamp: 'D S 10/31/2020 22:07:10'!
PASSED!

!testRun: #TableTest #test69 stamp: 'D S 10/31/2020 22:07:10'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:09:59'!
test70
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.
	
	^ [aGame oMoveTokenFrom: 2@2 to: 3@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!testRun: #TableTest #test70 stamp: 'D S 10/31/2020 22:10:03'!
FAILURE!

!testRun: #TableTest #test70 stamp: 'D S 10/31/2020 22:10:03'!
FAILURE!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:10:50'!
test71
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.
	
	^ [aGame oMoveTokenFrom: 2@2 to: 3@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:11:03'!
test72
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.
	
	^ [aGame oMoveTokenFrom: 0@0 to: -1@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:11:09' prior: 50921394!
test72
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.
	
	^ [aGame oMoveTokenFrom: 0@0 to: 0@-1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:11:12'!
test73
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.
	
	^ [aGame oMoveTokenFrom: 0@0 to: 0@-1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:11:14' prior: 50921409!
test72
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.
	
	^ [aGame oMoveTokenFrom: 0@0 to: -1@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !
!PlayerO methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 22:11:36' prior: 50917597 overrides: 50914728!
oMoveTokenFrom: aPoint to: aPoint2 
	
	(positionTokens includes: aPoint2) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	(self diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2) ifTrue: [self error: self class errorDescriptionInvalidMovement].
	((aPoint2 x) > 2 or: (aPoint2 y) > 2 or: (aPoint2 x) < 0 or: (aPoint2 y) < 0) ifTrue:[self error: self class errorDescriptionOutOfRange ].

	positionTokens remove: aPoint.
	positionTokens add: aPoint2.! !
!PlayerO methodsFor: 'as yet unclassified' stamp: 'D S 10/31/2020 22:11:39' prior: 50921454 overrides: 50914728!
oMoveTokenFrom: aPoint to: aPoint2 
	
	(positionTokens includes: aPoint2) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	(self diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2) ifTrue: [self error: self class errorDescriptionInvalidMovement].
	((aPoint2 x) > 2 or: (aPoint2 y) > 2 or: (aPoint2 x) < 0 or: (aPoint2 y) < 0) ifTrue:[self error: self class errorDescriptionOutOfRange ].
	positionTokens remove: aPoint.
	positionTokens add: aPoint2.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test67 stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test68 stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test69 stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test70 stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test71 stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test72 stamp: 'D S 10/31/2020 22:11:42'!
PASSED!

!testRun: #TableTest #test73 stamp: 'D S 10/31/2020 22:11:42'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:15:31'!
test74
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@2.	
	^ [aGame putOAt: 2@2..
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionGameOver)).].

	! !
!Game methodsFor: 'actions' stamp: 'D S 10/31/2020 22:16:20' prior: 50913924!
putOAt: aPoint 
	
	((self positionXTokens) includes: aPoint) ifTrue:[self error: self class errorDescriptionOponentTokenInPosition].
	(self isOver) ifTrue: [self error: self class errorDescriptionGameOver].
	playerMoving putOAt: aPoint.
	playerMoving := playerX.
! !
!Game class methodsFor: 'instance creation' stamp: 'D S 10/31/2020 22:16:42'!
errorDescriptionGameOver

	^'The Game Already Ended'! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:17:41'!
test75
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.	
	aGame putOAt: 1@0.
	^ [aGame xMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionGameOver)).].

	! !

!testRun: #TableTest #test75 stamp: 'D S 10/31/2020 22:17:45'!
ERROR!

!testRun: #TableTest #test75 stamp: 'D S 10/31/2020 22:17:45'!
ERROR!
!Game methodsFor: 'actions' stamp: 'D S 10/31/2020 22:18:21' prior: 50913593!
xMoveTokenFrom: aPoint to: aPoint2 
	
	((playerO positionToken) includes: aPoint2) ifTrue: [self error: self class errorDescriptionOponentTokenInPosition ].
	(self isOver) ifTrue: [self error: self class errorDescriptionGameOver].
	playerMoving xMoveTokenFrom: aPoint to: aPoint2.
	playerMoving := playerO.! !

!testRun: #TableTest #test75 stamp: 'D S 10/31/2020 22:18:37'!
ERROR!

!testRun: #TableTest #test75 stamp: 'D S 10/31/2020 22:18:37'!
ERROR!

!testRun: #TableTest #test75 stamp: 'D S 10/31/2020 22:19:01'!
ERROR!

!testRun: #TableTest #test75 stamp: 'D S 10/31/2020 22:19:14'!
ERROR!

!testRun: #TableTest #test75 stamp: 'D S 10/31/2020 22:19:22'!
ERROR!

!testRun: #TableTest #test75 stamp: 'D S 10/31/2020 22:19:22'!
ERROR!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 22:19:38'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 22:19:38'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 22:19:38'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:19:38'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 22:19:38'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 22:19:38'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:19:38'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 22:19:38'!
FAILURE!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 22:19:38'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:19:38'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:19:38'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 22:19:38'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:19:38'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 10/31/2020 22:19:38'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:19:38'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:19:38'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:19:38'!
FAILURE!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:19:38'!
FAILURE!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:19:38'!
FAILURE!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:19:38'!
FAILURE!

!testRun: #TableTest #test66 stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test67 stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test68 stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test69 stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test70 stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test71 stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test72 stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test73 stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test74 stamp: 'D S 10/31/2020 22:19:38'!
ERROR!

!testRun: #TableTest #test75 stamp: 'D S 10/31/2020 22:19:38'!
ERROR!
!Game methodsFor: 'accessing' stamp: 'D S 10/31/2020 22:19:50' prior: 50907009!
isOver
	
	^ (self hasPlayerOWon or: self hasPlayerXWon).
! !
!Game methodsFor: 'accessing --Private--' stamp: 'D S 10/31/2020 22:20:37' prior: 50910644!
playerOHasThreeInAColumn
	|positionTokens|
	
	positionTokens := playerO positionToken.
	^(positionTokens size = 3) and:((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]) |
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]) |
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]))! !
!Game methodsFor: 'accessing --Private--' stamp: 'D S 10/31/2020 22:20:49' prior: 50922043!
playerOHasThreeInAColumn
	|positionTokens|
	
	positionTokens := playerO positionToken.
	^((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]) |
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]) |
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]))! !
!Game methodsFor: 'accessing' stamp: 'D S 10/31/2020 22:21:44' prior: 50922038!
isOver
	
	^(self positionOTokens size) = 3 and: (self positionXTokens size = 3) and: (self hasPlayerOWon or: self hasPlayerXWon).
! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:21:47'!
FAILURE!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:21:47'!
FAILURE!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 22:21:47'!
FAILURE!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 22:21:47'!
FAILURE!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 22:21:47'!
FAILURE!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 22:21:47'!
FAILURE!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 22:21:47'!
FAILURE!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 22:21:47'!
FAILURE!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:21:47'!
ERROR!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:21:47'!
ERROR!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:21:47'!
ERROR!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test67 stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test68 stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test69 stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test70 stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test71 stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test72 stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test73 stamp: 'D S 10/31/2020 22:21:47'!
PASSED!

!testRun: #TableTest #test74 stamp: 'D S 10/31/2020 22:21:47'!
FAILURE!

!testRun: #TableTest #test75 stamp: 'D S 10/31/2020 22:21:47'!
PASSED!
!Game methodsFor: 'accessing' stamp: 'D S 10/31/2020 22:22:04' prior: 50922070!
isOver
	
	^(self positionOTokens size) = 3 and: (self positionXTokens size) = 3 and: (self hasPlayerOWon or: self hasPlayerXWon).
! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:22:07'!
FAILURE!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:22:07'!
FAILURE!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 22:22:07'!
FAILURE!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 22:22:07'!
FAILURE!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 22:22:07'!
FAILURE!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 22:22:07'!
FAILURE!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 22:22:07'!
FAILURE!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 22:22:07'!
FAILURE!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:22:07'!
ERROR!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:22:07'!
ERROR!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:22:07'!
ERROR!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test67 stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test68 stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test69 stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test70 stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test71 stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test72 stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test73 stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test74 stamp: 'D S 10/31/2020 22:22:07'!
FAILURE!

!testRun: #TableTest #test75 stamp: 'D S 10/31/2020 22:22:07'!
PASSED!

!testRun: #TableTest #test74 stamp: 'D S 10/31/2020 22:22:29'!
FAILURE!
!Game methodsFor: 'accessing' stamp: 'D S 10/31/2020 22:23:03' prior: 50922319!
isOver
	
	^((self positionOTokens size) = 3 or: (self positionXTokens size) = 3) and: (self hasPlayerOWon or: self hasPlayerXWon).
! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 22:23:05'!
ERROR!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 22:23:05'!
ERROR!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 22:23:05'!
ERROR!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 22:23:05'!
ERROR!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 22:23:05'!
ERROR!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 22:23:05'!
ERROR!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:23:05'!
ERROR!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:23:05'!
ERROR!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:23:05'!
ERROR!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:23:05'!
ERROR!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:23:05'!
ERROR!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:23:05'!
ERROR!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:23:05'!
ERROR!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:23:05'!
ERROR!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:23:05'!
ERROR!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 22:23:05'!
ERROR!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:23:05'!
ERROR!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:23:05'!
ERROR!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:23:05'!
ERROR!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 22:23:05'!
ERROR!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:23:05'!
ERROR!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:23:05'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 22:23:06'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:23:06'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 10/31/2020 22:23:06'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:23:06'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:23:06'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:23:06'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:23:06'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:23:06'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:23:06'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 10/31/2020 22:23:06'!
ERROR!

!testRun: #TableTest #test67 stamp: 'D S 10/31/2020 22:23:06'!
ERROR!

!testRun: #TableTest #test68 stamp: 'D S 10/31/2020 22:23:06'!
ERROR!

!testRun: #TableTest #test69 stamp: 'D S 10/31/2020 22:23:06'!
ERROR!

!testRun: #TableTest #test70 stamp: 'D S 10/31/2020 22:23:06'!
ERROR!

!testRun: #TableTest #test71 stamp: 'D S 10/31/2020 22:23:06'!
ERROR!

!testRun: #TableTest #test72 stamp: 'D S 10/31/2020 22:23:06'!
ERROR!

!testRun: #TableTest #test73 stamp: 'D S 10/31/2020 22:23:06'!
ERROR!

!testRun: #TableTest #test74 stamp: 'D S 10/31/2020 22:23:06'!
PASSED!

!testRun: #TableTest #test75 stamp: 'D S 10/31/2020 22:23:06'!
ERROR!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 22:23:43'!
ERROR!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test67 stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test68 stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test69 stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test70 stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test71 stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test72 stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test73 stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test74 stamp: 'D S 10/31/2020 22:26:28'!
PASSED!

!testRun: #TableTest #test75 stamp: 'D S 10/31/2020 22:26:28'!
ERROR!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 22:26:36'!
ERROR!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 22:26:36'!
ERROR!
!Game methodsFor: 'accessing --Private--' stamp: 'D S 10/31/2020 22:29:04' prior: 50922057!
playerOHasThreeInAColumn
	|positionTokens|
	
	positionTokens := playerO positionToken.
	^((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]))! !
!Game methodsFor: 'accessing --Private--' stamp: 'D S 10/31/2020 22:29:07' prior: 50910719!
playerOHasThreeInADiagonal
	|positionTokens|
	
	positionTokens := playerO positionToken.
	
	^((positionTokens = (Set with: 0@0 with: 1@1 with: 2@2)) or:
	(positionTokens = (Set with: 2@0 with: 1@1 with: 0@2))).! !
!Game methodsFor: 'accessing --Private--' stamp: 'D S 10/31/2020 22:29:11' prior: 50910657!
playerOHasThreeInARow
	|positionTokens|
	
	positionTokens := playerO positionToken.

	^((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=0]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=1]) |
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=2])).! !
!Game methodsFor: 'accessing --Private--' stamp: 'D S 10/31/2020 22:29:12' prior: 50923090!
playerOHasThreeInARow
	|positionTokens|
	
	positionTokens := playerO positionToken.

	^((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=0]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=1]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=2])).! !
!Game methodsFor: 'accessing --Private--' stamp: 'D S 10/31/2020 22:29:19' prior: 50910670!
playerXHasThreeInAColumn
	|positionTokens|
	
	positionTokens := playerX positionToken.

	
	^((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]))! !
!Game methodsFor: 'accessing --Private--' stamp: 'D S 10/31/2020 22:29:22' prior: 50910709!
playerXHasThreeInADiagonal
	|positionTokens|
	
	positionTokens := playerX positionToken.
	
	^((positionTokens = (Set with: 0@0 with: 1@1 with: 2@2)) or:
	(positionTokens = (Set with: 2@0 with: 1@1 with: 0@2))).! !
!Game methodsFor: 'accessing --Private--' stamp: 'D S 10/31/2020 22:29:27' prior: 50910696!
playerXHasThreeInARow
	|positionTokens|
	
	positionTokens := playerX positionToken.
	
	^((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=0]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=1]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=2])).! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test67 stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test68 stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test69 stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test70 stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test71 stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test72 stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test73 stamp: 'D S 10/31/2020 22:29:30'!
ERROR!

!testRun: #TableTest #test74 stamp: 'D S 10/31/2020 22:29:30'!
PASSED!

!testRun: #TableTest #test75 stamp: 'D S 10/31/2020 22:29:30'!
ERROR!
!Game methodsFor: 'accessing' stamp: 'D S 10/31/2020 22:31:45' prior: 50922570!
isOver
	
	^((self positionOTokens size) = 3 and: (self hasPlayerOWon)) or: ((self positionXTokens size) = 3 and: (self hasPlayerXWon)).
! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:31:48'!
ERROR!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 22:31:48'!
ERROR!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:31:48'!
ERROR!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:31:48'!
ERROR!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test67 stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test68 stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test69 stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test70 stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test71 stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test72 stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test73 stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test74 stamp: 'D S 10/31/2020 22:31:48'!
PASSED!

!testRun: #TableTest #test75 stamp: 'D S 10/31/2020 22:31:48'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:32:25' prior: 50915536!
test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame oMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOwnTokenThere )).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:32:29' prior: 50915552!
test50RaiseErrorWhenTryingToPutAFourthXToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	^ [aGame putXAt: 1@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionNoMoreTokens )).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:32:57' prior: 50923657!
test50RaiseErrorWhenTryingToPutAFourthXToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	^ [aGame putXAt: 1@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionNoMoreTokens )).].

	! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 22:32:59'!
ERROR!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:32:59'!
ERROR!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:32:59'!
ERROR!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test67 stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test68 stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test69 stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test70 stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test71 stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test72 stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test73 stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test74 stamp: 'D S 10/31/2020 22:32:59'!
PASSED!

!testRun: #TableTest #test75 stamp: 'D S 10/31/2020 22:32:59'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:33:14' prior: 50923671!
test50RaiseErrorWhenTryingToPutAFourthXToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	^ [aGame putXAt: 1@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionNoMoreTokens )).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:33:18' prior: 50915581!
test51RaiseErrorWhenTryingToPutAFourthOToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame putOAt: 0@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionNoMoreTokens )).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:33:22' prior: 50916130!
test52RaiseErrorWhenTryingToPutAFourthOToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame putOAt: 0@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionNoMoreTokens )).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:34:03' prior: 50923956!
test52RaiseErrorWhenTryingToPutAFourthOToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@0.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame putOAt: 0@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionNoMoreTokens )).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:34:28' prior: 50923941!
test51RaiseErrorWhenTryingToPutAFourthOToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@0.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame putOAt: 0@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionNoMoreTokens )).].

	! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test67 stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test68 stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test69 stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test70 stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test71 stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test72 stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test73 stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test74 stamp: 'D S 10/31/2020 22:34:32'!
PASSED!

!testRun: #TableTest #test75 stamp: 'D S 10/31/2020 22:34:32'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:34:42' prior: 50921727!
test74
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@2.	
	^ [aGame putOAt: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionGameOver)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:41:10' prior: 50921423!
test73
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.
	
	^ [aGame oMoveTokenFrom: 0@0 to: 0@-1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:41:15' prior: 50921438!
test72
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.
	
	^ [aGame oMoveTokenFrom: 0@0 to: -1@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:41:19' prior: 50921361!
test70
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.
	
	^ [aGame oMoveTokenFrom: 2@2 to: 3@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:41:23' prior: 50921380!
test71
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.
	
	^ [aGame oMoveTokenFrom: 2@2 to: 3@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:44:39' prior: 50921754!
test75
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.	
	aGame putOAt: 2@0.
	aGame xMoveTokenFrom: 0@1 to: 0@2.
	aGame oMoveTokenFrom: 2@0 to: 1@0.
	^ [aGame xMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionGameOver)).].

	! !

!testRun: #TableTest #test75 stamp: 'D S 10/31/2020 22:44:44'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:44:52'!
test76
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.	
	aGame putOAt: 2@0.
	aGame xMoveTokenFrom: 0@1 to: 0@2.
	aGame oMoveTokenFrom: 2@0 to: 1@0.
	^ [aGame xMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionGameOver)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:17:41' prior: 50924315!
test75
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.	
	aGame putOAt: 1@0.
	^ [aGame xMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionGameOver)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:46:42' prior: 50924332!
test76
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.	
	aGame putOAt: 2@0.
	aGame xMoveTokenFrom: 2@2 to: 1@2.
	^ [aGame oMoveTokenFrom: 2@0 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionGameOver)).].

	! !

!testRun: #TableTest #test76 stamp: 'D S 10/31/2020 22:46:45'!
FAILURE!

!testRun: #TableTest #test76 stamp: 'D S 10/31/2020 22:46:45'!
FAILURE!
!Game methodsFor: 'actions' stamp: 'D S 10/31/2020 22:47:05' prior: 50914728!
oMoveTokenFrom: aPoint to: aPoint2 
	
	((playerX positionToken) includes: aPoint2) ifTrue: [self error: self class errorDescriptionOponentTokenInPosition ].
	(self isOver) ifTrue: [self error: self class errorDescriptionGameOver].
	playerMoving oMoveTokenFrom: aPoint to: aPoint2. 
	playerMoving := playerX.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test67 stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test68 stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test69 stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test70 stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test71 stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test72 stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test73 stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test74 stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test75 stamp: 'D S 10/31/2020 22:47:08'!
PASSED!

!testRun: #TableTest #test76 stamp: 'D S 10/31/2020 22:47:08'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:47:48'!
test77
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.	
	aGame putOAt: 0@2.
	^ [aGame putXAt: 1@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionGameOver)).].

	! !

!testRun: #TableTest #test77 stamp: 'D S 10/31/2020 22:47:51'!
FAILURE!

!testRun: #TableTest #test77 stamp: 'D S 10/31/2020 22:47:51'!
FAILURE!
!Game methodsFor: 'actions' stamp: 'D S 10/31/2020 22:48:04' prior: 50913949!
putXAt: aPoint 
	
	((self positionOTokens) includes: aPoint) ifTrue:[self error: self class errorDescriptionOponentTokenInPosition].
	(self isOver) ifTrue: [self error: self class errorDescriptionGameOver].
	playerMoving putXAt: aPoint.
	playerMoving := playerO.
! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test67 stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test68 stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test69 stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test70 stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test71 stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test72 stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test73 stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test74 stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test75 stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test76 stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

!testRun: #TableTest #test77 stamp: 'D S 10/31/2020 22:48:09'!
PASSED!

result _ (Message
   new
      setSelector: (keyword1, keyword2) asSymbol
      arguments: (Array with: argument1 with: argument2))
   sentTo: receiver.
!

result _ (Message
   new
      setSelector: (keyword1, keyword2) asSymbol
      arguments: (Array with: argument1 with: argument2))
   sentTo: receiver.
!

b _ PopUpMenu confirm: 'Are you hungry?'.
!

PopUpMenu inform: 'I like Cuis'.
!

----SNAPSHOT----(31 October 2020 23:14:16) CuisUniversity-4383.image priorSource: 18675915!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:15:56'!
test78
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	^[aGame putXAt: 0@2.]	
		on: PopUpMenu 
		do: [ :popedMenu | 
			self assert: (popedMenu messageText = (Game menuDescriptionXWon)).].

	! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test67 stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test68 stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test69 stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test70 stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test71 stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test72 stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test73 stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test74 stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test75 stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test76 stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test77 stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test78 stamp: 'D S 10/31/2020 23:16:38'!
PASSED!

!testRun: #TableTest #test78 stamp: 'D S 10/31/2020 23:16:46'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:18:29' prior: 50924925!
test78
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	self should: (aGame putXAt: 0@2) raise: PopUpMenu withMessageText: (Game menuDescriptionXWon).

	! !

!testRun: #TableTest #test78 stamp: 'D S 10/31/2020 23:18:32'!
ERROR!

!testRun: #TableTest #test78 stamp: 'D S 10/31/2020 23:18:32'!
ERROR!
!Game class methodsFor: 'instance creation' stamp: 'D S 10/31/2020 23:19:01'!
menuDescriptionPlayerXWon

	^'The player X Won'! !
!Game methodsFor: 'accessing' stamp: 'D S 10/31/2020 23:20:10' prior: 50923392!
isOver
	
	^( (self hasPlayerOWon)) or: ((self positionXTokens size) = 3 and: (self hasPlayerXWon)).
! !
!Game methodsFor: 'accessing' stamp: 'D S 10/31/2020 23:20:16' prior: 50907002!
hasPlayerXWon
	
	^(self positionOTokens size) = 3 and: (self playerXHasThreeInAColumn | self playerXHasThreeInADiagonal | self playerXHasThreeInARow).! !
!Game methodsFor: 'accessing' stamp: 'D S 10/31/2020 23:20:32' prior: 50925206!
isOver
	
	^(self hasPlayerOWon) or: (self hasPlayerXWon).
! !
!Game methodsFor: 'accessing' stamp: 'D S 10/31/2020 23:20:41' prior: 50906985!
hasPlayerOWon
	
	^(self positionXTokens size) = 3 and: (self playerOHasThreeInAColumn | self playerOHasThreeInADiagonal | self playerOHasThreeInARow).! !
!Game methodsFor: 'actions' stamp: 'D S 10/31/2020 23:22:51' prior: 50924653!
putXAt: aPoint 
	
	((self positionOTokens) includes: aPoint) ifTrue:[self error: self class errorDescriptionOponentTokenInPosition].
	(self isOver) ifTrue: [self error: self class errorDescriptionGameOver].
	playerMoving putXAt: aPoint.
	self hasPlayerXWon ifTrue:[PopUpMenu inform: self class menuDescriptionPlayerXWon]
	ifFalse: [	playerMoving := playerO.]
! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 23:22:54'!
FAILURE!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 23:22:54'!
FAILURE!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 23:22:54'!
FAILURE!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test67 stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test68 stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test69 stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test70 stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test71 stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test72 stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test73 stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test74 stamp: 'D S 10/31/2020 23:22:54'!
PASSED!

!testRun: #TableTest #test75 stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test76 stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test77 stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test78 stamp: 'D S 10/31/2020 23:22:54'!
ERROR!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 23:23:13'!
ERROR!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 23:23:21'!
ERROR!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 23:23:21'!
ERROR!
!Game methodsFor: 'accessing' stamp: 'D S 10/31/2020 23:23:55' prior: 50925212!
hasPlayerXWon
	
	^(self positionXTokens size) = 3 and: (self playerXHasThreeInAColumn | self playerXHasThreeInADiagonal | self playerXHasThreeInARow).! !
!Game methodsFor: 'accessing' stamp: 'D S 10/31/2020 23:23:59' prior: 50925225!
hasPlayerOWon
	
	^(self positionOTokens size) = 3 and: (self playerOHasThreeInAColumn | self playerOHasThreeInADiagonal | self playerOHasThreeInARow).! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test67 stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test68 stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test69 stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test70 stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test71 stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test72 stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test73 stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test74 stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test75 stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test76 stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test77 stamp: 'D S 10/31/2020 23:24:03'!
PASSED!

!testRun: #TableTest #test78 stamp: 'D S 10/31/2020 23:24:03'!
ERROR!

!testRun: #TableTest #test78 stamp: 'D S 10/31/2020 23:24:03'!
ERROR!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:24:37' prior: 50925187!
test78
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	self should: (aGame putXAt: 0@2) raise: PopUpMenu withMessageText: (Game menuDescriptionPlayerXWon ).

	! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 10/31/2020 23:24:40'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test67 stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test68 stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test69 stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test70 stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test71 stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test72 stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test73 stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test74 stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test75 stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test76 stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test77 stamp: 'D S 10/31/2020 23:24:41'!
PASSED!

!testRun: #TableTest #test78 stamp: 'D S 10/31/2020 23:24:41'!
FAILURE!

!testRun: #TableTest #test78 stamp: 'D S 10/31/2020 23:24:41'!
FAILURE!

!testRun: #TableTest #test78 stamp: 'D S 10/31/2020 23:25:24'!
FAILURE!

!testRun: #TableTest #test78 stamp: 'D S 10/31/2020 23:25:24'!
FAILURE!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:26:05' prior: 50925769!
test78
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	self should: (aGame putXAt: 0@2) raise: PopUpMenu description: (Game menuDescriptionPlayerXWon ).
	! !

!testRun: #TableTest #test78 stamp: 'D S 10/31/2020 23:26:09'!
FAILURE!

!testRun: #TableTest #test78 stamp: 'D S 10/31/2020 23:26:09'!
FAILURE!

!testRun: #TableTest #test78 stamp: 'D S 10/31/2020 23:26:41'!
FAILURE!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:27:05' prior: 50926034!
test78
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	self should: (aGame putXAt: 0@2) raise: PopUpMenu description: (Game menuDescriptionPlayerXWon ).
	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:27:40'!
test79
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@1.
	self should: (aGame putOAt: 2@2) raise: PopUpMenu description: (Game menuDescriptionPlayerOWon ).
	! !
!Game methodsFor: 'actions' stamp: 'D S 10/31/2020 23:28:00' prior: 50921739!
putOAt: aPoint 
	
	((self positionXTokens) includes: aPoint) ifTrue:[self error: self class errorDescriptionOponentTokenInPosition].
	(self isOver) ifTrue: [self error: self class errorDescriptionGameOver].
	playerMoving putOAt: aPoint.
	self hasPlayerOWon ifTrue:[PopUpMenu inform: self class menuDescriptionPlayerOWon].
	playerMoving := playerX.
! !
!Game class methodsFor: 'instance creation' stamp: 'D S 10/31/2020 23:28:15'!
menuDescriptionPlayerOWon

	^'The player O Won'! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:29:59' prior: 50924361!
test76
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.	
	aGame putOAt: 2@0.
	Game should: (aGame xMoveTokenFrom: 2@2 to: 1@2) 
		raise: PopUpMenu 
		description: Game menuDescriptionPlayerXWon 
	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:30:03'!
test80
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.	
	aGame putOAt: 2@0.
	Game should: (aGame xMoveTokenFrom: 2@2 to: 1@2) 
		raise: PopUpMenu 
		description: Game menuDescriptionPlayerXWon 
	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 22:46:42' prior: 50926091!
test76
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.	
	aGame putOAt: 2@0.
	aGame xMoveTokenFrom: 2@2 to: 1@2.
	^ [aGame oMoveTokenFrom: 2@0 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionGameOver)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:30:18' prior: 50926061!
test79
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@1.
	Game should: (aGame putOAt: 2@2) raise: PopUpMenu description: (Game menuDescriptionPlayerOWon ).
	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:30:24' prior: 50926051!
test78
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	Game should: (aGame putXAt: 0@2) raise: PopUpMenu description: (Game menuDescriptionPlayerXWon ).
	! !

!testRun: #TableTest #test78 stamp: 'D S 10/31/2020 23:30:27'!
ERROR!

!testRun: #TableTest #test78 stamp: 'D S 10/31/2020 23:30:27'!
ERROR!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:32:53' prior: 50926141!
test78
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	^[aGame putXAt: 0@2]! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:33:12' prior: 50926156!
test78
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	^[aGame putXAt: 0@2] on: PopUpMenu do: [:menu| ]! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:33:39' prior: 50926164!
test78
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	^[aGame putXAt: 0@2] on: PopUpMenu do: [:menu| self assert: (menu messageText = (Game menuDescriptionPlayerXWon )).].! !

!testRun: #TableTest #test78 stamp: 'D S 10/31/2020 23:33:42'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:33:53' prior: 50926173!
test78
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	^[aGame putXAt: 0@2] 
		on: PopUpMenu 
		do: [:menu| self assert: (menu messageText = (Game menuDescriptionPlayerXWon )).].! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:34:26' prior: 50926130!
test79
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@1.
	^[aGame putOAt: 2@2] 		
		on: PopUpMenu
		do: [:menu| self assert: (menu messageText = (Game menuDescriptionPlayerXWon )).].! !

!testRun: #TableTest #test79 stamp: 'D S 10/31/2020 23:34:28'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:34:50' prior: 50926103!
test80
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.	
	aGame putOAt: 2@0.
	^[aGame xMoveTokenFrom: 2@2 to: 1@2]
		on: PopUpMenu 
		description: Game menuDescriptionPlayerXWon 
	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:35:04' prior: 50926197!
test79
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@1.
	^[aGame putOAt: 2@2] 		
		on: PopUpMenu
		do: [:menu| self assert: (menu messageText = (Game menuDescriptionPlayerOWon )).].! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:35:07' prior: 50926211!
test80
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.	
	aGame putOAt: 2@0.
	^[aGame xMoveTokenFrom: 2@2 to: 1@2]
		on: PopUpMenu 
		do: [:menu| self assert: (menu messageText = (Game menuDescriptionPlayerXWon )).].	! !

!testRun: #TableTest #test79 stamp: 'D S 10/31/2020 23:35:11'!
PASSED!

!testRun: #TableTest #test80 stamp: 'D S 10/31/2020 23:35:16'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:37:49'!
test81
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame oMoveTokenFrom: 2@2 to: 1@1.]
		on: PopUpMenu 
		do: [:menu| self assert: (menu messageText = (Game menuDescriptionPlayerOWon )).].	! !

!testRun: #TableTest #test81 stamp: 'D S 10/31/2020 23:37:56'!
ERROR!

!testRun: #TableTest #test81 stamp: 'D S 10/31/2020 23:37:56'!
ERROR!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:38:27' prior: 50926252!
test81
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame oMoveTokenFrom: 2@2 to: 1@2.]
		on: PopUpMenu 
		do: [:menu| self assert: (menu messageText = (Game menuDescriptionPlayerOWon )).].	! !

!testRun: #TableTest #test81 stamp: 'D S 10/31/2020 23:38:31'!
PASSED!

Game subclass: #PlayerNull
	instanceVariableNames: 'remainingTokens positionTokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!

!classDefinition: #PlayerNull category: 'Terni-Lapilli' stamp: 'D S 10/31/2020 23:39:10'!
Game subclass: #PlayerNull
	instanceVariableNames: 'remainingTokens positionTokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!
!Game methodsFor: 'actions' stamp: 'D S 10/31/2020 23:39:51' prior: 50925233!
putXAt: aPoint 
	
	((self positionOTokens) includes: aPoint) ifTrue:[self error: self class errorDescriptionOponentTokenInPosition].
	(self isOver) ifTrue: [self error: self class errorDescriptionGameOver].
	playerMoving putXAt: aPoint.
	self hasPlayerXWon ifTrue:[PopUpMenu inform: self class menuDescriptionPlayerXWon.
						  playerMoving := PlayerNull initialize]
	ifFalse: [	playerMoving := playerO.]
! !
!Game methodsFor: 'actions' stamp: 'D S 10/31/2020 23:40:01' prior: 50926072!
putOAt: aPoint 
	
	((self positionXTokens) includes: aPoint) ifTrue:[self error: self class errorDescriptionOponentTokenInPosition].
	(self isOver) ifTrue: [self error: self class errorDescriptionGameOver].
	playerMoving putOAt: aPoint.
	self hasPlayerOWon ifTrue:[PopUpMenu inform: self class menuDescriptionPlayerOWon.
						playerMoving := PlayerNull initialize].
	playerMoving := playerX.
! !

!testRun: #TableTest #test80 stamp: 'D S 10/31/2020 23:40:11'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:40:45' prior: 50926235!
test80
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.	
	aGame putOAt: 2@0.
	^[aGame xMoveTokenFrom: 2@2 to: 1@2
		| self popUpMenu ]
		on: PopUpMenu 
		do: [:menu| self assert: (menu messageText = (Game menuDescriptionPlayerXWon )).].	! !

!testRun: #TableTest #test80 stamp: 'D S 10/31/2020 23:40:48'!
ERROR!

!testRun: #TableTest #test80 stamp: 'D S 10/31/2020 23:40:48'!
ERROR!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:41:02' prior: 50926333!
test80
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.	
	aGame putOAt: 2@0.
	^[aGame xMoveTokenFrom: 2@2 to: 1@2.
		self popUpMenu ]
		on: PopUpMenu 
		do: [:menu| self assert: (menu messageText = (Game menuDescriptionPlayerXWon )).].	! !

!testRun: #TableTest #test80 stamp: 'D S 10/31/2020 23:41:05'!
ERROR!

!testRun: #TableTest #test80 stamp: 'D S 10/31/2020 23:41:05'!
ERROR!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:43:17' prior: 50926351!
test80
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.	
	aGame putOAt: 2@0.
	Game should: (aGame xMoveTokenFrom: 2@2 to: 1@2) raise: PopUpMenu description: Game menuDescriptionPlayerXWon.
	"^[aGame xMoveTokenFrom: 2@2 to: 1@2.
		self ]
		on: PopUpMenu 
		do: [:menu| self assert: (menu messageText = (Game menuDescriptionPlayerXWon )).].	"! !

!testRun: #TableTest #test80 stamp: 'D S 10/31/2020 23:43:24'!
ERROR!

!testRun: #TableTest #test80 stamp: 'D S 10/31/2020 23:43:24'!
ERROR!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:43:31' prior: 50926369!
test80
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.	
	aGame putOAt: 2@0.
	self should: (aGame xMoveTokenFrom: 2@2 to: 1@2) raise: PopUpMenu description: Game menuDescriptionPlayerXWon.
	"^[aGame xMoveTokenFrom: 2@2 to: 1@2.
		self ]
		on: PopUpMenu 
		do: [:menu| self assert: (menu messageText = (Game menuDescriptionPlayerXWon )).].	"! !

!testRun: #TableTest #test80 stamp: 'D S 10/31/2020 23:43:33'!
FAILURE!

!testRun: #TableTest #test80 stamp: 'D S 10/31/2020 23:43:33'!
FAILURE!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:44:45' prior: 50926390!
test80
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.	
	aGame putOAt: 2@0.
	^[aGame xMoveTokenFrom: 2@2 to: 1@2.
		self fail]
		on: PopUpMenu 
		do: [:menu| self assert: (menu messageText = (Game menuDescriptionPlayerXWon )).].! !

!testRun: #TableTest #test80 stamp: 'D S 10/31/2020 23:44:48'!
FAILURE!

!testRun: #TableTest #test80 stamp: 'D S 10/31/2020 23:44:48'!
FAILURE!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:57:57' prior: 50926411!
test80
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.	
	aGame putOAt: 2@0.
	^[aGame xMoveTokenFrom: 2@2 to: 1@2.
		self fail]
		on: PopUpMenu 
		do: [:menu| self assert: (menu messageText = (Game menuDescriptionPlayerOWon )).].! !

!testRun: #TableTest #test80 stamp: 'D S 10/31/2020 23:58:00'!
FAILURE!

!testRun: #TableTest #test80 stamp: 'D S 10/31/2020 23:58:00'!
FAILURE!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:58:08' prior: 50926429!
test80
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.	
	aGame putOAt: 2@0.
	^[aGame xMoveTokenFrom: 2@2 to: 1@2.
		]
		on: PopUpMenu 
		do: [:menu| self assert: (menu messageText = (Game menuDescriptionPlayerOWon )).].! !

!testRun: #TableTest #test80 stamp: 'D S 10/31/2020 23:58:11'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:58:15' prior: 50926447!
test80
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.	
	aGame putOAt: 2@0.
	^[aGame xMoveTokenFrom: 2@2 to: 1@2.
		]
		on: PopUpMenu 
		do: [:menu| self assert: (menu messageText = (Game menuDescriptionPlayerXWon )).].! !

----SNAPSHOT----(1 November 2020 00:41:46) CuisUniversity-4383.image priorSource: 18984689!
!PlayerNull methodsFor: 'no messages' stamp: 'D S 11/1/2020 01:47:54' overrides: 50926315!
putOAt: aPoint
	
	^self error: self class errorDescriptionGameOver! !
!PlayerNull methodsFor: 'as yet unclassified' stamp: 'D S 11/1/2020 01:47:55' overrides: 50926299!
putXAt: aPoint
	
	^self error: self class errorDescriptionGameOver! !
!PlayerNull methodsFor: 'as yet unclassified' stamp: 'D S 11/1/2020 01:48:10'!
xMoveFrom: aPoint to: aPoint2
	
	^self error: self class errorDescriptionGameOver! !
!PlayerNull methodsFor: 'as yet unclassified' stamp: 'D S 11/1/2020 01:48:19'!
oMoveFrom: aPoint to: aPoint2
	
	^self error: self class errorDescriptionGameOver! !
!PlayerNull class methodsFor: 'no messages' stamp: 'D S 11/1/2020 01:48:40' overrides: 50921750!
errorDescriptionGameOver

	! !
!PlayerNull class methodsFor: 'as yet unclassified' stamp: 'D S 11/1/2020 01:48:51' prior: 50926501 overrides: 50921750!
errorDescriptionGameOver

	^'The Game Already Ended'! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 01:49:55' prior: 50924636!
test77
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.	
	aGame putOAt: 0@2.
	^ [aGame putXAt: 1@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerNull errorDescriptionGameOver)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 01:50:06' prior: 50926115!
test76
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.	
	aGame putOAt: 2@0.
	aGame xMoveTokenFrom: 2@2 to: 1@2.
	^ [aGame oMoveTokenFrom: 2@0 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerNull errorDescriptionGameOver)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 01:50:10' prior: 50926186!
test78
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	^[aGame putXAt: 0@2] 
		on: PopUpMenu 
		do: [:menu| self assert: (menu messageText = (PlayerNull menuDescriptionPlayerXWon )).].! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 01:50:14' prior: 50926223!
test79
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@1.
	^[aGame putOAt: 2@2] 		
		on: PopUpMenu
		do: [:menu| self assert: (menu messageText = (PlayerNull menuDescriptionPlayerOWon )).].! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 10/31/2020 23:35:04' prior: 50926550!
test79
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@1.
	^[aGame putOAt: 2@2] 		
		on: PopUpMenu
		do: [:menu| self assert: (menu messageText = (Game menuDescriptionPlayerOWon )).].! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test67 stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test68 stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test69 stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test70 stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test71 stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test72 stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test73 stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test74 stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test75 stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test76 stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test77 stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test78 stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test79 stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test80 stamp: 'D S 11/1/2020 01:50:34'!
PASSED!

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 01:50:34'!
PASSED!
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 01:51:06' prior: 50926315!
putOAt: aPoint 
	
	((self positionXTokens) includes: aPoint) ifTrue:[self error: self class errorDescriptionOponentTokenInPosition].
	playerMoving putOAt: aPoint.
	self hasPlayerOWon ifTrue:[PopUpMenu inform: self class menuDescriptionPlayerOWon.
						playerMoving := PlayerNull initialize].
	playerMoving := playerX.
! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 01:51:10' prior: 50926299!
putXAt: aPoint 
	
	((self positionOTokens) includes: aPoint) ifTrue:[self error: self class errorDescriptionOponentTokenInPosition].
	playerMoving putXAt: aPoint.
	self hasPlayerXWon ifTrue:[PopUpMenu inform: self class menuDescriptionPlayerXWon.
						  playerMoving := PlayerNull initialize]
	ifFalse: [	playerMoving := playerO.]
! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 01:51:14' prior: 50921772!
xMoveTokenFrom: aPoint to: aPoint2 
	
	((playerO positionToken) includes: aPoint2) ifTrue: [self error: self class errorDescriptionOponentTokenInPosition ].
	playerMoving xMoveTokenFrom: aPoint to: aPoint2.
	playerMoving := playerO.! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 01:51:18' prior: 50924380!
oMoveTokenFrom: aPoint to: aPoint2 
	
	((playerX positionToken) includes: aPoint2) ifTrue: [self error: self class errorDescriptionOponentTokenInPosition ].
	playerMoving oMoveTokenFrom: aPoint to: aPoint2. 
	playerMoving := playerX.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test67 stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test68 stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test69 stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test70 stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test71 stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test72 stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test73 stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test74 stamp: 'D S 11/1/2020 01:51:23'!
FAILURE!

!testRun: #TableTest #test75 stamp: 'D S 11/1/2020 01:51:23'!
FAILURE!

!testRun: #TableTest #test76 stamp: 'D S 11/1/2020 01:51:23'!
FAILURE!

!testRun: #TableTest #test77 stamp: 'D S 11/1/2020 01:51:23'!
FAILURE!

!testRun: #TableTest #test78 stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test79 stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test80 stamp: 'D S 11/1/2020 01:51:23'!
PASSED!

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 01:51:23'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 01:51:48' prior: 50924243!
test74
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@2.	
	^ [aGame putOAt: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerNull errorDescriptionGameOver)).].

	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 01:51:54' prior: 50924348!
test75
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.	
	aGame putOAt: 1@0.
	^ [aGame xMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerNull errorDescriptionGameOver)).].

	! !

!testRun: #TableTest #test76 stamp: 'D S 11/1/2020 01:52:03'!
FAILURE!

!testRun: #TableTest #test76 stamp: 'D S 11/1/2020 01:52:03'!
FAILURE!

!testRun: #TableTest #test74 stamp: 'D S 11/1/2020 01:52:11'!
FAILURE!

!testRun: #TableTest #test74 stamp: 'D S 11/1/2020 01:52:11'!
FAILURE!

!testRun: #TableTest #test74 stamp: 'D S 11/1/2020 01:52:32'!
FAILURE!

!testRun: #TableTest #test74 stamp: 'D S 11/1/2020 01:52:50'!
FAILURE!
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 01:55:14' prior: 50926826!
putOAt: aPoint 
	
	((self positionXTokens) includes: aPoint) ifTrue:[self error: self class errorDescriptionOponentTokenInPosition].
	playerMoving putOAt: aPoint.
	self hasPlayerOWon ifTrue:[PopUpMenu inform: self class menuDescriptionPlayerOWon.
						playerMoving := PlayerNull initialize]
					ifFalse:[playerMoving := playerX.]
! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 01:56:01' prior: 50926852!
xMoveTokenFrom: aPoint to: aPoint2 
	
	((playerO positionToken) includes: aPoint2) ifTrue: [self error: self class errorDescriptionOponentTokenInPosition ].
	playerMoving xMoveTokenFrom: aPoint to: aPoint2.
	self hasPlayerXWon ifTrue:[PopUpMenu inform: self class menuDescriptionPlayerXWon.
						  playerMoving := PlayerNull initialize]
					ifFalse: [	playerMoving := playerO.]! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 01:56:14' prior: 50926862!
oMoveTokenFrom: aPoint to: aPoint2 
	
	((playerX positionToken) includes: aPoint2) ifTrue: [self error: self class errorDescriptionOponentTokenInPosition ].
	playerMoving oMoveTokenFrom: aPoint to: aPoint2. 
	self hasPlayerOWon ifTrue:[PopUpMenu inform: self class menuDescriptionPlayerOWon.
						playerMoving := PlayerNull initialize]
					ifFalse:[playerMoving := playerX.]
! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test67 stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test68 stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test69 stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test70 stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test71 stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test72 stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test73 stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test74 stamp: 'D S 11/1/2020 01:56:19'!
FAILURE!

!testRun: #TableTest #test75 stamp: 'D S 11/1/2020 01:56:19'!
FAILURE!

!testRun: #TableTest #test76 stamp: 'D S 11/1/2020 01:56:19'!
FAILURE!

!testRun: #TableTest #test77 stamp: 'D S 11/1/2020 01:56:19'!
FAILURE!

!testRun: #TableTest #test78 stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test79 stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test80 stamp: 'D S 11/1/2020 01:56:19'!
PASSED!

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 01:56:19'!
PASSED!
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 01:57:05' prior: 50927164!
putOAt: aPoint 
	
	((self positionXTokens) includes: aPoint) ifTrue:[self error: self class errorDescriptionOponentTokenInPosition].
	playerMoving putOAt: aPoint.
	self hasPlayerOWon ifTrue:[PopUpMenu inform: self class menuDescriptionPlayerOWon.
						playerMoving := PlayerNull new initialize]
					ifFalse:[playerMoving := playerX.]
! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test67 stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test68 stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test69 stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test70 stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test71 stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test72 stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test73 stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test74 stamp: 'D S 11/1/2020 01:57:08'!
FAILURE!

!testRun: #TableTest #test75 stamp: 'D S 11/1/2020 01:57:08'!
FAILURE!

!testRun: #TableTest #test76 stamp: 'D S 11/1/2020 01:57:08'!
FAILURE!

!testRun: #TableTest #test77 stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test78 stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test79 stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test80 stamp: 'D S 11/1/2020 01:57:08'!
PASSED!

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 01:57:08'!
PASSED!
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 01:57:31' prior: 50927177!
xMoveTokenFrom: aPoint to: aPoint2 
	
	((playerO positionToken) includes: aPoint2) ifTrue: [self error: self class errorDescriptionOponentTokenInPosition ].
	playerMoving xMoveTokenFrom: aPoint to: aPoint2.
	self hasPlayerXWon ifTrue:[PopUpMenu inform: self class menuDescriptionPlayerXWon.
						  playerMoving := PlayerNull new initialize]
					ifFalse: [	playerMoving := playerO.]! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 01:57:36' prior: 50926839!
putXAt: aPoint 
	
	((self positionOTokens) includes: aPoint) ifTrue:[self error: self class errorDescriptionOponentTokenInPosition].
	playerMoving putXAt: aPoint.
	self hasPlayerXWon ifTrue:[PopUpMenu inform: self class menuDescriptionPlayerXWon.
						  playerMoving := PlayerNull new initialize]
	ifFalse: [	playerMoving := playerO.]
! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 01:57:41' prior: 50927192!
oMoveTokenFrom: aPoint to: aPoint2 
	
	((playerX positionToken) includes: aPoint2) ifTrue: [self error: self class errorDescriptionOponentTokenInPosition ].
	playerMoving oMoveTokenFrom: aPoint to: aPoint2. 
	self hasPlayerOWon ifTrue:[PopUpMenu inform: self class menuDescriptionPlayerOWon.
						playerMoving := PlayerNull new initialize]
					ifFalse:[playerMoving := playerX.]
! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 01:57:47'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test67 stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test68 stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test69 stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test70 stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test71 stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test72 stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test73 stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test74 stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test75 stamp: 'D S 11/1/2020 01:57:48'!
FAILURE!

!testRun: #TableTest #test76 stamp: 'D S 11/1/2020 01:57:48'!
FAILURE!

!testRun: #TableTest #test77 stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test78 stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test79 stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test80 stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 01:57:48'!
PASSED!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test67 stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test68 stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test69 stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test70 stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test71 stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test72 stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test73 stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test74 stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test75 stamp: 'D S 11/1/2020 02:00:32'!
FAILURE!

!testRun: #TableTest #test76 stamp: 'D S 11/1/2020 02:00:32'!
FAILURE!

!testRun: #TableTest #test77 stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test78 stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test79 stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test80 stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 02:00:32'!
PASSED!

!testRun: #TableTest #test74 stamp: 'D S 11/1/2020 02:01:02'!
PASSED!

!testRun: #TableTest #test75 stamp: 'D S 11/1/2020 02:01:08'!
FAILURE!

!testRun: #TableTest #test75 stamp: 'D S 11/1/2020 02:01:08'!
FAILURE!

!testRun: #TableTest #test75 stamp: 'D S 11/1/2020 02:01:16'!
FAILURE!

!testRun: #TableTest #test75 stamp: 'D S 11/1/2020 02:01:16'!
FAILURE!

!testRun: #TableTest #test75 stamp: 'D S 11/1/2020 02:01:36'!
FAILURE!

!testRun: #TableTest #test75 stamp: 'D S 11/1/2020 02:01:47'!
FAILURE!

!testRun: #TableTest #test75 stamp: 'D S 11/1/2020 02:01:47'!
FAILURE!
!PlayerNull methodsFor: 'as yet unclassified' stamp: 'D S 11/1/2020 02:02:49' overrides: 50927754!
oMoveTokenFrom: aPoint to: aPoint2
	
	^self error: self class errorDescriptionGameOver! !

!methodRemoval: PlayerNull #oMoveFrom:to: stamp: 'D S 11/1/2020 02:02:49'!
oMoveFrom: aPoint to: aPoint2
	
	^self error: self class errorDescriptionGameOver!
!PlayerNull methodsFor: 'as yet unclassified' stamp: 'D S 11/1/2020 02:02:56' overrides: 50927725!
xMoveTokenFrom: aPoint to: aPoint2
	
	^self error: self class errorDescriptionGameOver! !

!methodRemoval: PlayerNull #xMoveFrom:to: stamp: 'D S 11/1/2020 02:02:56'!
xMoveFrom: aPoint to: aPoint2
	
	^self error: self class errorDescriptionGameOver!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test67 stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test68 stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test69 stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test70 stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test71 stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test72 stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test73 stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test74 stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test75 stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test76 stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test77 stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test78 stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test79 stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test80 stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 02:03:00'!
PASSED!

----SNAPSHOT----(1 November 2020 02:03:52) CuisUniversity-4383.image priorSource: 19034357!

----QUIT----(1 November 2020 02:03:54) CuisUniversity-4383.image priorSource: 19101317!

----STARTUP---- (1 November 2020 11:28:08) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisUniversity/CuisUniversity-4383.image!

!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 11:30:53'!
test82
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame oMoveTokenFrom: 2@0 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (Game errorDescriptionCantMoveOpponentTokens )).].	! !
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 11/1/2020 11:33:41' overrides: 50927754!
oMoveTokenFrom: aPoint to: aPoint2 
	
	self error: self class ! !
!PlayerX methodsFor: 'as yet unclassified' stamp: 'D S 11/1/2020 11:33:43' prior: 50928591 overrides: 50927754!
oMoveTokenFrom: aPoint to: aPoint2 
	
	self error: self class errorDescriptionCantMoveOpponentTokens! !
!PlayerX class methodsFor: 'as yet unclassified' stamp: 'D S 11/1/2020 11:34:37'!
errorDescriptionCantMoveOpponentTokens

	^'You cant move oponent tokens!!'! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test67 stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test68 stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test69 stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test70 stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test71 stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test72 stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test73 stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test74 stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test75 stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test76 stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test77 stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test78 stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test79 stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test80 stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 11:34:40'!
PASSED!

!testRun: #TableTest #test82 stamp: 'D S 11/1/2020 11:34:40'!
ERROR!

!testRun: #TableTest #test82 stamp: 'D S 11/1/2020 11:34:40'!
ERROR!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 11:35:07' prior: 50928577!
test82
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame oMoveTokenFrom: 2@0 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionCantMoveOpponentTokens )).].	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 11:36:01'!
test83
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame xMoveTokenFrom: 2@1 to: 2@0.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionCantMoveOpponentTokens )).].	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 11:36:09' prior: 50928878!
test83
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame xMoveTokenFrom: 2@1 to: 2@0.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerO errorDescriptionCantMoveOpponentTokens )).].	! !

!testRun: #TableTest #test83 stamp: 'D S 11/1/2020 11:36:28'!
ERROR!

!testRun: #TableTest #test83 stamp: 'D S 11/1/2020 11:36:28'!
ERROR!
!PlayerO methodsFor: 'as yet unclassified' stamp: 'D S 11/1/2020 11:37:33' overrides: 50927725!
xMoveTokenFrom: aPoint to: aPoint2 
	
	self error: self class errorDescriptionCantMoveOpponentTokens ! !
!PlayerO class methodsFor: 'as yet unclassified' stamp: 'D S 11/1/2020 11:37:43'!
errorDescriptionCantMoveOpponentTokens

	^'You cant move oponent tokens!!'! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test16XTokensInMiddleRow stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test17OTokensInMiddleRow stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test18XTokensInBottomRow stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test19OTokensInBottomRow stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test21OTokensInTopRow stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test22XTokensInSecondColumn stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test23OTokensInSecondColumn stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test24XTokensInFirstColumn stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test25OTokensInFirstColumn stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test26XTokensInThirdColumn stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test27OTokensInThirdColumn stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test57 stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test59 stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test66 stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test67 stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test68 stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test69 stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test70 stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test71 stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test72 stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test73 stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test74 stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test75 stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test76 stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test77 stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test78 stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test79 stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test80 stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test82 stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test83 stamp: 'D S 11/1/2020 11:38:24'!
PASSED!

!testRun: #TableTest #test20XTokensInTopRow stamp: 'D S 11/1/2020 11:38:46'!
PASSED!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 11:45:48'!
test32PlayerXMovesTokenCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 0@2 to: 1@2.

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionXTokens.! !

!methodRemoval: TableTest #test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 11/1/2020 11:45:48'!
test32PlayerXMovesTokenFromLeftTopToCenterTopCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 0@2 to: 1@2.

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionXTokens.!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 11:45:58'!
test33PlayerOMovesTokenCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 0@2 to: 1@2.
	

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionOTokens.! !

!methodRemoval: TableTest #test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly stamp: 'D S 11/1/2020 11:45:58'!
test33PlayerOMovesTokenFromLeftTopToCenterTopCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 0@2 to: 1@2.
	

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionOTokens.!

!methodRemoval: TableTest #test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 11/1/2020 11:46:01'!
test34PlayerXMovesTokenFromCenterToRightMiddleCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.

	self assert: (Set with: 0@2 with: 1@0 with: 2@1) equals: aGame positionXTokens.!

!methodRemoval: TableTest #test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly stamp: 'D S 11/1/2020 11:46:04'!
test35PlayerOMovesTokenFromCenterToRightMiddleCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 1@1 to: 1@2.
	

	self assert: (Set with: 0@2 with: 1@2 with: 2@1) equals: aGame positionOTokens.!

!methodRemoval: TableTest #test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 11/1/2020 11:46:12'!
test36PlayerXMovesTokenFromLeftTopToLeftMiddleCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 0@2 to: 0@1.

	self assert: (Set with: 0@1 with: 1@1 with: 2@1) equals: aGame positionXTokens.!

!methodRemoval: TableTest #test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly stamp: 'D S 11/1/2020 11:46:15'!
test37PlayerOMovesTokenFromLeftTopToLeftMiddleCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@0.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 0@2 to: 0@1.
	

	self assert: (Set with: 0@1 with: 1@1 with: 2@1) equals: aGame positionOTokens.!

!methodRemoval: TableTest #test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 11/1/2020 11:46:18'!
test38PlayerXMovesTokenFromCenterToBottomCenterCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.

	self assert: (Set with: 1@2 with: 1@0 with: 2@1) equals: aGame positionXTokens.!

!methodRemoval: TableTest #test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly stamp: 'D S 11/1/2020 11:46:21'!
test39PlayerOMovesTokenFromCenterToBottomCenterCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@1 to: 0@2.
	aGame oMoveTokenFrom: 1@1 to: 1@0.

	self assert: (Set with: 1@2 with: 1@0 with: 2@1) equals: aGame positionOTokens.!

!methodRemoval: TableTest #test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo stamp: 'D S 11/1/2020 11:46:37'!
test30WhenPlayerXPutsTokenReduceRemainingXTokensByTwo

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.

	self assert: 1 equals: aGame playerXRemainingTokens .!

!methodRemoval: TableTest #test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo stamp: 'D S 11/1/2020 11:46:40'!
test31WhenPlayerOPutsTokenReduceRemainingOTokensByTwo

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 0@0.

	self assert: 1 equals: aGame playerORemainingTokens .!
!TableTest methodsFor: 'PutTokenTests' stamp: 'D S 11/1/2020 11:46:50'!
test28WhenPlayerXPutsTokenReduceRemainingXTokensCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.

	self assert: 2 equals: aGame playerXRemainingTokens .! !

!methodRemoval: TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne stamp: 'D S 11/1/2020 11:46:50'!
test28WhenPlayerXPutsTokenReduceRemainingXTokensByOne

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.

	self assert: 2 equals: aGame playerXRemainingTokens .!
!TableTest methodsFor: 'PutTokenTests' stamp: 'D S 11/1/2020 11:47:08'!
test29PuttingOTokenReduceRemainingOCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@1.

	self assert: 2 equals: aGame playerORemainingTokens .! !

!methodRemoval: TableTest #test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne stamp: 'D S 11/1/2020 11:47:08'!
test29WhenPlayerOPutsTokenReduceRemainingXTokensByOne

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@1.

	self assert: 2 equals: aGame playerORemainingTokens .!
!TableTest methodsFor: 'PutTokenTests' stamp: 'D S 11/1/2020 11:47:24'!
test28PuttingXTokenReduceRemainingXTokensCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.

	self assert: 2 equals: aGame playerXRemainingTokens .! !

!methodRemoval: TableTest #test28WhenPlayerXPutsTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 11:47:24'!
test28WhenPlayerXPutsTokenReduceRemainingXTokensCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.

	self assert: 2 equals: aGame playerXRemainingTokens .!

!methodRemoval: TableTest #test52RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 11:51:06'!
test52RaiseErrorWhenTryingToPutAFourthOToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@0.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame putOAt: 0@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionNoMoreTokens )).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 11:51:39'!
test53RaiseErrorWhenPlayerXTryAnInvalidMovement
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	
	^ [aGame xMoveTokenFrom: 1@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement)).].

	! !

!methodRemoval: TableTest #test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight stamp: 'D S 11/1/2020 11:51:40'!
test53RaiseErrorWhenPlayerXTryToMoveFromCenterTopToMiddleRight
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	
	^ [aGame xMoveTokenFrom: 1@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement)).].

	!

!methodRemoval: TableTest #test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom stamp: 'D S 11/1/2020 11:51:44'!
test54RaiseErrorWhenPlayerXTryToMoveFromCenterTopToCenterBottom
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	
	^ [aGame xMoveTokenFrom: 1@2 to: 1@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 11:52:02'!
test55RaiseErrorWhenPlayerOTryAnInvalidMovement
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@0.
	aGame xMoveTokenFrom: 0@1 to: 0@	2.
	^ [aGame oMoveTokenFrom: 1@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement)).].

	! !

!methodRemoval: TableTest #test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight stamp: 'D S 11/1/2020 11:52:02'!
test55RaiseErrorWhenPlayerOTryToMoveFromCenterTopToMiddleRight
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@0.
	aGame xMoveTokenFrom: 0@1 to: 0@	2.
	^ [aGame oMoveTokenFrom: 1@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 11:52:57'!
test56RaiseErrorWhenPlayerXPutATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!methodRemoval: TableTest #test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum stamp: 'D S 11/1/2020 11:52:57'!
test56RaiseErrorWhenPlayerXTryToPutTokenNextToRightColum
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	!

!methodRemoval: TableTest #test57 stamp: 'D S 11/1/2020 11:53:03'!
test57
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 3@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	!

!methodRemoval: TableTest #test59 stamp: 'D S 11/1/2020 11:53:07'!
test59
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 1@3.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	!

!methodRemoval: TableTest #test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow stamp: 'D S 11/1/2020 11:53:11'!
test61RaiseErrorWhenPlayerXTryToPutTokenUnderBottomRow
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 1@-3.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	!

!methodRemoval: TableTest #test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow stamp: 'D S 11/1/2020 11:53:36'!
test58RaiseErrorWhenPlayerXTryToPutTokenAboveTopRow
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 2@3.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	!

!methodRemoval: TableTest #test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn stamp: 'D S 11/1/2020 11:53:46'!
test60RaiseErrorWhenPlayerXTryToPutTokenNextToLeftColumn
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: -3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 11:54:17'!
test62RaiseErrorWhenPlayerOWhenPlayerXPutATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame := aGame putXAt: 1@1.
	^ [aGame putOAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

! !

!methodRemoval: TableTest #test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum stamp: 'D S 11/1/2020 11:54:17'!
test62RaiseErrorWhenPlayerOTryToPutTokenNextToRightColum
	|aGame|
	aGame := Game startGame.
	aGame := aGame putXAt: 1@1.
	^ [aGame putOAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

!

!methodRemoval: TableTest #test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow stamp: 'D S 11/1/2020 11:54:20'!
test63RaiseErrorWhenPlayerOTryToPutTokenAboveTopRow
	|aGame|
	aGame := Game startGame.
	aGame := aGame putXAt: 1@1.
	^ [aGame putOAt: 2@3.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

	!

!methodRemoval: TableTest #test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn stamp: 'D S 11/1/2020 11:54:23'!
test64RaiseErrorWhenPlayerOTryToPutTokenNextToLeftColumn
	|aGame|
	aGame := Game startGame.
	aGame := aGame putXAt: 1@1.
	^ [aGame putOAt: -3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 11:54:34'!
test62RaiseErrorWhenPlayerOPutATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame := aGame putXAt: 1@1.
	^ [aGame putOAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

! !

!methodRemoval: TableTest #test62RaiseErrorWhenPlayerOWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 11:54:34'!
test62RaiseErrorWhenPlayerOWhenPlayerXPutATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame := aGame putXAt: 1@1.
	^ [aGame putOAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

!

!methodRemoval: TableTest #test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow stamp: 'D S 11/1/2020 11:54:37'!
test65RaiseErrorWhenPlayerOTryToPutTokenUnderBottomRow
	|aGame|
	aGame := Game startGame.
	aGame := aGame putXAt: 1@1.
	^ [aGame putOAt: 1@-3.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 11:55:26'!
test66RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	
	^ [aGame xMoveTokenFrom: 2@0 to: 3@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!methodRemoval: TableTest #test66 stamp: 'D S 11/1/2020 11:55:26'!
test66
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	
	^ [aGame xMoveTokenFrom: 2@0 to: 3@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	!

!methodRemoval: TableTest #test67 stamp: 'D S 11/1/2020 11:55:31'!
test67
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@2.
	aGame putOAt: 2@0.
	
	^ [aGame xMoveTokenFrom: 2@2 to: 2@3.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	!

!methodRemoval: TableTest #test68 stamp: 'D S 11/1/2020 11:55:34'!
test68
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@0.
	
	^ [aGame xMoveTokenFrom: 0@0 to: -1@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	!

!methodRemoval: TableTest #test69 stamp: 'D S 11/1/2020 11:55:37'!
test69
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@0.
	
	^ [aGame xMoveTokenFrom: 0@0 to: 0@-1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 11:55:56'!
test70RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.
	
	^ [aGame oMoveTokenFrom: 2@2 to: 3@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

	! !

!methodRemoval: TableTest #test70 stamp: 'D S 11/1/2020 11:55:56'!
test70
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.
	
	^ [aGame oMoveTokenFrom: 2@2 to: 3@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

	!

!methodRemoval: TableTest #test71 stamp: 'D S 11/1/2020 11:56:01'!
test71
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.
	
	^ [aGame oMoveTokenFrom: 2@2 to: 3@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

	!

!methodRemoval: TableTest #test72 stamp: 'D S 11/1/2020 11:56:04'!
test72
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.
	
	^ [aGame oMoveTokenFrom: 0@0 to: -1@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

	!

!methodRemoval: TableTest #test73 stamp: 'D S 11/1/2020 11:56:07'!
test73
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.
	
	^ [aGame oMoveTokenFrom: 0@0 to: 0@-1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 11:56:47'!
test74RaiseErrorWhenPlayerOPutATokenWhenMatchEnded
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@2.	
	^ [aGame putOAt: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerNull errorDescriptionGameOver)).].

	! !

!methodRemoval: TableTest #test74 stamp: 'D S 11/1/2020 11:56:47'!
test74
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@2.	
	^ [aGame putOAt: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerNull errorDescriptionGameOver)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 11:58:48'!
test75RaiseErrorWhenPlayerXMoveATokenWhenMatchEnded
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.	
	aGame putOAt: 1@0.
	^ [aGame xMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerNull errorDescriptionGameOver)).].

	! !

!methodRemoval: TableTest #test75 stamp: 'D S 11/1/2020 11:58:48'!
test75
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.	
	aGame putOAt: 1@0.
	^ [aGame xMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerNull errorDescriptionGameOver)).].

	!

!methodRemoval: TableTest #test76 stamp: 'D S 11/1/2020 11:59:02'!
test76
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.	
	aGame putOAt: 2@0.
	aGame xMoveTokenFrom: 2@2 to: 1@2.
	^ [aGame oMoveTokenFrom: 2@0 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerNull errorDescriptionGameOver)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 11:59:21'!
test77RaiseErrorWhenPlayerXPutATokenWhenMatchEnded
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.	
	aGame putOAt: 0@2.
	^ [aGame putXAt: 1@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerNull errorDescriptionGameOver)).].

	! !

!methodRemoval: TableTest #test77 stamp: 'D S 11/1/2020 11:59:21'!
test77
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.	
	aGame putOAt: 0@2.
	^ [aGame putXAt: 1@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerNull errorDescriptionGameOver)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 11:59:54'!
test82RaiseErrorWhenPlayerXTryMoveAOpponentToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame oMoveTokenFrom: 2@0 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionCantMoveOpponentTokens )).].	! !

!methodRemoval: TableTest #test82 stamp: 'D S 11/1/2020 11:59:54'!
test82
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame oMoveTokenFrom: 2@0 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionCantMoveOpponentTokens )).].	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 12:00:16'!
test83RaiseErrorWhenPlayerYTryToMoveOpponentToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame xMoveTokenFrom: 2@1 to: 2@0.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerO errorDescriptionCantMoveOpponentTokens )).].	! !

!methodRemoval: TableTest #test83 stamp: 'D S 11/1/2020 12:00:16'!
test83
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame xMoveTokenFrom: 2@1 to: 2@0.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerO errorDescriptionCantMoveOpponentTokens )).].	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 12:00:26'!
test83RaiseErrorWhenPlayerOTryMoveOpponentToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame xMoveTokenFrom: 2@1 to: 2@0.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerO errorDescriptionCantMoveOpponentTokens )).].	! !

!methodRemoval: TableTest #test83RaiseErrorWhenPlayerYTryToMoveOpponentToken stamp: 'D S 11/1/2020 12:00:26'!
test83RaiseErrorWhenPlayerYTryToMoveOpponentToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame xMoveTokenFrom: 2@1 to: 2@0.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerO errorDescriptionCantMoveOpponentTokens )).].	!

!methodRemoval: TableTest #test09TwoXTokensArePlacedCorrectly stamp: 'D S 11/1/2020 12:03:12'!
test09TwoXTokensArePlacedCorrectly

	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.

	self assert: ((aGame positionXTokens includes: (0@0)) 
			and: (aGame positionXTokens includes: (0@1))).!

!methodRemoval: TableTest #test10TwoOTokensArePlacedCorrectly stamp: 'D S 11/1/2020 12:03:14'!
test10TwoOTokensArePlacedCorrectly

	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.

	self assert: ((aGame positionOTokens includes: (1@1)) 
			and: (aGame positionOTokens includes: (1@2))).!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 12:06:02'!
test16ThreeXTokensInMiddleRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@0.
	aGame putXAt: 2@1.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test16XTokensInMiddleRow stamp: 'D S 11/1/2020 12:06:02'!
test16XTokensInMiddleRow

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@0.
	aGame putXAt: 2@1.

	self assert: aGame isOver.!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 12:06:13'!
test17ThreeOTokensInMiddleRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test17OTokensInMiddleRow stamp: 'D S 11/1/2020 12:06:13'!
test17OTokensInMiddleRow

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.

	self assert: aGame isOver.!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 12:06:29'!
test09XTokensInAscendingDiagonalEndsGame

	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:06:29'!
test11XTokensInAscendingDiagonalEndsGame

	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.

	self assert: aGame isOver.!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 12:06:35'!
test10NotForming3InARowDoesntEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@1.

	self deny: aGame isOver.! !

!methodRemoval: TableTest #test12NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 12:06:35'!
test12NotForming3InARowDoesntEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@1.

	self deny: aGame isOver.!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 12:06:40'!
test11OTokensInAscendingDiagonalEndsGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test13OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:06:40'!
test13OTokensInAscendingDiagonalEndsGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.

	self assert: aGame isOver.!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 12:06:45'!
test12XTokensInDescendingDiagonalEndsGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@0.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@0.


	self assert: aGame isOver.! !

!methodRemoval: TableTest #test14XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:06:45'!
test14XTokensInDescendingDiagonalEndsGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@0.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@0.


	self assert: aGame isOver.!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 12:06:49'!
test13OTokensInDescendingDiagonalEndsGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 2@1.
	aGame putOAt: 2@0.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test15OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:06:49'!
test15OTokensInDescendingDiagonalEndsGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 2@1.
	aGame putOAt: 2@0.

	self assert: aGame isOver.!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 12:07:01'!
test14ThreeXTokensInMiddleRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@0.
	aGame putXAt: 2@1.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test16ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 12:07:01'!
test16ThreeXTokensInMiddleRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@0.
	aGame putXAt: 2@1.

	self assert: aGame isOver.!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 12:07:05'!
test15ThreeOTokensInMiddleRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test17ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 12:07:05'!
test17ThreeOTokensInMiddleRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.

	self assert: aGame isOver.!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 12:07:15'!
test16ThreeXTokensInBottomRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@0.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 2@2.
	aGame putXAt: 2@0.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test18XTokensInBottomRow stamp: 'D S 11/1/2020 12:07:15'!
test18XTokensInBottomRow

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@0.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 2@2.
	aGame putXAt: 2@0.

	self assert: aGame isOver.!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 12:07:27'!
test17ThreeOTokensInBottomRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@0.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test19OTokensInBottomRow stamp: 'D S 11/1/2020 12:07:27'!
test19OTokensInBottomRow

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@0.

	self assert: aGame isOver.!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 12:08:00'!
test18ThreeXTokensInTopRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 0@2.
	aGame putOAt: 0@0.
	aGame putXAt: 2@2.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test20XTokensInTopRow stamp: 'D S 11/1/2020 12:08:00'!
test20XTokensInTopRow

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 0@2.
	aGame putOAt: 0@0.
	aGame putXAt: 2@2.

	self assert: aGame isOver.!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 12:08:10'!
test19ThreeOTokensInTopRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 0@2.
	aGame putXAt: 1@0.
	aGame putOAt: 2@2.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test21OTokensInTopRow stamp: 'D S 11/1/2020 12:08:10'!
test21OTokensInTopRow

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 0@2.
	aGame putXAt: 1@0.
	aGame putOAt: 2@2.

	self assert: aGame isOver.!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 12:08:23'!
test22ThreeXTokensInSecondColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 0@2.
	aGame putXAt: 1@0.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test22XTokensInSecondColumn stamp: 'D S 11/1/2020 12:08:23'!
test22XTokensInSecondColumn

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 0@2.
	aGame putXAt: 1@0.

	self assert: aGame isOver.!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 12:08:33'!
test23ThreeOTokensInSecondColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.
	aGame putOAt: 1@0.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test23OTokensInSecondColumn stamp: 'D S 11/1/2020 12:08:33'!
test23OTokensInSecondColumn

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.
	aGame putOAt: 1@0.

	self assert: aGame isOver.!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 12:08:43'!
test20ThreeXTokensInSecondColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 0@2.
	aGame putXAt: 1@0.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test22ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 12:08:43'!
test22ThreeXTokensInSecondColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 0@2.
	aGame putXAt: 1@0.

	self assert: aGame isOver.!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 12:08:48'!
test21ThreeOTokensInSecondColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.
	aGame putOAt: 1@0.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test23ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 12:08:48'!
test23ThreeOTokensInSecondColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.
	aGame putOAt: 1@0.

	self assert: aGame isOver.!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 12:09:03'!
test24ThreeXTokensInFirstColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@0.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test24XTokensInFirstColumn stamp: 'D S 11/1/2020 12:09:03'!
test24XTokensInFirstColumn

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@0.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.

	self assert: aGame isOver.!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 12:09:08'!
test22ThreeXTokensInFirstColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@0.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test24ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 12:09:08'!
test24ThreeXTokensInFirstColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@0.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.

	self assert: aGame isOver.!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 12:09:18'!
test23ThreeOTokensInFirstColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@1.
	aGame putXAt: 1@2.
	aGame putOAt: 0@2.
	aGame putXAt: 2@2.
	aGame putOAt: 0@0.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test25OTokensInFirstColumn stamp: 'D S 11/1/2020 12:09:18'!
test25OTokensInFirstColumn

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@1.
	aGame putXAt: 1@2.
	aGame putOAt: 0@2.
	aGame putXAt: 2@2.
	aGame putOAt: 0@0.

	self assert: aGame isOver.!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 12:09:27'!
test24ThreeXTokensInThirdColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@2.
	aGame putXAt: 2@0.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test26XTokensInThirdColumn stamp: 'D S 11/1/2020 12:09:27'!
test26XTokensInThirdColumn

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@2.
	aGame putXAt: 2@0.

	self assert: aGame isOver.!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 12:09:36'!
test25ThreeOTokensInThirdColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 2@0.
	aGame putXAt: 1@2.
	aGame putOAt: 2@2.
	aGame putXAt: 0@0.
	aGame putOAt: 2@1.

	self assert: aGame isOver.! !

!methodRemoval: TableTest #test27OTokensInThirdColumn stamp: 'D S 11/1/2020 12:09:36'!
test27OTokensInThirdColumn

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 2@0.
	aGame putXAt: 1@2.
	aGame putOAt: 2@2.
	aGame putXAt: 0@0.
	aGame putOAt: 2@1.

	self assert: aGame isOver.!
!TableTest methodsFor: 'PutTokenTests' stamp: 'D S 11/1/2020 12:09:54'!
test26PuttingXTokenReduceRemainingXTokensCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.

	self assert: 2 equals: aGame playerXRemainingTokens .! !

!methodRemoval: TableTest #test28PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 12:09:54'!
test28PuttingXTokenReduceRemainingXTokensCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.

	self assert: 2 equals: aGame playerXRemainingTokens .!
!TableTest methodsFor: 'PutTokenTests' stamp: 'D S 11/1/2020 12:10:00'!
test27PuttingOTokenReduceRemainingOCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@1.

	self assert: 2 equals: aGame playerORemainingTokens .! !

!methodRemoval: TableTest #test29PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 12:10:00'!
test29PuttingOTokenReduceRemainingOCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@1.

	self assert: 2 equals: aGame playerORemainingTokens .!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 12:10:20'!
test28PlayerXMovesTokenCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 0@2 to: 1@2.

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionXTokens.! !

!methodRemoval: TableTest #test32PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 12:10:20'!
test32PlayerXMovesTokenCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 0@2 to: 1@2.

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionXTokens.!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 12:10:26'!
test329PlayerOMovesTokenCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 0@2 to: 1@2.
	

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionOTokens.! !

!methodRemoval: TableTest #test33PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 12:10:26'!
test33PlayerOMovesTokenCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 0@2 to: 1@2.
	

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionOTokens.!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 12:10:30'!
test29PlayerOMovesTokenCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 0@2 to: 1@2.
	

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionOTokens.! !

!methodRemoval: TableTest #test329PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 12:10:30'!
test329PlayerOMovesTokenCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 0@2 to: 1@2.
	

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionOTokens.!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 12:10:58'!
test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX
	|aGame|
	aGame := Game startGame.
	
	^ [aGame putOAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionTurnX)).].

	! !

!methodRemoval: TableTest #test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 12:10:58'!
test40RaiseErrorWhenPuttingOTokenInTurnOfPlayerX
	|aGame|
	aGame := Game startGame.
	
	^ [aGame putOAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionTurnX)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 12:11:03'!
test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	^ [aGame putXAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionTurnO)).].

	! !

!methodRemoval: TableTest #test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 12:11:03'!
test41RaiseErrorWhenPuttingXTokenInTurnOfPlayerO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	^ [aGame putXAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionTurnO)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 12:11:07'!
test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	
	^ [aGame putOAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	! !

!methodRemoval: TableTest #test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 12:11:07'!
test42RaiseErrorWhenPuttingTokenXWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	
	^ [aGame putOAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 12:11:13'!
test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	
	^ [aGame putXAt: 1@1.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	! !

!methodRemoval: TableTest #test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 12:11:13'!
test43RaiseErrorWhenPuttingTokenOWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	
	^ [aGame putXAt: 1@1.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 12:11:18'!
test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	
	^ [aGame putXAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOwnTokenThere)).].

	! !

!methodRemoval: TableTest #test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 12:11:19'!
test44RaiseErrorWhenPuttingTokenXWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	
	^ [aGame putXAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOwnTokenThere)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 12:11:27'!
test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	^ [aGame putOAt: 1@1.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOwnTokenThere)).].

	! !

!methodRemoval: TableTest #test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 12:11:27'!
test45RaiseErrorWhenPuttingTokenOWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	^ [aGame putOAt: 1@1.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOwnTokenThere)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 12:11:32'!
test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 2@1 to: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	! !

!methodRemoval: TableTest #test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 12:11:32'!
test46RaiseErrorWhenMovingTokenXWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 2@1 to: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 12:11:45'!
test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 2@1 to: 1@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOwnTokenThere )).].

	! !

!methodRemoval: TableTest #test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 12:11:45'!
test47RaiseErrorWhenMovingTokenXWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 2@1 to: 1@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOwnTokenThere )).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 12:11:50'!
test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame oMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	! !

!methodRemoval: TableTest #test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 12:11:50'!
test48RaiseErrorWhenMovingTokenOWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame oMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 12:11:55'!
test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame oMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOwnTokenThere )).].

	! !

!methodRemoval: TableTest #test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 12:11:55'!
test49RaiseErrorWhenMovingTokenOWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame oMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOwnTokenThere )).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 12:12:04'!
test40RaiseErrorWhenTryingToPutAFourthXToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	^ [aGame putXAt: 1@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionNoMoreTokens )).].

	! !

!methodRemoval: TableTest #test50RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 12:12:04'!
test50RaiseErrorWhenTryingToPutAFourthXToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	^ [aGame putXAt: 1@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionNoMoreTokens )).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 12:12:09'!
test41RaiseErrorWhenTryingToPutAFourthOToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@0.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame putOAt: 0@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionNoMoreTokens )).].

	! !

!methodRemoval: TableTest #test51RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 12:12:09'!
test51RaiseErrorWhenTryingToPutAFourthOToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@0.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame putOAt: 0@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionNoMoreTokens )).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 12:12:17'!
test42RaiseErrorWhenPlayerXTryAnInvalidMovement
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	
	^ [aGame xMoveTokenFrom: 1@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement)).].

	! !

!methodRemoval: TableTest #test53RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 12:12:17'!
test53RaiseErrorWhenPlayerXTryAnInvalidMovement
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	
	^ [aGame xMoveTokenFrom: 1@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 12:12:22'!
test43RaiseErrorWhenPlayerOTryAnInvalidMovement
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@0.
	aGame xMoveTokenFrom: 0@1 to: 0@	2.
	^ [aGame oMoveTokenFrom: 1@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement)).].

	! !

!methodRemoval: TableTest #test55RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 12:12:22'!
test55RaiseErrorWhenPlayerOTryAnInvalidMovement
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@0.
	aGame xMoveTokenFrom: 0@1 to: 0@	2.
	^ [aGame oMoveTokenFrom: 1@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 12:12:28'!
test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!methodRemoval: TableTest #test56RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:12:28'!
test56RaiseErrorWhenPlayerXPutATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 12:12:33'!
test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame := aGame putXAt: 1@1.
	^ [aGame putOAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

! !

!methodRemoval: TableTest #test62RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:12:33'!
test62RaiseErrorWhenPlayerOPutATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame := aGame putXAt: 1@1.
	^ [aGame putOAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 12:12:41'!
test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	
	^ [aGame xMoveTokenFrom: 2@0 to: 3@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!methodRemoval: TableTest #test66RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:12:41'!
test66RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	
	^ [aGame xMoveTokenFrom: 2@0 to: 3@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 12:12:46'!
test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.
	
	^ [aGame oMoveTokenFrom: 2@2 to: 3@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

	! !

!methodRemoval: TableTest #test70RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:12:46'!
test70RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.
	
	^ [aGame oMoveTokenFrom: 2@2 to: 3@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 12:12:51'!
test48RaiseErrorWhenPlayerOPutATokenWhenMatchEnded
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@2.	
	^ [aGame putOAt: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerNull errorDescriptionGameOver)).].

	! !

!methodRemoval: TableTest #test74RaiseErrorWhenPlayerOPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 12:12:51'!
test74RaiseErrorWhenPlayerOPutATokenWhenMatchEnded
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@2.	
	^ [aGame putOAt: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerNull errorDescriptionGameOver)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 12:12:56'!
test49RaiseErrorWhenPlayerXMoveATokenWhenMatchEnded
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.	
	aGame putOAt: 1@0.
	^ [aGame xMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerNull errorDescriptionGameOver)).].

	! !

!methodRemoval: TableTest #test75RaiseErrorWhenPlayerXMoveATokenWhenMatchEnded stamp: 'D S 11/1/2020 12:12:56'!
test75RaiseErrorWhenPlayerXMoveATokenWhenMatchEnded
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.	
	aGame putOAt: 1@0.
	^ [aGame xMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerNull errorDescriptionGameOver)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 12:13:34'!
test50RaiseErrorWhenPlayerXPutATokenWhenMatchEnded
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.	
	aGame putOAt: 0@2.
	^ [aGame putXAt: 1@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerNull errorDescriptionGameOver)).].

	! !

!methodRemoval: TableTest #test77RaiseErrorWhenPlayerXPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 12:13:34'!
test77RaiseErrorWhenPlayerXPutATokenWhenMatchEnded
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.	
	aGame putOAt: 0@2.
	^ [aGame putXAt: 1@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerNull errorDescriptionGameOver)).].

	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 12:13:42'!
test51RaiseErrorWhenPlayerXTryMoveAOpponentToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame oMoveTokenFrom: 2@0 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionCantMoveOpponentTokens )).].	! !

!methodRemoval: TableTest #test82RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 12:13:42'!
test82RaiseErrorWhenPlayerXTryMoveAOpponentToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame oMoveTokenFrom: 2@0 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionCantMoveOpponentTokens )).].	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 12:13:47'!
test52RaiseErrorWhenPlayerOTryMoveOpponentToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame xMoveTokenFrom: 2@1 to: 2@0.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerO errorDescriptionCantMoveOpponentTokens )).].	! !

!methodRemoval: TableTest #test83RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 12:13:47'!
test83RaiseErrorWhenPlayerOTryMoveOpponentToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame xMoveTokenFrom: 2@1 to: 2@0.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerO errorDescriptionCantMoveOpponentTokens )).].	!
!PlayerO methodsFor: 'accessing' stamp: 'D S 11/1/2020 12:20:44'!
tokensPlaced

	^remainingTokens size! !
!PlayerX methodsFor: 'accessing' stamp: 'D S 11/1/2020 12:20:55'!
tokensPlaced

	^remainingTokens size! !
!Game methodsFor: 'accessing' stamp: 'D S 11/1/2020 12:21:22' prior: 50925503!
hasPlayerXWon
	
	^(PlayerX tokensPlaced ) = 3 and: (self playerXHasThreeInAColumn | self playerXHasThreeInADiagonal | self playerXHasThreeInARow).! !
!Game methodsFor: 'accessing' stamp: 'D S 11/1/2020 12:21:32' prior: 50925511!
hasPlayerOWon
	
	^(PlayerO tokensPlaced ) = 3 and: (self playerOHasThreeInAColumn | self playerOHasThreeInADiagonal | self playerOHasThreeInARow).! !
!Game methodsFor: 'accessing' stamp: 'D S 11/1/2020 12:30:46' prior: 50910462!
isPlayingO
	
	^(playerMoving === playerO).! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 12:30:51'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 12:30:51'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test10NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 12:30:51'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:30:51'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXMoveATokenWhenMatchEnded stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test50RaiseErrorWhenPlayerXPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test78 stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test79 stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test80 stamp: 'D S 11/1/2020 12:30:51'!
ERROR!

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 12:30:51'!
ERROR!
!Game methodsFor: 'accessing' stamp: 'D S 11/1/2020 12:31:06' prior: 50931185!
isPlayingO
	
	^(playerMoving == playerO).! !
!Game methodsFor: 'accessing' stamp: 'D S 11/1/2020 12:31:30' prior: 50931370!
isPlayingO
	"Se usa == porque se espera que sean el mismo objeto, no que representen lo mismo"
	^(playerMoving == playerO).! !
!Game methodsFor: 'accessing' stamp: 'D S 11/1/2020 12:31:34' prior: 50910466!
isPlayingX
	"Se usa == porque se espera que sean el mismo objeto, no que representen lo mismo"
	^playerMoving == playerX.! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:32:13' prior: 50927754!
oMoveTokenFrom: aPoint to: aPoint2 
	
	((playerX positionToken) includes: aPoint2) ifTrue: [self error: self class errorDescriptionOponentTokenInPosition ].
	playerMoving oMoveTokenFrom: aPoint to: aPoint2. 
	self hasPlayerOWon ifTrue:[PopUpMenu inform: self class menuDescriptionPlayerOWon.
						playerMoving := PlayerNull new initialize]
						ifFalse:[playerMoving := playerX.]
! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:33:31'!
playerOHasATokenIn: aPoint2

	^ (playerO positionToken) includes: aPoint2! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:33:31' prior: 50927725!
xMoveTokenFrom: aPoint to: aPoint2 
	
	(self playerOHasATokenIn: aPoint2) ifTrue: [self error: self class errorDescriptionOponentTokenInPosition ].
	playerMoving xMoveTokenFrom: aPoint to: aPoint2.
	self hasPlayerXWon ifTrue:[PopUpMenu inform: self class menuDescriptionPlayerXWon.
						  playerMoving := PlayerNull new initialize]
					ifFalse: [	playerMoving := playerO.]! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:34:39'!
playerXHasATokenIn: aPoint2

	^ (playerX positionToken) includes: aPoint2! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:34:39' prior: 50931388!
oMoveTokenFrom: aPoint to: aPoint2 
	
	(self playerXHasATokenIn: aPoint2) ifTrue: [self error: self class errorDescriptionOponentTokenInPosition ].
	playerMoving oMoveTokenFrom: aPoint to: aPoint2. 
	self hasPlayerOWon ifTrue:[PopUpMenu inform: self class menuDescriptionPlayerOWon.
						playerMoving := PlayerNull new initialize]
						ifFalse:[playerMoving := playerX.]
! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:35:07' prior: 50927740!
putXAt: aPoint 
	
	(self playerOHasATokenIn: aPoint) ifTrue:[self error: self class errorDescriptionOponentTokenInPosition].
	playerMoving putXAt: aPoint.
	self hasPlayerXWon ifTrue:[PopUpMenu inform: self class menuDescriptionPlayerXWon.
						  playerMoving := PlayerNull new initialize]
	ifFalse: [	playerMoving := playerO.]
! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:35:20' prior: 50927459!
putOAt: aPoint 
	
	(self playerXHasATokenIn: aPoint) ifTrue:[self error: self class errorDescriptionOponentTokenInPosition].
	playerMoving putOAt: aPoint.
	self hasPlayerOWon ifTrue:[PopUpMenu inform: self class menuDescriptionPlayerOWon.
						playerMoving := PlayerNull new initialize]
					ifFalse:[playerMoving := playerX.]
! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:35:54'!
checkIfPlayerOWon

	^ self hasPlayerOWon ifTrue:[PopUpMenu inform: self class menuDescriptionPlayerOWon.
						playerMoving := PlayerNull new initialize]
					ifFalse:[playerMoving := playerX.]! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:35:54' prior: 50931454!
putOAt: aPoint 
	
	(self playerXHasATokenIn: aPoint) ifTrue:[self error: self class errorDescriptionOponentTokenInPosition].
	playerMoving putOAt: aPoint.
	self checkIfPlayerOWon
! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:36:10'!
checkIfPlayerXWon

	^ self hasPlayerXWon ifTrue:[PopUpMenu inform: self class menuDescriptionPlayerXWon.
						  playerMoving := PlayerNull new initialize]
	ifFalse: [	playerMoving := playerO.]! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:36:10' prior: 50931441!
putXAt: aPoint 
	
	(self playerOHasATokenIn: aPoint) ifTrue:[self error: self class errorDescriptionOponentTokenInPosition].
	playerMoving putXAt: aPoint.
	self checkIfPlayerXWon
! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:37:14' prior: 50931426!
oMoveTokenFrom: aPoint to: aPoint2 
	
	(self playerXHasATokenIn: aPoint2) ifTrue: [self error: self class errorDescriptionOponentTokenInPosition ].
	playerMoving oMoveTokenFrom: aPoint to: aPoint2. 
	self checkIfPlayerOWon.! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:37:21' prior: 50931407!
xMoveTokenFrom: aPoint to: aPoint2 
	
	(self playerOHasATokenIn: aPoint2) ifTrue: [self error: self class errorDescriptionOponentTokenInPosition ].
	playerMoving xMoveTokenFrom: aPoint to: aPoint2.
	self checkIfPlayerXWon ! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 12:37:27'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 12:37:27'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 12:37:27'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test10NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 12:37:27'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:37:27'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXMoveATokenWhenMatchEnded stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test50RaiseErrorWhenPlayerXPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 12:37:27'!
ERROR!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 12:37:28'!
ERROR!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 12:37:28'!
ERROR!

!testRun: #TableTest #test78 stamp: 'D S 11/1/2020 12:37:28'!
ERROR!

!testRun: #TableTest #test79 stamp: 'D S 11/1/2020 12:37:28'!
ERROR!

!testRun: #TableTest #test80 stamp: 'D S 11/1/2020 12:37:28'!
ERROR!

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 12:37:28'!
ERROR!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 12:37:44'!
ERROR!
!Game methodsFor: 'accessing --Private--' stamp: 'D S 11/1/2020 12:38:37' prior: 50931169!
hasPlayerXWon
	
	^(playerX tokensPlaced ) = 3 and: (self playerXHasThreeInAColumn | self playerXHasThreeInADiagonal | self playerXHasThreeInARow).! !
!Game methodsFor: 'accessing --Private--' stamp: 'D S 11/1/2020 12:38:42' prior: 50931177!
hasPlayerOWon
	
	^(playerO tokensPlaced ) = 3 and: (self playerOHasThreeInAColumn | self playerOHasThreeInADiagonal | self playerOHasThreeInARow).! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 12:38:45'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 12:38:45'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 12:38:45'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test10NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 12:38:45'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:38:45'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXMoveATokenWhenMatchEnded stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test50RaiseErrorWhenPlayerXPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test78 stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test79 stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test80 stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 12:38:45'!
ERROR!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 12:39:09'!
ERROR!
!PlayerX methodsFor: 'accessing' stamp: 'D S 11/1/2020 12:39:59' prior: 50931165!
tokensPlaced

	^ remainingTokens size! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 12:40:03'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 12:40:03'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 12:40:03'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test10NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 12:40:03'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:40:03'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXMoveATokenWhenMatchEnded stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test50RaiseErrorWhenPlayerXPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test78 stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test79 stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test80 stamp: 'D S 11/1/2020 12:40:03'!
ERROR!

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 12:40:03'!
ERROR!
!PlayerX methodsFor: 'accessing' stamp: 'D S 11/1/2020 12:40:30' prior: 50931905!
tokensPlaced

	^ positionTokens size! !
!PlayerO methodsFor: 'accessing' stamp: 'D S 11/1/2020 12:40:37' prior: 50931161!
tokensPlaced

	^positionTokens size! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test10NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXMoveATokenWhenMatchEnded stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerXPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test78 stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test79 stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test80 stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 12:40:40'!
PASSED!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test10NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXMoveATokenWhenMatchEnded stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerXPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test78 stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test79 stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test80 stamp: 'D S 11/1/2020 12:42:34'!
PASSED!

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 12:42:34'!
PASSED!
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:44:07'!
checkPlayerXHasATokenIn: aPoint2

	^ (self playerXHasATokenIn: aPoint2) ifTrue: [self error: self class errorDescriptionOponentTokenInPosition ]! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:44:07' prior: 50931502!
oMoveTokenFrom: aPoint to: aPoint2 
	
	self checkPlayerXHasATokenIn: aPoint2.
	playerMoving oMoveTokenFrom: aPoint to: aPoint2. 
	self checkIfPlayerOWon.! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:44:21' prior: 50931476!
putOAt: aPoint 
	
	self checkPlayerXHasATokenIn: aPoint.
	playerMoving putOAt: aPoint.
	self checkIfPlayerOWon
! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:44:39'!
checkPlayerOHasATokenIn: aPoint

	^ (self playerOHasATokenIn: aPoint) ifTrue:[self error: self class errorDescriptionOponentTokenInPosition]! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:44:39' prior: 50931493!
putXAt: aPoint 
	
	self checkPlayerOHasATokenIn: aPoint.
	playerMoving putXAt: aPoint.
	self checkIfPlayerXWon
! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:44:49' prior: 50931512!
xMoveTokenFrom: aPoint to: aPoint2 
	
	self checkPlayerOHasATokenIn: aPoint2.
	playerMoving xMoveTokenFrom: aPoint to: aPoint2.
	self checkIfPlayerXWon ! !
!Game methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 12:45:18' prior: 50931484!
checkIfPlayerXWon

	^ self hasPlayerXWon ifTrue:[PopUpMenu inform: self class menuDescriptionPlayerXWon.
						  playerMoving := PlayerNull new initialize]
					ifFalse: [	playerMoving := playerO.]! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:46:26' prior: 50932470!
oMoveTokenFrom: aPositionOfAOToken to: aDestinationPoint 
	
	self checkPlayerXHasATokenIn: aDestinationPoint.
	playerMoving oMoveTokenFrom: aPositionOfAOToken to: aDestinationPoint. 
	self checkIfPlayerOWon.! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:46:56' prior: 50932478!
putOAt: aPositionForAOToken
	
	self checkPlayerXHasATokenIn: aPositionForAOToken.
	playerMoving putOAt: aPositionForAOToken.
	self checkIfPlayerOWon
! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:47:12' prior: 50932523!
putOAt: aPosition
	
	self checkPlayerXHasATokenIn: aPosition.
	playerMoving putOAt: aPosition.
	self checkIfPlayerOWon
! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:47:43' prior: 50932491!
putXAt: aPosition
	
	self checkPlayerOHasATokenIn: aPosition.
	playerMoving putXAt: aPosition.
	self checkIfPlayerXWon
! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:48:01' prior: 50932514!
oMoveTokenFrom: aPointOfAOToken to: aDestinationPoint 
	
	self checkPlayerXHasATokenIn: aDestinationPoint.
	playerMoving oMoveTokenFrom: aPointOfAOToken to: aDestinationPoint. 
	self checkIfPlayerOWon.! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:48:15' prior: 50932531!
putOAt: aPoint
	
	self checkPlayerXHasATokenIn: aPoint.
	playerMoving putOAt: aPoint.
	self checkIfPlayerOWon
! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:48:29' prior: 50932538!
putXAt: aPoint
	
	self checkPlayerOHasATokenIn: aPoint.
	playerMoving putXAt: aPoint.
	self checkIfPlayerXWon
! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:48:54' prior: 50932497!
xMoveTokenFrom: aPointOfAOToken to: aDestinationPoint 
	
	self checkPlayerOHasATokenIn: aDestinationPoint.
	playerMoving xMoveTokenFrom: aPointOfAOToken to: aDestinationPoint.
	self checkIfPlayerXWon ! !
!PlayerO methodsFor: 'actions' stamp: 'D S 11/1/2020 12:54:45'!
checkDestinationIsNotOutOfBoard: aPoint2

	^ ((aPoint2 x) > 2 or: (aPoint2 y) > 2 or: (aPoint2 x) < 0 or: (aPoint2 y) < 0) ifTrue:[self error: self class errorDescriptionOutOfRange ]! !
!PlayerO methodsFor: 'actions' stamp: 'D S 11/1/2020 12:54:45' prior: 50921473 overrides: 50932545!
oMoveTokenFrom: aPoint to: aPoint2 
	
	(positionTokens includes: aPoint2) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	(self diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2) ifTrue: [self error: self class errorDescriptionInvalidMovement].
	self checkDestinationIsNotOutOfBoard: aPoint2.
	positionTokens remove: aPoint.
	positionTokens add: aPoint2.! !
!PlayerO methodsFor: 'actions' stamp: 'D S 11/1/2020 12:55:44' prior: 50919695 overrides: 50932554!
putOAt: aPoint 

	(remainingTokens = 0) ifTrue: [self error: self class errorDescriptionNoMoreTokens ].	
	(positionTokens includes: aPoint) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	self checkDestinationIsNotOutOfBoard: aPoint.
	positionTokens add: aPoint.
	remainingTokens := remainingTokens - 1.
	! !
!PlayerO methodsFor: 'actions' stamp: 'D S 11/1/2020 12:56:14'!
checkHaveTokenToPut

	^ (remainingTokens = 0) ifTrue: [self error: self class errorDescriptionNoMoreTokens ]! !
!PlayerO methodsFor: 'actions' stamp: 'D S 11/1/2020 12:56:14' prior: 50932599 overrides: 50932554!
putOAt: aPoint 

	self checkHaveTokenToPut.	
	(positionTokens includes: aPoint) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	self checkDestinationIsNotOutOfBoard: aPoint.
	positionTokens add: aPoint.
	remainingTokens := remainingTokens - 1.
	! !
!PlayerO methodsFor: 'actions' stamp: 'D S 11/1/2020 12:56:59'!
checkNotAlreadyATokenThere: aPoint

	^ (positionTokens includes: aPoint) ifTrue:[self error: self class errorDescriptionOwnTokenThere ]! !
!PlayerO methodsFor: 'actions' stamp: 'D S 11/1/2020 12:56:59' prior: 50932619 overrides: 50932554!
putOAt: aPoint 

	self checkHaveTokenToPut.	
	self checkNotAlreadyATokenThere: aPoint.
	self checkDestinationIsNotOutOfBoard: aPoint.
	positionTokens add: aPoint.
	remainingTokens := remainingTokens - 1.
	! !
!PlayerO methodsFor: 'actions' stamp: 'D S 11/1/2020 12:57:51'!
checkIfValidMovingFrom: aPoint2 to: aPoint

	^ (self diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2) ifTrue: [self error: self class errorDescriptionInvalidMovement]! !
!PlayerO methodsFor: 'actions' stamp: 'D S 11/1/2020 12:57:51' prior: 50932584 overrides: 50932545!
oMoveTokenFrom: aPoint to: aPoint2 
	
	(positionTokens includes: aPoint2) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	self checkIfValidMovingFrom: aPoint2 to: aPoint.
	self checkDestinationIsNotOutOfBoard: aPoint2.
	positionTokens remove: aPoint.
	positionTokens add: aPoint2.! !
!PlayerO methodsFor: 'actions' stamp: 'D S 11/1/2020 12:57:57' prior: 50932656 overrides: 50932545!
oMoveTokenFrom: aPoint to: aPoint2 
	
	(positionTokens includes: aPoint2) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	self checkIfValidMovingFrom: aPoint to: aPoint2.
	self checkDestinationIsNotOutOfBoard: aPoint2.
	positionTokens remove: aPoint.
	positionTokens add: aPoint2.! !
!PlayerO methodsFor: 'actions' stamp: 'D S 11/1/2020 12:58:06' prior: 50932647!
checkIfValidMovingFrom: aPoint to: aPoint2

	^ (self diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2) ifTrue: [self error: self class errorDescriptionInvalidMovement]! !
!PlayerO methodsFor: 'actions' stamp: 'D S 11/1/2020 12:59:11' prior: 50932669 overrides: 50932545!
oMoveTokenFrom: aPoint to: aPoint2 
	
	self checkNotAlreadyATokenThere: aPoint.
	self checkIfValidMovingFrom: aPoint to: aPoint2.
	self checkDestinationIsNotOutOfBoard: aPoint2.
	positionTokens remove: aPoint.
	positionTokens add: aPoint2.! !
!Game methodsFor: 'actions' stamp: 'D S 11/1/2020 12:59:31' prior: 50932566!
xMoveTokenFrom: aPointOfAXToken to: aDestinationPoint 
	
	self checkPlayerOHasATokenIn: aDestinationPoint.
	playerMoving xMoveTokenFrom: aPointOfAXToken to: aDestinationPoint.
	self checkIfPlayerXWon ! !
!PlayerX methodsFor: 'actions' stamp: 'D S 11/1/2020 12:59:53' prior: 50928597 overrides: 50932545!
oMoveTokenFrom: aPointOfAOToken to: aDestinationPoint 
	
	self error: self class errorDescriptionCantMoveOpponentTokens! !
!PlayerX methodsFor: 'actions' stamp: 'D S 11/1/2020 13:00:50' prior: 50921116 overrides: 50932700!
xMoveTokenFrom: aPointOfAXToken to: aDestinationPoint
	
	(positionTokens includes: aDestinationPoint) ifTrue:[self error: self class errorDescriptionOwnTokenThere ].
	(self diferenciaAlCentroEsIgualDe: aPointOfAXToken Y: aDestinationPoint) ifTrue: [self error: self class errorDescriptionInvalidMovement].
	((aDestinationPoint x) > 2 or: (aDestinationPoint y) > 2 or: (aDestinationPoint x) < 0 or: (aDestinationPoint y) < 0) ifTrue:[self error: self class errorDescriptionOutOfRange ].
	positionTokens remove: aPointOfAXToken.
	positionTokens add: aDestinationPoint.! !
!PlayerO methodsFor: 'actions' stamp: 'D S 11/1/2020 13:01:25' prior: 50932690 overrides: 50932545!
oMoveTokenFrom: aPointOfAOToken to: aDestinationPoint
	
	self checkNotAlreadyATokenThere: aPointOfAOToken.
	self checkIfValidMovingFrom: aPointOfAOToken to: aDestinationPoint.
	self checkDestinationIsNotOutOfBoard: aDestinationPoint.
	positionTokens remove: aPointOfAOToken.
	positionTokens add: aDestinationPoint.! !
!PlayerO methodsFor: 'actions' stamp: 'D S 11/1/2020 13:01:35' prior: 50928913 overrides: 50932700!
xMoveTokenFrom: aPointOfAOToken to: aDestinationPoint
	
	self error: self class errorDescriptionCantMoveOpponentTokens ! !
!PlayerO methodsFor: 'actions' stamp: 'D S 11/1/2020 13:03:51' prior: 50932575!
checkDestinationIsNotOutOfBoard: aPoint2
	"El tablero es 3x3"
	^ ((aPoint2 x) > 2 or: (aPoint2 y) > 2 or: (aPoint2 x) < 0 or: (aPoint2 y) < 0) ifTrue:[self error: self class errorDescriptionOutOfRange ]! !
!PlayerO methodsFor: 'actions' stamp: 'D S 11/1/2020 13:05:39' prior: 50932759!
checkDestinationIsNotOutOfBoard: aPoint
	"El tablero es 3x3"
	^ ((aPoint x) > 2 or: (aPoint y) > 2 or: (aPoint x) < 0 or: (aPoint y) < 0) ifTrue:[self error: self class errorDescriptionOutOfRange ]! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test10NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 13:05:43'!
ERROR!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 13:05:43'!
FAILURE!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 13:05:43'!
FAILURE!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXMoveATokenWhenMatchEnded stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerXPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test78 stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test79 stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test80 stamp: 'D S 11/1/2020 13:05:43'!
PASSED!

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 13:05:43'!
ERROR!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 13:06:07'!
ERROR!
!PlayerO methodsFor: 'actions' stamp: 'D S 11/1/2020 13:06:35' prior: 50932738 overrides: 50932545!
oMoveTokenFrom: aPointOfAOToken to: aDestinationPoint
	
	self checkNotAlreadyATokenThere: aDestinationPoint.
	self checkIfValidMovingFrom: aPointOfAOToken to: aDestinationPoint.
	self checkDestinationIsNotOutOfBoard: aDestinationPoint.
	positionTokens remove: aPointOfAOToken.
	positionTokens add: aDestinationPoint.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 13:06:39'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 13:06:39'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 13:06:39'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 13:06:39'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 13:06:39'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 13:06:39'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 13:06:39'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 13:06:39'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 13:06:39'!
PASSED!

!testRun: #TableTest #test10NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 13:06:39'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 13:06:39'!
PASSED!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 13:06:39'!
PASSED!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 13:06:39'!
PASSED!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 13:06:39'!
PASSED!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 13:06:39'!
PASSED!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 13:06:39'!
PASSED!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 13:06:39'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 13:06:39'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 13:06:39'!
PASSED!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 13:06:39'!
PASSED!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 13:06:39'!
PASSED!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 13:06:39'!
PASSED!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 13:06:39'!
PASSED!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 13:06:39'!
PASSED!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXMoveATokenWhenMatchEnded stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerXPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test78 stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test79 stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test80 stamp: 'D S 11/1/2020 13:06:40'!
PASSED!

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 13:06:40'!
PASSED!
!PlayerX methodsFor: 'actions' stamp: 'D S 11/1/2020 13:13:48' prior: 50932717 overrides: 50932700!
xMoveTokenFrom: aPointOfAXToken to: aDestinationPoint
	
	self checkNotAlreadyATokenThere: aDestinationPoint.
	self checkIfValidMovingFrom: aPointOfAXToken to: aDestinationPoint.
	self checkDestinationIsNotOutOfBoard: aDestinationPoint.
	positionTokens remove: aPointOfAXToken.
	positionTokens add: aDestinationPoint.! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 13:13:59'!
checkDestinationIsNotOutOfBoard: aPoint
	"El tablero es 3x3"
	^ ((aPoint x) > 2 or: (aPoint y) > 2 or: (aPoint x) < 0 or: (aPoint y) < 0) ifTrue:[self error: self class errorDescriptionOutOfRange ]! !
!PlayerX methodsFor: 'nil' stamp: 'D S 11/1/2020 13:14:17'!
checkHaveTokenToPut

	^ (remainingTokens = 0) ifTrue: [self error: self class errorDescriptionNoMoreTokens ]! !
!PlayerX methodsFor: 'nil' stamp: 'D S 11/1/2020 13:14:25'!
checkIfValidMovingFrom: aPoint to: aPoint2

	^ (self diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2) ifTrue: [self error: self class errorDescriptionInvalidMovement]! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 13:14:42'!
checkNotAlreadyATokenThere: aPoint

	^ (positionTokens includes: aPoint) ifTrue:[self error: self class errorDescriptionOwnTokenThere ]! !
!PlayerX methodsFor: 'actions' stamp: 'D S 11/1/2020 13:15:09' prior: 50919356 overrides: 50932560!
putXAt: aPoint
	
	self checkHaveTokenToPut.	
	self checkNotAlreadyATokenThere: aPoint.
	self checkDestinationIsNotOutOfBoard: aPoint.
	positionTokens add: aPoint.
	remainingTokens := remainingTokens - 1.
	
! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test10NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXMoveATokenWhenMatchEnded stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerXPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test78 stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test79 stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test80 stamp: 'D S 11/1/2020 13:15:12'!
PASSED!

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 13:15:12'!
PASSED!
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 13:17:27' prior: 50933195!
checkNotAlreadyATokenThere: aPoint
	"Todo movimiento validos aumenta o reduce la distancia al centro en 1 o 2. Si se mantiene igual es invalido ya que serian movimientos de la posicion 1@2 a 0@1, 0@1 a 1@0, 1@0 a 2@1 o 2@1 a 1@2 "
	
	^ (positionTokens includes: aPoint) ifTrue:[self error: self class errorDescriptionOwnTokenThere ]! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 13:17:34' prior: 50933395!
checkNotAlreadyATokenThere: aPoint
	
	^ (positionTokens includes: aPoint) ifTrue:[self error: self class errorDescriptionOwnTokenThere ]! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 13:17:43' prior: 50933187!
checkIfValidMovingFrom: aPoint to: aPoint2
	"Todo movimiento validos aumenta o reduce la distancia al centro en 1 o 2. Si se mantiene igual es invalido ya que serian movimientos de la posicion 1@2 a 0@1, 0@1 a 1@0, 1@0 a 2@1 o 2@1 a 1@2 "
	^ (self diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2) ifTrue: [self error: self class errorDescriptionInvalidMovement]! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 13:17:48' prior: 50932681!
checkIfValidMovingFrom: aPoint to: aPoint2
	"Todo movimiento validos aumenta o reduce la distancia al centro en 1 o 2. Si se mantiene igual es invalido ya que serian movimientos de la posicion 1@2 a 0@1, 0@1 a 1@0, 1@0 a 2@1 o 2@1 a 1@2 "

	^ (self diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2) ifTrue: [self error: self class errorDescriptionInvalidMovement]! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test10NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXMoveATokenWhenMatchEnded stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerXPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test78 stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test79 stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test80 stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 13:26:48'!
PASSED!

!testRun: #TableTest #test78 stamp: 'D S 11/1/2020 14:26:23'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 14:26:40' prior: 50926539!
test78
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	^[aGame putXAt: 0@2] 
		on: PopUpMenu 
		do: [:menu| self assert: (menu messageText = '(PlayerNull menuDescriptionPlayerXWon )').].! !

!testRun: #TableTest #test78 stamp: 'D S 11/1/2020 14:26:43'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 14:27:20' prior: 50933631!
test78
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	^[aGame putXAt: 0@2] 
		on: PopUpMenu 
		do: [:menu| self assert: (menu description = (PlayerNull menuDescriptionPlayerXWon )).].! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 14:27:26' prior: 50933644!
test78
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	^[aGame putXAt: 0@2] 
		on: PopUpMenu 
		do: [:menu| self assert: (menu description = '(PlayerNull menuDescriptionPlayerXWon )').].! !

!testRun: #TableTest #test78 stamp: 'D S 11/1/2020 14:27:30'!
PASSED!

b _ PopUpMenu confirm: 'Are you hungry?'.
!

b _ PopUpMenu confirm: 'Reboot universe' orCancel: ['Nevermind'].
!

PopUpMenu inform: 'I like Cuis'.
!

x _ (PopUpMenu labelArray: arr) startUpWithCaption: 'Please pick one.'.
!

x _ (PopUpMenu labelArray: arr) startUpWithCaption: 'Please pick one.'!

| x y b arr lin |
!

x _ (PopUpMenu labelArray: arr) startUpWithCaption: 'Please pick one.'.
!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 14:34:06' prior: 50926270!
test81
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame oMoveTokenFrom: 2@2 to: 1@2.]
		on: PopUpMenu 
		do: [:menu| self assert: (menu labelString = (Game menuDescriptionPlayerOWon )).].	! !

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 14:34:09'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 14:34:18' prior: 50933681!
test81
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame oMoveTokenFrom: 2@2 to: 1@2.]
		on: PopUpMenu 
		do: [:menu| self assert: (menu labelString = '(Game menuDescriptionPlayerOWon )').].	! !

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 14:34:21'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 14:34:26' prior: 50933697!
test81
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame oMoveTokenFrom: 2@2 to: 1@2.]
		on: PopUpMenu 
		do: [:menu| self assert: (menu labelString = (Game menuDescriptionPlayerOWon )).].	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 14:35:01' prior: 50933713!
test81
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame oMoveTokenFrom: 2@2 to: 1@2.]
		on: PopUpMenu 
		do: [:menu| self assert: (menu messageText = '(Game menuDescriptionPlayerOWon )').].	! !

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 14:35:04'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 14:37:23' prior: 50933727!
test81
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame oMoveTokenFrom: 2@2 to: 1@2.
		self fail]
		on: PopUpMenu 
		do: [:menu| self assert: (menu messageText = '(Game menuDescriptionPlayerOWon )').].	! !

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 14:37:28'!
FAILURE!

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 14:37:28'!
FAILURE!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 14:37:41' prior: 50933743!
test81
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame oMoveTokenFrom: 2@2 to: 1@2.
		self popUpMenu ]
		on: PopUpMenu 
		do: [:menu| self assert: (menu messageText = '(Game menuDescriptionPlayerOWon )').].	! !

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 14:37:45'!
ERROR!

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 14:37:45'!
ERROR!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 14:38:37' prior: 50933762!
test81
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame oMoveTokenFrom: 2@2 to: 1@2.]
		on: PopUpMenu 
		do: [:menu| self assert: menu messageText description: '(Game menuDescriptionPlayerOWon )'.].	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 14:38:38' prior: 50933781!
test81
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame oMoveTokenFrom: 2@2 to: 1@2.]
		on: PopUpMenu 
		do: [:menu| self assert: menu messageText description: '(Game menuDescriptionPlayerOWon )'].	! !

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 14:38:41'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 14:38:49' prior: 50933795!
test81
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame oMoveTokenFrom: 2@2 to: 1@2.]
		on: PopUpMenu 
		do: [:menu| self assert: menu description: '(Game menuDescriptionPlayerOWon )'].	! !

!testRun: #TableTest #test81 stamp: 'D S 11/1/2020 14:38:53'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 14:43:56'!
test53RaisePopUpMenuWhenXWonAfterPuttingAnX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	^[aGame putXAt: 0@2] 
		on: PopUpMenu 
		do: [:menu| self assert: (menu description = '(PlayerNull menuDescriptionPlayerXWon )').].! !

!methodRemoval: TableTest #test78 stamp: 'D S 11/1/2020 14:43:56'!
test78
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	^[aGame putXAt: 0@2] 
		on: PopUpMenu 
		do: [:menu| self assert: (menu description = '(PlayerNull menuDescriptionPlayerXWon )').].!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 14:44:16'!
test54RaisePopUpMenuWhenPlayerOWinAfterPuttingAnO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@1.
	^[aGame putOAt: 2@2] 		
		on: PopUpMenu
		do: [:menu| self assert: (menu messageText = (Game menuDescriptionPlayerOWon )).].! !

!methodRemoval: TableTest #test79 stamp: 'D S 11/1/2020 14:44:16'!
test79
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@1.
	^[aGame putOAt: 2@2] 		
		on: PopUpMenu
		do: [:menu| self assert: (menu messageText = (Game menuDescriptionPlayerOWon )).].!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 14:44:25'!
test53RaisePopUpMenuWhenPlayerXWonAfterPuttingAnX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	^[aGame putXAt: 0@2] 
		on: PopUpMenu 
		do: [:menu| self assert: (menu description = '(PlayerNull menuDescriptionPlayerXWon )').].! !

!methodRemoval: TableTest #test53RaisePopUpMenuWhenXWonAfterPuttingAnX stamp: 'D S 11/1/2020 14:44:25'!
test53RaisePopUpMenuWhenXWonAfterPuttingAnX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	^[aGame putXAt: 0@2] 
		on: PopUpMenu 
		do: [:menu| self assert: (menu description = '(PlayerNull menuDescriptionPlayerXWon )').].!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 14:44:44'!
test55RaisePopUpMenuWhenPlayerXWinAfterMovingAToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.	
	aGame putOAt: 2@0.
	^[aGame xMoveTokenFrom: 2@2 to: 1@2.
		]
		on: PopUpMenu 
		do: [:menu| self assert: (menu messageText = (Game menuDescriptionPlayerXWon )).].! !

!methodRemoval: TableTest #test80 stamp: 'D S 11/1/2020 14:44:44'!
test80
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.	
	aGame putOAt: 2@0.
	^[aGame xMoveTokenFrom: 2@2 to: 1@2.
		]
		on: PopUpMenu 
		do: [:menu| self assert: (menu messageText = (Game menuDescriptionPlayerXWon )).].!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 14:44:55'!
test53RaisePopUpMenuWhenPlayerXWinAfterPuttingAnX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	^[aGame putXAt: 0@2] 
		on: PopUpMenu 
		do: [:menu| self assert: (menu description = '(PlayerNull menuDescriptionPlayerXWon )').].! !

!methodRemoval: TableTest #test53RaisePopUpMenuWhenPlayerXWonAfterPuttingAnX stamp: 'D S 11/1/2020 14:44:55'!
test53RaisePopUpMenuWhenPlayerXWonAfterPuttingAnX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	^[aGame putXAt: 0@2] 
		on: PopUpMenu 
		do: [:menu| self assert: (menu description = '(PlayerNull menuDescriptionPlayerXWon )').].!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 14:45:13'!
test56RaisePopUpMenuWhenPlayerOWinAfterMovingAToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame oMoveTokenFrom: 2@2 to: 1@2.]
		on: PopUpMenu 
		do: [:menu| self assert: menu description: '(Game menuDescriptionPlayerOWon )'].	! !

!methodRemoval: TableTest #test81 stamp: 'D S 11/1/2020 14:45:14'!
test81
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame oMoveTokenFrom: 2@2 to: 1@2.]
		on: PopUpMenu 
		do: [:menu| self assert: menu description: '(Game menuDescriptionPlayerOWon )'].	!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test10NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXMoveATokenWhenMatchEnded stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerXPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test53RaisePopUpMenuWhenPlayerXWinAfterPuttingAnX stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test54RaisePopUpMenuWhenPlayerOWinAfterPuttingAnO stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test55RaisePopUpMenuWhenPlayerXWinAfterMovingAToken stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test56RaisePopUpMenuWhenPlayerOWinAfterMovingAToken stamp: 'D S 11/1/2020 14:45:59'!
PASSED!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test10NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXMoveATokenWhenMatchEnded stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerXPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test53RaisePopUpMenuWhenPlayerXWinAfterPuttingAnX stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test54RaisePopUpMenuWhenPlayerOWinAfterPuttingAnO stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test55RaisePopUpMenuWhenPlayerXWinAfterMovingAToken stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

!testRun: #TableTest #test56RaisePopUpMenuWhenPlayerOWinAfterMovingAToken stamp: 'D S 11/1/2020 15:39:20'!
PASSED!

----SNAPSHOT----(1 November 2020 15:39:29) CuisUniversity-4383.image priorSource: 19101410!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 15:50:06'!
test57
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame xMoveTokenFrom: 2@2 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionCantMoveOpponentTokens )).].	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 15:51:04' prior: 50934351!
test57
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame xMoveTokenFrom: 2@2 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionNoTokenThere )).].	! !
!PlayerX methodsFor: 'actions' stamp: 'D S 11/1/2020 15:51:44' prior: 50933159 overrides: 50932700!
xMoveTokenFrom: aPointOfAXToken to: aDestinationPoint
	
	self checkNotAlreadyATokenThere: aDestinationPoint.
	self checkIfValidMovingFrom: aPointOfAXToken to: aDestinationPoint.
	self checkDestinationIsNotOutOfBoard: aDestinationPoint.
	positionTokens remove: aPointOfAXToken ifAbsent: [self error: self class errorDescriptionNoTokenThere].
	positionTokens add: aDestinationPoint.! !
!PlayerX class methodsFor: 'as yet unclassified' stamp: 'D S 11/1/2020 15:52:03'!
errorDescriptionNoTokenThere

	^'You dont have a token there'! !

!testRun: #TableTest #test57 stamp: 'D S 11/1/2020 15:52:13'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 15:53:39'!
test57RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame xMoveTokenFrom: 2@2 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionNoTokenThere )).].	! !

!methodRemoval: TableTest #test57 stamp: 'D S 11/1/2020 15:53:42'!
test57
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame xMoveTokenFrom: 2@2 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionNoTokenThere )).].	!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 15:55:14'!
test58
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@2 to: 2@1.
	^[aGame oMoveTokenFrom: 1@2 to: 2@2.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerO errorDescriptionNoTokenThere )).].	! !

!testRun: #TableTest #test58 stamp: 'D S 11/1/2020 15:55:17'!
ERROR!

!testRun: #TableTest #test58 stamp: 'D S 11/1/2020 15:55:17'!
ERROR!
!PlayerO methodsFor: 'actions' stamp: 'D S 11/1/2020 15:55:56' prior: 50932963 overrides: 50932545!
oMoveTokenFrom: aPointOfAOToken to: aDestinationPoint
	
	self checkNotAlreadyATokenThere: aDestinationPoint.
	self checkIfValidMovingFrom: aPointOfAOToken to: aDestinationPoint.
	self checkDestinationIsNotOutOfBoard: aDestinationPoint.
	positionTokens remove: aPointOfAOToken ifAbsent:[self error: self class errorDescriptionNoTokenThere].
	positionTokens add: aDestinationPoint.! !
!PlayerO class methodsFor: 'as yet unclassified' stamp: 'D S 11/1/2020 15:56:11'!
errorDescriptionNoTokenThere

	^'You dont have a token there'! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test10NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXMoveATokenWhenMatchEnded stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerXPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test53RaisePopUpMenuWhenPlayerXWinAfterPuttingAnX stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test54RaisePopUpMenuWhenPlayerOWinAfterPuttingAnO stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test55RaisePopUpMenuWhenPlayerXWinAfterMovingAToken stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test56RaisePopUpMenuWhenPlayerOWinAfterMovingAToken stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test57RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 15:56:13'!
PASSED!

!testRun: #TableTest #test58 stamp: 'D S 11/1/2020 15:56:13'!
ERROR!

!testRun: #TableTest #test58 stamp: 'D S 11/1/2020 15:56:13'!
ERROR!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 15:56:40' prior: 50934428!
test58
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame oMoveTokenFrom: 1@2 to: 2@2.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerO errorDescriptionNoTokenThere )).].	! !
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 15:57:31' prior: 50934663!
test58
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@2.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame oMoveTokenFrom: 2@0 to: 2@2.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerO errorDescriptionNoTokenThere )).].	! !

!testRun: #TableTest #test58 stamp: 'D S 11/1/2020 15:57:34'!
FAILURE!

!testRun: #TableTest #test58 stamp: 'D S 11/1/2020 15:57:34'!
FAILURE!

!testRun: #TableTest #test58 stamp: 'D S 11/1/2020 15:57:44'!
FAILURE!

!testRun: #TableTest #test58 stamp: 'D S 11/1/2020 15:57:44'!
FAILURE!

!testRun: #TableTest #test58 stamp: 'D S 11/1/2020 15:58:22'!
FAILURE!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 15:58:31' prior: 50934677!
test58
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@2.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame oMoveTokenFrom: 2@0 to: 1@0.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerO errorDescriptionNoTokenThere )).].	! !

!testRun: #TableTest #test58 stamp: 'D S 11/1/2020 15:58:34'!
PASSED!
!TableTest methodsFor: 'ErrorTests' stamp: 'D S 11/1/2020 15:58:59'!
test58RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@2.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame oMoveTokenFrom: 2@0 to: 1@0.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerO errorDescriptionNoTokenThere )).].	! !

!methodRemoval: TableTest #test58 stamp: 'D S 11/1/2020 15:59:08'!
test58
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@2.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame oMoveTokenFrom: 2@0 to: 1@0.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerO errorDescriptionNoTokenThere )).].	!
!PlayerO methodsFor: 'actions' stamp: 'D S 11/1/2020 15:59:45' prior: 50934447 overrides: 50932545!
oMoveTokenFrom: aPointOfAOToken to: aDestinationPoint
	
	self checkNotAlreadyATokenThere: aDestinationPoint.
	self checkIfValidMovingFrom: aPointOfAOToken to: aDestinationPoint.
	self checkDestinationIsNotOutOfBoard: aDestinationPoint.
	positionTokens remove: aPointOfAOToken ifAbsent:[^self error: self class errorDescriptionNoTokenThere].
	positionTokens add: aDestinationPoint.! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 15:59:55' prior: 50932768!
checkDestinationIsNotOutOfBoard: aPoint
	"El tablero es 3x3"
	^ ((aPoint x) > 2 or: (aPoint y) > 2 or: (aPoint x) < 0 or: (aPoint y) < 0) 
		ifTrue:[^self error: self class errorDescriptionOutOfRange ]! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 15:59:58' prior: 50932612!
checkHaveTokenToPut

	^ (remainingTokens = 0) ifTrue: [^self error: self class errorDescriptionNoMoreTokens ]! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 16:00:03' prior: 50933432!
checkIfValidMovingFrom: aPoint to: aPoint2
	"Todo movimiento validos aumenta o reduce la distancia al centro en 1 o 2. Si se mantiene igual es invalido ya que serian movimientos de la posicion 1@2 a 0@1, 0@1 a 1@0, 1@0 a 2@1 o 2@1 a 1@2 "

	^ (self diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2) ifTrue: [^self error: self class errorDescriptionInvalidMovement]! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 16:00:07' prior: 50932630!
checkNotAlreadyATokenThere: aPoint

	^ (positionTokens includes: aPoint) ifTrue:[^self error: self class errorDescriptionOwnTokenThere ]! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 16:00:13' prior: 50933409!
checkNotAlreadyATokenThere: aPoint
	
	^ (positionTokens includes: aPoint) ifTrue:[^self error: self class errorDescriptionOwnTokenThere ]! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 16:00:16' prior: 50933417!
checkIfValidMovingFrom: aPoint to: aPoint2
	"Todo movimiento validos aumenta o reduce la distancia al centro en 1 o 2. Si se mantiene igual es invalido ya que serian movimientos de la posicion 1@2 a 0@1, 0@1 a 1@0, 1@0 a 2@1 o 2@1 a 1@2 "
	^ (self diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2) ifTrue: [^self error: self class errorDescriptionInvalidMovement]! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 16:00:19' prior: 50933181!
checkHaveTokenToPut

	^ (remainingTokens = 0) ifTrue: [^self error: self class errorDescriptionNoMoreTokens ]! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 16:00:23' prior: 50933172!
checkDestinationIsNotOutOfBoard: aPoint
	"El tablero es 3x3"
	^ ((aPoint x) > 2 or: (aPoint y) > 2 or: (aPoint x) < 0 or: (aPoint y) < 0) ifTrue:[^self error: self class errorDescriptionOutOfRange ]! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 16:00:26' prior: 50934834!
checkDestinationIsNotOutOfBoard: aPoint
	"El tablero es 3x3"
	^ ((aPoint x) > 2 or: (aPoint y) > 2 or: (aPoint x) < 0 or: (aPoint y) < 0) 
		ifTrue:[^self error: self class errorDescriptionOutOfRange ]! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test10NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXMoveATokenWhenMatchEnded stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerXPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test53RaisePopUpMenuWhenPlayerXWinAfterPuttingAnX stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test54RaisePopUpMenuWhenPlayerOWinAfterPuttingAnO stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test55RaisePopUpMenuWhenPlayerXWinAfterMovingAToken stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test56RaisePopUpMenuWhenPlayerOWinAfterMovingAToken stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test57RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 16:00:30'!
PASSED!

----SNAPSHOT----(1 November 2020 16:05:06) CuisUniversity-4383.image priorSource: 19286328!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test10NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXMoveATokenWhenMatchEnded stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerXPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test53RaisePopUpMenuWhenPlayerXWinAfterPuttingAnX stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test54RaisePopUpMenuWhenPlayerOWinAfterPuttingAnO stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test55RaisePopUpMenuWhenPlayerXWinAfterMovingAToken stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test56RaisePopUpMenuWhenPlayerOWinAfterMovingAToken stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test57RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 16:05:09'!
PASSED!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test10NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXMoveATokenWhenMatchEnded stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerXPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test53RaisePopUpMenuWhenPlayerXWinAfterPuttingAnX stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test54RaisePopUpMenuWhenPlayerOWinAfterPuttingAnO stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test55RaisePopUpMenuWhenPlayerXWinAfterMovingAToken stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test56RaisePopUpMenuWhenPlayerOWinAfterMovingAToken stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test57RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 16:21:24'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 16:21:24'!
PASSED!
!Game methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 18:35:24' prior: 50932505!
checkIfPlayerXWon

	^ self hasPlayerXWon ifTrue:[self error: self class menuDescriptionPlayerXWon.
						  playerMoving := PlayerNull new initialize]
					ifFalse: [	playerMoving := playerO.]! !
!Game methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 18:35:46' prior: 50931467!
checkIfPlayerOWon

	^ self hasPlayerOWon ifTrue:[self error: self class menuDescriptionPlayerOWon.
						playerMoving := PlayerNull new initialize]
					ifFalse:[playerMoving := playerX.]! !

!methodRemoval: TableTest #test53RaisePopUpMenuWhenPlayerXWinAfterPuttingAnX stamp: 'D S 11/1/2020 18:35:58'!
test53RaisePopUpMenuWhenPlayerXWinAfterPuttingAnX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	^[aGame putXAt: 0@2] 
		on: PopUpMenu 
		do: [:menu| self assert: (menu description = '(PlayerNull menuDescriptionPlayerXWon )').].!

!methodRemoval: TableTest #test54RaisePopUpMenuWhenPlayerOWinAfterPuttingAnO stamp: 'D S 11/1/2020 18:35:58'!
test54RaisePopUpMenuWhenPlayerOWinAfterPuttingAnO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@1.
	^[aGame putOAt: 2@2] 		
		on: PopUpMenu
		do: [:menu| self assert: (menu messageText = (Game menuDescriptionPlayerOWon )).].!

!methodRemoval: TableTest #test55RaisePopUpMenuWhenPlayerXWinAfterMovingAToken stamp: 'D S 11/1/2020 18:35:58'!
test55RaisePopUpMenuWhenPlayerXWinAfterMovingAToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.	
	aGame putOAt: 2@0.
	^[aGame xMoveTokenFrom: 2@2 to: 1@2.
		]
		on: PopUpMenu 
		do: [:menu| self assert: (menu messageText = (Game menuDescriptionPlayerXWon )).].!

!methodRemoval: TableTest #test56RaisePopUpMenuWhenPlayerOWinAfterMovingAToken stamp: 'D S 11/1/2020 18:35:58'!
test56RaisePopUpMenuWhenPlayerOWinAfterMovingAToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame oMoveTokenFrom: 2@2 to: 1@2.]
		on: PopUpMenu 
		do: [:menu| self assert: menu description: '(Game menuDescriptionPlayerOWon )'].	!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 18:36:14'!
ERROR!

!testRun: #TableTest #test10NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 18:36:14'!
ERROR!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 18:36:14'!
ERROR!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 18:36:14'!
ERROR!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 18:36:14'!
ERROR!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 18:36:14'!
ERROR!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 18:36:14'!
ERROR!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 18:36:14'!
ERROR!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 18:36:14'!
ERROR!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 18:36:14'!
ERROR!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 18:36:14'!
ERROR!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 18:36:14'!
ERROR!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 18:36:14'!
ERROR!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 18:36:14'!
ERROR!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 18:36:14'!
ERROR!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 18:36:14'!
ERROR!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 18:36:14'!
ERROR!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXMoveATokenWhenMatchEnded stamp: 'D S 11/1/2020 18:36:14'!
ERROR!

!testRun: #TableTest #test50RaiseErrorWhenPlayerXPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 18:36:14'!
ERROR!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test57RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 18:36:14'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 18:36:14'!
PASSED!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 18:55:39' prior: 50930027!
test09XTokensInAscendingDiagonalEndsGame

	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.

	^ [	aGame putXAt: 2@2..	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerXWon )).].
! !

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 18:55:43'!
PASSED!

!methodRemoval: TableTest #test10NotForming3InARowDoesntEndGame stamp: 'D S 11/1/2020 18:56:40'!
test10NotForming3InARowDoesntEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@1.

	self deny: aGame isOver.!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 18:56:56' prior: 50930065!
test11OTokensInAscendingDiagonalEndsGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 2@1.

	^ [	aGame putOAt: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerXWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 18:57:17' prior: 50935723!
test11OTokensInAscendingDiagonalEndsGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 2@1.

	^ [	aGame putOAt: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 18:57:23' prior: 50930085!
test12XTokensInDescendingDiagonalEndsGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@0.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@0.


	^ [	aGame putOAt: 2@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerXWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 18:57:38' prior: 50930124!
test14ThreeXTokensInMiddleRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@0.
	^ [	aGame putXAt: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerXWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 18:58:00' prior: 50935751!
test12XTokensInDescendingDiagonalEndsGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@0.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	
	^ [	aGame putXAt: 2@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerXWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 18:58:17' prior: 50930163!
test16ThreeXTokensInBottomRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@0.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 2@2.
	
	^ [	aGame putXAt: 2@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerXWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 18:58:28' prior: 50930200!
test18ThreeXTokensInTopRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 0@2.
	aGame putOAt: 0@0.

	^ [	aGame putXAt: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerXWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 18:58:38' prior: 50930274!
test20ThreeXTokensInSecondColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 0@2.
	aGame putXAt: 1@0.

	^ [	aGame putXAt: 1@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerXWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 18:58:49' prior: 50930331!
test22ThreeXTokensInFirstColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@0.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.

	^ [	aGame putXAt: 0@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerXWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 18:58:56' prior: 50930369!
test24ThreeXTokensInThirdColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@2.
	aGame putXAt: 2@0.

	^ [	aGame putXAt: 2@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerXWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 18:59:14' prior: 50930104!
test13OTokensInDescendingDiagonalEndsGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 2@1.

	^ [	aGame putOAt: 2@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 18:59:24' prior: 50930143!
test15ThreeOTokensInMiddleRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.

	^ [	aGame putOAt: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 18:59:27' prior: 50935871!
test15ThreeOTokensInMiddleRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.

	^ [	aGame putOAt: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 18:59:38' prior: 50930181!
test17ThreeOTokensInBottomRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@0.
	aGame putXAt: 2@1.

	^ [	aGame putOAt: 2@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 18:59:55' prior: 50930218!
test19ThreeOTokensInTopRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 0@2.
	aGame putXAt: 1@0.
	
	^ [	aGame putOAt: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 19:00:06' prior: 50930293!
test21ThreeOTokensInSecondColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.
	^ [	aGame putOAt: 1@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 19:00:22' prior: 50930350!
test23ThreeOTokensInFirstColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@1.
	aGame putXAt: 1@2.
	aGame putOAt: 0@2.
	aGame putXAt: 2@2.
	
	^ [	aGame putOAt: 0@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 19:00:31' prior: 50930387!
test25ThreeOTokensInThirdColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 2@0.
	aGame putXAt: 1@2.
	aGame putOAt: 2@2.
	aGame putXAt: 0@0.
	
	^ [	aGame putOAt: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 19:00:43'!
ERROR!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 19:00:43'!
ERROR!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 19:00:43'!
ERROR!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXMoveATokenWhenMatchEnded stamp: 'D S 11/1/2020 19:00:43'!
ERROR!

!testRun: #TableTest #test50RaiseErrorWhenPlayerXPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 19:00:43'!
ERROR!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test57RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 19:00:43'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 19:00:43'!
PASSED!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 19:01:08' prior: 50935817!
test20ThreeXTokensInSecondColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 0@2.

	^ [	aGame putXAt: 1@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerXWon )).].! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 19:01:15'!
ERROR!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 19:01:15'!
ERROR!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXMoveATokenWhenMatchEnded stamp: 'D S 11/1/2020 19:01:15'!
ERROR!

!testRun: #TableTest #test50RaiseErrorWhenPlayerXPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 19:01:15'!
ERROR!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test57RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 19:01:15'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 19:01:15'!
PASSED!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 19:01:25' prior: 50935844!
test24ThreeXTokensInThirdColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@2.

	^ [	aGame putXAt: 2@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerXWon )).].! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 19:01:29'!
ERROR!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXMoveATokenWhenMatchEnded stamp: 'D S 11/1/2020 19:01:29'!
ERROR!

!testRun: #TableTest #test50RaiseErrorWhenPlayerXPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 19:01:29'!
ERROR!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test57RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 19:01:29'!
PASSED!

!methodRemoval: TableTest #test48RaiseErrorWhenPlayerOPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 19:01:52'!
test48RaiseErrorWhenPlayerOPutATokenWhenMatchEnded
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@2.	
	^ [aGame putOAt: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerNull errorDescriptionGameOver)).].

	!

!methodRemoval: TableTest #test49RaiseErrorWhenPlayerXMoveATokenWhenMatchEnded stamp: 'D S 11/1/2020 19:01:55'!
test49RaiseErrorWhenPlayerXMoveATokenWhenMatchEnded
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.	
	aGame putOAt: 1@0.
	^ [aGame xMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerNull errorDescriptionGameOver)).].

	!

!methodRemoval: TableTest #test50RaiseErrorWhenPlayerXPutATokenWhenMatchEnded stamp: 'D S 11/1/2020 19:01:58'!
test50RaiseErrorWhenPlayerXPutATokenWhenMatchEnded
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.	
	aGame putOAt: 0@2.
	^ [aGame putXAt: 1@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerNull errorDescriptionGameOver)).].

	!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test57RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 19:02:01'!
PASSED!

!methodRemoval: Game #isOver stamp: 'D S 11/1/2020 19:02:30'!
isOver
	
	^(self hasPlayerOWon) or: (self hasPlayerXWon).
!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test57RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 19:02:35'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 19:02:35'!
PASSED!
!Game methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 19:02:49' prior: 50935442!
checkIfPlayerXWon

	^ self hasPlayerXWon ifTrue:[self error: self class menuDescriptionPlayerXWon.]
					ifFalse: [	playerMoving := playerO.]! !
!Game methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 19:02:57' prior: 50935451!
checkIfPlayerOWon

	^ self hasPlayerOWon ifTrue:[self error: self class menuDescriptionPlayerOWon.]
					ifFalse:[playerMoving := playerX.]! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 19:03:01'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 19:03:01'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 19:03:01'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 19:03:01'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 19:03:01'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 19:03:01'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 19:03:01'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test57RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 19:03:02'!
PASSED!

!classRemoval: #PlayerNull stamp: 'D S 11/1/2020 19:03:08'!
Game subclass: #PlayerNull
	instanceVariableNames: 'remainingTokens positionTokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!

----SNAPSHOT----(1 November 2020 19:03:12) CuisUniversity-4383.image priorSource: 19308723!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test57RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 19:04:55'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 19:04:55'!
PASSED!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 19:38:03'!
test60

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	^ [aGame oMoveTokenFrom: 2@2 to: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionTokenAlreadyThere )).].
! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test57RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 19:38:18'!
PASSED!

!testRun: #TableTest #test60 stamp: 'D S 11/1/2020 19:38:18'!
ERROR!

!testRun: #TableTest #test60 stamp: 'D S 11/1/2020 19:38:18'!
ERROR!
!PlayerO methodsFor: 'actions' stamp: 'D S 11/1/2020 19:38:57' prior: 50934749 overrides: 50932545!
oMoveTokenFrom: aPointOfAOToken to: aDestinationPoint
	
	self checkNotAlreadyATokenThere: aDestinationPoint.
	self checkIfValidMovingFrom: aPointOfAOToken to: aDestinationPoint.
	self checkDestinationIsNotOutOfBoard: aDestinationPoint.
	aPointOfAOToken = aDestinationPoint ifTrue:[self error: self class errorDescriptionTokenAlreadyThere].
	positionTokens remove: aPointOfAOToken ifAbsent:[^self error: self class errorDescriptionNoTokenThere].
	positionTokens add: aDestinationPoint.! !
!PlayerO class methodsFor: 'as yet unclassified' stamp: 'D S 11/1/2020 19:39:16'!
errorDescriptionTokenAlreadyThere

	^'The indicated token is already there'! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 19:39:19'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 19:39:20'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 19:39:20'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 19:39:20'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 19:39:20'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 19:39:20'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 19:39:20'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 19:39:20'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 19:39:20'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 19:39:20'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 19:39:20'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:39:20'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:39:20'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:39:20'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:39:20'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 19:39:20'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 19:39:20'!
PASSED!

!testRun: #TableTest #test57RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 19:39:20'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 19:39:20'!
PASSED!

!testRun: #TableTest #test60 stamp: 'D S 11/1/2020 19:39:20'!
FAILURE!

!testRun: #TableTest #test60 stamp: 'D S 11/1/2020 19:39:20'!
FAILURE!

!testRun: #TableTest #test60 stamp: 'D S 11/1/2020 19:39:43'!
FAILURE!
!PlayerO methodsFor: 'actions' stamp: 'D S 11/1/2020 19:39:59' prior: 50937450 overrides: 50932545!
oMoveTokenFrom: aPointOfAOToken to: aDestinationPoint
	
	self checkNotAlreadyATokenThere: aDestinationPoint.
	self checkIfValidMovingFrom: aPointOfAOToken to: aDestinationPoint.
	self checkDestinationIsNotOutOfBoard: aDestinationPoint.
	aPointOfAOToken = aDestinationPoint ifTrue:[^self error: self class errorDescriptionTokenAlreadyThere].
	positionTokens remove: aPointOfAOToken ifAbsent:[^self error: self class errorDescriptionNoTokenThere].
	positionTokens add: aDestinationPoint.! !
!PlayerO methodsFor: 'actions' stamp: 'D S 11/1/2020 19:40:14' prior: 50937648 overrides: 50932545!
oMoveTokenFrom: aPointOfAOToken to: aDestinationPoint
	
	self checkNotAlreadyATokenThere: aDestinationPoint.
	self checkIfValidMovingFrom: aPointOfAOToken to: aDestinationPoint.
	self checkDestinationIsNotOutOfBoard: aDestinationPoint.
	(aPointOfAOToken = aDestinationPoint) ifTrue:[^self error: self class errorDescriptionTokenAlreadyThere].
	positionTokens remove: aPointOfAOToken ifAbsent:[^self error: self class errorDescriptionNoTokenThere].
	positionTokens add: aDestinationPoint.! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test57RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 19:40:18'!
PASSED!

!testRun: #TableTest #test60 stamp: 'D S 11/1/2020 19:40:18'!
FAILURE!

!testRun: #TableTest #test60 stamp: 'D S 11/1/2020 19:40:18'!
FAILURE!

!testRun: #TableTest #test60 stamp: 'D S 11/1/2020 19:41:47'!
FAILURE!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 19:51:25' prior: 50937263!
test60

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	^ [aGame oMoveTokenFrom: 2@2 to: 0@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionTokenAlreadyThere )).].
! !
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 19:51:35' prior: 50937859!
test60

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	^ [aGame oMoveTokenFrom: 2@2 to: 0@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionInvalidMovement )).].
! !

!testRun: #TableTest #test60 stamp: 'D S 11/1/2020 19:51:38'!
PASSED!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 19:51:57' prior: 50937874!
test60

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	^ [aGame oMoveTokenFrom: 2@1 to: 0@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionInvalidMovement )).].
! !

!testRun: #TableTest #test60 stamp: 'D S 11/1/2020 19:51:59'!
FAILURE!

!testRun: #TableTest #test60 stamp: 'D S 11/1/2020 19:51:59'!
FAILURE!
!PlayerO methodsFor: 'actions' stamp: 'D S 11/1/2020 19:52:15' prior: 50937667 overrides: 50932545!
oMoveTokenFrom: aPointOfAOToken to: aDestinationPoint
	
	self checkNotAlreadyATokenThere: aDestinationPoint.
	self checkIfValidMovingFrom: aPointOfAOToken to: aDestinationPoint.
	self checkDestinationIsNotOutOfBoard: aDestinationPoint.
	positionTokens remove: aPointOfAOToken ifAbsent:[^self error: self class errorDescriptionNoTokenThere].
	positionTokens add: aDestinationPoint.! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 19:53:28' prior: 50934781!
checkIfValidMovingFrom: aPoint to: aPoint2
	"Todo movimiento validos aumenta o reduce la distancia al centro en 1 o 2. Si se mantiene igual es invalido ya que serian movimientos de la posicion 1@2 a 0@1, 0@1 a 1@0, 1@0 a 2@1 o 2@1 a 1@2 "

	^ ((self diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2) or: (self distanciaEntrePuntosEsMayorA2: aPoint aPoint2)) ifTrue: [^self error: self class errorDescriptionInvalidMovement]! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 19:55:07'!
distanciaEntrePuntosEsMayorA2: aPoint 
	
	^(((aPoint  x) - (aPoint x) + (aPoint y) - (aPoint y) ) abs) > 2! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 19:56:51' prior: 50937926!
checkIfValidMovingFrom: aPoint to: aPoint2
	"Todo movimiento validos aumenta o reduce la distancia al centro en 1 o 2. Si se mantiene igual es invalido ya que serian movimientos de la posicion 1@2 a 0@1, 0@1 a 1@0, 1@0 a 2@1 o 2@1 a 1@2 "

	^ ((self diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2) or: (((aPoint  x) - (aPoint x) + (aPoint y) - (aPoint y) ) abs) > 2) ifTrue: [^self error: self class errorDescriptionInvalidMovement]! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 19:57:09' prior: 50937949!
checkIfValidMovingFrom: aPoint to: aPoint2
	"Todo movimiento validos aumenta o reduce la distancia al centro en 1 o 2. Si se mantiene igual es invalido ya que serian movimientos de la posicion 1@2 a 0@1, 0@1 a 1@0, 1@0 a 2@1 o 2@1 a 1@2 "

	^ ((self diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2) or: (((aPoint  x) - (aPoint2 x) + (aPoint y) - (aPoint2 y) ) abs) > 2) ifTrue: [^self error: self class errorDescriptionInvalidMovement]! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 19:58:10' prior: 50937966!
checkIfValidMovingFrom: aPoint to: aPoint2
	"Todo movimiento validos aumenta o reduce la distancia al centro en 1 o 2. Si se mantiene igual es invalido ya que serian movimientos de la posicion 1@2 a 0@1, 0@1 a 1@0, 1@0 a 2@1 o 2@1 a 1@2 "

	^ ((self diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2) or: ((((aPoint  x) - (aPoint2 x)) + ((aPoint y) - (aPoint2 y))) abs) > 2) ifTrue: [^self error: self class errorDescriptionInvalidMovement]! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 19:58:32'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 19:58:33'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 19:58:33'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 19:58:33'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 19:58:33'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 19:58:33'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:58:33'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:58:33'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:58:33'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 19:58:33'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 19:58:33'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 19:58:33'!
PASSED!

!testRun: #TableTest #test57RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 19:58:33'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 19:58:33'!
PASSED!

!testRun: #TableTest #test60 stamp: 'D S 11/1/2020 19:58:33'!
PASSED!
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 20:02:05'!
distanciaEntreElPunto: aPoint EsMayorA2ComparandoloCon: aPoint2 
	
	^((((aPoint  x) - (aPoint2 x)) + ((aPoint y) - (aPoint2 y))) abs) > 2! !

!methodRemoval: PlayerO #distanciaEntrePuntosEsMayorA2: stamp: 'D S 11/1/2020 20:02:09'!
distanciaEntrePuntosEsMayorA2: aPoint 
	
	^(((aPoint  x) - (aPoint x) + (aPoint y) - (aPoint y) ) abs) > 2!
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 20:03:38' prior: 50937983!
checkIfValidMovingFrom: aPoint to: aPoint2
	"Todo movimiento validos aumenta o reduce la distancia al centro en 1 o 2. Si se mantiene igual es invalido ya que serian movimientos de la posicion 1@2 a 0@1, 0@1 a 1@0, 1@0 a 2@1 o 2@1 a 1@2 "

	^((self diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2) or: (self distanciaEntreElPunto: aPoint EsMayorA2ComparandoloCon: aPoint2)) ifTrue: [^self error: self class errorDescriptionInvalidMovement].! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test57RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 20:03:44'!
PASSED!

!testRun: #TableTest #test60 stamp: 'D S 11/1/2020 20:03:44'!
PASSED!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:04:21'!
test61

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	^ [aGame xMoveTokenFrom: 0@0 to: 2@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionInvalidMovement )).].
! !
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:04:30' prior: 50938369!
test61

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@0.
	^ [aGame xMoveTokenFrom: 0@0 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionInvalidMovement )).].
! !
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:04:38' prior: 50938383!
test61

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@0.
	^ [aGame xMoveTokenFrom: 0@0 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement )).].
! !

!testRun: #TableTest #test61 stamp: 'D S 11/1/2020 20:04:41'!
ERROR!

!testRun: #TableTest #test61 stamp: 'D S 11/1/2020 20:04:41'!
ERROR!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:05:02' prior: 50938397!
test61

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 0@0 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement )).].
! !

!testRun: #TableTest #test61 stamp: 'D S 11/1/2020 20:05:05'!
FAILURE!

!testRun: #TableTest #test61 stamp: 'D S 11/1/2020 20:05:05'!
FAILURE!
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 20:05:45' prior: 50934812!
checkIfValidMovingFrom: aPoint to: aPoint2
	"Todo movimiento validos aumenta o reduce la distancia al centro en 1 o 2. Si se mantiene igual es invalido ya que serian movimientos de la posicion 1@2 a 0@1, 0@1 a 1@0, 1@0 a 2@1 o 2@1 a 1@2 "
	^ ((self diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2) or: (self distanciaEntreElPunto: aPoint EsMayorA2ComparandoloCon: aPoint2)) ifTrue: [^self error: self class errorDescriptionInvalidMovement]! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 20:05:54'!
ERROR!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 20:05:54'!
ERROR!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 20:05:54'!
ERROR!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 20:05:54'!
ERROR!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 20:05:54'!
ERROR!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 20:05:54'!
FAILURE!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 20:05:54'!
ERROR!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:05:54'!
FAILURE!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:05:54'!
ERROR!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 20:05:54'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 20:05:54'!
ERROR!

!testRun: #TableTest #test57RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 20:05:54'!
FAILURE!

!testRun: #TableTest #test58RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 20:05:54'!
ERROR!

!testRun: #TableTest #test60 stamp: 'D S 11/1/2020 20:05:54'!
ERROR!

!testRun: #TableTest #test61 stamp: 'D S 11/1/2020 20:05:54'!
FAILURE!
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/1/2020 20:06:34'!
distanciaEntreElPunto: aPoint EsMayorA2ComparandoloCon: aPoint2 
	
	^((((aPoint  x) - (aPoint2 x)) + ((aPoint y) - (aPoint2 y))) abs) > 2! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test57RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test58RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test60 stamp: 'D S 11/1/2020 20:06:39'!
PASSED!

!testRun: #TableTest #test61 stamp: 'D S 11/1/2020 20:06:39'!
PASSED!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:23:03'!
test48RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	^ [aGame oMoveTokenFrom: 2@1 to: 0@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionInvalidMovement )).].
! !

!methodRemoval: TableTest #test60 stamp: 'D S 11/1/2020 20:23:03'!
test60

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	^ [aGame oMoveTokenFrom: 2@1 to: 0@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionInvalidMovement )).].
!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:23:13'!
test48RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	^ [aGame oMoveTokenFrom: 2@1 to: 0@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionInvalidMovement )).].
! !

!methodRemoval: TableTest #test48RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/1/2020 20:23:13'!
test48RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	^ [aGame oMoveTokenFrom: 2@1 to: 0@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionInvalidMovement )).].
!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:23:31'!
test49RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 0@0 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement )).].
! !

!methodRemoval: TableTest #test61 stamp: 'D S 11/1/2020 20:23:31'!
test61

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 0@0 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement )).].
!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:24:11'!
test40RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	^ [aGame oMoveTokenFrom: 2@1 to: 0@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionInvalidMovement )).].
! !

!methodRemoval: TableTest #test48RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/1/2020 20:24:11'!
test48RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	^ [aGame oMoveTokenFrom: 2@1 to: 0@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionInvalidMovement )).].
!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:24:18'!
test41RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 0@0 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement )).].
! !

!methodRemoval: TableTest #test49RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/1/2020 20:24:18'!
test49RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 0@0 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement )).].
!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:24:27'!
test44RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	
	^ [aGame xMoveTokenFrom: 2@0 to: 3@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!methodRemoval: TableTest #test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:24:27'!
test46RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	
	^ [aGame xMoveTokenFrom: 2@0 to: 3@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:24:31'!
test45RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.
	
	^ [aGame oMoveTokenFrom: 2@2 to: 3@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

	! !

!methodRemoval: TableTest #test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:24:31'!
test47RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.
	
	^ [aGame oMoveTokenFrom: 2@2 to: 3@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:24:37'!
test46RaiseErrorWhenPlayerXTryMoveAOpponentToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame oMoveTokenFrom: 2@0 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionCantMoveOpponentTokens )).].	! !

!methodRemoval: TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 20:24:37'!
test51RaiseErrorWhenPlayerXTryMoveAOpponentToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame oMoveTokenFrom: 2@0 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionCantMoveOpponentTokens )).].	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:24:42'!
test47RaiseErrorWhenPlayerOTryMoveOpponentToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame xMoveTokenFrom: 2@1 to: 2@0.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerO errorDescriptionCantMoveOpponentTokens )).].	! !

!methodRemoval: TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 20:24:42'!
test52RaiseErrorWhenPlayerOTryMoveOpponentToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame xMoveTokenFrom: 2@1 to: 2@0.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerO errorDescriptionCantMoveOpponentTokens )).].	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:24:48'!
test548RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame xMoveTokenFrom: 2@2 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionNoTokenThere )).].	! !

!methodRemoval: TableTest #test57RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 20:24:48'!
test57RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame xMoveTokenFrom: 2@2 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionNoTokenThere )).].	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:24:55'!
test49RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@2.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame oMoveTokenFrom: 2@0 to: 1@0.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerO errorDescriptionNoTokenThere )).].	! !

!methodRemoval: TableTest #test58RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 20:24:55'!
test58RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@2.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame oMoveTokenFrom: 2@0 to: 1@0.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerO errorDescriptionNoTokenThere )).].	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:25:00'!
test48RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame xMoveTokenFrom: 2@2 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionNoTokenThere )).].	! !

!methodRemoval: TableTest #test548RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 20:25:00'!
test548RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame xMoveTokenFrom: 2@2 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionNoTokenThere )).].	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:25:28'!
test42RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	^ [aGame oMoveTokenFrom: 2@1 to: 0@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionInvalidMovement )).].
! !

!methodRemoval: TableTest #test40RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/1/2020 20:25:28'!
test40RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	^ [aGame oMoveTokenFrom: 2@1 to: 0@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionInvalidMovement )).].
!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:26:11'!
test43RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 0@0 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement )).].
! !

!methodRemoval: TableTest #test41RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/1/2020 20:26:11'!
test41RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 0@0 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement )).].
!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:26:25'!
test44RaiseErrorWhenPlayerXTryAnInvalidMovement
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	
	^ [aGame xMoveTokenFrom: 1@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement)).].

	! !

!methodRemoval: TableTest #test42RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 20:26:25'!
test42RaiseErrorWhenPlayerXTryAnInvalidMovement
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	
	^ [aGame xMoveTokenFrom: 1@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement)).].

	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:26:34'!
test45RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	
	^ [aGame xMoveTokenFrom: 2@0 to: 3@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!methodRemoval: TableTest #test44RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:26:34'!
test44RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	
	^ [aGame xMoveTokenFrom: 2@0 to: 3@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	!
!TableTest methodsFor: 'PutTokenTests' stamp: 'D S 11/1/2020 20:26:46'!
test46RaiseErrorWhenPlayerXPutATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!methodRemoval: TableTest #test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:26:46'!
test44RaiseErrorWhenPlayerXPutATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:27:17'!
test46RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.
	
	^ [aGame oMoveTokenFrom: 2@2 to: 3@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

	! !

!methodRemoval: TableTest #test45RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:27:17'!
test45RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.
	
	^ [aGame oMoveTokenFrom: 2@2 to: 3@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

	!
!TableTest methodsFor: 'PutTokenTests' stamp: 'D S 11/1/2020 20:27:32'!
test47RaiseErrorWhenPlayerOPutATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame := aGame putXAt: 1@1.
	^ [aGame putOAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

! !

!methodRemoval: TableTest #test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:27:32'!
test45RaiseErrorWhenPlayerOPutATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame := aGame putXAt: 1@1.
	^ [aGame putOAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

!
!TableTest methodsFor: 'PutTokenTests' stamp: 'D S 11/1/2020 20:28:18'!
test47RaiseErrorWhenPlayerXPutATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!methodRemoval: TableTest #test46RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:28:18'!
test46RaiseErrorWhenPlayerXPutATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	!

----SNAPSHOT----(1 November 2020 20:28:25) CuisUniversity-4383.image priorSource: 19374149!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 20:32:06'!
PASSED!

----SNAPSHOT----(1 November 2020 20:40:37) CuisUniversity-4383.image priorSource: 19447692!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:44:01'!
test09PlayerXMovesTokenCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 0@2 to: 1@2.

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionXTokens.! !

!methodRemoval: TableTest #test28PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 20:44:01'!
test28PlayerXMovesTokenCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 0@2 to: 1@2.

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionXTokens.!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:44:06'!
test10PlayerOMovesTokenCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 0@2 to: 1@2.
	

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionOTokens.! !

!methodRemoval: TableTest #test29PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 20:44:06'!
test29PlayerOMovesTokenCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 0@2 to: 1@2.
	

	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionOTokens.!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 20:44:32'!
test11XTokensInAscendingDiagonalEndsGame

	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.

	^ [	aGame putXAt: 2@2..	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerXWon )).].
! !

!methodRemoval: TableTest #test09XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:44:32'!
test09XTokensInAscendingDiagonalEndsGame

	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.

	^ [	aGame putXAt: 2@2..	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerXWon )).].
!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 20:44:39'!
test12OTokensInAscendingDiagonalEndsGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 2@1.

	^ [	aGame putOAt: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].! !

!methodRemoval: TableTest #test11OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:44:39'!
test11OTokensInAscendingDiagonalEndsGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 2@1.

	^ [	aGame putOAt: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 20:44:43'!
test13XTokensInDescendingDiagonalEndsGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@0.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	
	^ [	aGame putXAt: 2@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerXWon )).].! !

!methodRemoval: TableTest #test12XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:44:43'!
test12XTokensInDescendingDiagonalEndsGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@0.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	
	^ [	aGame putXAt: 2@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerXWon )).].!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 20:44:50'!
test14OTokensInDescendingDiagonalEndsGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 2@1.

	^ [	aGame putOAt: 2@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].! !

!methodRemoval: TableTest #test13OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:44:50'!
test13OTokensInDescendingDiagonalEndsGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 2@1.

	^ [	aGame putOAt: 2@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 20:44:55'!
test15ThreeXTokensInMiddleRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@0.
	^ [	aGame putXAt: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerXWon )).].! !

!methodRemoval: TableTest #test14ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 20:44:55'!
test14ThreeXTokensInMiddleRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@0.
	^ [	aGame putXAt: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerXWon )).].!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 20:45:03'!
test16ThreeOTokensInMiddleRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.

	^ [	aGame putOAt: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].! !

!methodRemoval: TableTest #test15ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 20:45:03'!
test15ThreeOTokensInMiddleRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.

	^ [	aGame putOAt: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 20:45:10'!
test17ThreeXTokensInBottomRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@0.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 2@2.
	
	^ [	aGame putXAt: 2@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerXWon )).].! !

!methodRemoval: TableTest #test16ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 20:45:10'!
test16ThreeXTokensInBottomRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@0.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 2@2.
	
	^ [	aGame putXAt: 2@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerXWon )).].!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 20:45:17'!
test18ThreeOTokensInBottomRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@0.
	aGame putXAt: 2@1.

	^ [	aGame putOAt: 2@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].! !

!methodRemoval: TableTest #test17ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 20:45:17'!
test17ThreeOTokensInBottomRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@0.
	aGame putXAt: 2@1.

	^ [	aGame putOAt: 2@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 20:45:24'!
test19ThreeOTokensInBottomRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@0.
	aGame putXAt: 2@1.

	^ [	aGame putOAt: 2@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].! !

!methodRemoval: TableTest #test18ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 20:45:24'!
test18ThreeOTokensInBottomRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@0.
	aGame putXAt: 2@1.

	^ [	aGame putOAt: 2@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 20:45:29'!
test120ThreeOTokensInTopRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 0@2.
	aGame putXAt: 1@0.
	
	^ [	aGame putOAt: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].! !

!methodRemoval: TableTest #test19ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 20:45:29'!
test19ThreeOTokensInTopRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 0@2.
	aGame putXAt: 1@0.
	
	^ [	aGame putOAt: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 20:45:35'!
test20ThreeOTokensInTopRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 0@2.
	aGame putXAt: 1@0.
	
	^ [	aGame putOAt: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].! !

!methodRemoval: TableTest #test120ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 20:45:35'!
test120ThreeOTokensInTopRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 0@2.
	aGame putXAt: 1@0.
	
	^ [	aGame putOAt: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 20:45:45'!
test21ThreeXTokensInSecondColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 0@2.

	^ [	aGame putXAt: 1@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerXWon )).].! !

!methodRemoval: TableTest #test20ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 20:45:45'!
test20ThreeXTokensInSecondColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 0@2.

	^ [	aGame putXAt: 1@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerXWon )).].!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 20:45:49'!
test22ThreeOTokensInSecondColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.
	^ [	aGame putOAt: 1@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].! !

!methodRemoval: TableTest #test21ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 20:45:49'!
test21ThreeOTokensInSecondColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.
	^ [	aGame putOAt: 1@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 20:45:54'!
test23ThreeXTokensInFirstColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@0.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.

	^ [	aGame putXAt: 0@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerXWon )).].! !

!methodRemoval: TableTest #test22ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 20:45:54'!
test22ThreeXTokensInFirstColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@0.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.

	^ [	aGame putXAt: 0@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerXWon )).].!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 20:45:59'!
test24ThreeOTokensInFirstColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@1.
	aGame putXAt: 1@2.
	aGame putOAt: 0@2.
	aGame putXAt: 2@2.
	
	^ [	aGame putOAt: 0@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].! !

!methodRemoval: TableTest #test23ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 20:45:59'!
test23ThreeOTokensInFirstColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@1.
	aGame putXAt: 1@2.
	aGame putOAt: 0@2.
	aGame putXAt: 2@2.
	
	^ [	aGame putOAt: 0@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 20:46:03'!
test25ThreeXTokensInThirdColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@2.

	^ [	aGame putXAt: 2@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerXWon )).].! !

!methodRemoval: TableTest #test24ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 20:46:03'!
test24ThreeXTokensInThirdColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@2.

	^ [	aGame putXAt: 2@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerXWon )).].!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/1/2020 20:46:10'!
test26ThreeOTokensInThirdColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 2@0.
	aGame putXAt: 1@2.
	aGame putOAt: 2@2.
	aGame putXAt: 0@0.
	
	^ [	aGame putOAt: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].! !

!methodRemoval: TableTest #test25ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 20:46:10'!
test25ThreeOTokensInThirdColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 2@0.
	aGame putXAt: 1@2.
	aGame putOAt: 2@2.
	aGame putXAt: 0@0.
	
	^ [	aGame putOAt: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game menuDescriptionPlayerOWon )).].!
!TableTest methodsFor: 'PutTokenTests' stamp: 'D S 11/1/2020 20:46:38'!
test27PuttingXTokenReduceRemainingXTokensCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.

	self assert: 2 equals: aGame playerXRemainingTokens .! !

!methodRemoval: TableTest #test26PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 20:46:38'!
test26PuttingXTokenReduceRemainingXTokensCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.

	self assert: 2 equals: aGame playerXRemainingTokens .!
!TableTest methodsFor: 'PutTokenTests' stamp: 'D S 11/1/2020 20:46:44'!
test28PuttingOTokenReduceRemainingOCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@1.

	self assert: 2 equals: aGame playerORemainingTokens .! !

!methodRemoval: TableTest #test27PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 20:46:44'!
test27PuttingOTokenReduceRemainingOCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@1.

	self assert: 2 equals: aGame playerORemainingTokens .!
!TableTest methodsFor: 'PutTokenTests' stamp: 'D S 11/1/2020 20:47:56'!
test29RaiseErrorWhenPuttingOTokenInTurnOfPlayerX
	|aGame|
	aGame := Game startGame.
	
	^ [aGame putOAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionTurnX)).].

	! !

!methodRemoval: TableTest #test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 20:47:56'!
test30RaiseErrorWhenPuttingOTokenInTurnOfPlayerX
	|aGame|
	aGame := Game startGame.
	
	^ [aGame putOAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionTurnX)).].

	!
!TableTest methodsFor: 'PutTokenTests' stamp: 'D S 11/1/2020 20:48:03'!
test30RaiseErrorWhenPuttingXTokenInTurnOfPlayerO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	^ [aGame putXAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionTurnO)).].

	! !

!methodRemoval: TableTest #test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 20:48:03'!
test31RaiseErrorWhenPuttingXTokenInTurnOfPlayerO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@1.
	^ [aGame putXAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionTurnO)).].

	!
!TableTest methodsFor: 'PutTokenTests' stamp: 'D S 11/1/2020 20:48:09'!
test31RaiseErrorWhenPuttingTokenXWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	
	^ [aGame putOAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	! !

!methodRemoval: TableTest #test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 20:48:09'!
test32RaiseErrorWhenPuttingTokenXWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	
	^ [aGame putOAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	!
!TableTest methodsFor: 'PutTokenTests' stamp: 'D S 11/1/2020 20:48:13'!
test32RaiseErrorWhenPuttingTokenOWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	
	^ [aGame putXAt: 1@1.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	! !

!methodRemoval: TableTest #test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 20:48:13'!
test33RaiseErrorWhenPuttingTokenOWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	
	^ [aGame putXAt: 1@1.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	!
!TableTest methodsFor: 'PutTokenTests' stamp: 'D S 11/1/2020 20:48:19'!
test33RaiseErrorWhenPuttingTokenXWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	
	^ [aGame putXAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOwnTokenThere)).].

	! !

!methodRemoval: TableTest #test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 20:48:19'!
test34RaiseErrorWhenPuttingTokenXWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	
	^ [aGame putXAt: 0@0.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOwnTokenThere)).].

	!
!TableTest methodsFor: 'PutTokenTests' stamp: 'D S 11/1/2020 20:48:26'!
test34RaiseErrorWhenPuttingTokenOWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	^ [aGame putOAt: 1@1.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOwnTokenThere)).].

	! !

!methodRemoval: TableTest #test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 20:48:26'!
test35RaiseErrorWhenPuttingTokenOWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	^ [aGame putOAt: 1@1.	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOwnTokenThere)).].

	!
!TableTest methodsFor: 'PutTokenTests' stamp: 'D S 11/1/2020 20:48:34'!
test35RaiseErrorWhenTryingToPutAFourthXToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	^ [aGame putXAt: 1@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionNoMoreTokens )).].

	! !

!methodRemoval: TableTest #test40RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 20:48:34'!
test40RaiseErrorWhenTryingToPutAFourthXToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	^ [aGame putXAt: 1@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionNoMoreTokens )).].

	!
!TableTest methodsFor: 'PutTokenTests' stamp: 'D S 11/1/2020 20:48:39'!
test36RaiseErrorWhenTryingToPutAFourthOToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@0.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame putOAt: 0@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionNoMoreTokens )).].

	! !

!methodRemoval: TableTest #test41RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 20:48:39'!
test41RaiseErrorWhenTryingToPutAFourthOToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@0.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame putOAt: 0@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionNoMoreTokens )).].

	!
!TableTest methodsFor: 'PutTokenTests' stamp: 'D S 11/1/2020 20:48:45'!
test38RaiseErrorWhenPlayerOPutATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame := aGame putXAt: 1@1.
	^ [aGame putOAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

! !

!methodRemoval: TableTest #test47RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:48:45'!
test47RaiseErrorWhenPlayerOPutATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame := aGame putXAt: 1@1.
	^ [aGame putOAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

!
!TableTest methodsFor: 'PutTokenTests' stamp: 'D S 11/1/2020 20:48:54'!
test39RaiseErrorWhenPlayerXPutATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!methodRemoval: TableTest #test47RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:48:54'!
test47RaiseErrorWhenPlayerXPutATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	!
!TableTest methodsFor: 'PutTokenTests' stamp: 'D S 11/1/2020 20:49:10'!
test37RaiseErrorWhenPlayerOPutATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame := aGame putXAt: 1@1.
	^ [aGame putOAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

! !

!methodRemoval: TableTest #test38RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:49:10'!
test38RaiseErrorWhenPlayerOPutATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame := aGame putXAt: 1@1.
	^ [aGame putOAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

!
!TableTest methodsFor: 'PutTokenTests' stamp: 'D S 11/1/2020 20:49:15'!
test38RaiseErrorWhenPlayerXPutATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!methodRemoval: TableTest #test39RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:49:15'!
test39RaiseErrorWhenPlayerXPutATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	^ [aGame putXAt: 3@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:49:39'!
test40RaiseErrorWhenMovingTokenXWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 2@1 to: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	! !

!methodRemoval: TableTest #test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 20:49:39'!
test36RaiseErrorWhenMovingTokenXWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 2@1 to: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:49:55'!
test41RaiseErrorWhenMovingTokenXWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 2@1 to: 1@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOwnTokenThere )).].

	! !

!methodRemoval: TableTest #test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 20:49:55'!
test37RaiseErrorWhenMovingTokenXWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 2@1 to: 1@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOwnTokenThere )).].

	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:49:59'!
test42RaiseErrorWhenMovingTokenOWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame oMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	! !

!methodRemoval: TableTest #test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 20:49:59'!
test38RaiseErrorWhenMovingTokenOWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame oMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:50:05'!
test43RaiseErrorWhenMovingTokenOWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame oMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOwnTokenThere )).].

	! !

!methodRemoval: TableTest #test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 20:50:05'!
test39RaiseErrorWhenMovingTokenOWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame oMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOwnTokenThere )).].

	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:50:11'!
test44RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	^ [aGame oMoveTokenFrom: 2@1 to: 0@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionInvalidMovement )).].
! !

!methodRemoval: TableTest #test42RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/1/2020 20:50:11'!
test42RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	^ [aGame oMoveTokenFrom: 2@1 to: 0@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionInvalidMovement )).].
!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:50:21'!
test45RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 0@0 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement )).].
! !

!methodRemoval: TableTest #test43RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/1/2020 20:50:22'!
test43RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 0@0 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement )).].
!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:50:28'!
test46RaiseErrorWhenPlayerOTryAnInvalidMovement
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@0.
	aGame xMoveTokenFrom: 0@1 to: 0@	2.
	^ [aGame oMoveTokenFrom: 1@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement)).].

	! !

!methodRemoval: TableTest #test43RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 20:50:28'!
test43RaiseErrorWhenPlayerOTryAnInvalidMovement
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@0.
	aGame xMoveTokenFrom: 0@1 to: 0@	2.
	^ [aGame oMoveTokenFrom: 1@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement)).].

	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:50:36'!
test48RaiseErrorWhenPlayerOTryAnInvalidMovement
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@0.
	aGame xMoveTokenFrom: 0@1 to: 0@	2.
	^ [aGame oMoveTokenFrom: 1@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement)).].

	! !

!methodRemoval: TableTest #test46RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 20:50:36'!
test46RaiseErrorWhenPlayerOTryAnInvalidMovement
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@0.
	aGame xMoveTokenFrom: 0@1 to: 0@	2.
	^ [aGame oMoveTokenFrom: 1@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement)).].

	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:50:44'!
test47RaiseErrorWhenPlayerXTryMoveAOpponentToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame oMoveTokenFrom: 2@0 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionCantMoveOpponentTokens )).].	! !

!methodRemoval: TableTest #test46RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 20:50:44'!
test46RaiseErrorWhenPlayerXTryMoveAOpponentToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame oMoveTokenFrom: 2@0 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionCantMoveOpponentTokens )).].	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:50:58'!
test45RaiseErrorWhenPlayerOTryAnInvalidMovement
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@0.
	aGame xMoveTokenFrom: 0@1 to: 0@	2.
	^ [aGame oMoveTokenFrom: 1@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement)).].

	! !

!methodRemoval: TableTest #test48RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 20:50:58'!
test48RaiseErrorWhenPlayerOTryAnInvalidMovement
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@0.
	aGame xMoveTokenFrom: 0@1 to: 0@	2.
	^ [aGame oMoveTokenFrom: 1@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement)).].

	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:51:20'!
test43RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 0@0 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement )).].
! !

!methodRemoval: TableTest #test45RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/1/2020 20:51:20'!
test45RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 0@0 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement )).].
!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:51:33'!
test44RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 0@0 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement )).].
! !

!methodRemoval: TableTest #test43RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/1/2020 20:51:33'!
test43RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 0@0 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement )).].
!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:51:40'!
test45RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	^ [aGame oMoveTokenFrom: 2@1 to: 0@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionInvalidMovement )).].
! !

!methodRemoval: TableTest #test44RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/1/2020 20:51:40'!
test44RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	^ [aGame oMoveTokenFrom: 2@1 to: 0@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionInvalidMovement )).].
!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:51:58'!
test46RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 0@0 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement )).].
! !

!methodRemoval: TableTest #test44RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/1/2020 20:51:58'!
test44RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 0@0 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement )).].
!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:52:07'!
test47RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	^ [aGame oMoveTokenFrom: 2@1 to: 0@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionInvalidMovement )).].
! !

!methodRemoval: TableTest #test45RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/1/2020 20:52:07'!
test45RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	^ [aGame oMoveTokenFrom: 2@1 to: 0@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionInvalidMovement )).].
!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:52:19'!
test48RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	
	^ [aGame xMoveTokenFrom: 2@0 to: 3@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!methodRemoval: TableTest #test45RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:52:19'!
test45RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	
	^ [aGame xMoveTokenFrom: 2@0 to: 3@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:52:34'!
test49RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.
	
	^ [aGame oMoveTokenFrom: 2@2 to: 3@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

	! !

!methodRemoval: TableTest #test46RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:52:34'!
test46RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.
	
	^ [aGame oMoveTokenFrom: 2@2 to: 3@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:53:07'!
test48RaiseErrorWhenPlayerXTryMoveAOpponentToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame oMoveTokenFrom: 2@0 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionCantMoveOpponentTokens )).].	! !

!methodRemoval: TableTest #test47RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 20:53:07'!
test47RaiseErrorWhenPlayerXTryMoveAOpponentToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame oMoveTokenFrom: 2@0 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionCantMoveOpponentTokens )).].	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:53:13'!
test49RaiseErrorWhenPlayerOTryMoveOpponentToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame xMoveTokenFrom: 2@1 to: 2@0.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerO errorDescriptionCantMoveOpponentTokens )).].	! !

!methodRemoval: TableTest #test47RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 20:53:13'!
test47RaiseErrorWhenPlayerOTryMoveOpponentToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame xMoveTokenFrom: 2@1 to: 2@0.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerO errorDescriptionCantMoveOpponentTokens )).].	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:53:22'!
test50RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame xMoveTokenFrom: 2@2 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionNoTokenThere )).].	! !

!methodRemoval: TableTest #test48RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 20:53:22'!
test48RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame xMoveTokenFrom: 2@2 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionNoTokenThere )).].	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:53:29'!
test51RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@2.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame oMoveTokenFrom: 2@0 to: 1@0.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerO errorDescriptionNoTokenThere )).].	! !

!methodRemoval: TableTest #test49RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 20:53:29'!
test49RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@2.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame oMoveTokenFrom: 2@0 to: 1@0.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerO errorDescriptionNoTokenThere )).].	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:54:04'!
test52RaiseErrorWhenPlayerXTryMoveAOpponentToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame oMoveTokenFrom: 2@0 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionCantMoveOpponentTokens )).].	! !

!methodRemoval: TableTest #test48RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 20:54:04'!
test48RaiseErrorWhenPlayerXTryMoveAOpponentToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame oMoveTokenFrom: 2@0 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionCantMoveOpponentTokens )).].	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:54:11'!
test53RaiseErrorWhenPlayerOTryMoveOpponentToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame xMoveTokenFrom: 2@1 to: 2@0.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerO errorDescriptionCantMoveOpponentTokens )).].	! !

!methodRemoval: TableTest #test49RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 20:54:11'!
test49RaiseErrorWhenPlayerOTryMoveOpponentToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame xMoveTokenFrom: 2@1 to: 2@0.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerO errorDescriptionCantMoveOpponentTokens )).].	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:54:35'!
test39RaiseErrorWhenMovingTokenXWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 2@1 to: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	! !

!methodRemoval: TableTest #test40RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 20:54:35'!
test40RaiseErrorWhenMovingTokenXWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 2@1 to: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:54:40'!
test40RaiseErrorWhenMovingTokenXWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 2@1 to: 1@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOwnTokenThere )).].

	! !

!methodRemoval: TableTest #test41RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 20:54:40'!
test41RaiseErrorWhenMovingTokenXWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 2@1 to: 1@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOwnTokenThere )).].

	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:54:45'!
test41RaiseErrorWhenMovingTokenOWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame oMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	! !

!methodRemoval: TableTest #test42RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 20:54:45'!
test42RaiseErrorWhenMovingTokenOWhereThereIsATokenX
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 2@0.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame oMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionOponentTokenInPosition)).].

	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:54:50'!
test42RaiseErrorWhenMovingTokenOWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame oMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOwnTokenThere )).].

	! !

!methodRemoval: TableTest #test43RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 20:54:50'!
test43RaiseErrorWhenMovingTokenOWhereThereIsATokenO
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 2@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@2.
	^ [aGame oMoveTokenFrom: 2@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOwnTokenThere )).].

	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:54:56'!
test43RaiseErrorWhenPlayerXTryAnInvalidMovement
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	
	^ [aGame xMoveTokenFrom: 1@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement)).].

	! !

!methodRemoval: TableTest #test44RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 20:54:56'!
test44RaiseErrorWhenPlayerXTryAnInvalidMovement
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	
	^ [aGame xMoveTokenFrom: 1@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement)).].

	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:55:01'!
test44RaiseErrorWhenPlayerOTryAnInvalidMovement
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@0.
	aGame xMoveTokenFrom: 0@1 to: 0@	2.
	^ [aGame oMoveTokenFrom: 1@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement)).].

	! !

!methodRemoval: TableTest #test45RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 20:55:01'!
test45RaiseErrorWhenPlayerOTryAnInvalidMovement
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@0.
	aGame xMoveTokenFrom: 0@1 to: 0@	2.
	^ [aGame oMoveTokenFrom: 1@2 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement)).].

	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:55:08'!
test45RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 0@0 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement )).].
! !

!methodRemoval: TableTest #test46RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/1/2020 20:55:08'!
test46RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 2@2.
	^ [aGame xMoveTokenFrom: 0@0 to: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionInvalidMovement )).].
!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:55:13'!
test46RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	^ [aGame oMoveTokenFrom: 2@1 to: 0@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionInvalidMovement )).].
! !

!methodRemoval: TableTest #test47RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/1/2020 20:55:13'!
test47RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	^ [aGame oMoveTokenFrom: 2@1 to: 0@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionInvalidMovement )).].
!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:55:19'!
test47RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	
	^ [aGame xMoveTokenFrom: 2@0 to: 3@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	! !

!methodRemoval: TableTest #test48RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:55:19'!
test48RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	
	^ [aGame xMoveTokenFrom: 2@0 to: 3@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerX errorDescriptionOutOfRange)).].

	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:55:24'!
test48RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.
	
	^ [aGame oMoveTokenFrom: 2@2 to: 3@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

	! !

!methodRemoval: TableTest #test49RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:55:24'!
test49RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@0.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 1@1 to: 1@0.
	
	^ [aGame oMoveTokenFrom: 2@2 to: 3@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (PlayerO errorDescriptionOutOfRange)).].

	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:55:30'!
test49RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame xMoveTokenFrom: 2@2 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionNoTokenThere )).].	! !

!methodRemoval: TableTest #test50RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 20:55:30'!
test50RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame xMoveTokenFrom: 2@2 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionNoTokenThere )).].	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:55:37'!
test50RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@2.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame oMoveTokenFrom: 2@0 to: 1@0.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerO errorDescriptionNoTokenThere )).].	! !

!methodRemoval: TableTest #test51RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 20:55:37'!
test51RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@2.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame oMoveTokenFrom: 2@0 to: 1@0.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerO errorDescriptionNoTokenThere )).].	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:55:42'!
test51RaiseErrorWhenPlayerXTryMoveAOpponentToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame oMoveTokenFrom: 2@0 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionCantMoveOpponentTokens )).].	! !

!methodRemoval: TableTest #test52RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 20:55:42'!
test52RaiseErrorWhenPlayerXTryMoveAOpponentToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	^[aGame oMoveTokenFrom: 2@0 to: 2@1.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerX errorDescriptionCantMoveOpponentTokens )).].	!
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/1/2020 20:55:47'!
test52RaiseErrorWhenPlayerOTryMoveOpponentToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame xMoveTokenFrom: 2@1 to: 2@0.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerO errorDescriptionCantMoveOpponentTokens )).].	! !

!methodRemoval: TableTest #test53RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 20:55:47'!
test53RaiseErrorWhenPlayerOTryMoveOpponentToken
	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@1.
	aGame putXAt: 2@0.	
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 2@0 to: 2@1.
	^[aGame xMoveTokenFrom: 2@1 to: 2@0.
		self fail]
		on: Error
		do: [:anError| self assert: (anError messageText = (PlayerO errorDescriptionCantMoveOpponentTokens )).].	!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test09PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test10PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test12OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test13XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test14OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test15ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test16ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test17ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test20ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test21ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test22ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test23ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test24ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test25ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test26ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test27PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test28PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test29RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 20:55:52'!
PASSED!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test09PlayerXMovesTokenCorrectly stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test10PlayerOMovesTokenCorrectly stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test12OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test13XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test14OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test15ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test16ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test17ThreeXTokensInBottomRowEndGame stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInBottomRowEndGame stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test20ThreeOTokensInTopRowEndGame stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test21ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test22ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test23ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test24ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test25ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test26ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test27PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test28PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test29RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/1/2020 20:56:24'!
PASSED!

----QUIT----(1 November 2020 20:56:59) CuisUniversity-4383.image priorSource: 19453365!

----STARTUP---- (2 November 2020 13:24:17) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisUniversity/CuisUniversity-4383.image!

!Game class methodsFor: 'instance creation' stamp: 'D S 11/2/2020 13:25:07'!
errorDescriptionPlayerOWon

	^'The player O Won'! !
!Game methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 13:25:07' prior: 50936912!
checkIfPlayerOWon

	^ self hasPlayerOWon ifTrue:[self error: self class errorDescriptionPlayerOWon.]
					ifFalse:[playerMoving := playerX.]! !

!methodRemoval: Game class #menuDescriptionPlayerOWon stamp: 'D S 11/2/2020 13:25:07'!
menuDescriptionPlayerOWon

	^'The player O Won'!
!Game class methodsFor: 'instance creation' stamp: 'D S 11/2/2020 13:25:43'!
errorDescriptionPlayerXWon

	^'The player X Won'! !
!Game methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 13:25:43' prior: 50936904!
checkIfPlayerXWon

	^ self hasPlayerXWon ifTrue:[self error: self class errorDescriptionPlayerXWon.]
					ifFalse: [	playerMoving := playerO.]! !

!methodRemoval: Game class #menuDescriptionPlayerXWon stamp: 'D S 11/2/2020 13:25:43'!
menuDescriptionPlayerXWon

	^'The player X Won'!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:25:57' prior: 50939623!
test11XTokensInAscendingDiagonalEndsGame

	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.

	^ [	aGame putXAt: 2@2..	
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionPlayerXWon )).].
! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:26:04' prior: 50939648!
test12OTokensInAscendingDiagonalEndsGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 2@1.

	^ [	aGame putOAt: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionPlayerOWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:26:11' prior: 50939674!
test13XTokensInDescendingDiagonalEndsGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@0.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	
	^ [	aGame putXAt: 2@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionPlayerXWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:26:18' prior: 50939699!
test14OTokensInDescendingDiagonalEndsGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 2@1.

	^ [	aGame putOAt: 2@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionPlayerOWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:26:24' prior: 50939726!
test15ThreeXTokensInMiddleRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@0.
	^ [	aGame putXAt: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionPlayerXWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:26:30' prior: 50939751!
test16ThreeOTokensInMiddleRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.

	^ [	aGame putOAt: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionPlayerOWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:26:36' prior: 50939777!
test17ThreeXTokensInBottomRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@0.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 2@2.
	
	^ [	aGame putXAt: 2@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionPlayerXWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:26:43' prior: 50939828!
test19ThreeOTokensInBottomRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@0.
	aGame putXAt: 2@1.

	^ [	aGame putOAt: 2@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionPlayerOWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:26:49' prior: 50935804!
test18ThreeXTokensInTopRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 0@2.
	aGame putOAt: 0@0.

	^ [	aGame putXAt: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionPlayerXWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:27:05' prior: 50939880!
test20ThreeOTokensInTopRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 0@2.
	aGame putXAt: 1@0.
	
	^ [	aGame putOAt: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionPlayerOWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:27:12'!
test19ThreeXTokensInTopRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 0@2.
	aGame putOAt: 0@0.

	^ [	aGame putXAt: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionPlayerXWon )).].! !

!methodRemoval: TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/2/2020 13:27:12'!
test18ThreeXTokensInTopRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 0@2.
	aGame putOAt: 0@0.

	^ [	aGame putXAt: 2@2.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionPlayerXWon )).].!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:27:16'!
test18ThreeOTokensInBottomRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@0.
	aGame putXAt: 2@1.

	^ [	aGame putOAt: 2@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionPlayerOWon )).].! !

!methodRemoval: TableTest #test19ThreeOTokensInBottomRowEndGame stamp: 'D S 11/2/2020 13:27:16'!
test19ThreeOTokensInBottomRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@0.
	aGame putXAt: 2@1.

	^ [	aGame putOAt: 2@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionPlayerOWon )).].!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:27:25' prior: 50939906!
test21ThreeXTokensInSecondColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 0@2.

	^ [	aGame putXAt: 1@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionPlayerXWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:27:32' prior: 50939931!
test22ThreeOTokensInSecondColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.
	aGame putXAt: 2@2.
	^ [	aGame putOAt: 1@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionPlayerOWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:27:38' prior: 50939957!
test23ThreeXTokensInFirstColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@0.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.

	^ [	aGame putXAt: 0@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionPlayerXWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:27:43' prior: 50939982!
test24ThreeOTokensInFirstColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@1.
	aGame putXAt: 1@2.
	aGame putOAt: 0@2.
	aGame putXAt: 2@2.
	
	^ [	aGame putOAt: 0@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionPlayerOWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:27:48' prior: 50940008!
test25ThreeXTokensInThirdColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@2.

	^ [	aGame putXAt: 2@0.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionPlayerXWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:27:53' prior: 50940033!
test26ThreeOTokensInThirdColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 2@0.
	aGame putXAt: 1@2.
	aGame putOAt: 2@2.
	aGame putXAt: 0@0.
	
	^ [	aGame putOAt: 2@1.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionPlayerOWon )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:31:58'!
alHacer: aClosure apareceMensajeErrorConDescripcion: anErrorDescription

	^ [	aClosure.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game sends: anErrorDescription )).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:33:01' prior: 50941929!
test11XTokensInAscendingDiagonalEndsGame

	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.

	^self alHacer: [aGame putXAt: 2@2.] apareceMensajeErrorConDescripcion: [Game errorDescriptionPlayerXWon].
"	^ [	aGame putXAt: 2@2..
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionPlayerXWon )).]."
! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:33:15' prior: 50942193!
alHacer: aClosure apareceMensajeErrorConDescripcion: anErrorDescription

	^ [	aClosure.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = anErrorDescription ).].! !

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 13:33:21'!
FAILURE!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 13:33:21'!
FAILURE!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 13:33:35'!
FAILURE!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 13:33:35'!
FAILURE!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 13:34:10'!
FAILURE!

!testRun: #TableTest #test12OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 13:34:43'!
PASSED!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:35:12' prior: 50942203!
test11XTokensInAscendingDiagonalEndsGame

	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.

"	^self alHacer: [aGame putXAt: 2@2.] apareceMensajeErrorConDescripcion: [Game errorDescriptionPlayerXWon].
"	^ [	aGame putXAt: 2@2..
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionPlayerXWon )).].
! !

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 13:35:16'!
PASSED!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:35:50' prior: 50942248!
test11XTokensInAscendingDiagonalEndsGame

	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.

	^self alHacer: [aGame putXAt: 2@2.] apareceMensajeErrorConDescripcion: (Game errorDescriptionPlayerXWon).
"	^ [	aGame putXAt: 2@2..
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionPlayerXWon )).].
"! !

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 13:35:54'!
FAILURE!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 13:35:54'!
FAILURE!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:36:24' prior: 50942268!
test11XTokensInAscendingDiagonalEndsGame

	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.

	^self alHacer: [aGame putXAt: 2@2. self fail.] apareceMensajeErrorConDescripcion: (Game errorDescriptionPlayerXWon).
"	^ [	aGame putXAt: 2@2..
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = (Game errorDescriptionPlayerXWon )).].
"! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:36:38' prior: 50942219!
alHacer: aClosure apareceMensajeErrorConDescripcion: anErrorDescription

	^ aClosure
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = anErrorDescription ).].! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:36:45' prior: 50942308!
alHacer: aClosure apareceMensajeErrorConDescripcion: anErrorDescription

	^ aClosure
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = anErrorDescription ).].! !

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 13:36:48'!
PASSED!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:37:08' prior: 50942291!
test11XTokensInAscendingDiagonalEndsGame

	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.

	^self alHacer: [aGame putXAt: 2@2. self fail.] apareceMensajeErrorConDescripcion: (Game errorDescriptionPlayerXWon).
! !

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 13:37:10'!
PASSED!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:37:21' prior: 50941956!
test13XTokensInDescendingDiagonalEndsGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@0.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	
	^self alHacer: [aGame putXAt: 2@0. self fail.] apareceMensajeErrorConDescripcion: (Game errorDescriptionPlayerXWon).
! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:37:29' prior: 50941983!
test15ThreeXTokensInMiddleRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@0.
	^self alHacer: [aGame putXAt: 2@1. self fail.] apareceMensajeErrorConDescripcion: (Game errorDescriptionPlayerXWon).
! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:37:36' prior: 50942009!
test17ThreeXTokensInBottomRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@0.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 2@2.
	
	^self alHacer: [aGame putXAt: 2@0. self fail.] apareceMensajeErrorConDescripcion: (Game errorDescriptionPlayerXWon).
! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:37:44' prior: 50942061!
test19ThreeXTokensInTopRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 0@2.
	aGame putOAt: 0@0.

	^self alHacer: [aGame putXAt: 2@2. self fail.] apareceMensajeErrorConDescripcion: (Game errorDescriptionPlayerXWon).
! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:37:53' prior: 50942113!
test21ThreeXTokensInSecondColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 0@2.

	^self alHacer: [aGame putXAt: 1@0. self fail.] apareceMensajeErrorConDescripcion: (Game errorDescriptionPlayerXWon).
! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:38:06' prior: 50942140!
test23ThreeXTokensInFirstColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@0.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.

	^self alHacer: [aGame putXAt: 20@0. self fail.] apareceMensajeErrorConDescripcion: (Game errorDescriptionPlayerXWon).
! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:38:09' prior: 50942404!
test23ThreeXTokensInFirstColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@0.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.

	^self alHacer: [aGame putXAt: 0@0. self fail.] apareceMensajeErrorConDescripcion: (Game errorDescriptionPlayerXWon).
! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:38:27' prior: 50942167!
test25ThreeXTokensInThirdColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@2.

	^self alHacer: [aGame putXAt: 2@0. self fail.] apareceMensajeErrorConDescripcion: (Game errorDescriptionPlayerXWon).
! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:38:51'!
verificarAlHacer: aClosure apareceMensajeErrorConDescripcion: anErrorDescription

	^ aClosure
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = anErrorDescription ).].! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 13:38:51' prior: 50942329!
test11XTokensInAscendingDiagonalEndsGame

	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.

	^self verificarAlHacer: [aGame putXAt: 2@2. self fail.] apareceMensajeErrorConDescripcion: (Game errorDescriptionPlayerXWon).
! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 13:38:51' prior: 50942356!
test15ThreeXTokensInMiddleRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 0@1.
	aGame putOAt: 1@0.
	^self verificarAlHacer: [aGame putXAt: 2@1. self fail.] apareceMensajeErrorConDescripcion: (Game errorDescriptionPlayerXWon).
! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 13:38:51' prior: 50942344!
test13XTokensInDescendingDiagonalEndsGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@0.
	aGame putXAt: 1@1.
	aGame putOAt: 1@2.
	
	^self verificarAlHacer: [aGame putXAt: 2@0. self fail.] apareceMensajeErrorConDescripcion: (Game errorDescriptionPlayerXWon).
! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 13:38:51' prior: 50942368!
test17ThreeXTokensInBottomRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@0.
	aGame putOAt: 1@2.
	aGame putXAt: 0@0.
	aGame putOAt: 2@2.
	
	^self verificarAlHacer: [aGame putXAt: 2@0. self fail.] apareceMensajeErrorConDescripcion: (Game errorDescriptionPlayerXWon).
! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 13:38:51' prior: 50942380!
test19ThreeXTokensInTopRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 0@2.
	aGame putOAt: 0@0.

	^self verificarAlHacer: [aGame putXAt: 2@2. self fail.] apareceMensajeErrorConDescripcion: (Game errorDescriptionPlayerXWon).
! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 13:38:51' prior: 50942392!
test21ThreeXTokensInSecondColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 0@2.

	^self verificarAlHacer: [aGame putXAt: 1@0. self fail.] apareceMensajeErrorConDescripcion: (Game errorDescriptionPlayerXWon).
! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 13:38:51' prior: 50942428!
test25ThreeXTokensInThirdColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 2@1.
	aGame putOAt: 1@0.
	aGame putXAt: 2@2.
	aGame putOAt: 1@2.

	^self verificarAlHacer: [aGame putXAt: 2@0. self fail.] apareceMensajeErrorConDescripcion: (Game errorDescriptionPlayerXWon).
! !
!TableTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 13:38:51' prior: 50942416!
test23ThreeXTokensInFirstColumnEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 1@0.
	aGame putXAt: 0@2.
	aGame putOAt: 1@2.

	^self verificarAlHacer: [aGame putXAt: 0@0. self fail.] apareceMensajeErrorConDescripcion: (Game errorDescriptionPlayerXWon).
! !

!methodRemoval: TableTest #alHacer:apareceMensajeErrorConDescripcion: stamp: 'D S 11/2/2020 13:38:51'!
alHacer: aClosure apareceMensajeErrorConDescripcion: anErrorDescription

	^ aClosure
		on: Error 
		do: [ :anError | 
			self assert: (anError messageText = anErrorDescription ).].!
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:39:25' prior: 50941942!
test12OTokensInAscendingDiagonalEndsGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@0.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 2@1.

	^self verificarAlHacer: [aGame putOAt: 2@2. self fail.] apareceMensajeErrorConDescripcion: (Game errorDescriptionPlayerOWon).
! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:39:35' prior: 50941969!
test14OTokensInDescendingDiagonalEndsGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 1@2.
	aGame putOAt: 1@1.
	aGame putXAt: 2@1.

	^self verificarAlHacer: [aGame putOAt: 2@0. self fail.] apareceMensajeErrorConDescripcion: (Game errorDescriptionPlayerOWon).
! !
!TableTest methodsFor: 'GameOverTests' stamp: 'D S 11/2/2020 13:39:43' prior: 50941996!
test16ThreeOTokensInMiddleRowEndGame

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 1@0.
	aGame putOAt: 0@1.
	aGame putXAt: 2@2.

	^self verificarAlHacer: [aGame putOAt: 2@1. self fail.] apareceMensajeErrorConDescripcion: (Game errorDescriptionPlayerOWon).
! !

----STARTUP---- (2 November 2020 13:40:16) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisUniversity/CuisUniversity-4383.image!


!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/2/2020 13:40:24'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/2/2020 13:40:24'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/2/2020 13:40:24'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 13:40:24'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 13:40:24'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/2/2020 13:40:24'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/2/2020 13:40:24'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/2/2020 13:40:24'!
PASSED!

!testRun: #TableTest #test09PlayerXMovesTokenCorrectly stamp: 'D S 11/2/2020 13:40:24'!
PASSED!

!testRun: #TableTest #test10PlayerOMovesTokenCorrectly stamp: 'D S 11/2/2020 13:40:24'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 13:40:24'!
PASSED!

!testRun: #TableTest #test12OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 13:40:24'!
PASSED!

!testRun: #TableTest #test13XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 13:40:24'!
PASSED!

!testRun: #TableTest #test14OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 13:40:24'!
PASSED!

!testRun: #TableTest #test15ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 13:40:24'!
PASSED!

!testRun: #TableTest #test16ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 13:40:24'!
PASSED!

!testRun: #TableTest #test17ThreeXTokensInBottomRowEndGame stamp: 'D S 11/2/2020 13:40:24'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/2/2020 13:40:24'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInBottomRowEndGame stamp: 'D S 11/2/2020 13:40:24'!
PASSED!

!testRun: #TableTest #test20ThreeOTokensInTopRowEndGame stamp: 'D S 11/2/2020 13:40:24'!
PASSED!

!testRun: #TableTest #test21ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 13:40:24'!
PASSED!

!testRun: #TableTest #test22ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 13:40:24'!
PASSED!

!testRun: #TableTest #test23ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 13:40:24'!
PASSED!

!testRun: #TableTest #test24ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 13:40:24'!
PASSED!

!testRun: #TableTest #test25ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 13:40:24'!
PASSED!

!testRun: #TableTest #test26ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 13:40:24'!
PASSED!

!testRun: #TableTest #test27PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/2/2020 13:40:25'!
PASSED!

!testRun: #TableTest #test28PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/2/2020 13:40:25'!
PASSED!

!testRun: #TableTest #test29RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/2/2020 13:40:25'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/2/2020 13:40:25'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 13:40:25'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 13:40:25'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 13:40:25'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 13:40:25'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/2/2020 13:40:25'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/2/2020 13:40:25'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 13:40:25'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 13:40:25'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 13:40:25'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 13:40:25'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 13:40:25'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 13:40:25'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/2/2020 13:40:25'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/2/2020 13:40:25'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 13:40:25'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 13:40:25'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 13:40:25'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 13:40:25'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 13:40:25'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 13:40:25'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/2/2020 13:40:25'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/2/2020 13:40:25'!
PASSED!

----End fileIn of /home/dn-01/Descargas/SolucionCodigoRepetido/CodigoRepetido-SolucionConSetup.st----!

!classRemoval: #NameOfSubclass stamp: 'D S 11/2/2020 13:44:14'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-EjercicioConSetup'!

----End fileIn of /home/dn-01/Descargas/SolucionCodigoRepetido/CodigoRepetido-SolucionConSetup.st----!
!Game methodsFor: 'accessing --Private--' stamp: 'D S 11/2/2020 13:52:55'!
playerHasThreeInAColumn: aPlayer
	|positionTokens|
	
	positionTokens := aPlayer positionToken.
	^((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]))! !
!Game methodsFor: 'accessing --Private--' stamp: 'D S 11/2/2020 13:53:30'!
playerHasThreeInARow: aPlayer
	|positionTokens|
	
	positionTokens := aPlayer positionToken.

	^((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=0]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=1]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=2])).! !
!Game methodsFor: 'accessing --Private--' stamp: 'D S 11/2/2020 13:53:39'!
playerHasThreeInADiagonal: aPlayer
	|positionTokens|
	
	positionTokens := aPlayer positionToken.
	
	^((positionTokens = (Set with: 0@0 with: 1@1 with: 2@2)) or:
	(positionTokens = (Set with: 2@0 with: 1@1 with: 0@2))).! !
!Game methodsFor: 'actions' stamp: 'D S 11/2/2020 13:57:01' prior: 50932560!
putXAt: aPoint
	
	self checkPlayerOHasATokenIn: aPoint.
	playerMoving putXAt: aPoint.
	self checkIfWon: playerX
! !
!Game methodsFor: 'actions' stamp: 'D S 11/2/2020 13:57:25' prior: 50942764!
putXAt: aPoint
	
	self checkPlayerOHasATokenIn: aPoint.
	playerMoving putXAt: aPoint.
	self checkIfWon: playerX ifNotDo:[].! !
!Game methodsFor: 'actions' stamp: 'D S 11/2/2020 13:58:31' prior: 50942771!
putXAt: aPoint
	
	self checkPlayerOHasATokenIn: aPoint.
	playerMoving putXAt: aPoint.
	self If: playerX WonDo: [] ifNotDo:[playerMoving := playerO.].! !
!Game methodsFor: 'actions' stamp: 'D S 11/2/2020 14:00:01' prior: 50942778!
putXAt: aPoint
	
	self checkPlayerOHasATokenIn: aPoint.
	playerMoving putXAt: aPoint.
	self If: playerX WonDo: [self error: self class menuDescriptionPlayerXWon.] ifNotDo:[playerMoving := playerO.].! !
!Game methodsFor: 'accessing --Private--' stamp: 'D S 11/2/2020 14:03:54'!
hasPlayerWon: aPlayer
	
	^(aPlayer tokensPlaced ) = 3 and: ((self playerHasThreeInAColumn: aPlayer) | (self playerHasThreeInADiagonal: aPlayer) | (self playerHasThreeInARow: aPlayer)).! !
!Game methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 14:05:22'!
If: aPlayer WonDo: aClosureIfTrue ifNotDo: aClosureIfFalse.
	
	^ (self hasPlayerWon: aPlayer) ifTrue: aClosureIfTrue
					ifFalse: aClosureIfFalse.! !
!Game methodsFor: 'actions' stamp: 'D S 11/2/2020 14:05:44' prior: 50932554!
putOAt: aPoint
	
	self checkPlayerXHasATokenIn: aPoint.
	playerMoving putOAt: aPoint.
	self If: playerO WonDo: [self error: self class menuDescriptionPlayerOWon.] ifNotDo:[playerMoving := playerX.].! !
!Game methodsFor: 'actions' stamp: 'D S 11/2/2020 14:05:56' prior: 50932545!
oMoveTokenFrom: aPointOfAOToken to: aDestinationPoint 
	
	self checkPlayerXHasATokenIn: aDestinationPoint.
	playerMoving oMoveTokenFrom: aPointOfAOToken to: aDestinationPoint. 
	self If: playerO WonDo: [self error: self class menuDescriptionPlayerOWon.] ifNotDo:[playerMoving := playerX.].! !
!Game methodsFor: 'actions' stamp: 'D S 11/2/2020 14:06:01' prior: 50932700!
xMoveTokenFrom: aPointOfAXToken to: aDestinationPoint 
	
	self checkPlayerOHasATokenIn: aDestinationPoint.
	playerMoving xMoveTokenFrom: aPointOfAXToken to: aDestinationPoint.
	self If: playerX WonDo: [self error: self class menuDescriptionPlayerXWon.] ifNotDo:[playerMoving := playerO.].! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test09PlayerXMovesTokenCorrectly stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test10PlayerOMovesTokenCorrectly stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test12OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test13XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test14OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test15ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test16ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test17ThreeXTokensInBottomRowEndGame stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInBottomRowEndGame stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test20ThreeOTokensInTopRowEndGame stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test21ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test22ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test23ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test24ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test25ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test26ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test27PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test28PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test29RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/2/2020 14:06:06'!
PASSED!

!methodRemoval: Game #checkIfPlayerOWon stamp: 'D S 11/2/2020 14:06:15'!
checkIfPlayerOWon

	^ self hasPlayerOWon ifTrue:[self error: self class menuDescriptionPlayerOWon.]
					ifFalse:[playerMoving := playerX.]!

!methodRemoval: Game #checkIfPlayerXWon stamp: 'D S 11/2/2020 14:06:20'!
checkIfPlayerXWon

	^ self hasPlayerXWon ifTrue:[self error: self class menuDescriptionPlayerXWon.]
					ifFalse: [	playerMoving := playerO.]!

!methodRemoval: Game #hasPlayerOWon stamp: 'D S 11/2/2020 14:06:31'!
hasPlayerOWon
	
	^(playerO tokensPlaced ) = 3 and: (self playerOHasThreeInAColumn | self playerOHasThreeInADiagonal | self playerOHasThreeInARow).!

!methodRemoval: Game #hasPlayerXWon stamp: 'D S 11/2/2020 14:06:34'!
hasPlayerXWon
	
	^(playerX tokensPlaced ) = 3 and: (self playerXHasThreeInAColumn | self playerXHasThreeInADiagonal | self playerXHasThreeInARow).!

!methodRemoval: Game #playerOHasThreeInAColumn stamp: 'D S 11/2/2020 14:06:38'!
playerOHasThreeInAColumn
	|positionTokens|
	
	positionTokens := playerO positionToken.
	^((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]))!

!methodRemoval: Game #playerOHasThreeInADiagonal stamp: 'D S 11/2/2020 14:06:42'!
playerOHasThreeInADiagonal
	|positionTokens|
	
	positionTokens := playerO positionToken.
	
	^((positionTokens = (Set with: 0@0 with: 1@1 with: 2@2)) or:
	(positionTokens = (Set with: 2@0 with: 1@1 with: 0@2))).!

!methodRemoval: Game #playerOHasThreeInARow stamp: 'D S 11/2/2020 14:06:45'!
playerOHasThreeInARow
	|positionTokens|
	
	positionTokens := playerO positionToken.

	^((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=0]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=1]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=2])).!

!methodRemoval: Game #playerXHasThreeInAColumn stamp: 'D S 11/2/2020 14:06:48'!
playerXHasThreeInAColumn
	|positionTokens|
	
	positionTokens := playerX positionToken.

	
	^((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]))!

!methodRemoval: Game #playerXHasThreeInADiagonal stamp: 'D S 11/2/2020 14:06:51'!
playerXHasThreeInADiagonal
	|positionTokens|
	
	positionTokens := playerX positionToken.
	
	^((positionTokens = (Set with: 0@0 with: 1@1 with: 2@2)) or:
	(positionTokens = (Set with: 2@0 with: 1@1 with: 0@2))).!

!methodRemoval: Game #playerXHasThreeInARow stamp: 'D S 11/2/2020 14:06:53'!
playerXHasThreeInARow
	|positionTokens|
	
	positionTokens := playerX positionToken.
	
	^((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=0]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=1]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=2])).!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test09PlayerXMovesTokenCorrectly stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test10PlayerOMovesTokenCorrectly stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test12OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test13XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test14OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test15ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test16ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test17ThreeXTokensInBottomRowEndGame stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInBottomRowEndGame stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test20ThreeOTokensInTopRowEndGame stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test21ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test22ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test23ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test24ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test25ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test26ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test27PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test28PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test29RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/2/2020 14:07:02'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/2/2020 14:07:02'!
PASSED!
!Game methodsFor: 'accessing' stamp: 'D S 11/2/2020 14:07:34'!
playerRemainingTokens: aPlayer
	
	^ aPlayer remainingTokens.! !
!Game methodsFor: 'accessing' stamp: 'D S 11/2/2020 14:07:53'!
positionOfTokensOfPlayer: aPlayer
	
	^aPlayer positionToken ! !
!Game methodsFor: 'accessing' stamp: 'D S 11/2/2020 14:08:09'!
isPlaying: aPlayer
	"Se usa == porque se espera que sean el mismo objeto, no que representen lo mismo"
	^(playerMoving == aPlayer).! !
!Game methodsFor: 'accessing' stamp: 'D S 11/2/2020 14:09:26'!
playerX
	"Se usa == porque se espera que sean el mismo objeto, no que representen lo mismo"
	^playerX.! !
!TableTest methodsFor: 'initializationTests' stamp: 'D S 11/2/2020 14:09:44' prior: 50909891!
test02PlayerXMovesFirst

	|aGame|
	aGame := Game startGame.
	
	self assert: (aGame isPlaying: (Game playerX)).! !

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/2/2020 14:09:47'!
ERROR!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/2/2020 14:09:47'!
ERROR!
!TableTest methodsFor: 'initializationTests' stamp: 'D S 11/2/2020 14:09:53' prior: 50943310!
test02PlayerXMovesFirst

	|aGame|
	aGame := Game startGame.
	
	self assert: (aGame isPlaying: (aGame playerX)).! !

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/2/2020 14:09:56'!
PASSED!
!Game methodsFor: 'accessing' stamp: 'D S 11/2/2020 14:10:07'!
playerO
	"Se usa == porque se espera que sean el mismo objeto, no que representen lo mismo"
	^playerO.! !
!TableTest methodsFor: 'initializationTests' stamp: 'D S 11/2/2020 14:10:30' prior: 50909897!
test03PlayerODoesntMovesFirst

	|aGame|
	aGame := Game startGame.
	
	self deny: (aGame isPlaying: aGame playerO).! !

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/2/2020 14:10:32'!
PASSED!
!TableTest methodsFor: 'TurnTests' stamp: 'D S 10/31/2020 13:44:56' prior: 50909921!
test06PlayerXDoesntMoveSecond

	|aGame|
	aGame := Terni-Lapilli_Game startGame.
	aGame putXAt: 0@0.

	self deny: aGame isPlayingX .! !
!TableTest methodsFor: 'TurnTests' stamp: 'D S 10/29/2020 18:29:54' prior: 50943348!
test06PlayerXDoesntMoveSecond

	|aGame|
	aGame := Table startGame.
	aGame putXAt: 0@0.

	self deny: aGame isPlayingX .! !
!TableTest methodsFor: 'TurnTests' stamp: 'D S 11/2/2020 14:12:02' prior: 50943355!
test06PlayerXDoesntMoveSecond

	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.

	self deny: aGame isPlayingX .! !
!TableTest methodsFor: 'initializationTests' stamp: 'D S 10/31/2020 13:46:22' prior: 50943338!
test03PlayerODoesntMovesFirst

	|aGame|
	aGame := Game startGame.
	
	self deny: aGame isPlayingO.! !
!TableTest methodsFor: 'initializationTests' stamp: 'D S 11/2/2020 14:09:44' prior: 50943322!
test02PlayerXMovesFirst

	|aGame|
	aGame := Game startGame.
	
	self assert: (aGame isPlaying: (Game playerX)).! !
!TableTest methodsFor: 'initializationTests' stamp: 'D S 11/2/2020 14:09:44' prior: 50943376!
test02PlayerXMovesFirst

	|aGame|
	aGame := Game startGame.
	
	self assert: (aGame isPlaying: (Game playerX)).! !
!TableTest methodsFor: 'initializationTests' stamp: 'D S 10/31/2020 13:46:18' prior: 50943383!
test02PlayerXMovesFirst

	|aGame|
	aGame := Game startGame.
	
	self assert: aGame isPlayingX.! !

!methodRemoval: Game #isPlaying: stamp: 'D S 11/2/2020 14:13:02'!
isPlaying: aPlayer
	"Se usa == porque se espera que sean el mismo objeto, no que representen lo mismo"
	^(playerMoving == aPlayer).!

!methodRemoval: Game #playerO stamp: 'D S 11/2/2020 14:13:29'!
playerO
	"Se usa == porque se espera que sean el mismo objeto, no que representen lo mismo"
	^playerO.!

!methodRemoval: Game #playerX stamp: 'D S 11/2/2020 14:13:32'!
playerX
	"Se usa == porque se espera que sean el mismo objeto, no que representen lo mismo"
	^playerX.!

!methodRemoval: Game #positionOfTokensOfPlayer: stamp: 'D S 11/2/2020 14:13:47'!
positionOfTokensOfPlayer: aPlayer
	
	^aPlayer positionToken !
!Game methodsFor: 'accessing' stamp: 'D S 11/2/2020 14:15:03'!
positionTokensOfPlayer: aPlayer
	
	^aPlayer positionToken ! !
!Game methodsFor: 'accessing' stamp: 'D S 11/2/2020 14:15:36'!
player: aPlayer hasATokenInPosition: aPoint
	
	^aPlayer hasTokenInPosition: aPoint ! !
!PlayerO methodsFor: 'accessing' stamp: 'D S 11/2/2020 14:16:04'!
hasTokenInPosition: aPoint

	^positionTokens includes: aPoint.! !
!PlayerX methodsFor: 'accessing' stamp: 'D S 11/2/2020 14:16:13'!
hasTokenInPosition: aPoint

	^positionTokens includes: aPoint.! !

!methodRemoval: PlayerO #hasTokenInPosition: stamp: 'D S 11/2/2020 14:17:00'!
hasTokenInPosition: aPoint

	^positionTokens includes: aPoint.!

!methodRemoval: PlayerX #hasTokenInPosition: stamp: 'D S 11/2/2020 14:17:04'!
hasTokenInPosition: aPoint

	^positionTokens includes: aPoint.!

!methodRemoval: Game #player:hasATokenInPosition: stamp: 'D S 11/2/2020 14:17:10'!
player: aPlayer hasATokenInPosition: aPoint
	
	^aPlayer hasTokenInPosition: aPoint !

!methodRemoval: Game #playerRemainingTokens: stamp: 'D S 11/2/2020 14:17:28'!
playerRemainingTokens: aPlayer
	
	^ aPlayer remainingTokens.!

!methodRemoval: Game #positionTokensOfPlayer: stamp: 'D S 11/2/2020 14:17:34'!
positionTokensOfPlayer: aPlayer
	
	^aPlayer positionToken !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test09PlayerXMovesTokenCorrectly stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test10PlayerOMovesTokenCorrectly stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test12OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test13XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test14OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test15ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test16ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test17ThreeXTokensInBottomRowEndGame stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInBottomRowEndGame stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test20ThreeOTokensInTopRowEndGame stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test21ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test22ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test23ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test24ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test25ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test26ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test27PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test28PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test29RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/2/2020 14:17:38'!
PASSED!

----SNAPSHOT----(2 November 2020 14:17:59) CuisUniversity-4383.image priorSource: 19527582!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test09PlayerXMovesTokenCorrectly stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test10PlayerOMovesTokenCorrectly stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test12OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test13XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test14OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test15ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test16ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test17ThreeXTokensInBottomRowEndGame stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInBottomRowEndGame stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test20ThreeOTokensInTopRowEndGame stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test21ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test22ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test23ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test24ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test25ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test26ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test27PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test28PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test29RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/2/2020 14:18:03'!
PASSED!

----QUIT----(2 November 2020 14:20:34) CuisUniversity-4383.image priorSource: 19583437!

----STARTUP---- (2 November 2020 14:26:04) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisUniversity/CuisUniversity-4383.image!

!Game methodsFor: 'accessing' stamp: 'D S 11/2/2020 14:26:56'!
playerXhasTokenInPosition: aPoint
	
	^playerX hasTokenInPosition: aPoint.! !
!Game methodsFor: 'accessing' stamp: 'D S 11/2/2020 14:27:02'!
playerOhasTokenInPosition: aPoint
	
	^playerO hasTokenInPosition: aPoint.! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 14:27:31'!
hasTokenInPosition: aPoint

	^positionTokens includes: aPoint.! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 14:27:41'!
hasTokenInPosition: aPoint

	^positionTokens includes: aPoint.! !
!TableTest methodsFor: 'PutTokenTests' stamp: 'D S 11/2/2020 14:28:22' prior: 50909904!
test04XTokenIsPlacedCorrectly

	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	
	self assert: (aGame playerXHasATokenIn: (0@0))! !
!TableTest methodsFor: 'PutTokenTests' stamp: 'D S 11/2/2020 14:28:50' prior: 50909912!
test05OTokenIsPlacedCorrectly

	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.

	self assert: (aGame playerOHasATokenIn: (1@1)).! !
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/2/2020 14:30:29' prior: 50939571!
test09PlayerXMovesTokenCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 0@2 to: 1@2.

	self assert: (aGame playerXHasATokenIn: (0@2)).
	self assert: (aGame playerXHasATokenIn: (1@1)).
	self assert: (aGame playerXHasATokenIn: (2@1)).! !
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/2/2020 14:30:54' prior: 50939596!
test10PlayerOMovesTokenCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 0@2 to: 1@2.
	
	self assert: (aGame playerOHasATokenIn: (1@2)).
	self assert: (aGame playerOHasATokenIn: (1@1)).
	self assert: (aGame playerOHasATokenIn: (2@1)).
	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionOTokens.! !
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/2/2020 14:30:57' prior: 50943868!
test10PlayerOMovesTokenCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 0@2 to: 1@2.
	
	self assert: (aGame playerOHasATokenIn: (1@2)).
	self assert: (aGame playerOHasATokenIn: (1@1)).
	self assert: (aGame playerOHasATokenIn: (2@1)).
! !
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/2/2020 14:31:01' prior: 50943853!
test09PlayerXMovesTokenCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 0@2 to: 1@2.

	self assert: (aGame playerXHasATokenIn: (1@2)).
	self assert: (aGame playerXHasATokenIn: (1@1)).
	self assert: (aGame playerXHasATokenIn: (2@1)).! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/2/2020 14:31:13'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/2/2020 14:31:13'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/2/2020 14:31:13'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 14:31:13'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 14:31:13'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/2/2020 14:31:13'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/2/2020 14:31:13'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/2/2020 14:31:13'!
PASSED!

!testRun: #TableTest #test09PlayerXMovesTokenCorrectly stamp: 'D S 11/2/2020 14:31:13'!
PASSED!

!testRun: #TableTest #test10PlayerOMovesTokenCorrectly stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test12OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test13XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test14OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test15ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test16ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test17ThreeXTokensInBottomRowEndGame stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInBottomRowEndGame stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test20ThreeOTokensInTopRowEndGame stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test21ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test22ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test23ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test24ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test25ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test26ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test27PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test28PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test29RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/2/2020 14:31:14'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/2/2020 14:31:14'!
PASSED!
!Game methodsFor: 'accessing --Private--' stamp: 'D S 11/2/2020 14:32:27' prior: 50942728!
playerHasThreeInAColumn: aPlayer
	
	^ aPlayer hasThreeInAColumn.! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 14:32:41'!
hasThreeInAColumn
	((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]))! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 14:32:42' prior: 50944098!
hasThreeInAColumn

	((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]))! !
!Game methodsFor: 'accessing --Private--' stamp: 'D S 11/2/2020 14:33:07' prior: 50942754!
playerHasThreeInADiagonal: aPlayer

	^aPlayer hasThreeInADiagonal! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 14:33:26'!
hasThreeInADiagonal

	^((positionTokens = (Set with: 0@0 with: 1@1 with: 2@2)) or:
	(positionTokens = (Set with: 2@0 with: 1@1 with: 0@2))).! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 14:33:29' prior: 50944109!
hasThreeInAColumn

	^((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]))! !
!Game methodsFor: 'accessing --Private--' stamp: 'D S 11/2/2020 14:33:52' prior: 50942741!
playerHasThreeInARow: aPlayer

	^aPlayer hasThreeInARow ! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 14:34:02'!
hasThreeInARow

	^((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=0]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=1]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=2])).! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 14:34:12'!
hasThreeInARow

	^((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=0]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=1]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=2])).! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 14:34:24'!
hasThreeInADiagonal

	^((positionTokens = (Set with: 0@0 with: 1@1 with: 2@2)) or:
	(positionTokens = (Set with: 2@0 with: 1@1 with: 0@2))).! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 14:34:34'!
hasThreeInAColumn

	^((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]))! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test09PlayerXMovesTokenCorrectly stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test10PlayerOMovesTokenCorrectly stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test12OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test13XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test14OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test15ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test16ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test17ThreeXTokensInBottomRowEndGame stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInBottomRowEndGame stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test20ThreeOTokensInTopRowEndGame stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test21ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test22ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test23ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test24ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test25ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test26ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test27PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test28PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test29RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/2/2020 14:34:38'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/2/2020 14:34:38'!
PASSED!
!Game methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 14:37:18'!
checkPlayer:aPlayer HasATokenIn: aPoint

	^ (aPlayer hasTokenInPosition: aPoint) ifTrue:[self error: self class errorDescriptionOponentTokenInPosition]! !
!Game methodsFor: 'actions' stamp: 'D S 11/2/2020 14:37:37' prior: 50942812!
putOAt: aPoint
	
	self checkPlayer: playerX HasATokenIn: aPoint.
	playerMoving putOAt: aPoint.
	self If: playerO WonDo: [self error: self class menuDescriptionPlayerOWon.] ifNotDo:[playerMoving := playerX.].! !
!Game methodsFor: 'actions' stamp: 'D S 11/2/2020 14:37:42' prior: 50942786!
putXAt: aPoint
	
	self checkPlayer: playerO HasATokenIn: aPoint.
	playerMoving putXAt: aPoint.
	self If: playerX WonDo: [self error: self class menuDescriptionPlayerXWon.] ifNotDo:[playerMoving := playerO.].! !
!Game methodsFor: 'actions' stamp: 'D S 11/2/2020 14:37:49' prior: 50942821!
oMoveTokenFrom: aPointOfAOToken to: aDestinationPoint 
	
	self checkPlayer: playerX HasATokenIn: aDestinationPoint.
	playerMoving oMoveTokenFrom: aPointOfAOToken to: aDestinationPoint. 
	self If: playerO WonDo: [self error: self class menuDescriptionPlayerOWon.] ifNotDo:[playerMoving := playerX.].! !
!Game methodsFor: 'actions' stamp: 'D S 11/2/2020 14:38:05' prior: 50942833!
xMoveTokenFrom: aPointOfAXToken to: aDestinationPoint 
	
	self checkPlayer: playerO HasATokenIn: aDestinationPoint.
	playerMoving xMoveTokenFrom: aPointOfAXToken to: aDestinationPoint.
	self If: playerX WonDo: [self error: self class menuDescriptionPlayerXWon.] ifNotDo:[playerMoving := playerO.].! !

!methodRemoval: Game #checkPlayerOHasATokenIn: stamp: 'D S 11/2/2020 14:38:13'!
checkPlayerOHasATokenIn: aPoint

	^ (self playerOHasATokenIn: aPoint) ifTrue:[self error: self class errorDescriptionOponentTokenInPosition]!

!methodRemoval: Game #checkPlayerXHasATokenIn: stamp: 'D S 11/2/2020 14:38:16'!
checkPlayerXHasATokenIn: aPoint2

	^ (self playerXHasATokenIn: aPoint2) ifTrue: [self error: self class errorDescriptionOponentTokenInPosition ]!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test09PlayerXMovesTokenCorrectly stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test10PlayerOMovesTokenCorrectly stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test12OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test13XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test14OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test15ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test16ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test17ThreeXTokensInBottomRowEndGame stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInBottomRowEndGame stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test20ThreeOTokensInTopRowEndGame stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test21ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test22ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test23ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test24ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test25ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test26ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test27PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test28PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test29RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/2/2020 14:38:31'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/2/2020 14:38:31'!
PASSED!
!Game methodsFor: 'accessing --Private--' stamp: 'D S 11/2/2020 14:39:14'!
hasThreeInAColumnThePlayer: aPlayer
	
	^ aPlayer hasThreeInAColumn.! !
!Game methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 14:39:14' prior: 50942795!
hasPlayerWon: aPlayer
	
	^(aPlayer tokensPlaced ) = 3 and: ((self hasThreeInAColumnThePlayer: aPlayer) | (self playerHasThreeInADiagonal: aPlayer) | (self playerHasThreeInARow: aPlayer)).! !

!methodRemoval: Game #playerHasThreeInAColumn: stamp: 'D S 11/2/2020 14:39:14'!
playerHasThreeInAColumn: aPlayer
	
	^ aPlayer hasThreeInAColumn.!
!Game methodsFor: 'accessing --Private--' stamp: 'D S 11/2/2020 14:39:29'!
hasThreeInADiagonalThePlayer: aPlayer

	^aPlayer hasThreeInADiagonal! !
!Game methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 14:39:29' prior: 50944605!
hasPlayerWon: aPlayer
	
	^(aPlayer tokensPlaced ) = 3 and: ((self hasThreeInAColumnThePlayer: aPlayer) | (self hasThreeInADiagonalThePlayer: aPlayer) | (self playerHasThreeInARow: aPlayer)).! !

!methodRemoval: Game #playerHasThreeInADiagonal: stamp: 'D S 11/2/2020 14:39:29'!
playerHasThreeInADiagonal: aPlayer

	^aPlayer hasThreeInADiagonal!
!Game methodsFor: 'accessing --Private--' stamp: 'D S 11/2/2020 14:39:41'!
hasThreeInARowThePlayer: aPlayer

	^aPlayer hasThreeInARow ! !
!Game methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 14:39:41' prior: 50944624!
hasPlayerWon: aPlayer
	
	^(aPlayer tokensPlaced ) = 3 and: ((self hasThreeInAColumnThePlayer: aPlayer) | (self hasThreeInADiagonalThePlayer: aPlayer) | (self hasThreeInARowThePlayer: aPlayer)).! !

!methodRemoval: Game #playerHasThreeInARow: stamp: 'D S 11/2/2020 14:39:41'!
playerHasThreeInARow: aPlayer

	^aPlayer hasThreeInARow !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test09PlayerXMovesTokenCorrectly stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test10PlayerOMovesTokenCorrectly stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test12OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test13XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test14OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test15ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test16ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test17ThreeXTokensInBottomRowEndGame stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInBottomRowEndGame stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test20ThreeOTokensInTopRowEndGame stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test21ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test22ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test23ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test24ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test25ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test26ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test27PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test28PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test29RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/2/2020 14:39:45'!
PASSED!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test09PlayerXMovesTokenCorrectly stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test10PlayerOMovesTokenCorrectly stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test12OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test13XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test14OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test15ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test16ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test17ThreeXTokensInBottomRowEndGame stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInBottomRowEndGame stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test20ThreeOTokensInTopRowEndGame stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test21ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test22ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test23ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test24ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test25ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test26ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test27PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test28PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test29RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/2/2020 14:40:50'!
PASSED!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test09PlayerXMovesTokenCorrectly stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test10PlayerOMovesTokenCorrectly stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test12OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test13XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test14OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test15ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test16ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test17ThreeXTokensInBottomRowEndGame stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInBottomRowEndGame stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test20ThreeOTokensInTopRowEndGame stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test21ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test22ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test23ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test24ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test25ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test26ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test27PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test28PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test29RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 14:41:11'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 14:41:12'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:41:12'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:41:12'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 14:41:12'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 14:41:12'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/2/2020 14:41:12'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/2/2020 14:41:12'!
PASSED!

----STARTUP---- (2 November 2020 14:50:43) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisUniversity/CuisUniversity-4383.image!

!Game methodsFor: 'accessing' stamp: 'D S 11/2/2020 14:26:56'!
playerXhasTokenInPosition: aPoint
	
	^playerX hasTokenInPosition: aPoint.! !
!Game methodsFor: 'accessing' stamp: 'D S 11/2/2020 14:27:02'!
playerOhasTokenInPosition: aPoint
	
	^playerO hasTokenInPosition: aPoint.! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 14:27:31'!
hasTokenInPosition: aPoint

	^positionTokens includes: aPoint.! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 14:27:41'!
hasTokenInPosition: aPoint

	^positionTokens includes: aPoint.! !
!TableTest methodsFor: 'PutTokenTests' stamp: 'D S 11/2/2020 14:28:22' prior: 50909904!
test04XTokenIsPlacedCorrectly

	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	
	self assert: (aGame playerXHasATokenIn: (0@0))! !
!TableTest methodsFor: 'PutTokenTests' stamp: 'D S 11/2/2020 14:28:50' prior: 50909912!
test05OTokenIsPlacedCorrectly

	|aGame|
	aGame := Game startGame.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.

	self assert: (aGame playerOHasATokenIn: (1@1)).! !
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/2/2020 14:30:29' prior: 50939571!
test09PlayerXMovesTokenCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 0@2 to: 1@2.

	self assert: (aGame playerXHasATokenIn: (0@2)).
	self assert: (aGame playerXHasATokenIn: (1@1)).
	self assert: (aGame playerXHasATokenIn: (2@1)).! !
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/2/2020 14:30:54' prior: 50939596!
test10PlayerOMovesTokenCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 0@2 to: 1@2.
	
	self assert: (aGame playerOHasATokenIn: (1@2)).
	self assert: (aGame playerOHasATokenIn: (1@1)).
	self assert: (aGame playerOHasATokenIn: (2@1)).
	self assert: (Set with: 1@2 with: 1@1 with: 2@1) equals: aGame positionOTokens.! !
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/2/2020 14:30:57' prior: 50945234!
test10PlayerOMovesTokenCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@1.
	aGame putOAt: 0@2.
	aGame putXAt: 0@0.
	aGame putOAt: 1@1.
	aGame putXAt: 2@2.
	aGame putOAt: 2@1.
	aGame xMoveTokenFrom: 0@0 to: 1@0.
	aGame oMoveTokenFrom: 0@2 to: 1@2.
	
	self assert: (aGame playerOHasATokenIn: (1@2)).
	self assert: (aGame playerOHasATokenIn: (1@1)).
	self assert: (aGame playerOHasATokenIn: (2@1)).
! !
!TableTest methodsFor: 'MoveTokenTests' stamp: 'D S 11/2/2020 14:31:01' prior: 50945219!
test09PlayerXMovesTokenCorrectly

	|aGame|
	
	aGame := Game startGame.
	aGame putXAt: 0@2.
	aGame putOAt: 0@1.
	aGame putXAt: 1@1.
	aGame putOAt: 0@0.
	aGame putXAt: 2@1.
	aGame putOAt: 2@2.
	aGame xMoveTokenFrom: 0@2 to: 1@2.

	self assert: (aGame playerXHasATokenIn: (1@2)).
	self assert: (aGame playerXHasATokenIn: (1@1)).
	self assert: (aGame playerXHasATokenIn: (2@1)).! !
!Game methodsFor: 'accessing --Private--' stamp: 'D S 11/2/2020 14:32:27' prior: 50942728!
playerHasThreeInAColumn: aPlayer
	
	^ aPlayer hasThreeInAColumn.! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 14:32:41'!
hasThreeInAColumn
	((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]))! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 14:32:42' prior: 50945289!
hasThreeInAColumn

	((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]))! !
!Game methodsFor: 'accessing --Private--' stamp: 'D S 11/2/2020 14:33:07' prior: 50942754!
playerHasThreeInADiagonal: aPlayer

	^aPlayer hasThreeInADiagonal! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 14:33:26'!
hasThreeInADiagonal

	^((positionTokens = (Set with: 0@0 with: 1@1 with: 2@2)) or:
	(positionTokens = (Set with: 2@0 with: 1@1 with: 0@2))).! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 14:33:29' prior: 50945300!
hasThreeInAColumn

	^((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]))! !
!Game methodsFor: 'accessing --Private--' stamp: 'D S 11/2/2020 14:33:52' prior: 50942741!
playerHasThreeInARow: aPlayer

	^aPlayer hasThreeInARow ! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 14:34:02'!
hasThreeInARow

	^((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=0]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=1]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=2])).! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 14:34:12'!
hasThreeInARow

	^((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=0]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=1]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=2])).! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 14:34:24'!
hasThreeInADiagonal

	^((positionTokens = (Set with: 0@0 with: 1@1 with: 2@2)) or:
	(positionTokens = (Set with: 2@0 with: 1@1 with: 0@2))).! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 14:34:34'!
hasThreeInAColumn

	^((positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]))! !
!Game methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 14:37:18'!
checkPlayer:aPlayer HasATokenIn: aPoint

	^ (aPlayer hasTokenInPosition: aPoint) ifTrue:[self error: self class errorDescriptionOponentTokenInPosition]! !
!Game methodsFor: 'actions' stamp: 'D S 11/2/2020 14:37:37' prior: 50942812!
putOAt: aPoint
	
	self checkPlayer: playerX HasATokenIn: aPoint.
	playerMoving putOAt: aPoint.
	self If: playerO WonDo: [self error: self class menuDescriptionPlayerOWon.] ifNotDo:[playerMoving := playerX.].! !
!Game methodsFor: 'actions' stamp: 'D S 11/2/2020 14:37:42' prior: 50942786!
putXAt: aPoint
	
	self checkPlayer: playerO HasATokenIn: aPoint.
	playerMoving putXAt: aPoint.
	self If: playerX WonDo: [self error: self class menuDescriptionPlayerXWon.] ifNotDo:[playerMoving := playerO.].! !
!Game methodsFor: 'actions' stamp: 'D S 11/2/2020 14:37:49' prior: 50942821!
oMoveTokenFrom: aPointOfAOToken to: aDestinationPoint 
	
	self checkPlayer: playerX HasATokenIn: aDestinationPoint.
	playerMoving oMoveTokenFrom: aPointOfAOToken to: aDestinationPoint. 
	self If: playerO WonDo: [self error: self class menuDescriptionPlayerOWon.] ifNotDo:[playerMoving := playerX.].! !
!Game methodsFor: 'actions' stamp: 'D S 11/2/2020 14:38:05' prior: 50942833!
xMoveTokenFrom: aPointOfAXToken to: aDestinationPoint 
	
	self checkPlayer: playerO HasATokenIn: aDestinationPoint.
	playerMoving xMoveTokenFrom: aPointOfAXToken to: aDestinationPoint.
	self If: playerX WonDo: [self error: self class menuDescriptionPlayerXWon.] ifNotDo:[playerMoving := playerO.].! !

!methodRemoval: Game #checkPlayerOHasATokenIn: stamp: 'D S 11/2/2020 14:51:00'!
checkPlayerOHasATokenIn: aPoint

	^ (self playerOHasATokenIn: aPoint) ifTrue:[self error: self class errorDescriptionOponentTokenInPosition]!

!methodRemoval: Game #checkPlayerXHasATokenIn: stamp: 'D S 11/2/2020 14:51:00'!
checkPlayerXHasATokenIn: aPoint2

	^ (self playerXHasATokenIn: aPoint2) ifTrue: [self error: self class errorDescriptionOponentTokenInPosition ]!
!Game methodsFor: 'accessing --Private--' stamp: 'D S 11/2/2020 14:39:14'!
hasThreeInAColumnThePlayer: aPlayer
	
	^ aPlayer hasThreeInAColumn.! !
!Game methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 14:39:14' prior: 50942795!
hasPlayerWon: aPlayer
	
	^(aPlayer tokensPlaced ) = 3 and: ((self hasThreeInAColumnThePlayer: aPlayer) | (self playerHasThreeInADiagonal: aPlayer) | (self playerHasThreeInARow: aPlayer)).! !

!methodRemoval: Game #playerHasThreeInAColumn: stamp: 'D S 11/2/2020 14:51:00'!
playerHasThreeInAColumn: aPlayer
	
	^ aPlayer hasThreeInAColumn.!
!Game methodsFor: 'accessing --Private--' stamp: 'D S 11/2/2020 14:39:29'!
hasThreeInADiagonalThePlayer: aPlayer

	^aPlayer hasThreeInADiagonal! !
!Game methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 14:39:29' prior: 50945446!
hasPlayerWon: aPlayer
	
	^(aPlayer tokensPlaced ) = 3 and: ((self hasThreeInAColumnThePlayer: aPlayer) | (self hasThreeInADiagonalThePlayer: aPlayer) | (self playerHasThreeInARow: aPlayer)).! !

!methodRemoval: Game #playerHasThreeInADiagonal: stamp: 'D S 11/2/2020 14:51:00'!
playerHasThreeInADiagonal: aPlayer

	^aPlayer hasThreeInADiagonal!
!Game methodsFor: 'accessing --Private--' stamp: 'D S 11/2/2020 14:39:41'!
hasThreeInARowThePlayer: aPlayer

	^aPlayer hasThreeInARow ! !
!Game methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 14:39:41' prior: 50945465!
hasPlayerWon: aPlayer
	
	^(aPlayer tokensPlaced ) = 3 and: ((self hasThreeInAColumnThePlayer: aPlayer) | (self hasThreeInADiagonalThePlayer: aPlayer) | (self hasThreeInARowThePlayer: aPlayer)).! !

!methodRemoval: Game #playerHasThreeInARow: stamp: 'D S 11/2/2020 14:51:00'!
playerHasThreeInARow: aPlayer

	^aPlayer hasThreeInARow !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test09PlayerXMovesTokenCorrectly stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test10PlayerOMovesTokenCorrectly stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test12OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test13XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test14OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test15ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test16ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test17ThreeXTokensInBottomRowEndGame stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInBottomRowEndGame stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test20ThreeOTokensInTopRowEndGame stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test21ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test22ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test23ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test24ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test25ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test26ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test27PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test28PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test29RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/2/2020 14:51:06'!
PASSED!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test09PlayerXMovesTokenCorrectly stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test10PlayerOMovesTokenCorrectly stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test12OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test13XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test14OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test15ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test16ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test17ThreeXTokensInBottomRowEndGame stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInBottomRowEndGame stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test20ThreeOTokensInTopRowEndGame stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test21ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test22ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test23ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test24ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test25ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test26ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test27PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test28PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test29RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/2/2020 14:53:10'!
PASSED!

----QUIT----(2 November 2020 15:07:00) CuisUniversity-4383.image priorSource: 19589110!

----STARTUP---- (2 November 2020 15:24:34) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisUniversity/CuisUniversity-4383.image!

!Game methodsFor: 'initialize' stamp: 'D S 11/2/2020 15:25:44'!
tokensPerPlayer

	^3! !
!Game methodsFor: 'accessing --Private--' stamp: 'D S 11/2/2020 15:26:26' prior: 50945484!
hasPlayerWon: aPlayer
	
	^((aPlayer tokensPlaced ) = (self tokensPerPlayer)) and: ((self hasThreeInAColumnThePlayer: aPlayer) | (self hasThreeInADiagonalThePlayer: aPlayer) | (self hasThreeInARowThePlayer: aPlayer)).! !
!PlayerO methodsFor: 'nil' stamp: 'D S 11/2/2020 15:27:53'!
maxNumberOfRow

	^2! !
!PlayerO methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 15:27:59'!
minNumberOfRow

	^0! !
!PlayerO methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 15:28:06'!
minNumberOfColumn

	^0! !
!PlayerO methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 15:28:10'!
maxNumberOfColumn

	^0! !
!PlayerO methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 15:28:13' prior: 50945878!
maxNumberOfColumn

	^2! !

----STARTUP---- (2 November 2020 15:29:11) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisUniversity/CuisUniversity-4383.image!

!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:29:42' prior: 50938183!
checkIfValidMovingFrom: aPoint to: aPoint2
	"Todo movimiento validos aumenta o reduce la distancia al centro en 1 o 2 o la diferencia entre origen y destino es mayor a 2. Si se mantiene igual es invalido ya que serian movimientos de la posicion 1@2 a 0@1, 0@1 a 1@0, 1@0 a 2@1 o 2@1 a 1@2 "

	^((self diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2) or: (self distanciaEntreElPunto: aPoint EsMayorA2ComparandoloCon: aPoint2)) ifTrue: [^self error: self class errorDescriptionInvalidMovement].! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:29:51' prior: 50938433!
checkIfValidMovingFrom: aPoint to: aPoint2
	"Todo movimiento validos aumenta o reduce la distancia al centro en 1 o 2 o la diferencia entre origen y destino es mayor a 2. Si se mantiene igual es invalido ya que serian movimientos de la posicion 1@2 a 0@1, 0@1 a 1@0, 1@0 a 2@1 o 2@1 a 1@2 "
	^ ((self diferenciaAlCentroEsIgualDe: aPoint Y: aPoint2) or: (self distanciaEntreElPunto: aPoint EsMayorA2ComparandoloCon: aPoint2)) ifTrue: [^self error: self class errorDescriptionInvalidMovement]! !
!Game methodsFor: 'accessing --Private--' stamp: 'D S 11/2/2020 15:30:21'!
tokensPerPlayer

	^3! !
!Game methodsFor: 'accessing --Private--' stamp: 'D S 11/2/2020 15:30:37' prior: 50945484!
hasPlayerWon: aPlayer
	
	^((aPlayer tokensPlaced ) = (self tokensPerPlayer)) and: ((self hasThreeInAColumnThePlayer: aPlayer) | (self hasThreeInADiagonalThePlayer: aPlayer) | (self hasThreeInARowThePlayer: aPlayer)).! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:31:07'!
maxColumnNumber

	^2! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:31:10'!
maxRowNumber

	^2! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:31:14'!
mixRowNumber

	^0! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:31:23'!
minColumnNumber

	^0! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:31:30'!
minRowNumber

	^0! !

!methodRemoval: PlayerO #mixRowNumber stamp: 'D S 11/2/2020 15:31:30'!
mixRowNumber

	^0!
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:32:09'!
threeTokensInFirstColumn

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:32:09' prior: 50945324!
hasThreeInAColumn

	^((self threeTokensInFirstColumn) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]))! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:33:12' prior: 50945933!
hasThreeInAColumn

	^((self threeTokensInFirstColumn) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]))! !

----STARTUP---- (2 November 2020 15:33:42) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisUniversity/CuisUniversity-4383.image!

!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:34:13'!
threeTokensInFirstColumn

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:34:13' prior: 50945324!
hasThreeInAColumn

	^((self threeTokensInFirstColumn) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]))! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:34:23'!
threeTokensInSecondColumn

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:34:28'!
threeTokensInThirdColumn

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:34:51' prior: 50945859!
hasThreeInAColumn

	^((self threeTokensInFirstColumn) or: 	(self threeTokensInSecondColumn ) or: (self threeTokensInThirdColumn ))! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:35:10'!
threeTokensInFirstRow

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=0]! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:35:10' prior: 50945340!
hasThreeInARow

	^((self threeTokensInFirstRow) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=1]) or:
	(positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=2])).! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:35:17'!
threeTokensInSecondRow

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=1]! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:35:21'!
threeTokensInThirdRow

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=2]! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:35:48' prior: 50945893!
hasThreeInARow

	^((self threeTokensInFirstRow) or: 	(self threeTokensInSecondRow ) or: 	(self threeTokensInThirdRow)).! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:36:25'!
threeTokensInAscendingDiagonal

	^positionTokens = (Set with: 0@0 with: 1@1 with: 2@2)! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:36:57'!
threeTokensInDescendingDiagonal

	^((positionTokens = (Set with: 2@0 with: 1@1 with: 0@2))).! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:37:35' prior: 50945316!
hasThreeInADiagonal

	^((self threeTokensInAscendingDiagonal) or: (self threeTokensInDescendingDiagonal))! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:38:01' prior: 50945367!
hasThreeInAColumn

	^((self threeTokensInFirstColumn) or: 	(self threeTokensInSecondColumn ) or: (self threeTokensInThirdColumn ))! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:38:16' prior: 50945360!
hasThreeInADiagonal

	^((self threeTokensInAscendingDiagonal) or: (self threeTokensInDescendingDiagonal))! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:38:22' prior: 50945350!
hasThreeInARow

	^((self threeTokensInFirstRow) or: 	(self threeTokensInSecondRow ) or: 	(self threeTokensInThirdRow)).! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:38:29'!
threeTokensInFirstColumn

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:38:37'!
threeTokensInFirstRow

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=0]! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:38:45'!
threeTokensInAscendingDiagonal

	^positionTokens = (Set with: 0@0 with: 1@1 with: 2@2)! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:38:51'!
threeTokensInDescendingDiagonal

	^((positionTokens = (Set with: 2@0 with: 1@1 with: 0@2))).! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:39:00'!
threeTokensInSecondColumn

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:39:07'!
threeTokensInSecondRow

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=1]! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:39:17'!
threeTokensInThirdColumn

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:39:26'!
threeTokensInThirdRow

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=2]! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test09PlayerXMovesTokenCorrectly stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test10PlayerOMovesTokenCorrectly stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test12OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test13XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test14OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test15ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test16ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test17ThreeXTokensInBottomRowEndGame stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInBottomRowEndGame stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test20ThreeOTokensInTopRowEndGame stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test21ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test22ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test23ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test24ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test25ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test26ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test27PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test28PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test29RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/2/2020 15:39:36'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/2/2020 15:39:36'!
PASSED!
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:40:23'!
threeTokensInColumn: aColumnNumber

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=aColumnNumber]! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:40:38'!
threeTokensInRow: aRowNumber

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=aRowNumber]! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:40:57' prior: 50945914!
hasThreeInARow

	^((self threeTokensInRow: 0) or: 	(self threeTokensInRow:1 ) or: 	(self threeTokensInRow:2)).! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:41:16' prior: 50945880!
hasThreeInAColumn

	^((self threeTokensInColumn:0) or: 	(self threeTokensInColumn:1 ) or: (self threeTokensInColumn:2 ))! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:41:42'!
threeTokensInColumn: aColumnNumber

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=aColumnNumber]! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:41:59'!
threeTokensInRow: aRowNumber

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=aRowNumber]! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:42:18' prior: 50945955!
hasThreeInARow

	^((self threeTokensInRow: 0) or: 	(self threeTokensInRow: 1 ) or: 	(self threeTokensInRow: 2)).! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:42:22' prior: 50946226!
hasThreeInARow

	^((self threeTokensInRow: 0) or: 	(self threeTokensInRow: 1 ) or: 	(self threeTokensInRow: 2)).! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:42:36' prior: 50945940!
hasThreeInAColumn

	^((self threeTokensInColumn: 0) or: 	(self threeTokensInColumn: 1 ) or: (self threeTokensInColumn: 2 ))! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test09PlayerXMovesTokenCorrectly stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test10PlayerOMovesTokenCorrectly stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test12OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test13XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test14OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test15ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test16ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test17ThreeXTokensInBottomRowEndGame stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInBottomRowEndGame stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test20ThreeOTokensInTopRowEndGame stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test21ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test22ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test23ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test24ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test25ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test26ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test27PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test28PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test29RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/2/2020 15:42:40'!
PASSED!

!methodRemoval: PlayerO #threeTokensInFirstColumn stamp: 'D S 11/2/2020 15:42:51'!
threeTokensInFirstColumn

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]!

!methodRemoval: PlayerO #threeTokensInFirstRow stamp: 'D S 11/2/2020 15:42:56'!
threeTokensInFirstRow

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=0]!

!methodRemoval: PlayerO #threeTokensInSecondColumn stamp: 'D S 11/2/2020 15:42:59'!
threeTokensInSecondColumn

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]!

!methodRemoval: PlayerO #threeTokensInSecondRow stamp: 'D S 11/2/2020 15:43:02'!
threeTokensInSecondRow

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=1]!

!methodRemoval: PlayerO #threeTokensInThirdColumn stamp: 'D S 11/2/2020 15:43:07'!
threeTokensInThirdColumn

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]!

!methodRemoval: PlayerO #threeTokensInThirdRow stamp: 'D S 11/2/2020 15:43:10'!
threeTokensInThirdRow

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=2]!

!methodRemoval: PlayerX #threeTokensInSecondColumn stamp: 'D S 11/2/2020 15:43:14'!
threeTokensInSecondColumn

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=1]!

!methodRemoval: PlayerX #threeTokensInFirstColumn stamp: 'D S 11/2/2020 15:43:17'!
threeTokensInFirstColumn

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=0]!

!methodRemoval: PlayerX #threeTokensInFirstRow stamp: 'D S 11/2/2020 15:43:19'!
threeTokensInFirstRow

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=0]!

!methodRemoval: PlayerX #threeTokensInThirdColumn stamp: 'D S 11/2/2020 15:43:22'!
threeTokensInThirdColumn

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition y)=2]!

!methodRemoval: PlayerX #threeTokensInThirdRow stamp: 'D S 11/2/2020 15:43:25'!
threeTokensInThirdRow

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=2]!

!methodRemoval: PlayerX #threeTokensInSecondRow stamp: 'D S 11/2/2020 15:43:28'!
threeTokensInSecondRow

	^ positionTokens allSatisfy: [:aTokenPosition | (aTokenPosition x)=1]!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test09PlayerXMovesTokenCorrectly stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test10PlayerOMovesTokenCorrectly stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test12OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test13XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test14OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test15ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test16ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test17ThreeXTokensInBottomRowEndGame stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInBottomRowEndGame stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test20ThreeOTokensInTopRowEndGame stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test21ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test22ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test23ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test24ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test25ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test26ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test27PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test28PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test29RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/2/2020 15:43:30'!
PASSED!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test09PlayerXMovesTokenCorrectly stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test10PlayerOMovesTokenCorrectly stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test12OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test13XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test14OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test15ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test16ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test17ThreeXTokensInBottomRowEndGame stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInBottomRowEndGame stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test20ThreeOTokensInTopRowEndGame stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test21ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test22ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test23ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test24ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test25ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test26ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test27PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test28PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test29RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/2/2020 15:44:05'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/2/2020 15:44:05'!
PASSED!
!Game methodsFor: 'accessing --Private--' stamp: 'D S 11/2/2020 15:45:13' prior: 50945484!
hasPlayerWon: aPlayer
	
	^(aPlayer tokensPlaced ) = 3 and: ((aPlayer hasThreeInAColumn) | (aPlayer hasThreeInADiagonal) | (aPlayer hasThreeInARow)).! !

!methodRemoval: Game #hasThreeInAColumnThePlayer: stamp: 'D S 11/2/2020 15:45:19'!
hasThreeInAColumnThePlayer: aPlayer
	
	^ aPlayer hasThreeInAColumn.!

!methodRemoval: Game #hasThreeInADiagonalThePlayer: stamp: 'D S 11/2/2020 15:45:21'!
hasThreeInADiagonalThePlayer: aPlayer

	^aPlayer hasThreeInADiagonal!

!methodRemoval: Game #hasThreeInARowThePlayer: stamp: 'D S 11/2/2020 15:45:24'!
hasThreeInARowThePlayer: aPlayer

	^aPlayer hasThreeInARow !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test09PlayerXMovesTokenCorrectly stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test10PlayerOMovesTokenCorrectly stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test12OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test13XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test14OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test15ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test16ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test17ThreeXTokensInBottomRowEndGame stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInBottomRowEndGame stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test20ThreeOTokensInTopRowEndGame stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test21ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test22ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test23ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test24ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test25ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test26ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test27PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test28PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test29RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/2/2020 15:45:26'!
PASSED!

----SNAPSHOT----(2 November 2020 15:46:01) CuisUniversity-4383.image priorSource: 19654244!

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test09PlayerXMovesTokenCorrectly stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test10PlayerOMovesTokenCorrectly stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test12OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test13XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test14OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test15ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test16ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test17ThreeXTokensInBottomRowEndGame stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInBottomRowEndGame stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test20ThreeOTokensInTopRowEndGame stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test21ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test22ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test23ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test24ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test25ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test26ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test27PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test28PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test29RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/2/2020 15:46:04'!
PASSED!

----SNAPSHOT----(2 November 2020 15:46:36) CuisUniversity-4383.image priorSource: 19692262!
!PlayerX class methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 15:47:19'!
errorDescriptionTokenAlreadyThere

	^'The indicated token is already there'! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:49:01' prior: 50934804!
checkNotAlreadyATokenThere: aDestinationPoint
	
	^ (positionTokens includes: aDestinationPoint) ifTrue:[^self error: self class errorDescriptionOwnTokenThere ]! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:49:12' prior: 50934796!
checkNotAlreadyATokenThere: aDestinationPoint

	^ (positionTokens includes: aDestinationPoint) ifTrue:[^self error: self class errorDescriptionOwnTokenThere ]! !
!PlayerO methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:49:34' prior: 50934764!
checkDestinationIsNotOutOfBoard: aDestinationPoint
	"El tablero es 3x3"
	^ ((aDestinationPoint x) > 2 or: (aDestinationPoint y) > 2 or: (aDestinationPoint x) < 0 or: (aDestinationPoint y) < 0) 
		ifTrue:[^self error: self class errorDescriptionOutOfRange ]! !
!PlayerX methodsFor: 'actions --Private--' stamp: 'D S 11/2/2020 15:50:12' prior: 50934844!
checkDestinationIsNotOutOfBoard: aDestinationPoint
	"El tablero es 3x3"
	^ ((aDestinationPoint x) > 2 or: (aDestinationPoint y) > 2 or: (aDestinationPoint x) < 0 or: (aDestinationPoint y) < 0) 
		ifTrue:[^self error: self class errorDescriptionOutOfRange ]! !

!testRun: #TableTest #test01PlayersHave3TokenWhenGameStarts stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test02PlayerXMovesFirst stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test03PlayerODoesntMovesFirst stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test04XTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test05OTokenIsPlacedCorrectly stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test06PlayerXDoesntMoveSecond stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test07PlayerOMoveSecond stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test08PlayerXMovesAfterPlayerO stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test09PlayerXMovesTokenCorrectly stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test10PlayerOMovesTokenCorrectly stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test11XTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test12OTokensInAscendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test13XTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test14OTokensInDescendingDiagonalEndsGame stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test15ThreeXTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test16ThreeOTokensInMiddleRowEndGame stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test17ThreeXTokensInBottomRowEndGame stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test18ThreeXTokensInTopRowEndGame stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test19ThreeOTokensInBottomRowEndGame stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test20ThreeOTokensInTopRowEndGame stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test21ThreeXTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test22ThreeOTokensInSecondColumnEndGame stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test23ThreeXTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test24ThreeOTokensInFirstColumnEndGame stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test25ThreeXTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test26ThreeOTokensInThirdColumnEndGame stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test27PuttingXTokenReduceRemainingXTokensCorrectly stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test28PuttingOTokenReduceRemainingOCorrectly stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test29RaiseErrorWhenPuttingOTokenInTurnOfPlayerX stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test30RaiseErrorWhenPuttingXTokenInTurnOfPlayerO stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test31RaiseErrorWhenPuttingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test32RaiseErrorWhenPuttingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test33RaiseErrorWhenPuttingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test34RaiseErrorWhenPuttingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test35RaiseErrorWhenTryingToPutAFourthXToken stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test36RaiseErrorWhenTryingToPutAFourthOToken stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test37RaiseErrorWhenPlayerOPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test38RaiseErrorWhenPlayerXPutATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test39RaiseErrorWhenMovingTokenXWhereThereIsATokenO stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test40RaiseErrorWhenMovingTokenXWhereThereIsATokenX stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test41RaiseErrorWhenMovingTokenOWhereThereIsATokenX stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test42RaiseErrorWhenMovingTokenOWhereThereIsATokenO stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test43RaiseErrorWhenPlayerXTryAnInvalidMovement stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test44RaiseErrorWhenPlayerOTryAnInvalidMovement stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test45RaiseErrorWhenPlayerXIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test46RaiseErrorWhenPlayerOIsMovingTokenToFarFromOrigin stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test47RaiseErrorWhenPlayerXMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test48RaiseErrorWhenPlayerOMoveATokenOutOfTheBoard stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test49RaiseErrorWhenPlayerXInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test50RaiseErrorWhenPlayerOInsertATokenLocationWithoutToken stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test51RaiseErrorWhenPlayerXTryMoveAOpponentToken stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

!testRun: #TableTest #test52RaiseErrorWhenPlayerOTryMoveOpponentToken stamp: 'D S 11/2/2020 15:50:29'!
PASSED!

----SNAPSHOT----(2 November 2020 15:50:32) CuisUniversity-4383.image priorSource: 19697935!