

----STARTUP---- (25 October 2020 21:32:59) as E:\!!NUEVO\Programas\CuisUniversity\v4383.1\CuisUniversity-4383.image!


TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'FR 10/25/2020 21:33:30'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'FR 10/25/2020 22:06:53'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'nil' stamp: 'FR 10/25/2020 22:06:48'!
test01

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 1@1 facing: 'N'.
	
	aMarsRover execute: ''.
	
	self assert: aMarsRover position = (1@1).
	self assert: aMarsRover orientation = 'N'! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 22:07:02'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 22:07:02'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'FR 10/25/2020 22:07:09'!
inPosition: aPoint facing: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeInPosition: aPoint facing: aString ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'FR 10/25/2020 22:07:26' prior: 51015744!
inPosition: aPosition facing: anOrientation 

	^self new! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 22:07:29'!
ERROR!
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 22:07:38'!
execute: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 22:07:48' prior: 51015761!
execute: stringOfCommands ! !
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 22:07:49' prior: 51015766!
execute: stringOfCommands! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 22:07:51'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'FR 10/25/2020 22:07:59'!
position
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'accessing' stamp: 'FR 10/25/2020 22:08:14' prior: 51015776!
position

	^ 1@1! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 22:08:17'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'FR 10/25/2020 22:08:21'!
orientation
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'accessing' stamp: 'FR 10/25/2020 22:08:33' prior: 51015786!
orientation
	
	^ 'N'! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 22:08:36'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 22:09:20'!
test02

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: 'N'.
	
	aMarsRover execute: 'f'.
	
	self assert: aMarsRover position = (0@1).
	self assert: aMarsRover orientation = 'N'! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 22:09:25'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 22:09:25'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 22:09:25'!
FAILURE!
!MarsRover class methodsFor: 'instance creation' stamp: 'FR 10/25/2020 22:10:08' prior: 51015754!
inPosition: aPosition facing: anOrientation 

	^self new initializeInPosition: aPosition facing: anOrientation! !

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 22:10:13'!
ERROR!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'FR 10/25/2020 22:10:21'!
Object subclass: #MarsRover
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'FR 10/25/2020 22:10:21'!
Object subclass: #MarsRover
	instanceVariableNames: 'position orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'FR 10/25/2020 22:10:22'!
initializeInPosition: aPosition facing: anOrientation 
	self shouldBeImplemented.
	position := aPosition.
	orientation := anOrientation.! !
!MarsRover methodsFor: 'initialization' stamp: 'FR 10/25/2020 22:10:27' prior: 51015836!
initializeInPosition: aPosition facing: anOrientation 

	position := aPosition.
	orientation := anOrientation.! !

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 22:10:32'!
FAILURE!
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 22:11:31' prior: 51015770!
execute: stringOfCommands

	stringOfCommands = 'f' ifTrue: [ ^position := 0@1 ]! !
!MarsRover methodsFor: 'accessing' stamp: 'FR 10/25/2020 22:11:52' prior: 51015780!
position

	^ position! !
!MarsRover methodsFor: 'accessing' stamp: 'FR 10/25/2020 22:12:02' prior: 51015790!
orientation
	
	^ orientation! !

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 22:12:04'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 22:12:07'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 22:12:07'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 22:12:44'!
test03

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 1@1 facing: 'N'.
	
	aMarsRover execute: 'f'.
	
	self assert: aMarsRover position = (1@2).
	self assert: aMarsRover orientation = 'N'! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 22:12:51'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 22:12:51'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 22:12:51'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 22:12:51'!
FAILURE!
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 22:14:47' prior: 51015853!
execute: stringOfCommands

	stringOfCommands = 'f' ifTrue: [
		position = (0@0) ifTrue: [ ^position := 0@1 ].
		position = (1@1) ifTrue: [ ^position := 1@2 ].
	]! !

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 22:14:53'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 22:14:55'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 22:14:55'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 22:14:55'!
PASSED!
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 22:15:20' prior: 51015893!
execute: stringOfCommands

	stringOfCommands = 'f' ifTrue: [
		position = position + (0@1).
	]! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 22:15:22'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 22:15:22'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 22:15:22'!
ERROR!
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 22:15:33' prior: 51015911!
execute: stringOfCommands

	stringOfCommands = 'f' ifTrue: [
		position := position + (0@1).
	]! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 22:15:34'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 22:15:34'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 22:15:34'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 22:16:49'!
test04

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: 'W'.
	
	aMarsRover execute: 'f'.
	
	self assert: aMarsRover position = (-1@0).
	self assert: aMarsRover orientation = 'W'! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 22:16:51'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 22:16:52'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 22:16:53'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 22:16:53'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 22:16:53'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 22:17:56' prior: 51015937!
test04

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: 'O'.
	
	aMarsRover execute: 'f'.
	
	self assert: aMarsRover position = (-1@0).
	self assert: aMarsRover orientation = 'O'! !
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 22:19:12' prior: 51015924!
execute: stringOfCommands

	stringOfCommands = 'f' ifTrue: [
		orientation = 'N' ifTrue: [ ^position := position + (0@1) ].
		orientation = 'O' ifTrue: [ ^position := position + (-1@0) ].
	]! !

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 22:19:23'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 22:19:25'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 22:19:26'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 22:19:26'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 22:19:26'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 22:19:51'!
test05

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: 'S'.
	
	aMarsRover execute: 'f'.
	
	self assert: aMarsRover position = (0@-1).
	self assert: aMarsRover orientation = 'S'! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 22:19:52'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 22:19:52'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 22:19:52'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 22:19:52'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FR 10/25/2020 22:19:52'!
FAILURE!

!testRun: #MarsRoverTest #test05 stamp: 'FR 10/25/2020 22:19:52'!
FAILURE!
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 22:20:17' prior: 51015968!
execute: stringOfCommands

	stringOfCommands = 'f' ifTrue: [
		orientation = 'N' ifTrue: [ ^position := position + (0@1) ].
		orientation = 'S' ifTrue: [ ^position := position + (0@-1) ].
		orientation = 'O' ifTrue: [ ^position := position + (-1@0) ].
	]! !

!testRun: #MarsRoverTest #test05 stamp: 'FR 10/25/2020 22:20:20'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 22:20:42'!
test06

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: 'E'.
	
	aMarsRover execute: 'f'.
	
	self assert: aMarsRover position = (1@0).
	self assert: aMarsRover orientation = 'E'! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 22:20:44'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 22:20:44'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 22:20:44'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 22:20:44'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FR 10/25/2020 22:20:44'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FR 10/25/2020 22:20:44'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'FR 10/25/2020 22:20:44'!
FAILURE!
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 22:21:28' prior: 51016012!
execute: stringOfCommands

	stringOfCommands = 'f' ifTrue: [
		orientation = 'N' ifTrue: [ ^position := position + (0@1) ].
		orientation = 'S' ifTrue: [ ^position := position + (0@-1) ].
		orientation = 'E' ifTrue: [ ^position := position + (1@0) ].
		orientation = 'O' ifTrue: [ ^position := position + (-1@0) ].
	]! !

!testRun: #MarsRoverTest #test06 stamp: 'FR 10/25/2020 22:21:30'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 22:42:43'!
test07

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: 'N'.
	
	aMarsRover execute: 'b'.
	
	self assert: aMarsRover position = (0@-1).
	self assert: aMarsRover orientation = 'N'! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 22:42:46'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 22:42:46'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 22:42:46'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 22:42:46'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FR 10/25/2020 22:42:46'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FR 10/25/2020 22:42:47'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FR 10/25/2020 22:42:47'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'FR 10/25/2020 22:42:47'!
FAILURE!
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 22:44:11' prior: 51016051!
execute: stringOfCommands

	stringOfCommands = 'f' ifTrue: [
		orientation = 'N' ifTrue: [ ^position := position + (0@1) ].
		orientation = 'S' ifTrue: [ ^position := position + (0@-1) ].
		orientation = 'E' ifTrue: [ ^position := position + (1@0) ].
		orientation = 'O' ifTrue: [ ^position := position + (-1@0) ].
	].
	stringOfCommands = 'b' ifTrue: [
		^position := position - (0@1).
	].! !

!testRun: #MarsRoverTest #test07 stamp: 'FR 10/25/2020 22:44:15'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 22:44:18'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 22:44:18'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 22:44:18'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 22:44:18'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FR 10/25/2020 22:44:18'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FR 10/25/2020 22:44:18'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FR 10/25/2020 22:44:18'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 22:44:52'!
test08

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: 'O'.
	
	aMarsRover execute: 'b'.
	
	self assert: aMarsRover position = (1@0).
	self assert: aMarsRover orientation = 'O'! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 22:44:54'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 22:44:54'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 22:44:54'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 22:44:54'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FR 10/25/2020 22:44:54'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FR 10/25/2020 22:44:54'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FR 10/25/2020 22:44:54'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FR 10/25/2020 22:44:55'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'FR 10/25/2020 22:44:55'!
FAILURE!
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 22:45:38' prior: 51016094!
execute: stringOfCommands

	stringOfCommands = 'f' ifTrue: [
		orientation = 'N' ifTrue: [ ^position := position + (0@1) ].
		orientation = 'S' ifTrue: [ ^position := position + (0@-1) ].
		orientation = 'E' ifTrue: [ ^position := position + (1@0) ].
		orientation = 'O' ifTrue: [ ^position := position + (-1@0) ].
	].
	stringOfCommands = 'b' ifTrue: [
		orientation = 'N' ifTrue: [ ^position := position - (0@1) ].
		orientation = 'O' ifTrue: [ ^position := position - (-1@0) ]
	].! !

!testRun: #MarsRoverTest #test08 stamp: 'FR 10/25/2020 22:45:42'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 22:45:44'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 22:45:44'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 22:45:44'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 22:45:44'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FR 10/25/2020 22:45:44'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FR 10/25/2020 22:45:44'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FR 10/25/2020 22:45:44'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FR 10/25/2020 22:45:45'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 22:45:57'!
test09

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: 'S'.
	
	aMarsRover execute: 'b'.
	
	self assert: aMarsRover position = (0@1).
	self assert: aMarsRover orientation = 'S'! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 22:46:01'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 22:46:02'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 22:46:02'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 22:46:02'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FR 10/25/2020 22:46:02'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FR 10/25/2020 22:46:02'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FR 10/25/2020 22:46:02'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FR 10/25/2020 22:46:02'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FR 10/25/2020 22:46:02'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'FR 10/25/2020 22:46:02'!
FAILURE!
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 22:46:31' prior: 51016158!
execute: stringOfCommands

	stringOfCommands = 'f' ifTrue: [
		orientation = 'N' ifTrue: [ ^position := position + (0@1) ].
		orientation = 'S' ifTrue: [ ^position := position + (0@-1) ].
		orientation = 'E' ifTrue: [ ^position := position + (1@0) ].
		orientation = 'O' ifTrue: [ ^position := position + (-1@0) ].
	].
	stringOfCommands = 'b' ifTrue: [
		orientation = 'N' ifTrue: [ ^position := position - (0@1) ].
		orientation = 'S' ifTrue: [ ^position := position - (0@-1) ].
		orientation = 'O' ifTrue: [ ^position := position - (-1@0) ].
	].! !

!testRun: #MarsRoverTest #test09 stamp: 'FR 10/25/2020 22:46:33'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 22:46:46'!
test10

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: 'E'.
	
	aMarsRover execute: 'b'.
	
	self assert: aMarsRover position = (-1@0).
	self assert: aMarsRover orientation = 'E'! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 22:46:48'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 22:46:48'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 22:46:48'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 22:46:48'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FR 10/25/2020 22:46:48'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FR 10/25/2020 22:46:48'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FR 10/25/2020 22:46:48'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FR 10/25/2020 22:46:48'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FR 10/25/2020 22:46:48'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FR 10/25/2020 22:46:49'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'FR 10/25/2020 22:46:49'!
FAILURE!
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 22:47:06' prior: 51016230!
execute: stringOfCommands

	stringOfCommands = 'f' ifTrue: [
		orientation = 'N' ifTrue: [ ^position := position + (0@1) ].
		orientation = 'S' ifTrue: [ ^position := position + (0@-1) ].
		orientation = 'E' ifTrue: [ ^position := position + (1@0) ].
		orientation = 'O' ifTrue: [ ^position := position + (-1@0) ].
	].
	stringOfCommands = 'b' ifTrue: [
		orientation = 'N' ifTrue: [ ^position := position - (0@1) ].
		orientation = 'S' ifTrue: [ ^position := position - (0@-1) ].
		orientation = 'E' ifTrue: [ ^position := position - (1@0) ].
		orientation = 'O' ifTrue: [ ^position := position - (-1@0) ].
	].! !

!testRun: #MarsRoverTest #test10 stamp: 'FR 10/25/2020 22:47:09'!
PASSED!

Object subclass: #Orientation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Orientation category: 'MarsRover' stamp: 'FR 10/25/2020 22:49:14'!
Object subclass: #Orientation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Orientation subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #North category: 'MarsRover' stamp: 'FR 10/25/2020 22:49:41'!
Orientation subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Orientation subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #South category: 'MarsRover' stamp: 'FR 10/25/2020 22:49:44'!
Orientation subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Orientation subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #West category: 'MarsRover' stamp: 'FR 10/25/2020 22:49:46'!
Orientation subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Orientation subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #East category: 'MarsRover' stamp: 'FR 10/25/2020 22:49:48'!
Orientation subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!Orientation class methodsFor: 'nil' stamp: 'FR 10/25/2020 22:50:03'!
north

	^ North new! !
!Orientation class methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 22:50:08'!
south

	^ South new! !
!Orientation class methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 22:50:13'!
east

	^ East new! !
!Orientation class methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 22:50:18'!
west

	^ West new! !
!Orientation methodsFor: 'nil' stamp: 'FR 10/25/2020 22:51:01'!
direction

	self subclassResponsibility! !
!Orientation methodsFor: 'testing' stamp: 'FR 10/25/2020 22:51:37'!
isNorth

	self subclassResponsibility! !
!Orientation methodsFor: 'testing' stamp: 'FR 10/25/2020 22:51:41'!
isSouth

	self subclassResponsibility! !
!Orientation methodsFor: 'testing' stamp: 'FR 10/25/2020 22:51:44'!
isEast

	self subclassResponsibility! !
!Orientation methodsFor: 'testing' stamp: 'FR 10/25/2020 22:51:46'!
isWest

	self subclassResponsibility! !
!East methodsFor: 'accessing' stamp: 'FR 10/25/2020 22:52:25' overrides: 51016379!
direction

	^ 1@0! !
!North methodsFor: 'accessing' stamp: 'FR 10/25/2020 22:52:34' overrides: 51016379!
direction

	^ 0@1! !
!South methodsFor: 'accessing' stamp: 'FR 10/25/2020 22:52:41' overrides: 51016379!
direction

	^ 0@-1! !
!West methodsFor: 'accessing' stamp: 'FR 10/25/2020 22:52:49' overrides: 51016379!
direction

	^ -1@0! !
!East methodsFor: 'testing' stamp: 'FR 10/25/2020 22:52:57' overrides: 51016383!
isNorth

	^ false! !
!East methodsFor: 'testing' stamp: 'FR 10/25/2020 22:53:01' overrides: 51016387!
isSouth

	^ false! !
!East methodsFor: 'testing' stamp: 'FR 10/25/2020 22:53:04' overrides: 51016395!
isWest

	^ false! !
!East methodsFor: 'testing' stamp: 'FR 10/25/2020 22:53:08' overrides: 51016391!
isEast

	^ true! !
!North methodsFor: 'testing' stamp: 'FR 10/25/2020 22:53:17' overrides: 51016383!
isNorth

	^ true! !
!North methodsFor: 'testing' stamp: 'FR 10/25/2020 22:53:22' overrides: 51016387!
isSouth

	^ false! !
!North methodsFor: 'testing' stamp: 'FR 10/25/2020 22:53:24' overrides: 51016391!
isEast

	^ false! !
!North methodsFor: 'testing' stamp: 'FR 10/25/2020 22:53:26' overrides: 51016395!
isWest

	^ false! !
!South methodsFor: 'testing' stamp: 'FR 10/25/2020 22:53:33' overrides: 51016383!
isNorth

	^ false! !
!South methodsFor: 'testing' stamp: 'FR 10/25/2020 22:53:36' overrides: 51016395!
isWest

	^ false! !
!South methodsFor: 'testing' stamp: 'FR 10/25/2020 22:53:41' overrides: 51016391!
isEast

	^ false! !
!South methodsFor: 'testing' stamp: 'FR 10/25/2020 22:53:46' overrides: 51016387!
isSouth

	^ true! !
!West methodsFor: 'testing' stamp: 'FR 10/25/2020 22:53:55' overrides: 51016383!
isNorth

	^ false! !
!West methodsFor: 'testing' stamp: 'FR 10/25/2020 22:53:57' overrides: 51016387!
isSouth

	^ false! !
!West methodsFor: 'testing' stamp: 'FR 10/25/2020 22:54:00' overrides: 51016391!
isEast

	^ false! !
!West methodsFor: 'testing' stamp: 'FR 10/25/2020 22:54:05' overrides: 51016395!
isWest

	^ true! !
!MarsRover methodsFor: 'displacement' stamp: 'FR 10/25/2020 22:55:05'!
moveForward

	position := position + orientation direction.! !
!MarsRover methodsFor: 'displacement' stamp: 'FR 10/25/2020 22:55:11'!
moveBackwards

	position := position - orientation direction.! !
!MarsRover methodsFor: 'displacement' stamp: 'FR 10/25/2020 22:55:19'!
moveForwards

	position := position + orientation direction.! !

!methodRemoval: MarsRover #moveForward stamp: 'FR 10/25/2020 22:55:19'!
moveForward

	position := position + orientation direction.!
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 22:56:02' prior: 51016288!
execute: stringOfCommands

	stringOfCommands = 'f' ifTrue: [ self moveForwards ].
	stringOfCommands = 'b' ifTrue: [ 	self moveBackwards ].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 22:56:25' prior: 51015730!
test01

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 1@1 facing: Orientation north.
	
	aMarsRover execute: ''.
	
	self assert: aMarsRover position = (1@1).
	self assert: aMarsRover orientation isNorth! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 22:56:32' prior: 51015796!
test02

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation north.
	
	aMarsRover execute: 'f'.
	
	self assert: aMarsRover position = (0@1).
	self assert: aMarsRover orientation = 'N'! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 22:56:35' prior: 51016515!
test02

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation north.
	
	aMarsRover execute: 'f'.
	
	self assert: aMarsRover position = (0@1).
	self assert: aMarsRover orientation isNorth! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 22:56:41' prior: 51015874!
test03

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 1@1 facing: Orientation north.
	
	aMarsRover execute: 'f'.
	
	self assert: aMarsRover position = (1@2).
	self assert: aMarsRover orientation = 'N'! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 22:56:44' prior: 51016535!
test03

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 1@1 facing: Orientation north.
	
	aMarsRover execute: 'f'.
	
	self assert: aMarsRover position = (1@2).
	self assert: aMarsRover orientation isNorth! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 22:56:58' prior: 51015959!
test04

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation west.
	
	aMarsRover execute: 'f'.
	
	self assert: aMarsRover position = (-1@0).
	self assert: aMarsRover orientation isWest! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 22:57:41' prior: 51015989!
test05

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation south.
	
	aMarsRover execute: 'f'.
	
	self assert: aMarsRover position = (0@-1).
	self assert: aMarsRover orientation isSouth! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 22:57:52' prior: 51016025!
test06

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation east.
	
	aMarsRover execute: 'f'.
	
	self assert: aMarsRover position = (1@0).
	self assert: aMarsRover orientation isEast! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 22:58:02' prior: 51016066!
test07

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation north.
	
	aMarsRover execute: 'b'.
	
	self assert: aMarsRover position = (0@-1).
	self assert: aMarsRover orientation isNorth! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 22:58:15' prior: 51016128!
test08

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation west.
	
	aMarsRover execute: 'b'.
	
	self assert: aMarsRover position = (1@0).
	self assert: aMarsRover orientation isWest! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 22:58:25' prior: 51016197!
test09

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation south.
	
	aMarsRover execute: 'b'.
	
	self assert: aMarsRover position = (0@1).
	self assert: aMarsRover orientation isSouth! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 22:58:34' prior: 51016253!
test10

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation east.
	
	aMarsRover execute: 'b'.
	
	self assert: aMarsRover position = (-1@0).
	self assert: aMarsRover orientation isEast! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 22:58:42'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 22:58:42'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 22:58:42'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 22:58:42'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FR 10/25/2020 22:58:42'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FR 10/25/2020 22:58:42'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FR 10/25/2020 22:58:42'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FR 10/25/2020 22:58:42'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FR 10/25/2020 22:58:42'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FR 10/25/2020 22:58:42'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 23:00:57'!
test11

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation north.
	
	aMarsRover execute: 'l'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isWest! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 23:00:59'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 23:00:59'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 23:00:59'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 23:00:59'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FR 10/25/2020 23:00:59'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FR 10/25/2020 23:00:59'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FR 10/25/2020 23:00:59'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FR 10/25/2020 23:00:59'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FR 10/25/2020 23:00:59'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FR 10/25/2020 23:00:59'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FR 10/25/2020 23:00:59'!
FAILURE!

!testRun: #MarsRoverTest #test11 stamp: 'FR 10/25/2020 23:00:59'!
FAILURE!
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 23:02:46' prior: 51016497!
execute: stringOfCommands

	stringOfCommands = 'f' ifTrue: [ self moveForwards ].
	stringOfCommands = 'b' ifTrue: [ 	self moveBackwards ].
	stringOfCommands = 'l' ifTrue: [ orientation := Orientation west ]! !

!testRun: #MarsRoverTest #test11 stamp: 'FR 10/25/2020 23:02:51'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 23:03:02'!
test12

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation west.
	
	aMarsRover execute: 'l'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isSouth! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 23:03:05'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 23:03:05'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 23:03:05'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 23:03:05'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FR 10/25/2020 23:03:05'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FR 10/25/2020 23:03:05'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FR 10/25/2020 23:03:05'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FR 10/25/2020 23:03:05'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FR 10/25/2020 23:03:05'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FR 10/25/2020 23:03:05'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FR 10/25/2020 23:03:05'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'FR 10/25/2020 23:03:05'!
FAILURE!

!testRun: #MarsRoverTest #test12 stamp: 'FR 10/25/2020 23:03:05'!
FAILURE!
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 23:04:22' prior: 51016686!
execute: stringOfCommands

	stringOfCommands = 'f' ifTrue: [ self moveForwards ].
	stringOfCommands = 'b' ifTrue: [ 	self moveBackwards ].
	stringOfCommands = 'l' ifTrue: [
		orientation isNorth ifTrue: [ ^orientation := Orientation west ].
		orientation isWest ifTrue: [ ^orientation := Orientation south ].
	]! !

!testRun: #MarsRoverTest #test12 stamp: 'FR 10/25/2020 23:04:27'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 23:04:40'!
test13

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation south.
	
	aMarsRover execute: 'l'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isEast! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 23:04:43'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 23:04:44'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 23:04:44'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 23:04:44'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FR 10/25/2020 23:04:44'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FR 10/25/2020 23:04:44'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FR 10/25/2020 23:04:44'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FR 10/25/2020 23:04:44'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FR 10/25/2020 23:04:44'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FR 10/25/2020 23:04:44'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FR 10/25/2020 23:04:44'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'FR 10/25/2020 23:04:44'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'FR 10/25/2020 23:04:44'!
FAILURE!

!testRun: #MarsRoverTest #test13 stamp: 'FR 10/25/2020 23:04:44'!
FAILURE!
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 23:05:09' prior: 51016738!
execute: stringOfCommands

	stringOfCommands = 'f' ifTrue: [ self moveForwards ].
	stringOfCommands = 'b' ifTrue: [ 	self moveBackwards ].
	stringOfCommands = 'l' ifTrue: [
		orientation isNorth ifTrue: [ ^orientation := Orientation west ].
		orientation isWest ifTrue: [ ^orientation := Orientation south ].
		orientation isSouth ifTrue: [ ^orientation := Orientation east ].
	]! !

!testRun: #MarsRoverTest #test13 stamp: 'FR 10/25/2020 23:05:12'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 23:05:22'!
test14

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation east.
	
	aMarsRover execute: 'l'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isNorth! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 23:05:24'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 23:05:25'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 23:05:25'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 23:05:25'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FR 10/25/2020 23:05:25'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FR 10/25/2020 23:05:25'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FR 10/25/2020 23:05:25'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FR 10/25/2020 23:05:25'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FR 10/25/2020 23:05:25'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FR 10/25/2020 23:05:25'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FR 10/25/2020 23:05:25'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'FR 10/25/2020 23:05:25'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'FR 10/25/2020 23:05:25'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'FR 10/25/2020 23:05:25'!
FAILURE!

!testRun: #MarsRoverTest #test14 stamp: 'FR 10/25/2020 23:05:25'!
FAILURE!
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 23:05:40' prior: 51016796!
execute: stringOfCommands

	stringOfCommands = 'f' ifTrue: [ self moveForwards ].
	stringOfCommands = 'b' ifTrue: [ 	self moveBackwards ].
	stringOfCommands = 'l' ifTrue: [
		orientation isNorth ifTrue: [ ^orientation := Orientation west ].
		orientation isWest ifTrue: [ ^orientation := Orientation south ].
		orientation isSouth ifTrue: [ ^orientation := Orientation east ].
		orientation isEast ifTrue: [ ^orientation := Orientation north ].
	]! !

!testRun: #MarsRoverTest #test14 stamp: 'FR 10/25/2020 23:05:43'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 23:06:09'!
test15

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation north.
	
	aMarsRover execute: 'r'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isEast! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 23:06:11'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 23:06:11'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 23:06:11'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 23:06:11'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FR 10/25/2020 23:06:11'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FR 10/25/2020 23:06:11'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FR 10/25/2020 23:06:11'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FR 10/25/2020 23:06:11'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FR 10/25/2020 23:06:11'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FR 10/25/2020 23:06:11'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FR 10/25/2020 23:06:11'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'FR 10/25/2020 23:06:11'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'FR 10/25/2020 23:06:12'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'FR 10/25/2020 23:06:12'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'FR 10/25/2020 23:06:12'!
FAILURE!

!testRun: #MarsRoverTest #test15 stamp: 'FR 10/25/2020 23:06:12'!
FAILURE!
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 23:07:06' prior: 51016858!
execute: stringOfCommands

	stringOfCommands = 'f' ifTrue: [ self moveForwards ].
	stringOfCommands = 'b' ifTrue: [ 	self moveBackwards ].
	stringOfCommands = 'l' ifTrue: [
		orientation isNorth ifTrue: [ ^orientation := Orientation west ].
		orientation isWest ifTrue: [ ^orientation := Orientation south ].
		orientation isSouth ifTrue: [ ^orientation := Orientation east ].
		orientation isEast ifTrue: [ ^orientation := Orientation north ].
	].
	stringOfCommands = 'r' ifTrue: [
		orientation := Orientation east.
	]! !

!testRun: #MarsRoverTest #test15 stamp: 'FR 10/25/2020 23:07:10'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 23:07:28'!
test16

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation east.
	
	aMarsRover execute: 'r'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isSouth! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 23:07:30'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 23:07:30'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 23:07:30'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 23:07:30'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FR 10/25/2020 23:07:30'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FR 10/25/2020 23:07:30'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FR 10/25/2020 23:07:30'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FR 10/25/2020 23:07:30'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FR 10/25/2020 23:07:30'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FR 10/25/2020 23:07:30'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FR 10/25/2020 23:07:30'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'FR 10/25/2020 23:07:30'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'FR 10/25/2020 23:07:30'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'FR 10/25/2020 23:07:30'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'FR 10/25/2020 23:07:31'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'FR 10/25/2020 23:07:31'!
FAILURE!

!testRun: #MarsRoverTest #test16 stamp: 'FR 10/25/2020 23:07:31'!
FAILURE!
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 23:08:25' prior: 51016924!
execute: stringOfCommands

	stringOfCommands = 'f' ifTrue: [ self moveForwards ].
	stringOfCommands = 'b' ifTrue: [ 	self moveBackwards ].
	stringOfCommands = 'l' ifTrue: [
		orientation isNorth ifTrue: [ ^orientation := Orientation west ].
		orientation isWest ifTrue: [ ^orientation := Orientation south ].
		orientation isSouth ifTrue: [ ^orientation := Orientation east ].
		orientation isEast ifTrue: [ ^orientation := Orientation north ].
	].
	stringOfCommands = 'r' ifTrue: [
		orientation isNorth ifTrue: [ 	^orientation := Orientation east ].
		orientation isEast ifTrue: [ 	^orientation := Orientation south ]
	]! !

!testRun: #MarsRoverTest #test16 stamp: 'FR 10/25/2020 23:08:30'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 23:08:41'!
test17

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation south.
	
	aMarsRover execute: 'r'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isWest! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 23:08:42'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 23:08:43'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 23:08:43'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 23:08:43'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FR 10/25/2020 23:08:43'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FR 10/25/2020 23:08:43'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FR 10/25/2020 23:08:43'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FR 10/25/2020 23:08:43'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FR 10/25/2020 23:08:43'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FR 10/25/2020 23:08:43'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FR 10/25/2020 23:08:43'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'FR 10/25/2020 23:08:43'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'FR 10/25/2020 23:08:43'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'FR 10/25/2020 23:08:43'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'FR 10/25/2020 23:08:43'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'FR 10/25/2020 23:08:43'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'FR 10/25/2020 23:08:43'!
FAILURE!

!testRun: #MarsRoverTest #test17 stamp: 'FR 10/25/2020 23:08:43'!
FAILURE!
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 23:09:14' prior: 51016996!
execute: stringOfCommands

	stringOfCommands = 'f' ifTrue: [ self moveForwards ].
	stringOfCommands = 'b' ifTrue: [ 	self moveBackwards ].
	stringOfCommands = 'l' ifTrue: [
		orientation isNorth ifTrue: [ ^orientation := Orientation west ].
		orientation isWest ifTrue: [ ^orientation := Orientation south ].
		orientation isSouth ifTrue: [ ^orientation := Orientation east ].
		orientation isEast ifTrue: [ ^orientation := Orientation north ].
	].
	stringOfCommands = 'r' ifTrue: [
		orientation isNorth ifTrue: [ 	^orientation := Orientation east ].
		orientation isEast ifTrue: [ 	^orientation := Orientation south ].
		orientation isSouth ifTrue: [ 	^orientation := Orientation west ].
	]! !

!testRun: #MarsRoverTest #test17 stamp: 'FR 10/25/2020 23:09:16'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 23:09:27'!
test18

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation west.
	
	aMarsRover execute: 'r'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isNorth! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 23:09:33'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 23:09:33'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 23:09:33'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 23:09:33'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FR 10/25/2020 23:09:33'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FR 10/25/2020 23:09:34'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FR 10/25/2020 23:09:34'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FR 10/25/2020 23:09:34'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FR 10/25/2020 23:09:34'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FR 10/25/2020 23:09:34'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FR 10/25/2020 23:09:34'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'FR 10/25/2020 23:09:34'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'FR 10/25/2020 23:09:34'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'FR 10/25/2020 23:09:34'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'FR 10/25/2020 23:09:34'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'FR 10/25/2020 23:09:34'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'FR 10/25/2020 23:09:34'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'FR 10/25/2020 23:09:34'!
FAILURE!

!testRun: #MarsRoverTest #test18 stamp: 'FR 10/25/2020 23:09:34'!
FAILURE!
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 23:09:51' prior: 51017073!
execute: stringOfCommands

	stringOfCommands = 'f' ifTrue: [ self moveForwards ].
	stringOfCommands = 'b' ifTrue: [ 	self moveBackwards ].
	stringOfCommands = 'l' ifTrue: [
		orientation isNorth ifTrue: [ ^orientation := Orientation west ].
		orientation isWest ifTrue: [ ^orientation := Orientation south ].
		orientation isSouth ifTrue: [ ^orientation := Orientation east ].
		orientation isEast ifTrue: [ ^orientation := Orientation north ].
	].
	stringOfCommands = 'r' ifTrue: [
		orientation isNorth ifTrue: [ 	^orientation := Orientation east ].
		orientation isEast ifTrue: [ 	^orientation := Orientation south ].
		orientation isSouth ifTrue: [ 	^orientation := Orientation west ].
		orientation isWest ifTrue: [ 	^orientation := Orientation north ].
	]! !

!testRun: #MarsRoverTest #test18 stamp: 'FR 10/25/2020 23:09:53'!
PASSED!
!Orientation methodsFor: 'rotation' stamp: 'FR 10/25/2020 23:10:24'!
rotateLeft

	self subclassResponsibility! !
!Orientation methodsFor: 'rotation' stamp: 'FR 10/25/2020 23:10:27'!
rotateRight

	self subclassResponsibility! !
!East methodsFor: 'rotation' stamp: 'FR 10/25/2020 23:10:46' overrides: 51017183!
rotateLeft

	^ Orientation north! !
!East methodsFor: 'rotation' stamp: 'FR 10/25/2020 23:10:53' overrides: 51017187!
rotateRight

	^ Orientation south! !
!North methodsFor: 'rotation' stamp: 'FR 10/25/2020 23:11:07' overrides: 51017183!
rotateLeft

	^ Orientation west! !
!North methodsFor: 'rotation' stamp: 'FR 10/25/2020 23:11:14' overrides: 51017187!
rotateRight

	^ Orientation east! !
!South methodsFor: 'rotation' stamp: 'FR 10/25/2020 23:11:30' overrides: 51017183!
rotateLeft

	^ Orientation east! !
!South methodsFor: 'rotation' stamp: 'FR 10/25/2020 23:11:37' overrides: 51017187!
rotateRight

	^ Orientation west! !
!West methodsFor: 'rotation' stamp: 'FR 10/25/2020 23:11:49' overrides: 51017183!
rotateLeft

	^ Orientation south! !
!West methodsFor: 'rotation' stamp: 'FR 10/25/2020 23:11:54' overrides: 51017187!
rotateRight

	^ Orientation north! !
!MarsRover methodsFor: 'rotation' stamp: 'FR 10/25/2020 23:12:40'!
rotateLeft

	orientation := orientation rotateLeft! !
!MarsRover methodsFor: 'rotation' stamp: 'FR 10/25/2020 23:12:45'!
rotateRight

	orientation := orientation rotateRight! !
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 23:13:16' prior: 51017154!
execute: stringOfCommands

	stringOfCommands = 'f' ifTrue: [ self moveForwards ].
	stringOfCommands = 'b' ifTrue: [ 	self moveBackwards ].
	stringOfCommands = 'l' ifTrue: [ self rotateLeft ].
	stringOfCommands = 'r' ifTrue: [ self rotateRight ].! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 23:13:18'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 23:13:18'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 23:13:18'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 23:13:18'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FR 10/25/2020 23:13:18'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FR 10/25/2020 23:13:18'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FR 10/25/2020 23:13:18'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FR 10/25/2020 23:13:18'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FR 10/25/2020 23:13:18'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FR 10/25/2020 23:13:18'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FR 10/25/2020 23:13:18'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'FR 10/25/2020 23:13:18'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'FR 10/25/2020 23:13:18'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'FR 10/25/2020 23:13:18'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'FR 10/25/2020 23:13:18'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'FR 10/25/2020 23:13:18'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'FR 10/25/2020 23:13:18'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'FR 10/25/2020 23:13:18'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 23:15:02'!
test19

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation north.
	
	aMarsRover execute: 'lf'.
	
	self assert: aMarsRover position = (-1@0).
	self assert: aMarsRover orientation isWest! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 23:15:05'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 23:15:05'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 23:15:05'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 23:15:05'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FR 10/25/2020 23:15:05'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FR 10/25/2020 23:15:05'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FR 10/25/2020 23:15:05'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FR 10/25/2020 23:15:05'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FR 10/25/2020 23:15:05'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FR 10/25/2020 23:15:05'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FR 10/25/2020 23:15:05'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'FR 10/25/2020 23:15:05'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'FR 10/25/2020 23:15:06'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'FR 10/25/2020 23:15:06'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'FR 10/25/2020 23:15:06'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'FR 10/25/2020 23:15:06'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'FR 10/25/2020 23:15:06'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'FR 10/25/2020 23:15:06'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'FR 10/25/2020 23:15:06'!
FAILURE!

!testRun: #MarsRoverTest #test19 stamp: 'FR 10/25/2020 23:15:06'!
FAILURE!
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 23:16:40' prior: 51017232!
execute: stringOfCommands

	stringOfCommands do: [ :aCharacter | 
		aCharacter = $f ifTrue: [ self moveForwards ].
		aCharacter = $b ifTrue: [ 	self moveBackwards ].
		aCharacter = $l ifTrue: [ self rotateLeft ].
		aCharacter = $r ifTrue: [ self rotateRight ].
	]! !

!testRun: #MarsRoverTest #test19 stamp: 'FR 10/25/2020 23:16:43'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 23:25:07'!
test20

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation north.
	
	self  should: [ aMarsRover execute: 'fx' ]
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		
	self assert: aMarsRover position = (0@1).
	self assert: aMarsRover orientation isNorth! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 23:25:10'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 23:25:10'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 23:25:10'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 23:25:10'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FR 10/25/2020 23:25:10'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FR 10/25/2020 23:25:10'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FR 10/25/2020 23:25:10'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FR 10/25/2020 23:25:10'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FR 10/25/2020 23:25:10'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FR 10/25/2020 23:25:10'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FR 10/25/2020 23:25:10'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'FR 10/25/2020 23:25:10'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'FR 10/25/2020 23:25:10'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'FR 10/25/2020 23:25:10'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'FR 10/25/2020 23:25:10'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'FR 10/25/2020 23:25:10'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'FR 10/25/2020 23:25:11'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'FR 10/25/2020 23:25:11'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'FR 10/25/2020 23:25:11'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'FR 10/25/2020 23:25:11'!
ERROR!

!testRun: #MarsRoverTest #test20 stamp: 'FR 10/25/2020 23:25:11'!
ERROR!
!MarsRover class methodsFor: 'error descriptions' stamp: 'FR 10/25/2020 23:25:20'!
invalidCommandErrorDescription
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'error descriptions' stamp: 'FR 10/25/2020 23:25:49' prior: 51017418!
invalidCommandErrorDescription
	
	^ 'Found invalid command in string of commands!! Execution stopped.'! !

!testRun: #MarsRoverTest #test20 stamp: 'FR 10/25/2020 23:25:56'!
FAILURE!
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 23:26:25' prior: 51017342!
execute: stringOfCommands

	stringOfCommands do: [ :aCharacter | 
		aCharacter = $f ifTrue: [ self moveForwards ].
		aCharacter = $b ifTrue: [ 	self moveBackwards ].
		aCharacter = $l ifTrue: [ self rotateLeft ].
		aCharacter = $r ifTrue: [ self rotateRight ].
		aCharacter = $x ifTrue: [ self error: self class invalidCommandErrorDescription ]
	]! !
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 23:26:27' prior: 51017432!
execute: stringOfCommands

	stringOfCommands do: [ :aCharacter | 
		aCharacter = $f ifTrue: [ self moveForwards ].
		aCharacter = $b ifTrue: [ 	self moveBackwards ].
		aCharacter = $l ifTrue: [ self rotateLeft ].
		aCharacter = $r ifTrue: [ self rotateRight ].
		aCharacter = $x ifTrue: [ self error: self class invalidCommandErrorDescription ].
	]! !

!testRun: #MarsRoverTest #test20 stamp: 'FR 10/25/2020 23:26:32'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 23:27:20'!
test21

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation north.
	
	self  should: [ aMarsRover execute: 'fp' ]
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		
	self assert: aMarsRover position = (0@1).
	self assert: aMarsRover orientation isNorth! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 23:27:21'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 23:27:21'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 23:27:21'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 23:27:22'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FR 10/25/2020 23:27:22'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FR 10/25/2020 23:27:22'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FR 10/25/2020 23:27:22'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FR 10/25/2020 23:27:22'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FR 10/25/2020 23:27:22'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FR 10/25/2020 23:27:22'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FR 10/25/2020 23:27:22'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'FR 10/25/2020 23:27:22'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'FR 10/25/2020 23:27:22'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'FR 10/25/2020 23:27:22'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'FR 10/25/2020 23:27:22'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'FR 10/25/2020 23:27:22'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'FR 10/25/2020 23:27:22'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'FR 10/25/2020 23:27:22'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'FR 10/25/2020 23:27:22'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'FR 10/25/2020 23:27:22'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'FR 10/25/2020 23:27:22'!
FAILURE!

!testRun: #MarsRoverTest #test21 stamp: 'FR 10/25/2020 23:27:22'!
FAILURE!
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 23:29:20' prior: 51017446!
execute: stringOfCommands

	stringOfCommands do: [ :aCharacter | 
		aCharacter = $f ifTrue: [ self moveForwards ].
		aCharacter = $b ifTrue: [ 	self moveBackwards ].
		aCharacter = $l ifTrue: [ self rotateLeft ].
		aCharacter = $r ifTrue: [ self rotateRight ].
		(#($f $b $l $r) includes: aCharacter) ifFalse: [ self error: self class invalidCommandErrorDescription ].
	]! !

!testRun: #MarsRoverTest #test21 stamp: 'FR 10/25/2020 23:29:26'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 23:29:29'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 23:29:30'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 23:29:30'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 23:29:30'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FR 10/25/2020 23:29:30'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FR 10/25/2020 23:29:30'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FR 10/25/2020 23:29:30'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FR 10/25/2020 23:29:30'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FR 10/25/2020 23:29:30'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FR 10/25/2020 23:29:30'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FR 10/25/2020 23:29:30'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'FR 10/25/2020 23:29:30'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'FR 10/25/2020 23:29:30'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'FR 10/25/2020 23:29:30'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'FR 10/25/2020 23:29:30'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'FR 10/25/2020 23:29:30'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'FR 10/25/2020 23:29:30'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'FR 10/25/2020 23:29:30'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'FR 10/25/2020 23:29:30'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'FR 10/25/2020 23:29:31'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'FR 10/25/2020 23:29:31'!
PASSED!

Object subclass: #Command
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Command category: 'MarsRover' stamp: 'FR 10/25/2020 23:30:19'!
Object subclass: #Command
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!Command class methodsFor: 'instance creation' stamp: 'FR 10/25/2020 23:31:13'!
from: aCharacter

	^ (self allSubclasses detect: [ :aCommandSubclass | aCommandSubclass canHandle: aCharacter ]) new! !
!Command methodsFor: 'nil' stamp: 'FR 10/25/2020 23:31:30'!
executeOn: aMarsRover

	self subclassResponsibility! !

Command subclass: #Forwards
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Forwards category: 'MarsRover' stamp: 'FR 10/25/2020 23:32:05'!
Command subclass: #Forwards
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Command subclass: #Backwards
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Backwards category: 'MarsRover' stamp: 'FR 10/25/2020 23:32:10'!
Command subclass: #Backwards
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Command subclass: #Left
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Left category: 'MarsRover' stamp: 'FR 10/25/2020 23:32:12'!
Command subclass: #Left
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Command subclass: #Right
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Right category: 'MarsRover' stamp: 'FR 10/25/2020 23:32:15'!
Command subclass: #Right
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Command subclass: #Invalid
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Invalid category: 'MarsRover' stamp: 'FR 10/25/2020 23:32:18'!
Command subclass: #Invalid
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!Backwards class methodsFor: 'instance creation' stamp: 'FR 10/25/2020 23:32:40'!
canHandle: aCharacter

	^ aCharacter = $b! !
!Forwards class methodsFor: 'instance creation' stamp: 'FR 10/25/2020 23:32:48'!
canHandle: aCharacter

	^ aCharacter = $f! !
!Left class methodsFor: 'instance creation' stamp: 'FR 10/25/2020 23:32:55'!
canHandle: aCharacter

	^ aCharacter = $l! !
!Right class methodsFor: 'instance creation' stamp: 'FR 10/25/2020 23:33:01'!
canHandle: aCharacter

	^ aCharacter = $r! !
!Invalid class methodsFor: 'instance creation' stamp: 'FR 10/25/2020 23:34:00'!
canHandle: aCharacter

	^ #($f $b $l $r) includes: aCharacter not! !
!Backwards methodsFor: 'execution' stamp: 'FR 10/25/2020 23:34:28' overrides: 51017609!
executeOn: aMarsRover

	aMarsRover moveBackwards! !
!Forwards methodsFor: 'execution' stamp: 'FR 10/25/2020 23:34:39' overrides: 51017609!
executeOn: aMarsRover

	aMarsRover moveForwards! !
!Invalid methodsFor: 'execution' stamp: 'FR 10/25/2020 23:34:52' overrides: 51017609!
executeOn: aMarsRover

	aMarsRover invalidCommand! !
!Left methodsFor: 'execution' stamp: 'FR 10/25/2020 23:35:03' overrides: 51017609!
executeOn: aMarsRover

	aMarsRover rotateLeft! !
!Right methodsFor: 'execution' stamp: 'FR 10/25/2020 23:35:11' overrides: 51017609!
executeOn: aMarsRover

	aMarsRover rotateRight! !
!MarsRover methodsFor: 'invalid' stamp: 'FR 10/25/2020 23:35:43'!
invalidCommand

	self error: self class invalidCommandErrorDescription! !
!MarsRover methodsFor: 'execution' stamp: 'FR 10/25/2020 23:36:04' prior: 51017526!
execute: stringOfCommands

	stringOfCommands do: [ :aCharacter | 
		(Command from: aCharacter) executeOn: self.
	]! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 23:36:58'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 23:36:58'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 23:36:58'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 23:36:58'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FR 10/25/2020 23:36:58'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FR 10/25/2020 23:36:58'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FR 10/25/2020 23:36:58'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FR 10/25/2020 23:36:58'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FR 10/25/2020 23:36:58'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FR 10/25/2020 23:36:58'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FR 10/25/2020 23:36:58'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'FR 10/25/2020 23:36:58'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'FR 10/25/2020 23:36:58'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'FR 10/25/2020 23:36:59'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'FR 10/25/2020 23:36:59'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'FR 10/25/2020 23:36:59'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'FR 10/25/2020 23:36:59'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'FR 10/25/2020 23:36:59'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'FR 10/25/2020 23:36:59'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'FR 10/25/2020 23:36:59'!
FAILURE!

!testRun: #MarsRoverTest #test21 stamp: 'FR 10/25/2020 23:36:59'!
FAILURE!

!testRun: #MarsRoverTest #test20 stamp: 'FR 10/25/2020 23:37:21'!
FAILURE!

#($f $b $l $r) includes: aCharacter not!
!Invalid class methodsFor: 'instance creation' stamp: 'FR 10/25/2020 23:37:51' prior: 51017681!
canHandle: aCharacter

	^ (#($f $b $l $r) includes: aCharacter) not! !

!testRun: #MarsRoverTest #test01 stamp: 'FR 10/25/2020 23:37:54'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FR 10/25/2020 23:37:54'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FR 10/25/2020 23:37:54'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FR 10/25/2020 23:37:54'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FR 10/25/2020 23:37:54'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FR 10/25/2020 23:37:54'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FR 10/25/2020 23:37:54'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FR 10/25/2020 23:37:54'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FR 10/25/2020 23:37:54'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FR 10/25/2020 23:37:54'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FR 10/25/2020 23:37:54'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'FR 10/25/2020 23:37:54'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'FR 10/25/2020 23:37:54'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'FR 10/25/2020 23:37:54'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'FR 10/25/2020 23:37:54'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'FR 10/25/2020 23:37:54'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'FR 10/25/2020 23:37:54'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'FR 10/25/2020 23:37:54'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'FR 10/25/2020 23:37:54'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'FR 10/25/2020 23:37:54'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'FR 10/25/2020 23:37:54'!
PASSED!

!methodRemoval: MarsRoverTest #test01 stamp: 'FR 10/25/2020 23:39:28'!
test01

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 1@1 facing: Orientation north.
	
	aMarsRover execute: ''.
	
	self assert: aMarsRover position = (1@1).
	self assert: aMarsRover orientation isNorth!

!methodRemoval: MarsRoverTest #test07 stamp: 'FR 10/25/2020 23:43:29'!
test07

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation north.
	
	aMarsRover execute: 'b'.
	
	self assert: aMarsRover position = (0@-1).
	self assert: aMarsRover orientation isNorth!

!methodRemoval: MarsRoverTest #test08 stamp: 'FR 10/25/2020 23:43:33'!
test08

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation west.
	
	aMarsRover execute: 'b'.
	
	self assert: aMarsRover position = (1@0).
	self assert: aMarsRover orientation isWest!

!methodRemoval: MarsRoverTest #test05 stamp: 'FR 10/25/2020 23:43:41'!
test05

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation south.
	
	aMarsRover execute: 'f'.
	
	self assert: aMarsRover position = (0@-1).
	self assert: aMarsRover orientation isSouth!

!methodRemoval: MarsRoverTest #test06 stamp: 'FR 10/25/2020 23:43:43'!
test06

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation east.
	
	aMarsRover execute: 'f'.
	
	self assert: aMarsRover position = (1@0).
	self assert: aMarsRover orientation isEast!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 23:48:45' prior: 51017356!
test20

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 1@1 facing: Orientation north.
	
	self  should: [ aMarsRover execute: 'fx' ]
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		
	self assert: aMarsRover position = (1@2).
	self assert: aMarsRover orientation isNorth! !

!methodRemoval: MarsRoverTest #test03 stamp: 'FR 10/25/2020 23:49:27'!
test03

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 1@1 facing: Orientation north.
	
	aMarsRover execute: 'f'.
	
	self assert: aMarsRover position = (1@2).
	self assert: aMarsRover orientation isNorth!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 23:56:49'!
test01RoverMovesForwardsFacingNorthCorrectly

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation north.
	
	aMarsRover execute: 'f'.
	
	self assert: aMarsRover position = (0@1).
	self assert: aMarsRover orientation isNorth! !

!methodRemoval: MarsRoverTest #test02 stamp: 'FR 10/25/2020 23:56:49'!
test02

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation north.
	
	aMarsRover execute: 'f'.
	
	self assert: aMarsRover position = (0@1).
	self assert: aMarsRover orientation isNorth!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 23:57:13'!
test02RoverMovesForwardsFacingWestCorrectly

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation west.
	
	aMarsRover execute: 'f'.
	
	self assert: aMarsRover position = (-1@0).
	self assert: aMarsRover orientation isWest! !

!methodRemoval: MarsRoverTest #test04 stamp: 'FR 10/25/2020 23:57:13'!
test04

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation west.
	
	aMarsRover execute: 'f'.
	
	self assert: aMarsRover position = (-1@0).
	self assert: aMarsRover orientation isWest!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 23:57:28'!
test03RoverMovesBackwardsFacingSouthCorrectly

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation south.
	
	aMarsRover execute: 'b'.
	
	self assert: aMarsRover position = (0@1).
	self assert: aMarsRover orientation isSouth! !

!methodRemoval: MarsRoverTest #test09 stamp: 'FR 10/25/2020 23:57:28'!
test09

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation south.
	
	aMarsRover execute: 'b'.
	
	self assert: aMarsRover position = (0@1).
	self assert: aMarsRover orientation isSouth!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 23:57:46'!
test04RoverMovesBackwardsFacingEastCorrectly

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation east.
	
	aMarsRover execute: 'b'.
	
	self assert: aMarsRover position = (-1@0).
	self assert: aMarsRover orientation isEast! !

!methodRemoval: MarsRoverTest #test10 stamp: 'FR 10/25/2020 23:57:46'!
test10

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation east.
	
	aMarsRover execute: 'b'.
	
	self assert: aMarsRover position = (-1@0).
	self assert: aMarsRover orientation isEast!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 23:58:03'!
test05RoverRotatesLeftFacingNorthCorrectly

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation north.
	
	aMarsRover execute: 'l'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isWest! !

!methodRemoval: MarsRoverTest #test11 stamp: 'FR 10/25/2020 23:58:03'!
test11

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation north.
	
	aMarsRover execute: 'l'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isWest!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 23:58:19'!
test12RoverRotatesLeftFacingWestCorrectly

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation west.
	
	aMarsRover execute: 'l'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isSouth! !

!methodRemoval: MarsRoverTest #test12 stamp: 'FR 10/25/2020 23:58:19'!
test12

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation west.
	
	aMarsRover execute: 'l'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isSouth!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 23:58:36'!
test13RoverRotatesLeftFacingSouthCorrectly

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation south.
	
	aMarsRover execute: 'l'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isEast! !

!methodRemoval: MarsRoverTest #test13 stamp: 'FR 10/25/2020 23:58:36'!
test13

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation south.
	
	aMarsRover execute: 'l'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isEast!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 23:59:19'!
test06RoverRotatesLeftFacingWestCorrectly

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation west.
	
	aMarsRover execute: 'l'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isSouth! !

!methodRemoval: MarsRoverTest #test12RoverRotatesLeftFacingWestCorrectly stamp: 'FR 10/25/2020 23:59:19'!
test12RoverRotatesLeftFacingWestCorrectly

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation west.
	
	aMarsRover execute: 'l'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isSouth!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 23:59:24'!
test07RoverRotatesLeftFacingSouthCorrectly

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation south.
	
	aMarsRover execute: 'l'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isEast! !

!methodRemoval: MarsRoverTest #test13RoverRotatesLeftFacingSouthCorrectly stamp: 'FR 10/25/2020 23:59:24'!
test13RoverRotatesLeftFacingSouthCorrectly

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation south.
	
	aMarsRover execute: 'l'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isEast!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 23:59:34'!
test08RoverRotatesLeftFacingEastCorrectly

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation east.
	
	aMarsRover execute: 'l'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isNorth! !

!methodRemoval: MarsRoverTest #test14 stamp: 'FR 10/25/2020 23:59:34'!
test14

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation east.
	
	aMarsRover execute: 'l'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isNorth!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/25/2020 23:59:54'!
test09RoverRotatesRightFacingNorthCorrectly

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation north.
	
	aMarsRover execute: 'r'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isEast! !

!methodRemoval: MarsRoverTest #test15 stamp: 'FR 10/25/2020 23:59:54'!
test15

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation north.
	
	aMarsRover execute: 'r'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isEast!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:00:05'!
test10RoverRotatesRightFacingEastCorrectly

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation east.
	
	aMarsRover execute: 'r'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isSouth! !

!methodRemoval: MarsRoverTest #test16 stamp: 'FR 10/26/2020 00:00:06'!
test16

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation east.
	
	aMarsRover execute: 'r'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isSouth!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:00:25'!
test11RoverRotatesRightFacingSouthCorrectly

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation south.
	
	aMarsRover execute: 'r'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isWest! !

!methodRemoval: MarsRoverTest #test17 stamp: 'FR 10/26/2020 00:00:25'!
test17

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation south.
	
	aMarsRover execute: 'r'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isWest!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:00:35'!
test12RoverRotatesRightFacingWestCorrectly

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation west.
	
	aMarsRover execute: 'r'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isNorth! !

!methodRemoval: MarsRoverTest #test18 stamp: 'FR 10/26/2020 00:00:35'!
test18

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation west.
	
	aMarsRover execute: 'r'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isNorth!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:00:57'!
test13RoverExecutesMultipleCommandsCorrectly

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation north.
	
	aMarsRover execute: 'lf'.
	
	self assert: aMarsRover position = (-1@0).
	self assert: aMarsRover orientation isWest! !

!methodRemoval: MarsRoverTest #test19 stamp: 'FR 10/26/2020 00:00:57'!
test19

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation north.
	
	aMarsRover execute: 'lf'.
	
	self assert: aMarsRover position = (-1@0).
	self assert: aMarsRover orientation isWest!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:01:20'!
test14RoverFailsWhenItEncountersInvalidCommand

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 1@1 facing: Orientation north.
	
	self  should: [ aMarsRover execute: 'fx' ]
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		
	self assert: aMarsRover position = (1@2).
	self assert: aMarsRover orientation isNorth! !

!methodRemoval: MarsRoverTest #test20 stamp: 'FR 10/26/2020 00:01:20'!
test20

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 1@1 facing: Orientation north.
	
	self  should: [ aMarsRover execute: 'fx' ]
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		
	self assert: aMarsRover position = (1@2).
	self assert: aMarsRover orientation isNorth!

!methodRemoval: MarsRoverTest #test21 stamp: 'FR 10/26/2020 00:02:50'!
test21

	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation north.
	
	self  should: [ aMarsRover execute: 'fp' ]
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		
	self assert: aMarsRover position = (0@1).
	self assert: aMarsRover orientation isNorth!
!MarsRoverTest methodsFor: 'private - assertions' stamp: 'FR 10/26/2020 00:05:20'!
roverFacing: initialOrientation afterExecuting: commandsToExecute shouldBeInPosition: expectedFinalPosition withOrientationSatisfying: conditionsOnOrientation
	
	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: initialOrientation.
	
	aMarsRover execute: commandsToExecute.
	
	self assert: aMarsRover position = expectedFinalPosition.
	self assert: (conditionsOnOrientation value: aMarsRover orientation)! !
!MarsRoverTest methodsFor: 'private - assertions' stamp: 'FR 10/26/2020 00:06:06'!
roverFacing: initialOrientation inPosition: initialPosition afterDoing: aBlock shouldBeInPosition: expectedFinalPosition withOrientationSatisfying: conditionsOnOrientation
	
	| aMarsRover |
	
	aMarsRover := MarsRover inPosition: initialPosition facing: initialOrientation.
	
	aBlock value.
	
	self assert: aMarsRover position = expectedFinalPosition.
	self assert: (conditionsOnOrientation value: aMarsRover orientation)! !
!MarsRoverTest methodsFor: 'private - assertions' stamp: 'FR 10/26/2020 00:07:32' prior: 51018238!
roverFacing: initialOrientation afterExecuting: commandsToExecute shouldBeInPosition: expectedFinalPosition withOrientationSatisfying: conditionsOnOrientation
	
	self  roverFacing: initialOrientation
		inPosition: 0@0
		afterDoing: [ "aMarsRover execute: commandsToExecute" ]
		shouldBeInPosition: expectedFinalPosition
		withOrientationSatisfying: conditionsOnOrientation
	"| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: initialOrientation.
	
	aMarsRover execute: commandsToExecute.
	
	self assert: aMarsRover position = expectedFinalPosition.
	self assert: (conditionsOnOrientation value: aMarsRover orientation)"! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:08:28' prior: 51017896!
test01RoverMovesForwardsFacingNorthCorrectly

	self  roverFacing: Orientation north
		afterExecuting: 'f'
		shouldBeInPosition: 0@1
		withOrientationSatisfying: [ :anOrientation | anOrientation isNorth ]
	"| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation north.
	
	aMarsRover execute: 'f'.
	
	self assert: aMarsRover position = (0@1).
	self assert: aMarsRover orientation isNorth"! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:08:57' prior: 51017916!
test02RoverMovesForwardsFacingWestCorrectly

	self  roverFacing: Orientation west
		afterExecuting: 'f'
		shouldBeInPosition: -1@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isWest ]
	"| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation west.
	
	aMarsRover execute: 'f'.
	
	self assert: aMarsRover position = (-1@0).
	self assert: aMarsRover orientation isWest"! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:09:18' prior: 51017936!
test03RoverMovesBackwardsFacingSouthCorrectly

	self  roverFacing: Orientation south
		afterExecuting: 'b'
		shouldBeInPosition: 0@1
		withOrientationSatisfying: [ :anOrientation | anOrientation isSouth ]
	"| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation south.
	
	aMarsRover execute: 'b'.
	
	self assert: aMarsRover position = (0@1).
	self assert: aMarsRover orientation isSouth"! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:09:36' prior: 51017956!
test04RoverMovesBackwardsFacingEastCorrectly

	self  roverFacing: Orientation east
		afterExecuting: 'b'
		shouldBeInPosition: -1@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isEast ]
	"| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation east.
	
	aMarsRover execute: 'b'.
	
	self assert: aMarsRover position = (-1@0).
	self assert: aMarsRover orientation isEast"! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:09:49' prior: 51017976!
test05RoverRotatesLeftFacingNorthCorrectly

	self  roverFacing: Orientation north
		afterExecuting: 'l'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isWest ]
	"| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation north.
	
	aMarsRover execute: 'l'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isWest"! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:10:05' prior: 51018036!
test06RoverRotatesLeftFacingWestCorrectly

	self  roverFacing: Orientation west
		afterExecuting: 'l'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isSouth ]
	"| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation west.
	
	aMarsRover execute: 'l'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isSouth"! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:10:23' prior: 51018058!
test07RoverRotatesLeftFacingSouthCorrectly

	self  roverFacing: Orientation south
		afterExecuting: 'l'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isEast ]
	"| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation south.
	
	aMarsRover execute: 'l'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isEast"! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:10:37' prior: 51018080!
test08RoverRotatesLeftFacingEastCorrectly

	self  roverFacing: Orientation east
		afterExecuting: 'l'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isNorth ]
	"| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation east.
	
	aMarsRover execute: 'l'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isNorth"! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:10:51' prior: 51018100!
test09RoverRotatesRightFacingNorthCorrectly

	self  roverFacing: Orientation north
		afterExecuting: 'r'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isEast ]
	"| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation north.
	
	aMarsRover execute: 'r'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isEast"! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:11:08' prior: 51018120!
test10RoverRotatesRightFacingEastCorrectly

	self  roverFacing: Orientation east
		afterExecuting: 'r'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isSouth ]
	"| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation east.
	
	aMarsRover execute: 'r'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isSouth"! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:11:38' prior: 51018140!
test11RoverRotatesRightFacingSouthCorrectly

	self  roverFacing: Orientation south
		afterExecuting: 'r'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isWest ]
	"| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation south.
	
	aMarsRover execute: 'r'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isWest"! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:11:50' prior: 51018160!
test12RoverRotatesRightFacingWestCorrectly

	self  roverFacing: Orientation west
		afterExecuting: 'r'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isNorth ]
	"| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation west.
	
	aMarsRover execute: 'r'.
	
	self assert: aMarsRover position = (0@0).
	self assert: aMarsRover orientation isNorth"! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:12:04' prior: 51018180!
test13RoverExecutesMultipleCommandsCorrectly

	self  roverFacing: Orientation north
		afterExecuting: 'lf'
		shouldBeInPosition: -1@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isWest ]
	"| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: Orientation north.
	
	aMarsRover execute: 'lf'.
	
	self assert: aMarsRover position = (-1@0).
	self assert: aMarsRover orientation isWest"! !

TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'aMarsRover1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'FR 10/26/2020 00:13:15'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'aMarsRover1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'private - assertions' stamp: 'FR 10/26/2020 00:13:24' prior: 51018254!
roverFacing: initialOrientation inPosition: initialPosition afterDoing: aBlock shouldBeInPosition: expectedFinalPosition withOrientationSatisfying: conditionsOnOrientation
		
	aMarsRover1 := MarsRover inPosition: initialPosition facing: initialOrientation.
	
	aBlock value.
	
	self assert: aMarsRover1 position = expectedFinalPosition.
	self assert: (conditionsOnOrientation value: aMarsRover1 orientation)! !
!MarsRoverTest methodsFor: 'private - assertions' stamp: 'FR 10/26/2020 00:13:48' prior: 51018271!
roverFacing: initialOrientation afterExecuting: commandsToExecute shouldBeInPosition: expectedFinalPosition withOrientationSatisfying: conditionsOnOrientation
	
	self  roverFacing: initialOrientation
		inPosition: 0@0
		afterDoing: [ aMarsRover1 execute: commandsToExecute ]
		shouldBeInPosition: expectedFinalPosition
		withOrientationSatisfying: conditionsOnOrientation
	"| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: initialOrientation.
	
	aMarsRover execute: commandsToExecute.
	
	self assert: aMarsRover position = expectedFinalPosition.
	self assert: (conditionsOnOrientation value: aMarsRover orientation)"! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:13:53' prior: 51018200!
test14RoverFailsWhenItEncountersInvalidCommand
	
	aMarsRover1 := MarsRover inPosition: 1@1 facing: Orientation north.
	
	self  should: [ aMarsRover1 execute: 'fx' ]
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		
	self assert: aMarsRover1 position = (1@2).
	self assert: aMarsRover1 orientation isNorth! !

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'FR 10/26/2020 00:14:16'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'aMarsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:14:16' prior: 51018514!
roverFacing: initialOrientation inPosition: initialPosition afterDoing: aBlock shouldBeInPosition: expectedFinalPosition withOrientationSatisfying: conditionsOnOrientation
		
	aMarsRover := MarsRover inPosition: initialPosition facing: initialOrientation.
	
	aBlock value.
	
	self assert: aMarsRover position = expectedFinalPosition.
	self assert: (conditionsOnOrientation value: aMarsRover orientation)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:14:16' prior: 51018553!
test14RoverFailsWhenItEncountersInvalidCommand
	
	aMarsRover := MarsRover inPosition: 1@1 facing: Orientation north.
	
	self  should: [ aMarsRover execute: 'fx' ]
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		
	self assert: aMarsRover position = (1@2).
	self assert: aMarsRover orientation isNorth! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:14:16' prior: 51018530!
roverFacing: initialOrientation afterExecuting: commandsToExecute shouldBeInPosition: expectedFinalPosition withOrientationSatisfying: conditionsOnOrientation
	
	self  roverFacing: initialOrientation
		inPosition: 0@0
		afterDoing: [ aMarsRover execute: commandsToExecute ]
		shouldBeInPosition: expectedFinalPosition
		withOrientationSatisfying: conditionsOnOrientation
	"| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: initialOrientation.
	
	aMarsRover execute: commandsToExecute.
	
	self assert: aMarsRover position = expectedFinalPosition.
	self assert: (conditionsOnOrientation value: aMarsRover orientation)"! !

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'FR 10/26/2020 00:14:21'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:14:21' prior: 51018574!
roverFacing: initialOrientation inPosition: initialPosition afterDoing: aBlock shouldBeInPosition: expectedFinalPosition withOrientationSatisfying: conditionsOnOrientation
		
	marsRover := MarsRover inPosition: initialPosition facing: initialOrientation.
	
	aBlock value.
	
	self assert: marsRover position = expectedFinalPosition.
	self assert: (conditionsOnOrientation value: marsRover orientation)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:14:21' prior: 51018590!
test14RoverFailsWhenItEncountersInvalidCommand
	
	marsRover := MarsRover inPosition: 1@1 facing: Orientation north.
	
	self  should: [ marsRover execute: 'fx' ]
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		
	self assert: marsRover position = (1@2).
	self assert: marsRover orientation isNorth! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:14:21' prior: 51018604!
roverFacing: initialOrientation afterExecuting: commandsToExecute shouldBeInPosition: expectedFinalPosition withOrientationSatisfying: conditionsOnOrientation
	
	self  roverFacing: initialOrientation
		inPosition: 0@0
		afterDoing: [ marsRover execute: commandsToExecute ]
		shouldBeInPosition: expectedFinalPosition
		withOrientationSatisfying: conditionsOnOrientation
	"| aMarsRover |
	
	aMarsRover := MarsRover inPosition: 0@0 facing: initialOrientation.
	
	aMarsRover execute: commandsToExecute.
	
	self assert: aMarsRover position = expectedFinalPosition.
	self assert: (conditionsOnOrientation value: aMarsRover orientation)"! !

!testRun: #MarsRoverTest #test01RoverMovesForwardsFacingNorthCorrectly stamp: 'FR 10/26/2020 00:14:32'!
PASSED!

!testRun: #MarsRoverTest #test02RoverMovesForwardsFacingWestCorrectly stamp: 'FR 10/26/2020 00:14:32'!
PASSED!

!testRun: #MarsRoverTest #test03RoverMovesBackwardsFacingSouthCorrectly stamp: 'FR 10/26/2020 00:14:32'!
PASSED!

!testRun: #MarsRoverTest #test04RoverMovesBackwardsFacingEastCorrectly stamp: 'FR 10/26/2020 00:14:32'!
PASSED!

!testRun: #MarsRoverTest #test05RoverRotatesLeftFacingNorthCorrectly stamp: 'FR 10/26/2020 00:14:32'!
PASSED!

!testRun: #MarsRoverTest #test06RoverRotatesLeftFacingWestCorrectly stamp: 'FR 10/26/2020 00:14:32'!
PASSED!

!testRun: #MarsRoverTest #test07RoverRotatesLeftFacingSouthCorrectly stamp: 'FR 10/26/2020 00:14:32'!
PASSED!

!testRun: #MarsRoverTest #test08RoverRotatesLeftFacingEastCorrectly stamp: 'FR 10/26/2020 00:14:32'!
PASSED!

!testRun: #MarsRoverTest #test09RoverRotatesRightFacingNorthCorrectly stamp: 'FR 10/26/2020 00:14:32'!
PASSED!

!testRun: #MarsRoverTest #test10RoverRotatesRightFacingEastCorrectly stamp: 'FR 10/26/2020 00:14:32'!
PASSED!

!testRun: #MarsRoverTest #test11RoverRotatesRightFacingSouthCorrectly stamp: 'FR 10/26/2020 00:14:32'!
PASSED!

!testRun: #MarsRoverTest #test12RoverRotatesRightFacingWestCorrectly stamp: 'FR 10/26/2020 00:14:33'!
PASSED!

!testRun: #MarsRoverTest #test13RoverExecutesMultipleCommandsCorrectly stamp: 'FR 10/26/2020 00:14:33'!
PASSED!

!testRun: #MarsRoverTest #test14RoverFailsWhenItEncountersInvalidCommand stamp: 'FR 10/26/2020 00:14:33'!
PASSED!
!MarsRoverTest methodsFor: 'private - assertions' stamp: 'FR 10/26/2020 00:14:40' prior: 51018665!
roverFacing: initialOrientation afterExecuting: commandsToExecute shouldBeInPosition: expectedFinalPosition withOrientationSatisfying: conditionsOnOrientation
	
	self  roverFacing: initialOrientation
		inPosition: 0@0
		afterDoing: [ marsRover execute: commandsToExecute ]
		shouldBeInPosition: expectedFinalPosition
		withOrientationSatisfying: conditionsOnOrientation! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:14:53' prior: 51018294!
test01RoverMovesForwardsFacingNorthCorrectly

	self  roverFacing: Orientation north
		afterExecuting: 'f'
		shouldBeInPosition: 0@1
		withOrientationSatisfying: [ :anOrientation | anOrientation isNorth ]
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:14:57' prior: 51018310!
test02RoverMovesForwardsFacingWestCorrectly

	self  roverFacing: Orientation west
		afterExecuting: 'f'
		shouldBeInPosition: -1@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isWest ]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:15:02' prior: 51018326!
test03RoverMovesBackwardsFacingSouthCorrectly

	self  roverFacing: Orientation south
		afterExecuting: 'b'
		shouldBeInPosition: 0@1
		withOrientationSatisfying: [ :anOrientation | anOrientation isSouth ]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:15:06' prior: 51018342!
test04RoverMovesBackwardsFacingEastCorrectly

	self  roverFacing: Orientation east
		afterExecuting: 'b'
		shouldBeInPosition: -1@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isEast ]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:15:10' prior: 51018358!
test05RoverRotatesLeftFacingNorthCorrectly

	self  roverFacing: Orientation north
		afterExecuting: 'l'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isWest ]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:15:13' prior: 51018374!
test06RoverRotatesLeftFacingWestCorrectly

	self  roverFacing: Orientation west
		afterExecuting: 'l'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isSouth ]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:15:20' prior: 51018390!
test07RoverRotatesLeftFacingSouthCorrectly

	self  roverFacing: Orientation south
		afterExecuting: 'l'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isEast ]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:15:24' prior: 51018406!
test08RoverRotatesLeftFacingEastCorrectly

	self  roverFacing: Orientation east
		afterExecuting: 'l'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isNorth ]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:15:27' prior: 51018422!
test09RoverRotatesRightFacingNorthCorrectly

	self  roverFacing: Orientation north
		afterExecuting: 'r'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isEast ]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:15:31' prior: 51018438!
test10RoverRotatesRightFacingEastCorrectly

	self  roverFacing: Orientation east
		afterExecuting: 'r'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isSouth ]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:15:35' prior: 51018454!
test11RoverRotatesRightFacingSouthCorrectly

	self  roverFacing: Orientation south
		afterExecuting: 'r'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isWest ]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:15:38' prior: 51018470!
test12RoverRotatesRightFacingWestCorrectly

	self  roverFacing: Orientation west
		afterExecuting: 'r'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isNorth ]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:15:42' prior: 51018486!
test13RoverExecutesMultipleCommandsCorrectly

	self  roverFacing: Orientation north
		afterExecuting: 'lf'
		shouldBeInPosition: -1@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isWest ]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:17:27' prior: 51018651!
test14RoverFailsWhenItEncountersInvalidCommand
	
	self  roverFacing: Orientation north
		inPosition: 1@1
		afterDoing: [
			self  should: [ marsRover execute: 'fx' ]
				raise: Error
				withMessageText: MarsRover invalidCommandErrorDescription.
		]
		shouldBeInPosition: 1@2
		withOrientationSatisfying: [ :anOrientation | anOrientation isNorth ] 
	
	"marsRover := MarsRover inPosition: 1@1 facing: Orientation north.
	
	self  should: [ marsRover execute: 'fx' ]
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		
	self assert: marsRover position = (1@2).
	self assert: marsRover orientation isNorth"! !

!testRun: #MarsRoverTest #test01RoverMovesForwardsFacingNorthCorrectly stamp: 'FR 10/26/2020 00:17:30'!
PASSED!

!testRun: #MarsRoverTest #test02RoverMovesForwardsFacingWestCorrectly stamp: 'FR 10/26/2020 00:17:30'!
PASSED!

!testRun: #MarsRoverTest #test03RoverMovesBackwardsFacingSouthCorrectly stamp: 'FR 10/26/2020 00:17:30'!
PASSED!

!testRun: #MarsRoverTest #test04RoverMovesBackwardsFacingEastCorrectly stamp: 'FR 10/26/2020 00:17:30'!
PASSED!

!testRun: #MarsRoverTest #test05RoverRotatesLeftFacingNorthCorrectly stamp: 'FR 10/26/2020 00:17:30'!
PASSED!

!testRun: #MarsRoverTest #test06RoverRotatesLeftFacingWestCorrectly stamp: 'FR 10/26/2020 00:17:30'!
PASSED!

!testRun: #MarsRoverTest #test07RoverRotatesLeftFacingSouthCorrectly stamp: 'FR 10/26/2020 00:17:30'!
PASSED!

!testRun: #MarsRoverTest #test08RoverRotatesLeftFacingEastCorrectly stamp: 'FR 10/26/2020 00:17:30'!
PASSED!

!testRun: #MarsRoverTest #test09RoverRotatesRightFacingNorthCorrectly stamp: 'FR 10/26/2020 00:17:30'!
PASSED!

!testRun: #MarsRoverTest #test10RoverRotatesRightFacingEastCorrectly stamp: 'FR 10/26/2020 00:17:30'!
PASSED!

!testRun: #MarsRoverTest #test11RoverRotatesRightFacingSouthCorrectly stamp: 'FR 10/26/2020 00:17:30'!
PASSED!

!testRun: #MarsRoverTest #test12RoverRotatesRightFacingWestCorrectly stamp: 'FR 10/26/2020 00:17:30'!
PASSED!

!testRun: #MarsRoverTest #test13RoverExecutesMultipleCommandsCorrectly stamp: 'FR 10/26/2020 00:17:30'!
PASSED!

!testRun: #MarsRoverTest #test14RoverFailsWhenItEncountersInvalidCommand stamp: 'FR 10/26/2020 00:17:30'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FR 10/26/2020 00:17:36' prior: 51018882!
test14RoverFailsWhenItEncountersInvalidCommand
	
	self  roverFacing: Orientation north
		inPosition: 1@1
		afterDoing: [
			self  should: [ marsRover execute: 'fx' ]
				raise: Error
				withMessageText: MarsRover invalidCommandErrorDescription.
		]
		shouldBeInPosition: 1@2
		withOrientationSatisfying: [ :anOrientation | anOrientation isNorth ]! !

----STARTUP---- (26 October 2020 09:57:19) as E:\!!NUEVO\Programas\CuisUniversity\v4383.1\CuisUniversity-4383.image!


----End fileIn of E:\!!NUEVO\Programas\CuisUniversity\v4383.1\MarsRover - Entrega\EntregaMarsRover.st----!
!MarsRoverTest methodsFor: 'tests - displacement' stamp: 'FR 10/26/2020 09:58:49'!
test05RoverMovesBackwardsFacingEastCorrectly

	self  roverFacing: Orientation east
		afterExecuting: 'b'
		shouldBeInPosition: -1@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isEast ]! !

!methodRemoval: MarsRoverTest #test04RoverMovesBackwardsFacingEastCorrectly stamp: 'FR 10/26/2020 09:58:49'!
test04RoverMovesBackwardsFacingEastCorrectly

	self  roverFacing: Orientation east
		afterExecuting: 'b'
		shouldBeInPosition: -1@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isEast ]!
!MarsRoverTest methodsFor: 'tests - displacement' stamp: 'FR 10/26/2020 09:58:52'!
test04RoverMovesBackwardsFacingSouthCorrectly

	self  roverFacing: Orientation south
		afterExecuting: 'b'
		shouldBeInPosition: 0@1
		withOrientationSatisfying: [ :anOrientation | anOrientation isSouth ]! !

!methodRemoval: MarsRoverTest #test03RoverMovesBackwardsFacingSouthCorrectly stamp: 'FR 10/26/2020 09:58:53'!
test03RoverMovesBackwardsFacingSouthCorrectly

	self  roverFacing: Orientation south
		afterExecuting: 'b'
		shouldBeInPosition: 0@1
		withOrientationSatisfying: [ :anOrientation | anOrientation isSouth ]!
!MarsRoverTest methodsFor: 'tests - displacement' stamp: 'FR 10/26/2020 09:58:59'!
test03RoverMovesForwardsFacingWestCorrectly

	self  roverFacing: Orientation west
		afterExecuting: 'f'
		shouldBeInPosition: -1@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isWest ]! !

!methodRemoval: MarsRoverTest #test02RoverMovesForwardsFacingWestCorrectly stamp: 'FR 10/26/2020 09:58:59'!
test02RoverMovesForwardsFacingWestCorrectly

	self  roverFacing: Orientation west
		afterExecuting: 'f'
		shouldBeInPosition: -1@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isWest ]!
!MarsRoverTest methodsFor: 'tests - displacement' stamp: 'FR 10/26/2020 09:59:02'!
test02RoverMovesForwardsFacingNorthCorrectly

	self  roverFacing: Orientation north
		afterExecuting: 'f'
		shouldBeInPosition: 0@1
		withOrientationSatisfying: [ :anOrientation | anOrientation isNorth ]
! !

!methodRemoval: MarsRoverTest #test01RoverMovesForwardsFacingNorthCorrectly stamp: 'FR 10/26/2020 09:59:03'!
test01RoverMovesForwardsFacingNorthCorrectly

	self  roverFacing: Orientation north
		afterExecuting: 'f'
		shouldBeInPosition: 0@1
		withOrientationSatisfying: [ :anOrientation | anOrientation isNorth ]
!
!MarsRoverTest methodsFor: 'tests - displacement' stamp: 'FR 10/26/2020 10:00:23'!
test01RoverDoesntChangeWhenCommandsSentAreEmpty

	self  roverFacing: Orientation north
		afterExecuting: ''
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isNorth ]
! !
!MarsRoverTest methodsFor: 'tests - rotation' stamp: 'FR 10/26/2020 10:00:30'!
test13RoverRotatesRightFacingWestCorrectly

	self  roverFacing: Orientation west
		afterExecuting: 'r'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isNorth ]! !

!methodRemoval: MarsRoverTest #test12RoverRotatesRightFacingWestCorrectly stamp: 'FR 10/26/2020 10:00:30'!
test12RoverRotatesRightFacingWestCorrectly

	self  roverFacing: Orientation west
		afterExecuting: 'r'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isNorth ]!
!MarsRoverTest methodsFor: 'tests - rotation' stamp: 'FR 10/26/2020 10:00:34'!
test12RoverRotatesRightFacingSouthCorrectly

	self  roverFacing: Orientation south
		afterExecuting: 'r'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isWest ]! !

!methodRemoval: MarsRoverTest #test11RoverRotatesRightFacingSouthCorrectly stamp: 'FR 10/26/2020 10:00:34'!
test11RoverRotatesRightFacingSouthCorrectly

	self  roverFacing: Orientation south
		afterExecuting: 'r'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isWest ]!
!MarsRoverTest methodsFor: 'tests - rotation' stamp: 'FR 10/26/2020 10:00:37'!
test11RoverRotatesRightFacingEastCorrectly

	self  roverFacing: Orientation east
		afterExecuting: 'r'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isSouth ]! !

!methodRemoval: MarsRoverTest #test10RoverRotatesRightFacingEastCorrectly stamp: 'FR 10/26/2020 10:00:37'!
test10RoverRotatesRightFacingEastCorrectly

	self  roverFacing: Orientation east
		afterExecuting: 'r'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isSouth ]!
!MarsRoverTest methodsFor: 'tests - rotation' stamp: 'FR 10/26/2020 10:00:40'!
test10RoverRotatesRightFacingNorthCorrectly

	self  roverFacing: Orientation north
		afterExecuting: 'r'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isEast ]! !

!methodRemoval: MarsRoverTest #test09RoverRotatesRightFacingNorthCorrectly stamp: 'FR 10/26/2020 10:00:40'!
test09RoverRotatesRightFacingNorthCorrectly

	self  roverFacing: Orientation north
		afterExecuting: 'r'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isEast ]!
!MarsRoverTest methodsFor: 'tests - rotation' stamp: 'FR 10/26/2020 10:00:43'!
test09RoverRotatesLeftFacingEastCorrectly

	self  roverFacing: Orientation east
		afterExecuting: 'l'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isNorth ]! !

!methodRemoval: MarsRoverTest #test08RoverRotatesLeftFacingEastCorrectly stamp: 'FR 10/26/2020 10:00:43'!
test08RoverRotatesLeftFacingEastCorrectly

	self  roverFacing: Orientation east
		afterExecuting: 'l'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isNorth ]!
!MarsRoverTest methodsFor: 'tests - rotation' stamp: 'FR 10/26/2020 10:00:48'!
test08RoverRotatesLeftFacingSouthCorrectly

	self  roverFacing: Orientation south
		afterExecuting: 'l'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isEast ]! !

!methodRemoval: MarsRoverTest #test07RoverRotatesLeftFacingSouthCorrectly stamp: 'FR 10/26/2020 10:00:48'!
test07RoverRotatesLeftFacingSouthCorrectly

	self  roverFacing: Orientation south
		afterExecuting: 'l'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isEast ]!
!MarsRoverTest methodsFor: 'tests - rotation' stamp: 'FR 10/26/2020 10:00:51'!
test07RoverRotatesLeftFacingWestCorrectly

	self  roverFacing: Orientation west
		afterExecuting: 'l'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isSouth ]! !

!methodRemoval: MarsRoverTest #test06RoverRotatesLeftFacingWestCorrectly stamp: 'FR 10/26/2020 10:00:51'!
test06RoverRotatesLeftFacingWestCorrectly

	self  roverFacing: Orientation west
		afterExecuting: 'l'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isSouth ]!
!MarsRoverTest methodsFor: 'tests - rotation' stamp: 'FR 10/26/2020 10:00:54'!
test06RoverRotatesLeftFacingNorthCorrectly

	self  roverFacing: Orientation north
		afterExecuting: 'l'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isWest ]! !

!methodRemoval: MarsRoverTest #test05RoverRotatesLeftFacingNorthCorrectly stamp: 'FR 10/26/2020 10:00:54'!
test05RoverRotatesLeftFacingNorthCorrectly

	self  roverFacing: Orientation north
		afterExecuting: 'l'
		shouldBeInPosition: 0@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isWest ]!
!MarsRoverTest methodsFor: 'tests - invalid commands' stamp: 'FR 10/26/2020 10:00:59'!
test15RoverFailsWhenItEncountersInvalidCommand
	
	self  roverFacing: Orientation north
		inPosition: 1@1
		afterDoing: [
			self  should: [ marsRover execute: 'fx' ]
				raise: Error
				withMessageText: MarsRover invalidCommandErrorDescription.
		]
		shouldBeInPosition: 1@2
		withOrientationSatisfying: [ :anOrientation | anOrientation isNorth ]! !

!methodRemoval: MarsRoverTest #test14RoverFailsWhenItEncountersInvalidCommand stamp: 'FR 10/26/2020 10:00:59'!
test14RoverFailsWhenItEncountersInvalidCommand
	
	self  roverFacing: Orientation north
		inPosition: 1@1
		afterDoing: [
			self  should: [ marsRover execute: 'fx' ]
				raise: Error
				withMessageText: MarsRover invalidCommandErrorDescription.
		]
		shouldBeInPosition: 1@2
		withOrientationSatisfying: [ :anOrientation | anOrientation isNorth ]!
!MarsRoverTest methodsFor: 'tests - multiple commands' stamp: 'FR 10/26/2020 10:01:04'!
test14RoverExecutesMultipleCommandsCorrectly

	self  roverFacing: Orientation north
		afterExecuting: 'lf'
		shouldBeInPosition: -1@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isWest ]! !

!methodRemoval: MarsRoverTest #test13RoverExecutesMultipleCommandsCorrectly stamp: 'FR 10/26/2020 10:01:04'!
test13RoverExecutesMultipleCommandsCorrectly

	self  roverFacing: Orientation north
		afterExecuting: 'lf'
		shouldBeInPosition: -1@0
		withOrientationSatisfying: [ :anOrientation | anOrientation isWest ]!
!MarsRoverTest methodsFor: 'tests - invalid commands' stamp: 'FR 10/26/2020 10:02:12'!
test16RoverDoesNotExecuteCommandsAfterInvalidCommand
	
	self  roverFacing: Orientation north
		inPosition: 1@1
		afterDoing: [
			self  should: [ marsRover execute: 'xf' ]
				raise: Error
				withMessageText: MarsRover invalidCommandErrorDescription.
		]
		shouldBeInPosition: 1@1
		withOrientationSatisfying: [ :anOrientation | anOrientation isNorth ]! !

!testRun: #MarsRoverTest #test01RoverDoesntChangeWhenCommandsSentAreEmpty stamp: 'FR 10/26/2020 10:02:17'!
PASSED!

!testRun: #MarsRoverTest #test02RoverMovesForwardsFacingNorthCorrectly stamp: 'FR 10/26/2020 10:02:18'!
PASSED!

!testRun: #MarsRoverTest #test03RoverMovesForwardsFacingWestCorrectly stamp: 'FR 10/26/2020 10:02:18'!
PASSED!

!testRun: #MarsRoverTest #test04RoverMovesBackwardsFacingSouthCorrectly stamp: 'FR 10/26/2020 10:02:18'!
PASSED!

!testRun: #MarsRoverTest #test05RoverMovesBackwardsFacingEastCorrectly stamp: 'FR 10/26/2020 10:02:18'!
PASSED!

!testRun: #MarsRoverTest #test06RoverRotatesLeftFacingNorthCorrectly stamp: 'FR 10/26/2020 10:02:18'!
PASSED!

!testRun: #MarsRoverTest #test07RoverRotatesLeftFacingWestCorrectly stamp: 'FR 10/26/2020 10:02:18'!
PASSED!

!testRun: #MarsRoverTest #test08RoverRotatesLeftFacingSouthCorrectly stamp: 'FR 10/26/2020 10:02:18'!
PASSED!

!testRun: #MarsRoverTest #test09RoverRotatesLeftFacingEastCorrectly stamp: 'FR 10/26/2020 10:02:18'!
PASSED!

!testRun: #MarsRoverTest #test10RoverRotatesRightFacingNorthCorrectly stamp: 'FR 10/26/2020 10:02:19'!
PASSED!

!testRun: #MarsRoverTest #test11RoverRotatesRightFacingEastCorrectly stamp: 'FR 10/26/2020 10:02:19'!
PASSED!

!testRun: #MarsRoverTest #test12RoverRotatesRightFacingSouthCorrectly stamp: 'FR 10/26/2020 10:02:19'!
PASSED!

!testRun: #MarsRoverTest #test13RoverRotatesRightFacingWestCorrectly stamp: 'FR 10/26/2020 10:02:19'!
PASSED!

!testRun: #MarsRoverTest #test14RoverExecutesMultipleCommandsCorrectly stamp: 'FR 10/26/2020 10:02:19'!
PASSED!

!testRun: #MarsRoverTest #test15RoverFailsWhenItEncountersInvalidCommand stamp: 'FR 10/26/2020 10:02:19'!
PASSED!

!testRun: #MarsRoverTest #test16RoverDoesNotExecuteCommandsAfterInvalidCommand stamp: 'FR 10/26/2020 10:02:19'!
PASSED!
!MarsRoverTest methodsFor: 'tests - invalid commands' stamp: 'FR 10/26/2020 10:05:09'!
test15RoverExecutesCommandsPreviousToInvalidCommand
	
	self  roverFacing: Orientation north
		inPosition: 1@1
		afterDoing: [
			self  should: [ marsRover execute: 'fx' ]
				raise: Error
				withMessageText: MarsRover invalidCommandErrorDescription.
		]
		shouldBeInPosition: 1@2
		withOrientationSatisfying: [ :anOrientation | anOrientation isNorth ]! !

!methodRemoval: MarsRoverTest #test15RoverFailsWhenItEncountersInvalidCommand stamp: 'FR 10/26/2020 10:05:09'!
test15RoverFailsWhenItEncountersInvalidCommand
	
	self  roverFacing: Orientation north
		inPosition: 1@1
		afterDoing: [
			self  should: [ marsRover execute: 'fx' ]
				raise: Error
				withMessageText: MarsRover invalidCommandErrorDescription.
		]
		shouldBeInPosition: 1@2
		withOrientationSatisfying: [ :anOrientation | anOrientation isNorth ]!

----STARTUP---- (26 October 2020 10:06:39) as E:\!!NUEVO\Programas\CuisUniversity\v4383.1\CuisUniversity-4383.image!


----End fileIn of E:\!!NUEVO\Programas\CuisUniversity\v4383.1\EntregaFixMarsRover\EntregaFinalFinalMarsRover.st----!

!testRun: #MarsRoverTest #test01RoverDoesntChangeWhenCommandsSentAreEmpty stamp: 'FR 10/26/2020 10:08:15'!
PASSED!

!testRun: #MarsRoverTest #test02RoverMovesForwardsFacingNorthCorrectly stamp: 'FR 10/26/2020 10:08:15'!
PASSED!

!testRun: #MarsRoverTest #test03RoverMovesForwardsFacingWestCorrectly stamp: 'FR 10/26/2020 10:08:16'!
PASSED!

!testRun: #MarsRoverTest #test04RoverMovesBackwardsFacingSouthCorrectly stamp: 'FR 10/26/2020 10:08:16'!
PASSED!

!testRun: #MarsRoverTest #test05RoverMovesBackwardsFacingEastCorrectly stamp: 'FR 10/26/2020 10:08:16'!
PASSED!

!testRun: #MarsRoverTest #test06RoverRotatesLeftFacingNorthCorrectly stamp: 'FR 10/26/2020 10:08:16'!
PASSED!

!testRun: #MarsRoverTest #test07RoverRotatesLeftFacingWestCorrectly stamp: 'FR 10/26/2020 10:08:16'!
PASSED!

!testRun: #MarsRoverTest #test08RoverRotatesLeftFacingSouthCorrectly stamp: 'FR 10/26/2020 10:08:16'!
PASSED!

!testRun: #MarsRoverTest #test09RoverRotatesLeftFacingEastCorrectly stamp: 'FR 10/26/2020 10:08:16'!
PASSED!

!testRun: #MarsRoverTest #test10RoverRotatesRightFacingNorthCorrectly stamp: 'FR 10/26/2020 10:08:16'!
PASSED!

!testRun: #MarsRoverTest #test11RoverRotatesRightFacingEastCorrectly stamp: 'FR 10/26/2020 10:08:16'!
PASSED!

!testRun: #MarsRoverTest #test12RoverRotatesRightFacingSouthCorrectly stamp: 'FR 10/26/2020 10:08:16'!
PASSED!

!testRun: #MarsRoverTest #test13RoverRotatesRightFacingWestCorrectly stamp: 'FR 10/26/2020 10:08:16'!
PASSED!

!testRun: #MarsRoverTest #test14RoverExecutesMultipleCommandsCorrectly stamp: 'FR 10/26/2020 10:08:16'!
PASSED!

!testRun: #MarsRoverTest #test15RoverExecutesCommandsPreviousToInvalidCommand stamp: 'FR 10/26/2020 10:08:16'!
PASSED!

!testRun: #MarsRoverTest #test16RoverDoesNotExecuteCommandsAfterInvalidCommand stamp: 'FR 10/26/2020 10:08:16'!
PASSED!