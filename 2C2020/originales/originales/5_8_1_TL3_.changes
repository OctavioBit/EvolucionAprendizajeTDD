

----STARTUP---- (29 November 2020 22:14:09) as E:\!!NUEVO\Programas\CuisUniversity\v4383.1\CuisUniversity-4383.image!


----End fileIn of E:\!!NUEVO\Programas\CuisUniversity\v4383.1\TusLibros\Tercera Iteraci√≥n\Iteracion2\TusLibros-33.st----!

TestCase subclass: #XXXTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #XXXTest category: 'TusLibros' stamp: 'FR 11/29/2020 22:17:11'!
TestCase subclass: #XXXTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #XXXTest category: 'TusLibros' stamp: 'FR 11/29/2020 22:18:45'!
TestCase subclass: #XXXTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXXTest methodsFor: 'setUp' stamp: 'FR 11/29/2020 22:18:44' overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !

!classDefinition: #XXXTest category: 'TusLibros' stamp: 'FR 11/29/2020 22:23:49'!
TestCase subclass: #XXXTest
	instanceVariableNames: 'testObjectsFactory authenticatorBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #XXX category: 'TusLibros' stamp: 'FR 11/29/2020 22:23:54'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXXTest methodsFor: 'tests - creation' stamp: 'FR 11/29/2020 22:23:48'!
test01CannotCreateCartWithInvalidID

	| anXXX |
	
	authenticatorBehavior := [self error: XXX invalidClientIDErrorDescription].
	anXXX := XXX withAuthenticator: self.
	
	self  should: [
			anXXX createCartForClientWithID: self anInvalidID 
				    andPassword: self aCorrectPassword
		]
		raise:  testObjectsFactory functionalError
		withMessageText: XXX invalidClientIDErrorDescription! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 22:24:12'!
ERROR!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 22:24:12'!
ERROR!
!XXX class methodsFor: 'instance creation' stamp: 'FR 11/29/2020 22:24:37'!
withAuthenticator: aXXXTest 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithAuthenticator: aXXXTest ! !
!XXX class methodsFor: 'instance creation' stamp: 'FR 11/29/2020 22:25:04' prior: 51207408!
withAuthenticator: anAuthenticator

	^self new initializeWithAuthenticator: anAuthenticator! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 22:25:08'!
ERROR!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 22:25:09'!
ERROR!

!classDefinition: #XXX category: 'TusLibros' stamp: 'FR 11/29/2020 22:25:31'!
Object subclass: #XXX
	instanceVariableNames: 'authenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'initialization' stamp: 'FR 11/29/2020 22:25:31'!
initializeWithAuthenticator: anAuthenticator 
	self shouldBeImplemented.
	authenticator := anAuthenticator.! !
!XXX methodsFor: 'initialization' stamp: 'FR 11/29/2020 22:25:34' prior: 51207435!
initializeWithAuthenticator: anAuthenticator 

	authenticator := anAuthenticator.! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 22:25:35'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'errors' stamp: 'FR 11/29/2020 22:25:48'!
functionalError
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'errors' stamp: 'FR 11/29/2020 22:25:58' prior: 51207451!
functionalError
	
	^ Error - MessageNotUnderstood! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 22:25:59'!
ERROR!
!XXX class methodsFor: 'error descriptions' stamp: 'FR 11/29/2020 22:26:12'!
invalidClientIDErrorDescription
	self shouldBeImplemented.! !
!XXX class methodsFor: 'error descriptions' stamp: 'FR 11/29/2020 22:26:19' prior: 51207464!
invalidClientIDErrorDescription
	
	^ 'Client ID is invalid!!'! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 22:26:20'!
ERROR!
!XXXTest methodsFor: 'tests - creation' stamp: 'FR 11/29/2020 22:26:49' prior: 51207387!
test01CannotCreateCartWithInvalidID

	| anXXX |
	
	authenticatorBehavior := [self error: XXX invalidClientIDErrorDescription].
	anXXX := XXX withAuthenticator: self.
	
	self  should: [
			anXXX createCartForClientWithID: testObjectsFactory anInvalidID 
				    andPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidClientIDErrorDescription! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 22:26:52'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'IDs' stamp: 'FR 11/29/2020 22:27:03'!
anInvalidID
	self shouldBeImplemented.! !
!XXXTest methodsFor: 'tests - creation' stamp: 'FR 11/29/2020 22:27:19' prior: 51207477!
test01CannotCreateCartWithInvalidID

	| anXXX |
	
	authenticatorBehavior := [self error: XXX invalidClientIDErrorDescription].
	anXXX := XXX withAuthenticator: self.
	
	self  should: [
			anXXX createCartForClientWithID: testObjectsFactory anInvalidClientID 
				    andPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidClientIDErrorDescription! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 22:27:22'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'IDs' stamp: 'FR 11/29/2020 22:27:58'!
anInvalidClientID
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'IDs' stamp: 'FR 11/29/2020 22:28:14' prior: 51207520!
anInvalidClientID
	
	^ 'an invalid client ID'! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 22:28:15'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'passwords' stamp: 'FR 11/29/2020 22:28:22'!
aCorrectPassword
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'passwords' stamp: 'FR 11/29/2020 22:28:33' prior: 51207533!
aCorrectPassword
	
	^ 'a correct password'! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 22:28:34'!
ERROR!
!XXX methodsFor: 'creating' stamp: 'FR 11/29/2020 22:28:41'!
createCartForClientWithID: aString andPassword: aString2 
	self shouldBeImplemented.! !
!XXX methodsFor: 'creating' stamp: 'FR 11/29/2020 22:29:10' prior: 51207545!
createCartForClientWithID: aClientID andPassword: aPassword

	self error: self class invalidClientIDErrorDescription! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 22:29:11'!
PASSED!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 22:29:55'!
PASSED!
!XXXTest methodsFor: 'tests - creation' stamp: 'FR 11/29/2020 22:32:00'!
test02CannotCreateCartWithincorrectPassword

	| anXXX |
	
	authenticatorBehavior := [ self error: XXX incorrectPasswordErrorDescription ].
	anXXX := XXX withAuthenticator: self.
	
	self  should: [
			anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
				    andPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX incorrectPasswordErrorDescription! !
!XXXTest methodsFor: 'tests - creation' stamp: 'FR 11/29/2020 22:32:07' prior: 51207501!
test01CannotCreateCartWithInvalidID

	| anXXX |
	
	authenticatorBehavior := [ self error: XXX invalidClientIDErrorDescription ].
	anXXX := XXX withAuthenticator: self.
	
	self  should: [
			anXXX createCartForClientWithID: testObjectsFactory anInvalidClientID 
				    andPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidClientIDErrorDescription! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 22:32:10'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithincorrectPassword stamp: 'FR 11/29/2020 22:32:10'!
ERROR!

!testRun: #XXXTest #test02CannotCreateCartWithincorrectPassword stamp: 'FR 11/29/2020 22:32:10'!
ERROR!
!XXX class methodsFor: 'error descriptions' stamp: 'FR 11/29/2020 22:32:17'!
incorrectPasswordErrorDescription
	self shouldBeImplemented.! !
!XXX class methodsFor: 'error descriptions' stamp: 'FR 11/29/2020 22:32:39' prior: 51207607!
incorrectPasswordErrorDescription
	
	^ 'Password is incorrect!!'! !

!testRun: #XXXTest #test02CannotCreateCartWithincorrectPassword stamp: 'FR 11/29/2020 22:32:39'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'IDs' stamp: 'FR 11/29/2020 22:32:46'!
aValidClientID
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'IDs' stamp: 'FR 11/29/2020 22:33:01' prior: 51207620!
aValidClientID
	
	^ 'a valid client ID'! !

!testRun: #XXXTest #test02CannotCreateCartWithincorrectPassword stamp: 'FR 11/29/2020 22:33:02'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'passwords' stamp: 'FR 11/29/2020 22:33:09'!
anIncorrectPassword
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'passwords' stamp: 'FR 11/29/2020 22:33:16' prior: 51207633!
anIncorrectPassword
	
	^ 'an incorrect password'! !

!testRun: #XXXTest #test02CannotCreateCartWithincorrectPassword stamp: 'FR 11/29/2020 22:33:18'!
FAILURE!
!XXX methodsFor: 'creating' stamp: 'FR 11/29/2020 22:34:41' prior: 51207551!
createCartForClientWithID: aClientID andPassword: aPassword

	authenticator authenticateWithID: aClientID andPassword: aPassword.! !
!XXXTest methodsFor: 'authenticator' stamp: 'FR 11/29/2020 22:34:58'!
authenticateWithID: aClientID andPassword: aPassword

	authenticatorBehavior value! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 22:35:00'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithincorrectPassword stamp: 'FR 11/29/2020 22:35:00'!
PASSED!
!XXXTest methodsFor: 'tests - creation' stamp: 'FR 11/29/2020 22:37:17'!
test03CartIDAfterSuccesfulCreationIsForAnEmptyCart

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
				     andPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (anXXX listCart: aCartID) isEmpty! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 22:37:25'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithincorrectPassword stamp: 'FR 11/29/2020 22:37:25'!
PASSED!

!testRun: #XXXTest #test03CartIDAfterSuccesfulCreationIsForAnEmptyCart stamp: 'FR 11/29/2020 22:37:25'!
ERROR!

!testRun: #XXXTest #test03CartIDAfterSuccesfulCreationIsForAnEmptyCart stamp: 'FR 11/29/2020 22:37:25'!
ERROR!

!testRun: #XXXTest #test03CartIDAfterSuccesfulCreationIsForAnEmptyCart stamp: 'FR 11/29/2020 22:37:34'!
ERROR!

!testRun: #XXXTest #test03CartIDAfterSuccesfulCreationIsForAnEmptyCart stamp: 'FR 11/29/2020 22:37:34'!
ERROR!
!XXX methodsFor: 'listing' stamp: 'FR 11/29/2020 22:37:43'!
listCart: aXXX 
	self shouldBeImplemented.! !
!XXX methodsFor: 'listing' stamp: 'FR 11/29/2020 22:38:17' prior: 51207698!
listCart: aCartID
	
	^ OrderedCollection new! !

!testRun: #XXXTest #test03CartIDAfterSuccesfulCreationIsForAnEmptyCart stamp: 'FR 11/29/2020 22:38:17'!
PASSED!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 22:38:21'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithincorrectPassword stamp: 'FR 11/29/2020 22:38:22'!
PASSED!

!testRun: #XXXTest #test03CartIDAfterSuccesfulCreationIsForAnEmptyCart stamp: 'FR 11/29/2020 22:38:22'!
PASSED!
!XXXTest methodsFor: 'tests - creation' stamp: 'FR 11/29/2020 22:38:41'!
test02CannotCreateCartWithIncorrectPassword

	| anXXX |
	
	authenticatorBehavior := [ self error: XXX incorrectPasswordErrorDescription ].
	anXXX := XXX withAuthenticator: self.
	
	self  should: [
			anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
				    andPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX incorrectPasswordErrorDescription! !

!methodRemoval: XXXTest #test02CannotCreateCartWithincorrectPassword stamp: 'FR 11/29/2020 22:38:41'!
test02CannotCreateCartWithincorrectPassword

	| anXXX |
	
	authenticatorBehavior := [ self error: XXX incorrectPasswordErrorDescription ].
	anXXX := XXX withAuthenticator: self.
	
	self  should: [
			anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
				    andPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX incorrectPasswordErrorDescription!
!XXXTest methodsFor: 'tests - creation' stamp: 'FR 11/29/2020 22:39:37'!
test03SuccessfulyCreatedCartIsEmpty

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
				     andPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (anXXX listCart: aCartID) isEmpty! !

!methodRemoval: XXXTest #test03CartIDAfterSuccesfulCreationIsForAnEmptyCart stamp: 'FR 11/29/2020 22:39:38'!
test03CartIDAfterSuccesfulCreationIsForAnEmptyCart

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
				     andPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (anXXX listCart: aCartID) isEmpty!
!XXXTest methodsFor: 'tests - adding' stamp: 'FR 11/29/2020 22:43:08'!
test04CannotAddToCartWithInvalidCartID

	| anXXX |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self.
	
	self  should:  [ anXXX add: 1
					   of: testObjectsFactory aBookSoldByPublisher
					   toCart: testObjectsFactory anInvalidCartID
		]
		raise:  testObjectsFactory functionalError
		withMessageText: XXX invalidCartIDErrorDescription! !

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 22:43:17'!
ERROR!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 22:43:17'!
ERROR!
!XXX class methodsFor: 'error descriptions' stamp: 'FR 11/29/2020 22:43:22'!
invalidCartIDErrorDescription
	self shouldBeImplemented.! !
!XXX class methodsFor: 'error descriptions' stamp: 'FR 11/29/2020 22:43:33' prior: 51207801!
invalidCartIDErrorDescription
	
	^ 'Cart ID is invalid!!'! !

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 22:43:34'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'books' stamp: 'FR 11/29/2020 22:43:43'!
aBookSoldByPublisher
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'books' stamp: 'FR 11/29/2020 22:43:55' prior: 51207814!
aBookSoldByPublisher
	
	^ 'a book sold by this publisher'! !

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 22:43:56'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'cart IDs' stamp: 'FR 11/29/2020 22:44:06'!
anInvalidCartID
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'cart IDs' stamp: 'FR 11/29/2020 22:44:12' prior: 51207827!
anInvalidCartID
	
	^ 'an invalid cart ID'! !

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 22:44:13'!
ERROR!

!methodRemoval: StoreTestObjectsFactory #anInvalidID stamp: 'FR 11/29/2020 22:44:27'!
anInvalidID
	self shouldBeImplemented.!
!XXX methodsFor: 'adding' stamp: 'FR 11/29/2020 22:45:36'!
add: anAmount of: aBook toCart: aCartID

	self error: self class invalidCartIDErrorDescription! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 22:45:38'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 22:45:38'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 22:45:38'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 22:45:38'!
PASSED!
!XXXTest methodsFor: 'tests - adding' stamp: 'FR 11/29/2020 22:49:53'!
test05cannotAddABookThatIsNotForSale

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.
				
	self  should: [
			anXXX add: 1
				    of: testObjectsFactory aBookNotSoldByPublisher 
				    toCart: aCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX bookNotForSaleErrorDescription! !

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 22:49:58'!
PASSED!

!testRun: #XXXTest #test05cannotAddABookThatIsNotForSale stamp: 'FR 11/29/2020 22:49:58'!
ERROR!

!testRun: #XXXTest #test05cannotAddABookThatIsNotForSale stamp: 'FR 11/29/2020 22:49:58'!
ERROR!
!XXX class methodsFor: 'error descriptions' stamp: 'FR 11/29/2020 22:50:05'!
bookNotForSaleErrorDescription
	self shouldBeImplemented.! !
!XXX class methodsFor: 'error descriptions' stamp: 'FR 11/29/2020 22:50:19' prior: 51207889!
bookNotForSaleErrorDescription
	
	^ 'Book is not sold by this publisher!!'! !

!testRun: #XXXTest #test05cannotAddABookThatIsNotForSale stamp: 'FR 11/29/2020 22:50:20'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'books' stamp: 'FR 11/29/2020 22:50:32'!
aBookNotSoldByPublisher
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'books' stamp: 'FR 11/29/2020 22:50:52' prior: 51207902!
aBookNotSoldByPublisher
	
	^ 'a book not sold by this publisher'! !

!testRun: #XXXTest #test05cannotAddABookThatIsNotForSale stamp: 'FR 11/29/2020 22:50:54'!
FAILURE!

!classDefinition: #XXX category: 'TusLibros' stamp: 'FR 11/29/2020 22:52:29'!
Object subclass: #XXX
	instanceVariableNames: 'authenticator currentCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #XXX category: 'TusLibros' stamp: 'FR 11/29/2020 22:52:31'!
Object subclass: #XXX
	instanceVariableNames: 'authenticator currentCartID cartIDs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'creating' stamp: 'FR 11/29/2020 22:52:27' prior: 51207646!
createCartForClientWithID: aClientID andPassword: aPassword

	authenticator authenticateWithID: aClientID andPassword: aPassword.
	
	currentCartID := currentCartID + 1.
	cartIDs add: currentCartID.! !
!XXX methodsFor: 'initialization' stamp: 'FR 11/29/2020 22:52:55' prior: 51207442!
initializeWithAuthenticator: anAuthenticator 

	authenticator := anAuthenticator.
	currentCartID := 0.
	cartIDs := OrderedCollection new.! !
!XXX methodsFor: 'adding' stamp: 'FR 11/29/2020 22:55:00' prior: 51207843!
add: anAmount of: aBook toCart: aCartID

	(cartIDs includes: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ].
	
	self error: self class bookNotForSaleErrorDescription! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 22:55:02'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 22:55:02'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 22:55:02'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 22:55:02'!
PASSED!

!testRun: #XXXTest #test05cannotAddABookThatIsNotForSale stamp: 'FR 11/29/2020 22:55:02'!
FAILURE!

!testRun: #XXXTest #test05cannotAddABookThatIsNotForSale stamp: 'FR 11/29/2020 22:55:02'!
FAILURE!
!XXX methodsFor: 'creating' stamp: 'FR 11/29/2020 22:55:54' prior: 51207929!
createCartForClientWithID: aClientID andPassword: aPassword

	authenticator authenticateWithID: aClientID andPassword: aPassword.
	
	currentCartID := currentCartID + 1.
	cartIDs add: currentCartID.
	
	^ currentCartID copy! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 22:55:58'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 22:55:58'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 22:55:58'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 22:55:58'!
PASSED!

!testRun: #XXXTest #test05cannotAddABookThatIsNotForSale stamp: 'FR 11/29/2020 22:55:58'!
PASSED!
!XXXTest methodsFor: 'tests - adding' stamp: 'FR 11/29/2020 22:56:38'!
test05CannotAddABookThatIsNotSoldByThisPublisher

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.
				
	self  should: [
			anXXX add: 1
				    of: testObjectsFactory aBookNotSoldByPublisher 
				    toCart: aCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX bookNotForSaleErrorDescription! !

!methodRemoval: XXXTest #test05cannotAddABookThatIsNotForSale stamp: 'FR 11/29/2020 22:56:38'!
test05cannotAddABookThatIsNotForSale

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.
				
	self  should: [
			anXXX add: 1
				    of: testObjectsFactory aBookNotSoldByPublisher 
				    toCart: aCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX bookNotForSaleErrorDescription!
!XXXTest methodsFor: 'tests - adding' stamp: 'FR 11/29/2020 22:57:49'!
test06CannotAddANegativeAmountOfBooks

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.
				
	self  should: [
			anXXX add: -5
				    of: testObjectsFactory aBookSoldByPublisher 
				    toCart: aCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidAmountErrorDescription! !

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 22:57:53'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 22:57:53'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 22:57:53'!
ERROR!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 22:57:53'!
ERROR!
!XXX class methodsFor: 'error descriptions' stamp: 'FR 11/29/2020 22:58:01'!
invalidAmountErrorDescription
	self shouldBeImplemented.! !
!XXX class methodsFor: 'error descriptions' stamp: 'FR 11/29/2020 22:58:14' prior: 51208066!
invalidAmountErrorDescription
	
	^ 'Amount is not valid!!'! !

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 22:58:15'!
FAILURE!
!XXX methodsFor: 'initialization' stamp: 'FR 11/29/2020 22:59:54'!
initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog  

	authenticator := anAuthenticator.
	currentCartID := 0.
	cartIDs := OrderedCollection new.! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'FR 11/29/2020 22:59:54' prior: 51207417!
withAuthenticator: anAuthenticator

	^self new initializeWithAuthenticator: anAuthenticator andCatalog: testObjectsFactory aCatalogue! !

!methodRemoval: XXX #initializeWithAuthenticator: stamp: 'FR 11/29/2020 22:59:54'!
initializeWithAuthenticator: anAuthenticator 

	authenticator := anAuthenticator.
	currentCartID := 0.
	cartIDs := OrderedCollection new.!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:00:03'!
ERROR!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:00:04'!
ERROR!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:00:04'!
ERROR!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:00:04'!
ERROR!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:00:04'!
ERROR!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:00:04'!
ERROR!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:00:06'!
ERROR!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:00:29'!
ERROR!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:00:29'!
ERROR!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:00:29'!
ERROR!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:00:29'!
ERROR!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:00:29'!
ERROR!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:00:29'!
ERROR!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:00:31'!
ERROR!
!XXX class methodsFor: 'instance creation' stamp: 'FR 11/29/2020 23:01:18' prior: 51208088!
withAuthenticator: anAuthenticator

	^self new initializeWithAuthenticator: anAuthenticator! !
!XXX methodsFor: 'initialization' stamp: 'FR 11/29/2020 23:01:25'!
initializeWithAuthenticator: anAuthenticator

	authenticator := anAuthenticator.
	currentCartID := 0.
	cartIDs := OrderedCollection new.! !

!methodRemoval: XXX #initializeWithAuthenticator:andCatalog: stamp: 'FR 11/29/2020 23:01:27'!
initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog  

	authenticator := anAuthenticator.
	currentCartID := 0.
	cartIDs := OrderedCollection new.!
!XXX class methodsFor: 'instance creation' stamp: 'FR 11/29/2020 23:02:17'!
withAuthenticator: anAuthenticator andCatalog: aCatalog 

	^self new initializeWithAuthenticator: anAuthenticator! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 11/29/2020 23:02:18' prior: 51207753!
test03SuccessfulyCreatedCartIsEmpty

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
				     andPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (anXXX listCart: aCartID) isEmpty! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 11/29/2020 23:02:18' prior: 51207581!
test01CannotCreateCartWithInvalidID

	| anXXX |
	
	authenticatorBehavior := [ self error: XXX invalidClientIDErrorDescription ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.
	
	self  should: [
			anXXX createCartForClientWithID: testObjectsFactory anInvalidClientID 
				    andPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidClientIDErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 11/29/2020 23:02:18' prior: 51207720!
test02CannotCreateCartWithIncorrectPassword

	| anXXX |
	
	authenticatorBehavior := [ self error: XXX incorrectPasswordErrorDescription ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.
	
	self  should: [
			anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
				    andPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX incorrectPasswordErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 11/29/2020 23:02:18' prior: 51207780!
test04CannotAddToCartWithInvalidCartID

	| anXXX |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.
	
	self  should:  [ anXXX add: 1
					   of: testObjectsFactory aBookSoldByPublisher
					   toCart: testObjectsFactory anInvalidCartID
		]
		raise:  testObjectsFactory functionalError
		withMessageText: XXX invalidCartIDErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 11/29/2020 23:02:18' prior: 51207998!
test05CannotAddABookThatIsNotSoldByThisPublisher

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.
				
	self  should: [
			anXXX add: 1
				    of: testObjectsFactory aBookNotSoldByPublisher 
				    toCart: aCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX bookNotForSaleErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 11/29/2020 23:02:18' prior: 51208035!
test06CannotAddANegativeAmountOfBooks

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.
				
	self  should: [
			anXXX add: -5
				    of: testObjectsFactory aBookSoldByPublisher 
				    toCart: aCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidAmountErrorDescription! !

!methodRemoval: XXX class #withAuthenticator: stamp: 'FR 11/29/2020 23:02:18'!
withAuthenticator: anAuthenticator

	^self new initializeWithAuthenticator: anAuthenticator!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:02:29'!
ERROR!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:02:29'!
ERROR!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:02:29'!
ERROR!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:02:29'!
ERROR!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:02:29'!
ERROR!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:02:29'!
ERROR!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:02:31'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'catalogs' stamp: 'FR 11/29/2020 23:02:37'!
aCatalog
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'catalogs' stamp: 'FR 11/29/2020 23:03:37' prior: 51208309!
aCatalog
	
	^ Set with: self aBookSoldByPublisher! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:03:42'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:03:45'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:03:48'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:03:49'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:03:50'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:03:50'!
FAILURE!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:03:55'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:03:55'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:03:55'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:03:55'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:03:55'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:03:55'!
FAILURE!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:03:55'!
FAILURE!
!XXX class methodsFor: 'instance creation' stamp: 'FR 11/29/2020 23:04:18' prior: 51208168!
withAuthenticator: anAuthenticator andCatalog: aCatalog 

	^self new initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog! !

!classDefinition: #XXX category: 'TusLibros' stamp: 'FR 11/29/2020 23:04:35'!
Object subclass: #XXX
	instanceVariableNames: 'authenticator currentCartID cartIDs catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'initialization' stamp: 'FR 11/29/2020 23:04:34'!
initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog

	authenticator := anAuthenticator.
	catalog := aCatalog.
	currentCartID := 0.
	cartIDs := OrderedCollection new.! !

!methodRemoval: XXX #initializeWithAuthenticator: stamp: 'FR 11/29/2020 23:04:41'!
initializeWithAuthenticator: anAuthenticator

	authenticator := anAuthenticator.
	currentCartID := 0.
	cartIDs := OrderedCollection new.!
!XXX methodsFor: 'adding' stamp: 'FR 11/29/2020 23:06:54' prior: 51207945!
add: anAmount of: aBook toCart: aCartID

	(cartIDs includes: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ].
	
	(catalog includes: aBook) ifFalse: [ self error: self class bookNotForSaleErrorDescription ]! !
!XXX methodsFor: 'adding' stamp: 'FR 11/29/2020 23:07:11' prior: 51208390!
add: anAmount of: aBook toCart: aCartID

	(cartIDs includes: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ].
	
	(catalog includes: aBook) ifFalse: [ self error: self class bookNotForSaleErrorDescription ].
	
	self error: self class invalidAmountErrorDescription! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:07:13'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:07:13'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:07:13'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:07:13'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:07:13'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:07:13'!
PASSED!
!XXXTest methodsFor: 'tests - adding' stamp: 'FR 11/29/2020 23:11:34'!
test07BookIsAddedSuccessfully

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  assert: (anXXX listCart: aCartID) 
		equals: (Bag with: testObjectsFactory aBookSoldByPublisher)! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:11:39'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:11:39'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:11:39'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:11:39'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:11:39'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:11:39'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:11:39'!
ERROR!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:11:39'!
ERROR!
!XXX methodsFor: 'adding' stamp: 'FR 11/29/2020 23:12:07' prior: 51208400!
add: anAmount of: aBook toCart: aCartID

	(cartIDs includes: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ].
	
	(catalog includes: aBook) ifFalse: [ self error: self class bookNotForSaleErrorDescription ].
	
	(anAmount < 0) ifTrue: [ self error: self class invalidAmountErrorDescription ].! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:12:09'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:12:09'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:12:09'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:12:09'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:12:09'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:12:09'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:12:09'!
FAILURE!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:12:09'!
FAILURE!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:12:22'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:12:22'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:12:22'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:12:23'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:12:23'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:12:24'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:12:24'!
FAILURE!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:12:25'!
FAILURE!

!classDefinition: #XXX category: 'TusLibros' stamp: 'FR 11/29/2020 23:14:47'!
Object subclass: #XXX
	instanceVariableNames: 'authenticator currentCartID booksByCartID catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'as yet unclassified' stamp: 'FR 11/29/2020 23:14:47' prior: 51208375!
initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog

	authenticator := anAuthenticator.
	catalog := aCatalog.
	currentCartID := 0.
	booksByCartID := OrderedCollection new.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'FR 11/29/2020 23:14:47' prior: 51207973!
createCartForClientWithID: aClientID andPassword: aPassword

	authenticator authenticateWithID: aClientID andPassword: aPassword.
	
	currentCartID := currentCartID + 1.
	booksByCartID add: currentCartID.
	
	^ currentCartID copy! !
!XXX methodsFor: 'as yet unclassified' stamp: 'FR 11/29/2020 23:14:47' prior: 51208474!
add: anAmount of: aBook toCart: aCartID

	(booksByCartID includes: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ].
	
	(catalog includes: aBook) ifFalse: [ self error: self class bookNotForSaleErrorDescription ].
	
	(anAmount < 0) ifTrue: [ self error: self class invalidAmountErrorDescription ].! !
!XXX methodsFor: 'initialization' stamp: 'FR 11/29/2020 23:14:53' prior: 51208545!
initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog

	authenticator := anAuthenticator.
	catalog := aCatalog.
	currentCartID := 0.
	booksByCartID := Dictionary new.! !
!XXX methodsFor: 'creating' stamp: 'FR 11/29/2020 23:15:41' prior: 51208554!
createCartForClientWithID: aClientID andPassword: aPassword

	authenticator authenticateWithID: aClientID andPassword: aPassword.
	
	currentCartID := currentCartID + 1.
	booksByCartID at: currentCartID put: Set new.
	
	^ currentCartID copy! !
!XXX methodsFor: 'creating' stamp: 'FR 11/29/2020 23:16:15' prior: 51208586!
createCartForClientWithID: aClientID andPassword: aPassword

	authenticator authenticateWithID: aClientID andPassword: aPassword.
	
	currentCartID := currentCartID + 1.
	booksByCartID at: currentCartID put: Bag new.
	
	^ currentCartID copy! !
!XXX methodsFor: 'adding' stamp: 'FR 11/29/2020 23:17:03' prior: 51208564!
add: anAmount of: aBook toCart: aCartID

	(booksByCartID includes: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ].
	
	(catalog includes: aBook) ifFalse: [ self error: self class bookNotForSaleErrorDescription ].
	
	(anAmount < 0) ifTrue: [ self error: self class invalidAmountErrorDescription ].
	
	(booksByCartID at: aCartID) add: aBook withOccurrences: anAmount! !
!XXX methodsFor: 'adding' stamp: 'FR 11/29/2020 23:17:27' prior: 51208606!
add: anAmount of: aBook toCart: aCartID

	(booksByCartID includes: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ].
	
	(catalog includes: aBook) ifFalse: [ self error: self class bookNotForSaleErrorDescription ].
	
	(anAmount < 0) ifTrue: [ self error: self class invalidAmountErrorDescription ].
	
	(booksByCartID at: aCartID) add: aBook! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:17:54'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:17:54'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:17:54'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:17:54'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:17:54'!
FAILURE!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:17:54'!
FAILURE!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:17:55'!
ERROR!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:17:58'!
FAILURE!
!XXX methodsFor: 'adding' stamp: 'FR 11/29/2020 23:18:52' prior: 51208621!
add: anAmount of: aBook toCart: aCartID

	(booksByCartID includesKey: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ].
	
	(catalog includes: aBook) ifFalse: [ self error: self class bookNotForSaleErrorDescription ].
	
	(anAmount < 0) ifTrue: [ self error: self class invalidAmountErrorDescription ].
	
	(booksByCartID at: aCartID) add: aBook! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:19:02'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:19:02'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:19:02'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:19:02'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:19:03'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:19:03'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:19:03'!
FAILURE!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:19:03'!
FAILURE!
!XXX methodsFor: 'listing' stamp: 'FR 11/29/2020 23:20:53' prior: 51207702!
listCart: aCartID
	
	^ (booksByCartID at: aCartID) copy! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:20:54'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:20:54'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:20:54'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:20:54'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:20:54'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:20:54'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:20:54'!
PASSED!
!XXXTest methodsFor: 'tests - adding' stamp: 'FR 11/29/2020 23:21:14'!
test08CannotAddZeroBooks

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.
				
	self  should: [
			anXXX add: 0
				    of: testObjectsFactory aBookSoldByPublisher 
				    toCart: aCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidAmountErrorDescription! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:21:17'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:21:18'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:21:18'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:21:18'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:21:18'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:21:18'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:21:18'!
PASSED!

!testRun: #XXXTest #test08CannotAddZeroBooks stamp: 'FR 11/29/2020 23:21:18'!
FAILURE!

!testRun: #XXXTest #test08CannotAddZeroBooks stamp: 'FR 11/29/2020 23:21:18'!
FAILURE!
!XXX methodsFor: 'adding' stamp: 'FR 11/29/2020 23:21:24' prior: 51208661!
add: anAmount of: aBook toCart: aCartID

	(booksByCartID includesKey: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ].
	
	(catalog includes: aBook) ifFalse: [ self error: self class bookNotForSaleErrorDescription ].
	
	(anAmount <= 0) ifTrue: [ self error: self class invalidAmountErrorDescription ].
	
	(booksByCartID at: aCartID) add: aBook! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:21:26'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:21:26'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:21:26'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:21:27'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:21:27'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:21:27'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:21:27'!
PASSED!

!testRun: #XXXTest #test08CannotAddZeroBooks stamp: 'FR 11/29/2020 23:21:27'!
PASSED!

!methodRemoval: XXXTest #test08CannotAddZeroBooks stamp: 'FR 11/29/2020 23:21:50'!
test08CannotAddZeroBooks

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.
				
	self  should: [
			anXXX add: 0
				    of: testObjectsFactory aBookSoldByPublisher 
				    toCart: aCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidAmountErrorDescription!
!XXXTest methodsFor: 'tests - adding' stamp: 'FR 11/29/2020 23:23:13'!
test07MultipleBooksAreAddedSuccessfully

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 5
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  assert: (anXXX listCart: aCartID) 
		equals: (Bag new add: testObjectsFactory aBookSoldByPublisher withOccurrences: 5; yourself)! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:23:15'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:23:15'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:23:15'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:23:15'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:23:15'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:23:15'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:23:16'!
PASSED!

!testRun: #XXXTest #test07MultipleBooksAreAddedSuccessfully stamp: 'FR 11/29/2020 23:23:16'!
FAILURE!

!testRun: #XXXTest #test07MultipleBooksAreAddedSuccessfully stamp: 'FR 11/29/2020 23:23:16'!
FAILURE!
!XXXTest methodsFor: 'tests - adding' stamp: 'FR 11/29/2020 23:23:22'!
test08MultipleBooksAreAddedSuccessfully

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 5
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  assert: (anXXX listCart: aCartID) 
		equals: (Bag new add: testObjectsFactory aBookSoldByPublisher withOccurrences: 5; yourself)! !

!methodRemoval: XXXTest #test07MultipleBooksAreAddedSuccessfully stamp: 'FR 11/29/2020 23:23:22'!
test07MultipleBooksAreAddedSuccessfully

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 5
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  assert: (anXXX listCart: aCartID) 
		equals: (Bag new add: testObjectsFactory aBookSoldByPublisher withOccurrences: 5; yourself)!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:23:24'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:23:24'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:23:24'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:23:24'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:23:24'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:23:24'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:23:24'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/29/2020 23:23:24'!
FAILURE!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/29/2020 23:23:24'!
FAILURE!
!XXX methodsFor: 'adding' stamp: 'FR 11/29/2020 23:23:43' prior: 51208774!
add: anAmount of: aBook toCart: aCartID

	(booksByCartID includesKey: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ].
	
	(catalog includes: aBook) ifFalse: [ self error: self class bookNotForSaleErrorDescription ].
	
	(anAmount <= 0) ifTrue: [ self error: self class invalidAmountErrorDescription ].
	
	(booksByCartID at: aCartID) add: aBook withOcurrences: anAmount! !
!XXXTest methodsFor: 'tests - adding' stamp: 'FR 11/29/2020 23:24:17'!
test09CannotAddZeroBooks

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.
				
	self  should: [
			anXXX add: 0
				    of: testObjectsFactory aBookSoldByPublisher 
				    toCart: aCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidAmountErrorDescription! !
!XXX methodsFor: 'adding' stamp: 'FR 11/29/2020 23:24:23' prior: 51208948!
add: anAmount of: aBook toCart: aCartID

	(booksByCartID includesKey: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ].
	
	(catalog includes: aBook) ifFalse: [ self error: self class bookNotForSaleErrorDescription ].
	
	(anAmount < 0) ifTrue: [ self error: self class invalidAmountErrorDescription ].
	
	(booksByCartID at: aCartID) add: aBook withOcurrences: anAmount! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:24:24'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:24:24'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:24:25'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:24:25'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:24:25'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:24:25'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:24:25'!
ERROR!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/29/2020 23:24:25'!
ERROR!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/29/2020 23:24:25'!
ERROR!
!XXX methodsFor: 'adding' stamp: 'FR 11/29/2020 23:24:43' prior: 51208982!
add: anAmount of: aBook toCart: aCartID

	(booksByCartID includesKey: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ].
	
	(catalog includes: aBook) ifFalse: [ self error: self class bookNotForSaleErrorDescription ].
	
	(anAmount < 0) ifTrue: [ self error: self class invalidAmountErrorDescription ].
	
	(booksByCartID at: aCartID) add: aBook withOccurrences: anAmount! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:24:44'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:24:44'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:24:44'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:24:44'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:24:44'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:24:45'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:24:45'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/29/2020 23:24:45'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/29/2020 23:24:45'!
FAILURE!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/29/2020 23:24:45'!
FAILURE!
!XXX methodsFor: 'adding' stamp: 'FR 11/29/2020 23:24:53' prior: 51209025!
add: anAmount of: aBook toCart: aCartID

	(booksByCartID includesKey: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ].
	
	(catalog includes: aBook) ifFalse: [ self error: self class bookNotForSaleErrorDescription ].
	
	(anAmount <= 0) ifTrue: [ self error: self class invalidAmountErrorDescription ].
	
	(booksByCartID at: aCartID) add: aBook withOccurrences: anAmount! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:24:55'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:24:55'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:24:55'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:24:55'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:24:55'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:24:55'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:24:55'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/29/2020 23:24:55'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/29/2020 23:24:55'!
PASSED!
!XXXTest methodsFor: 'tests - adding' stamp: 'FR 11/29/2020 23:25:16'!
test10CannotAddANonIntegerAmountOfBooks

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.
				
	self  should: [
			anXXX add: 0.5
				    of: testObjectsFactory aBookSoldByPublisher 
				    toCart: aCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidAmountErrorDescription! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:25:19'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:25:20'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:25:20'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:25:20'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:25:20'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:25:20'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:25:21'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/29/2020 23:25:21'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/29/2020 23:25:22'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/29/2020 23:25:22'!
FAILURE!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/29/2020 23:25:23'!
FAILURE!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:25:30'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:25:30'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:25:30'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:25:30'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:25:30'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:25:30'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:25:30'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/29/2020 23:25:30'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/29/2020 23:25:30'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/29/2020 23:25:30'!
FAILURE!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/29/2020 23:25:30'!
FAILURE!
!XXX methodsFor: 'adding' stamp: 'FR 11/29/2020 23:26:08' prior: 51209071!
add: anAmount of: aBook toCart: aCartID

	(booksByCartID includesKey: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ].
	
	(catalog includes: aBook) ifFalse: [ self error: self class bookNotForSaleErrorDescription ].
	
	(anAmount isInteger and: [ anAmount > 0 ]) ifTrue: [ self error: self class invalidAmountErrorDescription ].
	
	(booksByCartID at: aCartID) add: aBook withOccurrences: anAmount! !
!XXX methodsFor: 'adding' stamp: 'FR 11/29/2020 23:26:15' prior: 51209202!
add: anAmount of: aBook toCart: aCartID

	(booksByCartID includesKey: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ].
	
	(catalog includes: aBook) ifFalse: [ self error: self class bookNotForSaleErrorDescription ].
	
	(anAmount isInteger and: [ anAmount > 0 ]) ifFalse: [ self error: self class invalidAmountErrorDescription ].
	
	(booksByCartID at: aCartID) add: aBook withOccurrences: anAmount! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:26:17'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:26:17'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:26:17'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:26:17'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:26:17'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:26:17'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:26:17'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/29/2020 23:26:17'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/29/2020 23:26:17'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/29/2020 23:26:17'!
PASSED!
!XXXTest methodsFor: 'tests - adding' stamp: 'FR 11/29/2020 23:28:32'!
test11CannotListWithInvalidCartID

	| anXXX |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.
	
	self  should: [
			anXXX listCart: testObjectsFactory anInvalidCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidCartIDErrorDescription! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:28:37'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:28:37'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:28:38'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:28:38'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:28:38'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:28:38'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:28:38'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/29/2020 23:28:38'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/29/2020 23:28:38'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/29/2020 23:28:38'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/29/2020 23:28:38'!
FAILURE!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/29/2020 23:28:38'!
FAILURE!
!XXX methodsFor: 'listing' stamp: 'FR 11/29/2020 23:29:28' prior: 51208700!
listCart: aCartID
	
	(booksByCartID includesKey: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ].
	
	^ (booksByCartID at: aCartID) copy! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:29:30'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:29:30'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:29:30'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:29:30'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:29:30'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:29:30'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:29:30'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/29/2020 23:29:30'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/29/2020 23:29:31'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/29/2020 23:29:31'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/29/2020 23:29:31'!
PASSED!
!XXXTest methodsFor: 'tests - listing' stamp: 'FR 11/29/2020 23:33:03'!
test12CannotCheckOutWithInvalidCartID

	| anXXX |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.
	
	self  should: [ anXXX checkout: testObjectsFactory anInvalidCartID
					  withCreditCard: testObjectsFactory aValidCreditCardNumber
					  expiring: testObjectsFactory aNonExpiredDate
					  withOwner: testObjectsFactory aValidOwnerName
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidCartIDErrorDescription! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:33:15'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:33:15'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:33:15'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:33:15'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:33:15'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:33:15'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:33:15'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/29/2020 23:33:15'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/29/2020 23:33:15'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/29/2020 23:33:15'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/29/2020 23:33:15'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/29/2020 23:33:15'!
ERROR!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/29/2020 23:33:15'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card numbers' stamp: 'FR 11/29/2020 23:33:24'!
aValidCreditCardNumber
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'credit card numbers' stamp: 'FR 11/29/2020 23:33:54' prior: 51209418!
aValidCreditCardNumber
	
	^ '1234567890123456'! !

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/29/2020 23:33:57'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'FR 11/29/2020 23:34:14'!
aNonExpiredDate
	self shouldBeImplemented.! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:34:20'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:34:21'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:34:21'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:34:21'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:34:21'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:34:21'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:34:21'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/29/2020 23:34:21'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/29/2020 23:34:21'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/29/2020 23:34:21'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/29/2020 23:34:22'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/29/2020 23:34:22'!
FAILURE!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/29/2020 23:34:22'!
FAILURE!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:34:29'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:34:29'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:34:29'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:34:29'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:34:29'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:34:29'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:34:29'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/29/2020 23:34:30'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/29/2020 23:34:30'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/29/2020 23:34:30'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/29/2020 23:34:30'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/29/2020 23:34:30'!
FAILURE!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/29/2020 23:34:30'!
FAILURE!
!StoreTestObjectsFactory methodsFor: 'initialization' stamp: 'FR 11/29/2020 23:35:17' prior: 51207339 overrides: 16896425!
initialize

	today := GregorianDateTime now! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:35:21'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:35:21'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:35:21'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:35:21'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:35:21'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:35:21'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:35:21'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/29/2020 23:35:22'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/29/2020 23:35:22'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/29/2020 23:35:22'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/29/2020 23:35:22'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/29/2020 23:35:22'!
FAILURE!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/29/2020 23:35:22'!
FAILURE!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'FR 11/29/2020 23:35:38' prior: 51209432!
aNonExpiredDate
	
	^ self today monthOfYear next next! !

self today monthOfYear next next!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:35:53'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:35:53'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:35:53'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:35:53'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:35:53'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:35:53'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:35:53'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/29/2020 23:35:53'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/29/2020 23:35:53'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/29/2020 23:35:53'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/29/2020 23:35:53'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/29/2020 23:35:53'!
ERROR!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/29/2020 23:35:53'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card owner name' stamp: 'FR 11/29/2020 23:36:05'!
aValidOwnerName
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'credit card owner name' stamp: 'FR 11/29/2020 23:36:17' prior: 51209612!
aValidOwnerName
	
	^ 'Juan Rodriguez'! !
!StoreTestObjectsFactory methodsFor: 'credit card owner name' stamp: 'FR 11/29/2020 23:36:22' prior: 51209617!
aValidOwnerName
	
	^ 'Juan PÈrez'! !

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/29/2020 23:36:23'!
ERROR!
!XXX methodsFor: 'checkout' stamp: 'FR 11/29/2020 23:36:29'!
checkout: aString withCreditCard: aString2 expiring: aGregorianMonthOfYear withOwner: aString4 
	self shouldBeImplemented.! !
!XXX methodsFor: 'checkout' stamp: 'FR 11/29/2020 23:37:29' prior: 51209629!
checkout: aCartID withCreditCard: aCreditCardNumber expiring: anExpirationDate withOwner: anOwnerName 
	
	self error: self class invalidCartIDErrorDescription! !

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/29/2020 23:37:30'!
PASSED!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:37:33'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:37:33'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:37:33'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:37:33'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:37:33'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:37:33'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:37:33'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/29/2020 23:37:33'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/29/2020 23:37:33'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/29/2020 23:37:33'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/29/2020 23:37:33'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/29/2020 23:37:33'!
PASSED!
!XXXTest methodsFor: 'tests - checkout' stamp: 'FR 11/29/2020 23:41:31'!
test13CannotCheckOutWithInvalidCreditCard

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  should: [anXXX checkout: aCartID 
					  withCreditCard: testObjectsFactory anInvalidCreditCardNumber
					  expiring: testObjectsFactory aNonExpiredDate
					  withOwner: testObjectsFactory aValidOwnerName ]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidCreditCardErrorDescription.! !
!XXXTest methodsFor: 'tests - adding' stamp: 'FR 11/29/2020 23:41:52' prior: 51208226!
test04CannotAddToCartWithInvalidCartID

	| anXXX |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.
	
	self  should: [ anXXX add: 1
					   of: testObjectsFactory aBookSoldByPublisher
					   toCart: testObjectsFactory anInvalidCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidCartIDErrorDescription! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:42:08'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:42:08'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:42:08'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:42:08'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:42:08'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:42:08'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:42:08'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/29/2020 23:42:08'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/29/2020 23:42:09'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/29/2020 23:42:09'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/29/2020 23:42:09'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/29/2020 23:42:09'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/29/2020 23:42:09'!
ERROR!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/29/2020 23:42:09'!
ERROR!
!XXX class methodsFor: 'error descriptions' stamp: 'FR 11/29/2020 23:42:15'!
invalidCreditCardErrorDescription
	self shouldBeImplemented.! !
!XXX class methodsFor: 'error descriptions' stamp: 'FR 11/29/2020 23:42:27' prior: 51209769!
invalidCreditCardErrorDescription
	
	^ 'Credit card is invalid!!'! !

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/29/2020 23:42:28'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card numbers' stamp: 'FR 11/29/2020 23:43:05'!
anInvalidCreditCardNumber
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'credit card numbers' stamp: 'FR 11/29/2020 23:43:18' prior: 51209783!
anInvalidCreditCardNumber
	
	^ '1'! !

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/29/2020 23:43:19'!
FAILURE!
!XXX methodsFor: 'checkout' stamp: 'FR 11/29/2020 23:44:56' prior: 51209636!
checkout: aCartID withCreditCard: aCreditCardNumber expiring: anExpirationDate withOwner: anOwnerName 
	
	(booksByCartID includesKey: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ].! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:44:58'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:44:58'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:44:58'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:44:58'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:44:58'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:44:58'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:44:58'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/29/2020 23:44:58'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/29/2020 23:44:58'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/29/2020 23:44:58'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/29/2020 23:44:58'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/29/2020 23:44:58'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/29/2020 23:44:58'!
FAILURE!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/29/2020 23:44:58'!
FAILURE!
!XXX methodsFor: 'checkout' stamp: 'FR 11/29/2020 23:45:16' prior: 51209796!
checkout: aCartID withCreditCard: aCreditCardNumber expiring: anExpirationDate withOwner: anOwnerName 
	
	(booksByCartID includesKey: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ].
	
	self error: self class invalidCreditCardErrorDescription! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:45:18'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:45:18'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:45:18'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:45:18'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:45:18'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:45:18'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:45:18'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/29/2020 23:45:18'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/29/2020 23:45:18'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/29/2020 23:45:18'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/29/2020 23:45:18'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/29/2020 23:45:18'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/29/2020 23:45:18'!
PASSED!
!XXXTest methodsFor: 'tests - checkout' stamp: 'FR 11/29/2020 23:53:57'!
test14SuccessfulCheckoutIsDoneCorrectly

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory anInvalidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
					withPassword: testObjectsFactory aCorrectPassword)
		equals: (Bag with: testObjectsFactory aBookSoldByPublisher)! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:54:02'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:54:02'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:54:02'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:54:02'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:54:02'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:54:02'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:54:02'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/29/2020 23:54:02'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/29/2020 23:54:02'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/29/2020 23:54:02'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/29/2020 23:54:02'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/29/2020 23:54:02'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/29/2020 23:54:02'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/29/2020 23:54:02'!
ERROR!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/29/2020 23:54:02'!
ERROR!
!XXXTest methodsFor: 'tests - checkout' stamp: 'FR 11/29/2020 23:54:25' prior: 51209901!
test14SuccessfulCheckoutIsDoneCorrectly

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
					withPassword: testObjectsFactory aCorrectPassword)
		equals: (Bag with: testObjectsFactory aBookSoldByPublisher)! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/29/2020 23:54:27'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/29/2020 23:54:27'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/29/2020 23:54:27'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/29/2020 23:54:27'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/29/2020 23:54:27'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/29/2020 23:54:28'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/29/2020 23:54:28'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/29/2020 23:54:28'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/29/2020 23:54:28'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/29/2020 23:54:28'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/29/2020 23:54:28'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/29/2020 23:54:28'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/29/2020 23:54:28'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/29/2020 23:54:28'!
ERROR!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/29/2020 23:54:28'!
ERROR!

TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'FR 11/29/2020 23:55:50'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'tests' stamp: 'FR 11/29/2020 23:56:00'!
test01CreditCardNumberCannotHaveLessThanSixteenDigits

	self  should: [ CreditCard ownedBy: 'Juan Rodriguez' withNumber: '123456789012345' andExpirationMonthAndYear: GregorianMonthOfYear current ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidNumberErrorDescription! !
!CreditCardTest methodsFor: 'tests' stamp: 'FR 11/29/2020 23:56:09'!
test02CreditCardNameCannotBeEmpty

	self  should: [ CreditCard ownedBy: '' withNumber: '1234567890123456' andExpirationMonthAndYear: GregorianMonthOfYear current ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidNameErrorDescription! !
!CreditCardTest methodsFor: 'tests' stamp: 'FR 11/29/2020 23:56:14'!
test03CreditCardNumberCannotHaveMoreThanSixteenDigits

	self  should: [ CreditCard ownedBy: 'Juan Rodriguez' withNumber: '12345678901234567' andExpirationMonthAndYear: GregorianMonthOfYear current ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard invalidNumberErrorDescription! !
!CreditCardTest methodsFor: 'tests' stamp: 'FR 11/29/2020 23:56:21'!
test04CreditCardWithValidInfoIsCorrectlyCreated

	| aCreditCard |
	
	aCreditCard := CreditCard ownedBy: 'Juan Rodriguez' withNumber: '1234567890123456' andExpirationMonthAndYear: GregorianMonthOfYear current.
	
	self assert: aCreditCard owner = 'Juan Rodriguez'.
	self assert: aCreditCard number = '1234567890123456'.
	self assert: aCreditCard expirationMonthAndYear = GregorianMonthOfYear current.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FR 11/29/2020 23:56:35'!
ownedBy: anOwnerName withNumber: aCreditCardNumber andExpirationMonthAndYear: anExpirationMonthAndYear
	
	self assertNumberIsValid: aCreditCardNumber.
	self assertNameIsValid: anOwnerName.
	
	^ self new initializeWithOwner: anOwnerName number: aCreditCardNumber andExpirationMonthAndYear: anExpirationMonthAndYear.! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'FR 11/29/2020 23:58:12'!
invalidNameErrorDescription
	
	^ 'Name is not valid!!'! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'FR 11/29/2020 23:58:18'!
invalidNumberErrorDescription
	
	^ 'Credit card number is invalid!!'! !
!CreditCard class methodsFor: 'assertions' stamp: 'FR 11/29/2020 23:58:34'!
assertNameIsValid: anOwnerName

	^ anOwnerName ifEmpty: [ self error: self invalidNameErrorDescription ]! !
!CreditCard class methodsFor: 'assertions' stamp: 'FR 11/29/2020 23:58:38'!
assertNumberIsValid: aCreditCardNumber

	^ aCreditCardNumber size ~= 16 ifTrue: [ self error: self invalidNumberErrorDescription ]! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FR 11/29/2020 23:58:58'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FR 11/29/2020 23:59:00'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration owner number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FR 11/29/2020 23:59:01'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration owner number expirationMonthAndYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FR 11/29/2020 23:58:57'!
initializeWithOwner: anOwnerName number: aCreditCardNumber andExpirationMonthAndYear: anExpirationMonthAndYear

	owner := anOwnerName.
	number := aCreditCardNumber.
	expirationMonthAndYear := anExpirationMonthAndYear.! !

Object subclass: #CreditCard
	instanceVariableNames: 'owner number expirationMonthAndYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FR 11/29/2020 23:59:08'!
Object subclass: #CreditCard
	instanceVariableNames: 'owner number expirationMonthAndYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: CreditCard #initializeExpiringOn: stamp: 'FR 11/29/2020 23:59:18'!
initializeExpiringOn: aMonth 
	
	expiration := aMonth !

!methodRemoval: CreditCard class #expiringOn: stamp: 'FR 11/29/2020 23:59:22'!
expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FR 11/30/2020 00:00:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FR 11/30/2020 00:00:46'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FR 11/30/2020 00:00:46'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FR 11/30/2020 00:00:46'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FR 11/30/2020 00:00:46'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FR 11/30/2020 00:00:46'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FR 11/30/2020 00:00:46'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FR 11/30/2020 00:00:46'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FR 11/30/2020 00:00:48'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FR 11/30/2020 00:00:48'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FR 11/30/2020 00:00:48'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FR 11/30/2020 00:00:48'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FR 11/30/2020 00:00:48'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FR 11/30/2020 00:00:48'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FR 11/30/2020 00:00:49'!
ERROR!

GregorianMonthOfYear current!

GregorianMonthOfYear current start!

!testRun: #CreditCardTest #test01CreditCardNumberCannotHaveLessThanSixteenDigits stamp: 'FR 11/30/2020 00:04:26'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNameCannotBeEmpty stamp: 'FR 11/30/2020 00:04:27'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberCannotHaveMoreThanSixteenDigits stamp: 'FR 11/30/2020 00:04:27'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithValidInfoIsCorrectlyCreated stamp: 'FR 11/30/2020 00:04:27'!
ERROR!

!testRun: #CreditCardTest #test04CreditCardWithValidInfoIsCorrectlyCreated stamp: 'FR 11/30/2020 00:04:27'!
ERROR!
!CreditCard methodsFor: 'accessing' stamp: 'FR 11/30/2020 00:04:44'!
expirationMonthAndYear

	^ expirationMonthAndYear copy! !
!CreditCard methodsFor: 'accessing' stamp: 'FR 11/30/2020 00:04:47'!
number

	^ number copy! !
!CreditCard methodsFor: 'accessing' stamp: 'FR 11/30/2020 00:04:52'!
owner

	^ owner copy! !

!testRun: #CreditCardTest #test01CreditCardNumberCannotHaveLessThanSixteenDigits stamp: 'FR 11/30/2020 00:04:53'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNameCannotBeEmpty stamp: 'FR 11/30/2020 00:04:54'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberCannotHaveMoreThanSixteenDigits stamp: 'FR 11/30/2020 00:04:54'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithValidInfoIsCorrectlyCreated stamp: 'FR 11/30/2020 00:04:55'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'FR 11/30/2020 00:06:51' prior: 51207325!
notExpiredCreditCard
	
	^CreditCard ownedBy: 'Juan PÈrez'
			     withNumber: '1234567890123456'
			     andExpirationMonthAndYear: self aNonExpiredDate! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'FR 11/30/2020 00:07:06' prior: 51207332!
expiredCreditCard
	
	^CreditCard ownedBy: 'Juan PÈrez'
			     withNumber: '1234567890123456'
			     andExpirationMonthAndYear: self anExpiredDate! !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'FR 11/30/2020 00:07:42'!
anExpiredDate
	
	^ self today monthOfYear previous! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FR 11/30/2020 00:07:47'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FR 11/30/2020 00:07:47'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FR 11/30/2020 00:07:48'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FR 11/30/2020 00:07:48'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FR 11/30/2020 00:07:48'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FR 11/30/2020 00:07:48'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FR 11/30/2020 00:07:51'!
ERROR!
!CreditCard methodsFor: 'testing' stamp: 'FR 11/30/2020 00:09:55' prior: 51207232!
isExpiredOn: aDate 
	
	^ aDate monthOfYear >= self expirationMonthAndYear! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FR 11/30/2020 00:09:57'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FR 11/30/2020 00:09:58'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FR 11/30/2020 00:09:58'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FR 11/30/2020 00:09:58'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FR 11/30/2020 00:09:58'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FR 11/30/2020 00:09:58'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FR 11/30/2020 00:10:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FR 11/30/2020 00:10:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FR 11/30/2020 00:10:08'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FR 11/30/2020 00:10:08'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FR 11/30/2020 00:10:08'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FR 11/30/2020 00:10:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FR 11/30/2020 00:10:09'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FR 11/30/2020 00:10:09'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FR 11/30/2020 00:10:11'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FR 11/30/2020 00:10:11'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FR 11/30/2020 00:10:11'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FR 11/30/2020 00:10:12'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FR 11/30/2020 00:10:12'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FR 11/30/2020 00:10:12'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberCannotHaveLessThanSixteenDigits stamp: 'FR 11/30/2020 00:10:15'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNameCannotBeEmpty stamp: 'FR 11/30/2020 00:10:15'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberCannotHaveMoreThanSixteenDigits stamp: 'FR 11/30/2020 00:10:15'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithValidInfoIsCorrectlyCreated stamp: 'FR 11/30/2020 00:10:16'!
PASSED!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/30/2020 00:11:02'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/30/2020 00:11:02'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/30/2020 00:11:02'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/30/2020 00:11:02'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/30/2020 00:11:02'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/30/2020 00:11:02'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/30/2020 00:11:02'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/30/2020 00:11:02'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/30/2020 00:11:02'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/30/2020 00:11:02'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/30/2020 00:11:02'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/30/2020 00:11:02'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/30/2020 00:11:02'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/30/2020 00:11:02'!
ERROR!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/30/2020 00:11:02'!
ERROR!
!XXX methodsFor: 'checkout' stamp: 'FR 11/30/2020 00:13:16' prior: 51209849!
checkout: aCartID withCreditCard: aCreditCardNumber expiring: anExpirationDate withOwner: anOwnerName 
	
	| clientCreditCard |
	
	(booksByCartID includesKey: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ].
	
	[ clientCreditCard := CreditCard ownedBy: anOwnerName
							  withNumber: aCreditCardNumber
							  andExpirationMonthAndYear: anExpirationDate ]
		on: Error
		do: [ self error: self class invalidCreditCardErrorDescription ]! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/30/2020 00:13:22'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/30/2020 00:13:22'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/30/2020 00:13:22'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/30/2020 00:13:22'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/30/2020 00:13:22'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/30/2020 00:13:22'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/30/2020 00:13:22'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/30/2020 00:13:22'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/30/2020 00:13:22'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/30/2020 00:13:22'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/30/2020 00:13:22'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/30/2020 00:13:22'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/30/2020 00:13:22'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/30/2020 00:13:22'!
ERROR!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/30/2020 00:13:22'!
ERROR!
!XXX methodsFor: 'listing' stamp: 'FR 11/30/2020 00:13:33'!
listPurchasesFor: aString withPassword: aString2 
	self shouldBeImplemented.! !
!XXX methodsFor: 'listing' stamp: 'FR 11/30/2020 00:14:48' prior: 51210537!
listPurchasesFor: aClientID withPassword: aPassword! !

!classDefinition: #XXX category: 'TusLibros' stamp: 'FR 11/30/2020 00:20:10'!
Object subclass: #XXX
	instanceVariableNames: 'authenticator currentCartID booksByCartID catalog cartIDsByClientID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'creating' stamp: 'FR 11/30/2020 00:20:07' prior: 51208596!
createCartForClientWithID: aClientID andPassword: aPassword

	authenticator authenticateWithID: aClientID andPassword: aPassword.
	
	currentCartID := currentCartID + 1.
	booksByCartID at: currentCartID put: Bag new.
	
	(cartIDsByClientID includesKey: aClientID) ifFalse: [ cartIDsByClientID at: aClientID put: Set new ].
	(cartIDsByClientID at: aClientID) add: currentCartID.
	
	^ currentCartID copy! !
!XXX methodsFor: 'initialization' stamp: 'FR 11/30/2020 00:20:21' prior: 51208577!
initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog

	authenticator := anAuthenticator.
	catalog := aCatalog.
	currentCartID := 0.
	booksByCartID := Dictionary new.
	cartIDsByClientID := Dictionary new.! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/30/2020 00:20:39'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/30/2020 00:20:39'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/30/2020 00:20:39'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/30/2020 00:20:39'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/30/2020 00:20:39'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/30/2020 00:20:39'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/30/2020 00:20:40'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/30/2020 00:20:40'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/30/2020 00:20:40'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/30/2020 00:20:40'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/30/2020 00:20:40'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/30/2020 00:20:40'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/30/2020 00:20:40'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/30/2020 00:20:40'!
FAILURE!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/30/2020 00:20:40'!
FAILURE!
!XXX methodsFor: 'creating' stamp: 'FR 11/30/2020 00:23:05' prior: 51210555!
createCartForClientWithID: aClientID andPassword: aPassword

	authenticator authenticateWithID: aClientID andPassword: aPassword.
	
	currentCartID := currentCartID + 1.
	booksByCartID at: currentCartID put: Bag new.
	
	(cartIDsByClientID at: aClientID) add: currentCartID.
	
	^ currentCartID copy! !

!classDefinition: #XXX category: 'TusLibros' stamp: 'FR 11/30/2020 00:23:32'!
Object subclass: #XXX
	instanceVariableNames: 'authenticator currentCartID booksByCartID catalog cartIDByClientID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'as yet unclassified' stamp: 'FR 11/30/2020 00:23:32' prior: 51210628!
createCartForClientWithID: aClientID andPassword: aPassword

	authenticator authenticateWithID: aClientID andPassword: aPassword.
	
	currentCartID := currentCartID + 1.
	booksByCartID at: currentCartID put: Bag new.
	
	(cartIDByClientID at: aClientID) add: currentCartID.
	
	^ currentCartID copy! !
!XXX methodsFor: 'as yet unclassified' stamp: 'FR 11/30/2020 00:23:32' prior: 51210571!
initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog

	authenticator := anAuthenticator.
	catalog := aCatalog.
	currentCartID := 0.
	booksByCartID := Dictionary new.
	cartIDByClientID := Dictionary new.! !
!XXX methodsFor: 'listing' stamp: 'FR 11/30/2020 00:24:02' prior: 51210542!
listPurchasesFor: aClientID withPassword: aPassword

	^ booksByCartID at: (cartIDByClientID at: aClientID) copy! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/30/2020 00:24:05'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/30/2020 00:24:05'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/30/2020 00:24:05'!
ERROR!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/30/2020 00:24:05'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/30/2020 00:24:05'!
ERROR!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/30/2020 00:24:05'!
ERROR!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/30/2020 00:24:05'!
ERROR!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/30/2020 00:24:05'!
ERROR!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/30/2020 00:24:06'!
ERROR!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/30/2020 00:24:06'!
ERROR!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/30/2020 00:24:06'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/30/2020 00:24:06'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/30/2020 00:24:06'!
ERROR!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/30/2020 00:24:06'!
ERROR!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/30/2020 00:24:10'!
ERROR!
!XXX methodsFor: 'creating' stamp: 'FR 11/30/2020 00:24:27' prior: 51210649!
createCartForClientWithID: aClientID andPassword: aPassword

	authenticator authenticateWithID: aClientID andPassword: aPassword.
	
	currentCartID := currentCartID + 1.
	booksByCartID at: currentCartID put: Bag new.
	
	(cartIDByClientID at: aClientID) put: currentCartID.
	
	^ currentCartID copy! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/30/2020 00:24:28'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/30/2020 00:24:28'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/30/2020 00:24:28'!
ERROR!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/30/2020 00:24:28'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/30/2020 00:24:29'!
ERROR!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/30/2020 00:24:29'!
ERROR!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/30/2020 00:24:29'!
ERROR!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/30/2020 00:24:29'!
ERROR!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/30/2020 00:24:29'!
ERROR!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/30/2020 00:24:29'!
ERROR!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/30/2020 00:24:29'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/30/2020 00:24:29'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/30/2020 00:24:29'!
ERROR!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/30/2020 00:24:29'!
ERROR!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/30/2020 00:24:30'!
ERROR!
!XXX methodsFor: 'creating' stamp: 'FR 11/30/2020 00:24:49' prior: 51210725!
createCartForClientWithID: aClientID andPassword: aPassword

	authenticator authenticateWithID: aClientID andPassword: aPassword.
	
	currentCartID := currentCartID + 1.
	booksByCartID at: currentCartID put: Bag new.
	
	cartIDByClientID at: aClientID put: currentCartID.
	
	^ currentCartID copy! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/30/2020 00:24:52'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/30/2020 00:24:52'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/30/2020 00:24:52'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/30/2020 00:24:52'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/30/2020 00:24:52'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/30/2020 00:24:53'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/30/2020 00:24:53'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/30/2020 00:24:53'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/30/2020 00:24:53'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/30/2020 00:24:53'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/30/2020 00:24:53'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/30/2020 00:24:53'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/30/2020 00:24:53'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/30/2020 00:24:53'!
PASSED!
!XXXTest methodsFor: 'tests - listing purchases' stamp: 'FR 11/30/2020 00:29:48'!
test15CannotListPurchasesForInvalidClientID

	| anXXX |
	
	authenticatorBehavior := [ self error: XXX invalidClientIDErrorDescription ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.

	self  should: [ anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
					  withPassword: testObjectsFactory aCorrectPassword ]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidClientIDErrorDescription! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/30/2020 00:29:52'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/30/2020 00:29:52'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/30/2020 00:29:52'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/30/2020 00:29:52'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/30/2020 00:29:52'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/30/2020 00:29:52'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/30/2020 00:29:52'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/30/2020 00:29:53'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/30/2020 00:29:53'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/30/2020 00:29:53'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/30/2020 00:29:53'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/30/2020 00:29:53'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/30/2020 00:29:53'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/30/2020 00:29:53'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 11/30/2020 00:29:53'!
FAILURE!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 11/30/2020 00:29:53'!
FAILURE!
!XXX methodsFor: 'listing' stamp: 'FR 11/30/2020 00:30:18' prior: 51210672!
listPurchasesFor: aClientID withPassword: aPassword

	authenticator authenticateWithID: aClientID andPassword: aPassword.
	
	^ booksByCartID at: (cartIDByClientID at: aClientID) copy! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/30/2020 00:30:20'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/30/2020 00:30:20'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/30/2020 00:30:20'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/30/2020 00:30:20'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/30/2020 00:30:20'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/30/2020 00:30:20'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/30/2020 00:30:20'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/30/2020 00:30:20'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/30/2020 00:30:20'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/30/2020 00:30:20'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/30/2020 00:30:20'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/30/2020 00:30:20'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/30/2020 00:30:20'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/30/2020 00:30:20'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 11/30/2020 00:30:20'!
PASSED!
!XXXTest methodsFor: 'tests - listing purchases' stamp: 'FR 11/30/2020 00:32:18'!
test16CannotListPurchasesForClientWithIncorrectPassword

	| anXXX |
	
	authenticatorBehavior := [ self error: XXX incorrectPasswordErrorDescription ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.

	self  should: [ anXXX listPurchasesFor: testObjectsFactory aValidClientID 
					  withPassword: testObjectsFactory anIncorrectPassword ]
		raise: testObjectsFactory functionalError
		withMessageText: XXX incorrectPasswordErrorDescription! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/30/2020 00:32:20'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/30/2020 00:32:20'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/30/2020 00:32:20'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/30/2020 00:32:20'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/30/2020 00:32:20'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/30/2020 00:32:20'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/30/2020 00:32:20'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/30/2020 00:32:20'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/30/2020 00:32:20'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/30/2020 00:32:20'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/30/2020 00:32:20'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/30/2020 00:32:20'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/30/2020 00:32:21'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/30/2020 00:32:21'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 11/30/2020 00:32:21'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 11/30/2020 00:32:21'!
PASSED!

!methodRemoval: XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 11/30/2020 00:36:12'!
test16CannotListPurchasesForClientWithIncorrectPassword

	| anXXX |
	
	authenticatorBehavior := [ self error: XXX incorrectPasswordErrorDescription ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.

	self  should: [ anXXX listPurchasesFor: testObjectsFactory aValidClientID 
					  withPassword: testObjectsFactory anIncorrectPassword ]
		raise: testObjectsFactory functionalError
		withMessageText: XXX incorrectPasswordErrorDescription!
!XXXTest methodsFor: 'tests - listing purchases' stamp: 'FR 11/30/2020 00:40:37'!
test16MultiplePurchasesBySameClientAreListedCorrectly

	| anXXX aCartID anotherCartID expectedPurchases |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: self aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: self aValidOwnerName.

	expectedPurchases := Bag new.
	expectedPurchases add: testObjectsFactory aBookSoldByPublisher.
	expectedPurchases add: testObjectsFactory anotherBookSoldByPublisher 
				       withOccurrences: 4.

	self assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
		equals: expectedPurchases! !
!XXXTest methodsFor: 'tests - listing purchases' stamp: 'FR 11/30/2020 00:40:42' prior: 51211051!
test16MultiplePurchasesBySameClientAreListedCorrectly

	| anXXX aCartID anotherCartID expectedPurchases |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: self aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: self aValidOwnerName.

	expectedPurchases := Bag new.
	expectedPurchases add: testObjectsFactory aBookSoldByPublisher.
	expectedPurchases add: testObjectsFactory anotherBookSoldByPublisher 
				       withOccurrences: 4.

	self assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/30/2020 00:40:48'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/30/2020 00:40:48'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/30/2020 00:40:48'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/30/2020 00:40:48'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/30/2020 00:40:48'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/30/2020 00:40:48'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/30/2020 00:40:48'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/30/2020 00:40:48'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/30/2020 00:40:49'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/30/2020 00:40:49'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/30/2020 00:40:49'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/30/2020 00:40:49'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/30/2020 00:40:49'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/30/2020 00:40:49'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 11/30/2020 00:40:49'!
PASSED!

!testRun: #XXXTest #test16MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 11/30/2020 00:40:49'!
ERROR!

!testRun: #XXXTest #test16MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 11/30/2020 00:40:49'!
ERROR!
!XXXTest methodsFor: 'tests - listing purchases' stamp: 'FR 11/30/2020 00:41:15' prior: 51211100!
test16MultiplePurchasesBySameClientAreListedCorrectly

	| anXXX aCartID anotherCartID expectedPurchases |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	expectedPurchases := Bag new.
	expectedPurchases add: testObjectsFactory aBookSoldByPublisher.
	expectedPurchases add: testObjectsFactory anotherBookSoldByPublisher 
				       withOccurrences: 4.

	self assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/30/2020 00:41:17'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/30/2020 00:41:17'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/30/2020 00:41:17'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/30/2020 00:41:17'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/30/2020 00:41:18'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/30/2020 00:41:18'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/30/2020 00:41:18'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/30/2020 00:41:18'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/30/2020 00:41:18'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/30/2020 00:41:18'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/30/2020 00:41:18'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/30/2020 00:41:18'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/30/2020 00:41:18'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/30/2020 00:41:18'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 11/30/2020 00:41:18'!
PASSED!

!testRun: #XXXTest #test16MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 11/30/2020 00:41:18'!
ERROR!

!testRun: #XXXTest #test16MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 11/30/2020 00:41:18'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'books' stamp: 'FR 11/30/2020 00:41:31'!
anotherBookSoldByPublisher
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'books' stamp: 'FR 11/30/2020 00:41:41' prior: 51211306!
anotherBookSoldByPublisher
	
	^ 'another book sold by this publisher'! !

!testRun: #XXXTest #test16MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 11/30/2020 00:41:42'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'catalogs' stamp: 'FR 11/30/2020 00:42:01' prior: 51208314!
aCatalog
	
	^ Set with: self aBookSoldByPublisher with: self anotherBookSoldByPublisher! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/30/2020 00:43:34'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/30/2020 00:43:34'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/30/2020 00:43:34'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/30/2020 00:43:34'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/30/2020 00:43:34'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/30/2020 00:43:34'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/30/2020 00:43:34'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/30/2020 00:43:34'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/30/2020 00:43:34'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/30/2020 00:43:34'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/30/2020 00:43:34'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/30/2020 00:43:34'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/30/2020 00:43:34'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/30/2020 00:43:35'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 11/30/2020 00:43:35'!
PASSED!

!testRun: #XXXTest #test16MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 11/30/2020 00:43:35'!
FAILURE!

!testRun: #XXXTest #test16MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 11/30/2020 00:43:35'!
FAILURE!

(anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)!

!testRun: #XXXTest #test16MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 11/30/2020 00:44:03'!
FAILURE!

!testRun: #XXXTest #test16MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 11/30/2020 00:44:03'!
FAILURE!

anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword!
!XXXTest methodsFor: 'tests - listing purchases' stamp: 'FR 11/30/2020 00:44:41'!
test17MultiplePurchasesBySameClientAreListedCorrectly

	| anXXX aCartID anotherCartID expectedPurchases |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	expectedPurchases := Bag new.
	expectedPurchases add: testObjectsFactory aBookSoldByPublisher.
	expectedPurchases add: testObjectsFactory anotherBookSoldByPublisher 
				       withOccurrences: 4.

	self assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases! !
!XXXTest methodsFor: 'tests - listing purchases' stamp: 'FR 11/30/2020 00:45:23'!
test16CannotListPurchasesForClientWithIncorrectPassword

	| anXXX |
	
	authenticatorBehavior := [ self error: XXX invalidClientIDErrorDescription ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.

	self  should: [ anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
					  withPassword: testObjectsFactory aCorrectPassword ]
		raise: testObjectsFactory functionalError
		withMessageText: XXX incorrectPasswordErrorDescription! !

!methodRemoval: XXXTest #test16MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 11/30/2020 00:45:26'!
test16MultiplePurchasesBySameClientAreListedCorrectly

	| anXXX aCartID anotherCartID expectedPurchases |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	expectedPurchases := Bag new.
	expectedPurchases add: testObjectsFactory aBookSoldByPublisher.
	expectedPurchases add: testObjectsFactory anotherBookSoldByPublisher 
				       withOccurrences: 4.

	self assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/30/2020 00:45:30'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/30/2020 00:45:30'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/30/2020 00:45:30'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/30/2020 00:45:30'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/30/2020 00:45:31'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/30/2020 00:45:31'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/30/2020 00:45:32'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/30/2020 00:45:32'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/30/2020 00:45:32'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/30/2020 00:45:32'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/30/2020 00:45:32'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/30/2020 00:45:32'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/30/2020 00:45:32'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/30/2020 00:45:32'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 11/30/2020 00:45:32'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 11/30/2020 00:45:32'!
FAILURE!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 11/30/2020 00:45:32'!
FAILURE!
!XXXTest methodsFor: 'tests - listing purchases' stamp: 'FR 11/30/2020 00:45:43' prior: 51211444!
test16CannotListPurchasesForClientWithIncorrectPassword

	| anXXX |
	
	authenticatorBehavior := [ self error: XXX invalidClientIDErrorDescription ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.

	self  should: [ anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
					  withPassword: testObjectsFactory anIncorrectPassword ]
		raise: testObjectsFactory functionalError
		withMessageText: XXX incorrectPasswordErrorDescription! !
!XXXTest methodsFor: 'tests - listing purchases' stamp: 'FR 11/30/2020 00:45:53' prior: 51211566!
test16CannotListPurchasesForClientWithIncorrectPassword

	| anXXX |
	
	authenticatorBehavior := [ self error: XXX incorrectPasswordErrorDescription ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.

	self  should: [ anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
					  withPassword: testObjectsFactory anIncorrectPassword ]
		raise: testObjectsFactory functionalError
		withMessageText: XXX incorrectPasswordErrorDescription! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/30/2020 00:45:55'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/30/2020 00:45:55'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/30/2020 00:45:55'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/30/2020 00:45:55'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/30/2020 00:45:55'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/30/2020 00:45:55'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/30/2020 00:45:55'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/30/2020 00:45:55'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/30/2020 00:45:55'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/30/2020 00:45:55'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/30/2020 00:45:56'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/30/2020 00:45:56'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/30/2020 00:45:56'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/30/2020 00:45:56'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 11/30/2020 00:45:56'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 11/30/2020 00:45:56'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 11/30/2020 00:45:56'!
FAILURE!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 11/30/2020 00:45:56'!
FAILURE!

!classDefinition: #XXX category: 'TusLibros' stamp: 'FR 11/30/2020 00:52:16'!
Object subclass: #XXX
	instanceVariableNames: 'authenticator currentCartID booksByCartID catalog cartIDByClientID cartsByID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #XXX category: 'TusLibros' stamp: 'FR 11/30/2020 00:52:20'!
Object subclass: #XXX
	instanceVariableNames: 'authenticator currentCartID booksByCartID catalog cartIDByClientID cartsByID cartIDsByClientID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'creating' stamp: 'FR 11/30/2020 00:52:13' prior: 51210784!
createCartForClientWithID: aClientID andPassword: aPassword

	authenticator authenticateWithID: aClientID andPassword: aPassword.
	
	currentCartID := currentCartID + 1.	
	
	cartsByID at: currentCartID put: (Cart acceptingItemsOf: catalog).
	
	(cartIDsByClientID includesKey: aClientID) ifFalse: [ cartIDsByClientID at: aClientID put: Set new ].
	(cartIDsByClientID at: aClientID) add: currentCartID.	
	
	^ currentCartID copy! !
!XXX methodsFor: 'initialization' stamp: 'FR 11/30/2020 00:53:05' prior: 51210662!
initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog

	authenticator := anAuthenticator.
	catalog := aCatalog.
	currentCartID := 0.
	cartsByID := Dictionary new.
	cartIDsByClientID := Dictionary new.! !
!XXX methodsFor: 'adding' stamp: 'FR 11/30/2020 00:54:22' prior: 51209218!
add: anAmount of: aBook toCart: aCartID

	(booksByCartID includesKey: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ].
	
	(catalog includes: aBook) ifFalse: [ self error: self class bookNotForSaleErrorDescription ].
	
	(anAmount isInteger and: [ anAmount > 0 ]) ifFalse: [ self error: self class invalidAmountErrorDescription ].
	
	(cartsByID at: aCartID) add: anAmount of: aBook! !
!XXX methodsFor: 'listing' stamp: 'FR 11/30/2020 00:58:13' prior: 51209316!
listCart: aCartID
	
	(booksByCartID includesKey: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ].
	
	^ (cartsByID at: aCartID) books asBag! !
!Cart methodsFor: 'queries' stamp: 'FR 11/30/2020 00:58:28'!
books

	^items copy! !
!XXX methodsFor: 'listing' stamp: 'FR 11/30/2020 01:00:04' prior: 51210908!
listPurchasesFor: aClientID withPassword: aPassword

	| purchasesList |
	
	authenticator authenticateWithID: aClientID andPassword: aPassword.
	
	purchasesList := Bag new.
	
	(cartIDsByClientID at: aClientID) do: [:aCartID | purchasesList addAll: ((cartsByID at: aCartID) books asBag)].
	
	^ purchasesList! !

Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'FR 11/30/2020 01:01:13'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'FR 11/30/2020 01:02:44'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'behavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'debit' stamp: 'FR 11/30/2020 01:02:42'!
debit: anAmount from: aCreditCard

	behavior value! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'FR 11/30/2020 01:03:12'!
successfulValidation

	^ self new initializeWithBehavior: []! !
!MerchantProcessorSimulator methodsFor: 'initialization' stamp: 'FR 11/30/2020 01:03:34'!
initializeWithBehavior: aBlock

	behavior := aBlock! !

!classDefinition: #XXX category: 'TusLibros' stamp: 'FR 11/30/2020 01:08:35'!
Object subclass: #XXX
	instanceVariableNames: 'authenticator currentCartID booksByCartID catalog cartIDByClientID cartsByID cartIDsByClientID merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'checkout' stamp: 'FR 11/30/2020 01:08:34' prior: 51210473!
checkout: aCartID withCreditCard: aCreditCardNumber expiring: anExpirationDate withOwner: anOwnerName 
	
	| clientCreditCard |
	
	(booksByCartID includesKey: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ].
	
	[ clientCreditCard := CreditCard ownedBy: anOwnerName
							  withNumber: aCreditCardNumber
							  andExpirationMonthAndYear: anExpirationDate ]
		on: Error
		do: [ self error: self class invalidCreditCardErrorDescription ].
	
	Cashier toCheckout: (cartsByID at: aCartID)
		     charging: clientCreditCard
		     throught: merchantProcessor
		     on: FixedGregorianDate today
		     registeringOn: Set new! !
!XXX methodsFor: 'initialization' stamp: 'FR 11/30/2020 01:08:43' prior: 51211693!
initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog

	authenticator := anAuthenticator.
	catalog := aCatalog.
	currentCartID := 0.
	cartsByID := Dictionary new.
	cartIDsByClientID := Dictionary new.
	merchantProcessor := MerchantProcessorSimulator successfulValidation.! !

Object subclass: #XXX
	instanceVariableNames: 'authenticator currentCartID booksByCartID catalog cartsByID cartIDsByClientID merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #XXX category: 'TusLibros' stamp: 'FR 11/30/2020 01:08:53'!
Object subclass: #XXX
	instanceVariableNames: 'authenticator currentCartID booksByCartID catalog cartsByID cartIDsByClientID merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #XXX
	instanceVariableNames: 'authenticator currentCartID catalog cartsByID cartIDsByClientID merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #XXX category: 'TusLibros' stamp: 'FR 11/30/2020 01:09:21'!
Object subclass: #XXX
	instanceVariableNames: 'authenticator currentCartID catalog cartsByID cartIDsByClientID merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'adding' stamp: 'FR 11/30/2020 01:09:28' prior: 51211703!
add: anAmount of: aBook toCart: aCartID

	(cartsByID includesKey: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ].
	
	(catalog includes: aBook) ifFalse: [ self error: self class bookNotForSaleErrorDescription ].
	
	(anAmount isInteger and: [ anAmount > 0 ]) ifFalse: [ self error: self class invalidAmountErrorDescription ].
	
	(cartsByID at: aCartID) add: anAmount of: aBook! !
!XXX methodsFor: 'checkout' stamp: 'FR 11/30/2020 01:09:34' prior: 51211788!
checkout: aCartID withCreditCard: aCreditCardNumber expiring: anExpirationDate withOwner: anOwnerName 
	
	| clientCreditCard |
	
	(cartsByID includesKey: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ].
	
	[ clientCreditCard := CreditCard ownedBy: anOwnerName
							  withNumber: aCreditCardNumber
							  andExpirationMonthAndYear: anExpirationDate ]
		on: Error
		do: [ self error: self class invalidCreditCardErrorDescription ].
	
	Cashier toCheckout: (cartsByID at: aCartID)
		     charging: clientCreditCard
		     throught: merchantProcessor
		     on: FixedGregorianDate today
		     registeringOn: Set new! !
!XXX methodsFor: 'listing' stamp: 'FR 11/30/2020 01:09:43' prior: 51211719!
listCart: aCartID
	
	(cartsByID includesKey: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ].
	
	^ (cartsByID at: aCartID) books asBag! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/30/2020 01:09:47'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/30/2020 01:09:47'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/30/2020 01:09:47'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/30/2020 01:09:47'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/30/2020 01:09:47'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/30/2020 01:09:47'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/30/2020 01:09:48'!
ERROR!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/30/2020 01:09:48'!
ERROR!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/30/2020 01:09:48'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/30/2020 01:09:48'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/30/2020 01:09:48'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/30/2020 01:09:48'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/30/2020 01:09:48'!
ERROR!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/30/2020 01:09:48'!
ERROR!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 11/30/2020 01:09:48'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 11/30/2020 01:09:48'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 11/30/2020 01:09:48'!
ERROR!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/30/2020 01:09:50'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'catalogs' stamp: 'FR 11/30/2020 01:10:20' prior: 51211320!
aCatalog
	
	^ Set with: self aBookSoldByPublisher -> 50 with: self anotherBookSoldByPublisher -> 100! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/30/2020 01:10:22'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/30/2020 01:10:22'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/30/2020 01:10:22'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/30/2020 01:10:22'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/30/2020 01:10:22'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/30/2020 01:10:22'!
FAILURE!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/30/2020 01:10:22'!
ERROR!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/30/2020 01:10:22'!
ERROR!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/30/2020 01:10:22'!
FAILURE!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/30/2020 01:10:22'!
FAILURE!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/30/2020 01:10:22'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/30/2020 01:10:22'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/30/2020 01:10:22'!
ERROR!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/30/2020 01:10:22'!
ERROR!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 11/30/2020 01:10:22'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 11/30/2020 01:10:22'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 11/30/2020 01:10:22'!
ERROR!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/30/2020 01:10:24'!
ERROR!
!XXX methodsFor: 'adding' stamp: 'FR 11/30/2020 01:10:45' prior: 51211854!
add: anAmount of: aBook toCart: aCartID

	(cartsByID includesKey: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ].
	
	(catalog includesKey: aBook) ifFalse: [ self error: self class bookNotForSaleErrorDescription ].
	
	(anAmount isInteger and: [ anAmount > 0 ]) ifFalse: [ self error: self class invalidAmountErrorDescription ].
	
	(cartsByID at: aCartID) add: anAmount of: aBook! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/30/2020 01:10:55'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/30/2020 01:10:55'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/30/2020 01:10:55'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/30/2020 01:10:55'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/30/2020 01:10:55'!
ERROR!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/30/2020 01:10:55'!
ERROR!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/30/2020 01:10:55'!
ERROR!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/30/2020 01:10:55'!
ERROR!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/30/2020 01:10:55'!
ERROR!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/30/2020 01:10:55'!
ERROR!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/30/2020 01:10:55'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/30/2020 01:10:55'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/30/2020 01:10:55'!
ERROR!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/30/2020 01:10:55'!
ERROR!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 11/30/2020 01:10:56'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 11/30/2020 01:10:56'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 11/30/2020 01:10:56'!
ERROR!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/30/2020 01:10:57'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'catalogs' stamp: 'FR 11/30/2020 01:11:21' prior: 51211959!
aCatalog
	
	^ Dictionary with: self aBookSoldByPublisher -> 50 with: self anotherBookSoldByPublisher -> 100! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/30/2020 01:11:24'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/30/2020 01:11:24'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/30/2020 01:11:24'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/30/2020 01:11:24'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/30/2020 01:11:25'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/30/2020 01:11:25'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/30/2020 01:11:25'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/30/2020 01:11:25'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/30/2020 01:11:25'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/30/2020 01:11:25'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/30/2020 01:11:25'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/30/2020 01:11:25'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/30/2020 01:11:25'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/30/2020 01:11:25'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 11/30/2020 01:11:25'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 11/30/2020 01:11:25'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 11/30/2020 01:11:25'!
PASSED!
!XXXTest methodsFor: 'tests - listing purchases' stamp: 'FR 11/30/2020 01:14:10'!
test18PurchasesByMultipleClientAreListedCorrectly

	| anXXX aCartID anotherCartID expectedPurchases1 expectedPurchases2 |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	expectedPurchases1 := Bag new.
	expectedPurchases1 add: testObjectsFactory aBookSoldByPublisher.

	expectedPurchases2 := Bag new.
	expectedPurchases2 add: testObjectsFactory anotherBookSoldByPublisher 
				         withOccurrences: 4.

	self assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases1.
	self assert: (anXXX listPurchasesFor: testObjectsFactory anotherValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases2! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/30/2020 01:14:16'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/30/2020 01:14:16'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/30/2020 01:14:17'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/30/2020 01:14:17'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/30/2020 01:14:17'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/30/2020 01:14:17'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/30/2020 01:14:17'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/30/2020 01:14:17'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/30/2020 01:14:17'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/30/2020 01:14:17'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/30/2020 01:14:17'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/30/2020 01:14:17'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/30/2020 01:14:17'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/30/2020 01:14:17'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 11/30/2020 01:14:17'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 11/30/2020 01:14:17'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 11/30/2020 01:14:17'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 11/30/2020 01:14:17'!
ERROR!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 11/30/2020 01:14:17'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'client IDs' stamp: 'FR 11/30/2020 01:14:24'!
anotherValidClientID
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'client IDs' stamp: 'FR 11/30/2020 01:14:32' prior: 51212275!
anotherValidClientID
	
	^ 'another valid client ID'! !

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 11/30/2020 01:14:33'!
PASSED!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/30/2020 01:14:36'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/30/2020 01:14:36'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/30/2020 01:14:36'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/30/2020 01:14:36'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/30/2020 01:14:36'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/30/2020 01:14:36'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/30/2020 01:14:36'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/30/2020 01:14:36'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/30/2020 01:14:36'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/30/2020 01:14:36'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/30/2020 01:14:36'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/30/2020 01:14:36'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/30/2020 01:14:36'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/30/2020 01:14:36'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 11/30/2020 01:14:36'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 11/30/2020 01:14:36'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 11/30/2020 01:14:37'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 11/30/2020 01:14:37'!
PASSED!

----STARTUP---- (30 November 2020 08:14:35) as E:\!!NUEVO\Programas\CuisUniversity\v4383.1\CuisUniversity-4383.image!


----End fileIn of E:\!!NUEVO\Programas\CuisUniversity\v4383.1\TusLibrosTerceraIteraciÔøΩnLunesPreRefactors.st----!
!XXX methodsFor: 'adding' stamp: 'FR 11/30/2020 08:44:10'!
assertCartIDIsValid: aCartID

	^ (cartsByID includesKey: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ]! !
!XXX methodsFor: 'adding' stamp: 'FR 11/30/2020 08:44:10' prior: 51213621!
add: anAmount of: aBook toCart: aCartID

	self assertCartIDIsValid: aCartID.
	
	(catalog includesKey: aBook) ifFalse: [ self error: self class bookNotForSaleErrorDescription ].
	
	(anAmount isInteger and: [ anAmount > 0 ]) ifFalse: [ self error: self class invalidAmountErrorDescription ].
	
	(cartsByID at: aCartID) add: anAmount of: aBook! !
!XXX methodsFor: 'adding' stamp: 'FR 11/30/2020 08:44:26'!
assertBookIsForSale: aBook

	^ (catalog includesKey: aBook) ifFalse: [ self error: self class bookNotForSaleErrorDescription ]! !
!XXX methodsFor: 'adding' stamp: 'FR 11/30/2020 08:44:26' prior: 51213713!
add: anAmount of: aBook toCart: aCartID

	self assertCartIDIsValid: aCartID.
	
	self assertBookIsForSale: aBook.
	
	(anAmount isInteger and: [ anAmount > 0 ]) ifFalse: [ self error: self class invalidAmountErrorDescription ].
	
	(cartsByID at: aCartID) add: anAmount of: aBook! !
!XXX methodsFor: 'adding' stamp: 'FR 11/30/2020 08:44:34' prior: 51213733!
add: anAmount of: aBook toCart: aCartID

	self assertCartIDIsValid: aCartID.
	self assertBookIsForSale: aBook.
	
	(anAmount isInteger and: [ anAmount > 0 ]) ifFalse: [ self error: self class invalidAmountErrorDescription ].
	
	(cartsByID at: aCartID) add: anAmount of: aBook! !
!XXX methodsFor: 'adding' stamp: 'FR 11/30/2020 08:44:44'!
assertAmounsIsValid: anAmount

	^ (anAmount isInteger and: [ anAmount > 0 ]) ifFalse: [ self error: self class invalidAmountErrorDescription ]! !
!XXX methodsFor: 'adding' stamp: 'FR 11/30/2020 08:44:44' prior: 51213745!
add: anAmount of: aBook toCart: aCartID

	self assertCartIDIsValid: aCartID.
	self assertBookIsForSale: aBook.
	
	self assertAmounsIsValid: anAmount.
	
	(cartsByID at: aCartID) add: anAmount of: aBook! !
!XXX methodsFor: 'adding' stamp: 'FR 11/30/2020 08:44:52'!
assertAmountIsValid: anAmount

	^ (anAmount isInteger and: [ anAmount > 0 ]) ifFalse: [ self error: self class invalidAmountErrorDescription ]! !
!XXX methodsFor: 'as yet unclassified' stamp: 'FR 11/30/2020 08:44:52' prior: 51213763!
add: anAmount of: aBook toCart: aCartID

	self assertCartIDIsValid: aCartID.
	self assertBookIsForSale: aBook.
	
	self assertAmountIsValid: anAmount.
	
	(cartsByID at: aCartID) add: anAmount of: aBook! !

!methodRemoval: XXX #assertAmounsIsValid: stamp: 'FR 11/30/2020 08:44:52'!
assertAmounsIsValid: anAmount

	^ (anAmount isInteger and: [ anAmount > 0 ]) ifFalse: [ self error: self class invalidAmountErrorDescription ]!
!XXX methodsFor: 'checkout' stamp: 'FR 11/30/2020 08:48:49' prior: 51213636!
checkout: aCartID withCreditCard: aCreditCardNumber expiring: anExpirationDate withOwner: anOwnerName 
	
	| clientCreditCard |
	
	self assertCartIDIsValid: aCartID.
	
	[ clientCreditCard := CreditCard ownedBy: anOwnerName
							  withNumber: aCreditCardNumber
							  andExpirationMonthAndYear: anExpirationDate ]
		on: Error
		do: [ self error: self class invalidCreditCardErrorDescription ].
	
	Cashier toCheckout: (cartsByID at: aCartID)
		     charging: clientCreditCard
		     throught: merchantProcessor
		     on: FixedGregorianDate today
		     registeringOn: Set new! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FR 11/30/2020 08:51:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FR 11/30/2020 08:51:46'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FR 11/30/2020 08:51:46'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FR 11/30/2020 08:51:46'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FR 11/30/2020 08:51:46'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FR 11/30/2020 08:51:47'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FR 11/30/2020 08:51:47'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FR 11/30/2020 08:51:47'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FR 11/30/2020 08:51:48'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FR 11/30/2020 08:51:48'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FR 11/30/2020 08:51:48'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FR 11/30/2020 08:51:48'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FR 11/30/2020 08:51:49'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FR 11/30/2020 08:51:49'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberCannotHaveLessThanSixteenDigits stamp: 'FR 11/30/2020 08:51:50'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNameCannotBeEmpty stamp: 'FR 11/30/2020 08:51:50'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberCannotHaveMoreThanSixteenDigits stamp: 'FR 11/30/2020 08:51:50'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithValidInfoIsCorrectlyCreated stamp: 'FR 11/30/2020 08:51:50'!
PASSED!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/30/2020 08:51:52'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/30/2020 08:51:52'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/30/2020 08:51:52'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/30/2020 08:51:52'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/30/2020 08:51:52'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/30/2020 08:51:53'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/30/2020 08:51:53'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/30/2020 08:51:53'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/30/2020 08:51:53'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/30/2020 08:51:53'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/30/2020 08:51:53'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/30/2020 08:51:53'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/30/2020 08:51:53'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/30/2020 08:51:53'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 11/30/2020 08:51:53'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 11/30/2020 08:51:53'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 11/30/2020 08:51:53'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 11/30/2020 08:51:53'!
PASSED!
!XXX methodsFor: 'private - other' stamp: 'FR 11/30/2020 14:09:35'!
createCartFor: aClientID
	
	currentCartID := currentCartID + 1.	
	
	cartsByID at: currentCartID put: (Cart acceptingItemsOf: catalog).
	
	(cartIDsByClientID includesKey: aClientID) ifFalse: [ cartIDsByClientID at: aClientID put: Set new ].
	(cartIDsByClientID at: aClientID) add: currentCartID.	! !
!XXX methodsFor: 'creating' stamp: 'FR 11/30/2020 14:10:16' prior: 51213585!
createCartForClientWithID: aClientID andPassword: aPassword

	authenticator authenticateWithID: aClientID andPassword: aPassword.
	
	self createCartFor: aClientID.
	
	^ currentCartID copy! !
!XXX methodsFor: 'listing' stamp: 'FR 11/30/2020 14:10:53' prior: 51213601!
listCart: aCartID
	
	self assertCartIDIsValid: aCartID
	
	^ (cartsByID at: aCartID) books asBag! !
!XXX methodsFor: 'private - other' stamp: 'FR 11/30/2020 14:11:49'!
purchasesFrom: aClientID
	
	| purchasesList |
		
	purchasesList := Bag new.
	
	(cartIDsByClientID at: aClientID) do: [:aCartID | purchasesList addAll: ((cartsByID at: aCartID) books asBag)].
	
	^ purchasesList! !
!XXX methodsFor: 'listing' stamp: 'FR 11/30/2020 14:12:08' prior: 51213609!
listPurchasesFor: aClientID withPassword: aPassword
	
	authenticator authenticateWithID: aClientID andPassword: aPassword.
	
	^ self purchasesFrom: aClientID! !
!XXX methodsFor: 'private - other' stamp: 'FR 11/30/2020 14:17:32'!
createCreditCardWithOwner: anOwnerName number: aCreditCardNumber andExpirationDate: anExpirationDate

	[ ^ CreditCard ownedBy: anOwnerName
							  withNumber: aCreditCardNumber
							  andExpirationMonthAndYear: anExpirationDate ]
		on: Error
		do: [ self error: self class invalidCreditCardErrorDescription ].! !
!XXX methodsFor: 'checkout' stamp: 'FR 11/30/2020 14:18:20' prior: 51213796!
checkout: aCartID withCreditCard: aCreditCardNumber expiring: anExpirationDate withOwner: anOwnerName 
	
	| clientCreditCard |
	
	self assertCartIDIsValid: aCartID.
	
	clientCreditCard := self createCreditCardWithOwner: anOwnerName
					     number: aCreditCardNumber
					     andExpirationDate: anExpirationDate.
	
	Cashier toCheckout: (cartsByID at: aCartID)
		     charging: clientCreditCard
		     throught: merchantProcessor
		     on: FixedGregorianDate today
		     registeringOn: Set new! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FR 11/30/2020 14:18:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FR 11/30/2020 14:18:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FR 11/30/2020 14:18:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FR 11/30/2020 14:18:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FR 11/30/2020 14:18:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FR 11/30/2020 14:18:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FR 11/30/2020 14:18:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FR 11/30/2020 14:18:23'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FR 11/30/2020 14:18:25'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FR 11/30/2020 14:18:25'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FR 11/30/2020 14:18:25'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FR 11/30/2020 14:18:25'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FR 11/30/2020 14:18:25'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FR 11/30/2020 14:18:25'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberCannotHaveLessThanSixteenDigits stamp: 'FR 11/30/2020 14:18:27'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNameCannotBeEmpty stamp: 'FR 11/30/2020 14:18:27'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberCannotHaveMoreThanSixteenDigits stamp: 'FR 11/30/2020 14:18:27'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithValidInfoIsCorrectlyCreated stamp: 'FR 11/30/2020 14:18:27'!
PASSED!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/30/2020 14:18:29'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/30/2020 14:18:30'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/30/2020 14:18:30'!
ERROR!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/30/2020 14:18:30'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/30/2020 14:18:30'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/30/2020 14:18:30'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/30/2020 14:18:30'!
ERROR!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/30/2020 14:18:30'!
ERROR!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/30/2020 14:18:30'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/30/2020 14:18:30'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/30/2020 14:18:30'!
FAILURE!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/30/2020 14:18:30'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/30/2020 14:18:30'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/30/2020 14:18:30'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 11/30/2020 14:18:30'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 11/30/2020 14:18:30'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 11/30/2020 14:18:30'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 11/30/2020 14:18:30'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/30/2020 14:18:32'!
ERROR!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/30/2020 14:19:44'!
ERROR!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/30/2020 14:19:55'!
ERROR!
!XXX methodsFor: 'listing' stamp: 'FR 11/30/2020 14:20:11' prior: 51213956!
listCart: aCartID
	
	self assertCartIDIsValid: aCartID.
	
	^ (cartsByID at: aCartID) books asBag! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 11/30/2020 14:20:15'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 11/30/2020 14:20:15'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 11/30/2020 14:20:15'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 11/30/2020 14:20:15'!
PASSED!

!testRun: #XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 11/30/2020 14:20:15'!
PASSED!

!testRun: #XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 11/30/2020 14:20:16'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 11/30/2020 14:20:16'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 11/30/2020 14:20:16'!
PASSED!

!testRun: #XXXTest #test09CannotAddZeroBooks stamp: 'FR 11/30/2020 14:20:16'!
PASSED!

!testRun: #XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 11/30/2020 14:20:16'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 11/30/2020 14:20:16'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 11/30/2020 14:20:16'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 11/30/2020 14:20:16'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 11/30/2020 14:20:16'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 11/30/2020 14:20:16'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 11/30/2020 14:20:16'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 11/30/2020 14:20:16'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 11/30/2020 14:20:16'!
PASSED!

----STARTUP---- (30 November 2020 23:39:15) as E:\!!NUEVO\Programas\CuisUniversity\v4383.1\CuisUniversity-4383.image!


----End fileIn of E:\!!NUEVO\Programas\CuisUniversity\v4383.1\TusLibrosLunesTerceraIteraciÔøΩnPostRefactor.st----!

----STARTUP---- (1 December 2020 12:30:56) as E:\!!NUEVO\Programas\CuisUniversity\v4383.1\CuisUniversity-4383.image!


----End fileIn of E:\!!NUEVO\Programas\CuisUniversity\v4383.1\TusLibrosLunesTerceraIteraciÔøΩnPostRefactor.st----!

!methodRemoval: XXXTest #test05CannotAddABookThatIsNotSoldByThisPublisher stamp: 'FR 12/1/2020 16:54:12'!
test05CannotAddABookThatIsNotSoldByThisPublisher

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.
				
	self  should: [
			anXXX add: 1
				    of: testObjectsFactory aBookNotSoldByPublisher 
				    toCart: aCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX bookNotForSaleErrorDescription!

!methodRemoval: XXXTest #test06CannotAddANegativeAmountOfBooks stamp: 'FR 12/1/2020 16:54:15'!
test06CannotAddANegativeAmountOfBooks

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.
				
	self  should: [
			anXXX add: -5
				    of: testObjectsFactory aBookSoldByPublisher 
				    toCart: aCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidAmountErrorDescription!

!methodRemoval: XXXTest #test09CannotAddZeroBooks stamp: 'FR 12/1/2020 16:54:27'!
test09CannotAddZeroBooks

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.
				
	self  should: [
			anXXX add: 0
				    of: testObjectsFactory aBookSoldByPublisher 
				    toCart: aCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidAmountErrorDescription!

!methodRemoval: XXXTest #test10CannotAddANonIntegerAmountOfBooks stamp: 'FR 12/1/2020 16:54:28'!
test10CannotAddANonIntegerAmountOfBooks

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.
				
	self  should: [
			anXXX add: 0.5
				    of: testObjectsFactory aBookSoldByPublisher 
				    toCart: aCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidAmountErrorDescription!
!XXXTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/1/2020 17:32:31'!
test19PurchaseListForClientThatNeverCreatedCartIsEmpty

	|anXXX |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.
	
	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID withPassword: testObjectsFactory aCorrectPassword) 
		equals: testObjectsFactory anEmptyBag.! !
!XXXTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/1/2020 17:32:38' prior: 51217059!
test19PurchaseListForClientThatNeverCreatedCartIsEmpty

	| anXXX |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.
	
	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID withPassword: testObjectsFactory aCorrectPassword) 
		equals: testObjectsFactory anEmptyBag.! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 17:32:41'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 17:32:41'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 17:32:41'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 17:32:41'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 17:32:42'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 17:32:42'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 17:32:42'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 17:32:42'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 17:32:42'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 17:32:42'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 17:32:42'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 17:32:42'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 17:32:42'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 17:32:42'!
PASSED!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 17:32:42'!
ERROR!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 17:32:42'!
ERROR!
!XXX methodsFor: 'private - other' stamp: 'FR 12/1/2020 17:38:46' prior: 51216924!
purchasesFrom: aClientID
	
	| purchasesList |
		
	purchasesList := Bag new.
	
	(cartIDsByClientID includesKey: aClientID) ifTrue: [
		(cartIDsByClientID at: aClientID) do: [ :aCartID | purchasesList addAll: (cartsByID at: aCartID) books]
	].
	
	^ purchasesList! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 17:38:48'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 17:38:48'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 17:38:48'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 17:38:48'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 17:38:48'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 17:38:48'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 17:38:48'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 17:38:48'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 17:38:48'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 17:38:48'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 17:38:48'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 17:38:48'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 17:38:49'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 17:38:49'!
PASSED!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 17:38:49'!
ERROR!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 17:38:49'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'bags' stamp: 'FR 12/1/2020 17:38:55'!
anEmptyBag
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'bags' stamp: 'FR 12/1/2020 17:39:03' prior: 51217202!
anEmptyBag

	^ Bag new! !

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 17:39:04'!
PASSED!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 17:39:06'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 17:39:06'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 17:39:07'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 17:39:07'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 17:39:07'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 17:39:07'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 17:39:07'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 17:39:07'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 17:39:07'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 17:39:07'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 17:39:07'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 17:39:07'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 17:39:07'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 17:39:07'!
PASSED!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 17:39:07'!
PASSED!
!XXXTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/1/2020 18:10:34'!
test20PurchaseListOnlyShowsCheckedOutItems

	|anXXX aCartID |
	
	authenticatorBehavior := [].
	anXXX := XXX withAuthenticator: self andCatalog: testObjectsFactory aCatalog.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
			
	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID withPassword: testObjectsFactory aCorrectPassword) 
		equals: testObjectsFactory anEmptyBag.! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 18:10:37'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 18:10:38'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 18:10:38'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 18:10:38'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 18:10:38'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 18:10:38'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 18:10:38'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 18:10:38'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 18:10:38'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 18:10:38'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 18:10:38'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 18:10:38'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 18:10:38'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 18:10:38'!
PASSED!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 18:10:38'!
PASSED!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 18:10:38'!
FAILURE!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 18:10:38'!
FAILURE!

!classDefinition: #XXX category: 'TusLibros' stamp: 'FR 12/1/2020 18:36:28'!
Object subclass: #XXX
	instanceVariableNames: 'authenticator currentCartID catalog cartsByID activeCartIDsByClientID merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 18:36:29' prior: 51216819!
initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog

	authenticator := anAuthenticator.
	catalog := aCatalog.
	currentCartID := 0.
	cartsByID := Dictionary new.
	activeCartIDsByClientID := Dictionary new.
	merchantProcessor := MerchantProcessorSimulator successfulValidation.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 18:36:29' prior: 51217139!
purchasesFrom: aClientID
	
	| purchasesList |
		
	purchasesList := Bag new.
	
	(activeCartIDsByClientID includesKey: aClientID) ifTrue: [
		(activeCartIDsByClientID at: aClientID) do: [ :aCartID | purchasesList addAll: (cartsByID at: aCartID) books]
	].
	
	^ purchasesList! !
!XXX methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 18:36:29' prior: 51216892!
createCartFor: aClientID
	
	currentCartID := currentCartID + 1.	
	
	cartsByID at: currentCartID put: (Cart acceptingItemsOf: catalog).
	
	(activeCartIDsByClientID includesKey: aClientID) ifFalse: [ activeCartIDsByClientID at: aClientID put: Set new ].
	(activeCartIDsByClientID at: aClientID) add: currentCartID.	! !

!classDefinition: #XXX category: 'TusLibros' stamp: 'FR 12/1/2020 18:37:15'!
Object subclass: #XXX
	instanceVariableNames: 'authenticator currentCartID catalog cartsByID activeCartIDsByClientID merchantProcessor inactiveCartIDsByClientID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'initialization' stamp: 'FR 12/1/2020 18:37:13' prior: 51217348!
initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog

	authenticator := anAuthenticator.
	catalog := aCatalog.
	currentCartID := 0.
	cartsByID := Dictionary new.
	activeCartIDsByClientID := Dictionary new.
	inactiveCartIDsByClientID := Dictionary new.
	merchantProcessor := MerchantProcessorSimulator successfulValidation.! !

!classDefinition: #XXX category: 'TusLibros' stamp: 'FR 12/1/2020 19:18:23'!
Object subclass: #XXX
	instanceVariableNames: 'authenticator currentCartID catalog activeCartsByID activeCartIDsByClientID merchantProcessor inactiveCartIDsByClientID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 19:18:23' prior: 51216858!
assertCartIDIsValid: aCartID

	^ (activeCartsByID includesKey: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ]! !
!XXX methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 19:18:23' prior: 51217360!
purchasesFrom: aClientID
	
	| purchasesList |
		
	purchasesList := Bag new.
	
	(activeCartIDsByClientID includesKey: aClientID) ifTrue: [
		(activeCartIDsByClientID at: aClientID) do: [ :aCartID | purchasesList addAll: (activeCartsByID at: aCartID) books]
	].
	
	^ purchasesList! !
!XXX methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 19:18:23' prior: 51216838!
listCart: aCartID
	
	self assertCartIDIsValid: aCartID.
	
	^ (activeCartsByID at: aCartID) books asBag! !
!XXX methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 19:18:23' prior: 51217395!
initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog

	authenticator := anAuthenticator.
	catalog := aCatalog.
	currentCartID := 0.
	activeCartsByID := Dictionary new.
	activeCartIDsByClientID := Dictionary new.
	inactiveCartIDsByClientID := Dictionary new.
	merchantProcessor := MerchantProcessorSimulator successfulValidation.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 19:18:23' prior: 51216874!
checkout: aCartID withCreditCard: aCreditCardNumber expiring: anExpirationDate withOwner: anOwnerName 
	
	| clientCreditCard |
	
	self assertCartIDIsValid: aCartID.
	
	clientCreditCard := self createCreditCardWithOwner: anOwnerName
					     number: aCreditCardNumber
					     andExpirationDate: anExpirationDate.
	
	Cashier toCheckout: (activeCartsByID at: aCartID)
		     charging: clientCreditCard
		     throught: merchantProcessor
		     on: FixedGregorianDate today
		     registeringOn: Set new! !
!XXX methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 19:18:23' prior: 51217372!
createCartFor: aClientID
	
	currentCartID := currentCartID + 1.	
	
	activeCartsByID at: currentCartID put: (Cart acceptingItemsOf: catalog).
	
	(activeCartIDsByClientID includesKey: aClientID) ifFalse: [ activeCartIDsByClientID at: aClientID put: Set new ].
	(activeCartIDsByClientID at: aClientID) add: currentCartID.	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 19:18:23' prior: 51216865!
add: anAmount of: aBook toCart: aCartID

	self assertCartIDIsValid: aCartID.
	self assertBookIsForSale: aBook.
	
	self assertAmountIsValid: anAmount.
	
	(activeCartsByID at: aCartID) add: anAmount of: aBook! !

!classDefinition: #XXX category: 'TusLibros' stamp: 'FR 12/1/2020 19:19:18'!
Object subclass: #XXX
	instanceVariableNames: 'authenticator currentCartID catalog activeCartsByID activeCartIDsByClientID merchantProcessor inactiveCartIDsByClientID clientIDByActiveCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'initialization' stamp: 'FR 12/1/2020 19:19:17' prior: 51217446!
initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog

	authenticator := anAuthenticator.
	catalog := aCatalog.
	
	currentCartID := 0.
	activeCartsByID := Dictionary new.
	activeCartIDsByClientID := Dictionary new.
	clientIDByActiveCartID := Dictionary new.
	merchantProcessor := MerchantProcessorSimulator successfulValidation.! !
!XXX methodsFor: 'private - other' stamp: 'FR 12/1/2020 19:49:45' prior: 51217479!
createCartFor: aClientID
	
	currentCartID := currentCartID + 1.	
	
	activeCartsByID at: currentCartID put: (Cart acceptingItemsOf: catalog).
	
	clientIDByActiveCartID at: currentCartID put: aClientID.
	
	activeCartIDsByClientID at: aClientID ifAbsent: Set new.
	(activeCartIDsByClientID at: aClientID) add: currentCartID.	
! !

!classDefinition: #XXX category: 'TusLibros' stamp: 'FR 12/1/2020 19:58:58'!
Object subclass: #XXX
	instanceVariableNames: 'authenticator currentCartID catalog activeCartsByID activeCartIDsByClientID merchantProcessor inactiveCartIDsByClientID clientIDByActiveCartID booksByClientID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'checkout' stamp: 'FR 12/1/2020 19:58:56' prior: 51217460!
checkout: aCartID withCreditCard: aCreditCardNumber expiring: anExpirationDate withOwner: anOwnerName 
	
	| clientCreditCard clientIDForThisCart |
	
	self assertCartIDIsValid: aCartID.
	
	clientCreditCard := self createCreditCardWithOwner: anOwnerName
					     number: aCreditCardNumber
					     andExpirationDate: anExpirationDate.
	
	Cashier toCheckout: (activeCartsByID at: aCartID)
		     charging: clientCreditCard
		     throught: merchantProcessor
		     on: FixedGregorianDate today
		     registeringOn: Set new.
	
	activeCartsByID removeKey: aCartID.
	
	clientIDForThisCart := clientIDByActiveCartID at: aCartID.
	
	booksByClientID at: clientIDForThisCart ifAbsentPut: Bag new.
	(booksByClientID at: clientIDForThisCart) addAll: (activeCartsByID at: aCartID) books.! !
!XXX methodsFor: 'initialization' stamp: 'FR 12/1/2020 19:59:18' prior: 51217512!
initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog

	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := MerchantProcessorSimulator successfulValidation.
	
	currentCartID := 0.
	activeCartsByID := Dictionary new.
	activeCartIDsByClientID := Dictionary new.
	clientIDByActiveCartID := Dictionary new.
	booksByClientID := Dictionary new.
	
! !
!XXX methodsFor: 'initialization' stamp: 'FR 12/1/2020 20:01:12' prior: 51217577!
initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog

	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := MerchantProcessorSimulator successfulValidation.
	
	currentCartID := 0.
	activeCartsByID := Dictionary new.
	clientIDByActiveCartID := Dictionary new.
	booksByClientID := Dictionary new.
	
! !
!XXX methodsFor: 'checkout' stamp: 'FR 12/1/2020 20:02:17' prior: 51217550!
checkout: aCartID withCreditCard: aCreditCardNumber expiring: anExpirationDate withOwner: anOwnerName 
	
	| clientCreditCard clientIDForThisCart |
	
	self assertCartIDIsValid: aCartID.
	
	clientCreditCard := self createCreditCardWithOwner: anOwnerName
					     number: aCreditCardNumber
					     andExpirationDate: anExpirationDate.
	
	Cashier toCheckout: (activeCartsByID at: aCartID)
		     charging: clientCreditCard
		     throught: merchantProcessor
		     on: FixedGregorianDate today
		     registeringOn: Set new.
	
	activeCartsByID removeKey: aCartID.
	
	clientIDForThisCart := clientIDByActiveCartID at: aCartID.
	
	booksByClientID at: clientIDForThisCart ifAbsentPut: Bag new.
	(booksByClientID at: clientIDForThisCart) addAll: (activeCartsByID at: aCartID) books.
	
	activeCartIDsByClientID removeKey: clientIDForThisCart.! !
!XXX methodsFor: 'private - other' stamp: 'FR 12/1/2020 20:04:19' prior: 51217427!
purchasesFrom: aClientID
	
	^ booksByClientID at: aClientID! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 20:04:23'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 20:04:23'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:04:23'!
ERROR!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 20:04:23'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 20:04:24'!
ERROR!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 20:04:24'!
ERROR!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 20:04:24'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 20:04:24'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 20:04:24'!
ERROR!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 20:04:24'!
ERROR!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 20:04:24'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 20:04:24'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 20:04:24'!
ERROR!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 20:04:24'!
ERROR!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:04:24'!
ERROR!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 20:04:24'!
ERROR!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:04:26'!
ERROR!
!XXX methodsFor: 'initialization' stamp: 'FR 12/1/2020 20:04:52' prior: 51217592!
initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog

	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := MerchantProcessorSimulator successfulValidation.
	
	currentCartID := 0.
	activeCartsByID := Dictionary new.
	activeCartIDsByClientID := Dictionary new.
	clientIDByActiveCartID := Dictionary new.
	booksByClientID := Dictionary new.! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 20:04:53'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 20:04:53'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:04:54'!
ERROR!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 20:04:54'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 20:04:54'!
ERROR!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 20:04:54'!
ERROR!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 20:04:54'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 20:04:54'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 20:04:54'!
ERROR!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 20:04:54'!
ERROR!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 20:04:54'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 20:04:54'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 20:04:54'!
ERROR!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 20:04:54'!
ERROR!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:04:54'!
ERROR!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 20:04:54'!
ERROR!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:04:55'!
ERROR!
!XXX methodsFor: 'private - other' stamp: 'FR 12/1/2020 20:05:12' prior: 51217526!
createCartFor: aClientID
	
	currentCartID := currentCartID + 1.	
	
	activeCartsByID at: currentCartID put: (Cart acceptingItemsOf: catalog).
	
	clientIDByActiveCartID at: currentCartID put: aClientID.
	
	activeCartIDsByClientID at: aClientID ifAbsentPut: Set new.
	(activeCartIDsByClientID at: aClientID) add: currentCartID.	
! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 20:05:17'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 20:05:18'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:05:18'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 20:05:18'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 20:05:18'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 20:05:18'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 20:05:18'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 20:05:18'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 20:05:18'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 20:05:18'!
ERROR!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 20:05:18'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 20:05:18'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 20:05:18'!
ERROR!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 20:05:18'!
ERROR!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:05:18'!
ERROR!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 20:05:18'!
ERROR!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 20:05:19'!
ERROR!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 20:06:51'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 20:06:52'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:06:52'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 20:06:52'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 20:06:52'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 20:06:52'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 20:06:52'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 20:06:52'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 20:06:52'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 20:06:52'!
ERROR!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 20:06:52'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 20:06:52'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 20:06:52'!
ERROR!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 20:06:52'!
ERROR!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:06:52'!
ERROR!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 20:06:52'!
ERROR!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 20:06:53'!
ERROR!
!XXX methodsFor: 'checkout' stamp: 'FR 12/1/2020 20:12:19' prior: 51217605!
checkout: aCartID withCreditCard: aCreditCardNumber expiring: anExpirationDate withOwner: anOwnerName 
	
	| clientCreditCard clientIDForThisCart |
	
	self assertCartIDIsValid: aCartID.
	
	clientCreditCard := self createCreditCardWithOwner: anOwnerName
					     number: aCreditCardNumber
					     andExpirationDate: anExpirationDate.
	
	Cashier toCheckout: (activeCartsByID at: aCartID)
		     charging: clientCreditCard
		     throught: merchantProcessor
		     on: FixedGregorianDate today
		     registeringOn: Set new.
	
	
	clientIDForThisCart := clientIDByActiveCartID at: aCartID.
	
	booksByClientID at: clientIDForThisCart ifAbsentPut: Bag new.
	(booksByClientID at: clientIDForThisCart) addAll: (activeCartsByID at: aCartID) books.
	
	activeCartsByID removeKey: aCartID.
	activeCartIDsByClientID removeKey: clientIDForThisCart.! !

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 20:12:27'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 20:12:28'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 20:12:29'!
PASSED!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:12:29'!
ERROR!
!XXX methodsFor: 'private - other' stamp: 'FR 12/1/2020 20:13:25' prior: 51217634!
purchasesFrom: aClientID
	
	^ booksByClientID at: aClientID ifAbsent: [ ^ Bag new ]! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 20:13:26'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 20:13:26'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:13:26'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 20:13:26'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 20:13:26'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 20:13:26'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 20:13:26'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 20:13:27'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 20:13:27'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 20:13:27'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 20:13:27'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 20:13:27'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 20:13:27'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 20:13:27'!
PASSED!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:13:27'!
PASSED!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 20:13:27'!
PASSED!

!classDefinition: #Clock category: 'TusLibros' stamp: 'FR 12/1/2020 20:24:08'!
Object subclass: #Clock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXXTest methodsFor: 'tests - timeout' stamp: 'FR 12/1/2020 20:26:44'!
test21CannotAddToCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
	
	authenticatorBehavior := [].
	
	anXXX := XXX withAuthenticator: self
				catalog: testObjectsFactory aCatalog
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [anXXX add: 1
					 of: testObjectsFactory aBookSoldByPublisher
					 toCart: aCartID
		]
		raise:  testObjectsFactory functionalError
		withMessageText: XXX timeoutErrorDescription! !
!XXX class methodsFor: 'error descriptions' stamp: 'FR 12/1/2020 20:27:11'!
timeoutErrorDescription

	^ 'Cart has timed out'! !
!XXX class methodsFor: 'error descriptions' stamp: 'FR 12/1/2020 20:27:13' prior: 51218014!
timeoutErrorDescription

	^ 'Cart has timed out!!'! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 20:27:22'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 20:27:22'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:27:22'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 20:27:22'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 20:27:22'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 20:27:22'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 20:27:22'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 20:27:22'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 20:27:22'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 20:27:22'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 20:27:22'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 20:27:22'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 20:27:22'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 20:27:22'!
PASSED!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:27:22'!
PASSED!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 20:27:22'!
PASSED!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 20:27:22'!
ERROR!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 20:27:22'!
ERROR!
!XXX class methodsFor: 'instance creation' stamp: 'FR 12/1/2020 20:27:42'!
withAuthenticator: anAuthenticator catalog: aCatalog 

	^self new initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:27:42' prior: 51216003!
test18PurchasesByMultipleClientAreListedCorrectly

	| anXXX aCartID anotherCartID expectedPurchases1 expectedPurchases2 |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	expectedPurchases1 := Bag new.
	expectedPurchases1 add: testObjectsFactory aBookSoldByPublisher.

	expectedPurchases2 := Bag new.
	expectedPurchases2 add: testObjectsFactory anotherBookSoldByPublisher 
				         withOccurrences: 4.

	self assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases1.
	self assert: (anXXX listPurchasesFor: testObjectsFactory anotherValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases2! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:27:42' prior: 51217073!
test19PurchaseListForClientThatNeverCreatedCartIsEmpty

	| anXXX |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog.
	
	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID withPassword: testObjectsFactory aCorrectPassword) 
		equals: testObjectsFactory anEmptyBag.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:27:42' prior: 51216073!
test04CannotAddToCartWithInvalidCartID

	| anXXX |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog.
	
	self  should: [ anXXX add: 1
					   of: testObjectsFactory aBookSoldByPublisher
					   toCart: testObjectsFactory anInvalidCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidCartIDErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:27:42' prior: 51216203!
test01CannotCreateCartWithInvalidID

	| anXXX |
	
	authenticatorBehavior := [ self error: XXX invalidClientIDErrorDescription ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog.
	
	self  should: [
			anXXX createCartForClientWithID: testObjectsFactory anInvalidClientID 
				    andPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidClientIDErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:27:42' prior: 51216306!
test14SuccessfulCheckoutIsDoneCorrectly

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
					withPassword: testObjectsFactory aCorrectPassword)
		equals: (Bag with: testObjectsFactory aBookSoldByPublisher)! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:27:42' prior: 51217263!
test20PurchaseListOnlyShowsCheckedOutItems

	|anXXX aCartID |
	
	authenticatorBehavior := [].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
			
	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID withPassword: testObjectsFactory aCorrectPassword) 
		equals: testObjectsFactory anEmptyBag.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:27:42' prior: 51216060!
test11CannotListWithInvalidCartID

	| anXXX |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog.
	
	self  should: [
			anXXX listCart: testObjectsFactory anInvalidCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidCartIDErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:27:42' prior: 51215919!
test15CannotListPurchasesForInvalidClientID

	| anXXX |
	
	authenticatorBehavior := [ self error: XXX invalidClientIDErrorDescription ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog.

	self  should: [ anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
					  withPassword: testObjectsFactory aCorrectPassword ]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidClientIDErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:27:42' prior: 51216127!
test07BookIsAddedSuccessfully

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  assert: (anXXX listCart: aCartID) 
		equals: (Bag with: testObjectsFactory aBookSoldByPublisher)! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:27:43' prior: 51216220!
test02CannotCreateCartWithIncorrectPassword

	| anXXX |
	
	authenticatorBehavior := [ self error: XXX incorrectPasswordErrorDescription ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog.
	
	self  should: [
			anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
				    andPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX incorrectPasswordErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:27:43' prior: 51216281!
test13CannotCheckOutWithInvalidCreditCard

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  should: [anXXX checkout: aCartID 
					  withCreditCard: testObjectsFactory anInvalidCreditCardNumber
					  expiring: testObjectsFactory aNonExpiredDate
					  withOwner: testObjectsFactory aValidOwnerName ]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidCreditCardErrorDescription.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:27:43' prior: 51216145!
test08MultipleBooksAreAddedSuccessfully

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 5
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  assert: (anXXX listCart: aCartID) 
		equals: (Bag new add: testObjectsFactory aBookSoldByPublisher withOccurrences: 5; yourself)! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:27:43' prior: 51216262!
test12CannotCheckOutWithInvalidCartID

	| anXXX |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog.
	
	self  should: [ anXXX checkout: testObjectsFactory anInvalidCartID
					  withCreditCard: testObjectsFactory aValidCreditCardNumber
					  expiring: testObjectsFactory aNonExpiredDate
					  withOwner: testObjectsFactory aValidOwnerName
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidCartIDErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:27:43' prior: 51216238!
test03SuccessfulyCreatedCartIsEmpty

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
				     andPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (anXXX listCart: aCartID) isEmpty! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:27:43' prior: 51215954!
test17MultiplePurchasesBySameClientAreListedCorrectly

	| anXXX aCartID anotherCartID expectedPurchases |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	expectedPurchases := Bag new.
	expectedPurchases add: testObjectsFactory aBookSoldByPublisher.
	expectedPurchases add: testObjectsFactory anotherBookSoldByPublisher 
				       withOccurrences: 4.

	self assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:27:43' prior: 51215936!
test16CannotListPurchasesForClientWithIncorrectPassword

	| anXXX |
	
	authenticatorBehavior := [ self error: XXX incorrectPasswordErrorDescription ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog.

	self  should: [ anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
					  withPassword: testObjectsFactory anIncorrectPassword ]
		raise: testObjectsFactory functionalError
		withMessageText: XXX incorrectPasswordErrorDescription! !

!methodRemoval: XXX class #withAuthenticator:andCatalog: stamp: 'FR 12/1/2020 20:27:43'!
withAuthenticator: anAuthenticator andCatalog: aCatalog 

	^self new initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog!
!XXX class methodsFor: 'instance creation' stamp: 'FR 12/1/2020 20:28:26'!
withAuthenticator: anAuthenticator catalog: aCatalog andClock: aClock  

	^self new initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:28:26' prior: 51218194!
test14SuccessfulCheckoutIsDoneCorrectly

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
					withPassword: testObjectsFactory aCorrectPassword)
		equals: (Bag with: testObjectsFactory aBookSoldByPublisher)! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:28:26' prior: 51218392!
test17MultiplePurchasesBySameClientAreListedCorrectly

	| anXXX aCartID anotherCartID expectedPurchases |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	expectedPurchases := Bag new.
	expectedPurchases add: testObjectsFactory aBookSoldByPublisher.
	expectedPurchases add: testObjectsFactory anotherBookSoldByPublisher 
				       withOccurrences: 4.

	self assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:28:26' prior: 51218377!
test03SuccessfulyCreatedCartIsEmpty

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
				     andPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (anXXX listCart: aCartID) isEmpty! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:28:26' prior: 51218176!
test01CannotCreateCartWithInvalidID

	| anXXX |
	
	authenticatorBehavior := [ self error: XXX invalidClientIDErrorDescription ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog andClock: Clock new.
	
	self  should: [
			anXXX createCartForClientWithID: testObjectsFactory anInvalidClientID 
				    andPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidClientIDErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:28:26' prior: 51218257!
test15CannotListPurchasesForInvalidClientID

	| anXXX |
	
	authenticatorBehavior := [ self error: XXX invalidClientIDErrorDescription ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog andClock: Clock new.

	self  should: [ anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
					  withPassword: testObjectsFactory aCorrectPassword ]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidClientIDErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:28:26' prior: 51218441!
test16CannotListPurchasesForClientWithIncorrectPassword

	| anXXX |
	
	authenticatorBehavior := [ self error: XXX incorrectPasswordErrorDescription ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog andClock: Clock new.

	self  should: [ anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
					  withPassword: testObjectsFactory anIncorrectPassword ]
		raise: testObjectsFactory functionalError
		withMessageText: XXX incorrectPasswordErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:28:26' prior: 51218275!
test07BookIsAddedSuccessfully

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  assert: (anXXX listCart: aCartID) 
		equals: (Bag with: testObjectsFactory aBookSoldByPublisher)! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:28:27' prior: 51218358!
test12CannotCheckOutWithInvalidCartID

	| anXXX |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog andClock: Clock new.
	
	self  should: [ anXXX checkout: testObjectsFactory anInvalidCartID
					  withCreditCard: testObjectsFactory aValidCreditCardNumber
					  expiring: testObjectsFactory aNonExpiredDate
					  withOwner: testObjectsFactory aValidOwnerName
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidCartIDErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:28:27' prior: 51218338!
test08MultipleBooksAreAddedSuccessfully

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 5
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  assert: (anXXX listCart: aCartID) 
		equals: (Bag new add: testObjectsFactory aBookSoldByPublisher withOccurrences: 5; yourself)! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:28:27' prior: 51218146!
test19PurchaseListForClientThatNeverCreatedCartIsEmpty

	| anXXX |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog andClock: Clock new.
	
	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID withPassword: testObjectsFactory aCorrectPassword) 
		equals: testObjectsFactory anEmptyBag.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:28:27' prior: 51218222!
test20PurchaseListOnlyShowsCheckedOutItems

	|anXXX aCartID |
	
	authenticatorBehavior := [].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
			
	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID withPassword: testObjectsFactory aCorrectPassword) 
		equals: testObjectsFactory anEmptyBag.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:28:27' prior: 51218312!
test13CannotCheckOutWithInvalidCreditCard

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  should: [anXXX checkout: aCartID 
					  withCreditCard: testObjectsFactory anInvalidCreditCardNumber
					  expiring: testObjectsFactory aNonExpiredDate
					  withOwner: testObjectsFactory aValidOwnerName ]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidCreditCardErrorDescription.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:28:27' prior: 51218160!
test04CannotAddToCartWithInvalidCartID

	| anXXX |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog andClock: Clock new.
	
	self  should: [ anXXX add: 1
					   of: testObjectsFactory aBookSoldByPublisher
					   toCart: testObjectsFactory anInvalidCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidCartIDErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:28:27' prior: 51218089!
test18PurchasesByMultipleClientAreListedCorrectly

	| anXXX aCartID anotherCartID expectedPurchases1 expectedPurchases2 |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	expectedPurchases1 := Bag new.
	expectedPurchases1 add: testObjectsFactory aBookSoldByPublisher.

	expectedPurchases2 := Bag new.
	expectedPurchases2 add: testObjectsFactory anotherBookSoldByPublisher 
				         withOccurrences: 4.

	self assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases1.
	self assert: (anXXX listPurchasesFor: testObjectsFactory anotherValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases2! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:28:27' prior: 51218294!
test02CannotCreateCartWithIncorrectPassword

	| anXXX |
	
	authenticatorBehavior := [ self error: XXX incorrectPasswordErrorDescription ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog andClock: Clock new.
	
	self  should: [
			anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
				    andPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX incorrectPasswordErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:28:27' prior: 51218243!
test11CannotListWithInvalidCartID

	| anXXX |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog andClock: Clock new.
	
	self  should: [
			anXXX listCart: testObjectsFactory anInvalidCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidCartIDErrorDescription! !

!methodRemoval: XXX class #withAuthenticator:catalog: stamp: 'FR 12/1/2020 20:28:27'!
withAuthenticator: anAuthenticator catalog: aCatalog 

	^self new initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 20:28:30'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 20:28:30'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:28:30'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 20:28:30'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 20:28:30'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 20:28:30'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 20:28:30'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 20:28:31'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 20:28:31'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 20:28:31'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 20:28:31'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 20:28:31'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 20:28:31'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 20:28:31'!
PASSED!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:28:31'!
PASSED!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 20:28:31'!
PASSED!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 20:28:31'!
ERROR!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 20:28:31'!
ERROR!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 20:28:38'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 20:28:38'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:28:38'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 20:28:38'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 20:28:38'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 20:28:38'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 20:28:38'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 20:28:38'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 20:28:38'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 20:28:38'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 20:28:38'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 20:28:38'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 20:28:38'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 20:28:38'!
PASSED!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:28:38'!
PASSED!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 20:28:38'!
PASSED!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 20:28:38'!
ERROR!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 20:28:39'!
ERROR!
!Clock methodsFor: 'jumping' stamp: 'FR 12/1/2020 20:28:53'!
jumpAheadMinutes: aSmallInteger 
	self shouldBeImplemented.! !

!classDefinition: #Clock category: 'TusLibros' stamp: 'FR 12/1/2020 20:29:24'!
Object subclass: #Clock
	instanceVariableNames: 'timeOffset'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Clock methodsFor: 'jumping' stamp: 'FR 12/1/2020 20:29:23' prior: 51218975!
jumpAheadMinutes: anAmountOfMinutes

	timeOffset := timeOffset + anAmountOfMinutes.	! !

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 20:29:26'!
ERROR!
!Clock methodsFor: 'initialization' stamp: 'FR 12/1/2020 20:29:58' overrides: 16896425!
initialize

	timeOffset := 0*minute! !
!Clock methodsFor: 'jumping' stamp: 'FR 12/1/2020 20:30:05' prior: 51218986!
jumpAheadMinutes: anAmountOfMinutes

	timeOffset := timeOffset + anAmountOfMinutes*minute.	! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 20:30:07'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 20:30:08'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:30:08'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 20:30:08'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 20:30:08'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 20:30:08'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 20:30:08'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 20:30:08'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 20:30:08'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 20:30:08'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 20:30:08'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 20:30:08'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 20:30:08'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 20:30:08'!
PASSED!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:30:08'!
PASSED!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 20:30:08'!
PASSED!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 20:30:08'!
FAILURE!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 20:30:08'!
FAILURE!
!XXX methodsFor: 'initialization' stamp: 'FR 12/1/2020 20:32:31'!
initializeWithAuthenticator: anAuthenticator catalog: aCatalog

	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := MerchantProcessorSimulator successfulValidation.
	
	currentCartID := 0.
	activeCartsByID := Dictionary new.
	activeCartIDsByClientID := Dictionary new.
	clientIDByActiveCartID := Dictionary new.
	booksByClientID := Dictionary new.! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:32:31' prior: 51218466!
withAuthenticator: anAuthenticator catalog: aCatalog andClock: aClock  

	^self new initializeWithAuthenticator: anAuthenticator catalog: aCatalog! !

!methodRemoval: XXX #initializeWithAuthenticator:andCatalog: stamp: 'FR 12/1/2020 20:32:32'!
initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog

	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := MerchantProcessorSimulator successfulValidation.
	
	currentCartID := 0.
	activeCartsByID := Dictionary new.
	activeCartIDsByClientID := Dictionary new.
	clientIDByActiveCartID := Dictionary new.
	booksByClientID := Dictionary new.!
!XXX methodsFor: 'initialization' stamp: 'FR 12/1/2020 20:32:57'!
initializeWithAuthenticator: anAuthenticator catalog: aCatalog andClock: aClock 

	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := MerchantProcessorSimulator successfulValidation.
	
	currentCartID := 0.
	activeCartsByID := Dictionary new.
	activeCartIDsByClientID := Dictionary new.
	clientIDByActiveCartID := Dictionary new.
	booksByClientID := Dictionary new.! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:32:57' prior: 51219077!
withAuthenticator: anAuthenticator catalog: aCatalog andClock: aClock  

	^self new initializeWithAuthenticator: anAuthenticator catalog: aCatalog andClock: aClock! !

!methodRemoval: XXX #initializeWithAuthenticator:catalog: stamp: 'FR 12/1/2020 20:32:57'!
initializeWithAuthenticator: anAuthenticator catalog: aCatalog

	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := MerchantProcessorSimulator successfulValidation.
	
	currentCartID := 0.
	activeCartsByID := Dictionary new.
	activeCartIDsByClientID := Dictionary new.
	clientIDByActiveCartID := Dictionary new.
	booksByClientID := Dictionary new.!

!classDefinition: #XXX category: 'TusLibros' stamp: 'FR 12/1/2020 20:33:13'!
Object subclass: #XXX
	instanceVariableNames: 'authenticator currentCartID catalog activeCartsByID activeCartIDsByClientID merchantProcessor inactiveCartIDsByClientID clientIDByActiveCartID booksByClientID clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'initialization' stamp: 'FR 12/1/2020 20:33:13' prior: 51219099!
initializeWithAuthenticator: anAuthenticator catalog: aCatalog andClock: aClock 

	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := MerchantProcessorSimulator successfulValidation.
	clock := aClock.
	
	currentCartID := 0.
	activeCartsByID := Dictionary new.
	activeCartIDsByClientID := Dictionary new.
	clientIDByActiveCartID := Dictionary new.
	booksByClientID := Dictionary new.! !

!classDefinition: #XXX category: 'TusLibros' stamp: 'FR 12/1/2020 20:35:09'!
Object subclass: #XXX
	instanceVariableNames: 'authenticator currentCartID catalog activeCartsByID activeCartIDsByClientID merchantProcessor inactiveCartIDsByClientID clientIDByActiveCartID booksByClientID clock timestampByCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'private - other' stamp: 'FR 12/1/2020 20:35:08' prior: 51217763!
createCartFor: aClientID
	
	currentCartID := currentCartID + 1.	
	
	activeCartIDsByClientID at: aClientID ifAbsentPut: Set new.
	(activeCartIDsByClientID at: aClientID) add: currentCartID.	
	
	activeCartsByID at: currentCartID put: (Cart acceptingItemsOf: catalog).
	
	clientIDByActiveCartID at: currentCartID put: aClientID.
	
	timestampByCartID at: currentCartID put: clock now.
	

! !
!XXX methodsFor: 'initialization' stamp: 'FR 12/1/2020 20:35:18' prior: 51219149!
initializeWithAuthenticator: anAuthenticator catalog: aCatalog andClock: aClock 

	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := MerchantProcessorSimulator successfulValidation.
	clock := aClock.
	
	currentCartID := 0.
	activeCartsByID := Dictionary new.
	activeCartIDsByClientID := Dictionary new.
	clientIDByActiveCartID := Dictionary new.
	booksByClientID := Dictionary new.
	timestampByCartID := Dictionary new.! !

!classDefinition: #XXX category: 'TusLibros' stamp: 'FR 12/1/2020 20:35:28'!
Object subclass: #XXX
	instanceVariableNames: 'authenticator currentCartID catalog activeCartsByCartID activeCartIDsByClientID merchantProcessor inactiveCartIDsByClientID clientIDByActiveCartID booksByClientID clock timestampByCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:35:29' prior: 51217439!
listCart: aCartID
	
	self assertCartIDIsValid: aCartID.
	
	^ (activeCartsByCartID at: aCartID) books asBag! !
!XXX methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:35:29' prior: 51219192!
initializeWithAuthenticator: anAuthenticator catalog: aCatalog andClock: aClock 

	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := MerchantProcessorSimulator successfulValidation.
	clock := aClock.
	
	currentCartID := 0.
	activeCartsByCartID := Dictionary new.
	activeCartIDsByClientID := Dictionary new.
	clientIDByActiveCartID := Dictionary new.
	booksByClientID := Dictionary new.
	timestampByCartID := Dictionary new.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:35:29' prior: 51217492!
add: anAmount of: aBook toCart: aCartID

	self assertCartIDIsValid: aCartID.
	self assertBookIsForSale: aBook.
	
	self assertAmountIsValid: anAmount.
	
	(activeCartsByCartID at: aCartID) add: anAmount of: aBook! !
!XXX methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:35:30' prior: 51217886!
checkout: aCartID withCreditCard: aCreditCardNumber expiring: anExpirationDate withOwner: anOwnerName 
	
	| clientCreditCard clientIDForThisCart |
	
	self assertCartIDIsValid: aCartID.
	
	clientCreditCard := self createCreditCardWithOwner: anOwnerName
					     number: aCreditCardNumber
					     andExpirationDate: anExpirationDate.
	
	Cashier toCheckout: (activeCartsByCartID at: aCartID)
		     charging: clientCreditCard
		     throught: merchantProcessor
		     on: FixedGregorianDate today
		     registeringOn: Set new.
	
	
	clientIDForThisCart := clientIDByActiveCartID at: aCartID.
	
	booksByClientID at: clientIDForThisCart ifAbsentPut: Bag new.
	(booksByClientID at: clientIDForThisCart) addAll: (activeCartsByCartID at: aCartID) books.
	
	activeCartsByCartID removeKey: aCartID.
	activeCartIDsByClientID removeKey: clientIDForThisCart.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:35:31' prior: 51217419!
assertCartIDIsValid: aCartID

	^ (activeCartsByCartID includesKey: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ]! !
!XXX methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:35:32' prior: 51219177!
createCartFor: aClientID
	
	currentCartID := currentCartID + 1.	
	
	activeCartIDsByClientID at: aClientID ifAbsentPut: Set new.
	(activeCartIDsByClientID at: aClientID) add: currentCartID.	
	
	activeCartsByCartID at: currentCartID put: (Cart acceptingItemsOf: catalog).
	
	clientIDByActiveCartID at: currentCartID put: aClientID.
	
	timestampByCartID at: currentCartID put: clock now.
	

! !

!classDefinition: #XXX category: 'TusLibros' stamp: 'FR 12/1/2020 20:35:42'!
Object subclass: #XXX
	instanceVariableNames: 'authenticator currentCartID catalog activeCartsByCartID activeCartIDsByClientID merchantProcessor inactiveCartIDsByClientID clientIDByCartID booksByClientID clock timestampByCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:35:42' prior: 51219228!
initializeWithAuthenticator: anAuthenticator catalog: aCatalog andClock: aClock 

	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := MerchantProcessorSimulator successfulValidation.
	clock := aClock.
	
	currentCartID := 0.
	activeCartsByCartID := Dictionary new.
	activeCartIDsByClientID := Dictionary new.
	clientIDByCartID := Dictionary new.
	booksByClientID := Dictionary new.
	timestampByCartID := Dictionary new.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:35:42' prior: 51219255!
checkout: aCartID withCreditCard: aCreditCardNumber expiring: anExpirationDate withOwner: anOwnerName 
	
	| clientCreditCard clientIDForThisCart |
	
	self assertCartIDIsValid: aCartID.
	
	clientCreditCard := self createCreditCardWithOwner: anOwnerName
					     number: aCreditCardNumber
					     andExpirationDate: anExpirationDate.
	
	Cashier toCheckout: (activeCartsByCartID at: aCartID)
		     charging: clientCreditCard
		     throught: merchantProcessor
		     on: FixedGregorianDate today
		     registeringOn: Set new.
	
	
	clientIDForThisCart := clientIDByCartID at: aCartID.
	
	booksByClientID at: clientIDForThisCart ifAbsentPut: Bag new.
	(booksByClientID at: clientIDForThisCart) addAll: (activeCartsByCartID at: aCartID) books.
	
	activeCartsByCartID removeKey: aCartID.
	activeCartIDsByClientID removeKey: clientIDForThisCart.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 20:35:42' prior: 51219293!
createCartFor: aClientID
	
	currentCartID := currentCartID + 1.	
	
	activeCartIDsByClientID at: aClientID ifAbsentPut: Set new.
	(activeCartIDsByClientID at: aClientID) add: currentCartID.	
	
	activeCartsByCartID at: currentCartID put: (Cart acceptingItemsOf: catalog).
	
	clientIDByCartID at: currentCartID put: aClientID.
	
	timestampByCartID at: currentCartID put: clock now.
	

! !

!methodRemoval: XXX #assertAmountIsValid: stamp: 'FR 12/1/2020 20:36:45'!
assertAmountIsValid: anAmount

	^ (anAmount isInteger and: [ anAmount > 0 ]) ifFalse: [ self error: self class invalidAmountErrorDescription ]!

!methodRemoval: XXX #assertBookIsForSale: stamp: 'FR 12/1/2020 20:36:48'!
assertBookIsForSale: aBook

	^ (catalog includesKey: aBook) ifFalse: [ self error: self class bookNotForSaleErrorDescription ]!
!XXX methodsFor: 'adding' stamp: 'FR 12/1/2020 20:39:28' prior: 51219245!
add: anAmount of: aBook toCart: aCartID

	self assertCartIDIsValid: aCartID.
	
	(((timestampByCartID at: aCartID) distanceTo: clock now) >= 30*minute) ifTrue: [
		self error: self class timeoutErrorDescription
	].
	
	(activeCartsByCartID at: aCartID) add: anAmount of: aBook! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 20:39:30'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 20:39:30'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:39:30'!
ERROR!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 20:39:30'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 20:39:30'!
ERROR!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 20:39:30'!
ERROR!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 20:39:30'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 20:39:30'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 20:39:30'!
ERROR!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 20:39:30'!
ERROR!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 20:39:30'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 20:39:30'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 20:39:30'!
ERROR!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 20:39:30'!
ERROR!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:39:30'!
PASSED!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 20:39:30'!
ERROR!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 20:39:30'!
ERROR!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:39:32'!
ERROR!

GregorianDateTime now + 2*hour!

GregorianDateTime now + (2*hour)!

GregorianDateTime now next: (2*hour)!
!Clock methodsFor: 'accessing' stamp: 'FR 12/1/2020 20:41:56'!
now

	^ GregorianDateTime now next: timeOffset! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 20:41:58'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 20:41:58'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:41:58'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 20:41:58'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 20:41:58'!
ERROR!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 20:41:58'!
ERROR!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 20:41:58'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 20:41:58'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 20:41:58'!
ERROR!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 20:41:58'!
ERROR!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 20:41:58'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 20:41:58'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 20:41:58'!
ERROR!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 20:41:58'!
ERROR!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:41:58'!
PASSED!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 20:41:58'!
ERROR!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 20:41:58'!
FAILURE!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 20:42:00'!
ERROR!

((timestampByCartID at: aCartID) distanceTo: clock now)!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 20:42:57'!
ERROR!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 20:43:33'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 20:43:33'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:43:33'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 20:43:33'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 20:43:33'!
ERROR!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 20:43:33'!
ERROR!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 20:43:33'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 20:43:33'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 20:43:33'!
ERROR!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 20:43:33'!
ERROR!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 20:43:33'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 20:43:33'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 20:43:33'!
ERROR!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 20:43:33'!
ERROR!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:43:33'!
PASSED!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 20:43:33'!
ERROR!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 20:43:33'!
FAILURE!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 20:43:35'!
ERROR!
!XXX methodsFor: 'adding' stamp: 'FR 12/1/2020 20:43:46' prior: 51219395!
add: anAmount of: aBook toCart: aCartID

	self assertCartIDIsValid: aCartID.
	
	(((timestampByCartID at: aCartID) distanceTo: clock now) >= (30*minute)) ifTrue: [
		self error: self class timeoutErrorDescription
	].
	
	(activeCartsByCartID at: aCartID) add: anAmount of: aBook! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 20:43:49'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 20:43:51'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:43:51'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 20:43:51'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 20:43:51'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 20:43:51'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 20:43:51'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 20:43:51'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 20:43:51'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 20:43:51'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 20:43:51'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 20:43:51'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 20:43:51'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 20:43:51'!
PASSED!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:43:51'!
PASSED!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 20:43:51'!
PASSED!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 20:43:51'!
PASSED!
!XXX methodsFor: 'adding' stamp: 'FR 12/1/2020 20:47:28' prior: 51219591!
add: anAmount of: aBook toCart: aCartID

	self assertCartIDIsValid: aCartID.
	
	(((timestampByCartID at: aCartID) distanceTo: clock now) >= (30*minute)) ifTrue: [
		activeCartsByCartID removeKey: aCartID.
		activeCartIDsByClientID removeKey: (clientIDByCartID at: aCartID).
		self error: self class timeoutErrorDescription
	].
	
	(activeCartsByCartID at: aCartID) add: anAmount of: aBook! !
!XXXTest methodsFor: 'tests - timeout' stamp: 'FR 12/1/2020 20:50:01'!
test22CannotListCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
	
	authenticatorBehavior := [].
	
	anXXX := XXX withAuthenticator: self 
				catalog: testObjectsFactory aCatalog
				andClock: aClock .
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [ anXXX listCart: aCartID ]
		raise: testObjectsFactory functionalError
		withMessageText: XXX timeoutErrorDescription! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 20:50:05'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 20:50:05'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:50:05'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 20:50:05'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 20:50:05'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 20:50:05'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 20:50:05'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 20:50:05'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 20:50:06'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 20:50:06'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 20:50:06'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 20:50:06'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 20:50:06'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 20:50:06'!
PASSED!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:50:06'!
PASSED!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 20:50:06'!
PASSED!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 20:50:06'!
PASSED!

!testRun: #XXXTest #test22CannotListCartAfterTimeout stamp: 'FR 12/1/2020 20:50:06'!
FAILURE!

!testRun: #XXXTest #test22CannotListCartAfterTimeout stamp: 'FR 12/1/2020 20:50:06'!
FAILURE!
!XXX methodsFor: 'listing' stamp: 'FR 12/1/2020 20:50:21' prior: 51219221!
listCart: aCartID
	
	self assertCartIDIsValid: aCartID.
	
	(((timestampByCartID at: aCartID) distanceTo: clock now) >= (30*minute)) ifTrue: [
		activeCartsByCartID removeKey: aCartID.
		activeCartIDsByClientID removeKey: (clientIDByCartID at: aCartID).
		self error: self class timeoutErrorDescription
	].
	
	^ (activeCartsByCartID at: aCartID) books asBag! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 20:50:26'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 20:50:26'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:50:26'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 20:50:26'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 20:50:26'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 20:50:26'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 20:50:26'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 20:50:26'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 20:50:26'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 20:50:26'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 20:50:26'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 20:50:26'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 20:50:26'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 20:50:26'!
PASSED!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:50:27'!
PASSED!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 20:50:27'!
PASSED!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 20:50:27'!
PASSED!

!testRun: #XXXTest #test22CannotListCartAfterTimeout stamp: 'FR 12/1/2020 20:50:27'!
PASSED!
!XXXTest methodsFor: 'tests - timeout' stamp: 'FR 12/1/2020 20:55:20'!
test23AddingToCartRefreshesTimeout

	| anXXX aCartID aClock expectedList |
	
	aClock := Clock new.
	
	authenticatorBehavior := [].
	
	anXXX := XXX withAuthenticator: self 
				catalog: testObjectsFactory aCatalog
				andClock: aClock .
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX add: 1 of: testObjectsFactory anotherBookSoldByPublisher toCart: aCartID.
	
	expectedList := {testObjectsFactory aBookSoldByPublisher. testObjectsFactory anotherBookSoldByPublisher} asBag.
	
	self assert: (anXXX listCart: aCartID) equals: expectedList! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 20:55:25'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 20:55:26'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:55:26'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 20:55:26'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 20:55:26'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 20:55:26'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 20:55:26'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 20:55:26'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 20:55:26'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 20:55:26'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 20:55:26'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 20:55:26'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 20:55:26'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 20:55:26'!
PASSED!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:55:26'!
PASSED!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 20:55:26'!
PASSED!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 20:55:26'!
PASSED!

!testRun: #XXXTest #test22CannotListCartAfterTimeout stamp: 'FR 12/1/2020 20:55:26'!
PASSED!

!testRun: #XXXTest #test23AddingToCartRefreshesTimeout stamp: 'FR 12/1/2020 20:55:26'!
ERROR!

!testRun: #XXXTest #test23AddingToCartRefreshesTimeout stamp: 'FR 12/1/2020 20:55:26'!
ERROR!

29*minute + 29*minute!
!Clock methodsFor: 'jumping' stamp: 'FR 12/1/2020 20:56:13' prior: 51218999!
jumpAheadMinutes: anAmountOfMinutes

	timeOffset := timeOffset + (anAmountOfMinutes*minute).	! !

!testRun: #XXXTest #test23AddingToCartRefreshesTimeout stamp: 'FR 12/1/2020 20:56:13'!
ERROR!
!XXX methodsFor: 'adding' stamp: 'FR 12/1/2020 20:56:54' prior: 51219657!
add: anAmount of: aBook toCart: aCartID

	self assertCartIDIsValid: aCartID.
	
	(((timestampByCartID at: aCartID) distanceTo: clock now) >= (30*minute)) ifTrue: [
		activeCartsByCartID removeKey: aCartID.
		activeCartIDsByClientID removeKey: (clientIDByCartID at: aCartID).
		self error: self class timeoutErrorDescription
	].
	
	(activeCartsByCartID at: aCartID) add: anAmount of: aBook.
	timestampByCartID at: aCartID put: clock now.! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 20:56:56'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 20:56:56'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:56:56'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 20:56:56'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 20:56:56'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 20:56:56'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 20:56:56'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 20:56:56'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 20:56:56'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 20:56:56'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 20:56:56'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 20:56:56'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 20:56:56'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 20:56:56'!
PASSED!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:56:56'!
PASSED!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 20:56:56'!
PASSED!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 20:56:56'!
PASSED!

!testRun: #XXXTest #test22CannotListCartAfterTimeout stamp: 'FR 12/1/2020 20:56:56'!
PASSED!

!testRun: #XXXTest #test23AddingToCartRefreshesTimeout stamp: 'FR 12/1/2020 20:56:56'!
PASSED!
!XXXTest methodsFor: 'tests - timeout' stamp: 'FR 12/1/2020 20:58:08' prior: 51219824!
test23AddingToCartRefreshesTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
	
	authenticatorBehavior := [].
	
	anXXX := XXX withAuthenticator: self 
				catalog: testObjectsFactory aCatalog
				andClock: aClock .
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	self assert: (anXXX listCart: aCartID) equals: Bag new! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 20:58:11'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 20:58:11'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:58:11'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 20:58:11'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 20:58:11'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 20:58:11'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 20:58:11'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 20:58:11'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 20:58:11'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 20:58:11'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 20:58:11'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 20:58:12'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 20:58:12'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 20:58:12'!
PASSED!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:58:12'!
PASSED!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 20:58:12'!
PASSED!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 20:58:12'!
PASSED!

!testRun: #XXXTest #test22CannotListCartAfterTimeout stamp: 'FR 12/1/2020 20:58:12'!
PASSED!

!testRun: #XXXTest #test23AddingToCartRefreshesTimeout stamp: 'FR 12/1/2020 20:58:12'!
ERROR!

!testRun: #XXXTest #test23AddingToCartRefreshesTimeout stamp: 'FR 12/1/2020 20:58:12'!
ERROR!
!XXX methodsFor: 'listing' stamp: 'FR 12/1/2020 20:58:30' prior: 51219752!
listCart: aCartID
	
	self assertCartIDIsValid: aCartID.
	
	(((timestampByCartID at: aCartID) distanceTo: clock now) >= (30*minute)) ifTrue: [
		activeCartsByCartID removeKey: aCartID.
		activeCartIDsByClientID removeKey: (clientIDByCartID at: aCartID).
		self error: self class timeoutErrorDescription
	].
	
	timestampByCartID at: aCartID put: clock now.
	^ (activeCartsByCartID at: aCartID) books asBag! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 20:58:33'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 20:58:33'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:58:33'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 20:58:33'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 20:58:33'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 20:58:33'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 20:58:33'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 20:58:33'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 20:58:33'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 20:58:33'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 20:58:33'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 20:58:34'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 20:58:34'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 20:58:34'!
PASSED!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 20:58:34'!
PASSED!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 20:58:34'!
PASSED!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 20:58:34'!
PASSED!

!testRun: #XXXTest #test22CannotListCartAfterTimeout stamp: 'FR 12/1/2020 20:58:34'!
PASSED!

!testRun: #XXXTest #test23AddingToCartRefreshesTimeout stamp: 'FR 12/1/2020 20:58:34'!
PASSED!
!XXX class methodsFor: 'instance creation' stamp: 'FR 12/1/2020 21:03:17'!
withAuthenticator: anAuthenticator catalog: aCatalog merchantProcessor: aMerchantProcessor andClock: aClock  

	^self new initializeWithAuthenticator: anAuthenticator catalog: aCatalog andClock: aClock! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 21:03:18' prior: 51218604!
test16CannotListPurchasesForClientWithIncorrectPassword

	| anXXX |
	
	authenticatorBehavior := [ self error: XXX incorrectPasswordErrorDescription ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog merchantProcessor: MerchantProcessorSimulator successfulValidation andClock: Clock new.

	self  should: [ anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
					  withPassword: testObjectsFactory anIncorrectPassword ]
		raise: testObjectsFactory functionalError
		withMessageText: XXX incorrectPasswordErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 21:03:18' prior: 51219672!
test22CannotListCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
	
	authenticatorBehavior := [].
	
	anXXX := XXX withAuthenticator: self 
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation andClock: aClock .
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [ anXXX listCart: aCartID ]
		raise: testObjectsFactory functionalError
		withMessageText: XXX timeoutErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 21:03:18' prior: 51218698!
test20PurchaseListOnlyShowsCheckedOutItems

	|anXXX aCartID |
	
	authenticatorBehavior := [].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog merchantProcessor: MerchantProcessorSimulator successfulValidation andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
			
	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID withPassword: testObjectsFactory aCorrectPassword) 
		equals: testObjectsFactory anEmptyBag.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 21:03:18' prior: 51218503!
test17MultiplePurchasesBySameClientAreListedCorrectly

	| anXXX aCartID anotherCartID expectedPurchases |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog merchantProcessor: MerchantProcessorSimulator successfulValidation andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	expectedPurchases := Bag new.
	expectedPurchases add: testObjectsFactory aBookSoldByPublisher.
	expectedPurchases add: testObjectsFactory anotherBookSoldByPublisher 
				       withOccurrences: 4.

	self assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 21:03:18' prior: 51218553!
test03SuccessfulyCreatedCartIsEmpty

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog merchantProcessor: MerchantProcessorSimulator successfulValidation andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
				     andPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (anXXX listCart: aCartID) isEmpty! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 21:03:18' prior: 51218683!
test19PurchaseListForClientThatNeverCreatedCartIsEmpty

	| anXXX |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog merchantProcessor: MerchantProcessorSimulator successfulValidation andClock: Clock new.
	
	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID withPassword: testObjectsFactory aCorrectPassword) 
		equals: testObjectsFactory anEmptyBag.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 21:03:18' prior: 51220003!
test23AddingToCartRefreshesTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
	
	authenticatorBehavior := [].
	
	anXXX := XXX withAuthenticator: self 
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation andClock: aClock .
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	self assert: (anXXX listCart: aCartID) equals: Bag new! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 21:03:18' prior: 51218662!
test08MultipleBooksAreAddedSuccessfully

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog merchantProcessor: MerchantProcessorSimulator successfulValidation andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 5
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  assert: (anXXX listCart: aCartID) 
		equals: (Bag new add: testObjectsFactory aBookSoldByPublisher withOccurrences: 5; yourself)! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 21:03:18' prior: 51218642!
test12CannotCheckOutWithInvalidCartID

	| anXXX |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog merchantProcessor: MerchantProcessorSimulator successfulValidation andClock: Clock new.
	
	self  should: [ anXXX checkout: testObjectsFactory anInvalidCartID
					  withCreditCard: testObjectsFactory aValidCreditCardNumber
					  expiring: testObjectsFactory aNonExpiredDate
					  withOwner: testObjectsFactory aValidOwnerName
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidCartIDErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 21:03:18' prior: 51218820!
test02CannotCreateCartWithIncorrectPassword

	| anXXX |
	
	authenticatorBehavior := [ self error: XXX incorrectPasswordErrorDescription ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog merchantProcessor: MerchantProcessorSimulator successfulValidation andClock: Clock new.
	
	self  should: [
			anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
				    andPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX incorrectPasswordErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 21:03:18' prior: 51218474!
test14SuccessfulCheckoutIsDoneCorrectly

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog merchantProcessor: MerchantProcessorSimulator successfulValidation andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
					withPassword: testObjectsFactory aCorrectPassword)
		equals: (Bag with: testObjectsFactory aBookSoldByPublisher)! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 21:03:18' prior: 51218747!
test04CannotAddToCartWithInvalidCartID

	| anXXX |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog merchantProcessor: MerchantProcessorSimulator successfulValidation andClock: Clock new.
	
	self  should: [ anXXX add: 1
					   of: testObjectsFactory aBookSoldByPublisher
					   toCart: testObjectsFactory anInvalidCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidCartIDErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 21:03:18' prior: 51218839!
test11CannotListWithInvalidCartID

	| anXXX |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog merchantProcessor: MerchantProcessorSimulator successfulValidation andClock: Clock new.
	
	self  should: [
			anXXX listCart: testObjectsFactory anInvalidCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidCartIDErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 21:03:18' prior: 51218720!
test13CannotCheckOutWithInvalidCreditCard

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog merchantProcessor: MerchantProcessorSimulator successfulValidation andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  should: [anXXX checkout: aCartID 
					  withCreditCard: testObjectsFactory anInvalidCreditCardNumber
					  expiring: testObjectsFactory aNonExpiredDate
					  withOwner: testObjectsFactory aValidOwnerName ]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidCreditCardErrorDescription.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 21:03:18' prior: 51218623!
test07BookIsAddedSuccessfully

	| anXXX aCartID |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog merchantProcessor: MerchantProcessorSimulator successfulValidation andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  assert: (anXXX listCart: aCartID) 
		equals: (Bag with: testObjectsFactory aBookSoldByPublisher)! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 21:03:18' prior: 51218586!
test15CannotListPurchasesForInvalidClientID

	| anXXX |
	
	authenticatorBehavior := [ self error: XXX invalidClientIDErrorDescription ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog merchantProcessor: MerchantProcessorSimulator successfulValidation andClock: Clock new.

	self  should: [ anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
					  withPassword: testObjectsFactory aCorrectPassword ]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidClientIDErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 21:03:19' prior: 51217992!
test21CannotAddToCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
	
	authenticatorBehavior := [].
	
	anXXX := XXX withAuthenticator: self
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [anXXX add: 1
					 of: testObjectsFactory aBookSoldByPublisher
					 toCart: aCartID
		]
		raise:  testObjectsFactory functionalError
		withMessageText: XXX timeoutErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 21:03:19' prior: 51218763!
test18PurchasesByMultipleClientAreListedCorrectly

	| anXXX aCartID anotherCartID expectedPurchases1 expectedPurchases2 |
	
	authenticatorBehavior := [ ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog merchantProcessor: MerchantProcessorSimulator successfulValidation andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	expectedPurchases1 := Bag new.
	expectedPurchases1 add: testObjectsFactory aBookSoldByPublisher.

	expectedPurchases2 := Bag new.
	expectedPurchases2 add: testObjectsFactory anotherBookSoldByPublisher 
				         withOccurrences: 4.

	self assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases1.
	self assert: (anXXX listPurchasesFor: testObjectsFactory anotherValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases2! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 21:03:19' prior: 51218568!
test01CannotCreateCartWithInvalidID

	| anXXX |
	
	authenticatorBehavior := [ self error: XXX invalidClientIDErrorDescription ].
	anXXX := XXX withAuthenticator: self catalog: testObjectsFactory aCatalog merchantProcessor: MerchantProcessorSimulator successfulValidation andClock: Clock new.
	
	self  should: [
			anXXX createCartForClientWithID: testObjectsFactory anInvalidClientID 
				    andPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidClientIDErrorDescription! !

!methodRemoval: XXX class #withAuthenticator:catalog:andClock: stamp: 'FR 12/1/2020 21:03:19'!
withAuthenticator: anAuthenticator catalog: aCatalog andClock: aClock  

	^self new initializeWithAuthenticator: anAuthenticator catalog: aCatalog andClock: aClock!
!XXX methodsFor: 'initialization' stamp: 'FR 12/1/2020 21:04:03'!
initializeWithAuthenticator: anAuthenticator catalog: aCatalog merchantProcessor: aMerchantProcessor andClock: aClock 

	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := MerchantProcessorSimulator successfulValidation.
	clock := aClock.
	
	currentCartID := 0.
	activeCartsByCartID := Dictionary new.
	activeCartIDsByClientID := Dictionary new.
	clientIDByCartID := Dictionary new.
	booksByClientID := Dictionary new.
	timestampByCartID := Dictionary new.! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 21:04:03' prior: 51220163!
withAuthenticator: anAuthenticator catalog: aCatalog merchantProcessor: aMerchantProcessor andClock: aClock  

	^self new initializeWithAuthenticator: anAuthenticator catalog: aCatalog merchantProcessor: aMerchantProcessor andClock: aClock! !

!methodRemoval: XXX #initializeWithAuthenticator:catalog:andClock: stamp: 'FR 12/1/2020 21:04:04'!
initializeWithAuthenticator: anAuthenticator catalog: aCatalog andClock: aClock 

	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := MerchantProcessorSimulator successfulValidation.
	clock := aClock.
	
	currentCartID := 0.
	activeCartsByCartID := Dictionary new.
	activeCartIDsByClientID := Dictionary new.
	clientIDByCartID := Dictionary new.
	booksByClientID := Dictionary new.
	timestampByCartID := Dictionary new.!
!XXX methodsFor: 'initialization' stamp: 'FR 12/1/2020 21:04:25' prior: 51220664!
initializeWithAuthenticator: anAuthenticator catalog: aCatalog merchantProcessor: aMerchantProcessor andClock: aClock 

	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.
	clock := aClock.
	
	currentCartID := 0.
	activeCartsByCartID := Dictionary new.
	activeCartIDsByClientID := Dictionary new.
	clientIDByCartID := Dictionary new.
	booksByClientID := Dictionary new.
	timestampByCartID := Dictionary new.! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 21:04:27'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 21:04:27'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 21:04:28'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 21:04:28'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 21:04:29'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 21:04:29'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 21:04:30'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 21:04:30'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 21:04:30'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 21:04:31'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 21:04:31'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 21:04:31'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 21:04:31'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 21:04:31'!
PASSED!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 21:04:31'!
PASSED!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 21:04:32'!
PASSED!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 21:04:33'!
PASSED!

!testRun: #XXXTest #test22CannotListCartAfterTimeout stamp: 'FR 12/1/2020 21:04:33'!
PASSED!

!testRun: #XXXTest #test23AddingToCartRefreshesTimeout stamp: 'FR 12/1/2020 21:04:33'!
PASSED!

Object subclass: #AuthenticatorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #AuthenticatorSimulator category: 'TusLibros' stamp: 'FR 12/1/2020 21:07:16'!
Object subclass: #AuthenticatorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #AuthenticatorSimulator category: 'TusLibros' stamp: 'FR 12/1/2020 21:11:52'!
Object subclass: #AuthenticatorSimulator
	instanceVariableNames: 'authenticatorBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!AuthenticatorSimulator methodsFor: 'no messages' stamp: 'FR 12/1/2020 21:11:51'!
authenticateWithID: aClientID andPassword: aPassword

	authenticatorBehavior value! !
!AuthenticatorSimulator class methodsFor: 'instance creation' stamp: 'FR 12/1/2020 21:14:19'!
invalidClientID

	^ self new initializeWith: [ self error: XXX invalidClientIDErrorDescription ]! !
!AuthenticatorSimulator class methodsFor: 'instance creation' stamp: 'FR 12/1/2020 21:14:46'!
invalidClientPassword

	^ self new initializeWith: [ self error: XXX incorrectPasswordErrorDescription ]! !
!AuthenticatorSimulator class methodsFor: 'instance creation' stamp: 'FR 12/1/2020 21:15:19'!
successfulAuthentication

	^ self new initializeWith: [ ]! !
!XXXTest methodsFor: 'tests - creation' stamp: 'FR 12/1/2020 21:16:45' prior: 51220636!
test01CannotCreateCartWithInvalidID

	| anXXX |
		
	anXXX := XXX withAuthenticator: AuthenticatorSimulator invalidClientID
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation 
			andClock: Clock new.
	
	self  should: [
			anXXX createCartForClientWithID: testObjectsFactory anInvalidClientID 
				    andPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidClientIDErrorDescription! !
!XXXTest methodsFor: 'tests - creation' stamp: 'FR 12/1/2020 21:17:26' prior: 51220394!
test02CannotCreateCartWithIncorrectPassword

	| anXXX |
	
	anXXX := XXX withAuthenticator: AuthenticatorSimulator invalidClientPassword
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	self  should: [
			anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
				    andPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX incorrectPasswordErrorDescription! !
!XXXTest methodsFor: 'tests - creation' stamp: 'FR 12/1/2020 21:17:38' prior: 51220853!
test02CannotCreateCartWithIncorrectPassword

	| anXXX |
	
	anXXX := XXX withAuthenticator: AuthenticatorSimulator invalidClientPassword
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	self  should: [
			anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
				    andPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX incorrectPasswordErrorDescription! !
!XXXTest methodsFor: 'tests - creation' stamp: 'FR 12/1/2020 21:18:03' prior: 51220292!
test03SuccessfulyCreatedCartIsEmpty

	| anXXX aCartID |
	
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
				     andPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (anXXX listCart: aCartID) isEmpty! !
!XXXTest methodsFor: 'tests - adding' stamp: 'FR 12/1/2020 21:18:33' prior: 51220446!
test04CannotAddToCartWithInvalidCartID

	| anXXX |
	
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	self  should: [ anXXX add: 1
					   of: testObjectsFactory aBookSoldByPublisher
					   toCart: testObjectsFactory anInvalidCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidCartIDErrorDescription! !
!XXXTest methodsFor: 'tests - adding' stamp: 'FR 12/1/2020 21:18:48' prior: 51220510!
test07BookIsAddedSuccessfully

	| anXXX aCartID |
	
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  assert: (anXXX listCart: aCartID) 
		equals: (Bag with: testObjectsFactory aBookSoldByPublisher)! !
!XXXTest methodsFor: 'tests - adding' stamp: 'FR 12/1/2020 21:19:01' prior: 51220349!
test08MultipleBooksAreAddedSuccessfully

	| anXXX aCartID |
	
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 5
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  assert: (anXXX listCart: aCartID) 
		equals: (Bag new add: testObjectsFactory aBookSoldByPublisher withOccurrences: 5; yourself)! !
!XXXTest methodsFor: 'tests - listing cart' stamp: 'FR 12/1/2020 21:19:37' prior: 51220465!
test11CannotListWithInvalidCartID

	| anXXX |
	
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	self  should: [
			anXXX listCart: testObjectsFactory anInvalidCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidCartIDErrorDescription! !
!XXXTest methodsFor: 'tests - checkout' stamp: 'FR 12/1/2020 21:19:50' prior: 51220372!
test12CannotCheckOutWithInvalidCartID

	| anXXX |
	
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	self  should: [ anXXX checkout: testObjectsFactory anInvalidCartID
					  withCreditCard: testObjectsFactory aValidCreditCardNumber
					  expiring: testObjectsFactory aNonExpiredDate
					  withOwner: testObjectsFactory aValidOwnerName
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidCartIDErrorDescription! !
!XXXTest methodsFor: 'tests - checkout' stamp: 'FR 12/1/2020 21:20:02' prior: 51220993!
test12CannotCheckOutWithInvalidCartID

	| anXXX |
	
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	self  should: [
		anXXX checkout: testObjectsFactory anInvalidCartID
					  withCreditCard: testObjectsFactory aValidCreditCardNumber
					  expiring: testObjectsFactory aNonExpiredDate
					  withOwner: testObjectsFactory aValidOwnerName
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidCartIDErrorDescription! !
!XXXTest methodsFor: 'tests - checkout' stamp: 'FR 12/1/2020 21:20:28' prior: 51221015!
test12CannotCheckOutWithInvalidCartID

	| anXXX |
	
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	self  should: [
			anXXX checkout: testObjectsFactory anInvalidCartID
				    withCreditCard: testObjectsFactory aValidCreditCardNumber
				    expiring: testObjectsFactory aNonExpiredDate
				    withOwner: testObjectsFactory aValidOwnerName
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidCartIDErrorDescription! !
!XXXTest methodsFor: 'tests - checkout' stamp: 'FR 12/1/2020 21:20:54' prior: 51220481!
test13CannotCheckOutWithInvalidCreditCard

	| anXXX aCartID |
	
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  should: [anXXX checkout: aCartID 
					  withCreditCard: testObjectsFactory anInvalidCreditCardNumber
					  expiring: testObjectsFactory aNonExpiredDate
					  withOwner: testObjectsFactory aValidOwnerName ]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidCreditCardErrorDescription.! !
!XXXTest methodsFor: 'tests - checkout' stamp: 'FR 12/1/2020 21:21:10' prior: 51220415!
test14SuccessfulCheckoutIsDoneCorrectly

	| anXXX aCartID |
	
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
					withPassword: testObjectsFactory aCorrectPassword)
		equals: (Bag with: testObjectsFactory aBookSoldByPublisher)! !
!XXXTest methodsFor: 'tests - checkout' stamp: 'FR 12/1/2020 21:21:28' prior: 51221060!
test13CannotCheckOutWithInvalidCreditCard

	| anXXX aCartID |
	
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  should: [
			anXXX checkout: aCartID 
				    withCreditCard: testObjectsFactory anInvalidCreditCardNumber
				    expiring: testObjectsFactory aNonExpiredDate
				    withOwner: testObjectsFactory aValidOwnerName ]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidCreditCardErrorDescription.! !
!XXXTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/1/2020 21:22:09' prior: 51220532!
test15CannotListPurchasesForInvalidClientID

	| anXXX |
	
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	self  should: [ anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
					  withPassword: testObjectsFactory aCorrectPassword ]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidClientIDErrorDescription! !
!XXXTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/1/2020 21:22:21' prior: 51221150!
test15CannotListPurchasesForInvalidClientID

	| anXXX |
	
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	self  should: [
			anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
				    withPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidClientIDErrorDescription! !
!XXXTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/1/2020 21:22:28' prior: 51221170!
test15CannotListPurchasesForInvalidClientID

	| anXXX |
	
	anXXX := XXX withAuthenticator: AuthenticatorSimulator invalidClientID
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	self  should: [
			anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
				    withPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidClientIDErrorDescription! !
!XXXTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/1/2020 21:22:51' prior: 51220173!
test16CannotListPurchasesForClientWithIncorrectPassword

	| anXXX |
	
	anXXX := XXX withAuthenticator: AuthenticatorSimulator invalidClientPassword
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	self  should: [ anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
					  withPassword: testObjectsFactory anIncorrectPassword ]
		raise: testObjectsFactory functionalError
		withMessageText: XXX incorrectPasswordErrorDescription! !
!XXXTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/1/2020 21:23:02' prior: 51221210!
test16CannotListPurchasesForClientWithIncorrectPassword

	| anXXX |
	
	anXXX := XXX withAuthenticator: AuthenticatorSimulator invalidClientPassword
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	self  should: [
			anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
				    withPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX incorrectPasswordErrorDescription! !
!XXXTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/1/2020 21:23:24' prior: 51220240!
test17MultiplePurchasesBySameClientAreListedCorrectly

	| anXXX aCartID anotherCartID expectedPurchases |
	
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	expectedPurchases := Bag new.
	expectedPurchases add: testObjectsFactory aBookSoldByPublisher.
	expectedPurchases add: testObjectsFactory anotherBookSoldByPublisher 
				       withOccurrences: 4.

	self assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases! !
!XXXTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/1/2020 21:23:31' prior: 51221250!
test17MultiplePurchasesBySameClientAreListedCorrectly

	| anXXX aCartID anotherCartID expectedPurchases |
	
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	expectedPurchases := Bag new.
	expectedPurchases add: testObjectsFactory aBookSoldByPublisher.
	expectedPurchases add: testObjectsFactory anotherBookSoldByPublisher 
				       withOccurrences: 4.

	self assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases! !
!XXXTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/1/2020 21:24:02' prior: 51220576!
test18PurchasesByMultipleClientAreListedCorrectly

	| anXXX aCartID anotherCartID expectedPurchases1 expectedPurchases2 |
	
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	expectedPurchases1 := Bag new.
	expectedPurchases1 add: testObjectsFactory aBookSoldByPublisher.

	expectedPurchases2 := Bag new.
	expectedPurchases2 add: testObjectsFactory anotherBookSoldByPublisher 
				         withOccurrences: 4.

	self assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases1.
	self assert: (anXXX listPurchasesFor: testObjectsFactory anotherValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases2! !
!XXXTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/1/2020 21:24:29' prior: 51220309!
test19PurchaseListForClientThatNeverCreatedCartIsEmpty

	| anXXX |
	
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID withPassword: testObjectsFactory aCorrectPassword) 
		equals: testObjectsFactory anEmptyBag.! !
!XXXTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/1/2020 21:24:48' prior: 51220216!
test20PurchaseListOnlyShowsCheckedOutItems

	|anXXX aCartID |
	
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
			
	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID withPassword: testObjectsFactory aCorrectPassword) 
		equals: testObjectsFactory anEmptyBag.! !
!XXXTest methodsFor: 'tests - timeout' stamp: 'FR 12/1/2020 21:25:29' prior: 51220552!
test21CannotAddToCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [anXXX add: 1
					 of: testObjectsFactory aBookSoldByPublisher
					 toCart: aCartID
		]
		raise:  testObjectsFactory functionalError
		withMessageText: XXX timeoutErrorDescription! !
!XXXTest methodsFor: 'tests - timeout' stamp: 'FR 12/1/2020 21:25:44' prior: 51220194!
test22CannotListCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
	
	authenticatorBehavior := [].
	
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [ anXXX listCart: aCartID ]
		raise: testObjectsFactory functionalError
		withMessageText: XXX timeoutErrorDescription! !
!XXXTest methodsFor: 'tests - timeout' stamp: 'FR 12/1/2020 21:25:54' prior: 51220326!
test23AddingToCartRefreshesTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
	
	authenticatorBehavior := [].
	
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock .
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	self assert: (anXXX listCart: aCartID) equals: Bag new! !
!XXXTest methodsFor: 'tests - creation' stamp: 'FR 12/1/2020 21:26:05' prior: 51220834!
test01CannotCreateCartWithInvalidID

	| anXXX |
		
	anXXX := XXX withAuthenticator: AuthenticatorSimulator invalidClientID
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation 
				andClock: Clock new.
	
	self  should: [
			anXXX createCartForClientWithID: testObjectsFactory anInvalidClientID 
				    andPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX invalidClientIDErrorDescription! !
!XXXTest methodsFor: 'tests - creation' stamp: 'FR 12/1/2020 21:26:09' prior: 51220873!
test02CannotCreateCartWithIncorrectPassword

	| anXXX |
	
	anXXX := XXX withAuthenticator: AuthenticatorSimulator invalidClientPassword
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	self  should: [
			anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
				    andPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: XXX incorrectPasswordErrorDescription! !
!XXXTest methodsFor: 'tests - creation' stamp: 'FR 12/1/2020 21:26:12' prior: 51220893!
test03SuccessfulyCreatedCartIsEmpty

	| anXXX aCartID |
	
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
				     andPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (anXXX listCart: aCartID) isEmpty! !
!XXXTest methodsFor: 'tests - timeout' stamp: 'FR 12/1/2020 22:02:43' prior: 51221483!
test22CannotListCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [ anXXX listCart: aCartID ]
		raise: testObjectsFactory functionalError
		withMessageText: XXX timeoutErrorDescription! !
!XXXTest methodsFor: 'tests - timeout' stamp: 'FR 12/1/2020 22:02:48' prior: 51221507!
test23AddingToCartRefreshesTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock .
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	self assert: (anXXX listCart: aCartID) equals: Bag new! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 22:02:55'!
ERROR!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 22:02:55'!
ERROR!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 22:02:55'!
ERROR!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 22:02:55'!
ERROR!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 22:02:55'!
ERROR!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 22:02:55'!
ERROR!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 22:02:55'!
ERROR!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 22:02:55'!
ERROR!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 22:02:55'!
ERROR!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 22:02:56'!
ERROR!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 22:02:56'!
ERROR!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 22:02:56'!
ERROR!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 22:02:56'!
ERROR!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 22:02:56'!
ERROR!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 22:02:56'!
ERROR!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 22:02:56'!
ERROR!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 22:02:56'!
ERROR!

!testRun: #XXXTest #test22CannotListCartAfterTimeout stamp: 'FR 12/1/2020 22:02:56'!
ERROR!

!testRun: #XXXTest #test23AddingToCartRefreshesTimeout stamp: 'FR 12/1/2020 22:02:56'!
ERROR!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 22:02:58'!
ERROR!
!AuthenticatorSimulator methodsFor: 'initialization' stamp: 'FR 12/1/2020 22:03:19'!
initializeWith: aBlock

	authenticatorBehavior := aBlock! !

!classDefinition: #AuthenticatorSimulator category: 'TusLibros' stamp: 'FR 12/1/2020 22:03:27'!
Object subclass: #AuthenticatorSimulator
	instanceVariableNames: 'authenticationBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!AuthenticatorSimulator methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 22:03:28' prior: 51221697!
initializeWith: aBlock

	authenticationBehavior := aBlock! !
!AuthenticatorSimulator methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 22:03:28' prior: 51220809!
authenticateWithID: aClientID andPassword: aPassword

	authenticationBehavior value! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 22:03:41'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 22:03:42'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 22:03:42'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 22:03:42'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 22:03:42'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 22:03:42'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 22:03:42'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 22:03:42'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 22:03:42'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 22:03:42'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 22:03:42'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 22:03:42'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 22:03:42'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 22:03:42'!
PASSED!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 22:03:42'!
PASSED!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 22:03:42'!
PASSED!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 22:03:42'!
FAILURE!

!testRun: #XXXTest #test22CannotListCartAfterTimeout stamp: 'FR 12/1/2020 22:03:42'!
PASSED!

!testRun: #XXXTest #test23AddingToCartRefreshesTimeout stamp: 'FR 12/1/2020 22:03:42'!
PASSED!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 22:03:42'!
FAILURE!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 22:04:06'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 22:04:06'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 22:04:07'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 22:04:07'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 22:04:07'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 22:04:07'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 22:04:07'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 22:04:07'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 22:04:07'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 22:04:07'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 22:04:07'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 22:04:07'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 22:04:07'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 22:04:07'!
PASSED!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 22:04:07'!
PASSED!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 22:04:07'!
PASSED!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 22:04:07'!
FAILURE!

!testRun: #XXXTest #test22CannotListCartAfterTimeout stamp: 'FR 12/1/2020 22:04:07'!
PASSED!

!testRun: #XXXTest #test23AddingToCartRefreshesTimeout stamp: 'FR 12/1/2020 22:04:07'!
PASSED!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 22:04:07'!
FAILURE!

clock now!

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 22:05:58'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 22:05:58'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 22:05:58'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 22:05:58'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 22:05:58'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 22:05:58'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 22:05:58'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 22:05:58'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 22:05:58'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 22:05:58'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 22:05:58'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 22:05:58'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 22:05:58'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 22:05:58'!
PASSED!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 22:05:58'!
PASSED!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 22:05:58'!
PASSED!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 22:05:58'!
FAILURE!

!testRun: #XXXTest #test22CannotListCartAfterTimeout stamp: 'FR 12/1/2020 22:05:58'!
PASSED!

!testRun: #XXXTest #test23AddingToCartRefreshesTimeout stamp: 'FR 12/1/2020 22:05:58'!
PASSED!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 22:05:58'!
FAILURE!
!XXXTest methodsFor: 'tests - timeout' stamp: 'FR 12/1/2020 22:07:33' prior: 51221458!
test21CannotAddToCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [anXXX add: 1
					 of: testObjectsFactory aBookSoldByPublisher
					 toCart: aCartID
		]
		raise:  testObjectsFactory functionalError
		withMessageText: XXX timeoutErrorDescription! !
!XXXTest methodsFor: 'tests - timeout' stamp: 'FR 12/1/2020 22:07:41' prior: 51221611!
test23AddingToCartRefreshesTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	self assert: (anXXX listCart: aCartID) equals: Bag new! !
!XXXTest methodsFor: 'tests - timeout' stamp: 'FR 12/1/2020 22:09:36'!
test24AddingToCartRefreshesTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	self assert: (anXXX listCart: aCartID) equals: Bag new! !

!methodRemoval: XXXTest #test23AddingToCartRefreshesTimeout stamp: 'FR 12/1/2020 22:09:36'!
test23AddingToCartRefreshesTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	self assert: (anXXX listCart: aCartID) equals: Bag new!
!XXXTest methodsFor: 'tests - timeout' stamp: 'FR 12/1/2020 22:09:47'!
test24ListingCartRefreshesTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	self assert: (anXXX listCart: aCartID) equals: Bag new! !

!methodRemoval: XXXTest #test24AddingToCartRefreshesTimeout stamp: 'FR 12/1/2020 22:09:47'!
test24AddingToCartRefreshesTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	self assert: (anXXX listCart: aCartID) equals: Bag new!
!XXXTest methodsFor: 'tests - timeout' stamp: 'FR 12/1/2020 22:11:39'!
test23AddingToCartRefreshesTimeout

	| anXXX aCartID aClock expectedList |
	
	aClock := Clock new.
		
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX add: 1 of: testObjectsFactory anotherBookSoldByPublisher toCart: aCartID.
	
	expectedList := {testObjectsFactory aBookSoldByPublisher. testObjectsFactory anotherBookSoldByPublisher} asBag.
	
	self assert: (anXXX listCart: aCartID) equals: expectedList! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 22:11:42'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 22:11:42'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 22:11:42'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 22:11:42'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 22:11:42'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 22:11:42'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 22:11:42'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 22:11:42'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 22:11:42'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 22:11:42'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 22:11:43'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 22:11:43'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 22:11:43'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 22:11:43'!
PASSED!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 22:11:43'!
PASSED!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 22:11:43'!
PASSED!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 22:11:43'!
PASSED!

!testRun: #XXXTest #test22CannotListCartAfterTimeout stamp: 'FR 12/1/2020 22:11:43'!
PASSED!

!testRun: #XXXTest #test23AddingToCartRefreshesTimeout stamp: 'FR 12/1/2020 22:11:43'!
PASSED!

!testRun: #XXXTest #test24ListingCartRefreshesTimeout stamp: 'FR 12/1/2020 22:11:43'!
PASSED!

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'FR 12/1/2020 22:13:11'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'FR 12/1/2020 22:13:12'!
MerchantProcessor subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'behavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessor methodsFor: 'nil' stamp: 'FR 12/1/2020 22:13:24'!
debit: anAmount from: aCreditCard

	self subclassResponsibility! !
!MerchantProcessor methodsFor: 'initialization' stamp: 'FR 12/1/2020 22:13:37'!
initializeWithBehavior: aBlock

	self subclassResponsibility! !

!classDefinition: #Authenticator category: 'TusLibros' stamp: 'FR 12/1/2020 22:13:55'!
Object subclass: #Authenticator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #AuthenticatorSimulator category: 'TusLibros' stamp: 'FR 12/1/2020 22:13:55'!
Authenticator subclass: #AuthenticatorSimulator
	instanceVariableNames: 'authenticationBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Authenticator methodsFor: 'authentication' stamp: 'FR 12/1/2020 22:14:31'!
authenticateWithID: aClientID andPassword: aPassword

	self subclassResponsibility! !

!methodRemoval: MerchantProcessor #initializeWithBehavior: stamp: 'FR 12/1/2020 22:14:50'!
initializeWithBehavior: aBlock

	self subclassResponsibility!
!XXX methodsFor: 'private - assertions' stamp: 'FR 12/1/2020 22:17:06'!
assertCartHasNotExpired: aCartID

	(((timestampByCartID at: aCartID) distanceTo: clock now) >= (30*minute)) ifTrue: [
		activeCartsByCartID removeKey: aCartID.
		activeCartIDsByClientID removeKey: (clientIDByCartID at: aCartID).
		self error: self class timeoutErrorDescription
	].! !
!XXX methodsFor: 'private - other' stamp: 'FR 12/1/2020 22:18:07'!
inactivityTimeOf: aCartID

	^ (timestampByCartID at: aCartID) distanceTo: clock now! !
!XXX methodsFor: 'private - other' stamp: 'FR 12/1/2020 22:19:30'!
inactivityTimeLimit

	^ 30*minute! !
!XXX methodsFor: 'private - assertions' stamp: 'FR 12/1/2020 22:21:04' prior: 51222196!
assertCartHasNotExpired: aCartID

	(self inactivityTimeOf: aCartID >= self inactivityTimeLimit) ifTrue: [
		activeCartsByCartID removeKey: aCartID.
		activeCartIDsByClientID removeKey: (clientIDByCartID at: aCartID).
		self error: self class timeoutErrorDescription
	].! !
!XXX methodsFor: 'listing' stamp: 'FR 12/1/2020 22:22:05' prior: 51220087!
listCart: aCartID
	
	self assertCartIDIsValid: aCartID.
	self assertCartHasNotExpired: aCartID.
	
	timestampByCartID at: aCartID put: clock now.
	
	^ (activeCartsByCartID at: aCartID) books asBag! !
!XXX methodsFor: 'private - other' stamp: 'FR 12/1/2020 22:22:30'!
refreshTimestampOf: aCartID

	timestampByCartID at: aCartID put: clock now.! !
!XXX methodsFor: 'listing' stamp: 'FR 12/1/2020 22:22:46' prior: 51222227!
listCart: aCartID
	
	self assertCartIDIsValid: aCartID.
	self assertCartHasNotExpired: aCartID.
	
	self refreshTimestampOf: aCartID.
	
	^ (activeCartsByCartID at: aCartID) books asBag! !
!XXX methodsFor: 'private - other' stamp: 'FR 12/1/2020 22:23:45'!
cartWithID: aCartID

	^ (activeCartsByCartID at: aCartID)! !
!XXX methodsFor: 'listing' stamp: 'FR 12/1/2020 22:24:04' prior: 51222241!
listCart: aCartID
	
	self assertCartIDIsValid: aCartID.
	self assertCartHasNotExpired: aCartID.
	
	self refreshTimestampOf: aCartID.
	
	^ (self cartWithID: aCartID) books asBag! !
!XXX methodsFor: 'adding' stamp: 'FR 12/1/2020 22:30:01' prior: 51219925!
add: anAmount of: aBook toCart: aCartID

	self assertCartIDIsValid: aCartID.
	self assertCartHasNotExpired: aCartID.
	
	(self cartWithID: aCartID) add: anAmount of: aBook.
	self refreshTimestampOf: aCartID.! !
!XXXTest methodsFor: 'tests - timeout' stamp: 'FR 12/1/2020 22:30:30'!
test24AddingToCartRefreshesTimeout

	| anXXX aCartID aClock expectedList |
	
	aClock := Clock new.
		
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX add: 1 of: testObjectsFactory anotherBookSoldByPublisher toCart: aCartID.
	
	expectedList := {testObjectsFactory aBookSoldByPublisher. testObjectsFactory anotherBookSoldByPublisher} asBag.
	
	self assert: (anXXX listCart: aCartID) equals: expectedList! !

!methodRemoval: XXXTest #test23AddingToCartRefreshesTimeout stamp: 'FR 12/1/2020 22:30:30'!
test23AddingToCartRefreshesTimeout

	| anXXX aCartID aClock expectedList |
	
	aClock := Clock new.
		
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX add: 1 of: testObjectsFactory anotherBookSoldByPublisher toCart: aCartID.
	
	expectedList := {testObjectsFactory aBookSoldByPublisher. testObjectsFactory anotherBookSoldByPublisher} asBag.
	
	self assert: (anXXX listCart: aCartID) equals: expectedList!
!XXXTest methodsFor: 'tests - timeout' stamp: 'FR 12/1/2020 22:30:34'!
test25ListingCartRefreshesTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	self assert: (anXXX listCart: aCartID) equals: Bag new! !

!methodRemoval: XXXTest #test24ListingCartRefreshesTimeout stamp: 'FR 12/1/2020 22:30:34'!
test24ListingCartRefreshesTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	self assert: (anXXX listCart: aCartID) equals: Bag new!
!XXXTest methodsFor: 'tests - timeout' stamp: 'FR 12/1/2020 22:32:57'!
test23CannotListCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := XXX withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
		anXXX checkout: aCartID
			    withCreditCard: testObjectsFactory aValidCreditCardNumber
			    expiring: testObjectsFactory aNonExpiredDate
			    withOwner: testObjectsFactory aValidOwnerName
	]
		raise: testObjectsFactory functionalError
		withMessageText: XXX timeoutErrorDescription! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 22:33:05'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 22:33:06'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 22:33:06'!
ERROR!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 22:33:06'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 22:33:06'!
ERROR!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 22:33:06'!
ERROR!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 22:33:06'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 22:33:06'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 22:33:06'!
ERROR!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 22:33:06'!
ERROR!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 22:33:06'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 22:33:06'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 22:33:06'!
ERROR!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 22:33:06'!
ERROR!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 22:33:06'!
PASSED!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 22:33:06'!
ERROR!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 22:33:06'!
ERROR!

!testRun: #XXXTest #test22CannotListCartAfterTimeout stamp: 'FR 12/1/2020 22:33:06'!
ERROR!

!testRun: #XXXTest #test23CannotListCartAfterTimeout stamp: 'FR 12/1/2020 22:33:06'!
FAILURE!

!testRun: #XXXTest #test24AddingToCartRefreshesTimeout stamp: 'FR 12/1/2020 22:33:06'!
ERROR!

!testRun: #XXXTest #test25ListingCartRefreshesTimeout stamp: 'FR 12/1/2020 22:33:06'!
ERROR!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 22:33:08'!
ERROR!
!XXX methodsFor: 'private - assertions' stamp: 'FR 12/1/2020 22:33:39' prior: 51222216!
assertCartHasNotExpired: aCartID

	((self inactivityTimeOf: aCartID) >= self inactivityTimeLimit) ifTrue: [
		activeCartsByCartID removeKey: aCartID.
		activeCartIDsByClientID removeKey: (clientIDByCartID at: aCartID).
		self error: self class timeoutErrorDescription
	].! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 22:33:43'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 22:33:43'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 22:33:43'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 22:33:43'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 22:33:43'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 22:33:43'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 22:33:43'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 22:33:43'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 22:33:43'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 22:33:43'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 22:33:43'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 22:33:43'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 22:33:43'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 22:33:43'!
PASSED!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 22:33:43'!
PASSED!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 22:33:43'!
PASSED!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 22:33:43'!
PASSED!

!testRun: #XXXTest #test22CannotListCartAfterTimeout stamp: 'FR 12/1/2020 22:33:43'!
PASSED!

!testRun: #XXXTest #test23CannotListCartAfterTimeout stamp: 'FR 12/1/2020 22:33:43'!
FAILURE!

!testRun: #XXXTest #test24AddingToCartRefreshesTimeout stamp: 'FR 12/1/2020 22:33:43'!
PASSED!

!testRun: #XXXTest #test25ListingCartRefreshesTimeout stamp: 'FR 12/1/2020 22:33:44'!
PASSED!

!testRun: #XXXTest #test23CannotListCartAfterTimeout stamp: 'FR 12/1/2020 22:33:44'!
FAILURE!
!XXX methodsFor: 'checkout' stamp: 'FR 12/1/2020 22:34:04' prior: 51219337!
checkout: aCartID withCreditCard: aCreditCardNumber expiring: anExpirationDate withOwner: anOwnerName 
	
	| clientCreditCard clientIDForThisCart |
	
	self assertCartIDIsValid: aCartID.
	self assertCartHasNotExpired: aCartID.
	
	clientCreditCard := self createCreditCardWithOwner: anOwnerName
					     number: aCreditCardNumber
					     andExpirationDate: anExpirationDate.
	
	Cashier toCheckout: (activeCartsByCartID at: aCartID)
		     charging: clientCreditCard
		     throught: merchantProcessor
		     on: FixedGregorianDate today
		     registeringOn: Set new.
	
	
	clientIDForThisCart := clientIDByCartID at: aCartID.
	
	booksByClientID at: clientIDForThisCart ifAbsentPut: Bag new.
	(booksByClientID at: clientIDForThisCart) addAll: (activeCartsByCartID at: aCartID) books.
	
	activeCartsByCartID removeKey: aCartID.
	activeCartIDsByClientID removeKey: clientIDForThisCart.! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 22:34:06'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 22:34:06'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 22:34:06'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 22:34:06'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 22:34:06'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 22:34:06'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 22:34:06'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 22:34:06'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 22:34:06'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 22:34:06'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 22:34:06'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 22:34:06'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 22:34:06'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 22:34:06'!
PASSED!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 22:34:06'!
PASSED!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 22:34:06'!
PASSED!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 22:34:06'!
PASSED!

!testRun: #XXXTest #test22CannotListCartAfterTimeout stamp: 'FR 12/1/2020 22:34:06'!
PASSED!

!testRun: #XXXTest #test23CannotListCartAfterTimeout stamp: 'FR 12/1/2020 22:34:06'!
PASSED!

!testRun: #XXXTest #test24AddingToCartRefreshesTimeout stamp: 'FR 12/1/2020 22:34:06'!
PASSED!

!testRun: #XXXTest #test25ListingCartRefreshesTimeout stamp: 'FR 12/1/2020 22:34:06'!
PASSED!
!XXX methodsFor: 'private - other' stamp: 'FR 12/1/2020 22:37:46'!
checkout: aCartID withCreditCard: aCreditCard

	(Cashier toCheckout: (self cartWithID: aCartID)
		     charging: aCreditCard
		     throught: merchantProcessor
		     on: clock now
		     registeringOn: {}) checkOut! !
!XXX methodsFor: 'checkout' stamp: 'FR 12/1/2020 22:40:16' prior: 51222554!
checkout: aCartID withCreditCard: aCreditCardNumber expiring: anExpirationDate withOwner: anOwnerName 
	
	| clientCreditCard clientIDForThisCart |
	
	self assertCartIDIsValid: aCartID.
	self assertCartHasNotExpired: aCartID.
	
	clientCreditCard := self createCreditCardWithOwner: anOwnerName
					     number: aCreditCardNumber
					     andExpirationDate: anExpirationDate.
	
	self checkout: aCartID withCreditCard: clientCreditCard.	
	
	clientIDForThisCart := clientIDByCartID at: aCartID.
	
	booksByClientID at: clientIDForThisCart ifAbsentPut: Bag new.
	(booksByClientID at: clientIDForThisCart) addAll: (activeCartsByCartID at: aCartID) books.
	
	activeCartsByCartID removeKey: aCartID.
	activeCartIDsByClientID removeKey: clientIDForThisCart.! !
!XXX methodsFor: 'private - other' stamp: 'FR 12/1/2020 22:42:52'!
removeCart: aCartID

	activeCartsByCartID removeKey: aCartID.
	activeCartIDsByClientID removeKey: (self clientIDForCart: aCartID)! !
!XXX methodsFor: 'private - other' stamp: 'FR 12/1/2020 22:43:23'!
clientIDForCart: aCartID

	^ clientIDByCartID at: aCartID.
! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 22:43:44'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 22:43:44'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 22:43:44'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 22:43:44'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 22:43:44'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 22:43:44'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 22:43:44'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 22:43:45'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 22:43:46'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 22:43:46'!
ERROR!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 22:43:47'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 22:43:47'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 22:43:48'!
ERROR!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 22:43:49'!
ERROR!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 22:43:50'!
PASSED!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 22:43:51'!
PASSED!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 22:43:51'!
PASSED!

!testRun: #XXXTest #test22CannotListCartAfterTimeout stamp: 'FR 12/1/2020 22:43:51'!
PASSED!

!testRun: #XXXTest #test23CannotListCartAfterTimeout stamp: 'FR 12/1/2020 22:43:52'!
PASSED!

!testRun: #XXXTest #test24AddingToCartRefreshesTimeout stamp: 'FR 12/1/2020 22:43:52'!
PASSED!

!testRun: #XXXTest #test25ListingCartRefreshesTimeout stamp: 'FR 12/1/2020 22:43:52'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 22:43:55'!
ERROR!
!XXX methodsFor: 'private - other' stamp: 'FR 12/1/2020 22:44:44' prior: 51222651!
checkout: aCartID withCreditCard: aCreditCard

	(Cashier toCheckout: (self cartWithID: aCartID)
		     charging: aCreditCard
		     throught: merchantProcessor
		     on: clock now
		     registeringOn: Set new) checkOut! !
!XXX methodsFor: 'private - other' stamp: 'FR 12/1/2020 22:44:51' prior: 51222769!
checkout: aCartID withCreditCard: aCreditCard

	(Cashier toCheckout: (self cartWithID: aCartID)
		     charging: aCreditCard
		     throught: merchantProcessor
		     on: clock now
		     registeringOn: Bag new) checkOut! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 22:44:53'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 22:44:53'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 22:44:53'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 22:44:53'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 22:44:53'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 22:44:53'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 22:44:53'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 22:44:53'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 22:44:53'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 22:44:53'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 22:44:53'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 22:44:53'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 22:44:53'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 22:44:53'!
PASSED!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 22:44:53'!
PASSED!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 22:44:53'!
PASSED!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 22:44:53'!
PASSED!

!testRun: #XXXTest #test22CannotListCartAfterTimeout stamp: 'FR 12/1/2020 22:44:53'!
PASSED!

!testRun: #XXXTest #test23CannotListCartAfterTimeout stamp: 'FR 12/1/2020 22:44:53'!
PASSED!

!testRun: #XXXTest #test24AddingToCartRefreshesTimeout stamp: 'FR 12/1/2020 22:44:53'!
PASSED!

!testRun: #XXXTest #test25ListingCartRefreshesTimeout stamp: 'FR 12/1/2020 22:44:53'!
PASSED!
!XXX methodsFor: 'private - assertions' stamp: 'FR 12/1/2020 22:45:14' prior: 51222473!
assertCartHasNotExpired: aCartID

	((self inactivityTimeOf: aCartID) >= self inactivityTimeLimit) ifTrue: [
		self removeCart: aCartID.
		self error: self class timeoutErrorDescription
	].! !
!XXX methodsFor: 'checkout' stamp: 'FR 12/1/2020 22:48:24' prior: 51222661!
checkout: aCartID withCreditCard: aCreditCardNumber expiring: anExpirationDate withOwner: anOwnerName 
	
	| clientCreditCard clientIDForThisCart |
	
	self assertCartIDIsValid: aCartID.
	self assertCartHasNotExpired: aCartID.
	
	clientCreditCard := self createCreditCardWithOwner: anOwnerName
					     number: aCreditCardNumber
					     andExpirationDate: anExpirationDate.
	
	self checkout: aCartID withCreditCard: clientCreditCard.	
	
	clientIDForThisCart := clientIDByCartID at: aCartID.
		
	booksByClientID at: clientIDForThisCart ifAbsentPut: Bag new.
	(booksByClientID at: clientIDForThisCart) addAll: (activeCartsByCartID at: aCartID) books.
	
	self removeCart: aCartID! !
!XXX methodsFor: 'private - other' stamp: 'FR 12/1/2020 22:50:56'!
commitPurchaseOf: aCartID
		
	booksByClientID at: (self clientIDForCart: aCartID) ifAbsentPut: Bag new.
	(booksByClientID at: (self clientIDForCart: aCartID)) addAll: (activeCartsByCartID at: aCartID) books.! !
!XXX methodsFor: 'checkout' stamp: 'FR 12/1/2020 22:51:14' prior: 51222865!
checkout: aCartID withCreditCard: aCreditCardNumber expiring: anExpirationDate withOwner: anOwnerName 
	
	| clientCreditCard |
	
	self assertCartIDIsValid: aCartID.
	self assertCartHasNotExpired: aCartID.
	
	clientCreditCard := self createCreditCardWithOwner: anOwnerName
					     number: aCreditCardNumber
					     andExpirationDate: anExpirationDate.
	
	self checkout: aCartID withCreditCard: clientCreditCard.	
	self commitPurchaseOf: aCartID.
	self removeCart: aCartID! !

!testRun: #XXXTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 22:51:23'!
PASSED!

!testRun: #XXXTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 22:51:23'!
PASSED!

!testRun: #XXXTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 22:51:23'!
PASSED!

!testRun: #XXXTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 22:51:23'!
PASSED!

!testRun: #XXXTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 22:51:23'!
PASSED!

!testRun: #XXXTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 22:51:24'!
PASSED!

!testRun: #XXXTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 22:51:24'!
PASSED!

!testRun: #XXXTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 22:51:24'!
PASSED!

!testRun: #XXXTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 22:51:24'!
PASSED!

!testRun: #XXXTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 22:51:24'!
PASSED!

!testRun: #XXXTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 22:51:24'!
PASSED!

!testRun: #XXXTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 22:51:24'!
PASSED!

!testRun: #XXXTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 22:51:24'!
PASSED!

!testRun: #XXXTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 22:51:24'!
PASSED!

!testRun: #XXXTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 22:51:24'!
PASSED!

!testRun: #XXXTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 22:51:24'!
PASSED!

!testRun: #XXXTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 22:51:24'!
PASSED!

!testRun: #XXXTest #test22CannotListCartAfterTimeout stamp: 'FR 12/1/2020 22:51:24'!
PASSED!

!testRun: #XXXTest #test23CannotListCartAfterTimeout stamp: 'FR 12/1/2020 22:51:24'!
PASSED!

!testRun: #XXXTest #test24AddingToCartRefreshesTimeout stamp: 'FR 12/1/2020 22:51:24'!
PASSED!

!testRun: #XXXTest #test25ListingCartRefreshesTimeout stamp: 'FR 12/1/2020 22:51:24'!
PASSED!
!XXX methodsFor: 'private - other' stamp: 'FR 12/1/2020 22:53:29'!
retireCart: aCartID

	activeCartsByCartID removeKey: aCartID.
	activeCartIDsByClientID removeKey: (self clientIDForCart: aCartID)! !
!XXX methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 22:53:30' prior: 51222856!
assertCartHasNotExpired: aCartID

	((self inactivityTimeOf: aCartID) >= self inactivityTimeLimit) ifTrue: [
		self retireCart: aCartID.
		self error: self class timeoutErrorDescription
	].! !
!XXX methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 22:53:30' prior: 51222898!
checkout: aCartID withCreditCard: aCreditCardNumber expiring: anExpirationDate withOwner: anOwnerName 
	
	| clientCreditCard |
	
	self assertCartIDIsValid: aCartID.
	self assertCartHasNotExpired: aCartID.
	
	clientCreditCard := self createCreditCardWithOwner: anOwnerName
					     number: aCreditCardNumber
					     andExpirationDate: anExpirationDate.
	
	self checkout: aCartID withCreditCard: clientCreditCard.	
	self commitPurchaseOf: aCartID.
	self retireCart: aCartID! !

!methodRemoval: XXX #removeCart: stamp: 'FR 12/1/2020 22:53:30'!
removeCart: aCartID

	activeCartsByCartID removeKey: aCartID.
	activeCartIDsByClientID removeKey: (self clientIDForCart: aCartID)!
!XXX methodsFor: 'private - other' stamp: 'FR 12/1/2020 22:55:36' prior: 51219367!
createCartFor: aClientID
	
	currentCartID := currentCartID + 1.	
	
	activeCartIDsByClientID at: aClientID ifAbsentPut: Set new.
	(activeCartIDsByClientID at: aClientID) add: currentCartID.	
	
	activeCartsByCartID at: currentCartID put: (Cart acceptingItemsOf: catalog).
	
	clientIDByCartID at: currentCartID put: aClientID.
	
	self refreshTimestampOf: currentCartID	

! !

!classRenamed: #XXX as: #InternalStoreInterface stamp: 'FR 12/1/2020 22:58:31'!
Smalltalk renameClassNamed: #XXX as: #InternalStoreInterface!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 22:58:32' prior: 51222376!
test23CannotListCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
		anXXX checkout: aCartID
			    withCreditCard: testObjectsFactory aValidCreditCardNumber
			    expiring: testObjectsFactory aNonExpiredDate
			    withOwner: testObjectsFactory aValidOwnerName
	]
		raise: testObjectsFactory functionalError
		withMessageText: InternalStoreInterface timeoutErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 22:58:32' prior: 51221303!
test17MultiplePurchasesBySameClientAreListedCorrectly

	| anXXX aCartID anotherCartID expectedPurchases |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	expectedPurchases := Bag new.
	expectedPurchases add: testObjectsFactory aBookSoldByPublisher.
	expectedPurchases add: testObjectsFactory anotherBookSoldByPublisher 
				       withOccurrences: 4.

	self assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 22:58:32' prior: 51222271!
test24AddingToCartRefreshesTimeout

	| anXXX aCartID aClock expectedList |
	
	aClock := Clock new.
		
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX add: 1 of: testObjectsFactory anotherBookSoldByPublisher toCart: aCartID.
	
	expectedList := {testObjectsFactory aBookSoldByPublisher. testObjectsFactory anotherBookSoldByPublisher} asBag.
	
	self assert: (anXXX listCart: aCartID) equals: expectedList! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 22:58:32' prior: 51222331!
test25ListingCartRefreshesTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	self assert: (anXXX listCart: aCartID) equals: Bag new! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 22:58:32' prior: 51221550!
test02CannotCreateCartWithIncorrectPassword

	| anXXX |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator invalidClientPassword
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	self  should: [
			anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
				    andPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalStoreInterface incorrectPasswordErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 22:58:32' prior: 51220911!
test04CannotAddToCartWithInvalidCartID

	| anXXX |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	self  should: [ anXXX add: 1
					   of: testObjectsFactory aBookSoldByPublisher
					   toCart: testObjectsFactory anInvalidCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalStoreInterface invalidCartIDErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 22:58:32' prior: 51221356!
test18PurchasesByMultipleClientAreListedCorrectly

	| anXXX aCartID anotherCartID expectedPurchases1 expectedPurchases2 |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	expectedPurchases1 := Bag new.
	expectedPurchases1 add: testObjectsFactory aBookSoldByPublisher.

	expectedPurchases2 := Bag new.
	expectedPurchases2 add: testObjectsFactory anotherBookSoldByPublisher 
				         withOccurrences: 4.

	self assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases1.
	self assert: (anXXX listPurchasesFor: testObjectsFactory anotherValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases2! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 22:58:32' prior: 51221531!
test01CannotCreateCartWithInvalidID

	| anXXX |
		
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator invalidClientID
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation 
				andClock: Clock new.
	
	self  should: [
			anXXX createCartForClientWithID: testObjectsFactory anInvalidClientID 
				    andPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalStoreInterface invalidClientIDErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 22:58:32' prior: 51221588!
test22CannotListCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [ anXXX listCart: aCartID ]
		raise: testObjectsFactory functionalError
		withMessageText: InternalStoreInterface timeoutErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 22:58:32' prior: 51221037!
test12CannotCheckOutWithInvalidCartID

	| anXXX |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	self  should: [
			anXXX checkout: testObjectsFactory anInvalidCartID
				    withCreditCard: testObjectsFactory aValidCreditCardNumber
				    expiring: testObjectsFactory aNonExpiredDate
				    withOwner: testObjectsFactory aValidOwnerName
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalStoreInterface invalidCartIDErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 22:58:32' prior: 51221120!
test13CannotCheckOutWithInvalidCreditCard

	| anXXX aCartID |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  should: [
			anXXX checkout: aCartID 
				    withCreditCard: testObjectsFactory anInvalidCreditCardNumber
				    expiring: testObjectsFactory aNonExpiredDate
				    withOwner: testObjectsFactory aValidOwnerName ]
		raise: testObjectsFactory functionalError
		withMessageText: InternalStoreInterface invalidCreditCardErrorDescription.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 22:58:32' prior: 51221230!
test16CannotListPurchasesForClientWithIncorrectPassword

	| anXXX |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator invalidClientPassword
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	self  should: [
			anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
				    withPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalStoreInterface incorrectPasswordErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 22:58:32' prior: 51220952!
test08MultipleBooksAreAddedSuccessfully

	| anXXX aCartID |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 5
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  assert: (anXXX listCart: aCartID) 
		equals: (Bag new add: testObjectsFactory aBookSoldByPublisher withOccurrences: 5; yourself)! !
!AuthenticatorSimulator class methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 22:58:32' prior: 51220815!
invalidClientID

	^ self new initializeWith: [ self error: InternalStoreInterface invalidClientIDErrorDescription ]! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 22:58:32' prior: 51220930!
test07BookIsAddedSuccessfully

	| anXXX aCartID |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  assert: (anXXX listCart: aCartID) 
		equals: (Bag with: testObjectsFactory aBookSoldByPublisher)! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 22:58:32' prior: 51221190!
test15CannotListPurchasesForInvalidClientID

	| anXXX |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator invalidClientID
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	self  should: [
			anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
				    withPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalStoreInterface invalidClientIDErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 22:58:32' prior: 51220976!
test11CannotListWithInvalidCartID

	| anXXX |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	self  should: [
			anXXX listCart: testObjectsFactory anInvalidCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalStoreInterface invalidCartIDErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 22:58:32' prior: 51221570!
test03SuccessfulyCreatedCartIsEmpty

	| anXXX aCartID |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
				     andPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (anXXX listCart: aCartID) isEmpty! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 22:58:32' prior: 51221914!
test21CannotAddToCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [anXXX add: 1
					 of: testObjectsFactory aBookSoldByPublisher
					 toCart: aCartID
		]
		raise:  testObjectsFactory functionalError
		withMessageText: InternalStoreInterface timeoutErrorDescription! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 22:58:33' prior: 51221416!
test19PurchaseListForClientThatNeverCreatedCartIsEmpty

	| anXXX |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID withPassword: testObjectsFactory aCorrectPassword) 
		equals: testObjectsFactory anEmptyBag.! !
!AuthenticatorSimulator class methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 22:58:33' prior: 51220822!
invalidClientPassword

	^ self new initializeWith: [ self error: InternalStoreInterface incorrectPasswordErrorDescription ]! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 22:58:33' prior: 51221434!
test20PurchaseListOnlyShowsCheckedOutItems

	|anXXX aCartID |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
			
	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID withPassword: testObjectsFactory aCorrectPassword) 
		equals: testObjectsFactory anEmptyBag.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 22:58:33' prior: 51221089!
test14SuccessfulCheckoutIsDoneCorrectly

	| anXXX aCartID |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
					withPassword: testObjectsFactory aCorrectPassword)
		equals: (Bag with: testObjectsFactory aBookSoldByPublisher)! !

!classRenamed: #XXXTest as: #InternalStoreInterfaceTest stamp: 'FR 12/1/2020 22:58:45'!
Smalltalk renameClassNamed: #XXXTest as: #InternalStoreInterfaceTest!
!Cashier methodsFor: 'checkout - private' stamp: 'FR 12/1/2020 23:00:10' prior: 51216443!
registerSale

	salesBook add: total! !

!methodRemoval: Cashier #createSale stamp: 'FR 12/1/2020 23:00:14'!
createSale

	^ Sale of: total
!

!classRemoval: #Sale stamp: 'FR 12/1/2020 23:00:19'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FR 12/1/2020 23:00:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FR 12/1/2020 23:00:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FR 12/1/2020 23:00:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FR 12/1/2020 23:00:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FR 12/1/2020 23:00:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FR 12/1/2020 23:00:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FR 12/1/2020 23:00:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FR 12/1/2020 23:00:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FR 12/1/2020 23:00:25'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FR 12/1/2020 23:00:25'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FR 12/1/2020 23:00:25'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FR 12/1/2020 23:00:25'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FR 12/1/2020 23:00:25'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FR 12/1/2020 23:00:25'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FR 12/1/2020 23:00:25'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'FR 12/1/2020 23:00:36' prior: 51215762!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first = total.! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FR 12/1/2020 23:00:37'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FR 12/1/2020 23:00:38'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FR 12/1/2020 23:00:38'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FR 12/1/2020 23:00:38'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FR 12/1/2020 23:00:38'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FR 12/1/2020 23:00:39'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FR 12/1/2020 23:00:39'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberCannotHaveLessThanSixteenDigits stamp: 'FR 12/1/2020 23:00:40'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNameCannotBeEmpty stamp: 'FR 12/1/2020 23:00:40'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberCannotHaveMoreThanSixteenDigits stamp: 'FR 12/1/2020 23:00:41'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithValidInfoIsCorrectlyCreated stamp: 'FR 12/1/2020 23:00:41'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 23:00:42'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 23:00:42'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 23:00:42'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 23:00:43'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 23:00:43'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 23:00:43'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 23:00:43'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 23:00:43'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 23:00:43'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 23:00:43'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 23:00:43'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 23:00:43'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 23:00:43'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 23:00:43'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 23:00:43'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 23:00:43'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 23:00:43'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test22CannotListCartAfterTimeout stamp: 'FR 12/1/2020 23:00:43'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test23CannotListCartAfterTimeout stamp: 'FR 12/1/2020 23:00:43'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test24AddingToCartRefreshesTimeout stamp: 'FR 12/1/2020 23:00:43'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test25ListingCartRefreshesTimeout stamp: 'FR 12/1/2020 23:00:43'!
PASSED!

TestCase subclass: #InternalStoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalStoreInterfaceTest category: 'TusLibros' stamp: 'FR 12/1/2020 23:00:53'!
TestCase subclass: #InternalStoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: InternalStoreInterfaceTest #authenticateWithID:andPassword: stamp: 'FR 12/1/2020 23:01:06'!
authenticateWithID: aClientID andPassword: aPassword

	authenticatorBehavior value!

!testRun: #InternalStoreInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/1/2020 23:01:08'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/1/2020 23:01:08'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/1/2020 23:01:08'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/1/2020 23:01:08'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 23:01:08'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 23:01:08'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 23:01:08'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 23:01:09'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 23:01:09'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 23:01:09'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 23:01:09'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 23:01:09'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 23:01:09'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 23:01:09'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 23:01:09'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 23:01:09'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 23:01:09'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test22CannotListCartAfterTimeout stamp: 'FR 12/1/2020 23:01:09'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test23CannotListCartAfterTimeout stamp: 'FR 12/1/2020 23:01:09'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test24AddingToCartRefreshesTimeout stamp: 'FR 12/1/2020 23:01:09'!
PASSED!

!testRun: #InternalStoreInterfaceTest #test25ListingCartRefreshesTimeout stamp: 'FR 12/1/2020 23:01:09'!
PASSED!
!InternalStoreInterfaceTest methodsFor: 'tests - adding' stamp: 'FR 12/1/2020 23:01:22'!
test05BookIsAddedSuccessfully

	| anXXX aCartID |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  assert: (anXXX listCart: aCartID) 
		equals: (Bag with: testObjectsFactory aBookSoldByPublisher)! !

!methodRemoval: InternalStoreInterfaceTest #test07BookIsAddedSuccessfully stamp: 'FR 12/1/2020 23:01:22'!
test07BookIsAddedSuccessfully

	| anXXX aCartID |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  assert: (anXXX listCart: aCartID) 
		equals: (Bag with: testObjectsFactory aBookSoldByPublisher)!
!InternalStoreInterfaceTest methodsFor: 'tests - adding' stamp: 'FR 12/1/2020 23:01:25'!
test06MultipleBooksAreAddedSuccessfully

	| anXXX aCartID |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 5
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  assert: (anXXX listCart: aCartID) 
		equals: (Bag new add: testObjectsFactory aBookSoldByPublisher withOccurrences: 5; yourself)! !

!methodRemoval: InternalStoreInterfaceTest #test08MultipleBooksAreAddedSuccessfully stamp: 'FR 12/1/2020 23:01:26'!
test08MultipleBooksAreAddedSuccessfully

	| anXXX aCartID |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 5
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  assert: (anXXX listCart: aCartID) 
		equals: (Bag new add: testObjectsFactory aBookSoldByPublisher withOccurrences: 5; yourself)!
!InternalStoreInterfaceTest methodsFor: 'tests - listing cart' stamp: 'FR 12/1/2020 23:01:31'!
test07CannotListWithInvalidCartID

	| anXXX |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	self  should: [
			anXXX listCart: testObjectsFactory anInvalidCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalStoreInterface invalidCartIDErrorDescription! !

!methodRemoval: InternalStoreInterfaceTest #test11CannotListWithInvalidCartID stamp: 'FR 12/1/2020 23:01:31'!
test11CannotListWithInvalidCartID

	| anXXX |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	self  should: [
			anXXX listCart: testObjectsFactory anInvalidCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalStoreInterface invalidCartIDErrorDescription!
!InternalStoreInterfaceTest methodsFor: 'tests - checkout' stamp: 'FR 12/1/2020 23:01:35'!
test08CannotCheckOutWithInvalidCartID

	| anXXX |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	self  should: [
			anXXX checkout: testObjectsFactory anInvalidCartID
				    withCreditCard: testObjectsFactory aValidCreditCardNumber
				    expiring: testObjectsFactory aNonExpiredDate
				    withOwner: testObjectsFactory aValidOwnerName
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalStoreInterface invalidCartIDErrorDescription! !

!methodRemoval: InternalStoreInterfaceTest #test12CannotCheckOutWithInvalidCartID stamp: 'FR 12/1/2020 23:01:35'!
test12CannotCheckOutWithInvalidCartID

	| anXXX |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	self  should: [
			anXXX checkout: testObjectsFactory anInvalidCartID
				    withCreditCard: testObjectsFactory aValidCreditCardNumber
				    expiring: testObjectsFactory aNonExpiredDate
				    withOwner: testObjectsFactory aValidOwnerName
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalStoreInterface invalidCartIDErrorDescription!
!InternalStoreInterfaceTest methodsFor: 'tests - checkout' stamp: 'FR 12/1/2020 23:01:40'!
test09CannotCheckOutWithInvalidCreditCard

	| anXXX aCartID |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  should: [
			anXXX checkout: aCartID 
				    withCreditCard: testObjectsFactory anInvalidCreditCardNumber
				    expiring: testObjectsFactory aNonExpiredDate
				    withOwner: testObjectsFactory aValidOwnerName ]
		raise: testObjectsFactory functionalError
		withMessageText: InternalStoreInterface invalidCreditCardErrorDescription.! !

!methodRemoval: InternalStoreInterfaceTest #test13CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/1/2020 23:01:40'!
test13CannotCheckOutWithInvalidCreditCard

	| anXXX aCartID |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  should: [
			anXXX checkout: aCartID 
				    withCreditCard: testObjectsFactory anInvalidCreditCardNumber
				    expiring: testObjectsFactory aNonExpiredDate
				    withOwner: testObjectsFactory aValidOwnerName ]
		raise: testObjectsFactory functionalError
		withMessageText: InternalStoreInterface invalidCreditCardErrorDescription.!
!InternalStoreInterfaceTest methodsFor: 'tests - checkout' stamp: 'FR 12/1/2020 23:01:43'!
test10SuccessfulCheckoutIsDoneCorrectly

	| anXXX aCartID |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
					withPassword: testObjectsFactory aCorrectPassword)
		equals: (Bag with: testObjectsFactory aBookSoldByPublisher)! !

!methodRemoval: InternalStoreInterfaceTest #test14SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/1/2020 23:01:44'!
test14SuccessfulCheckoutIsDoneCorrectly

	| anXXX aCartID |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
					withPassword: testObjectsFactory aCorrectPassword)
		equals: (Bag with: testObjectsFactory aBookSoldByPublisher)!
!InternalStoreInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/1/2020 23:01:48'!
test11CannotListPurchasesForInvalidClientID

	| anXXX |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator invalidClientID
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	self  should: [
			anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
				    withPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalStoreInterface invalidClientIDErrorDescription! !

!methodRemoval: InternalStoreInterfaceTest #test15CannotListPurchasesForInvalidClientID stamp: 'FR 12/1/2020 23:01:49'!
test15CannotListPurchasesForInvalidClientID

	| anXXX |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator invalidClientID
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	self  should: [
			anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
				    withPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalStoreInterface invalidClientIDErrorDescription!
!InternalStoreInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/1/2020 23:01:53'!
test12CannotListPurchasesForClientWithIncorrectPassword

	| anXXX |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator invalidClientPassword
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	self  should: [
			anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
				    withPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalStoreInterface incorrectPasswordErrorDescription! !

!methodRemoval: InternalStoreInterfaceTest #test16CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/1/2020 23:01:53'!
test16CannotListPurchasesForClientWithIncorrectPassword

	| anXXX |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator invalidClientPassword
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	self  should: [
			anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
				    withPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalStoreInterface incorrectPasswordErrorDescription!
!InternalStoreInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/1/2020 23:01:57'!
test13MultiplePurchasesBySameClientAreListedCorrectly

	| anXXX aCartID anotherCartID expectedPurchases |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	expectedPurchases := Bag new.
	expectedPurchases add: testObjectsFactory aBookSoldByPublisher.
	expectedPurchases add: testObjectsFactory anotherBookSoldByPublisher 
				       withOccurrences: 4.

	self assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases! !

!methodRemoval: InternalStoreInterfaceTest #test17MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/1/2020 23:01:58'!
test17MultiplePurchasesBySameClientAreListedCorrectly

	| anXXX aCartID anotherCartID expectedPurchases |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	expectedPurchases := Bag new.
	expectedPurchases add: testObjectsFactory aBookSoldByPublisher.
	expectedPurchases add: testObjectsFactory anotherBookSoldByPublisher 
				       withOccurrences: 4.

	self assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases!
!InternalStoreInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/1/2020 23:02:02'!
test14PurchasesByMultipleClientAreListedCorrectly

	| anXXX aCartID anotherCartID expectedPurchases1 expectedPurchases2 |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	expectedPurchases1 := Bag new.
	expectedPurchases1 add: testObjectsFactory aBookSoldByPublisher.

	expectedPurchases2 := Bag new.
	expectedPurchases2 add: testObjectsFactory anotherBookSoldByPublisher 
				         withOccurrences: 4.

	self assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases1.
	self assert: (anXXX listPurchasesFor: testObjectsFactory anotherValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases2! !

!methodRemoval: InternalStoreInterfaceTest #test18PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/1/2020 23:02:03'!
test18PurchasesByMultipleClientAreListedCorrectly

	| anXXX aCartID anotherCartID expectedPurchases1 expectedPurchases2 |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	expectedPurchases1 := Bag new.
	expectedPurchases1 add: testObjectsFactory aBookSoldByPublisher.

	expectedPurchases2 := Bag new.
	expectedPurchases2 add: testObjectsFactory anotherBookSoldByPublisher 
				         withOccurrences: 4.

	self assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases1.
	self assert: (anXXX listPurchasesFor: testObjectsFactory anotherValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases2!
!InternalStoreInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/1/2020 23:02:13'!
test15PurchaseListForClientThatNeverCreatedCartIsEmpty

	| anXXX |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID withPassword: testObjectsFactory aCorrectPassword) 
		equals: testObjectsFactory anEmptyBag.! !

!methodRemoval: InternalStoreInterfaceTest #test19PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/1/2020 23:02:14'!
test19PurchaseListForClientThatNeverCreatedCartIsEmpty

	| anXXX |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID withPassword: testObjectsFactory aCorrectPassword) 
		equals: testObjectsFactory anEmptyBag.!
!InternalStoreInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/1/2020 23:02:20'!
test16PurchaseListOnlyShowsCheckedOutItems

	|anXXX aCartID |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
			
	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID withPassword: testObjectsFactory aCorrectPassword) 
		equals: testObjectsFactory anEmptyBag.! !

!methodRemoval: InternalStoreInterfaceTest #test20PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/1/2020 23:02:20'!
test20PurchaseListOnlyShowsCheckedOutItems

	|anXXX aCartID |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
			
	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID withPassword: testObjectsFactory aCorrectPassword) 
		equals: testObjectsFactory anEmptyBag.!
!InternalStoreInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/1/2020 23:02:26'!
test17CannotAddToCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [anXXX add: 1
					 of: testObjectsFactory aBookSoldByPublisher
					 toCart: aCartID
		]
		raise:  testObjectsFactory functionalError
		withMessageText: InternalStoreInterface timeoutErrorDescription! !

!methodRemoval: InternalStoreInterfaceTest #test21CannotAddToCartAfterTimeout stamp: 'FR 12/1/2020 23:02:26'!
test21CannotAddToCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [anXXX add: 1
					 of: testObjectsFactory aBookSoldByPublisher
					 toCart: aCartID
		]
		raise:  testObjectsFactory functionalError
		withMessageText: InternalStoreInterface timeoutErrorDescription!
!InternalStoreInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/1/2020 23:02:30'!
test18CannotListCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [ anXXX listCart: aCartID ]
		raise: testObjectsFactory functionalError
		withMessageText: InternalStoreInterface timeoutErrorDescription! !

!methodRemoval: InternalStoreInterfaceTest #test22CannotListCartAfterTimeout stamp: 'FR 12/1/2020 23:02:30'!
test22CannotListCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [ anXXX listCart: aCartID ]
		raise: testObjectsFactory functionalError
		withMessageText: InternalStoreInterface timeoutErrorDescription!
!InternalStoreInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/1/2020 23:02:34'!
test19CannotListCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
		anXXX checkout: aCartID
			    withCreditCard: testObjectsFactory aValidCreditCardNumber
			    expiring: testObjectsFactory aNonExpiredDate
			    withOwner: testObjectsFactory aValidOwnerName
	]
		raise: testObjectsFactory functionalError
		withMessageText: InternalStoreInterface timeoutErrorDescription! !

!methodRemoval: InternalStoreInterfaceTest #test23CannotListCartAfterTimeout stamp: 'FR 12/1/2020 23:02:34'!
test23CannotListCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
		anXXX checkout: aCartID
			    withCreditCard: testObjectsFactory aValidCreditCardNumber
			    expiring: testObjectsFactory aNonExpiredDate
			    withOwner: testObjectsFactory aValidOwnerName
	]
		raise: testObjectsFactory functionalError
		withMessageText: InternalStoreInterface timeoutErrorDescription!
!InternalStoreInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/1/2020 23:02:37'!
test20AddingToCartRefreshesTimeout

	| anXXX aCartID aClock expectedList |
	
	aClock := Clock new.
		
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX add: 1 of: testObjectsFactory anotherBookSoldByPublisher toCart: aCartID.
	
	expectedList := {testObjectsFactory aBookSoldByPublisher. testObjectsFactory anotherBookSoldByPublisher} asBag.
	
	self assert: (anXXX listCart: aCartID) equals: expectedList! !

!methodRemoval: InternalStoreInterfaceTest #test24AddingToCartRefreshesTimeout stamp: 'FR 12/1/2020 23:02:38'!
test24AddingToCartRefreshesTimeout

	| anXXX aCartID aClock expectedList |
	
	aClock := Clock new.
		
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX add: 1 of: testObjectsFactory anotherBookSoldByPublisher toCart: aCartID.
	
	expectedList := {testObjectsFactory aBookSoldByPublisher. testObjectsFactory anotherBookSoldByPublisher} asBag.
	
	self assert: (anXXX listCart: aCartID) equals: expectedList!
!InternalStoreInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/1/2020 23:02:40'!
test21ListingCartRefreshesTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	self assert: (anXXX listCart: aCartID) equals: Bag new! !

!methodRemoval: InternalStoreInterfaceTest #test25ListingCartRefreshesTimeout stamp: 'FR 12/1/2020 23:02:40'!
test25ListingCartRefreshesTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	self assert: (anXXX listCart: aCartID) equals: Bag new!
!InternalStoreInterface class methodsFor: 'instance creation' stamp: 'FR 12/1/2020 23:13:28' prior: 51220683!
withAuthenticator: anAuthenticator catalog: aCatalog merchantProcessor: aMerchantProcessor andClock: aClock  

	^self new initializeWithAuthenticator: anAuthenticator
			catalog: aCatalog
			merchantProcessor: aMerchantProcessor
			andClock: aClock! !
!InternalStoreInterfaceTest methodsFor: 'tests - checkout' stamp: 'FR 12/1/2020 23:13:50' prior: 51224102!
test09CannotCheckOutWithInvalidCreditCard

	| anXXX aCartID |
	
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  should: [
			anXXX checkout: aCartID 
				    withCreditCard: testObjectsFactory anInvalidCreditCardNumber
				    expiring: testObjectsFactory aNonExpiredDate
				    withOwner: testObjectsFactory aValidOwnerName
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalStoreInterface invalidCreditCardErrorDescription.! !
!InternalStoreInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/1/2020 23:14:21' prior: 51224635!
test17CannotAddToCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
			anXXX add: 1
				    of: testObjectsFactory aBookSoldByPublisher
				    toCart: aCartID
		]
		raise:  testObjectsFactory functionalError
		withMessageText: InternalStoreInterface timeoutErrorDescription! !
!InternalStoreInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/1/2020 23:14:42' prior: 51224735!
test19CannotListCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
		anXXX checkout: aCartID
			    withCreditCard: testObjectsFactory aValidCreditCardNumber
			    expiring: testObjectsFactory aNonExpiredDate
			    withOwner: testObjectsFactory aValidOwnerName
	]
		raise: testObjectsFactory functionalError
		withMessageText: InternalStoreInterface timeoutErrorDescription! !
!InternalStoreInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/1/2020 23:15:08' prior: 51224974!
test19CannotListCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalStoreInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
			anXXX checkout: aCartID
			    	    withCreditCard: testObjectsFactory aValidCreditCardNumber
			    	    expiring: testObjectsFactory aNonExpiredDate
			    	    withOwner: testObjectsFactory aValidOwnerName
	]
		raise: testObjectsFactory functionalError
		withMessageText: InternalStoreInterface timeoutErrorDescription! !

!classRenamed: #InternalStoreInterface as: #InternalTusLibrosInterface stamp: 'FR 12/1/2020 23:35:26'!
Smalltalk renameClassNamed: #InternalStoreInterface as: #InternalTusLibrosInterface!
!InternalStoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 23:35:26' prior: 51224164!
test10SuccessfulCheckoutIsDoneCorrectly

	| anXXX aCartID |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
					withPassword: testObjectsFactory aCorrectPassword)
		equals: (Bag with: testObjectsFactory aBookSoldByPublisher)! !
!InternalStoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 23:35:26' prior: 51223968!
test06MultipleBooksAreAddedSuccessfully

	| anXXX aCartID |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 5
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  assert: (anXXX listCart: aCartID) 
		equals: (Bag new add: testObjectsFactory aBookSoldByPublisher withOccurrences: 5; yourself)! !
!InternalStoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 23:35:26' prior: 51224687!
test18CannotListCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [ anXXX listCart: aCartID ]
		raise: testObjectsFactory functionalError
		withMessageText: InternalTusLibrosInterface timeoutErrorDescription! !
!InternalStoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 23:35:26' prior: 51224947!
test17CannotAddToCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
			anXXX add: 1
				    of: testObjectsFactory aBookSoldByPublisher
				    toCart: aCartID
		]
		raise:  testObjectsFactory functionalError
		withMessageText: InternalTusLibrosInterface timeoutErrorDescription! !
!InternalStoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 23:35:26' prior: 51223495!
test03SuccessfulyCreatedCartIsEmpty

	| anXXX aCartID |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
				     andPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (anXXX listCart: aCartID) isEmpty! !
!InternalStoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 23:35:26' prior: 51224794!
test20AddingToCartRefreshesTimeout

	| anXXX aCartID aClock expectedList |
	
	aClock := Clock new.
		
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX add: 1 of: testObjectsFactory anotherBookSoldByPublisher toCart: aCartID.
	
	expectedList := {testObjectsFactory aBookSoldByPublisher. testObjectsFactory anotherBookSoldByPublisher} asBag.
	
	self assert: (anXXX listCart: aCartID) equals: expectedList! !
!InternalStoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 23:35:27' prior: 51225004!
test19CannotListCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
			anXXX checkout: aCartID
			    	    withCreditCard: testObjectsFactory aValidCreditCardNumber
			    	    expiring: testObjectsFactory aNonExpiredDate
			    	    withOwner: testObjectsFactory aValidOwnerName
	]
		raise: testObjectsFactory functionalError
		withMessageText: InternalTusLibrosInterface timeoutErrorDescription! !
!AuthenticatorSimulator class methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 23:35:27' prior: 51223426!
invalidClientID

	^ self new initializeWith: [ self error: InternalTusLibrosInterface invalidClientIDErrorDescription ]! !
!AuthenticatorSimulator class methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 23:35:27' prior: 51223559!
invalidClientPassword

	^ self new initializeWith: [ self error: InternalTusLibrosInterface incorrectPasswordErrorDescription ]! !
!InternalStoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 23:35:27' prior: 51224916!
test09CannotCheckOutWithInvalidCreditCard

	| anXXX aCartID |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  should: [
			anXXX checkout: aCartID 
				    withCreditCard: testObjectsFactory anInvalidCreditCardNumber
				    expiring: testObjectsFactory aNonExpiredDate
				    withOwner: testObjectsFactory aValidOwnerName
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalTusLibrosInterface invalidCreditCardErrorDescription.! !
!InternalStoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 23:35:27' prior: 51223178!
test02CannotCreateCartWithIncorrectPassword

	| anXXX |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientPassword
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	self  should: [
			anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
				    andPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalTusLibrosInterface incorrectPasswordErrorDescription! !
!InternalStoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 23:35:27' prior: 51223199!
test04CannotAddToCartWithInvalidCartID

	| anXXX |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	self  should: [ anXXX add: 1
					   of: testObjectsFactory aBookSoldByPublisher
					   toCart: testObjectsFactory anInvalidCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalTusLibrosInterface invalidCartIDErrorDescription! !
!InternalStoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 23:35:27' prior: 51224584!
test16PurchaseListOnlyShowsCheckedOutItems

	|anXXX aCartID |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
			
	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID withPassword: testObjectsFactory aCorrectPassword) 
		equals: testObjectsFactory anEmptyBag.! !
!InternalStoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 23:35:27' prior: 51224229!
test11CannotListPurchasesForInvalidClientID

	| anXXX |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientID
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	self  should: [
			anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
				    withPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalTusLibrosInterface invalidClientIDErrorDescription! !
!InternalStoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 23:35:27' prior: 51223922!
test05BookIsAddedSuccessfully

	| anXXX aCartID |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  assert: (anXXX listCart: aCartID) 
		equals: (Bag with: testObjectsFactory aBookSoldByPublisher)! !
!InternalStoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 23:35:27' prior: 51223280!
test01CannotCreateCartWithInvalidID

	| anXXX |
		
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientID
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation 
				andClock: Clock new.
	
	self  should: [
			anXXX createCartForClientWithID: testObjectsFactory anInvalidClientID 
				    andPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalTusLibrosInterface invalidClientIDErrorDescription! !
!InternalStoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 23:35:27' prior: 51224856!
test21ListingCartRefreshesTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	self assert: (anXXX listCart: aCartID) equals: Bag new! !
!InternalStoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 23:35:27' prior: 51224017!
test07CannotListWithInvalidCartID

	| anXXX |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	self  should: [
			anXXX listCart: testObjectsFactory anInvalidCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalTusLibrosInterface invalidCartIDErrorDescription! !
!InternalStoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 23:35:27' prior: 51224271!
test12CannotListPurchasesForClientWithIncorrectPassword

	| anXXX |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientPassword
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	self  should: [
			anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
				    withPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalTusLibrosInterface incorrectPasswordErrorDescription! !
!InternalStoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 23:35:27' prior: 51224315!
test13MultiplePurchasesBySameClientAreListedCorrectly

	| anXXX aCartID anotherCartID expectedPurchases |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	expectedPurchases := Bag new.
	expectedPurchases add: testObjectsFactory aBookSoldByPublisher.
	expectedPurchases add: testObjectsFactory anotherBookSoldByPublisher 
				       withOccurrences: 4.

	self assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases! !
!InternalStoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 23:35:27' prior: 51224423!
test14PurchasesByMultipleClientAreListedCorrectly

	| anXXX aCartID anotherCartID expectedPurchases1 expectedPurchases2 |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	expectedPurchases1 := Bag new.
	expectedPurchases1 add: testObjectsFactory aBookSoldByPublisher.

	expectedPurchases2 := Bag new.
	expectedPurchases2 add: testObjectsFactory anotherBookSoldByPublisher 
				         withOccurrences: 4.

	self assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases1.
	self assert: (anXXX listPurchasesFor: testObjectsFactory anotherValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases2! !
!InternalStoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 23:35:27' prior: 51224546!
test15PurchaseListForClientThatNeverCreatedCartIsEmpty

	| anXXX |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	self  assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID withPassword: testObjectsFactory aCorrectPassword) 
		equals: testObjectsFactory anEmptyBag.! !
!InternalStoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/1/2020 23:35:27' prior: 51224054!
test08CannotCheckOutWithInvalidCartID

	| anXXX |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	self  should: [
			anXXX checkout: testObjectsFactory anInvalidCartID
				    withCreditCard: testObjectsFactory aValidCreditCardNumber
				    expiring: testObjectsFactory aNonExpiredDate
				    withOwner: testObjectsFactory aValidOwnerName
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalTusLibrosInterface invalidCartIDErrorDescription! !

!classRenamed: #InternalStoreInterfaceTest as: #InternalTusLibrosInterfaceTest stamp: 'FR 12/1/2020 23:35:36'!
Smalltalk renameClassNamed: #InternalStoreInterfaceTest as: #InternalTusLibrosInterfaceTest!

----STARTUP---- (2 December 2020 09:17:46) as E:\!!NUEVO\Programas\CuisUniversity\v4383.1\CuisUniversity-4383.image!


----End fileIn of E:\!!NUEVO\Programas\CuisUniversity\v4383.1\TusLibros\Ultima iteraci√≥n\TusLibrosUltimaIteracionPreRefactor.st----!
!InternalTusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/2/2020 14:18:48'!
test14PurchasesByMultipleClientsAreListedCorrectly

	| anXXX aCartID anotherCartID expectedPurchases1 expectedPurchases2 |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	expectedPurchases1 := Bag new.
	expectedPurchases1 add: testObjectsFactory aBookSoldByPublisher.

	expectedPurchases2 := Bag new.
	expectedPurchases2 add: testObjectsFactory anotherBookSoldByPublisher 
				         withOccurrences: 4.

	self assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases1.
	self assert: (anXXX listPurchasesFor: testObjectsFactory anotherValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases2! !

!methodRemoval: InternalTusLibrosInterfaceTest #test14PurchasesByMultipleClientAreListedCorrectly stamp: 'FR 12/2/2020 14:18:49'!
test14PurchasesByMultipleClientAreListedCorrectly

	| anXXX aCartID anotherCartID expectedPurchases1 expectedPurchases2 |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	expectedPurchases1 := Bag new.
	expectedPurchases1 add: testObjectsFactory aBookSoldByPublisher.

	expectedPurchases2 := Bag new.
	expectedPurchases2 add: testObjectsFactory anotherBookSoldByPublisher 
				         withOccurrences: 4.

	self assert: (anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases1.
	self assert: (anXXX listPurchasesFor: testObjectsFactory anotherValidClientID 
				       withPassword: testObjectsFactory aCorrectPassword)
	      equals: expectedPurchases2!
!InternalTusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/2/2020 14:22:21'!
test19CheckoutCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
			anXXX checkout: aCartID
			    	    withCreditCard: testObjectsFactory aValidCreditCardNumber
			    	    expiring: testObjectsFactory aNonExpiredDate
			    	    withOwner: testObjectsFactory aValidOwnerName
	]
		raise: testObjectsFactory functionalError
		withMessageText: InternalTusLibrosInterface timeoutErrorDescription! !

!methodRemoval: InternalTusLibrosInterfaceTest #test19CannotListCartAfterTimeout stamp: 'FR 12/2/2020 14:22:21'!
test19CannotListCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
			anXXX checkout: aCartID
			    	    withCreditCard: testObjectsFactory aValidCreditCardNumber
			    	    expiring: testObjectsFactory aNonExpiredDate
			    	    withOwner: testObjectsFactory aValidOwnerName
	]
		raise: testObjectsFactory functionalError
		withMessageText: InternalTusLibrosInterface timeoutErrorDescription!

Object subclass: #CartLifetime
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartLifetime category: 'TusLibros' stamp: 'FR 12/2/2020 15:25:54'!
Object subclass: #CartLifetime
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalTusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/2/2020 15:30:26' prior: 51227046!
createCartFor: aClientID
	
	currentCartID := currentCartID + 1.	
	
	"activeCartIDsByClientID at: aClientID ifAbsentPut: Set new."
	"(activeCartIDsByClientID at: aClientID) add: currentCartID.	"
	
	activeCartsByCartID at: currentCartID
					put: (CartLifetime withCart: (Cart acceptingItemsOf: catalog)
								      ID: currentCartID
								      clientID: aClientID
								      andTimestamp: clock now).
	
	"clientIDByCartID at: currentCartID put: aClientID."
	
	"self refreshTimestampOf: currentCartID	"

! !
!CartLifetime class methodsFor: 'instance creation' stamp: 'FR 12/2/2020 15:31:30'!
withCart: aCart ID: aCartID clientID: aClientID andTimestamp: aTimestamp

	^ self new initializeWithCart: aCart ID: aCartID clientID: aClientID andTimestamp: aTimestamp.! !

!classDefinition: #CartLifetime category: 'TusLibros' stamp: 'FR 12/2/2020 15:32:15'!
Object subclass: #CartLifetime
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartLifetime category: 'TusLibros' stamp: 'FR 12/2/2020 15:32:16'!
Object subclass: #CartLifetime
	instanceVariableNames: 'cart id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartLifetime category: 'TusLibros' stamp: 'FR 12/2/2020 15:32:17'!
Object subclass: #CartLifetime
	instanceVariableNames: 'cart id clientID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartLifetime category: 'TusLibros' stamp: 'FR 12/2/2020 15:32:18'!
Object subclass: #CartLifetime
	instanceVariableNames: 'cart id clientID timestamp'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartLifetime methodsFor: 'initialization' stamp: 'FR 12/2/2020 15:32:13'!
initializeWithCart: aCart ID: aCartID clientID: aClientID andTimestamp: aTimestamp

	cart := aCart.
	id := aCartID.
	clientID := aClientID.
	timestamp := aTimestamp.! !
!InternalTusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/2/2020 15:37:32' prior: 51227078!
inactivityTimeOf: aCartID

	^ ((activeCartsByCartID at: aCartID) timestamp) distanceTo: clock now! !
!InternalTusLibrosInterface methodsFor: 'adding' stamp: 'FR 12/2/2020 15:38:34' prior: 51226988!
add: anAmount of: aBook toCart: aCartID

	self assertCartIDIsValid: aCartID.
	self assertCartHasNotExpired: aCartID.
	
	(self cartWithID: aCartID) add: anAmount of: aBook.
	"self refreshTimestampOf: aCartID."! !
!CartLifetime methodsFor: 'adding' stamp: 'FR 12/2/2020 15:39:36'!
add: anAmount of: aBook

	cart add: anAmount of: aBook! !
!CartLifetime methodsFor: 'adding' stamp: 'FR 12/2/2020 15:39:50' prior: 51227645!
add: anAmount of: aBook

	cart add: anAmount of: aBook.
	self refreshTimestamp.! !

!classDefinition: #CartLifetime category: 'TusLibros' stamp: 'FR 12/2/2020 15:40:57'!
Object subclass: #CartLifetime
	instanceVariableNames: 'cart id clientID timestamp interface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartLifetime methodsFor: 'initialization' stamp: 'FR 12/2/2020 15:40:55'!
initializeWithCart: aCart ID: aCartID clientID: aClientID timestamp: aTimestamp andInterface: anInternalTusLibrosInterface

	cart := aCart.
	id := aCartID.
	clientID := aClientID.
	timestamp := aTimestamp.
	interface := anInternalTusLibrosInterface.! !
!CartLifetime class methodsFor: 'instance creation' stamp: 'FR 12/2/2020 15:41:22'!
withCart: aCart ID: aCartID clientID: aClientID timestamp: aTimestamp andInterface: anInternalTusLibrosInterface

	^ self new initializeWithCart: aCart ID: aCartID clientID: aClientID timestamp: aTimestamp andInterface: anInternalTusLibrosInterface! !
!CartLifetime class methodsFor: 'instance creation' stamp: 'FR 12/2/2020 15:42:03'!
withCart: aCart ID: aCartID clientID: aClientID andInterface: anInternalTusLibrosInterface

	^ self new initializeWithCart: aCart ID: aCartID clientID: aClientID andInterface: anInternalTusLibrosInterface! !
!CartLifetime methodsFor: 'initialization' stamp: 'FR 12/2/2020 15:42:37'!
initializeWithCart: aCart ID: aCartID clientID: aClientID andInterface: anInternalTusLibrosInterface

	cart := aCart.
	id := aCartID.
	clientID := aClientID.
	timestamp := anInternalTusLibrosInterface currentTime.
	interface := anInternalTusLibrosInterface.! !
!InternalTusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/2/2020 15:43:12'!
currentTime

	^ clock now! !
!InternalTusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/2/2020 15:43:20' prior: 51227021!
checkout: aCartID withCreditCard: aCreditCard

	(Cashier toCheckout: (self cartWithID: aCartID)
		     charging: aCreditCard
		     throught: merchantProcessor
		     on: self currentTime
		     registeringOn: Bag new) checkOut! !
!InternalTusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/2/2020 15:43:33' prior: 51227564!
createCartFor: aClientID
	
	currentCartID := currentCartID + 1.	
	
	"activeCartIDsByClientID at: aClientID ifAbsentPut: Set new."
	"(activeCartIDsByClientID at: aClientID) add: currentCartID.	"
	
	activeCartsByCartID at: currentCartID
					put: (CartLifetime withCart: (Cart acceptingItemsOf: catalog)
								      ID: currentCartID
								      clientID: aClientID
								      andInterface: self).
	
	"clientIDByCartID at: currentCartID put: aClientID."
	
	"self refreshTimestampOf: currentCartID	"

! !
!CartLifetime methodsFor: 'timestamp' stamp: 'FR 12/2/2020 15:44:10'!
refreshTimestamp

	timestamp := interface currentTime! !
!InternalTusLibrosInterface methodsFor: 'listing' stamp: 'FR 12/2/2020 15:45:54' prior: 51226954!
listCart: aCartID
	
	self assertCartIDIsValid: aCartID.
	self assertCartHasNotExpired: aCartID.
	
	"self refreshTimestampOf: aCartID."
	
	^ (self cartWithID: aCartID) list! !
!CartLifetime methodsFor: 'listing' stamp: 'FR 12/2/2020 15:46:25'!
list

	^ cart books asBag! !
!InternalTusLibrosInterface methodsFor: 'checkout' stamp: 'FR 12/2/2020 15:47:17' prior: 51226998!
checkout: aCartID withCreditCard: aCreditCardNumber expiring: anExpirationDate withOwner: anOwnerName 
	
	| clientCreditCard |
	
	self assertCartIDIsValid: aCartID.
	self assertCartHasNotExpired: aCartID.
	
	clientCreditCard := self createCreditCardWithOwner: anOwnerName
					     number: aCreditCardNumber
					     andExpirationDate: anExpirationDate.
	
	self checkout: aCartID withCreditCard: clientCreditCard.	
	"self commitPurchaseOf: aCartID."
	self retireCart: aCartID! !

!classDefinition: #InternalTusLibrosInterface category: 'TusLibros' stamp: 'FR 12/2/2020 15:49:03'!
Object subclass: #InternalTusLibrosInterface
	instanceVariableNames: 'authenticator currentCartID catalog activeCartsByCartID activeCartIDsByClientID merchantProcessor inactiveCartIDsByClientID clientIDByCartID booksByClientID clock timestampByCartID purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalTusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/2/2020 15:49:01' prior: 51227710!
checkout: aCartID withCreditCard: aCreditCard

	(self cartWithID: aCartID) checkout: aCartID on: purchases withCreditCard: aCreditCard.
	"(Cashier toCheckout: (self cartWithID: aCartID)
		     charging: aCreditCard
		     throught: merchantProcessor
		     on: self currentTime
		     registeringOn: Bag new) checkOut"! !
!InternalTusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/2/2020 15:50:29' prior: 51227789!
checkout: aCartID withCreditCard: aCreditCard

	(self cartWithID: aCartID) checkoutWithCreditCard: aCreditCard
						registeringOn: purchases.
	"(Cashier toCheckout: (self cartWithID: aCartID)
		     charging: aCreditCard
		     throught: merchantProcessor
		     on: self currentTime
		     registeringOn: Bag new) checkOut"! !
!CartLifetime methodsFor: 'checkout' stamp: 'FR 12/2/2020 15:53:39'!
checkoutWithCreditCard: aCreditCard registeringOn: aSalesBook

	(Cashier toCheckout: cart
		     charging: aCreditCard
		     throught: interface merchantProcessor
		     on: interface currentTime
		     registeringOn: aSalesBook) checkOut! !
!InternalTusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/2/2020 15:53:52'!
merchantProcessor

	^ merchantProcessor! !
!InternalTusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/2/2020 15:54:27' prior: 51227803!
checkout: aCartID withCreditCard: aCreditCard

	(self cartWithID: aCartID) checkoutWithCreditCard: aCreditCard
						registeringOn: purchases.! !

!methodRemoval: InternalTusLibrosInterface #commitPurchaseOf: stamp: 'FR 12/2/2020 15:54:48'!
commitPurchaseOf: aCartID
		
	booksByClientID at: (self clientIDForCart: aCartID) ifAbsentPut: Bag new.
	(booksByClientID at: (self clientIDForCart: aCartID)) addAll: (activeCartsByCartID at: aCartID) books.!
!InternalTusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/2/2020 15:55:02' prior: 51227096!
retireCart: aCartID

	activeCartsByCartID removeKey: aCartID.
	"activeCartIDsByClientID removeKey: (self clientIDForCart: aCartID)"! !

!methodRemoval: InternalTusLibrosInterface #clientIDForCart: stamp: 'FR 12/2/2020 15:55:07'!
clientIDForCart: aCartID

	^ clientIDByCartID at: aCartID.
!

!methodRemoval: InternalTusLibrosInterface #refreshTimestampOf: stamp: 'FR 12/2/2020 15:56:27'!
refreshTimestampOf: aCartID

	timestampByCartID at: aCartID put: clock now.!

!classDefinition: #Purchase category: 'TusLibros' stamp: 'FR 12/2/2020 16:15:01'!
Object subclass: #Purchase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartLifetime methodsFor: 'checkout' stamp: 'FR 12/2/2020 16:14:56' prior: 51227816!
checkoutWithCreditCard: aCreditCard registeringOn: aPurchaseList
	
	| sale |
	
	sale := Dictionary new.
	
	(Cashier toCheckout: cart
		     charging: aCreditCard
		     throught: interface merchantProcessor
		     on: interface currentTime
		     registeringOn: sale) checkOut.
	
	aPurchaseList add: (Purchase from: clientID with: sale )! !
!Cart methodsFor: 'queries' stamp: 'FR 12/2/2020 16:18:09'!
priceOf: anItem

	^ catalog at: anItem! !
!Cashier methodsFor: 'checkout - private' stamp: 'FR 12/2/2020 16:21:28' prior: 51226728!
registerSale

	cart books asSet do: [ :aBook | salesBook at: aBook put: ((cart occurrencesOf: aBook)*(cart priceOf: aBook))]! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FR 12/2/2020 16:21:42'!
Object subclass: #Cashier
	instanceVariableNames: 'cart saleSummary merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'FR 12/2/2020 16:21:42' prior: 51227892!
registerSale

	cart books asSet do: [ :aBook | saleSummary at: aBook put: ((cart occurrencesOf: aBook)*(cart priceOf: aBook))]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'FR 12/2/2020 16:21:42' prior: 51226738!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	saleSummary := aSalesBook! !
!Cashier class methodsFor: 'instance creation' stamp: 'FR 12/2/2020 16:21:52' prior: 51226769!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: saleSummary
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: saleSummary! !
!CartLifetime methodsFor: 'checkout' stamp: 'FR 12/2/2020 16:22:43' prior: 51227874!
checkoutWithCreditCard: aCreditCard registeringOn: aPurchaseList
	
	| saleSummary |
	
	saleSummary := Dictionary new.
	
	(Cashier toCheckout: cart
		     charging: aCreditCard
		     throught: interface merchantProcessor
		     on: interface currentTime
		     registeringOn: saleSummary) checkOut.
	
	aPurchaseList add: (Purchase from: clientID with: saleSummary )! !
!Purchase class methodsFor: 'instance creation' stamp: 'FR 12/2/2020 16:23:49'!
from: aClientID with: aSaleSummary

	^ self new initializeWithClientID: aClientID andSummary: aSaleSummary! !

!classDefinition: #Purchase category: 'TusLibros' stamp: 'FR 12/2/2020 16:26:28'!
Object subclass: #Purchase
	instanceVariableNames: 'client'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Purchase category: 'TusLibros' stamp: 'FR 12/2/2020 16:26:31'!
Object subclass: #Purchase
	instanceVariableNames: 'client details'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Purchase category: 'TusLibros' stamp: 'FR 12/2/2020 16:26:32'!
Object subclass: #Purchase
	instanceVariableNames: 'client details total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Purchase methodsFor: 'initialization' stamp: 'FR 12/2/2020 16:26:11'!
initializeWithClientID: aClientID andSummary: aSaleSummary

	client := aClientID.
	details := aSaleSummary.
	total := aSaleSummary values sum.
	! !
!Purchase methodsFor: 'accessing' stamp: 'FR 12/2/2020 16:29:14'!
books

	^ details keys! !

(Bag with: 2 with: 2 with: 3 with: 1) asDictionary!

(Bag with: 2 with: 2 with: 3 with: 1)!

(Bag with: 2 with: 2 with: 3 with: 1) sortedCounts!

(Bag with: 2 with: 2 with: 3 with: 1) sortedCounts asDictionary!

(Bag with: 2 with: 2 with: 3 with: 1) sortedCounts!

(Bag with: 2 with: 2 with: 3 with: 1) sortedElements!

(Bag with: 2 with: 2 with: 3 with: 1) asSet!
!Cashier methodsFor: 'checkout - private' stamp: 'FR 12/2/2020 16:34:49' prior: 51227907!
registerSale

	cart books asSet do: [ :aBook | saleSummary at: aBook put: (cart occurrencesOf: aBook)]! !

!methodRemoval: Cart #priceOf: stamp: 'FR 12/2/2020 16:34:54'!
priceOf: anItem

	^ catalog at: anItem!

Object subclass: #Sale
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'FR 12/2/2020 16:54:59'!
Object subclass: #Sale
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FR 12/2/2020 16:55:36'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'FR 12/2/2020 16:55:36' prior: 51228002!
registerSale

	cart books asSet do: [ :aBook | salesBook at: aBook put: (cart occurrencesOf: aBook)]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'FR 12/2/2020 16:55:37' prior: 51227914!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook! !
!Cashier class methodsFor: 'instance creation' stamp: 'FR 12/2/2020 16:55:43' prior: 51227924!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: salesBook
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: salesBook! !
!Cashier methodsFor: 'checkout - private' stamp: 'FR 12/2/2020 16:57:33' prior: 51228030!
registerSale

	| itemQuantities |

	itemQuantities := Dictionary new.

	(cart books asSet) do: [ :aBook | itemQuantities at: aBook put: (cart occurrencesOf: aBook) ].

	salesBook add: Sale withTotal: cart total andItems: itemQuantities.! !
!Cashier methodsFor: 'checkout - private' stamp: 'FR 12/2/2020 16:57:43' prior: 51228060!
registerSale

	| itemQuantities |

	itemQuantities := Dictionary new.

	(cart books asSet) do: [ :aBook | itemQuantities at: aBook put: (cart occurrencesOf: aBook) ].

	salesBook add: (Sale withTotal: cart total andItems: itemQuantities)! !
!Sale class methodsFor: 'instance creation' stamp: 'FR 12/2/2020 16:58:37'!
withTotal: totalCost andItems: itemsWithTheirQuantities

	^ self initializeWithTotal: totalCost andItems: itemsWithTheirQuantities! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'FR 12/2/2020 16:58:52'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'FR 12/2/2020 16:58:53'!
Object subclass: #Sale
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'FR 12/2/2020 16:58:51'!
initializeWithTotal: totalCost andItems: itemsWithTheirQuantities

	total := totalCost.
	items := itemsWithTheirQuantities.! !
!CartLifetime methodsFor: 'checkout' stamp: 'FR 12/2/2020 16:59:42' prior: 51227937!
checkoutWithCreditCard: aCreditCard registeringOn: aPurchaseList
	
	| saleBook |
	
	saleBook := OrderedCollection new.
	
	(Cashier toCheckout: cart
		     charging: aCreditCard
		     throught: interface merchantProcessor
		     on: interface currentTime
		     registeringOn: saleBook) checkOut.
	
	aPurchaseList add: (Purchase from: clientID with: saleBook first )! !
!Purchase class methodsFor: 'instance creation' stamp: 'FR 12/2/2020 16:59:55' prior: 51227952!
from: aClientID with: aSale

	^ self new initializeWithClientID: aClientID andSummary: aSale! !
!Purchase methodsFor: 'initialization' stamp: 'FR 12/2/2020 17:00:17'!
initializeWithClientID: aClientID andSale: aSaleSummary

	client := aClientID.
	details := aSaleSummary.
	total := aSaleSummary values sum.
	! !
!Purchase class methodsFor: 'as yet unclassified' stamp: 'FR 12/2/2020 17:00:17' prior: 51228123!
from: aClientID with: aSale

	^ self new initializeWithClientID: aClientID andSale: aSale! !

!methodRemoval: Purchase #initializeWithClientID:andSummary: stamp: 'FR 12/2/2020 17:00:17'!
initializeWithClientID: aClientID andSummary: aSaleSummary

	client := aClientID.
	details := aSaleSummary.
	total := aSaleSummary values sum.
	!

!classDefinition: #Purchase category: 'TusLibros' stamp: 'FR 12/2/2020 17:00:36'!
Object subclass: #Purchase
	instanceVariableNames: 'client details total sale'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Purchase methodsFor: 'initialization' stamp: 'FR 12/2/2020 17:00:35' prior: 51228129!
initializeWithClientID: aClientID andSale: aSale

	client := aClientID.
	sale := aSale.
	! !

Object subclass: #Purchase
	instanceVariableNames: 'client sale'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Purchase category: 'TusLibros' stamp: 'FR 12/2/2020 17:00:48'!
Object subclass: #Purchase
	instanceVariableNames: 'client sale'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: Purchase #books stamp: 'FR 12/2/2020 17:00:54'!
books

	^ details keys!
!Sale methodsFor: 'nil' stamp: 'FR 12/2/2020 17:01:48'!
books

	^ items keys! !
!Purchase methodsFor: 'accessing' stamp: 'FR 12/2/2020 17:02:12'!
books

	^ sale books! !
!Sale methodsFor: 'accessing' stamp: 'FR 12/2/2020 17:02:57'!
quantityOf: aBook

	^ items occurrencesOf: aBook! !
!Purchase methodsFor: 'accessing' stamp: 'FR 12/2/2020 17:03:15'!
quantityOf: aBook

	^ sale quantityOf: aBook! !
!Purchase methodsFor: 'accessing' stamp: 'FR 12/2/2020 17:03:27'!
total

	^ sale copy! !
!InternalTusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/2/2020 17:11:22' prior: 51227084!
purchasesFrom: aClientID
	
	activeCartsByCartID at: aClientID ifAbsent: [ ^ Purchase from: aClientID with: (Sale withTotal: 0 andItems: Dictionary new) ].
	
	^ (purchases select: [ :aPurchase | aPurchase wasMadeBy: aClientID ]) sum! !
!Purchase methodsFor: 'testing' stamp: 'FR 12/2/2020 17:11:47'!
wasMadeBy: aClientID

	^ client := aClientID! !
!Purchase methodsFor: 'testing' stamp: 'FR 12/2/2020 17:11:49' prior: 51228206!
wasMadeBy: aClientID

	^ client = aClientID! !
!InternalTusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/2/2020 17:26:33' prior: 51228196!
purchasesFrom: aClientID
	
	| purchasesByClient clientTotal clientBooks clientSale clientPurchase |
	
	activeCartsByCartID at: aClientID ifAbsent: [ ^ Purchase from: aClientID with: (Sale withTotal: 0 andItems: Dictionary new) ].
	
	purchasesByClient := (purchases select: [ :aPurchase | aPurchase wasMadeBy: aClientID ]).
	
	clientTotal := purchasesByClient inject: 0 into: [ :total :aPurchase | total + aPurchase total ].
	clientBooks := purchasesByClient inject: Dictionary new into: [ :items :aPurchase |
	].
	
	clientSale := Sale withTotal: clientTotal andItems: clientBooks.
	clientPurchase := Purchase from: aClientID with: clientSale.
	
	^ clientPurchase.
	
! !
!InternalTusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/2/2020 17:28:50' prior: 51228215!
purchasesFrom: aClientID
	
	| purchasesByClient clientTotal clientBooks clientSale clientPurchase |
	
	activeCartsByCartID at: aClientID ifAbsent: [ ^ Purchase from: aClientID with: (Sale withTotal: 0 andItems: Dictionary new) ].
	
	purchasesByClient := (purchases select: [ :aPurchase | aPurchase wasMadeBy: aClientID ]).
	
	clientTotal := purchasesByClient inject: 0 into: [ :total :aPurchase | total + aPurchase total ].
	clientBooks := purchasesByClient inject: Dictionary new into: [ :items :aPurchase |
		aPurchase books do: [ :aBook |
			items at: aBook ifAbsentPut: 0.
			items at: aBook put: (items at: aBook) + (aPurchase occurrencesOf: aBook).
		]
	].
	
	clientSale := Sale withTotal: clientTotal andItems: clientBooks.
	clientPurchase := Purchase from: aClientID with: clientSale.
	
	^ clientPurchase.
	
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FR 12/2/2020 17:28:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FR 12/2/2020 17:28:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FR 12/2/2020 17:28:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FR 12/2/2020 17:28:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FR 12/2/2020 17:28:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FR 12/2/2020 17:28:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FR 12/2/2020 17:28:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FR 12/2/2020 17:28:57'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FR 12/2/2020 17:28:58'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FR 12/2/2020 17:28:58'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FR 12/2/2020 17:28:58'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FR 12/2/2020 17:28:58'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FR 12/2/2020 17:28:59'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FR 12/2/2020 17:28:59'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FR 12/2/2020 17:29:00'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FR 12/2/2020 17:29:14'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FR 12/2/2020 17:29:14'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FR 12/2/2020 17:29:14'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FR 12/2/2020 17:29:14'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FR 12/2/2020 17:29:14'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FR 12/2/2020 17:29:14'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FR 12/2/2020 17:29:16'!
ERROR!
!Sale class methodsFor: 'instance creation' stamp: 'FR 12/2/2020 17:29:39' prior: 51228081!
withTotal: totalCost andItems: itemsWithTheirQuantities

	^ self new initializeWithTotal: totalCost andItems: itemsWithTheirQuantities! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FR 12/2/2020 17:29:41'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FR 12/2/2020 17:29:41'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FR 12/2/2020 17:29:41'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FR 12/2/2020 17:29:41'!
FAILURE!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FR 12/2/2020 17:29:41'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FR 12/2/2020 17:29:41'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FR 12/2/2020 17:29:41'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'FR 12/2/2020 17:29:55' prior: 51225816!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FR 12/2/2020 17:29:57'!
ERROR!
!Sale methodsFor: 'accessing' stamp: 'FR 12/2/2020 17:30:15'!
total

	^ total copy! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FR 12/2/2020 17:30:17'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FR 12/2/2020 17:30:17'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FR 12/2/2020 17:30:17'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FR 12/2/2020 17:30:17'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FR 12/2/2020 17:30:17'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FR 12/2/2020 17:30:17'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberCannotHaveLessThanSixteenDigits stamp: 'FR 12/2/2020 17:30:20'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNameCannotBeEmpty stamp: 'FR 12/2/2020 17:30:20'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberCannotHaveMoreThanSixteenDigits stamp: 'FR 12/2/2020 17:30:20'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithValidInfoIsCorrectlyCreated stamp: 'FR 12/2/2020 17:30:20'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/2/2020 17:30:24'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/2/2020 17:30:25'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/2/2020 17:30:25'!
ERROR!

!testRun: #InternalTusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/2/2020 17:30:25'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/2/2020 17:30:25'!
ERROR!

!testRun: #InternalTusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/2/2020 17:30:25'!
ERROR!

!testRun: #InternalTusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/2/2020 17:30:25'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/2/2020 17:30:25'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test09CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/2/2020 17:30:26'!
ERROR!

!testRun: #InternalTusLibrosInterfaceTest #test10SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/2/2020 17:30:26'!
ERROR!

!testRun: #InternalTusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/2/2020 17:30:26'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/2/2020 17:30:26'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/2/2020 17:30:26'!
ERROR!

!testRun: #InternalTusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/2/2020 17:30:26'!
ERROR!

!testRun: #InternalTusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/2/2020 17:30:26'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/2/2020 17:30:26'!
ERROR!

!testRun: #InternalTusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/2/2020 17:30:26'!
ERROR!

!testRun: #InternalTusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/2/2020 17:30:26'!
ERROR!

!testRun: #InternalTusLibrosInterfaceTest #test19CheckoutCartAfterTimeout stamp: 'FR 12/2/2020 17:30:26'!
ERROR!

!testRun: #InternalTusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/2/2020 17:30:26'!
ERROR!

!testRun: #InternalTusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/2/2020 17:30:26'!
ERROR!

!testRun: #InternalTusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/2/2020 17:30:28'!
ERROR!
!CartLifetime methodsFor: 'timestamp' stamp: 'FR 12/2/2020 17:32:34'!
inactivityTime

	^ timestamp distanceTo: interface currentTime! !
!CartLifetime methodsFor: 'timestamp' stamp: 'FR 12/2/2020 17:33:58'!
isExpired

	^ self inactivityTime >= interface inactivityTimeLimit! !
!InternalTusLibrosInterface methodsFor: 'private - assertions' stamp: 'FR 12/2/2020 17:34:34' prior: 51226971!
assertCartHasNotExpired: aCartID

	(self cartWithID: aCartID) isExpired ifTrue: [
		self retireCart: aCartID.
		self error: self class timeoutErrorDescription
	].! !

!testRun: #InternalTusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/2/2020 17:34:36'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/2/2020 17:34:36'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/2/2020 17:34:36'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/2/2020 17:34:36'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/2/2020 17:34:36'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/2/2020 17:34:36'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/2/2020 17:34:36'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/2/2020 17:34:36'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test09CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/2/2020 17:34:36'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test10SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/2/2020 17:34:36'!
ERROR!

!testRun: #InternalTusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/2/2020 17:34:36'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/2/2020 17:34:36'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/2/2020 17:34:36'!
ERROR!

!testRun: #InternalTusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/2/2020 17:34:36'!
ERROR!

!testRun: #InternalTusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/2/2020 17:34:37'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/2/2020 17:34:37'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/2/2020 17:34:37'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/2/2020 17:34:37'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test19CheckoutCartAfterTimeout stamp: 'FR 12/2/2020 17:34:37'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/2/2020 17:34:37'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/2/2020 17:34:37'!
ERROR!

!testRun: #InternalTusLibrosInterfaceTest #test10SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/2/2020 17:34:38'!
ERROR!
!InternalTusLibrosInterface methodsFor: 'initialization' stamp: 'FR 12/2/2020 17:35:04' prior: 51226928!
initializeWithAuthenticator: anAuthenticator catalog: aCatalog merchantProcessor: aMerchantProcessor andClock: aClock 

	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.
	clock := aClock.
	
	currentCartID := 0.
	activeCartsByCartID := Dictionary new.
	activeCartIDsByClientID := Dictionary new.
	clientIDByCartID := Dictionary new.
	booksByClientID := Dictionary new.
	timestampByCartID := Dictionary new.
	purchases := Bag new.! !

!testRun: #InternalTusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/2/2020 17:35:06'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/2/2020 17:35:07'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/2/2020 17:35:07'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/2/2020 17:35:07'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/2/2020 17:35:07'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/2/2020 17:35:07'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/2/2020 17:35:07'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/2/2020 17:35:07'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test09CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/2/2020 17:35:07'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test10SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/2/2020 17:35:07'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/2/2020 17:35:07'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/2/2020 17:35:07'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/2/2020 17:35:07'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/2/2020 17:35:07'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/2/2020 17:35:07'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/2/2020 17:35:07'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/2/2020 17:35:07'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/2/2020 17:35:08'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test19CheckoutCartAfterTimeout stamp: 'FR 12/2/2020 17:35:08'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/2/2020 17:35:08'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/2/2020 17:35:08'!
ERROR!

!testRun: #InternalTusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/2/2020 17:35:09'!
ERROR!
!CartLifetime methodsFor: 'listing' stamp: 'FR 12/2/2020 17:35:40' prior: 51227753!
list

	self refreshTimestamp.
	^ cart books asBag! !
!CartLifetime methodsFor: 'adding' stamp: 'FR 12/2/2020 17:35:48' prior: 51227650!
add: anAmount of: aBook

	self refreshTimestamp.
	cart add: anAmount of: aBook.
! !

!testRun: #InternalTusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/2/2020 17:35:53'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/2/2020 17:35:54'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/2/2020 17:35:54'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/2/2020 17:35:54'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/2/2020 17:35:54'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/2/2020 17:35:54'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/2/2020 17:35:54'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/2/2020 17:35:54'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test09CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/2/2020 17:35:54'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test10SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/2/2020 17:35:54'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/2/2020 17:35:54'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/2/2020 17:35:54'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/2/2020 17:35:55'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/2/2020 17:35:55'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/2/2020 17:35:56'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/2/2020 17:35:57'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/2/2020 17:35:57'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/2/2020 17:35:57'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test19CheckoutCartAfterTimeout stamp: 'FR 12/2/2020 17:35:57'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/2/2020 17:35:57'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/2/2020 17:35:58'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test10SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/2/2020 17:36:00'!
FAILURE!
!InternalTusLibrosInterfaceTest methodsFor: 'tests - checkout' stamp: 'FR 12/2/2020 17:40:02' prior: 51226385!
test10SuccessfulCheckoutIsDoneCorrectly

	| anXXX aCartID purchaseList |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
					     withPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 50.
	self assert: purchaseList books equals: (Bag with: testObjectsFactory aBookSoldByPublisher).
	self assert: (purchaseList quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.! !

!testRun: #InternalTusLibrosInterfaceTest #test10SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/2/2020 17:40:03'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/2/2020 17:40:16'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/2/2020 17:40:16'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/2/2020 17:40:16'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/2/2020 17:40:16'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/2/2020 17:40:16'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/2/2020 17:40:16'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/2/2020 17:40:16'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/2/2020 17:40:16'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test09CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/2/2020 17:40:17'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test10SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/2/2020 17:40:17'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/2/2020 17:40:17'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/2/2020 17:40:17'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/2/2020 17:40:17'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/2/2020 17:40:17'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/2/2020 17:40:17'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/2/2020 17:40:17'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/2/2020 17:40:17'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/2/2020 17:40:17'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test19CheckoutCartAfterTimeout stamp: 'FR 12/2/2020 17:40:17'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/2/2020 17:40:17'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/2/2020 17:40:17'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test10SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/2/2020 17:40:45'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test10SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/2/2020 17:42:56'!
FAILURE!
!Purchase methodsFor: 'accessing' stamp: 'FR 12/2/2020 17:43:32' prior: 51228191!
total

	^ sale total! !

!testRun: #InternalTusLibrosInterfaceTest #test10SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/2/2020 17:43:36'!
FAILURE!

saleBook first!

Purchase from: clientID with: saleBook first!

self total!
!InternalTusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/2/2020 17:46:41' prior: 51228240!
purchasesFrom: aClientID
	
	| purchasesByClient clientTotal clientBooks clientSale clientPurchase |
		
	purchasesByClient := (purchases select: [ :aPurchase | aPurchase wasMadeBy: aClientID ]).
	
	clientTotal := purchasesByClient inject: 0 into: [ :total :aPurchase | total + aPurchase total ].
	clientBooks := purchasesByClient inject: Dictionary new into: [ :items :aPurchase |
		aPurchase books do: [ :aBook |
			items at: aBook ifAbsentPut: 0.
			items at: aBook put: (items at: aBook) + (aPurchase occurrencesOf: aBook).
		]
	].
	
	clientSale := Sale withTotal: clientTotal andItems: clientBooks.
	clientPurchase := Purchase from: aClientID with: clientSale.
	
	^ clientPurchase.
	
! !

!testRun: #InternalTusLibrosInterfaceTest #test10SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/2/2020 17:46:44'!
ERROR!
!InternalTusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/2/2020 17:47:20' prior: 51228964!
purchasesFrom: aClientID
	
	| purchasesByClient clientTotal clientBooks clientSale clientPurchase |
		
	purchasesByClient := (purchases select: [ :aPurchase | aPurchase wasMadeBy: aClientID ]).
	
	clientTotal := purchasesByClient inject: 0 into: [ :total :aPurchase | total + aPurchase total ].
	clientBooks := purchasesByClient inject: Dictionary new into: [ :items :aPurchase |
		aPurchase books do: [ :aBook |
			items at: aBook ifAbsentPut: 0.
			items at: aBook put: (items at: aBook) + (aPurchase quantityOf: aBook).
		]
	].
	
	clientSale := Sale withTotal: clientTotal andItems: clientBooks.
	clientPurchase := Purchase from: aClientID with: clientSale.
	
	^ clientPurchase.
	
! !

!testRun: #InternalTusLibrosInterfaceTest #test10SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/2/2020 17:47:23'!
ERROR!

!testRun: #InternalTusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/2/2020 17:48:18'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/2/2020 17:48:18'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/2/2020 17:48:18'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/2/2020 17:48:18'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/2/2020 17:48:18'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/2/2020 17:48:18'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/2/2020 17:48:19'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/2/2020 17:48:19'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test09CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/2/2020 17:48:19'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test10SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/2/2020 17:48:19'!
ERROR!

!testRun: #InternalTusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/2/2020 17:48:19'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/2/2020 17:48:19'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/2/2020 17:48:19'!
ERROR!

!testRun: #InternalTusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/2/2020 17:48:19'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/2/2020 17:48:19'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/2/2020 17:48:19'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/2/2020 17:48:19'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/2/2020 17:48:19'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test19CheckoutCartAfterTimeout stamp: 'FR 12/2/2020 17:48:19'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/2/2020 17:48:19'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/2/2020 17:48:19'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test10SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/2/2020 17:48:21'!
ERROR!

1 with: 34!

Bag with: 1 with: 34!

aBook!

(items at: aBook)!

(aPurchase quantityOf: aBook)!

self quantityOf: 'a book sold by this publisher'!

self quantityOf: 'a book sold by this publisher'!
!Sale methodsFor: 'accessing' stamp: 'FR 12/2/2020 17:55:44' prior: 51228183!
quantityOf: aBook

	^ items at: aBook! !

!testRun: #InternalTusLibrosInterfaceTest #test10SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/2/2020 17:55:53'!
ERROR!

aPurchase books!

!testRun: #InternalTusLibrosInterfaceTest #test10SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/2/2020 17:59:24'!
ERROR!
!InternalTusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/2/2020 18:00:43' prior: 51228993!
purchasesFrom: aClientID
	
	| purchasesByClient clientTotal clientBooks clientSale clientPurchase |
		
	purchasesByClient := (purchases select: [ :aPurchase | aPurchase wasMadeBy: aClientID ]).
	
	clientTotal := purchasesByClient inject: 0 into: [ :total :aPurchase | total + aPurchase total ].
	clientBooks := purchasesByClient inject: Dictionary new into: [ :items :aPurchase |
		| booksForPurchase |
		booksForPurchase := aPurchase books copy.
		booksForPurchase do: [ :aBook |
			items at: aBook ifAbsentPut: 0.
			items at: aBook put: (items at: aBook) + (aPurchase quantityOf: aBook).
		]
	].
	
	clientSale := Sale withTotal: clientTotal andItems: clientBooks.
	clientPurchase := Purchase from: aClientID with: clientSale.
	
	^ clientPurchase.
	
! !

!testRun: #InternalTusLibrosInterfaceTest #test10SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/2/2020 18:00:46'!
ERROR!
!InternalTusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/2/2020 18:02:46' prior: 51229126!
purchasesFrom: aClientID
	
	| purchasesByClient clientTotal clientBooks clientSale clientPurchase |
		
	purchasesByClient := (purchases select: [ :aPurchase | aPurchase wasMadeBy: aClientID ]).
	
	clientTotal := purchasesByClient inject: 0 into: [ :total :aPurchase | total + aPurchase total ].
	clientBooks := purchasesByClient inject: Dictionary new into: [ :items :aPurchase |
		| booksForPurchase |
		booksForPurchase := aPurchase books asSet.
		booksForPurchase do: [ :aBook |
			items at: aBook ifAbsentPut: 0.
			items at: aBook put: (items at: aBook) + (aPurchase quantityOf: aBook).
		]
	].
	
	clientSale := Sale withTotal: clientTotal andItems: clientBooks.
	clientPurchase := Purchase from: aClientID with: clientSale.
	
	^ clientPurchase.
	
! !

!testRun: #InternalTusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/2/2020 18:02:54'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/2/2020 18:02:54'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/2/2020 18:02:54'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/2/2020 18:02:54'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/2/2020 18:02:54'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/2/2020 18:02:54'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/2/2020 18:02:54'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/2/2020 18:02:54'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test09CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/2/2020 18:02:54'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test10SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/2/2020 18:02:54'!
ERROR!

!testRun: #InternalTusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/2/2020 18:02:54'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/2/2020 18:02:55'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/2/2020 18:02:55'!
ERROR!

!testRun: #InternalTusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/2/2020 18:02:55'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/2/2020 18:02:55'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/2/2020 18:02:55'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/2/2020 18:02:55'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/2/2020 18:02:55'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test19CheckoutCartAfterTimeout stamp: 'FR 12/2/2020 18:02:55'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/2/2020 18:02:55'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/2/2020 18:02:55'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test10SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/2/2020 18:02:57'!
ERROR!

items!
!InternalTusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/2/2020 18:07:18' prior: 51229157!
purchasesFrom: aClientID
	
	| purchasesByClient clientTotal clientBooks clientSale clientPurchase |
		
	purchasesByClient := (purchases select: [ :aPurchase | aPurchase wasMadeBy: aClientID ]).
	
	clientTotal := purchasesByClient inject: 0 into: [ :total :aPurchase | total + aPurchase total ].
	clientBooks := Dictionary new.
	purchasesByClient do: [ :aPurchase |
		aPurchase books do: [ :aBook |
			clientBooks at: aBook ifAbsentPut: 0.
			clientBooks at: aBook put: (clientBooks at: aBook) + (aPurchase quantityOf: aBook).
		]
	].
	
	clientSale := Sale withTotal: clientTotal andItems: clientBooks.
	clientPurchase := Purchase from: aClientID with: clientSale.
	
	^ clientPurchase.! !

!testRun: #InternalTusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/2/2020 18:07:21'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/2/2020 18:07:21'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/2/2020 18:07:21'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/2/2020 18:07:21'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/2/2020 18:07:21'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/2/2020 18:07:21'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/2/2020 18:07:22'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/2/2020 18:07:22'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test09CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/2/2020 18:07:22'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test10SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/2/2020 18:07:22'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/2/2020 18:07:22'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/2/2020 18:07:22'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/2/2020 18:07:22'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/2/2020 18:07:22'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/2/2020 18:07:22'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/2/2020 18:07:22'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/2/2020 18:07:22'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/2/2020 18:07:22'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test19CheckoutCartAfterTimeout stamp: 'FR 12/2/2020 18:07:22'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/2/2020 18:07:22'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/2/2020 18:07:22'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test10SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/2/2020 18:07:24'!
FAILURE!
!Sale methodsFor: 'accessing' stamp: 'FR 12/2/2020 18:08:17' prior: 51228177!
books

	^ items keys asBag! !

!testRun: #InternalTusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/2/2020 18:08:19'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/2/2020 18:08:20'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/2/2020 18:08:20'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/2/2020 18:08:20'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/2/2020 18:08:20'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/2/2020 18:08:20'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/2/2020 18:08:20'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/2/2020 18:08:20'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test09CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/2/2020 18:08:20'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test10SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/2/2020 18:08:20'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/2/2020 18:08:20'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/2/2020 18:08:20'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/2/2020 18:08:20'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/2/2020 18:08:20'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/2/2020 18:08:20'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/2/2020 18:08:20'!
FAILURE!

!testRun: #InternalTusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/2/2020 18:08:20'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/2/2020 18:08:20'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test19CheckoutCartAfterTimeout stamp: 'FR 12/2/2020 18:08:20'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/2/2020 18:08:20'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/2/2020 18:08:20'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/2/2020 18:08:22'!
FAILURE!
!InternalTusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/2/2020 18:11:05' prior: 51226017!
test13MultiplePurchasesBySameClientAreListedCorrectly

	| anXXX aCartID anotherCartID purchaseList |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 450.
	self assert: purchaseList books equals: (Bag with: testObjectsFactory aBookSoldByPublisher with: testObjectsFactory anotherBookSoldByPublisher).
	self assert: (purchaseList quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.
	self assert: (purchaseList quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.! !
!InternalTusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/2/2020 18:13:06' prior: 51227369!
test14PurchasesByMultipleClientsAreListedCorrectly

	| anXXX aCartID anotherCartID expectedPurchases1 expectedPurchases2 purchaseList1 purchaseList2 |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	expectedPurchases1 := Bag new.
	expectedPurchases1 add: testObjectsFactory aBookSoldByPublisher.

	expectedPurchases2 := Bag new.
	expectedPurchases2 add: testObjectsFactory anotherBookSoldByPublisher 
				         withOccurrences: 4.

	purchaseList1 := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	purchaseList2 := anXXX listPurchasesFor: testObjectsFactory anotherValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList1 wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList1 total equals: 50.
	self assert: purchaseList1 books equals: (Bag with: testObjectsFactory aBookSoldByPublisher).
	self assert: (purchaseList1 quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.

	self assert: (purchaseList2 wasMadeBy: testObjectsFactory anotherValidClientID).
	self assert: purchaseList2 total equals: 400.
	self assert: purchaseList2 books equals: (Bag with: testObjectsFactory anotherBookSoldByPublisher).
	self assert: (purchaseList2 quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.! !
!InternalTusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/2/2020 18:13:12' prior: 51229533!
test14PurchasesByMultipleClientsAreListedCorrectly

	| anXXX aCartID anotherCartID purchaseList1 purchaseList2 |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList1 := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	purchaseList2 := anXXX listPurchasesFor: testObjectsFactory anotherValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList1 wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList1 total equals: 50.
	self assert: purchaseList1 books equals: (Bag with: testObjectsFactory aBookSoldByPublisher).
	self assert: (purchaseList1 quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.

	self assert: (purchaseList2 wasMadeBy: testObjectsFactory anotherValidClientID).
	self assert: purchaseList2 total equals: 400.
	self assert: purchaseList2 books equals: (Bag with: testObjectsFactory anotherBookSoldByPublisher).
	self assert: (purchaseList2 quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.! !
!InternalTusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/2/2020 18:14:08' prior: 51226132!
test15PurchaseListForClientThatNeverCreatedCartIsEmpty

	| anXXX purchaseList |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 0.
	self assert: purchaseList books equals: testSelector anEmptyBag.! !
!InternalTusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/2/2020 18:14:41' prior: 51226151!
test16PurchaseListOnlyShowsCheckedOutItems

	|anXXX aCartID purchaseList |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
			
	
	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 0.
	self assert: purchaseList books equals: testSelector anEmptyBag.! !

!testRun: #InternalTusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/2/2020 18:14:43'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/2/2020 18:14:43'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/2/2020 18:14:43'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/2/2020 18:14:43'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/2/2020 18:14:43'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/2/2020 18:14:43'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/2/2020 18:14:43'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/2/2020 18:14:43'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test09CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/2/2020 18:14:43'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test10SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/2/2020 18:14:43'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/2/2020 18:14:43'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/2/2020 18:14:43'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/2/2020 18:14:43'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/2/2020 18:14:44'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/2/2020 18:14:44'!
ERROR!

!testRun: #InternalTusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/2/2020 18:14:44'!
ERROR!

!testRun: #InternalTusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/2/2020 18:14:44'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/2/2020 18:14:44'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test19CheckoutCartAfterTimeout stamp: 'FR 12/2/2020 18:14:44'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/2/2020 18:14:44'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/2/2020 18:14:44'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/2/2020 18:14:46'!
ERROR!
!InternalTusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/2/2020 18:14:57' prior: 51229687!
test15PurchaseListForClientThatNeverCreatedCartIsEmpty

	| anXXX purchaseList |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 0.
	self assert: purchaseList books equals: testObjectsFactory anEmptyBag.! !
!InternalTusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/2/2020 18:15:13' prior: 51229712!
test16PurchaseListOnlyShowsCheckedOutItems

	|anXXX aCartID purchaseList |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
			
	
	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 0.
	self assert: purchaseList books equals: testObjectsFactory anEmptyBag.! !

!testRun: #InternalTusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/2/2020 18:15:16'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/2/2020 18:15:16'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/2/2020 18:15:16'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/2/2020 18:15:16'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/2/2020 18:15:16'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/2/2020 18:15:16'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/2/2020 18:15:16'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/2/2020 18:15:16'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test09CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/2/2020 18:15:16'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test10SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/2/2020 18:15:16'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/2/2020 18:15:16'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/2/2020 18:15:16'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/2/2020 18:15:16'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/2/2020 18:15:16'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/2/2020 18:15:16'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/2/2020 18:15:17'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/2/2020 18:15:17'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/2/2020 18:15:17'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test19CheckoutCartAfterTimeout stamp: 'FR 12/2/2020 18:15:17'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/2/2020 18:15:17'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/2/2020 18:15:17'!
PASSED!

!classRenamed: #CartLifetime as: #Session stamp: 'FR 12/2/2020 18:15:35'!
Smalltalk renameClassNamed: #CartLifetime as: #Session!
!InternalTusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FR 12/2/2020 18:15:37' prior: 51227721!
createCartFor: aClientID
	
	currentCartID := currentCartID + 1.	
	
	"activeCartIDsByClientID at: aClientID ifAbsentPut: Set new."
	"(activeCartIDsByClientID at: aClientID) add: currentCartID.	"
	
	activeCartsByCartID at: currentCartID
					put: (Session withCart: (Cart acceptingItemsOf: catalog)
								      ID: currentCartID
								      clientID: aClientID
								      andInterface: self).
	
	"clientIDByCartID at: currentCartID put: aClientID."
	
	"self refreshTimestampOf: currentCartID	"

! !

!classRenamed: #Session as: #TusLibrosSession stamp: 'FR 12/2/2020 18:15:53'!
Smalltalk renameClassNamed: #Session as: #TusLibrosSession!
!InternalTusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FR 12/2/2020 18:15:53' prior: 51229972!
createCartFor: aClientID
	
	currentCartID := currentCartID + 1.	
	
	"activeCartIDsByClientID at: aClientID ifAbsentPut: Set new."
	"(activeCartIDsByClientID at: aClientID) add: currentCartID.	"
	
	activeCartsByCartID at: currentCartID
					put: (TusLibrosSession withCart: (Cart acceptingItemsOf: catalog)
								      ID: currentCartID
								      clientID: aClientID
								      andInterface: self).
	
	"clientIDByCartID at: currentCartID put: aClientID."
	
	"self refreshTimestampOf: currentCartID	"

! !

----STARTUP---- (2 December 2020 23:56:08) as E:\!!NUEVO\Programas\CuisUniversity\v4383.1\CuisUniversity-4383.image!


----End fileIn of E:\!!NUEVO\Programas\CuisUniversity\v4383.1\TusLibrosUltimaIteraciÔøΩnConSesiÔøΩn.st----!
!InternalTusLibrosInterface methodsFor: 'initialization' stamp: 'FR 12/3/2020 00:29:12' prior: 51231339!
initializeWithAuthenticator: anAuthenticator catalog: aCatalog merchantProcessor: aMerchantProcessor andClock: aClock 

	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.
	clock := aClock.
	
	currentCartID := 0.
	activeCartsByCartID := Dictionary new.
	"activeCartIDsByClientID := Dictionary new."
	"clientIDByCartID := Dictionary new."
	"booksByClientID := Dictionary new."
	"timestampByCartID := Dictionary new."
	purchases := Bag new.! !

!testRun: #InternalTusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 00:29:14'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 00:29:14'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 00:29:14'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 00:29:14'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 00:29:14'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 00:29:14'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 00:29:14'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 00:29:14'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test09CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/3/2020 00:29:14'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test10SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 00:29:14'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 00:29:14'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 00:29:14'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 00:29:14'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 00:29:14'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 00:29:14'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 00:29:14'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 00:29:14'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/3/2020 00:29:14'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test19CheckoutCartAfterTimeout stamp: 'FR 12/3/2020 00:29:14'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 00:29:14'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 00:29:15'!
PASSED!

Object subclass: #InternalTusLibrosInterface
	instanceVariableNames: 'authenticator catalog merchantProcessor clock currentCartID activeCartsByCartID purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalTusLibrosInterface category: 'TusLibros' stamp: 'FR 12/3/2020 00:30:14'!
Object subclass: #InternalTusLibrosInterface
	instanceVariableNames: 'authenticator catalog merchantProcessor clock currentCartID activeCartsByCartID purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalTusLibrosInterface category: 'TusLibros' stamp: 'FR 12/3/2020 00:30:18'!
Object subclass: #InternalTusLibrosInterface
	instanceVariableNames: 'authenticator catalog merchantProcessor clock currentCartID cartsByCartID purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalTusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:30:18' prior: 51231517!
retireCart: aCartID

	cartsByCartID removeKey: aCartID.
	"activeCartIDsByClientID removeKey: (self clientIDForCart: aCartID)"! !
!InternalTusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:30:18' prior: 51231428!
cartWithID: aCartID

	^ (cartsByCartID at: aCartID)! !
!InternalTusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:30:18' prior: 51231392!
assertCartIDIsValid: aCartID

	^ (cartsByCartID includesKey: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ]! !
!InternalTusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:30:19' prior: 51231994!
initializeWithAuthenticator: anAuthenticator catalog: aCatalog merchantProcessor: aMerchantProcessor andClock: aClock 

	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.
	clock := aClock.
	
	currentCartID := 0.
	cartsByCartID := Dictionary new.
	"activeCartIDsByClientID := Dictionary new."
	"clientIDByCartID := Dictionary new."
	"booksByClientID := Dictionary new."
	"timestampByCartID := Dictionary new."
	purchases := Bag new.! !
!InternalTusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:30:19' prior: 51231441!
createCartFor: aClientID
	
	currentCartID := currentCartID + 1.	
	
	"activeCartIDsByClientID at: aClientID ifAbsentPut: Set new."
	"(activeCartIDsByClientID at: aClientID) add: currentCartID.	"
	
	cartsByCartID at: currentCartID
					put: (TusLibrosSession withCart: (Cart acceptingItemsOf: catalog)
								      ID: currentCartID
								      clientID: aClientID
								      andInterface: self).
	
	"clientIDByCartID at: currentCartID put: aClientID."
	
	"self refreshTimestampOf: currentCartID	"

! !
!InternalTusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:30:19' prior: 51231481!
inactivityTimeOf: aCartID

	^ ((cartsByCartID at: aCartID) timestamp) distanceTo: clock now! !
!InternalTusLibrosInterface methodsFor: 'checkout' stamp: 'FR 12/3/2020 00:30:35' prior: 51231410!
checkout: aCartID withCreditCard: aCreditCardNumber expiring: anExpirationDate withOwner: anOwnerName 
	
	| clientCreditCard |
	
	self assertCartIDIsValid: aCartID.
	self assertCartHasNotExpired: aCartID.
	
	clientCreditCard := self createCreditCardWithOwner: anOwnerName
					     number: aCreditCardNumber
					     andExpirationDate: anExpirationDate.
	
	self checkout: aCartID withCreditCard: clientCreditCard.	
	self retireCart: aCartID! !
!InternalTusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/3/2020 00:30:43' prior: 51232164!
createCartFor: aClientID
	
	currentCartID := currentCartID + 1.	
	
	cartsByCartID at: currentCartID
					put: (TusLibrosSession withCart: (Cart acceptingItemsOf: catalog)
								      ID: currentCartID
								      clientID: aClientID
								      andInterface: self).

! !
!InternalTusLibrosInterface methodsFor: 'initialization' stamp: 'FR 12/3/2020 00:30:55' prior: 51232145!
initializeWithAuthenticator: anAuthenticator catalog: aCatalog merchantProcessor: aMerchantProcessor andClock: aClock 

	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.
	clock := aClock.
	
	currentCartID := 0.
	cartsByCartID := Dictionary new.
	purchases := Bag new.! !
!InternalTusLibrosInterface methodsFor: 'listing' stamp: 'FR 12/3/2020 00:31:04' prior: 51231366!
listCart: aCartID
	
	self assertCartIDIsValid: aCartID.
	self assertCartHasNotExpired: aCartID.
		
	^ (self cartWithID: aCartID) list! !
!InternalTusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/3/2020 00:31:16' prior: 51232123!
retireCart: aCartID

	cartsByCartID removeKey: aCartID.! !
!InternalTusLibrosInterface methodsFor: 'adding' stamp: 'FR 12/3/2020 00:31:30' prior: 51231400!
add: anAmount of: aBook toCart: aCartID

	self assertCartIDIsValid: aCartID.
	self assertCartHasNotExpired: aCartID.
	
	(self cartWithID: aCartID) add: anAmount of: aBook.! !

!methodRemoval: InternalTusLibrosInterface class #bookNotForSaleErrorDescription stamp: 'FR 12/3/2020 00:32:20'!
bookNotForSaleErrorDescription
	
	^ 'Book is not sold by this publisher!!'!

!methodRemoval: InternalTusLibrosInterface class #invalidAmountErrorDescription stamp: 'FR 12/3/2020 00:32:36'!
invalidAmountErrorDescription
	
	^ 'Amount is not valid!!'!
!InternalTusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/3/2020 00:33:49' prior: 51231460!
createCreditCardWithOwner: anOwnerName number: aCreditCardNumber andExpirationDate: anExpirationDate

	^ CreditCard ownedBy: anOwnerName
							  withNumber: aCreditCardNumber
							  andExpirationMonthAndYear: anExpirationDate! !

!methodRemoval: InternalTusLibrosInterfaceTest #test09CannotCheckOutWithInvalidCreditCard stamp: 'FR 12/3/2020 00:34:35'!
test09CannotCheckOutWithInvalidCreditCard

	| anXXX aCartID |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  should: [
			anXXX checkout: aCartID 
				    withCreditCard: testObjectsFactory anInvalidCreditCardNumber
				    expiring: testObjectsFactory aNonExpiredDate
				    withOwner: testObjectsFactory aValidOwnerName
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalTusLibrosInterface invalidCreditCardErrorDescription.!
!InternalTusLibrosInterfaceTest methodsFor: 'tests - checkout' stamp: 'FR 12/3/2020 00:34:40'!
test09SuccessfulCheckoutIsDoneCorrectly

	| anXXX aCartID purchaseList |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
					     withPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 50.
	self assert: purchaseList books equals: (Bag with: testObjectsFactory aBookSoldByPublisher).
	self assert: (purchaseList quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.! !

!methodRemoval: InternalTusLibrosInterfaceTest #test10SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 00:34:40'!
test10SuccessfulCheckoutIsDoneCorrectly

	| anXXX aCartID purchaseList |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
					     withPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 50.
	self assert: purchaseList books equals: (Bag with: testObjectsFactory aBookSoldByPublisher).
	self assert: (purchaseList quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.!
!InternalTusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 00:34:48'!
test10CannotListPurchasesForInvalidClientID

	| anXXX |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientID
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	self  should: [
			anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
				    withPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalTusLibrosInterface invalidClientIDErrorDescription! !

!methodRemoval: InternalTusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 00:34:49'!
test11CannotListPurchasesForInvalidClientID

	| anXXX |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientID
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	self  should: [
			anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
				    withPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalTusLibrosInterface invalidClientIDErrorDescription!
!InternalTusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 00:34:52'!
test11CannotListPurchasesForClientWithIncorrectPassword

	| anXXX |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientPassword
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	self  should: [
			anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
				    withPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalTusLibrosInterface incorrectPasswordErrorDescription! !

!methodRemoval: InternalTusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 00:34:52'!
test12CannotListPurchasesForClientWithIncorrectPassword

	| anXXX |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientPassword
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	self  should: [
			anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
				    withPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: InternalTusLibrosInterface incorrectPasswordErrorDescription!
!InternalTusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 00:34:56'!
test12MultiplePurchasesBySameClientAreListedCorrectly

	| anXXX aCartID anotherCartID purchaseList |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 450.
	self assert: purchaseList books equals: (Bag with: testObjectsFactory aBookSoldByPublisher with: testObjectsFactory anotherBookSoldByPublisher).
	self assert: (purchaseList quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.
	self assert: (purchaseList quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.! !

!methodRemoval: InternalTusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 00:34:56'!
test13MultiplePurchasesBySameClientAreListedCorrectly

	| anXXX aCartID anotherCartID purchaseList |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 450.
	self assert: purchaseList books equals: (Bag with: testObjectsFactory aBookSoldByPublisher with: testObjectsFactory anotherBookSoldByPublisher).
	self assert: (purchaseList quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.
	self assert: (purchaseList quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.!
!InternalTusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 00:34:58'!
test13PurchasesByMultipleClientsAreListedCorrectly

	| anXXX aCartID anotherCartID purchaseList1 purchaseList2 |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList1 := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	purchaseList2 := anXXX listPurchasesFor: testObjectsFactory anotherValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList1 wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList1 total equals: 50.
	self assert: purchaseList1 books equals: (Bag with: testObjectsFactory aBookSoldByPublisher).
	self assert: (purchaseList1 quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.

	self assert: (purchaseList2 wasMadeBy: testObjectsFactory anotherValidClientID).
	self assert: purchaseList2 total equals: 400.
	self assert: purchaseList2 books equals: (Bag with: testObjectsFactory anotherBookSoldByPublisher).
	self assert: (purchaseList2 quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.! !

!methodRemoval: InternalTusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 00:34:58'!
test14PurchasesByMultipleClientsAreListedCorrectly

	| anXXX aCartID anotherCartID purchaseList1 purchaseList2 |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList1 := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	purchaseList2 := anXXX listPurchasesFor: testObjectsFactory anotherValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList1 wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList1 total equals: 50.
	self assert: purchaseList1 books equals: (Bag with: testObjectsFactory aBookSoldByPublisher).
	self assert: (purchaseList1 quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.

	self assert: (purchaseList2 wasMadeBy: testObjectsFactory anotherValidClientID).
	self assert: purchaseList2 total equals: 400.
	self assert: purchaseList2 books equals: (Bag with: testObjectsFactory anotherBookSoldByPublisher).
	self assert: (purchaseList2 quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.!
!InternalTusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 00:35:03'!
test14PurchaseListForClientThatNeverCreatedCartIsEmpty

	| anXXX purchaseList |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 0.
	self assert: purchaseList books equals: testObjectsFactory anEmptyBag.! !

!methodRemoval: InternalTusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 00:35:03'!
test15PurchaseListForClientThatNeverCreatedCartIsEmpty

	| anXXX purchaseList |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 0.
	self assert: purchaseList books equals: testObjectsFactory anEmptyBag.!
!InternalTusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 00:35:06'!
test15PurchaseListOnlyShowsCheckedOutItems

	|anXXX aCartID purchaseList |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
			
	
	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 0.
	self assert: purchaseList books equals: testObjectsFactory anEmptyBag.! !

!methodRemoval: InternalTusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 00:35:07'!
test16PurchaseListOnlyShowsCheckedOutItems

	|anXXX aCartID purchaseList |
	
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
			
	
	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 0.
	self assert: purchaseList books equals: testObjectsFactory anEmptyBag.!
!InternalTusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 00:35:13'!
test16CannotAddToCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
			anXXX add: 1
				    of: testObjectsFactory aBookSoldByPublisher
				    toCart: aCartID
		]
		raise:  testObjectsFactory functionalError
		withMessageText: InternalTusLibrosInterface timeoutErrorDescription! !

!methodRemoval: InternalTusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 00:35:13'!
test17CannotAddToCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
			anXXX add: 1
				    of: testObjectsFactory aBookSoldByPublisher
				    toCart: aCartID
		]
		raise:  testObjectsFactory functionalError
		withMessageText: InternalTusLibrosInterface timeoutErrorDescription!
!InternalTusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 00:35:15'!
test17CannotListCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [ anXXX listCart: aCartID ]
		raise: testObjectsFactory functionalError
		withMessageText: InternalTusLibrosInterface timeoutErrorDescription! !

!methodRemoval: InternalTusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/3/2020 00:35:15'!
test18CannotListCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [ anXXX listCart: aCartID ]
		raise: testObjectsFactory functionalError
		withMessageText: InternalTusLibrosInterface timeoutErrorDescription!
!InternalTusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 00:35:18'!
test18CheckoutCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
			anXXX checkout: aCartID
			    	    withCreditCard: testObjectsFactory aValidCreditCardNumber
			    	    expiring: testObjectsFactory aNonExpiredDate
			    	    withOwner: testObjectsFactory aValidOwnerName
	]
		raise: testObjectsFactory functionalError
		withMessageText: InternalTusLibrosInterface timeoutErrorDescription! !

!methodRemoval: InternalTusLibrosInterfaceTest #test19CheckoutCartAfterTimeout stamp: 'FR 12/3/2020 00:35:18'!
test19CheckoutCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
			anXXX checkout: aCartID
			    	    withCreditCard: testObjectsFactory aValidCreditCardNumber
			    	    expiring: testObjectsFactory aNonExpiredDate
			    	    withOwner: testObjectsFactory aValidOwnerName
	]
		raise: testObjectsFactory functionalError
		withMessageText: InternalTusLibrosInterface timeoutErrorDescription!
!InternalTusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 00:35:23'!
test19AddingToCartRefreshesTimeout

	| anXXX aCartID aClock expectedList |
	
	aClock := Clock new.
		
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX add: 1 of: testObjectsFactory anotherBookSoldByPublisher toCart: aCartID.
	
	expectedList := {testObjectsFactory aBookSoldByPublisher. testObjectsFactory anotherBookSoldByPublisher} asBag.
	
	self assert: (anXXX listCart: aCartID) equals: expectedList! !

!methodRemoval: InternalTusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 00:35:24'!
test20AddingToCartRefreshesTimeout

	| anXXX aCartID aClock expectedList |
	
	aClock := Clock new.
		
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX add: 1 of: testObjectsFactory anotherBookSoldByPublisher toCart: aCartID.
	
	expectedList := {testObjectsFactory aBookSoldByPublisher. testObjectsFactory anotherBookSoldByPublisher} asBag.
	
	self assert: (anXXX listCart: aCartID) equals: expectedList!
!InternalTusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 00:35:26'!
test20ListingCartRefreshesTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	self assert: (anXXX listCart: aCartID) equals: Bag new! !

!methodRemoval: InternalTusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 00:35:26'!
test21ListingCartRefreshesTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := InternalTusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	self assert: (anXXX listCart: aCartID) equals: Bag new!

!testRun: #InternalTusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 00:35:42'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 00:35:42'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 00:35:42'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 00:35:42'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 00:35:42'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 00:35:42'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 00:35:42'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 00:35:42'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 00:35:42'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test10CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 00:35:43'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test11CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 00:35:43'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test12MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 00:35:43'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test13PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 00:35:43'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test14PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 00:35:43'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test15PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 00:35:43'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test16CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 00:35:43'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test17CannotListCartAfterTimeout stamp: 'FR 12/3/2020 00:35:43'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test18CheckoutCartAfterTimeout stamp: 'FR 12/3/2020 00:35:43'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test19AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 00:35:43'!
PASSED!

!testRun: #InternalTusLibrosInterfaceTest #test20ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 00:35:43'!
PASSED!

!methodRemoval: InternalTusLibrosInterface class #invalidCreditCardErrorDescription stamp: 'FR 12/3/2020 00:36:30'!
invalidCreditCardErrorDescription
	
	^ 'Credit card is invalid!!'!
!InternalTusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/3/2020 00:37:23'!
sessionWithID: aCartID

	^ (cartsByCartID at: aCartID)! !
!InternalTusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:37:24' prior: 51232248!
add: anAmount of: aBook toCart: aCartID

	self assertCartIDIsValid: aCartID.
	self assertCartHasNotExpired: aCartID.
	
	(self sessionWithID: aCartID) add: anAmount of: aBook.! !
!InternalTusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:37:24' prior: 51231433!
checkout: aCartID withCreditCard: aCreditCard

	(self sessionWithID: aCartID) checkoutWithCreditCard: aCreditCard
						registeringOn: purchases.! !
!InternalTusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:37:24' prior: 51231383!
assertCartHasNotExpired: aCartID

	(self sessionWithID: aCartID) isExpired ifTrue: [
		self retireCart: aCartID.
		self error: self class timeoutErrorDescription
	].! !
!InternalTusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:37:24' prior: 51232235!
listCart: aCartID
	
	self assertCartIDIsValid: aCartID.
	self assertCartHasNotExpired: aCartID.
		
	^ (self sessionWithID: aCartID) list! !

!methodRemoval: InternalTusLibrosInterface #cartWithID: stamp: 'FR 12/3/2020 00:37:24'!
cartWithID: aCartID

	^ (cartsByCartID at: aCartID)!
!InternalTusLibrosInterface methodsFor: 'checkout' stamp: 'FR 12/3/2020 00:38:23' prior: 51232191!
checkout: aCartID withCreditCard: aCreditCardNumber expiring: anExpirationDate withOwner: anOwnerName 
	
	| clientCreditCard |
	
	self assertCartIDIsValid: aCartID.
	self assertCartHasNotExpired: aCartID.
	
	clientCreditCard := CreditCard ownedBy: anOwnerName
							  withNumber: aCreditCardNumber
							  andExpirationMonthAndYear: anExpirationDate.
	
	self checkout: aCartID withCreditCard: clientCreditCard.	
	self retireCart: aCartID! !

!methodRemoval: InternalTusLibrosInterface #createCreditCardWithOwner:number:andExpirationDate: stamp: 'FR 12/3/2020 00:38:28'!
createCreditCardWithOwner: anOwnerName number: aCreditCardNumber andExpirationDate: anExpirationDate

	^ CreditCard ownedBy: anOwnerName
							  withNumber: aCreditCardNumber
							  andExpirationMonthAndYear: anExpirationDate!
!InternalTusLibrosInterface methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 00:40:16' prior: 51233240!
assertCartHasNotExpired: aCartID

	(self sessionWithID: aCartID) ifExpired: [
		self retireCart: aCartID.
		self error: self class timeoutErrorDescription
	].! !
!InternalTusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/3/2020 00:40:40' prior: 51233231!
checkout: aCartID withCreditCard: aCreditCard

	(self sessionWithID: aCartID) checkoutWithCreditCard: aCreditCard
						     registeringOn: purchases.! !
!InternalTusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/3/2020 00:43:13' prior: 51232209!
createCartFor: aClientID
	
	| cartID |
	
	cartID := self newCartID.
		
	cartsByCartID at: cartID
			      put: (TusLibrosSession withCart: (Cart acceptingItemsOf: catalog)
								      ID: cartID
								      clientID: aClientID
								      andInterface: self).

! !
!InternalTusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/3/2020 00:43:29'!
newCartID

	currentCartID := currentCartID + 1.
	^ currentCartID! !
!InternalTusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/3/2020 00:43:46' prior: 51233308!
createCartFor: aClientID
	
	| cartID |
	
	cartID := self newCartID.
		
	cartsByCartID at: cartID
			      put: (TusLibrosSession withCart: (Cart acceptingItemsOf: catalog)
								     ID: cartID
								     clientID: aClientID
								     andInterface: self).

! !
!InternalTusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/3/2020 00:44:24' prior: 51232184!
inactivityTimeOf: aCartID

	^ ((self sessionWithID: aCartID) timestamp) distanceTo: clock now! !

!classDefinition: #TusLibrosSession category: 'TusLibros' stamp: 'FR 12/3/2020 00:46:54'!
Object subclass: #TusLibrosSession
	instanceVariableNames: 'cart cartID clientID timestamp interface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSession methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:46:54' prior: 51231884!
initializeWithCart: aCart ID: aCartID clientID: aClientID andInterface: anInternalTusLibrosInterface

	cart := aCart.
	cartID := aCartID.
	clientID := aClientID.
	timestamp := anInternalTusLibrosInterface currentTime.
	interface := anInternalTusLibrosInterface.! !
!TusLibrosSession methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:46:54' prior: 51231895!
initializeWithCart: aCart ID: aCartID clientID: aClientID andTimestamp: aTimestamp

	cart := aCart.
	cartID := aCartID.
	clientID := aClientID.
	timestamp := aTimestamp.! !
!TusLibrosSession methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:46:54' prior: 51231903!
initializeWithCart: aCart ID: aCartID clientID: aClientID timestamp: aTimestamp andInterface: anInternalTusLibrosInterface

	cart := aCart.
	cartID := aCartID.
	clientID := aClientID.
	timestamp := aTimestamp.
	interface := anInternalTusLibrosInterface.! !
!TusLibrosSession methodsFor: 'timestamp' stamp: 'FR 12/3/2020 00:47:54'!
ifExpired: aBlock

	^ self isExpired ifTrue: aBlock! !

!methodRemoval: TusLibrosSession class #withCart:ID:clientID:andTimestamp: stamp: 'FR 12/3/2020 00:49:40'!
withCart: aCart ID: aCartID clientID: aClientID andTimestamp: aTimestamp

	^ self new initializeWithCart: aCart ID: aCartID clientID: aClientID andTimestamp: aTimestamp.!

!methodRemoval: TusLibrosSession class #withCart:ID:clientID:timestamp:andInterface: stamp: 'FR 12/3/2020 00:49:42'!
withCart: aCart ID: aCartID clientID: aClientID timestamp: aTimestamp andInterface: anInternalTusLibrosInterface

	^ self new initializeWithCart: aCart ID: aCartID clientID: aClientID timestamp: aTimestamp andInterface: anInternalTusLibrosInterface!

!methodRemoval: TusLibrosSession #initializeWithCart:ID:clientID:andTimestamp: stamp: 'FR 12/3/2020 00:49:44'!
initializeWithCart: aCart ID: aCartID clientID: aClientID andTimestamp: aTimestamp

	cart := aCart.
	cartID := aCartID.
	clientID := aClientID.
	timestamp := aTimestamp.!

!methodRemoval: TusLibrosSession #initializeWithCart:ID:clientID:timestamp:andInterface: stamp: 'FR 12/3/2020 00:49:47'!
initializeWithCart: aCart ID: aCartID clientID: aClientID timestamp: aTimestamp andInterface: anInternalTusLibrosInterface

	cart := aCart.
	cartID := aCartID.
	clientID := aClientID.
	timestamp := aTimestamp.
	interface := anInternalTusLibrosInterface.!

!classRenamed: #InternalTusLibrosInterface as: #TusLibrosInterface stamp: 'FR 12/3/2020 00:53:32'!
Smalltalk renameClassNamed: #InternalTusLibrosInterface as: #TusLibrosInterface!
!InternalTusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:53:33' prior: 51232748!
test14PurchaseListForClientThatNeverCreatedCartIsEmpty

	| anXXX purchaseList |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 0.
	self assert: purchaseList books equals: testObjectsFactory anEmptyBag.! !
!InternalTusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:53:33' prior: 51230574!
test07CannotListWithInvalidCartID

	| anXXX |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	self  should: [
			anXXX listCart: testObjectsFactory anInvalidCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidCartIDErrorDescription! !
!InternalTusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:53:33' prior: 51232436!
test11CannotListPurchasesForClientWithIncorrectPassword

	| anXXX |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientPassword
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	self  should: [
			anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
				    withPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface incorrectPasswordErrorDescription! !
!InternalTusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:53:33' prior: 51233022!
test19AddingToCartRefreshesTimeout

	| anXXX aCartID aClock expectedList |
	
	aClock := Clock new.
		
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX add: 1 of: testObjectsFactory anotherBookSoldByPublisher toCart: aCartID.
	
	expectedList := {testObjectsFactory aBookSoldByPublisher. testObjectsFactory anotherBookSoldByPublisher} asBag.
	
	self assert: (anXXX listCart: aCartID) equals: expectedList! !
!InternalTusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:53:33' prior: 51230703!
test03SuccessfulyCreatedCartIsEmpty

	| anXXX aCartID |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
				     andPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (anXXX listCart: aCartID) isEmpty! !
!InternalTusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:53:33' prior: 51230727!
test08CannotCheckOutWithInvalidCartID

	| anXXX |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	self  should: [
			anXXX checkout: testObjectsFactory anInvalidCartID
				    withCreditCard: testObjectsFactory aValidCreditCardNumber
				    expiring: testObjectsFactory aNonExpiredDate
				    withOwner: testObjectsFactory aValidOwnerName
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidCartIDErrorDescription! !
!InternalTusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:53:33' prior: 51230614!
test05BookIsAddedSuccessfully

	| anXXX aCartID |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  assert: (anXXX listCart: aCartID) 
		equals: (Bag with: testObjectsFactory aBookSoldByPublisher)! !
!AuthenticatorSimulator class methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:53:33' prior: 51231009!
invalidClientID

	^ self new initializeWith: [ self error: TusLibrosInterface invalidClientIDErrorDescription ]! !
!InternalTusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:53:33' prior: 51232860!
test16CannotAddToCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
			anXXX add: 1
				    of: testObjectsFactory aBookSoldByPublisher
				    toCart: aCartID
		]
		raise:  testObjectsFactory functionalError
		withMessageText: TusLibrosInterface timeoutErrorDescription! !
!InternalTusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:53:33' prior: 51230661!
test01CannotCreateCartWithInvalidID

	| anXXX |
		
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientID
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation 
				andClock: Clock new.
	
	self  should: [
			anXXX createCartForClientWithID: testObjectsFactory anInvalidClientID 
				    andPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidClientIDErrorDescription! !
!InternalTusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:53:33' prior: 51232797!
test15PurchaseListOnlyShowsCheckedOutItems

	|anXXX aCartID purchaseList |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
			
	
	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 0.
	self assert: purchaseList books equals: testObjectsFactory anEmptyBag.! !
!InternalTusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:53:33' prior: 51230637!
test06MultipleBooksAreAddedSuccessfully

	| anXXX aCartID |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 5
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  assert: (anXXX listCart: aCartID) 
		equals: (Bag new add: testObjectsFactory aBookSoldByPublisher withOccurrences: 5; yourself)! !
!AuthenticatorSimulator class methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:53:33' prior: 51231016!
invalidClientPassword

	^ self new initializeWith: [ self error: TusLibrosInterface incorrectPasswordErrorDescription ]! !
!InternalTusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:53:33' prior: 51232311!
test09SuccessfulCheckoutIsDoneCorrectly

	| anXXX aCartID purchaseList |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
					     withPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 50.
	self assert: purchaseList books equals: (Bag with: testObjectsFactory aBookSoldByPublisher).
	self assert: (purchaseList quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.! !
!InternalTusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:53:34' prior: 51232480!
test12MultiplePurchasesBySameClientAreListedCorrectly

	| anXXX aCartID anotherCartID purchaseList |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 450.
	self assert: purchaseList books equals: (Bag with: testObjectsFactory aBookSoldByPublisher with: testObjectsFactory anotherBookSoldByPublisher).
	self assert: (purchaseList quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.
	self assert: (purchaseList quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.! !
!InternalTusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:53:34' prior: 51230593!
test04CannotAddToCartWithInvalidCartID

	| anXXX |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	self  should: [ anXXX add: 1
					   of: testObjectsFactory aBookSoldByPublisher
					   toCart: testObjectsFactory anInvalidCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidCartIDErrorDescription! !
!InternalTusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:53:34' prior: 51233085!
test20ListingCartRefreshesTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	self assert: (anXXX listCart: aCartID) equals: Bag new! !
!InternalTusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:53:34' prior: 51232913!
test17CannotListCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [ anXXX listCart: aCartID ]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface timeoutErrorDescription! !
!InternalTusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:53:34' prior: 51230682!
test02CannotCreateCartWithIncorrectPassword

	| anXXX |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientPassword
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	self  should: [
			anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
				    andPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface incorrectPasswordErrorDescription! !
!InternalTusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:53:34' prior: 51232393!
test10CannotListPurchasesForInvalidClientID

	| anXXX |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientID
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	self  should: [
			anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
				    withPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidClientIDErrorDescription! !
!InternalTusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:53:34' prior: 51232603!
test13PurchasesByMultipleClientsAreListedCorrectly

	| anXXX aCartID anotherCartID purchaseList1 purchaseList2 |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList1 := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	purchaseList2 := anXXX listPurchasesFor: testObjectsFactory anotherValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList1 wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList1 total equals: 50.
	self assert: purchaseList1 books equals: (Bag with: testObjectsFactory aBookSoldByPublisher).
	self assert: (purchaseList1 quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.

	self assert: (purchaseList2 wasMadeBy: testObjectsFactory anotherValidClientID).
	self assert: purchaseList2 total equals: 400.
	self assert: purchaseList2 books equals: (Bag with: testObjectsFactory anotherBookSoldByPublisher).
	self assert: (purchaseList2 quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.! !
!InternalTusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 00:53:34' prior: 51232962!
test18CheckoutCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
			anXXX checkout: aCartID
			    	    withCreditCard: testObjectsFactory aValidCreditCardNumber
			    	    expiring: testObjectsFactory aNonExpiredDate
			    	    withOwner: testObjectsFactory aValidOwnerName
	]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface timeoutErrorDescription! !

!classRenamed: #InternalTusLibrosInterfaceTest as: #TusLibrosInterfaceTest stamp: 'FR 12/3/2020 00:53:40'!
Smalltalk renameClassNamed: #InternalTusLibrosInterfaceTest as: #TusLibrosInterfaceTest!

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 00:54:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 00:54:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 00:54:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 00:54:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 00:54:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 00:54:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 00:54:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 00:54:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 00:54:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 00:54:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 00:54:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 00:54:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 00:54:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 00:54:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 00:54:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 00:54:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CannotListCartAfterTimeout stamp: 'FR 12/3/2020 00:54:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CheckoutCartAfterTimeout stamp: 'FR 12/3/2020 00:54:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 00:54:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 00:54:21'!
PASSED!

----STARTUP---- (3 December 2020 08:06:44) as E:\!!NUEVO\Programas\CuisUniversity\v4383.1\CuisUniversity-4383.image!


----End fileIn of E:\!!NUEVO\Programas\CuisUniversity\v4383.1\TusLibrosUltimaIteracionConLimpieza.st----!
!TusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/3/2020 08:30:50'!
retireSession: aCartID

	cartsByCartID removeKey: aCartID.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 08:30:51' prior: 51235735!
checkout: aCartID withCreditCard: aCreditCardNumber expiring: anExpirationDate withOwner: anOwnerName 
	
	| clientCreditCard |
	
	self assertCartIDIsValid: aCartID.
	self assertCartHasNotExpired: aCartID.
	
	clientCreditCard := CreditCard ownedBy: anOwnerName
							  withNumber: aCreditCardNumber
							  andExpirationMonthAndYear: anExpirationDate.
	
	self checkout: aCartID withCreditCard: clientCreditCard.	
	self retireSession: aCartID! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 08:30:51' prior: 51235712!
assertCartHasNotExpired: aCartID

	(self sessionWithID: aCartID) ifExpired: [
		self retireSession: aCartID.
		self error: self class timeoutErrorDescription
	].! !

!methodRemoval: TusLibrosInterface #retireCart: stamp: 'FR 12/3/2020 08:30:51'!
retireCart: aCartID

	cartsByCartID removeKey: aCartID.!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FR 12/3/2020 08:31:04'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'authenticator catalog merchantProcessor clock currentCartID sessionsByCartID purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 08:31:04' prior: 51235720!
assertCartIDIsValid: aCartID

	^ (sessionsByCartID includesKey: aCartID) ifFalse: [ self error: self class invalidCartIDErrorDescription ]! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 08:31:04' prior: 51235807!
createCartFor: aClientID
	
	| cartID |
	
	cartID := self newCartID.
		
	sessionsByCartID at: cartID
			      put: (TusLibrosSession withCart: (Cart acceptingItemsOf: catalog)
								     ID: cartID
								     clientID: aClientID
								     andInterface: self).

! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 08:31:05' prior: 51235675!
initializeWithAuthenticator: anAuthenticator catalog: aCatalog merchantProcessor: aMerchantProcessor andClock: aClock 

	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.
	clock := aClock.
	
	currentCartID := 0.
	sessionsByCartID := Dictionary new.
	purchases := Bag new.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 08:31:05' prior: 51235955!
retireSession: aCartID

	sessionsByCartID removeKey: aCartID.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 08:31:05' prior: 51235794!
sessionWithID: aCartID

	^ (sessionsByCartID at: aCartID)! !
!TusLibrosInterface methodsFor: 'private - other' stamp: 'FR 12/3/2020 08:31:58' prior: 51236010!
createCartFor: aClientID
	
	| cartID |
	
	cartID := self newCartID.
		
	sessionsByCartID at: cartID
				   put: (TusLibrosSession withCart: (Cart acceptingItemsOf: catalog)
								     	  ID: cartID
								    	  clientID: aClientID
								     	  andInterface: self).

! !
!TusLibrosInterface methodsFor: 'checkout' stamp: 'FR 12/3/2020 09:54:46' prior: 51235961!
checkout: aCartID withCreditCard: aCreditCardNumber expiring: anExpirationDate withOwner: anOwnerName 
	
	| clientCreditCard |
	
	self assertCartIDIsValid: aCartID.
	self assertCartHasNotExpired: aCartID.
	
	clientCreditCard := CreditCard ownedBy: anOwnerName
							  withNumber: aCreditCardNumber
							  andExpirationMonthAndYear: anExpirationDate.
	
	self checkout: aCartID withCreditCard: clientCreditCard.	
	self retireSession: aCartID.
	
	^ aCartID! !
!Cashier methodsFor: 'checkout - private' stamp: 'FR 12/3/2020 10:13:15' prior: 51235193!
registerSale

	salesBook add: (Sale withTotal: cart total andItems: cart books asBag)! !
!Sale methodsFor: 'initialization' stamp: 'FR 12/3/2020 10:13:47' prior: 51235482!
initializeWithTotal: totalCost andItems: booksWithTheirQuantities

	total := totalCost.
	items := booksWithTheirQuantities.! !
!Sale class methodsFor: 'instance creation' stamp: 'FR 12/3/2020 10:13:56' prior: 51235506!
withTotal: totalCost andItems: booksWithTheirQuantities

	^ self new initializeWithTotal: totalCost andItems: booksWithTheirQuantities! !
!Sale class methodsFor: 'instance creation' stamp: 'FR 12/3/2020 10:14:06'!
withTotal: totalCost andBooks: booksWithTheirQuantities

	^ self new initializeWithTotal: totalCost andItems: booksWithTheirQuantities! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 10:14:06' prior: 51236077!
registerSale

	salesBook add: (Sale withTotal: cart total andBooks: cart books asBag)! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 10:14:06' prior: 51235770!
purchasesFrom: aClientID
	
	| purchasesByClient clientTotal clientBooks clientSale clientPurchase |
		
	purchasesByClient := (purchases select: [ :aPurchase | aPurchase wasMadeBy: aClientID ]).
	
	clientTotal := purchasesByClient inject: 0 into: [ :total :aPurchase | total + aPurchase total ].
	clientBooks := Dictionary new.
	purchasesByClient do: [ :aPurchase |
		aPurchase books do: [ :aBook |
			clientBooks at: aBook ifAbsentPut: 0.
			clientBooks at: aBook put: (clientBooks at: aBook) + (aPurchase quantityOf: aBook).
		]
	].
	
	clientSale := Sale withTotal: clientTotal andBooks: clientBooks.
	clientPurchase := Purchase from: aClientID with: clientSale.
	
	^ clientPurchase.! !

!methodRemoval: Sale class #withTotal:andItems: stamp: 'FR 12/3/2020 10:14:06'!
withTotal: totalCost andItems: booksWithTheirQuantities

	^ self new initializeWithTotal: totalCost andItems: booksWithTheirQuantities!

!classDefinition: #Sale category: 'TusLibros' stamp: 'FR 12/3/2020 10:14:53'!
Object subclass: #Sale
	instanceVariableNames: 'total booksWithQuantities'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 10:14:53' prior: 51236083!
initializeWithTotal: totalCost andItems: booksWithTheirQuantities

	total := totalCost.
	booksWithQuantities := booksWithTheirQuantities.! !
!Sale methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 10:14:53' prior: 51235491!
quantityOf: aBook

	^ booksWithQuantities at: aBook! !
!Sale methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 10:14:53' prior: 51235488!
books

	^ booksWithQuantities keys asBag! !
!Sale methodsFor: 'accessing' stamp: 'FR 12/3/2020 10:15:23' prior: 51236163!
books

	^ booksWithQuantities asSet! !
!Sale methodsFor: 'accessing' stamp: 'FR 12/3/2020 10:15:47' prior: 51236158!
quantityOf: aBook

	^ booksWithQuantities occurrencesOf: aBook! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FR 12/3/2020 10:16:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FR 12/3/2020 10:16:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FR 12/3/2020 10:16:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FR 12/3/2020 10:16:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FR 12/3/2020 10:16:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FR 12/3/2020 10:16:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FR 12/3/2020 10:16:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FR 12/3/2020 10:16:26'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FR 12/3/2020 10:16:28'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FR 12/3/2020 10:16:28'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FR 12/3/2020 10:16:28'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FR 12/3/2020 10:16:28'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FR 12/3/2020 10:16:28'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FR 12/3/2020 10:16:28'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberCannotHaveLessThanSixteenDigits stamp: 'FR 12/3/2020 10:16:30'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNameCannotBeEmpty stamp: 'FR 12/3/2020 10:16:30'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberCannotHaveMoreThanSixteenDigits stamp: 'FR 12/3/2020 10:16:31'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithValidInfoIsCorrectlyCreated stamp: 'FR 12/3/2020 10:16:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 10:16:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 10:16:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 10:16:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 10:16:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 10:16:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 10:16:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 10:16:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 10:16:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 10:16:34'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test10CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 10:16:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 10:16:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 10:16:34'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test13PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 10:16:34'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test14PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 10:16:34'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 10:16:34'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test16CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 10:16:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CannotListCartAfterTimeout stamp: 'FR 12/3/2020 10:16:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CheckoutCartAfterTimeout stamp: 'FR 12/3/2020 10:16:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 10:16:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 10:16:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 10:16:36'!
FAILURE!

purchaseList books!

self first!

aPurchase books!

self books!

self books!

booksWithQuantities occurrencesOf: aBook!

(aPurchase quantityOf: aBook)!

(clientBooks at: aBook)!

clientBooks at: aBook put: (clientBooks at: aBook) + (aPurchase quantityOf: aBook)!

aPurchase books!
!TusLibrosInterface methodsFor: 'accessing' stamp: 'FR 12/3/2020 10:28:52' prior: 51236111!
purchasesFrom: aClientID
	
	| purchasesByClient clientTotal clientBooks clientSale clientPurchase |
		
	purchasesByClient := (purchases select: [ :aPurchase | aPurchase wasMadeBy: aClientID ]).
	
	clientTotal := purchasesByClient inject: 0 into: [ :total :aPurchase | total + aPurchase total ].
	clientBooks := Dictionary new.
	purchasesByClient do: [ :aPurchase |
		aPurchase books do: [ :aBook |
			clientBooks at: aBook ifAbsentPut: 0.
			clientBooks at: aBook put: (clientBooks at: aBook) + (aPurchase quantityOf: aBook).
		].
	].
	
	clientSale := Sale withTotal: clientTotal andBooks: clientBooks.
	clientPurchase := Purchase from: aClientID with: clientSale.
	
	^ clientPurchase.! !
!TusLibrosInterface methodsFor: 'accessing' stamp: 'FR 12/3/2020 10:29:34' prior: 51236321!
purchasesFrom: aClientID
	
	| purchasesByClient clientTotal clientBooks clientSale clientPurchase |
		
	purchasesByClient := (purchases select: [ :aPurchase | aPurchase wasMadeBy: aClientID ]) asOrderedCollection.
	
	clientTotal := purchasesByClient inject: 0 into: [ :total :aPurchase | total + aPurchase total ].
	clientBooks := Dictionary new.
	purchasesByClient do: [ :aPurchase |
		aPurchase books asOrderedCollection do: [ :aBook |
			clientBooks at: aBook ifAbsentPut: 0.
			clientBooks at: aBook put: (clientBooks at: aBook) + (aPurchase quantityOf: aBook).
		].
	].
	
	clientSale := Sale withTotal: clientTotal andBooks: clientBooks.
	clientPurchase := Purchase from: aClientID with: clientSale.
	
	^ clientPurchase.! !

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 10:31:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 10:31:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 10:31:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 10:31:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 10:31:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 10:31:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 10:31:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 10:31:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 10:31:47'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test10CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 10:31:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 10:31:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 10:31:47'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test13PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 10:31:47'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test14PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 10:31:47'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 10:31:47'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test16CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 10:31:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CannotListCartAfterTimeout stamp: 'FR 12/3/2020 10:31:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CheckoutCartAfterTimeout stamp: 'FR 12/3/2020 10:31:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 10:31:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 10:31:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 10:31:49'!
FAILURE!
!TusLibrosInterface methodsFor: 'accessing' stamp: 'FR 12/3/2020 10:34:10' prior: 51236346!
purchasesFrom: aClientID
	
	| purchasesByClient clientTotal clientBooks clientSale clientPurchase |
		
	purchasesByClient := (purchases select: [ :aPurchase | aPurchase wasMadeBy: aClientID ]) asOrderedCollection.
	
	clientTotal := purchasesByClient inject: 0 into: [ :total :aPurchase | total + aPurchase total ].
	
	clientBooks := Bag new.
	purchasesByClient do: [ :aPurchase | clientBooks addAll: aPurchase books].
	
	clientSale := Sale withTotal: clientTotal andBooks: clientBooks.
	clientPurchase := Purchase from: aClientID with: clientSale.
	
	^ clientPurchase.! !

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 10:34:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 10:34:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 10:34:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 10:34:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 10:34:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 10:34:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 10:34:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 10:34:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 10:34:12'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test10CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 10:34:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 10:34:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 10:34:12'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test13PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 10:34:12'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test14PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 10:34:13'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 10:34:13'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test16CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 10:34:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CannotListCartAfterTimeout stamp: 'FR 12/3/2020 10:34:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CheckoutCartAfterTimeout stamp: 'FR 12/3/2020 10:34:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 10:34:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 10:34:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 10:34:14'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'tests - checkout' stamp: 'FR 12/3/2020 10:35:10' prior: 51234845!
test09SuccessfulCheckoutIsDoneCorrectly

	| anXXX aCartID purchaseList |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
					     withPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 50.
	self assert: purchaseList books includes: testObjectsFactory aBookSoldByPublisher.
	self assert: purchaseList size equals: 1.
	self assert: (purchaseList quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.! !

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 10:35:13'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'tests - checkout' stamp: 'FR 12/3/2020 10:35:24' prior: 51236547!
test09SuccessfulCheckoutIsDoneCorrectly

	| anXXX aCartID purchaseList |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
					     withPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 50.
	self assert: purchaseList books includes: testObjectsFactory aBookSoldByPublisher.
	self assert: purchaseList books size equals: 1.
	self assert: (purchaseList quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.! !

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 10:35:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 10:35:28'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 10:36:09' prior: 51234484!
test12MultiplePurchasesBySameClientAreListedCorrectly

	| anXXX aCartID anotherCartID purchaseList |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 450.
	self assert: purchaseList books includes: testObjectsFactory aBookSoldByPublisher.
	self assert: purchaseList books includes: testObjectsFactory anotherBookSoldByPublisher.
	self assert: purchaseList books size equals: 1.
	self assert: (purchaseList quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.
	self assert: (purchaseList quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.! !

!testRun: #TusLibrosInterfaceTest #test12MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 10:36:15'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 10:36:21' prior: 51236642!
test12MultiplePurchasesBySameClientAreListedCorrectly

	| anXXX aCartID anotherCartID purchaseList |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 450.
	self assert: purchaseList books includes: testObjectsFactory aBookSoldByPublisher.
	self assert: purchaseList books includes: testObjectsFactory anotherBookSoldByPublisher.
	self assert: purchaseList books size equals: 2.
	self assert: (purchaseList quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.
	self assert: (purchaseList quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.! !

!testRun: #TusLibrosInterfaceTest #test12MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 10:36:22'!
FAILURE!
!TusLibrosInterface methodsFor: 'accessing' stamp: 'FR 12/3/2020 10:38:58' prior: 51236449!
purchasesFrom: aClientID
	
	| purchasesByClient clientTotal clientBooks clientSale clientPurchase |
		
	purchasesByClient := (purchases select: [ :aPurchase | aPurchase wasMadeBy: aClientID ]) asOrderedCollection.
	
	clientTotal := purchasesByClient inject: 0 into: [ :total :aPurchase | total + aPurchase total ].
	
	clientBooks := Bag new.
	purchasesByClient do: [ :aPurchase | clientBooks addAll: aPurchase booksWithQuantities].
	
	clientSale := Sale withTotal: clientTotal andBooks: clientBooks.
	clientPurchase := Purchase from: aClientID with: clientSale.
	
	^ clientPurchase.! !
!Sale methodsFor: 'accessing' stamp: 'FR 12/3/2020 10:39:42'!
booksWithQuantities

	^ booksWithQuantities copy! !
!Purchase methodsFor: 'accessing' stamp: 'FR 12/3/2020 10:39:55'!
booksWithQuantities

	^ sale booksWithQuantities! !

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 10:40:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 10:40:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 10:40:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 10:40:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 10:40:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 10:40:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 10:40:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 10:40:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 10:40:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 10:40:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 10:40:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 10:40:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 10:40:12'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test14PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 10:40:12'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 10:40:12'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test16CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 10:40:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CannotListCartAfterTimeout stamp: 'FR 12/3/2020 10:40:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CheckoutCartAfterTimeout stamp: 'FR 12/3/2020 10:40:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 10:40:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 10:40:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 10:40:14'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 10:41:26' prior: 51234545!
test13PurchasesByMultipleClientsAreListedCorrectly

	| anXXX aCartID anotherCartID purchaseList1 purchaseList2 |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList1 := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	purchaseList2 := anXXX listPurchasesFor: testObjectsFactory anotherValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList1 wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList1 total equals: 50.
	self assert: purchaseList1 books includes: testObjectsFactory aBookSoldByPublisher.
	self assert: purchaseList1 books size = 1.
	self assert: (purchaseList1 quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.

	self assert: (purchaseList2 wasMadeBy: testObjectsFactory anotherValidClientID).
	self assert: purchaseList2 total equals: 400.
	self assert: purchaseList1 books includes: testObjectsFactory anotherBookSoldByPublisher.
	self assert: purchaseList1 books size = 4.
	self assert: (purchaseList2 quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.! !

!testRun: #TusLibrosInterfaceTest #test13PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 10:41:32'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 10:42:23' prior: 51236884!
test13PurchasesByMultipleClientsAreListedCorrectly

	| anXXX aCartID anotherCartID purchaseList1 purchaseList2 |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList1 := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	purchaseList2 := anXXX listPurchasesFor: testObjectsFactory anotherValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList1 wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList1 total equals: 50.
	self assert: purchaseList1 books size = 1.
	self assert: (purchaseList1 quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.

	self assert: (purchaseList2 wasMadeBy: testObjectsFactory anotherValidClientID).
	self assert: purchaseList2 total equals: 400.
	self assert: purchaseList1 books size = 4.
	self assert: (purchaseList2 quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.! !

!testRun: #TusLibrosInterfaceTest #test13PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 10:42:25'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 10:42:33' prior: 51236962!
test13PurchasesByMultipleClientsAreListedCorrectly

	| anXXX aCartID anotherCartID purchaseList1 purchaseList2 |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList1 := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	purchaseList2 := anXXX listPurchasesFor: testObjectsFactory anotherValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList1 wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList1 total equals: 50.
	self assert: purchaseList1 books size = 1.
	self assert: (purchaseList1 quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.

	self assert: (purchaseList2 wasMadeBy: testObjectsFactory anotherValidClientID).
	self assert: purchaseList2 total equals: 400.
	self assert: purchaseList2 books size = 4.
	self assert: (purchaseList2 quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.! !

!testRun: #TusLibrosInterfaceTest #test13PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 10:42:35'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 10:43:29' prior: 51236710!
test12MultiplePurchasesBySameClientAreListedCorrectly

	| anXXX aCartID anotherCartID purchaseList |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 450.
	self assert: purchaseList booksWithQuantities size equals: 2.
	self assert: (purchaseList quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.
	self assert: (purchaseList quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 10:43:46' prior: 51237035!
test13PurchasesByMultipleClientsAreListedCorrectly

	| anXXX aCartID anotherCartID purchaseList1 purchaseList2 |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList1 := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	purchaseList2 := anXXX listPurchasesFor: testObjectsFactory anotherValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList1 wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList1 total equals: 50.
	self assert: purchaseList1 booksWithQuantities size = 1.
	self assert: (purchaseList1 quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.

	self assert: (purchaseList2 wasMadeBy: testObjectsFactory anotherValidClientID).
	self assert: purchaseList2 total equals: 400.
	self assert: purchaseList2 booksWithQuantities size = 4.
	self assert: (purchaseList2 quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 10:44:04' prior: 51234617!
test14PurchaseListForClientThatNeverCreatedCartIsEmpty

	| anXXX purchaseList |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 0.
	self assert: purchaseList booksWithQuantities isEmpty.! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 10:44:13' prior: 51234641!
test15PurchaseListOnlyShowsCheckedOutItems

	|anXXX aCartID purchaseList |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
			
	
	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 0.
	self assert: purchaseList booksWithQuantities isEmpty.! !

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 10:44:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 10:44:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 10:44:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 10:44:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 10:44:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 10:44:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 10:44:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 10:44:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 10:44:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 10:44:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 10:44:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 10:44:18'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test13PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 10:44:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 10:44:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 10:44:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 10:44:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CannotListCartAfterTimeout stamp: 'FR 12/3/2020 10:44:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CheckoutCartAfterTimeout stamp: 'FR 12/3/2020 10:44:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 10:44:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 10:44:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 10:44:18'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 10:44:32' prior: 51237108!
test12MultiplePurchasesBySameClientAreListedCorrectly

	| anXXX aCartID anotherCartID purchaseList |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 450.
	self assert: purchaseList booksWithQuantities size equals: 5.
	self assert: (purchaseList quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.
	self assert: (purchaseList quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.! !

!testRun: #TusLibrosInterfaceTest #test12MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 10:44:33'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'FR 12/3/2020 10:46:00'!
test09CanNotAddNonIntegerNumberOfItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: 0.5 of: testObjectsFactory itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FR 12/3/2020 10:46:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FR 12/3/2020 10:46:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FR 12/3/2020 10:46:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FR 12/3/2020 10:46:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FR 12/3/2020 10:46:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FR 12/3/2020 10:46:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FR 12/3/2020 10:46:03'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FR 12/3/2020 10:46:03'!
PASSED!

!testRun: #CartTest #test09CanNotAddNonIntegerNumberOfItems stamp: 'FR 12/3/2020 10:46:03'!
FAILURE!

!testRun: #CartTest #test09CanNotAddNonIntegerNumberOfItems stamp: 'FR 12/3/2020 10:46:03'!
FAILURE!
!Cart methodsFor: 'assertions' stamp: 'FR 12/3/2020 10:46:30' prior: 51235115!
assertIsValidQuantity: aQuantity

	(aQuantity isInteger and: [aQuantity strictlyPositive]) ifFalse: [ self error: self invalidQuantityErrorMessage ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FR 12/3/2020 10:46:32'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FR 12/3/2020 10:46:32'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FR 12/3/2020 10:46:32'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FR 12/3/2020 10:46:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FR 12/3/2020 10:46:32'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FR 12/3/2020 10:46:32'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FR 12/3/2020 10:46:32'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FR 12/3/2020 10:46:32'!
PASSED!

!testRun: #CartTest #test09CanNotAddNonIntegerNumberOfItems stamp: 'FR 12/3/2020 10:46:32'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FR 12/3/2020 10:46:34'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FR 12/3/2020 10:46:34'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FR 12/3/2020 10:46:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FR 12/3/2020 10:46:34'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FR 12/3/2020 10:46:35'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FR 12/3/2020 10:46:35'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberCannotHaveLessThanSixteenDigits stamp: 'FR 12/3/2020 10:46:36'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNameCannotBeEmpty stamp: 'FR 12/3/2020 10:46:36'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberCannotHaveMoreThanSixteenDigits stamp: 'FR 12/3/2020 10:46:36'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithValidInfoIsCorrectlyCreated stamp: 'FR 12/3/2020 10:46:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 10:46:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 10:46:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 10:46:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 10:46:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 10:46:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 10:46:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 10:46:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 10:46:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 10:46:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 10:46:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 10:46:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 10:46:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 10:46:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 10:46:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 10:46:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 10:46:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CannotListCartAfterTimeout stamp: 'FR 12/3/2020 10:46:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CheckoutCartAfterTimeout stamp: 'FR 12/3/2020 10:46:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 10:46:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 10:46:40'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'tests - checkout' stamp: 'FR 12/3/2020 11:06:09'!
test10TransactionIDIsDifferentEachTime

	| anXXX aCartID anotherCartID yetAnotherCartID firstTransactionID secondTransactionID thirdTransactionID |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	firstTransactionID := anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.
	
	secondTransactionID := anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	yetAnotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 2
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: anotherCartID.
	
	thirdTransactionID := anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
	
	self assert: {firstTransactionID. secondTransactionID. thirdTransactionID} asSet size equals: 3.

	! !
!TusLibrosInterfaceTest methodsFor: 'tests - checkout' stamp: 'FR 12/3/2020 11:06:26' prior: 51237618!
test10TransactionIDIsDifferentEachTime

	| anXXX aCartID anotherCartID yetAnotherCartID firstTransactionID secondTransactionID thirdTransactionID |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	firstTransactionID := anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.
	
	secondTransactionID := anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	yetAnotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 2
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: yetAnotherCartID.
	
	thirdTransactionID := anXXX checkout: yetAnotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
	
	self assert: {firstTransactionID. secondTransactionID. thirdTransactionID} asSet size equals: 3.

	! !
!TusLibrosInterfaceTest methodsFor: 'tests - checkout' stamp: 'FR 12/3/2020 11:06:30' prior: 51237680!
test10TransactionIDIsDifferentEachTime

	| anXXX aCartID anotherCartID yetAnotherCartID firstTransactionID secondTransactionID thirdTransactionID |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	firstTransactionID := anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.
	
	secondTransactionID := anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	yetAnotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 2
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: yetAnotherCartID.
	
	thirdTransactionID := anXXX checkout: yetAnotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
	
	self assert: {firstTransactionID. secondTransactionID. thirdTransactionID} asSet size equals: 3.! !

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 11:06:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 11:06:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 11:06:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 11:06:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 11:06:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 11:06:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 11:06:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 11:06:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 11:06:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 11:06:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10TransactionIDIsDifferentEachTime stamp: 'FR 12/3/2020 11:06:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 11:06:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 11:06:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 11:06:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 11:06:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 11:06:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 11:06:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CannotListCartAfterTimeout stamp: 'FR 12/3/2020 11:06:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CheckoutCartAfterTimeout stamp: 'FR 12/3/2020 11:06:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 11:06:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 11:06:34'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 11:06:51'!
test21ListingCartRefreshesTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	self assert: (anXXX listCart: aCartID) equals: Bag new! !

!methodRemoval: TusLibrosInterfaceTest #test20ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 11:06:51'!
test20ListingCartRefreshesTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX listCart: aCartID.
	
	self assert: (anXXX listCart: aCartID) equals: Bag new!
!TusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 11:06:55'!
test20AddingToCartRefreshesTimeout

	| anXXX aCartID aClock expectedList |
	
	aClock := Clock new.
		
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX add: 1 of: testObjectsFactory anotherBookSoldByPublisher toCart: aCartID.
	
	expectedList := {testObjectsFactory aBookSoldByPublisher. testObjectsFactory anotherBookSoldByPublisher} asBag.
	
	self assert: (anXXX listCart: aCartID) equals: expectedList! !

!methodRemoval: TusLibrosInterfaceTest #test19AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 11:06:55'!
test19AddingToCartRefreshesTimeout

	| anXXX aCartID aClock expectedList |
	
	aClock := Clock new.
		
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	anXXX add: 1 of: testObjectsFactory anotherBookSoldByPublisher toCart: aCartID.
	
	expectedList := {testObjectsFactory aBookSoldByPublisher. testObjectsFactory anotherBookSoldByPublisher} asBag.
	
	self assert: (anXXX listCart: aCartID) equals: expectedList!
!TusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 11:06:58'!
test19CheckoutCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
			anXXX checkout: aCartID
			    	    withCreditCard: testObjectsFactory aValidCreditCardNumber
			    	    expiring: testObjectsFactory aNonExpiredDate
			    	    withOwner: testObjectsFactory aValidOwnerName
	]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface timeoutErrorDescription! !

!methodRemoval: TusLibrosInterfaceTest #test18CheckoutCartAfterTimeout stamp: 'FR 12/3/2020 11:06:58'!
test18CheckoutCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
			anXXX checkout: aCartID
			    	    withCreditCard: testObjectsFactory aValidCreditCardNumber
			    	    expiring: testObjectsFactory aNonExpiredDate
			    	    withOwner: testObjectsFactory aValidOwnerName
	]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface timeoutErrorDescription!
!TusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 11:07:01'!
test18CannotListCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [ anXXX listCart: aCartID ]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface timeoutErrorDescription! !

!methodRemoval: TusLibrosInterfaceTest #test17CannotListCartAfterTimeout stamp: 'FR 12/3/2020 11:07:01'!
test17CannotListCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [ anXXX listCart: aCartID ]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface timeoutErrorDescription!
!TusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 11:07:03'!
test17CannotAddToCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
			anXXX add: 1
				    of: testObjectsFactory aBookSoldByPublisher
				    toCart: aCartID
		]
		raise:  testObjectsFactory functionalError
		withMessageText: TusLibrosInterface timeoutErrorDescription! !

!methodRemoval: TusLibrosInterfaceTest #test16CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 11:07:03'!
test16CannotAddToCartAfterTimeout

	| anXXX aCartID aClock |
	
	aClock := Clock new.
		
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
			anXXX add: 1
				    of: testObjectsFactory aBookSoldByPublisher
				    toCart: aCartID
		]
		raise:  testObjectsFactory functionalError
		withMessageText: TusLibrosInterface timeoutErrorDescription!
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 11:07:08'!
test16PurchaseListOnlyShowsCheckedOutItems

	|anXXX aCartID purchaseList |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
			
	
	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 0.
	self assert: purchaseList booksWithQuantities isEmpty.! !

!methodRemoval: TusLibrosInterfaceTest #test15PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 11:07:08'!
test15PurchaseListOnlyShowsCheckedOutItems

	|anXXX aCartID purchaseList |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	anXXX add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
			
	
	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 0.
	self assert: purchaseList booksWithQuantities isEmpty.!
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 11:07:10'!
test15PurchaseListForClientThatNeverCreatedCartIsEmpty

	| anXXX purchaseList |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 0.
	self assert: purchaseList booksWithQuantities isEmpty.! !

!methodRemoval: TusLibrosInterfaceTest #test14PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 11:07:10'!
test14PurchaseListForClientThatNeverCreatedCartIsEmpty

	| anXXX purchaseList |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 0.
	self assert: purchaseList booksWithQuantities isEmpty.!
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 11:07:13'!
test14PurchasesByMultipleClientsAreListedCorrectly

	| anXXX aCartID anotherCartID purchaseList1 purchaseList2 |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList1 := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	purchaseList2 := anXXX listPurchasesFor: testObjectsFactory anotherValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList1 wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList1 total equals: 50.
	self assert: purchaseList1 booksWithQuantities size = 1.
	self assert: (purchaseList1 quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.

	self assert: (purchaseList2 wasMadeBy: testObjectsFactory anotherValidClientID).
	self assert: purchaseList2 total equals: 400.
	self assert: purchaseList2 booksWithQuantities size = 4.
	self assert: (purchaseList2 quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.! !

!methodRemoval: TusLibrosInterfaceTest #test13PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 11:07:13'!
test13PurchasesByMultipleClientsAreListedCorrectly

	| anXXX aCartID anotherCartID purchaseList1 purchaseList2 |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList1 := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	purchaseList2 := anXXX listPurchasesFor: testObjectsFactory anotherValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList1 wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList1 total equals: 50.
	self assert: purchaseList1 booksWithQuantities size = 1.
	self assert: (purchaseList1 quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.

	self assert: (purchaseList2 wasMadeBy: testObjectsFactory anotherValidClientID).
	self assert: purchaseList2 total equals: 400.
	self assert: purchaseList2 booksWithQuantities size = 4.
	self assert: (purchaseList2 quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.!
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 11:07:15'!
test13MultiplePurchasesBySameClientAreListedCorrectly

	| anXXX aCartID anotherCartID purchaseList |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 450.
	self assert: purchaseList booksWithQuantities size equals: 5.
	self assert: (purchaseList quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.
	self assert: (purchaseList quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.! !

!methodRemoval: TusLibrosInterfaceTest #test12MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 11:07:16'!
test12MultiplePurchasesBySameClientAreListedCorrectly

	| anXXX aCartID anotherCartID purchaseList |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	anXXX checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := anXXX createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	anXXX add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	anXXX checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList := anXXX listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 450.
	self assert: purchaseList booksWithQuantities size equals: 5.
	self assert: (purchaseList quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.
	self assert: (purchaseList quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.!
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 11:07:20'!
test12CannotListPurchasesForClientWithIncorrectPassword

	| anXXX |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientPassword
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	self  should: [
			anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
				    withPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface incorrectPasswordErrorDescription! !

!methodRemoval: TusLibrosInterfaceTest #test11CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 11:07:20'!
test11CannotListPurchasesForClientWithIncorrectPassword

	| anXXX |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientPassword
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	self  should: [
			anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
				    withPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface incorrectPasswordErrorDescription!
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 11:07:22'!
test11CannotListPurchasesForInvalidClientID

	| anXXX |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientID
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	self  should: [
			anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
				    withPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidClientIDErrorDescription! !

!methodRemoval: TusLibrosInterfaceTest #test10CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 11:07:23'!
test10CannotListPurchasesForInvalidClientID

	| anXXX |
	
	anXXX := TusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientID
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	self  should: [
			anXXX listPurchasesFor: testObjectsFactory anInvalidClientID 
				    withPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidClientIDErrorDescription!

#(2 3 4) asBag union: #(2 2 1) asBag!

#(2 3 4) asBag!

#(2 2 1) asBag!

#(2 3 4) asBag union: #(2 2 1) asBag!

----End fileIn of E:\!!NUEVO\Programas\CuisUniversity\v4383.1\Packages\TerseGuide.pck.st----!
!TusLibrosInterface methodsFor: 'accessing' stamp: 'FR 12/3/2020 11:57:22'!
purchaseSummaryFor: aClientID
	
	| purchasesByClient clientTotal clientBooks clientSale clientPurchase |
		
	purchasesByClient := (purchases select: [ :aPurchase | aPurchase wasMadeBy: aClientID ]) asOrderedCollection.
	
	clientTotal := purchasesByClient inject: 0 into: [ :total :aPurchase | total + aPurchase total ].
	
	clientBooks := Bag new.
	purchasesByClient do: [ :aPurchase | clientBooks addAll: aPurchase booksWithQuantities].
	
	clientSale := Sale withTotal: clientTotal andBooks: clientBooks.
	clientPurchase := Purchase from: aClientID with: clientSale.
	
	^ clientPurchase.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 11:57:23' prior: 51235704!
listPurchasesFor: aClientID withPassword: aPassword
	
	authenticator authenticateWithID: aClientID andPassword: aPassword.
	
	^ self purchaseSummaryFor: aClientID! !

!methodRemoval: TusLibrosInterface #purchasesFrom: stamp: 'FR 12/3/2020 11:57:23'!
purchasesFrom: aClientID
	
	| purchasesByClient clientTotal clientBooks clientSale clientPurchase |
		
	purchasesByClient := (purchases select: [ :aPurchase | aPurchase wasMadeBy: aClientID ]) asOrderedCollection.
	
	clientTotal := purchasesByClient inject: 0 into: [ :total :aPurchase | total + aPurchase total ].
	
	clientBooks := Bag new.
	purchasesByClient do: [ :aPurchase | clientBooks addAll: aPurchase booksWithQuantities].
	
	clientSale := Sale withTotal: clientTotal andBooks: clientBooks.
	clientPurchase := Purchase from: aClientID with: clientSale.
	
	^ clientPurchase.!
!TusLibrosInterface methodsFor: 'accessing' stamp: 'FR 12/3/2020 11:57:50'!
purchasesFrom: aClientID

	^ purchases select: [ :aPurchase | aPurchase wasMadeBy: aClientID ]! !
!TusLibrosInterface methodsFor: 'accessing' stamp: 'FR 12/3/2020 11:57:50' prior: 51241534!
purchaseSummaryFor: aClientID
	
	| purchasesByClient clientTotal clientBooks clientSale clientPurchase |
		
	purchasesByClient := (self purchasesFrom: aClientID) asOrderedCollection.
	
	clientTotal := purchasesByClient inject: 0 into: [ :total :aPurchase | total + aPurchase total ].
	
	clientBooks := Bag new.
	purchasesByClient do: [ :aPurchase | clientBooks addAll: aPurchase booksWithQuantities].
	
	clientSale := Sale withTotal: clientTotal andBooks: clientBooks.
	clientPurchase := Purchase from: aClientID with: clientSale.
	
	^ clientPurchase.! !
!TusLibrosInterface methodsFor: 'accessing' stamp: 'FR 12/3/2020 11:57:56' prior: 51241591!
purchaseSummaryFor: aClientID
	
	| purchasesByClient clientTotal clientBooks clientSale clientPurchase |
		
	purchasesByClient := self purchasesFrom: aClientID.
	
	clientTotal := purchasesByClient inject: 0 into: [ :total :aPurchase | total + aPurchase total ].
	
	clientBooks := Bag new.
	purchasesByClient do: [ :aPurchase | clientBooks addAll: aPurchase booksWithQuantities].
	
	clientSale := Sale withTotal: clientTotal andBooks: clientBooks.
	clientPurchase := Purchase from: aClientID with: clientSale.
	
	^ clientPurchase.! !
!TusLibrosInterface methodsFor: 'accessing' stamp: 'FR 12/3/2020 11:59:22'!
totalSpentBy: aClientID

	^ (self purchasesFrom: aClientID) inject: 0 into: [ :total :aPurchase | total + aPurchase total ]! !
!TusLibrosInterface methodsFor: 'accessing' stamp: 'FR 12/3/2020 11:59:42' prior: 51241612!
purchaseSummaryFor: aClientID
	
	| purchasesByClient clientTotal clientBooks clientSale clientPurchase |
		
	purchasesByClient := self purchasesFrom: aClientID.
	
	clientTotal := self totalSpentBy: aClientID.
	
	clientBooks := Bag new.
	purchasesByClient do: [ :aPurchase | clientBooks addAll: aPurchase booksWithQuantities].
	
	clientSale := Sale withTotal: clientTotal andBooks: clientBooks.
	clientPurchase := Purchase from: aClientID with: clientSale.
	
	^ clientPurchase.! !
!TusLibrosInterface methodsFor: 'accessing' stamp: 'FR 12/3/2020 12:00:28'!
totalBooksBoughtBy: aClientID

	| clientBooks |
	
	clientBooks := Bag new.
	(self purchaseSummaryFor: aClientID) do: [ :aPurchase | clientBooks addAll: aPurchase booksWithQuantities].! !
!TusLibrosInterface methodsFor: 'accessing' stamp: 'FR 12/3/2020 12:00:46'!
booksBoughtBy: aClientID

	| clientBooks |
	
	clientBooks := Bag new.
	(self purchaseSummaryFor: aClientID) do: [ :aPurchase | clientBooks addAll: aPurchase booksWithQuantities].! !

!methodRemoval: TusLibrosInterface #totalBooksBoughtBy: stamp: 'FR 12/3/2020 12:00:46'!
totalBooksBoughtBy: aClientID

	| clientBooks |
	
	clientBooks := Bag new.
	(self purchaseSummaryFor: aClientID) do: [ :aPurchase | clientBooks addAll: aPurchase booksWithQuantities].!
!TusLibrosInterface methodsFor: 'accessing' stamp: 'FR 12/3/2020 12:01:17' prior: 51241639!
purchaseSummaryFor: aClientID
	
	| clientTotal clientBooks clientSale clientPurchase |
		
	clientTotal := self totalSpentBy: aClientID.
	clientBooks := self booksBoughtBy: aClientID..
	
	clientSale := Sale withTotal: clientTotal andBooks: clientBooks.
	clientPurchase := Purchase from: aClientID with: clientSale.
	
	^ clientPurchase.! !

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 12:01:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 12:01:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 12:01:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 12:01:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 12:01:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 12:01:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 12:01:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 12:01:20'!
PASSED!
!TusLibrosInterface methodsFor: 'accessing' stamp: 'FR 12/3/2020 12:02:14' prior: 51241666!
booksBoughtBy: aClientID

	| clientBooks |
	
	clientBooks := Bag new.
	(self purchasesFrom: aClientID) do: [ :aPurchase | clientBooks addAll: aPurchase booksWithQuantities].! !

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 12:02:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 12:02:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 12:02:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 12:02:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 12:02:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 12:02:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 12:02:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 12:02:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 12:02:17'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test10TransactionIDIsDifferentEachTime stamp: 'FR 12/3/2020 12:02:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 12:02:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 12:02:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 12:02:17'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 12:02:17'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 12:02:17'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 12:02:17'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 12:02:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/3/2020 12:02:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19CheckoutCartAfterTimeout stamp: 'FR 12/3/2020 12:02:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 12:02:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 12:02:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 12:02:19'!
ERROR!
!TusLibrosInterface methodsFor: 'accessing' stamp: 'FR 12/3/2020 12:03:21' prior: 51241726!
booksBoughtBy: aClientID

	| clientBooks |
	
	clientBooks := Bag new.
	(self purchasesFrom: aClientID) do: [ :aPurchase | clientBooks addAll: aPurchase booksWithQuantities].
	
	^ clientBooks! !

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 12:03:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 12:03:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 12:03:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 12:03:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 12:03:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 12:03:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 12:03:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 12:03:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 12:03:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10TransactionIDIsDifferentEachTime stamp: 'FR 12/3/2020 12:03:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 12:03:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 12:03:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 12:03:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 12:03:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 12:03:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 12:03:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 12:03:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/3/2020 12:03:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19CheckoutCartAfterTimeout stamp: 'FR 12/3/2020 12:03:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 12:03:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 12:03:24'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'tests - creation' stamp: 'FR 12/3/2020 12:34:51' prior: 51234757!
test01CannotCreateCartWithInvalidID

	| aTusLibrosInterface |
		
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientID
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation 
				andClock: Clock new.
	
	self  should: [
			aTusLibrosInterface createCartForClientWithID: testObjectsFactory anInvalidClientID 
				    andPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidClientIDErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'tests - creation' stamp: 'FR 12/3/2020 12:34:57' prior: 51234777!
test02CannotCreateCartWithIncorrectPassword

	| aTusLibrosInterface |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientPassword
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	self  should: [
			aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
				    andPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface incorrectPasswordErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'tests - creation' stamp: 'FR 12/3/2020 12:35:04' prior: 51234798!
test03SuccessfulyCreatedCartIsEmpty

	| aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
				     andPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (aTusLibrosInterface listCart: aCartID) isEmpty! !
!TusLibrosInterfaceTest methodsFor: 'tests - adding' stamp: 'FR 12/3/2020 12:51:51' prior: 51234690!
test04CannotAddToCartWithInvalidCartID

	| aTusLibrosInterface |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	self  should: [ aTusLibrosInterface add: 1
					   of: testObjectsFactory aBookSoldByPublisher
					   toCart: testObjectsFactory anInvalidCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidCartIDErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'tests - adding' stamp: 'FR 12/3/2020 12:51:57' prior: 51234710!
test05BookIsAddedSuccessfully

	| aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  assert: (aTusLibrosInterface listCart: aCartID) 
		equals: (Bag with: testObjectsFactory aBookSoldByPublisher)! !
!TusLibrosInterfaceTest methodsFor: 'tests - adding' stamp: 'FR 12/3/2020 12:52:02' prior: 51234733!
test06MultipleBooksAreAddedSuccessfully

	| aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 5
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  assert: (aTusLibrosInterface listCart: aCartID) 
		equals: (Bag new add: testObjectsFactory aBookSoldByPublisher withOccurrences: 5; yourself)! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing cart' stamp: 'FR 12/3/2020 12:52:08' prior: 51234672!
test07CannotListWithInvalidCartID

	| aTusLibrosInterface |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	self  should: [
			aTusLibrosInterface listCart: testObjectsFactory anInvalidCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidCartIDErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'tests - checkout' stamp: 'FR 12/3/2020 12:52:13' prior: 51234822!
test08CannotCheckOutWithInvalidCartID

	| aTusLibrosInterface |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	self  should: [
			aTusLibrosInterface checkout: testObjectsFactory anInvalidCartID
				    withCreditCard: testObjectsFactory aValidCreditCardNumber
				    expiring: testObjectsFactory aNonExpiredDate
				    withOwner: testObjectsFactory aValidOwnerName
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidCartIDErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'tests - checkout' stamp: 'FR 12/3/2020 12:52:18' prior: 51236592!
test09SuccessfulCheckoutIsDoneCorrectly

	| aTusLibrosInterface aCartID purchaseList |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	aTusLibrosInterface checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
					     withPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 50.
	self assert: purchaseList books includes: testObjectsFactory aBookSoldByPublisher.
	self assert: purchaseList books size equals: 1.
	self assert: (purchaseList quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.! !
!TusLibrosInterfaceTest methodsFor: 'tests - checkout' stamp: 'FR 12/3/2020 12:52:22' prior: 51237743!
test10TransactionIDIsDifferentEachTime

	| aTusLibrosInterface aCartID anotherCartID yetAnotherCartID firstTransactionID secondTransactionID thirdTransactionID |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	firstTransactionID := aTusLibrosInterface checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	anotherCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.
	
	secondTransactionID := aTusLibrosInterface checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	yetAnotherCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 2
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: yetAnotherCartID.
	
	thirdTransactionID := aTusLibrosInterface checkout: yetAnotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
	
	self assert: {firstTransactionID. secondTransactionID. thirdTransactionID} asSet size equals: 3.! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 12:52:29' prior: 51238554!
test11CannotListPurchasesForInvalidClientID

	| aTusLibrosInterface |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientID
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	self  should: [
			aTusLibrosInterface listPurchasesFor: testObjectsFactory anInvalidClientID 
				    withPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidClientIDErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 12:52:33' prior: 51238511!
test12CannotListPurchasesForClientWithIncorrectPassword

	| aTusLibrosInterface |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientPassword
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	self  should: [
			aTusLibrosInterface listPurchasesFor: testObjectsFactory anInvalidClientID 
				    withPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface incorrectPasswordErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 12:52:37' prior: 51238395!
test13MultiplePurchasesBySameClientAreListedCorrectly

	| aTusLibrosInterface aCartID anotherCartID purchaseList |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	aTusLibrosInterface checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	aTusLibrosInterface checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 450.
	self assert: purchaseList booksWithQuantities size equals: 5.
	self assert: (purchaseList quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.
	self assert: (purchaseList quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 12:52:42' prior: 51238256!
test14PurchasesByMultipleClientsAreListedCorrectly

	| aTusLibrosInterface aCartID anotherCartID purchaseList1 purchaseList2 |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.

	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.

 	aTusLibrosInterface checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 4
		    of: testObjectsFactory anotherBookSoldByPublisher 
		    toCart: anotherCartID.

 	aTusLibrosInterface checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList1 := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	purchaseList2 := aTusLibrosInterface listPurchasesFor: testObjectsFactory anotherValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList1 wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList1 total equals: 50.
	self assert: purchaseList1 booksWithQuantities size = 1.
	self assert: (purchaseList1 quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.

	self assert: (purchaseList2 wasMadeBy: testObjectsFactory anotherValidClientID).
	self assert: purchaseList2 total equals: 400.
	self assert: purchaseList2 booksWithQuantities size = 4.
	self assert: (purchaseList2 quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 12:52:57' prior: 51238209!
test15PurchaseListForClientThatNeverCreatedCartIsEmpty

	| aTusLibrosInterface purchaseList |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	purchaseList := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 0.
	self assert: purchaseList booksWithQuantities isEmpty.! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 12:53:01' prior: 51238148!
test16PurchaseListOnlyShowsCheckedOutItems

	|aTusLibrosInterface aCartID purchaseList |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aTusLibrosInterface add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
			
	
	purchaseList := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
				       	    withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 0.
	self assert: purchaseList booksWithQuantities isEmpty.! !
!TusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 12:53:10' prior: 51238096!
test17CannotAddToCartAfterTimeout

	| aTusLibrosInterface aCartID aClock |
	
	aClock := Clock new.
		
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
			aTusLibrosInterface add: 1
				    of: testObjectsFactory aBookSoldByPublisher
				    toCart: aCartID
		]
		raise:  testObjectsFactory functionalError
		withMessageText: TusLibrosInterface timeoutErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 12:53:50' prior: 51238049!
test18CannotListCartAfterTimeout

	| aTusLibrosInterface aCartID aClock |
	
	aClock := Clock new.
		
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [ aTusLibrosInterface listCart: aCartID ]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface timeoutErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 12:53:54' prior: 51237990!
test19CheckoutCartAfterTimeout

	| aTusLibrosInterface aCartID aClock |
	
	aClock := Clock new.
		
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
			aTusLibrosInterface checkout: aCartID
			    	    withCreditCard: testObjectsFactory aValidCreditCardNumber
			    	    expiring: testObjectsFactory aNonExpiredDate
			    	    withOwner: testObjectsFactory aValidOwnerName
	]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface timeoutErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 12:54:07' prior: 51237928!
test20AddingToCartRefreshesTimeout

	| aTusLibrosInterface aCartID aClock expectedList |
	
	aClock := Clock new.
		
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	aTusLibrosInterface add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	aTusLibrosInterface add: 1 of: testObjectsFactory anotherBookSoldByPublisher toCart: aCartID.
	
	expectedList := {testObjectsFactory aBookSoldByPublisher. testObjectsFactory anotherBookSoldByPublisher} asBag.
	
	self assert: (aTusLibrosInterface listCart: aCartID) equals: expectedList! !
!TusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 12:54:11' prior: 51237881!
test21ListingCartRefreshesTimeout

	| aTusLibrosInterface aCartID aClock |
	
	aClock := Clock new.
		
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: aClock.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	aTusLibrosInterface listCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	aTusLibrosInterface listCart: aCartID.
	
	self assert: (aTusLibrosInterface listCart: aCartID) equals: Bag new! !
!TusLibrosInterfaceTest methodsFor: 'tests - creation' stamp: 'FR 12/3/2020 12:55:30' prior: 51241901!
test01CannotCreateCartWithInvalidID

	| aTusLibrosInterface |
		
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientID
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation 
				andClock: Clock new.
	
	self  should: [
			aTusLibrosInterface createCartForClientWithID: testObjectsFactory anInvalidClientID 
							andPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidClientIDErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'tests - creation' stamp: 'FR 12/3/2020 12:55:37' prior: 51241923!
test02CannotCreateCartWithIncorrectPassword

	| aTusLibrosInterface |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientPassword
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	self  should: [
			aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
							andPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface incorrectPasswordErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'tests - creation' stamp: 'FR 12/3/2020 12:55:51' prior: 51241946!
test03SuccessfulyCreatedCartIsEmpty

	| aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
				catalog: testObjectsFactory aCatalog
				merchantProcessor: MerchantProcessorSimulator successfulValidation
				andClock: Clock new.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
							 andPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (aTusLibrosInterface listCart: aCartID) isEmpty! !
!TusLibrosInterfaceTest methodsFor: 'tests - adding' stamp: 'FR 12/3/2020 12:56:12' prior: 51241967!
test04CannotAddToCartWithInvalidCartID

	| aTusLibrosInterface |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	self  should: [
			aTusLibrosInterface add: 1
					  		of: testObjectsFactory aBookSoldByPublisher
					   		toCart: testObjectsFactory anInvalidCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidCartIDErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'tests - creation' stamp: 'FR 12/3/2020 12:56:39' prior: 51242584!
test01CannotCreateCartWithInvalidID

	| aTusLibrosInterface |
		
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientID
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation 
			andClock: Clock new.
	
	self  should: [
			aTusLibrosInterface createCartForClientWithID: testObjectsFactory anInvalidClientID 
							andPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidClientIDErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'tests - creation' stamp: 'FR 12/3/2020 12:56:43' prior: 51242606!
test02CannotCreateCartWithIncorrectPassword

	| aTusLibrosInterface |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientPassword
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	self  should: [
			aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
							andPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface incorrectPasswordErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'tests - creation' stamp: 'FR 12/3/2020 12:56:48' prior: 51242629!
test03SuccessfulyCreatedCartIsEmpty

	| aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
							 andPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (aTusLibrosInterface listCart: aCartID) isEmpty! !
!TusLibrosInterfaceTest methodsFor: 'tests - adding' stamp: 'FR 12/3/2020 12:57:01' prior: 51241989!
test05BookIsAddedSuccessfully

	| aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 1
		    of: testObjectsFactory aBookSoldByPublisher 
		    toCart: aCartID.
	
	self  assert: (aTusLibrosInterface listCart: aCartID) 
		equals: (Bag with: testObjectsFactory aBookSoldByPublisher)! !
!TusLibrosInterfaceTest methodsFor: 'tests - adding' stamp: 'FR 12/3/2020 12:57:13' prior: 51242736!
test05BookIsAddedSuccessfully

	| aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 1
					of: testObjectsFactory aBookSoldByPublisher 
		  			toCart: aCartID.
	
	self  assert: (aTusLibrosInterface listCart: aCartID) 
		equals: (Bag with: testObjectsFactory aBookSoldByPublisher)! !
!TusLibrosInterfaceTest methodsFor: 'tests - adding' stamp: 'FR 12/3/2020 12:57:28' prior: 51242014!
test06MultipleBooksAreAddedSuccessfully

	| aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 5
		    			of: testObjectsFactory aBookSoldByPublisher 
		    			toCart: aCartID.
	
	self  assert: (aTusLibrosInterface listCart: aCartID) 
		equals: (Bag new add: testObjectsFactory aBookSoldByPublisher withOccurrences: 5; yourself)! !
!TusLibrosInterfaceTest methodsFor: 'tests - checkout' stamp: 'FR 12/3/2020 14:34:51' prior: 51242086!
test09SuccessfulCheckoutIsDoneCorrectly

	| aTusLibrosInterface aCartID purchaseList |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 1
		    			of: testObjectsFactory aBookSoldByPublisher 
		    			toCart: aCartID.
	
	aTusLibrosInterface checkout: aCartID 
		    			withCreditCard: testObjectsFactory aValidCreditCardNumber
		    			expiring: testObjectsFactory aNonExpiredDate
		    			withOwner: testObjectsFactory aValidOwnerName.

	purchaseList := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
					     			withPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 50.
	self assert: purchaseList books includes: testObjectsFactory aBookSoldByPublisher.
	self assert: purchaseList books size equals: 1.
	self assert: (purchaseList quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.! !
!TusLibrosInterfaceTest methodsFor: 'tests - checkout' stamp: 'FR 12/3/2020 14:35:27' prior: 51242130!
test10TransactionIDIsDifferentEachTime

	| aTusLibrosInterface aCartID anotherCartID yetAnotherCartID firstTransactionID secondTransactionID thirdTransactionID |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 1
		    			of: testObjectsFactory aBookSoldByPublisher 
		    			toCart: aCartID.
	
	firstTransactionID := aTusLibrosInterface checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	anotherCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     				   andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 4
		    			of: testObjectsFactory anotherBookSoldByPublisher 
		    			toCart: anotherCartID.
	
	secondTransactionID := aTusLibrosInterface checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	yetAnotherCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     					andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 2
		    			of: testObjectsFactory aBookSoldByPublisher 
		    			toCart: yetAnotherCartID.
	
	thirdTransactionID := aTusLibrosInterface checkout: yetAnotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
	
	self assert: {firstTransactionID. secondTransactionID. thirdTransactionID} asSet size equals: 3.! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 14:35:51' prior: 51242198!
test11CannotListPurchasesForInvalidClientID

	| aTusLibrosInterface |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientID
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.

	self  should: [
			aTusLibrosInterface listPurchasesFor: testObjectsFactory anInvalidClientID 
							withPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidClientIDErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 14:35:57' prior: 51242220!
test12CannotListPurchasesForClientWithIncorrectPassword

	| aTusLibrosInterface |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientPassword
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.

	self  should: [
			aTusLibrosInterface listPurchasesFor: testObjectsFactory anInvalidClientID 
				    			withPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface incorrectPasswordErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 14:36:22' prior: 51242243!
test13MultiplePurchasesBySameClientAreListedCorrectly

	| aTusLibrosInterface aCartID anotherCartID purchaseList |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.

	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 1
		    			of: testObjectsFactory aBookSoldByPublisher 
		    			toCart: aCartID.

 	aTusLibrosInterface checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      				   andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 4
		    			of: testObjectsFactory anotherBookSoldByPublisher 
		    			toCart: anotherCartID.

 	aTusLibrosInterface checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
				       	    			withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 450.
	self assert: purchaseList booksWithQuantities size equals: 5.
	self assert: (purchaseList quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.
	self assert: (purchaseList quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 14:36:50' prior: 51242305!
test14PurchasesByMultipleClientsAreListedCorrectly

	| aTusLibrosInterface aCartID anotherCartID purchaseList1 purchaseList2 |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.

	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 1
		    			of: testObjectsFactory aBookSoldByPublisher 
		    			toCart: aCartID.

 	aTusLibrosInterface checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      				   andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 4
		    			of: testObjectsFactory anotherBookSoldByPublisher 
		    			toCart: anotherCartID.

 	aTusLibrosInterface checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList1 := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
				       	    			   withPassword: testObjectsFactory aCorrectPassword.

	purchaseList2 := aTusLibrosInterface listPurchasesFor: testObjectsFactory anotherValidClientID 
				       	   			  withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList1 wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList1 total equals: 50.
	self assert: purchaseList1 booksWithQuantities size = 1.
	self assert: (purchaseList1 quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.

	self assert: (purchaseList2 wasMadeBy: testObjectsFactory anotherValidClientID).
	self assert: purchaseList2 total equals: 400.
	self assert: purchaseList2 booksWithQuantities size = 4.
	self assert: (purchaseList2 quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 14:36:53' prior: 51243034!
test14PurchasesByMultipleClientsAreListedCorrectly

	| aTusLibrosInterface aCartID anotherCartID purchaseList1 purchaseList2 |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.

	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 1
		    			of: testObjectsFactory aBookSoldByPublisher 
		    			toCart: aCartID.

 	aTusLibrosInterface checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      				   andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 4
		    			of: testObjectsFactory anotherBookSoldByPublisher 
		    			toCart: anotherCartID.

 	aTusLibrosInterface checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList1 := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
				       	    			  withPassword: testObjectsFactory aCorrectPassword.

	purchaseList2 := aTusLibrosInterface listPurchasesFor: testObjectsFactory anotherValidClientID 
				       	   			  withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList1 wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList1 total equals: 50.
	self assert: purchaseList1 booksWithQuantities size = 1.
	self assert: (purchaseList1 quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.

	self assert: (purchaseList2 wasMadeBy: testObjectsFactory anotherValidClientID).
	self assert: purchaseList2 total equals: 400.
	self assert: purchaseList2 booksWithQuantities size = 4.
	self assert: (purchaseList2 quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 14:37:02' prior: 51242379!
test15PurchaseListForClientThatNeverCreatedCartIsEmpty

	| aTusLibrosInterface purchaseList |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	purchaseList := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
				       	    			 withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 0.
	self assert: purchaseList booksWithQuantities isEmpty.! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 14:37:12' prior: 51242404!
test16PurchaseListOnlyShowsCheckedOutItems

	|aTusLibrosInterface aCartID purchaseList |
	
	aTusLibrosInterface := TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: testObjectsFactory aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      			 andPassword: testObjectsFactory aCorrectPassword.
	
	aTusLibrosInterface add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
			
	
	purchaseList := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
				       	    			 withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 0.
	self assert: purchaseList booksWithQuantities isEmpty.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FR 12/3/2020 14:37:25'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FR 12/3/2020 14:37:25'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FR 12/3/2020 14:37:25'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FR 12/3/2020 14:37:25'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FR 12/3/2020 14:37:25'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FR 12/3/2020 14:37:25'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FR 12/3/2020 14:37:25'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FR 12/3/2020 14:37:25'!
PASSED!

!testRun: #CartTest #test09CanNotAddNonIntegerNumberOfItems stamp: 'FR 12/3/2020 14:37:25'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FR 12/3/2020 14:37:27'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FR 12/3/2020 14:37:27'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FR 12/3/2020 14:37:27'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FR 12/3/2020 14:37:27'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FR 12/3/2020 14:37:27'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FR 12/3/2020 14:37:27'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberCannotHaveLessThanSixteenDigits stamp: 'FR 12/3/2020 14:37:28'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNameCannotBeEmpty stamp: 'FR 12/3/2020 14:37:29'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberCannotHaveMoreThanSixteenDigits stamp: 'FR 12/3/2020 14:37:29'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithValidInfoIsCorrectlyCreated stamp: 'FR 12/3/2020 14:37:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 14:37:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 14:37:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 14:37:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 14:37:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 14:37:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 14:37:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 14:37:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 14:37:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 14:37:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10TransactionIDIsDifferentEachTime stamp: 'FR 12/3/2020 14:37:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 14:37:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 14:37:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 14:37:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 14:37:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 14:37:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 14:37:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 14:37:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/3/2020 14:37:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19CheckoutCartAfterTimeout stamp: 'FR 12/3/2020 14:37:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 14:37:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 14:37:32'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'TusLibros interfaces' stamp: 'FR 12/3/2020 14:40:01'!
TusLibrosInterfaceWithInvalidClientID

	^ TusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientID
			catalog: self aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation 
			andClock: Clock new.! !
!StoreTestObjectsFactory methodsFor: 'TusLibros interfaces' stamp: 'FR 12/3/2020 14:40:07'!
tusLibrosInterfaceWithInvalidClientID

	^ TusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientID
			catalog: self aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation 
			andClock: Clock new.! !

!methodRemoval: StoreTestObjectsFactory #TusLibrosInterfaceWithInvalidClientID stamp: 'FR 12/3/2020 14:40:07'!
TusLibrosInterfaceWithInvalidClientID

	^ TusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientID
			catalog: self aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation 
			andClock: Clock new.!
!TusLibrosInterfaceTest methodsFor: 'tests - creation' stamp: 'FR 12/3/2020 14:41:14' prior: 51242672!
test01CannotCreateCartWithInvalidID

	| aTusLibrosInterface |
		
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithInvalidClientID.
	
	self  should: [
			aTusLibrosInterface createCartForClientWithID: testObjectsFactory anInvalidClientID 
							andPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidClientIDErrorDescription! !
!StoreTestObjectsFactory methodsFor: 'TusLibros interfaces' stamp: 'FR 12/3/2020 14:41:32'!
tusLibrosInterfaceWithInvalidPasswordID

	^ TusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientPassword
			catalog: self aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new! !
!StoreTestObjectsFactory methodsFor: 'TusLibros interfaces' stamp: 'FR 12/3/2020 14:41:39'!
tusLibrosInterfaceWithInvalidClientPassword

	^ TusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientPassword
			catalog: self aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new! !

!methodRemoval: StoreTestObjectsFactory #tusLibrosInterfaceWithInvalidPasswordID stamp: 'FR 12/3/2020 14:41:39'!
tusLibrosInterfaceWithInvalidPasswordID

	^ TusLibrosInterface withAuthenticator: AuthenticatorSimulator invalidClientPassword
			catalog: self aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new!
!TusLibrosInterfaceTest methodsFor: 'tests - creation' stamp: 'FR 12/3/2020 14:42:08' prior: 51242694!
test02CannotCreateCartWithIncorrectPassword

	| aTusLibrosInterface |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithInvalidClientPassword.
	
	self  should: [
			aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
							andPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface incorrectPasswordErrorDescription! !
!StoreTestObjectsFactory methodsFor: 'TusLibros interfaces' stamp: 'FR 12/3/2020 14:42:38'!
tusLibrosInterfaceWithICorrectCredentials

	^ TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: self aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new! !
!TusLibrosInterfaceTest methodsFor: 'tests - creation' stamp: 'FR 12/3/2020 14:42:48' prior: 51242716!
test03SuccessfulyCreatedCartIsEmpty

	| aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithICorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
							 andPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (aTusLibrosInterface listCart: aCartID) isEmpty! !

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 14:42:49'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 14:42:49'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 14:42:49'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 14:42:49'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 14:42:49'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 14:42:49'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 14:42:49'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 14:42:49'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 14:42:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10TransactionIDIsDifferentEachTime stamp: 'FR 12/3/2020 14:42:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 14:42:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 14:42:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 14:42:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 14:42:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 14:42:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 14:42:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 14:42:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/3/2020 14:42:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19CheckoutCartAfterTimeout stamp: 'FR 12/3/2020 14:42:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 14:42:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 14:42:50'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 14:45:04'!
creatingCartWithID: aClientID andPassword: aPassword on: aTusLibrosInterface shouldRaiseErrorWithMessage: anErrorMessage
			
	self  should: [
			aTusLibrosInterface createCartForClientWithID: aClientID 
							andPassword: aPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: anErrorMessage! !
!TusLibrosInterfaceTest methodsFor: 'tests - creation' stamp: 'FR 12/3/2020 14:46:04' prior: 51243414!
test01CannotCreateCartWithInvalidID

	self  creatingCartWithID: testObjectsFactory anInvalidClientID
		andPassword: testObjectsFactory aCorrectPassword
		on: testObjectsFactory tusLibrosInterfaceWithInvalidClientID
		shouldRaiseErrorWithMessage: TusLibrosInterface invalidClientIDErrorDescription! !

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 14:46:08'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'tests - creation' stamp: 'FR 12/3/2020 14:46:39' prior: 51243465!
test02CannotCreateCartWithIncorrectPassword

	self  creatingCartWithID: testObjectsFactory aValidClientID
		andPassword: testObjectsFactory anIncorrectPassword
		on: testObjectsFactory tusLibrosInterfaceWithInvalidClientPassword
		shouldRaiseErrorWithMessage: TusLibrosInterface incorrectPasswordErrorDescription! !

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 14:46:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 14:47:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 14:47:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 14:47:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 14:47:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 14:47:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 14:47:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 14:47:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 14:47:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10TransactionIDIsDifferentEachTime stamp: 'FR 12/3/2020 14:47:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 14:47:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 14:47:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 14:47:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 14:47:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 14:47:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 14:47:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 14:47:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/3/2020 14:47:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19CheckoutCartAfterTimeout stamp: 'FR 12/3/2020 14:47:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 14:47:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 14:47:01'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'tests - adding' stamp: 'FR 12/3/2020 14:47:51' prior: 51242650!
test04CannotAddToCartWithInvalidCartID

	| aTusLibrosInterface |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithICorrectCredentials.
	
	self  should: [
			aTusLibrosInterface add: 1
					  		of: testObjectsFactory aBookSoldByPublisher
					   		toCart: testObjectsFactory anInvalidCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidCartIDErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'tests - adding' stamp: 'FR 12/3/2020 14:48:02' prior: 51242761!
test05BookIsAddedSuccessfully

	| aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithICorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 1
					of: testObjectsFactory aBookSoldByPublisher 
		  			toCart: aCartID.
	
	self  assert: (aTusLibrosInterface listCart: aCartID) 
		equals: (Bag with: testObjectsFactory aBookSoldByPublisher)! !
!TusLibrosInterfaceTest methodsFor: 'tests - adding' stamp: 'FR 12/3/2020 14:48:05' prior: 51242786!
test06MultipleBooksAreAddedSuccessfully

	| aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithICorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 5
		    			of: testObjectsFactory aBookSoldByPublisher 
		    			toCart: aCartID.
	
	self  assert: (aTusLibrosInterface listCart: aCartID) 
		equals: (Bag new add: testObjectsFactory aBookSoldByPublisher withOccurrences: 5; yourself)! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing cart' stamp: 'FR 12/3/2020 14:48:15' prior: 51242041!
test07CannotListWithInvalidCartID

	| aTusLibrosInterface |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithICorrectCredentials.
	
	self  should: [
			aTusLibrosInterface listCart: testObjectsFactory anInvalidCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidCartIDErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'tests - checkout' stamp: 'FR 12/3/2020 14:48:21' prior: 51242061!
test08CannotCheckOutWithInvalidCartID

	| aTusLibrosInterface |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithICorrectCredentials.
	
	self  should: [
			aTusLibrosInterface checkout: testObjectsFactory anInvalidCartID
				    withCreditCard: testObjectsFactory aValidCreditCardNumber
				    expiring: testObjectsFactory aNonExpiredDate
				    withOwner: testObjectsFactory aValidOwnerName
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidCartIDErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'tests - checkout' stamp: 'FR 12/3/2020 14:48:25' prior: 51242813!
test09SuccessfulCheckoutIsDoneCorrectly

	| aTusLibrosInterface aCartID purchaseList |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithICorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 1
		    			of: testObjectsFactory aBookSoldByPublisher 
		    			toCart: aCartID.
	
	aTusLibrosInterface checkout: aCartID 
		    			withCreditCard: testObjectsFactory aValidCreditCardNumber
		    			expiring: testObjectsFactory aNonExpiredDate
		    			withOwner: testObjectsFactory aValidOwnerName.

	purchaseList := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
					     			withPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 50.
	self assert: purchaseList books includes: testObjectsFactory aBookSoldByPublisher.
	self assert: purchaseList books size equals: 1.
	self assert: (purchaseList quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.! !
!TusLibrosInterfaceTest methodsFor: 'tests - checkout' stamp: 'FR 12/3/2020 14:48:29' prior: 51242858!
test10TransactionIDIsDifferentEachTime

	| aTusLibrosInterface aCartID anotherCartID yetAnotherCartID firstTransactionID secondTransactionID thirdTransactionID |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithICorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 1
		    			of: testObjectsFactory aBookSoldByPublisher 
		    			toCart: aCartID.
	
	firstTransactionID := aTusLibrosInterface checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	anotherCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     				   andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 4
		    			of: testObjectsFactory anotherBookSoldByPublisher 
		    			toCart: anotherCartID.
	
	secondTransactionID := aTusLibrosInterface checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	yetAnotherCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     					andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 2
		    			of: testObjectsFactory aBookSoldByPublisher 
		    			toCart: yetAnotherCartID.
	
	thirdTransactionID := aTusLibrosInterface checkout: yetAnotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
	
	self assert: {firstTransactionID. secondTransactionID. thirdTransactionID} asSet size equals: 3.! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 14:48:35' prior: 51242926!
test11CannotListPurchasesForInvalidClientID

	| aTusLibrosInterface |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithICorrectCredentials.

	self  should: [
			aTusLibrosInterface listPurchasesFor: testObjectsFactory anInvalidClientID 
							withPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidClientIDErrorDescription! !

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 14:48:49'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 14:48:49'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 14:48:49'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 14:48:49'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 14:48:49'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 14:48:49'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 14:48:49'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 14:48:49'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 14:48:49'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10TransactionIDIsDifferentEachTime stamp: 'FR 12/3/2020 14:48:49'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 14:48:49'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 14:48:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 14:48:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 14:48:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 14:48:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 14:48:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 14:48:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/3/2020 14:48:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19CheckoutCartAfterTimeout stamp: 'FR 12/3/2020 14:48:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 14:48:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 14:48:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 14:48:50'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 14:49:11' prior: 51243904!
test11CannotListPurchasesForInvalidClientID

	| aTusLibrosInterface |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithInvalidClientID.

	self  should: [
			aTusLibrosInterface listPurchasesFor: testObjectsFactory anInvalidClientID 
							withPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidClientIDErrorDescription! !

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 14:49:12'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'TusLibros interfaces' stamp: 'FR 12/3/2020 14:49:24'!
tusLibrosInterfaceWithCorrectCredentials

	^ TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: self aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 14:49:24' prior: 51243765!
test07CannotListWithInvalidCartID

	| aTusLibrosInterface |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	self  should: [
			aTusLibrosInterface listCart: testObjectsFactory anInvalidCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidCartIDErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 14:49:24' prior: 51243840!
test10TransactionIDIsDifferentEachTime

	| aTusLibrosInterface aCartID anotherCartID yetAnotherCartID firstTransactionID secondTransactionID thirdTransactionID |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 1
		    			of: testObjectsFactory aBookSoldByPublisher 
		    			toCart: aCartID.
	
	firstTransactionID := aTusLibrosInterface checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	anotherCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     				   andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 4
		    			of: testObjectsFactory anotherBookSoldByPublisher 
		    			toCart: anotherCartID.
	
	secondTransactionID := aTusLibrosInterface checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	yetAnotherCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     					andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 2
		    			of: testObjectsFactory aBookSoldByPublisher 
		    			toCart: yetAnotherCartID.
	
	thirdTransactionID := aTusLibrosInterface checkout: yetAnotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
	
	self assert: {firstTransactionID. secondTransactionID. thirdTransactionID} asSet size equals: 3.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 14:49:24' prior: 51243780!
test08CannotCheckOutWithInvalidCartID

	| aTusLibrosInterface |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	self  should: [
			aTusLibrosInterface checkout: testObjectsFactory anInvalidCartID
				    withCreditCard: testObjectsFactory aValidCreditCardNumber
				    expiring: testObjectsFactory aNonExpiredDate
				    withOwner: testObjectsFactory aValidOwnerName
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidCartIDErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 14:49:24' prior: 51243800!
test09SuccessfulCheckoutIsDoneCorrectly

	| aTusLibrosInterface aCartID purchaseList |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 1
		    			of: testObjectsFactory aBookSoldByPublisher 
		    			toCart: aCartID.
	
	aTusLibrosInterface checkout: aCartID 
		    			withCreditCard: testObjectsFactory aValidCreditCardNumber
		    			expiring: testObjectsFactory aNonExpiredDate
		    			withOwner: testObjectsFactory aValidOwnerName.

	purchaseList := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
					     			withPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 50.
	self assert: purchaseList books includes: testObjectsFactory aBookSoldByPublisher.
	self assert: purchaseList books size equals: 1.
	self assert: (purchaseList quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 14:49:24' prior: 51243723!
test05BookIsAddedSuccessfully

	| aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 1
					of: testObjectsFactory aBookSoldByPublisher 
		  			toCart: aCartID.
	
	self  assert: (aTusLibrosInterface listCart: aCartID) 
		equals: (Bag with: testObjectsFactory aBookSoldByPublisher)! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 14:49:24' prior: 51243743!
test06MultipleBooksAreAddedSuccessfully

	| aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 5
		    			of: testObjectsFactory aBookSoldByPublisher 
		    			toCart: aCartID.
	
	self  assert: (aTusLibrosInterface listCart: aCartID) 
		equals: (Bag new add: testObjectsFactory aBookSoldByPublisher withOccurrences: 5; yourself)! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 14:49:24' prior: 51243494!
test03SuccessfulyCreatedCartIsEmpty

	| aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
							 andPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (aTusLibrosInterface listCart: aCartID) isEmpty! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 14:49:24' prior: 51243706!
test04CannotAddToCartWithInvalidCartID

	| aTusLibrosInterface |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	self  should: [
			aTusLibrosInterface add: 1
					  		of: testObjectsFactory aBookSoldByPublisher
					   		toCart: testObjectsFactory anInvalidCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidCartIDErrorDescription! !

!methodRemoval: StoreTestObjectsFactory #tusLibrosInterfaceWithICorrectCredentials stamp: 'FR 12/3/2020 14:49:24'!
tusLibrosInterfaceWithICorrectCredentials

	^ TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: self aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: Clock new!
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 14:49:45' prior: 51242948!
test12CannotListPurchasesForClientWithIncorrectPassword

	| aTusLibrosInterface |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithInvalidClientPassword.

	self  should: [
			aTusLibrosInterface listPurchasesFor: testObjectsFactory anInvalidClientID 
				    			withPassword: testObjectsFactory anIncorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface incorrectPasswordErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 14:49:53' prior: 51242971!
test13MultiplePurchasesBySameClientAreListedCorrectly

	| aTusLibrosInterface aCartID anotherCartID purchaseList |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.

	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 1
		    			of: testObjectsFactory aBookSoldByPublisher 
		    			toCart: aCartID.

 	aTusLibrosInterface checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      				   andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 4
		    			of: testObjectsFactory anotherBookSoldByPublisher 
		    			toCart: anotherCartID.

 	aTusLibrosInterface checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
				       	    			withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 450.
	self assert: purchaseList booksWithQuantities size equals: 5.
	self assert: (purchaseList quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.
	self assert: (purchaseList quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 14:50:01' prior: 51243109!
test14PurchasesByMultipleClientsAreListedCorrectly

	| aTusLibrosInterface aCartID anotherCartID purchaseList1 purchaseList2 |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.

	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 1
		    			of: testObjectsFactory aBookSoldByPublisher 
		    			toCart: aCartID.

 	aTusLibrosInterface checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      				   andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 4
		    			of: testObjectsFactory anotherBookSoldByPublisher 
		    			toCart: anotherCartID.

 	aTusLibrosInterface checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList1 := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
				       	    			  withPassword: testObjectsFactory aCorrectPassword.

	purchaseList2 := aTusLibrosInterface listPurchasesFor: testObjectsFactory anotherValidClientID 
				       	   			  withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList1 wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList1 total equals: 50.
	self assert: purchaseList1 booksWithQuantities size = 1.
	self assert: (purchaseList1 quantityOf: testObjectsFactory aBookSoldByPublisher) equals: 1.

	self assert: (purchaseList2 wasMadeBy: testObjectsFactory anotherValidClientID).
	self assert: purchaseList2 total equals: 400.
	self assert: purchaseList2 booksWithQuantities size = 4.
	self assert: (purchaseList2 quantityOf: testObjectsFactory anotherBookSoldByPublisher) equals: 4.! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 14:50:10' prior: 51243184!
test15PurchaseListForClientThatNeverCreatedCartIsEmpty

	| aTusLibrosInterface purchaseList |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	purchaseList := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
				       	    			 withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 0.
	self assert: purchaseList booksWithQuantities isEmpty.! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 14:50:16' prior: 51243209!
test16PurchaseListOnlyShowsCheckedOutItems

	|aTusLibrosInterface aCartID purchaseList |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      			 andPassword: testObjectsFactory aCorrectPassword.
	
	aTusLibrosInterface add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
			
	
	purchaseList := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
				       	    			 withPassword: testObjectsFactory aCorrectPassword.

	self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 0.
	self assert: purchaseList booksWithQuantities isEmpty.! !
!StoreTestObjectsFactory methodsFor: 'TusLibros interfaces' stamp: 'FR 12/3/2020 14:51:09'!
tusLibrosInterfaceWithCorrectCredentialsAndClock: aClock

	^ TusLibrosInterface withAuthenticator: AuthenticatorSimulator successfulAuthentication
			catalog: self aCatalog
			merchantProcessor: MerchantProcessorSimulator successfulValidation
			andClock: aClock! !
!StoreTestObjectsFactory methodsFor: 'TusLibros interfaces' stamp: 'FR 12/3/2020 14:51:20' prior: 51244023!
tusLibrosInterfaceWithCorrectCredentials

	^ self tusLibrosInterfaceWithCorrectCredentialsAndClock: Clock new.! !
!TusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 14:51:37' prior: 51242437!
test17CannotAddToCartAfterTimeout

	| aTusLibrosInterface aCartID aClock |
	
	aClock := Clock new.
		
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentialsAndClock: aClock.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
			aTusLibrosInterface add: 1
				    of: testObjectsFactory aBookSoldByPublisher
				    toCart: aCartID
		]
		raise:  testObjectsFactory functionalError
		withMessageText: TusLibrosInterface timeoutErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 14:51:42' prior: 51242465!
test18CannotListCartAfterTimeout

	| aTusLibrosInterface aCartID aClock |
	
	aClock := Clock new.
		
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentialsAndClock: aClock.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [ aTusLibrosInterface listCart: aCartID ]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface timeoutErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 14:51:47' prior: 51242491!
test19CheckoutCartAfterTimeout

	| aTusLibrosInterface aCartID aClock |
	
	aClock := Clock new.
		
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentialsAndClock: aClock.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
			aTusLibrosInterface checkout: aCartID
			    	    withCreditCard: testObjectsFactory aValidCreditCardNumber
			    	    expiring: testObjectsFactory aNonExpiredDate
			    	    withOwner: testObjectsFactory aValidOwnerName
	]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface timeoutErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 14:51:52' prior: 51242523!
test20AddingToCartRefreshesTimeout

	| aTusLibrosInterface aCartID aClock expectedList |
	
	aClock := Clock new.
		
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentialsAndClock: aClock.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	aTusLibrosInterface add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	aTusLibrosInterface add: 1 of: testObjectsFactory anotherBookSoldByPublisher toCart: aCartID.
	
	expectedList := {testObjectsFactory aBookSoldByPublisher. testObjectsFactory anotherBookSoldByPublisher} asBag.
	
	self assert: (aTusLibrosInterface listCart: aCartID) equals: expectedList! !
!TusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 14:51:56' prior: 51242557!
test21ListingCartRefreshesTimeout

	| aTusLibrosInterface aCartID aClock |
	
	aClock := Clock new.
		
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentialsAndClock: aClock.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	aTusLibrosInterface listCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	aTusLibrosInterface listCart: aCartID.
	
	self assert: (aTusLibrosInterface listCart: aCartID) equals: Bag new! !
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 14:54:09'!
shouldRaiseTimeoutError: blockThatShouldRaiseError

	| aTusLibrosInterface aCartID aClock |
	
	aClock := Clock new.
		
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentialsAndClock: aClock.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [ blockThatShouldRaiseError value: aTusLibrosInterface ]
		raise:  testObjectsFactory functionalError
		withMessageText: TusLibrosInterface timeoutErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 14:54:49' prior: 51244598!
shouldRaiseTimeoutError: blockThatShouldRaiseError

	| aTusLibrosInterface aCartID aClock |
	
	aClock := Clock new.
		
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentialsAndClock: aClock.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [ blockThatShouldRaiseError value: aTusLibrosInterface value: aCartID ]
		raise:  testObjectsFactory functionalError
		withMessageText: TusLibrosInterface timeoutErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 14:56:22' prior: 51244474!
test17CannotAddToCartAfterTimeout

	self shouldRaiseTimeoutError: [ :interface :cartID |
		interface add: 1
			      of: testObjectsFactory aBookSoldByPublisher
			      toCart: cartID
	]

	"| aTusLibrosInterface aCartID aClock |
	
	aClock := Clock new.
		
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentialsAndClock: aClock.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
			aTusLibrosInterface add: 1
				    of: testObjectsFactory aBookSoldByPublisher
				    toCart: aCartID
		]
		raise:  testObjectsFactory functionalError
		withMessageText: TusLibrosInterface timeoutErrorDescription"! !
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 14:56:45'!
shouldRaiseTimeoutErrorAfterThirtyMinutes: blockThatShouldRaiseError

	| aTusLibrosInterface aCartID aClock |
	
	aClock := Clock new.
		
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentialsAndClock: aClock.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [ blockThatShouldRaiseError value: aTusLibrosInterface value: aCartID ]
		raise:  testObjectsFactory functionalError
		withMessageText: TusLibrosInterface timeoutErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 14:56:45' prior: 51244644!
test17CannotAddToCartAfterTimeout

	self shouldRaiseTimeoutErrorAfterThirtyMinutes: [ :interface :cartID |
		interface add: 1
			      of: testObjectsFactory aBookSoldByPublisher
			      toCart: cartID
	]

	"| aTusLibrosInterface aCartID aClock |
	
	aClock := Clock new.
		
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentialsAndClock: aClock.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
			aTusLibrosInterface add: 1
				    of: testObjectsFactory aBookSoldByPublisher
				    toCart: aCartID
		]
		raise:  testObjectsFactory functionalError
		withMessageText: TusLibrosInterface timeoutErrorDescription"! !

!methodRemoval: TusLibrosInterfaceTest #shouldRaiseTimeoutError: stamp: 'FR 12/3/2020 14:56:45'!
shouldRaiseTimeoutError: blockThatShouldRaiseError

	| aTusLibrosInterface aCartID aClock |
	
	aClock := Clock new.
		
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentialsAndClock: aClock.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [ blockThatShouldRaiseError value: aTusLibrosInterface value: aCartID ]
		raise:  testObjectsFactory functionalError
		withMessageText: TusLibrosInterface timeoutErrorDescription!
!TusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 14:57:16' prior: 51244498!
test18CannotListCartAfterTimeout

	self shouldRaiseTimeoutErrorAfterThirtyMinutes: [ :interface :cartID |
		interface listCart: cartID
	]



	"| aTusLibrosInterface aCartID aClock |
	
	aClock := Clock new.
		
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentialsAndClock: aClock.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [ aTusLibrosInterface listCart: aCartID ]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface timeoutErrorDescription"! !
!TusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 14:57:59' prior: 51244519!
test19CheckoutCartAfterTimeout

	self shouldRaiseTimeoutErrorAfterThirtyMinutes: [ :interface :cartID |
		interface checkout: cartID
			      withCreditCard: testObjectsFactory aValidCreditCardNumber
			      expiring: testObjectsFactory aNonExpiredDate
			      withOwner: testObjectsFactory aValidOwnerName
	]


	"| aTusLibrosInterface aCartID aClock |
	
	aClock := Clock new.
		
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentialsAndClock: aClock.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 30. 
	
	self  should: [
			aTusLibrosInterface checkout: aCartID
			    	    withCreditCard: testObjectsFactory aValidCreditCardNumber
			    	    expiring: testObjectsFactory aNonExpiredDate
			    	    withOwner: testObjectsFactory aValidOwnerName
	]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface timeoutErrorDescription"! !

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 14:58:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 14:58:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 14:58:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 14:58:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 14:58:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 14:58:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 14:58:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 14:58:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 14:58:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10TransactionIDIsDifferentEachTime stamp: 'FR 12/3/2020 14:58:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 14:58:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 14:58:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 14:58:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 14:58:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 14:58:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 14:58:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 14:58:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/3/2020 14:58:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19CheckoutCartAfterTimeout stamp: 'FR 12/3/2020 14:58:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 14:58:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 14:58:06'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 14:58:14' prior: 51244696!
test17CannotAddToCartAfterTimeout

	self shouldRaiseTimeoutErrorAfterThirtyMinutes: [ :interface :cartID |
		interface add: 1
			      of: testObjectsFactory aBookSoldByPublisher
			      toCart: cartID
	]! !
!TusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 14:58:20' prior: 51244747!
test18CannotListCartAfterTimeout

	self shouldRaiseTimeoutErrorAfterThirtyMinutes: [ :interface :cartID |
		interface listCart: cartID
	]! !
!TusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 14:58:26' prior: 51244772!
test19CheckoutCartAfterTimeout

	self shouldRaiseTimeoutErrorAfterThirtyMinutes: [ :interface :cartID |
		interface checkout: cartID
			      withCreditCard: testObjectsFactory aValidCreditCardNumber
			      expiring: testObjectsFactory aNonExpiredDate
			      withOwner: testObjectsFactory aValidOwnerName
	]! !
!TusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 14:58:33'!
test19CannotCheckoutCartAfterTimeout

	self shouldRaiseTimeoutErrorAfterThirtyMinutes: [ :interface :cartID |
		interface checkout: cartID
			      withCreditCard: testObjectsFactory aValidCreditCardNumber
			      expiring: testObjectsFactory aNonExpiredDate
			      withOwner: testObjectsFactory aValidOwnerName
	]! !

!methodRemoval: TusLibrosInterfaceTest #test19CheckoutCartAfterTimeout stamp: 'FR 12/3/2020 14:58:33'!
test19CheckoutCartAfterTimeout

	self shouldRaiseTimeoutErrorAfterThirtyMinutes: [ :interface :cartID |
		interface checkout: cartID
			      withCreditCard: testObjectsFactory aValidCreditCardNumber
			      expiring: testObjectsFactory aNonExpiredDate
			      withOwner: testObjectsFactory aValidOwnerName
	]!
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 15:01:20'!
listingPurchasesForCartWithID: aClientID andPassword: aPassword on: aTusLibrosInterface shouldRaiseErrorWithMessage: anErrorMessage
			
	self  should: [
			aTusLibrosInterface listPurchasesFor: aClientID 
							withPassword: aPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: anErrorMessage! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 15:02:30' prior: 51244261!
test12CannotListPurchasesForClientWithIncorrectPassword

	self listingPurchasesForCartWithID: testObjectsFactory anInvalidClientID
	      andPassword: testObjectsFactory anIncorrectPassword
	      on: testObjectsFactory tusLibrosInterfaceWithInvalidClientPassword
	      shouldRaiseErrorWithMessage: TusLibrosInterface incorrectPasswordErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 15:03:32' prior: 51244955!
test12CannotListPurchasesForClientWithIncorrectPassword

	self listingPurchasesForCartWithID: testObjectsFactory aValidClientID
	      andPassword: testObjectsFactory anIncorrectPassword
	      on: testObjectsFactory tusLibrosInterfaceWithInvalidClientPassword
	      shouldRaiseErrorWithMessage: TusLibrosInterface incorrectPasswordErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 15:04:05' prior: 51244002!
test11CannotListPurchasesForInvalidClientID

	self listingPurchasesForCartWithID: testObjectsFactory anInvalidClientID
	      andPassword: testObjectsFactory aCorrectPassword
	      on: testObjectsFactory tusLibrosInterfaceWithInvalidClientID
	      shouldRaiseErrorWithMessage: TusLibrosInterface invalidClientIDErrorDescription

	"| aTusLibrosInterface |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithInvalidClientID.

	self  should: [
			aTusLibrosInterface listPurchasesFor: testObjectsFactory anInvalidClientID 
							withPassword: testObjectsFactory aCorrectPassword
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidClientIDErrorDescription"! !

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 15:04:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 15:04:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 15:04:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 15:04:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 15:04:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 15:04:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 15:04:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 15:04:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 15:04:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10TransactionIDIsDifferentEachTime stamp: 'FR 12/3/2020 15:04:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 15:04:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 15:04:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 15:04:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 15:04:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 15:04:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 15:04:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 15:04:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/3/2020 15:04:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19CannotCheckoutCartAfterTimeout stamp: 'FR 12/3/2020 15:04:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 15:04:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 15:04:09'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 15:04:15' prior: 51244985!
test11CannotListPurchasesForInvalidClientID

	self listingPurchasesForCartWithID: testObjectsFactory anInvalidClientID
	      andPassword: testObjectsFactory aCorrectPassword
	      on: testObjectsFactory tusLibrosInterfaceWithInvalidClientID
	      shouldRaiseErrorWithMessage: TusLibrosInterface invalidClientIDErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 15:05:30'!
doing: aBlock on: aTusLibrosInterface shouldRaiseErrorWithMessage: anErrorMessage
			
	self  should: [ aBlock value: aTusLibrosInterface ]
		raise: testObjectsFactory functionalError
		withMessageText: anErrorMessage! !
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 15:06:37' prior: 51243585!
creatingCartWithID: aClientID andPassword: aPassword on: aTusLibrosInterface shouldRaiseErrorWithMessage: anErrorMessage
			
	self  doing: [ :interface | interface createCartForClientWithID: aClientID 
							   andPassword: aPassword]
		on: aTusLibrosInterface
		shouldRaiseErrorWithMessage: anErrorMessage.! !
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 15:06:59' prior: 51244941!
listingPurchasesForCartWithID: aClientID andPassword: aPassword on: aTusLibrosInterface shouldRaiseErrorWithMessage: anErrorMessage

	self  doing: [ :interface | interface listPurchasesFor: aClientID 
							    withPassword: aPassword]
		on: aTusLibrosInterface
		shouldRaiseErrorWithMessage: anErrorMessage.! !

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 15:07:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 15:07:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 15:07:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 15:07:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 15:07:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 15:07:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 15:07:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 15:07:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 15:07:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10TransactionIDIsDifferentEachTime stamp: 'FR 12/3/2020 15:07:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 15:07:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 15:07:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 15:07:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 15:07:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 15:07:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 15:07:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 15:07:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/3/2020 15:07:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19CannotCheckoutCartAfterTimeout stamp: 'FR 12/3/2020 15:07:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 15:07:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 15:07:04'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 15:14:02' prior: 51245127!
listingPurchasesForCartWithID: aClientID andPassword: aPassword on: aTusLibrosInterface shouldRaiseErrorWithMessage: anErrorMessage
		
	self  doing: [ :interface | interface add: 1
					  		    of: testObjectsFactory aBookSoldByPublisher
					   		    toCart: testObjectsFactory anInvalidCartID]
		on: testObjectsFactory tusLibrosInterfaceWithCorrectCredentials
		shouldRaiseErrorWithMessage: anErrorMessage.! !
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 15:06:59' prior: 51245217!
listingPurchasesForCartWithID: aClientID andPassword: aPassword on: aTusLibrosInterface shouldRaiseErrorWithMessage: anErrorMessage

	self  doing: [ :interface | interface listPurchasesFor: aClientID 
							    withPassword: aPassword]
		on: aTusLibrosInterface
		shouldRaiseErrorWithMessage: anErrorMessage.! !
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 15:15:22'!
addingToCartWithID: aClientID shouldRaiseErrorWithMessage: anErrorMessage

	self  doing: [ :interface | interface add: 1
					  		    of: testObjectsFactory aBookSoldByPublisher
					   		    toCart: testObjectsFactory anInvalidCartID]
		on: testObjectsFactory tusLibrosInterfaceWithCorrectCredentials
		shouldRaiseErrorWithMessage: anErrorMessage.! !
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 15:15:30'!
listingPurchasesForClientWithID: aClientID andPassword: aPassword on: aTusLibrosInterface shouldRaiseErrorWithMessage: anErrorMessage

	self  doing: [ :interface | interface listPurchasesFor: aClientID 
							    withPassword: aPassword]
		on: aTusLibrosInterface
		shouldRaiseErrorWithMessage: anErrorMessage.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 15:15:31' prior: 51244970!
test12CannotListPurchasesForClientWithIncorrectPassword

	self listingPurchasesForClientWithID: testObjectsFactory aValidClientID
	      andPassword: testObjectsFactory anIncorrectPassword
	      on: testObjectsFactory tusLibrosInterfaceWithInvalidClientPassword
	      shouldRaiseErrorWithMessage: TusLibrosInterface incorrectPasswordErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 15:15:31' prior: 51245088!
test11CannotListPurchasesForInvalidClientID

	self listingPurchasesForClientWithID: testObjectsFactory anInvalidClientID
	      andPassword: testObjectsFactory aCorrectPassword
	      on: testObjectsFactory tusLibrosInterfaceWithInvalidClientID
	      shouldRaiseErrorWithMessage: TusLibrosInterface invalidClientIDErrorDescription! !

!methodRemoval: TusLibrosInterfaceTest #listingPurchasesForCartWithID:andPassword:on:shouldRaiseErrorWithMessage: stamp: 'FR 12/3/2020 15:15:31'!
listingPurchasesForCartWithID: aClientID andPassword: aPassword on: aTusLibrosInterface shouldRaiseErrorWithMessage: anErrorMessage

	self  doing: [ :interface | interface listPurchasesFor: aClientID 
							    withPassword: aPassword]
		on: aTusLibrosInterface
		shouldRaiseErrorWithMessage: anErrorMessage.!
!TusLibrosInterfaceTest methodsFor: 'tests - adding' stamp: 'FR 12/3/2020 15:16:10' prior: 51244232!
test04CannotAddToCartWithInvalidCartID

	self  addingToCartWithID: testObjectsFactory anInvalidCartID
		shouldRaiseErrorWithMessage: TusLibrosInterface invalidCartIDErrorDescription! !

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 15:16:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 15:16:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 15:16:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 15:16:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 15:16:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 15:16:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 15:16:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 15:16:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 15:16:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10TransactionIDIsDifferentEachTime stamp: 'FR 12/3/2020 15:16:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 15:16:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 15:16:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 15:16:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 15:16:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 15:16:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 15:16:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 15:16:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/3/2020 15:16:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19CannotCheckoutCartAfterTimeout stamp: 'FR 12/3/2020 15:16:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 15:16:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 15:16:13'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 15:17:47'!
listAfterDoing: aBlock shouldBe: expectedList
	
	| aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 1
					of: testObjectsFactory aBookSoldByPublisher 
		  			toCart: aCartID.
	
	self  assert: (aTusLibrosInterface listCart: aCartID) 
		equals: expectedList! !
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 15:18:01' prior: 51245404!
listAfterDoing: aBlock shouldBe: expectedList
	
	| aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     			 andPassword: testObjectsFactory aCorrectPassword.

	aBlock value: aTusLibrosInterface.

	self  assert: (aTusLibrosInterface listCart: aCartID) 
		equals: expectedList! !
!TusLibrosInterfaceTest methodsFor: 'tests - adding' stamp: 'FR 12/3/2020 15:19:56' prior: 51244173!
test05BookIsAddedSuccessfully

	self listAfterAdding: 1 of: testObjectsFactory aBookSoldByPublisher
	      shouldBe: (Bag with: testObjectsFactory aBookSoldByPublisher)

	"| aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 1
					of: testObjectsFactory aBookSoldByPublisher 
		  			toCart: aCartID.
	
	self  assert: (aTusLibrosInterface listCart: aCartID) 
		equals: (Bag with: testObjectsFactory aBookSoldByPublisher)"! !
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 15:20:53'!
listAfterAdding: anAmount of: aBook shouldBe: expectedList

	| aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: anAmount of: aBook toCart: aCartID.

	self  assert: (aTusLibrosInterface listCart: aCartID) 
		equals: expectedList! !

!methodRemoval: TusLibrosInterfaceTest #listAfterDoing:shouldBe: stamp: 'FR 12/3/2020 15:20:59'!
listAfterDoing: aBlock shouldBe: expectedList
	
	| aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     			 andPassword: testObjectsFactory aCorrectPassword.

	aBlock value: aTusLibrosInterface.

	self  assert: (aTusLibrosInterface listCart: aCartID) 
		equals: expectedList!

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 15:21:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 15:21:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 15:21:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 15:21:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 15:21:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 15:21:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 15:21:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 15:21:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 15:21:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10TransactionIDIsDifferentEachTime stamp: 'FR 12/3/2020 15:21:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 15:21:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 15:21:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 15:21:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 15:21:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 15:21:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 15:21:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 15:21:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/3/2020 15:21:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19CannotCheckoutCartAfterTimeout stamp: 'FR 12/3/2020 15:21:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 15:21:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 15:21:13'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'tests - adding' stamp: 'FR 12/3/2020 15:21:19' prior: 51245442!
test05BookIsAddedSuccessfully

	self listAfterAdding: 1 of: testObjectsFactory aBookSoldByPublisher
	      shouldBe: (Bag with: testObjectsFactory aBookSoldByPublisher)! !
!TusLibrosInterfaceTest methodsFor: 'tests - adding' stamp: 'FR 12/3/2020 15:21:46' prior: 51244194!
test06MultipleBooksAreAddedSuccessfully

	self listAfterAdding: 5 of: testObjectsFactory aBookSoldByPublisher
	      shouldBe: (Bag new add: testObjectsFactory aBookSoldByPublisher withOccurrences: 5; yourself)

	"| aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 5
		    			of: testObjectsFactory aBookSoldByPublisher 
		    			toCart: aCartID.
	
	self  assert: (aTusLibrosInterface listCart: aCartID) 
		equals: (Bag new add: testObjectsFactory aBookSoldByPublisher withOccurrences: 5; yourself)"! !

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 15:21:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 15:21:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 15:21:49'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 15:21:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 15:21:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 15:21:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 15:21:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 15:21:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 15:21:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10TransactionIDIsDifferentEachTime stamp: 'FR 12/3/2020 15:21:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 15:21:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 15:21:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 15:21:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 15:21:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 15:21:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 15:21:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 15:21:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/3/2020 15:21:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19CannotCheckoutCartAfterTimeout stamp: 'FR 12/3/2020 15:21:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 15:21:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 15:21:57'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'tests - adding' stamp: 'FR 12/3/2020 15:22:02' prior: 51245587!
test06MultipleBooksAreAddedSuccessfully

	self listAfterAdding: 5 of: testObjectsFactory aBookSoldByPublisher
	      shouldBe: (Bag new add: testObjectsFactory aBookSoldByPublisher withOccurrences: 5; yourself)! !
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 15:24:03'!
listingCartWithID: aCartID shouldRaiseErrorWithMessage: anErrorMessage

	self  doing: [ :interface | interface listCart: aCartID ]
		on: testObjectsFactory tusLibrosInterfaceWithCorrectCredentials
		shouldRaiseErrorWithMessage: anErrorMessage.! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing cart' stamp: 'FR 12/3/2020 15:24:24' prior: 51244035!
test07CannotListWithInvalidCartID

	self listingCartWithID: testObjectsFactory anInvalidCartID shouldRaiseErrorWithMessage: TusLibrosInterface invalidCartIDErrorDescription

	"| aTusLibrosInterface |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	self  should: [
			aTusLibrosInterface listCart: testObjectsFactory anInvalidCartID
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidCartIDErrorDescription"! !

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 15:24:26'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'tests - listing cart' stamp: 'FR 12/3/2020 15:24:36' prior: 51245713!
test07CannotListWithInvalidCartID

	self  listingCartWithID: testObjectsFactory anInvalidCartID
		shouldRaiseErrorWithMessage: TusLibrosInterface invalidCartIDErrorDescription! !
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 15:26:46'!
listAfterDoing: aBlock shouldBe: expectedList

	| aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     			 andPassword: testObjectsFactory aCorrectPassword.

	aBlock value: aTusLibrosInterface value: aCartID.

	self  assert: (aTusLibrosInterface listCart: aCartID) 
		equals: expectedList! !
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 15:27:37' prior: 51245466!
listAfterAdding: anAmount of: aBook shouldBe: expectedList

	self  listAfterDoing: [ :interface :cartID |
			interface add: anAmount of: aBook toCart: cartID
		]
		shouldBe: expectedList

	
	"| aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: anAmount of: aBook toCart: aCartID.

	self  assert: (aTusLibrosInterface listCart: aCartID) 
		equals: expectedList"! !

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 15:27:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 15:27:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 15:27:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 15:27:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 15:27:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 15:27:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 15:27:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 15:27:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 15:27:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10TransactionIDIsDifferentEachTime stamp: 'FR 12/3/2020 15:27:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 15:27:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 15:27:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 15:27:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 15:27:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 15:27:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 15:27:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 15:27:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/3/2020 15:27:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19CannotCheckoutCartAfterTimeout stamp: 'FR 12/3/2020 15:27:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 15:27:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 15:27:43'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 15:27:48' prior: 51245763!
listAfterAdding: anAmount of: aBook shouldBe: expectedList

	self  listAfterDoing: [ :interface :cartID |
			interface add: anAmount of: aBook toCart: cartID
		]
		shouldBe: expectedList! !
!TusLibrosInterfaceTest methodsFor: 'tests - creation' stamp: 'FR 12/3/2020 15:28:26' prior: 51244216!
test03SuccessfulyCreatedCartIsEmpty

	self listAfterDoing: [] shouldBe: testObjectsFactory anEmptyBag

	"| aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
							 andPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (aTusLibrosInterface listCart: aCartID) isEmpty"! !

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 15:28:29'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 15:28:29'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'tests - creation' stamp: 'FR 12/3/2020 15:28:38' prior: 51245873!
test03SuccessfulyCreatedCartIsEmpty

	self listAfterDoing: [ :interface :cartID | ] shouldBe: testObjectsFactory anEmptyBag

	"| aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
							 andPassword: testObjectsFactory aCorrectPassword.
	
	self assert: (aTusLibrosInterface listCart: aCartID) isEmpty"! !

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 15:28:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 15:28:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 15:28:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 15:28:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 15:28:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 15:28:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 15:28:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 15:28:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 15:28:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10TransactionIDIsDifferentEachTime stamp: 'FR 12/3/2020 15:28:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 15:28:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 15:28:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 15:28:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 15:28:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 15:28:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 15:28:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 15:28:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/3/2020 15:28:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19CannotCheckoutCartAfterTimeout stamp: 'FR 12/3/2020 15:28:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 15:28:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 15:28:40'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'tests - creation' stamp: 'FR 12/3/2020 15:28:45' prior: 51245898!
test03SuccessfulyCreatedCartIsEmpty

	self listAfterDoing: [ :interface :cartID | ] shouldBe: testObjectsFactory anEmptyBag! !
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 15:30:55'!
checkingOutCartWithID: aCartID shouldRaiseErrorWithMessage: anErrorMessage

	self  doing: [ :interface |
			interface checkout: aCartID
					withCreditCard: testObjectsFactory aValidCreditCardNumber
					expiring: testObjectsFactory aNonExpiredDate
					withOwner: testObjectsFactory aValidOwnerName ]
		on: testObjectsFactory tusLibrosInterfaceWithCorrectCredentials
		shouldRaiseErrorWithMessage: anErrorMessage.! !
!TusLibrosInterfaceTest methodsFor: 'tests - checkout' stamp: 'FR 12/3/2020 15:31:29' prior: 51244113!
test08CannotCheckOutWithInvalidCartID

	self checkingOutCartWithID: testObjectsFactory anInvalidCartID
	      shouldRaiseErrorWithMessage: TusLibrosInterface invalidCartIDErrorDescription
	
	"| aTusLibrosInterface |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	self  should: [
			aTusLibrosInterface checkout: testObjectsFactory anInvalidCartID
				    withCreditCard: testObjectsFactory aValidCreditCardNumber
				    expiring: testObjectsFactory aNonExpiredDate
				    withOwner: testObjectsFactory aValidOwnerName
		]
		raise: testObjectsFactory functionalError
		withMessageText: TusLibrosInterface invalidCartIDErrorDescription"! !

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 15:31:31'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'tests - checkout' stamp: 'FR 12/3/2020 15:31:35' prior: 51246017!
test08CannotCheckOutWithInvalidCartID

	self checkingOutCartWithID: testObjectsFactory anInvalidCartID
	      shouldRaiseErrorWithMessage: TusLibrosInterface invalidCartIDErrorDescription! !

{} sum!
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 15:42:28'!
purchaseList: aPurchaseList IsMadeBy: aClientID withTotalCost: expectedTotal andBooks: expectedBooks

	self assert: (aPurchaseList wasMadeBy: aClientID).
	self assert: aPurchaseList total equals: expectedTotal.
	expectedBooks values isEmpty ifTrue: [
		self assert: aPurchaseList booksWithQuantities size equals: 0.
	] ifFalse: [
		self assert: aPurchaseList booksWithQuantities size equals: expectedBooks values sum
	].
	expectedBooks keysDo: [ :aKey | 
		self assert: (aPurchaseList quantityOf: aKey) = (expectedBooks at: aKey)
	].! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 15:43:58' prior: 51244279!
test13MultiplePurchasesBySameClientAreListedCorrectly

	| aTusLibrosInterface aCartID anotherCartID purchaseList |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.

	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 1
		    			of: testObjectsFactory aBookSoldByPublisher 
		    			toCart: aCartID.

 	aTusLibrosInterface checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      				   andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 4
		    			of: testObjectsFactory anotherBookSoldByPublisher 
		    			toCart: anotherCartID.

 	aTusLibrosInterface checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
				       	    			withPassword: testObjectsFactory aCorrectPassword.

	self purchaseList: purchaseList
	      IsMadeBy: testObjectsFactory aValidClientID
	      withTotalCost: 450
	      andBooks: (Dictionary with: (testObjectsFactory aBookSoldByPublisher) -> 1
						  with: (testObjectsFactory anotherBookSoldByPublisher)->4) .! !

!testRun: #TusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 15:44:04'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 15:44:23'!
assertPurchaseList: aPurchaseList IsMadeBy: aClientID withTotalCost: expectedTotal andBooks: expectedBooks

	self assert: (aPurchaseList wasMadeBy: aClientID).
	self assert: aPurchaseList total equals: expectedTotal.
	expectedBooks values isEmpty ifTrue: [
		self assert: aPurchaseList booksWithQuantities size equals: 0.
	] ifFalse: [
		self assert: aPurchaseList booksWithQuantities size equals: expectedBooks values sum
	].
	expectedBooks keysDo: [ :aKey | 
		self assert: (aPurchaseList quantityOf: aKey) = (expectedBooks at: aKey)
	].! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 15:44:23' prior: 51246077!
test13MultiplePurchasesBySameClientAreListedCorrectly

	| aTusLibrosInterface aCartID anotherCartID purchaseList |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.

	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 1
		    			of: testObjectsFactory aBookSoldByPublisher 
		    			toCart: aCartID.

 	aTusLibrosInterface checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      				   andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 4
		    			of: testObjectsFactory anotherBookSoldByPublisher 
		    			toCart: anotherCartID.

 	aTusLibrosInterface checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
				       	    			withPassword: testObjectsFactory aCorrectPassword.

	self assertPurchaseList: purchaseList
	      IsMadeBy: testObjectsFactory aValidClientID
	      withTotalCost: 450
	      andBooks: (Dictionary with: (testObjectsFactory aBookSoldByPublisher) -> 1
						  with: (testObjectsFactory anotherBookSoldByPublisher)->4) .! !

!methodRemoval: TusLibrosInterfaceTest #purchaseList:IsMadeBy:withTotalCost:andBooks: stamp: 'FR 12/3/2020 15:44:23'!
purchaseList: aPurchaseList IsMadeBy: aClientID withTotalCost: expectedTotal andBooks: expectedBooks

	self assert: (aPurchaseList wasMadeBy: aClientID).
	self assert: aPurchaseList total equals: expectedTotal.
	expectedBooks values isEmpty ifTrue: [
		self assert: aPurchaseList booksWithQuantities size equals: 0.
	] ifFalse: [
		self assert: aPurchaseList booksWithQuantities size equals: expectedBooks values sum
	].
	expectedBooks keysDo: [ :aKey | 
		self assert: (aPurchaseList quantityOf: aKey) = (expectedBooks at: aKey)
	].!
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 15:44:32' prior: 51246156!
test13MultiplePurchasesBySameClientAreListedCorrectly

	| aTusLibrosInterface aCartID anotherCartID purchaseList |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.

	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 1
		    			of: testObjectsFactory aBookSoldByPublisher 
		    			toCart: aCartID.

 	aTusLibrosInterface checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      				   andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 4
		    			of: testObjectsFactory anotherBookSoldByPublisher 
		    			toCart: anotherCartID.

 	aTusLibrosInterface checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
				       	    			withPassword: testObjectsFactory aCorrectPassword.

	self assertPurchaseList: purchaseList
	      IsMadeBy: testObjectsFactory aValidClientID
	      withTotalCost: 450
	      andBooks: (Dictionary with: (testObjectsFactory aBookSoldByPublisher) -> 1
						  with: (testObjectsFactory anotherBookSoldByPublisher)->4).! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 15:45:34' prior: 51244337!
test14PurchasesByMultipleClientsAreListedCorrectly

	| aTusLibrosInterface aCartID anotherCartID purchaseList1 purchaseList2 |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.

	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 1
		    			of: testObjectsFactory aBookSoldByPublisher 
		    			toCart: aCartID.

 	aTusLibrosInterface checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      				   andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 4
		    			of: testObjectsFactory anotherBookSoldByPublisher 
		    			toCart: anotherCartID.

 	aTusLibrosInterface checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	purchaseList1 := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
				       	    			  withPassword: testObjectsFactory aCorrectPassword.

	purchaseList2 := aTusLibrosInterface listPurchasesFor: testObjectsFactory anotherValidClientID 
				       	   			  withPassword: testObjectsFactory aCorrectPassword.

	self assertPurchaseList: purchaseList1
	      IsMadeBy: testObjectsFactory aValidClientID
	      withTotalCost: 50
	      andBooks: (Dictionary with: (testObjectsFactory aBookSoldByPublisher) -> 1).
	
	self assertPurchaseList: purchaseList2
	      IsMadeBy: testObjectsFactory anotherValidClientID
	      withTotalCost: 400
	      andBooks: (Dictionary with: (testObjectsFactory anotherBookSoldByPublisher) -> 4).! !

!testRun: #TusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 15:45:38'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 15:46:53' prior: 51244407!
test15PurchaseListForClientThatNeverCreatedCartIsEmpty

	| aTusLibrosInterface purchaseList |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	purchaseList := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
				       	    			 withPassword: testObjectsFactory aCorrectPassword.

	self assertPurchaseList: purchaseList
	      IsMadeBy: testObjectsFactory aValidClientID
	      withTotalCost: 0
	      andBooks: (Dictionary new).
	
	"self assert: (purchaseList wasMadeBy: testObjectsFactory aValidClientID).
	self assert: purchaseList total equals: 0.
	self assert: purchaseList booksWithQuantities isEmpty."! !

!testRun: #TusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 15:46:55'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 15:46:59' prior: 51246355!
test15PurchaseListForClientThatNeverCreatedCartIsEmpty

	| aTusLibrosInterface purchaseList |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	purchaseList := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
				       	    			 withPassword: testObjectsFactory aCorrectPassword.

	self assertPurchaseList: purchaseList
	      IsMadeBy: testObjectsFactory aValidClientID
	      withTotalCost: 0
	      andBooks: (Dictionary new).! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 15:47:09' prior: 51244427!
test16PurchaseListOnlyShowsCheckedOutItems

	|aTusLibrosInterface aCartID purchaseList |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      			 andPassword: testObjectsFactory aCorrectPassword.
	
	aTusLibrosInterface add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
			
	
	purchaseList := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
				       	    			 withPassword: testObjectsFactory aCorrectPassword.

	self assertPurchaseList: purchaseList
	      IsMadeBy: testObjectsFactory aValidClientID
	      withTotalCost: 0
	      andBooks: (Dictionary new).! !

!testRun: #TusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 15:47:11'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 15:50:02'!
checkoutPurchaseOf: anAmount of: aBook forClient: aClientID
	
	| aCartID aTusLibrosInterface |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: aClientID
	  	    		     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: anAmount
		    			of: aBook 
		    			toCart: aCartID.

 	aTusLibrosInterface checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 15:51:20' prior: 51246286!
test14PurchasesByMultipleClientsAreListedCorrectly

	| aTusLibrosInterface purchaseList1 purchaseList2 |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.

	self  checkoutPurchaseOf: 1
		of: testObjectsFactory aBookSoldByPublisher
		forClient: testObjectsFactory aValidClientID.

	self  checkoutPurchaseOf: 4
		of: testObjectsFactory anotherBookSoldByPublisher
		forClient: testObjectsFactory anotherValidClientID.
	
		
	"anotherCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      				   andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 4
		    			of: testObjectsFactory anotherBookSoldByPublisher 
		    			toCart: anotherCartID.

 	aTusLibrosInterface checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName."

	purchaseList1 := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
				       	    			  withPassword: testObjectsFactory aCorrectPassword.

	purchaseList2 := aTusLibrosInterface listPurchasesFor: testObjectsFactory anotherValidClientID 
				       	   			  withPassword: testObjectsFactory aCorrectPassword.

	self assertPurchaseList: purchaseList1
	      IsMadeBy: testObjectsFactory aValidClientID
	      withTotalCost: 50
	      andBooks: (Dictionary with: (testObjectsFactory aBookSoldByPublisher) -> 1).
	
	self assertPurchaseList: purchaseList2
	      IsMadeBy: testObjectsFactory anotherValidClientID
	      withTotalCost: 400
	      andBooks: (Dictionary with: (testObjectsFactory anotherBookSoldByPublisher) -> 4).! !

!testRun: #TusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 15:51:32'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 15:51:32'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 15:52:28'!
checkoutPurchaseOf: anAmount of: aBook forClient: aClientID onInterface: aTusLibrosInterface
	
	| aCartID |
		
	aCartID := aTusLibrosInterface createCartForClientWithID: aClientID
	  	    		     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: anAmount
		    			of: aBook 
		    			toCart: aCartID.

 	aTusLibrosInterface checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.! !

!methodRemoval: TusLibrosInterfaceTest #checkoutPurchaseOf:of:forClient: stamp: 'FR 12/3/2020 15:52:32'!
checkoutPurchaseOf: anAmount of: aBook forClient: aClientID
	
	| aCartID aTusLibrosInterface |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: aClientID
	  	    		     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: anAmount
		    			of: aBook 
		    			toCart: aCartID.

 	aTusLibrosInterface checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.!
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 15:53:00' prior: 51246458!
test14PurchasesByMultipleClientsAreListedCorrectly

	| aTusLibrosInterface purchaseList1 purchaseList2 |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.

	self  checkoutPurchaseOf: 1
		of: testObjectsFactory aBookSoldByPublisher
		forClient: testObjectsFactory aValidClientID
		onInterface: aTusLibrosInterface.

	self  checkoutPurchaseOf: 4
		of: testObjectsFactory anotherBookSoldByPublisher
		forClient: testObjectsFactory anotherValidClientID
		onInterface: aTusLibrosInterface.
	
		
	"anotherCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory anotherValidClientID
	  	    		      				   andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 4
		    			of: testObjectsFactory anotherBookSoldByPublisher 
		    			toCart: anotherCartID.

 	aTusLibrosInterface checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName."

	purchaseList1 := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
				       	    			  withPassword: testObjectsFactory aCorrectPassword.

	purchaseList2 := aTusLibrosInterface listPurchasesFor: testObjectsFactory anotherValidClientID 
				       	   			  withPassword: testObjectsFactory aCorrectPassword.

	self assertPurchaseList: purchaseList1
	      IsMadeBy: testObjectsFactory aValidClientID
	      withTotalCost: 50
	      andBooks: (Dictionary with: (testObjectsFactory aBookSoldByPublisher) -> 1).
	
	self assertPurchaseList: purchaseList2
	      IsMadeBy: testObjectsFactory anotherValidClientID
	      withTotalCost: 400
	      andBooks: (Dictionary with: (testObjectsFactory anotherBookSoldByPublisher) -> 4).! !

!testRun: #TusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 15:53:03'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 15:53:08' prior: 51246567!
test14PurchasesByMultipleClientsAreListedCorrectly

	| aTusLibrosInterface purchaseList1 purchaseList2 |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.

	self  checkoutPurchaseOf: 1
		of: testObjectsFactory aBookSoldByPublisher
		forClient: testObjectsFactory aValidClientID
		onInterface: aTusLibrosInterface.

	self  checkoutPurchaseOf: 4
		of: testObjectsFactory anotherBookSoldByPublisher
		forClient: testObjectsFactory anotherValidClientID
		onInterface: aTusLibrosInterface.

	purchaseList1 := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
				       	    			  withPassword: testObjectsFactory aCorrectPassword.

	purchaseList2 := aTusLibrosInterface listPurchasesFor: testObjectsFactory anotherValidClientID 
				       	   			  withPassword: testObjectsFactory aCorrectPassword.

	self assertPurchaseList: purchaseList1
	      IsMadeBy: testObjectsFactory aValidClientID
	      withTotalCost: 50
	      andBooks: (Dictionary with: (testObjectsFactory aBookSoldByPublisher) -> 1).
	
	self assertPurchaseList: purchaseList2
	      IsMadeBy: testObjectsFactory anotherValidClientID
	      withTotalCost: 400
	      andBooks: (Dictionary with: (testObjectsFactory anotherBookSoldByPublisher) -> 4).! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 15:54:17' prior: 51246404!
test16PurchaseListOnlyShowsCheckedOutItems

	|aTusLibrosInterface purchaseList |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	self  checkoutPurchaseOf: 1
		of: testObjectsFactory aBookSoldByPublisher
		forClient: testObjectsFactory aValidClientID
		onInterface: aTusLibrosInterface.
	
	"aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      			 andPassword: testObjectsFactory aCorrectPassword.
	
	aTusLibrosInterface add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID."
			
	
	purchaseList := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
				       	    			 withPassword: testObjectsFactory aCorrectPassword.

	self assertPurchaseList: purchaseList
	      IsMadeBy: testObjectsFactory aValidClientID
	      withTotalCost: 0
	      andBooks: (Dictionary new).! !

!testRun: #TusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 15:54:20'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 15:54:20'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 15:47:09' prior: 51246675!
test16PurchaseListOnlyShowsCheckedOutItems

	|aTusLibrosInterface aCartID purchaseList |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      			 andPassword: testObjectsFactory aCorrectPassword.
	
	aTusLibrosInterface add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
			
	
	purchaseList := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
				       	    			 withPassword: testObjectsFactory aCorrectPassword.

	self assertPurchaseList: purchaseList
	      IsMadeBy: testObjectsFactory aValidClientID
	      withTotalCost: 0
	      andBooks: (Dictionary new).! !
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 15:56:22'!
assertPurchaseListFor: aClientID on: aTusLibrosInterface hasTotalCost: expectedTotal andBooks: expectedBooks

	| aPurchaseList |
	
	aPurchaseList := aTusLibrosInterface listPurchasesFor: aClientID 
				       	    			  withPassword: testObjectsFactory aCorrectPassword.

	self assert: (aPurchaseList wasMadeBy: aClientID).
	self assert: aPurchaseList total equals: expectedTotal.
	expectedBooks values isEmpty ifTrue: [
		self assert: aPurchaseList booksWithQuantities size equals: 0.
	] ifFalse: [
		self assert: aPurchaseList booksWithQuantities size equals: expectedBooks values sum
	].
	expectedBooks keysDo: [ :aKey | 
		self assert: (aPurchaseList quantityOf: aKey) = (expectedBooks at: aKey)
	].! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 15:57:29' prior: 51246231!
test13MultiplePurchasesBySameClientAreListedCorrectly

	| aTusLibrosInterface aCartID anotherCartID |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.

	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 1
		    			of: testObjectsFactory aBookSoldByPublisher 
		    			toCart: aCartID.

 	aTusLibrosInterface checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.
		
	anotherCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
	  	    		      				   andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: 4
		    			of: testObjectsFactory anotherBookSoldByPublisher 
		    			toCart: anotherCartID.

 	aTusLibrosInterface checkout: anotherCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.

	self  assertPurchaseListFor: testObjectsFactory aValidClientID
		on: aTusLibrosInterface
		hasTotalCost: 450
		andBooks: (Dictionary with: (testObjectsFactory aBookSoldByPublisher) -> 1
						    with: (testObjectsFactory anotherBookSoldByPublisher)->4).! !

!testRun: #TusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 15:57:43'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 15:58:50' prior: 51246768!
test13MultiplePurchasesBySameClientAreListedCorrectly

	| aTusLibrosInterface |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.

	self  checkoutPurchaseOf: 1
		of: testObjectsFactory aBookSoldByPublisher
		forClient: testObjectsFactory aValidClientID
		onInterface: aTusLibrosInterface.

	self  checkoutPurchaseOf: 4
		of: testObjectsFactory anotherBookSoldByPublisher
		forClient: testObjectsFactory aValidClientID
		onInterface: aTusLibrosInterface.

	self  assertPurchaseListFor: testObjectsFactory aValidClientID
		on: aTusLibrosInterface
		hasTotalCost: 450
		andBooks: (Dictionary with: (testObjectsFactory aBookSoldByPublisher) -> 1
						    with: (testObjectsFactory anotherBookSoldByPublisher)->4).! !

!testRun: #TusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 15:58:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 15:58:58'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 15:58:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 15:58:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 15:58:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 15:59:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 15:59:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 15:59:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 15:59:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 15:59:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 15:59:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10TransactionIDIsDifferentEachTime stamp: 'FR 12/3/2020 15:59:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 15:59:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 15:59:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 15:59:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 15:59:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 15:59:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 15:59:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 15:59:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/3/2020 15:59:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19CannotCheckoutCartAfterTimeout stamp: 'FR 12/3/2020 15:59:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 15:59:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 15:59:00'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 16:00:37' prior: 51246631!
test14PurchasesByMultipleClientsAreListedCorrectly

	| aTusLibrosInterface |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.

	self  checkoutPurchaseOf: 1
		of: testObjectsFactory aBookSoldByPublisher
		forClient: testObjectsFactory aValidClientID
		onInterface: aTusLibrosInterface.

	self  checkoutPurchaseOf: 4
		of: testObjectsFactory anotherBookSoldByPublisher
		forClient: testObjectsFactory anotherValidClientID
		onInterface: aTusLibrosInterface.
	
	self  assertPurchaseListFor: testObjectsFactory aValidClientID
		on: aTusLibrosInterface
		hasTotalCost: 50
		andBooks: (Dictionary with: (testObjectsFactory aBookSoldByPublisher) -> 1).

	self  assertPurchaseListFor: testObjectsFactory anotherValidClientID
		on: aTusLibrosInterface
		hasTotalCost: 400
		andBooks: (Dictionary with: (testObjectsFactory anotherBookSoldByPublisher) -> 4).! !

!testRun: #TusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 16:00:42'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 16:01:29' prior: 51246384!
test15PurchaseListForClientThatNeverCreatedCartIsEmpty

	| aTusLibrosInterface |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	self  assertPurchaseListFor: testObjectsFactory aValidClientID
		on: aTusLibrosInterface
		hasTotalCost: 0
		andBooks: (Dictionary new).! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 16:01:46' prior: 51246715!
test16PurchaseListOnlyShowsCheckedOutItems

	|aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      			 andPassword: testObjectsFactory aCorrectPassword.
	
	aTusLibrosInterface add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
			
	self  assertPurchaseListFor: testObjectsFactory aValidClientID
		on: aTusLibrosInterface
		hasTotalCost: 0
		andBooks: (Dictionary new).

	"purchaseList := aTusLibrosInterface listPurchasesFor: testObjectsFactory aValidClientID 
				       	    			 withPassword: testObjectsFactory aCorrectPassword.

	self assertPurchaseList: purchaseList
	      IsMadeBy: testObjectsFactory aValidClientID
	      withTotalCost: 0
	      andBooks: (Dictionary new)."! !

!testRun: #TusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 16:01:49'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 16:01:51'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 16:01:55' prior: 51246983!
test16PurchaseListOnlyShowsCheckedOutItems

	|aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      			 andPassword: testObjectsFactory aCorrectPassword.
	
	aTusLibrosInterface add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
			
	self  assertPurchaseListFor: testObjectsFactory aValidClientID
		on: aTusLibrosInterface
		hasTotalCost: 0
		andBooks: (Dictionary new).! !
!TusLibrosInterfaceTest methodsFor: 'tests - listing purchases' stamp: 'FR 12/3/2020 16:01:59' prior: 51247022!
test16PurchaseListOnlyShowsCheckedOutItems

	| aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      			 andPassword: testObjectsFactory aCorrectPassword.
	
	aTusLibrosInterface add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
			
	self  assertPurchaseListFor: testObjectsFactory aValidClientID
		on: aTusLibrosInterface
		hasTotalCost: 0
		andBooks: (Dictionary new).! !

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 16:02:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 16:02:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 16:02:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 16:02:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 16:02:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 16:02:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 16:02:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 16:02:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 16:02:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10TransactionIDIsDifferentEachTime stamp: 'FR 12/3/2020 16:02:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 16:02:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 16:02:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 16:02:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 16:02:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 16:02:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 16:02:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 16:02:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/3/2020 16:02:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19CannotCheckoutCartAfterTimeout stamp: 'FR 12/3/2020 16:02:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 16:02:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 16:02:05'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 16:03:15' prior: 51246523!
checkoutPurchaseOf: anAmount of: aBook forClient: aClientID onInterface: aTusLibrosInterface
	
	| aCartID |
		
	aCartID := aTusLibrosInterface createCartForClientWithID: aClientID
	  	    		     			 andPassword: testObjectsFactory aCorrectPassword.

	aTusLibrosInterface add: anAmount
		    			of: aBook 
		    			toCart: aCartID.

 	^ aTusLibrosInterface checkout: aCartID 
		    withCreditCard: testObjectsFactory aValidCreditCardNumber
		    expiring: testObjectsFactory aNonExpiredDate
		    withOwner: testObjectsFactory aValidOwnerName.! !
!TusLibrosInterfaceTest methodsFor: 'tests - checkout' stamp: 'FR 12/3/2020 16:05:43' prior: 51244050!
test10TransactionIDIsDifferentEachTime

	| aTusLibrosInterface firstTransactionID secondTransactionID thirdTransactionID |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	firstTransactionID := self checkoutPurchaseOf: 1
						of: testObjectsFactory aBookSoldByPublisher
						forClient: testObjectsFactory aValidClientID
						onInterface: aTusLibrosInterface.
	
	secondTransactionID := 	self checkoutPurchaseOf: 4
						     of: testObjectsFactory anotherBookSoldByPublisher
						     forClient: testObjectsFactory aValidClientID
						     onInterface: aTusLibrosInterface.
	
	thirdTransactionID := 	self checkoutPurchaseOf: 2
						     of: testObjectsFactory aBookSoldByPublisher
						     forClient: testObjectsFactory aValidClientID
						     onInterface: aTusLibrosInterface.

	self assert: {firstTransactionID. secondTransactionID. thirdTransactionID} asSet size equals: 3.! !

!testRun: #TusLibrosInterfaceTest #test10TransactionIDIsDifferentEachTime stamp: 'FR 12/3/2020 16:05:48'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'tests - checkout' stamp: 'FR 12/3/2020 16:08:10' prior: 51244133!
test09SuccessfulCheckoutIsDoneCorrectly

	| aTusLibrosInterface |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	self  checkoutPurchaseOf: 1
		of: testObjectsFactory aBookSoldByPublisher
		forClient: testObjectsFactory aValidClientID
		onInterface: aTusLibrosInterface.
	
	self  assertPurchaseListFor: testObjectsFactory aValidClientID
		on: aTusLibrosInterface
		hasTotalCost: 50
		andBooks: (Dictionary with: testObjectsFactory aBookSoldByPublisher -> 1).! !

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 16:08:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 16:08:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 16:08:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 16:08:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 16:08:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 16:08:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 16:08:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 16:08:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 16:08:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10TransactionIDIsDifferentEachTime stamp: 'FR 12/3/2020 16:08:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 16:08:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 16:08:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 16:08:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 16:08:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 16:08:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 16:08:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 16:08:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/3/2020 16:08:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19CannotCheckoutCartAfterTimeout stamp: 'FR 12/3/2020 16:08:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 16:08:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 16:08:18'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 16:10:26'!
listAfterDoing: aBlock toCreatedCartShouldBe: expectedList

	| aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     			 andPassword: testObjectsFactory aCorrectPassword.

	aBlock value: aTusLibrosInterface value: aCartID.

	self  assert: (aTusLibrosInterface listCart: aCartID) 
		equals: expectedList! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 16:10:26' prior: 51245993!
test03SuccessfulyCreatedCartIsEmpty

	self listAfterDoing: [ :interface :cartID | ] toCreatedCartShouldBe: testObjectsFactory anEmptyBag! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 16:10:26' prior: 51245863!
listAfterAdding: anAmount of: aBook shouldBe: expectedList

	self  listAfterDoing: [ :interface :cartID |
			interface add: anAmount of: aBook toCart: cartID
		]
		toCreatedCartShouldBe: expectedList! !

!methodRemoval: TusLibrosInterfaceTest #listAfterDoing:shouldBe: stamp: 'FR 12/3/2020 16:10:26'!
listAfterDoing: aBlock shouldBe: expectedList

	| aTusLibrosInterface aCartID |
	
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentials.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID
				     			 andPassword: testObjectsFactory aCorrectPassword.

	aBlock value: aTusLibrosInterface value: aCartID.

	self  assert: (aTusLibrosInterface listCart: aCartID) 
		equals: expectedList!
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 16:18:42'!
shouldRefreshTimeout: aBlock withExpectedList: expectedList
	
	| aTusLibrosInterface aCartID aClock |
	
	aClock := Clock new.
		
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentialsAndClock: aClock.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
		
	aBlock value: aTusLibrosInterface value: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	aBlock value: aTusLibrosInterface value: aCartID.
		
	self assert: (aTusLibrosInterface listCart: aCartID) equals: expectedList! !
!TusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 16:20:18' prior: 51244546!
test20AddingToCartRefreshesTimeout

	self  shouldRefreshTimeout: [ :interface :cartID | 
			interface add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: cartID.
		]
		withExpectedList: {testObjectsFactory aBookSoldByPublisher. testObjectsFactory anotherBookSoldByPublisher} asBag

	"| aTusLibrosInterface aCartID aClock expectedList |
	
	aClock := Clock new.
		
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentialsAndClock: aClock.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
	
	aTusLibrosInterface add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	aTusLibrosInterface add: 1 of: testObjectsFactory anotherBookSoldByPublisher toCart: aCartID.
	
	expectedList := {testObjectsFactory aBookSoldByPublisher. testObjectsFactory anotherBookSoldByPublisher} asBag.
	
	self assert: (aTusLibrosInterface listCart: aCartID) equals: expectedList"! !

!testRun: #TusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 16:20:20'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 16:20:20'!
FAILURE!

aTusLibrosInterface listCart: aCartID!

expectedList!
!TusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 16:21:20' prior: 51247373!
test20AddingToCartRefreshesTimeout

	self  shouldRefreshTimeout: [ :interface :cartID | 
			interface add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: cartID.
		]
		withExpectedList: {testObjectsFactory aBookSoldByPublisher. testObjectsFactory aBookSoldByPublisher} asBag! !
!TusLibrosInterfaceTest methodsFor: 'tests - timeout' stamp: 'FR 12/3/2020 16:21:59' prior: 51244576!
test21ListingCartRefreshesTimeout

	self  shouldRefreshTimeout: [ :interface :cartID | 
			interface listCart: cartID.
		]
		withExpectedList: testObjectsFactory anEmptyBag! !

!testRun: #TusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 16:22:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 16:22:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 16:22:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 16:22:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 16:22:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 16:22:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 16:22:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 16:22:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 16:22:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 16:22:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10TransactionIDIsDifferentEachTime stamp: 'FR 12/3/2020 16:22:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 16:22:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 16:22:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 16:22:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 16:22:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 16:22:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 16:22:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 16:22:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/3/2020 16:22:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19CannotCheckoutCartAfterTimeout stamp: 'FR 12/3/2020 16:22:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 16:22:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 16:22:03'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'private - assertions' stamp: 'FR 12/3/2020 16:23:21'!
assertDoing: aBlock refreshesTimeoutwithExpectedCartList: expectedList
	
	| aTusLibrosInterface aCartID aClock |
	
	aClock := Clock new.
		
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentialsAndClock: aClock.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
		
	aBlock value: aTusLibrosInterface value: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	aBlock value: aTusLibrosInterface value: aCartID.
		
	self assert: (aTusLibrosInterface listCart: aCartID) equals: expectedList! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 16:23:21' prior: 51247419!
test20AddingToCartRefreshesTimeout

	self  assertDoing: [ :interface :cartID | 
			interface add: 1 of: testObjectsFactory aBookSoldByPublisher toCart: cartID.
		]
		refreshesTimeoutwithExpectedCartList: {testObjectsFactory aBookSoldByPublisher. testObjectsFactory aBookSoldByPublisher} asBag! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FR 12/3/2020 16:23:21' prior: 51247432!
test21ListingCartRefreshesTimeout

	self  assertDoing: [ :interface :cartID | 
			interface listCart: cartID.
		]
		refreshesTimeoutwithExpectedCartList: testObjectsFactory anEmptyBag! !

!methodRemoval: TusLibrosInterfaceTest #shouldRefreshTimeout:withExpectedList: stamp: 'FR 12/3/2020 16:23:21'!
shouldRefreshTimeout: aBlock withExpectedList: expectedList
	
	| aTusLibrosInterface aCartID aClock |
	
	aClock := Clock new.
		
	aTusLibrosInterface := testObjectsFactory tusLibrosInterfaceWithCorrectCredentialsAndClock: aClock.
	
	aCartID := aTusLibrosInterface createCartForClientWithID: testObjectsFactory aValidClientID 
	  	    		      andPassword: testObjectsFactory aCorrectPassword.
	
	aClock jumpAheadMinutes: 29. 
		
	aBlock value: aTusLibrosInterface value: aCartID.
	
	aClock jumpAheadMinutes: 29. 
	
	aBlock value: aTusLibrosInterface value: aCartID.
		
	self assert: (aTusLibrosInterface listCart: aCartID) equals: expectedList!

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 16:23:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 16:23:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 16:23:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 16:23:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 16:23:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 16:23:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 16:23:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 16:23:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 16:23:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10TransactionIDIsDifferentEachTime stamp: 'FR 12/3/2020 16:23:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 16:23:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 16:23:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 16:23:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 16:23:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 16:23:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 16:23:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 16:23:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/3/2020 16:23:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19CannotCheckoutCartAfterTimeout stamp: 'FR 12/3/2020 16:23:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 16:23:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 16:23:35'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FR 12/3/2020 16:23:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FR 12/3/2020 16:23:40'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FR 12/3/2020 16:23:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FR 12/3/2020 16:23:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FR 12/3/2020 16:23:40'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FR 12/3/2020 16:23:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FR 12/3/2020 16:23:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FR 12/3/2020 16:23:41'!
PASSED!

!testRun: #CartTest #test09CanNotAddNonIntegerNumberOfItems stamp: 'FR 12/3/2020 16:23:41'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FR 12/3/2020 16:23:42'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FR 12/3/2020 16:23:42'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FR 12/3/2020 16:23:42'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FR 12/3/2020 16:23:43'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FR 12/3/2020 16:23:43'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FR 12/3/2020 16:23:43'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberCannotHaveLessThanSixteenDigits stamp: 'FR 12/3/2020 16:23:45'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNameCannotBeEmpty stamp: 'FR 12/3/2020 16:23:45'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberCannotHaveMoreThanSixteenDigits stamp: 'FR 12/3/2020 16:23:45'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithValidInfoIsCorrectlyCreated stamp: 'FR 12/3/2020 16:23:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CannotCreateCartWithInvalidID stamp: 'FR 12/3/2020 16:23:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CannotCreateCartWithIncorrectPassword stamp: 'FR 12/3/2020 16:23:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03SuccessfulyCreatedCartIsEmpty stamp: 'FR 12/3/2020 16:23:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CannotAddToCartWithInvalidCartID stamp: 'FR 12/3/2020 16:23:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05BookIsAddedSuccessfully stamp: 'FR 12/3/2020 16:23:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06MultipleBooksAreAddedSuccessfully stamp: 'FR 12/3/2020 16:23:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CannotListWithInvalidCartID stamp: 'FR 12/3/2020 16:23:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CannotCheckOutWithInvalidCartID stamp: 'FR 12/3/2020 16:23:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09SuccessfulCheckoutIsDoneCorrectly stamp: 'FR 12/3/2020 16:23:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10TransactionIDIsDifferentEachTime stamp: 'FR 12/3/2020 16:23:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CannotListPurchasesForInvalidClientID stamp: 'FR 12/3/2020 16:23:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CannotListPurchasesForClientWithIncorrectPassword stamp: 'FR 12/3/2020 16:23:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13MultiplePurchasesBySameClientAreListedCorrectly stamp: 'FR 12/3/2020 16:23:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14PurchasesByMultipleClientsAreListedCorrectly stamp: 'FR 12/3/2020 16:23:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15PurchaseListForClientThatNeverCreatedCartIsEmpty stamp: 'FR 12/3/2020 16:23:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16PurchaseListOnlyShowsCheckedOutItems stamp: 'FR 12/3/2020 16:23:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17CannotAddToCartAfterTimeout stamp: 'FR 12/3/2020 16:23:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18CannotListCartAfterTimeout stamp: 'FR 12/3/2020 16:23:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19CannotCheckoutCartAfterTimeout stamp: 'FR 12/3/2020 16:23:49'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20AddingToCartRefreshesTimeout stamp: 'FR 12/3/2020 16:23:49'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21ListingCartRefreshesTimeout stamp: 'FR 12/3/2020 16:23:49'!
PASSED!