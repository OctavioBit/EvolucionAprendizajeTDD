----End fileIn of /home/franco/Downloads/ISW1-2020-2C-Recuperatorio-2doParcial.st----!

----QUIT----(15 December 2020 20:28:50) CuisUniversity-4365.image priorSource: 18952639!

----QUIT----(15 December 2020 20:28:54) CuisUniversity-4365.image priorSource: 18893180!

----STARTUP---- (17 December 2020 16:19:59) as /home/franco/Documents/linux64/CuisUniversity-4365.image!


!classRemoval: #PointsPortableObject stamp: 'franco c 12/17/2020 16:24:20'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #NoPointsPortableObject stamp: 'franco c 12/17/2020 16:24:22'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PortableObject stamp: 'franco c 12/17/2020 16:24:23'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #NonPortableObject stamp: 'franco c 12/17/2020 16:24:25'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name weight container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #StageObject stamp: 'franco c 12/17/2020 16:24:26'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #Room stamp: 'franco c 12/17/2020 16:24:27'!
Object subclass: #Room
	instanceVariableNames: 'grid height width numberOfPlayers player'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacterHeading stamp: 'franco c 12/17/2020 16:24:29'!
Object subclass: #PlayableCharacterHeading
	instanceVariableNames: 'cardinalPoint forwardPoint rightHeading leftHeading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacter stamp: 'franco c 12/17/2020 16:24:30'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #Backpack stamp: 'franco c 12/17/2020 16:24:31'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #RoomTest stamp: 'franco c 12/17/2020 16:24:33'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacterTest stamp: 'franco c 12/17/2020 16:24:34'!
TestCase subclass: #PlayableCharacterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #BackpackTest stamp: 'franco c 12/17/2020 16:24:35'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

----End fileIn of /home/franco/Documents/linux64/Parciales/2020-2c/2doParcial/ISW1-2020-2C-2doParcial-SolucionDadaEnClase.st----!

TestCase subclass: #KeyTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #KeyTest category: #'ISW1-2020-2C-2doParcial' stamp: 'franco c 12/17/2020 17:31:16'!
TestCase subclass: #KeyTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Key category: #'ISW1-2020-2C-2doParcial' stamp: 'franco c 12/17/2020 17:34:02'!
Object subclass: #Key
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!KeyTest methodsFor: 'nil' stamp: 'franco c 12/17/2020 17:33:51'!
Test01canGetName
	|key1|
	key1:= Key name: 'myKey'.
	self assert: key1 getName equals: 'myKey'.! !
!KeyTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 17:34:33' prior: 50927011!
Test01canGetName
	|key1|
	key1:= Key name: 'myKey'.
	self assert: (key1 getName) equals: 'myKey'.! !
!KeyTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 17:34:48'!
test01canGetName
	|key1|
	key1:= Key name: 'myKey'.
	self assert: (key1 getName) equals: 'myKey'.! !

!methodRemoval: KeyTest #Test01canGetName stamp: 'franco c 12/17/2020 17:34:50'!
Test01canGetName
	|key1|
	key1:= Key name: 'myKey'.
	self assert: (key1 getName) equals: 'myKey'.!

!testRun: #KeyTest #test01canGetName stamp: 'franco c 12/17/2020 17:34:52'!
ERROR!
!Key class methodsFor: 'instance creation' stamp: 'franco c 12/17/2020 17:35:04'!
name: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeName: aString ! !
!Key class methodsFor: 'instance creation' stamp: 'franco c 12/17/2020 17:35:29' prior: 50927038!
name: aName 
	
	^self new initializeName: aName ! !
!Key methodsFor: 'nil' stamp: 'franco c 12/17/2020 17:35:53'!
initializeName: aName
	name:= aName.! !
!Key methodsFor: 'nil' stamp: 'franco c 12/17/2020 17:36:13'!
getName
	^name! !

!testRun: #KeyTest #test01canGetName stamp: 'franco c 12/17/2020 17:36:16'!
PASSED!

TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #DoorTest category: #'ISW1-2020-2C-2doParcial' stamp: 'franco c 12/17/2020 17:36:27'!
TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!DoorTest methodsFor: 'nil' stamp: 'franco c 12/17/2020 17:36:36'!
test01
	! !

!classDefinition: #Door category: #'ISW1-2020-2C-2doParcial' stamp: 'franco c 12/17/2020 17:41:20'!
Object subclass: #Door
	instanceVariableNames: 'state room1 room2 pos1 pos2 keyname'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 17:40:49'!
test01keyNameMustBeInteger
	self
	should:[Door withKeyName: 2]
	raise:Error
	withMessageText: Door keyNameMustBeStringError
	! !

!testRun: #DoorTest #test01keyNameMustBeInteger stamp: 'franco c 12/17/2020 17:41:28'!
ERROR!
!Door class methodsFor: 'nil' stamp: 'franco c 12/17/2020 17:42:16'!
withKeyName: aName
	aName isString ifFalse:[ self signal]! !
!Door class methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 17:42:40' prior: 50927094!
withKeyName: aName
	aName isString ifFalse:[^self keyNameMustBeStringError]! !
!Door class methodsFor: 'nil' stamp: 'franco c 12/17/2020 17:42:57'!
keyNameMustBeStringError
	^'key name can only be String'! !

!methodRemoval: DoorTest #test01 stamp: 'franco c 12/17/2020 17:43:05'!
test01
	!

!testRun: #DoorTest #test01keyNameMustBeInteger stamp: 'franco c 12/17/2020 17:43:12'!
FAILURE!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 17:43:43'!
test01keyNameMustBeString
	self
	should:[Door withKeyName: 2]
	raise:Error
	withMessageText: Door keyNameMustBeStringError
	! !

!methodRemoval: DoorTest #test01keyNameMustBeInteger stamp: 'franco c 12/17/2020 17:43:45'!
test01keyNameMustBeInteger
	self
	should:[Door withKeyName: 2]
	raise:Error
	withMessageText: Door keyNameMustBeStringError
	!
!Door class methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 17:44:42' prior: 50927100!
withKeyName: aName
	aName isString ifFalse:[^self error keyNameMustBeStringError]! !

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 17:44:45'!
FAILURE!

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 17:44:45'!
FAILURE!
!Door class methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 17:45:18' prior: 50927131!
withKeyName: aName
	aName isString ifFalse:[^self error: self keyNameMustBeStringError]! !

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 17:45:23'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 17:45:45'!
test02knowsKeyNameCorrectly
	self
	should:[Door withKeyName: 2]
	raise:Error
	withMessageText: Door keyNameMustBeStringError
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 17:46:34' prior: 50927152!
test02knowsKeyNameCorrectly
	|door1|
	door1:= Door withKeyName: 'key1'.
	self assert: door1 getKeyName equals: 'key1'.
	! !
!Door class methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 17:47:06' prior: 50927143!
withKeyName: aName
	aName isString ifFalse:[^self error: self keyNameMustBeStringError].
	^self new initwithKey: aName.! !
!Door methodsFor: 'nil' stamp: 'franco c 12/17/2020 17:47:26'!
initwithKey: aKeyName
	keyname:= aKeyName! !
!Door methodsFor: 'nil' stamp: 'franco c 12/17/2020 17:47:50'!
getKeyName
	^keyname ! !

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 17:47:57'!
PASSED!

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 17:47:57'!
PASSED!

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 17:47:57'!
PASSED!
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 17:48:17' prior: 50927174!
initwithKey: aKeyName
	keyname:= aKeyName
	! !
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 17:48:31' prior: 50927191!
initwithKey: aKeyName
	keyname:= aKeyName.
	state:= 'closed'.
	! !
!DoorTest methodsFor: 'nil' stamp: 'franco c 12/17/2020 17:50:15'!
test03isInitializedWithTwoRooms

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 17:53:14' prior: 50927201!
test03isInitializedWithTwoRooms
	|room1|
	room1:=Room ofWidth: 10 andHeight: 10.
self
	should:[Door withKeyname: 'key1' room1: room1 pos1: 1@1 room2: 5 pos2: 2@2]
	raise:Error
	withMessageText:[Door oneRoomParameterisInvaliderror]
	! !
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 17:54:02' prior: 50927196!
initwithKey: aKeyName
	keyname:= aKeyName.
	state:= 'closed'.
	! !
!Door class methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 17:57:14'!
withKeyname: aName room1: aRoom1 pos1: aPos1 room2: aRoom2 pos2: aPos2
	(aRoom1 class = Room) ifFalse:[^ self error].
	
	! !
!Door class methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 17:57:25' prior: 50927222!
withKeyname: aName room1: aRoom1 pos1: aPos1 room2: aRoom2 pos2: aPos2
	(aRoom1 class = Room) ifFalse:[^ self error: self ].
	
	! !
!Door class methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 17:58:12' prior: 50927230!
withKeyname: aName room1: aRoom1 pos1: aPos1 room2: aRoom2 pos2: aPos2
	((aRoom1 class = Room) & (aRoom2 class = Room)) ifFalse:[^ self error: self oneRoomParameterisInvaliderror].
	
	! !
!Door class methodsFor: 'nil' stamp: 'franco c 12/17/2020 17:58:38'!
oneRoomParameterisInvaliderror
	^'Both rooms parameter must be of object Room'! !

!testRun: #DoorTest #test03isInitializedWithTwoRooms stamp: 'franco c 12/17/2020 17:58:51'!
PASSED!

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 17:58:51'!
PASSED!

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 17:58:51'!
PASSED!

!testRun: #DoorTest #test03isInitializedWithTwoRooms stamp: 'franco c 12/17/2020 17:58:51'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 17:59:17'!
test03room1mustbeRoom
	|room1|
	room1:=Room ofWidth: 10 andHeight: 10.
self
	should:[Door withKeyname: 'key1' room1: room1 pos1: 1@1 room2: 5 pos2: 2@2]
	raise:Error
	withMessageText:[Door oneRoomParameterisInvaliderror]
	! !

!methodRemoval: DoorTest #test03isInitializedWithTwoRooms stamp: 'franco c 12/17/2020 17:59:22'!
test03isInitializedWithTwoRooms
	|room1|
	room1:=Room ofWidth: 10 andHeight: 10.
self
	should:[Door withKeyname: 'key1' room1: room1 pos1: 1@1 room2: 5 pos2: 2@2]
	raise:Error
	withMessageText:[Door oneRoomParameterisInvaliderror]
	!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 17:59:50'!
test04room2mustbeRoom
	|room2|
	room2:=Room ofWidth: 10 andHeight: 10.
self
	should:[Door withKeyname: 'key1' room1: room2 pos1: 1@1 room2: 5 pos2: 2@2]
	raise:Error
	withMessageText:[Door oneRoomParameterisInvaliderror]
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:00:00'!
test03room2mustbeRoom
	|room1|
	room1:=Room ofWidth: 10 andHeight: 10.
self
	should:[Door withKeyname: 'key1' room1: room1 pos1: 1@1 room2: 5 pos2: 2@2]
	raise:Error
	withMessageText:[Door oneRoomParameterisInvaliderror]
	! !

!methodRemoval: DoorTest #test03room1mustbeRoom stamp: 'franco c 12/17/2020 18:00:03'!
test03room1mustbeRoom
	|room1|
	room1:=Room ofWidth: 10 andHeight: 10.
self
	should:[Door withKeyname: 'key1' room1: room1 pos1: 1@1 room2: 5 pos2: 2@2]
	raise:Error
	withMessageText:[Door oneRoomParameterisInvaliderror]
	!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:00:11'!
test04room1mustbeRoom
	|room2|
	room2:=Room ofWidth: 10 andHeight: 10.
self
	should:[Door withKeyname: 'key1' room1: room2 pos1: 1@1 room2: 5 pos2: 2@2]
	raise:Error
	withMessageText:[Door oneRoomParameterisInvaliderror]
	! !

!methodRemoval: DoorTest #test04room2mustbeRoom stamp: 'franco c 12/17/2020 18:00:13'!
test04room2mustbeRoom
	|room2|
	room2:=Room ofWidth: 10 andHeight: 10.
self
	should:[Door withKeyname: 'key1' room1: room2 pos1: 1@1 room2: 5 pos2: 2@2]
	raise:Error
	withMessageText:[Door oneRoomParameterisInvaliderror]
	!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:00:27' prior: 50927316!
test04room1mustbeRoom
	|room2|
	room2:=Room ofWidth: 10 andHeight: 10.
self
	should:[Door withKeyname: 'key1' room1: room2 pos1: 1@1 room2:  room2 pos2: 2@2]
	raise:Error
	withMessageText:[Door oneRoomParameterisInvaliderror]
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:00:31' prior: 50927336!
test04room1mustbeRoom
	|room2|
	room2:=Room ofWidth: 10 andHeight: 10.
self
	should:[Door withKeyname: 'key1' room1: 5 pos1: 1@1 room2:  room2 pos2: 2@2]
	raise:Error
	withMessageText:[Door oneRoomParameterisInvaliderror]
	! !

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 18:00:33'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:01:13'!
test05RoomatinitializedPositionHasDoor
	|room2|
	room2:=Room ofWidth: 10 andHeight: 10.
self
	should:[Door withKeyname: 'key1' room1: 5 pos1: 1@1 room2:  room2 pos2: 2@2]
	raise:Error
	withMessageText:[Door oneRoomParameterisInvaliderror]
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:01:43' prior: 50927360!
test05RoomatinitializedPositionHasDoor
	|room1 room2|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
self
	should:[Door withKeyname: 'key1' room1: 5 pos1: 1@1 room2:  room2 pos2: 2@2]
	raise:Error
	withMessageText:[Door oneRoomParameterisInvaliderror]
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:02:08' prior: 50927371!
test05RoomatinitializedPositionHasDoor
	|room1 room2 door|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	door:= Door 
	! !
!Door class methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:02:25' prior: 50927238!
withKeyname: aName room1: aRoom1 pos1: aPos1 room2: aRoom2 pos2: aPos2
	((aRoom1 class = Room) & (aRoom2 class = Room)) ifFalse:[^ self error: self oneRoomParameterisInvaliderror].
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:03:09' prior: 50927384!
test05RoomatinitializedPositionHasDoor
	|room1 room2 door|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	door:= Door withKeyname: 'key1' room1: room1 pos1: 5@5 room2: room2 pos2: 5@5

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:04:00' prior: 50927402!
test05RoomatinitializedPositionHasDoor
	|room1 room2 door|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	door:= Door withKeyname: 'key1' room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	self assert: room1 at: 5@5 equals: door.
	self assert: room2 at: 5@5 equals: door.

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:04:18' prior: 50927413!
test05RoomatinitializedPositionHasDoor
	|room1 room2 door|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	door:= Door withKeyname: 'key1' room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	self assert: (room1 at: 5@5) equals: door.
	self assert: (room2 at: 5@5) equals: door.

	! !

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 18:04:22'!
ERROR!
!Door class methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:06:06' prior: 50927393!
withKeyname: aName room1: aRoom1 pos1: aPos1 room2: aRoom2 pos2: aPos2
	((aRoom1 class = Room) & (aRoom2 class = Room)) ifFalse:[^ self error: self oneRoomParameterisInvaliderror].
	^self new initwithKey: aName room1: aRoom1 pos1: aPos1 room2: aRoom2 pos2:aPos2.
	
	! !
!Door class methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:06:21' prior: 50927443!
withKeyname: aName room1: aRoom1 pos1: aPos1 room2: aRoom2 pos2: aPos2
	aName isString ifFalse:[^self error: self keyNameMustBeStringError].
	((aRoom1 class = Room) & (aRoom2 class = Room)) ifFalse:[^ self error: self oneRoomParameterisInvaliderror].
	^self new initwithKey: aName room1: aRoom1 pos1: aPos1 room2: aRoom2 pos2:aPos2.
	
	! !
!Door methodsFor: 'nil' stamp: 'franco c 12/17/2020 18:06:33'!
initwithKey: aName room1: aRoom1 pos1: aPos1 room2: aRoom2 pos2:aPos2
	! !
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:07:27' prior: 50927468!
initwithKey: aName room1: aRoom1 pos1: aPos1 room2: aRoom2 pos2:aPos2
	keyname:= aName.
	state:= 'closed'.
	room1 at: pos1 put: self.
	room2 at:pos2 put: self.
	! !

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 18:07:34'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:09:53' prior: 50927474!
initwithKey: aName room1: aRoom1 pos1: aPos1 room2: aRoom2 pos2:aPos2
	keyname:= aName.
	state:= 'closed'.
	aRoom1 at: pos1 put: self.
	aRoom2 at:pos2 put: self.
	! !
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:10:03' prior: 50927486!
initwithKey: aName room1: aRoom1 pos1: aPos1 room2: aRoom2 pos2:aPos2
	keyname:= aName.
	state:= 'closed'.
	aRoom1 at: aPos1 put: self.
	aRoom2 at: aPos2 put: self.
	! !

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 18:10:08'!
PASSED!
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:10:26' prior: 50927495!
initwithKey: aName room1: aRoom1 pos1: aPos1 room2: aRoom2 pos2:aPos2
	keyname:= aName.
	state:= 'closed'.
	aRoom1 at: aPos1 put: self.
	aRoom2 at: aPos2 put: self.
	room1:= aRoom1.
	room2:= aRoom2.
	! !
!Door methodsFor: 'nil' stamp: 'franco c 12/17/2020 18:16:56'!
assertCanAddTo: aBackPack
	^self error: self signalCantBeTaken.! !
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:17:19' prior: 50927516!
assertCanAddTo: aBackPack
	^self signalCantBeTaken.! !
!Door methodsFor: 'nil' stamp: 'franco c 12/17/2020 18:17:48'!
signalCantBeTaken
	^self error: self class cantBeTakenErrorDescription.! !
!Door class methodsFor: 'nil' stamp: 'franco c 12/17/2020 18:18:04'!
cantBeTakenErrorDescription
	^'Door cant be taken'! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:18:38'!
test06DoorcantBeTaken

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:19:04' prior: 50927536!
test06DoorcantBeTaken
	|room1 room2 door|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	door:= Door withKeyname: 'key1' room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	self assert: (room1 at: 5@5) equals: door.
	self assert: (room2 at: 5@5) equals: door.
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:20:59' prior: 50927540!
test06DoorcantBeTaken
	|room1 room2 door player|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	door:= Door withKeyname: 'key1' room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	self assert: (room1 at: 5@5) equals: door.
	self assert: (room2 at: 5@5) equals: door.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 5@4 heading: #North in: room1.
	self
	should:[player take]
	raise:Error
	withMessageText: Door cantBeTakenErrorDescription .
	
	! !

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 18:21:00'!
ERROR!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:21:50' prior: 50927553!
test06DoorcantBeTaken
	|room1 room2 door player defaultBackpack|
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100 .
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	door:= Door withKeyname: 'key1' room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	self assert: (room1 at: 5@5) equals: door.
	self assert: (room2 at: 5@5) equals: door.
	
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@4 heading: #North in: room1.
	self
	should:[player take]
	raise:Error
	withMessageText: Door cantBeTakenErrorDescription .
	
	! !

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 18:21:51'!
FAILURE!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 18:22:33'!
FAILURE!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 18:22:33'!
FAILURE!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:23:26' prior: 50927575!
test06DoorcantBeTaken
	|room1 room2 door player defaultBackpack|
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100 .
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	door:= Door withKeyname: 'key1' room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	
	
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@4 heading: #North in: room1.
	self
	should:[player take]
	raise:Error
	withMessageText: Door cantBeTakenErrorDescription .
	
	! !
!Door methodsFor: 'nil' stamp: 'franco c 12/17/2020 18:23:56'!
takenBy: aPlayer
	^self signalCantBeTaken .! !

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 18:24:00'!
PASSED!
!NonPortableObject methodsFor: 'initialization' stamp: 'franco c 12/17/2020 18:24:46' prior: 50926797!
initializeNamed: aName withAll: aCollectionOfStageObjects 
	
	name := aName.
	stageObjects := aCollectionOfStageObjects asOrderedCollection.! !
!NonPortableObject methodsFor: 'initialization' stamp: 'franco c 12/17/2020 18:25:59' prior: 50927632!
initializeNamed: aName withAll: aCollectionOfStageObjects 
	
	name := aName.
	aCollectionOfStageObjects do: [:a | a assertNotDoor]. 
	stageObjects := aCollectionOfStageObjects asOrderedCollection.! !
!StageObject methodsFor: 'nil' stamp: 'franco c 12/17/2020 18:26:11'!
assertNotDoor
	! !
!Door methodsFor: 'nil' stamp: 'franco c 12/17/2020 18:26:47'!
assertNotDoor
 	^self signalDoorCantbeputinside! !
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:26:50' prior: 50927652!
assertNotDoor
 	^self signalDoorCantbeputinside.! !
!Door methodsFor: 'nil' stamp: 'franco c 12/17/2020 18:27:19'!
signalDoorCantbeputinside
	^self error: self class doorcantbeaddederror.! !
!Door class methodsFor: 'nil' stamp: 'franco c 12/17/2020 18:27:43'!
doorcantbeaddederror
	^'cant add Door to non portable object'! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:29:13'!
test07DoorcantBeputInsideNonPOrtableObject
	|door Object|
	Object:= NonPortableObject.
	
	self
	should:[Object take]
	raise:Error
	withMessageText: Door cantBeTakenErrorDescription .
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:30:13' prior: 50927671!
test07DoorcantBeputInsideNonPOrtableObject
	|door Object|
	Object:= NonPortableObject.
	
	self
	should:[Object named: 'object' withAll: OrderedCollection with: door]
	raise:Error
	withMessageText: Door cantBeTakenErrorDescription .
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:31:25' prior: 50927681!
test07DoorcantBeputInsideNonPOrtableObject
	|door Object room1 room2 |
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	door:= Door withKeyname: 'key1' room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	
	
	self
	should:[Object named: 'object' withAll: (OrderedCollection with: door)]
	raise:Error
	withMessageText: Door cantBeTakenErrorDescription .
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:31:56' prior: 50927692!
test07DoorcantBeputInsideNonPOrtableObject
	|door Object room1 room2 |
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	door:= Door withKeyname: 'key1' room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	
	
	self
	should:[Object named: 'object' withAll: (OrderedCollection with: door)]
	raise:Error
	withMessageText: Door doorcantbeaddederror .
	
	! !

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 18:32:01'!
FAILURE!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:32:56' prior: 50927708!
test07DoorcantBeputInsideNonPOrtableObject
	|door room1 room2 |
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	door:= Door withKeyname: 'key1' room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	
	
	self
	should:[NonPortableObject named: 'object' withAll: (OrderedCollection with: door)]
	raise:Error
	withMessageText: Door doorcantbeaddederror .
	
	! !

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 18:33:01'!
PASSED!

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 18:33:01'!
PASSED!

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 18:33:01'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 18:33:01'!
PASSED!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 18:33:01'!
PASSED!

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 18:33:01'!
PASSED!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 18:33:01'!
PASSED!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 18:33:01'!
PASSED!

----End fileIn of /home/franco/Downloads/ISW1-2020-2C-Recuperatorio-2doParcial(1).st----!

!testRun: #KeyTest #test01canGetName stamp: 'franco c 12/17/2020 18:41:34'!
PASSED!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 18:41:40'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 18:41:43'!
PASSED!

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 18:41:46'!
PASSED!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 18:41:49'!
PASSED!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 18:41:52'!
FAILURE!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 18:41:52'!
FAILURE!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 18:42:07'!
PASSED!
!StageObject methodsFor: 'nil' stamp: 'franco c 12/17/2020 18:42:43' prior: 50927649!
assertNotDoor! !

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 18:42:49'!
FAILURE!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 18:42:49'!
FAILURE!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'franco c 12/17/2020 18:44:30' prior: 50929133!
named: aName withAll: aCollectionOfStageObjects 
	
	aCollectionOfStageObjects do: [:a | a assertNotDoor].  
	^self new initializeNamed: aName withAll: aCollectionOfStageObjects ! !

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 18:44:37'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'franco c 12/17/2020 18:44:58'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'franco c 12/17/2020 18:44:58'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'franco c 12/17/2020 18:44:58'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'franco c 12/17/2020 18:44:58'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'franco c 12/17/2020 18:44:58'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'franco c 12/17/2020 18:44:58'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'franco c 12/17/2020 18:44:58'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'franco c 12/17/2020 18:44:58'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'franco c 12/17/2020 18:44:58'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'franco c 12/17/2020 18:44:58'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'franco c 12/17/2020 18:44:58'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'franco c 12/17/2020 18:44:58'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'franco c 12/17/2020 18:44:58'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'franco c 12/17/2020 18:44:58'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'franco c 12/17/2020 18:44:58'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #KeyTest #test01canGetName stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'franco c 12/17/2020 18:45:06'!
PASSED!
!Room methodsFor: 'contents' stamp: 'franco c 12/17/2020 18:47:47' prior: 50928933!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove |
	
	toMove := self at: aSourcePosition.

	self at: aTargetPosition put: toMove.
	contents removeKey: aSourcePosition.
	! !
!Room methodsFor: 'contents' stamp: 'franco c 12/17/2020 18:51:54' prior: 50929598!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove |
	
	toMove := self at: aSourcePosition.
	(contents includesKey: aTargetPosition) ifTrue:[ ((self at: aTargetPosition) class = Door) ifTrue:[ ( (self at: aTargetPosition) isOpen) ifTrue:[ toMove moveForward ]]].
	self at: aTargetPosition put: toMove.
	contents removeKey: aSourcePosition.
	! !
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:52:52'!
isOpen
	state='closed' ifTrue:[^false] ifFalse:[^true].! !
!Room methodsFor: 'contents' stamp: 'franco c 12/17/2020 18:55:50' prior: 50929607!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove |
	
	toMove := self at: aSourcePosition.
	(contents includesKey: aTargetPosition) ifTrue:[ ((self at: aTargetPosition) class = Door) ifTrue:[ ( (self at: aTargetPosition) isOpen) ifTrue:[ toMove moveForward ] ifFalse:[^(self at: aTargetPosition) signalClosed]]].
	self at: aTargetPosition put: toMove.
	contents removeKey: aSourcePosition.
! !
!Door methodsFor: 'nil' stamp: 'franco c 12/17/2020 18:56:24'!
signalClosed
	^self error: self class doorisClosedError.! !
!Door class methodsFor: 'nil' stamp: 'franco c 12/17/2020 18:56:50'!
doorisClosedError
	^'cant move through open door'! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 18:58:07'!
test08cantPassIfDoorIsClosed
	|room1 room2 door player defaultBackpack|
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100 .
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	door:= Door withKeyname: 'key1' room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	
	
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@4 heading: #North in: room1.
	self
	should:[player moveForward ]
	raise:Error
	withMessageText: Door doorisClosedError .
	
	! !

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 18:58:12'!
PASSED!

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 18:58:12'!
PASSED!

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 18:58:12'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 18:58:12'!
PASSED!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 18:58:12'!
PASSED!

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 18:58:12'!
PASSED!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 18:58:12'!
PASSED!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 18:58:12'!
PASSED!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 18:58:12'!
PASSED!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'franco c 12/17/2020 19:01:05'!
openWith: aKey
	
	
	! !

PortableObject subclass: #Key
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

NoPointsPortableObject subclass: #Key
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

Object subclass: #Key
	instanceVariableNames: 'keyname'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Key category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'franco c 12/17/2020 19:02:40'!
Object subclass: #Key
	instanceVariableNames: 'keyname'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Key methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:02:54' prior: 50927054!
getName
	^keyname! !
!Key methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:03:00' prior: 50927050!
initializeName: aName
	keyname:= aName.! !

!testRun: #KeyTest #test01canGetName stamp: 'franco c 12/17/2020 19:03:03'!
PASSED!

NoPointsPortableObject subclass: #Key
	instanceVariableNames: 'keyname'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Key category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'franco c 12/17/2020 19:03:24'!
NoPointsPortableObject subclass: #Key
	instanceVariableNames: 'keyname'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'franco c 12/17/2020 19:06:35'!
openDoor
	
	
	! !

!methodRemoval: PlayableCharacter #openWith: stamp: 'franco c 12/17/2020 19:06:47'!
openWith: aKey
	
	
	!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'franco c 12/17/2020 19:08:09' prior: 50929751!
openDoor
	| toOpen |
	
	toOpen := room at: self forwardPosition.
	(toOpen class) = Door ifTrue:[].
	
	
	! !
!Door class methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:13:09' prior: 50927455!
withKeyname: akey room1: aRoom1 pos1: aPos1 room2: aRoom2 pos2: aPos2
	(akey class) = Key ifFalse:[^self error: self keyNameMustBeStringError].
	((aRoom1 class = Room) & (aRoom2 class = Room)) ifFalse:[^ self error: self oneRoomParameterisInvaliderror].
	^self new initwithKey: akey room1: aRoom1 pos1: aPos1 room2: aRoom2 pos2:aPos2.
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:14:35' prior: 50927160!
test02knowsKeyNameCorrectly
	|door1|
	door1:= Door withKeyName: 'key1'.
	self assert: door1 getKeyName equals: 'key1'.
	! !

!methodRemoval: Key class #name: stamp: 'franco c 12/17/2020 19:14:56'!
name: aName 
	
	^self new initializeName: aName !

!methodRemoval: Key #initializeName: stamp: 'franco c 12/17/2020 19:15:03'!
initializeName: aName
	keyname:= aName.!

!methodRemoval: Key #getName stamp: 'franco c 12/17/2020 19:15:09'!
getName
	^keyname!

!classRemoval: #KeyTest stamp: 'franco c 12/17/2020 19:15:24'!
TestCase subclass: #KeyTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 19:15:41'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:16:17' prior: 50929780!
test02knowsKeyNameCorrectly
	|door1 key1|
	key1 := Key new.
	door1:= Door withKeyName: 'key1'.
	self assert: door1 getKeyName equals: 'key1'.
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:16:33' prior: 50929807!
test02knowsKeyNameCorrectly
	|door1 key1|
	key1 := Key new.
	door1:= Door withKeyName: key1.
	self assert: door1 getKeyName equals: key1.
	! !

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 19:16:34'!
ERROR!
!Door class methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:17:20' prior: 50927168!
withKeyName: aName
	(aName class) = Key ifFalse:[^self error: self keyNameMustBeStringError].
	^self new initwithKey: aName.! !

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 19:17:27'!
PASSED!

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 19:17:27'!
PASSED!

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 19:17:27'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 19:17:27'!
FAILURE!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 19:17:27'!
FAILURE!

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 19:17:27'!
ERROR!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 19:17:27'!
ERROR!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 19:17:27'!
ERROR!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 19:17:27'!
ERROR!

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 19:17:35'!
PASSED!

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 19:17:40'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:17:59' prior: 50927296!
test03room2mustbeRoom
	|room1 |
	room1:=Room ofWidth: 10 andHeight: 10.
self
	should:[Door withKeyname:Key new room1: room1 pos1: 1@1 room2: 5 pos2: 2@2]
	raise:Error
	withMessageText:[Door oneRoomParameterisInvaliderror]
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:18:08' prior: 50927347!
test04room1mustbeRoom
	|room2|
	room2:=Room ofWidth: 10 andHeight: 10.
self
	should:[Door withKeyname: Key new room1: 5 pos1: 1@1 room2:  room2 pos2: 2@2]
	raise:Error
	withMessageText:[Door oneRoomParameterisInvaliderror]
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:18:15' prior: 50927426!
test05RoomatinitializedPositionHasDoor
	|room1 room2 door|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	door:= Door withKeyname: Key new room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	self assert: (room1 at: 5@5) equals: door.
	self assert: (room2 at: 5@5) equals: door.

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:18:23' prior: 50927606!
test06DoorcantBeTaken
	|room1 room2 door player defaultBackpack|
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100 .
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	door:= Door withKeyname: Key new room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	
	
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@4 heading: #North in: room1.
	self
	should:[player take]
	raise:Error
	withMessageText: Door cantBeTakenErrorDescription .
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:18:33' prior: 50927727!
test07DoorcantBeputInsideNonPOrtableObject
	|door room1 room2 |
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	door:= Door withKeyname: Key new room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	
	
	self
	should:[NonPortableObject named: 'object' withAll: (OrderedCollection with: door)]
	raise:Error
	withMessageText: Door doorcantbeaddederror .
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:18:45' prior: 50929651!
test08cantPassIfDoorIsClosed
	|room1 room2 door player defaultBackpack|
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100 .
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	door:= Door withKeyname: Key new room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	
	
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@4 heading: #North in: room1.
	self
	should:[player moveForward ]
	raise:Error
	withMessageText: Door doorisClosedError .
	
	! !

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 19:18:50'!
PASSED!

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 19:18:50'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 19:18:50'!
PASSED!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 19:18:50'!
PASSED!

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 19:18:50'!
PASSED!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 19:18:50'!
PASSED!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 19:18:50'!
PASSED!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 19:18:50'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:19:34'!
test0oly1keyOpens
	|door1 key1|
	key1 := Key new.
	door1:= Door withKeyName: key1.
	self assert: door1 getKeyName equals: key1.
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:19:50' prior: 50929980!
test0oly1keyOpens
	|door1 key1 key2|
	key1 := Key new.
	key2:= Key new.
	door1:= Door withKeyName: key1.
	self assert: door1 getKeyName equals: key1.
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:20:11' prior: 50929988!
test0oly1keyOpens
	|door1 key1 key2|
	key1 := Key new.
	key2:= Key new.
	door1:= Door withKeyName: key2.
	self assert: door1 getKeyName equals: key1.
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:20:29' prior: 50929996!
test0oly1keyOpens
	|door1 key1 key2|
	key1 := Key new.
	key2:= Key new.
	door1:= Door withKeyName: key2.
	self assert: (door1 getKeyName) == key1.
	! !

!testRun: #DoorTest #test0oly1keyOpens stamp: 'franco c 12/17/2020 19:20:33'!
FAILURE!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:20:38' prior: 50930004!
test0oly1keyOpens
	|door1 key1 key2|
	key1 := Key new.
	key2:= Key new.
	door1:= Door withKeyName: key2.
	self assert: (door1 getKeyName) == key2.
	! !

!testRun: #DoorTest #test0oly1keyOpens stamp: 'franco c 12/17/2020 19:20:41'!
PASSED!

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 19:20:41'!
PASSED!

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 19:20:41'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 19:20:41'!
PASSED!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 19:20:41'!
PASSED!

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 19:20:41'!
PASSED!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 19:20:41'!
PASSED!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 19:20:41'!
PASSED!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 19:20:41'!
PASSED!

!testRun: #DoorTest #test0oly1keyOpens stamp: 'franco c 12/17/2020 19:20:41'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:21:08' prior: 50930015!
test0oly1keyOpens
	|door1 key1 key2|
	key1 := Key new.
	key2:= Key new.
	door1:= Door withKeyName: key2.
	self assert: (door1 getKeyName) == key2.
	self deny: (door1 getKeyName ) == key1.
	! !

!testRun: #DoorTest #test0oly1keyOpens stamp: 'franco c 12/17/2020 19:21:10'!
PASSED!

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 19:21:10'!
PASSED!

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 19:21:10'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 19:21:10'!
PASSED!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 19:21:10'!
PASSED!

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 19:21:10'!
PASSED!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 19:21:10'!
PASSED!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 19:21:10'!
PASSED!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 19:21:10'!
PASSED!

!testRun: #DoorTest #test0oly1keyOpens stamp: 'franco c 12/17/2020 19:21:10'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:21:14' prior: 50930053!
test0oly1keyOpens
	|door1 key1 key2|
	key1 := Key new.
	key2:= Key new.
	door1:= Door withKeyName: key2.
	self assert: (door1 getKeyName) == key2.
	self deny: (door1 getKeyName ) = key1.
	! !

!testRun: #DoorTest #test0oly1keyOpens stamp: 'franco c 12/17/2020 19:21:14'!
PASSED!

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 19:21:14'!
PASSED!

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 19:21:14'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 19:21:14'!
PASSED!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 19:21:14'!
PASSED!

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 19:21:14'!
PASSED!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 19:21:14'!
PASSED!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 19:21:14'!
PASSED!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 19:21:14'!
PASSED!

!testRun: #DoorTest #test0oly1keyOpens stamp: 'franco c 12/17/2020 19:21:14'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:21:19' prior: 50930093!
test0oly1keyOpens
	|door1 key1 key2|
	key1 := Key new.
	key2:= Key new.
	door1:= Door withKeyName: key2.
	self assert: (door1 getKeyName) = key2.
	self deny: (door1 getKeyName ) = key1.
	! !

!testRun: #DoorTest #test0oly1keyOpens stamp: 'franco c 12/17/2020 19:21:20'!
PASSED!

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 19:21:20'!
PASSED!

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 19:21:20'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 19:21:20'!
PASSED!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 19:21:20'!
PASSED!

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 19:21:20'!
PASSED!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 19:21:20'!
PASSED!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 19:21:20'!
PASSED!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 19:21:20'!
PASSED!

!testRun: #DoorTest #test0oly1keyOpens stamp: 'franco c 12/17/2020 19:21:20'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:21:33'!
test0nly1keyOpens
	|door1 key1 key2|
	key1 := Key new.
	key2:= Key new.
	door1:= Door withKeyName: key2.
	self assert: (door1 getKeyName) = key2.
	self deny: (door1 getKeyName ) = key1.
	! !

!testRun: #DoorTest #test0nly1keyOpens stamp: 'franco c 12/17/2020 19:21:34'!
PASSED!

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 19:21:34'!
PASSED!

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 19:21:34'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 19:21:34'!
PASSED!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 19:21:34'!
PASSED!

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 19:21:34'!
PASSED!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 19:21:34'!
PASSED!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 19:21:34'!
PASSED!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 19:21:34'!
PASSED!

!testRun: #DoorTest #test0nly1keyOpens stamp: 'franco c 12/17/2020 19:21:34'!
PASSED!

!testRun: #DoorTest #test0oly1keyOpens stamp: 'franco c 12/17/2020 19:21:34'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:21:44'!
test0only1keyOpens
	|door1 key1 key2|
	key1 := Key new.
	key2:= Key new.
	door1:= Door withKeyName: key2.
	self assert: (door1 getKeyName) = key2.
	self deny: (door1 getKeyName ) = key1.
	! !

!methodRemoval: DoorTest #test0nly1keyOpens stamp: 'franco c 12/17/2020 19:21:52'!
test0nly1keyOpens
	|door1 key1 key2|
	key1 := Key new.
	key2:= Key new.
	door1:= Door withKeyName: key2.
	self assert: (door1 getKeyName) = key2.
	self deny: (door1 getKeyName ) = key1.
	!

!methodRemoval: DoorTest #test0oly1keyOpens stamp: 'franco c 12/17/2020 19:21:57'!
test0oly1keyOpens
	|door1 key1 key2|
	key1 := Key new.
	key2:= Key new.
	door1:= Door withKeyName: key2.
	self assert: (door1 getKeyName) = key2.
	self deny: (door1 getKeyName ) = key1.
	!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'franco c 12/17/2020 19:24:00' prior: 50929759!
openDoor
	| toOpen |
	
	toOpen := room at: self forwardPosition.
	(toOpen class) = Door ifTrue:[(backpack includes: (toOpen getKeyName)) ifTrue:[toOpen open].]
	
	
	! !
!Door methodsFor: 'nil' stamp: 'franco c 12/17/2020 19:24:50'!
getState
	^state! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:26:04'!
test09CanOpenDoorifhasKey
	|door room1 room2 |
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	door:= Door withKeyname: Key new room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	
	
	self
	should:[NonPortableObject named: 'object' withAll: (OrderedCollection with: door)]
	raise:Error
	withMessageText: Door doorcantbeaddederror .
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:26:37' prior: 50930252!
test09CanOpenDoorifhasKey
	|door room1 room2 |
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	door:= Door withKeyname: Key new room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	
	
	self
	should:[NonPortableObject named: 'object' withAll: (OrderedCollection with: door)]
	raise:Error
	withMessageText: Door doorcantbeaddederror .
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:27:00' prior: 50930267!
test09CanOpenDoorifhasKey
	|door room1 room2 defaultBackpack|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	door:= Door withKeyname: Key new room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100 .
	
	
	self
	should:[NonPortableObject named: 'object' withAll: (OrderedCollection with: door)]
	raise:Error
	withMessageText: Door doorcantbeaddederror .
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:27:30' prior: 50930282!
test09CanOpenDoorifhasKey
	|door room1 room2 defaultBackpack player|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	door:= Door withKeyname: Key new room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100 .
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	
	
	self
	should:[NonPortableObject named: 'object' withAll: (OrderedCollection with: door)]
	raise:Error
	withMessageText: Door doorcantbeaddederror .
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:29:01' prior: 50930300!
test09CanOpenDoorifhasKey
	|door room1 room2 defaultBackpack player llave|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	llave:= Key new.
	door:= Door withKeyname: llave room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100.
	room1 at: 5@4 put: llave.
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	player take.
	player moveForward .
	player open.
	
	
	
	
	! !
!Door methodsFor: 'nil' stamp: 'franco c 12/17/2020 19:29:33'!
open
	state:= 'open'! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:30:28' prior: 50930321!
test09CanOpenDoorifhasKey
	|door room1 room2 defaultBackpack player llave|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	llave:= Key new.
	door:= Door withKeyname: llave room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100.
	room1 at: 5@4 put: llave.
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	player take.
	player moveForward .
	player open.
	self assert: door getState  equals: 'open'.
	
	
	
	
	! !

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 19:30:30'!
ERROR!

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 19:31:04'!
ERROR!

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 19:32:18'!
ERROR!

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 19:33:48'!
ERROR!
!Key class methodsFor: 'nil' stamp: 'franco c 12/17/2020 19:34:42' overrides: 16783533!
new
	^self new init! !
!Key methodsFor: 'nil' stamp: 'franco c 12/17/2020 19:35:00'!
init
	weight:=0.! !
!Key class methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:35:55'!
initNew
	^self new init! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:36:21' prior: 50929815!
test02knowsKeyNameCorrectly
	|door1 key1|
	key1 := Key new.
	door1:= Door withKeyName: key1.
	self assert: door1 getKeyName equals: key1.
	! !

!methodRemoval: Key class #new stamp: 'franco c 12/17/2020 19:36:35'!
new
	^self new init!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:36:54' prior: 50930387!
test02knowsKeyNameCorrectly
	|door1 key1|
	key1 := Key initNew.
	door1:= Door withKeyName: key1.
	self assert: door1 getKeyName equals: key1.
	! !

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 19:36:59'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:37:10' prior: 50929867!
test03room2mustbeRoom
	|room1 |
	room1:=Room ofWidth: 10 andHeight: 10.
self
	should:[Door withKeyname:Key initNew room1: room1 pos1: 1@1 room2: 5 pos2: 2@2]
	raise:Error
	withMessageText:[Door oneRoomParameterisInvaliderror]
	! !

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 19:37:12'!
PASSED!

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 19:37:12'!
PASSED!

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 19:37:12'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 19:37:12'!
PASSED!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 19:37:12'!
PASSED!

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 19:37:12'!
PASSED!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 19:37:12'!
PASSED!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 19:37:12'!
PASSED!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 19:37:12'!
PASSED!

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 19:37:12'!
ERROR!

!testRun: #DoorTest #test0only1keyOpens stamp: 'franco c 12/17/2020 19:37:12'!
PASSED!

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 19:37:12'!
ERROR!

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 19:37:44'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 19:37:55'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:38:21' prior: 50929878!
test04room1mustbeRoom
	|room2|
	room2:=Room ofWidth: 10 andHeight: 10.
self
	should:[Door withKeyname: Key initNew room1: 5 pos1: 1@1 room2:  room2 pos2: 2@2]
	raise:Error
	withMessageText:[Door oneRoomParameterisInvaliderror]
	! !

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 19:38:23'!
PASSED!

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 19:38:23'!
PASSED!

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 19:38:23'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 19:38:23'!
PASSED!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 19:38:23'!
PASSED!

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 19:38:23'!
PASSED!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 19:38:23'!
PASSED!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 19:38:23'!
PASSED!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 19:38:23'!
PASSED!

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 19:38:23'!
ERROR!

!testRun: #DoorTest #test0only1keyOpens stamp: 'franco c 12/17/2020 19:38:23'!
PASSED!

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 19:38:23'!
ERROR!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 19:38:32'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:38:38' prior: 50929889!
test05RoomatinitializedPositionHasDoor
	|room1 room2 door|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	door:= Door withKeyname: Key initNew room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	self assert: (room1 at: 5@5) equals: door.
	self assert: (room2 at: 5@5) equals: door.

	! !

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 19:38:42'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:38:53' prior: 50929902!
test06DoorcantBeTaken
	|room1 room2 door player defaultBackpack|
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100 .
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	door:= Door withKeyname: Key initNew room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	
	
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@4 heading: #North in: room1.
	self
	should:[player take]
	raise:Error
	withMessageText: Door cantBeTakenErrorDescription .
	
	! !

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 19:38:59'!
PASSED!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 19:39:14'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:39:21' prior: 50929921!
test07DoorcantBeputInsideNonPOrtableObject
	|door room1 room2 |
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	door:= Door withKeyname: Key initNew room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	
	
	self
	should:[NonPortableObject named: 'object' withAll: (OrderedCollection with: door)]
	raise:Error
	withMessageText: Door doorcantbeaddederror .
	
	! !

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 19:39:25'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:39:32' prior: 50929937!
test08cantPassIfDoorIsClosed
	|room1 room2 door player defaultBackpack|
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100 .
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	door:= Door withKeyname: Key initNew room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	
	
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@4 heading: #North in: room1.
	self
	should:[player moveForward ]
	raise:Error
	withMessageText: Door doorisClosedError .
	
	! !

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 19:39:37'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:39:45' prior: 50930344!
test09CanOpenDoorifhasKey
	|door room1 room2 defaultBackpack player llave|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	llave:= Key initNew.
	door:= Door withKeyname: llave room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100.
	room1 at: 5@4 put: llave.
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	player take.
	player moveForward .
	player open.
	self assert: door getState  equals: 'open'.
	
	
	
	
	! !

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 19:39:47'!
ERROR!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 19:40:17' prior: 50930597!
test09CanOpenDoorifhasKey
	|door room1 room2 defaultBackpack player llave|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	llave:= Key initNew.
	door:= Door withKeyname: llave room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100.
	room1 at: 5@4 put: llave.
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	player take.
	player moveForward .
	player openDoor.
	self assert: door getState  equals: 'open'.
	
	
	
	
	! !

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 19:40:20'!
PASSED!
!Room methodsFor: 'contents' stamp: 'franco c 12/17/2020 19:50:00' prior: 50929626!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove anObject|
	
	toMove := self at: aSourcePosition.
	anObject:=self at: aTargetPosition.
	(contents includesKey: aTargetPosition) ifTrue:[ (anObject class = Door) ifTrue:[ ( anObject isOpen) ifTrue:[ toMove moveForward ] ifFalse:[^anObject signalClosed]]].
	self at: aTargetPosition put: toMove.
	contents removeKey: aSourcePosition.
! !
!Room methodsFor: 'contents' stamp: 'franco c 12/17/2020 19:52:07' prior: 50930645!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove anObject|
	
	toMove := self at: aSourcePosition.
	anObject:=self at: aTargetPosition.
	(contents includesKey: aTargetPosition) ifTrue:[ (anObject class = Door) ifTrue:[ ( anObject isOpen) ifTrue:[^anObject checkIfPlayercanMove: toMove in: self ] ifFalse:[^anObject signalClosed]]].
	self at: aTargetPosition put: toMove.
	contents removeKey: aSourcePosition.
! !
!Door methodsFor: 'nil' stamp: 'franco c 12/17/2020 19:54:31'!
checkIfPlayercanMove: aPlayer in: aRoom
	|pos|
	aRoom = room1 ifTrue:[pos:= pos1].
	aRoom = room2 ifTrue:[pos:= pos2].
	
	 ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'franco c 12/17/2020 19:56:07'!
forwardPositionfromaPos: aPos

	^ aPos + heading forwardPoint.! !
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 20:00:45' prior: 50930676!
checkIfPlayercanMove: aPlayer in: aRoom
	|pos playerPos room|
	aRoom = room1 ifTrue:[pos:= pos2.
		room:=room2].
	aRoom = room2 ifTrue:[pos:= pos1.
		room:=room1.].
	playerPos:= aPlayer forwardPositionfromaPos: pos.
	(room includesKey: playerPos) ifTrue:[^aRoom signalInvalidMoveDestination].
	aRoom removePlayer.
	room at:playerPos put: aPlayer.
	
	 ! !
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 20:02:25' prior: 50930689!
checkIfPlayercanMove: aPlayer in: aRoom
	|pos playerPos room|
	aRoom = room1 ifTrue:[pos:= pos2.
		room:=room2].
	aRoom = room2 ifTrue:[pos:= pos1.
		room:=room1.].
	playerPos:= aPlayer forwardPositionfromaPos: pos.
	(room includesKey: playerPos) ifTrue:[^aRoom signalInvalidMoveDestination].
	aRoom removePlayer.
	room at:playerPos put: aPlayer.
	^true.
	 ! !
!Room methodsFor: 'contents' stamp: 'franco c 12/17/2020 20:03:20' prior: 50930660!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove anObject|
	
	toMove := self at: aSourcePosition.
	anObject:=self at: aTargetPosition.
	(contents includesKey: aTargetPosition) ifTrue:[ (anObject class = Door) ifTrue:[ ( anObject isOpen) ifTrue:[^anObject checkIfPlayercanMove: toMove in: self from: aSourcePosition ] ifFalse:[^anObject signalClosed]]].
	self at: aTargetPosition put: toMove.
	contents removeKey: aSourcePosition.
! !
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 20:04:49'!
checkIfPlayercanMove: aPlayer in: aRoom from: aSourcePosition	
	|pos room playerPos|
	aRoom = room1 ifTrue:[pos:= pos2.
		room:=room2].
	aRoom = room2 ifTrue:[pos:= pos1.
		room:=room1.].
	playerPos:= aPlayer forwardPositionfromaPos: pos.
	(room includesKey: playerPos) ifTrue:[^aRoom signalInvalidMoveDestination].
	aRoom.
	room at:playerPos put: aPlayer.
	^true.
	 ! !
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 20:05:34' prior: 50930735!
checkIfPlayercanMove: aPlayer in: aRoom from: aSourcePosition	
	|pos room playerPos|
	aRoom = room1 ifTrue:[pos:= pos2.
		room:=room2].
	aRoom = room2 ifTrue:[pos:= pos1.
		room:=room1.].
	playerPos:= aPlayer forwardPositionfromaPos: pos.
	(room includesKey: playerPos) ifTrue:[^aRoom signalInvalidMoveDestination].
	aRoom removeAt: aSourcePosition.
	room at:playerPos put: aPlayer.
	^true.
	 ! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 20:09:21'!
test10CantOpenDoorifdoesnthaveKey
	|door room1 room2 defaultBackpack player llave llave2|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	llave:= Key initNew.
	door:= Door withKeyname: llave room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100.
	room1 at: 5@4 put: llave2.
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	player take.
	player moveForward .
	player openDoor.
	self assert: door getState  equals: 'close'.
	
	
	
	
	! !

!testRun: #DoorTest #test10CantOpenDoorifdoesnthaveKey stamp: 'franco c 12/17/2020 20:09:26'!
ERROR!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 20:10:13' prior: 50930765!
test10CantOpenDoorifdoesnthaveKey
	|door room1 room2 defaultBackpack player llave llave2|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	llave:= Key initNew.
	llave2:= Key initNew.
	door:= Door withKeyname: llave room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100.
	room1 at: 5@4 put: llave2.
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	player take.
	player moveForward .
	player openDoor.
	self assert: door getState  equals: 'close'.
	
	
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 20:10:57' prior: 50930790!
test10CantOpenDoorifdoesnthaveKey
	|door room1 room2 defaultBackpack player llave llave2|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	llave:= Key initNew.
	llave2:= Key initNew.
	door:= Door withKeyname: llave room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100.
	room1 at: 5@4 put: llave2.
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	player take.
	player moveForward .
	player openDoor.
	self deny: door isOpen .
	
	
	
	
	! !

!testRun: #DoorTest #test10CantOpenDoorifdoesnthaveKey stamp: 'franco c 12/17/2020 20:10:59'!
ERROR!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 20:11:11' prior: 50930621!
test09CanOpenDoorifhasKey
	|door room1 room2 defaultBackpack player llave|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	llave:= Key initNew.
	door:= Door withKeyname: llave room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100.
	room1 at: 5@4 put: llave.
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	player take.
	player moveForward .
	player openDoor.
	self assert: door isOpen.
	
	
	
	
	! !

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 20:11:13'!
ERROR!

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 20:11:44'!
ERROR!

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 20:12:14'!
ERROR!

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 20:13:10'!
ERROR!
!Room methodsFor: 'contents' stamp: 'franco c 12/17/2020 20:14:16' prior: 50930718!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove anObject|
	
	toMove := self at: aSourcePosition.
	
	(contents includesKey: aTargetPosition) ifTrue:[ (anObject class = Door) ifTrue:[ anObject:=self at: aTargetPosition.( anObject isOpen) ifTrue:[^anObject checkIfPlayercanMove: toMove in: self from: aSourcePosition ] ifFalse:[^anObject signalClosed]]].
	self at: aTargetPosition put: toMove.
	contents removeKey: aSourcePosition.
! !

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 20:14:29'!
PASSED!

!testRun: #DoorTest #test10CantOpenDoorifdoesnthaveKey stamp: 'franco c 12/17/2020 20:14:34'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 20:16:28'!
test11CanPassthroughdoor
	|door room1 room2 defaultBackpack player llave|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	llave:= Key initNew.
	
	door:= Door withKeyname: llave room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100.
	room1 at: 5@4 put: llave.
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	player take.
	player moveForward .
	player openDoor.
	player moveForward.
	
	self assert: room1  isOpen .
	
	
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 20:18:16' prior: 50930893!
test11CanPassthroughdoor
	|door room1 room2 defaultBackpack player llave|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	llave:= Key initNew.
	
	door:= Door withKeyname: llave room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100.
	room1 at: 5@4 put: llave.
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	player take.
	player moveForward .
	player openDoor.
	player moveForward.
	self should:[ room1 at: 5@4]
	raise:Error
	withMessageText: Room objectNotInRoomErrorDescription.
	self assert: (room2  at: 5@6) equals: player .
	
	
	
	
	! !

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 20:18:21'!
ERROR!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 20:19:29' prior: 50930915!
test11CanPassthroughdoor
	|door room1 room2 defaultBackpack player llave|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	llave:= Key initNew.
	
	door:= Door withKeyname: llave room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100.
	room1 at: 5@4 put: llave.
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	player take.
	player moveForward .
	player openDoor.
	player moveForward.
	self assert: (room2  at: 5@6) equals: player .
	self should:[ room1 at: 5@4]
	raise:Error
	withMessageText: Room objectNotInRoomErrorDescription.
	
	
	
	
	
	! !

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 20:19:32'!
ERROR!

anObject class!
!Room methodsFor: 'contents' stamp: 'franco c 12/17/2020 20:21:56' prior: 50930870!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove anObject|
	
	toMove := self at: aSourcePosition.
	
	(contents includesKey: aTargetPosition) ifTrue:[ ((self at: aTargetPosition) class = Door) ifTrue:[ anObject:=self at: aTargetPosition.( anObject isOpen) ifTrue:[^anObject checkIfPlayercanMove: toMove in: self from: aSourcePosition ] ifFalse:[^anObject signalClosed]]].
	self at: aTargetPosition put: toMove.
	contents removeKey: aSourcePosition.
! !

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 20:22:02'!
ERROR!

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 20:22:02'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 20:24:42' prior: 50930750!
checkIfPlayercanMove: aPlayer in: aRoom from: aSourcePosition	
	|pos room playerPos|
	aRoom = room1 ifTrue:[pos:= pos2.
		room:=room2].
	aRoom = room2 ifTrue:[pos:= pos1.
		room:=room1.].
	playerPos:= aPlayer forwardPositionfromaPos: pos.
	(room includesKey: playerPos) ifTrue:[^aRoom signalInvalidMoveDestination].
	aRoom removeAt: aSourcePosition.
	room at:playerPos put: aPlayer.
	^true.
	 ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'franco c 12/17/2020 20:25:29' prior: 50930683!
forwardPositionfromaPos: aPos

	^ aPos + (heading forwardPoint).! !
!PlayableCharacter methodsFor: 'moving' stamp: 'franco c 12/17/2020 20:25:40' prior: 50931011!
forwardPositionfromaPos: aPos

	^ (aPos + (heading forwardPoint)).! !

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 20:25:46'!
ERROR!

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 20:25:46'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 20:28:49' prior: 50930995!
checkIfPlayercanMove: aPlayer in: aRoom from: aSourcePosition	
	|pos room playerPos|
	aRoom = room1 ifTrue:[pos:= pos2.
		room:=room2].
	aRoom = room2 ifTrue:[pos:= pos1.
		room:=room1.].
	playerPos:= (aPlayer forwardPositionfromaPos: pos).
	(room includesKey: playerPos) ifTrue:[^aRoom signalInvalidMoveDestination].
	aRoom removeAt: aSourcePosition.
	room at:playerPos put: aPlayer.
	^true.
	 ! !

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 20:28:56'!
ERROR!

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 20:28:56'!
ERROR!

player!

player!

player!

player!

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 20:31:55'!
ERROR!

aPlayer!

heading!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 20:41:25'!
test12CantPassthroughdoorwithelementonotherside
	|door room1 room2 defaultBackpack player llave|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	llave:= Key initNew.
	
	door:= Door withKeyname: llave room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100.
	room1 at: 5@4 put: llave.
	room2 at: 5@6 put: llave.
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	player take.
	player moveForward .
	player openDoor.
	
	self should:[player moveForward.]
	raise:Error
	withMessageText: Room .
	
	
	
	
	
	! !

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 20:46:39'!
ERROR!

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 20:47:47'!
ERROR!

heading!

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 20:48:44'!
ERROR!

(heading forwardPoint)!

aPos!
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 20:50:30' prior: 50927507!
initwithKey: aName room1: aRoom1 pos1: aPos1 room2: aRoom2 pos2:aPos2
	keyname:= aName.
	state:= 'closed'.
	aRoom1 at: aPos1 put: self.
	aRoom2 at: aPos2 put: self.
	room1:= aRoom1.
	pos1:= aPos1.
	pos2:= aPos2.
	room2:= aRoom2.
	! !

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 20:50:46'!
ERROR!

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 20:50:46'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 20:54:11' prior: 50931028!
checkIfPlayercanMove: aPlayer in: aRoom from: aSourcePosition	
	|pos room playerPos|
	aRoom = room1 ifTrue:[pos:= pos2.
		room:=room2].
	aRoom = room2 ifTrue:[pos:= pos1.
		room:=room1.].
	playerPos:= (aPlayer forwardPositionfromaPos: pos).
	[room includesKey: playerPos] on: Error do: [
		aRoom removeAt: aSourcePosition.
		room at:playerPos put: aPlayer.
		^true.
	 ].
	^aRoom signalInvalidMoveDestination.
	
	
! !

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 20:54:24'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 20:55:45' prior: 50931054!
test12CantPassthroughdoorwithelementonotherside
	|door room1 room2 defaultBackpack player llave|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	llave:= Key initNew.
	
	door:= Door withKeyname: llave room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100.
	room1 at: 5@4 put: llave.
	room2 at: 5@6 put: llave.
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	player take.
	player moveForward .
	player openDoor.
	
	self should:[player moveForward.]
	raise:Error
	withMessageText: Room invalidPositionErrorDescription .
	
	
	
	
	
	! !

!testRun: #DoorTest #test12CantPassthroughdoorwithelementonotherside stamp: 'franco c 12/17/2020 20:55:51'!
FAILURE!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 20:57:00' prior: 50931125!
test12CantPassthroughdoorwithelementonotherside
	|door room1 room2 defaultBackpack player llave|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	llave:= Key initNew.
	
	door:= Door withKeyname: llave room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100.
	room1 at: 5@4 put: llave.
	room2 at: 5@6 put: llave.
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	player take.
	player moveForward .
	player openDoor.
	
	self should:[player moveForward.]
	raise:Error
	withMessageText: Room positionIsNotEmptyErrorDescription .
	
	
	
	
	
	! !

!testRun: #DoorTest #test12CantPassthroughdoorwithelementonotherside stamp: 'franco c 12/17/2020 20:57:03'!
PASSED!

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 20:57:03'!
PASSED!

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 20:57:03'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 20:57:03'!
PASSED!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 20:57:03'!
PASSED!

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 20:57:03'!
PASSED!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 20:57:03'!
PASSED!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 20:57:03'!
PASSED!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 20:57:03'!
PASSED!

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 20:57:03'!
PASSED!

!testRun: #DoorTest #test0only1keyOpens stamp: 'franco c 12/17/2020 20:57:03'!
PASSED!

!testRun: #DoorTest #test10CantOpenDoorifdoesnthaveKey stamp: 'franco c 12/17/2020 20:57:03'!
PASSED!

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 20:57:03'!
PASSED!

!testRun: #DoorTest #test12CantPassthroughdoorwithelementonotherside stamp: 'franco c 12/17/2020 20:57:03'!
PASSED!
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 20:59:05' prior: 50931105!
checkIfPlayercanMove: aPlayer in: aRoom from: aSourcePosition	
	|pos room playerPos|
	aRoom = room1 ifTrue:[pos:= pos2.
		room:=room2].
	aRoom = room2 ifTrue:[pos:= pos1.
		room:=room1.].
	playerPos:= (aPlayer forwardPositionfromaPos: pos).
	room at:playerPos put: aPlayer.
	aRoom removeAt: aSourcePosition.
	^true.
	 
	"[room includesKey: playerPos] on: Error do: [
		
	^aRoom signalInvalidMoveDestination."
	
	
! !

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 20:59:10'!
PASSED!

!testRun: #DoorTest #test12CantPassthroughdoorwithelementonotherside stamp: 'franco c 12/17/2020 20:59:14'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 20:59:36'!
test13CantPassthroughdoorIfOutOfBoundsOnOtherSide
	|door room1 room2 defaultBackpack player llave|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	llave:= Key initNew.
	
	door:= Door withKeyname: llave room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100.
	room1 at: 5@4 put: llave.
	room2 at: 5@6 put: llave.
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	player take.
	player moveForward .
	player openDoor.
	
	self should:[player moveForward.]
	raise:Error
	withMessageText: Room positionIsNotEmptyErrorDescription .
	
	
	
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:00:07' prior: 50931246!
test13CantPassthroughdoorIfOutOfBoundsOnOtherSide
	|door room1 room2 defaultBackpack player llave|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 5 andHeight: 5.
	llave:= Key initNew.
	
	door:= Door withKeyname: llave room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100.
	room1 at: 5@4 put: llave.

	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	player take.
	player moveForward .
	player openDoor.
	
	self should:[player moveForward.]
	raise:Error
	withMessageText: Room positionIsNotEmptyErrorDescription .
	
	
	
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:00:54' prior: 50931271!
test13CantPassthroughdoorIfOutOfBoundsOnOtherSide
	|door room1 room2 defaultBackpack player llave|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 5 andHeight: 5.
	llave:= Key initNew.
	
	door:= Door withKeyname: llave room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100.
	room1 at: 5@4 put: llave.

	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	player take.
	player moveForward .
	player openDoor.
	
	self should:[player moveForward.]
	raise:Error
	withMessageText: Room invalidPositionErrorDescription .
	
	
	
	
	
	! !

!testRun: #DoorTest #test13CantPassthroughdoorIfOutOfBoundsOnOtherSide stamp: 'franco c 12/17/2020 21:00:59'!
ERROR!

!testRun: #DoorTest #test13CantPassthroughdoorIfOutOfBoundsOnOtherSide stamp: 'franco c 12/17/2020 21:01:07'!
ERROR!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:02:19' prior: 50931295!
test13CantPassthroughdoorIfOutOfBoundsOnOtherSide
	|door room1 room2 defaultBackpack player llave|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	llave:= Key initNew.
	
	door:= Door withKeyname: llave room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100.
	room1 at: 5@4 put: llave.

	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	player take.
	player moveForward .
	player openDoor.
	
	self should:[player moveForward.]
	raise:Error
	withMessageText: Room invalidPositionErrorDescription .
	
	
	
	
	
	! !

!testRun: #DoorTest #test13CantPassthroughdoorIfOutOfBoundsOnOtherSide stamp: 'franco c 12/17/2020 21:02:22'!
FAILURE!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:02:35' prior: 50931326!
test13CantPassthroughdoorIfOutOfBoundsOnOtherSide
	|door room1 room2 defaultBackpack player llave|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 6 andHeight: 6.
	llave:= Key initNew.
	
	door:= Door withKeyname: llave room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100.
	room1 at: 5@4 put: llave.

	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	player take.
	player moveForward .
	player openDoor.
	
	self should:[player moveForward.]
	raise:Error
	withMessageText: Room invalidPositionErrorDescription .
	
	
	
	
	
	! !

!testRun: #DoorTest #test13CantPassthroughdoorIfOutOfBoundsOnOtherSide stamp: 'franco c 12/17/2020 21:02:38'!
PASSED!

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 21:02:38'!
PASSED!

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 21:02:38'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 21:02:38'!
PASSED!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 21:02:38'!
PASSED!

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 21:02:38'!
PASSED!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 21:02:38'!
PASSED!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 21:02:38'!
PASSED!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 21:02:38'!
PASSED!

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 21:02:38'!
PASSED!

!testRun: #DoorTest #test0only1keyOpens stamp: 'franco c 12/17/2020 21:02:38'!
PASSED!

!testRun: #DoorTest #test10CantOpenDoorifdoesnthaveKey stamp: 'franco c 12/17/2020 21:02:38'!
PASSED!

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 21:02:38'!
PASSED!

!testRun: #DoorTest #test12CantPassthroughdoorwithelementonotherside stamp: 'franco c 12/17/2020 21:02:38'!
PASSED!

!testRun: #DoorTest #test13CantPassthroughdoorIfOutOfBoundsOnOtherSide stamp: 'franco c 12/17/2020 21:02:38'!
PASSED!

Object subclass: #DoorState
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #DoorState category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'franco c 12/17/2020 21:03:11'!
Object subclass: #DoorState
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

Object subclass: #DoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #DoorState category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'franco c 12/17/2020 21:03:18'!
Object subclass: #DoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

DoorState subclass: #Open
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Open category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'franco c 12/17/2020 21:03:30'!
DoorState subclass: #Open
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

DoorState subclass: #Closed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Closed category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'franco c 12/17/2020 21:03:33'!
DoorState subclass: #Closed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Closed methodsFor: 'nil' stamp: 'franco c 12/17/2020 21:04:01'!
isOpen
	^false! !
!Open methodsFor: 'nil' stamp: 'franco c 12/17/2020 21:04:11'!
isOpen
	^true! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'franco c 12/17/2020 21:04:38'!
CloseDoor! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'franco c 12/17/2020 21:05:23' prior: 50931487!
CloseDoor
	| toClose|
	
	toClose := room at: self forwardPosition.
	(toClose class) = Door ifTrue:[(backpack includes: (toClose getKeyName)) ifTrue:[toClose close].]! !
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:05:49'!
close
	state:= 'closed'! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:06:35'!
test014CanCloseDoorifhasKey
	|door room1 room2 defaultBackpack player llave|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	llave:= Key initNew.
	door:= Door withKeyname: llave room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100.
	room1 at: 5@4 put: llave.
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	player take.
	player moveForward .
	player openDoor.
	player CloseDoor .
	self deny: door isOpen.
	
	
	
	
	! !

!testRun: #DoorTest #test014CanCloseDoorifhasKey stamp: 'franco c 12/17/2020 21:06:36'!
PASSED!

!testRun: #DoorTest #test014CanCloseDoorifhasKey stamp: 'franco c 12/17/2020 21:06:36'!
PASSED!

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 21:06:36'!
PASSED!

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 21:06:36'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 21:06:36'!
PASSED!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 21:06:36'!
PASSED!

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 21:06:36'!
PASSED!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 21:06:36'!
PASSED!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 21:06:36'!
PASSED!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 21:06:36'!
PASSED!

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 21:06:36'!
PASSED!

!testRun: #DoorTest #test0only1keyOpens stamp: 'franco c 12/17/2020 21:06:36'!
PASSED!

!testRun: #DoorTest #test10CantOpenDoorifdoesnthaveKey stamp: 'franco c 12/17/2020 21:06:36'!
PASSED!

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 21:06:36'!
PASSED!

!testRun: #DoorTest #test12CantPassthroughdoorwithelementonotherside stamp: 'franco c 12/17/2020 21:06:36'!
PASSED!

!testRun: #DoorTest #test13CantPassthroughdoorIfOutOfBoundsOnOtherSide stamp: 'franco c 12/17/2020 21:06:36'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:07:00'!
test10CantDoorifdoesnthaveKey
	|door room1 room2 defaultBackpack player llave llave2|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	llave:= Key initNew.
	llave2:= Key initNew.
	door:= Door withKeyname: llave room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100.
	room1 at: 5@4 put: llave2.
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	player take.
	player moveForward .
	player openDoor.
	self deny: door isOpen .
	
	
	
	
	! !

!methodRemoval: Door #checkIfPlayercanMove:in: stamp: 'franco c 12/17/2020 21:08:09'!
checkIfPlayercanMove: aPlayer in: aRoom
	|pos playerPos room|
	aRoom = room1 ifTrue:[pos:= pos2.
		room:=room2].
	aRoom = room2 ifTrue:[pos:= pos1.
		room:=room1.].
	playerPos:= aPlayer forwardPositionfromaPos: pos.
	(room includesKey: playerPos) ifTrue:[^aRoom signalInvalidMoveDestination].
	aRoom removePlayer.
	room at:playerPos put: aPlayer.
	^true.
	 !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #DoorTest #test014CanCloseDoorifhasKey stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #DoorTest #test0only1keyOpens stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #DoorTest #test10CantDoorifdoesnthaveKey stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #DoorTest #test10CantOpenDoorifdoesnthaveKey stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #DoorTest #test12CantPassthroughdoorwithelementonotherside stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #DoorTest #test13CantPassthroughdoorIfOutOfBoundsOnOtherSide stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'franco c 12/17/2020 21:08:25'!
PASSED!
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:09:30' prior: 50931088!
initwithKey: aName room1: aRoom1 pos1: aPos1 room2: aRoom2 pos2:aPos2
	keyname:= aName.
	state:= Closed new.
	aRoom1 at: aPos1 put: self.
	aRoom2 at: aPos2 put: self.
	room1:= aRoom1.
	pos1:= aPos1.
	pos2:= aPos2.
	room2:= aRoom2.
	! !
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:09:42' prior: 50929621!
isOpen
	state isOpen.! !
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:09:49' prior: 50930340!
open
	state:= Open new.! !
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:10:00' prior: 50931499!
close
	state:= Closed new.! !
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:10:10' prior: 50931223!
checkIfPlayercanMove: aPlayer in: aRoom from: aSourcePosition	
	|pos room playerPos|
	aRoom = room1 ifTrue:[pos:= pos2.
		room:=room2].
	aRoom = room2 ifTrue:[pos:= pos1.
		room:=room1.].
	playerPos:= (aPlayer forwardPositionfromaPos: pos).
	room at:playerPos put: aPlayer.
	aRoom removeAt: aSourcePosition.
	^true.
	 
	
! !

!methodRemoval: Door #getState stamp: 'franco c 12/17/2020 21:10:23'!
getState
	^state!

!testRun: #DoorTest #test014CanCloseDoorifhasKey stamp: 'franco c 12/17/2020 21:10:29'!
ERROR!

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 21:10:29'!
PASSED!

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 21:10:29'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 21:10:29'!
PASSED!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 21:10:29'!
PASSED!

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 21:10:29'!
PASSED!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 21:10:29'!
PASSED!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 21:10:29'!
PASSED!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 21:10:29'!
FAILURE!

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 21:10:29'!
ERROR!

!testRun: #DoorTest #test0only1keyOpens stamp: 'franco c 12/17/2020 21:10:29'!
PASSED!

!testRun: #DoorTest #test10CantDoorifdoesnthaveKey stamp: 'franco c 12/17/2020 21:10:29'!
ERROR!

!testRun: #DoorTest #test10CantOpenDoorifdoesnthaveKey stamp: 'franco c 12/17/2020 21:10:29'!
ERROR!

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 21:10:29'!
ERROR!

!testRun: #DoorTest #test12CantPassthroughdoorwithelementonotherside stamp: 'franco c 12/17/2020 21:10:29'!
FAILURE!

!testRun: #DoorTest #test13CantPassthroughdoorIfOutOfBoundsOnOtherSide stamp: 'franco c 12/17/2020 21:10:29'!
FAILURE!
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:11:15' prior: 50931849!
isOpen
	^state isOpen.! !

!testRun: #DoorTest #test014CanCloseDoorifhasKey stamp: 'franco c 12/17/2020 21:11:28'!
PASSED!

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 21:11:31'!
PASSED!

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 21:11:33'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 21:11:36'!
PASSED!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 21:11:39'!
PASSED!

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 21:11:43'!
PASSED!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 21:11:46'!
PASSED!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 21:11:51'!
PASSED!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 21:11:54'!
PASSED!

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 21:12:04'!
PASSED!

!testRun: #DoorTest #test0only1keyOpens stamp: 'franco c 12/17/2020 21:12:09'!
PASSED!

!methodRemoval: DoorTest #test10CantDoorifdoesnthaveKey stamp: 'franco c 12/17/2020 21:12:18'!
test10CantDoorifdoesnthaveKey
	|door room1 room2 defaultBackpack player llave llave2|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	llave:= Key initNew.
	llave2:= Key initNew.
	door:= Door withKeyname: llave room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100.
	room1 at: 5@4 put: llave2.
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	player take.
	player moveForward .
	player openDoor.
	self deny: door isOpen .
	
	
	
	
	!

!testRun: #DoorTest #test10CantOpenDoorifdoesnthaveKey stamp: 'franco c 12/17/2020 21:12:20'!
PASSED!

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 21:12:22'!
PASSED!

!testRun: #DoorTest #test014CanCloseDoorifhasKey stamp: 'franco c 12/17/2020 21:12:26'!
PASSED!

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 21:12:26'!
PASSED!

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 21:12:26'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 21:12:26'!
PASSED!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 21:12:26'!
PASSED!

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 21:12:26'!
PASSED!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 21:12:26'!
PASSED!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 21:12:26'!
PASSED!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 21:12:26'!
PASSED!

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 21:12:26'!
PASSED!

!testRun: #DoorTest #test0only1keyOpens stamp: 'franco c 12/17/2020 21:12:26'!
PASSED!

!testRun: #DoorTest #test10CantOpenDoorifdoesnthaveKey stamp: 'franco c 12/17/2020 21:12:26'!
PASSED!

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 21:12:26'!
PASSED!

!testRun: #DoorTest #test12CantPassthroughdoorwithelementonotherside stamp: 'franco c 12/17/2020 21:12:26'!
PASSED!

!testRun: #DoorTest #test13CantPassthroughdoorIfOutOfBoundsOnOtherSide stamp: 'franco c 12/17/2020 21:12:26'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:13:24'!
test15CanPassthroughdoorandBack
	|door room1 room2 defaultBackpack player llave|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	llave:= Key initNew.
	
	door:= Door withKeyname: llave room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100.
	room1 at: 5@4 put: llave.
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	player take.
	player moveForward .
	player openDoor.
	player moveForward.
	self assert: (room2  at: 5@6) equals: player .
	self should:[ room1 at: 5@4]
	raise:Error
	withMessageText: Room objectNotInRoomErrorDescription.
	
	
	
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:14:09' prior: 50932038!
test15CanPassthroughdoorandBack
	|door room1 room2 defaultBackpack player llave|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	llave:= Key initNew.
	
	door:= Door withKeyname: llave room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100.
	room1 at: 5@4 put: llave.
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	player take.
	player moveForward .
	player openDoor.
	player moveForward.
	
	
	
	
	
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:16:09' prior: 50932063!
test15CanPassthroughdoorandBack
	|door room1 room2 defaultBackpack player llave|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	llave:= Key initNew.
	
	door:= Door withKeyname: llave room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100.
	room1 at: 5@4 put: llave.
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	player take.
	player moveForward .
	player openDoor.
	player moveForward.
	player moveBackward .
	
	
	
	
	
	
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:16:42' prior: 50932084!
test15CanPassthroughdoorandBack
	|door room1 room2 defaultBackpack player llave|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	llave:= Key initNew.
	
	door:= Door withKeyname: llave room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100.
	room1 at: 5@4 put: llave.
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	player take.
	player moveForward .
	player openDoor.
	player moveForward.
	player moveBackward .
	self assert: (room1  at: 5@6) equals: player .
	self should:[ room1 at: 5@6]
	raise:Error
	withMessageText: Room objectNotInRoomErrorDescription.
	
	
	
	
	
	
	
	
	! !

!testRun: #DoorTest #test15CanPassthroughdoorandBack stamp: 'franco c 12/17/2020 21:16:48'!
ERROR!

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 21:18:21'!
PASSED!
!PlayableCharacter methodsFor: 'nil' stamp: 'franco c 12/17/2020 21:20:35'!
changeRoom: aRoom
	room:= aRoom.! !
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:21:09' prior: 50931861!
checkIfPlayercanMove: aPlayer in: aRoom from: aSourcePosition	
	|pos room playerPos|
	aRoom = room1 ifTrue:[pos:= pos2.
		room:=room2].
	aRoom = room2 ifTrue:[pos:= pos1.
		room:=room1.].
	playerPos:= (aPlayer forwardPositionfromaPos: pos).
	room at:playerPos put: aPlayer.
	aRoom removeAt: aSourcePosition.
	aPlayer changeRoom: room.
	^true.
	 
	
! !

!testRun: #DoorTest #test15CanPassthroughdoorandBack stamp: 'franco c 12/17/2020 21:21:15'!
FAILURE!

!testRun: #DoorTest #test15CanPassthroughdoorandBack stamp: 'franco c 12/17/2020 21:21:15'!
FAILURE!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:21:34' prior: 50932106!
test15CanPassthroughdoorandBack
	|door room1 room2 defaultBackpack player llave|
	room1:=Room ofWidth: 10 andHeight: 10.
	room2:=Room ofWidth: 10 andHeight: 10.
	llave:= Key initNew.
	
	door:= Door withKeyname: llave room1: room1 pos1: 5@5 room2: room2 pos2: 5@5.
	defaultBackpack:= Backpack containingUpTo: 100 limitingPointsTo: 100.
	room1 at: 5@4 put: llave.
	player := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 5@3 heading: #North in: room1.
	player take.
	player moveForward .
	player openDoor.
	player moveForward.
	player moveBackward .
	self assert: (room1  at: 5@6) equals: player .
	self should:[ room2 at: 5@6]
	raise:Error
	withMessageText: Room objectNotInRoomErrorDescription.
	
	
	
	
	
	
	
	
	! !

!testRun: #DoorTest #test15CanPassthroughdoorandBack stamp: 'franco c 12/17/2020 21:21:37'!
PASSED!

!testRun: #DoorTest #test014CanCloseDoorifhasKey stamp: 'franco c 12/17/2020 21:21:37'!
PASSED!

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 21:21:37'!
PASSED!

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 21:21:37'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 21:21:37'!
PASSED!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 21:21:37'!
PASSED!

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 21:21:37'!
PASSED!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 21:21:37'!
PASSED!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 21:21:37'!
PASSED!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 21:21:37'!
PASSED!

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 21:21:37'!
PASSED!

!testRun: #DoorTest #test0only1keyOpens stamp: 'franco c 12/17/2020 21:21:37'!
PASSED!

!testRun: #DoorTest #test10CantOpenDoorifdoesnthaveKey stamp: 'franco c 12/17/2020 21:21:37'!
PASSED!

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 21:21:37'!
PASSED!

!testRun: #DoorTest #test12CantPassthroughdoorwithelementonotherside stamp: 'franco c 12/17/2020 21:21:37'!
PASSED!

!testRun: #DoorTest #test13CantPassthroughdoorIfOutOfBoundsOnOtherSide stamp: 'franco c 12/17/2020 21:21:37'!
PASSED!

!testRun: #DoorTest #test15CanPassthroughdoorandBack stamp: 'franco c 12/17/2020 21:21:37'!
PASSED!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'franco c 12/17/2020 21:24:30' prior: 50931491!
CloseDoor
	| toClose|
	
	toClose := room at: self forwardPosition.
	(toClose class) = Door ifTrue:[toClose closeDoorwith: backpack.
		"(backpack includes: (toClose getKeyName)) ifTrue:[toClose close]".]! !
!Door methodsFor: 'nil' stamp: 'franco c 12/17/2020 21:25:42'!
closeDoorwith: abackpack
	(abackpack includes: keyname) ifTrue:[self close ].
	! !

!testRun: #DoorTest #test014CanCloseDoorifhasKey stamp: 'franco c 12/17/2020 21:25:52'!
PASSED!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'franco c 12/17/2020 21:26:20' prior: 50932244!
CloseDoor
	| toClose|
	
	toClose := room at: self forwardPosition.
	(toClose class) = Door ifTrue:[toClose closeDoorwith: backpack.]! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'franco c 12/17/2020 21:27:06' prior: 50930240!
openDoor
	| toOpen |
	
	toOpen := room at: self forwardPosition.
	(toOpen class) = Door ifTrue:[toOpen openDoorwith: backpack.
		"(backpack includes: (toOpen getKeyName)) ifTrue:[toOpen open]."]
	
	
	! !
!Door methodsFor: 'nil' stamp: 'franco c 12/17/2020 21:27:36'!
openDoorwith: backpack! !
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:27:54' prior: 50932279!
openDoorwith: abackpack
	(abackpack includes: keyname) ifTrue:[self open ].! !

!testRun: #DoorTest #test014CanCloseDoorifhasKey stamp: 'franco c 12/17/2020 21:28:04'!
PASSED!

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 21:28:04'!
PASSED!

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 21:28:04'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 21:28:04'!
PASSED!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 21:28:04'!
PASSED!

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 21:28:04'!
PASSED!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 21:28:04'!
PASSED!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 21:28:04'!
PASSED!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 21:28:04'!
PASSED!

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 21:28:04'!
PASSED!

!testRun: #DoorTest #test0only1keyOpens stamp: 'franco c 12/17/2020 21:28:04'!
PASSED!

!testRun: #DoorTest #test10CantOpenDoorifdoesnthaveKey stamp: 'franco c 12/17/2020 21:28:04'!
PASSED!

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 21:28:04'!
PASSED!

!testRun: #DoorTest #test12CantPassthroughdoorwithelementonotherside stamp: 'franco c 12/17/2020 21:28:04'!
PASSED!

!testRun: #DoorTest #test13CantPassthroughdoorIfOutOfBoundsOnOtherSide stamp: 'franco c 12/17/2020 21:28:04'!
PASSED!

!testRun: #DoorTest #test15CanPassthroughdoorandBack stamp: 'franco c 12/17/2020 21:28:04'!
PASSED!
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:32:54' prior: 50932143!
checkIfPlayercanMove: aPlayer in: aRoom from: aSourcePosition	
	|pos room |
	aRoom = room1 ifTrue:[pos:= pos2.
		room:=room2].
	aRoom = room2 ifTrue:[pos:= pos1.
		room:=room1.].
	^room movePlayer: aPlayer from:pos comingFrom: aSourcePosition in: aRoom.

	 
	
! !
!Room methodsFor: 'nil' stamp: 'franco c 12/17/2020 21:33:53'!
movePlayer: aPlayer from:pos comingFrom: aSourcePosition in: aRoom
	|playerPos|
	playerPos:= (aPlayer forwardPositionfromaPos: pos).
	self at:playerPos put: aPlayer.
	aRoom removeAt: aSourcePosition.
	aPlayer changeRoom: self.
	^true.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'franco c 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'franco c 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'franco c 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'franco c 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'franco c 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'franco c 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'franco c 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'franco c 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'franco c 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'franco c 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'franco c 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'franco c 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'franco c 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'franco c 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'franco c 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'franco c 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'franco c 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'franco c 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'franco c 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'franco c 12/17/2020 21:34:04'!
PASSED!

!testRun: #DoorTest #test014CanCloseDoorifhasKey stamp: 'franco c 12/17/2020 21:34:10'!
PASSED!

!testRun: #DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 21:34:10'!
PASSED!

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 21:34:10'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 21:34:10'!
PASSED!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 21:34:10'!
PASSED!

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 21:34:10'!
PASSED!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 21:34:10'!
PASSED!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 21:34:10'!
PASSED!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 21:34:10'!
PASSED!

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 21:34:10'!
PASSED!

!testRun: #DoorTest #test0only1keyOpens stamp: 'franco c 12/17/2020 21:34:10'!
PASSED!

!testRun: #DoorTest #test10CantOpenDoorifdoesnthaveKey stamp: 'franco c 12/17/2020 21:34:10'!
PASSED!

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 21:34:10'!
PASSED!

!testRun: #DoorTest #test12CantPassthroughdoorwithelementonotherside stamp: 'franco c 12/17/2020 21:34:10'!
PASSED!

!testRun: #DoorTest #test13CantPassthroughdoorIfOutOfBoundsOnOtherSide stamp: 'franco c 12/17/2020 21:34:10'!
PASSED!

!testRun: #DoorTest #test15CanPassthroughdoorandBack stamp: 'franco c 12/17/2020 21:34:10'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:37:41'!
test01keyMustBeaKey
	self
	should:[Door withKeyName: 2]
	raise:Error
	withMessageText: Door keyNameMustBeStringError
	! !

!methodRemoval: DoorTest #test01keyNameMustBeString stamp: 'franco c 12/17/2020 21:37:44'!
test01keyNameMustBeString
	self
	should:[Door withKeyName: 2]
	raise:Error
	withMessageText: Door keyNameMustBeStringError
	!

Object subclass: #Door
	instanceVariableNames: 'state room1 room2 pos1 pos2 key'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'franco c 12/17/2020 21:38:19'!
Object subclass: #Door
	instanceVariableNames: 'state room1 room2 pos1 pos2 key'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'changestate' stamp: 'franco c 12/17/2020 21:38:30' prior: 50932253!
closeDoorwith: abackpack
	(abackpack includes: key) ifTrue:[self close ].
	! !
!Door methodsFor: 'changestate' stamp: 'franco c 12/17/2020 21:38:38' prior: 50932283!
openDoorwith: abackpack
	(abackpack includes: key) ifTrue:[self open ].! !
!Door methodsFor: 'getters' stamp: 'franco c 12/17/2020 21:38:50' prior: 50927178!
getKeyName
	^key! !
!Door methodsFor: 'initialization' stamp: 'franco c 12/17/2020 21:39:01' prior: 50927217!
initwithKey: aKeyName
	key:= aKeyName.
	state:= 'closed'.
	! !
!Door methodsFor: 'initialization' stamp: 'franco c 12/17/2020 21:39:06' prior: 50931838!
initwithKey: aName room1: aRoom1 pos1: aPos1 room2: aRoom2 pos2:aPos2
	key:= aName.
	state:= Closed new.
	aRoom1 at: aPos1 put: self.
	aRoom2 at: aPos2 put: self.
	room1:= aRoom1.
	pos1:= aPos1.
	pos2:= aPos2.
	room2:= aRoom2.
	! !

!testRun: #DoorTest #test014CanCloseDoorifhasKey stamp: 'franco c 12/17/2020 21:39:23'!
PASSED!

!testRun: #DoorTest #test01keyMustBeaKey stamp: 'franco c 12/17/2020 21:39:23'!
PASSED!

!testRun: #DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 21:39:23'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 21:39:23'!
PASSED!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 21:39:23'!
PASSED!

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 21:39:23'!
PASSED!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 21:39:23'!
PASSED!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 21:39:23'!
PASSED!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 21:39:23'!
PASSED!

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 21:39:23'!
PASSED!

!testRun: #DoorTest #test0only1keyOpens stamp: 'franco c 12/17/2020 21:39:23'!
PASSED!

!testRun: #DoorTest #test10CantOpenDoorifdoesnthaveKey stamp: 'franco c 12/17/2020 21:39:23'!
PASSED!

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 21:39:23'!
PASSED!

!testRun: #DoorTest #test12CantPassthroughdoorwithelementonotherside stamp: 'franco c 12/17/2020 21:39:23'!
PASSED!

!testRun: #DoorTest #test13CantPassthroughdoorIfOutOfBoundsOnOtherSide stamp: 'franco c 12/17/2020 21:39:23'!
PASSED!

!testRun: #DoorTest #test15CanPassthroughdoorandBack stamp: 'franco c 12/17/2020 21:39:23'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:40:02'!
test02onlyonekeycanopenit
	|door1 key1|
	key1 := Key initNew.
	door1:= Door withKeyName: key1.
	self assert: door1 getKeyName equals: key1.
	! !

!methodRemoval: DoorTest #test02knowsKeyNameCorrectly stamp: 'franco c 12/17/2020 21:40:05'!
test02knowsKeyNameCorrectly
	|door1 key1|
	key1 := Key initNew.
	door1:= Door withKeyName: key1.
	self assert: door1 getKeyName equals: key1.
	!
!StageObject methodsFor: 'nil' stamp: 'franco c 12/17/2020 21:41:43'!
open! !
!StageObject methodsFor: 'nil' stamp: 'franco c 12/17/2020 21:41:47'!
close! !
!Door methodsFor: 'nil' stamp: 'franco c 12/17/2020 21:44:30'!
canbePassed
	^state canbePassed! !
!DoorState methodsFor: 'nil' stamp: 'franco c 12/17/2020 21:44:47'!
canbepassed
	^self subclassResponsibility ! !
!Closed methodsFor: 'nil' stamp: 'franco c 12/17/2020 21:45:08' overrides: 50932624!
canbepassed
	| signalClosed |
	^signalClosed! !
!Closed methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:45:35' prior: 50932629 overrides: 50932624!
canbepassed
	^Door doorisClosedError.! !
!Open methodsFor: 'nil' stamp: 'franco c 12/17/2020 21:45:41' overrides: 50932624!
canbepassed! !
!Room methodsFor: 'contents' stamp: 'franco c 12/17/2020 21:47:34' prior: 50930971!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove anObject|
	
	toMove := self at: aSourcePosition.
	
	(contents includesKey: aTargetPosition) ifTrue:[ ((self at: aTargetPosition) class = Door) ifTrue:[ 
			anObject:=self at: aTargetPosition.
			"( anObject isOpen) ifTrue:[^anObject checkIfPlayercanMove: toMove in: self from: aSourcePosition ] ifFalse:[^anObject signalClosed]]]."
			anObject canbePassed.
			^anObject checkIfPlayercanMove: toMove in: self from: aSourcePosition 
			]].
	self at: aTargetPosition put: toMove.
	contents removeKey: aSourcePosition.
! !

!testRun: #DoorTest #test014CanCloseDoorifhasKey stamp: 'franco c 12/17/2020 21:47:38'!
PASSED!

!testRun: #DoorTest #test01keyMustBeaKey stamp: 'franco c 12/17/2020 21:47:38'!
PASSED!

!testRun: #DoorTest #test02onlyonekeycanopenit stamp: 'franco c 12/17/2020 21:47:38'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 21:47:38'!
PASSED!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 21:47:38'!
PASSED!

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 21:47:38'!
PASSED!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 21:47:38'!
PASSED!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 21:47:38'!
PASSED!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 21:47:38'!
FAILURE!

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 21:47:38'!
PASSED!

!testRun: #DoorTest #test0only1keyOpens stamp: 'franco c 12/17/2020 21:47:38'!
PASSED!

!testRun: #DoorTest #test10CantOpenDoorifdoesnthaveKey stamp: 'franco c 12/17/2020 21:47:38'!
PASSED!

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 21:47:38'!
ERROR!

!testRun: #DoorTest #test12CantPassthroughdoorwithelementonotherside stamp: 'franco c 12/17/2020 21:47:38'!
FAILURE!

!testRun: #DoorTest #test13CantPassthroughdoorIfOutOfBoundsOnOtherSide stamp: 'franco c 12/17/2020 21:47:38'!
FAILURE!

!testRun: #DoorTest #test15CanPassthroughdoorandBack stamp: 'franco c 12/17/2020 21:47:38'!
ERROR!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 21:48:06'!
FAILURE!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 21:48:06'!
FAILURE!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 21:48:39'!
FAILURE!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 21:48:39'!
FAILURE!
!Door class methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:48:59' prior: 50929646!
doorisClosedError
	^'cant move through close door'! !

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 21:49:08'!
FAILURE!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 21:49:08'!
FAILURE!
!Closed methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:49:46' prior: 50932635 overrides: 50932624!
canbepassed
	^Door error: Door class doorisClosedError.! !

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 21:49:52'!
FAILURE!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 21:49:52'!
FAILURE!
!Closed methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:50:21' prior: 50932739 overrides: 50932624!
canbepassed
	^Door signalClosed .! !

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 21:50:30'!
FAILURE!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 21:50:30'!
FAILURE!
!Closed methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:51:25' prior: 50932751 overrides: 50932624!
canbepassed
	^false .! !
!Open methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:51:31' prior: 50932639 overrides: 50932624!
canbepassed
	^true.! !
!Door methodsFor: 'as yet unclassified' stamp: 'franco c 12/17/2020 21:51:54' prior: 50932620!
canbePassed
	^(state canbePassed) ifFalse:[self signalClosed ]! !

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 21:52:01'!
FAILURE!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 21:52:01'!
FAILURE!
!Room methodsFor: 'contents' stamp: 'franco c 12/17/2020 21:53:51' prior: 50932643!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove anObject|
	
	toMove := self at: aSourcePosition.
	
	(contents includesKey: aTargetPosition) ifTrue:[ ((self at: aTargetPosition) class = Door) ifTrue:[ 
			anObject:=self at: aTargetPosition.
			( anObject isOpen) ifTrue:[^anObject checkIfPlayercanMove: toMove in: self from: aSourcePosition ] ifFalse:[^anObject signalClosed]]].
	self at: aTargetPosition put: toMove.
	contents removeKey: aSourcePosition.
! !
!Door methodsFor: 'getters' stamp: 'franco c 12/17/2020 21:54:32' prior: 50931927!
isOpen
	^state canbepassed .! !

!testRun: #DoorTest #test014CanCloseDoorifhasKey stamp: 'franco c 12/17/2020 21:54:35'!
PASSED!

!testRun: #DoorTest #test01keyMustBeaKey stamp: 'franco c 12/17/2020 21:54:35'!
PASSED!

!testRun: #DoorTest #test02onlyonekeycanopenit stamp: 'franco c 12/17/2020 21:54:35'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 21:54:35'!
PASSED!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 21:54:35'!
PASSED!

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 21:54:35'!
PASSED!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 21:54:35'!
PASSED!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 21:54:35'!
PASSED!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 21:54:35'!
PASSED!

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 21:54:35'!
PASSED!

!testRun: #DoorTest #test0only1keyOpens stamp: 'franco c 12/17/2020 21:54:35'!
PASSED!

!testRun: #DoorTest #test10CantOpenDoorifdoesnthaveKey stamp: 'franco c 12/17/2020 21:54:35'!
PASSED!

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 21:54:35'!
PASSED!

!testRun: #DoorTest #test12CantPassthroughdoorwithelementonotherside stamp: 'franco c 12/17/2020 21:54:35'!
PASSED!

!testRun: #DoorTest #test13CantPassthroughdoorIfOutOfBoundsOnOtherSide stamp: 'franco c 12/17/2020 21:54:35'!
PASSED!

!testRun: #DoorTest #test15CanPassthroughdoorandBack stamp: 'franco c 12/17/2020 21:54:35'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'franco c 12/17/2020 21:56:18'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'franco c 12/17/2020 21:56:18'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'franco c 12/17/2020 21:56:18'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'franco c 12/17/2020 21:56:18'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'franco c 12/17/2020 21:56:18'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'franco c 12/17/2020 21:56:18'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'franco c 12/17/2020 21:56:18'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'franco c 12/17/2020 21:56:18'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #DoorTest #test014CanCloseDoorifhasKey stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #DoorTest #test01keyMustBeaKey stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #DoorTest #test02onlyonekeycanopenit stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #DoorTest #test03room2mustbeRoom stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #DoorTest #test04room1mustbeRoom stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #DoorTest #test05RoomatinitializedPositionHasDoor stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #DoorTest #test06DoorcantBeTaken stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #DoorTest #test07DoorcantBeputInsideNonPOrtableObject stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #DoorTest #test08cantPassIfDoorIsClosed stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #DoorTest #test09CanOpenDoorifhasKey stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #DoorTest #test0only1keyOpens stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #DoorTest #test10CantOpenDoorifdoesnthaveKey stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #DoorTest #test11CanPassthroughdoor stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #DoorTest #test12CantPassthroughdoorwithelementonotherside stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #DoorTest #test13CantPassthroughdoorIfOutOfBoundsOnOtherSide stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #DoorTest #test15CanPassthroughdoorandBack stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'franco c 12/17/2020 21:56:19'!
PASSED!

----QUIT----(17 December 2020 21:56:27) CuisUniversity-4365.image priorSource: 19002158!