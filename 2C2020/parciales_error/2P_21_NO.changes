----STARTUP---- (10 December 2020 15:00:44) as /home/franco/Documents/linux64/CuisUniversity-4365.image!


!classRemoval: #PointsPortableObject stamp: 'franco c 12/10/2020 15:03:12'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #NoPointsPortableObject stamp: 'franco c 12/10/2020 15:03:13'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #PortableObject stamp: 'franco c 12/10/2020 15:03:14'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #Door stamp: 'franco c 12/10/2020 15:03:15'!
StageObject subclass: #Door
	instanceVariableNames: 'key state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #StageObject stamp: 'franco c 12/10/2020 15:03:17'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #PlayableCharacter stamp: 'franco c 12/10/2020 15:03:18'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'name backpack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #OpenedDoorState stamp: 'franco c 12/10/2020 15:03:19'!
DoorState subclass: #OpenedDoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #KeyClosedDoorState stamp: 'franco c 12/10/2020 15:03:20'!
DoorState subclass: #KeyClosedDoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #ClosedDoorState stamp: 'franco c 12/10/2020 15:03:21'!
DoorState subclass: #ClosedDoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #DoorState stamp: 'franco c 12/10/2020 15:03:23'!
Object subclass: #DoorState
	instanceVariableNames: 'door'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #Backpack stamp: 'franco c 12/10/2020 15:03:24'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #DoorTest stamp: 'franco c 12/10/2020 15:03:25'!
TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #BackpackTest stamp: 'franco c 12/10/2020 15:03:27'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

----End fileIn of /home/franco/Documents/linux64/Parciales/2020-2c/ISW1-2020-2C-2doParcial.st----!

----QUIT----(10 December 2020 15:48:32) CuisUniversity-4365.image priorSource: 18637042!

----STARTUP---- (10 December 2020 17:26:23) as /home/franco/Documents/linux64/CuisUniversity-4365.image!


!classRemoval: #PointsPortableObject stamp: 'franco c 12/10/2020 17:26:41'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #NoPointsPortableObject stamp: 'franco c 12/10/2020 17:26:42'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PortableObject stamp: 'franco c 12/10/2020 17:26:44'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #StageObject stamp: 'franco c 12/10/2020 17:26:45'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacterHeading stamp: 'franco c 12/10/2020 17:26:46'!
Object subclass: #PlayableCharacterHeading
	instanceVariableNames: 'cardinalPoint forwardPoint rightHeading leftHeading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacter stamp: 'franco c 12/10/2020 17:26:47'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #Backpack stamp: 'franco c 12/10/2020 17:26:49'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacterTest stamp: 'franco c 12/10/2020 17:26:50'!
TestCase subclass: #PlayableCharacterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #BackpackTest stamp: 'franco c 12/10/2020 17:26:52'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

----End fileIn of /home/franco/Documents/linux64/Parciales/2020-2c/ISW1-2020-2C-2doParcial.st----!

TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: #'ISW1-2020-2C-2doParcial' stamp: 'franco c 12/10/2020 17:50:31'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: #'ISW1-2020-2C-2doParcial' stamp: 'franco c 12/10/2020 17:53:59'!
Object subclass: #Room
	instanceVariableNames: 'grid height width'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'nil' stamp: 'franco c 12/10/2020 17:53:20'!
test01
	self
	should:[Room withWidth: 0 withHeight: 5]
	raise:Error
	withMessageText: Room widthandheightshouldbepositive! !
!Room class methodsFor: 'nil' stamp: 'franco c 12/10/2020 17:57:51'!
withWidth: aWidth withHeight: aHeight
	((aWidth isInteger) & (aHeight isInteger)) ifFalse:[ ^self heightandwidthshouldbepositive].
	((aWidth >0) & (aHeight >0)) ifFalse:[ ^self heightandwidthshouldbepositive].! !
!Room class methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 17:58:17' prior: 50916004!
withWidth: aWidth withHeight: aHeight
	((aWidth isInteger) & (aHeight isInteger)) ifFalse:[ ^self widthandheightshouldbepositive].
	((aWidth >0) & (aHeight >0)) ifFalse:[ ^self widthandheightshouldbepositive].! !
!Room class methodsFor: 'nil' stamp: 'franco c 12/10/2020 17:58:38'!
widthandheightshouldbepositive
	^'cant have negative or 0 index for size'! !

!testRun: #RoomTest #test01 stamp: 'franco c 12/10/2020 17:58:46'!
FAILURE!
!Room class methodsFor: 'nil' stamp: 'franco c 12/10/2020 18:00:07'!
signalInvalidIndexes
	^self error: self widthandheightshouldbepositive .! !
!Room class methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:00:18' prior: 50916014!
withWidth: aWidth withHeight: aHeight
	((aWidth isInteger) & (aHeight isInteger)) ifFalse:[ ^self signalInvalidIndexes].
	((aWidth >0) & (aHeight >0)) ifFalse:[ ^self signalInvalidIndexes].! !

!testRun: #RoomTest #test01 stamp: 'franco c 12/10/2020 18:00:20'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:00:36'!
test02
	self
	should:[Room withWidth: 0 withHeight: '']
	raise:Error
	withMessageText: Room widthandheightshouldbepositive! !

!testRun: #RoomTest #test02 stamp: 'franco c 12/10/2020 18:00:37'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'franco c 12/10/2020 18:00:37'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'franco c 12/10/2020 18:00:37'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:01:00'!
test02WidhtandHeightshouldBeNumbers
	self
	should:[Room withWidth: 0 withHeight: '']
	raise:Error
	withMessageText: Room widthandheightshouldbepositive! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:01:17'!
test01WidthandHeightShouldBepositive
	self
	should:[Room withWidth: 0 withHeight: 5]
	raise:Error
	withMessageText: Room widthandheightshouldbepositive! !

!methodRemoval: RoomTest #test02 stamp: 'franco c 12/10/2020 18:01:21'!
test02
	self
	should:[Room withWidth: 0 withHeight: '']
	raise:Error
	withMessageText: Room widthandheightshouldbepositive!

!methodRemoval: RoomTest #test01 stamp: 'franco c 12/10/2020 18:01:23'!
test01
	self
	should:[Room withWidth: 0 withHeight: 5]
	raise:Error
	withMessageText: Room widthandheightshouldbepositive!

!testRun: #RoomTest #test01WidthandHeightShouldBepositive stamp: 'franco c 12/10/2020 18:01:28'!
PASSED!

!testRun: #RoomTest #test02WidhtandHeightshouldBeNumbers stamp: 'franco c 12/10/2020 18:01:28'!
PASSED!
!RoomTest methodsFor: 'nil' stamp: 'franco c 12/10/2020 18:02:52'!
addtoMapinWidthIndex: aWidthIndex heightIndex: aHeightIndex object: anObject
	! !
!Room class methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:04:50' prior: 50916036!
withWidth: aWidth withHeight: aHeight
	((aWidth isInteger) & (aHeight isInteger)) ifFalse:[ ^self signalInvalidIndexes].
	((aWidth >0) & (aHeight >0)) ifFalse:[ ^self signalInvalidIndexes].
	self new initForWidth: aWidth andheight: aHeight.! !
!Room methodsFor: 'nil' stamp: 'franco c 12/10/2020 18:05:30'!
initForWidth: aWidth andheight: aHeight
	height:= aHeight.
	width := aWidth.
	grid:= Dictionary new.! !

!methodRemoval: RoomTest #addtoMapinWidthIndex:heightIndex:object: stamp: 'franco c 12/10/2020 18:06:35'!
addtoMapinWidthIndex: aWidthIndex heightIndex: aHeightIndex object: anObject
	!
!RoomTest methodsFor: 'nil' stamp: 'franco c 12/10/2020 18:08:59'!
test03CantaddItemsOutOfBounds
	|room|
	room:= Room withWidth: 5 withHeight: 3.
	self
	should: [room addtoMapinWidthIndex: 6 heightIndex: 2 object: '']
	raise:Error
	withMessageText: Room cantadditemsoutofBounds! !
!Room class methodsFor: 'nil' stamp: 'franco c 12/10/2020 18:09:41'!
cantadditemsoutofBounds
	^'the item you are tryin to add is out of Bounds'! !
!Room class methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:09:43' prior: 50916132!
cantadditemsoutofBounds
	^'the item you are trying to add is out of Bounds'! !
!Room methodsFor: 'nil' stamp: 'franco c 12/10/2020 18:10:07'!
signaloutOfBounds
	^self error: self class cantadditemsoutofBounds.! !
!Room methodsFor: 'nil' stamp: 'franco c 12/10/2020 18:10:36'!
addtoMapinWidthIndex: aWidth heightIndex: aHeight object: anObject! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:10:54' prior: 50916148!
addtoMapinWidthIndex: aWidth heightIndex: aHeight object: anObject
! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:11:09' prior: 50916154!
addtoMapinWidthIndex: aWidth heightIndex: aHeight object: anObject
	^self signaloutOfBounds.! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:12:09' prior: 50916160!
addtoMapinWidthIndex: aWidth heightIndex: aHeight object: anObject
	((aWidth isInteger) & (aHeight isInteger)) ifFalse:[ ^self signaloutOfBounds].
	((aWidth >0) & (aHeight >0)) ifFalse:[ ^self signaloutOfBounds].
	
! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:13:55' prior: 50916166!
addtoMapinWidthIndex: aWidth heightIndex: aHeight object: anObject
	((aWidth isInteger) & (aHeight isInteger)) ifFalse:[ ^self error: self class  ].
	((aWidth <= width) & (aHeight <= height)) ifFalse:[ ^self signaloutOfBounds].
	
! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:14:19' prior: 50916176!
addtoMapinWidthIndex: aWidth heightIndex: aHeight object: anObject
	((aWidth isInteger) & (aHeight isInteger)) ifFalse:[ ^self error: self class widthandheightshouldbepositive ].
	((aWidth <= width) & (aHeight <= height)) ifFalse:[ ^self signaloutOfBounds].
	
! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:14:38' prior: 50916187!
addtoMapinWidthIndex: aWidth heightIndex: aHeight object: anObject
	((aWidth isInteger) & (aHeight isInteger)) ifFalse:[ ^self error: self class widthandheightshouldbepositive ].
	((aWidth <= width) & (aHeight <= height)) ifFalse:[ ^self signaloutOfBounds].
	
	
! !

!testRun: #RoomTest #test03CantaddItemsOutOfBounds stamp: 'franco c 12/10/2020 18:14:48'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:15:27' prior: 50916199!
addtoMapinWidthIndex: aWidth heightIndex: aHeight object: anObject
	((aWidth isInteger) & (aHeight isInteger)) ifFalse:[ ^self signaloutOfBounds ].
	((aWidth <= width) & (aHeight <= height)) ifFalse:[ ^self signaloutOfBounds].
	
	
! !

!testRun: #RoomTest #test03CantaddItemsOutOfBounds stamp: 'franco c 12/10/2020 18:15:30'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:16:51' prior: 50916123!
test03CantaddItemsOutOfBounds
	|room|
	room:= Room withWidth: 5 withHeight: 3.
	self
	should: [room addtoMapinWidthIndex: 6 heightIndex: 2 object: 9]
	raise:Error
	withMessageText: Room cantadditemsoutofBounds! !

!testRun: #RoomTest #test03CantaddItemsOutOfBounds stamp: 'franco c 12/10/2020 18:16:53'!
FAILURE!
!Room class methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:17:20' prior: 50916138!
cantadditemsoutofBounds
	^'t'! !

!testRun: #RoomTest #test03CantaddItemsOutOfBounds stamp: 'franco c 12/10/2020 18:17:26'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:18:30' prior: 50916228!
test03CantaddItemsOutOfBounds
	|room|
	room:= Room withWidth: 5 withHeight: 3.
	self
	should: [room addtoMapinWidthIndex: 6 heightIndex: 10 object: 9]
	raise:Error
	withMessageText: Room cantadditemsoutofBounds! !

!testRun: #RoomTest #test03CantaddItemsOutOfBounds stamp: 'franco c 12/10/2020 18:18:31'!
FAILURE!
!Room class methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:19:22' prior: 50916101!
withWidth: aWidth withHeight: aHeight
	((aWidth isInteger) & (aHeight isInteger)) ifFalse:[ ^self signalInvalidIndexes].
	((aWidth >0) & (aHeight >0)) ifFalse:[ ^self signalInvalidIndexes].
	^self new initForWidth: aWidth andheight: aHeight.! !

!testRun: #RoomTest #test03CantaddItemsOutOfBounds stamp: 'franco c 12/10/2020 18:19:28'!
PASSED!

!testRun: #RoomTest #test01WidthandHeightShouldBepositive stamp: 'franco c 12/10/2020 18:19:28'!
PASSED!

!testRun: #RoomTest #test02WidhtandHeightshouldBeNumbers stamp: 'franco c 12/10/2020 18:19:28'!
PASSED!

!testRun: #RoomTest #test03CantaddItemsOutOfBounds stamp: 'franco c 12/10/2020 18:19:28'!
PASSED!
!Room class methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:19:48' prior: 50916241!
cantadditemsoutofBounds
	^'Item you are trying to add is out of Bounds'! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:23:29' prior: 50916214!
addtoMapinWidthIndex: aWidth heightIndex: aHeight object: anObject
	|point|
	((aWidth isInteger) & (aHeight isInteger)) ifFalse:[ ^self signaloutOfBounds ].
	((aWidth <= width) & (aHeight <= height)) ifFalse:[ ^self signaloutOfBounds].
	point:= aWidth @aHeight .		
	grid at: point ifAbsent: [^self signalPositionOcuppied].			
	
	
	
! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:25:03' prior: 50916292!
addtoMapinWidthIndex: aWidth heightIndex: aHeight object: anObject
	|point|
	((aWidth isInteger) & (aHeight isInteger)) ifFalse:[ ^self signaloutOfBounds ].
	((aWidth <= width) & (aHeight <= height)) ifFalse:[ ^self signaloutOfBounds].
	point:= aWidth @aHeight .		
	"falta chequear que solo objetos permitidos se eestan agregando"
	grid at: point ifAbsent: [^grid at: point put: anObject].			
	^self signalPositionOcuppied.
	
	
	
! !
!Room methodsFor: 'nil' stamp: 'franco c 12/10/2020 18:25:25'!
signalPositionOcuppied
	^self error: self class positionOccupiedDescription! !
!Room class methodsFor: 'nil' stamp: 'franco c 12/10/2020 18:25:46'!
positionOccupiedDescription
	^'position already occupied'! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:26:37'!
test04CantaddItemswithnonintegerindexes
	|room|
	room:= Room withWidth: 5 withHeight: 3.
	self
	should: [room addtoMapinWidthIndex: 6 heightIndex: 10 object: 9]
	raise:Error
	withMessageText: Room cantadditemsoutofBounds! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:26:48' prior: 50916332!
test04CantaddItemswithnonintegerindexes
	|room|
	room:= Room withWidth: 5 withHeight: 3.
	self
	should: [room addtoMapinWidthIndex: '' heightIndex: 10 object: 9]
	raise:Error
	withMessageText: Room cantadditemsoutofBounds! !

!testRun: #RoomTest #test04CantaddItemswithnonintegerindexes stamp: 'franco c 12/10/2020 18:26:50'!
PASSED!

!testRun: #RoomTest #test01WidthandHeightShouldBepositive stamp: 'franco c 12/10/2020 18:26:50'!
PASSED!

!testRun: #RoomTest #test02WidhtandHeightshouldBeNumbers stamp: 'franco c 12/10/2020 18:26:50'!
PASSED!

!testRun: #RoomTest #test03CantaddItemsOutOfBounds stamp: 'franco c 12/10/2020 18:26:50'!
PASSED!

!testRun: #RoomTest #test04CantaddItemswithnonintegerindexes stamp: 'franco c 12/10/2020 18:26:50'!
PASSED!
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:27:06' prior: 50916306!
addtoMapinWidthIndex: aWidth heightIndex: aHeight object: anObject
	|point|
	((aWidth isInteger) & (aHeight isInteger)) ifFalse:[ ^self signaloutOfBounds ].
	((0<aWidth <= width) & (0<aHeight <= height)) ifFalse:[ ^self signaloutOfBounds].
	point:= aWidth @aHeight .		
	"falta chequear que solo objetos permitidos se eestan agregando"
	grid at: point ifAbsent: [^grid at: point put: anObject].			
	^self signalPositionOcuppied.
	
	
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:28:12'!
test05ObjectCantBeaddedatanOccupiedPos
	|room|
	room:= Room withWidth: 5 withHeight: 3.
	room addtoMapinWidthIndex: 2 heightIndex: 2 object: 'anObject'.
	
	! !

!testRun: #RoomTest #test05ObjectCantBeaddedatanOccupiedPos stamp: 'franco c 12/10/2020 18:28:21'!
ERROR!

!testRun: #RoomTest #test05ObjectCantBeaddedatanOccupiedPos stamp: 'franco c 12/10/2020 18:28:21'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:28:50' prior: 50916387!
test05ObjectCantBeaddedatanOccupiedPos
	|room|
	room:= Room withWidth: 5 withHeight: 3.
	room addtoMapinWidthIndex: 2 heightIndex: 2 object: 'anObject'.
	self assert: true equals:true.
	! !

!testRun: #RoomTest #test05ObjectCantBeaddedatanOccupiedPos stamp: 'franco c 12/10/2020 18:28:51'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:30:10' prior: 50916370!
addtoMapinWidthIndex: aWidth heightIndex: aHeight object: anObject
	|point|
	((aWidth isInteger) & (aHeight isInteger)) ifFalse:[ ^self signaloutOfBounds ].
	((0<aWidth) & (aWidth<= width) & (0<aHeight) & (aHeight<= height)) ifFalse:[ ^self signaloutOfBounds].
	point:= aWidth @aHeight .		
	"falta chequear que solo objetos permitidos se eestan agregsando"
	grid at: point ifAbsent: [^grid at: point put: anObject].			
	^self signalPositionOcuppied.
	
	
	
! !

!testRun: #RoomTest #test05ObjectCantBeaddedatanOccupiedPos stamp: 'franco c 12/10/2020 18:30:13'!
PASSED!

!testRun: #RoomTest #test01WidthandHeightShouldBepositive stamp: 'franco c 12/10/2020 18:30:13'!
PASSED!

!testRun: #RoomTest #test02WidhtandHeightshouldBeNumbers stamp: 'franco c 12/10/2020 18:30:13'!
PASSED!

!testRun: #RoomTest #test03CantaddItemsOutOfBounds stamp: 'franco c 12/10/2020 18:30:14'!
PASSED!

!testRun: #RoomTest #test04CantaddItemswithnonintegerindexes stamp: 'franco c 12/10/2020 18:30:14'!
PASSED!

!testRun: #RoomTest #test05ObjectCantBeaddedatanOccupiedPos stamp: 'franco c 12/10/2020 18:30:14'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:30:57' prior: 50916402!
test05ObjectCantBeaddedatanOccupiedPos
	|room|
	room:= Room withWidth: 5 withHeight: 3.
	room addtoMapinWidthIndex: 2 heightIndex: 2 object: 'anObject'.
	self should:[room addtoMapinWidthIndex: 2 heightIndex: 2 object: 'anObject'.]
	raise: Error
	withMessageText: Room ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:31:09' prior: 50916453!
test05ObjectCantBeaddedatanOccupiedPos
	|room|
	room:= Room withWidth: 5 withHeight: 3.
	room addtoMapinWidthIndex: 2 heightIndex: 2 object: 'anObject'.
	self should:[room addtoMapinWidthIndex: 2 heightIndex: 2 object: 'anObject'.]
	raise: Error
	withMessageText: Room positionOccupiedDescription ! !

!testRun: #RoomTest #test05ObjectCantBeaddedatanOccupiedPos stamp: 'franco c 12/10/2020 18:31:10'!
PASSED!

!testRun: #RoomTest #test01WidthandHeightShouldBepositive stamp: 'franco c 12/10/2020 18:31:10'!
PASSED!

!testRun: #RoomTest #test02WidhtandHeightshouldBeNumbers stamp: 'franco c 12/10/2020 18:31:10'!
PASSED!

!testRun: #RoomTest #test03CantaddItemsOutOfBounds stamp: 'franco c 12/10/2020 18:31:10'!
PASSED!

!testRun: #RoomTest #test04CantaddItemswithnonintegerindexes stamp: 'franco c 12/10/2020 18:31:10'!
PASSED!

!testRun: #RoomTest #test05ObjectCantBeaddedatanOccupiedPos stamp: 'franco c 12/10/2020 18:31:10'!
PASSED!

StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObject category: #'ISW1-2020-2C-2doParcial' stamp: 'franco c 12/10/2020 18:32:24'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'no messages' stamp: 'franco c 12/10/2020 18:32:59'!
assertCanAddTo: aBackpack

	self signalCantBeadded! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:33:04' prior: 50916511!
assertCanAddTo: aBackpack

	^self signalCantBeadded! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:33:11'!
signalCantBeadded! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:33:43' prior: 50916522!
signalCantBeadded
	^self error: self class cantBetakenError! !
!NonPortableObject class methodsFor: 'nil' stamp: 'franco c 12/10/2020 18:34:06'!
cantBetakenError
	^'Non portable object is non portable'! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:36:12'!
test06OnlyValidatedObjectCanBeadded
	|room|
	room:= Room withWidth: 5 withHeight: 3.
	room addtoMapinWidthIndex: 2 heightIndex: 2 object: 'anObject'.
	self should:[room addtoMapinWidthIndex: 2 heightIndex: 2 object: 'anObject'.]
	raise: Error
	withMessageText: Room positionOccupiedDescription ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:36:30' prior: 50916537!
test06OnlyValidatedObjectCanBeadded
	|room|
	room:= Room withWidth: 5 withHeight: 3.
	
	self should:[room addtoMapinWidthIndex: 2 heightIndex: 2 object: 'anObject'.]
	raise: Error
	withMessageText: Room positionOccupiedDescription ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:36:44' prior: 50916550!
test06OnlyValidatedObjectCanBeadded
	|room|
	room:= Room withWidth: 5 withHeight: 3.
	
	self should:[room addtoMapinWidthIndex: 2 heightIndex: 2 object: 'anObject'.]
	raise: Error
	withMessageText: Room nonValidObjecterror! !
!Room class methodsFor: 'nil' stamp: 'franco c 12/10/2020 18:37:02'!
NonPortableObject
	^'Item you are trying to add is not valid'! !
!Room methodsFor: 'nil' stamp: 'franco c 12/10/2020 18:37:47'!
singnalOnlyalidObjects
	^self error: self class NonPortableObject! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:37:55'!
signalOnlyalidObjects
	^self error: self class NonPortableObject! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:38:00'!
signalOnlyvalidObjects
	^self error: self class NonPortableObject! !

!methodRemoval: Room #signalOnlyalidObjects stamp: 'franco c 12/10/2020 18:38:02'!
signalOnlyalidObjects
	^self error: self class NonPortableObject!

!methodRemoval: Room #singnalOnlyalidObjects stamp: 'franco c 12/10/2020 18:38:04'!
singnalOnlyalidObjects
	^self error: self class NonPortableObject!
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:38:49' prior: 50916415!
addtoMapinWidthIndex: aWidth heightIndex: aHeight object: anObject
	|point|
	((aWidth isInteger) & (aHeight isInteger)) ifFalse:[ ^self signaloutOfBounds ].
	((0<aWidth) & (aWidth<= width) & (0<aHeight) & (aHeight<= height)) ifFalse:[ ^self signaloutOfBounds].
	point:= aWidth @aHeight .		
	"falta chequear que solo objetos permitidos se eestan agregsando"
	self assertElementisValid.
	grid at: point ifAbsent: [^grid at: point put: anObject].			
	^self signalPositionOcuppied.
	
	
	
! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:39:13' prior: 50916600!
addtoMapinWidthIndex: aWidth heightIndex: aHeight object: anObject
	|point|
	((aWidth isInteger) & (aHeight isInteger)) ifFalse:[ ^self signaloutOfBounds ].
	((0<aWidth) & (aWidth<= width) & (0<aHeight) & (aHeight<= height)) ifFalse:[ ^self signaloutOfBounds].
	point:= aWidth @aHeight .		
	"falta chequear que solo objetos permitidos se eestan agregsando"
	self assertObjectisValid: anObject.
	grid at: point ifAbsent: [^grid at: point put: anObject].			
	^self signalPositionOcuppied.
	
	
	
! !
!Room methodsFor: 'nil' stamp: 'franco c 12/10/2020 18:39:31'!
assertObjectisValid:anObject! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:41:01' prior: 50916637!
assertObjectisValid: anObject
	(anObject class) = PortableObject ifTrue:[^true].
	(anObject class) = NonPortableObject ifTrue:[^true].
	(anObject class) = PlayableCharacter ifTrue:[^true].
	^self signalOnlyvalidObjects .! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:41:02' prior: 50916641!
assertObjectisValid: anObject
	(anObject class) = PortableObject ifTrue:[^true].
	(anObject class) = NonPortableObject ifTrue:[^true].
	(anObject class) = PlayableCharacter ifTrue:[^true].
	^self signalOnlyvalidObjects.! !
!Room class methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:41:52'!
NotValidObject
	^'Item you are trying to add is not valid'! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:42:00' prior: 50916585!
signalOnlyvalidObjects
	^self error: self class NotValidObject! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:42:12' prior: 50916561!
test06OnlyValidatedObjectCanBeadded
	|room|
	room:= Room withWidth: 5 withHeight: 3.
	
	self should:[room addtoMapinWidthIndex: 2 heightIndex: 2 object: 'anObject'.]
	raise: Error
	withMessageText: Room NotValidObject.! !

!testRun: #RoomTest #test06OnlyValidatedObjectCanBeadded stamp: 'franco c 12/10/2020 18:42:16'!
PASSED!

!testRun: #RoomTest #test01WidthandHeightShouldBepositive stamp: 'franco c 12/10/2020 18:42:16'!
PASSED!

!testRun: #RoomTest #test02WidhtandHeightshouldBeNumbers stamp: 'franco c 12/10/2020 18:42:16'!
PASSED!

!testRun: #RoomTest #test03CantaddItemsOutOfBounds stamp: 'franco c 12/10/2020 18:42:16'!
PASSED!

!testRun: #RoomTest #test04CantaddItemswithnonintegerindexes stamp: 'franco c 12/10/2020 18:42:16'!
PASSED!

!testRun: #RoomTest #test05ObjectCantBeaddedatanOccupiedPos stamp: 'franco c 12/10/2020 18:42:16'!
ERROR!

!testRun: #RoomTest #test06OnlyValidatedObjectCanBeadded stamp: 'franco c 12/10/2020 18:42:16'!
PASSED!

!testRun: #RoomTest #test05ObjectCantBeaddedatanOccupiedPos stamp: 'franco c 12/10/2020 18:42:16'!
ERROR!

!testRun: #RoomTest #test06OnlyValidatedObjectCanBeadded stamp: 'franco c 12/10/2020 18:43:27'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:43:47' prior: 50916465!
test05ObjectCantBeaddedatanOccupiedPos
	|room|
	room:= Room withWidth: 5 withHeight: 3.
	room addtoMapinWidthIndex: 2 heightIndex: 2 object: PortableObject  new.
	self should:[room addtoMapinWidthIndex: 2 heightIndex: 2 object: 'anObject'.]
	raise: Error
	withMessageText: Room positionOccupiedDescription ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:43:59' prior: 50916712!
test05ObjectCantBeaddedatanOccupiedPos
	|room|
	room:= Room withWidth: 5 withHeight: 3.
	room addtoMapinWidthIndex: 2 heightIndex: 2 object: PortableObject  new.
	self should:[room addtoMapinWidthIndex: 2 heightIndex: 2 object: PortableObject new.]
	raise: Error
	withMessageText: Room positionOccupiedDescription ! !

!testRun: #RoomTest #test05ObjectCantBeaddedatanOccupiedPos stamp: 'franco c 12/10/2020 18:44:02'!
PASSED!

!testRun: #RoomTest #test01WidthandHeightShouldBepositive stamp: 'franco c 12/10/2020 18:44:06'!
PASSED!

!testRun: #RoomTest #test02WidhtandHeightshouldBeNumbers stamp: 'franco c 12/10/2020 18:44:06'!
PASSED!

!testRun: #RoomTest #test03CantaddItemsOutOfBounds stamp: 'franco c 12/10/2020 18:44:06'!
PASSED!

!testRun: #RoomTest #test04CantaddItemswithnonintegerindexes stamp: 'franco c 12/10/2020 18:44:06'!
PASSED!

!testRun: #RoomTest #test05ObjectCantBeaddedatanOccupiedPos stamp: 'franco c 12/10/2020 18:44:06'!
PASSED!

!testRun: #RoomTest #test06OnlyValidatedObjectCanBeadded stamp: 'franco c 12/10/2020 18:44:06'!
PASSED!

StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name weight container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObject category: #'ISW1-2020-2C-2doParcial' stamp: 'franco c 12/10/2020 18:45:31'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name weight container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject class methodsFor: 'nil' stamp: 'franco c 12/10/2020 18:45:52' overrides: 16883149!
initialize! !
!NonPortableObject class methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:46:02' prior: 50916776 overrides: 16883149!
initialize
	^self new init! !
!NonPortableObject methodsFor: 'nil' stamp: 'franco c 12/10/2020 18:46:07'!
init! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:46:18' prior: 50916785!
init
	container:= OrderedCollection  new.! !
!NonPortableObject methodsFor: 'nil' stamp: 'franco c 12/10/2020 18:46:30'!
add: Object! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 18:46:43' prior: 50916793!
add: Object
	container add: Object! !
!Backpack methodsFor: 'adding' stamp: 'franco c 12/10/2020 19:03:45' prior: 50915536!
add: aPortableObject
	
	aPortableObject agregateTo: self.
	
	
	! !
!PortableObject methodsFor: 'nil' stamp: 'franco c 12/10/2020 19:05:59'!
agregateTo: aBackpack
	aBackpack directAdd: self.! !
!Backpack methodsFor: 'nil' stamp: 'franco c 12/10/2020 19:06:33'!
directAdd: aPortableObject
	! !
!Backpack methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 19:06:51' prior: 50916810!
directAdd: aPortableObject
	aPortableObject assertCanAddTo: self.
	container add: aPortableObject.
	! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'franco c 12/10/2020 19:07:01'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'franco c 12/10/2020 19:07:01'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'franco c 12/10/2020 19:07:01'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'franco c 12/10/2020 19:07:01'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'franco c 12/10/2020 19:07:01'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'franco c 12/10/2020 19:07:01'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'franco c 12/10/2020 19:07:01'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'franco c 12/10/2020 19:07:01'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'franco c 12/10/2020 19:07:01'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'franco c 12/10/2020 19:07:01'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'franco c 12/10/2020 19:07:01'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'franco c 12/10/2020 19:07:01'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'franco c 12/10/2020 19:07:01'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'franco c 12/10/2020 19:07:01'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'franco c 12/10/2020 19:07:01'!
PASSED!
!NonPortableObject methodsFor: 'nil' stamp: 'franco c 12/10/2020 19:09:30'!
agregateTo: aBackpack
	container do: [:a | aBackpack add: a].! !
!BackpackTest methodsFor: 'accessing' stamp: 'franco c 12/10/2020 19:13:27'!
test16ShouldAddWeightWhenAddingPortableObjects

	| aBackpack nonportable|
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.
	nonportable := 2.

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals: 20.

! !
!BackpackTest methodsFor: 'accessing' stamp: 'franco c 12/10/2020 19:14:38' prior: 50916884!
test16ShouldAddWeightWhenAddingPortableObjects

	| aBackpack nonportable|
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.
	nonportable :=NonPortableObject  initialize.
	nonportable  add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).

	aBackpack add: (nonportable ).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals: 20.

! !

!testRun: #BackpackTest #test16ShouldAddWeightWhenAddingPortableObjects stamp: 'franco c 12/10/2020 19:14:42'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'franco c 12/10/2020 19:14:42'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'franco c 12/10/2020 19:14:42'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'franco c 12/10/2020 19:14:42'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'franco c 12/10/2020 19:14:42'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'franco c 12/10/2020 19:14:42'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'franco c 12/10/2020 19:14:42'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'franco c 12/10/2020 19:14:42'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'franco c 12/10/2020 19:14:42'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'franco c 12/10/2020 19:14:42'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'franco c 12/10/2020 19:14:42'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'franco c 12/10/2020 19:14:42'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'franco c 12/10/2020 19:14:42'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'franco c 12/10/2020 19:14:42'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'franco c 12/10/2020 19:14:42'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'franco c 12/10/2020 19:14:42'!
PASSED!

!testRun: #BackpackTest #test16ShouldAddWeightWhenAddingPortableObjects stamp: 'franco c 12/10/2020 19:14:42'!
PASSED!
!BackpackTest methodsFor: 'accessing' stamp: 'franco c 12/10/2020 19:14:47' prior: 50916901!
test16ShouldAddWeightWhenAddingPortableObjects

	| aBackpack nonportable|
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.
	nonportable :=NonPortableObject  initialize.
	nonportable  add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).

	aBackpack add: (nonportable).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals: 20.

! !
!BackpackTest methodsFor: 'accessing' stamp: 'franco c 12/10/2020 19:15:20'!
test17NonportableinsideNonPortable

	| aBackpack nonportable|
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.
	nonportable :=NonPortableObject  initialize.
	nonportable  add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	
	aBackpack add: (nonportable).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals: 20.

! !
!BackpackTest methodsFor: 'accessing' stamp: 'franco c 12/10/2020 19:15:53'!
test16NonportableisddedCorrectly

	| aBackpack nonportable|
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.
	nonportable :=NonPortableObject  initialize.
	nonportable  add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	nonportable add:nonportable.
	aBackpack add: (nonportable).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals: 20.

! !
!BackpackTest methodsFor: 'accessing' stamp: 'franco c 12/10/2020 19:16:14' prior: 50917021!
test16NonportableisddedCorrectly

	| aBackpack nonportable|
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.
	nonportable :=NonPortableObject  initialize.
	nonportable  add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	nonportable add:nonportable.
	aBackpack add: (nonportable).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalWeight equals:30.

! !

!testRun: #BackpackTest #test16NonportableisddedCorrectly stamp: 'franco c 12/10/2020 19:16:15'!
ERROR!
!BackpackTest methodsFor: 'accessing' stamp: 'franco c 12/10/2020 19:17:06' prior: 50917040!
test16NonportableisddedCorrectly

	| aBackpack nonportable|
	aBackpack := Backpack containingUpTo: 50 limitingPointsTo: 100.
	nonportable :=NonPortableObject  initialize.
	nonportable  add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	nonportable add:nonportable.
	aBackpack add: (nonportable).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalWeight equals:30.

! !
!BackpackTest methodsFor: 'accessing' stamp: 'franco c 12/10/2020 19:17:14'!
test18NonportableisddedCorrectly

	| aBackpack nonportable|
	aBackpack := Backpack containingUpTo: 50 limitingPointsTo: 100.
	nonportable :=NonPortableObject  initialize.
	nonportable  add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	nonportable add:nonportable.
	aBackpack add: (nonportable).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalWeight equals:30.

! !

!methodRemoval: BackpackTest #test16NonportableisddedCorrectly stamp: 'franco c 12/10/2020 19:17:23'!
test16NonportableisddedCorrectly

	| aBackpack nonportable|
	aBackpack := Backpack containingUpTo: 50 limitingPointsTo: 100.
	nonportable :=NonPortableObject  initialize.
	nonportable  add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	nonportable add:nonportable.
	aBackpack add: (nonportable).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalWeight equals:30.

!
!BackpackTest methodsFor: 'accessing' stamp: 'franco c 12/10/2020 19:17:43'!
test17Nonportableiaddedcorrectly

	| aBackpack nonportable|
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.
	nonportable :=NonPortableObject  initialize.
	nonportable  add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	
	aBackpack add: (nonportable).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals: 20.

! !

!methodRemoval: BackpackTest #test17NonportableinsideNonPortable stamp: 'franco c 12/10/2020 19:17:49'!
test17NonportableinsideNonPortable

	| aBackpack nonportable|
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.
	nonportable :=NonPortableObject  initialize.
	nonportable  add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	
	aBackpack add: (nonportable).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals: 20.

!
!BackpackTest methodsFor: 'accessing' stamp: 'franco c 12/10/2020 19:18:04'!
test18NonportableinsideNonPortable

	| aBackpack nonportable|
	aBackpack := Backpack containingUpTo: 50 limitingPointsTo: 100.
	nonportable :=NonPortableObject  initialize.
	nonportable  add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	nonportable add:nonportable.
	aBackpack add: (nonportable).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalWeight equals:30.

! !

!methodRemoval: BackpackTest #test18NonportableisddedCorrectly stamp: 'franco c 12/10/2020 19:18:09'!
test18NonportableisddedCorrectly

	| aBackpack nonportable|
	aBackpack := Backpack containingUpTo: 50 limitingPointsTo: 100.
	nonportable :=NonPortableObject  initialize.
	nonportable  add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	nonportable add:nonportable.
	aBackpack add: (nonportable).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalWeight equals:30.

!

!testRun: #BackpackTest #test18NonportableinsideNonPortable stamp: 'franco c 12/10/2020 19:18:19'!
ERROR!
!BackpackTest methodsFor: 'accessing' stamp: 'franco c 12/10/2020 19:18:41' prior: 50917154!
test18NonportableinsideNonPortable

	| aBackpack nonportable|
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	nonportable :=NonPortableObject  initialize.
	nonportable  add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	nonportable add:nonportable.
	aBackpack add: (nonportable).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalWeight equals:30.

! !

!testRun: #BackpackTest #test18NonportableinsideNonPortable stamp: 'franco c 12/10/2020 19:18:42'!
ERROR!
!BackpackTest methodsFor: 'accessing' stamp: 'franco c 12/10/2020 19:19:25' prior: 50917195!
test18NonportableinsideNonPortable

	| aBackpack nonportable|
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	nonportable :=NonPortableObject  initialize.
	nonportable  add: (PointsPortableObject named: 'left-handed hammer' weighing: 1 worth: 5).
	nonportable add:nonportable.
	aBackpack add: (nonportable).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalWeight equals:30.

! !

!testRun: #BackpackTest #test18NonportableinsideNonPortable stamp: 'franco c 12/10/2020 19:19:29'!
ERROR!
!BackpackTest methodsFor: 'accessing' stamp: 'franco c 12/10/2020 19:19:38' prior: 50917217!
test18NonportableinsideNonPortable

	| aBackpack nonportable|
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	nonportable :=NonPortableObject  initialize.
	nonportable  add: (PointsPortableObject named: 'left-handed hammer' weighing: 1 worth: 1).
	nonportable add:nonportable.
	aBackpack add: (nonportable).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalWeight equals:30.

! !

!testRun: #BackpackTest #test18NonportableinsideNonPortable stamp: 'franco c 12/10/2020 19:19:39'!
ERROR!
!BackpackTest methodsFor: 'accessing' stamp: 'franco c 12/10/2020 19:20:21' prior: 50917239!
test18NonportableinsideNonPortable

	| aBackpack nonportable|
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	nonportable :=NonPortableObject  initialize.
	"nonportable  add: (PointsPortableObject named: 'left-handed hammer' weighing: 1 worth: 1)."
	nonportable add:nonportable.
	aBackpack add: (nonportable).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 1.
	self assert: aBackpack totalWeight equals:30.

! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 19:23:10' prior: 50916879!
agregateTo: aBackpack

	(container isEmpty) ifFalse:[container do: [:a | aBackpack add: a]].! !

aBackpack!

!testRun: #BackpackTest #test17Nonportableiaddedcorrectly stamp: 'franco c 12/10/2020 19:26:31'!
PASSED!
!BackpackTest methodsFor: 'accessing' stamp: 'franco c 12/10/2020 19:29:21' prior: 50917261!
test18NonportableinsideNonPortable

	| aBackpack nonportable|
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	nonportable :=NonPortableObject  initialize.
	nonportable  add: (PointsPortableObject named: 'left-handed hammer' weighing: 1 worth: 1).
	nonportable add:nonportable.
	aBackpack add: (nonportable).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 1.
	self assert: aBackpack totalWeight equals:30.

! !

!testRun: #BackpackTest #test18NonportableinsideNonPortable stamp: 'franco c 12/10/2020 19:29:28'!
ERROR!

nonportable!

a!

!testRun: #BackpackTest #test18NonportableinsideNonPortable stamp: 'franco c 12/10/2020 19:31:46'!
ERROR!

!testRun: #BackpackTest #test18NonportableinsideNonPortable stamp: 'franco c 12/10/2020 19:32:04'!
ERROR!

!testRun: #BackpackTest #test18NonportableinsideNonPortable stamp: 'franco c 12/10/2020 19:33:35'!
ERROR!
!BackpackTest methodsFor: 'accessing' stamp: 'franco c 12/10/2020 19:33:46' prior: 50917291!
test18NonportableinsideNonPortable

	| aBackpack nonportable|
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	nonportable :=NonPortableObject  initialize.
	"nonportable  add: (PointsPortableObject named: 'left-handed hammer' weighing: 1 worth: 1)."
	nonportable add:nonportable.
	aBackpack add: (nonportable).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 1.
	self assert: aBackpack totalWeight equals:30.

! !
!BackpackTest methodsFor: 'accessing' stamp: 'franco c 12/10/2020 19:35:58' prior: 50917324!
test18NonportableinsideNonPortable

	| aBackpack nonportable nonportable2|
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	nonportable :=NonPortableObject  initialize.
	nonportable2:=NonPortableObject  initialize.
	nonportable  add: (PointsPortableObject named: 'left-handed hammer' weighing: 1 worth: 1).
	nonportable add:nonportable2.
	aBackpack add: (nonportable).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 1.
	self assert: aBackpack totalWeight equals:30.

! !
!BackpackTest methodsFor: 'accessing' stamp: 'franco c 12/10/2020 19:36:06' prior: 50917343!
test18NonportableinsideNonPortable

	| aBackpack nonportable nonportable2|
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	nonportable :=NonPortableObject  initialize.
	nonportable2:=NonPortableObject  initialize.
	nonportable  add: (PointsPortableObject named: 'left-handed hammer' weighing: 1 worth: 1).
	nonportable add:nonportable2.
	aBackpack add: (nonportable).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals:30.

! !

!testRun: #BackpackTest #test18NonportableinsideNonPortable stamp: 'franco c 12/10/2020 19:36:10'!
FAILURE!

!testRun: #BackpackTest #test18NonportableinsideNonPortable stamp: 'franco c 12/10/2020 19:36:10'!
FAILURE!
!BackpackTest methodsFor: 'accessing' stamp: 'franco c 12/10/2020 19:36:31' prior: 50917364!
test18NonportableinsideNonPortable

	| aBackpack nonportable nonportable2|
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	nonportable :=NonPortableObject  initialize.
	nonportable2:=NonPortableObject  initialize.
	nonportable  add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 1).
	nonportable add:nonportable2.
	aBackpack add: (nonportable).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals:20.

! !

!testRun: #BackpackTest #test18NonportableinsideNonPortable stamp: 'franco c 12/10/2020 19:36:35'!
PASSED!
!BackpackTest methodsFor: 'accessing' stamp: 'franco c 12/10/2020 19:37:06' prior: 50917392!
test18NonportableinsideNonPortable

	| aBackpack nonportable nonportable2|
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	nonportable :=NonPortableObject  initialize.
	nonportable2:=NonPortableObject  initialize.
	nonportable2 add:(PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 1).
	nonportable  add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 1).
	nonportable add:nonportable2.
	aBackpack add: (nonportable).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalWeight equals:30.

! !

!testRun: #BackpackTest #test18NonportableinsideNonPortable stamp: 'franco c 12/10/2020 19:37:09'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'franco c 12/10/2020 19:37:14'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'franco c 12/10/2020 19:37:15'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'franco c 12/10/2020 19:37:15'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'franco c 12/10/2020 19:37:15'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'franco c 12/10/2020 19:37:15'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'franco c 12/10/2020 19:37:15'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'franco c 12/10/2020 19:37:15'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'franco c 12/10/2020 19:37:15'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'franco c 12/10/2020 19:37:15'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'franco c 12/10/2020 19:37:15'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'franco c 12/10/2020 19:37:15'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'franco c 12/10/2020 19:37:15'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'franco c 12/10/2020 19:37:15'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'franco c 12/10/2020 19:37:15'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'franco c 12/10/2020 19:37:15'!
PASSED!

!testRun: #BackpackTest #test16ShouldAddWeightWhenAddingPortableObjects stamp: 'franco c 12/10/2020 19:37:15'!
PASSED!

!testRun: #BackpackTest #test17Nonportableiaddedcorrectly stamp: 'franco c 12/10/2020 19:37:15'!
PASSED!

!testRun: #BackpackTest #test18NonportableinsideNonPortable stamp: 'franco c 12/10/2020 19:37:15'!
PASSED!
!BackpackTest methodsFor: 'accessing' stamp: 'franco c 12/10/2020 19:44:47' prior: 50917416!
test18NonportableinsideNonPortable

	| aBackpack nonportable nonportable2 nonportable3|
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	nonportable :=NonPortableObject  initialize.
	nonportable2:=NonPortableObject  initialize.
	nonportable3:=NonPortableObject  initialize.
	nonportable2 add:(PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 1).
	nonportable  add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 1).
	nonportable add:nonportable2.
	aBackpack add: (nonportable).
	aBackpack add: (nonportable3).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalWeight equals:30.

! !

!testRun: #BackpackTest #test18NonportableinsideNonPortable stamp: 'franco c 12/10/2020 19:44:49'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'franco c 12/10/2020 19:44:49'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'franco c 12/10/2020 19:44:49'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'franco c 12/10/2020 19:44:49'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'franco c 12/10/2020 19:44:49'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'franco c 12/10/2020 19:44:49'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'franco c 12/10/2020 19:44:49'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'franco c 12/10/2020 19:44:49'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'franco c 12/10/2020 19:44:49'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'franco c 12/10/2020 19:44:49'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'franco c 12/10/2020 19:44:49'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'franco c 12/10/2020 19:44:49'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'franco c 12/10/2020 19:44:49'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'franco c 12/10/2020 19:44:49'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'franco c 12/10/2020 19:44:49'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'franco c 12/10/2020 19:44:49'!
PASSED!

!testRun: #BackpackTest #test16ShouldAddWeightWhenAddingPortableObjects stamp: 'franco c 12/10/2020 19:44:49'!
PASSED!

!testRun: #BackpackTest #test17Nonportableiaddedcorrectly stamp: 'franco c 12/10/2020 19:44:49'!
PASSED!

!testRun: #BackpackTest #test18NonportableinsideNonPortable stamp: 'franco c 12/10/2020 19:44:49'!
PASSED!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 19:48:11' prior: 50917281!
agregateTo: aBackpack

	(container isEmpty) ifFalse:[container do: [:a | aBackpack add: a]].
	container:= OrderedCollection new.! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'franco c 12/10/2020 19:48:22'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'franco c 12/10/2020 19:48:22'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'franco c 12/10/2020 19:48:22'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'franco c 12/10/2020 19:48:22'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'franco c 12/10/2020 19:48:22'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'franco c 12/10/2020 19:48:22'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'franco c 12/10/2020 19:48:22'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'franco c 12/10/2020 19:48:22'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'franco c 12/10/2020 19:48:22'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'franco c 12/10/2020 19:48:22'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'franco c 12/10/2020 19:48:22'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'franco c 12/10/2020 19:48:22'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'franco c 12/10/2020 19:48:22'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'franco c 12/10/2020 19:48:22'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'franco c 12/10/2020 19:48:22'!
PASSED!

!testRun: #BackpackTest #test16ShouldAddWeightWhenAddingPortableObjects stamp: 'franco c 12/10/2020 19:48:22'!
PASSED!

!testRun: #BackpackTest #test17Nonportableiaddedcorrectly stamp: 'franco c 12/10/2020 19:48:22'!
PASSED!

!testRun: #BackpackTest #test18NonportableinsideNonPortable stamp: 'franco c 12/10/2020 19:48:22'!
PASSED!
!BackpackTest methodsFor: 'accessing' stamp: 'franco c 12/10/2020 19:48:50'!
test19NonportableisEmptyafterBackpacktakesObjects

	| aBackpack nonportable nonportable2 nonportable3|
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	nonportable :=NonPortableObject  initialize.
	nonportable2:=NonPortableObject  initialize.
	nonportable3:=NonPortableObject  initialize.
	nonportable2 add:(PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 1).
	nonportable  add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 1).
	nonportable add:nonportable2.
	aBackpack add: (nonportable).
	aBackpack add: (nonportable3).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalWeight equals:30.

! !
!BackpackTest methodsFor: 'accessing' stamp: 'franco c 12/10/2020 19:49:08' prior: 50917684!
test19NonportableisEmptyafterBackpacktakesObjects

	| aBackpack nonportable nonportable2 nonportable3|
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	nonportable :=NonPortableObject  initialize.
	nonportable2:=NonPortableObject  initialize.
	nonportable3:=NonPortableObject  initialize.
	nonportable2 add:(PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 1).
	nonportable  add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 1).
	nonportable add:nonportable2.
	aBackpack add: (nonportable).
	aBackpack add: (nonportable3).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalWeight equals:30.
	

! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 19:49:30' prior: 50917609!
agregateTo: aBackpack

	container do: [:a | aBackpack add: a].
	container:= OrderedCollection new.! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'franco c 12/10/2020 19:49:39'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'franco c 12/10/2020 19:49:39'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'franco c 12/10/2020 19:49:39'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'franco c 12/10/2020 19:49:39'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'franco c 12/10/2020 19:49:39'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'franco c 12/10/2020 19:49:39'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'franco c 12/10/2020 19:49:39'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'franco c 12/10/2020 19:49:39'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'franco c 12/10/2020 19:49:39'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'franco c 12/10/2020 19:49:39'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'franco c 12/10/2020 19:49:39'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'franco c 12/10/2020 19:49:39'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'franco c 12/10/2020 19:49:39'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'franco c 12/10/2020 19:49:39'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'franco c 12/10/2020 19:49:39'!
PASSED!

!testRun: #BackpackTest #test16ShouldAddWeightWhenAddingPortableObjects stamp: 'franco c 12/10/2020 19:49:39'!
PASSED!

!testRun: #BackpackTest #test17Nonportableiaddedcorrectly stamp: 'franco c 12/10/2020 19:49:39'!
PASSED!

!testRun: #BackpackTest #test18NonportableinsideNonPortable stamp: 'franco c 12/10/2020 19:49:39'!
PASSED!

!testRun: #BackpackTest #test19NonportableisEmptyafterBackpacktakesObjects stamp: 'franco c 12/10/2020 19:49:39'!
PASSED!
!NonPortableObject methodsFor: 'nil' stamp: 'franco c 12/10/2020 19:50:04'!
isEmpty
	^container isEmpty.! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 19:52:58' prior: 50917739!
agregateTo: aBackpack
	|newContainer|
	container do: [:a | aBackpack add: a].
	newContainer:= OrderedCollection new.
	container do: [: a| a addBackto: newContainer].! !
!PortableObject methodsFor: 'nil' stamp: 'franco c 12/10/2020 19:53:14'!
addBackto: aContainer! !
!NonPortableObject methodsFor: 'nil' stamp: 'franco c 12/10/2020 19:53:30'!
addBackto: aContainer
	aContainer add: self.! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 19:53:51' prior: 50917822!
agregateTo: aBackpack
	|newContainer|
	container do: [:a | aBackpack add: a].
	newContainer:= OrderedCollection new.
	container do: [: a| a addBackto: newContainer].
	container:= newContainer.! !
!NonPortableObject methodsFor: 'nil' stamp: 'franco c 12/10/2020 19:54:12' overrides: 16880927!
size
	^container size.! !
!BackpackTest methodsFor: 'accessing' stamp: 'franco c 12/10/2020 19:55:34' prior: 50917711!
test19NonportableisEmptyafterBackpacktakesObjects

	| aBackpack nonportable nonportable2 nonportable3|
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	nonportable :=NonPortableObject  initialize.
	nonportable2:=NonPortableObject  initialize.
	nonportable3:=NonPortableObject  initialize.
	nonportable2 add:(PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 1).
	nonportable  add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 1).
	nonportable add:nonportable2.
	aBackpack add: (nonportable).
	aBackpack add: (nonportable3).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalWeight equals:30.
	self assert: nonportable size equals:1.
	self assert: nonportable2 size equals: 0.
	

! !

!testRun: #BackpackTest #test19NonportableisEmptyafterBackpacktakesObjects stamp: 'franco c 12/10/2020 19:55:36'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'franco c 12/10/2020 19:55:36'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'franco c 12/10/2020 19:55:36'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'franco c 12/10/2020 19:55:36'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'franco c 12/10/2020 19:55:36'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'franco c 12/10/2020 19:55:36'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'franco c 12/10/2020 19:55:36'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'franco c 12/10/2020 19:55:36'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'franco c 12/10/2020 19:55:36'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'franco c 12/10/2020 19:55:36'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'franco c 12/10/2020 19:55:36'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'franco c 12/10/2020 19:55:36'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'franco c 12/10/2020 19:55:36'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'franco c 12/10/2020 19:55:36'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'franco c 12/10/2020 19:55:36'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'franco c 12/10/2020 19:55:36'!
PASSED!

!testRun: #BackpackTest #test16ShouldAddWeightWhenAddingPortableObjects stamp: 'franco c 12/10/2020 19:55:36'!
PASSED!

!testRun: #BackpackTest #test17Nonportableiaddedcorrectly stamp: 'franco c 12/10/2020 19:55:36'!
PASSED!

!testRun: #BackpackTest #test18NonportableinsideNonPortable stamp: 'franco c 12/10/2020 19:55:36'!
PASSED!

!testRun: #BackpackTest #test19NonportableisEmptyafterBackpacktakesObjects stamp: 'franco c 12/10/2020 19:55:36'!
PASSED!

Object subclass: #Room
	instanceVariableNames: 'grid height width numberOfPlayers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: #'ISW1-2020-2C-2doParcial' stamp: 'franco c 12/10/2020 20:01:50'!
Object subclass: #Room
	instanceVariableNames: 'grid height width numberOfPlayers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:02:07' prior: 50916111!
initForWidth: aWidth andheight: aHeight
	height:= aHeight.
	width := aWidth.
	grid:= Dictionary new.
	numberOfPlayers:=0.! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:03:24' prior: 50916651!
assertObjectisValid: anObject
	(anObject class) = PortableObject ifTrue:[^true].
	(anObject class) = NonPortableObject ifTrue:[^true].
	(anObject class) = PlayableCharacter ifTrue:[numberOfPlayers=0 ifTrue:[numberOfPlayers :=1] ifFalse:[^self signalOnlyvalidObjects]].
	^self signalOnlyvalidObjects.! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:03:41' prior: 50917979!
assertObjectisValid: anObject
	(anObject class) = PortableObject ifTrue:[^true].
	(anObject class) = NonPortableObject ifTrue:[^true].
	(anObject class) = PlayableCharacter ifTrue:[numberOfPlayers=0 ifTrue:[numberOfPlayers :=1] ifFalse:[^self signalAlreadyaPlayerInuse]].
	^self signalOnlyvalidObjects.! !
!Room methodsFor: 'nil' stamp: 'franco c 12/10/2020 20:04:15'!
signalAlreadyaPlayerInuse
	^self error: self class alreadyaPlayerror.! !
!Room class methodsFor: 'nil' stamp: 'franco c 12/10/2020 20:04:38'!
alreadyaPlayerror
	^'there is already a player in the room'! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:05:10'!
test07Cantadd2players
	|room|
	room:= Room withWidth: 5 withHeight: 3.
	room addtoMapinWidthIndex: 2 heightIndex: 2 object: PortableObject  new.
	self should:[room addtoMapinWidthIndex: 2 heightIndex: 2 object: PortableObject new.]
	raise: Error
	withMessageText: Room positionOccupiedDescription ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:05:17' prior: 50918014!
test07Cantadd2players
	|room|
	room:= Room withWidth: 5 withHeight: 3.
	room addtoMapinWidthIndex: 2 heightIndex: 2 object: PortableObject  new.
	self should:[room addtoMapinWidthIndex: 2 heightIndex: 2 object: PortableObject new.]
	raise: Error
	withMessageText: Room alreadyaPlayerror! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:05:46' prior: 50918027!
test07Cantadd2players
	|room playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South .
	room:= Room withWidth: 5 withHeight: 3.
	room addtoMapinWidthIndex: 2 heightIndex: 2 object: PortableObject  new.
	self should:[room addtoMapinWidthIndex: 2 heightIndex: 2 object: PortableObject new.]
	raise: Error
	withMessageText: Room alreadyaPlayerror! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:06:28' prior: 50918040!
test07Cantadd2players
	|room playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South .
	room:= Room withWidth: 5 withHeight: 3.
	room addtoMapinWidthIndex: 2 heightIndex: 2 object: playableCharacter.
	self should:[room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter]
	raise: Error
	withMessageText: Room alreadyaPlayerror! !

!testRun: #RoomTest #test07Cantadd2players stamp: 'franco c 12/10/2020 20:06:33'!
ERROR!

!testRun: #RoomTest #test07Cantadd2players stamp: 'franco c 12/10/2020 20:06:33'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:07:43' prior: 50918057!
test07Cantadd2players
	|room playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: ( Backpack containingUpTo: 100 limitingPointsTo: 100) at: 1@2 heading: #South .
	room:= Room withWidth: 5 withHeight: 3.
	room addtoMapinWidthIndex: 2 heightIndex: 2 object: playableCharacter.
	self should:[room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter]
	raise: Error
	withMessageText: Room alreadyaPlayerror! !

!testRun: #RoomTest #test07Cantadd2players stamp: 'franco c 12/10/2020 20:07:46'!
ERROR!

!testRun: #RoomTest #test07Cantadd2players stamp: 'franco c 12/10/2020 20:07:46'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:07:57' prior: 50918079!
test07Cantadd2players
	|room playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100) at: 1@2 heading: #South .
	room:= Room withWidth: 5 withHeight: 3.
	room addtoMapinWidthIndex: 2 heightIndex: 2 object: playableCharacter.
	self should:[room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter]
	raise: Error
	withMessageText: Room alreadyaPlayerror! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:08:51' prior: 50917992!
assertObjectisValid: anObject
	(anObject class) = PortableObject ifTrue:[^true].
	(anObject class) = NonPortableObject ifTrue:[^true].
	(anObject class) = PlayableCharacterHeading ifTrue:[numberOfPlayers=0 ifTrue:[numberOfPlayers :=1] ifFalse:[^self signalAlreadyaPlayerInuse]].
	(anObject class) = PlayableCharacter ifTrue:[numberOfPlayers=0 ifTrue:[numberOfPlayers :=1] ifFalse:[^self signalAlreadyaPlayerInuse]].
	^self signalOnlyvalidObjects.! !

!testRun: #RoomTest #test07Cantadd2players stamp: 'franco c 12/10/2020 20:08:57'!
ERROR!

!testRun: #RoomTest #test07Cantadd2players stamp: 'franco c 12/10/2020 20:08:57'!
ERROR!

anObject class!
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:10:29' prior: 50918119!
assertObjectisValid: anObject
	(anObject class) = PortableObject ifTrue:[^true].
	(anObject class) = NonPortableObject ifTrue:[^true].
	(anObject class) = PlayableCharacterHeading ifTrue:[numberOfPlayers=0 ifTrue:[numberOfPlayers :=1.
			^true] ifFalse:[^self signalAlreadyaPlayerInuse]].
	(anObject class) = PlayableCharacter ifTrue:[numberOfPlayers=0 ifTrue:[numberOfPlayers :=1.
			^true] ifFalse:[^self signalAlreadyaPlayerInuse]].
	^self signalOnlyvalidObjects.! !

!testRun: #RoomTest #test07Cantadd2players stamp: 'franco c 12/10/2020 20:10:35'!
PASSED!

Object subclass: #Room
	instanceVariableNames: 'grid height width numberOfPlayers player'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: #'ISW1-2020-2C-2doParcial' stamp: 'franco c 12/10/2020 20:11:05'!
Object subclass: #Room
	instanceVariableNames: 'grid height width numberOfPlayers player'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:11:31' prior: 50918143!
assertObjectisValid: anObject
	(anObject class) = PortableObject ifTrue:[^true].
	(anObject class) = NonPortableObject ifTrue:[^true].
	(anObject class) = PlayableCharacterHeading ifTrue:[numberOfPlayers=0 ifTrue:[numberOfPlayers :=1.
			player:=anObject.
			^true] ifFalse:[^self signalAlreadyaPlayerInuse]].
	(anObject class) = PlayableCharacter ifTrue:[numberOfPlayers=0 ifTrue:[numberOfPlayers :=1.
			player:=anObject.
			^true] ifFalse:[^self signalAlreadyaPlayerInuse]].
	^self signalOnlyvalidObjects.! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:11:35' prior: 50918178!
assertObjectisValid: anObject
	(anObject class) = PortableObject ifTrue:[^true].
	(anObject class) = NonPortableObject ifTrue:[^true].
	(anObject class) = PlayableCharacterHeading ifTrue:[numberOfPlayers=0 ifTrue:[numberOfPlayers :=1.
			player:=anObject.
			^true] ifFalse:[^self signalAlreadyaPlayerInuse]].
	(anObject class) = PlayableCharacter ifTrue:[
			numberOfPlayers=0 ifTrue:[numberOfPlayers :=1.
			player:=anObject.
			^true] ifFalse:[^self signalAlreadyaPlayerInuse]].
	^self signalOnlyvalidObjects.! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:11:40' prior: 50918197!
assertObjectisValid: anObject
	(anObject class) = PortableObject ifTrue:[^true].
	(anObject class) = NonPortableObject ifTrue:[^true].
	(anObject class) = PlayableCharacterHeading ifTrue:[numberOfPlayers=0 ifTrue:[
			numberOfPlayers :=1.
			player:=anObject.
			^true] ifFalse:[^self signalAlreadyaPlayerInuse]].
	(anObject class) = PlayableCharacter ifTrue:[
			numberOfPlayers=0 ifTrue:[numberOfPlayers :=1.
			player:=anObject.
			^true] ifFalse:[^self signalAlreadyaPlayerInuse]].
	^self signalOnlyvalidObjects.! !

!testRun: #RoomTest #test07Cantadd2players stamp: 'franco c 12/10/2020 20:11:58'!
PASSED!
!PlayableCharacter methodsFor: 'moving' stamp: 'franco c 12/10/2020 20:13:36' prior: 50915681!
moveBackward
	
	position := position - heading forwardPoint .
	^position.
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'franco c 12/10/2020 20:13:49' prior: 50915686!
moveForward
	
	position := position + heading forwardPoint.
	^position.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:17:53'!
test08Cantadd2players
	|room playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100) at: 1@2 heading: #South .
	room:= Room withWidth: 5 withHeight: 3.
	room addtoMapinWidthIndex: 2 heightIndex: 2 object: playableCharacter.
	self should:[room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter]
	raise: Error
	withMessageText: Room alreadyaPlayerror! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'franco c 12/10/2020 20:19:43'!
named: aName using: aBackpack  heading: aCardinalPoint 
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack  heading: newHeading ! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'franco c 12/10/2020 20:20:27'!
initializeNamed: aName using: aBackpack  heading: aMarsRoverHeading 

	name := aName.
	backpack := aBackpack.
	
	heading := aMarsRoverHeading.! !
!PlayableCharacter methodsFor: 'nil' stamp: 'franco c 12/10/2020 20:21:00'!
setPosition: aPosition
	position:= aPosition.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'franco c 12/10/2020 20:21:49'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'franco c 12/10/2020 20:21:49'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'franco c 12/10/2020 20:21:49'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'franco c 12/10/2020 20:21:49'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'franco c 12/10/2020 20:21:49'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'franco c 12/10/2020 20:21:49'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'franco c 12/10/2020 20:21:49'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'franco c 12/10/2020 20:21:49'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'franco c 12/10/2020 20:21:49'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'franco c 12/10/2020 20:21:49'!
PASSED!
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:23:55' prior: 50916619!
addtoMapinWidthIndex: aWidth heightIndex: aHeight object: anObject
	|point|
	((aWidth isInteger) & (aHeight isInteger)) ifFalse:[ ^self signaloutOfBounds ].
	((0<aWidth) & (aWidth<= width) & (0<aHeight) & (aHeight<= height)) ifFalse:[ ^self signaloutOfBounds].
	point:= aWidth @aHeight .		
	
	self assertObjectisValid: anObject.
	grid at: point ifAbsent: [^grid at: point put: anObject].			
	^self signalPositionOcuppied.
	
	
	
! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:24:53' prior: 50918329!
addtoMapinWidthIndex: aWidth heightIndex: aHeight object: anObject
	|point|
	((aWidth isInteger) & (aHeight isInteger)) ifFalse:[ ^self signaloutOfBounds ].
	((0<aWidth) & (aWidth<= width) & (0<aHeight) & (aHeight<= height)) ifFalse:[ ^self signaloutOfBounds].
	point:= aWidth @aHeight .		
	
	self assertObjectisValid: anObject withWidth: aWidth withHeight: aHeight.
	grid at: point ifAbsent: [^grid at: point put: anObject].			
	^self signalPositionOcuppied.
	
	
	
! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:25:04'!
assertObjectisValid: anObject withWidth: aWidth withHeight: aHeight
	(anObject class) = PortableObject ifTrue:[^true].
	(anObject class) = NonPortableObject ifTrue:[^true].
	(anObject class) = PlayableCharacterHeading ifTrue:[numberOfPlayers=0 ifTrue:[
			numberOfPlayers :=1.
			player:=anObject.
			^true] ifFalse:[^self signalAlreadyaPlayerInuse]].
	(anObject class) = PlayableCharacter ifTrue:[
			numberOfPlayers=0 ifTrue:[numberOfPlayers :=1.
			player:=anObject.
			^true] ifFalse:[^self signalAlreadyaPlayerInuse]].
	^self signalOnlyvalidObjects.! !

!methodRemoval: Room #assertObjectisValid: stamp: 'franco c 12/10/2020 20:25:07'!
assertObjectisValid: anObject
	(anObject class) = PortableObject ifTrue:[^true].
	(anObject class) = NonPortableObject ifTrue:[^true].
	(anObject class) = PlayableCharacterHeading ifTrue:[numberOfPlayers=0 ifTrue:[
			numberOfPlayers :=1.
			player:=anObject.
			^true] ifFalse:[^self signalAlreadyaPlayerInuse]].
	(anObject class) = PlayableCharacter ifTrue:[
			numberOfPlayers=0 ifTrue:[numberOfPlayers :=1.
			player:=anObject.
			^true] ifFalse:[^self signalAlreadyaPlayerInuse]].
	^self signalOnlyvalidObjects.!
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:26:09' prior: 50918364!
assertObjectisValid: anObject withWidth: aWidth withHeight: aHeight
	(anObject class) = PortableObject ifTrue:[^true].
	(anObject class) = NonPortableObject ifTrue:[^true].
	(anObject class) = PlayableCharacterHeading ifTrue:[numberOfPlayers=0 ifTrue:[
			numberOfPlayers :=1.
			player:=anObject.
			player setPosition: aWidth@aHeight.
			^true] ifFalse:[^self signalAlreadyaPlayerInuse]].
	(anObject class) = PlayableCharacter ifTrue:[
			numberOfPlayers=0 ifTrue:[numberOfPlayers :=1.
			player:=anObject.
			^true] ifFalse:[^self signalAlreadyaPlayerInuse]].
	^self signalOnlyvalidObjects.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:26:40' prior: 50918251!
test08Cantadd2players
	|room playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #South .
	room:= Room withWidth: 5 withHeight: 3.
	room addtoMapinWidthIndex: 2 heightIndex: 2 object: playableCharacter.
	self should:[room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter]
	raise: Error
	withMessageText: Room alreadyaPlayerror! !

!classDefinition: #Vacio category: #'ISW1-2020-2C-2doParcial' stamp: 'franco c 12/10/2020 20:34:32'!
Object subclass: #Vacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:34:24' prior: 50917972!
initForWidth: aWidth andheight: aHeight
	|heightOrdered widthOrdered|
	height:= aHeight.
	width := aWidth.
	heightOrdered:=OrderedCollection new.
	1 to: (aHeight) do: [:a | heightOrdered add: Vacio new].
	1 to: (aWidth) do: [:a| widthOrdered add: heightOrdered ].
	grid:= widthOrdered.
	numberOfPlayers:=0.! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:34:52' prior: 50918451!
initForWidth: aWidth andheight: aHeight
	|heightOrdered widthOrdered|
	height:= aHeight.
	width := aWidth.
	widthOrdered:=OrderedCollection new.
	heightOrdered:=OrderedCollection new.
	1 to: (aHeight) do: [:a | heightOrdered add: Vacio new].
	1 to: (aWidth) do: [:a| widthOrdered add: heightOrdered ].
	grid:= widthOrdered.
	numberOfPlayers:=0.! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:40:16' prior: 50918346!
addtoMapinWidthIndex: aWidth heightIndex: aHeight object: anObject
	|point puntoMedio array|
	((aWidth isInteger) & (aHeight isInteger)) ifFalse:[ ^self signaloutOfBounds ].
	((0<aWidth) & (aWidth<= width) & (0<aHeight) & (aHeight<= height)) ifFalse:[ ^self signaloutOfBounds].
	point:= aWidth @aHeight .		
	
	self assertObjectisValid: anObject withWidth: aWidth withHeight: aHeight.
	puntoMedio:= grid at: (aWidth+1).
	(puntoMedio at: (aHeight +1)) = Vacio class ifTrue: [
		array := grid at: (width+1).
		^array at: height+1 put: anObject].			
	^self signalPositionOcuppied.
	
	
	
! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:40:24' prior: 50918478!
addtoMapinWidthIndex: aWidth heightIndex: aHeight object: anObject
	|puntoMedio array|
	((aWidth isInteger) & (aHeight isInteger)) ifFalse:[ ^self signaloutOfBounds ].
	((0<aWidth) & (aWidth<= width) & (0<aHeight) & (aHeight<= height)) ifFalse:[ ^self signaloutOfBounds].
	
	
	self assertObjectisValid: anObject withWidth: aWidth withHeight: aHeight.
	puntoMedio:= grid at: (aWidth+1).
	(puntoMedio at: (aHeight +1)) = Vacio class ifTrue: [
		array := grid at: (width+1).
		^array at: height+1 put: anObject].			
	^self signalPositionOcuppied.
	
	
	
! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:41:39' prior: 50918500!
addtoMapinWidthIndex: aWidth heightIndex: aHeight object: anObject
	|point|
	((aWidth isInteger) & (aHeight isInteger)) ifFalse:[ ^self signaloutOfBounds ].
	((0<aWidth) & (aWidth<= width) & (0<aHeight) & (aHeight<= height)) ifFalse:[ ^self signaloutOfBounds].
	point:= aWidth @aHeight .		
	
	self assertObjectisValid: anObject withWidth: aWidth withHeight: aHeight.
	grid at: point ifAbsent: [^grid at: point put: anObject].			
	^self signalPositionOcuppied.
	
	
	
! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:42:12' prior: 50918464!
initForWidth: aWidth andheight: aHeight
	
	height:= aHeight.
	width := aWidth.
	grid:= Dictionary new.
	numberOfPlayers:=0.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:43:45'!
test08CantMOvePlayerifthereisNoPlayer
	|room |
	room:= Room withWidth: 5 withHeight: 3.
	
	self should:[room movePlayerForward]
	raise: Error
	withMessageText: Room noPlayerError! !
!Room class methodsFor: 'nil' stamp: 'franco c 12/10/2020 20:44:11'!
noPlayerError
	^'No player has been added'! !
!Room methodsFor: 'nil' stamp: 'franco c 12/10/2020 20:44:58'!
signalNoPlayer
	^self error: self class noPlayerError.! !

!methodRemoval: RoomTest #test08Cantadd2players stamp: 'franco c 12/10/2020 20:45:14'!
test08Cantadd2players
	|room playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #South .
	room:= Room withWidth: 5 withHeight: 3.
	room addtoMapinWidthIndex: 2 heightIndex: 2 object: playableCharacter.
	self should:[room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter]
	raise: Error
	withMessageText: Room alreadyaPlayerror!
!Room methodsFor: 'nil' stamp: 'franco c 12/10/2020 20:46:11'!
movePlayerForward
	(player isNil) ifTrue:[ ^self signalNoPlayer ].
	player moveForward.! !

!testRun: #RoomTest #test08CantMOvePlayerifthereisNoPlayer stamp: 'franco c 12/10/2020 20:46:22'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:47:29'!
test09cantMovePlayerOutOFBounds
	|room playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #South .
	room:= Room withWidth: 5 withHeight: 3.
	room addtoMapinWidthIndex: 2 heightIndex: 2 object: playableCharacter.
	self should:[room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter]
	raise: Error
	withMessageText: Room alreadyaPlayerror! !

!testRun: #RoomTest #test07Cantadd2players stamp: 'franco c 12/10/2020 20:47:41'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:47:48' prior: 50918102!
test07Cantadd2players
	|room playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #South .
	room:= Room withWidth: 5 withHeight: 3.
	room addtoMapinWidthIndex: 2 heightIndex: 2 object: playableCharacter.
	self should:[room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter]
	raise: Error
	withMessageText: Room alreadyaPlayerror! !

!testRun: #RoomTest #test07Cantadd2players stamp: 'franco c 12/10/2020 20:47:51'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:48:12' prior: 50918588!
test09cantMovePlayerOutOFBounds
	|room playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #South .
	room:= Room withWidth: 5 withHeight: 3.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	self should:[room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter]
	raise: Error
	withMessageText: Room alreadyaPlayerror! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:49:11' prior: 50918628!
test09cantMovePlayerOutOFBounds
	|room playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	room:= Room withWidth: 5 withHeight: 3.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	self should:[room movePlayerForward ]
	raise: Error
	withMessageText: Room movingoutOfBounds! !
!Room class methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:49:52'!
movingoutOfBounds
	^'player cant be out ofBounds'! !
!Room methodsFor: 'nil' stamp: 'franco c 12/10/2020 20:50:13'!
signalMovingOutOfBounds
	^self error: self class movingoutOfBounds.! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:52:49' prior: 50918579!
movePlayerForward
	|simulatedPlayer newPos|
	simulatedPlayer:= player copy.
	(player isNil) ifTrue:[ ^self signalNoPlayer ].
	newPos := simulatedPlayer moveForward .
	((newPos x)>width) ifTrue:[self signalMovingOutOfBounds ].
	((newPos x)>height) ifTrue:[self signalMovingOutOfBounds ].
	player moveForward.! !

!testRun: #RoomTest #test09cantMovePlayerOutOFBounds stamp: 'franco c 12/10/2020 20:52:59'!
FAILURE!

!testRun: #RoomTest #test09cantMovePlayerOutOFBounds stamp: 'franco c 12/10/2020 20:52:59'!
FAILURE!

room!

position!
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:54:58' prior: 50918404!
assertObjectisValid: anObject withWidth: aWidth withHeight: aHeight
	(anObject class) = PortableObject ifTrue:[^true].
	(anObject class) = NonPortableObject ifTrue:[^true].
	(anObject class) = PlayableCharacterHeading ifTrue:[numberOfPlayers=0 ifTrue:[
			numberOfPlayers :=1.
			player:=anObject.
			player setPosition: (aWidth@aHeight).
			^true] ifFalse:[^self signalAlreadyaPlayerInuse]].
	(anObject class) = PlayableCharacter ifTrue:[
			numberOfPlayers=0 ifTrue:[numberOfPlayers :=1.
			player:=anObject.
			^true] ifFalse:[^self signalAlreadyaPlayerInuse]].
	^self signalOnlyvalidObjects.! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:55:23' prior: 50918692!
assertObjectisValid: anObject withWidth: aWidth withHeight: aHeight
	(anObject class) = PortableObject ifTrue:[^true].
	(anObject class) = NonPortableObject ifTrue:[^true].
	(anObject class) = PlayableCharacterHeading ifTrue:[numberOfPlayers=0 ifTrue:[
			numberOfPlayers :=1.
			player:=anObject.
			player setPosition: (aWidth@aHeight).
			^true] ifFalse:[^self signalAlreadyaPlayerInuse]].
	(anObject class) = PlayableCharacter ifTrue:[
			numberOfPlayers=0 ifTrue:[numberOfPlayers :=1.
			player:=anObject.
			player setPosition: (aWidth@aHeight).
			^true] ifFalse:[^self signalAlreadyaPlayerInuse]].
	^self signalOnlyvalidObjects.! !

!testRun: #RoomTest #test09cantMovePlayerOutOFBounds stamp: 'franco c 12/10/2020 20:55:34'!
FAILURE!

newPos x!

newPos x!

newPos!
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:56:52' prior: 50918672!
movePlayerForward
	|simulatedPlayer newPos|
	simulatedPlayer:= player copy.
	(player isNil) ifTrue:[ ^self signalNoPlayer ].
	newPos := simulatedPlayer moveForward .
	((newPos x)>width) ifTrue:[self signalMovingOutOfBounds ].
	((newPos y)>height) ifTrue:[self signalMovingOutOfBounds ].
	player moveForward.! !

newPos!

!testRun: #RoomTest #test09cantMovePlayerOutOFBounds stamp: 'franco c 12/10/2020 20:57:10'!
PASSED!

!testRun: #RoomTest #test01WidthandHeightShouldBepositive stamp: 'franco c 12/10/2020 20:57:10'!
PASSED!

!testRun: #RoomTest #test02WidhtandHeightshouldBeNumbers stamp: 'franco c 12/10/2020 20:57:10'!
PASSED!

!testRun: #RoomTest #test03CantaddItemsOutOfBounds stamp: 'franco c 12/10/2020 20:57:10'!
PASSED!

!testRun: #RoomTest #test04CantaddItemswithnonintegerindexes stamp: 'franco c 12/10/2020 20:57:10'!
PASSED!

!testRun: #RoomTest #test05ObjectCantBeaddedatanOccupiedPos stamp: 'franco c 12/10/2020 20:57:10'!
PASSED!

!testRun: #RoomTest #test06OnlyValidatedObjectCanBeadded stamp: 'franco c 12/10/2020 20:57:10'!
PASSED!

!testRun: #RoomTest #test07Cantadd2players stamp: 'franco c 12/10/2020 20:57:10'!
PASSED!

!testRun: #RoomTest #test08CantMOvePlayerifthereisNoPlayer stamp: 'franco c 12/10/2020 20:57:10'!
PASSED!

!testRun: #RoomTest #test09cantMovePlayerOutOFBounds stamp: 'franco c 12/10/2020 20:57:10'!
PASSED!
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 20:59:06' prior: 50918742!
movePlayerForward
	|simulatedPlayer newPos|
	simulatedPlayer:= player copy.
	(player isNil) ifTrue:[ ^self signalNoPlayer ].
	newPos := simulatedPlayer moveForward .
	((newPos x)>width) ifTrue:[^self signalMovingOutOfBounds ].
	((newPos y)>height) ifTrue:[^self signalMovingOutOfBounds ].
	grid at: newPos ifAbsent: [player moveForward.].
	^self signalSlotAlreadyOccupied.
	! !
!Room methodsFor: 'nil' stamp: 'franco c 12/10/2020 20:59:47'!
signalSlotAlreadyOccupied
	^self error: self class alreadyOccupiedError.! !
!Room class methodsFor: 'nil' stamp: 'franco c 12/10/2020 21:00:03'!
alreadyOccupiedError
	^'position is already Occupied'! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:01:35'!
test10CantmoveIfPositionIsOccupied
	|room playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	room addtoMapinWidthIndex: 2 heightIndex: 4 object: NonPortableObject .
	
	self should:[room movePlayerForward ]
	raise: Error
	withMessageText: Room alreadyOccupiedError.! !

!testRun: #RoomTest #test10CantmoveIfPositionIsOccupied stamp: 'franco c 12/10/2020 21:01:38'!
ERROR!

anObject class!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:04:02' prior: 50918812!
test10CantmoveIfPositionIsOccupied
	|room playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	room addtoMapinWidthIndex: 2 heightIndex: 4 object: NonPortableObject new .
	
	self should:[room movePlayerForward ]
	raise: Error
	withMessageText: Room alreadyOccupiedError.! !

!testRun: #RoomTest #test10CantmoveIfPositionIsOccupied stamp: 'franco c 12/10/2020 21:04:04'!
PASSED!

!testRun: #RoomTest #test01WidthandHeightShouldBepositive stamp: 'franco c 12/10/2020 21:04:04'!
PASSED!

!testRun: #RoomTest #test02WidhtandHeightshouldBeNumbers stamp: 'franco c 12/10/2020 21:04:04'!
PASSED!

!testRun: #RoomTest #test03CantaddItemsOutOfBounds stamp: 'franco c 12/10/2020 21:04:04'!
PASSED!

!testRun: #RoomTest #test04CantaddItemswithnonintegerindexes stamp: 'franco c 12/10/2020 21:04:04'!
PASSED!

!testRun: #RoomTest #test05ObjectCantBeaddedatanOccupiedPos stamp: 'franco c 12/10/2020 21:04:04'!
PASSED!

!testRun: #RoomTest #test06OnlyValidatedObjectCanBeadded stamp: 'franco c 12/10/2020 21:04:04'!
PASSED!

!testRun: #RoomTest #test07Cantadd2players stamp: 'franco c 12/10/2020 21:04:04'!
PASSED!

!testRun: #RoomTest #test08CantMOvePlayerifthereisNoPlayer stamp: 'franco c 12/10/2020 21:04:04'!
PASSED!

!testRun: #RoomTest #test09cantMovePlayerOutOFBounds stamp: 'franco c 12/10/2020 21:04:04'!
PASSED!

!testRun: #RoomTest #test10CantmoveIfPositionIsOccupied stamp: 'franco c 12/10/2020 21:04:04'!
PASSED!
!Room methodsFor: 'nil' stamp: 'franco c 12/10/2020 21:04:43' overrides: 16880774!
at: aPoint
	^grid at: aPoint .! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:05:48'!
test11CharactermovesCorrectly
	|room playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	
	
	! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:06:47' prior: 50918788!
movePlayerForward
	|simulatedPlayer newPos|
	simulatedPlayer:= player copy.
	(player isNil) ifTrue:[ ^self signalNoPlayer ].
	newPos := simulatedPlayer moveForward .
	((newPos x)>width) ifTrue:[^self signalMovingOutOfBounds ].
	((newPos y)>height) ifTrue:[^self signalMovingOutOfBounds ].
	grid at: newPos ifAbsent: [player moveForward.
		grid at: newPos put: player].
	^self signalSlotAlreadyOccupied.
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:08:03' prior: 50918893!
test11CharactermovesCorrectly
	|room playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	self assert: playableCharacter equals: (room at: 2@4).
	
	
	! !

!testRun: #RoomTest #test11CharactermovesCorrectly stamp: 'franco c 12/10/2020 21:08:04'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:08:58' prior: 50918922!
test11CharactermovesCorrectly
	|room playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	room movePlayerForward .
	self assert: playableCharacter equals: (room at: 2@4).
	
	
	! !

!testRun: #RoomTest #test11CharactermovesCorrectly stamp: 'franco c 12/10/2020 21:08:59'!
ERROR!

!testRun: #RoomTest #test11CharactermovesCorrectly stamp: 'franco c 12/10/2020 21:09:24'!
ERROR!

!testRun: #RoomTest #test11CharactermovesCorrectly stamp: 'franco c 12/10/2020 21:09:24'!
ERROR!

room!

!testRun: #RoomTest #test11CharactermovesCorrectly stamp: 'franco c 12/10/2020 21:10:19'!
ERROR!

!testRun: #RoomTest #test11CharactermovesCorrectly stamp: 'franco c 12/10/2020 21:10:42'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:11:26' prior: 50918906!
movePlayerForward
	|simulatedPlayer newPos|
	simulatedPlayer:= player copy.
	(player isNil) ifTrue:[ ^self signalNoPlayer ].
	newPos := simulatedPlayer moveForward .
	((newPos x)>width) ifTrue:[^self signalMovingOutOfBounds ].
	((newPos y)>height) ifTrue:[^self signalMovingOutOfBounds ].
	grid at: newPos ifAbsent: [player moveForward.
		grid at: newPos put: player.
		^true.].
	^self signalSlotAlreadyOccupied.
	! !

!testRun: #RoomTest #test11CharactermovesCorrectly stamp: 'franco c 12/10/2020 21:12:00'!
PASSED!

!testRun: #RoomTest #test01WidthandHeightShouldBepositive stamp: 'franco c 12/10/2020 21:12:05'!
PASSED!

!testRun: #RoomTest #test02WidhtandHeightshouldBeNumbers stamp: 'franco c 12/10/2020 21:12:05'!
PASSED!

!testRun: #RoomTest #test03CantaddItemsOutOfBounds stamp: 'franco c 12/10/2020 21:12:05'!
PASSED!

!testRun: #RoomTest #test04CantaddItemswithnonintegerindexes stamp: 'franco c 12/10/2020 21:12:05'!
PASSED!

!testRun: #RoomTest #test05ObjectCantBeaddedatanOccupiedPos stamp: 'franco c 12/10/2020 21:12:05'!
PASSED!

!testRun: #RoomTest #test06OnlyValidatedObjectCanBeadded stamp: 'franco c 12/10/2020 21:12:05'!
PASSED!

!testRun: #RoomTest #test07Cantadd2players stamp: 'franco c 12/10/2020 21:12:05'!
PASSED!

!testRun: #RoomTest #test08CantMOvePlayerifthereisNoPlayer stamp: 'franco c 12/10/2020 21:12:05'!
PASSED!

!testRun: #RoomTest #test09cantMovePlayerOutOFBounds stamp: 'franco c 12/10/2020 21:12:05'!
PASSED!

!testRun: #RoomTest #test10CantmoveIfPositionIsOccupied stamp: 'franco c 12/10/2020 21:12:05'!
PASSED!

!testRun: #RoomTest #test11CharactermovesCorrectly stamp: 'franco c 12/10/2020 21:12:05'!
PASSED!
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:13:27' prior: 50918971!
movePlayerForward
	|simulatedPlayer newPos oldPos|
	simulatedPlayer:= player copy.
	(player isNil) ifTrue:[ ^self signalNoPlayer ].
	newPos := simulatedPlayer moveForward .
	((newPos x)>width) ifTrue:[^self signalMovingOutOfBounds ].
	((newPos y)>height) ifTrue:[^self signalMovingOutOfBounds ].
	grid at: newPos ifAbsent: [player moveForward.
		grid at: newPos put: player.
		oldPos :=simulatedPlayer moveBackward.
		grid removeKey: oldPos.
		^true.].
	^self signalSlotAlreadyOccupied.
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:14:14'!
test12OldPosIsEmpty
	|room playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	room movePlayerForward .
	self assert: playableCharacter equals: (room at: 2@4).
	room at: 2@3
	
	! !

!testRun: #RoomTest #test12OldPosIsEmpty stamp: 'franco c 12/10/2020 21:14:16'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:14:55' prior: 50919044!
test12OldPosIsEmpty
	|room playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	room movePlayerForward .
	self assert: playableCharacter equals: (room at: 2@4).
	self
	should:[room at: 2@3]
	raise:Error
	
	
	! !

!testRun: #RoomTest #test12OldPosIsEmpty stamp: 'franco c 12/10/2020 21:14:58'!
PASSED!

!testRun: #RoomTest #test01WidthandHeightShouldBepositive stamp: 'franco c 12/10/2020 21:14:58'!
PASSED!

!testRun: #RoomTest #test02WidhtandHeightshouldBeNumbers stamp: 'franco c 12/10/2020 21:14:58'!
PASSED!

!testRun: #RoomTest #test03CantaddItemsOutOfBounds stamp: 'franco c 12/10/2020 21:14:58'!
PASSED!

!testRun: #RoomTest #test04CantaddItemswithnonintegerindexes stamp: 'franco c 12/10/2020 21:14:58'!
PASSED!

!testRun: #RoomTest #test05ObjectCantBeaddedatanOccupiedPos stamp: 'franco c 12/10/2020 21:14:58'!
PASSED!

!testRun: #RoomTest #test06OnlyValidatedObjectCanBeadded stamp: 'franco c 12/10/2020 21:14:58'!
PASSED!

!testRun: #RoomTest #test07Cantadd2players stamp: 'franco c 12/10/2020 21:14:58'!
PASSED!

!testRun: #RoomTest #test08CantMOvePlayerifthereisNoPlayer stamp: 'franco c 12/10/2020 21:14:58'!
PASSED!

!testRun: #RoomTest #test09cantMovePlayerOutOFBounds stamp: 'franco c 12/10/2020 21:14:58'!
PASSED!

!testRun: #RoomTest #test10CantmoveIfPositionIsOccupied stamp: 'franco c 12/10/2020 21:14:58'!
PASSED!

!testRun: #RoomTest #test11CharactermovesCorrectly stamp: 'franco c 12/10/2020 21:14:58'!
PASSED!

!testRun: #RoomTest #test12OldPosIsEmpty stamp: 'franco c 12/10/2020 21:14:58'!
PASSED!
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:15:53'!
movePlayerBackward
	|simulatedPlayer newPos oldPos|
	simulatedPlayer:= player copy.
	(player isNil) ifTrue:[ ^self signalNoPlayer ].
	newPos := simulatedPlayer moveBackward .
	((newPos x)>width) ifTrue:[^self signalMovingOutOfBounds ].
	((newPos y)>height) ifTrue:[^self signalMovingOutOfBounds ].
	grid at: newPos ifAbsent: [player moveBackward .
		grid at: newPos put: player.
		oldPos :=simulatedPlayer moveForward .
		grid removeKey: oldPos.
		^true.].
	^self signalSlotAlreadyOccupied.
	! !
!Room methodsFor: 'nil' stamp: 'franco c 12/10/2020 21:17:10'!
rotatePlayerLeft
	^player rotateLeft 

! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:17:17'!
rotatePlayerRight
	^player rotateRight 

! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:20:34'!
test13takesItem
	|room playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	room movePlayerForward .
	self assert: playableCharacter equals: (room at: 2@4).
	self
	should:[room at: 2@3]
	raise:Error
	
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:22:06' prior: 50919146!
test13takesItem
	|room playableCharacter item|

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	item:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 1).
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	room addtoMapinWidthIndex: 2 heightIndex: 4 object: playableCharacter.
	room movePlayerForward .
	self assert: playableCharacter equals: (room at: 2@4).
	self
	should:[room at: 2@3]
	raise:Error
	
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:22:15' prior: 50919163!
test13takesItem
	|room playableCharacter item|

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	item:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 1).
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	room addtoMapinWidthIndex: 2 heightIndex: 4 object: item.
	room movePlayerForward .
	self assert: playableCharacter equals: (room at: 2@4).
	self
	should:[room at: 2@3]
	raise:Error
	
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:23:21' prior: 50919185!
test13takesItem
	|room playableCharacter item|

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	item:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 1).
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	room addtoMapinWidthIndex: 2 heightIndex: 4 object: item.
	room playerTakeItem .
	self assert: room playerHasItem: item.
	
	
	
	! !
!Room methodsFor: 'nil' stamp: 'franco c 12/10/2020 21:23:54'!
playerHasItem: item
	^player backpackIncludes: item.
! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:24:22' prior: 50919224!
playerHasItem: item
	^player backpackIncludes: item.
! !
!Room methodsFor: 'nil' stamp: 'franco c 12/10/2020 21:25:04'!
playerTakeItem
	! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:29:33' prior: 50919233!
playerTakeItem
	
	|simulatedPlayer newPos |
	simulatedPlayer:= player copy.
	(player isNil) ifTrue:[ ^self signalNoPlayer ].
	newPos := simulatedPlayer moveForward .
	((newPos x)>width) ifTrue:[^self signalMovingOutOfBounds ].
	((newPos y)>height) ifTrue:[^self signalMovingOutOfBounds ].
	grid at: newPos ifAbsent: [self signalNoItemToGrab].
	
	player take: (grid at: newPos).
	(grid at: newPos) destroyselfInGrid: grid at: newPos.
		
	
	
	! !
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:30:13' prior: 50919237!
playerTakeItem
	
	|simulatedPlayer newPos |
	simulatedPlayer:= player copy.
	(player isNil) ifTrue:[ ^self signalNoPlayer ].
	newPos := simulatedPlayer moveForward .
	((newPos x)>width) ifTrue:[^self signalMovingOutOfBounds ].
	((newPos y)>height) ifTrue:[^self signalMovingOutOfBounds ].
	grid at: newPos ifAbsent: [self signalNoItemToGrab].
	
	player take: (grid at: newPos).
	(grid at: newPos) destroyselfInGrid: grid at: newPos.
		
	
	
	! !
!Room methodsFor: 'nil' stamp: 'franco c 12/10/2020 21:30:36'!
 signalNoItemToGrab
	^self error: self class posIsempty! !
!Room class methodsFor: 'nil' stamp: 'franco c 12/10/2020 21:30:52'!
posIsempty
	^'no item in this pos'! !
!NonPortableObject methodsFor: 'nil' stamp: 'franco c 12/10/2020 21:31:33'!
destroyselfInGrid: grid at: newPos.! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:31:37' prior: 50919278!
destroyselfInGrid: grid at: newPos! !
!PortableObject methodsFor: 'nil' stamp: 'franco c 12/10/2020 21:32:15'!
destroyselfInGrid: grid at: newPos
	grid removeKey: newPos.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:32:53' prior: 50919206!
test13takesItem
	|room playableCharacter item|

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	item:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 1).
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	room addtoMapinWidthIndex: 2 heightIndex: 4 object: item.
	room playerTakeItem .
	self assert: (room playerHasItem: item).
	
	
	
	! !

!testRun: #RoomTest #test13takesItem stamp: 'franco c 12/10/2020 21:32:55'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:34:20' prior: 50918714!
assertObjectisValid: anObject withWidth: aWidth withHeight: aHeight
	(anObject class) = PortableObject ifTrue:[^true].
	(anObject class) = NonPortableObject ifTrue:[^true].
	(anObject class) =			PointsPortableObject ifTrue:[^true].
	(anObject class) =	 NoPointsPortableObject ifTrue:[^true].
	(anObject class) = PlayableCharacterHeading ifTrue:[numberOfPlayers=0 ifTrue:[
			numberOfPlayers :=1.
			player:=anObject.
			player setPosition: (aWidth@aHeight).
			^true] ifFalse:[^self signalAlreadyaPlayerInuse]].
	(anObject class) = PlayableCharacter ifTrue:[
			numberOfPlayers=0 ifTrue:[numberOfPlayers :=1.
			player:=anObject.
			player setPosition: (aWidth@aHeight).
			^true] ifFalse:[^self signalAlreadyaPlayerInuse]].
	^self signalOnlyvalidObjects.! !

!testRun: #RoomTest #test13takesItem stamp: 'franco c 12/10/2020 21:34:31'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:34:50'!
test14OldPosIsEmpty
	|room playableCharacter item|

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	item:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 1).
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	room addtoMapinWidthIndex: 2 heightIndex: 4 object: item.
	room playerTakeItem .
	self assert: (room playerHasItem: item).
	
	
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:35:25' prior: 50919344!
test14OldPosIsEmpty
	|room playableCharacter item|

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	item:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 1).
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	room addtoMapinWidthIndex: 2 heightIndex: 4 object: item.
	room playerTakeItem .
	self assert: (room at: 2@4 isEmpty).
	
	
	
	! !

!testRun: #RoomTest #test14OldPosIsEmpty stamp: 'franco c 12/10/2020 21:35:26'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:35:38' prior: 50919364!
test14OldPosIsEmpty
	|room playableCharacter item|

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	item:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 1).
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	room addtoMapinWidthIndex: 2 heightIndex: 4 object: item.
	room playerTakeItem .
	self assert: ((room at: 2@4) isEmpty).
	
	
	
	! !

!testRun: #RoomTest #test14OldPosIsEmpty stamp: 'franco c 12/10/2020 21:35:40'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:36:10' prior: 50919386!
test14OldPosIsEmpty
	|room playableCharacter item|

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	item:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 1).
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	room addtoMapinWidthIndex: 2 heightIndex: 4 object: item.
	room playerTakeItem .
	self should:[room at: 2@4]
	raise:Error
	
	
	
	! !

!testRun: #RoomTest #test14OldPosIsEmpty stamp: 'franco c 12/10/2020 21:36:11'!
PASSED!

!testRun: #RoomTest #test01WidthandHeightShouldBepositive stamp: 'franco c 12/10/2020 21:36:11'!
PASSED!

!testRun: #RoomTest #test02WidhtandHeightshouldBeNumbers stamp: 'franco c 12/10/2020 21:36:11'!
PASSED!

!testRun: #RoomTest #test03CantaddItemsOutOfBounds stamp: 'franco c 12/10/2020 21:36:11'!
PASSED!

!testRun: #RoomTest #test04CantaddItemswithnonintegerindexes stamp: 'franco c 12/10/2020 21:36:11'!
PASSED!

!testRun: #RoomTest #test05ObjectCantBeaddedatanOccupiedPos stamp: 'franco c 12/10/2020 21:36:11'!
PASSED!

!testRun: #RoomTest #test06OnlyValidatedObjectCanBeadded stamp: 'franco c 12/10/2020 21:36:11'!
PASSED!

!testRun: #RoomTest #test07Cantadd2players stamp: 'franco c 12/10/2020 21:36:11'!
PASSED!

!testRun: #RoomTest #test08CantMOvePlayerifthereisNoPlayer stamp: 'franco c 12/10/2020 21:36:11'!
PASSED!

!testRun: #RoomTest #test09cantMovePlayerOutOFBounds stamp: 'franco c 12/10/2020 21:36:11'!
PASSED!

!testRun: #RoomTest #test10CantmoveIfPositionIsOccupied stamp: 'franco c 12/10/2020 21:36:11'!
PASSED!

!testRun: #RoomTest #test11CharactermovesCorrectly stamp: 'franco c 12/10/2020 21:36:11'!
PASSED!

!testRun: #RoomTest #test12OldPosIsEmpty stamp: 'franco c 12/10/2020 21:36:11'!
PASSED!

!testRun: #RoomTest #test13takesItem stamp: 'franco c 12/10/2020 21:36:11'!
PASSED!

!testRun: #RoomTest #test14OldPosIsEmpty stamp: 'franco c 12/10/2020 21:36:11'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:37:05'!
test15DoesntTakeITemIfNotPortable
	|room playableCharacter item|

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	item:= (NonPortableObject  new).
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	room addtoMapinWidthIndex: 2 heightIndex: 4 object: item.
	room playerTakeItem .
	self should:[room at: 2@4]
	raise:Error
	
	
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:38:04' prior: 50919474!
test15DoesntTakeITemIfNotPortable
	|room playableCharacter item|

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	item:= (NonPortableObject  new).
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	room addtoMapinWidthIndex: 2 heightIndex: 4 object: item.
	room playerTakeItem .
	self assert: room at: (2@4) equals: NonPortableObject  class.
	
	
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:38:44' prior: 50919493!
test15DoesntTakeITemIfNotPortable
	|room playableCharacter item|

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	item:= (NonPortableObject  new).
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	room addtoMapinWidthIndex: 2 heightIndex: 4 object: item.
	room playerTakeItem .
	self assert: (room at: (2@4)) equals: NonPortableObject  class.
	
	
	
	! !

!testRun: #RoomTest #test15DoesntTakeITemIfNotPortable stamp: 'franco c 12/10/2020 21:38:45'!
ERROR!

!testRun: #RoomTest #test15DoesntTakeITemIfNotPortable stamp: 'franco c 12/10/2020 21:39:13'!
ERROR!

!testRun: #RoomTest #test15DoesntTakeITemIfNotPortable stamp: 'franco c 12/10/2020 21:40:10'!
ERROR!

!testRun: #RoomTest #test15DoesntTakeITemIfNotPortable stamp: 'franco c 12/10/2020 21:41:14'!
ERROR!

!testRun: #RoomTest #test15DoesntTakeITemIfNotPortable stamp: 'franco c 12/10/2020 21:41:53'!
ERROR!

!testRun: #RoomTest #test15DoesntTakeITemIfNotPortable stamp: 'franco c 12/10/2020 21:42:16'!
ERROR!

container!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:43:53' prior: 50919512!
test15DoesntTakeITemIfNotPortable
	|room playableCharacter item|

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	item:= (NonPortableObject  initialize).
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	room addtoMapinWidthIndex: 2 heightIndex: 4 object: item.
	room playerTakeItem .
	self assert: (room at: (2@4)) equals: NonPortableObject  class.
	
	
	
	! !

!testRun: #RoomTest #test15DoesntTakeITemIfNotPortable stamp: 'franco c 12/10/2020 21:43:55'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:44:09' prior: 50919551!
test15DoesntTakeITemIfNotPortable
	|room playableCharacter item|

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	item:= (NonPortableObject  initialize).
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	room addtoMapinWidthIndex: 2 heightIndex: 4 object: item.
	room playerTakeItem .
	self assert: (room at: (2@4)) equals: NonPortableObject initialize.
	
	
	
	! !

!testRun: #RoomTest #test01WidthandHeightShouldBepositive stamp: 'franco c 12/10/2020 21:44:11'!
PASSED!

!testRun: #RoomTest #test02WidhtandHeightshouldBeNumbers stamp: 'franco c 12/10/2020 21:44:11'!
PASSED!

!testRun: #RoomTest #test03CantaddItemsOutOfBounds stamp: 'franco c 12/10/2020 21:44:11'!
PASSED!

!testRun: #RoomTest #test04CantaddItemswithnonintegerindexes stamp: 'franco c 12/10/2020 21:44:11'!
PASSED!

!testRun: #RoomTest #test05ObjectCantBeaddedatanOccupiedPos stamp: 'franco c 12/10/2020 21:44:11'!
PASSED!

!testRun: #RoomTest #test06OnlyValidatedObjectCanBeadded stamp: 'franco c 12/10/2020 21:44:11'!
PASSED!

!testRun: #RoomTest #test07Cantadd2players stamp: 'franco c 12/10/2020 21:44:11'!
PASSED!

!testRun: #RoomTest #test08CantMOvePlayerifthereisNoPlayer stamp: 'franco c 12/10/2020 21:44:11'!
PASSED!

!testRun: #RoomTest #test09cantMovePlayerOutOFBounds stamp: 'franco c 12/10/2020 21:44:11'!
PASSED!

!testRun: #RoomTest #test10CantmoveIfPositionIsOccupied stamp: 'franco c 12/10/2020 21:44:11'!
PASSED!

!testRun: #RoomTest #test11CharactermovesCorrectly stamp: 'franco c 12/10/2020 21:44:11'!
PASSED!

!testRun: #RoomTest #test12OldPosIsEmpty stamp: 'franco c 12/10/2020 21:44:11'!
PASSED!

!testRun: #RoomTest #test13takesItem stamp: 'franco c 12/10/2020 21:44:11'!
PASSED!

!testRun: #RoomTest #test14OldPosIsEmpty stamp: 'franco c 12/10/2020 21:44:11'!
PASSED!

!testRun: #RoomTest #test15DoesntTakeITemIfNotPortable stamp: 'franco c 12/10/2020 21:44:11'!
FAILURE!

!testRun: #RoomTest #test15DoesntTakeITemIfNotPortable stamp: 'franco c 12/10/2020 21:44:11'!
FAILURE!

!testRun: #RoomTest #test15DoesntTakeITemIfNotPortable stamp: 'franco c 12/10/2020 21:44:19'!
FAILURE!

!testRun: #RoomTest #test15DoesntTakeITemIfNotPortable stamp: 'franco c 12/10/2020 21:44:19'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:44:32' prior: 50919574!
test15DoesntTakeITemIfNotPortable
	|room playableCharacter item|

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	item:= (NonPortableObject  initialize).
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	room addtoMapinWidthIndex: 2 heightIndex: 4 object: item.
	room playerTakeItem .
	self assert: (room at: (2@4)) equals: item.
	
	
	
	! !

!testRun: #RoomTest #test15DoesntTakeITemIfNotPortable stamp: 'franco c 12/10/2020 21:44:33'!
PASSED!

!testRun: #RoomTest #test01WidthandHeightShouldBepositive stamp: 'franco c 12/10/2020 21:44:33'!
PASSED!

!testRun: #RoomTest #test02WidhtandHeightshouldBeNumbers stamp: 'franco c 12/10/2020 21:44:33'!
PASSED!

!testRun: #RoomTest #test03CantaddItemsOutOfBounds stamp: 'franco c 12/10/2020 21:44:33'!
PASSED!

!testRun: #RoomTest #test04CantaddItemswithnonintegerindexes stamp: 'franco c 12/10/2020 21:44:33'!
PASSED!

!testRun: #RoomTest #test05ObjectCantBeaddedatanOccupiedPos stamp: 'franco c 12/10/2020 21:44:33'!
PASSED!

!testRun: #RoomTest #test06OnlyValidatedObjectCanBeadded stamp: 'franco c 12/10/2020 21:44:33'!
PASSED!

!testRun: #RoomTest #test07Cantadd2players stamp: 'franco c 12/10/2020 21:44:33'!
PASSED!

!testRun: #RoomTest #test08CantMOvePlayerifthereisNoPlayer stamp: 'franco c 12/10/2020 21:44:33'!
PASSED!

!testRun: #RoomTest #test09cantMovePlayerOutOFBounds stamp: 'franco c 12/10/2020 21:44:33'!
PASSED!

!testRun: #RoomTest #test10CantmoveIfPositionIsOccupied stamp: 'franco c 12/10/2020 21:44:33'!
PASSED!

!testRun: #RoomTest #test11CharactermovesCorrectly stamp: 'franco c 12/10/2020 21:44:33'!
PASSED!

!testRun: #RoomTest #test12OldPosIsEmpty stamp: 'franco c 12/10/2020 21:44:33'!
PASSED!

!testRun: #RoomTest #test13takesItem stamp: 'franco c 12/10/2020 21:44:33'!
PASSED!

!testRun: #RoomTest #test14OldPosIsEmpty stamp: 'franco c 12/10/2020 21:44:33'!
PASSED!

!testRun: #RoomTest #test15DoesntTakeITemIfNotPortable stamp: 'franco c 12/10/2020 21:44:33'!
PASSED!

!testRun: #RoomTest #test01WidthandHeightShouldBepositive stamp: 'franco c 12/10/2020 21:44:37'!
PASSED!

!testRun: #RoomTest #test02WidhtandHeightshouldBeNumbers stamp: 'franco c 12/10/2020 21:44:37'!
PASSED!

!testRun: #RoomTest #test03CantaddItemsOutOfBounds stamp: 'franco c 12/10/2020 21:44:37'!
PASSED!

!testRun: #RoomTest #test04CantaddItemswithnonintegerindexes stamp: 'franco c 12/10/2020 21:44:37'!
PASSED!

!testRun: #RoomTest #test05ObjectCantBeaddedatanOccupiedPos stamp: 'franco c 12/10/2020 21:44:37'!
PASSED!

!testRun: #RoomTest #test06OnlyValidatedObjectCanBeadded stamp: 'franco c 12/10/2020 21:44:37'!
PASSED!

!testRun: #RoomTest #test07Cantadd2players stamp: 'franco c 12/10/2020 21:44:37'!
PASSED!

!testRun: #RoomTest #test08CantMOvePlayerifthereisNoPlayer stamp: 'franco c 12/10/2020 21:44:37'!
PASSED!

!testRun: #RoomTest #test09cantMovePlayerOutOFBounds stamp: 'franco c 12/10/2020 21:44:37'!
PASSED!

!testRun: #RoomTest #test10CantmoveIfPositionIsOccupied stamp: 'franco c 12/10/2020 21:44:37'!
PASSED!

!testRun: #RoomTest #test11CharactermovesCorrectly stamp: 'franco c 12/10/2020 21:44:37'!
PASSED!

!testRun: #RoomTest #test12OldPosIsEmpty stamp: 'franco c 12/10/2020 21:44:37'!
PASSED!

!testRun: #RoomTest #test13takesItem stamp: 'franco c 12/10/2020 21:44:37'!
PASSED!

!testRun: #RoomTest #test14OldPosIsEmpty stamp: 'franco c 12/10/2020 21:44:37'!
PASSED!

!testRun: #RoomTest #test15DoesntTakeITemIfNotPortable stamp: 'franco c 12/10/2020 21:44:37'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:45:04'!
test16DoesntTakeITemIfoutOfBounds
	|room playableCharacter item|

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	item:= (NonPortableObject  initialize).
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	room addtoMapinWidthIndex: 2 heightIndex: 4 object: item.
	room playerTakeItem .
	self assert: (room at: (2@4)) equals: item.
	
	
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:45:19' prior: 50919765!
test16DoesntTakeITemIfoutOfBounds
	|room playableCharacter item|

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	item:= (NonPortableObject  initialize).
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 4 object: playableCharacter.
	
	room playerTakeItem .
	self assert: (room at: (2@4)) equals: item.
	
	
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:45:54' prior: 50919784!
test16DoesntTakeITemIfoutOfBounds
	|room playableCharacter item|

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	item:= (NonPortableObject  initialize).
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 4 object: playableCharacter.
	
	
	self should:[room playerTakeItem ]
	raise: Error
	withMessageText: Room movingoutOfBounds
	
	
	
	! !

!testRun: #RoomTest #test16DoesntTakeITemIfoutOfBounds stamp: 'franco c 12/10/2020 21:46:08'!
PASSED!

!testRun: #RoomTest #test01WidthandHeightShouldBepositive stamp: 'franco c 12/10/2020 21:46:08'!
PASSED!

!testRun: #RoomTest #test02WidhtandHeightshouldBeNumbers stamp: 'franco c 12/10/2020 21:46:08'!
PASSED!

!testRun: #RoomTest #test03CantaddItemsOutOfBounds stamp: 'franco c 12/10/2020 21:46:08'!
PASSED!

!testRun: #RoomTest #test04CantaddItemswithnonintegerindexes stamp: 'franco c 12/10/2020 21:46:08'!
PASSED!

!testRun: #RoomTest #test05ObjectCantBeaddedatanOccupiedPos stamp: 'franco c 12/10/2020 21:46:08'!
PASSED!

!testRun: #RoomTest #test06OnlyValidatedObjectCanBeadded stamp: 'franco c 12/10/2020 21:46:08'!
PASSED!

!testRun: #RoomTest #test07Cantadd2players stamp: 'franco c 12/10/2020 21:46:08'!
PASSED!

!testRun: #RoomTest #test08CantMOvePlayerifthereisNoPlayer stamp: 'franco c 12/10/2020 21:46:08'!
PASSED!

!testRun: #RoomTest #test09cantMovePlayerOutOFBounds stamp: 'franco c 12/10/2020 21:46:08'!
PASSED!

!testRun: #RoomTest #test10CantmoveIfPositionIsOccupied stamp: 'franco c 12/10/2020 21:46:08'!
PASSED!

!testRun: #RoomTest #test11CharactermovesCorrectly stamp: 'franco c 12/10/2020 21:46:08'!
PASSED!

!testRun: #RoomTest #test12OldPosIsEmpty stamp: 'franco c 12/10/2020 21:46:08'!
PASSED!

!testRun: #RoomTest #test13takesItem stamp: 'franco c 12/10/2020 21:46:08'!
PASSED!

!testRun: #RoomTest #test14OldPosIsEmpty stamp: 'franco c 12/10/2020 21:46:08'!
PASSED!

!testRun: #RoomTest #test15DoesntTakeITemIfNotPortable stamp: 'franco c 12/10/2020 21:46:08'!
PASSED!

!testRun: #RoomTest #test16DoesntTakeITemIfoutOfBounds stamp: 'franco c 12/10/2020 21:46:08'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:46:53'!
test16tryingtotakeanEmptyslotRaisesError
	|room playableCharacter item|

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	item:= (NonPortableObject  initialize).
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	
	
	self should:[room playerTakeItem ]
	raise: Error
	withMessageText: Room 
	
	
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:47:12'!
test17tryingtotakeanEmptyslotRaisesError
	|room playableCharacter item|

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	item:= (NonPortableObject  initialize).
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	
	
	self should:[room playerTakeItem ]
	raise: Error
	withMessageText: Room 
	
	
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:47:22' prior: 50919889!
test17tryingtotakeanEmptyslotRaisesError
	|room playableCharacter|

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	
	
	self should:[room playerTakeItem ]
	raise: Error
	withMessageText: Room 
	
	
	
	! !

!methodRemoval: RoomTest #test16tryingtotakeanEmptyslotRaisesError stamp: 'franco c 12/10/2020 21:47:27'!
test16tryingtotakeanEmptyslotRaisesError
	|room playableCharacter item|

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	item:= (NonPortableObject  initialize).
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	
	
	self should:[room playerTakeItem ]
	raise: Error
	withMessageText: Room 
	
	
	
	!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:47:41' prior: 50919907!
test17tryingtotakeanEmptyslotRaisesError
	|room playableCharacter|

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	
	
	self should:[room playerTakeItem ]
	raise: Error
	withMessageText: Room signalNoItemToGrab 
	
	
	
	! !

!testRun: #RoomTest #test17tryingtotakeanEmptyslotRaisesError stamp: 'franco c 12/10/2020 21:47:42'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'franco c 12/10/2020 21:48:35' prior: 50919941!
test17tryingtotakeanEmptyslotRaisesError
	|room playableCharacter|

	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100)  heading: #North .
	
	room:= Room withWidth: 5 withHeight: 4.
	room addtoMapinWidthIndex: 2 heightIndex: 3 object: playableCharacter.
	
	
	self should:[room playerTakeItem ]
	raise: Error
	withMessageText: Room posIsempty 
	
	
	
	! !

!testRun: #RoomTest #test17tryingtotakeanEmptyslotRaisesError stamp: 'franco c 12/10/2020 21:48:36'!
PASSED!

!testRun: #RoomTest #test01WidthandHeightShouldBepositive stamp: 'franco c 12/10/2020 21:48:36'!
PASSED!

!testRun: #RoomTest #test02WidhtandHeightshouldBeNumbers stamp: 'franco c 12/10/2020 21:48:36'!
PASSED!

!testRun: #RoomTest #test03CantaddItemsOutOfBounds stamp: 'franco c 12/10/2020 21:48:36'!
PASSED!

!testRun: #RoomTest #test04CantaddItemswithnonintegerindexes stamp: 'franco c 12/10/2020 21:48:36'!
PASSED!

!testRun: #RoomTest #test05ObjectCantBeaddedatanOccupiedPos stamp: 'franco c 12/10/2020 21:48:36'!
PASSED!

!testRun: #RoomTest #test06OnlyValidatedObjectCanBeadded stamp: 'franco c 12/10/2020 21:48:36'!
PASSED!

!testRun: #RoomTest #test07Cantadd2players stamp: 'franco c 12/10/2020 21:48:36'!
PASSED!

!testRun: #RoomTest #test08CantMOvePlayerifthereisNoPlayer stamp: 'franco c 12/10/2020 21:48:36'!
PASSED!

!testRun: #RoomTest #test09cantMovePlayerOutOFBounds stamp: 'franco c 12/10/2020 21:48:36'!
PASSED!

!testRun: #RoomTest #test10CantmoveIfPositionIsOccupied stamp: 'franco c 12/10/2020 21:48:36'!
PASSED!

!testRun: #RoomTest #test11CharactermovesCorrectly stamp: 'franco c 12/10/2020 21:48:36'!
PASSED!

!testRun: #RoomTest #test12OldPosIsEmpty stamp: 'franco c 12/10/2020 21:48:36'!
PASSED!

!testRun: #RoomTest #test13takesItem stamp: 'franco c 12/10/2020 21:48:36'!
PASSED!

!testRun: #RoomTest #test14OldPosIsEmpty stamp: 'franco c 12/10/2020 21:48:36'!
PASSED!

!testRun: #RoomTest #test15DoesntTakeITemIfNotPortable stamp: 'franco c 12/10/2020 21:48:36'!
PASSED!

!testRun: #RoomTest #test16DoesntTakeITemIfoutOfBounds stamp: 'franco c 12/10/2020 21:48:36'!
PASSED!

!testRun: #RoomTest #test17tryingtotakeanEmptyslotRaisesError stamp: 'franco c 12/10/2020 21:48:36'!
PASSED!

!testRun: #RoomTest #test01WidthandHeightShouldBepositive stamp: 'franco c 12/10/2020 21:52:00'!
PASSED!

!testRun: #RoomTest #test02WidhtandHeightshouldBeNumbers stamp: 'franco c 12/10/2020 21:52:00'!
PASSED!

!testRun: #RoomTest #test03CantaddItemsOutOfBounds stamp: 'franco c 12/10/2020 21:52:00'!
PASSED!

!testRun: #RoomTest #test04CantaddItemswithnonintegerindexes stamp: 'franco c 12/10/2020 21:52:00'!
PASSED!

!testRun: #RoomTest #test05ObjectCantBeaddedatanOccupiedPos stamp: 'franco c 12/10/2020 21:52:00'!
PASSED!

!testRun: #RoomTest #test06OnlyValidatedObjectCanBeadded stamp: 'franco c 12/10/2020 21:52:00'!
PASSED!

!testRun: #RoomTest #test07Cantadd2players stamp: 'franco c 12/10/2020 21:52:00'!
PASSED!

!testRun: #RoomTest #test08CantMOvePlayerifthereisNoPlayer stamp: 'franco c 12/10/2020 21:52:00'!
PASSED!

!testRun: #RoomTest #test09cantMovePlayerOutOFBounds stamp: 'franco c 12/10/2020 21:52:00'!
PASSED!

!testRun: #RoomTest #test10CantmoveIfPositionIsOccupied stamp: 'franco c 12/10/2020 21:52:00'!
PASSED!

!testRun: #RoomTest #test11CharactermovesCorrectly stamp: 'franco c 12/10/2020 21:52:00'!
PASSED!

!testRun: #RoomTest #test12OldPosIsEmpty stamp: 'franco c 12/10/2020 21:52:00'!
PASSED!

!testRun: #RoomTest #test13takesItem stamp: 'franco c 12/10/2020 21:52:00'!
PASSED!

!testRun: #RoomTest #test14OldPosIsEmpty stamp: 'franco c 12/10/2020 21:52:00'!
PASSED!

!testRun: #RoomTest #test15DoesntTakeITemIfNotPortable stamp: 'franco c 12/10/2020 21:52:00'!
PASSED!

!testRun: #RoomTest #test16DoesntTakeITemIfoutOfBounds stamp: 'franco c 12/10/2020 21:52:00'!
PASSED!

!testRun: #RoomTest #test17tryingtotakeanEmptyslotRaisesError stamp: 'franco c 12/10/2020 21:52:00'!
PASSED!

!classRemoval: #Vacio stamp: 'franco c 12/10/2020 21:52:10'!
Object subclass: #Vacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'franco c 12/10/2020 21:52:16'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'franco c 12/10/2020 21:52:16'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'franco c 12/10/2020 21:52:16'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'franco c 12/10/2020 21:52:16'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'franco c 12/10/2020 21:52:16'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'franco c 12/10/2020 21:52:16'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'franco c 12/10/2020 21:52:16'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'franco c 12/10/2020 21:52:16'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'franco c 12/10/2020 21:52:16'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'franco c 12/10/2020 21:52:16'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'franco c 12/10/2020 21:52:16'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'franco c 12/10/2020 21:52:16'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'franco c 12/10/2020 21:52:16'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'franco c 12/10/2020 21:52:16'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'franco c 12/10/2020 21:52:16'!
PASSED!

!testRun: #BackpackTest #test16ShouldAddWeightWhenAddingPortableObjects stamp: 'franco c 12/10/2020 21:52:16'!
PASSED!

!testRun: #BackpackTest #test17Nonportableiaddedcorrectly stamp: 'franco c 12/10/2020 21:52:16'!
PASSED!

!testRun: #BackpackTest #test18NonportableinsideNonPortable stamp: 'franco c 12/10/2020 21:52:16'!
PASSED!

!testRun: #BackpackTest #test19NonportableisEmptyafterBackpacktakesObjects stamp: 'franco c 12/10/2020 21:52:16'!
PASSED!

!testRun: #RoomTest #test01WidthandHeightShouldBepositive stamp: 'franco c 12/10/2020 21:52:23'!
PASSED!

!testRun: #RoomTest #test02WidhtandHeightshouldBeNumbers stamp: 'franco c 12/10/2020 21:52:23'!
PASSED!

!testRun: #RoomTest #test03CantaddItemsOutOfBounds stamp: 'franco c 12/10/2020 21:52:23'!
PASSED!

!testRun: #RoomTest #test04CantaddItemswithnonintegerindexes stamp: 'franco c 12/10/2020 21:52:23'!
PASSED!

!testRun: #RoomTest #test05ObjectCantBeaddedatanOccupiedPos stamp: 'franco c 12/10/2020 21:52:23'!
PASSED!

!testRun: #RoomTest #test06OnlyValidatedObjectCanBeadded stamp: 'franco c 12/10/2020 21:52:23'!
PASSED!

!testRun: #RoomTest #test07Cantadd2players stamp: 'franco c 12/10/2020 21:52:23'!
PASSED!

!testRun: #RoomTest #test08CantMOvePlayerifthereisNoPlayer stamp: 'franco c 12/10/2020 21:52:23'!
PASSED!

!testRun: #RoomTest #test09cantMovePlayerOutOFBounds stamp: 'franco c 12/10/2020 21:52:23'!
PASSED!

!testRun: #RoomTest #test10CantmoveIfPositionIsOccupied stamp: 'franco c 12/10/2020 21:52:23'!
PASSED!

!testRun: #RoomTest #test11CharactermovesCorrectly stamp: 'franco c 12/10/2020 21:52:23'!
PASSED!

!testRun: #RoomTest #test12OldPosIsEmpty stamp: 'franco c 12/10/2020 21:52:23'!
PASSED!

!testRun: #RoomTest #test13takesItem stamp: 'franco c 12/10/2020 21:52:23'!
PASSED!

!testRun: #RoomTest #test14OldPosIsEmpty stamp: 'franco c 12/10/2020 21:52:23'!
PASSED!

!testRun: #RoomTest #test15DoesntTakeITemIfNotPortable stamp: 'franco c 12/10/2020 21:52:23'!
PASSED!

!testRun: #RoomTest #test16DoesntTakeITemIfoutOfBounds stamp: 'franco c 12/10/2020 21:52:23'!
PASSED!

!testRun: #RoomTest #test17tryingtotakeanEmptyslotRaisesError stamp: 'franco c 12/10/2020 21:52:23'!
PASSED!

----QUIT----(10 December 2020 21:54:30) CuisUniversity-4365.image priorSource: 18668160!