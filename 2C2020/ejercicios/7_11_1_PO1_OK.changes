

----STARTUP---- (8 November 2020 18:08:55) as C:\Program Files\CuisUniversity\CuisUniversity-4365.image!


----End fileIn of C:\Users\ebonansea\Documents\Personal\Facultad\Ingenieria de software 1\Ejercicios propios\18-Portfolio1\Portfolio-Ejercicio.st----!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 18:22:12' prior: 50979508!
isInAboveHierarchy: aPortfolio

	parentsPortfolios detect:[ :portfolio | portfolio isInHierarchy: aPortfolio ] ifNone:[^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 18:22:50' prior: 50979515!
isInHierarchy: aPortfolio

	^ (self = aPortfolio) or: [ 
		childrenPortfolios detect:[ :children | children isInHierarchy: aPortfolio ] ifNone:[^ false] .
		^ true .
	].
! !
!FinancialInvestment methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 18:29:09' prior: 50979397!
register: aFinancialInvestment
	
	self subclassResponsibility ! !

!methodRemoval: Portfolio #getParentsRootAt: stamp: 'eb 11/8/2020 18:37:28'!
getParentsRootAt: aCollection

	parentsPortfolios do: [ :elemParent | (elemParent parents isEmpty) 
							ifTrue:[ ^ aCollection add: elemParent ]                                                                                 
							ifFalse: [ elemParent getParentsRootAt: aCollection ]  ]   

!

!methodRemoval: Portfolio #parents stamp: 'eb 11/8/2020 18:41:00'!
parents

	^ parentsPortfolios !

!methodRemoval: Portfolio #isInHierarchy:put: stamp: 'eb 11/8/2020 18:42:36'!
isInHierarchy: aPortfolio put: answer

	
   ((childrenPortfolios includes: aPortfolio) or: [ self = aPortfolio ] ) ifTrue: [^ answer add: aPortfolio ] 
								ifFalse: [ (childrenPortfolios isEmpty) 
									ifTrue:[ ^ answer ] 
									ifFalse:[ childrenPortfolios do: [:portfolioChild | portfolioChild isInHierarchy: aPortfolio put: answer ]]].!
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 18:49:23'!
hasInHierarchy: aPortfolio

	^ (self = aPortfolio) or: [ 
		childrenPortfolios detect:[ :children | children isInHierarchy: aPortfolio ] ifNone:[^ false] .
		^ true .
	].
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 18:49:23' prior: 50979722!
isInHierarchy: aPortfolio

	^ (self = aPortfolio) or: [ 
		childrenPortfolios detect:[ :children | children hasInHierarchy: aPortfolio ] ifNone:[^ false] .
		^ true .
	].
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 18:49:24' prior: 50979714!
isInAboveHierarchy: aPortfolio

	parentsPortfolios detect:[ :portfolio | portfolio hasInHierarchy: aPortfolio ] ifNone:[^ false ] .
	
	^ true .! !
!RootPortfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 18:49:24' prior: 50979701 overrides: 50979660!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio

	aPotentialParentPortfolio hasInHierarchy: aPotentialChildPortfolio .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 18:49:24' prior: 50979765!
hasInHierarchy: aPortfolio

	^ (self = aPortfolio) or: [ 
		childrenPortfolios detect:[ :children | children hasInHierarchy: aPortfolio ] ifNone:[^ false] .
		^ true .
	].
! !

!methodRemoval: Portfolio #isInHierarchy: stamp: 'eb 11/8/2020 18:49:24'!
isInHierarchy: aPortfolio

	^ (self = aPortfolio) or: [ 
		childrenPortfolios detect:[ :children | children hasInHierarchy: aPortfolio ] ifNone:[^ false] .
		^ true .
	].
!
!RootPortfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 18:49:43' prior: 50979792 overrides: 50979660!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio

	^ aPotentialParentPortfolio hasInHierarchy: aPotentialChildPortfolio .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 18:52:09'!
hasInAboveHierarchy: aPortfolio

	parentsPortfolios detect:[ :portfolio | portfolio hasInHierarchy: aPortfolio ] ifNone:[^ false ] .
	
	^ true .! !
!NotRootPortfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 18:52:09' prior: 50979680 overrides: 50979660!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio

	^ aPotentialParentPortfolio hasInAboveHierarchy: aPotentialChildPortfolio .! !

!methodRemoval: Portfolio #isInAboveHierarchy: stamp: 'eb 11/8/2020 18:52:10'!
isInAboveHierarchy: aPortfolio

	parentsPortfolios detect:[ :portfolio | portfolio hasInHierarchy: aPortfolio ] ifNone:[^ false ] .
	
	^ true .!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eb 11/8/2020 18:56:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 18:56:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 18:56:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eb 11/8/2020 18:56:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eb 11/8/2020 18:56:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eb 11/8/2020 18:56:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eb 11/8/2020 18:56:22'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'eb 11/8/2020 18:56:33'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 18:56:36'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'eb 11/8/2020 18:56:37'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'eb 11/8/2020 18:56:39'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'eb 11/8/2020 18:56:41'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'eb 11/8/2020 18:56:44'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 18:56:46'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 18:56:48'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'eb 11/8/2020 18:56:49'!
PASSED!

!testRun: #PortfolioTest #test10SameChildrenDifferentParents stamp: 'eb 11/8/2020 18:56:52'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'eb 11/8/2020 18:56:55'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 18:56:57'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 18:57:00'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 18:57:01'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 18:57:01'!
FAILURE!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 18:58:35'!
FAILURE!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 18:58:35'!
FAILURE!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 18:58:42'!
FAILURE!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 18:58:43'!
FAILURE!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 18:58:50'!
FAILURE!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 18:58:50'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:00:31'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:00:31'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:01:53'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:01:53'!
FAILURE!
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:04:29' prior: 50979543 overrides: 50979731!
register: aFinancialInvestment 
	
	
	^ aFinancialInvestment registerInPortfolio: self.

! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:05:11' prior: 50979968 overrides: 50979731!
register: aFinancialInvestment 
	
	
	aFinancialInvestment registerInPortfolio: self.

! !

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:05:23'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:05:23'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:06:43'!
PASSED!
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:08:40' prior: 50979555 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [self error: self class cantAddPortfolioErrorDescription ].
	aParentPortfolio registerPortfolio: self. 
	
	state _ NotRootPortfolio new.! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:08:46' prior: 50979993 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [self error: self class cantAddPortfolioErrorDescription ].
	aParentPortfolio registerPortfolio: self. 
	state _ NotRootPortfolio new.! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:08:50' prior: 50980007 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription ].
	aParentPortfolio registerPortfolio: self. 
	state _ NotRootPortfolio new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:09:19' prior: 50978986!
test14CyclesWithParentOnSingleParentNodeAreForbidden

	| portfolioRoot1 portfolioChild1 portfolioChild2 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1 .
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	
	self should: [ portfolioChild2 register: portfolioRoot1. self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription. .
		
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:09:33' prior: 50980035!
test14CyclesWithParentOnSingleParentNodeAreForbidden

	| portfolioRoot1 portfolioChild1 portfolioChild2 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1 .
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.

	self should: [ portfolioChild2 register: portfolioRoot1. self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription. .
		
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:09:59' prior: 50980058!
test14CyclesWithParentOnSingleParentNodeAreForbidden

	| portfolioRoot1 portfolioChild1 portfolioChild2 account1 |
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	portfolioRoot1 register: account1 .
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	self should: [ portfolioChild2 register: portfolioRoot1. self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription. .
		
! !

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:10:04'!
ERROR!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:10:04'!
ERROR!
!Portfolio class methodsFor: 'initialize-release' stamp: 'eb 11/8/2020 19:10:21'!
cantAddPortfolioErrorDescription
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'initialize-release' stamp: 'eb 11/8/2020 19:10:43' prior: 50980111!
cantAddPortfolioErrorDescription
	
	^ 'Portfolio cant be added.'! !
!Portfolio class methodsFor: 'initialize-release' stamp: 'eb 11/8/2020 19:10:45' prior: 50980117!
cantAddPortfolioErrorDescription
	
	^ 'Portfolio cant be added.'.! !

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'eb 11/8/2020 19:10:53'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 19:10:53'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'eb 11/8/2020 19:10:53'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'eb 11/8/2020 19:10:53'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'eb 11/8/2020 19:10:53'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'eb 11/8/2020 19:10:54'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 19:10:54'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 19:10:54'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'eb 11/8/2020 19:10:54'!
PASSED!

!testRun: #PortfolioTest #test10SameChildrenDifferentParents stamp: 'eb 11/8/2020 19:10:54'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'eb 11/8/2020 19:10:54'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 19:10:54'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 19:10:54'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:10:54'!
FAILURE!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:10:54'!
FAILURE!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:10:54'!
FAILURE!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:10:54'!
FAILURE!

!testRun: #PortfolioTest #test19 stamp: 'eb 11/8/2020 19:10:54'!
FAILURE!

!testRun: #PortfolioTest #test20 stamp: 'eb 11/8/2020 19:10:54'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:11:01'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:11:01'!
FAILURE!
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:12:06' prior: 50980021 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ ^ self error: self class cantAddPortfolioErrorDescription ].
	aParentPortfolio registerPortfolio: self. 
	state _ NotRootPortfolio new.! !

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:12:13'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:12:13'!
FAILURE!

aParentPortfolio itsHierarchyHas: self!
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:13:36' prior: 50979975 overrides: 50979731!
register: aFinancialInvestment 
	
	
	^ aFinancialInvestment registerInPortfolio: self.

! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:13:58' prior: 50980202 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ ^ self error: self class cantAddPortfolioErrorDescription ].
	aParentPortfolio registerPortfolio: self. 
	state _ NotRootPortfolio new.
	
	^ self .! !

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:14:07'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:14:07'!
FAILURE!

----QUIT----(8 November 2020 19:14:23) CuisUniversity-4365.image priorSource: 20704373!

----STARTUP---- (8 November 2020 19:14:30) as C:\Program Files\CuisUniversity\CuisUniversity-4365.image!


!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:14:44'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:14:44'!
FAILURE!
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:16:46' prior: 50980232 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription ].
	aParentPortfolio registerPortfolio: self. 
	state _ NotRootPortfolio new.
	
	^ self .! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:17:43' prior: 50980268 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	(aParentPortfolio itsHierarchyHas: self) ifFalse: 
	[
		aParentPortfolio registerPortfolio: self. 
		state _ NotRootPortfolio new.
		^ self .
  	].
	self error: self class cantAddPortfolioErrorDescription.
	! !

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:17:54'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:17:54'!
FAILURE!
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:21:39' prior: 50980283 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	"(aParentPortfolio itsHierarchyHas: self) ifFalse: 
	[
		aParentPortfolio registerPortfolio: self. 
		state _ NotRootPortfolio new.
		^ self .
  	]."
	self error: self class cantAddPortfolioErrorDescription.
	! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:22:09' prior: 50980306 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	(aParentPortfolio itsHierarchyHas: self) ifFalse: 
	[
		aParentPortfolio registerPortfolio: self. 
		state _ NotRootPortfolio new.
		^ self .
  	].
	self error: self class cantAddPortfolioErrorDescription.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:22:53' prior: 50980081!
test14CyclesWithParentOnSingleParentNodeAreForbidden

	| portfolioRoot1 portfolioChild1 portfolioChild2 account1 |
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	portfolioRoot1 register: account1 .
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	
	self halt.
	self should: [ portfolioChild2 register: portfolioRoot1. self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription. .
		
! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:23:07' prior: 50980321 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	"(aParentPortfolio itsHierarchyHas: self) ifFalse: 
	[
		aParentPortfolio registerPortfolio: self. 
		state _ NotRootPortfolio new.
		^ self .
  	]."
	self error: self class cantAddPortfolioErrorDescription.
	! !

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:23:13'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:23:27'!
ERROR!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:23:27'!
ERROR!
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:24:00' prior: 50980360 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	(aParentPortfolio itsHierarchyHas: self) ifFalse: 
	[
		aParentPortfolio registerPortfolio: self. 
		state _ NotRootPortfolio new.
		^ self .
  	].
	self error: self class cantAddPortfolioErrorDescription.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:24:41' prior: 50980336!
test14CyclesWithParentOnSingleParentNodeAreForbidden

	| portfolioRoot1 portfolioChild1 portfolioChild2 account1 |
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	portfolioRoot1 register: account1 .
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	
	self should: [ portfolioChild2 register: portfolioRoot1. self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription. .
		
! !

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:24:43'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:24:43'!
FAILURE!

self = aParentPortfolio !

aParentPortfolio itsHierarchyHas: self!

self itsHierarchyHas: self .!

self itsHierarchyHas: self!
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:27:03' prior: 50980386 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	[
		aParentPortfolio registerPortfolio: self. 
		state _ NotRootPortfolio new.
		^ self .
  	].
	self error: self class cantAddPortfolioErrorDescription.
	! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:27:19' prior: 50980436 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	
	aParentPortfolio registerPortfolio: self. 
	
	state _ NotRootPortfolio new.
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'eb 11/8/2020 19:27:44'!
registerAsChildOf: aPortfolio

	aPortfolio registerAccount: self.! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:27:44'!
registerAsChildOf: aParentPortfolio
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	
	aParentPortfolio registerPortfolio: self. 
	
	state _ NotRootPortfolio new.
	! !
!FinancialInvestment methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:27:44'!
registerAsChildOf: aPortfolio

	self subclassResponsibility .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:27:45' prior: 50980225 overrides: 50979731!
register: aFinancialInvestment 
	
	
	^ aFinancialInvestment registerAsChildOf: self.

! !

!methodRemoval: ReceptiveAccount #registerInPortfolio: stamp: 'eb 11/8/2020 19:27:45'!
registerInPortfolio: aPortfolio

	aPortfolio registerAccount: self.!

!methodRemoval: Portfolio #registerInPortfolio: stamp: 'eb 11/8/2020 19:27:45'!
registerInPortfolio: aParentPortfolio
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	
	aParentPortfolio registerPortfolio: self. 
	
	state _ NotRootPortfolio new.
	!

!methodRemoval: FinancialInvestment #registerInPortfolio: stamp: 'eb 11/8/2020 19:27:45'!
registerInPortfolio: aPortfolio

	self subclassResponsibility .!
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:32:38'!
registerChildPortfolio: aPortfolio

	aPortfolio addParent: self.
		
	childrenPortfolios add: aPortfolio . ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:32:38' prior: 50980465 overrides: 50980476!
registerAsChildOf: aParentPortfolio
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	
	aParentPortfolio registerChildPortfolio: self. 
	
	state _ NotRootPortfolio new.
	! !

!methodRemoval: Portfolio #registerPortfolio: stamp: 'eb 11/8/2020 19:32:38'!
registerPortfolio: aPortfolio

	aPortfolio addParent: self.
		
	childrenPortfolios add: aPortfolio . !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:33:13' prior: 50980507!
registerChildPortfolio: aPortfolio
	aPortfolio addParent: self.
	childrenPortfolios add: aPortfolio . ! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:33:21' prior: 50980531!
registerChildPortfolio: aChildPortfolio
	aChildPortfolio addParent: self.
	childrenPortfolios add: aChildPortfolio . ! !
!Portfolio methodsFor: 'portfolios' stamp: 'eb 11/8/2020 19:33:40' prior: 50979469!
addParent: aParentPorfolio 
	
	parentsPortfolios add: aParentPorfolio .! !
!Portfolio methodsFor: 'portfolios' stamp: 'eb 11/8/2020 19:33:55' prior: 50980545!
addParent: aParentPorfolio 
	parentsPortfolios add: aParentPorfolio .! !
!Portfolio methodsFor: 'portfolios' stamp: 'eb 11/8/2020 19:34:13'!
addParentPortfolio: aParentPorfolio 
	parentsPortfolios add: aParentPorfolio .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:34:13' prior: 50980538!
registerChildPortfolio: aChildPortfolio
	aChildPortfolio addParentPortfolio: self.
	childrenPortfolios add: aChildPortfolio . ! !

!methodRemoval: Portfolio #addParent: stamp: 'eb 11/8/2020 19:34:13'!
addParent: aParentPorfolio 
	parentsPortfolios add: aParentPorfolio .!
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:34:26' prior: 50980482 overrides: 50979731!
register: aFinancialInvestment 	
	^ aFinancialInvestment registerAsChildOf: self.

! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:34:40' prior: 50979549!
registerAccount: aReceptiveAccount	
	accounts add: aReceptiveAccount ! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:35:00' prior: 50979826!
hasInAboveHierarchy: aPortfolio
	parentsPortfolios detect:[ :portfolio | portfolio hasInHierarchy: aPortfolio ] ifNone:[^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:35:03' prior: 50980586!
hasInAboveHierarchy: aPortfolio
	parentsPortfolios detect: [ :portfolio | portfolio hasInHierarchy: aPortfolio ] ifNone:[^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:35:44' prior: 50980594!
hasInAboveHierarchy: aPortfolio
	parentsPortfolios detect:[ :portfolio | portfolio hasInHierarchy: aPortfolio ] ifNone:[^ false ] .
	
	^ true .! !

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'eb 11/8/2020 19:35:45'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 19:35:45'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'eb 11/8/2020 19:35:45'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'eb 11/8/2020 19:35:45'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'eb 11/8/2020 19:35:45'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'eb 11/8/2020 19:35:45'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 19:35:45'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 19:35:45'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'eb 11/8/2020 19:35:45'!
PASSED!

!testRun: #PortfolioTest #test10SameChildrenDifferentParents stamp: 'eb 11/8/2020 19:35:45'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'eb 11/8/2020 19:35:45'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 19:35:45'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 19:35:45'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:35:45'!
FAILURE!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:35:45'!
FAILURE!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:35:45'!
FAILURE!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:35:45'!
FAILURE!

!testRun: #PortfolioTest #test19 stamp: 'eb 11/8/2020 19:35:45'!
FAILURE!

!testRun: #PortfolioTest #test20 stamp: 'eb 11/8/2020 19:35:45'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eb 11/8/2020 19:35:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 19:35:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 19:35:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eb 11/8/2020 19:35:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eb 11/8/2020 19:35:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eb 11/8/2020 19:35:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eb 11/8/2020 19:35:45'!
PASSED!
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:35:50' prior: 50980602!
hasInAboveHierarchy: aPortfolio
	parentsPortfolios detect: [ :portfolio | portfolio hasInHierarchy: aPortfolio ] ifNone:[^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:37:07' prior: 50980702!
hasInAboveHierarchy: aPortfolio
	parentsPortfolios detect: [ :portfolio | portfolio hasInHierarchy: aPortfolio ] ifNone: [^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:37:16' prior: 50979800!
hasInHierarchy: aPortfolio
	^ (self = aPortfolio) or: [ 
		childrenPortfolios detect:[ :children | children hasInHierarchy: aPortfolio ] ifNone:[^ false] .
		^ true .
	].
! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:38:34' prior: 50980718!
hasInHierarchy: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children hasInHierarchy: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:38:57' prior: 50979537!
itsHierarchyHas: aPortfolio

	^ state lookFor: aPortfolio intoHierarchyOf: self.
! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:39:00' prior: 50980737!
itsHierarchyHas: aPortfolio
	^ state lookFor: aPortfolio intoHierarchyOf: self.
! !
!PortfolioState methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:39:10' prior: 50979660!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio
	self subclassResponsibility .! !
!RootPortfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:39:16' prior: 50979818 overrides: 50980749!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio
	^ aPotentialParentPortfolio hasInHierarchy: aPotentialChildPortfolio .! !
!NotRootPortfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:39:23' prior: 50979835 overrides: 50980749!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio
	^ aPotentialParentPortfolio hasInAboveHierarchy: aPotentialChildPortfolio .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:42:43'!
test01PortfolioHasNotAccountsWhenCreated

	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: portfolio isEmpty.
	
	self assert: 0 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'eb 11/8/2020 19:42:43'!
test01PortfolioHasNotAccountWhenCreated

	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: portfolio isEmpty.
	
	self assert: 0 equals: portfolio balance.!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'eb 11/8/2020 19:42:45'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 19:42:45'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'eb 11/8/2020 19:42:45'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'eb 11/8/2020 19:42:45'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'eb 11/8/2020 19:42:45'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'eb 11/8/2020 19:42:45'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 19:42:45'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 19:42:45'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'eb 11/8/2020 19:42:45'!
PASSED!

!testRun: #PortfolioTest #test10SameChildrenDifferentParents stamp: 'eb 11/8/2020 19:42:45'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'eb 11/8/2020 19:42:45'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 19:42:45'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 19:42:45'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:42:45'!
FAILURE!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:42:45'!
FAILURE!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:42:45'!
FAILURE!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:42:45'!
FAILURE!

!testRun: #PortfolioTest #test19 stamp: 'eb 11/8/2020 19:42:45'!
FAILURE!

!testRun: #PortfolioTest #test20 stamp: 'eb 11/8/2020 19:42:45'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'eb 11/8/2020 19:42:50'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'eb 11/8/2020 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'eb 11/8/2020 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'eb 11/8/2020 19:42:55'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'eb 11/8/2020 19:42:56'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'eb 11/8/2020 19:42:56'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 19:42:56'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 19:42:56'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'eb 11/8/2020 19:42:56'!
PASSED!

!testRun: #PortfolioTest #test10SameChildrenDifferentParents stamp: 'eb 11/8/2020 19:42:56'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'eb 11/8/2020 19:42:56'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 19:42:56'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 19:42:56'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:42:56'!
FAILURE!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:42:56'!
FAILURE!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:42:56'!
FAILURE!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:42:56'!
FAILURE!

!testRun: #PortfolioTest #test19 stamp: 'eb 11/8/2020 19:42:56'!
FAILURE!

!testRun: #PortfolioTest #test20 stamp: 'eb 11/8/2020 19:42:56'!
FAILURE!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 19:43:00'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'eb 11/8/2020 19:43:02'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'eb 11/8/2020 19:43:03'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'eb 11/8/2020 19:43:04'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'eb 11/8/2020 19:43:05'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 19:43:07'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 19:43:08'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'eb 11/8/2020 19:43:10'!
PASSED!

!testRun: #PortfolioTest #test10SameChildrenDifferentParents stamp: 'eb 11/8/2020 19:43:12'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'eb 11/8/2020 19:43:14'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 19:43:15'!
FAILURE!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 19:43:15'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:43:28' prior: 50978943!
test12PortofolioCantAddItself

	| portfolioRoot |
	
	portfolioRoot _ Portfolio new.
	
	self should: [ portfolioRoot register: portfolioRoot . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
		
	self assert: 0 equals: portfolioRoot amountOfAccounts.
			
	self assert: 0 equals: portfolioRoot balance.! !

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 19:43:32'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 19:43:32'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:43:46' prior: 50978958!
test13PortfolioCantBeAddedTwiceToSameParent

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioRoot1 register: portfolioChild1 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 19:43:53'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:43:55'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:43:55'!
FAILURE!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:44:00'!
FAILURE!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 19:44:00'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'eb 11/8/2020 20:15:06'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'eb 11/8/2020 20:20:27'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 20:20:30'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'eb 11/8/2020 20:20:34'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'eb 11/8/2020 20:20:37'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'eb 11/8/2020 20:20:40'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'eb 11/8/2020 20:20:43'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 20:20:45'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 20:20:48'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'eb 11/8/2020 20:20:53'!
PASSED!

!testRun: #PortfolioTest #test10SameChildrenDifferentParents stamp: 'eb 11/8/2020 20:20:58'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'eb 11/8/2020 20:21:01'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 20:21:03'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 20:21:05'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:21:07'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:21:07'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'eb 11/8/2020 20:21:18'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 20:21:18'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'eb 11/8/2020 20:21:18'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'eb 11/8/2020 20:21:18'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'eb 11/8/2020 20:21:18'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'eb 11/8/2020 20:21:18'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 20:21:18'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 20:21:18'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'eb 11/8/2020 20:21:18'!
PASSED!

!testRun: #PortfolioTest #test10SameChildrenDifferentParents stamp: 'eb 11/8/2020 20:21:18'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'eb 11/8/2020 20:21:18'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 20:21:18'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 20:21:18'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:21:19'!
FAILURE!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:21:19'!
FAILURE!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:21:19'!
FAILURE!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:21:19'!
FAILURE!

!testRun: #PortfolioTest #test19 stamp: 'eb 11/8/2020 20:21:19'!
FAILURE!

!testRun: #PortfolioTest #test20 stamp: 'eb 11/8/2020 20:21:19'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eb 11/8/2020 20:21:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 20:21:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 20:21:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eb 11/8/2020 20:21:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eb 11/8/2020 20:21:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eb 11/8/2020 20:21:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eb 11/8/2020 20:21:19'!
PASSED!

!methodRemoval: Portfolio class #cicloNoSePuedeErrorDescription stamp: 'eb 11/8/2020 20:21:48'!
cicloNoSePuedeErrorDescription
	
	^ 'No se admiten ciclos rey'!

!methodRemoval: Portfolio class #noSePuedeAgregarDosVecesElMismoElemErrorDescription stamp: 'eb 11/8/2020 20:21:53'!
noSePuedeAgregarDosVecesElMismoElemErrorDescription
	
	^ 'No se puede agregar dos veces el mismo elem' !

!methodRemoval: Portfolio class #noTePodesAgregarAVosMismoErrorDescription stamp: 'eb 11/8/2020 20:21:54'!
noTePodesAgregarAVosMismoErrorDescription
	
	^ 'No te podes agregar a vos mismo'!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'eb 11/8/2020 20:22:09'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 20:22:09'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'eb 11/8/2020 20:22:09'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'eb 11/8/2020 20:22:09'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'eb 11/8/2020 20:22:09'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'eb 11/8/2020 20:22:09'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 20:22:09'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 20:22:09'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'eb 11/8/2020 20:22:09'!
PASSED!

!testRun: #PortfolioTest #test10SameChildrenDifferentParents stamp: 'eb 11/8/2020 20:22:09'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'eb 11/8/2020 20:22:09'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 20:22:09'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 20:22:09'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:22:09'!
FAILURE!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:22:09'!
ERROR!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:22:09'!
ERROR!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:22:09'!
ERROR!

!testRun: #PortfolioTest #test19 stamp: 'eb 11/8/2020 20:22:09'!
ERROR!

!testRun: #PortfolioTest #test20 stamp: 'eb 11/8/2020 20:22:09'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eb 11/8/2020 20:22:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 20:22:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 20:22:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eb 11/8/2020 20:22:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eb 11/8/2020 20:22:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eb 11/8/2020 20:22:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eb 11/8/2020 20:22:10'!
PASSED!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:22:14'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 20:23:37' prior: 50979009!
test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden

	| portfolioRoot1 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	
	portfolioRoot1 register: portfolioChild1.
	
	portfolioChild1 register: portfolioChild2.
	
	portfolioChild1 register: portfolioChild3.
	
	portfolioChild3 register: portfolioChild4.
	
	self should: [ portfolioChild4 register: portfolioChild2 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 20:23:51' prior: 50979034!
test16CyclesWithParentOnMultipleParentNodeAreForbidden

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild4.
	portfolioRoot3 register: portfolioChild4.

	portfolioChild1 register: portfolioChild2.
	portfolioChild1 register: portfolioChild3.
	
	portfolioChild3 register: portfolioChild4.
	
	self should: [ portfolioChild4 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 20:24:01' prior: 50979064!
test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild4.
	portfolioRoot3 register: portfolioChild4.

	portfolioChild1 register: portfolioChild2.
	portfolioChild1 register: portfolioChild3.
	
	portfolioChild3 register: portfolioChild4.
	
	self should: [ portfolioChild4 register: portfolioChild2 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 20:24:25' prior: 50979094!
test19

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioChild1 register: account1 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 20:24:33' prior: 50979121!
test20

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		! !

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'eb 11/8/2020 20:24:39'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 20:24:39'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'eb 11/8/2020 20:24:39'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'eb 11/8/2020 20:24:39'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'eb 11/8/2020 20:24:39'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'eb 11/8/2020 20:24:39'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 20:24:39'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 20:24:39'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'eb 11/8/2020 20:24:39'!
PASSED!

!testRun: #PortfolioTest #test10SameChildrenDifferentParents stamp: 'eb 11/8/2020 20:24:39'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'eb 11/8/2020 20:24:39'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 20:24:39'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 20:24:39'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:24:39'!
FAILURE!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:24:39'!
FAILURE!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:24:39'!
FAILURE!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:24:39'!
FAILURE!

!testRun: #PortfolioTest #test19 stamp: 'eb 11/8/2020 20:24:39'!
FAILURE!

!testRun: #PortfolioTest #test20 stamp: 'eb 11/8/2020 20:24:39'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eb 11/8/2020 20:24:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 20:24:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 20:24:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eb 11/8/2020 20:24:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eb 11/8/2020 20:24:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eb 11/8/2020 20:24:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eb 11/8/2020 20:24:40'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:28:43'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:28:43'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'eb 11/8/2020 20:28:57'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 20:28:57'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'eb 11/8/2020 20:28:57'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'eb 11/8/2020 20:28:57'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'eb 11/8/2020 20:28:57'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'eb 11/8/2020 20:28:57'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 20:28:57'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 20:28:57'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'eb 11/8/2020 20:28:57'!
PASSED!

!testRun: #PortfolioTest #test10SameChildrenDifferentParents stamp: 'eb 11/8/2020 20:28:57'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'eb 11/8/2020 20:28:57'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 20:28:57'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 20:28:57'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:28:57'!
FAILURE!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:28:57'!
FAILURE!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:28:57'!
FAILURE!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:28:57'!
FAILURE!

!testRun: #PortfolioTest #test19 stamp: 'eb 11/8/2020 20:28:57'!
FAILURE!

!testRun: #PortfolioTest #test20 stamp: 'eb 11/8/2020 20:28:57'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:29:00'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:29:19'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:29:30'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:29:35'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'eb 11/8/2020 20:33:33'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 20:33:33'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'eb 11/8/2020 20:33:33'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'eb 11/8/2020 20:33:33'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'eb 11/8/2020 20:33:33'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'eb 11/8/2020 20:33:33'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 20:33:33'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 20:33:33'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'eb 11/8/2020 20:33:33'!
PASSED!

!testRun: #PortfolioTest #test10SameChildrenDifferentParents stamp: 'eb 11/8/2020 20:33:34'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'eb 11/8/2020 20:33:34'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 20:33:34'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 20:33:34'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:33:34'!
FAILURE!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:33:34'!
FAILURE!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:33:34'!
FAILURE!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:33:34'!
FAILURE!

!testRun: #PortfolioTest #test19 stamp: 'eb 11/8/2020 20:33:34'!
FAILURE!

!testRun: #PortfolioTest #test20 stamp: 'eb 11/8/2020 20:33:34'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eb 11/8/2020 20:33:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 20:33:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 20:33:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eb 11/8/2020 20:33:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eb 11/8/2020 20:33:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eb 11/8/2020 20:33:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eb 11/8/2020 20:33:34'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:35:01'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:35:01'!
FAILURE!
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 20:35:46' prior: 50980574 overrides: 50979731!
register: aFinancialInvestment 	
	aFinancialInvestment registerAsChildOf: self.

! !

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:35:58'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:35:58'!
FAILURE!
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 20:39:07' prior: 50981746 overrides: 50979731!
register: aFinancialInvestment 	
	
	self halt.
	aFinancialInvestment registerAsChildOf: self.

! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 20:40:27' prior: 50981760 overrides: 50979731!
register: aFinancialInvestment 	
	aFinancialInvestment registerAsChildOf: self.

! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 20:40:49' prior: 50980515 overrides: 50980476!
registerAsChildOf: aParentPortfolio
	self halt .

	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	
	aParentPortfolio registerChildPortfolio: self. 
	
	state _ NotRootPortfolio new.
	! !

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:42:22'!
FAILURE!
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 20:49:57' prior: 50980710!
hasInAboveHierarchy: aPortfolio
	parentsPortfolios detect: [ :portfolio | portfolio itsHierarchyHas: aPortfolio ] ifNone: [^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 20:50:26' prior: 50980727!
hasInHierarchy: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children itsHierarchyHas: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'eb 11/8/2020 20:50:30'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 20:50:30'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'eb 11/8/2020 20:50:30'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'eb 11/8/2020 20:50:30'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'eb 11/8/2020 20:50:30'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'eb 11/8/2020 20:50:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eb 11/8/2020 20:50:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 20:50:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 20:50:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eb 11/8/2020 20:50:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eb 11/8/2020 20:50:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eb 11/8/2020 20:50:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eb 11/8/2020 20:50:30'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 20:50:42'!
PASSED!
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 20:51:57' prior: 50981774 overrides: 50980476!
registerAsChildOf: aParentPortfolio

	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	
	aParentPortfolio registerChildPortfolio: self. 
	
	state _ NotRootPortfolio new.
	! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 20:53:52' prior: 50981789!
hasInAboveHierarchy: aPortfolio

	(state isKindOf: NotRootPortfolio) ifFalse: [self error: 'ERROR DE TIPO'].
	parentsPortfolios detect: [ :portfolio | portfolio itsHierarchyHas: aPortfolio ] ifNone: [^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 20:54:08' prior: 50981797!
hasInHierarchy: aPortfolio
	
	(state isKindOf: RootPortfolio) ifFalse: [self error: 'ERROR DE TIPO'].

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children itsHierarchyHas: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'eb 11/8/2020 20:54:11'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 20:54:11'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'eb 11/8/2020 20:54:11'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'eb 11/8/2020 20:54:11'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'eb 11/8/2020 20:54:11'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'eb 11/8/2020 20:54:11'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 20:54:11'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 20:54:11'!
PASSED!

----STARTUP---- (8 November 2020 20:54:57) as C:\Program Files\CuisUniversity\CuisUniversity-4365.image!

!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:16:46' prior: 50980232 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription ].
	aParentPortfolio registerPortfolio: self. 
	state _ NotRootPortfolio new.
	
	^ self .! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:17:43' prior: 50981924 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	(aParentPortfolio itsHierarchyHas: self) ifFalse: 
	[
		aParentPortfolio registerPortfolio: self. 
		state _ NotRootPortfolio new.
		^ self .
  	].
	self error: self class cantAddPortfolioErrorDescription.
	! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:21:39' prior: 50981939 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	"(aParentPortfolio itsHierarchyHas: self) ifFalse: 
	[
		aParentPortfolio registerPortfolio: self. 
		state _ NotRootPortfolio new.
		^ self .
  	]."
	self error: self class cantAddPortfolioErrorDescription.
	! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:22:09' prior: 50981954 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	(aParentPortfolio itsHierarchyHas: self) ifFalse: 
	[
		aParentPortfolio registerPortfolio: self. 
		state _ NotRootPortfolio new.
		^ self .
  	].
	self error: self class cantAddPortfolioErrorDescription.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:22:53' prior: 50980081!
test14CyclesWithParentOnSingleParentNodeAreForbidden

	| portfolioRoot1 portfolioChild1 portfolioChild2 account1 |
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	portfolioRoot1 register: account1 .
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	
	self halt.
	self should: [ portfolioChild2 register: portfolioRoot1. self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription. .
		
! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:23:07' prior: 50981969 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	"(aParentPortfolio itsHierarchyHas: self) ifFalse: 
	[
		aParentPortfolio registerPortfolio: self. 
		state _ NotRootPortfolio new.
		^ self .
  	]."
	self error: self class cantAddPortfolioErrorDescription.
	! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:24:00' prior: 50982008 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	(aParentPortfolio itsHierarchyHas: self) ifFalse: 
	[
		aParentPortfolio registerPortfolio: self. 
		state _ NotRootPortfolio new.
		^ self .
  	].
	self error: self class cantAddPortfolioErrorDescription.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:24:41' prior: 50981984!
test14CyclesWithParentOnSingleParentNodeAreForbidden

	| portfolioRoot1 portfolioChild1 portfolioChild2 account1 |
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	portfolioRoot1 register: account1 .
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	
	self should: [ portfolioChild2 register: portfolioRoot1. self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription. .
		
! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:27:03' prior: 50982023 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	[
		aParentPortfolio registerPortfolio: self. 
		state _ NotRootPortfolio new.
		^ self .
  	].
	self error: self class cantAddPortfolioErrorDescription.
	! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:27:19' prior: 50982061 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	
	aParentPortfolio registerPortfolio: self. 
	
	state _ NotRootPortfolio new.
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'eb 11/8/2020 19:27:44'!
registerAsChildOf: aPortfolio

	aPortfolio registerAccount: self.! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:27:44'!
registerAsChildOf: aParentPortfolio
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	
	aParentPortfolio registerPortfolio: self. 
	
	state _ NotRootPortfolio new.
	! !
!FinancialInvestment methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:27:44'!
registerAsChildOf: aPortfolio

	self subclassResponsibility .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:27:45' prior: 50980225 overrides: 50979731!
register: aFinancialInvestment 
	
	
	^ aFinancialInvestment registerAsChildOf: self.

! !

!methodRemoval: ReceptiveAccount #registerInPortfolio: stamp: 'eb 11/8/2020 20:55:05'!
registerInPortfolio: aPortfolio

	aPortfolio registerAccount: self.!

!methodRemoval: Portfolio #registerInPortfolio: stamp: 'eb 11/8/2020 20:55:05'!
registerInPortfolio: aParentPortfolio
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	
	aParentPortfolio registerPortfolio: self. 
	
	state _ NotRootPortfolio new.
	!

!methodRemoval: FinancialInvestment #registerInPortfolio: stamp: 'eb 11/8/2020 20:55:05'!
registerInPortfolio: aPortfolio

	self subclassResponsibility .!
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:32:38'!
registerChildPortfolio: aPortfolio

	aPortfolio addParent: self.
		
	childrenPortfolios add: aPortfolio . ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:32:38' prior: 50982090 overrides: 50982101!
registerAsChildOf: aParentPortfolio
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	
	aParentPortfolio registerChildPortfolio: self. 
	
	state _ NotRootPortfolio new.
	! !

!methodRemoval: Portfolio #registerPortfolio: stamp: 'eb 11/8/2020 20:55:05'!
registerPortfolio: aPortfolio

	aPortfolio addParent: self.
		
	childrenPortfolios add: aPortfolio . !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:33:13' prior: 50982132!
registerChildPortfolio: aPortfolio
	aPortfolio addParent: self.
	childrenPortfolios add: aPortfolio . ! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:33:21' prior: 50982156!
registerChildPortfolio: aChildPortfolio
	aChildPortfolio addParent: self.
	childrenPortfolios add: aChildPortfolio . ! !
!Portfolio methodsFor: 'portfolios' stamp: 'eb 11/8/2020 19:33:40' prior: 50979469!
addParent: aParentPorfolio 
	
	parentsPortfolios add: aParentPorfolio .! !
!Portfolio methodsFor: 'portfolios' stamp: 'eb 11/8/2020 19:33:55' prior: 50982170!
addParent: aParentPorfolio 
	parentsPortfolios add: aParentPorfolio .! !
!Portfolio methodsFor: 'portfolios' stamp: 'eb 11/8/2020 19:34:13'!
addParentPortfolio: aParentPorfolio 
	parentsPortfolios add: aParentPorfolio .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:34:13' prior: 50982163!
registerChildPortfolio: aChildPortfolio
	aChildPortfolio addParentPortfolio: self.
	childrenPortfolios add: aChildPortfolio . ! !

!methodRemoval: Portfolio #addParent: stamp: 'eb 11/8/2020 20:55:05'!
addParent: aParentPorfolio 
	parentsPortfolios add: aParentPorfolio .!
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:34:26' prior: 50982107 overrides: 50979731!
register: aFinancialInvestment 	
	^ aFinancialInvestment registerAsChildOf: self.

! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:34:40' prior: 50979549!
registerAccount: aReceptiveAccount	
	accounts add: aReceptiveAccount ! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:35:00' prior: 50979826!
hasInAboveHierarchy: aPortfolio
	parentsPortfolios detect:[ :portfolio | portfolio hasInHierarchy: aPortfolio ] ifNone:[^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:35:03' prior: 50982211!
hasInAboveHierarchy: aPortfolio
	parentsPortfolios detect: [ :portfolio | portfolio hasInHierarchy: aPortfolio ] ifNone:[^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:35:44' prior: 50982219!
hasInAboveHierarchy: aPortfolio
	parentsPortfolios detect:[ :portfolio | portfolio hasInHierarchy: aPortfolio ] ifNone:[^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:35:50' prior: 50982227!
hasInAboveHierarchy: aPortfolio
	parentsPortfolios detect: [ :portfolio | portfolio hasInHierarchy: aPortfolio ] ifNone:[^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:37:07' prior: 50982235!
hasInAboveHierarchy: aPortfolio
	parentsPortfolios detect: [ :portfolio | portfolio hasInHierarchy: aPortfolio ] ifNone: [^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:37:16' prior: 50979800!
hasInHierarchy: aPortfolio
	^ (self = aPortfolio) or: [ 
		childrenPortfolios detect:[ :children | children hasInHierarchy: aPortfolio ] ifNone:[^ false] .
		^ true .
	].
! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:38:34' prior: 50982251!
hasInHierarchy: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children hasInHierarchy: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:38:57' prior: 50979537!
itsHierarchyHas: aPortfolio

	^ state lookFor: aPortfolio intoHierarchyOf: self.
! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:39:00' prior: 50982270!
itsHierarchyHas: aPortfolio
	^ state lookFor: aPortfolio intoHierarchyOf: self.
! !
!PortfolioState methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:39:10' prior: 50979660!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio
	self subclassResponsibility .! !
!RootPortfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:39:16' prior: 50979818 overrides: 50982282!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio
	^ aPotentialParentPortfolio hasInHierarchy: aPotentialChildPortfolio .! !
!NotRootPortfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:39:23' prior: 50979835 overrides: 50982282!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio
	^ aPotentialParentPortfolio hasInAboveHierarchy: aPotentialChildPortfolio .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:42:43'!
test01PortfolioHasNotAccountsWhenCreated

	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: portfolio isEmpty.
	
	self assert: 0 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'eb 11/8/2020 20:55:06'!
test01PortfolioHasNotAccountWhenCreated

	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: portfolio isEmpty.
	
	self assert: 0 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:43:28' prior: 50978943!
test12PortofolioCantAddItself

	| portfolioRoot |
	
	portfolioRoot _ Portfolio new.
	
	self should: [ portfolioRoot register: portfolioRoot . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
		
	self assert: 0 equals: portfolioRoot amountOfAccounts.
			
	self assert: 0 equals: portfolioRoot balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:43:46' prior: 50978958!
test13PortfolioCantBeAddedTwiceToSameParent

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioRoot1 register: portfolioChild1 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !

!methodRemoval: Portfolio class #cicloNoSePuedeErrorDescription stamp: 'eb 11/8/2020 20:55:06'!
cicloNoSePuedeErrorDescription
	
	^ 'No se admiten ciclos rey'!

!methodRemoval: Portfolio class #noSePuedeAgregarDosVecesElMismoElemErrorDescription stamp: 'eb 11/8/2020 20:55:06'!
noSePuedeAgregarDosVecesElMismoElemErrorDescription
	
	^ 'No se puede agregar dos veces el mismo elem' !

!methodRemoval: Portfolio class #noTePodesAgregarAVosMismoErrorDescription stamp: 'eb 11/8/2020 20:55:06'!
noTePodesAgregarAVosMismoErrorDescription
	
	^ 'No te podes agregar a vos mismo'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 20:23:37' prior: 50979009!
test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden

	| portfolioRoot1 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	
	portfolioRoot1 register: portfolioChild1.
	
	portfolioChild1 register: portfolioChild2.
	
	portfolioChild1 register: portfolioChild3.
	
	portfolioChild3 register: portfolioChild4.
	
	self should: [ portfolioChild4 register: portfolioChild2 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 20:23:51' prior: 50979034!
test16CyclesWithParentOnMultipleParentNodeAreForbidden

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild4.
	portfolioRoot3 register: portfolioChild4.

	portfolioChild1 register: portfolioChild2.
	portfolioChild1 register: portfolioChild3.
	
	portfolioChild3 register: portfolioChild4.
	
	self should: [ portfolioChild4 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 20:24:01' prior: 50979064!
test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild4.
	portfolioRoot3 register: portfolioChild4.

	portfolioChild1 register: portfolioChild2.
	portfolioChild1 register: portfolioChild3.
	
	portfolioChild3 register: portfolioChild4.
	
	self should: [ portfolioChild4 register: portfolioChild2 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 20:24:25' prior: 50979094!
test19

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioChild1 register: account1 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 20:24:33' prior: 50979121!
test20

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 20:35:46' prior: 50982199 overrides: 50979731!
register: aFinancialInvestment 	
	aFinancialInvestment registerAsChildOf: self.

! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 20:39:07' prior: 50982554 overrides: 50979731!
register: aFinancialInvestment 	
	
	self halt.
	aFinancialInvestment registerAsChildOf: self.

! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 20:40:27' prior: 50982561 overrides: 50979731!
register: aFinancialInvestment 	
	aFinancialInvestment registerAsChildOf: self.

! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 20:40:49' prior: 50982140 overrides: 50982101!
registerAsChildOf: aParentPortfolio
	self halt .

	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	
	aParentPortfolio registerChildPortfolio: self. 
	
	state _ NotRootPortfolio new.
	! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 20:49:57' prior: 50982243!
hasInAboveHierarchy: aPortfolio
	parentsPortfolios detect: [ :portfolio | portfolio itsHierarchyHas: aPortfolio ] ifNone: [^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 20:50:26' prior: 50982260!
hasInHierarchy: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children itsHierarchyHas: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 20:51:57' prior: 50982575 overrides: 50982101!
registerAsChildOf: aParentPortfolio

	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	
	aParentPortfolio registerChildPortfolio: self. 
	
	state _ NotRootPortfolio new.
	! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 20:53:52' prior: 50982586!
hasInAboveHierarchy: aPortfolio

	(state isKindOf: NotRootPortfolio) ifFalse: [self error: 'ERROR DE TIPO'].
	parentsPortfolios detect: [ :portfolio | portfolio itsHierarchyHas: aPortfolio ] ifNone: [^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 20:54:08' prior: 50982594!
hasInHierarchy: aPortfolio
	
	(state isKindOf: RootPortfolio) ifFalse: [self error: 'ERROR DE TIPO'].

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children itsHierarchyHas: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !

!methodRemoval: PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:56:24'!
test14CyclesWithParentOnSingleParentNodeAreForbidden

	| portfolioRoot1 portfolioChild1 portfolioChild2 account1 |
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	portfolioRoot1 register: account1 .
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	
	self should: [ portfolioChild2 register: portfolioRoot1. self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription. .
		
!

----STARTUP---- (8 November 2020 20:56:47) as C:\Program Files\CuisUniversity\CuisUniversity-4365.image!

!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:16:46' prior: 50980232 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription ].
	aParentPortfolio registerPortfolio: self. 
	state _ NotRootPortfolio new.
	
	^ self .! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:17:43' prior: 50982665 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	(aParentPortfolio itsHierarchyHas: self) ifFalse: 
	[
		aParentPortfolio registerPortfolio: self. 
		state _ NotRootPortfolio new.
		^ self .
  	].
	self error: self class cantAddPortfolioErrorDescription.
	! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:21:39' prior: 50982680 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	"(aParentPortfolio itsHierarchyHas: self) ifFalse: 
	[
		aParentPortfolio registerPortfolio: self. 
		state _ NotRootPortfolio new.
		^ self .
  	]."
	self error: self class cantAddPortfolioErrorDescription.
	! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:22:09' prior: 50982695 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	(aParentPortfolio itsHierarchyHas: self) ifFalse: 
	[
		aParentPortfolio registerPortfolio: self. 
		state _ NotRootPortfolio new.
		^ self .
  	].
	self error: self class cantAddPortfolioErrorDescription.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:22:53' prior: 50980081!
test14CyclesWithParentOnSingleParentNodeAreForbidden

	| portfolioRoot1 portfolioChild1 portfolioChild2 account1 |
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	portfolioRoot1 register: account1 .
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	
	self halt.
	self should: [ portfolioChild2 register: portfolioRoot1. self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription. .
		
! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:23:07' prior: 50982710 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	"(aParentPortfolio itsHierarchyHas: self) ifFalse: 
	[
		aParentPortfolio registerPortfolio: self. 
		state _ NotRootPortfolio new.
		^ self .
  	]."
	self error: self class cantAddPortfolioErrorDescription.
	! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:24:00' prior: 50982749 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	(aParentPortfolio itsHierarchyHas: self) ifFalse: 
	[
		aParentPortfolio registerPortfolio: self. 
		state _ NotRootPortfolio new.
		^ self .
  	].
	self error: self class cantAddPortfolioErrorDescription.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:24:41' prior: 50982725!
test14CyclesWithParentOnSingleParentNodeAreForbidden

	| portfolioRoot1 portfolioChild1 portfolioChild2 account1 |
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	portfolioRoot1 register: account1 .
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	
	self should: [ portfolioChild2 register: portfolioRoot1. self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription. .
		
! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:27:03' prior: 50982764 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	[
		aParentPortfolio registerPortfolio: self. 
		state _ NotRootPortfolio new.
		^ self .
  	].
	self error: self class cantAddPortfolioErrorDescription.
	! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:27:19' prior: 50982802 overrides: 50979403!
registerInPortfolio: aParentPortfolio
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	
	aParentPortfolio registerPortfolio: self. 
	
	state _ NotRootPortfolio new.
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'eb 11/8/2020 19:27:44'!
registerAsChildOf: aPortfolio

	aPortfolio registerAccount: self.! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:27:44'!
registerAsChildOf: aParentPortfolio
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	
	aParentPortfolio registerPortfolio: self. 
	
	state _ NotRootPortfolio new.
	! !
!FinancialInvestment methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:27:44'!
registerAsChildOf: aPortfolio

	self subclassResponsibility .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:27:45' prior: 50980225 overrides: 50979731!
register: aFinancialInvestment 
	
	
	^ aFinancialInvestment registerAsChildOf: self.

! !

!methodRemoval: ReceptiveAccount #registerInPortfolio: stamp: 'eb 11/8/2020 20:56:51'!
registerInPortfolio: aPortfolio

	aPortfolio registerAccount: self.!

!methodRemoval: Portfolio #registerInPortfolio: stamp: 'eb 11/8/2020 20:56:51'!
registerInPortfolio: aParentPortfolio
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	
	aParentPortfolio registerPortfolio: self. 
	
	state _ NotRootPortfolio new.
	!

!methodRemoval: FinancialInvestment #registerInPortfolio: stamp: 'eb 11/8/2020 20:56:51'!
registerInPortfolio: aPortfolio

	self subclassResponsibility .!
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:32:38'!
registerChildPortfolio: aPortfolio

	aPortfolio addParent: self.
		
	childrenPortfolios add: aPortfolio . ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:32:38' prior: 50982831 overrides: 50982842!
registerAsChildOf: aParentPortfolio
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	
	aParentPortfolio registerChildPortfolio: self. 
	
	state _ NotRootPortfolio new.
	! !

!methodRemoval: Portfolio #registerPortfolio: stamp: 'eb 11/8/2020 20:56:51'!
registerPortfolio: aPortfolio

	aPortfolio addParent: self.
		
	childrenPortfolios add: aPortfolio . !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:33:13' prior: 50982873!
registerChildPortfolio: aPortfolio
	aPortfolio addParent: self.
	childrenPortfolios add: aPortfolio . ! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:33:21' prior: 50982897!
registerChildPortfolio: aChildPortfolio
	aChildPortfolio addParent: self.
	childrenPortfolios add: aChildPortfolio . ! !
!Portfolio methodsFor: 'portfolios' stamp: 'eb 11/8/2020 19:33:40' prior: 50979469!
addParent: aParentPorfolio 
	
	parentsPortfolios add: aParentPorfolio .! !
!Portfolio methodsFor: 'portfolios' stamp: 'eb 11/8/2020 19:33:55' prior: 50982911!
addParent: aParentPorfolio 
	parentsPortfolios add: aParentPorfolio .! !
!Portfolio methodsFor: 'portfolios' stamp: 'eb 11/8/2020 19:34:13'!
addParentPortfolio: aParentPorfolio 
	parentsPortfolios add: aParentPorfolio .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:34:13' prior: 50982904!
registerChildPortfolio: aChildPortfolio
	aChildPortfolio addParentPortfolio: self.
	childrenPortfolios add: aChildPortfolio . ! !

!methodRemoval: Portfolio #addParent: stamp: 'eb 11/8/2020 20:56:51'!
addParent: aParentPorfolio 
	parentsPortfolios add: aParentPorfolio .!
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:34:26' prior: 50982848 overrides: 50979731!
register: aFinancialInvestment 	
	^ aFinancialInvestment registerAsChildOf: self.

! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:34:40' prior: 50979549!
registerAccount: aReceptiveAccount	
	accounts add: aReceptiveAccount ! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:35:00' prior: 50979826!
hasInAboveHierarchy: aPortfolio
	parentsPortfolios detect:[ :portfolio | portfolio hasInHierarchy: aPortfolio ] ifNone:[^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:35:03' prior: 50982952!
hasInAboveHierarchy: aPortfolio
	parentsPortfolios detect: [ :portfolio | portfolio hasInHierarchy: aPortfolio ] ifNone:[^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:35:44' prior: 50982960!
hasInAboveHierarchy: aPortfolio
	parentsPortfolios detect:[ :portfolio | portfolio hasInHierarchy: aPortfolio ] ifNone:[^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:35:50' prior: 50982968!
hasInAboveHierarchy: aPortfolio
	parentsPortfolios detect: [ :portfolio | portfolio hasInHierarchy: aPortfolio ] ifNone:[^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:37:07' prior: 50982976!
hasInAboveHierarchy: aPortfolio
	parentsPortfolios detect: [ :portfolio | portfolio hasInHierarchy: aPortfolio ] ifNone: [^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:37:16' prior: 50979800!
hasInHierarchy: aPortfolio
	^ (self = aPortfolio) or: [ 
		childrenPortfolios detect:[ :children | children hasInHierarchy: aPortfolio ] ifNone:[^ false] .
		^ true .
	].
! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:38:34' prior: 50982992!
hasInHierarchy: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children hasInHierarchy: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:38:57' prior: 50979537!
itsHierarchyHas: aPortfolio

	^ state lookFor: aPortfolio intoHierarchyOf: self.
! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:39:00' prior: 50983011!
itsHierarchyHas: aPortfolio
	^ state lookFor: aPortfolio intoHierarchyOf: self.
! !
!PortfolioState methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:39:10' prior: 50979660!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio
	self subclassResponsibility .! !
!RootPortfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:39:16' prior: 50979818 overrides: 50983023!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio
	^ aPotentialParentPortfolio hasInHierarchy: aPotentialChildPortfolio .! !
!NotRootPortfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:39:23' prior: 50979835 overrides: 50983023!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio
	^ aPotentialParentPortfolio hasInAboveHierarchy: aPotentialChildPortfolio .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:42:43'!
test01PortfolioHasNotAccountsWhenCreated

	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: portfolio isEmpty.
	
	self assert: 0 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'eb 11/8/2020 20:56:51'!
test01PortfolioHasNotAccountWhenCreated

	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: portfolio isEmpty.
	
	self assert: 0 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:43:28' prior: 50978943!
test12PortofolioCantAddItself

	| portfolioRoot |
	
	portfolioRoot _ Portfolio new.
	
	self should: [ portfolioRoot register: portfolioRoot . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
		
	self assert: 0 equals: portfolioRoot amountOfAccounts.
			
	self assert: 0 equals: portfolioRoot balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:43:46' prior: 50978958!
test13PortfolioCantBeAddedTwiceToSameParent

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioRoot1 register: portfolioChild1 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !

!methodRemoval: Portfolio class #cicloNoSePuedeErrorDescription stamp: 'eb 11/8/2020 20:56:51'!
cicloNoSePuedeErrorDescription
	
	^ 'No se admiten ciclos rey'!

!methodRemoval: Portfolio class #noSePuedeAgregarDosVecesElMismoElemErrorDescription stamp: 'eb 11/8/2020 20:56:51'!
noSePuedeAgregarDosVecesElMismoElemErrorDescription
	
	^ 'No se puede agregar dos veces el mismo elem' !

!methodRemoval: Portfolio class #noTePodesAgregarAVosMismoErrorDescription stamp: 'eb 11/8/2020 20:56:51'!
noTePodesAgregarAVosMismoErrorDescription
	
	^ 'No te podes agregar a vos mismo'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 20:23:37' prior: 50979009!
test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden

	| portfolioRoot1 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	
	portfolioRoot1 register: portfolioChild1.
	
	portfolioChild1 register: portfolioChild2.
	
	portfolioChild1 register: portfolioChild3.
	
	portfolioChild3 register: portfolioChild4.
	
	self should: [ portfolioChild4 register: portfolioChild2 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 20:23:51' prior: 50979034!
test16CyclesWithParentOnMultipleParentNodeAreForbidden

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild4.
	portfolioRoot3 register: portfolioChild4.

	portfolioChild1 register: portfolioChild2.
	portfolioChild1 register: portfolioChild3.
	
	portfolioChild3 register: portfolioChild4.
	
	self should: [ portfolioChild4 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 20:24:01' prior: 50979064!
test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild4.
	portfolioRoot3 register: portfolioChild4.

	portfolioChild1 register: portfolioChild2.
	portfolioChild1 register: portfolioChild3.
	
	portfolioChild3 register: portfolioChild4.
	
	self should: [ portfolioChild4 register: portfolioChild2 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 20:24:25' prior: 50979094!
test19

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioChild1 register: account1 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 20:24:33' prior: 50979121!
test20

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 20:35:46' prior: 50982940 overrides: 50979731!
register: aFinancialInvestment 	
	aFinancialInvestment registerAsChildOf: self.

! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 20:39:07' prior: 50983295 overrides: 50979731!
register: aFinancialInvestment 	
	
	self halt.
	aFinancialInvestment registerAsChildOf: self.

! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 20:40:27' prior: 50983302 overrides: 50979731!
register: aFinancialInvestment 	
	aFinancialInvestment registerAsChildOf: self.

! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 20:40:49' prior: 50982881 overrides: 50982842!
registerAsChildOf: aParentPortfolio
	self halt .

	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	
	aParentPortfolio registerChildPortfolio: self. 
	
	state _ NotRootPortfolio new.
	! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 20:49:57' prior: 50982984!
hasInAboveHierarchy: aPortfolio
	parentsPortfolios detect: [ :portfolio | portfolio itsHierarchyHas: aPortfolio ] ifNone: [^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 20:50:26' prior: 50983001!
hasInHierarchy: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children itsHierarchyHas: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 20:51:57' prior: 50983316 overrides: 50982842!
registerAsChildOf: aParentPortfolio

	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	
	aParentPortfolio registerChildPortfolio: self. 
	
	state _ NotRootPortfolio new.
	! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 20:53:52' prior: 50983327!
hasInAboveHierarchy: aPortfolio

	(state isKindOf: NotRootPortfolio) ifFalse: [self error: 'ERROR DE TIPO'].
	parentsPortfolios detect: [ :portfolio | portfolio itsHierarchyHas: aPortfolio ] ifNone: [^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 20:54:08' prior: 50983335!
hasInHierarchy: aPortfolio
	
	(state isKindOf: RootPortfolio) ifFalse: [self error: 'ERROR DE TIPO'].

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children itsHierarchyHas: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:16:46'!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription ].
	aParentPortfolio registerPortfolio: self. 
	state _ NotRootPortfolio new.
	
	^ self .! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:17:43' prior: 50983378!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	(aParentPortfolio itsHierarchyHas: self) ifFalse: 
	[
		aParentPortfolio registerPortfolio: self. 
		state _ NotRootPortfolio new.
		^ self .
  	].
	self error: self class cantAddPortfolioErrorDescription.
	! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:21:39' prior: 50983392!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	"(aParentPortfolio itsHierarchyHas: self) ifFalse: 
	[
		aParentPortfolio registerPortfolio: self. 
		state _ NotRootPortfolio new.
		^ self .
  	]."
	self error: self class cantAddPortfolioErrorDescription.
	! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:22:09' prior: 50983406!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	(aParentPortfolio itsHierarchyHas: self) ifFalse: 
	[
		aParentPortfolio registerPortfolio: self. 
		state _ NotRootPortfolio new.
		^ self .
  	].
	self error: self class cantAddPortfolioErrorDescription.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:22:53' prior: 50982779!
test14CyclesWithParentOnSingleParentNodeAreForbidden

	| portfolioRoot1 portfolioChild1 portfolioChild2 account1 |
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	portfolioRoot1 register: account1 .
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	
	self halt.
	self should: [ portfolioChild2 register: portfolioRoot1. self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription. .
		
! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:23:07' prior: 50983420!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	"(aParentPortfolio itsHierarchyHas: self) ifFalse: 
	[
		aParentPortfolio registerPortfolio: self. 
		state _ NotRootPortfolio new.
		^ self .
  	]."
	self error: self class cantAddPortfolioErrorDescription.
	! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:24:00' prior: 50983458!
registerInPortfolio: aParentPortfolio
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	(aParentPortfolio itsHierarchyHas: self) ifFalse: 
	[
		aParentPortfolio registerPortfolio: self. 
		state _ NotRootPortfolio new.
		^ self .
  	].
	self error: self class cantAddPortfolioErrorDescription.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:24:41' prior: 50983435!
test14CyclesWithParentOnSingleParentNodeAreForbidden

	| portfolioRoot1 portfolioChild1 portfolioChild2 account1 |
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	portfolioRoot1 register: account1 .
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	
	self should: [ portfolioChild2 register: portfolioRoot1. self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription. .
		
! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:27:03' prior: 50983472!
registerInPortfolio: aParentPortfolio
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	[
		aParentPortfolio registerPortfolio: self. 
		state _ NotRootPortfolio new.
		^ self .
  	].
	self error: self class cantAddPortfolioErrorDescription.
	! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:27:19' prior: 50983510!
registerInPortfolio: aParentPortfolio
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	
	aParentPortfolio registerPortfolio: self. 
	
	state _ NotRootPortfolio new.
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'eb 11/8/2020 19:27:44' prior: 50982826 overrides: 50982842!
registerAsChildOf: aPortfolio

	aPortfolio registerAccount: self.! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:27:44' prior: 50983345 overrides: 50982842!
registerAsChildOf: aParentPortfolio
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	
	aParentPortfolio registerPortfolio: self. 
	
	state _ NotRootPortfolio new.
	! !
!FinancialInvestment methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:27:44' prior: 50982842!
registerAsChildOf: aPortfolio

	self subclassResponsibility .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:27:45' prior: 50983309 overrides: 50979731!
register: aFinancialInvestment 
	
	
	^ aFinancialInvestment registerAsChildOf: self.

! !

!methodRemoval: Portfolio #registerInPortfolio: stamp: 'eb 11/8/2020 20:56:52'!
registerInPortfolio: aParentPortfolio
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	
	aParentPortfolio registerPortfolio: self. 
	
	state _ NotRootPortfolio new.
	!
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:32:38' prior: 50982928!
registerChildPortfolio: aPortfolio

	aPortfolio addParent: self.
		
	childrenPortfolios add: aPortfolio . ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:32:38' prior: 50983540 overrides: 50983551!
registerAsChildOf: aParentPortfolio
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	
	aParentPortfolio registerChildPortfolio: self. 
	
	state _ NotRootPortfolio new.
	! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:33:13' prior: 50983573!
registerChildPortfolio: aPortfolio
	aPortfolio addParent: self.
	childrenPortfolios add: aPortfolio . ! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:33:21' prior: 50983592!
registerChildPortfolio: aChildPortfolio
	aChildPortfolio addParent: self.
	childrenPortfolios add: aChildPortfolio . ! !
!Portfolio methodsFor: 'portfolios' stamp: 'eb 11/8/2020 19:33:40'!
addParent: aParentPorfolio 
	
	parentsPortfolios add: aParentPorfolio .! !
!Portfolio methodsFor: 'portfolios' stamp: 'eb 11/8/2020 19:33:55' prior: 50983605!
addParent: aParentPorfolio 
	parentsPortfolios add: aParentPorfolio .! !
!Portfolio methodsFor: 'portfolios' stamp: 'eb 11/8/2020 19:34:13' prior: 50982922!
addParentPortfolio: aParentPorfolio 
	parentsPortfolios add: aParentPorfolio .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:34:13' prior: 50983599!
registerChildPortfolio: aChildPortfolio
	aChildPortfolio addParentPortfolio: self.
	childrenPortfolios add: aChildPortfolio . ! !

!methodRemoval: Portfolio #addParent: stamp: 'eb 11/8/2020 20:56:52'!
addParent: aParentPorfolio 
	parentsPortfolios add: aParentPorfolio .!
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:34:26' prior: 50983557 overrides: 50979731!
register: aFinancialInvestment 	
	^ aFinancialInvestment registerAsChildOf: self.

! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 19:34:40' prior: 50982946!
registerAccount: aReceptiveAccount	
	accounts add: aReceptiveAccount ! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:35:00' prior: 50983356!
hasInAboveHierarchy: aPortfolio
	parentsPortfolios detect:[ :portfolio | portfolio hasInHierarchy: aPortfolio ] ifNone:[^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:35:03' prior: 50983646!
hasInAboveHierarchy: aPortfolio
	parentsPortfolios detect: [ :portfolio | portfolio hasInHierarchy: aPortfolio ] ifNone:[^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:35:44' prior: 50983654!
hasInAboveHierarchy: aPortfolio
	parentsPortfolios detect:[ :portfolio | portfolio hasInHierarchy: aPortfolio ] ifNone:[^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:35:50' prior: 50983662!
hasInAboveHierarchy: aPortfolio
	parentsPortfolios detect: [ :portfolio | portfolio hasInHierarchy: aPortfolio ] ifNone:[^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:37:07' prior: 50983670!
hasInAboveHierarchy: aPortfolio
	parentsPortfolios detect: [ :portfolio | portfolio hasInHierarchy: aPortfolio ] ifNone: [^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:37:16' prior: 50983367!
hasInHierarchy: aPortfolio
	^ (self = aPortfolio) or: [ 
		childrenPortfolios detect:[ :children | children hasInHierarchy: aPortfolio ] ifNone:[^ false] .
		^ true .
	].
! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:38:34' prior: 50983686!
hasInHierarchy: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children hasInHierarchy: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:38:57' prior: 50983017!
itsHierarchyHas: aPortfolio

	^ state lookFor: aPortfolio intoHierarchyOf: self.
! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 19:39:00' prior: 50983705!
itsHierarchyHas: aPortfolio
	^ state lookFor: aPortfolio intoHierarchyOf: self.
! !
!PortfolioState methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:39:10' prior: 50983023!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio
	self subclassResponsibility .! !
!RootPortfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:39:16' prior: 50983031 overrides: 50983717!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio
	^ aPotentialParentPortfolio hasInHierarchy: aPotentialChildPortfolio .! !
!NotRootPortfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:39:23' prior: 50983040 overrides: 50983717!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio
	^ aPotentialParentPortfolio hasInAboveHierarchy: aPotentialChildPortfolio .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:42:43' prior: 50983048!
test01PortfolioHasNotAccountsWhenCreated

	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: portfolio isEmpty.
	
	self assert: 0 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:43:28' prior: 50983066!
test12PortofolioCantAddItself

	| portfolioRoot |
	
	portfolioRoot _ Portfolio new.
	
	self should: [ portfolioRoot register: portfolioRoot . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
		
	self assert: 0 equals: portfolioRoot amountOfAccounts.
			
	self assert: 0 equals: portfolioRoot balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 19:43:46' prior: 50983081!
test13PortfolioCantBeAddedTwiceToSameParent

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioRoot1 register: portfolioChild1 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 20:23:37' prior: 50983127!
test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden

	| portfolioRoot1 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	
	portfolioRoot1 register: portfolioChild1.
	
	portfolioChild1 register: portfolioChild2.
	
	portfolioChild1 register: portfolioChild3.
	
	portfolioChild3 register: portfolioChild4.
	
	self should: [ portfolioChild4 register: portfolioChild2 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 20:23:51' prior: 50983152!
test16CyclesWithParentOnMultipleParentNodeAreForbidden

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild4.
	portfolioRoot3 register: portfolioChild4.

	portfolioChild1 register: portfolioChild2.
	portfolioChild1 register: portfolioChild3.
	
	portfolioChild3 register: portfolioChild4.
	
	self should: [ portfolioChild4 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 20:24:01' prior: 50983182!
test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild4.
	portfolioRoot3 register: portfolioChild4.

	portfolioChild1 register: portfolioChild2.
	portfolioChild1 register: portfolioChild3.
	
	portfolioChild3 register: portfolioChild4.
	
	self should: [ portfolioChild4 register: portfolioChild2 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 20:24:25' prior: 50983212!
test19

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioChild1 register: account1 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 20:24:33' prior: 50983239!
test20

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 20:35:46' prior: 50983634 overrides: 50979731!
register: aFinancialInvestment 	
	aFinancialInvestment registerAsChildOf: self.

! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 20:39:07' prior: 50983962 overrides: 50979731!
register: aFinancialInvestment 	
	
	self halt.
	aFinancialInvestment registerAsChildOf: self.

! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 20:40:27' prior: 50983969 overrides: 50979731!
register: aFinancialInvestment 	
	aFinancialInvestment registerAsChildOf: self.

! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 20:40:49' prior: 50983581 overrides: 50983551!
registerAsChildOf: aParentPortfolio
	self halt .

	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	
	aParentPortfolio registerChildPortfolio: self. 
	
	state _ NotRootPortfolio new.
	! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 20:49:57' prior: 50983678!
hasInAboveHierarchy: aPortfolio
	parentsPortfolios detect: [ :portfolio | portfolio itsHierarchyHas: aPortfolio ] ifNone: [^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 20:50:26' prior: 50983695!
hasInHierarchy: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children itsHierarchyHas: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !
!Portfolio methodsFor: 'registering' stamp: 'eb 11/8/2020 20:51:57' prior: 50983983 overrides: 50983551!
registerAsChildOf: aParentPortfolio

	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	
	aParentPortfolio registerChildPortfolio: self. 
	
	state _ NotRootPortfolio new.
	! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 20:53:52' prior: 50983994!
hasInAboveHierarchy: aPortfolio

	(state isKindOf: NotRootPortfolio) ifFalse: [self error: 'ERROR DE TIPO'].
	parentsPortfolios detect: [ :portfolio | portfolio itsHierarchyHas: aPortfolio ] ifNone: [^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 20:54:08' prior: 50984002!
hasInHierarchy: aPortfolio
	
	(state isKindOf: RootPortfolio) ifFalse: [self error: 'ERROR DE TIPO'].

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children itsHierarchyHas: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !

!methodRemoval: PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:56:52'!
test14CyclesWithParentOnSingleParentNodeAreForbidden

	| portfolioRoot1 portfolioChild1 portfolioChild2 account1 |
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	portfolioRoot1 register: account1 .
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	
	self should: [ portfolioChild2 register: portfolioRoot1. self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription. .
		
!
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 20:58:12' prior: 50984034!
hasInHierarchy: aPortfolio
	
	(state isKindOf: RootPortfolio) ifFalse: [self error: 'ERROR DE TIPO'].

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children hasInHierarchy: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 20:58:45'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 20:58:45'!
FAILURE!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:58:51'!
ERROR!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:58:51'!
ERROR!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 20:59:00'!
PASSED!
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 20:59:37' prior: 50984069!
hasInHierarchy: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children hasInHierarchy: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 20:59:43' prior: 50984023!
hasInAboveHierarchy: aPortfolio
	parentsPortfolios detect: [ :portfolio | portfolio itsHierarchyHas: aPortfolio ] ifNone: [^ false ] .
	
	^ true .! !

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:59:51'!
PASSED!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:59:53'!
PASSED!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 20:59:55'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:01:26'!
test14CyclesWithParentOnSingleParentNodeAreForbidden
| portfolioRoot1 portfolioChild1 portfolioChild2 account1 |
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	portfolioRoot1 register: account1 .
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	
	self should: [ portfolioChild2 register: portfolioRoot1. self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription. .! !

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 21:01:29'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'eb 11/8/2020 21:01:32'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 21:01:32'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'eb 11/8/2020 21:01:32'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'eb 11/8/2020 21:01:32'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'eb 11/8/2020 21:01:32'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'eb 11/8/2020 21:01:32'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 21:01:32'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 21:01:32'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'eb 11/8/2020 21:01:32'!
PASSED!

!testRun: #PortfolioTest #test10SameChildrenDifferentParents stamp: 'eb 11/8/2020 21:01:32'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'eb 11/8/2020 21:01:32'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 21:01:32'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 21:01:32'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 21:01:32'!
PASSED!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 21:01:32'!
PASSED!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 21:01:32'!
PASSED!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 21:01:32'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'eb 11/8/2020 21:01:32'!
FAILURE!

!testRun: #PortfolioTest #test20 stamp: 'eb 11/8/2020 21:01:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eb 11/8/2020 21:01:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 21:01:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 21:01:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eb 11/8/2020 21:01:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eb 11/8/2020 21:01:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eb 11/8/2020 21:01:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eb 11/8/2020 21:01:32'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'eb 11/8/2020 21:01:32'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'eb 11/8/2020 21:01:43'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 21:01:43'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'eb 11/8/2020 21:01:43'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'eb 11/8/2020 21:01:43'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'eb 11/8/2020 21:01:43'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'eb 11/8/2020 21:01:43'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 21:01:43'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 21:01:43'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'eb 11/8/2020 21:01:43'!
PASSED!

!testRun: #PortfolioTest #test10SameChildrenDifferentParents stamp: 'eb 11/8/2020 21:01:43'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'eb 11/8/2020 21:01:43'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 21:01:43'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 21:01:43'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 21:01:43'!
PASSED!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 21:01:43'!
PASSED!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 21:01:43'!
PASSED!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 21:01:43'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'eb 11/8/2020 21:01:43'!
FAILURE!

!testRun: #PortfolioTest #test20 stamp: 'eb 11/8/2020 21:01:43'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'eb 11/8/2020 21:01:43'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'eb 11/8/2020 21:01:54'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 21:01:55'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'eb 11/8/2020 21:01:56'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'eb 11/8/2020 21:01:57'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'eb 11/8/2020 21:01:59'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'eb 11/8/2020 21:02:00'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'eb 11/8/2020 21:02:02'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 21:02:03'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 21:02:03'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'eb 11/8/2020 21:02:04'!
PASSED!

!testRun: #PortfolioTest #test10SameChildrenDifferentParents stamp: 'eb 11/8/2020 21:02:05'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'eb 11/8/2020 21:02:06'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'eb 11/8/2020 21:02:07'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 21:02:08'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 21:02:09'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 21:02:10'!
PASSED!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 21:02:11'!
PASSED!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 21:02:12'!
PASSED!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 21:02:13'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'eb 11/8/2020 21:02:14'!
FAILURE!

!testRun: #PortfolioTest #test19 stamp: 'eb 11/8/2020 21:02:14'!
FAILURE!

!testRun: #PortfolioTest #test20 stamp: 'eb 11/8/2020 21:02:22'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'eb 11/8/2020 21:02:24'!
PASSED!
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 21:11:21'!
hasInBelowHierarchy: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children hasInHierarchy: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !
!RootPortfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:11:21' prior: 50983725 overrides: 50983717!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio
	^ aPotentialParentPortfolio hasInBelowHierarchy: aPotentialChildPortfolio .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:11:21' prior: 50984099!
hasInHierarchy: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children hasInBelowHierarchy: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:11:21' prior: 50984392!
hasInBelowHierarchy: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children hasInBelowHierarchy: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !

!methodRemoval: Portfolio #hasInHierarchy: stamp: 'eb 11/8/2020 21:11:21'!
hasInHierarchy: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children hasInBelowHierarchy: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
!
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 21:15:08'!
searchInAboveHierarchy: aPortfolio
	parentsPortfolios detect: [ :portfolio | portfolio itsHierarchyHas: aPortfolio ] ifNone: [^ false ] .
	
	^ true .! !
!NotRootPortfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:15:08' prior: 50983734 overrides: 50983717!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio
	^ aPotentialParentPortfolio searchInAboveHierarchy: aPotentialChildPortfolio .! !

!methodRemoval: Portfolio #hasInAboveHierarchy: stamp: 'eb 11/8/2020 21:15:08'!
hasInAboveHierarchy: aPortfolio
	parentsPortfolios detect: [ :portfolio | portfolio itsHierarchyHas: aPortfolio ] ifNone: [^ false ] .
	
	^ true .!
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 21:17:03'!
breadthFirstSearchFromSelfLookingFor: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children hasInBelowHierarchy: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 21:17:09' prior: 50984462!
breadthFirstSearchFromSelfLookingFor: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children hasInBelowHierarchy: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !

!methodRemoval: Portfolio #breadthFirstSearchFromSelfLookingFor: stamp: 'eb 11/8/2020 21:17:14'!
breadthFirstSearchFromSelfLookingFor: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children hasInBelowHierarchy: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
!
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 21:17:21'!
breadthFirstSearchFromSelfLookingFor: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children hasInBelowHierarchy: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:17:21' prior: 50984420!
hasInBelowHierarchy: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children breadthFirstSearchFromSelfLookingFor: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !
!RootPortfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:17:22' prior: 50984402 overrides: 50983717!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio
	^ aPotentialParentPortfolio breadthFirstSearchFromSelfLookingFor: aPotentialChildPortfolio .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:17:22' prior: 50984492!
breadthFirstSearchFromSelfLookingFor: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children breadthFirstSearchFromSelfLookingFor: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !

!methodRemoval: Portfolio #hasInBelowHierarchy: stamp: 'eb 11/8/2020 21:17:22'!
hasInBelowHierarchy: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children breadthFirstSearchFromSelfLookingFor: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
!
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 21:18:25'!
searchBelow: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children breadthFirstSearchFromSelfLookingFor: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !
!RootPortfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:18:25' prior: 50984513 overrides: 50983717!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio
	^ aPotentialParentPortfolio searchBelow: aPotentialChildPortfolio .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:18:25' prior: 50984522!
breadthFirstSearchFromSelfLookingFor: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children searchBelow: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:18:25' prior: 50984542!
searchBelow: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children searchBelow: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !

!methodRemoval: Portfolio #breadthFirstSearchFromSelfLookingFor: stamp: 'eb 11/8/2020 21:18:25'!
breadthFirstSearchFromSelfLookingFor: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children searchBelow: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
!
!Portfolio methodsFor: 'portfolios-hierarchies' stamp: 'eb 11/8/2020 21:18:44'!
searchFromAbove: aPortfolio
	parentsPortfolios detect: [ :portfolio | portfolio itsHierarchyHas: aPortfolio ] ifNone: [^ false ] .
	
	^ true .! !
!NotRootPortfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:18:44' prior: 50984447 overrides: 50983717!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio
	^ aPotentialParentPortfolio searchFromAbove: aPotentialChildPortfolio .! !

!methodRemoval: Portfolio #searchInAboveHierarchy: stamp: 'eb 11/8/2020 21:18:44'!
searchInAboveHierarchy: aPortfolio
	parentsPortfolios detect: [ :portfolio | portfolio itsHierarchyHas: aPortfolio ] ifNone: [^ false ] .
	
	^ true .!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'eb 11/8/2020 21:19:49'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 21:19:49'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'eb 11/8/2020 21:19:49'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'eb 11/8/2020 21:19:49'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'eb 11/8/2020 21:19:49'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'eb 11/8/2020 21:19:49'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 21:19:49'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 21:19:49'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'eb 11/8/2020 21:19:49'!
PASSED!

!testRun: #PortfolioTest #test10SameChildrenDifferentParents stamp: 'eb 11/8/2020 21:19:49'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'eb 11/8/2020 21:19:49'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 21:19:49'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 21:19:49'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 21:19:49'!
PASSED!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 21:19:49'!
PASSED!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 21:19:49'!
PASSED!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 21:19:49'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'eb 11/8/2020 21:19:49'!
FAILURE!

!testRun: #PortfolioTest #test20 stamp: 'eb 11/8/2020 21:19:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eb 11/8/2020 21:19:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 21:19:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 21:19:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eb 11/8/2020 21:19:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eb 11/8/2020 21:19:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eb 11/8/2020 21:19:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eb 11/8/2020 21:19:49'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'eb 11/8/2020 21:19:49'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'eb 11/8/2020 21:22:37' overrides: 50979392!
hasRegistered: aFinancialInvestment

	self shouldBeImplemented .
	! !

!methodRemoval: Portfolio #accountIsInHierarchy: stamp: 'eb 11/8/2020 21:24:20'!
accountIsInHierarchy: aReceptiveAccount
	
	| down up |
	"esta en la jerarquia de abajo"	
	down _ self accountIsInHierarchyDown: aReceptiveAccount .
		
	"esta en la jerarquia de arriba"
	up _ self accountIsInHierarchyUp: aReceptiveAccount. 
	
	^ down or: up.
	!

!methodRemoval: Portfolio #accountIsInHierarchyDown: stamp: 'eb 11/8/2020 21:24:21'!
accountIsInHierarchyDown: aReceptiveAccount
	
	(accounts includes: aReceptiveAccount) ifTrue: [^ true ] 
		ifFalse: [ (self portfolios isEmpty) ifTrue:[ ^ false ] 
			ifFalse:[ self portfolios do: [:x | x accountIsInHierarchyDown: aReceptiveAccount ]]].
	!
!Portfolio methodsFor: 'accounts' stamp: 'eb 11/8/2020 21:24:39' prior: 50979423!
accounts
	^ accounts copy.! !
!Portfolio methodsFor: 'accounts' stamp: 'eb 11/8/2020 21:24:44' prior: 50979434!
amountOfAccounts
	^ accounts size.! !
!Portfolio methodsFor: 'accesing' stamp: 'eb 11/8/2020 21:25:09' prior: 50979430!
portfolios

	^ childrenPortfolios copy.! !
!Portfolio methodsFor: 'accesing' stamp: 'eb 11/8/2020 21:25:11' prior: 50984742!
portfolios
	^ childrenPortfolios copy.! !
!Portfolio methodsFor: 'initialization' stamp: 'eb 11/8/2020 21:27:18' prior: 50979499 overrides: 16896425!
initialize
	accounts _ OrderedCollection new.
	childrenPortfolios _ OrderedCollection new.
	parentsPortfolios _ OrderedCollection new. 
	state _ RootPortfolio new.! !
!Portfolio methodsFor: 'private' stamp: 'eb 11/8/2020 21:30:55'!
registerParentPortfolio: aParentPorfolio 
	parentsPortfolios add: aParentPorfolio .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:30:55' prior: 50983622!
registerChildPortfolio: aChildPortfolio
	aChildPortfolio registerParentPortfolio: self.
	childrenPortfolios add: aChildPortfolio . ! !

!methodRemoval: Portfolio #addParentPortfolio: stamp: 'eb 11/8/2020 21:30:55'!
addParentPortfolio: aParentPorfolio 
	parentsPortfolios add: aParentPorfolio .!
!Portfolio methodsFor: 'testing' stamp: 'eb 11/8/2020 21:31:51' prior: 50979438!
amountOfPortfolios
	^ childrenPortfolios size.! !
!Portfolio methodsFor: 'testing' stamp: 'eb 11/8/2020 21:31:56' prior: 50979442!
isEmpty
	^ (accounts size = 0) and: [ childrenPortfolios size = 0].! !
!Portfolio methodsFor: 'management' stamp: 'eb 11/8/2020 21:32:10' prior: 50979475 overrides: 50979387!
balance
	
	| balanceAccounts balancePortfolio |
	balanceAccounts _ accounts sum: [ :anAccount | anAccount balance] ifEmpty: [0] .
	balancePortfolio _ childrenPortfolios sum: [:x | x balance ] ifEmpty: [0].
	^ balancePortfolio + balanceAccounts .
		
		! !
!Portfolio methodsFor: 'nil' stamp: 'eb 11/8/2020 21:34:44'!
balanceOf: aFinancialInvestmentCollection

	
	! !
!Portfolio methodsFor: 'management-private' stamp: 'eb 11/8/2020 21:35:22' prior: 50984799!
balanceOf: aFinancialInvestmentCollection

	^ aFinancialInvestmentCollection sum: [ :aFinancialInvestment | aFinancialInvestment balance] ifEmpty: [0].
	! !
!Portfolio methodsFor: 'management' stamp: 'eb 11/8/2020 21:36:01' prior: 50984788 overrides: 50979387!
balance
	
	| balanceAccounts balancePortfolio |
	balanceAccounts _ accounts sum: [ :anAccount | anAccount balance] ifEmpty: [0] .
	balancePortfolio _ childrenPortfolios sum: [:x | x balance ] ifEmpty: [0].
	^ (self balanceOf: accounts) + (self balanceOf: childrenPortfolios) .
		
		! !
!Portfolio methodsFor: 'management' stamp: 'eb 11/8/2020 21:36:06' prior: 50984813 overrides: 50979387!
balance
	
	^ (self balanceOf: accounts) + (self balanceOf: childrenPortfolios) .
		
		! !
!AccountTransaction methodsFor: 'value' stamp: 'eb 11/8/2020 21:36:22' prior: 50979275!
addToBalance
	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'value' stamp: 'eb 11/8/2020 21:36:25' prior: 50979280 overrides: 16881508!
value 
	self subclassResponsibility ! !
!Deposit methodsFor: 'initialization' stamp: 'eb 11/8/2020 21:36:35' prior: 50979313!
initializeFor: aValue
	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'eb 11/8/2020 21:36:45' prior: 50979321 overrides: 50984837!
value
	^ value! !
!Withdraw methodsFor: 'initialization' stamp: 'eb 11/8/2020 21:36:52' prior: 50979350!
initializeFor: aValue
	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'eb 11/8/2020 21:36:58' prior: 50979358 overrides: 50984837!
value
	^ value! !
!AccountTransaction methodsFor: 'nil' stamp: 'eb 11/8/2020 21:37:11'!
initialization
	! !

Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

AccountTransaction subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Deposit category: #'Portfolio-Ejercicio' stamp: 'eb 11/8/2020 21:37:28'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

AccountTransaction subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Withdraw category: #'Portfolio-Ejercicio' stamp: 'eb 11/8/2020 21:37:31'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountTransaction category: #'Portfolio-Ejercicio' stamp: 'eb 11/8/2020 21:37:58'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:37:56'!
initializeFor: aValue

	value := aValue 

! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:38:03' prior: 50984898!
initializeFor: aValue

	value _ aValue .

! !

!methodRemoval: Deposit #initializeFor: stamp: 'eb 11/8/2020 21:38:10'!
initializeFor: aValue
	value := aValue !

!methodRemoval: Withdraw #initializeFor: stamp: 'eb 11/8/2020 21:38:13'!
initializeFor: aValue
	value := aValue !

!methodRemoval: AccountTransaction #initialization stamp: 'eb 11/8/2020 21:38:19'!
initialization
	!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'eb 11/8/2020 21:39:40' prior: 50979630!
transactions 
	^ transactions copy! !
!ReceptiveAccount methodsFor: 'management-private' stamp: 'eb 11/8/2020 21:39:46' prior: 50983534 overrides: 50983551!
registerAsChildOf: aPortfolio
	aPortfolio registerAccount: self.! !
!ReceptiveAccount methodsFor: 'management' stamp: 'eb 11/8/2020 21:40:11' prior: 50979619 overrides: 50979731!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'management' stamp: 'eb 11/8/2020 21:40:16' prior: 50979643 overrides: 50979392!
hasRegistered: aTransaction
	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'management' stamp: 'eb 11/8/2020 21:40:28' prior: 50979635 overrides: 50979387!
balance

	| balance |
	balance _ 0.
	transactions do:[ :aTransactions | balance _ balance + aTransactions addToBalance].
	^ balance
	! !
!ReceptiveAccount methodsFor: 'management' stamp: 'eb 11/8/2020 21:41:52' prior: 50984941 overrides: 50979387!
balance
	^ transactions inject: 0 into: [:a :c | (a addToBalance) + (c addToBalance)]
	! !
!ReceptiveAccount methodsFor: 'management' stamp: 'eb 11/8/2020 21:42:12' prior: 50984949 overrides: 50979387!
balance
	^ transactions inject: 0 into: [:a :c | (a addToBalance) + (c addToBalance)]
	! !
!ReceptiveAccount methodsFor: 'management' stamp: 'eb 11/8/2020 21:42:37' prior: 50984956 overrides: 50979387!
balance
	^ transactions inject: 0 into: [:firstTransaction :secondTransaction | 
		(firstTransaction addToBalance) + (secondTransaction addToBalance)]
	! !
!ReceptiveAccount methodsFor: 'management' stamp: 'eb 11/8/2020 21:42:39' prior: 50984963 overrides: 50979387!
balance
	^ transactions inject: 0 into: [:firstTransaction :secondTransaction | 
		(firstTransaction addToBalance) + (secondTransaction addToBalance)].
	! !
!Deposit methodsFor: 'value' stamp: 'eb 11/8/2020 21:42:51' prior: 50979317 overrides: 50984832!
addToBalance
	^ value! !
!Withdraw methodsFor: 'value' stamp: 'eb 11/8/2020 21:42:55' prior: 50979354 overrides: 50984832!
addToBalance
	^ value * (-1)! !
!AccountTransaction methodsFor: 'value' stamp: 'eb 11/8/2020 21:43:41'!
valueInBalance
	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'eb 11/8/2020 21:43:41' overrides: 50984988!
valueInBalance
	^ value! !
!Withdraw methodsFor: 'value' stamp: 'eb 11/8/2020 21:43:41' overrides: 50984988!
valueInBalance
	^ value * (-1)! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:43:41' prior: 50984972 overrides: 50979387!
balance
	^ transactions inject: 0 into: [:firstTransaction :secondTransaction | 
		(firstTransaction valueInBalance) + (secondTransaction valueInBalance)].
	! !

!methodRemoval: AccountTransaction #addToBalance stamp: 'eb 11/8/2020 21:43:41'!
addToBalance
	self subclassResponsibility !

!methodRemoval: Deposit #addToBalance stamp: 'eb 11/8/2020 21:43:41'!
addToBalance
	^ value!

!methodRemoval: Withdraw #addToBalance stamp: 'eb 11/8/2020 21:43:41'!
addToBalance
	^ value * (-1)!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eb 11/8/2020 21:44:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 21:44:14'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 21:44:14'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eb 11/8/2020 21:44:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eb 11/8/2020 21:44:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eb 11/8/2020 21:44:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eb 11/8/2020 21:44:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 21:44:17'!
ERROR!
!ReceptiveAccount methodsFor: 'management' stamp: 'ja 11/2/2020 20:42:20' prior: 50985002 overrides: 50979387!
balance

	| balance |
	
	balance _ 0.
	
	transactions do:[ :aTransactions | balance _ balance + aTransactions addToBalance].
	
	^ balance
	! !
!ReceptiveAccount methodsFor: 'management' stamp: 'eb 11/8/2020 21:45:22' prior: 50985051 overrides: 50979387!
balance

	| balance |
	
	balance _ 0.
	
	transactions do:[ :aTransactions | balance _ balance + aTransactions valueInBalance ].
	
	^ balance
	! !
!ReceptiveAccount methodsFor: 'management' stamp: 'eb 11/8/2020 21:45:40' prior: 50985060 overrides: 50979387!
balance
	| balance |
	balance _ 0.
	transactions do:[ :aTransactions | balance _ balance + aTransactions valueInBalance ].
	^ balance
	! !
!ReceptiveAccount methodsFor: 'management' stamp: 'eb 11/8/2020 21:45:43' prior: 50985069 overrides: 50979387!
balance
	| balance |
	balance _ 0.
	transactions do: [ :aTransactions | balance _ balance + aTransactions valueInBalance ].
	^ balance
	! !
!ReceptiveAccount methodsFor: 'management' stamp: 'eb 11/8/2020 21:45:52' prior: 50985077 overrides: 50979387!
balance
	| balance |
	balance _ 0.
	transactions do: [ :aTransaction | balance _ balance + aTransaction valueInBalance ].
	^ balance
	! !

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'eb 11/8/2020 21:45:59'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 21:45:59'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'eb 11/8/2020 21:45:59'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'eb 11/8/2020 21:45:59'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'eb 11/8/2020 21:45:59'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'eb 11/8/2020 21:45:59'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 21:45:59'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 21:45:59'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'eb 11/8/2020 21:45:59'!
PASSED!

!testRun: #PortfolioTest #test10SameChildrenDifferentParents stamp: 'eb 11/8/2020 21:45:59'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'eb 11/8/2020 21:45:59'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 21:45:59'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 21:45:59'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 21:45:59'!
PASSED!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 21:45:59'!
PASSED!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 21:45:59'!
PASSED!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 21:45:59'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'eb 11/8/2020 21:45:59'!
FAILURE!

!testRun: #PortfolioTest #test20 stamp: 'eb 11/8/2020 21:45:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eb 11/8/2020 21:45:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 21:45:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 21:45:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eb 11/8/2020 21:45:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eb 11/8/2020 21:45:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eb 11/8/2020 21:45:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eb 11/8/2020 21:45:59'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'eb 11/8/2020 21:45:59'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eb 11/8/2020 21:46:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 21:46:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 21:46:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eb 11/8/2020 21:46:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eb 11/8/2020 21:46:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eb 11/8/2020 21:46:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eb 11/8/2020 21:46:04'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'eb 11/8/2020 21:46:17'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 21:46:18'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'eb 11/8/2020 21:46:19'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'eb 11/8/2020 21:46:20'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'eb 11/8/2020 21:46:21'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'eb 11/8/2020 21:46:22'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 21:46:23'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 21:46:24'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'eb 11/8/2020 21:46:25'!
PASSED!

!testRun: #PortfolioTest #test10SameChildrenDifferentParents stamp: 'eb 11/8/2020 21:46:26'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'eb 11/8/2020 21:46:27'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 21:46:28'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 21:46:29'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 21:46:32'!
PASSED!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 21:46:33'!
PASSED!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 21:46:34'!
PASSED!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 21:46:35'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'eb 11/8/2020 21:46:36'!
FAILURE!

!testRun: #PortfolioTest #test19 stamp: 'eb 11/8/2020 21:46:36'!
FAILURE!

!testRun: #PortfolioTest #test20 stamp: 'eb 11/8/2020 21:46:40'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:47:37'!
test02EmptyAccountsCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	
	portfolio register: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 0 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 21:47:37'!
test02AccountsCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	
	portfolio register: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 0 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:48:11'!
test03DepositeOnlyAccountsCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	
	portfolio register: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 300 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'eb 11/8/2020 21:48:11'!
test03AccountCanBeAddedToPortfolioWithMultipleDeposit

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	
	portfolio register: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 300 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:48:35'!
test04WithdrawOnlyAccountsCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 1000 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	
	portfolio register: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 850 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'eb 11/8/2020 21:48:35'!
test04AccountCanBeAddedToPortfolioWithMultipleWithdraw

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 1000 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	
	portfolio register: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 850 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:48:51'!
test05MultipleTransactionsAccountsCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	portfolio register: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 150 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'eb 11/8/2020 21:48:51'!
test05AccountCanBeAddedToPortfolioWithMultipleTransactions

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	portfolio register: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 150 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:48:58'!
test02EmptyAccountCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	
	portfolio register: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 0 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test02EmptyAccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 21:48:58'!
test02EmptyAccountsCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	
	portfolio register: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 0 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:49:03'!
test03DepositeOnlyAccountCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	
	portfolio register: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 300 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test03DepositeOnlyAccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 21:49:03'!
test03DepositeOnlyAccountsCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	
	portfolio register: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 300 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:49:07'!
test04WithdrawOnlyAccountCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 1000 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	
	portfolio register: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 850 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test04WithdrawOnlyAccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 21:49:07'!
test04WithdrawOnlyAccountsCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 1000 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	
	portfolio register: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 850 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:49:11'!
test05MultipleTransactionsAccountCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	portfolio register: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 150 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test05MultipleTransactionsAccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 21:49:11'!
test05MultipleTransactionsAccountsCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	portfolio register: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 150 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:50:42'!
test08NotEmptyPortfolioCanBeAdedToPortfolio

	| portfolioRoot portfolio2 account1 account2 account3 |
	
	portfolioRoot _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio2 register: account1.
	portfolio2 register: account2.
	portfolio2 register: account3.
	
	portfolioRoot register: portfolio2.
	
	self deny: portfolioRoot isEmpty.
	
	self assert: 1 equals: portfolioRoot amountOfPortfolios.
	
	self assert: 150 equals: portfolioRoot balance.
	
	! !

!methodRemoval: PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 21:50:42'!
test08ANotEmptyPortfolioCanBeAdedToPortfolio

	| portfolioRoot portfolio2 account1 account2 account3 |
	
	portfolioRoot _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio2 register: account1.
	portfolio2 register: account2.
	portfolio2 register: account3.
	
	portfolioRoot register: portfolio2.
	
	self deny: portfolioRoot isEmpty.
	
	self assert: 1 equals: portfolioRoot amountOfPortfolios.
	
	self assert: 150 equals: portfolioRoot balance.
	
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:51:29'!
test09MultiplePortfoliosCanBeAdedToPortfolio

	| portfolioRoot portfolioChild1 portfolioChild2 account1 account2|
	
	portfolioRoot _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
		
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	portfolioChild1 register: account1.
	portfolioChild2  register: account2.
	
	portfolioRoot register: portfolioChild1.
	portfolioRoot register: portfolioChild2.
		
	self deny: portfolioRoot isEmpty.
	
	self assert: 2 equals: portfolioRoot amountOfPortfolios.
	
	self assert: 100 equals: portfolioRoot balance.
	
	! !

!methodRemoval: PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'eb 11/8/2020 21:51:29'!
test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio

	| portfolioRoot portfolioChild1 portfolioChild2 account1 account2|
	
	portfolioRoot _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
		
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	portfolioChild1 register: account1.
	portfolioChild2  register: account2.
	
	portfolioRoot register: portfolioChild1.
	portfolioRoot register: portfolioChild2.
		
	self deny: portfolioRoot isEmpty.
	
	self assert: 2 equals: portfolioRoot amountOfPortfolios.
	
	self assert: 100 equals: portfolioRoot balance.
	
	!
!PortfolioTest methodsFor: 'accounts-adding' stamp: 'eb 11/8/2020 21:51:40'!
test06MultipleAccountsCanBeAddedToPortfolio

	| portfolio account1 account2 account3 totalBalance |
	
	portfolio _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio register: account1.
	portfolio register: account2.
	portfolio register: account3.
	
	totalBalance _ account1 balance + account2 balance + account3 balance.
	
	self deny: portfolio isEmpty.
	
	self assert: 3 equals: portfolio amountOfAccounts.
	
	self assert: totalBalance equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'eb 11/8/2020 21:51:40'!
test06MultipleAccountsCanBeAdedToPortfolio

	| portfolio account1 account2 account3 totalBalance |
	
	portfolio _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio register: account1.
	portfolio register: account2.
	portfolio register: account3.
	
	totalBalance _ account1 balance + account2 balance + account3 balance.
	
	self deny: portfolio isEmpty.
	
	self assert: 3 equals: portfolio amountOfAccounts.
	
	self assert: totalBalance equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:51:49'!
test07EmptyPortfolioCanBeAddedToPortfolio

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2  _ Portfolio new.
	portfolio1 register: portfolio2.
	
	self deny: portfolio1 isEmpty.
	
	self assert: 1 equals: portfolio1 amountOfPortfolios.
	
	self assert: 0 equals: portfolio1 balance .! !

!methodRemoval: PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 21:51:49'!
test07EmptyPortfolioCanBeAdedToPortfolio

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2  _ Portfolio new.
	portfolio1 register: portfolio2.
	
	self deny: portfolio1 isEmpty.
	
	self assert: 1 equals: portfolio1 amountOfPortfolios.
	
	self assert: 0 equals: portfolio1 balance .!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:51:55'!
test08NotEmptyPortfolioCanBeAdd7edToPortfolio

	| portfolioRoot portfolio2 account1 account2 account3 |
	
	portfolioRoot _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio2 register: account1.
	portfolio2 register: account2.
	portfolio2 register: account3.
	
	portfolioRoot register: portfolio2.
	
	self deny: portfolioRoot isEmpty.
	
	self assert: 1 equals: portfolioRoot amountOfPortfolios.
	
	self assert: 150 equals: portfolioRoot balance.
	
	! !

!methodRemoval: PortfolioTest #test08NotEmptyPortfolioCanBeAdedToPortfolio stamp: 'eb 11/8/2020 21:51:55'!
test08NotEmptyPortfolioCanBeAdedToPortfolio

	| portfolioRoot portfolio2 account1 account2 account3 |
	
	portfolioRoot _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio2 register: account1.
	portfolio2 register: account2.
	portfolio2 register: account3.
	
	portfolioRoot register: portfolio2.
	
	self deny: portfolioRoot isEmpty.
	
	self assert: 1 equals: portfolioRoot amountOfPortfolios.
	
	self assert: 150 equals: portfolioRoot balance.
	
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:52:00'!
test08NotEmptyPortfolioCanBeAddedToPortfolio

	| portfolioRoot portfolio2 account1 account2 account3 |
	
	portfolioRoot _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio2 register: account1.
	portfolio2 register: account2.
	portfolio2 register: account3.
	
	portfolioRoot register: portfolio2.
	
	self deny: portfolioRoot isEmpty.
	
	self assert: 1 equals: portfolioRoot amountOfPortfolios.
	
	self assert: 150 equals: portfolioRoot balance.
	
	! !

!methodRemoval: PortfolioTest #test08NotEmptyPortfolioCanBeAdd7edToPortfolio stamp: 'eb 11/8/2020 21:52:00'!
test08NotEmptyPortfolioCanBeAdd7edToPortfolio

	| portfolioRoot portfolio2 account1 account2 account3 |
	
	portfolioRoot _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio2 register: account1.
	portfolio2 register: account2.
	portfolio2 register: account3.
	
	portfolioRoot register: portfolio2.
	
	self deny: portfolioRoot isEmpty.
	
	self assert: 1 equals: portfolioRoot amountOfPortfolios.
	
	self assert: 150 equals: portfolioRoot balance.
	
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:52:06'!
test09MultiplePortfoliosCanBeAddedToPortfolio

	| portfolioRoot portfolioChild1 portfolioChild2 account1 account2|
	
	portfolioRoot _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
		
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	portfolioChild1 register: account1.
	portfolioChild2  register: account2.
	
	portfolioRoot register: portfolioChild1.
	portfolioRoot register: portfolioChild2.
		
	self deny: portfolioRoot isEmpty.
	
	self assert: 2 equals: portfolioRoot amountOfPortfolios.
	
	self assert: 100 equals: portfolioRoot balance.
	
	! !

!methodRemoval: PortfolioTest #test09MultiplePortfoliosCanBeAdedToPortfolio stamp: 'eb 11/8/2020 21:52:06'!
test09MultiplePortfoliosCanBeAdedToPortfolio

	| portfolioRoot portfolioChild1 portfolioChild2 account1 account2|
	
	portfolioRoot _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
		
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	portfolioChild1 register: account1.
	portfolioChild2  register: account2.
	
	portfolioRoot register: portfolioChild1.
	portfolioRoot register: portfolioChild2.
		
	self deny: portfolioRoot isEmpty.
	
	self assert: 2 equals: portfolioRoot amountOfPortfolios.
	
	self assert: 100 equals: portfolioRoot balance.
	
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:53:14' prior: 50978856!
test10SameChildrenDifferentParents

	| portfolioRoot1 portfolioRoot2 portfolioChild1 portfolioChild2 account1 account2 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
		
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	portfolioChild1 register: account1.
	portfolioChild2  register: account2.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild2.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
		
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 2 equals: portfolioRoot2 amountOfPortfolios.
	
	self assert: 100 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:53:25'!
test10ChildrensCouldHaveManyParents

	| portfolioRoot1 portfolioRoot2 portfolioChild1 portfolioChild2 account1 account2 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
		
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	portfolioChild1 register: account1.
	portfolioChild2  register: account2.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild2.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
		
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 2 equals: portfolioRoot2 amountOfPortfolios.
	
	self assert: 100 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	! !

!methodRemoval: PortfolioTest #test10SameChildrenDifferentParents stamp: 'eb 11/8/2020 21:53:25'!
test10SameChildrenDifferentParents

	| portfolioRoot1 portfolioRoot2 portfolioChild1 portfolioChild2 account1 account2 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
		
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	portfolioChild1 register: account1.
	portfolioChild2  register: account2.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild2.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
		
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 2 equals: portfolioRoot2 amountOfPortfolios.
	
	self assert: 100 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	!
!PortfolioTest methodsFor: 'portfolios-adding policies' stamp: 'eb 11/8/2020 21:55:18'!
test10ChildCouldHaveManyParents

	| portfolioRoot1 portfolioRoot2 portfolioChild1 portfolioChild2 account1 account2 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
		
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	portfolioChild1 register: account1.
	portfolioChild2  register: account2.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild2.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
		
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 2 equals: portfolioRoot2 amountOfPortfolios.
	
	self assert: 100 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	! !

!methodRemoval: PortfolioTest #test10ChildrensCouldHaveManyParents stamp: 'eb 11/8/2020 21:55:18'!
test10ChildrensCouldHaveManyParents

	| portfolioRoot1 portfolioRoot2 portfolioChild1 portfolioChild2 account1 account2 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
		
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	portfolioChild1 register: account1.
	portfolioChild2  register: account2.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild2.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
		
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 2 equals: portfolioRoot2 amountOfPortfolios.
	
	self assert: 100 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 21:55:32'!
test11ChildrenCouldHaveManyParents

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3 .
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		! !

!methodRemoval: PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'eb 11/8/2020 21:55:32'!
test11muchosPadresPuedenTenerMuchosHijos

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3 .
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		!

!methodRemoval: PortfolioTest #test20 stamp: 'eb 11/8/2020 21:57:42'!
test20

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		!
!Portfolio methodsFor: 'nil' stamp: 'eb 11/8/2020 21:59:25'!
transactions
	
	self shouldBeImplemented .! !
!FinancialInvestment methodsFor: 'management' stamp: 'eb 11/8/2020 21:59:38'!
transactions
	
	self subclassResponsibility .! !
!Portfolio methodsFor: 'testing' stamp: 'eb 11/8/2020 22:06:14'!
allPortfolios
	
	state allPortfoliosOf: self .! !
!PortfolioState methodsFor: 'nil' stamp: 'eb 11/8/2020 22:06:37'!
allPortfoliosOf: aPortfolio
	
	self subclassResponsibility .! !
!NotRootPortfolio methodsFor: 'nil' stamp: 'eb 11/8/2020 22:07:15'!
allPortfolios: aPortfolio
	
	self shouldBeImplemented .! !
!RootPortfolio methodsFor: 'nil' stamp: 'eb 11/8/2020 22:07:34'!
allPortfolios: aPortfolio
	
	self shouldBeImplemented .! !
!NotRootPortfolio methodsFor: 'testing' stamp: 'eb 11/8/2020 22:07:48' overrides: 50986271!
allPortfoliosOf: aPortfolio
	
	self shouldBeImplemented .! !
!RootPortfolio methodsFor: 'testing' stamp: 'eb 11/8/2020 22:07:53' overrides: 50986271!
allPortfoliosOf: aPortfolio
	
	self shouldBeImplemented .! !
!RootPortfolio methodsFor: 'testing' stamp: 'eb 11/8/2020 22:09:12' prior: 50986290 overrides: 50986271!
allPortfoliosOf: aPortfolio
	
	^ aPortfolio allBelowPortfolios .! !
!Portfolio methodsFor: 'testing' stamp: 'eb 11/8/2020 22:09:23' prior: 50986267!
allPortfolios
	
	^ state allPortfoliosOf: self .! !
!Portfolio methodsFor: 'testing' stamp: 'eb 11/8/2020 22:11:31'!
allBelowPortfolios
	
	| portfolios |
	
	portfolios _ childrenPortfolios .
	
	childrenPortfolios do: [ :portfolio | portfolios add: portfolio. portfolios] .
	
	^ portfolios .! !
!Portfolio methodsFor: 'testing' stamp: 'eb 11/8/2020 22:11:43' prior: 50986305!
allBelowPortfolios
	
	| portfolios |
	
	portfolios _ childrenPortfolios .
	
	childrenPortfolios do: [ :portfolio | portfolios addAll: portfolio portfolios ] .
	
	^ portfolios .! !
!Portfolio methodsFor: 'testing' stamp: 'eb 11/8/2020 22:13:06'!
addAllBelowPortfoliosTo: aPortfolioCollection
	
	aPortfolioCollection addAll: childrenPortfolios .! !
!Portfolio methodsFor: 'testing' stamp: 'eb 11/8/2020 22:13:33' prior: 50986314!
allBelowPortfolios
	
	| portfolios |
	
	portfolios _ childrenPortfolios .
	
	self addAllBelowPortfoliosTo: portfolios.
	
	^ portfolios .! !
!Portfolio methodsFor: 'testing' stamp: 'eb 11/8/2020 22:14:01' prior: 50986322!
addAllBelowPortfoliosTo: aPortfolioCollection
	
	aPortfolioCollection addAll: childrenPortfolios .
	
	childrenPortfolios do: [ :portfolio | portfolio addAllBelowPortfoliosTo: aPortfolioCollection ].! !

!methodRemoval: NotRootPortfolio #allPortfolios: stamp: 'eb 11/8/2020 22:14:14'!
allPortfolios: aPortfolio
	
	self shouldBeImplemented .!

!methodRemoval: RootPortfolio #allPortfolios: stamp: 'eb 11/8/2020 22:14:18'!
allPortfolios: aPortfolio
	
	self shouldBeImplemented .!
!NotRootPortfolio methodsFor: 'testing' stamp: 'eb 11/8/2020 22:14:50' prior: 50986285 overrides: 50986271!
allPortfoliosOf: aPortfolio
	
	aPortfolio searchPortfoliosFromAbove.! !
!Portfolio methodsFor: 'testing' stamp: 'eb 11/8/2020 22:16:10'!
searchPortfoliosFromAboveSavingInto: aPortfolioCollection
	
	^ state allPortfoliosOf: self .! !

!methodRemoval: Portfolio #allPortfolios stamp: 'eb 11/8/2020 22:16:53'!
allPortfolios
	
	^ state allPortfoliosOf: self .!
!PortfolioTest methodsFor: 'portfolios-adding policies' stamp: 'eb 11/8/2020 22:23:02' prior: 50984128!
test14CyclesWithParentOnSingleParentNodeAreForbidden
| portfolioRoot1 portfolioChild1 portfolioChild2 account1 |
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	portfolioRoot1 register: account1 .
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	self halt.
	self should: [ portfolioChild2 register: portfolioRoot1. self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription. .! !
!PortfolioTest methodsFor: 'portfolios-adding policies' stamp: 'eb 11/8/2020 22:23:20' prior: 50986370!
test14CyclesWithParentOnSingleParentNodeAreForbidden
| portfolioRoot1 portfolioChild1 portfolioChild2 account1 |
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	portfolioRoot1 register: account1 .
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	
	self should: [ portfolioChild2 register: portfolioRoot1. self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription. .! !
!PortfolioTest methodsFor: 'portfolios-adding policies' stamp: 'eb 11/8/2020 22:25:27'!
test00ThereArentDuplictedInformation

	| portfolioRoot1 portfolioRoot2 portfolioChild |
	
	portfolioRoot1 _ Portfolio new .
	
	portfolioRoot2  _ Portfolio  new.
	
	portfolioChild _ Portfolio new .
	
	portfolioRoot1 register: portfolioChild .
	
	portfolioRoot2 register: portfolioChild.
	
	self halt.! !

	portfolioRoot1 register: portfolioChild .!

portfolioRoot2!

portfolioRoot1!

!methodRemoval: PortfolioTest #test00ThereArentDuplictedInformation stamp: 'eb 11/8/2020 22:28:56'!
test00ThereArentDuplictedInformation

	| portfolioRoot1 portfolioRoot2 portfolioChild |
	
	portfolioRoot1 _ Portfolio new .
	
	portfolioRoot2  _ Portfolio  new.
	
	portfolioChild _ Portfolio new .
	
	portfolioRoot1 register: portfolioChild .
	
	portfolioRoot2 register: portfolioChild.
	
	self halt.!

!methodRemoval: Portfolio #addAllBelowPortfoliosTo: stamp: 'eb 11/8/2020 22:29:33'!
addAllBelowPortfoliosTo: aPortfolioCollection
	
	aPortfolioCollection addAll: childrenPortfolios .
	
	childrenPortfolios do: [ :portfolio | portfolio addAllBelowPortfoliosTo: aPortfolioCollection ].!

!methodRemoval: Portfolio #allBelowPortfolios stamp: 'eb 11/8/2020 22:29:37'!
allBelowPortfolios
	
	| portfolios |
	
	portfolios _ childrenPortfolios .
	
	self addAllBelowPortfoliosTo: portfolios.
	
	^ portfolios .!

!methodRemoval: Portfolio #searchPortfoliosFromAboveSavingInto: stamp: 'eb 11/8/2020 22:29:40'!
searchPortfoliosFromAboveSavingInto: aPortfolioCollection
	
	^ state allPortfoliosOf: self .!

!methodRemoval: PortfolioState #allPortfoliosOf: stamp: 'eb 11/8/2020 22:29:53'!
allPortfoliosOf: aPortfolio
	
	self subclassResponsibility .!

!methodRemoval: NotRootPortfolio #allPortfoliosOf: stamp: 'eb 11/8/2020 22:30:02'!
allPortfoliosOf: aPortfolio
	
	aPortfolio searchPortfoliosFromAbove.!

!methodRemoval: RootPortfolio #allPortfoliosOf: stamp: 'eb 11/8/2020 22:30:12'!
allPortfoliosOf: aPortfolio
	
	^ aPortfolio allBelowPortfolios .!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'eb 11/8/2020 22:30:32'!
PASSED!

!testRun: #PortfolioTest #test02EmptyAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 22:30:35'!
PASSED!

!testRun: #PortfolioTest #test03DepositeOnlyAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 22:30:36'!
PASSED!

!testRun: #PortfolioTest #test04WithdrawOnlyAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 22:30:36'!
PASSED!

!testRun: #PortfolioTest #test05MultipleTransactionsAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 22:30:36'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 22:30:36'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAddedToPortfolio stamp: 'eb 11/8/2020 22:30:39'!
PASSED!

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAddedToPortfolio stamp: 'eb 11/8/2020 22:30:39'!
PASSED!

!testRun: #PortfolioTest #test09MultiplePortfoliosCanBeAddedToPortfolio stamp: 'eb 11/8/2020 22:30:39'!
PASSED!

!testRun: #PortfolioTest #test10ChildCouldHaveManyParents stamp: 'eb 11/8/2020 22:30:44'!
PASSED!

!testRun: #PortfolioTest #test11ChildrenCouldHaveManyParents stamp: 'eb 11/8/2020 22:30:44'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 22:30:44'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 22:30:44'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 22:30:44'!
PASSED!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 22:30:44'!
PASSED!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 22:30:44'!
PASSED!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 22:30:44'!
PASSED!
!PortfolioTest methodsFor: 'portfolio-multilevel operations' stamp: 'eb 11/8/2020 22:34:45'!
testBalance! !
!PortfolioTest methodsFor: 'portfolio-multilevel operations' stamp: 'eb 11/8/2020 22:34:48'!
testTransactions! !
!PortfolioTest methodsFor: 'portfolio-multilevel operations' stamp: 'eb 11/8/2020 22:34:53'!
testHasOperations! !
!PortfolioTest methodsFor: 'accounts-adding policies' stamp: 'eb 11/8/2020 22:39:29'!
test19AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioChild1 register: account1 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !

!methodRemoval: PortfolioTest #test19 stamp: 'eb 11/8/2020 22:39:32'!
test19

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioChild1 register: account1 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.!
!PortfolioTest methodsFor: 'accounts-adding policies' stamp: 'eb 11/8/2020 22:41:03' prior: 50986550!
test19AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree
	| portfolioRoot1 portfolioChild1 account1 |
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	self should: [ portfolioChild1 register: account1 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddAccountErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !

!testRun: #PortfolioTest #test19AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree stamp: 'eb 11/8/2020 22:41:06'!
ERROR!

!testRun: #PortfolioTest #test19AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree stamp: 'eb 11/8/2020 22:41:06'!
ERROR!
!Portfolio class methodsFor: '*DenotativeObject' stamp: 'eb 11/8/2020 22:41:14'!
cantAddAccountErrorDescription
	self shouldBeImplemented.! !
!Portfolio class methodsFor: '*DenotativeObject' stamp: 'eb 11/8/2020 22:41:28' prior: 50986641!
cantAddAccountErrorDescription
	
	^ 'Account cant be added'.! !

!testRun: #PortfolioTest #test19AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree stamp: 'eb 11/8/2020 22:41:37'!
FAILURE!

!testRun: #PortfolioTest #test19AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree stamp: 'eb 11/8/2020 22:41:37'!
FAILURE!
!ReceptiveAccount methodsFor: 'register-private' stamp: 'eb 11/8/2020 22:42:45' prior: 50984923 overrides: 50983551!
registerAsChildOf: aParentPortfolio
	(aParentPortfolio itsHierarchyHas: self) ifTrue: [ self error: self class cantAddAccountErrorDescription . ]. 
	
	aParentPortfolio registerAccount: self.! !
!ReceptiveAccount methodsFor: 'register-private' stamp: 'eb 11/8/2020 22:42:51' prior: 50986661 overrides: 50983551!
registerAsChildOf: aParentPortfolio
	(aParentPortfolio itsHierarchyHasAccount: self) ifTrue: [ self error: self class cantAddAccountErrorDescription . ]. 
	
	aParentPortfolio registerAccount: self.! !
!Portfolio methodsFor: 'moving into hierarchy' stamp: 'eb 11/8/2020 22:43:08'!
itsHierarchyHasPortfolio: aPortfolio
	^ state lookFor: aPortfolio intoHierarchyOf: self.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 22:43:08' prior: 50984589!
searchFromAbove: aPortfolio
	parentsPortfolios detect: [ :portfolio | portfolio itsHierarchyHasPortfolio: aPortfolio ] ifNone: [^ false ] .
	
	^ true .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 22:43:08' prior: 50984012 overrides: 50983551!
registerAsChildOf: aParentPortfolio

	(aParentPortfolio itsHierarchyHasPortfolio: self) ifTrue: [ self error: self class cantAddPortfolioErrorDescription. ]. 
	
	aParentPortfolio registerChildPortfolio: self. 
	
	state _ NotRootPortfolio new.
	! !

!methodRemoval: Portfolio #itsHierarchyHas: stamp: 'eb 11/8/2020 22:43:08'!
itsHierarchyHas: aPortfolio
	^ state lookFor: aPortfolio intoHierarchyOf: self.
!
!Portfolio methodsFor: 'moving into hierarchy' stamp: 'eb 11/8/2020 22:43:59'!
itsHierarchyHasAccount: anAccount
	^ state lookForAccount: anAccount intoHierarchyOf: self.
! !
!NotRootPortfolio methodsFor: 'moving into hierarchy' stamp: 'eb 11/8/2020 22:44:15'!
lookForPortfolio: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio
	^ aPotentialParentPortfolio searchFromAbove: aPotentialChildPortfolio .! !
!RootPortfolio methodsFor: 'moving into hierarchy' stamp: 'eb 11/8/2020 22:44:15'!
lookForPortfolio: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio
	^ aPotentialParentPortfolio searchBelow: aPotentialChildPortfolio .! !
!PortfolioState methodsFor: 'moving into hierarchy' stamp: 'eb 11/8/2020 22:44:15'!
lookForPortfolio: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio
	self subclassResponsibility .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 22:44:15' prior: 50986680!
itsHierarchyHasPortfolio: aPortfolio
	^ state lookForPortfolio: aPortfolio intoHierarchyOf: self.
! !

!methodRemoval: NotRootPortfolio #lookFor:intoHierarchyOf: stamp: 'eb 11/8/2020 22:44:15'!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio
	^ aPotentialParentPortfolio searchFromAbove: aPotentialChildPortfolio .!

!methodRemoval: RootPortfolio #lookFor:intoHierarchyOf: stamp: 'eb 11/8/2020 22:44:15'!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio
	^ aPotentialParentPortfolio searchBelow: aPotentialChildPortfolio .!

!methodRemoval: PortfolioState #lookFor:intoHierarchyOf: stamp: 'eb 11/8/2020 22:44:15'!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio
	self subclassResponsibility .!
!PortfolioState methodsFor: 'moving into hierarchy' stamp: 'eb 11/8/2020 22:44:51'!
lookForAccount: anAccount intoHierarchyOf: aParentPortfolio
	self subclassResponsibility .! !
!NotRootPortfolio methodsFor: 'moving into hierarchy' stamp: 'eb 11/8/2020 22:45:19' overrides: 50986768!
lookForAccount: anAccount intoHierarchyOf: aParentPortfolio

	^ aParentPortfolio searchAccountFromAbove: anAccount .! !
!RootPortfolio methodsFor: 'moving into hierarchy' stamp: 'eb 11/8/2020 22:45:36' overrides: 50986768!
lookForAccount: anAccount intoHierarchyOf: aParentPortfolio

	^ aParentPortfolio searchAccountBelow: anAccount .! !
!Portfolio methodsFor: 'moving into hierarchy' stamp: 'eb 11/8/2020 22:45:46'!
searchPortfolioBelow: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children searchBelow: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 22:45:46' prior: 50984571!
searchBelow: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children searchPortfolioBelow: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !
!RootPortfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 22:45:47' prior: 50986725 overrides: 50986733!
lookForPortfolio: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio
	^ aPotentialParentPortfolio searchPortfolioBelow: aPotentialChildPortfolio .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 22:45:47' prior: 50986789!
searchPortfolioBelow: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children searchPortfolioBelow: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
! !

!methodRemoval: Portfolio #searchBelow: stamp: 'eb 11/8/2020 22:45:47'!
searchBelow: aPortfolio

	(self = aPortfolio) ifFalse: [ 
		childrenPortfolios detect:[ :children | children searchPortfolioBelow: aPortfolio ] ifNone:[^ false ]. 
		^ true .
	].
	
	^ true .
!
!Portfolio methodsFor: 'moving into hierarchy' stamp: 'eb 11/8/2020 22:45:59'!
searchPortfolioFromAbove: aPortfolio
	parentsPortfolios detect: [ :portfolio | portfolio itsHierarchyHasPortfolio: aPortfolio ] ifNone: [^ false ] .
	
	^ true .! !
!NotRootPortfolio methodsFor: 'as yet unclassified' stamp: 'eb 11/8/2020 22:45:59' prior: 50986717 overrides: 50986733!
lookForPortfolio: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio
	^ aPotentialParentPortfolio searchPortfolioFromAbove: aPotentialChildPortfolio .! !

!methodRemoval: Portfolio #searchFromAbove: stamp: 'eb 11/8/2020 22:45:59'!
searchFromAbove: aPortfolio
	parentsPortfolios detect: [ :portfolio | portfolio itsHierarchyHasPortfolio: aPortfolio ] ifNone: [^ false ] .
	
	^ true .!
!Portfolio methodsFor: 'moving into hierarchy' stamp: 'eb 11/8/2020 22:48:31'!
searchAccountBelow: anAccount
	
	(accounts includes: anAccount) ifFalse: [
		childrenPortfolios detect: [ :portfolio | portfolio searchAccountBelow: anAccount ] ifNone:[^ false ].
	].

	^ true .
! !
!Portfolio methodsFor: 'moving into hierarchy' stamp: 'eb 11/8/2020 22:49:12'!
searchAccountFromAbove: anAccount
	parentsPortfolios detect: [ :portfolio | portfolio itsHierarchyHasAccount: anAccount ] ifNone: [^ false ] .
	
	^ true .! !

!testRun: #PortfolioTest #test19AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree stamp: 'eb 11/8/2020 22:49:22'!
FAILURE!

!testRun: #PortfolioTest #test19AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree stamp: 'eb 11/8/2020 22:49:22'!
FAILURE!

!testRun: #PortfolioTest #test19AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree stamp: 'eb 11/8/2020 22:50:58'!
FAILURE!
!PortfolioTest methodsFor: 'accounts-adding policies' stamp: 'eb 11/8/2020 22:51:41' prior: 50986605!
test19AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree
	| portfolioRoot1 portfolioChild1 account1 |
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	self should: [ portfolioChild1 register: account1 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddAccountErrorDescription .! !

!testRun: #PortfolioTest #test19AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree stamp: 'eb 11/8/2020 22:51:44'!
FAILURE!

!testRun: #PortfolioTest #test19AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree stamp: 'eb 11/8/2020 22:51:44'!
FAILURE!
!ReceptiveAccount class methodsFor: 'nil' stamp: 'eb 11/8/2020 22:53:36'!
cantAddAccountErrorDescription
	
	^ 'Account cant be added'.! !

!methodRemoval: Portfolio class #cantAddAccountErrorDescription stamp: 'eb 11/8/2020 22:53:48'!
cantAddAccountErrorDescription
	
	^ 'Account cant be added'.!

!testRun: #PortfolioTest #test19AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree stamp: 'eb 11/8/2020 22:54:02'!
ERROR!

!testRun: #PortfolioTest #test19AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree stamp: 'eb 11/8/2020 22:54:02'!
ERROR!
!PortfolioTest methodsFor: 'accounts-adding policies' stamp: 'eb 11/8/2020 22:54:41' prior: 50986892!
test19AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree
	| portfolioRoot1 portfolioChild1 account1 |
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	self should: [ portfolioChild1 register: account1 . self fail]  
		raise: Error
		withMessageText: ReceptiveAccount cantAddAccountErrorDescription .! !

!testRun: #PortfolioTest #test19AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree stamp: 'eb 11/8/2020 22:54:48'!
PASSED!
!PortfolioTest methodsFor: 'portfolio-multilevel operations' stamp: 'eb 11/8/2020 22:56:19'!
test20MultilevelBalance

	| parentPortfolio1 childPortfolio1 childPortfolio2 account1 account2 |
	
	
	
	! !
!PortfolioTest methodsFor: 'portfolio-multilevel operations' stamp: 'eb 11/8/2020 22:59:58' prior: 50986963!
test20MultilevelBalance

	| rootPortfolio childPortfolio1 childPortfolio2 account1 account2 |
	
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	rootPortfolio _ Portfolio new .
	childPortfolio1 _ Portfolio new.
	childPortfolio2 _ Portfolio  new.
	
	childPortfolio1 register: account1.
	childPortfolio2 register: account2 .
	rootPortfolio register: childPortfolio1 .
		
	self assert: 100 equals: rootPortfolio balance.
	
	
	
	! !

!testRun: #PortfolioTest #test20MultilevelBalance stamp: 'eb 11/8/2020 22:59:59'!
FAILURE!

!testRun: #PortfolioTest #test20MultilevelBalance stamp: 'eb 11/8/2020 22:59:59'!
FAILURE!
!Portfolio methodsFor: 'management' stamp: 'eb 11/8/2020 23:01:19' prior: 50984826 overrides: 50979387!
balance
	
	| childrenBalance |
	
	childrenBalance _ childrenPortfolios sum: [ :portfolio | portfolio balance ].
	
	^ (self balanceOf: accounts) + (self balanceOf: childrenPortfolios)  .
		
		! !
!Portfolio methodsFor: 'management' stamp: 'eb 11/8/2020 23:01:26' prior: 50986998 overrides: 50979387!
balance
	
	| childrenBalance |
	
	childrenBalance _ childrenPortfolios sum: [ :portfolio | portfolio balance ].
	
	^ childrenBalance + (self balanceOf: accounts) + (self balanceOf: childrenPortfolios)  .
		
		! !

!testRun: #PortfolioTest #test20MultilevelBalance stamp: 'eb 11/8/2020 23:01:45'!
ERROR!

!testRun: #PortfolioTest #test20MultilevelBalance stamp: 'eb 11/8/2020 23:01:45'!
ERROR!
!Portfolio methodsFor: 'management' stamp: 'eb 11/8/2020 23:02:50' prior: 50987008 overrides: 50979387!
balance
	
	| childrenBalance |
	
	childrenBalance _ childrenPortfolios sum: [ :portfolio | portfolio balance ] ifEmpty: [0].
	
	^ childrenBalance + (self balanceOf: accounts) + (self balanceOf: childrenPortfolios)  .
		
		! !

!testRun: #PortfolioTest #test20MultilevelBalance stamp: 'eb 11/8/2020 23:03:58'!
PASSED!
!ReceptiveAccount methodsFor: 'management' stamp: 'eb 11/8/2020 23:04:52' prior: 50985085 overrides: 50979387!
balance
	| balance |
	balance _ 0.
	transactions do: [ :aTransaction | balance _ balance + aTransaction valueInBalance ].
	^ transactions sum: [ :transaction | transaction valueInBalance ] ifEmpty: [0].
	! !
!ReceptiveAccount methodsFor: 'management' stamp: 'eb 11/8/2020 23:04:55' prior: 50987038 overrides: 50979387!
balance
	^ transactions sum: [ :transaction | transaction valueInBalance ] ifEmpty: [0].
	! !

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'eb 11/8/2020 23:05:00'!
PASSED!

!testRun: #PortfolioTest #test02EmptyAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:05:00'!
PASSED!

!testRun: #PortfolioTest #test03DepositeOnlyAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:05:00'!
PASSED!

!testRun: #PortfolioTest #test04WithdrawOnlyAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:05:00'!
PASSED!

!testRun: #PortfolioTest #test05MultipleTransactionsAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:05:00'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:05:00'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:05:00'!
PASSED!

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:05:00'!
FAILURE!

!testRun: #PortfolioTest #test09MultiplePortfoliosCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:05:00'!
FAILURE!

!testRun: #PortfolioTest #test10ChildCouldHaveManyParents stamp: 'eb 11/8/2020 23:05:00'!
FAILURE!

!testRun: #PortfolioTest #test11ChildrenCouldHaveManyParents stamp: 'eb 11/8/2020 23:05:00'!
FAILURE!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 23:05:00'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 23:05:00'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:05:00'!
PASSED!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:05:00'!
PASSED!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:05:00'!
PASSED!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:05:00'!
PASSED!

!testRun: #PortfolioTest #test19AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree stamp: 'eb 11/8/2020 23:05:00'!
PASSED!

!testRun: #PortfolioTest #test20MultilevelBalance stamp: 'eb 11/8/2020 23:05:00'!
PASSED!

!testRun: #PortfolioTest #testBalance stamp: 'eb 11/8/2020 23:05:00'!
PASSED!

!testRun: #PortfolioTest #testHasOperations stamp: 'eb 11/8/2020 23:05:00'!
PASSED!

!testRun: #PortfolioTest #testTransactions stamp: 'eb 11/8/2020 23:05:00'!
PASSED!

!testRun: #PortfolioTest #test20MultilevelBalance stamp: 'eb 11/8/2020 23:05:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eb 11/8/2020 23:05:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 23:05:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 23:05:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eb 11/8/2020 23:05:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eb 11/8/2020 23:05:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eb 11/8/2020 23:05:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eb 11/8/2020 23:05:18'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:05:22'!
PASSED!

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:05:23'!
FAILURE!

!testRun: #PortfolioTest #test09MultiplePortfoliosCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:05:23'!
FAILURE!

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:05:37'!
FAILURE!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:05:58'!
PASSED!

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:05:58'!
FAILURE!

!testRun: #PortfolioTest #test09MultiplePortfoliosCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:05:58'!
FAILURE!

!testRun: #PortfolioTest #test10ChildCouldHaveManyParents stamp: 'eb 11/8/2020 23:06:02'!
FAILURE!

!testRun: #PortfolioTest #test11ChildrenCouldHaveManyParents stamp: 'eb 11/8/2020 23:06:02'!
FAILURE!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 23:06:02'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 23:06:02'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:06:02'!
PASSED!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:06:02'!
PASSED!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:06:02'!
PASSED!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:06:02'!
PASSED!

!testRun: #PortfolioTest #test19AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree stamp: 'eb 11/8/2020 23:06:06'!
PASSED!
!PortfolioTest methodsFor: 'portfolios-adding' stamp: 'eb 11/8/2020 23:06:22' prior: 50985806!
test08NotEmptyPortfolioCanBeAddedToPortfolio
	| portfolioRoot portfolio2 account1 account2 account3 |
	
	portfolioRoot _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio2 register: account1.
	portfolio2 register: account2.
	portfolio2 register: account3.
	
	portfolioRoot register: portfolio2.
	
	self deny: portfolioRoot isEmpty.
	
	self assert: 1 equals: portfolioRoot amountOfPortfolios.
	
	self assert: 150 equals: portfolioRoot balance.
	
	! !
!PortfolioTest methodsFor: 'portfolios-adding' stamp: 'eb 11/8/2020 23:06:26' prior: 50987216!
test08NotEmptyPortfolioCanBeAddedToPortfolio
	| portfolioRoot portfolio2 account1 account2 account3 |
	
	portfolioRoot _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio2 register: account1.
	portfolio2 register: account2.
	portfolio2 register: account3.
	
	portfolioRoot register: portfolio2.
	
	self deny: portfolioRoot isEmpty.
	
	self assert: 1 equals: portfolioRoot amountOfPortfolios.
	
	self assert: 150 equals: portfolioRoot balance.
	
	! !
!PortfolioTest methodsFor: 'portfolios-adding' stamp: 'eb 11/8/2020 23:06:38' prior: 50987245!
test08NotEmptyPortfolioCanBeAddedToPortfolio
	| rootPortfolio portfolio2 account1 account2 account3 |
	
	rootPortfolio _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio2 register: account1.
	portfolio2 register: account2.
	portfolio2 register: account3.
	
	rootPortfolio register: portfolio2.
	
	self deny: rootPortfolio isEmpty.
	
	self assert: 1 equals: rootPortfolio amountOfPortfolios.
	
	self assert: 150 equals: rootPortfolio balance.
	
	! !
!PortfolioTest methodsFor: 'portfolios-adding' stamp: 'eb 11/8/2020 23:06:46' prior: 50987274!
test08NotEmptyPortfolioCanBeAddedToPortfolio
	| rootPortfolio childPortfolio1 account1 account2 account3 |
	
	rootPortfolio _ Portfolio new.
	childPortfolio1  _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	childPortfolio1 register: account1.
	childPortfolio1 register: account2.
	childPortfolio1 register: account3.
	
	rootPortfolio register: childPortfolio1.
	
	self deny: rootPortfolio isEmpty.
	
	self assert: 1 equals: rootPortfolio amountOfPortfolios.
	
	self assert: 150 equals: rootPortfolio balance.
	
	! !
!PortfolioTest methodsFor: 'portfolios-adding' stamp: 'eb 11/8/2020 23:07:05' prior: 50987303!
test08NotEmptyPortfolioCanBeAddedToPortfolio
	| rootPortfolio childPortfolio account1 account2 account3 |
	
	rootPortfolio _ Portfolio new.
	childPortfolio  _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	childPortfolio register: account1.
	childPortfolio register: account2.
	childPortfolio register: account3.
	
	rootPortfolio register: childPortfolio.
	
	self deny: rootPortfolio isEmpty.
	
	self assert: 1 equals: rootPortfolio amountOfPortfolios.
	
	self assert: 150 equals: rootPortfolio balance.
	
	! !
!PortfolioTest methodsFor: 'portfolios-adding' stamp: 'eb 11/8/2020 23:07:28' prior: 50987333!
test08NotEmptyPortfolioCanBeAddedToPortfolio
	| rootPortfolio childPortfolio account1 account2 account3 |
	
	rootPortfolio _ Portfolio new.
	childPortfolio  _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	childPortfolio register: account1.
	childPortfolio register: account2.
	childPortfolio register: account3.
	
	rootPortfolio register: childPortfolio.
	
	self deny: rootPortfolio isEmpty.
	
	self assert: 1 equals: rootPortfolio amountOfPortfolios.
	
	self assert: 150 equals: rootPortfolio balance.
	
	! !
!PortfolioTest methodsFor: 'nil' stamp: 'eb 11/8/2020 23:07:50'!
accountWithBalanceOf50
	! !
!PortfolioTest methodsFor: 'private' stamp: 'eb 11/8/2020 23:10:33'!
accountWithSingleDepositOf: aDepositValue andSingleWithdrawOf: aWithdrawValue
	
	| account |
	
	account  _ ReceptiveAccount new.
	
	Deposit register: aDepositValue on: account.
	
	Withdraw register: aWithdrawValue on: account.
	
	^ account .
	! !

!methodRemoval: PortfolioTest #accountWithBalanceOf50 stamp: 'eb 11/8/2020 23:10:35'!
accountWithBalanceOf50
	!
!PortfolioTest methodsFor: 'private' stamp: 'eb 11/8/2020 23:11:10'!
accountWithBalanceOf50
	
	^ self accountWithSingleDepositOf: 100  andSingleWithdrawOf: 50.! !
!PortfolioTest methodsFor: 'portfolios-adding' stamp: 'eb 11/8/2020 23:11:32' prior: 50987363!
test08NotEmptyPortfolioCanBeAddedToPortfolio
	| rootPortfolio childPortfolio account1 account2 account3 |
	
	rootPortfolio _ Portfolio new.
	childPortfolio  _ Portfolio new.
	account1  _ self accountWithBalanceOf50 .
	account2  _ self accountWithBalanceOf50 .
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	childPortfolio register: account1.
	childPortfolio register: account2.
	childPortfolio register: account3.
	
	rootPortfolio register: childPortfolio.
	
	self deny: rootPortfolio isEmpty.
	
	self assert: 1 equals: rootPortfolio amountOfPortfolios.
	
	self assert: 150 equals: rootPortfolio balance.
	
	! !
!PortfolioTest methodsFor: 'portfolios-adding' stamp: 'eb 11/8/2020 23:11:58' prior: 50987416!
test08NotEmptyPortfolioCanBeAddedToPortfolio
	| rootPortfolio childPortfolio account1 account2 account3 |
	
	rootPortfolio _ Portfolio new.
	childPortfolio  _ Portfolio new.
	account1  _ self accountWithBalanceOf50 .
	account2  _ self accountWithBalanceOf50 .
	account3  _ self accountWithBalanceOf50 .
	
	childPortfolio register: account1.
	childPortfolio register: account2.
	childPortfolio register: account3.
	
	rootPortfolio register: childPortfolio.
	
	self deny: rootPortfolio isEmpty.
	
	self assert: 1 equals: rootPortfolio amountOfPortfolios.
	
	self assert: 150 equals: rootPortfolio balance.
	
	! !
!PortfolioTest methodsFor: 'portfolios-adding' stamp: 'eb 11/8/2020 23:12:21' prior: 50987444!
test08NotEmptyPortfolioCanBeAddedToPortfolio
	| rootPortfolio childPortfolio account1 account2 account3 |
	
	rootPortfolio _ Portfolio new.
	childPortfolio  _ Portfolio new.
	account1  _ self accountWithBalanceOf50 .
	account2  _ self accountWithBalanceOf50 .
	account3  _ self accountWithBalanceOf50 .
	
	childPortfolio register: account1.
	childPortfolio register: account2.
	childPortfolio register: account3.
	rootPortfolio register: childPortfolio.
	self deny: rootPortfolio isEmpty.
	self assert: 1 equals: rootPortfolio amountOfPortfolios.
	self assert: 150 equals: rootPortfolio balance.
	
	! !

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:12:29'!
FAILURE!

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:12:30'!
FAILURE!

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:13:37'!
FAILURE!

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:13:37'!
FAILURE!
!Portfolio methodsFor: 'management' stamp: 'eb 11/8/2020 23:14:18' prior: 50987024 overrides: 50979387!
balance
	
	| childrenBalance |
	
	childrenBalance _ childrenPortfolios sum: [ :portfolio | portfolio balance ] ifEmpty: [0].
	
	^ childrenBalance + (self balanceOf: accounts)  .
		
		! !

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:14:23'!
PASSED!

!testRun: #PortfolioTest #test09MultiplePortfoliosCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:14:26'!
PASSED!

!testRun: #PortfolioTest #test10ChildCouldHaveManyParents stamp: 'eb 11/8/2020 23:14:30'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'eb 11/8/2020 23:14:34'!
PASSED!

!testRun: #PortfolioTest #test02EmptyAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:14:34'!
PASSED!

!testRun: #PortfolioTest #test03DepositeOnlyAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:14:34'!
PASSED!

!testRun: #PortfolioTest #test04WithdrawOnlyAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:14:34'!
PASSED!

!testRun: #PortfolioTest #test05MultipleTransactionsAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:14:34'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:14:34'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:14:34'!
PASSED!

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:14:34'!
PASSED!

!testRun: #PortfolioTest #test09MultiplePortfoliosCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:14:34'!
PASSED!

!testRun: #PortfolioTest #test10ChildCouldHaveManyParents stamp: 'eb 11/8/2020 23:14:34'!
PASSED!

!testRun: #PortfolioTest #test11ChildrenCouldHaveManyParents stamp: 'eb 11/8/2020 23:14:34'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 23:14:34'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 23:14:34'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:14:34'!
PASSED!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:14:34'!
PASSED!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:14:34'!
PASSED!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:14:34'!
PASSED!

!testRun: #PortfolioTest #test19AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree stamp: 'eb 11/8/2020 23:14:34'!
PASSED!

!testRun: #PortfolioTest #test20MultilevelBalance stamp: 'eb 11/8/2020 23:14:34'!
FAILURE!

!testRun: #PortfolioTest #testBalance stamp: 'eb 11/8/2020 23:14:34'!
PASSED!

!testRun: #PortfolioTest #testHasOperations stamp: 'eb 11/8/2020 23:14:34'!
PASSED!

!testRun: #PortfolioTest #testTransactions stamp: 'eb 11/8/2020 23:14:34'!
PASSED!

!testRun: #PortfolioTest #test20MultilevelBalance stamp: 'eb 11/8/2020 23:14:34'!
FAILURE!

!testRun: #PortfolioTest #test10ChildCouldHaveManyParents stamp: 'eb 11/8/2020 23:14:41'!
PASSED!

!testRun: #PortfolioTest #test11ChildrenCouldHaveManyParents stamp: 'eb 11/8/2020 23:14:41'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 23:14:41'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 23:14:41'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:14:41'!
PASSED!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:14:41'!
PASSED!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:14:41'!
PASSED!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:14:41'!
PASSED!

!testRun: #PortfolioTest #test19AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree stamp: 'eb 11/8/2020 23:14:43'!
PASSED!

!testRun: #PortfolioTest #test20MultilevelBalance stamp: 'eb 11/8/2020 23:14:44'!
FAILURE!

!testRun: #PortfolioTest #testBalance stamp: 'eb 11/8/2020 23:14:44'!
PASSED!

!testRun: #PortfolioTest #testHasOperations stamp: 'eb 11/8/2020 23:14:44'!
PASSED!

!testRun: #PortfolioTest #testTransactions stamp: 'eb 11/8/2020 23:14:44'!
PASSED!

!testRun: #PortfolioTest #test20MultilevelBalance stamp: 'eb 11/8/2020 23:14:44'!
FAILURE!

!testRun: #PortfolioTest #test20MultilevelBalance stamp: 'eb 11/8/2020 23:14:49'!
FAILURE!

!testRun: #PortfolioTest #test20MultilevelBalance stamp: 'eb 11/8/2020 23:14:49'!
FAILURE!
!PortfolioTest methodsFor: 'portfolio-multilevel operations' stamp: 'eb 11/8/2020 23:15:00' prior: 50986970!
test20MultilevelBalance

	| rootPortfolio childPortfolio1 childPortfolio2 account1 account2 |
	
	account1  _ self  accountWithBalanceOf50 .
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	rootPortfolio _ Portfolio new .
	childPortfolio1 _ Portfolio new.
	childPortfolio2 _ Portfolio  new.
	
	childPortfolio1 register: account1.
	childPortfolio2 register: account2 .
	rootPortfolio register: childPortfolio1 .
		
	self assert: 100 equals: rootPortfolio balance.
	
	
	
	! !
!PortfolioTest methodsFor: 'portfolio-multilevel operations' stamp: 'eb 11/8/2020 23:15:23' prior: 50987653!
test20MultilevelBalance

	| rootPortfolio childPortfolio1 childPortfolio2 account1 account2 |
	
	account1  _ self  accountWithBalanceOf50 .
	
	account2  _ self  accountWithBalanceOf50 .
	
	rootPortfolio _ Portfolio new .
	
	childPortfolio1 _ Portfolio new.
	
	childPortfolio2 _ Portfolio  new.
	
	childPortfolio1 register: account1.
	
	childPortfolio2 register: account2 .
	
	rootPortfolio register: childPortfolio1 .
		
	self assert: 100 equals: rootPortfolio balance.
	
	
	
	! !
!PortfolioTest methodsFor: 'portfolio-multilevel operations' stamp: 'eb 11/8/2020 23:15:56' prior: 50987674!
test20MultilevelBalance

	| rootPortfolio childPortfolio1 childPortfolio2 account1 account2 |
	
	account1  _ self  accountWithBalanceOf50 .
	
	account2  _ self  accountWithBalanceOf50 .
	
	rootPortfolio _ Portfolio new .
	
	childPortfolio1 _ Portfolio new.
	
	childPortfolio2 _ Portfolio  new.
	
	childPortfolio1 register: account1.
	
	childPortfolio2 register: account2 .
	
	rootPortfolio register: childPortfolio1 .
	
	rootPortfolio register:  childPortfolio2.
		
	self assert: 100 equals: rootPortfolio balance.
	
	
	
	! !

!testRun: #PortfolioTest #test20MultilevelBalance stamp: 'eb 11/8/2020 23:15:58'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'eb 11/8/2020 23:16:08'!
PASSED!

!testRun: #PortfolioTest #test02EmptyAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:16:08'!
PASSED!

!testRun: #PortfolioTest #test03DepositeOnlyAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:16:08'!
PASSED!

!testRun: #PortfolioTest #test04WithdrawOnlyAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:16:08'!
PASSED!

!testRun: #PortfolioTest #test05MultipleTransactionsAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:16:08'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:16:08'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:16:08'!
PASSED!

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:16:08'!
PASSED!

!testRun: #PortfolioTest #test09MultiplePortfoliosCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:16:08'!
PASSED!

!testRun: #PortfolioTest #test10ChildCouldHaveManyParents stamp: 'eb 11/8/2020 23:16:08'!
PASSED!

!testRun: #PortfolioTest #test11ChildrenCouldHaveManyParents stamp: 'eb 11/8/2020 23:16:08'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 23:16:08'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 23:16:08'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:16:08'!
PASSED!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:16:08'!
PASSED!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:16:08'!
PASSED!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:16:08'!
PASSED!

!testRun: #PortfolioTest #test19AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree stamp: 'eb 11/8/2020 23:16:08'!
PASSED!

!testRun: #PortfolioTest #test20MultilevelBalance stamp: 'eb 11/8/2020 23:16:08'!
PASSED!

!testRun: #PortfolioTest #testBalance stamp: 'eb 11/8/2020 23:16:08'!
PASSED!

!testRun: #PortfolioTest #testHasOperations stamp: 'eb 11/8/2020 23:16:08'!
PASSED!

!testRun: #PortfolioTest #testTransactions stamp: 'eb 11/8/2020 23:16:08'!
PASSED!

!methodRemoval: PortfolioTest #testBalance stamp: 'eb 11/8/2020 23:16:16'!
testBalance!
!PortfolioTest methodsFor: 'portfolio-multilevel operations' stamp: 'eb 11/8/2020 23:22:34'!
test21MultilevelTransactions

	| rootPortfolio childPortfolio1 childPortfolio2 account1 account2 deposit1 deposit2 withdraw1 withdraw2 |
	
	account1 _ self accountWithBalanceOf50 .
	
	account2 _ self accountWithBalanceOf50 .
	
	childPortfolio1 _ Portfolio new.
	
	childPortfolio2 _ Portfolio new.
	
	rootPortfolio _ Portfolio new.
	
	childPortfolio1 register: account1 .
	
	childPortfolio2 register: account2.
	
	rootPortfolio register: childPortfolio1.
	
	rootPortfolio register: childPortfolio2.
	
	self assert: #()
	
	! !
!PortfolioTest methodsFor: 'portfolio-multilevel operations' stamp: 'eb 11/8/2020 23:24:14' prior: 50987793!
test21MultilevelTransactions

	| rootPortfolio childPortfolio1 childPortfolio2 account1 account2 deposit1 deposit2 withdraw1 withdraw2 |
	
	account1 _ ReceptiveAccount new.
	
	account2 _ ReceptiveAccount new.
	
	childPortfolio1 _ Portfolio new.
	
	childPortfolio2 _ Portfolio new.
	
	rootPortfolio _ Portfolio new.
	
	childPortfolio1 register: account1 .
	
	childPortfolio2 register: account2.
	
	rootPortfolio register: childPortfolio1.
	
	rootPortfolio register: childPortfolio2.
	
	self assert: #()
	
	! !
!PortfolioTest methodsFor: 'portfolio-multilevel operations' stamp: 'eb 11/8/2020 23:25:27' prior: 50987813!
test21MultilevelTransactions

	| rootPortfolio childPortfolio1 childPortfolio2 account1 account2 deposit1 deposit2 withdraw1 withdraw2 |
	
	account1 _ ReceptiveAccount new.
	
	account2 _ ReceptiveAccount new.
	
	childPortfolio1 _ Portfolio new.
	
	childPortfolio2 _ Portfolio new.
	
	rootPortfolio _ Portfolio new.
	
	childPortfolio1 register: account1 .
	
	childPortfolio2 register: account2.
	
	rootPortfolio register: childPortfolio1.
	
	rootPortfolio register: childPortfolio2.
	
	deposit1 _ Deposit register: 100 on: account1 .
	
	deposit2 _ Deposit register: 200 on: account2 .
	
	withdraw1 _ Withdraw register: 50 on: account1 .
	
	withdraw2 _ Withdraw register: 100 on: account2 .
	
	self assert: #()
	
	! !
!PortfolioTest methodsFor: 'portfolio-multilevel operations' stamp: 'eb 11/8/2020 23:26:46' prior: 50987833!
test21MultilevelTransactions

	| rootPortfolio childPortfolio1 childPortfolio2 account1 account2 deposit1 deposit2 withdraw1 withdraw2 |
	
	account1 _ ReceptiveAccount new.
	
	account2 _ ReceptiveAccount new.
	
	childPortfolio1 _ Portfolio new.
	
	childPortfolio2 _ Portfolio new.
	
	rootPortfolio _ Portfolio new.
	
	childPortfolio1 register: account1 .
	
	childPortfolio2 register: account2.
	
	rootPortfolio register: childPortfolio1.
	
	rootPortfolio register: childPortfolio2.
	
	deposit1 _ Deposit register: 100 on: account1 .
	
	deposit2 _ Deposit register: 200 on: account2 .
	
	withdraw1 _ Withdraw register: 50 on: account1 .
	
	withdraw2 _ Withdraw register: 100 on: account2 .
	
	self assert: (OrderedCollection with: deposit1 with: deposit2 with: withdraw1 with: withdraw2)
		equals: rootPortfolio transactions .
	
	! !

!testRun: #PortfolioTest #test21MultilevelTransactions stamp: 'eb 11/8/2020 23:26:48'!
ERROR!

!testRun: #PortfolioTest #test21MultilevelTransactions stamp: 'eb 11/8/2020 23:26:48'!
ERROR!
!Portfolio methodsFor: 'management' stamp: 'eb 11/8/2020 23:27:21' prior: 50986259 overrides: 50986263!
transactions
	
	^ OrderedCollection new .! !

!testRun: #PortfolioTest #test21MultilevelTransactions stamp: 'eb 11/8/2020 23:27:40'!
FAILURE!

!testRun: #PortfolioTest #test21MultilevelTransactions stamp: 'eb 11/8/2020 23:27:40'!
FAILURE!
!Portfolio methodsFor: 'management' stamp: 'eb 11/8/2020 23:28:00' prior: 50987895 overrides: 50986263!
transactions
	
	^ nil.! !

!testRun: #PortfolioTest #test21MultilevelTransactions stamp: 'eb 11/8/2020 23:28:02'!
FAILURE!

!testRun: #PortfolioTest #test21MultilevelTransactions stamp: 'eb 11/8/2020 23:28:02'!
FAILURE!
!Portfolio methodsFor: 'management' stamp: 'eb 11/8/2020 23:30:50' prior: 50987906 overrides: 50986263!
transactions

	| ownTransactions childrenTransactions |
	
	ownTransactions _ accounts transactions .
	
	childrenTransactions _ OrderedCollection new.
	
	childrenPortfolios do: [ :portfolio | childrenTransactions addAll: portfolio transactions ].
	
	^ ownTransactions addAll: childrenTransactions .! !

!testRun: #PortfolioTest #test21MultilevelTransactions stamp: 'eb 11/8/2020 23:30:57'!
ERROR!

!testRun: #PortfolioTest #test21MultilevelTransactions stamp: 'eb 11/8/2020 23:30:57'!
ERROR!
!Portfolio methodsFor: 'management' stamp: 'eb 11/8/2020 23:32:00' prior: 50987917 overrides: 50986263!
transactions

	| ownTransactions childrenTransactions |
	
	ownTransactions _ OrderedCollection new.
	
	accounts do: [ :account | ownTransactions addAll: account transactions ].
	
	childrenTransactions _ OrderedCollection new.
	
	childrenPortfolios do: [ :portfolio | childrenTransactions addAll: portfolio transactions ].
	
	^ ownTransactions addAll: childrenTransactions .! !

!testRun: #PortfolioTest #test21MultilevelTransactions stamp: 'eb 11/8/2020 23:32:05'!
FAILURE!

!testRun: #PortfolioTest #test21MultilevelTransactions stamp: 'eb 11/8/2020 23:32:05'!
FAILURE!
!PortfolioTest methodsFor: 'portfolio-multilevel operations' stamp: 'eb 11/8/2020 23:32:24' prior: 50987859!
test21MultilevelTransactions

	| rootPortfolio childPortfolio1 childPortfolio2 account1 account2 deposit1 deposit2 withdraw1 withdraw2 |
	
	account1 _ ReceptiveAccount new.
	
	account2 _ ReceptiveAccount new.
	
	childPortfolio1 _ Portfolio new.
	
	childPortfolio2 _ Portfolio new.
	
	rootPortfolio _ Portfolio new.
	
	childPortfolio1 register: account1 .
	
	childPortfolio2 register: account2.
	
	rootPortfolio register: childPortfolio1.
	
	rootPortfolio register: childPortfolio2.
	
	deposit1 _ Deposit register: 100 on: account1 .
	
	deposit2 _ Deposit register: 200 on: account2 .
	
	withdraw1 _ Withdraw register: 50 on: account1 .
	
	withdraw2 _ Withdraw register: 100 on: account2 .
	
	self assert: (Set with: deposit1 with: deposit2 with: withdraw1 with: withdraw2)
		equals: rootPortfolio transactions .
	
	! !
!Portfolio methodsFor: 'management' stamp: 'eb 11/8/2020 23:32:43' prior: 50987936 overrides: 50986263!
transactions

	| ownTransactions childrenTransactions |
	
	ownTransactions _ Set new.
	
	accounts do: [ :account | ownTransactions addAll: account transactions ].
	
	childrenTransactions _ Set new.
	
	childrenPortfolios do: [ :portfolio | childrenTransactions addAll: portfolio transactions ].
	
	^ ownTransactions addAll: childrenTransactions .! !

!testRun: #PortfolioTest #test21MultilevelTransactions stamp: 'eb 11/8/2020 23:32:51'!
FAILURE!

!testRun: #PortfolioTest #test21MultilevelTransactions stamp: 'eb 11/8/2020 23:32:51'!
FAILURE!

!testRun: #PortfolioTest #test20MultilevelBalance stamp: 'eb 11/8/2020 23:33:19'!
PASSED!

!testRun: #PortfolioTest #test21MultilevelTransactions stamp: 'eb 11/8/2020 23:33:19'!
FAILURE!

!testRun: #PortfolioTest #testHasOperations stamp: 'eb 11/8/2020 23:33:19'!
PASSED!

!testRun: #PortfolioTest #testTransactions stamp: 'eb 11/8/2020 23:33:19'!
PASSED!

!testRun: #PortfolioTest #test21MultilevelTransactions stamp: 'eb 11/8/2020 23:33:19'!
FAILURE!

!testRun: #PortfolioTest #test21MultilevelTransactions stamp: 'eb 11/8/2020 23:33:31'!
FAILURE!

!testRun: #PortfolioTest #test21MultilevelTransactions stamp: 'eb 11/8/2020 23:33:31'!
FAILURE!
!Portfolio methodsFor: 'management' stamp: 'eb 11/8/2020 23:35:23'!
saveTransactionsInto: aTransactionCollection

	| ownTransactions childrenTransactions |
	
	ownTransactions _ Set new.
	
	accounts do: [ :account | ownTransactions addAll: account transactions ].
	
	childrenTransactions _ Set new.
	
	childrenPortfolios do: [ :portfolio | childrenTransactions addAll: portfolio transactions ].
	
	aTransactionCollection addAll: (ownTransactions addAll: childrenTransactions).! !
!Portfolio methodsFor: 'management' stamp: 'eb 11/8/2020 23:35:52' prior: 50988027!
saveTransactionsInto: aTransactionCollection

	| ownTransactions childrenTransactions |
	
	ownTransactions _ Set new.
	
	accounts do: [ :account | aTransactionCollection addAll: account transactions ].
	
	childrenTransactions _ Set new.
	
	childrenPortfolios do: [ :portfolio | childrenTransactions addAll: portfolio transactions ].
	
	aTransactionCollection addAll: (ownTransactions addAll: childrenTransactions).! !
!Portfolio methodsFor: 'management' stamp: 'eb 11/8/2020 23:36:29' prior: 50988043!
saveTransactionsInto: aTransactionCollection

	accounts do: [ :account | aTransactionCollection addAll: account transactions ].
	
	childrenPortfolios do: [ :portfolio | portfolio saveTransactionsInto: aTransactionCollection].! !
!Portfolio methodsFor: 'management' stamp: 'eb 11/8/2020 23:36:44' prior: 50987987 overrides: 50986263!
transactions

	| transactions childrenTransactions |
	
	transactions _ Set new.
	
	accounts do: [ :account | transactions addAll: account transactions ].
	
	childrenTransactions _ Set new.
	
	childrenPortfolios do: [ :portfolio | childrenTransactions addAll: portfolio transactions ].
	
	^ transactions addAll: childrenTransactions .! !
!Portfolio methodsFor: 'management' stamp: 'eb 11/8/2020 23:36:59' prior: 50988070 overrides: 50986263!
transactions

	| transactions |
	
	transactions _ Set new.
	
	^ self saveTransactionsInto: transactions .! !

!testRun: #PortfolioTest #test21MultilevelTransactions stamp: 'eb 11/8/2020 23:37:21'!
FAILURE!

!testRun: #PortfolioTest #test21MultilevelTransactions stamp: 'eb 11/8/2020 23:37:22'!
PASSED!

----QUIT----(8 November 2020 23:37:30) CuisUniversity-4365.image priorSource: 20755280!

----STARTUP---- (8 November 2020 23:37:35) as C:\Program Files\CuisUniversity\CuisUniversity-4365.image!

!Portfolio methodsFor: 'management' stamp: 'eb 11/8/2020 23:39:11' prior: 50988084 overrides: 50986263!
transactions

	| transactions |
	
	transactions _ OrderedCollection new.
	
	^ self saveTransactionsInto: transactions .! !
!Portfolio methodsFor: 'management' stamp: 'eb 11/8/2020 23:39:59' prior: 50988059!
saveTransactionsInto: aTransactionCollection

	accounts do: [ :account | aTransactionCollection addAll: account transactions ].
	
	childrenPortfolios do: [ :portfolio | portfolio saveTransactionsInto: aTransactionCollection].! !

!testRun: #PortfolioTest #test21MultilevelTransactions stamp: 'eb 11/8/2020 23:40:12'!
FAILURE!

!testRun: #PortfolioTest #test21MultilevelTransactions stamp: 'eb 11/8/2020 23:40:12'!
FAILURE!
!Portfolio methodsFor: 'management' stamp: 'eb 11/8/2020 23:40:57' prior: 50988103 overrides: 50986263!
transactions

	| transactions |
	
	transactions _ OrderedCollection new.
	
	self saveTransactionsInto: transactions .
	
	^ transactions.! !

!testRun: #PortfolioTest #test21MultilevelTransactions stamp: 'eb 11/8/2020 23:41:01'!
FAILURE!

!testRun: #PortfolioTest #test21MultilevelTransactions stamp: 'eb 11/8/2020 23:41:01'!
FAILURE!
!PortfolioTest methodsFor: 'portfolio-multilevel operations' stamp: 'eb 11/8/2020 23:41:17' prior: 50987958!
test21MultilevelTransactions

	| rootPortfolio childPortfolio1 childPortfolio2 account1 account2 deposit1 deposit2 withdraw1 withdraw2 |
	
	account1 _ ReceptiveAccount new.
	
	account2 _ ReceptiveAccount new.
	
	childPortfolio1 _ Portfolio new.
	
	childPortfolio2 _ Portfolio new.
	
	rootPortfolio _ Portfolio new.
	
	childPortfolio1 register: account1 .
	
	childPortfolio2 register: account2.
	
	rootPortfolio register: childPortfolio1.
	
	rootPortfolio register: childPortfolio2.
	
	deposit1 _ Deposit register: 100 on: account1 .
	
	deposit2 _ Deposit register: 200 on: account2 .
	
	withdraw1 _ Withdraw register: 50 on: account1 .
	
	withdraw2 _ Withdraw register: 100 on: account2 .
	
	self assert: (Set with: deposit1 with: deposit2 with: withdraw1 with: withdraw2)
		equals: rootPortfolio transactions .
	
	! !
!Portfolio methodsFor: 'management' stamp: 'eb 11/8/2020 23:41:27' prior: 50988127 overrides: 50986263!
transactions

	| transactions |
	
	transactions _ Set new.
	
	self saveTransactionsInto: transactions .
	
	^ transactions.! !

!testRun: #PortfolioTest #test21MultilevelTransactions stamp: 'eb 11/8/2020 23:41:31'!
PASSED!
!PortfolioTest methodsFor: 'portfolio-multilevel operations' stamp: 'eb 11/8/2020 23:42:18'!
test21MultilevelHasRegistered
	! !

!methodRemoval: PortfolioTest #testTransactions stamp: 'eb 11/8/2020 23:42:25'!
testTransactions!

!methodRemoval: PortfolioTest #testHasOperations stamp: 'eb 11/8/2020 23:42:27'!
testHasOperations!
!PortfolioTest methodsFor: 'portfolio-multilevel operations' stamp: 'eb 11/8/2020 23:42:32'!
test22MultilevelHasRegistered
	! !

!methodRemoval: PortfolioTest #test21MultilevelHasRegistered stamp: 'eb 11/8/2020 23:42:32'!
test21MultilevelHasRegistered
	!
!PortfolioTest methodsFor: 'portfolio-multilevel operations' stamp: 'eb 11/8/2020 23:44:05' prior: 50988191!
test22MultilevelHasRegistered

	| rootPortfolio childPortfolio1 childPortfolio2 account1 account2 deposit1 deposit2 withdraw1 withdraw2 |
	
	account1 _ ReceptiveAccount new.
	
	account2 _ ReceptiveAccount new.
	
	childPortfolio1 _ Portfolio new.
	
	childPortfolio2 _ Portfolio new.
	
	rootPortfolio _ Portfolio new.
	
	childPortfolio1 register: account1 .
	
	childPortfolio2 register: account2.
	
	rootPortfolio register: childPortfolio1.
	
	rootPortfolio register: childPortfolio2.
	
	deposit1 _ Deposit register: 100 on: account1 .
	
	deposit2 _ Deposit register: 200 on: account2 .
	
	withdraw1 _ Withdraw register: 50 on: account1 .
	
	withdraw2 _ Withdraw register: 100 on: account2 .
	
	self assert: (rootPortfolio hasRegistered: deposit1).
	
	self assert: (childPortfolio1 hasRegistered: deposit1).
	
	self deny: (childPortfolio2 hasRegistered: deposit1).! !

!testRun: #PortfolioTest #test22MultilevelHasRegistered stamp: 'eb 11/8/2020 23:44:21'!
ERROR!

!testRun: #PortfolioTest #test22MultilevelHasRegistered stamp: 'eb 11/8/2020 23:44:21'!
ERROR!
!Portfolio methodsFor: 'management' stamp: 'eb 11/8/2020 23:44:34' prior: 50984707 overrides: 50979392!
hasRegistered: aFinancialInvestment

	^false.
	! !

!testRun: #PortfolioTest #test20MultilevelBalance stamp: 'eb 11/8/2020 23:44:36'!
PASSED!

!testRun: #PortfolioTest #test21MultilevelTransactions stamp: 'eb 11/8/2020 23:44:36'!
PASSED!

!testRun: #PortfolioTest #test22MultilevelHasRegistered stamp: 'eb 11/8/2020 23:44:36'!
FAILURE!

!testRun: #PortfolioTest #test22MultilevelHasRegistered stamp: 'eb 11/8/2020 23:44:36'!
FAILURE!
!Portfolio methodsFor: 'management' stamp: 'eb 11/8/2020 23:45:47' prior: 50988237 overrides: 50979392!
hasRegistered: aFinancialInvestment


	^false.
	! !
!Portfolio methodsFor: 'management' stamp: 'eb 11/8/2020 23:47:11' prior: 50988254 overrides: 50979392!
hasRegistered: aTransaction
	
	(accounts detect: [ :account | account hasRegistered: aTransaction]).

	^false.
	! !
!FinancialInvestment methodsFor: 'management' stamp: 'eb 11/8/2020 23:47:20' prior: 50979392!
hasRegistered: aTransaction
	
	self subclassResponsibility ! !
!FinancialInvestment methodsFor: 'management' stamp: 'eb 11/8/2020 23:47:22' prior: 50988266!
hasRegistered: aTransaction
	self subclassResponsibility ! !
!Portfolio methodsFor: 'management' stamp: 'eb 11/8/2020 23:48:13' prior: 50988259 overrides: 50988271!
hasRegistered: aTransaction
	
	[ accounts detect: [ :account | account hasRegistered: aTransaction] ifNone: [ ^ false ].
		^true]
		

	^false.
	! !
!Portfolio methodsFor: 'management' stamp: 'eb 11/8/2020 23:48:16' prior: 50988277 overrides: 50988271!
hasRegistered: aTransaction
	
	[ accounts detect: [ :account | account hasRegistered: aTransaction] ifNone: [ ^ false ].
	^true]
		

	^false.
	! !
!Portfolio methodsFor: 'management' stamp: 'eb 11/8/2020 23:49:22' prior: 50988285 overrides: 50988271!
hasRegistered: aTransaction
	
	^ self transactions includes: aTransaction .
	! !

!testRun: #PortfolioTest #test22MultilevelHasRegistered stamp: 'eb 11/8/2020 23:49:35'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'eb 11/8/2020 23:49:41'!
PASSED!

!testRun: #PortfolioTest #test02EmptyAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:49:41'!
PASSED!

!testRun: #PortfolioTest #test03DepositeOnlyAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:49:41'!
PASSED!

!testRun: #PortfolioTest #test04WithdrawOnlyAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:49:41'!
PASSED!

!testRun: #PortfolioTest #test05MultipleTransactionsAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:49:41'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:49:41'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:49:41'!
PASSED!

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:49:41'!
PASSED!

!testRun: #PortfolioTest #test09MultiplePortfoliosCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:49:41'!
PASSED!

!testRun: #PortfolioTest #test10ChildCouldHaveManyParents stamp: 'eb 11/8/2020 23:49:41'!
PASSED!

!testRun: #PortfolioTest #test11ChildrenCouldHaveManyParents stamp: 'eb 11/8/2020 23:49:41'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 23:49:41'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 23:49:41'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:49:41'!
PASSED!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:49:41'!
PASSED!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:49:41'!
PASSED!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:49:41'!
PASSED!

!testRun: #PortfolioTest #test19AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree stamp: 'eb 11/8/2020 23:49:41'!
PASSED!

!testRun: #PortfolioTest #test20MultilevelBalance stamp: 'eb 11/8/2020 23:49:41'!
PASSED!

!testRun: #PortfolioTest #test21MultilevelTransactions stamp: 'eb 11/8/2020 23:49:41'!
PASSED!

!testRun: #PortfolioTest #test22MultilevelHasRegistered stamp: 'eb 11/8/2020 23:49:41'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'eb 11/8/2020 23:49:43'!
PASSED!

!testRun: #PortfolioTest #test02EmptyAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:49:43'!
PASSED!

!testRun: #PortfolioTest #test03DepositeOnlyAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:49:43'!
PASSED!

!testRun: #PortfolioTest #test04WithdrawOnlyAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:49:43'!
PASSED!

!testRun: #PortfolioTest #test05MultipleTransactionsAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:49:43'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:49:43'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:49:43'!
PASSED!

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:49:43'!
PASSED!

!testRun: #PortfolioTest #test09MultiplePortfoliosCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:49:43'!
PASSED!

!testRun: #PortfolioTest #test10ChildCouldHaveManyParents stamp: 'eb 11/8/2020 23:49:43'!
PASSED!

!testRun: #PortfolioTest #test11ChildrenCouldHaveManyParents stamp: 'eb 11/8/2020 23:49:43'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 23:49:43'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 23:49:43'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:49:43'!
PASSED!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:49:43'!
PASSED!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:49:43'!
PASSED!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:49:43'!
PASSED!

!testRun: #PortfolioTest #test19AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree stamp: 'eb 11/8/2020 23:49:43'!
PASSED!

!testRun: #PortfolioTest #test20MultilevelBalance stamp: 'eb 11/8/2020 23:49:43'!
PASSED!

!testRun: #PortfolioTest #test21MultilevelTransactions stamp: 'eb 11/8/2020 23:49:43'!
PASSED!

!testRun: #PortfolioTest #test22MultilevelHasRegistered stamp: 'eb 11/8/2020 23:49:43'!
PASSED!
!PortfolioTest methodsFor: 'accounts-adding policies' stamp: 'eb 11/8/2020 23:50:04'!
test18AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree
	| portfolioRoot1 portfolioChild1 account1 |
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	self should: [ portfolioChild1 register: account1 . self fail]  
		raise: Error
		withMessageText: ReceptiveAccount cantAddAccountErrorDescription .! !

!methodRemoval: PortfolioTest #test19AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree stamp: 'eb 11/8/2020 23:50:04'!
test19AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree
	| portfolioRoot1 portfolioChild1 account1 |
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	self should: [ portfolioChild1 register: account1 . self fail]  
		raise: Error
		withMessageText: ReceptiveAccount cantAddAccountErrorDescription .!
!PortfolioTest methodsFor: 'portfolio-multilevel operations' stamp: 'eb 11/8/2020 23:50:16'!
test19MultilevelBalance

	| rootPortfolio childPortfolio1 childPortfolio2 account1 account2 |
	
	account1  _ self  accountWithBalanceOf50 .
	
	account2  _ self  accountWithBalanceOf50 .
	
	rootPortfolio _ Portfolio new .
	
	childPortfolio1 _ Portfolio new.
	
	childPortfolio2 _ Portfolio  new.
	
	childPortfolio1 register: account1.
	
	childPortfolio2 register: account2 .
	
	rootPortfolio register: childPortfolio1 .
	
	rootPortfolio register:  childPortfolio2.
		
	self assert: 100 equals: rootPortfolio balance.
	
	
	
	! !

!methodRemoval: PortfolioTest #test20MultilevelBalance stamp: 'eb 11/8/2020 23:50:16'!
test20MultilevelBalance

	| rootPortfolio childPortfolio1 childPortfolio2 account1 account2 |
	
	account1  _ self  accountWithBalanceOf50 .
	
	account2  _ self  accountWithBalanceOf50 .
	
	rootPortfolio _ Portfolio new .
	
	childPortfolio1 _ Portfolio new.
	
	childPortfolio2 _ Portfolio  new.
	
	childPortfolio1 register: account1.
	
	childPortfolio2 register: account2 .
	
	rootPortfolio register: childPortfolio1 .
	
	rootPortfolio register:  childPortfolio2.
		
	self assert: 100 equals: rootPortfolio balance.
	
	
	
	!
!PortfolioTest methodsFor: 'portfolio-multilevel operations' stamp: 'eb 11/8/2020 23:50:20'!
test20MultilevelTransactions

	| rootPortfolio childPortfolio1 childPortfolio2 account1 account2 deposit1 deposit2 withdraw1 withdraw2 |
	
	account1 _ ReceptiveAccount new.
	
	account2 _ ReceptiveAccount new.
	
	childPortfolio1 _ Portfolio new.
	
	childPortfolio2 _ Portfolio new.
	
	rootPortfolio _ Portfolio new.
	
	childPortfolio1 register: account1 .
	
	childPortfolio2 register: account2.
	
	rootPortfolio register: childPortfolio1.
	
	rootPortfolio register: childPortfolio2.
	
	deposit1 _ Deposit register: 100 on: account1 .
	
	deposit2 _ Deposit register: 200 on: account2 .
	
	withdraw1 _ Withdraw register: 50 on: account1 .
	
	withdraw2 _ Withdraw register: 100 on: account2 .
	
	self assert: (Set with: deposit1 with: deposit2 with: withdraw1 with: withdraw2)
		equals: rootPortfolio transactions .
	
	! !

!methodRemoval: PortfolioTest #test21MultilevelTransactions stamp: 'eb 11/8/2020 23:50:20'!
test21MultilevelTransactions

	| rootPortfolio childPortfolio1 childPortfolio2 account1 account2 deposit1 deposit2 withdraw1 withdraw2 |
	
	account1 _ ReceptiveAccount new.
	
	account2 _ ReceptiveAccount new.
	
	childPortfolio1 _ Portfolio new.
	
	childPortfolio2 _ Portfolio new.
	
	rootPortfolio _ Portfolio new.
	
	childPortfolio1 register: account1 .
	
	childPortfolio2 register: account2.
	
	rootPortfolio register: childPortfolio1.
	
	rootPortfolio register: childPortfolio2.
	
	deposit1 _ Deposit register: 100 on: account1 .
	
	deposit2 _ Deposit register: 200 on: account2 .
	
	withdraw1 _ Withdraw register: 50 on: account1 .
	
	withdraw2 _ Withdraw register: 100 on: account2 .
	
	self assert: (Set with: deposit1 with: deposit2 with: withdraw1 with: withdraw2)
		equals: rootPortfolio transactions .
	
	!
!PortfolioTest methodsFor: 'portfolio-multilevel operations' stamp: 'eb 11/8/2020 23:50:25'!
test21MultilevelHasRegistered

	| rootPortfolio childPortfolio1 childPortfolio2 account1 account2 deposit1 deposit2 withdraw1 withdraw2 |
	
	account1 _ ReceptiveAccount new.
	
	account2 _ ReceptiveAccount new.
	
	childPortfolio1 _ Portfolio new.
	
	childPortfolio2 _ Portfolio new.
	
	rootPortfolio _ Portfolio new.
	
	childPortfolio1 register: account1 .
	
	childPortfolio2 register: account2.
	
	rootPortfolio register: childPortfolio1.
	
	rootPortfolio register: childPortfolio2.
	
	deposit1 _ Deposit register: 100 on: account1 .
	
	deposit2 _ Deposit register: 200 on: account2 .
	
	withdraw1 _ Withdraw register: 50 on: account1 .
	
	withdraw2 _ Withdraw register: 100 on: account2 .
	
	self assert: (rootPortfolio hasRegistered: deposit1).
	
	self assert: (childPortfolio1 hasRegistered: deposit1).
	
	self deny: (childPortfolio2 hasRegistered: deposit1).! !

!methodRemoval: PortfolioTest #test22MultilevelHasRegistered stamp: 'eb 11/8/2020 23:50:25'!
test22MultilevelHasRegistered

	| rootPortfolio childPortfolio1 childPortfolio2 account1 account2 deposit1 deposit2 withdraw1 withdraw2 |
	
	account1 _ ReceptiveAccount new.
	
	account2 _ ReceptiveAccount new.
	
	childPortfolio1 _ Portfolio new.
	
	childPortfolio2 _ Portfolio new.
	
	rootPortfolio _ Portfolio new.
	
	childPortfolio1 register: account1 .
	
	childPortfolio2 register: account2.
	
	rootPortfolio register: childPortfolio1.
	
	rootPortfolio register: childPortfolio2.
	
	deposit1 _ Deposit register: 100 on: account1 .
	
	deposit2 _ Deposit register: 200 on: account2 .
	
	withdraw1 _ Withdraw register: 50 on: account1 .
	
	withdraw2 _ Withdraw register: 100 on: account2 .
	
	self assert: (rootPortfolio hasRegistered: deposit1).
	
	self assert: (childPortfolio1 hasRegistered: deposit1).
	
	self deny: (childPortfolio2 hasRegistered: deposit1).!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'eb 11/8/2020 23:50:27'!
PASSED!

!testRun: #PortfolioTest #test02EmptyAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:50:27'!
PASSED!

!testRun: #PortfolioTest #test03DepositeOnlyAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:50:27'!
PASSED!

!testRun: #PortfolioTest #test04WithdrawOnlyAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:50:27'!
PASSED!

!testRun: #PortfolioTest #test05MultipleTransactionsAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:50:27'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:50:27'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:50:27'!
PASSED!

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:50:27'!
PASSED!

!testRun: #PortfolioTest #test09MultiplePortfoliosCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:50:27'!
PASSED!

!testRun: #PortfolioTest #test10ChildCouldHaveManyParents stamp: 'eb 11/8/2020 23:50:27'!
PASSED!

!testRun: #PortfolioTest #test11ChildrenCouldHaveManyParents stamp: 'eb 11/8/2020 23:50:27'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 23:50:27'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 23:50:27'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:50:27'!
PASSED!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:50:27'!
PASSED!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:50:27'!
PASSED!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:50:27'!
PASSED!

!testRun: #PortfolioTest #test18AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree stamp: 'eb 11/8/2020 23:50:27'!
PASSED!

!testRun: #PortfolioTest #test19MultilevelBalance stamp: 'eb 11/8/2020 23:50:27'!
PASSED!

!testRun: #PortfolioTest #test20MultilevelTransactions stamp: 'eb 11/8/2020 23:50:27'!
PASSED!

!testRun: #PortfolioTest #test21MultilevelHasRegistered stamp: 'eb 11/8/2020 23:50:27'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'eb 11/8/2020 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test02EmptyAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test03DepositeOnlyAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test04WithdrawOnlyAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test05MultipleTransactionsAccountCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test09MultiplePortfoliosCanBeAddedToPortfolio stamp: 'eb 11/8/2020 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test10ChildCouldHaveManyParents stamp: 'eb 11/8/2020 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test11ChildrenCouldHaveManyParents stamp: 'eb 11/8/2020 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'eb 11/8/2020 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'eb 11/8/2020 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'eb 11/8/2020 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test18AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree stamp: 'eb 11/8/2020 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test19MultilevelBalance stamp: 'eb 11/8/2020 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test20MultilevelTransactions stamp: 'eb 11/8/2020 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test21MultilevelHasRegistered stamp: 'eb 11/8/2020 23:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eb 11/8/2020 23:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 23:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eb 11/8/2020 23:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eb 11/8/2020 23:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eb 11/8/2020 23:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eb 11/8/2020 23:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eb 11/8/2020 23:50:33'!
PASSED!