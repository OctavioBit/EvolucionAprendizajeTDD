

----STARTUP---- (5 November 2020 10:47:43) as /home/cmarta/Downloads/parcial/limpio/linux64/CuisUniversity-4384.image!


----End fileIn of /home/cmarta/Workspace/FCEyN/IS1/docentes/18-Portfolio1/Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CM 11/5/2020 10:48:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CM 11/5/2020 10:48:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CM 11/5/2020 10:48:40'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CM 11/5/2020 10:48:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CM 11/5/2020 10:48:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CM 11/5/2020 10:48:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CM 11/5/2020 10:48:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CM 11/5/2020 10:48:40'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CM 11/5/2020 10:50:50' prior: 50867981!
balance
	| multiplier |
	^transactions sum: [ :aTransaction | 
		( aTransaction isKindOf: Deposit ) ifTrue: [ multiplier := 1 ].
		( aTransaction isKindOf: Withdraw ) ifTrue: [ multiplier := -1 ].
		aTransaction value * multiplier
	] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CM 11/5/2020 10:50:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CM 11/5/2020 10:50:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CM 11/5/2020 10:50:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CM 11/5/2020 10:50:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CM 11/5/2020 10:50:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CM 11/5/2020 10:50:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CM 11/5/2020 10:50:52'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CM 11/5/2020 10:52:10' prior: 50868025!
balance
	
	^transactions inject: 0 into: [ :acum :aTransaction | 
		aTransaction addTo: acum
	].! !
!Deposit methodsFor: 'initialization' stamp: 'CM 11/5/2020 10:52:46'!
addTo: aBalance

	^ aBalance + value! !
!Withdraw methodsFor: 'initialization' stamp: 'CM 11/5/2020 10:53:06'!
addTo: aBalance

	^ aBalance - value! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CM 11/5/2020 10:53:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CM 11/5/2020 10:53:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CM 11/5/2020 10:53:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CM 11/5/2020 10:53:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CM 11/5/2020 10:53:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CM 11/5/2020 10:53:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CM 11/5/2020 10:53:08'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CM 11/5/2020 10:55:48' prior: 50868062!
balance
	
	^ transactions inject: 0 into: [ :acum :aTransaction | 
		aTransaction addTo: acum
	].! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'CM 11/5/2020 10:57:08'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CM 11/5/2020 10:57:59'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'nil' stamp: 'CM 11/5/2020 10:57:54'!
test01

	| portfolio |
	
	portfolio := Portfolio new.

	self assert: 0 equals: portfolio balance.
! !

!testRun: #PortfolioTest #test01 stamp: 'CM 11/5/2020 10:58:03'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'CM 11/5/2020 10:58:03'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 10:58:10'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 10:58:17' prior: 50868139!
balance
	^ 0.! !

!testRun: #PortfolioTest #test01 stamp: 'CM 11/5/2020 10:58:19'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'CM 11/5/2020 10:58:21'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:02:18'!
test02

	| portfolio account |
	
	account = ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio new.
	portfolio add: account.
	
	self assert: 100 equals: portfolio balance.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:02:55' prior: 50868152!
test02

	| portfolio account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio new.
	portfolio add: account.
	
	self assert: 100 equals: portfolio balance.
! !

!testRun: #PortfolioTest #test02 stamp: 'CM 11/5/2020 11:02:58'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'CM 11/5/2020 11:02:58'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:03:25'!
add: aReceptiveAccount 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CM 11/5/2020 11:03:52'!
Object subclass: #Portfolio
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:03:50' prior: 50868176!
add: aReceptiveAccount 
	
	account := aReceptiveAccount .! !

!testRun: #PortfolioTest #test02 stamp: 'CM 11/5/2020 11:03:54'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'CM 11/5/2020 11:04:19'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'CM 11/5/2020 11:04:22'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:04:31' prior: 50868144!
balance
	^ account balance.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CM 11/5/2020 11:04:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CM 11/5/2020 11:04:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CM 11/5/2020 11:04:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CM 11/5/2020 11:04:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CM 11/5/2020 11:04:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CM 11/5/2020 11:04:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CM 11/5/2020 11:04:34'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:05:00' prior: 50868200!
balance

	^ account balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:06:17'!
test03

	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	portfolio add: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 50 on: account2.
	portfolio add: account2.
	
	self assert: 50 equals: portfolio balance.
! !

!testRun: #PortfolioTest #test03 stamp: 'CM 11/5/2020 11:06:20'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:06:27' prior: 50868235!
test03

	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	portfolio add: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 50 on: account2.
	portfolio add: account2.
	
	self assert: 150 equals: portfolio balance.
! !

!testRun: #PortfolioTest #test03 stamp: 'CM 11/5/2020 11:06:28'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'CM 11/5/2020 11:06:28'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:06:50' prior: 50868188!
add: aReceptiveAccount 
	
	account add: aReceptiveAccount .! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CM 11/5/2020 11:07:00'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:07:00' prior: 50868231!
balance

	^ accounts balance.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:07:00' prior: 50868269!
add: aReceptiveAccount 
	
	accounts add: aReceptiveAccount .! !

!testRun: #PortfolioTest #test03 stamp: 'CM 11/5/2020 11:07:03'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'CM 11/5/2020 11:07:05'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:07:44' overrides: 16896425!
initialize

	accounts := OrderedCollection new.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CM 11/5/2020 11:07:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CM 11/5/2020 11:07:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CM 11/5/2020 11:07:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CM 11/5/2020 11:07:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CM 11/5/2020 11:07:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CM 11/5/2020 11:07:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CM 11/5/2020 11:07:47'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'CM 11/5/2020 11:07:58'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'CM 11/5/2020 11:07:58'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:08:28' prior: 50868282!
balance

	^ accounts sum: [ :anAccount | anAccount balance ].! !

!testRun: #PortfolioTest #test03 stamp: 'CM 11/5/2020 11:08:29'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'CM 11/5/2020 11:08:32'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:11:29'!
test04

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit).
! !

!testRun: #PortfolioTest #test04 stamp: 'CM 11/5/2020 11:11:37'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'CM 11/5/2020 11:11:37'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:11:43'!
hasRegistered: aDeposit 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:11:53' prior: 50868357!
hasRegistered: aDeposit 

	^ true.! !

!testRun: #PortfolioTest #test04 stamp: 'CM 11/5/2020 11:11:54'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'CM 11/5/2020 11:11:55'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'CM 11/5/2020 11:11:55'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'CM 11/5/2020 11:11:55'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CM 11/5/2020 11:11:55'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'CM 11/5/2020 11:11:55'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'CM 11/5/2020 11:12:15'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'CM 11/5/2020 11:12:18'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'CM 11/5/2020 11:12:18'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'CM 11/5/2020 11:12:18'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CM 11/5/2020 11:12:18'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'CM 11/5/2020 11:12:18'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:12:44' prior: 50868332!
balance

	^ accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ].! !

!testRun: #PortfolioTest #test01 stamp: 'CM 11/5/2020 11:12:46'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'CM 11/5/2020 11:12:47'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'CM 11/5/2020 11:12:47'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'CM 11/5/2020 11:12:47'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CM 11/5/2020 11:12:47'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:13:20' prior: 50868342!
test04

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	
	self deny: (portfolio hasRegistered: deposit).
! !

!testRun: #PortfolioTest #test04 stamp: 'CM 11/5/2020 11:13:21'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'CM 11/5/2020 11:13:21'!
FAILURE!

----SNAPSHOT----(5 November 2020 11:13:45) CuisUniversity-4384.image priorSource: 17155564!

----End fileIn of /home/cmarta/Downloads/parcial/limpio/linux64/Packages/TerseGuide.pck.st----!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:14:49' prior: 50868362!
hasRegistered: aTransaction 

	^ accounts anySatisfy: [ :account | account hasRegistered: aTransaction ].! !

!testRun: #PortfolioTest #test04 stamp: 'CM 11/5/2020 11:14:50'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'CM 11/5/2020 11:14:53'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'CM 11/5/2020 11:14:53'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'CM 11/5/2020 11:14:53'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CM 11/5/2020 11:14:53'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:19:46'!
test05

	| portfolio account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 50 on: account.
	portfolio := Portfolio new add: account.
		
	self assert: 1 equals: portfolio transactions size.
	self assert: (portfolio transactions includes: deposit).! !

!testRun: #PortfolioTest #test05 stamp: 'CM 11/5/2020 11:19:48'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'CM 11/5/2020 11:19:48'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:19:55'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:24:34' prior: 50871400!
transactions

	^ accounts inject: OrderedCollection new into: [ :allTransactions :account | allTransactions addAll: account transactions ].! !

!testRun: #PortfolioTest #test05 stamp: 'CM 11/5/2020 11:24:35'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'CM 11/5/2020 11:24:43'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'CM 11/5/2020 11:24:47'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'CM 11/5/2020 11:24:47'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'CM 11/5/2020 11:24:47'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CM 11/5/2020 11:24:47'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'CM 11/5/2020 11:24:47'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:27:53'!
test06

	| portfolio |
	
	portfolio := Portfolio new.
		
	self should: [ portfolio add: portfolio ] raise: Error withMessageText: Portfolio xxErrorDescription! !

!testRun: #PortfolioTest #test06 stamp: 'CM 11/5/2020 11:27:57'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'CM 11/5/2020 11:27:57'!
ERROR!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:28:11'!
xxErrorDescription
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:28:33' prior: 50871442!
xxErrorDescription
	
	^ 'No se puede tener ciclos' ! !

!testRun: #PortfolioTest #test06 stamp: 'CM 11/5/2020 11:28:35'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:29:40' prior: 50868286!
add: aReceptiveAccount 
	
	aReceptiveAccount = self ifTrue: [ self error: self class xxErrorDescription ].
	
	accounts add: aReceptiveAccount .! !

!testRun: #PortfolioTest #test01 stamp: 'CM 11/5/2020 11:29:44'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'CM 11/5/2020 11:29:44'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'CM 11/5/2020 11:29:44'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CM 11/5/2020 11:29:44'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'CM 11/5/2020 11:29:44'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'CM 11/5/2020 11:29:44'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:31:40'!
test07

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
			
	self should: [ portfolio2 add: portfolio1 ] raise: Error withMessageText: Portfolio xxErrorDescription! !

!testRun: #PortfolioTest #test07 stamp: 'CM 11/5/2020 11:31:42'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'CM 11/5/2020 11:31:42'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:36:22' prior: 50871454!
add: aReceptiveAccount 
	
	(aReceptiveAccount isKindOf: Portfolio) ifTrue: [
		aReceptiveAccount = self ifTrue: [ self error: self class xxErrorDescription ].
		(aReceptiveAccount includes: self) ifTrue: [ self error: self class xxErrorDescription ].
	].
	
	accounts add: aReceptiveAccount .! !

!testRun: #PortfolioTest #test07 stamp: 'CM 11/5/2020 11:36:26'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:37:07'!
includes: aPortfolio

	^ accounts includes: aPortfolio.! !

!testRun: #PortfolioTest #test01 stamp: 'CM 11/5/2020 11:37:11'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'CM 11/5/2020 11:37:11'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'CM 11/5/2020 11:37:11'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CM 11/5/2020 11:37:11'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'CM 11/5/2020 11:37:11'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'CM 11/5/2020 11:37:11'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'CM 11/5/2020 11:37:11'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:38:24'!
test08

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
					
	self should: [ portfolio3 add: portfolio1 ] raise: Error withMessageText: Portfolio xxErrorDescription! !

!testRun: #PortfolioTest #test08 stamp: 'CM 11/5/2020 11:38:28'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'CM 11/5/2020 11:38:28'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:41:47' prior: 50871505!
includes: aPortfolio

	^ (accounts includes: aPortfolio) or: (accounts anySatisfy: [ :account | 
		(account isKindOf: Portfolio) and: (account includes: aPortfolio).
	]).! !

!testRun: #PortfolioTest #test01 stamp: 'CM 11/5/2020 11:41:52'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'CM 11/5/2020 11:41:52'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'CM 11/5/2020 11:41:52'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CM 11/5/2020 11:41:52'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'CM 11/5/2020 11:41:52'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'CM 11/5/2020 11:41:52'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'CM 11/5/2020 11:41:52'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'CM 11/5/2020 11:41:52'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:43:19'!
test09

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio2.
	portfolio3 add: portfolio1.
					
	self should: [ portfolio2 add: portfolio3 ] raise: Error withMessageText: Portfolio xxErrorDescription! !

!testRun: #PortfolioTest #test09 stamp: 'CM 11/5/2020 11:43:28'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'CM 11/5/2020 11:44:28'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 11:45:48' prior: 50871571!
test09

	| portfolio1 portfolio2 portfolio3 portfolio4 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	
	portfolio1 add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio4 add: portfolio2.
					
	self should: [ portfolio2 add: portfolio3 ] raise: Error withMessageText: Portfolio xxErrorDescription! !

!testRun: #PortfolioTest #test09 stamp: 'CM 11/5/2020 11:45:50'!
PASSED!

----SNAPSHOT----(5 November 2020 11:58:23) CuisUniversity-4384.image priorSource: 17176804!

Object subclass: #PortfolioEntry
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioEntry category: 'Portfolio-Ejercicio' stamp: 'CM 11/5/2020 12:01:37'!
Object subclass: #PortfolioEntry
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioEntry class
	instanceVariableNames: ''!

!classDefinition: 'PortfolioEntry class' category: 'Portfolio-Ejercicio' stamp: 'CM 11/5/2020 12:01:37'!
PortfolioEntry class
	instanceVariableNames: ''!
!PortfolioEntry methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 12:01:37'!
add: aReceptiveAccount 
	
	(aReceptiveAccount isKindOf: Portfolio) ifTrue: [
		aReceptiveAccount = self ifTrue: [ self error: self class xxErrorDescription ].
		(aReceptiveAccount includes: self) ifTrue: [ self error: self class xxErrorDescription ].
	].
	
	accounts add: aReceptiveAccount .! !
!PortfolioEntry methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 12:01:37'!
balance

	^ accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ].! !
!PortfolioEntry methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 12:01:37'!
hasRegistered: aTransaction 

	^ accounts anySatisfy: [ :account | account hasRegistered: aTransaction ].! !
!PortfolioEntry methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 12:01:37'!
includes: aPortfolio

	^ (accounts includes: aPortfolio) or: (accounts anySatisfy: [ :account | 
		(account isKindOf: Portfolio) and: (account includes: aPortfolio).
	]).! !
!PortfolioEntry methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 12:01:37' overrides: 16896425!
initialize

	accounts := OrderedCollection new.! !
!PortfolioEntry methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 12:01:37'!
transactions

	^ accounts inject: OrderedCollection new into: [ :allTransactions :account | allTransactions addAll: account transactions ].! !
!PortfolioEntry class methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 12:01:37'!
xxErrorDescription
	
	^ 'No se puede tener ciclos' ! !

PortfolioEntry subclass: #AccountEntry
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountEntry category: 'Portfolio-Ejercicio' stamp: 'CM 11/5/2020 12:02:24'!
PortfolioEntry subclass: #AccountEntry
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #PortfolioEntry
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioEntry category: 'Portfolio-Ejercicio' stamp: 'CM 11/5/2020 12:02:30'!
Object subclass: #PortfolioEntry
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioEntry subclass: #AccountCollectionEntry
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountCollectionEntry category: 'Portfolio-Ejercicio' stamp: 'CM 11/5/2020 12:02:47'!
PortfolioEntry subclass: #AccountCollectionEntry
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccount stamp: 'CM 11/5/2020 12:38:19'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountEntry stamp: 'CM 11/5/2020 12:38:19'!
PortfolioEntry subclass: #AccountEntry
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountCollectionEntry stamp: 'CM 11/5/2020 12:38:20'!
PortfolioEntry subclass: #AccountCollectionEntry
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioEntry stamp: 'CM 11/5/2020 12:38:20'!
Object subclass: #PortfolioEntry
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'CM 11/5/2020 12:38:21'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'CM 11/5/2020 12:38:21'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'CM 11/5/2020 12:38:21'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'CM 11/5/2020 12:38:22'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'CM 11/5/2020 12:38:22'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'CM 11/5/2020 12:38:22'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /home/cmarta/Downloads/parcial/limpio/linux64/Portfolio-Ejercicio.st----!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 12:40:08' prior: 50871876!
test09

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	
	portfolio1 add: portfolio2.
	portfolio3 add: portfolio2.
					
	self should: [ portfolio1 add: portfolio3 ] raise: Error withMessageText: Portfolio xxErrorDescription! !

!testRun: #PortfolioTest #test09 stamp: 'CM 11/5/2020 12:40:11'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'CM 11/5/2020 12:40:11'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/5/2020 12:43:12' prior: 50872094!
add: aReceptiveAccount 
	
	(aReceptiveAccount isKindOf: Portfolio) ifTrue: [
		aReceptiveAccount = self ifTrue: [ self error: self class xxErrorDescription ].
		(aReceptiveAccount includes: self) ifTrue: [ self error: self class xxErrorDescription ].
		accounts do: [ :account | 
			(aReceptiveAccount includes: account) ifTrue: [ self error: self class xxErrorDescription ].
		]
		
	].
	
	accounts add: aReceptiveAccount .! !

!testRun: #PortfolioTest #test01 stamp: 'CM 11/5/2020 12:43:22'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'CM 11/5/2020 12:43:22'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'CM 11/5/2020 12:43:22'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CM 11/5/2020 12:43:22'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'CM 11/5/2020 12:43:22'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'CM 11/5/2020 12:43:22'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'CM 11/5/2020 12:43:22'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'CM 11/5/2020 12:43:22'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'CM 11/5/2020 12:43:22'!
PASSED!

----STARTUP---- (9 November 2020 12:46:59) as /home/cmarta/Downloads/parcial/limpio/linux64/CuisUniversity-4384.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 12:51:52'!
test10

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
					
	self should: [ portfolio1 add: portfolio2 ] raise: Error withMessageText: Portfolio xxErrorDescription! !

!testRun: #PortfolioTest #test01 stamp: 'CM 11/9/2020 12:51:57'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'CM 11/9/2020 12:51:57'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'CM 11/9/2020 12:51:57'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CM 11/9/2020 12:51:57'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'CM 11/9/2020 12:51:57'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'CM 11/9/2020 12:51:57'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'CM 11/9/2020 12:51:57'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'CM 11/9/2020 12:51:57'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'CM 11/9/2020 12:51:57'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'CM 11/9/2020 12:51:57'!
FAILURE!

!testRun: #PortfolioTest #test10 stamp: 'CM 11/9/2020 12:51:57'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 12:53:48' prior: 50871491!
add: aReceptiveAccount 
	
	(aReceptiveAccount isKindOf: Portfolio) ifTrue: [
		aReceptiveAccount = self ifTrue: [ self error: self class xxErrorDescription ].
		(aReceptiveAccount includes: self) ifTrue: [ self error: self class xxErrorDescription ].
	].
	
	(self includes: aReceptiveAccount) ifTrue: [ self error: self class xxErrorDescription ].
	
	accounts add: aReceptiveAccount .! !

!testRun: #PortfolioTest #test01 stamp: 'CM 11/9/2020 12:53:50'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'CM 11/9/2020 12:53:50'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'CM 11/9/2020 12:53:50'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'CM 11/9/2020 12:53:50'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'CM 11/9/2020 12:53:50'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'CM 11/9/2020 12:53:50'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'CM 11/9/2020 12:53:50'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'CM 11/9/2020 12:53:50'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'CM 11/9/2020 12:53:50'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'CM 11/9/2020 12:53:50'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'CM 11/9/2020 12:53:50'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 12:54:49' prior: 50872287!
add: aReceptiveAccount 
	
	(aReceptiveAccount isKindOf: Portfolio) ifTrue: [
		aReceptiveAccount = self ifTrue: [ self error: self class xxErrorDescription ].
		(aReceptiveAccount includes: self) ifTrue: [ self error: self class xxErrorDescription ].
	].
	
	accounts add: aReceptiveAccount .! !

!methodRemoval: PortfolioTest #test10 stamp: 'CM 11/9/2020 12:54:56'!
test10

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
					
	self should: [ portfolio1 add: portfolio2 ] raise: Error withMessageText: Portfolio xxErrorDescription!

!testRun: #PortfolioTest #test01 stamp: 'CM 11/9/2020 12:55:00'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'CM 11/9/2020 12:55:00'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'CM 11/9/2020 12:55:00'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CM 11/9/2020 12:55:00'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'CM 11/9/2020 12:55:00'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'CM 11/9/2020 12:55:00'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'CM 11/9/2020 12:55:00'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'CM 11/9/2020 12:55:00'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'CM 11/9/2020 12:55:00'!
PASSED!

Object subclass: #PortfolioEntry
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioEntry category: 'Portfolio-Ejercicio' stamp: 'CM 11/9/2020 12:55:47'!
Object subclass: #PortfolioEntry
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioEntry methodsFor: 'nil' stamp: 'CM 11/9/2020 12:56:16'!
add: aPortfolio

	self subclassResponsibility .! !
!PortfolioEntry methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 12:56:21'!
balance

	self subclassResponsibility .! !
!PortfolioEntry methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 12:56:33'!
hasRegistered: aTransaction

	self subclassResponsibility .! !
!PortfolioEntry methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 12:56:42'!
transactions

	self subclassResponsibility .! !

PortfolioEntry subclass: #PortfolioAccount
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioAccount category: 'Portfolio-Ejercicio' stamp: 'CM 11/9/2020 12:57:05'!
PortfolioEntry subclass: #PortfolioAccount
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioAccount methodsFor: 'no messages' stamp: 'CM 11/9/2020 12:57:48' overrides: 50872382!
add: aPortfolio
	
	self error: 'No se puede agregar un porfolio a un portfolioAccount'! !
!PortfolioAccount methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 12:58:02' overrides: 50872387!
balance
	
	^ account balance.! !
!PortfolioAccount methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 12:58:12' overrides: 50872396!
transactions
	
	^ account transactions.! !
!PortfolioAccount methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 12:58:31' overrides: 50872391!
hasRegistered: aTransaction
	
	^ account hasRegistered: aTransaction .! !
!PortfolioAccount class methodsFor: 'nil' stamp: 'CM 11/9/2020 13:00:25'!
with: anAccount
	
	^ self new initializeWith: anAccount.! !
!PortfolioAccount methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:00:46'!
initalizeWith: anAccount
	
	account := anAccount.! !

PortfolioEntry subclass: #PortfolioPortfolio
	instanceVariableNames: 'portfolioEntries'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioPortfolio category: 'Portfolio-Ejercicio' stamp: 'CM 11/9/2020 13:01:26'!
PortfolioEntry subclass: #PortfolioPortfolio
	instanceVariableNames: 'portfolioEntries'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioPortfolio methodsFor: 'nil' stamp: 'CM 11/9/2020 13:03:26' overrides: 50872387!
balance

	^ portfolioEntries sum: [ :aPortfolio | aPortfolio balance ] ifEmpty: [ 0 ].! !
!PortfolioPortfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:04:11' overrides: 50872391!
hasRegistered: aTransaction 

	^ portfolioEntries anySatisfy: [ :aPortfolio | aPortfolio hasRegistered: aTransaction ].! !
!PortfolioPortfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:05:25' overrides: 50872396!
transactions

	^ portfolioEntries inject: OrderedCollection new into: [ :allTransactions :account | allTransactions addAll: account transactions ].! !
!PortfolioPortfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:05:38' prior: 50872475 overrides: 50872396!
transactions

	^ portfolioEntries inject: OrderedCollection new into: [ :allTransactions :aPortfolio | allTransactions addAll: aPortfolio transactions ].! !
!PortfolioPortfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:07:06' overrides: 50872382!
add: aPortfolio 
	
	aPortfolio = self ifTrue: [ self error: self class xxErrorDescription ].
	(aPortfolio includes: self) ifTrue: [ self error: self class xxErrorDescription ].
	
	portfolioEntries add: aPortfolio .! !

TestCase subclass: #PortfolioEntryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioEntryTest category: 'Portfolio-Ejercicio' stamp: 'CM 11/9/2020 13:07:33'!
TestCase subclass: #PortfolioEntryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioEntryTest class
	instanceVariableNames: ''!

!classDefinition: 'PortfolioEntryTest class' category: 'Portfolio-Ejercicio' stamp: 'CM 11/9/2020 13:07:33'!
PortfolioEntryTest class
	instanceVariableNames: ''!
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:07:33'!
test01

	| portfolio |
	
	portfolio := Portfolio new.

	self assert: 0 equals: portfolio balance.
! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:07:33'!
test02

	| portfolio account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio new.
	portfolio add: account.
	
	self assert: 100 equals: portfolio balance.
! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:07:33'!
test03

	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	portfolio add: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 50 on: account2.
	portfolio add: account2.
	
	self assert: 150 equals: portfolio balance.
! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:07:33'!
test04

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	
	self deny: (portfolio hasRegistered: deposit).
! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:07:33'!
test05

	| portfolio account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 50 on: account.
	portfolio := Portfolio new add: account.
		
	self assert: 1 equals: portfolio transactions size.
	self assert: (portfolio transactions includes: deposit).! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:07:33'!
test06

	| portfolio |
	
	portfolio := Portfolio new.
		
	self should: [ portfolio add: portfolio ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:07:33'!
test07

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
			
	self should: [ portfolio2 add: portfolio1 ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:07:33'!
test08

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
					
	self should: [ portfolio3 add: portfolio1 ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:07:33'!
test09

	| portfolio1 portfolio2 portfolio3 portfolio4 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	
	portfolio1 add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio4 add: portfolio2.
					
	self should: [ portfolio2 add: portfolio3 ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:11:21' prior: 50872522!
test01

	| portfolio |
	
	portfolio := PortfolioPortfolio new.

	self assert: 0 equals: portfolio balance.
! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:11:47'!
test011

	| portfolio |
	
	portfolio := PortfolioAccount with: ReceptiveAccount new.

	self assert: 0 equals: portfolio balance.
! !

!testRun: #PortfolioEntryTest #test01 stamp: 'CM 11/9/2020 13:11:49'!
ERROR!

!testRun: #PortfolioEntryTest #test01 stamp: 'CM 11/9/2020 13:11:49'!
ERROR!
!PortfolioPortfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:12:11' overrides: 16896425!
initialize

	portfolioEntries := OrderedCollection new.! !

!testRun: #PortfolioEntryTest #test01 stamp: 'CM 11/9/2020 13:12:13'!
PASSED!

!testRun: #PortfolioEntryTest #test011 stamp: 'CM 11/9/2020 13:12:16'!
ERROR!

!testRun: #PortfolioEntryTest #test011 stamp: 'CM 11/9/2020 13:12:16'!
ERROR!
!PortfolioAccount methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:12:31'!
initializeWith: anAccount
	
	account := anAccount.! !

!methodRemoval: PortfolioAccount #initalizeWith: stamp: 'CM 11/9/2020 13:12:31'!
initalizeWith: anAccount
	
	account := anAccount.!

!testRun: #PortfolioEntryTest #test011 stamp: 'CM 11/9/2020 13:12:35'!
PASSED!
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:13:17' prior: 50872528!
test02

	| portfolio account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: 100 equals: portfolio balance.
! !

!testRun: #PortfolioEntryTest #test02 stamp: 'CM 11/9/2020 13:13:19'!
ERROR!

!testRun: #PortfolioEntryTest #test02 stamp: 'CM 11/9/2020 13:13:19'!
ERROR!
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:13:25' prior: 50872665!
test02

	| portfolio account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := PortfolioAccount with: account.
	
	self assert: 100 equals: portfolio balance.
! !

!testRun: #PortfolioEntryTest #test02 stamp: 'CM 11/9/2020 13:13:27'!
PASSED!
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:14:39'!
test022

	| portfolio1 portfolio2 account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio1 := PortfolioAccount with: account.
	portfolio2 := PortfolioPortfolio new.
	portfolio2 add: portfolio1.
	
	self assert: 100 equals: portfolio2 balance.
! !

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 13:14:42'!
ERROR!

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 13:14:42'!
ERROR!
!PortfolioAccount methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:15:40'!
includes: anAccount
	
	^ (anAccount = account) not.! !
!PortfolioPortfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:17:47'!
includes: aPortfolio

	^ (portfolioEntries includes: aPortfolio) or: (portfolioEntries anySatisfy: [ :aPortfolioEntry | 
		aPortfolioEntry includes: aPortfolio.
	]).! !

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 13:17:50'!
ERROR!

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 13:17:50'!
ERROR!
!PortfolioEntry class methodsFor: 'nil' stamp: 'CM 11/9/2020 13:18:17'!
xxErrorDescription
	
	^ 'No se puede tener ciclos' ! !

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 13:18:24'!
ERROR!

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 13:18:24'!
ERROR!
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:19:00' prior: 50872692!
test022

	| portfolio1 portfolio2 account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	
	portfolio1 := PortfolioAccount with: account.
	portfolio2 := PortfolioPortfolio new.
	portfolio2 add: portfolio1.
	
	self assert: 100 equals: portfolio2 balance.
! !
!PortfolioPortfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:19:20' prior: 50872493 overrides: 50872382!
add: aPortfolio 
	"
	aPortfolio = self ifTrue: [ self error: self class xxErrorDescription ].
	(aPortfolio includes: self) ifTrue: [ self error: self class xxErrorDescription ].
	"
	portfolioEntries add: aPortfolio .! !

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 13:19:23'!
PASSED!

!testRun: #PortfolioEntryTest #test02 stamp: 'CM 11/9/2020 13:19:25'!
PASSED!

!testRun: #PortfolioEntryTest #test011 stamp: 'CM 11/9/2020 13:19:27'!
PASSED!

!testRun: #PortfolioEntryTest #test01 stamp: 'CM 11/9/2020 13:19:30'!
PASSED!
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:19:57' prior: 50872737!
test022

	| portfolio1 portfolio2 account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio1 := PortfolioAccount with: account.
	portfolio2 := PortfolioPortfolio new.
	portfolio2 add: portfolio1.
	
	self assert: 100 equals: portfolio2 balance.
! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:24:34' prior: 50872538!
test03

	| portfolio1 portfolio2 portfolio3 account1 |
	
	account1 := ReceptiveAccount new.
	Deposit register: 50 on: account1.
	portfolio1 := PortfolioAccount with: account1.
	
	portfolio2 := PortfolioPortfolio new.
	portfolio2 add: portfolio1.
	
	portfolio3 := PortfolioPortfolio new.
	portfolio3 add: portfolio2.
	
	self assert: 50 equals: portfolio3 balance.
! !

!testRun: #PortfolioEntryTest #test03 stamp: 'CM 11/9/2020 13:24:36'!
PASSED!
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:26:16' prior: 50872551!
test04

	| portfolio account1 account2 deposit |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio := PortfolioAccount with: account1.
	
	deposit := Deposit register: 100 on: account2.
	
	self deny: (portfolio hasRegistered: deposit).
! !

!testRun: #PortfolioEntryTest #test04 stamp: 'CM 11/9/2020 13:26:18'!
PASSED!
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:27:10'!
test044

	| portfolio account1 deposit |
	
	account1 := ReceptiveAccount new.	
	portfolio := PortfolioPortfolio new.
	
	deposit := Deposit register: 100 on: account1.
	
	self deny: (portfolio hasRegistered: deposit).
! !

!testRun: #PortfolioEntryTest #test044 stamp: 'CM 11/9/2020 13:27:16'!
PASSED!
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:27:44' prior: 50872561!
test05

	| portfolio account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 50 on: account.
	portfolio := Portfolio with: account.
		
	self assert: 1 equals: portfolio transactions size.
	self assert: (portfolio transactions includes: deposit).! !

!testRun: #PortfolioEntryTest #test05 stamp: 'CM 11/9/2020 13:27:45'!
ERROR!

!testRun: #PortfolioEntryTest #test05 stamp: 'CM 11/9/2020 13:27:45'!
ERROR!
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:27:50' prior: 50872828!
test05

	| portfolio account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 50 on: account.
	portfolio := PortfolioAccount with: account.
		
	self assert: 1 equals: portfolio transactions size.
	self assert: (portfolio transactions includes: deposit).! !

!testRun: #PortfolioEntryTest #test05 stamp: 'CM 11/9/2020 13:27:52'!
PASSED!
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:28:43'!
test055

	| portfolio1 portfolio2 account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 50 on: account.
	portfolio1 := PortfolioAccount with: account.

	portfolio2 := PortfolioPortfolio new.	
	portfolio2 add: portfolio1 .
	
	self assert: 1 equals: portfolio2 transactions size.
	self assert: (portfolio2 transactions includes: deposit).! !

!testRun: #PortfolioEntryTest #test055 stamp: 'CM 11/9/2020 13:28:45'!
PASSED!
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:29:02' prior: 50872573!
test06

	| portfolio |
	
	portfolio := PortfolioPortfolio new.
		
	self should: [ portfolio add: portfolio ] raise: Error withMessageText: Portfolio xxErrorDescription! !

!testRun: #PortfolioEntryTest #test06 stamp: 'CM 11/9/2020 13:29:03'!
FAILURE!

!testRun: #PortfolioEntryTest #test06 stamp: 'CM 11/9/2020 13:29:03'!
FAILURE!
!PortfolioPortfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:29:51' prior: 50872750 overrides: 50872382!
add: aPortfolio 
	
	aPortfolio = self ifTrue: [ self error: self class xxErrorDescription ].
	"
	(aPortfolio includes: self) ifTrue: [ self error: self class xxErrorDescription ].
	"
	portfolioEntries add: aPortfolio .! !

!testRun: #PortfolioEntryTest #test06 stamp: 'CM 11/9/2020 13:29:56'!
PASSED!
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:30:39'!
test066

	| portfolio |
	
	portfolio := PortfolioAccount with: ReceptiveAccount new.
		
	self should: [ portfolio add: portfolio ] raise: Error withMessageText: Portfolio xxErrorDescription! !

!testRun: #PortfolioEntryTest #test066 stamp: 'CM 11/9/2020 13:30:40'!
FAILURE!

!testRun: #PortfolioEntryTest #test066 stamp: 'CM 11/9/2020 13:30:40'!
FAILURE!
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:30:52' prior: 50872906!
test066

	| portfolio |
	
	portfolio := PortfolioAccount with: ReceptiveAccount new.
		
	self should: [ portfolio add: portfolio ] raise: Error withMessageText: ''! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:31:41' prior: 50872921!
test066

	| portfolio1 portfolio2 |
	
	portfolio1 := PortfolioAccount with: ReceptiveAccount new.
	portfolio2 := PortfolioPortfolio new.
		
	self should: [ portfolio1 add: portfolio2 ] raise: Error withMessageText: 'No se puede agregar un porfolio a un portfolioAccount'! !

!testRun: #PortfolioEntryTest #test066 stamp: 'CM 11/9/2020 13:31:43'!
PASSED!
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:32:34' prior: 50872581!
test07

	| portfolio1 portfolio2 |
	
	portfolio1 := PortfolioPortfolio new.
	portfolio2 := PortfolioPortfolio new.
	
	portfolio1 add: portfolio2.
			
	self should: [ portfolio2 add: portfolio1 ] raise: Error withMessageText: Portfolio xxErrorDescription! !

!testRun: #PortfolioEntryTest #test07 stamp: 'CM 11/9/2020 13:32:35'!
FAILURE!

!testRun: #PortfolioEntryTest #test07 stamp: 'CM 11/9/2020 13:32:35'!
FAILURE!
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:33:12' prior: 50872592!
test08

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := PortfolioPortfolio new.
	portfolio2 := PortfolioPortfolio new.
	portfolio3 := PortfolioPortfolio new.
	
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
					
	self should: [ portfolio3 add: portfolio1 ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:33:27' prior: 50872605!
test09

	| portfolio1 portfolio2 portfolio3 portfolio4 |
	
	portfolio1 := PortfolioPortfolio new.
	portfolio2 := PortfolioPortfolio new.
	portfolio3 := PortfolioPortfolio new.
	portfolio4 := PortfolioPortfolio new.
	
	portfolio1 add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio4 add: portfolio2.
					
	self should: [ portfolio2 add: portfolio3 ] raise: Error withMessageText: Portfolio xxErrorDescription! !

!testRun: #PortfolioEntryTest #test01 stamp: 'CM 11/9/2020 13:33:30'!
PASSED!

!testRun: #PortfolioEntryTest #test011 stamp: 'CM 11/9/2020 13:33:30'!
PASSED!

!testRun: #PortfolioEntryTest #test02 stamp: 'CM 11/9/2020 13:33:30'!
PASSED!

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 13:33:30'!
PASSED!

!testRun: #PortfolioEntryTest #test03 stamp: 'CM 11/9/2020 13:33:30'!
PASSED!

!testRun: #PortfolioEntryTest #test04 stamp: 'CM 11/9/2020 13:33:30'!
PASSED!

!testRun: #PortfolioEntryTest #test044 stamp: 'CM 11/9/2020 13:33:30'!
PASSED!

!testRun: #PortfolioEntryTest #test05 stamp: 'CM 11/9/2020 13:33:30'!
PASSED!

!testRun: #PortfolioEntryTest #test055 stamp: 'CM 11/9/2020 13:33:30'!
PASSED!

!testRun: #PortfolioEntryTest #test06 stamp: 'CM 11/9/2020 13:33:30'!
PASSED!

!testRun: #PortfolioEntryTest #test066 stamp: 'CM 11/9/2020 13:33:30'!
PASSED!

!testRun: #PortfolioEntryTest #test07 stamp: 'CM 11/9/2020 13:33:30'!
FAILURE!

!testRun: #PortfolioEntryTest #test08 stamp: 'CM 11/9/2020 13:33:30'!
FAILURE!

!testRun: #PortfolioEntryTest #test09 stamp: 'CM 11/9/2020 13:33:30'!
FAILURE!
!PortfolioPortfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:34:18' prior: 50872893 overrides: 50872382!
add: aPortfolio 
	
	aPortfolio = self ifTrue: [ self error: self class xxErrorDescription ].
	
	(aPortfolio includes: self) ifTrue: [ self error: self class xxErrorDescription ].
	
	portfolioEntries add: aPortfolio .! !

!testRun: #PortfolioEntryTest #test01 stamp: 'CM 11/9/2020 13:34:41'!
PASSED!

!testRun: #PortfolioEntryTest #test011 stamp: 'CM 11/9/2020 13:34:41'!
PASSED!

!testRun: #PortfolioEntryTest #test02 stamp: 'CM 11/9/2020 13:34:42'!
PASSED!

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 13:34:42'!
ERROR!

!testRun: #PortfolioEntryTest #test03 stamp: 'CM 11/9/2020 13:34:42'!
ERROR!

!testRun: #PortfolioEntryTest #test04 stamp: 'CM 11/9/2020 13:34:42'!
PASSED!

!testRun: #PortfolioEntryTest #test044 stamp: 'CM 11/9/2020 13:34:42'!
PASSED!

!testRun: #PortfolioEntryTest #test05 stamp: 'CM 11/9/2020 13:34:42'!
PASSED!

!testRun: #PortfolioEntryTest #test055 stamp: 'CM 11/9/2020 13:34:42'!
ERROR!

!testRun: #PortfolioEntryTest #test06 stamp: 'CM 11/9/2020 13:34:42'!
PASSED!

!testRun: #PortfolioEntryTest #test066 stamp: 'CM 11/9/2020 13:34:42'!
PASSED!

!testRun: #PortfolioEntryTest #test07 stamp: 'CM 11/9/2020 13:34:42'!
PASSED!

!testRun: #PortfolioEntryTest #test08 stamp: 'CM 11/9/2020 13:34:42'!
PASSED!

!testRun: #PortfolioEntryTest #test09 stamp: 'CM 11/9/2020 13:34:42'!
PASSED!

anAccount = account!
!PortfolioAccount methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:36:48' prior: 50872709!
includes: anAccount
	
	^ anAccount = account.! !

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 13:36:49'!
PASSED!

!testRun: #PortfolioEntryTest #test01 stamp: 'CM 11/9/2020 13:36:51'!
PASSED!

!testRun: #PortfolioEntryTest #test011 stamp: 'CM 11/9/2020 13:36:51'!
PASSED!

!testRun: #PortfolioEntryTest #test02 stamp: 'CM 11/9/2020 13:36:51'!
PASSED!

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 13:36:51'!
PASSED!

!testRun: #PortfolioEntryTest #test03 stamp: 'CM 11/9/2020 13:36:51'!
PASSED!

!testRun: #PortfolioEntryTest #test04 stamp: 'CM 11/9/2020 13:36:51'!
PASSED!

!testRun: #PortfolioEntryTest #test044 stamp: 'CM 11/9/2020 13:36:51'!
PASSED!

!testRun: #PortfolioEntryTest #test05 stamp: 'CM 11/9/2020 13:36:51'!
PASSED!

!testRun: #PortfolioEntryTest #test055 stamp: 'CM 11/9/2020 13:36:51'!
PASSED!

!testRun: #PortfolioEntryTest #test06 stamp: 'CM 11/9/2020 13:36:51'!
PASSED!

!testRun: #PortfolioEntryTest #test066 stamp: 'CM 11/9/2020 13:36:51'!
PASSED!

!testRun: #PortfolioEntryTest #test07 stamp: 'CM 11/9/2020 13:36:51'!
PASSED!

!testRun: #PortfolioEntryTest #test08 stamp: 'CM 11/9/2020 13:36:51'!
PASSED!

!testRun: #PortfolioEntryTest #test09 stamp: 'CM 11/9/2020 13:36:51'!
PASSED!
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:42:32'!
test10

	| portfolio1 portfolio2 portfolio3 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioPortfolio new.
	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	
	portfolio1 add: portfolio2.
				
	self should: [ portfolio1 add: portfolio3 ] raise: Error withMessageText: Portfolio xxErrorDescription! !

!testRun: #PortfolioEntryTest #test10 stamp: 'CM 11/9/2020 13:42:34'!
FAILURE!

!testRun: #PortfolioEntryTest #test10 stamp: 'CM 11/9/2020 13:42:34'!
FAILURE!
!PortfolioPortfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:43:07' prior: 50873028 overrides: 50872382!
add: aPortfolio 
	
	aPortfolio = self ifTrue: [ self error: self class xxErrorDescription ].
	
	(aPortfolio includes: self) ifTrue: [ self error: self class xxErrorDescription ].
	
	(self includes: aPortfolio) ifTrue: [ self error: self class xxErrorDescription ].
	
	portfolioEntries add: aPortfolio .! !

!testRun: #PortfolioEntryTest #test01 stamp: 'CM 11/9/2020 13:43:12'!
PASSED!

!testRun: #PortfolioEntryTest #test011 stamp: 'CM 11/9/2020 13:43:12'!
PASSED!

!testRun: #PortfolioEntryTest #test02 stamp: 'CM 11/9/2020 13:43:12'!
PASSED!

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 13:43:12'!
PASSED!

!testRun: #PortfolioEntryTest #test03 stamp: 'CM 11/9/2020 13:43:12'!
PASSED!

!testRun: #PortfolioEntryTest #test04 stamp: 'CM 11/9/2020 13:43:12'!
PASSED!

!testRun: #PortfolioEntryTest #test044 stamp: 'CM 11/9/2020 13:43:12'!
PASSED!

!testRun: #PortfolioEntryTest #test05 stamp: 'CM 11/9/2020 13:43:12'!
PASSED!

!testRun: #PortfolioEntryTest #test055 stamp: 'CM 11/9/2020 13:43:12'!
PASSED!

!testRun: #PortfolioEntryTest #test06 stamp: 'CM 11/9/2020 13:43:12'!
PASSED!

!testRun: #PortfolioEntryTest #test066 stamp: 'CM 11/9/2020 13:43:12'!
PASSED!

!testRun: #PortfolioEntryTest #test07 stamp: 'CM 11/9/2020 13:43:12'!
PASSED!

!testRun: #PortfolioEntryTest #test08 stamp: 'CM 11/9/2020 13:43:12'!
PASSED!

!testRun: #PortfolioEntryTest #test09 stamp: 'CM 11/9/2020 13:43:12'!
PASSED!

!testRun: #PortfolioEntryTest #test10 stamp: 'CM 11/9/2020 13:43:12'!
FAILURE!

!testRun: #PortfolioEntryTest #test10 stamp: 'CM 11/9/2020 13:43:12'!
FAILURE!

portfolioEntries includes: aPortfolio!

portfolioEntries anySatisfy:  [ :aPortfolioEntry | 
		aPortfolioEntry includes: aPortfolio.
	]!
!PortfolioPortfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:45:36' prior: 50872714!
includes: aPortfolio

	^ (portfolioEntries includes: aPortfolio) or: (portfolioEntries anySatisfy: [ :aPortfolioEntry | 
		aPortfolioEntry includes: aPortfolio.
	]).! !
!PortfolioAccount methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:46:54' prior: 50873074!
includes: anAccount
	
	^ anAccount = self.! !

!testRun: #PortfolioEntryTest #test01 stamp: 'CM 11/9/2020 13:46:59'!
PASSED!

!testRun: #PortfolioEntryTest #test011 stamp: 'CM 11/9/2020 13:46:59'!
PASSED!

!testRun: #PortfolioEntryTest #test02 stamp: 'CM 11/9/2020 13:46:59'!
PASSED!

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 13:46:59'!
PASSED!

!testRun: #PortfolioEntryTest #test03 stamp: 'CM 11/9/2020 13:46:59'!
PASSED!

!testRun: #PortfolioEntryTest #test04 stamp: 'CM 11/9/2020 13:46:59'!
PASSED!

!testRun: #PortfolioEntryTest #test044 stamp: 'CM 11/9/2020 13:46:59'!
PASSED!

!testRun: #PortfolioEntryTest #test05 stamp: 'CM 11/9/2020 13:46:59'!
PASSED!

!testRun: #PortfolioEntryTest #test055 stamp: 'CM 11/9/2020 13:46:59'!
PASSED!

!testRun: #PortfolioEntryTest #test06 stamp: 'CM 11/9/2020 13:46:59'!
PASSED!

!testRun: #PortfolioEntryTest #test066 stamp: 'CM 11/9/2020 13:46:59'!
PASSED!

!testRun: #PortfolioEntryTest #test07 stamp: 'CM 11/9/2020 13:46:59'!
PASSED!

!testRun: #PortfolioEntryTest #test08 stamp: 'CM 11/9/2020 13:46:59'!
PASSED!

!testRun: #PortfolioEntryTest #test09 stamp: 'CM 11/9/2020 13:46:59'!
PASSED!

!testRun: #PortfolioEntryTest #test10 stamp: 'CM 11/9/2020 13:46:59'!
FAILURE!

!testRun: #PortfolioEntryTest #test10 stamp: 'CM 11/9/2020 13:46:59'!
FAILURE!
!PortfolioAccount methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:47:54' prior: 50873203!
includes: anAccount
	
	^ anAccount = account.! !
!PortfolioAccount methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:50:38' prior: 50873248!
includes: anAccount
	
	^ anAccount zaraza: account.! !
!PortfolioAccount methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:50:57'!
zaraza: anAccount
	
	^ anAccount = account.! !
!PortfolioPortfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:51:09'!
zaraza: anAccount

	^ false! !

!testRun: #PortfolioEntryTest #test01 stamp: 'CM 11/9/2020 13:51:11'!
PASSED!

!testRun: #PortfolioEntryTest #test011 stamp: 'CM 11/9/2020 13:51:11'!
PASSED!

!testRun: #PortfolioEntryTest #test02 stamp: 'CM 11/9/2020 13:51:11'!
PASSED!

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 13:51:11'!
PASSED!

!testRun: #PortfolioEntryTest #test03 stamp: 'CM 11/9/2020 13:51:11'!
PASSED!

!testRun: #PortfolioEntryTest #test04 stamp: 'CM 11/9/2020 13:51:11'!
PASSED!

!testRun: #PortfolioEntryTest #test044 stamp: 'CM 11/9/2020 13:51:11'!
PASSED!

!testRun: #PortfolioEntryTest #test05 stamp: 'CM 11/9/2020 13:51:11'!
PASSED!

!testRun: #PortfolioEntryTest #test055 stamp: 'CM 11/9/2020 13:51:11'!
PASSED!

!testRun: #PortfolioEntryTest #test06 stamp: 'CM 11/9/2020 13:51:11'!
PASSED!

!testRun: #PortfolioEntryTest #test066 stamp: 'CM 11/9/2020 13:51:11'!
PASSED!

!testRun: #PortfolioEntryTest #test07 stamp: 'CM 11/9/2020 13:51:11'!
PASSED!

!testRun: #PortfolioEntryTest #test08 stamp: 'CM 11/9/2020 13:51:11'!
PASSED!

!testRun: #PortfolioEntryTest #test09 stamp: 'CM 11/9/2020 13:51:11'!
PASSED!

!testRun: #PortfolioEntryTest #test10 stamp: 'CM 11/9/2020 13:51:11'!
PASSED!
!PortfolioPortfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:53:02' prior: 50873137 overrides: 50872382!
add: aPortfolio 
	
	(aPortfolio includes: self) ifTrue: [ self error: self class xxErrorDescription ].
	
	(self includes: aPortfolio) ifTrue: [ self error: self class xxErrorDescription ].
	
	portfolioEntries add: aPortfolio .! !

!testRun: #PortfolioEntryTest #test01 stamp: 'CM 11/9/2020 13:53:03'!
PASSED!

!testRun: #PortfolioEntryTest #test011 stamp: 'CM 11/9/2020 13:53:03'!
PASSED!

!testRun: #PortfolioEntryTest #test02 stamp: 'CM 11/9/2020 13:53:03'!
PASSED!

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 13:53:03'!
PASSED!

!testRun: #PortfolioEntryTest #test03 stamp: 'CM 11/9/2020 13:53:03'!
PASSED!

!testRun: #PortfolioEntryTest #test04 stamp: 'CM 11/9/2020 13:53:03'!
PASSED!

!testRun: #PortfolioEntryTest #test044 stamp: 'CM 11/9/2020 13:53:03'!
PASSED!

!testRun: #PortfolioEntryTest #test05 stamp: 'CM 11/9/2020 13:53:03'!
PASSED!

!testRun: #PortfolioEntryTest #test055 stamp: 'CM 11/9/2020 13:53:03'!
PASSED!

!testRun: #PortfolioEntryTest #test06 stamp: 'CM 11/9/2020 13:53:03'!
FAILURE!

!testRun: #PortfolioEntryTest #test066 stamp: 'CM 11/9/2020 13:53:03'!
PASSED!

!testRun: #PortfolioEntryTest #test07 stamp: 'CM 11/9/2020 13:53:03'!
PASSED!

!testRun: #PortfolioEntryTest #test08 stamp: 'CM 11/9/2020 13:53:03'!
PASSED!

!testRun: #PortfolioEntryTest #test09 stamp: 'CM 11/9/2020 13:53:03'!
PASSED!

!testRun: #PortfolioEntryTest #test10 stamp: 'CM 11/9/2020 13:53:03'!
PASSED!

!testRun: #PortfolioEntryTest #test06 stamp: 'CM 11/9/2020 13:53:03'!
FAILURE!
!PortfolioPortfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 13:53:34' prior: 50873194!
includes: aPortfolio
	
	^ (aPortfolio = self) or: (portfolioEntries includes: aPortfolio) or: (portfolioEntries anySatisfy: [ :aPortfolioEntry | 
		aPortfolioEntry includes: aPortfolio.
	]).! !

!testRun: #PortfolioEntryTest #test01 stamp: 'CM 11/9/2020 13:53:36'!
PASSED!

!testRun: #PortfolioEntryTest #test011 stamp: 'CM 11/9/2020 13:53:36'!
PASSED!

!testRun: #PortfolioEntryTest #test02 stamp: 'CM 11/9/2020 13:53:36'!
PASSED!

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 13:53:36'!
PASSED!

!testRun: #PortfolioEntryTest #test03 stamp: 'CM 11/9/2020 13:53:36'!
PASSED!

!testRun: #PortfolioEntryTest #test04 stamp: 'CM 11/9/2020 13:53:36'!
PASSED!

!testRun: #PortfolioEntryTest #test044 stamp: 'CM 11/9/2020 13:53:36'!
PASSED!

!testRun: #PortfolioEntryTest #test05 stamp: 'CM 11/9/2020 13:53:36'!
PASSED!

!testRun: #PortfolioEntryTest #test055 stamp: 'CM 11/9/2020 13:53:36'!
PASSED!

!testRun: #PortfolioEntryTest #test06 stamp: 'CM 11/9/2020 13:53:36'!
PASSED!

!testRun: #PortfolioEntryTest #test066 stamp: 'CM 11/9/2020 13:53:36'!
PASSED!

!testRun: #PortfolioEntryTest #test07 stamp: 'CM 11/9/2020 13:53:36'!
PASSED!

!testRun: #PortfolioEntryTest #test08 stamp: 'CM 11/9/2020 13:53:36'!
PASSED!

!testRun: #PortfolioEntryTest #test09 stamp: 'CM 11/9/2020 13:53:36'!
PASSED!

!testRun: #PortfolioEntryTest #test10 stamp: 'CM 11/9/2020 13:53:36'!
PASSED!

!testRun: #PortfolioEntryTest #test01 stamp: 'CM 11/9/2020 14:16:51'!
PASSED!

!testRun: #PortfolioEntryTest #test011 stamp: 'CM 11/9/2020 14:16:51'!
PASSED!

!testRun: #PortfolioEntryTest #test02 stamp: 'CM 11/9/2020 14:16:51'!
PASSED!

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 14:16:51'!
PASSED!

!testRun: #PortfolioEntryTest #test03 stamp: 'CM 11/9/2020 14:16:51'!
PASSED!

!testRun: #PortfolioEntryTest #test04 stamp: 'CM 11/9/2020 14:16:51'!
PASSED!

!testRun: #PortfolioEntryTest #test044 stamp: 'CM 11/9/2020 14:16:51'!
PASSED!

!testRun: #PortfolioEntryTest #test05 stamp: 'CM 11/9/2020 14:16:51'!
PASSED!

!testRun: #PortfolioEntryTest #test055 stamp: 'CM 11/9/2020 14:16:51'!
PASSED!

!testRun: #PortfolioEntryTest #test06 stamp: 'CM 11/9/2020 14:16:51'!
PASSED!

!testRun: #PortfolioEntryTest #test066 stamp: 'CM 11/9/2020 14:16:51'!
PASSED!

!testRun: #PortfolioEntryTest #test07 stamp: 'CM 11/9/2020 14:16:51'!
PASSED!

!testRun: #PortfolioEntryTest #test08 stamp: 'CM 11/9/2020 14:16:51'!
PASSED!

!testRun: #PortfolioEntryTest #test09 stamp: 'CM 11/9/2020 14:16:51'!
PASSED!

!testRun: #PortfolioEntryTest #test10 stamp: 'CM 11/9/2020 14:16:51'!
PASSED!
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 14:19:27'!
test11

	| portfolio1 portfolio2 portfolio3 portfolio4 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioPortfolio new.
	portfolio4 := PortfolioPortfolio new.
	
	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	portfolio4 add: portfolio2.
				
	self should: [ portfolio1 add: portfolio3 ] raise: Error withMessageText: Portfolio xxErrorDescription! !

!testRun: #PortfolioEntryTest #test11 stamp: 'CM 11/9/2020 14:19:31'!
FAILURE!

!testRun: #PortfolioEntryTest #test11 stamp: 'CM 11/9/2020 14:19:31'!
FAILURE!
!PortfolioPortfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 14:20:46' prior: 50873305 overrides: 50872382!
add: aPortfolio 
	
	(aPortfolio includes: self) ifTrue: [ self error: self class xxErrorDescription ].
	
	(self includes: aPortfolio) ifTrue: [ self error: self class xxErrorDescription ].
	
	portfolioEntries add: aPortfolio .! !
!PortfolioPortfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 14:21:00'!
hasCommonAccountsWith: aPortfolio

	^ self includes: aPortfolio! !
!PortfolioPortfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 14:21:00' prior: 50873462 overrides: 50872382!
add: aPortfolio 
	
	(aPortfolio includes: self) ifTrue: [ self error: self class xxErrorDescription ].
	
	(self hasCommonAccountsWith: aPortfolio) ifTrue: [ self error: self class xxErrorDescription ].
	
	portfolioEntries add: aPortfolio .! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 14:24:17' prior: 50873440!
test11

	| portfolio1 portfolio2 portfolio3 portfolio4 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioPortfolio new.
	portfolio4 := PortfolioPortfolio new.
	
	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	portfolio4 add: portfolio2.
	portfolio1 add: portfolio3.
				
	self should: [ portfolio1 add: portfolio4 ] raise: Error withMessageText: Portfolio xxErrorDescription! !

!testRun: #PortfolioEntryTest #test11 stamp: 'CM 11/9/2020 14:24:19'!
FAILURE!

!testRun: #PortfolioEntryTest #test11 stamp: 'CM 11/9/2020 14:24:19'!
FAILURE!
!PortfolioPortfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 14:26:47' prior: 50873472!
hasCommonAccountsWith: aPortfolio

	^ (self includes: aPortfolio) or: (portfolioEntries anySatisfy: [ :pe | pe hasCommonAccountsWith: aPortfolio])! !

!testRun: #PortfolioEntryTest #test01 stamp: 'CM 11/9/2020 14:26:49'!
PASSED!

!testRun: #PortfolioEntryTest #test011 stamp: 'CM 11/9/2020 14:26:49'!
PASSED!

!testRun: #PortfolioEntryTest #test02 stamp: 'CM 11/9/2020 14:26:49'!
PASSED!

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 14:26:49'!
PASSED!

!testRun: #PortfolioEntryTest #test03 stamp: 'CM 11/9/2020 14:26:49'!
PASSED!

!testRun: #PortfolioEntryTest #test04 stamp: 'CM 11/9/2020 14:26:49'!
PASSED!

!testRun: #PortfolioEntryTest #test044 stamp: 'CM 11/9/2020 14:26:49'!
PASSED!

!testRun: #PortfolioEntryTest #test05 stamp: 'CM 11/9/2020 14:26:49'!
PASSED!

!testRun: #PortfolioEntryTest #test055 stamp: 'CM 11/9/2020 14:26:49'!
PASSED!

!testRun: #PortfolioEntryTest #test06 stamp: 'CM 11/9/2020 14:26:49'!
PASSED!

!testRun: #PortfolioEntryTest #test066 stamp: 'CM 11/9/2020 14:26:49'!
PASSED!

!testRun: #PortfolioEntryTest #test07 stamp: 'CM 11/9/2020 14:26:49'!
PASSED!

!testRun: #PortfolioEntryTest #test08 stamp: 'CM 11/9/2020 14:26:49'!
PASSED!

!testRun: #PortfolioEntryTest #test09 stamp: 'CM 11/9/2020 14:26:49'!
PASSED!

!testRun: #PortfolioEntryTest #test10 stamp: 'CM 11/9/2020 14:26:49'!
FAILURE!

!testRun: #PortfolioEntryTest #test11 stamp: 'CM 11/9/2020 14:26:49'!
FAILURE!

!testRun: #PortfolioEntryTest #test10 stamp: 'CM 11/9/2020 14:27:07'!
FAILURE!

!testRun: #PortfolioEntryTest #test10 stamp: 'CM 11/9/2020 14:27:07'!
FAILURE!
!PortfolioAccount methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 14:27:52'!
hasCommonAccountsWith: aPortfolio

	^ aPortfolio zaraza: account.


	
	! !

!testRun: #PortfolioEntryTest #test01 stamp: 'CM 11/9/2020 14:27:54'!
PASSED!

!testRun: #PortfolioEntryTest #test011 stamp: 'CM 11/9/2020 14:27:54'!
PASSED!

!testRun: #PortfolioEntryTest #test02 stamp: 'CM 11/9/2020 14:27:54'!
PASSED!

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 14:27:54'!
PASSED!

!testRun: #PortfolioEntryTest #test03 stamp: 'CM 11/9/2020 14:27:54'!
PASSED!

!testRun: #PortfolioEntryTest #test04 stamp: 'CM 11/9/2020 14:27:54'!
PASSED!

!testRun: #PortfolioEntryTest #test044 stamp: 'CM 11/9/2020 14:27:54'!
PASSED!

!testRun: #PortfolioEntryTest #test05 stamp: 'CM 11/9/2020 14:27:54'!
PASSED!

!testRun: #PortfolioEntryTest #test055 stamp: 'CM 11/9/2020 14:27:54'!
PASSED!

!testRun: #PortfolioEntryTest #test06 stamp: 'CM 11/9/2020 14:27:54'!
PASSED!

!testRun: #PortfolioEntryTest #test066 stamp: 'CM 11/9/2020 14:27:54'!
PASSED!

!testRun: #PortfolioEntryTest #test07 stamp: 'CM 11/9/2020 14:27:54'!
PASSED!

!testRun: #PortfolioEntryTest #test08 stamp: 'CM 11/9/2020 14:27:54'!
PASSED!

!testRun: #PortfolioEntryTest #test09 stamp: 'CM 11/9/2020 14:27:54'!
PASSED!

!testRun: #PortfolioEntryTest #test10 stamp: 'CM 11/9/2020 14:27:54'!
PASSED!

!testRun: #PortfolioEntryTest #test11 stamp: 'CM 11/9/2020 14:27:54'!
FAILURE!

!testRun: #PortfolioEntryTest #test11 stamp: 'CM 11/9/2020 14:27:54'!
FAILURE!
!PortfolioPortfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 14:31:58' prior: 50873512!
hasCommonAccountsWith: aPortfolio

	^ (self includes: aPortfolio) or: (portfolioEntries anySatisfy: [ :pe | aPortfolio hasCommonAccountsWith: pe])! !

!testRun: #PortfolioEntryTest #test01 stamp: 'CM 11/9/2020 14:32:01'!
PASSED!

!testRun: #PortfolioEntryTest #test011 stamp: 'CM 11/9/2020 14:32:01'!
PASSED!

!testRun: #PortfolioEntryTest #test02 stamp: 'CM 11/9/2020 14:32:01'!
PASSED!

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 14:32:01'!
PASSED!

!testRun: #PortfolioEntryTest #test03 stamp: 'CM 11/9/2020 14:32:01'!
PASSED!

!testRun: #PortfolioEntryTest #test04 stamp: 'CM 11/9/2020 14:32:01'!
PASSED!

!testRun: #PortfolioEntryTest #test044 stamp: 'CM 11/9/2020 14:32:01'!
PASSED!

!testRun: #PortfolioEntryTest #test05 stamp: 'CM 11/9/2020 14:32:01'!
PASSED!

!testRun: #PortfolioEntryTest #test055 stamp: 'CM 11/9/2020 14:32:01'!
PASSED!

!testRun: #PortfolioEntryTest #test06 stamp: 'CM 11/9/2020 14:32:01'!
PASSED!

!testRun: #PortfolioEntryTest #test066 stamp: 'CM 11/9/2020 14:32:01'!
PASSED!

!testRun: #PortfolioEntryTest #test07 stamp: 'CM 11/9/2020 14:32:01'!
PASSED!

!testRun: #PortfolioEntryTest #test08 stamp: 'CM 11/9/2020 14:32:01'!
PASSED!

!testRun: #PortfolioEntryTest #test09 stamp: 'CM 11/9/2020 14:32:01'!
PASSED!

!testRun: #PortfolioEntryTest #test10 stamp: 'CM 11/9/2020 14:32:01'!
PASSED!

!testRun: #PortfolioEntryTest #test11 stamp: 'CM 11/9/2020 14:32:01'!
PASSED!
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 14:34:46'!
test12

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioPortfolio new.
	portfolio4 := PortfolioPortfolio new.
	portfolio5 := PortfolioPortfolio new.	

	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	portfolio4 add: portfolio5.
	portfolio5 add: portfolio2.
	portfolio1 add: portfolio3.
				
	self should: [ portfolio1 add: portfolio4 ] raise: Error withMessageText: Portfolio xxErrorDescription! !

!testRun: #PortfolioEntryTest #test12 stamp: 'CM 11/9/2020 14:34:48'!
PASSED!

!testRun: #PortfolioEntryTest #test12 stamp: 'CM 11/9/2020 14:37:04'!
PASSED!
!PortfolioPortfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 14:39:37' prior: 50873263!
zaraza: anAccount

	^ portfolioEntries anySatisfy: [ :portfolio | portfolio zaraza: anAccount ]! !

!testRun: #PortfolioEntryTest #test01 stamp: 'CM 11/9/2020 14:39:39'!
PASSED!

!testRun: #PortfolioEntryTest #test011 stamp: 'CM 11/9/2020 14:39:39'!
PASSED!

!testRun: #PortfolioEntryTest #test02 stamp: 'CM 11/9/2020 14:39:39'!
PASSED!

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 14:39:39'!
PASSED!

!testRun: #PortfolioEntryTest #test03 stamp: 'CM 11/9/2020 14:39:39'!
PASSED!

!testRun: #PortfolioEntryTest #test04 stamp: 'CM 11/9/2020 14:39:39'!
PASSED!

!testRun: #PortfolioEntryTest #test044 stamp: 'CM 11/9/2020 14:39:39'!
PASSED!

!testRun: #PortfolioEntryTest #test05 stamp: 'CM 11/9/2020 14:39:39'!
PASSED!

!testRun: #PortfolioEntryTest #test055 stamp: 'CM 11/9/2020 14:39:39'!
PASSED!

!testRun: #PortfolioEntryTest #test06 stamp: 'CM 11/9/2020 14:39:39'!
PASSED!

!testRun: #PortfolioEntryTest #test066 stamp: 'CM 11/9/2020 14:39:39'!
PASSED!

!testRun: #PortfolioEntryTest #test07 stamp: 'CM 11/9/2020 14:39:39'!
PASSED!

!testRun: #PortfolioEntryTest #test08 stamp: 'CM 11/9/2020 14:39:39'!
PASSED!

!testRun: #PortfolioEntryTest #test09 stamp: 'CM 11/9/2020 14:39:39'!
PASSED!

!testRun: #PortfolioEntryTest #test10 stamp: 'CM 11/9/2020 14:39:39'!
PASSED!

!testRun: #PortfolioEntryTest #test11 stamp: 'CM 11/9/2020 14:39:39'!
PASSED!

!testRun: #PortfolioEntryTest #test12 stamp: 'CM 11/9/2020 14:39:39'!
PASSED!

!testRun: #PortfolioEntryTest #test12 stamp: 'CM 11/9/2020 14:39:42'!
PASSED!
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 14:41:35'!
test13

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioPortfolio new.
	portfolio2 := PortfolioPortfolio new.
	portfolio3 := PortfolioPortfolio new.	

	portfolio4 := PortfolioAccount with: account.
	portfolio5 := PortfolioAccount with: account.
	
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
	
				
	self should: [ portfolio3 add: portfolio5 ] raise: Error withMessageText: Portfolio xxErrorDescription! !

!testRun: #PortfolioEntryTest #test13 stamp: 'CM 11/9/2020 14:41:51'!
FAILURE!

!testRun: #PortfolioEntryTest #test13 stamp: 'CM 11/9/2020 14:41:51'!
FAILURE!

Object subclass: #PortfolioEntry
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioEntry category: 'Portfolio-Ejercicio' stamp: 'CM 11/9/2020 14:43:32'!
Object subclass: #PortfolioEntry
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioPortfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 14:43:56' prior: 50872641 overrides: 16896425!
initialize

	super.
	portfolioEntries := OrderedCollection new.
	! !
!PortfolioEntry methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 14:44:20' overrides: 16896425!
initialize

	parents := OrderedCollection new.! !
!PortfolioPortfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 14:44:55' prior: 50873478 overrides: 50872382!
add: aPortfolio 
	
	(aPortfolio includes: self) ifTrue: [ self error: self class xxErrorDescription ].
	
	(self hasCommonAccountsWith: aPortfolio) ifTrue: [ self error: self class xxErrorDescription ].
	
	portfolioEntries add: aPortfolio .
	aPortfolio addParent: self.! !
!PortfolioEntry methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 14:45:20'!
addParent: aPortfolio

	parents add: aPortfolio .! !
!PortfolioPortfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 14:47:43' prior: 50873786 overrides: 50872382!
add: aPortfolio 
	
	(aPortfolio includes: self) ifTrue: [ self error: self class xxErrorDescription ].
	
	(aPortfolio sameTreeAs: self) ifTrue: [ self error: self class xxErrorDescription ].
	
	(self hasCommonAccountsWith: aPortfolio) ifTrue: [ self error: self class xxErrorDescription ].
	
	portfolioEntries add: aPortfolio .
	aPortfolio addParent: self.! !
!PortfolioPortfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 14:49:20'!
sameTreeAs: aPortfolio 
	
	^ (self includes: aPortfolio) or: (parents anySatisfy: [ :aParentPortfolio | aParentPortfolio sameTreeAs: aPortfolio ])! !
!PortfolioEntry methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 14:49:37'!
sameTreeAs: aPortfolio 
	
	^ (self includes: aPortfolio) or: (parents anySatisfy: [ :aParentPortfolio | aParentPortfolio sameTreeAs: aPortfolio ])! !

!methodRemoval: PortfolioPortfolio #sameTreeAs: stamp: 'CM 11/9/2020 14:49:44'!
sameTreeAs: aPortfolio 
	
	^ (self includes: aPortfolio) or: (parents anySatisfy: [ :aParentPortfolio | aParentPortfolio sameTreeAs: aPortfolio ])!

!testRun: #PortfolioEntryTest #test01 stamp: 'CM 11/9/2020 14:49:50'!
PASSED!

!testRun: #PortfolioEntryTest #test011 stamp: 'CM 11/9/2020 14:49:50'!
PASSED!

!testRun: #PortfolioEntryTest #test02 stamp: 'CM 11/9/2020 14:49:50'!
PASSED!

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 14:49:50'!
PASSED!

!testRun: #PortfolioEntryTest #test03 stamp: 'CM 11/9/2020 14:49:50'!
ERROR!

!testRun: #PortfolioEntryTest #test04 stamp: 'CM 11/9/2020 14:49:50'!
PASSED!

!testRun: #PortfolioEntryTest #test044 stamp: 'CM 11/9/2020 14:49:50'!
PASSED!

!testRun: #PortfolioEntryTest #test05 stamp: 'CM 11/9/2020 14:49:50'!
PASSED!

!testRun: #PortfolioEntryTest #test055 stamp: 'CM 11/9/2020 14:49:50'!
PASSED!

!testRun: #PortfolioEntryTest #test06 stamp: 'CM 11/9/2020 14:49:50'!
PASSED!

!testRun: #PortfolioEntryTest #test066 stamp: 'CM 11/9/2020 14:49:50'!
PASSED!

!testRun: #PortfolioEntryTest #test07 stamp: 'CM 11/9/2020 14:49:50'!
ERROR!

!testRun: #PortfolioEntryTest #test08 stamp: 'CM 11/9/2020 14:49:50'!
ERROR!

!testRun: #PortfolioEntryTest #test09 stamp: 'CM 11/9/2020 14:49:50'!
ERROR!

!testRun: #PortfolioEntryTest #test10 stamp: 'CM 11/9/2020 14:49:50'!
PASSED!

!testRun: #PortfolioEntryTest #test11 stamp: 'CM 11/9/2020 14:49:50'!
PASSED!

!testRun: #PortfolioEntryTest #test12 stamp: 'CM 11/9/2020 14:49:50'!
ERROR!

!testRun: #PortfolioEntryTest #test13 stamp: 'CM 11/9/2020 14:49:50'!
ERROR!

!testRun: #PortfolioEntryTest #test03 stamp: 'CM 11/9/2020 14:50:02'!
ERROR!

!testRun: #PortfolioEntryTest #test03 stamp: 'CM 11/9/2020 14:50:32'!
ERROR!

!testRun: #PortfolioEntryTest #test03 stamp: 'CM 11/9/2020 14:50:32'!
ERROR!

!testRun: #PortfolioEntryTest #test03 stamp: 'CM 11/9/2020 14:50:46'!
ERROR!
!PortfolioPortfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 14:51:36' prior: 50873774 overrides: 50873780!
initialize

	super initialize.
	portfolioEntries := OrderedCollection new.
	! !
!PortfolioAccount methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 14:51:40' prior: 50872653!
initializeWith: anAccount
	
	super initialize.
	account := anAccount.! !

!testRun: #PortfolioEntryTest #test01 stamp: 'CM 11/9/2020 14:51:42'!
PASSED!

!testRun: #PortfolioEntryTest #test011 stamp: 'CM 11/9/2020 14:51:42'!
PASSED!

!testRun: #PortfolioEntryTest #test02 stamp: 'CM 11/9/2020 14:51:42'!
PASSED!

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 14:51:42'!
PASSED!

!testRun: #PortfolioEntryTest #test03 stamp: 'CM 11/9/2020 14:51:42'!
PASSED!

!testRun: #PortfolioEntryTest #test04 stamp: 'CM 11/9/2020 14:51:42'!
PASSED!

!testRun: #PortfolioEntryTest #test044 stamp: 'CM 11/9/2020 14:51:42'!
PASSED!

!testRun: #PortfolioEntryTest #test05 stamp: 'CM 11/9/2020 14:51:42'!
PASSED!

!testRun: #PortfolioEntryTest #test055 stamp: 'CM 11/9/2020 14:51:42'!
PASSED!

!testRun: #PortfolioEntryTest #test06 stamp: 'CM 11/9/2020 14:51:42'!
PASSED!

!testRun: #PortfolioEntryTest #test066 stamp: 'CM 11/9/2020 14:51:42'!
PASSED!

!testRun: #PortfolioEntryTest #test07 stamp: 'CM 11/9/2020 14:51:42'!
PASSED!

!testRun: #PortfolioEntryTest #test08 stamp: 'CM 11/9/2020 14:51:42'!
PASSED!

!testRun: #PortfolioEntryTest #test09 stamp: 'CM 11/9/2020 14:51:42'!
PASSED!

!testRun: #PortfolioEntryTest #test10 stamp: 'CM 11/9/2020 14:51:42'!
PASSED!

!testRun: #PortfolioEntryTest #test11 stamp: 'CM 11/9/2020 14:51:42'!
PASSED!

!testRun: #PortfolioEntryTest #test12 stamp: 'CM 11/9/2020 14:51:42'!
PASSED!

!testRun: #PortfolioEntryTest #test13 stamp: 'CM 11/9/2020 14:51:42'!
FAILURE!

!testRun: #PortfolioEntryTest #test13 stamp: 'CM 11/9/2020 14:51:42'!
FAILURE!
!PortfolioPortfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 14:53:09' prior: 50873804 overrides: 50872382!
add: aPortfolio 
	
	(aPortfolio includes: self) ifTrue: [ self error: self class xxErrorDescription ].
	
	(aPortfolio sameTreeAs: self) ifTrue: [ self error: self class xxErrorDescription ].
	(self sameTreeAs: aPortfolio) ifTrue: [ self error: self class xxErrorDescription ].
	
	(self hasCommonAccountsWith: aPortfolio) ifTrue: [ self error: self class xxErrorDescription ].
	
	portfolioEntries add: aPortfolio .
	aPortfolio addParent: self.! !

!testRun: #PortfolioEntryTest #test01 stamp: 'CM 11/9/2020 14:53:11'!
PASSED!

!testRun: #PortfolioEntryTest #test011 stamp: 'CM 11/9/2020 14:53:11'!
PASSED!

!testRun: #PortfolioEntryTest #test02 stamp: 'CM 11/9/2020 14:53:11'!
PASSED!

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 14:53:11'!
PASSED!

!testRun: #PortfolioEntryTest #test03 stamp: 'CM 11/9/2020 14:53:11'!
PASSED!

!testRun: #PortfolioEntryTest #test04 stamp: 'CM 11/9/2020 14:53:11'!
PASSED!

!testRun: #PortfolioEntryTest #test044 stamp: 'CM 11/9/2020 14:53:11'!
PASSED!

!testRun: #PortfolioEntryTest #test05 stamp: 'CM 11/9/2020 14:53:11'!
PASSED!

!testRun: #PortfolioEntryTest #test055 stamp: 'CM 11/9/2020 14:53:11'!
PASSED!

!testRun: #PortfolioEntryTest #test06 stamp: 'CM 11/9/2020 14:53:11'!
PASSED!

!testRun: #PortfolioEntryTest #test066 stamp: 'CM 11/9/2020 14:53:11'!
PASSED!

!testRun: #PortfolioEntryTest #test07 stamp: 'CM 11/9/2020 14:53:11'!
PASSED!

!testRun: #PortfolioEntryTest #test08 stamp: 'CM 11/9/2020 14:53:11'!
PASSED!

!testRun: #PortfolioEntryTest #test09 stamp: 'CM 11/9/2020 14:53:11'!
PASSED!

!testRun: #PortfolioEntryTest #test10 stamp: 'CM 11/9/2020 14:53:11'!
PASSED!

!testRun: #PortfolioEntryTest #test11 stamp: 'CM 11/9/2020 14:53:11'!
PASSED!

!testRun: #PortfolioEntryTest #test12 stamp: 'CM 11/9/2020 14:53:11'!
PASSED!

!testRun: #PortfolioEntryTest #test13 stamp: 'CM 11/9/2020 14:53:11'!
FAILURE!

!testRun: #PortfolioEntryTest #test13 stamp: 'CM 11/9/2020 14:53:11'!
FAILURE!

	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioPortfolio new.
	portfolio2 := PortfolioPortfolio new.
	portfolio3 := PortfolioPortfolio new.	

	portfolio4 := PortfolioAccount with: account.
	portfolio5 := PortfolioAccount with: account.
	
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.!

portfolio1 includes: portfolio5.!

portfolio3 add: portfolio5.	!

portfolio1 includes: portfolio5	!
!PortfolioEntry methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 14:58:58' prior: 50873826!
sameTreeAs: aPortfolio 
	
	^ (self hasCommonAccountsWith: aPortfolio) or: (parents anySatisfy: [ :aParentPortfolio | aParentPortfolio sameTreeAs: aPortfolio ])! !

!testRun: #PortfolioEntryTest #test01 stamp: 'CM 11/9/2020 14:59:00'!
PASSED!

!testRun: #PortfolioEntryTest #test011 stamp: 'CM 11/9/2020 14:59:00'!
PASSED!

!testRun: #PortfolioEntryTest #test02 stamp: 'CM 11/9/2020 14:59:00'!
PASSED!

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 14:59:00'!
PASSED!

!testRun: #PortfolioEntryTest #test03 stamp: 'CM 11/9/2020 14:59:00'!
PASSED!

!testRun: #PortfolioEntryTest #test04 stamp: 'CM 11/9/2020 14:59:00'!
PASSED!

!testRun: #PortfolioEntryTest #test044 stamp: 'CM 11/9/2020 14:59:00'!
PASSED!

!testRun: #PortfolioEntryTest #test05 stamp: 'CM 11/9/2020 14:59:00'!
PASSED!

!testRun: #PortfolioEntryTest #test055 stamp: 'CM 11/9/2020 14:59:00'!
PASSED!

!testRun: #PortfolioEntryTest #test06 stamp: 'CM 11/9/2020 14:59:00'!
PASSED!

!testRun: #PortfolioEntryTest #test066 stamp: 'CM 11/9/2020 14:59:00'!
PASSED!

!testRun: #PortfolioEntryTest #test07 stamp: 'CM 11/9/2020 14:59:00'!
PASSED!

!testRun: #PortfolioEntryTest #test08 stamp: 'CM 11/9/2020 14:59:00'!
PASSED!

!testRun: #PortfolioEntryTest #test09 stamp: 'CM 11/9/2020 14:59:00'!
PASSED!

!testRun: #PortfolioEntryTest #test10 stamp: 'CM 11/9/2020 14:59:00'!
PASSED!

!testRun: #PortfolioEntryTest #test11 stamp: 'CM 11/9/2020 14:59:00'!
PASSED!

!testRun: #PortfolioEntryTest #test12 stamp: 'CM 11/9/2020 14:59:00'!
PASSED!

!testRun: #PortfolioEntryTest #test13 stamp: 'CM 11/9/2020 14:59:00'!
FAILURE!

!testRun: #PortfolioEntryTest #test13 stamp: 'CM 11/9/2020 14:59:00'!
FAILURE!

	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioPortfolio new.
	portfolio2 := PortfolioPortfolio new.
	portfolio3 := PortfolioPortfolio new.	

	portfolio4 := PortfolioAccount with: account.
	portfolio5 := PortfolioAccount with: account.
	
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
!

portfolio1 includes: portfolio5.!

portfolio1 hasCommonAccountsWith: portfolio5.!

portfolio4 hasCommonAccountsWith: portfolio5.!

portfolio4 hasCommonAccountsWith: portfolio5.!
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:01:26' prior: 50873737!
test13

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioPortfolio new.
	portfolio2 := PortfolioPortfolio new.
	portfolio3 := PortfolioPortfolio new.	

	portfolio4 := PortfolioAccount with: account.
	portfolio5 := PortfolioAccount with: account.
	
	portfolio1 add: portfolio2.
	portfolio1 add: portfolio4.
	portfolio2 add: portfolio3.
	
				
	self should: [ portfolio3 add: portfolio5 ] raise: Error withMessageText: Portfolio xxErrorDescription! !

!testRun: #PortfolioEntryTest #test01 stamp: 'CM 11/9/2020 15:01:28'!
PASSED!

!testRun: #PortfolioEntryTest #test011 stamp: 'CM 11/9/2020 15:01:28'!
PASSED!

!testRun: #PortfolioEntryTest #test02 stamp: 'CM 11/9/2020 15:01:28'!
PASSED!

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 15:01:28'!
PASSED!

!testRun: #PortfolioEntryTest #test03 stamp: 'CM 11/9/2020 15:01:28'!
PASSED!

!testRun: #PortfolioEntryTest #test04 stamp: 'CM 11/9/2020 15:01:28'!
PASSED!

!testRun: #PortfolioEntryTest #test044 stamp: 'CM 11/9/2020 15:01:28'!
PASSED!

!testRun: #PortfolioEntryTest #test05 stamp: 'CM 11/9/2020 15:01:28'!
PASSED!

!testRun: #PortfolioEntryTest #test055 stamp: 'CM 11/9/2020 15:01:28'!
PASSED!

!testRun: #PortfolioEntryTest #test06 stamp: 'CM 11/9/2020 15:01:28'!
PASSED!

!testRun: #PortfolioEntryTest #test066 stamp: 'CM 11/9/2020 15:01:28'!
PASSED!

!testRun: #PortfolioEntryTest #test07 stamp: 'CM 11/9/2020 15:01:28'!
PASSED!

!testRun: #PortfolioEntryTest #test08 stamp: 'CM 11/9/2020 15:01:28'!
PASSED!

!testRun: #PortfolioEntryTest #test09 stamp: 'CM 11/9/2020 15:01:28'!
PASSED!

!testRun: #PortfolioEntryTest #test10 stamp: 'CM 11/9/2020 15:01:28'!
PASSED!

!testRun: #PortfolioEntryTest #test11 stamp: 'CM 11/9/2020 15:01:28'!
PASSED!

!testRun: #PortfolioEntryTest #test12 stamp: 'CM 11/9/2020 15:01:28'!
PASSED!

!testRun: #PortfolioEntryTest #test13 stamp: 'CM 11/9/2020 15:01:28'!
PASSED!

----SNAPSHOT----(9 November 2020 15:02:45) CuisUniversity-4384.image priorSource: 17278566!

!classRemoval: #PortfolioTest stamp: 'CM 11/9/2020 15:02:51'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:03:51' prior: 50872878!
test06

	| portfolio |
	
	portfolio := PortfolioPortfolio new.
		
	self should: [ portfolio add: portfolio ] raise: Error withMessageText: PortfolioEntry xxErrorDescription! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:03:57' prior: 50872945!
test07

	| portfolio1 portfolio2 |
	
	portfolio1 := PortfolioPortfolio new.
	portfolio2 := PortfolioPortfolio new.
	
	portfolio1 add: portfolio2.
			
	self should: [ portfolio2 add: portfolio1 ] raise: Error withMessageText: PortfolioEntry xxErrorDescription! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:04:00' prior: 50872962!
test08

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := PortfolioPortfolio new.
	portfolio2 := PortfolioPortfolio new.
	portfolio3 := PortfolioPortfolio new.
	
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
					
	self should: [ portfolio3 add: portfolio1 ] raise: Error withMessageText: PortfolioEntry xxErrorDescription! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:04:03' prior: 50872976!
test09

	| portfolio1 portfolio2 portfolio3 portfolio4 |
	
	portfolio1 := PortfolioPortfolio new.
	portfolio2 := PortfolioPortfolio new.
	portfolio3 := PortfolioPortfolio new.
	portfolio4 := PortfolioPortfolio new.
	
	portfolio1 add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio4 add: portfolio2.
					
	self should: [ portfolio2 add: portfolio3 ] raise: Error withMessageText: PortfolioEntry xxErrorDescription! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:04:06' prior: 50873116!
test10

	| portfolio1 portfolio2 portfolio3 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioPortfolio new.
	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	
	portfolio1 add: portfolio2.
				
	self should: [ portfolio1 add: portfolio3 ] raise: Error withMessageText: PortfolioEntry xxErrorDescription! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:04:09' prior: 50873489!
test11

	| portfolio1 portfolio2 portfolio3 portfolio4 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioPortfolio new.
	portfolio4 := PortfolioPortfolio new.
	
	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	portfolio4 add: portfolio2.
	portfolio1 add: portfolio3.
				
	self should: [ portfolio1 add: portfolio4 ] raise: Error withMessageText: PortfolioEntry xxErrorDescription! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:04:13' prior: 50873661!
test12

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioPortfolio new.
	portfolio4 := PortfolioPortfolio new.
	portfolio5 := PortfolioPortfolio new.	

	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	portfolio4 add: portfolio5.
	portfolio5 add: portfolio2.
	portfolio1 add: portfolio3.
				
	self should: [ portfolio1 add: portfolio4 ] raise: Error withMessageText: PortfolioEntry xxErrorDescription! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:04:15' prior: 50874104!
test13

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioPortfolio new.
	portfolio2 := PortfolioPortfolio new.
	portfolio3 := PortfolioPortfolio new.	

	portfolio4 := PortfolioAccount with: account.
	portfolio5 := PortfolioAccount with: account.
	
	portfolio1 add: portfolio2.
	portfolio1 add: portfolio4.
	portfolio2 add: portfolio3.
	
				
	self should: [ portfolio3 add: portfolio5 ] raise: Error withMessageText: PortfolioEntry xxErrorDescription! !

!testRun: #PortfolioEntryTest #test01 stamp: 'CM 11/9/2020 15:04:21'!
PASSED!

!testRun: #PortfolioEntryTest #test011 stamp: 'CM 11/9/2020 15:04:21'!
PASSED!

!testRun: #PortfolioEntryTest #test02 stamp: 'CM 11/9/2020 15:04:21'!
PASSED!

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 15:04:21'!
PASSED!

!testRun: #PortfolioEntryTest #test03 stamp: 'CM 11/9/2020 15:04:21'!
PASSED!

!testRun: #PortfolioEntryTest #test04 stamp: 'CM 11/9/2020 15:04:21'!
PASSED!

!testRun: #PortfolioEntryTest #test044 stamp: 'CM 11/9/2020 15:04:21'!
PASSED!

!testRun: #PortfolioEntryTest #test05 stamp: 'CM 11/9/2020 15:04:21'!
PASSED!

!testRun: #PortfolioEntryTest #test055 stamp: 'CM 11/9/2020 15:04:21'!
PASSED!

!testRun: #PortfolioEntryTest #test06 stamp: 'CM 11/9/2020 15:04:21'!
PASSED!

!testRun: #PortfolioEntryTest #test066 stamp: 'CM 11/9/2020 15:04:21'!
PASSED!

!testRun: #PortfolioEntryTest #test07 stamp: 'CM 11/9/2020 15:04:21'!
PASSED!

!testRun: #PortfolioEntryTest #test08 stamp: 'CM 11/9/2020 15:04:21'!
PASSED!

!testRun: #PortfolioEntryTest #test09 stamp: 'CM 11/9/2020 15:04:21'!
PASSED!

!testRun: #PortfolioEntryTest #test10 stamp: 'CM 11/9/2020 15:04:21'!
PASSED!

!testRun: #PortfolioEntryTest #test11 stamp: 'CM 11/9/2020 15:04:21'!
PASSED!

!testRun: #PortfolioEntryTest #test12 stamp: 'CM 11/9/2020 15:04:21'!
PASSED!

!testRun: #PortfolioEntryTest #test13 stamp: 'CM 11/9/2020 15:04:21'!
PASSED!

!classRemoval: #Portfolio stamp: 'CM 11/9/2020 15:04:24'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRenamed: #PortfolioEntry as: #Portfolio stamp: 'CM 11/9/2020 15:04:51'!
Smalltalk renameClassNamed: #PortfolioEntry as: #Portfolio!
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:04:51' prior: 50874178!
test06

	| portfolio |
	
	portfolio := PortfolioPortfolio new.
		
	self should: [ portfolio add: portfolio ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:04:51' prior: 50874199!
test08

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := PortfolioPortfolio new.
	portfolio2 := PortfolioPortfolio new.
	portfolio3 := PortfolioPortfolio new.
	
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
					
	self should: [ portfolio3 add: portfolio1 ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:04:51' prior: 50874230!
test10

	| portfolio1 portfolio2 portfolio3 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioPortfolio new.
	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	
	portfolio1 add: portfolio2.
				
	self should: [ portfolio1 add: portfolio3 ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:04:51' prior: 50874187!
test07

	| portfolio1 portfolio2 |
	
	portfolio1 := PortfolioPortfolio new.
	portfolio2 := PortfolioPortfolio new.
	
	portfolio1 add: portfolio2.
			
	self should: [ portfolio2 add: portfolio1 ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:04:51' prior: 50874213!
test09

	| portfolio1 portfolio2 portfolio3 portfolio4 |
	
	portfolio1 := PortfolioPortfolio new.
	portfolio2 := PortfolioPortfolio new.
	portfolio3 := PortfolioPortfolio new.
	portfolio4 := PortfolioPortfolio new.
	
	portfolio1 add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio4 add: portfolio2.
					
	self should: [ portfolio2 add: portfolio3 ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:04:51' prior: 50874245!
test11

	| portfolio1 portfolio2 portfolio3 portfolio4 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioPortfolio new.
	portfolio4 := PortfolioPortfolio new.
	
	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	portfolio4 add: portfolio2.
	portfolio1 add: portfolio3.
				
	self should: [ portfolio1 add: portfolio4 ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:04:51' prior: 50874263!
test12

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioPortfolio new.
	portfolio4 := PortfolioPortfolio new.
	portfolio5 := PortfolioPortfolio new.	

	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	portfolio4 add: portfolio5.
	portfolio5 add: portfolio2.
	portfolio1 add: portfolio3.
				
	self should: [ portfolio1 add: portfolio4 ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioEntryTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:04:51' prior: 50874283!
test13

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioPortfolio new.
	portfolio2 := PortfolioPortfolio new.
	portfolio3 := PortfolioPortfolio new.	

	portfolio4 := PortfolioAccount with: account.
	portfolio5 := PortfolioAccount with: account.
	
	portfolio1 add: portfolio2.
	portfolio1 add: portfolio4.
	portfolio2 add: portfolio3.
	
				
	self should: [ portfolio3 add: portfolio5 ] raise: Error withMessageText: Portfolio xxErrorDescription! !

!testRun: #PortfolioEntryTest #test01 stamp: 'CM 11/9/2020 15:05:00'!
PASSED!

!testRun: #PortfolioEntryTest #test011 stamp: 'CM 11/9/2020 15:05:00'!
PASSED!

!testRun: #PortfolioEntryTest #test02 stamp: 'CM 11/9/2020 15:05:00'!
PASSED!

!testRun: #PortfolioEntryTest #test022 stamp: 'CM 11/9/2020 15:05:00'!
PASSED!

!testRun: #PortfolioEntryTest #test03 stamp: 'CM 11/9/2020 15:05:00'!
PASSED!

!testRun: #PortfolioEntryTest #test04 stamp: 'CM 11/9/2020 15:05:00'!
PASSED!

!testRun: #PortfolioEntryTest #test044 stamp: 'CM 11/9/2020 15:05:00'!
PASSED!

!testRun: #PortfolioEntryTest #test05 stamp: 'CM 11/9/2020 15:05:00'!
PASSED!

!testRun: #PortfolioEntryTest #test055 stamp: 'CM 11/9/2020 15:05:00'!
PASSED!

!testRun: #PortfolioEntryTest #test06 stamp: 'CM 11/9/2020 15:05:00'!
PASSED!

!testRun: #PortfolioEntryTest #test066 stamp: 'CM 11/9/2020 15:05:00'!
PASSED!

!testRun: #PortfolioEntryTest #test07 stamp: 'CM 11/9/2020 15:05:00'!
PASSED!

!testRun: #PortfolioEntryTest #test08 stamp: 'CM 11/9/2020 15:05:00'!
PASSED!

!testRun: #PortfolioEntryTest #test09 stamp: 'CM 11/9/2020 15:05:00'!
PASSED!

!testRun: #PortfolioEntryTest #test10 stamp: 'CM 11/9/2020 15:05:00'!
PASSED!

!testRun: #PortfolioEntryTest #test11 stamp: 'CM 11/9/2020 15:05:00'!
PASSED!

!testRun: #PortfolioEntryTest #test12 stamp: 'CM 11/9/2020 15:05:00'!
PASSED!

!testRun: #PortfolioEntryTest #test13 stamp: 'CM 11/9/2020 15:05:00'!
PASSED!

!classRenamed: #PortfolioEntryTest as: #PortfolioTest stamp: 'CM 11/9/2020 15:05:09'!
Smalltalk renameClassNamed: #PortfolioEntryTest as: #PortfolioTest!

!classRenamed: #PortfolioPortfolio as: #PortfolioCollection stamp: 'CM 11/9/2020 15:05:20'!
Smalltalk renameClassNamed: #PortfolioPortfolio as: #PortfolioCollection!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:05:20' prior: 50874464!
test13

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioCollection new.
	portfolio3 := PortfolioCollection new.	

	portfolio4 := PortfolioAccount with: account.
	portfolio5 := PortfolioAccount with: account.
	
	portfolio1 add: portfolio2.
	portfolio1 add: portfolio4.
	portfolio2 add: portfolio3.
	
				
	self should: [ portfolio3 add: portfolio5 ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:05:20' prior: 50872770!
test022

	| portfolio1 portfolio2 account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio1 := PortfolioAccount with: account.
	portfolio2 := PortfolioCollection new.
	portfolio2 add: portfolio1.
	
	self assert: 100 equals: portfolio2 balance.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:05:20' prior: 50874444!
test12

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio4 := PortfolioCollection new.
	portfolio5 := PortfolioCollection new.	

	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	portfolio4 add: portfolio5.
	portfolio5 add: portfolio2.
	portfolio1 add: portfolio3.
				
	self should: [ portfolio1 add: portfolio4 ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:05:20' prior: 50872621!
test01

	| portfolio |
	
	portfolio := PortfolioCollection new.

	self assert: 0 equals: portfolio balance.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:05:20' prior: 50872860!
test055

	| portfolio1 portfolio2 account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 50 on: account.
	portfolio1 := PortfolioAccount with: account.

	portfolio2 := PortfolioCollection new.	
	portfolio2 add: portfolio1 .
	
	self assert: 1 equals: portfolio2 transactions size.
	self assert: (portfolio2 transactions includes: deposit).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:05:20' prior: 50874359!
test06

	| portfolio |
	
	portfolio := PortfolioCollection new.
		
	self should: [ portfolio add: portfolio ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:05:20' prior: 50874426!
test11

	| portfolio1 portfolio2 portfolio3 portfolio4 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio4 := PortfolioCollection new.
	
	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	portfolio4 add: portfolio2.
	portfolio1 add: portfolio3.
				
	self should: [ portfolio1 add: portfolio4 ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:05:20' prior: 50872783!
test03

	| portfolio1 portfolio2 portfolio3 account1 |
	
	account1 := ReceptiveAccount new.
	Deposit register: 50 on: account1.
	portfolio1 := PortfolioAccount with: account1.
	
	portfolio2 := PortfolioCollection new.
	portfolio2 add: portfolio1.
	
	portfolio3 := PortfolioCollection new.
	portfolio3 add: portfolio2.
	
	self assert: 50 equals: portfolio3 balance.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:05:20' prior: 50874409!
test09

	| portfolio1 portfolio2 portfolio3 portfolio4 |
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioCollection new.
	portfolio3 := PortfolioCollection new.
	portfolio4 := PortfolioCollection new.
	
	portfolio1 add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio4 add: portfolio2.
					
	self should: [ portfolio2 add: portfolio3 ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:05:20' prior: 50874397!
test07

	| portfolio1 portfolio2 |
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioCollection new.
	
	portfolio1 add: portfolio2.
			
	self should: [ portfolio2 add: portfolio1 ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:05:20' prior: 50872815!
test044

	| portfolio account1 deposit |
	
	account1 := ReceptiveAccount new.	
	portfolio := PortfolioCollection new.
	
	deposit := Deposit register: 100 on: account1.
	
	self deny: (portfolio hasRegistered: deposit).
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:05:20' prior: 50874368!
test08

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioCollection new.
	portfolio3 := PortfolioCollection new.
	
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
					
	self should: [ portfolio3 add: portfolio1 ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:05:20' prior: 50874382!
test10

	| portfolio1 portfolio2 portfolio3 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	
	portfolio1 add: portfolio2.
				
	self should: [ portfolio1 add: portfolio3 ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:05:20' prior: 50872930!
test066

	| portfolio1 portfolio2 |
	
	portfolio1 := PortfolioAccount with: ReceptiveAccount new.
	portfolio2 := PortfolioCollection new.
		
	self should: [ portfolio1 add: portfolio2 ] raise: Error withMessageText: 'No se puede agregar un porfolio a un portfolioAccount'! !

!classDefinition: #PortfolioCollection category: 'Portfolio-Ejercicio' stamp: 'CM 11/9/2020 15:05:45'!
Portfolio subclass: #PortfolioCollection
	instanceVariableNames: 'portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioCollection methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:05:45' prior: 50872467 overrides: 50872391!
hasRegistered: aTransaction 

	^ portfolios anySatisfy: [ :aPortfolio | aPortfolio hasRegistered: aTransaction ].! !
!PortfolioCollection methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:05:45' prior: 50873356!
includes: aPortfolio
	
	^ (aPortfolio = self) or: (portfolios includes: aPortfolio) or: (portfolios anySatisfy: [ :aPortfolioEntry | 
		aPortfolioEntry includes: aPortfolio.
	]).! !
!PortfolioCollection methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:05:45' prior: 50873896 overrides: 50873780!
initialize

	super initialize.
	portfolios := OrderedCollection new.
	! !
!PortfolioCollection methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:05:45' prior: 50873956 overrides: 50872382!
add: aPortfolio 
	
	(aPortfolio includes: self) ifTrue: [ self error: self class xxErrorDescription ].
	
	(aPortfolio sameTreeAs: self) ifTrue: [ self error: self class xxErrorDescription ].
	(self sameTreeAs: aPortfolio) ifTrue: [ self error: self class xxErrorDescription ].
	
	(self hasCommonAccountsWith: aPortfolio) ifTrue: [ self error: self class xxErrorDescription ].
	
	portfolios add: aPortfolio .
	aPortfolio addParent: self.! !
!PortfolioCollection methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:05:45' prior: 50873686!
zaraza: anAccount

	^ portfolios anySatisfy: [ :portfolio | portfolio zaraza: anAccount ]! !
!PortfolioCollection methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:05:45' prior: 50872460 overrides: 50872387!
balance

	^ portfolios sum: [ :aPortfolio | aPortfolio balance ] ifEmpty: [ 0 ].! !
!PortfolioCollection methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:05:45' prior: 50872484 overrides: 50872396!
transactions

	^ portfolios inject: OrderedCollection new into: [ :allTransactions :aPortfolio | allTransactions addAll: aPortfolio transactions ].! !
!PortfolioCollection methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:05:45' prior: 50873613!
hasCommonAccountsWith: aPortfolio

	^ (self includes: aPortfolio) or: (portfolios anySatisfy: [ :pe | aPortfolio hasCommonAccountsWith: pe])! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CM 11/9/2020 15:05:57'!
Object subclass: #Portfolio
	instanceVariableNames: 'parentPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:05:57' prior: 50874033!
sameTreeAs: aPortfolio 
	
	^ (self hasCommonAccountsWith: aPortfolio) or: (parentPortfolios anySatisfy: [ :aParentPortfolio | aParentPortfolio sameTreeAs: aPortfolio ])! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:05:57' prior: 50873780 overrides: 16896425!
initialize

	parentPortfolios := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:05:57' prior: 50873798!
addParent: aPortfolio

	parentPortfolios add: aPortfolio .! !
!Portfolio methodsFor: 'private' stamp: 'CM 11/9/2020 15:13:13'!
hasCommonAccountsWith: aPortfolio

	self subclassResponsibility .


	! !
!Portfolio methodsFor: 'private' stamp: 'CM 11/9/2020 15:13:33'!
zaraza: anAccount 
	
	self subclassResponsibility .! !
!PortfolioAccount methodsFor: 'initialization' stamp: 'CM 11/9/2020 15:14:04' prior: 50873902!
initializeWith: anAccount
	
	account := anAccount.! !

!testRun: #PortfolioTest #test01 stamp: 'CM 11/9/2020 15:14:07'!
PASSED!

!testRun: #PortfolioTest #test011 stamp: 'CM 11/9/2020 15:14:07'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'CM 11/9/2020 15:14:07'!
PASSED!

!testRun: #PortfolioTest #test022 stamp: 'CM 11/9/2020 15:14:07'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'CM 11/9/2020 15:14:07'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CM 11/9/2020 15:14:07'!
PASSED!

!testRun: #PortfolioTest #test044 stamp: 'CM 11/9/2020 15:14:07'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'CM 11/9/2020 15:14:07'!
PASSED!

!testRun: #PortfolioTest #test055 stamp: 'CM 11/9/2020 15:14:07'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'CM 11/9/2020 15:14:07'!
PASSED!

!testRun: #PortfolioTest #test066 stamp: 'CM 11/9/2020 15:14:07'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'CM 11/9/2020 15:14:07'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'CM 11/9/2020 15:14:07'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'CM 11/9/2020 15:14:07'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'CM 11/9/2020 15:14:07'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'CM 11/9/2020 15:14:07'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'CM 11/9/2020 15:14:07'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'CM 11/9/2020 15:14:07'!
PASSED!

----SNAPSHOT----(9 November 2020 15:14:12) CuisUniversity-4384.image priorSource: 17360548!
!PortfolioCollection methodsFor: 'adding' stamp: 'CM 11/9/2020 15:18:18' prior: 50874768 overrides: 50872382!
add: aPortfolio 
	"
	(aPortfolio includes: self) ifTrue: [ self error: self class xxErrorDescription ].
	"
	(aPortfolio sameTreeAs: self) ifTrue: [ self error: self class xxErrorDescription ].
	(self sameTreeAs: aPortfolio) ifTrue: [ self error: self class xxErrorDescription ].
	
	(self hasCommonAccountsWith: aPortfolio) ifTrue: [ self error: self class xxErrorDescription ].
	
	portfolios add: aPortfolio .
	aPortfolio addParent: self.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:20:57' prior: 50874539!
test13

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioCollection new.
	portfolio3 := PortfolioCollection new.	

	portfolio4 := PortfolioAccount with: account.
	portfolio5 := PortfolioAccount with: account.
	
	portfolio1 add: portfolio2.
	portfolio1 add: portfolio4.
	portfolio2 add: portfolio3.
	
	self should: [ portfolio3 add: portfolio5 ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioCollection methodsFor: 'adding' stamp: 'CM 11/9/2020 15:25:25' prior: 50874901 overrides: 50872382!
add: aPortfolio 
	
	(aPortfolio includes: self) ifTrue: [ self error: self class xxErrorDescription ].
	
	(aPortfolio sameTreeAs: self) ifTrue: [ self error: self class xxErrorDescription ].
	(self sameTreeAs: aPortfolio) ifTrue: [ self error: self class xxErrorDescription ].
	
	(self hasCommonAccountsWith: aPortfolio) ifTrue: [ self error: self class xxErrorDescription ].
	
	portfolios add: aPortfolio .
	aPortfolio addParent: self.! !

!testRun: #PortfolioTest #test01 stamp: 'CM 11/9/2020 15:25:26'!
PASSED!

!testRun: #PortfolioTest #test011 stamp: 'CM 11/9/2020 15:25:26'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'CM 11/9/2020 15:25:26'!
PASSED!

!testRun: #PortfolioTest #test022 stamp: 'CM 11/9/2020 15:25:26'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'CM 11/9/2020 15:25:26'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CM 11/9/2020 15:25:26'!
PASSED!

!testRun: #PortfolioTest #test044 stamp: 'CM 11/9/2020 15:25:26'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'CM 11/9/2020 15:25:26'!
PASSED!

!testRun: #PortfolioTest #test055 stamp: 'CM 11/9/2020 15:25:26'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'CM 11/9/2020 15:25:26'!
PASSED!

!testRun: #PortfolioTest #test066 stamp: 'CM 11/9/2020 15:25:26'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'CM 11/9/2020 15:25:26'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'CM 11/9/2020 15:25:26'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'CM 11/9/2020 15:25:26'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'CM 11/9/2020 15:25:26'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'CM 11/9/2020 15:25:26'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'CM 11/9/2020 15:25:26'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'CM 11/9/2020 15:25:26'!
PASSED!
!PortfolioCollection methodsFor: 'adding' stamp: 'CM 11/9/2020 15:25:33' prior: 50874938 overrides: 50872382!
add: aPortfolio 
	"
	(aPortfolio includes: self) ifTrue: [ self error: self class xxErrorDescription ].
	"
	(aPortfolio sameTreeAs: self) ifTrue: [ self error: self class xxErrorDescription ].
	(self sameTreeAs: aPortfolio) ifTrue: [ self error: self class xxErrorDescription ].
	
	(self hasCommonAccountsWith: aPortfolio) ifTrue: [ self error: self class xxErrorDescription ].
	
	portfolios add: aPortfolio .
	aPortfolio addParent: self.! !

!testRun: #PortfolioTest #test01 stamp: 'CM 11/9/2020 15:25:35'!
PASSED!

!testRun: #PortfolioTest #test011 stamp: 'CM 11/9/2020 15:25:35'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'CM 11/9/2020 15:25:35'!
PASSED!

!testRun: #PortfolioTest #test022 stamp: 'CM 11/9/2020 15:25:35'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'CM 11/9/2020 15:25:35'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CM 11/9/2020 15:25:35'!
PASSED!

!testRun: #PortfolioTest #test044 stamp: 'CM 11/9/2020 15:25:35'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'CM 11/9/2020 15:25:35'!
PASSED!

!testRun: #PortfolioTest #test055 stamp: 'CM 11/9/2020 15:25:35'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'CM 11/9/2020 15:25:35'!
PASSED!

!testRun: #PortfolioTest #test066 stamp: 'CM 11/9/2020 15:25:35'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'CM 11/9/2020 15:25:35'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'CM 11/9/2020 15:25:35'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'CM 11/9/2020 15:25:35'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'CM 11/9/2020 15:25:35'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'CM 11/9/2020 15:25:35'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'CM 11/9/2020 15:25:35'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'CM 11/9/2020 15:25:35'!
PASSED!

----SNAPSHOT----(9 November 2020 15:25:47) CuisUniversity-4384.image priorSource: 17383886!

!methodRemoval: PortfolioAccount #includes: stamp: 'CM 11/9/2020 15:32:00'!
includes: anAccount
	
	^ anAccount zaraza: account.!

!methodRemoval: PortfolioCollection #includes: stamp: 'CM 11/9/2020 15:32:05'!
includes: aPortfolio
	
	^ (aPortfolio = self) or: (portfolios includes: aPortfolio) or: (portfolios anySatisfy: [ :aPortfolioEntry | 
		aPortfolioEntry includes: aPortfolio.
	]).!
!PortfolioCollection methodsFor: 'private' stamp: 'CM 11/9/2020 15:32:48'!
includes: anAccount

	^ portfolios anySatisfy: [ :portfolio | portfolio zaraza: anAccount ]! !
!Portfolio methodsFor: 'private' stamp: 'CM 11/9/2020 15:32:48'!
includes: anAccount 
	
	self subclassResponsibility .! !
!PortfolioAccount methodsFor: 'private' stamp: 'CM 11/9/2020 15:32:48' overrides: 50875076!
includes: anAccount
	
	^ anAccount = account.! !
!PortfolioAccount methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:32:48' prior: 50873565 overrides: 50874841!
hasCommonAccountsWith: aPortfolio

	^ aPortfolio includes: account.


	
	! !
!PortfolioCollection methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:32:48' prior: 50874785 overrides: 50874846!
zaraza: anAccount

	^ portfolios anySatisfy: [ :portfolio | portfolio includes: anAccount ]! !
!PortfolioCollection methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:32:48' prior: 50875071 overrides: 50875076!
includes: anAccount

	^ portfolios anySatisfy: [ :portfolio | portfolio includes: anAccount ]! !

!methodRemoval: PortfolioCollection #zaraza: stamp: 'CM 11/9/2020 15:32:48'!
zaraza: anAccount

	^ portfolios anySatisfy: [ :portfolio | portfolio includes: anAccount ]!

!methodRemoval: Portfolio #zaraza: stamp: 'CM 11/9/2020 15:32:48'!
zaraza: anAccount 
	
	self subclassResponsibility .!

!methodRemoval: PortfolioAccount #zaraza: stamp: 'CM 11/9/2020 15:32:48'!
zaraza: anAccount
	
	^ anAccount = account.!
!Portfolio methodsFor: 'private' stamp: 'CM 11/9/2020 15:33:06' prior: 50875076!
includes: anPortfolio 
	
	self subclassResponsibility .! !
!PortfolioAccount methodsFor: 'private' stamp: 'CM 11/9/2020 15:33:16' prior: 50875081 overrides: 50875120!
includes: aPortfolio
	
	^ aPortfolio = account.! !
!PortfolioCollection methodsFor: 'private' stamp: 'CM 11/9/2020 15:33:22' prior: 50875101 overrides: 50875120!
includes: aPortfolio

	^ portfolios anySatisfy: [ :portfolio | portfolio includes: aPortfolio ]! !

!testRun: #PortfolioTest #test01 stamp: 'CM 11/9/2020 15:33:25'!
PASSED!

!testRun: #PortfolioTest #test011 stamp: 'CM 11/9/2020 15:33:25'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'CM 11/9/2020 15:33:25'!
PASSED!

!testRun: #PortfolioTest #test022 stamp: 'CM 11/9/2020 15:33:25'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'CM 11/9/2020 15:33:25'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CM 11/9/2020 15:33:25'!
PASSED!

!testRun: #PortfolioTest #test044 stamp: 'CM 11/9/2020 15:33:25'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'CM 11/9/2020 15:33:25'!
PASSED!

!testRun: #PortfolioTest #test055 stamp: 'CM 11/9/2020 15:33:25'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'CM 11/9/2020 15:33:25'!
FAILURE!

!testRun: #PortfolioTest #test066 stamp: 'CM 11/9/2020 15:33:25'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'CM 11/9/2020 15:33:25'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'CM 11/9/2020 15:33:25'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'CM 11/9/2020 15:33:25'!
FAILURE!

!testRun: #PortfolioTest #test10 stamp: 'CM 11/9/2020 15:33:25'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'CM 11/9/2020 15:33:25'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'CM 11/9/2020 15:33:25'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'CM 11/9/2020 15:33:25'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'CM 11/9/2020 15:33:33'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'CM 11/9/2020 15:33:45'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'CM 11/9/2020 15:33:45'!
FAILURE!
!PortfolioCollection methodsFor: 'adding' stamp: 'CM 11/9/2020 15:34:08' prior: 50874997 overrides: 50872382!
add: aPortfolio 
	
	(aPortfolio includes: self) ifTrue: [ self error: self class xxErrorDescription ].
	
	(aPortfolio sameTreeAs: self) ifTrue: [ self error: self class xxErrorDescription ].
	(self sameTreeAs: aPortfolio) ifTrue: [ self error: self class xxErrorDescription ].
	
	(self hasCommonAccountsWith: aPortfolio) ifTrue: [ self error: self class xxErrorDescription ].
	
	portfolios add: aPortfolio .
	aPortfolio addParent: self.! !

!testRun: #PortfolioTest #test01 stamp: 'CM 11/9/2020 15:34:10'!
PASSED!

!testRun: #PortfolioTest #test011 stamp: 'CM 11/9/2020 15:34:10'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'CM 11/9/2020 15:34:10'!
PASSED!

!testRun: #PortfolioTest #test022 stamp: 'CM 11/9/2020 15:34:10'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'CM 11/9/2020 15:34:10'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CM 11/9/2020 15:34:10'!
PASSED!

!testRun: #PortfolioTest #test044 stamp: 'CM 11/9/2020 15:34:10'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'CM 11/9/2020 15:34:10'!
PASSED!

!testRun: #PortfolioTest #test055 stamp: 'CM 11/9/2020 15:34:10'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'CM 11/9/2020 15:34:10'!
FAILURE!

!testRun: #PortfolioTest #test066 stamp: 'CM 11/9/2020 15:34:10'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'CM 11/9/2020 15:34:10'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'CM 11/9/2020 15:34:10'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'CM 11/9/2020 15:34:10'!
FAILURE!

!testRun: #PortfolioTest #test10 stamp: 'CM 11/9/2020 15:34:10'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'CM 11/9/2020 15:34:10'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'CM 11/9/2020 15:34:10'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'CM 11/9/2020 15:34:10'!
PASSED!
!PortfolioCollection methodsFor: 'private' stamp: 'CM 11/9/2020 15:37:07' prior: 50875132 overrides: 50875120!
includes: aPortfolio

	^ (self = aPortfolio) or: (portfolios anySatisfy: [ :portfolio | portfolio includes: aPortfolio ])! !

!testRun: #PortfolioTest #test01 stamp: 'CM 11/9/2020 15:37:09'!
PASSED!

!testRun: #PortfolioTest #test011 stamp: 'CM 11/9/2020 15:37:09'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'CM 11/9/2020 15:37:09'!
PASSED!

!testRun: #PortfolioTest #test022 stamp: 'CM 11/9/2020 15:37:09'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'CM 11/9/2020 15:37:09'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CM 11/9/2020 15:37:09'!
PASSED!

!testRun: #PortfolioTest #test044 stamp: 'CM 11/9/2020 15:37:09'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'CM 11/9/2020 15:37:09'!
PASSED!

!testRun: #PortfolioTest #test055 stamp: 'CM 11/9/2020 15:37:09'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'CM 11/9/2020 15:37:09'!
PASSED!

!testRun: #PortfolioTest #test066 stamp: 'CM 11/9/2020 15:37:09'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'CM 11/9/2020 15:37:09'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'CM 11/9/2020 15:37:09'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'CM 11/9/2020 15:37:09'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'CM 11/9/2020 15:37:09'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'CM 11/9/2020 15:37:09'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'CM 11/9/2020 15:37:09'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'CM 11/9/2020 15:37:09'!
PASSED!
!PortfolioCollection methodsFor: 'adding' stamp: 'CM 11/9/2020 15:37:17' prior: 50875188 overrides: 50872382!
add: aPortfolio 
	
	(aPortfolio sameTreeAs: self) ifTrue: [ self error: self class xxErrorDescription ].
	(self sameTreeAs: aPortfolio) ifTrue: [ self error: self class xxErrorDescription ].
	
	(self hasCommonAccountsWith: aPortfolio) ifTrue: [ self error: self class xxErrorDescription ].
	
	portfolios add: aPortfolio .
	aPortfolio addParent: self.! !

!testRun: #PortfolioTest #test01 stamp: 'CM 11/9/2020 15:37:19'!
PASSED!

!testRun: #PortfolioTest #test011 stamp: 'CM 11/9/2020 15:37:19'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'CM 11/9/2020 15:37:19'!
PASSED!

!testRun: #PortfolioTest #test022 stamp: 'CM 11/9/2020 15:37:19'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'CM 11/9/2020 15:37:19'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CM 11/9/2020 15:37:19'!
PASSED!

!testRun: #PortfolioTest #test044 stamp: 'CM 11/9/2020 15:37:19'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'CM 11/9/2020 15:37:19'!
PASSED!

!testRun: #PortfolioTest #test055 stamp: 'CM 11/9/2020 15:37:19'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'CM 11/9/2020 15:37:19'!
PASSED!

!testRun: #PortfolioTest #test066 stamp: 'CM 11/9/2020 15:37:19'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'CM 11/9/2020 15:37:19'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'CM 11/9/2020 15:37:19'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'CM 11/9/2020 15:37:19'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'CM 11/9/2020 15:37:19'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'CM 11/9/2020 15:37:19'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'CM 11/9/2020 15:37:19'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'CM 11/9/2020 15:37:19'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:40:31'!
test01PortfolioCollectionStartsWithZeroBalance

	| portfolio |
	
	portfolio := PortfolioCollection new.

	self assert: 0 equals: portfolio balance.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:40:51'!
test01PortfolioAccountStartsWithZeroBalance

	| portfolio |
	
	portfolio := PortfolioAccount with: ReceptiveAccount new.

	self assert: 0 equals: portfolio balance.
! !

!methodRemoval: PortfolioTest #test01 stamp: 'CM 11/9/2020 15:40:55'!
test01

	| portfolio |
	
	portfolio := PortfolioCollection new.

	self assert: 0 equals: portfolio balance.
!

!methodRemoval: PortfolioTest #test011 stamp: 'CM 11/9/2020 15:40:57'!
test011

	| portfolio |
	
	portfolio := PortfolioAccount with: ReceptiveAccount new.

	self assert: 0 equals: portfolio balance.
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:42:12'!
test02PortfolioAccountReturnsBalanceCorrectly

	| portfolio account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := PortfolioAccount with: account.
	
	self assert: 100 equals: portfolio balance.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:42:44'!
test02IncreasingAccountBalanceIncreasesPortfolioAccountBalance

	| portfolio account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := PortfolioAccount with: account.
	
	self assert: 100 equals: portfolio balance.
! !

!methodRemoval: PortfolioTest #test02PortfolioAccountReturnsBalanceCorrectly stamp: 'CM 11/9/2020 15:42:47'!
test02PortfolioAccountReturnsBalanceCorrectly

	| portfolio account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := PortfolioAccount with: account.
	
	self assert: 100 equals: portfolio balance.
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:43:02'!
test02IncreasingAccountBalanceIncreasesPortfolioCollectionBalance

	| portfolio1 portfolio2 account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio1 := PortfolioAccount with: account.
	portfolio2 := PortfolioCollection new.
	portfolio2 add: portfolio1.
	
	self assert: 100 equals: portfolio2 balance.
! !

!methodRemoval: PortfolioTest #test02 stamp: 'CM 11/9/2020 15:43:05'!
test02

	| portfolio account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := PortfolioAccount with: account.
	
	self assert: 100 equals: portfolio balance.
!

!methodRemoval: PortfolioTest #test022 stamp: 'CM 11/9/2020 15:43:06'!
test022

	| portfolio1 portfolio2 account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio1 := PortfolioAccount with: account.
	portfolio2 := PortfolioCollection new.
	portfolio2 add: portfolio1.
	
	self assert: 100 equals: portfolio2 balance.
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:44:08'!
test03PortfolioCollectionCanContainAnotherPorfolioCollection

	| portfolio1 portfolio2 portfolio3 account1 |
	
	account1 := ReceptiveAccount new.
	Deposit register: 50 on: account1.
	portfolio1 := PortfolioAccount with: account1.
	
	portfolio2 := PortfolioCollection new.
	portfolio2 add: portfolio1.
	
	portfolio3 := PortfolioCollection new.
	portfolio3 add: portfolio2.
	
	self assert: 50 equals: portfolio3 balance.
! !

!methodRemoval: PortfolioTest #test03 stamp: 'CM 11/9/2020 15:44:11'!
test03

	| portfolio1 portfolio2 portfolio3 account1 |
	
	account1 := ReceptiveAccount new.
	Deposit register: 50 on: account1.
	portfolio1 := PortfolioAccount with: account1.
	
	portfolio2 := PortfolioCollection new.
	portfolio2 add: portfolio1.
	
	portfolio3 := PortfolioCollection new.
	portfolio3 add: portfolio2.
	
	self assert: 50 equals: portfolio3 balance.
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:45:10'!
test04PortfolioAccountDoNotKnowNotRegisteredTransactions

	| portfolio account1 account2 deposit |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio := PortfolioAccount with: account1.
	
	deposit := Deposit register: 100 on: account2.
	
	self deny: (portfolio hasRegistered: deposit).
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:45:29'!
test04PortfolioCollectionDoNotKnowNotRegisteredTransactions

	| portfolio account1 deposit |
	
	account1 := ReceptiveAccount new.	
	portfolio := PortfolioCollection new.
	
	deposit := Deposit register: 100 on: account1.
	
	self deny: (portfolio hasRegistered: deposit).
! !

!methodRemoval: PortfolioTest #test04 stamp: 'CM 11/9/2020 15:45:30'!
test04

	| portfolio account1 account2 deposit |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio := PortfolioAccount with: account1.
	
	deposit := Deposit register: 100 on: account2.
	
	self deny: (portfolio hasRegistered: deposit).
!

!methodRemoval: PortfolioTest #test044 stamp: 'CM 11/9/2020 15:45:32'!
test044

	| portfolio account1 deposit |
	
	account1 := ReceptiveAccount new.	
	portfolio := PortfolioCollection new.
	
	deposit := Deposit register: 100 on: account1.
	
	self deny: (portfolio hasRegistered: deposit).
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:48:38'!
test05PortfolioAccountKnowsRegisteredTransactions 

	| portfolio account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 50 on: account.
	portfolio := PortfolioAccount with: account.
		
	self assert: 1 equals: portfolio transactions size.
	self assert: (portfolio transactions includes: deposit).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:48:53'!
test05PortfolioCollectionKnowsRegisteredTransactions 

	| portfolio1 portfolio2 account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 50 on: account.
	portfolio1 := PortfolioAccount with: account.

	portfolio2 := PortfolioCollection new.	
	portfolio2 add: portfolio1 .
	
	self assert: 1 equals: portfolio2 transactions size.
	self assert: (portfolio2 transactions includes: deposit).! !

!methodRemoval: PortfolioTest #test05 stamp: 'CM 11/9/2020 15:48:55'!
test05

	| portfolio account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 50 on: account.
	portfolio := PortfolioAccount with: account.
		
	self assert: 1 equals: portfolio transactions size.
	self assert: (portfolio transactions includes: deposit).!

!methodRemoval: PortfolioTest #test055 stamp: 'CM 11/9/2020 15:48:56'!
test055

	| portfolio1 portfolio2 account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 50 on: account.
	portfolio1 := PortfolioAccount with: account.

	portfolio2 := PortfolioCollection new.	
	portfolio2 add: portfolio1 .
	
	self assert: 1 equals: portfolio2 transactions size.
	self assert: (portfolio2 transactions includes: deposit).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:49:16'!
test06PortfolioCanNotAddItself

	| portfolio |
	
	portfolio := PortfolioCollection new.
		
	self should: [ portfolio add: portfolio ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:49:53'!
test07PortfolioAccountCanNotAddAnotherPortfolio

	| portfolio1 portfolio2 |
	
	portfolio1 := PortfolioAccount with: ReceptiveAccount new.
	portfolio2 := PortfolioCollection new.
		
	self should: [ portfolio1 add: portfolio2 ] raise: Error withMessageText: 'No se puede agregar un porfolio a un portfolioAccount'! !

!methodRemoval: PortfolioTest #test06 stamp: 'CM 11/9/2020 15:49:57'!
test06

	| portfolio |
	
	portfolio := PortfolioCollection new.
		
	self should: [ portfolio add: portfolio ] raise: Error withMessageText: Portfolio xxErrorDescription!

!methodRemoval: PortfolioTest #test066 stamp: 'CM 11/9/2020 15:49:58'!
test066

	| portfolio1 portfolio2 |
	
	portfolio1 := PortfolioAccount with: ReceptiveAccount new.
	portfolio2 := PortfolioCollection new.
		
	self should: [ portfolio1 add: portfolio2 ] raise: Error withMessageText: 'No se puede agregar un porfolio a un portfolioAccount'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:51:58'!
test08PortfolioCanNotHaveShortLoop

	| portfolio1 portfolio2 |
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioCollection new.
	
	portfolio1 add: portfolio2.
			
	self should: [ portfolio2 add: portfolio1 ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:52:26'!
test09PortfolioTreeCanNotHaveLoop

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioCollection new.
	portfolio3 := PortfolioCollection new.
	
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
					
	self should: [ portfolio3 add: portfolio1 ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:52:32'!
test08PortfolioTreeCanNotHaveShortLoop

	| portfolio1 portfolio2 |
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioCollection new.
	
	portfolio1 add: portfolio2.
			
	self should: [ portfolio2 add: portfolio1 ] raise: Error withMessageText: Portfolio xxErrorDescription! !

!methodRemoval: PortfolioTest #test08PortfolioCanNotHaveShortLoop stamp: 'CM 11/9/2020 15:52:34'!
test08PortfolioCanNotHaveShortLoop

	| portfolio1 portfolio2 |
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioCollection new.
	
	portfolio1 add: portfolio2.
			
	self should: [ portfolio2 add: portfolio1 ] raise: Error withMessageText: Portfolio xxErrorDescription!

!methodRemoval: PortfolioTest #test09 stamp: 'CM 11/9/2020 15:53:53'!
test09

	| portfolio1 portfolio2 portfolio3 portfolio4 |
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioCollection new.
	portfolio3 := PortfolioCollection new.
	portfolio4 := PortfolioCollection new.
	
	portfolio1 add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio4 add: portfolio2.
					
	self should: [ portfolio2 add: portfolio3 ] raise: Error withMessageText: Portfolio xxErrorDescription!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:54:50'!
test10PortfolioTreeCanNotHavePortfolioAtDeep1

	| portfolio1 portfolio2 portfolio3 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	
	portfolio1 add: portfolio2.
				
	self should: [ portfolio1 add: portfolio3 ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:56:03'!
test11CanNotAddPortfolioIncludingOnOfItsAccounts

	| portfolio1 portfolio2 portfolio3 portfolio4 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio4 := PortfolioCollection new.
	
	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	portfolio4 add: portfolio2.
	portfolio1 add: portfolio3.
				
	self should: [ portfolio1 add: portfolio4 ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:58:51'!
test12CanNotAddPortfolioIncludingOnOfItsAccountsDeep

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio4 := PortfolioCollection new.
	portfolio5 := PortfolioCollection new.	

	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	portfolio4 add: portfolio5.
	portfolio5 add: portfolio2.
	portfolio1 add: portfolio3.
				
	self should: [ portfolio1 add: portfolio4 ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:59:21'!
test13CanNotAddPortfolioIncludingOnOfItsAccountsToTheRight

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioCollection new.
	portfolio3 := PortfolioCollection new.	

	portfolio4 := PortfolioAccount with: account.
	portfolio5 := PortfolioAccount with: account.
	
	portfolio1 add: portfolio2.
	portfolio1 add: portfolio4.
	portfolio2 add: portfolio3.
	
	self should: [ portfolio3 add: portfolio5 ] raise: Error withMessageText: Portfolio xxErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 15:59:34'!
test12CanNotAddPortfolioIncludingOnOfItsAccountsToTheLeft

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio4 := PortfolioCollection new.
	portfolio5 := PortfolioCollection new.	

	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	portfolio4 add: portfolio5.
	portfolio5 add: portfolio2.
	portfolio1 add: portfolio3.
				
	self should: [ portfolio1 add: portfolio4 ] raise: Error withMessageText: Portfolio xxErrorDescription! !

!methodRemoval: PortfolioTest #test12CanNotAddPortfolioIncludingOnOfItsAccountsDeep stamp: 'CM 11/9/2020 15:59:39'!
test12CanNotAddPortfolioIncludingOnOfItsAccountsDeep

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio4 := PortfolioCollection new.
	portfolio5 := PortfolioCollection new.	

	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	portfolio4 add: portfolio5.
	portfolio5 add: portfolio2.
	portfolio1 add: portfolio3.
				
	self should: [ portfolio1 add: portfolio4 ] raise: Error withMessageText: Portfolio xxErrorDescription!

!methodRemoval: PortfolioTest #test13 stamp: 'CM 11/9/2020 15:59:41'!
test13

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioCollection new.
	portfolio3 := PortfolioCollection new.	

	portfolio4 := PortfolioAccount with: account.
	portfolio5 := PortfolioAccount with: account.
	
	portfolio1 add: portfolio2.
	portfolio1 add: portfolio4.
	portfolio2 add: portfolio3.
	
	self should: [ portfolio3 add: portfolio5 ] raise: Error withMessageText: Portfolio xxErrorDescription!

!methodRemoval: PortfolioTest #test12 stamp: 'CM 11/9/2020 15:59:50'!
test12

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio4 := PortfolioCollection new.
	portfolio5 := PortfolioCollection new.	

	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	portfolio4 add: portfolio5.
	portfolio5 add: portfolio2.
	portfolio1 add: portfolio3.
				
	self should: [ portfolio1 add: portfolio4 ] raise: Error withMessageText: Portfolio xxErrorDescription!

!methodRemoval: PortfolioTest #test11 stamp: 'CM 11/9/2020 15:59:52'!
test11

	| portfolio1 portfolio2 portfolio3 portfolio4 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio4 := PortfolioCollection new.
	
	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	portfolio4 add: portfolio2.
	portfolio1 add: portfolio3.
				
	self should: [ portfolio1 add: portfolio4 ] raise: Error withMessageText: Portfolio xxErrorDescription!

!methodRemoval: PortfolioTest #test10 stamp: 'CM 11/9/2020 15:59:53'!
test10

	| portfolio1 portfolio2 portfolio3 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	
	portfolio1 add: portfolio2.
				
	self should: [ portfolio1 add: portfolio3 ] raise: Error withMessageText: Portfolio xxErrorDescription!

!methodRemoval: PortfolioTest #test08 stamp: 'CM 11/9/2020 15:59:54'!
test08

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioCollection new.
	portfolio3 := PortfolioCollection new.
	
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
					
	self should: [ portfolio3 add: portfolio1 ] raise: Error withMessageText: Portfolio xxErrorDescription!

!methodRemoval: PortfolioTest #test07 stamp: 'CM 11/9/2020 15:59:55'!
test07

	| portfolio1 portfolio2 |
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioCollection new.
	
	portfolio1 add: portfolio2.
			
	self should: [ portfolio2 add: portfolio1 ] raise: Error withMessageText: Portfolio xxErrorDescription!
!Portfolio class methodsFor: 'error messages' stamp: 'CM 11/9/2020 16:02:39'!
canNotBeAddedTwiceErrorDescription
	
	^ 'A portfolio cannot be added twice to the same portfolio tree' ! !
!Portfolio class methodsFor: 'error messages' stamp: 'CM 11/9/2020 16:02:49' prior: 50872727!
xxErrorDescription
	
	^ 'A portfolio cannot be added twice to the same portfolio tree' ! !

!methodRemoval: Portfolio class #canNotBeAddedTwiceErrorDescription stamp: 'CM 11/9/2020 16:02:54'!
canNotBeAddedTwiceErrorDescription
	
	^ 'A portfolio cannot be added twice to the same portfolio tree' !
!Portfolio class methodsFor: 'error messages' stamp: 'CM 11/9/2020 16:03:06'!
canNotBeAddedTwiceErrorDescription
	
	^ 'A portfolio cannot be added twice to the same portfolio tree' ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:03:06' prior: 50875736!
test13CanNotAddPortfolioIncludingOnOfItsAccountsToTheRight

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioCollection new.
	portfolio3 := PortfolioCollection new.	

	portfolio4 := PortfolioAccount with: account.
	portfolio5 := PortfolioAccount with: account.
	
	portfolio1 add: portfolio2.
	portfolio1 add: portfolio4.
	portfolio2 add: portfolio3.
	
	self should: [ portfolio3 add: portfolio5 ] raise: Error withMessageText: Portfolio canNotBeAddedTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:03:06' prior: 50875575!
test06PortfolioCanNotAddItself

	| portfolio |
	
	portfolio := PortfolioCollection new.
		
	self should: [ portfolio add: portfolio ] raise: Error withMessageText: Portfolio canNotBeAddedTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:03:06' prior: 50875681!
test10PortfolioTreeCanNotHavePortfolioAtDeep1

	| portfolio1 portfolio2 portfolio3 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	
	portfolio1 add: portfolio2.
				
	self should: [ portfolio1 add: portfolio3 ] raise: Error withMessageText: Portfolio canNotBeAddedTwiceErrorDescription! !
!PortfolioCollection methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:03:06' prior: 50875298 overrides: 50872382!
add: aPortfolio 
	
	(aPortfolio sameTreeAs: self) ifTrue: [ self error: self class canNotBeAddedTwiceErrorDescription ].
	(self sameTreeAs: aPortfolio) ifTrue: [ self error: self class canNotBeAddedTwiceErrorDescription ].
	
	(self hasCommonAccountsWith: aPortfolio) ifTrue: [ self error: self class canNotBeAddedTwiceErrorDescription ].
	
	portfolios add: aPortfolio .
	aPortfolio addParent: self.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:03:06' prior: 50875627!
test09PortfolioTreeCanNotHaveLoop

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioCollection new.
	portfolio3 := PortfolioCollection new.
	
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
					
	self should: [ portfolio3 add: portfolio1 ] raise: Error withMessageText: Portfolio canNotBeAddedTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:03:06' prior: 50875642!
test08PortfolioTreeCanNotHaveShortLoop

	| portfolio1 portfolio2 |
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioCollection new.
	
	portfolio1 add: portfolio2.
			
	self should: [ portfolio2 add: portfolio1 ] raise: Error withMessageText: Portfolio canNotBeAddedTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:03:06' prior: 50875757!
test12CanNotAddPortfolioIncludingOnOfItsAccountsToTheLeft

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio4 := PortfolioCollection new.
	portfolio5 := PortfolioCollection new.	

	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	portfolio4 add: portfolio5.
	portfolio5 add: portfolio2.
	portfolio1 add: portfolio3.
				
	self should: [ portfolio1 add: portfolio4 ] raise: Error withMessageText: Portfolio canNotBeAddedTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:03:06' prior: 50875697!
test11CanNotAddPortfolioIncludingOnOfItsAccounts

	| portfolio1 portfolio2 portfolio3 portfolio4 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio4 := PortfolioCollection new.
	
	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	portfolio4 add: portfolio2.
	portfolio1 add: portfolio3.
				
	self should: [ portfolio1 add: portfolio4 ] raise: Error withMessageText: Portfolio canNotBeAddedTwiceErrorDescription! !

!methodRemoval: Portfolio class #xxErrorDescription stamp: 'CM 11/9/2020 16:03:06'!
xxErrorDescription
	
	^ 'A portfolio cannot be added twice to the same portfolio tree' !
!PortfolioAccount methodsFor: 'adding' stamp: 'CM 11/9/2020 16:04:02'!
canNotAddPortfolioErrorDescription

	^ 'No se puede agregar un porfolio a un portfolioAccount'! !
!PortfolioAccount methodsFor: 'adding' stamp: 'CM 11/9/2020 16:04:02' prior: 50872414 overrides: 50872382!
add: aPortfolio
	
	self error: self canNotAddPortfolioErrorDescription! !
!PortfolioAccount methodsFor: 'adding' stamp: 'CM 11/9/2020 16:04:10' prior: 50876064 overrides: 50872382!
add: aPortfolio
	
	self error: self class canNotAddPortfolioErrorDescription! !
!PortfolioAccount class methodsFor: 'instance creation' stamp: 'CM 11/9/2020 16:04:30'!
canNotAddPortfolioErrorDescription

	^ 'No se puede agregar un porfolio a un portfolioAccount'! !
!Portfolio class methodsFor: 'error messages' stamp: 'CM 11/9/2020 16:05:14'!
canNotAddPortfolioErrorDescription
	
	^ 'A portfolio cannot be added twice to the same portfolio tree' ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:05:14' prior: 50875948!
test10PortfolioTreeCanNotHavePortfolioAtDeep1

	| portfolio1 portfolio2 portfolio3 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	
	portfolio1 add: portfolio2.
				
	self should: [ portfolio1 add: portfolio3 ] raise: Error withMessageText: Portfolio canNotAddPortfolioErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:05:14' prior: 50875916!
test13CanNotAddPortfolioIncludingOnOfItsAccountsToTheRight

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioCollection new.
	portfolio3 := PortfolioCollection new.	

	portfolio4 := PortfolioAccount with: account.
	portfolio5 := PortfolioAccount with: account.
	
	portfolio1 add: portfolio2.
	portfolio1 add: portfolio4.
	portfolio2 add: portfolio3.
	
	self should: [ portfolio3 add: portfolio5 ] raise: Error withMessageText: Portfolio canNotAddPortfolioErrorDescription! !
!PortfolioCollection methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:05:14' prior: 50875966 overrides: 50872382!
add: aPortfolio 
	
	(aPortfolio sameTreeAs: self) ifTrue: [ self error: self class canNotAddPortfolioErrorDescription ].
	(self sameTreeAs: aPortfolio) ifTrue: [ self error: self class canNotAddPortfolioErrorDescription ].
	
	(self hasCommonAccountsWith: aPortfolio) ifTrue: [ self error: self class canNotAddPortfolioErrorDescription ].
	
	portfolios add: aPortfolio .
	aPortfolio addParent: self.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:05:15' prior: 50875938!
test06PortfolioCanNotAddItself

	| portfolio |
	
	portfolio := PortfolioCollection new.
		
	self should: [ portfolio add: portfolio ] raise: Error withMessageText: Portfolio canNotAddPortfolioErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:05:15' prior: 50875998!
test08PortfolioTreeCanNotHaveShortLoop

	| portfolio1 portfolio2 |
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioCollection new.
	
	portfolio1 add: portfolio2.
			
	self should: [ portfolio2 add: portfolio1 ] raise: Error withMessageText: Portfolio canNotAddPortfolioErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:05:15' prior: 50876011!
test12CanNotAddPortfolioIncludingOnOfItsAccountsToTheLeft

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio4 := PortfolioCollection new.
	portfolio5 := PortfolioCollection new.	

	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	portfolio4 add: portfolio5.
	portfolio5 add: portfolio2.
	portfolio1 add: portfolio3.
				
	self should: [ portfolio1 add: portfolio4 ] raise: Error withMessageText: Portfolio canNotAddPortfolioErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:05:15' prior: 50876033!
test11CanNotAddPortfolioIncludingOnOfItsAccounts

	| portfolio1 portfolio2 portfolio3 portfolio4 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio4 := PortfolioCollection new.
	
	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	portfolio4 add: portfolio2.
	portfolio1 add: portfolio3.
				
	self should: [ portfolio1 add: portfolio4 ] raise: Error withMessageText: Portfolio canNotAddPortfolioErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:05:15' prior: 50875982!
test09PortfolioTreeCanNotHaveLoop

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioCollection new.
	portfolio3 := PortfolioCollection new.
	
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
					
	self should: [ portfolio3 add: portfolio1 ] raise: Error withMessageText: Portfolio canNotAddPortfolioErrorDescription! !

!methodRemoval: Portfolio class #canNotBeAddedTwiceErrorDescription stamp: 'CM 11/9/2020 16:05:15'!
canNotBeAddedTwiceErrorDescription
	
	^ 'A portfolio cannot be added twice to the same portfolio tree' !
!PortfolioCollection class methodsFor: 'no messages' stamp: 'CM 11/9/2020 16:05:37' overrides: 50876082!
canNotAddPortfolioErrorDescription
	
	^ 'A portfolio cannot be added twice to the same portfolio tree' ! !
!Portfolio class methodsFor: 'error messages' stamp: 'CM 11/9/2020 16:05:52' prior: 50876082!
canNotAddPortfolioErrorDescription
	
	self subclassResponsibility .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:06:40' prior: 50876145!
test06PortfolioCanNotAddItself

	| portfolio |
	
	portfolio := PortfolioCollection new.
		
	self should: [ portfolio add: portfolio ] raise: Error withMessageText: Portfolio canNotAddTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:06:50' prior: 50876244!
test06PortfolioCanNotAddItself

	| portfolio |
	
	portfolio := PortfolioCollection new.
		
	self should: [ portfolio add: portfolio ] raise: Error withMessageText: PortfolioCollection canNotAddPortfolioErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:07:05' prior: 50875584!
test07PortfolioAccountCanNotAddAnotherPortfolio

	| portfolio1 portfolio2 |
	
	portfolio1 := PortfolioAccount with: ReceptiveAccount new.
	portfolio2 := PortfolioCollection new.
		
	self should: [ portfolio1 add: portfolio2 ] raise: Error withMessageText: PortfolioAccount canNotAddPortfolioErrorDescription ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:07:14' prior: 50876155!
test08PortfolioTreeCanNotHaveShortLoop

	| portfolio1 portfolio2 |
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioCollection new.
	
	portfolio1 add: portfolio2.
			
	self should: [ portfolio2 add: portfolio1 ] raise: Error withMessageText: PortfolioCollection canNotAddPortfolioErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:07:17' prior: 50876209!
test09PortfolioTreeCanNotHaveLoop

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioCollection new.
	portfolio3 := PortfolioCollection new.
	
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
					
	self should: [ portfolio3 add: portfolio1 ] raise: Error withMessageText: PortfolioCollection canNotAddPortfolioErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:07:20' prior: 50876089!
test10PortfolioTreeCanNotHavePortfolioAtDeep1

	| portfolio1 portfolio2 portfolio3 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	
	portfolio1 add: portfolio2.
				
	self should: [ portfolio1 add: portfolio3 ] raise: Error withMessageText: PortfolioCollection canNotAddPortfolioErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:07:23' prior: 50876190!
test11CanNotAddPortfolioIncludingOnOfItsAccounts

	| portfolio1 portfolio2 portfolio3 portfolio4 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio4 := PortfolioCollection new.
	
	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	portfolio4 add: portfolio2.
	portfolio1 add: portfolio3.
				
	self should: [ portfolio1 add: portfolio4 ] raise: Error withMessageText: PortfolioCollection canNotAddPortfolioErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:07:25' prior: 50876168!
test12CanNotAddPortfolioIncludingOnOfItsAccountsToTheLeft

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio4 := PortfolioCollection new.
	portfolio5 := PortfolioCollection new.	

	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	portfolio4 add: portfolio5.
	portfolio5 add: portfolio2.
	portfolio1 add: portfolio3.
				
	self should: [ portfolio1 add: portfolio4 ] raise: Error withMessageText: PortfolioCollection canNotAddPortfolioErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:07:28' prior: 50876106!
test13CanNotAddPortfolioIncludingOnOfItsAccountsToTheRight

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioCollection new.
	portfolio3 := PortfolioCollection new.	

	portfolio4 := PortfolioAccount with: account.
	portfolio5 := PortfolioAccount with: account.
	
	portfolio1 add: portfolio2.
	portfolio1 add: portfolio4.
	portfolio2 add: portfolio3.
	
	self should: [ portfolio3 add: portfolio5 ] raise: Error withMessageText: PortfolioCollection canNotAddPortfolioErrorDescription! !

!testRun: #PortfolioTest #test01PortfolioAccountStartsWithZeroBalance stamp: 'CM 11/9/2020 16:07:31'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioCollectionStartsWithZeroBalance stamp: 'CM 11/9/2020 16:07:31'!
PASSED!

!testRun: #PortfolioTest #test02IncreasingAccountBalanceIncreasesPortfolioAccountBalance stamp: 'CM 11/9/2020 16:07:31'!
PASSED!

!testRun: #PortfolioTest #test02IncreasingAccountBalanceIncreasesPortfolioCollectionBalance stamp: 'CM 11/9/2020 16:07:31'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioCollectionCanContainAnotherPorfolioCollection stamp: 'CM 11/9/2020 16:07:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioAccountDoNotKnowNotRegisteredTransactions stamp: 'CM 11/9/2020 16:07:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioCollectionDoNotKnowNotRegisteredTransactions stamp: 'CM 11/9/2020 16:07:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioAccountKnowsRegisteredTransactions stamp: 'CM 11/9/2020 16:07:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCollectionKnowsRegisteredTransactions stamp: 'CM 11/9/2020 16:07:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanNotAddItself stamp: 'CM 11/9/2020 16:07:31'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioAccountCanNotAddAnotherPortfolio stamp: 'CM 11/9/2020 16:07:31'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTreeCanNotHaveShortLoop stamp: 'CM 11/9/2020 16:07:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTreeCanNotHaveLoop stamp: 'CM 11/9/2020 16:07:31'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioTreeCanNotHavePortfolioAtDeep1 stamp: 'CM 11/9/2020 16:07:31'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioIncludingOnOfItsAccounts stamp: 'CM 11/9/2020 16:07:31'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddPortfolioIncludingOnOfItsAccountsToTheLeft stamp: 'CM 11/9/2020 16:07:31'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddPortfolioIncludingOnOfItsAccountsToTheRight stamp: 'CM 11/9/2020 16:07:31'!
PASSED!

account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioCollection new.
	portfolio3 := PortfolioCollection new.	

	portfolio4 := PortfolioAccount with: account.
	portfolio5 := PortfolioAccount with: account.
!

portfolio1 add: portfolio2.!
!Portfolio methodsFor: 'private' stamp: 'CM 11/9/2020 16:11:45'!
hasCommonPortfolioWith: aPortfolio

	self subclassResponsibility .


	! !
!PortfolioAccount methodsFor: 'private' stamp: 'CM 11/9/2020 16:11:45' overrides: 50876459!
hasCommonPortfolioWith: aPortfolio

	^ aPortfolio includes: account.


	
	! !
!PortfolioCollection methodsFor: 'private' stamp: 'CM 11/9/2020 16:11:45' overrides: 50876459!
hasCommonPortfolioWith: aPortfolio

	^ (self includes: aPortfolio) or: (portfolios anySatisfy: [ :pe | aPortfolio hasCommonAccountsWith: pe])! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:11:45' prior: 50874823!
sameTreeAs: aPortfolio 
	
	^ (self hasCommonPortfolioWith: aPortfolio) or: (parentPortfolios anySatisfy: [ :aParentPortfolio | aParentPortfolio sameTreeAs: aPortfolio ])! !
!PortfolioCollection methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:11:45' prior: 50876129 overrides: 50872382!
add: aPortfolio 
	
	(aPortfolio sameTreeAs: self) ifTrue: [ self error: self class canNotAddPortfolioErrorDescription ].
	(self sameTreeAs: aPortfolio) ifTrue: [ self error: self class canNotAddPortfolioErrorDescription ].
	
	(self hasCommonPortfolioWith: aPortfolio) ifTrue: [ self error: self class canNotAddPortfolioErrorDescription ].
	
	portfolios add: aPortfolio .
	aPortfolio addParent: self.! !
!PortfolioCollection methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:11:45' prior: 50874807 overrides: 50874841!
hasCommonAccountsWith: aPortfolio

	^ (self includes: aPortfolio) or: (portfolios anySatisfy: [ :pe | aPortfolio hasCommonPortfolioWith: pe])! !
!PortfolioCollection methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:11:45' prior: 50876471 overrides: 50876459!
hasCommonPortfolioWith: aPortfolio

	^ (self includes: aPortfolio) or: (portfolios anySatisfy: [ :pe | aPortfolio hasCommonPortfolioWith: pe])! !

!methodRemoval: Portfolio #hasCommonAccountsWith: stamp: 'CM 11/9/2020 16:11:45'!
hasCommonAccountsWith: aPortfolio

	self subclassResponsibility .


	!

!methodRemoval: PortfolioAccount #hasCommonAccountsWith: stamp: 'CM 11/9/2020 16:11:45'!
hasCommonAccountsWith: aPortfolio

	^ aPortfolio includes: account.


	
	!

!methodRemoval: PortfolioCollection #hasCommonAccountsWith: stamp: 'CM 11/9/2020 16:11:45'!
hasCommonAccountsWith: aPortfolio

	^ (self includes: aPortfolio) or: (portfolios anySatisfy: [ :pe | aPortfolio hasCommonPortfolioWith: pe])!

!testRun: #PortfolioTest #test01PortfolioAccountStartsWithZeroBalance stamp: 'CM 11/9/2020 16:11:49'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioCollectionStartsWithZeroBalance stamp: 'CM 11/9/2020 16:11:49'!
PASSED!

!testRun: #PortfolioTest #test02IncreasingAccountBalanceIncreasesPortfolioAccountBalance stamp: 'CM 11/9/2020 16:11:49'!
PASSED!

!testRun: #PortfolioTest #test02IncreasingAccountBalanceIncreasesPortfolioCollectionBalance stamp: 'CM 11/9/2020 16:11:49'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioCollectionCanContainAnotherPorfolioCollection stamp: 'CM 11/9/2020 16:11:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioAccountDoNotKnowNotRegisteredTransactions stamp: 'CM 11/9/2020 16:11:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioCollectionDoNotKnowNotRegisteredTransactions stamp: 'CM 11/9/2020 16:11:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioAccountKnowsRegisteredTransactions stamp: 'CM 11/9/2020 16:11:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCollectionKnowsRegisteredTransactions stamp: 'CM 11/9/2020 16:11:49'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanNotAddItself stamp: 'CM 11/9/2020 16:11:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioAccountCanNotAddAnotherPortfolio stamp: 'CM 11/9/2020 16:11:49'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTreeCanNotHaveShortLoop stamp: 'CM 11/9/2020 16:11:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTreeCanNotHaveLoop stamp: 'CM 11/9/2020 16:11:49'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioTreeCanNotHavePortfolioAtDeep1 stamp: 'CM 11/9/2020 16:11:49'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioIncludingOnOfItsAccounts stamp: 'CM 11/9/2020 16:11:49'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddPortfolioIncludingOnOfItsAccountsToTheLeft stamp: 'CM 11/9/2020 16:11:49'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddPortfolioIncludingOnOfItsAccountsToTheRight stamp: 'CM 11/9/2020 16:11:49'!
PASSED!
!Portfolio methodsFor: 'private' stamp: 'CM 11/9/2020 16:12:15'!
xxSameTreeAs: aPortfolio 
	
	^ (self hasCommonPortfolioWith: aPortfolio) or: (parentPortfolios anySatisfy: [ :aParentPortfolio | aParentPortfolio sameTreeAs: aPortfolio ])! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:12:15' prior: 50876479!
sameTreeAs: aPortfolio 
	
	^ (self hasCommonPortfolioWith: aPortfolio) or: (parentPortfolios anySatisfy: [ :aParentPortfolio | aParentPortfolio xxSameTreeAs: aPortfolio ])! !
!PortfolioCollection methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:12:15' prior: 50876489 overrides: 50872382!
add: aPortfolio 
	
	(aPortfolio xxSameTreeAs: self) ifTrue: [ self error: self class canNotAddPortfolioErrorDescription ].
	(self xxSameTreeAs: aPortfolio) ifTrue: [ self error: self class canNotAddPortfolioErrorDescription ].
	
	(self hasCommonPortfolioWith: aPortfolio) ifTrue: [ self error: self class canNotAddPortfolioErrorDescription ].
	
	portfolios add: aPortfolio .
	aPortfolio addParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:12:15' prior: 50876602!
xxSameTreeAs: aPortfolio 
	
	^ (self hasCommonPortfolioWith: aPortfolio) or: (parentPortfolios anySatisfy: [ :aParentPortfolio | aParentPortfolio xxSameTreeAs: aPortfolio ])! !

!methodRemoval: Portfolio #sameTreeAs: stamp: 'CM 11/9/2020 16:12:15'!
sameTreeAs: aPortfolio 
	
	^ (self hasCommonPortfolioWith: aPortfolio) or: (parentPortfolios anySatisfy: [ :aParentPortfolio | aParentPortfolio xxSameTreeAs: aPortfolio ])!
!PortfolioCollection methodsFor: 'adding' stamp: 'CM 11/9/2020 16:12:41'!
sameTreeAs: aPortfolio

	^ aPortfolio xxSameTreeAs: self! !
!PortfolioCollection methodsFor: 'adding' stamp: 'CM 11/9/2020 16:12:41' prior: 50876621 overrides: 50872382!
add: aPortfolio 
	
	(self sameTreeAs: aPortfolio) ifTrue: [ self error: self class canNotAddPortfolioErrorDescription ].
	(self xxSameTreeAs: aPortfolio) ifTrue: [ self error: self class canNotAddPortfolioErrorDescription ].
	
	(self hasCommonPortfolioWith: aPortfolio) ifTrue: [ self error: self class canNotAddPortfolioErrorDescription ].
	
	portfolios add: aPortfolio .
	aPortfolio addParent: self.! !
!PortfolioCollection methodsFor: 'adding' stamp: 'CM 11/9/2020 16:12:49' prior: 50876659 overrides: 50872382!
add: aPortfolio 
	
	(self sameTreeAs: aPortfolio) ifTrue: [ self error: self class canNotAddPortfolioErrorDescription ].
	
	(self hasCommonPortfolioWith: aPortfolio) ifTrue: [ self error: self class canNotAddPortfolioErrorDescription ].
	
	portfolios add: aPortfolio .
	aPortfolio addParent: self.! !
!PortfolioCollection methodsFor: 'adding' stamp: 'CM 11/9/2020 16:12:58' prior: 50876653!
sameTreeAs: aPortfolio

	^ (aPortfolio xxSameTreeAs: self) or: (self xxSameTreeAs: aPortfolio)! !
!Portfolio methodsFor: 'private' stamp: 'CM 11/9/2020 16:14:20'!
hasInTree: aPortfolio 
	
	^ (self hasCommonPortfolioWith: aPortfolio) or: (parentPortfolios anySatisfy: [ :aParentPortfolio | aParentPortfolio xxSameTreeAs: aPortfolio ])! !
!PortfolioCollection methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:14:20' prior: 50876689!
sameTreeAs: aPortfolio

	^ (aPortfolio hasInTree: self) or: (self hasInTree: aPortfolio)! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:14:20' prior: 50876637!
xxSameTreeAs: aPortfolio 
	
	^ (self hasCommonPortfolioWith: aPortfolio) or: (parentPortfolios anySatisfy: [ :aParentPortfolio | aParentPortfolio hasInTree: aPortfolio ])! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:14:20' prior: 50876695!
hasInTree: aPortfolio 
	
	^ (self hasCommonPortfolioWith: aPortfolio) or: (parentPortfolios anySatisfy: [ :aParentPortfolio | aParentPortfolio hasInTree: aPortfolio ])! !

!methodRemoval: Portfolio #xxSameTreeAs: stamp: 'CM 11/9/2020 16:14:20'!
xxSameTreeAs: aPortfolio 
	
	^ (self hasCommonPortfolioWith: aPortfolio) or: (parentPortfolios anySatisfy: [ :aParentPortfolio | aParentPortfolio hasInTree: aPortfolio ])!

!testRun: #PortfolioTest #test01PortfolioAccountStartsWithZeroBalance stamp: 'CM 11/9/2020 16:14:23'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioCollectionStartsWithZeroBalance stamp: 'CM 11/9/2020 16:14:23'!
PASSED!

!testRun: #PortfolioTest #test02IncreasingAccountBalanceIncreasesPortfolioAccountBalance stamp: 'CM 11/9/2020 16:14:23'!
PASSED!

!testRun: #PortfolioTest #test02IncreasingAccountBalanceIncreasesPortfolioCollectionBalance stamp: 'CM 11/9/2020 16:14:23'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioCollectionCanContainAnotherPorfolioCollection stamp: 'CM 11/9/2020 16:14:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioAccountDoNotKnowNotRegisteredTransactions stamp: 'CM 11/9/2020 16:14:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioCollectionDoNotKnowNotRegisteredTransactions stamp: 'CM 11/9/2020 16:14:23'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioAccountKnowsRegisteredTransactions stamp: 'CM 11/9/2020 16:14:23'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCollectionKnowsRegisteredTransactions stamp: 'CM 11/9/2020 16:14:23'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanNotAddItself stamp: 'CM 11/9/2020 16:14:23'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioAccountCanNotAddAnotherPortfolio stamp: 'CM 11/9/2020 16:14:23'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTreeCanNotHaveShortLoop stamp: 'CM 11/9/2020 16:14:23'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTreeCanNotHaveLoop stamp: 'CM 11/9/2020 16:14:23'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioTreeCanNotHavePortfolioAtDeep1 stamp: 'CM 11/9/2020 16:14:23'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioIncludingOnOfItsAccounts stamp: 'CM 11/9/2020 16:14:23'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddPortfolioIncludingOnOfItsAccountsToTheLeft stamp: 'CM 11/9/2020 16:14:23'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddPortfolioIncludingOnOfItsAccountsToTheRight stamp: 'CM 11/9/2020 16:14:23'!
PASSED!

----SNAPSHOT----(9 November 2020 16:14:28) CuisUniversity-4384.image priorSource: 17388946!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:21:05' prior: 50875521!
test05PortfolioAccountKnowsRegisteredTransactions 

	| portfolio account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 50 on: account.
	portfolio := PortfolioAccount with: account.
		
	self assert: 1 equals: portfolio transactions size.
	self assert: (portfolio hasRegistered: deposit).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:21:12' prior: 50875534!
test05PortfolioCollectionKnowsRegisteredTransactions 

	| portfolio1 portfolio2 account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 50 on: account.
	portfolio1 := PortfolioAccount with: account.

	portfolio2 := PortfolioCollection new.	
	portfolio2 add: portfolio1 .
	
	self assert: 1 equals: portfolio2 transactions size.
	self assert: (portfolio2 hasRegistered: deposit).! !

!testRun: #PortfolioTest #test01PortfolioAccountStartsWithZeroBalance stamp: 'CM 11/9/2020 16:21:30'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioCollectionStartsWithZeroBalance stamp: 'CM 11/9/2020 16:21:30'!
PASSED!

!testRun: #PortfolioTest #test02IncreasingAccountBalanceIncreasesPortfolioAccountBalance stamp: 'CM 11/9/2020 16:21:30'!
PASSED!

!testRun: #PortfolioTest #test02IncreasingAccountBalanceIncreasesPortfolioCollectionBalance stamp: 'CM 11/9/2020 16:21:30'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioCollectionCanContainAnotherPorfolioCollection stamp: 'CM 11/9/2020 16:21:30'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioAccountDoNotKnowNotRegisteredTransactions stamp: 'CM 11/9/2020 16:21:30'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioCollectionDoNotKnowNotRegisteredTransactions stamp: 'CM 11/9/2020 16:21:30'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioAccountKnowsRegisteredTransactions stamp: 'CM 11/9/2020 16:21:30'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCollectionKnowsRegisteredTransactions stamp: 'CM 11/9/2020 16:21:30'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanNotAddItself stamp: 'CM 11/9/2020 16:21:30'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioAccountCanNotAddAnotherPortfolio stamp: 'CM 11/9/2020 16:21:30'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTreeCanNotHaveShortLoop stamp: 'CM 11/9/2020 16:21:30'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTreeCanNotHaveLoop stamp: 'CM 11/9/2020 16:21:30'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioTreeCanNotHavePortfolioAtDeep1 stamp: 'CM 11/9/2020 16:21:30'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioIncludingOnOfItsAccounts stamp: 'CM 11/9/2020 16:21:30'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddPortfolioIncludingOnOfItsAccountsToTheLeft stamp: 'CM 11/9/2020 16:21:30'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddPortfolioIncludingOnOfItsAccountsToTheRight stamp: 'CM 11/9/2020 16:21:30'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:23:29' prior: 50876801!
test05PortfolioAccountKnowsRegisteredTransactions 

	| portfolio account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 50 on: account.
	portfolio := PortfolioAccount with: account.
		
	self assert: (portfolio hasRegistered: deposit).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:23:36' prior: 50876815!
test05PortfolioCollectionKnowsRegisteredTransactions 

	| portfolio1 portfolio2 account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 50 on: account.
	portfolio1 := PortfolioAccount with: account.

	portfolio2 := PortfolioCollection new.	
	portfolio2 add: portfolio1 .
	
	self assert: (portfolio2 hasRegistered: deposit).! !

!testRun: #PortfolioTest #test01PortfolioAccountStartsWithZeroBalance stamp: 'CM 11/9/2020 16:23:39'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioCollectionStartsWithZeroBalance stamp: 'CM 11/9/2020 16:23:39'!
PASSED!

!testRun: #PortfolioTest #test02IncreasingAccountBalanceIncreasesPortfolioAccountBalance stamp: 'CM 11/9/2020 16:23:39'!
PASSED!

!testRun: #PortfolioTest #test02IncreasingAccountBalanceIncreasesPortfolioCollectionBalance stamp: 'CM 11/9/2020 16:23:39'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioCollectionCanContainAnotherPorfolioCollection stamp: 'CM 11/9/2020 16:23:39'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioAccountDoNotKnowNotRegisteredTransactions stamp: 'CM 11/9/2020 16:23:39'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioCollectionDoNotKnowNotRegisteredTransactions stamp: 'CM 11/9/2020 16:23:39'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioAccountKnowsRegisteredTransactions stamp: 'CM 11/9/2020 16:23:39'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCollectionKnowsRegisteredTransactions stamp: 'CM 11/9/2020 16:23:39'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanNotAddItself stamp: 'CM 11/9/2020 16:23:39'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioAccountCanNotAddAnotherPortfolio stamp: 'CM 11/9/2020 16:23:39'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTreeCanNotHaveShortLoop stamp: 'CM 11/9/2020 16:23:39'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTreeCanNotHaveLoop stamp: 'CM 11/9/2020 16:23:39'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioTreeCanNotHavePortfolioAtDeep1 stamp: 'CM 11/9/2020 16:23:39'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioIncludingOnOfItsAccounts stamp: 'CM 11/9/2020 16:23:39'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddPortfolioIncludingOnOfItsAccountsToTheLeft stamp: 'CM 11/9/2020 16:23:39'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddPortfolioIncludingOnOfItsAccountsToTheRight stamp: 'CM 11/9/2020 16:23:39'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:25:28'!
test04PortfolioKnowsItsTransactions 

	| portfolio1 portfolio2 account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 50 on: account.
	portfolio1 := PortfolioAccount with: account.
	
	portfolio2 := PortfolioCollection new.
	portfolio1 add: portfolio2.
		
	self assert: (portfolio2 transactions size).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:27:18'!
test10PortfolioTreeCanNotHaveSameAccountAtDepth1

	| portfolio1 portfolio2 portfolio3 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	
	portfolio1 add: portfolio2.
				
	self should: [ portfolio1 add: portfolio3 ] raise: Error withMessageText: PortfolioCollection canNotAddPortfolioErrorDescription! !

!methodRemoval: PortfolioTest #test10PortfolioTreeCanNotHavePortfolioAtDeep1 stamp: 'CM 11/9/2020 16:27:18'!
test10PortfolioTreeCanNotHavePortfolioAtDeep1

	| portfolio1 portfolio2 portfolio3 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	
	portfolio1 add: portfolio2.
				
	self should: [ portfolio1 add: portfolio3 ] raise: Error withMessageText: PortfolioCollection canNotAddPortfolioErrorDescription!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:28:04'!
test14PortfolioKnowsItsTransactions 

	| portfolio1 portfolio2 account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 50 on: account.
	portfolio1 := PortfolioAccount with: account.
	
	portfolio2 := PortfolioCollection new.
	portfolio1 add: portfolio2.
		
	self assert: 1 equals: portfolio2 transactions size.
	self assert: (portfolio2 transactions includes: deposit).
! !

!methodRemoval: PortfolioTest #test04PortfolioKnowsItsTransactions stamp: 'CM 11/9/2020 16:28:07'!
test04PortfolioKnowsItsTransactions 

	| portfolio1 portfolio2 account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 50 on: account.
	portfolio1 := PortfolioAccount with: account.
	
	portfolio2 := PortfolioCollection new.
	portfolio1 add: portfolio2.
		
	self assert: (portfolio2 transactions size).!

!testRun: #PortfolioTest #test01PortfolioAccountStartsWithZeroBalance stamp: 'CM 11/9/2020 16:28:09'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioCollectionStartsWithZeroBalance stamp: 'CM 11/9/2020 16:28:09'!
PASSED!

!testRun: #PortfolioTest #test02IncreasingAccountBalanceIncreasesPortfolioAccountBalance stamp: 'CM 11/9/2020 16:28:09'!
PASSED!

!testRun: #PortfolioTest #test02IncreasingAccountBalanceIncreasesPortfolioCollectionBalance stamp: 'CM 11/9/2020 16:28:09'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioCollectionCanContainAnotherPorfolioCollection stamp: 'CM 11/9/2020 16:28:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioAccountDoNotKnowNotRegisteredTransactions stamp: 'CM 11/9/2020 16:28:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioCollectionDoNotKnowNotRegisteredTransactions stamp: 'CM 11/9/2020 16:28:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioAccountKnowsRegisteredTransactions stamp: 'CM 11/9/2020 16:28:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCollectionKnowsRegisteredTransactions stamp: 'CM 11/9/2020 16:28:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanNotAddItself stamp: 'CM 11/9/2020 16:28:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioAccountCanNotAddAnotherPortfolio stamp: 'CM 11/9/2020 16:28:09'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTreeCanNotHaveShortLoop stamp: 'CM 11/9/2020 16:28:09'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTreeCanNotHaveLoop stamp: 'CM 11/9/2020 16:28:09'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioTreeCanNotHaveSameAccountAtDepth1 stamp: 'CM 11/9/2020 16:28:09'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioIncludingOnOfItsAccounts stamp: 'CM 11/9/2020 16:28:09'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddPortfolioIncludingOnOfItsAccountsToTheLeft stamp: 'CM 11/9/2020 16:28:09'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddPortfolioIncludingOnOfItsAccountsToTheRight stamp: 'CM 11/9/2020 16:28:09'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioKnowsItsTransactions stamp: 'CM 11/9/2020 16:28:09'!
ERROR!

!testRun: #PortfolioTest #test14PortfolioKnowsItsTransactions stamp: 'CM 11/9/2020 16:28:09'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:28:33' prior: 50877030!
test14PortfolioKnowsItsTransactions 

	| portfolio1 portfolio2 account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 50 on: account.
	portfolio1 := PortfolioAccount with: account.
	
	portfolio2 := PortfolioCollection new.
	portfolio2 add: portfolio1.
		
	self assert: 1 equals: portfolio2 transactions size.
	self assert: (portfolio2 transactions includes: deposit).
! !

!testRun: #PortfolioTest #test01PortfolioAccountStartsWithZeroBalance stamp: 'CM 11/9/2020 16:28:38'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioCollectionStartsWithZeroBalance stamp: 'CM 11/9/2020 16:28:38'!
PASSED!

!testRun: #PortfolioTest #test02IncreasingAccountBalanceIncreasesPortfolioAccountBalance stamp: 'CM 11/9/2020 16:28:38'!
PASSED!

!testRun: #PortfolioTest #test02IncreasingAccountBalanceIncreasesPortfolioCollectionBalance stamp: 'CM 11/9/2020 16:28:38'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioCollectionCanContainAnotherPorfolioCollection stamp: 'CM 11/9/2020 16:28:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioAccountDoNotKnowNotRegisteredTransactions stamp: 'CM 11/9/2020 16:28:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioCollectionDoNotKnowNotRegisteredTransactions stamp: 'CM 11/9/2020 16:28:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioAccountKnowsRegisteredTransactions stamp: 'CM 11/9/2020 16:28:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCollectionKnowsRegisteredTransactions stamp: 'CM 11/9/2020 16:28:38'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanNotAddItself stamp: 'CM 11/9/2020 16:28:38'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioAccountCanNotAddAnotherPortfolio stamp: 'CM 11/9/2020 16:28:38'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTreeCanNotHaveShortLoop stamp: 'CM 11/9/2020 16:28:38'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTreeCanNotHaveLoop stamp: 'CM 11/9/2020 16:28:38'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioTreeCanNotHaveSameAccountAtDepth1 stamp: 'CM 11/9/2020 16:28:38'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioIncludingOnOfItsAccounts stamp: 'CM 11/9/2020 16:28:38'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddPortfolioIncludingOnOfItsAccountsToTheLeft stamp: 'CM 11/9/2020 16:28:38'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddPortfolioIncludingOnOfItsAccountsToTheRight stamp: 'CM 11/9/2020 16:28:38'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioKnowsItsTransactions stamp: 'CM 11/9/2020 16:28:38'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:29:36'!
test12CanNotAddPortfolioIncludingSameAccountToTheLeft

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio4 := PortfolioCollection new.
	portfolio5 := PortfolioCollection new.	

	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	portfolio4 add: portfolio5.
	portfolio5 add: portfolio2.
	portfolio1 add: portfolio3.
				
	self should: [ portfolio1 add: portfolio4 ] raise: Error withMessageText: PortfolioCollection canNotAddPortfolioErrorDescription! !

!methodRemoval: PortfolioTest #test12CanNotAddPortfolioIncludingOnOfItsAccountsToTheLeft stamp: 'CM 11/9/2020 16:29:36'!
test12CanNotAddPortfolioIncludingOnOfItsAccountsToTheLeft

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio4 := PortfolioCollection new.
	portfolio5 := PortfolioCollection new.	

	portfolio2 := PortfolioAccount with: account.
	portfolio3 := PortfolioAccount with: account.
	
	portfolio4 add: portfolio5.
	portfolio5 add: portfolio2.
	portfolio1 add: portfolio3.
				
	self should: [ portfolio1 add: portfolio4 ] raise: Error withMessageText: PortfolioCollection canNotAddPortfolioErrorDescription!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CM 11/9/2020 16:30:07'!
test13CanNotAddPortfolioIncludingSameAccountToTheRight

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioCollection new.
	portfolio3 := PortfolioCollection new.	

	portfolio4 := PortfolioAccount with: account.
	portfolio5 := PortfolioAccount with: account.
	
	portfolio1 add: portfolio2.
	portfolio1 add: portfolio4.
	portfolio2 add: portfolio3.
	
	self should: [ portfolio3 add: portfolio5 ] raise: Error withMessageText: PortfolioCollection canNotAddPortfolioErrorDescription! !

!methodRemoval: PortfolioTest #test13CanNotAddPortfolioIncludingOnOfItsAccountsToTheRight stamp: 'CM 11/9/2020 16:30:07'!
test13CanNotAddPortfolioIncludingOnOfItsAccountsToTheRight

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	account := ReceptiveAccount new.
	
	portfolio1 := PortfolioCollection new.
	portfolio2 := PortfolioCollection new.
	portfolio3 := PortfolioCollection new.	

	portfolio4 := PortfolioAccount with: account.
	portfolio5 := PortfolioAccount with: account.
	
	portfolio1 add: portfolio2.
	portfolio1 add: portfolio4.
	portfolio2 add: portfolio3.
	
	self should: [ portfolio3 add: portfolio5 ] raise: Error withMessageText: PortfolioCollection canNotAddPortfolioErrorDescription!

!testRun: #PortfolioTest #test01PortfolioAccountStartsWithZeroBalance stamp: 'CM 11/9/2020 16:30:11'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioCollectionStartsWithZeroBalance stamp: 'CM 11/9/2020 16:30:11'!
PASSED!

!testRun: #PortfolioTest #test02IncreasingAccountBalanceIncreasesPortfolioAccountBalance stamp: 'CM 11/9/2020 16:30:11'!
PASSED!

!testRun: #PortfolioTest #test02IncreasingAccountBalanceIncreasesPortfolioCollectionBalance stamp: 'CM 11/9/2020 16:30:11'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioCollectionCanContainAnotherPorfolioCollection stamp: 'CM 11/9/2020 16:30:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioAccountDoNotKnowNotRegisteredTransactions stamp: 'CM 11/9/2020 16:30:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioCollectionDoNotKnowNotRegisteredTransactions stamp: 'CM 11/9/2020 16:30:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioAccountKnowsRegisteredTransactions stamp: 'CM 11/9/2020 16:30:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCollectionKnowsRegisteredTransactions stamp: 'CM 11/9/2020 16:30:11'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanNotAddItself stamp: 'CM 11/9/2020 16:30:11'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioAccountCanNotAddAnotherPortfolio stamp: 'CM 11/9/2020 16:30:11'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTreeCanNotHaveShortLoop stamp: 'CM 11/9/2020 16:30:11'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTreeCanNotHaveLoop stamp: 'CM 11/9/2020 16:30:11'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioTreeCanNotHaveSameAccountAtDepth1 stamp: 'CM 11/9/2020 16:30:11'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioIncludingOnOfItsAccounts stamp: 'CM 11/9/2020 16:30:11'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddPortfolioIncludingSameAccountToTheLeft stamp: 'CM 11/9/2020 16:30:11'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddPortfolioIncludingSameAccountToTheRight stamp: 'CM 11/9/2020 16:30:11'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioKnowsItsTransactions stamp: 'CM 11/9/2020 16:30:11'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioAccountStartsWithZeroBalance stamp: 'CM 11/9/2020 16:37:02'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioCollectionStartsWithZeroBalance stamp: 'CM 11/9/2020 16:37:02'!
PASSED!

!testRun: #PortfolioTest #test02IncreasingAccountBalanceIncreasesPortfolioAccountBalance stamp: 'CM 11/9/2020 16:37:02'!
PASSED!

!testRun: #PortfolioTest #test02IncreasingAccountBalanceIncreasesPortfolioCollectionBalance stamp: 'CM 11/9/2020 16:37:02'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioCollectionCanContainAnotherPorfolioCollection stamp: 'CM 11/9/2020 16:37:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioAccountDoNotKnowNotRegisteredTransactions stamp: 'CM 11/9/2020 16:37:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioCollectionDoNotKnowNotRegisteredTransactions stamp: 'CM 11/9/2020 16:37:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioAccountKnowsRegisteredTransactions stamp: 'CM 11/9/2020 16:37:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCollectionKnowsRegisteredTransactions stamp: 'CM 11/9/2020 16:37:02'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanNotAddItself stamp: 'CM 11/9/2020 16:37:02'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioAccountCanNotAddAnotherPortfolio stamp: 'CM 11/9/2020 16:37:02'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTreeCanNotHaveShortLoop stamp: 'CM 11/9/2020 16:37:02'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTreeCanNotHaveLoop stamp: 'CM 11/9/2020 16:37:02'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioTreeCanNotHaveSameAccountAtDepth1 stamp: 'CM 11/9/2020 16:37:02'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioIncludingOnOfItsAccounts stamp: 'CM 11/9/2020 16:37:02'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddPortfolioIncludingSameAccountToTheLeft stamp: 'CM 11/9/2020 16:37:02'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddPortfolioIncludingSameAccountToTheRight stamp: 'CM 11/9/2020 16:37:02'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioKnowsItsTransactions stamp: 'CM 11/9/2020 16:37:02'!
PASSED!

----SNAPSHOT----(9 November 2020 16:37:14) CuisUniversity-4384.image priorSource: 17444692!
!PortfolioCollection methodsFor: 'adding' stamp: 'CM 11/9/2020 16:38:20' prior: 50876676 overrides: 50872382!
add: aPortfolio 
	
	(self sameTreeAs: aPortfolio) ifTrue: [ self error: self class canNotAddPortfolioErrorDescription ].
	
	"(self hasCommonPortfolioWith: aPortfolio) ifTrue: [ self error: self class canNotAddPortfolioErrorDescription ]."
	
	portfolios add: aPortfolio .
	aPortfolio addParent: self.! !

!testRun: #PortfolioTest #test01PortfolioAccountStartsWithZeroBalance stamp: 'CM 11/9/2020 16:38:22'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioCollectionStartsWithZeroBalance stamp: 'CM 11/9/2020 16:38:22'!
PASSED!

!testRun: #PortfolioTest #test02IncreasingAccountBalanceIncreasesPortfolioAccountBalance stamp: 'CM 11/9/2020 16:38:22'!
PASSED!

!testRun: #PortfolioTest #test02IncreasingAccountBalanceIncreasesPortfolioCollectionBalance stamp: 'CM 11/9/2020 16:38:22'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioCollectionCanContainAnotherPorfolioCollection stamp: 'CM 11/9/2020 16:38:22'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioAccountDoNotKnowNotRegisteredTransactions stamp: 'CM 11/9/2020 16:38:22'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioCollectionDoNotKnowNotRegisteredTransactions stamp: 'CM 11/9/2020 16:38:22'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioAccountKnowsRegisteredTransactions stamp: 'CM 11/9/2020 16:38:22'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCollectionKnowsRegisteredTransactions stamp: 'CM 11/9/2020 16:38:22'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanNotAddItself stamp: 'CM 11/9/2020 16:38:22'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioAccountCanNotAddAnotherPortfolio stamp: 'CM 11/9/2020 16:38:22'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTreeCanNotHaveShortLoop stamp: 'CM 11/9/2020 16:38:22'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTreeCanNotHaveLoop stamp: 'CM 11/9/2020 16:38:22'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioTreeCanNotHaveSameAccountAtDepth1 stamp: 'CM 11/9/2020 16:38:22'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddPortfolioIncludingOnOfItsAccounts stamp: 'CM 11/9/2020 16:38:22'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddPortfolioIncludingSameAccountToTheLeft stamp: 'CM 11/9/2020 16:38:22'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddPortfolioIncludingSameAccountToTheRight stamp: 'CM 11/9/2020 16:38:22'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioKnowsItsTransactions stamp: 'CM 11/9/2020 16:38:22'!
PASSED!
!PortfolioCollection methodsFor: 'adding' stamp: 'CM 11/9/2020 16:38:38' prior: 50877436 overrides: 50872382!
add: aPortfolio 
	
	(self sameTreeAs: aPortfolio) ifTrue: [ self error: self class canNotAddPortfolioErrorDescription ].
	
	portfolios add: aPortfolio .
	aPortfolio addParent: self.! !