----End fileIn of /home/belu/Documents/ING_SOFT/20-TusLibros/Iteracion1/TusLibros-18.st----!

Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'BT 11/24/2020 00:45:38'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'
	
	
	!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BT 11/24/2020 00:46:00'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'support' stamp: 'BT 11/24/2020 00:46:57' prior: 50869806!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CartTest methodsFor: 'support' stamp: 'BT 11/24/2020 00:49:01' prior: 50869839!
defaultCatalog
	
	| catalog |
	catalog := Dictionary new. 
	! !
!CartTest methodsFor: 'support' stamp: 'BT 11/24/2020 00:49:23' prior: 50869844!
defaultCatalog
	
	| catalog |
	catalog := Dictionary new. 
! !
!CartTest methodsFor: 'support' stamp: 'BT 11/24/2020 00:50:37' prior: 50869849!
defaultCatalog
	
	| catalog |
	catalog := Dictionary new. 
	catalog at: (self itemSellByTheStore) put: 3,5. 
! !
!CartTest methodsFor: 'support' stamp: 'BT 11/24/2020 00:50:54' prior: 50869854!
defaultCatalog
	
	| catalog |
	catalog := Dictionary new. 
	catalog at: (self itemSellByTheStore) put: 3,5. 
	^ catalog 
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BT 11/24/2020 00:51:02'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BT 11/24/2020 00:51:02'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BT 11/24/2020 00:51:02'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BT 11/24/2020 00:51:02'!
ERROR!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BT 11/24/2020 00:51:02'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BT 11/24/2020 00:51:02'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BT 11/24/2020 00:51:02'!
ERROR!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BT 11/24/2020 00:51:02'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BT 11/24/2020 00:51:13'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BT 11/24/2020 00:51:13'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'BT 11/24/2020 00:51:28' prior: 50869861!
defaultCatalog
	
	| catalog |
	catalog := Dictionary new. 
	catalog at: (self itemSellByTheStore) put: 3.5. 
	^ catalog 
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BT 11/24/2020 00:51:39'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BT 11/24/2020 00:51:44'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BT 11/24/2020 00:51:44'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BT 11/24/2020 00:51:44'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BT 11/24/2020 00:51:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BT 11/24/2020 00:51:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BT 11/24/2020 00:51:44'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BT 11/24/2020 00:51:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BT 11/24/2020 00:51:44'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BT 11/24/2020 00:52:09'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'BT 11/24/2020 00:52:54' prior: 50869654!
assertIsValidItem: anItem

	(catalog at: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BT 11/24/2020 00:52:59'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'BT 11/24/2020 00:53:22' prior: 50869938!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BT 11/24/2020 00:53:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BT 11/24/2020 00:53:37'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BT 11/24/2020 00:53:37'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BT 11/24/2020 00:53:37'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BT 11/24/2020 00:53:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BT 11/24/2020 00:53:37'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BT 11/24/2020 00:53:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BT 11/24/2020 00:53:37'!
PASSED!
!CashierTest methodsFor: 'no messages' stamp: 'BT 11/24/2020 00:54:39'!
defaultCatalog
	
	| catalog |
	catalog := Dictionary new. 
	catalog at: 'go' put: 3.5. 
	^ catalog 
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 00:54:55'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 00:55:31' prior: 50869980!
defaultCatalog
	
	| catalog |
	catalog := Dictionary new. 
	catalog at: 'anItemToSell' put: 3.5. 
	catalog at: 'anotherItemToSell' put: 3.9. 
	^ catalog 
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 00:56:16'!
createsCashier
	^ Cashier new.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 00:56:22'!
createCashier
	^ Cashier new.! !

!methodRemoval: CashierTest #createsCashier stamp: 'BT 11/24/2020 00:56:28'!
createsCashier
	^ Cashier new.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 00:57:25'!
test01checkOut
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 00:57:46' prior: 50869986!
createCart
	
	| cart |
	cart := Cart acceptingItemsOf: self defaultCatalog.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 00:58:21' prior: 50870014!
createCart
	
	| cart |
	cart := Cart acceptingItemsOf: self defaultCatalog.

	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:00:48' prior: 50870020!
createCart
	
	| cart |
	cart := Cart acceptingItemsOf: self defaultCatalog.

	cart add : 2 of: 'anItemToSell'. 
	cart add: 3 of: 'anotherItemToSell'. 
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:03:46'!
test01checkOutCartWithOneItemWithValidCardWorksCorrectly
	
! !

!methodRemoval: CashierTest #test01checkOut stamp: 'BT 11/24/2020 01:03:51'!
test01checkOut
!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:04:22'!
createCartWithManyItems
	
	| cart |
	cart := Cart acceptingItemsOf: self defaultCatalog.

	cart add : 2 of: 'anItemToSell'. 
	cart add: 3 of: 'anotherItemToSell'. 
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:04:37'!
createCartWithOneItem
	
	| cart |
	cart := Cart acceptingItemsOf: self defaultCatalog.

	cart add : 2 of: 'anItemToSell'. 
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:04:53' prior: 50870050!
createCartWithOneItem
	
	| cart |
	cart := Cart acceptingItemsOf: self defaultCatalog.

	cart add : 'anItemToSell'. 
	^cart
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:04:56' prior: 50870057!
createCartWithOneItem
	
	| cart |
	cart := Cart acceptingItemsOf: self defaultCatalog.

	cart add : 'anItemToSell'. 
	^ cart
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:04:59' prior: 50870064!
createCartWithOneItem
	
	| cart |
	cart := Cart acceptingItemsOf: self defaultCatalog.
	cart add : 'anItemToSell'. 
	^ cart
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:05:08' prior: 50870042!
createCartWithManyItems
	
	| cart |
	cart := Cart acceptingItemsOf: self defaultCatalog.

	cart add : 2 of: 'anItemToSell'. 
	cart add: 3 of: 'anotherItemToSell'. 
	
	^ cart
	! !

!methodRemoval: CashierTest #createCart stamp: 'BT 11/24/2020 01:05:16'!
createCart
	
	| cart |
	cart := Cart acceptingItemsOf: self defaultCatalog.

	cart add : 2 of: 'anItemToSell'. 
	cart add: 3 of: 'anotherItemToSell'. 
	!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:05:46' prior: 50870034!
test01checkOutCartWithOneItemWithValidCardWorksCorrectly

	| cashier |
	cashier := self createCashier.
	
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:06:41' prior: 50870095!
test01checkOutCartWithOneItemWithValidCardWorksCorrectly

	| cashier cartWithOneItem |
	cashier := self createCashier.
	cartWithOneItem := self createCartWithOneItem.
	cashier checkOut
	
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:07:09' prior: 50870102!
test01checkOutCartWithOneItemWithValidCardWorksCorrectly

	| cashier cartWithOneItem |
	cashier := self createCashier.
	cartWithOneItem := self createCartWithOneItem.
	

	
! !

Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'BT 11/24/2020 01:07:49'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #CreditCard
	instanceVariableNames: 'expiration number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'BT 11/24/2020 01:08:37'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard class methodsFor: 'no messages' stamp: 'BT 11/24/2020 01:11:01'!
of: cardOwner expiratingOn: monthOfExpiration number: cardNumber
	^ self new of: cardOwner expiratingOn: monthOfExpiration number: cardNumber.! !
!CreditCard methodsFor: 'no messages' stamp: 'BT 11/24/2020 01:11:37'!
of: cardOwner expiratingOn: monthOfExpiration number: cardNumber
	owner := cardOwner.
	expiration := monthOfExpiration.
	number := cardNumber.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:15:02'!
createValidCreditCard
	^ CreditCard of: 'Carlitos Ticona' expiratingOn: GregorianMonthOfYear number: 009.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:18:03' prior: 50870158!
createValidCreditCard

	| monthOfExpiration |
	monthOfExpiration := GregorianMonthOfYear year: (GregorianYear createYear: 2020) month: (GregorianMonth december).
	
	^ CreditCard of: 'Carlitos Ticona' expiratingOn: monthOfExpiration number: 009.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:18:41'!
createInvalidCreditCard

	| monthOfExpiration |
	monthOfExpiration := GregorianMonthOfYear year: (GregorianYear createYear: 2020) month: (GregorianMonth february).
	
	^ CreditCard of: 'Carlitos Ticona' expiratingOn: monthOfExpiration number: 009.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:20:45' prior: 50870165!
createValidCreditCard

	| monthOfExpiration |
	monthOfExpiration := GregorianMonthOfYear current.
	
	^ CreditCard of: 'Carlitos Ticona' expiratingOn: monthOfExpiration number: 009.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:21:34' prior: 50870187!
createValidCreditCard

	| monthOfExpiration |
	monthOfExpiration := GregorianMonthOfYear current.
	
	^ CreditCard of: 'Carlitos Ticona' expiratingOn: monthOfExpiration number: 009.! !

GregorianMonthOfYear current!

GregorianMonthOfYear current next!

GregorianMonthOfYear current next next !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:22:11' prior: 50870196!
createValidCreditCard

	| monthOfExpiration |
	monthOfExpiration := GregorianMonthOfYear current next.
	
	^ CreditCard of: 'Carlitos Ticona' expiratingOn: monthOfExpiration number: 009.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:22:38' prior: 50870176!
createInvalidCreditCard

	| monthOfExpiration |
	monthOfExpiration := GregorianMonthOfYear current previous.
	
	^ CreditCard of: 'Carlitos Ticona' expiratingOn: monthOfExpiration number: 009.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:24:29' prior: 50870112!
test01checkOutCartWithOneItemWithValidCardWorksCorrectly

	| cashier cartWithOneItem |
	cashier := self createCashier.
	cartWithOneItem := self createCartWithOneItem.
	cashier checkOut: cartWithOneItem usingCreditCard: (self createValidCreditCard) of: 'Carlitos Ticona' .
	
	

	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:27:27' prior: 50870228!
test01checkOutCartWithOneItemWithValidCardWorksCorrectly

	| cashier cartWithOneItem ticket |
	cashier := self createCashier.
	cartWithOneItem := self createCartWithOneItem.
	ticket := cashier checkOut: cartWithOneItem usingCreditCard: (self createValidCreditCard) of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 3.5).
	
	

	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:28:56' prior: 50870240!
test01checkOutCartWithOneItemWithValidCardWorksCorrectly

	| cashier cartWithOneItem ticket creditCart |
	cashier := self createCashier.
	cartWithOneItem := self createCartWithOneItem.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: cartWithOneItem usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 3.5).
	self assert: (ticket paidWithCreditCard = creditCart ).
	
	

	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:29:24' prior: 50870254!
test01checkOutCartWithOneItemWithValidCardWorksCorrectly

	| cashier cartWithOneItem ticket creditCart |
	cashier := self createCashier.
	cartWithOneItem := self createCartWithOneItem.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: cartWithOneItem usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 3.5).
	self assert: (ticket paidWithCreditCard = creditCart).
	self assert: (ticket paidBy = 'Carlitos Ticona')
	
	

	
! !

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/24/2020 01:29:34'!
ERROR!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/24/2020 01:29:34'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:29:52' prior: 50870072!
createCartWithOneItem
	
	| cart |
	cart := Cart acceptingItemsOf: self defaultCatalog.
	cart add: 'anItemToSell'. 
	^ cart
! !

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/24/2020 01:29:56'!
ERROR!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/24/2020 01:29:56'!
ERROR!
!Cashier methodsFor: 'action' stamp: 'BT 11/24/2020 01:30:23'!
checkOut: aCart usingCreditCard: aCreditCard of: aString 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'action' stamp: 'BT 11/24/2020 01:34:28' prior: 50870311!
checkOut: aCart usingCreditCard: aCreditCard of: buyingClient
	self verifyOwnerOf: aCreditCard is: buyingClient.
	self verifyItIsaValidCreditCard: aCreditCard.
	
	! !
!Cashier methodsFor: 'action' stamp: 'BT 11/24/2020 01:35:15'!
verifyOwnerOf: aCreditCard is: buyingClient.
	^ aCreditCard owner = buyingClient.
	
	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:35:38'!
owner
	^ owner! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:35:48'!
expiration
	^ expiration ! !
!Cashier methodsFor: 'action' stamp: 'BT 11/24/2020 01:36:57' prior: 50870325!
verifyOwnerOf: aCreditCard is: buyingClient.
	(aCreditCard owner = buyingClient) ifFalse: [ self signalInvalidClientIsBuying]
	
	! !
!Cashier methodsFor: 'action' stamp: 'BT 11/24/2020 01:37:43'!
signalInvalidClientIsBuying
	self error: self class errorInvalidClientIsBuying.
	
	! !
!Cashier class methodsFor: 'no messages' stamp: 'BT 11/24/2020 01:38:13'!
errorInvalidClientIsBuying
	^ 'Invalid client is buying'! !
!Cashier methodsFor: 'action' stamp: 'BT 11/24/2020 01:40:08'!
verifyItIsaValidCreditCard: aCreditCard
	( GregorianMonthOfYear current < aCreditCard expiration) ifFalse: [ self signalExpiredCreditCard]
	
	
	
	! !
!Cashier methodsFor: 'action' stamp: 'BT 11/24/2020 01:40:19'!
signalExpiredCreditCard
	
	
	! !
!Cashier methodsFor: 'action' stamp: 'BT 11/24/2020 01:40:38' prior: 50870363!
signalExpiredCreditCard
	self error: self class errorExpiredCreditCard.
	
	
	! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:41:09'!
errorExpiredCreditCard
	^ 'Paying with expired credit card'! !

Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'BT 11/24/2020 01:43:05'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:44:04'!
withMerchantProcessor: merchantProcessor
	! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:44:25' prior: 50870389!
withMerchantProcessor: merchantProcessorToCollaborateWIth
	! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:44:28' prior: 50870394!
withMerchantProcessor: merchantProcessorToCollaborateWith
	! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:45:01' prior: 50870400!
withMerchantProcessor: merchantProcessorToCollaborateWith

	! !

Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'BT 11/24/2020 01:45:09'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'BT 11/24/2020 01:45:22'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'BT 11/24/2020 01:45:24'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:45:44' prior: 50870406!
withMerchantProcessor: merchantProcessorToCollaborateWith
	^ self new withMerchantProcessor: merchantProcessorToCollaborateWith.

	! !
!Cashier methodsFor: 'initialization' stamp: 'BT 11/24/2020 01:46:11'!
withMerchantProcessor: merchantProcessorToCollaborateWith
	merchantProcessor := merchantProcessorToCollaborateWith.! !
!Cashier methodsFor: 'actions' stamp: 'BT 11/24/2020 01:50:20' prior: 50870317!
checkOut: aCart usingCreditCard: aCreditCard of: buyingClient
	self verifyOwnerOf: aCreditCard is: buyingClient.
	self verifyItIsaValidCreditCard: aCreditCard.
	merchantProcessor charge: (aCart total) to: aCreditCard.
	
	! !
!Cashier methodsFor: 'actions' stamp: 'BT 11/24/2020 01:53:55' prior: 50870459!
checkOut: aCart usingCreditCard: aCreditCard of: buyingClient
	self verifyOwnerOf: aCreditCard is: buyingClient.
	self verifyItIsaValidCreditCard: aCreditCard.
	^ merchantProcessor charge: (aCart total) to: aCreditCard.
	
	
	! !

Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'BT 11/24/2020 01:54:14'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BT 11/24/2020 01:54:42'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessor stamp: 'BT 11/24/2020 01:54:47'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

MerchantProcessorSimulator subclass: #MPSimulatorValidPayment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MPSimulatorValidPayment category: 'TusLibros' stamp: 'BT 11/24/2020 01:56:23'!
MerchantProcessorSimulator subclass: #MPSimulatorValidPayment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

MerchantProcessorSimulator subclass: #MPSimulatorInvalidPayment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MPSimulatorInvalidPayment category: 'TusLibros' stamp: 'BT 11/24/2020 01:56:44'!
MerchantProcessorSimulator subclass: #MPSimulatorInvalidPayment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'no messages' stamp: 'BT 11/24/2020 01:57:28'!
charge: amountToPay to: aCreditCard
	self subclassResponsibility.! !
!MPSimulatorInvalidPayment methodsFor: 'no messages' stamp: 'BT 11/24/2020 01:58:09' overrides: 50870535!
charge: amountToPay to: aCreditCard
	self signalUnsuccesfulPayment.! !
!MPSimulatorInvalidPayment methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 01:59:11'!
signalUnsuccesfulPayment
	self error: self class errorInvalidCreditCard.! !
!MPSimulatorInvalidPayment class methodsFor: 'no messages' stamp: 'BT 11/24/2020 02:00:01'!
errorUnsuccesfulPayment
	^ 'Unsuccesful Payment'! !
!MPSimulatorInvalidPayment methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 02:00:12' prior: 50870547!
signalUnsuccesfulPayment
	self error: self class errorUnsuccesfulPayment .! !
!MPSimulatorInvalidPayment methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 02:00:13' prior: 50870559!
signalUnsuccesfulPayment
	self error: self class errorUnsuccesfulPayment.! !

!classDefinition: #Receipt category: 'TusLibros' stamp: 'BT 11/24/2020 02:03:19'!
Object subclass: #Receipt
	instanceVariableNames: 'client amountPaid creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MPSimulatorValidPayment methodsFor: 'no messages' stamp: 'BT 11/24/2020 02:02:29' overrides: 50870535!
charge: amountToPay to: aCreditCard
	^ Receipt for: aCreditCard of: amountToPay.! !
!Receipt class methodsFor: 'no messages' stamp: 'BT 11/24/2020 02:03:59'!
for: aCreditCard of: amountToPay
	^ self new for: aCreditCard of: amountToPay.! !
!Receipt methodsFor: 'initialization' stamp: 'BT 11/24/2020 02:04:59'!
for: aCreditCard of: amount
	creditCard := aCreditCard.
	amountPaid := 	amount.
	client := aCreditCard.! !
!Receipt methodsFor: 'initialization' stamp: 'BT 11/24/2020 02:05:06' prior: 50870588!
for: aCreditCard of: amount
	creditCard := aCreditCard.
	amountPaid := 	amount.
	client := aCreditCard owner.! !
!Cart methodsFor: 'queries' stamp: 'BT 11/24/2020 02:09:21'!
total
	^ items sum: [:anItem | catalog at: anItem ] ifEmpty: 0. ! !

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/24/2020 02:10:22'!
ERROR!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/24/2020 02:10:22'!
ERROR!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/24/2020 02:10:26'!
ERROR!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/24/2020 02:10:26'!
ERROR!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/24/2020 02:10:28'!
ERROR!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/24/2020 02:10:28'!
ERROR!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/24/2020 02:10:45'!
ERROR!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/24/2020 02:10:45'!
ERROR!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/24/2020 02:10:46'!
ERROR!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/24/2020 02:10:46'!
ERROR!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/24/2020 02:10:47'!
ERROR!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/24/2020 02:10:47'!
ERROR!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/24/2020 02:11:08'!
ERROR!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/24/2020 02:11:08'!
ERROR!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/24/2020 02:11:12'!
ERROR!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/24/2020 02:11:12'!
ERROR!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/24/2020 02:11:19'!
ERROR!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/24/2020 02:11:19'!
ERROR!

catalog at: anItem!

aCart total!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 02:13:27' prior: 50870271!
test01checkOutCartWithOneItemWithValidCardWorksCorrectly

	| cashier cartWithOneItem ticket creditCart |
	cashier := self createCashier.
	cartWithOneItem := self createCartWithOneItem.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: (self createCartWithManyItems ) usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 3.5).
	self assert: (ticket paidWithCreditCard = creditCart).
	self assert: (ticket paidBy = 'Carlitos Ticona')
	
	

	
! !

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/24/2020 02:13:40'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/24/2020 02:13:53' prior: 50870079!
createCartWithManyItems
	
	| cart |
	cart := Cart acceptingItemsOf: self defaultCatalog.

	cart add: 2 of: 'anItemToSell'. 
	cart add: 3 of: 'anotherItemToSell'. 
	
	^ cart
	! !

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/24/2020 02:13:58'!
ERROR!

aCart total!

----STARTUP---- (26 November 2020 15:52:39) as /home/belu/Documents/ING_SOFT/linux64/CuisUniversity-4383.image!


----End fileIn of /home/belu/Documents/ING_SOFT/linux64/TusLibros.st----!

Object subclass: #Ticket
	instanceVariableNames: 'client amountPaid creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'
	!

!classDefinition: #Ticket category: 'TusLibros' stamp: 'BT 11/26/2020 16:03:04'!
Object subclass: #Ticket
	instanceVariableNames: 'client amountPaid creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Ticket stamp: 'BT 11/26/2020 16:03:14'!
Object subclass: #Ticket
	instanceVariableNames: 'client amountPaid creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRenamed: #Receipt as: #Ticket stamp: 'BT 11/26/2020 16:03:39'!
Smalltalk renameClassNamed: #Receipt as: #Ticket!
!MPSimulatorValidPayment methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:03:39' prior: 50869854 overrides: 50869795!
charge: amountToPay to: aCreditCard
	^ Ticket for: aCreditCard of: amountToPay.! !
!Ticket methodsFor: 'accessing' stamp: 'BT 11/26/2020 16:04:18'!
amountPaid
! !

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/26/2020 16:04:26'!
ERROR!
!Cashier methodsFor: 'actions' stamp: 'BT 11/26/2020 16:08:57' prior: 50869685!
checkOut: aCart usingCreditCard: aCreditCard of: buyingClient
	| cartTotal idTransaction |
	self verifyOwnerOf: aCreditCard is: buyingClient.
	self verifyItIsaValidCreditCard: aCreditCard.
	cartTotal :=  aCart total.
	idTransaction := merchantProcessor charge: cartTotal to: aCreditCard.
	^Ticket for: aCreditCard of: cartTotal.
	
	
	! !
!Cashier methodsFor: 'actions' stamp: 'BT 11/26/2020 16:11:29' prior: 50869929!
checkOut: aCart usingCreditCard: aCreditCard of: buyingClient
	| cartTotal idTransaction |
	self verifyOwnerOf: aCreditCard is: buyingClient.
	self verifyItIsaValidCreditCard: aCreditCard.
	cartTotal :=  aCart total.
	idTransaction := merchantProcessor charge: cartTotal to: aCreditCard.
	^Ticket forTransaction: idTransaction doneBy: aCreditCard of: cartTotal.
	
	
	! !
!Ticket methodsFor: 'initialization' stamp: 'BT 11/26/2020 16:13:03'!
idTransaction: forTransaction for: aCreditCard of: amount
	creditCard := aCreditCard.
	amountPaid := 	amount.
	client := aCreditCard owner.! !
!Ticket class methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:13:03'!
idTransaction: forTransaction for: aCreditCard of: amountToPay
	^ self new for: aCreditCard of: amountToPay.! !
!Ticket class methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:13:03' prior: 50869885!
for: aCreditCard of: amountToPay
	^ self new idTransaction: idTransaction for: aCreditCard of: amountToPay.! !
!MPSimulatorValidPayment methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:13:03' prior: 50869917 overrides: 50869795!
charge: amountToPay to: aCreditCard
	^ Ticket idTransaction: idTransaction for: aCreditCard of: amountToPay.! !
!Ticket class methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:13:03' prior: 50869964!
idTransaction: forTransaction for: aCreditCard of: amountToPay
	^ self new idTransaction: idTransaction for: aCreditCard of: amountToPay.! !

!methodRemoval: Ticket #for:of: stamp: 'BT 11/26/2020 16:13:03'!
for: aCreditCard of: amount
	creditCard := aCreditCard.
	amountPaid := 	amount.
	client := aCreditCard owner.!

!methodRemoval: Ticket class #for:of: stamp: 'BT 11/26/2020 16:13:03'!
for: aCreditCard of: amountToPay
	^ self new idTransaction: idTransaction for: aCreditCard of: amountToPay.!
!Ticket methodsFor: 'initialization' stamp: 'BT 11/26/2020 16:13:27'!
forTransaction: forTransaction for: aCreditCard of: amount
	creditCard := aCreditCard.
	amountPaid := 	amount.
	client := aCreditCard owner.! !
!Ticket class methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:13:27'!
forTransaction: forTransaction for: aCreditCard of: amountToPay
	^ self new idTransaction: idTransaction for: aCreditCard of: amountToPay.! !
!Ticket class methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:13:27' prior: 50869986!
idTransaction: forTransaction for: aCreditCard of: amountToPay
	^ self new forTransaction: idTransaction for: aCreditCard of: amountToPay.! !
!MPSimulatorValidPayment methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:13:27' prior: 50869979 overrides: 50869795!
charge: amountToPay to: aCreditCard
	^ Ticket forTransaction: idTransaction for: aCreditCard of: amountToPay.! !
!Ticket class methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:13:27' prior: 50870012!
forTransaction: forTransaction for: aCreditCard of: amountToPay
	^ self new forTransaction: idTransaction for: aCreditCard of: amountToPay.! !

!methodRemoval: Ticket #idTransaction:for:of: stamp: 'BT 11/26/2020 16:13:27'!
idTransaction: forTransaction for: aCreditCard of: amount
	creditCard := aCreditCard.
	amountPaid := 	amount.
	client := aCreditCard owner.!

!methodRemoval: Ticket class #idTransaction:for:of: stamp: 'BT 11/26/2020 16:13:27'!
idTransaction: forTransaction for: aCreditCard of: amountToPay
	^ self new forTransaction: idTransaction for: aCreditCard of: amountToPay.!
!Ticket methodsFor: 'initialization' stamp: 'BT 11/26/2020 16:14:00'!
forTransaction: forTransaction doneBy: aCreditCard of: amount
	creditCard := aCreditCard.
	amountPaid := 	amount.
	client := aCreditCard owner.! !
!Ticket class methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:14:00'!
forTransaction: forTransaction doneBy: aCreditCard of: amountToPay
	^ self new forTransaction: idTransaction for: aCreditCard of: amountToPay.! !
!Ticket class methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:14:00' prior: 50870036!
forTransaction: forTransaction for: aCreditCard of: amountToPay
	^ self new forTransaction: idTransaction doneBy: aCreditCard of: amountToPay.! !
!MPSimulatorValidPayment methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:14:00' prior: 50870029 overrides: 50869795!
charge: amountToPay to: aCreditCard
	^ Ticket forTransaction: idTransaction doneBy: aCreditCard of: amountToPay.! !
!Ticket class methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:14:00' prior: 50870065!
forTransaction: forTransaction doneBy: aCreditCard of: amountToPay
	^ self new forTransaction: idTransaction doneBy: aCreditCard of: amountToPay.! !

!methodRemoval: Ticket #forTransaction:for:of: stamp: 'BT 11/26/2020 16:14:00'!
forTransaction: forTransaction for: aCreditCard of: amount
	creditCard := aCreditCard.
	amountPaid := 	amount.
	client := aCreditCard owner.!

!methodRemoval: Ticket class #forTransaction:for:of: stamp: 'BT 11/26/2020 16:14:00'!
forTransaction: forTransaction for: aCreditCard of: amountToPay
	^ self new forTransaction: idTransaction doneBy: aCreditCard of: amountToPay.!

!classDefinition: #Ticket category: 'TusLibros' stamp: 'BT 11/26/2020 16:15:00'!
Object subclass: #Ticket
	instanceVariableNames: 'client amountPaid creditCard transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Ticket methodsFor: 'initialization' stamp: 'BT 11/26/2020 16:15:22' prior: 50870057!
forTransaction: idTransaction doneBy: aCreditCard of: amount.
	transaction := idTransaction.
	creditCard := aCreditCard.
	amountPaid := 	amount.
	client := aCreditCard owner.! !
!Cashier methodsFor: 'actions' stamp: 'BT 11/26/2020 16:15:30' prior: 50869943!
checkOut: aCart usingCreditCard: aCreditCard of: buyingClient
	| cartTotal idTransaction |
	self verifyOwnerOf: aCreditCard is: buyingClient.
	self verifyItIsaValidCreditCard: aCreditCard.
	cartTotal :=  aCart total.
	idTransaction := merchantProcessor charge: cartTotal to: aCreditCard.
	^Ticket forTransaction: idTransaction doneBy: aCreditCard of: cartTotal.
	
	
	! !
!Ticket methodsFor: 'accessing' stamp: 'BT 11/26/2020 16:16:29'!
amountCharged
	^ amountPaid ! !

!methodRemoval: Ticket #amountPaid stamp: 'BT 11/26/2020 16:16:31'!
amountPaid
!
!Ticket methodsFor: 'accessing' stamp: 'BT 11/26/2020 16:17:04'!
paidWithCreditCard
	^ creditCard ! !
!Ticket methodsFor: 'accessing' stamp: 'BT 11/26/2020 16:18:08' prior: 50870148!
paidWithCreditCard
	^ creditCard number.! !

!classDefinition: #Ticket category: 'TusLibros' stamp: 'BT 11/26/2020 16:18:27'!
Object subclass: #Ticket
	instanceVariableNames: 'client amountPaid creditCardNumber transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Ticket methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:18:27' prior: 50870119!
forTransaction: idTransaction doneBy: aCreditCard of: amount.
	transaction := idTransaction.
	creditCardNumber := aCreditCard.
	amountPaid := 	amount.
	client := aCreditCard owner.! !
!Ticket methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:18:27' prior: 50870152!
paidWithCreditCard
	^ creditCardNumber number.! !
!Ticket methodsFor: 'accessing' stamp: 'BT 11/26/2020 16:18:32' prior: 50870174!
paidWithCreditCard
	^ creditCardNumber.! !
!Cashier methodsFor: 'actions' stamp: 'BT 11/26/2020 16:19:06' prior: 50870128!
checkOut: aCart usingCreditCard: aCreditCard of: buyingClient
	| cartTotal idTransaction |
	self verifyOwnerOf: aCreditCard is: buyingClient.
	self verifyItIsaValidCreditCard: aCreditCard.
	cartTotal :=  aCart total.
	idTransaction := merchantProcessor charge: cartTotal to: aCreditCard.
	^Ticket forTransaction: idTransaction doneBy: (aCreditCard number) of: cartTotal.
	
	
	! !
!CreditCard methodsFor: 'accessing' stamp: 'BT 11/26/2020 16:20:02'!
number
	^ number ! !
!Ticket methodsFor: 'initialization' stamp: 'BT 11/26/2020 16:20:37' prior: 50870165!
forTransaction: idTransaction doneBy: aCreditCard of: amount.
	transaction := idTransaction.
	creditCardNumber := aCreditCard number.
	amountPaid := 	amount.
	client := aCreditCard owner.! !
!Cashier methodsFor: 'actions' stamp: 'BT 11/26/2020 16:20:57' prior: 50870183!
checkOut: aCart usingCreditCard: aCreditCard of: buyingClient
	| cartTotal idTransaction |
	self verifyOwnerOf: aCreditCard is: buyingClient.
	self verifyItIsaValidCreditCard: aCreditCard.
	cartTotal :=  aCart total.
	idTransaction := merchantProcessor charge: cartTotal to: aCreditCard.
	^Ticket forTransaction: idTransaction doneBy: aCreditCard of: cartTotal.
	
	
	! !
!Ticket methodsFor: 'accessing' stamp: 'BT 11/26/2020 16:21:33'!
paidBy
	^ client ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:26:50' prior: 50869536!
createCashier
	^ Cashier withMerchantProcessor: MPSimulatorValidPayment new.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:27:26'!
createCashierWithMerchatProcessorSimulatorOfValidOperations
	^ Cashier withMerchantProcessor: MPSimulatorValidPayment new.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:28:31' prior: 50870229!
createCashier
	^ Cashier new.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:29:54' prior: 50869566!
test01checkOutCartWithOneItemWithValidCardWorksCorrectly

	| cashier cartWithOneItem ticket creditCart |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithOneItem := self createCartWithOneItem.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: (self createCartWithManyItems ) usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 3.5).
	self assert: (ticket paidWithCreditCard = creditCart).
	self assert: (ticket paidBy = 'Carlitos Ticona')
	
	

	
! !
!Cashier methodsFor: 'initialization' stamp: 'BT 11/26/2020 16:30:22'!
perfomCheckOutsWith: merchantProcessorToCollaborateWith
	merchantProcessor := merchantProcessorToCollaborateWith.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:30:46' prior: 50870246!
test01checkOutCartWithOneItemWithValidCardWorksCorrectly

	| cashier cartWithOneItem ticket creditCart |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithOneItem := self createCartWithOneItem.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: (self createCartWithManyItems ) usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 3.5).
	self assert: (ticket paidWithCreditCard = creditCart).
	self assert: (ticket paidBy = 'Carlitos Ticona')
	
	

	
! !
!MPSimulatorValidPayment methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:32:11' prior: 50870082 overrides: 50869795!
charge: amountToPay to: aCreditCard
	^ '0192'! !

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/26/2020 16:32:21'!
FAILURE!

ticket amountCharged!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:33:09' prior: 50870273!
test01checkOutCartWithOneItemWithValidCardWorksCorrectly

	| cashier cartWithOneItem ticket creditCart |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithOneItem := self createCartWithOneItem.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: (self createCartWithManyItems ) usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 18.7).
	self assert: (ticket paidWithCreditCard = creditCart).
	self assert: (ticket paidBy = 'Carlitos Ticona')
	
	

	
! !

ticket amountCharged !
!Ticket class methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:36:45' prior: 50870089!
forTransaction: idTransaction doneBy: aCreditCard of: amountToPay
	^ self new forTransaction: idTransaction doneBy: aCreditCard of: amountToPay.! !

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/26/2020 16:37:13'!
FAILURE!

ticket paidWithCreditCard!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:37:51' prior: 50870305!
test01checkOutCartWithOneItemWithValidCardWorksCorrectly

	| cashier cartWithOneItem ticket creditCart |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithOneItem := self createCartWithOneItem.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: (self createCartWithManyItems ) usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 18.7).
	self assert: (ticket paidWithCreditCard = creditCart number).
	self assert: (ticket paidBy = 'Carlitos Ticona')
	
	

	
! !
!Ticket methodsFor: 'accessing' stamp: 'BT 11/26/2020 16:38:43'!
paidWithCreditCardNumber
	^ creditCardNumber.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:38:43' prior: 50870340!
test01checkOutCartWithOneItemWithValidCardWorksCorrectly

	| cashier cartWithOneItem ticket creditCart |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithOneItem := self createCartWithOneItem.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: (self createCartWithManyItems ) usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 18.7).
	self assert: (ticket paidWithCreditCardNumber = creditCart number).
	self assert: (ticket paidBy = 'Carlitos Ticona')
	
	

	
! !

!methodRemoval: Ticket #paidWithCreditCard stamp: 'BT 11/26/2020 16:38:43'!
paidWithCreditCard
	^ creditCardNumber.!
!Ticket methodsFor: 'accessing' stamp: 'BT 11/26/2020 16:39:21'!
creditCardNumber
	^ creditCardNumber.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:39:21' prior: 50870365!
test01checkOutCartWithOneItemWithValidCardWorksCorrectly

	| cashier cartWithOneItem ticket creditCart |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithOneItem := self createCartWithOneItem.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: (self createCartWithManyItems ) usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 18.7).
	self assert: (ticket creditCardNumber = creditCart number).
	self assert: (ticket paidBy = 'Carlitos Ticona')
	
	

	
! !

!methodRemoval: Ticket #paidWithCreditCardNumber stamp: 'BT 11/26/2020 16:39:21'!
paidWithCreditCardNumber
	^ creditCardNumber.!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/26/2020 16:39:57'!
PASSED!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/26/2020 16:39:57'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:41:01' prior: 50870394!
test01checkOutCartWithOneItemWithValidCardWorksCorrectly

	| cashier cartWithOneItem ticket creditCart |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithOneItem := self createCartWithOneItem.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: (self createCartWithManyItems ) usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 18.7).
	self assert: (ticket creditCardNumber = creditCart number).
	self assert: (ticket paidBy = 'Carlitos Ticona')
	
	

	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:41:36' prior: 50870427!
test01checkOutCartWithOneItemWithValidCardWorksCorrectly

	| cashier cartWithOneItem ticket creditCart |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithOneItem := self createCartWithOneItem.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: cartWithOneItem usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 18.7).
	self assert: (ticket creditCardNumber = creditCart number).
	self assert: (ticket paidBy = 'Carlitos Ticona')
	
	

	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:41:41' prior: 50870448!
test01checkOutCartWithOneItemWithValidCardWorksCorrectly

	| cashier cartWithOneItem ticket creditCart |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithOneItem := self createCartWithOneItem.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: cartWithOneItem usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 3.5).
	self assert: (ticket creditCardNumber = creditCart number).
	self assert: (ticket paidBy = 'Carlitos Ticona')
	
	

	
! !

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/26/2020 16:41:45'!
PASSED!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/26/2020 16:41:45'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:42:41'!
test02checkOutCartWithManyItemsWithValidCardWorksCorrectly

	| cashier ticket creditCart cartWithManyItems |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithManyItems := self createCartWithManyItems.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: cartWithManyItems usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 18.7).
	self assert: (ticket creditCardNumber = creditCart number).
	self assert: (ticket paidBy = 'Carlitos Ticona')
	
	

	
! !

!testRun: #CashierTest #test02checkOutCartWithManyItemsWithValidCardWorksCorrectly stamp: 'BT 11/26/2020 16:42:52'!
PASSED!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/26/2020 16:42:52'!
PASSED!

!testRun: #CashierTest #test02checkOutCartWithManyItemsWithValidCardWorksCorrectly stamp: 'BT 11/26/2020 16:42:52'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:46:22'!
test03checkOutCartWithInvalidCreditCardRaisesError

	| cashier ticket creditCart cartWithManyItems |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithManyItems := self createCartWithManyItems.
	creditCart := self createInvalidCreditCard.
	ticket := cashier checkOut: cartWithManyItems usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 18.7).
	self assert: (ticket creditCardNumber = creditCart number).
	self assert: (ticket paidBy = 'Carlitos Ticona')
	
	

	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:48:03' prior: 50870529!
test03checkOutCartWithInvalidCreditCardRaisesError

	| cashier ticket creditCart cartWithManyItems |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithManyItems := self createCartWithManyItems.
	creditCart := self createInvalidCreditCard.

	self should:  [cashier checkOut: cartWithManyItems usingCreditCard: creditCart of: 'Carlitos Ticona' .]
	raise:  Error
	withMessageText: Cashier errorExpiredCreditCard.

	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:48:21'!
test03checkOutCartWithExpiredCreditCardRaisesError

	| cashier creditCart cartWithManyItems |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithManyItems := self createCartWithManyItems.
	creditCart := self createInvalidCreditCard.

	self should:  [cashier checkOut: cartWithManyItems usingCreditCard: creditCart of: 'Carlitos Ticona' .]
	raise:  Error
	withMessageText: Cashier errorExpiredCreditCard.

	
! !

!testRun: #CashierTest #test03checkOutCartWithExpiredCreditCardRaisesError stamp: 'BT 11/26/2020 16:48:28'!
PASSED!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/26/2020 16:48:28'!
PASSED!

!testRun: #CashierTest #test02checkOutCartWithManyItemsWithValidCardWorksCorrectly stamp: 'BT 11/26/2020 16:48:28'!
PASSED!

!testRun: #CashierTest #test03checkOutCartWithExpiredCreditCardRaisesError stamp: 'BT 11/26/2020 16:48:28'!
PASSED!

!testRun: #CashierTest #test03checkOutCartWithInvalidCreditCardRaisesError stamp: 'BT 11/26/2020 16:48:28'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:50:07'!
test04checkOutCartWhenNotOwnerIsPayingRaisesError

	| cashier creditCart cartWithManyItems |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithManyItems := self createCartWithManyItems.
	creditCart := self createInvalidCreditCard.

	self should:  [cashier checkOut: cartWithManyItems usingCreditCard: creditCart of: 'Fulano' .]
	raise:  Error
	withMessageText: Cashier errorInvalidClientIsBuying.

	
! !

!testRun: #CashierTest #test04checkOutCartWhenNotOwnerIsPayingRaisesError stamp: 'BT 11/26/2020 16:50:10'!
PASSED!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/26/2020 16:50:10'!
PASSED!

!testRun: #CashierTest #test02checkOutCartWithManyItemsWithValidCardWorksCorrectly stamp: 'BT 11/26/2020 16:50:10'!
PASSED!

!testRun: #CashierTest #test03checkOutCartWithExpiredCreditCardRaisesError stamp: 'BT 11/26/2020 16:50:10'!
PASSED!

!testRun: #CashierTest #test03checkOutCartWithInvalidCreditCardRaisesError stamp: 'BT 11/26/2020 16:50:10'!
PASSED!

!testRun: #CashierTest #test04checkOutCartWhenNotOwnerIsPayingRaisesError stamp: 'BT 11/26/2020 16:50:10'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BT 11/26/2020 16:50:22' prior: 50870604!
test04checkOutCartWhenNotOwnerIsPayingRaisesError

	| cashier creditCart cartWithManyItems |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithManyItems := self createCartWithManyItems.
	creditCart := self createValidCreditCard .

	self should:  [cashier checkOut: cartWithManyItems usingCreditCard: creditCart of: 'Fulano' .]
	raise:  Error
	withMessageText: Cashier errorInvalidClientIsBuying.

	
! !

!testRun: #CashierTest #test04checkOutCartWhenNotOwnerIsPayingRaisesError stamp: 'BT 11/26/2020 16:50:26'!
PASSED!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'BT 11/26/2020 16:50:26'!
PASSED!

!testRun: #CashierTest #test02checkOutCartWithManyItemsWithValidCardWorksCorrectly stamp: 'BT 11/26/2020 16:50:26'!
PASSED!

!testRun: #CashierTest #test03checkOutCartWithExpiredCreditCardRaisesError stamp: 'BT 11/26/2020 16:50:26'!
PASSED!

!testRun: #CashierTest #test03checkOutCartWithInvalidCreditCardRaisesError stamp: 'BT 11/26/2020 16:50:26'!
PASSED!

!testRun: #CashierTest #test04checkOutCartWhenNotOwnerIsPayingRaisesError stamp: 'BT 11/26/2020 16:50:26'!
PASSED!