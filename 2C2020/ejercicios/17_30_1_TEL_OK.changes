

----STARTUP---- (1 November 2020 22:10:05) as /home/belu/Documents/ING_SOFT/linux64/CuisUniversity-4383.image!


Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Cuis-University-Tests'!

!classDefinition: #TerniLapilli category: 'Cuis-University-Tests' stamp: 'BT 11/1/2020 22:11:05'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Cuis-University-Tests'!

!classRemoval: #TerniLapilli stamp: 'BT 11/1/2020 22:11:40'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Cuis-University-Tests'!

TestSuite subclass: #TerniLapilli
	instanceVariableNames: 'tests resources name'
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

TestSuite subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Cuis-University-Tests'!

!classDefinition: #TerniLapilli category: 'Cuis-University-Tests' stamp: 'BT 11/1/2020 22:14:54'!
TestSuite subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Cuis-University-Tests'!

TestSuite subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

!classDefinition: #TerniLapilli category: '' stamp: 'BT 11/1/2020 22:15:04'!
TestSuite subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

dic := Dictionary new!

dic at: 0@0  put: 1 !

dic at: 0@0!

dic at: 0@1!

dic at: 0@1 put: 0.!
!TerniLapilli methodsFor: 'tests' stamp: 'BT 11/1/2020 23:39:35'!
test01aNewGameIsNotOver

| aMatch |
aMatch := TerniLapilli newGame
assert aMatch isOver is false! !
!TerniLapilli methodsFor: 'tests' stamp: 'BT 11/1/2020 23:40:19' prior: 50869451!
test01aNewGameIsNotOver

	| aMatch |
	aMatch := TerniLapilli newGame.
	self assert aMatch isOver = false.! !
!TerniLapilli methodsFor: 'tests' stamp: 'BT 11/1/2020 23:41:02' prior: 50869457!
test01aNewGameIsNotOver

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	self assert aMatch isOver = false.! !
!TerniLapilli methodsFor: 'tests' stamp: 'BT 11/1/2020 23:41:23' prior: 50869463!
test01aNewGameIsNotOver

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	self assert aJustStartedMatch isOver = false.! !

TestSuite subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!

!classDefinition: #TerniLapilli category: 'TerniLapilliTest' stamp: 'BT 11/1/2020 23:42:13'!
TestSuite subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!

!classRenamed: #TerniLapilli as: #TerniLapilliTest stamp: 'BT 11/1/2020 23:42:34'!
Smalltalk renameClassNamed: #TerniLapilli as: #TerniLapilliTest!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'BT 11/1/2020 23:42:34' prior: 50869470!
test01aNewGameIsNotOver

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilliTest newGame.
	self assert aJustStartedMatch isOver = false.! !

!classDefinition: #TerniLapilli category: 'TerniLapilliTest' stamp: 'BT 11/1/2020 23:43:18'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!
!TerniLapilliTest methodsFor: 'tests' stamp: 'BT 11/1/2020 23:43:02' prior: 50869494!
test01aNewGameIsNotOver

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	self assert aJustStartedMatch isOver = false.! !

Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #NameOfSubclass category: 'Ejercicio - TerniLapilli' stamp: 'BT 11/1/2020 23:43:57'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classRemoval: #NameOfSubclass stamp: 'BT 11/1/2020 23:44:19'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #TerniLapilliTest category: 'Ejercicio - TerniLapilli' stamp: 'BT 11/1/2020 23:45:11'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!
!TerniLapilliTest methodsFor: 'tests' stamp: 'BT 11/1/2020 23:46:15' prior: 50869509!
test01aNewGameIsNotOver

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame
	self assert aJustStartedMatch isOver = false.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'BT 11/1/2020 23:46:18' prior: 50869548!
test01aNewGameIsNotOver

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	self assert aJustStartedMatch isOver = false.! !
!TerniLapilli class methodsFor: 'no messages' stamp: 'BT 11/1/2020 23:47:57'!
newGame
	self new ! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'BT 11/1/2020 23:48:29' prior: 50869563!
newGame
	^ self new.! !
!TerniLapilli methodsFor: 'no messages' stamp: 'BT 11/1/2020 23:48:47'!
isOver
	^ false.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'BT 11/1/2020 23:48:58'!
ERROR!

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'BT 11/1/2020 23:48:58'!
ERROR!
!TerniLapilliTest methodsFor: 'tests' stamp: 'BT 11/1/2020 23:49:17' prior: 50869556!
test01aNewGameIsNotOver

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	self aJustStartedMatch isOver = false.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'BT 11/1/2020 23:49:28' prior: 50869580!
test01aNewGameIsNotOver

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	self assert: aJustStartedMatch isOver = false.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'BT 11/1/2020 23:49:31'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'BT 11/1/2020 23:54:28'!
test02XstartsPlaying

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame
	self assert: aJustStartedMatch isPlayingX.
	self deny: aJustStartedMatch isPlayingO.! !

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'BT 11/1/2020 23:54:40'!
ERROR!
!TerniLapilliTest methodsFor: 'tests' stamp: 'BT 11/1/2020 23:54:52' prior: 50869597!
test02XstartsPlaying

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	self assert: aJustStartedMatch isPlayingX.
	self deny: aJustStartedMatch isPlayingO.! !

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'BT 11/1/2020 23:54:54'!
ERROR!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'BT 11/1/2020 23:54:54'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'BT 11/1/2020 23:55:17'!
isPlayingX
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'BT 11/1/2020 23:55:48' prior: 50869623!
isPlayingX
	^ true.! !

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'BT 11/1/2020 23:56:01'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'BT 11/1/2020 23:56:26'!
isPlayingO
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'BT 11/1/2020 23:56:33' prior: 50869633!
isPlayingO
	^ false.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'BT 11/1/2020 23:59:07' prior: 50869609!
test02XstartsPlaying

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	self assert: aJustStartedMatch isPlayingX.
	self deny: aJustStartedMatch isPlayingO.
	self deny: aJustStartedMatch isOver.! !

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'BT 11/1/2020 23:59:10'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'BT 11/1/2020 23:59:26' prior: 50869587!
test01aNewGameIsNotOver

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	self deny: aJustStartedMatch isOver.! !

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'BT 11/2/2020 00:01:10'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'BT 11/2/2020 00:01:22'!
test03X

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	aJustStartedMatch setXAt: 0@0.
	
	self deny: aJustStartedMatch isPlayingX.
	self assert: aJustStartedMatch isPlayingO.
	self deny: aJustStartedMatch isOver.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'BT 11/2/2020 00:02:29' prior: 50869664!
test03X

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	aJustStartedMatch setXAt: 0@0.
	
	self deny: aJustStartedMatch isPlayingX.
	self assert: aJustStartedMatch isPlayingO.
	self deny: aJustStartedMatch isOver.! !

!testRun: #TerniLapilliTest #test03X stamp: 'BT 11/2/2020 00:02:31'!
ERROR!

!testRun: #TerniLapilliTest #test03X stamp: 'BT 11/2/2020 00:02:31'!
ERROR!
!TerniLapilli methodsFor: 'game - actions' stamp: 'BT 11/2/2020 00:03:02'!
setXAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'BT 11/2/2020 00:09:45' prior: 50869690!
setXAt: aPoint 
	self verifyCurrentPlayerX.
	
	! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'BT 11/2/2020 00:10:18' prior: 50869695!
setXAt: aPoint 
	self verifyCurrentPlayerX.
	
	self changeCurrentPlayer.! !

!testRun: #TerniLapilliTest #test03X stamp: 'BT 11/2/2020 00:10:28'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'BT 11/2/2020 00:10:52'!
verifyCurrentPlayerX
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'BT 11/2/2020 00:15:10' prior: 50869708!
verifyCurrentPlayerX
	(self currentPlayerIsX) ifFalse: [self signal: self class errorInvalidPlayer]. ! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'BT 11/2/2020 00:15:55'!
signalInvalidPlayer

	^ self signal: self class errorInvalidPlayer! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'BT 11/2/2020 00:15:55' prior: 50869713!
verifyCurrentPlayerX
	(self currentPlayerIsX) ifFalse: [self signalInvalidPlayer]. ! !

!testRun: #TerniLapilliTest #test03X stamp: 'BT 11/2/2020 00:16:12'!
ERROR!

!testRun: #TerniLapilliTest #test03X stamp: 'BT 11/2/2020 00:16:12'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'BT 11/2/2020 00:16:49' prior: 50869725!
verifyCurrentPlayerX
	(self isXsTurn) ifFalse: [self signalInvalidPlayer]. ! !

!classDefinition: #TerniLapilli category: 'Ejercicio - TerniLapilli' stamp: 'BT 11/2/2020 00:17:25'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'isXsTurn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'BT 11/2/2020 00:17:22' prior: 50869736!
verifyCurrentPlayerX
	(isXsTurn) ifFalse: [self signalInvalidPlayer]. ! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'BT 11/2/2020 00:17:34' prior: 50869750!
verifyCurrentPlayerX
	isXsTurn ifFalse: [self signalInvalidPlayer]. ! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'BT 11/2/2020 00:17:40' prior: 50869719!
signalInvalidPlayer

	^ self signal: self class errorInvalidPlayer.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'BT 11/2/2020 00:19:28'!
errorInvalidPlayer
	^ 'Wrong turn, unexpected player is playing!!'.! !

!testRun: #TerniLapilliTest #test03X stamp: 'BT 11/2/2020 00:19:35'!
ERROR!

!testRun: #TerniLapilliTest #test03X stamp: 'BT 11/2/2020 00:19:35'!
ERROR!
!TerniLapilli methodsFor: 'initialization' stamp: 'BT 11/2/2020 00:21:02'!
initializeGame
	isXsTurn := true.! !

!testRun: #TerniLapilliTest #test03X stamp: 'BT 11/2/2020 00:21:05'!
ERROR!

!testRun: #TerniLapilliTest #test03X stamp: 'BT 11/2/2020 00:21:05'!
ERROR!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'BT 11/2/2020 00:22:16' prior: 50869567!
newGame
	^ self new initializeGame.! !

!testRun: #TerniLapilliTest #test03X stamp: 'BT 11/2/2020 00:22:21'!
ERROR!

!testRun: #TerniLapilliTest #test03X stamp: 'BT 11/2/2020 00:22:21'!
ERROR!
!TerniLapilli methodsFor: 'private' stamp: 'BT 11/2/2020 00:22:56'!
changeCurrentPlayer
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'private' stamp: 'BT 11/2/2020 00:23:24' prior: 50869796!
changeCurrentPlayer
	isXsTurn := isXsTurn not.! !

!testRun: #TerniLapilliTest #test03X stamp: 'BT 11/2/2020 00:23:51'!
FAILURE!

!testRun: #TerniLapilliTest #test03X stamp: 'BT 11/2/2020 00:23:51'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'BT 11/2/2020 00:24:47' prior: 50869637!
isPlayingO
	^ false.! !

!testRun: #TerniLapilliTest #test03X stamp: 'BT 11/2/2020 00:25:51'!
FAILURE!

aJustStartedMatch isPlayingX!

aJustStartedMatch!
!TerniLapilli methodsFor: 'testing' stamp: 'BT 11/2/2020 00:26:58' prior: 50869627!
isPlayingX
	^ isXsTurn .! !
!TerniLapilli methodsFor: 'testing' stamp: 'BT 11/2/2020 00:27:10' prior: 50869811!
isPlayingO
	^ isXsTurn not .! !

!testRun: #TerniLapilliTest #test03X stamp: 'BT 11/2/2020 00:27:14'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'BT 11/2/2020 00:28:25'!
test03verifyPointIsInValidRange

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	aJustStartedMatch setXAt: -1@0.
	
	self deny: aJustStartedMatch isPlayingX.
	self assert: aJustStartedMatch isPlayingO.
	self deny: aJustStartedMatch isOver.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'BT 11/2/2020 00:30:25' prior: 50869829!
test03verifyPointIsInValidRange

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	
	
	self should: [aJustStartedMatch setXAt: -1@0.] 
	raise: Error   
	withMessageText: TerniLapilli errorOutORangefPosition.! !

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'BT 11/2/2020 00:30:44'!
ERROR!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'BT 11/2/2020 00:30:44'!
ERROR!
!TerniLapilli class methodsFor: 'error messages' stamp: 'BT 11/2/2020 00:31:20'!
errorOutORangefPosition
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'BT 11/2/2020 00:31:53' prior: 50869856!
errorOutORangefPosition
	^ 'Out of range position!!'.! !

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'BT 11/2/2020 00:32:02'!
FAILURE!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'BT 11/2/2020 00:32:02'!
FAILURE!
!TerniLapilliTest methodsFor: 'tests' stamp: 'BT 11/2/2020 00:32:18' prior: 50869840!
test03verifyPointIsInValidRange

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	
	
	self should: [aJustStartedMatch setXAt: -1@0.] 
	raise: Error   
	withMessageText: TerniLapilli errorOutOfRangePosition.! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'BT 11/2/2020 00:32:34'!
errorOutOfRangePosition
	^ 'Out of range position!!'.! !

!methodRemoval: TerniLapilli class #errorOutORangefPosition stamp: 'BT 11/2/2020 00:32:37'!
errorOutORangefPosition
	^ 'Out of range position!!'.!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'BT 11/2/2020 00:32:40'!
FAILURE!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'BT 11/2/2020 00:32:40'!
FAILURE!
!TerniLapilliTest methodsFor: 'tests' stamp: 'BT 11/2/2020 00:32:50' prior: 50869872!
test03verifyPointIsInValidRange

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	
	self should: [aJustStartedMatch setXAt: -1@0.] 
	raise: Error   
	withMessageText: TerniLapilli errorOutOfRangePosition.! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'BT 11/2/2020 00:33:38' prior: 50869700!
setXAt: aPoint 
	self verifyCurrentPlayerX.
	self verifyItIsAValidPoint: aPoint.
	self changeCurrentPlayer.! !

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'BT 11/2/2020 00:33:54'!
FAILURE!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'BT 11/2/2020 00:33:54'!
FAILURE!
!TerniLapilli methodsFor: 'game - actions' stamp: 'BT 11/2/2020 00:35:44'!
verifyItIsAValidPoint:: a! !