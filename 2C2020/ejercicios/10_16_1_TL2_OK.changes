----STARTUP---- (19 November 2020 17:05:24) as /Users/dbenitez/uba/2c2020-IS1/IS1-Trabajos/20-TusLibros/macos64-TusLibros/CuisUniversity-4384.image!


TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!

!classDefinition: #CashierTest category: 'Tus Libros.com' stamp: 'db 11/19/2020 18:46:01'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!
!CashierTest methodsFor: 'nil' stamp: 'db 11/19/2020 18:47:03'!
test01DontAllowCheckOutOfEmptyCart! !

----End fileIn of /Users/dbenitez/uba/2c2020-IS1/2020-2c/20-TusLibros/Iteracion1/TusLibros-1.st----!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 18:47:46' prior: 50875866!
test01DontAllowCheckOutOfEmptyCart

	! !

----End fileIn of /Users/dbenitez/uba/2c2020-IS1/2020-2c/20-TusLibros/Iteracion1/TusLibros-1.st----!

----STARTUP---- (19 November 2020 18:48:35) as /Users/dbenitez/uba/2c2020-IS1/IS1-Trabajos/20-TusLibros/macos64-TusLibros/CuisUniversity-4384.image!


!testRun: #CartTest #test01EmptyCartHasNoItems stamp: 'db 11/19/2020 18:49:04'!
PASSED!

!testRun: #CartTest #test02ACartWithOneItemHasOneItem stamp: 'db 11/19/2020 18:49:04'!
PASSED!

!testRun: #CartTest #test03ACartWithMoreThanOneItemHasTheCorrectAmountOfItems stamp: 'db 11/19/2020 18:49:04'!
PASSED!

!testRun: #CartTest #test04CannotAddABookWithNonValidISBN stamp: 'db 11/19/2020 18:49:04'!
PASSED!

!testRun: #CartTest #test05CannotAddABookWithNegativeOrZeroAmount stamp: 'db 11/19/2020 18:49:04'!
PASSED!

!testRun: #CartTest #test06ListItemsOfEmptyCartReturnsAnEmptyList stamp: 'db 11/19/2020 18:49:04'!
PASSED!

!testRun: #CartTest #test07ListItemsOfACartWithOneItemReturnsAListWithAllBooksAdded stamp: 'db 11/19/2020 18:49:04'!
PASSED!

!testRun: #CartTest #test08ListItemsOfACartWithMoreThanOneItemReturnsAListWithAllBooksAdded stamp: 'db 11/19/2020 18:49:04'!
PASSED!

----SNAPSHOT----(19 November 2020 18:49:09) CuisUniversity-4384.image priorSource: 17414289!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!

!classDefinition: #CashierTest category: 'Tus Libros.com' stamp: 'db 11/19/2020 18:49:20'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!
!CashierTest methodsFor: 'nil' stamp: 'db 11/19/2020 18:49:47'!
test01CannotChackoutOfAnEmptyCart! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 18:49:56' prior: 50875896!
test01CannotChackoutOfAnEmptyCart

	! !

!classDefinition: #Cashier category: 'Tus Libros.com' stamp: 'db 11/19/2020 18:52:36'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 18:52:26' prior: 50875901!
test01CannotChackoutOfAnEmptyCart


	| cart cashier |
	cart := Cart new.
	
	cashier := Cashier new.
	
	

		self  should: [cashier checkout: cart] 
		 raise: Error 
		 withMessageText: Cart cannotCheckoutWithAnEmptyCart.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 18:52:54'!
test01CannotCheckoutWithAnEmptyCart


	| cart cashier |
	cart := Cart new.
	
	cashier := Cashier new.
	
	

		self  should: [cashier checkout: cart] 
		 raise: Error 
		 withMessageText: Cart cannotCheckoutWithAnEmptyCart.
	! !

!methodRemoval: CashierTest #test01CannotChackoutOfAnEmptyCart stamp: 'db 11/19/2020 18:52:54'!
test01CannotChackoutOfAnEmptyCart


	| cart cashier |
	cart := Cart new.
	
	cashier := Cashier new.
	
	

		self  should: [cashier checkout: cart] 
		 raise: Error 
		 withMessageText: Cart cannotCheckoutWithAnEmptyCart.
	!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 18:53:14' prior: 50875922!
test01CannotCheckoutWithAnEmptyCart
	
	| cart cashier |
	cart := Cart new.
	cashier := Cashier new.
	
	self  should: [cashier checkout: cart] 
		 raise: Error 
		 withMessageText: Cart cannotCheckoutWithAnEmptyCart.
	! !

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/19/2020 18:53:21'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/19/2020 18:53:21'!
ERROR!
!Cart class methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 18:54:56'!
cannotCheckoutWithAnEmptyCart
	self shouldBeImplemented.! !

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/19/2020 18:55:33'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 18:55:42' prior: 50875943!
test01CannotCheckoutWithAnEmptyCart
	
	| cart cashier |
	cart := Cart new.
	cashier := Cashier new.
	
	self  should: [cashier checkout: cart] 
		 raise: Error 
		 withMessageText: Cart cannotCheckoutWithAnEmptyCartErrorDescription.
	! !
!Cashier class methodsFor: 'nil' stamp: 'db 11/19/2020 18:56:03'!
cannotCheckoutWithAnEmptyCartErrorDescription
	^'cannot checkout with an empty cart'! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 18:56:34'!
signalCannotCheckoutWithAnEmptyCart
	self error: self cannotCheckoutWithAnEmptyCartErrorDescription .! !
!Cashier methodsFor: 'nil' stamp: 'db 11/19/2020 18:57:55'!
checkout: aCart

	^self class signalCannotCheckoutWithAnEmptyCart ! !

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/19/2020 18:57:58'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/19/2020 18:57:58'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 18:58:30' prior: 50875978!
cannotCheckoutWithAnEmptyCartErrorDescription
	^'cannot checkout with an empty cart'! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 18:58:34' prior: 50875984!
signalCannotCheckoutWithAnEmptyCart
	self error: self cannotCheckoutWithAnEmptyCartErrorDescription .! !

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/19/2020 18:58:42'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/19/2020 18:58:42'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 18:59:05' prior: 50875968!
test01CannotCheckoutWithAnEmptyCart
	
	| cart cashier |
	cart := Cart new.
	cashier := Cashier new.
	
	self  should: [cashier checkout: cart] 
		 raise: Error 
		 withMessageText: Cashier cannotCheckoutWithAnEmptyCartErrorDescription.
	! !

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/19/2020 18:59:09'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 19:08:41'!
test02CheckoutWithOneItem
	
	| cart cashier |
	cart := Cart new.
	cashier := Cashier new.
	
	
	
	
	"Recurso: /checkOutCart Par�metros:
		cartId: Id del carrito creado con /createCart
		ccn: N�mero de tarjeta de credito
		cced: Fecha de expiraci�n con 2 digitos para el mes y 4 para el a�o cco: Nombre del due�o de la tarjeta.
		En caso de �xito: 0|TRANSACTION_ID"

	
	self  should: [cashier checkout: cart] 
		 raise: Error 
		 withMessageText: Cashier cannotCheckoutWithAnEmptyCartErrorDescription.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 19:10:50' prior: 50876035!
test02CheckoutWithOneItem
	
	| cart cashier prices |
	cart := Cart new.
	
	prices := Dictionary new.
	cashier := Cashier withPriceList: prices.
	
	! !

----End fileIn of /Users/dbenitez/uba/2c2020-IS1/IS1-Trabajos/20-TusLibros/macos64-TusLibros/Packages/TerseGuide.pck.st----!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 19:20:59' prior: 50876054!
test02CheckoutWithOneItem
	
	| cart cashier prices catalog |
	
	catalog := Bag new.
	catalog add: '978-3-9820137-0-2'.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	prices := Dictionary new.
	prices at: '978-3-9820137-0-2' put: 100.
	
	cashier := Cashier withPriceList: prices.
	
	self assert: 100 equals: (cashier totalAmountToPay: cart)
	
	! !
!Cart methodsFor: 'initialization' stamp: 'db 11/19/2020 19:21:24' prior: 50873461 overrides: 16896425!
initialize
	catalog := Set new.
	items := Bag new.! !
!CartTest methodsFor: 'cart-tests' stamp: 'db 11/19/2020 19:21:39' prior: 50875516!
test02ACartWithOneItemHasOneItem

	| cart aCatalog |
	aCatalog := Set new.
	aCatalog add: '978-3-9820137-0-1'.
	cart := Cart with: aCatalog.
	
	cart add:  '978-3-9820137-0-1'.
	self assert: 1 equals: (cart amountOfItems).
	! !
!CartTest methodsFor: 'cart-tests' stamp: 'db 11/19/2020 19:21:44' prior: 50875562!
test03ACartWithMoreThanOneItemHasTheCorrectAmountOfItems

	| cart aCatalog |
	aCatalog := Set new.
	aCatalog add: '978-3-9820137-0-1'.
	aCatalog add: '978-3-9820137-0-2'.
	cart := Cart with: aCatalog.
	
	cart add: '978-3-9820137-0-1' amount: 5.
	cart add: '978-3-9820137-0-2' amount: 3.
	
	self assert: 8 equals: (cart amountOfItems).! !
!CartTest methodsFor: 'cart-tests' stamp: 'db 11/19/2020 19:21:48' prior: 50874353!
test04CannotAddABookWithNonValidISBN

	| cart aCatalog |
	aCatalog := Set new.
	aCatalog add: '978-3-9820137-0-2'.
	cart := Cart with: aCatalog.
	
	self  should: [cart add: '978-3-9820137-X-X' amount: 5.] 
		 raise: Error 
		 withMessageText: Cart ISBNDoesntBelongToCatalogErrorDescription.
	! !
!CartTest methodsFor: 'cart-tests' stamp: 'db 11/19/2020 19:21:51' prior: 50875630!
test05CannotAddABookWithNegativeOrZeroAmount

	| aCatalog cart |
	aCatalog := Set new.
	aCatalog add: '978-3-9820137-0-2'.
	cart := Cart with: aCatalog.
	
	self  should: [cart add: '978-3-9820137-0-1' amount: -5.] 
		 raise: Error 
		 withMessageText: Cart doesntAllowNegativeOrZeroAmountToBeAddedErrorDescription.! !
!CartTest methodsFor: 'cart-tests' stamp: 'db 11/19/2020 19:21:59' prior: 50875749!
test07ListItemsOfACartWithOneItemReturnsAListWithAllBooksAdded

	| cart aCatalog items |
	aCatalog := Set new.
	aCatalog add: '978-3-9820137-0-1'.
	cart := Cart with: aCatalog.
	
	cart add: '978-3-9820137-0-1'.
	
	items := cart listItems.
	
	self assert: 1 equals: items size.
	self assert: items includes: '978-3-9820137-0-1'.
	self assert: 1 equals: (items occurrencesOf: '978-3-9820137-0-1').! !
!CartTest methodsFor: 'cart-tests' stamp: 'db 11/19/2020 19:22:02' prior: 50875781!
test08ListItemsOfACartWithMoreThanOneItemReturnsAListWithAllBooksAdded

	| cart aCatalog items |
	aCatalog := Set new.
	aCatalog add: '978-3-9820137-0-1'.
	aCatalog add: '978-3-9820137-0-2'.
	aCatalog add: '978-3-9820137-0-3'.
	cart := Cart with: aCatalog.
	cart add: '978-3-9820137-0-1' amount: 2.
	cart add: '978-3-9820137-0-2' amount: 3.
	cart add: '978-3-9820137-0-3' amount: 5.
	
	items := cart listItems.
	
	self assert: 10 equals: items size.
	self assert: items includes: '978-3-9820137-0-1'.
	self assert: 2 equals: (items occurrencesOf: '978-3-9820137-0-1').
	self assert: items includes: '978-3-9820137-0-2' .
	self assert: 3 equals: (items occurrencesOf: '978-3-9820137-0-2').
	self assert: items includes: '978-3-9820137-0-3'.
	self assert: 5 equals: (items occurrencesOf: '978-3-9820137-0-3').
	
	
	
	! !

!testRun: #CartTest #test01EmptyCartHasNoItems stamp: 'db 11/19/2020 19:22:06'!
PASSED!

!testRun: #CartTest #test02ACartWithOneItemHasOneItem stamp: 'db 11/19/2020 19:22:06'!
PASSED!

!testRun: #CartTest #test03ACartWithMoreThanOneItemHasTheCorrectAmountOfItems stamp: 'db 11/19/2020 19:22:06'!
PASSED!

!testRun: #CartTest #test04CannotAddABookWithNonValidISBN stamp: 'db 11/19/2020 19:22:06'!
PASSED!

!testRun: #CartTest #test05CannotAddABookWithNegativeOrZeroAmount stamp: 'db 11/19/2020 19:22:06'!
PASSED!

!testRun: #CartTest #test06ListItemsOfEmptyCartReturnsAnEmptyList stamp: 'db 11/19/2020 19:22:06'!
PASSED!

!testRun: #CartTest #test07ListItemsOfACartWithOneItemReturnsAListWithAllBooksAdded stamp: 'db 11/19/2020 19:22:06'!
PASSED!

!testRun: #CartTest #test08ListItemsOfACartWithMoreThanOneItemReturnsAListWithAllBooksAdded stamp: 'db 11/19/2020 19:22:06'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 19:22:22' prior: 50878999!
test02CheckoutWithOneItem
	
	| cart cashier prices catalog |
	
	catalog := Set new.
	catalog add: '978-3-9820137-0-2'.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	prices := Dictionary new.
	prices at: '978-3-9820137-0-2' put: 100.
	
	cashier := Cashier withPriceList: prices.
	
	self assert: 100 equals: (cashier totalAmountToPay: cart)
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 19:22:28' prior: 50879141!
test02CheckoutWithOneItem
	
	| cart cashier prices catalog |
	
	catalog := Set new.
	catalog add: '978-3-9820137-0-2'.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	
	prices := Dictionary new.
	prices at: '978-3-9820137-0-2' put: 100.
	
	cashier := Cashier withPriceList: prices.
	
	self assert: 100 equals: (cashier totalAmountToPay: cart)
	
	! !

!testRun: #CashierTest #test02CheckoutWithOneItem stamp: 'db 11/19/2020 19:22:42'!
ERROR!

!testRun: #CashierTest #test02CheckoutWithOneItem stamp: 'db 11/19/2020 19:22:42'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 19:22:55'!
withPriceList: aDictionary 
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 19:23:04' prior: 50879176!
withPriceList: aDictionary 
	^100! !

!testRun: #CashierTest #test02CheckoutWithOneItem stamp: 'db 11/19/2020 19:23:05'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 19:24:03' prior: 50879181!
withPriceList: prices
 
	! !

!testRun: #CashierTest #test02CheckoutWithOneItem stamp: 'db 11/19/2020 19:24:11'!
ERROR!

!testRun: #CashierTest #test02CheckoutWithOneItem stamp: 'db 11/19/2020 19:24:11'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 19:24:22'!
totalAmountToPay: aCart 
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 19:24:30' prior: 50879199!
totalAmountToPay: aCart 
	^100! !

!testRun: #CashierTest #test02CheckoutWithOneItem stamp: 'db 11/19/2020 19:24:31'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithOneItem stamp: 'db 11/19/2020 19:24:35'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/19/2020 19:24:39'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithOneItem stamp: 'db 11/19/2020 19:24:39'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 19:25:43'!
test02CheckoutMoreThanOneItem
	
	| cart cashier prices catalog |
	
	catalog := Set new.
	catalog add: '978-3-9820137-0-2'.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	
	prices := Dictionary new.
	prices at: '978-3-9820137-0-2' put: 100.
	
	cashier := Cashier withPriceList: prices.
	
	self assert: 100 equals: (cashier totalAmountToPay: cart)
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/19/2020 19:26:05'!
test03CheckoutWithOneItem
	
	| cart cashier prices catalog |
	
	catalog := Set new.
	catalog add: '978-3-9820137-0-2'.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	
	prices := Dictionary new.
	prices at: '978-3-9820137-0-2' put: 100.
	
	cashier := Cashier withPriceList: prices.
	
	self assert: 100 equals: (cashier totalAmountToPay: cart)
	
	! !

!methodRemoval: CashierTest #test02CheckoutWithOneItem stamp: 'db 11/19/2020 19:26:05'!
test02CheckoutWithOneItem
	
	| cart cashier prices catalog |
	
	catalog := Set new.
	catalog add: '978-3-9820137-0-2'.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	
	prices := Dictionary new.
	prices at: '978-3-9820137-0-2' put: 100.
	
	cashier := Cashier withPriceList: prices.
	
	self assert: 100 equals: (cashier totalAmountToPay: cart)
	
	!
!CashierTest methodsFor: 'testing' stamp: 'db 11/19/2020 19:26:35' prior: 50879234!
test03CheckoutWithOneItem
	
	| cart cashier prices catalog |
	
	catalog := Set new.
	catalog add: '978-3-9820137-0-2'.
	catalog add: '978-3-9820137-0-3'.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	
	prices := Dictionary new.
	prices at: '978-3-9820137-0-2' put: 100.
	prices at: '978-3-9820137-0-3' put: 45.
	
	cashier := Cashier withPriceList: prices.
	
	self assert: 100 equals: (cashier totalAmountToPay: cart)
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/19/2020 19:26:47' prior: 50879263!
test03CheckoutWithOneItem
	
	| cart cashier prices catalog |
	
	catalog := Set new.
	catalog add: '978-3-9820137-0-2'.
	catalog add: '978-3-9820137-0-3'.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	prices := Dictionary new.
	prices at: '978-3-9820137-0-2' put: 100.
	prices at: '978-3-9820137-0-3' put: 45.
	
	cashier := Cashier withPriceList: prices.
	
	self assert: 100 equals: (cashier totalAmountToPay: cart)
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/19/2020 19:26:52' prior: 50879280!
test03CheckoutWithOneItem
	
	| cart cashier prices catalog |
	
	catalog := Set new.
	catalog add: '978-3-9820137-0-2'.
	catalog add: '978-3-9820137-0-3'.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	prices := Dictionary new.
	prices at: '978-3-9820137-0-2' put: 100.
	prices at: '978-3-9820137-0-3' put: 45.
	
	cashier := Cashier withPriceList: prices.
	
	self assert: 145 equals: (cashier totalAmountToPay: cart)
	
	! !

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/19/2020 19:26:56'!
PASSED!

!testRun: #CashierTest #test02CheckoutMoreThanOneItem stamp: 'db 11/19/2020 19:26:56'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithOneItem stamp: 'db 11/19/2020 19:26:56'!
FAILURE!

!testRun: #CashierTest #test03CheckoutWithOneItem stamp: 'db 11/19/2020 19:26:56'!
FAILURE!

!methodRemoval: Cashier class #totalAmountToPay: stamp: 'db 11/19/2020 19:28:39'!
totalAmountToPay: aCart 
	^100!
!Cashier methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 19:28:46'!
totalAmountToPay: aCart 
	^100! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 19:29:19' prior: 50879189!
withPriceList: aListOfPrices
 
	! !

!classDefinition: 'Cashier class' category: 'Tus Libros.com' stamp: 'db 11/19/2020 19:29:49'!
Cashier class
	instanceVariableNames: 'prices'!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 19:29:48' prior: 50879336!
withPriceList: aListOfPrices
 	prices := aListOfPrices 
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 19:31:00' prior: 50879331!
totalAmountToPay: aCart 


	aCart listItems sum:  [ :anItem | ].
	^100! !

Cashier class
	instanceVariableNames: ''!

!classDefinition: 'Cashier class' category: 'Tus Libros.com' stamp: 'db 11/19/2020 19:31:28'!
Cashier class
	instanceVariableNames: ''!

Object subclass: #Cashier
	instanceVariableNames: 'prices'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!

!classDefinition: #Cashier category: 'Tus Libros.com' stamp: 'db 11/19/2020 19:31:33'!
Object subclass: #Cashier
	instanceVariableNames: 'prices'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 19:31:54' prior: 50879345!
withPriceList: aListOfPrices
 	^self new initializeWith: aListOfPrices 
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 19:32:20'!
initializeWith: aListOfPrice

	prices := aListOfPrice.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 19:33:07' prior: 50879350!
totalAmountToPay: aCart 

	| totalAmount |

	aCart listItems sum:  [ :anItem | prices ].
	^100! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'db 11/19/2020 19:36:19' prior: 50879383!
totalAmountToPay: aCart 

	| totalAmount |
	
	totalAmount := 0.
	
	aCart listItems sum:  [ :anItem | totalAmount := totalAmount + prices at: anItem].
	
	^totalAmount.
	
	
	! !

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/19/2020 19:36:30'!
PASSED!

!testRun: #CashierTest #test02CheckoutMoreThanOneItem stamp: 'db 11/19/2020 19:36:30'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithOneItem stamp: 'db 11/19/2020 19:36:30'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'db 11/19/2020 19:38:17' prior: 50879298!
test03CheckoutWithOneItem
	
	| cart cashier prices catalog |
	
	catalog := Set new.
	catalog add: '978-3-9820137-0-2'.
	catalog add: '978-3-9820137-0-3'.
	catalog add: '978-3-9820137-0-4'.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	cart add: '978-3-9820137-0-4'.
	
	prices := Dictionary new.
	prices at: '978-3-9820137-0-2' put: 100.
	prices at: '978-3-9820137-0-3' put: 45.
	
	cashier := Cashier withPriceList: prices.
	
	self assert: 145 equals: (cashier totalAmountToPay: cart)
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/19/2020 19:39:00' prior: 50879407!
test03CheckoutWithOneItem
	
	| cart cashier prices catalog |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	cart add: '978-3-9820137-0-4'.
	
	
	
	cashier := Cashier withPriceList: prices.
	
	self assert: 145 equals: (cashier totalAmountToPay: cart)
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/19/2020 19:39:14' prior: 50879427!
test03CheckoutWithOneItem
	
	| cart cashier catalog |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.

	cashier := Cashier withPriceList: catalog.
	
	self assert: 145 equals: (cashier totalAmountToPay: cart)
	
	! !

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/19/2020 19:39:23'!
PASSED!

!testRun: #CashierTest #test02CheckoutMoreThanOneItem stamp: 'db 11/19/2020 19:39:23'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithOneItem stamp: 'db 11/19/2020 19:39:23'!
ERROR!

!testRun: #CashierTest #test03CheckoutWithOneItem stamp: 'db 11/19/2020 19:39:23'!
ERROR!

catalog includes: aBook!
!Cart methodsFor: 'operations private' stamp: 'db 11/19/2020 19:40:52' prior: 50875210!
assertCanAdd: aBook amount: anAmount

	(anAmount <= 0) ifTrue: [^self class signalDoesntAllowNegativeOrZeroAmountToBeAdded ].
	(catalog includesKey: aBook) ifFalse: [^self class signalISBNDoesntBelongToCatalog].

! !

!testRun: #CashierTest #test03CheckoutWithOneItem stamp: 'db 11/19/2020 19:40:53'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/19/2020 19:40:56'!
PASSED!

!testRun: #CashierTest #test02CheckoutMoreThanOneItem stamp: 'db 11/19/2020 19:40:56'!
ERROR!

!testRun: #CashierTest #test03CheckoutWithOneItem stamp: 'db 11/19/2020 19:40:56'!
PASSED!

!testRun: #CashierTest #test02CheckoutMoreThanOneItem stamp: 'db 11/19/2020 19:40:56'!
ERROR!
!Cart methodsFor: 'operations private' stamp: 'db 11/19/2020 19:41:19' prior: 50879471!
assertCanAdd: aBook amount: anAmount

	(anAmount <= 0) ifTrue: [^self class signalDoesntAllowNegativeOrZeroAmountToBeAdded ].
	(catalog includesKey: aBook) ifFalse: [^self class signalISBNDoesntBelongToCatalog].

! !

!testRun: #CartTest #test01EmptyCartHasNoItems stamp: 'db 11/19/2020 19:41:37'!
PASSED!

!testRun: #CartTest #test02ACartWithOneItemHasOneItem stamp: 'db 11/19/2020 19:41:37'!
ERROR!

!testRun: #CartTest #test03ACartWithMoreThanOneItemHasTheCorrectAmountOfItems stamp: 'db 11/19/2020 19:41:37'!
ERROR!

!testRun: #CartTest #test04CannotAddABookWithNonValidISBN stamp: 'db 11/19/2020 19:41:37'!
FAILURE!

!testRun: #CartTest #test05CannotAddABookWithNegativeOrZeroAmount stamp: 'db 11/19/2020 19:41:37'!
PASSED!

!testRun: #CartTest #test06ListItemsOfEmptyCartReturnsAnEmptyList stamp: 'db 11/19/2020 19:41:37'!
PASSED!

!testRun: #CartTest #test07ListItemsOfACartWithOneItemReturnsAListWithAllBooksAdded stamp: 'db 11/19/2020 19:41:37'!
ERROR!

!testRun: #CartTest #test08ListItemsOfACartWithMoreThanOneItemReturnsAListWithAllBooksAdded stamp: 'db 11/19/2020 19:41:37'!
ERROR!
!CashierTest methodsFor: 'testing' stamp: 'db 11/19/2020 19:42:00' prior: 50879220!
test02CheckoutMoreThanOneItem
	
	| cart cashier prices catalog |
	
	catalog := Dictionary new.
	catalog add: '978-3-9820137-0-2'.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	
	prices := Dictionary new.
	prices at: '978-3-9820137-0-2' put: 100.
	
	cashier := Cashier withPriceList: prices.
	
	self assert: 100 equals: (cashier totalAmountToPay: cart)
	
	! !

!testRun: #CashierTest #test02CheckoutMoreThanOneItem stamp: 'db 11/19/2020 19:42:05'!
ERROR!

!testRun: #CashierTest #test02CheckoutMoreThanOneItem stamp: 'db 11/19/2020 19:42:05'!
ERROR!
!CashierTest methodsFor: 'testing' stamp: 'db 11/19/2020 19:42:12' prior: 50879533!
test02CheckoutMoreThanOneItem
	
	| cart cashier prices catalog |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2'.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	
	prices := Dictionary new.
	prices at: '978-3-9820137-0-2' put: 100.
	
	cashier := Cashier withPriceList: prices.
	
	self assert: 100 equals: (cashier totalAmountToPay: cart)
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/19/2020 19:42:35' prior: 50879554!
test02CheckoutMoreThanOneItem
	
	| cart cashier catalog |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	
	cashier := Cashier withPriceList: catalog.
	
	self assert: 100 equals: (cashier totalAmountToPay: cart)
	
	! !

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/19/2020 19:42:43'!
PASSED!

!testRun: #CashierTest #test02CheckoutMoreThanOneItem stamp: 'db 11/19/2020 19:42:43'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithOneItem stamp: 'db 11/19/2020 19:42:43'!
PASSED!

!testRun: #CartTest #test01EmptyCartHasNoItems stamp: 'db 11/19/2020 19:42:52'!
PASSED!

!testRun: #CartTest #test02ACartWithOneItemHasOneItem stamp: 'db 11/19/2020 19:42:52'!
ERROR!

!testRun: #CartTest #test03ACartWithMoreThanOneItemHasTheCorrectAmountOfItems stamp: 'db 11/19/2020 19:42:52'!
ERROR!

!testRun: #CartTest #test04CannotAddABookWithNonValidISBN stamp: 'db 11/19/2020 19:42:52'!
FAILURE!

!testRun: #CartTest #test05CannotAddABookWithNegativeOrZeroAmount stamp: 'db 11/19/2020 19:42:52'!
PASSED!

!testRun: #CartTest #test06ListItemsOfEmptyCartReturnsAnEmptyList stamp: 'db 11/19/2020 19:42:52'!
PASSED!

!testRun: #CartTest #test07ListItemsOfACartWithOneItemReturnsAListWithAllBooksAdded stamp: 'db 11/19/2020 19:42:53'!
ERROR!

!testRun: #CartTest #test08ListItemsOfACartWithMoreThanOneItemReturnsAListWithAllBooksAdded stamp: 'db 11/19/2020 19:42:53'!
ERROR!
!CashierTest methodsFor: 'testing' stamp: 'db 11/19/2020 19:44:21'!
test03CheckoutMoreThanOneItem
	
	| cart cashier catalog |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.

	cashier := Cashier withPriceList: catalog.
	
	self assert: 145 equals: (cashier totalAmountToPay: cart)
	
	! !

!methodRemoval: CashierTest #test03CheckoutWithOneItem stamp: 'db 11/19/2020 19:44:21'!
test03CheckoutWithOneItem
	
	| cart cashier catalog |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.

	cashier := Cashier withPriceList: catalog.
	
	self assert: 145 equals: (cashier totalAmountToPay: cart)
	
	!
!CashierTest methodsFor: 'testing' stamp: 'db 11/19/2020 19:44:44'!
test02CheckoutCartWithOneItem
	
	| cart cashier catalog |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	
	cashier := Cashier withPriceList: catalog.
	
	self assert: 100 equals: (cashier totalAmountToPay: cart)
	
	! !

!methodRemoval: CashierTest #test02CheckoutMoreThanOneItem stamp: 'db 11/19/2020 19:44:44'!
test02CheckoutMoreThanOneItem
	
	| cart cashier catalog |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	
	cashier := Cashier withPriceList: catalog.
	
	self assert: 100 equals: (cashier totalAmountToPay: cart)
	
	!

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/19/2020 19:44:49'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItem stamp: 'db 11/19/2020 19:44:49'!
PASSED!

!testRun: #CashierTest #test03CheckoutMoreThanOneItem stamp: 'db 11/19/2020 19:44:49'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'db 11/19/2020 19:47:20' prior: 50879618!
test03CheckoutMoreThanOneItem
	
	| cart cashier catalog |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.

	cashier := Cashier withPriceList: catalog.
	
	self assert: 145 equals: (cashier totalAmountToPay: cart)
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/19/2020 20:14:46'!
testxxx
	
	| cart cashier |
	cart := Cart new.
	cashier := Cashier new.
	
	"
	creditCard := CreditCard Number: 121313123 expiration: 122025 owner: 'Juan de los palotes'.
	cashier checkout: cart with: creditCard.
	"
	
	"
	cashier checkout: cart creditCardNumber: '13213' creditCardExpiration: '122023' creditCardOwner: 'J kennedy'.
	"
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/19/2020 20:46:04' prior: 50879696!
testxxx
	
	| cart cashier |
	cart := Cart new.
	cashier := Cashier new.
	
	"
	Catalogo -> Carrito -> Cashier. 
	
	creditCard := CreditCard Number: 121313123 expiration: 122025 owner: 'Juan de los palotes'.
	
	- Validar 16 d�gitos.
	- Owner not empty
	- No validar fecha de expiraci�n. Lo valida el cashier.
	
	cashier checkout: cart with: creditCard.
	
	Return ticket or Amount.
	"
	
	"
	cashier checkout: cart creditCardNumber: '13213' creditCardExpiration: '122023' creditCardOwner: 'J kennedy'.
	
	
	Merchant Processor:
		- Tarjeta Robada
		- Tiene cr�dito.
		
	Simular la cara interna de la interfaz.

	"
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/19/2020 20:50:20' prior: 50879710!
testxxx
	
	| cart cashier |
	cart := Cart new.
	cashier := Cashier new.
	
	"
	Catalogo -> Carrito -> Cashier. 
	
	creditCard := CreditCard Number: 121313123 expiration: 122025 owner: 'Juan de los palotes'.
	
	- Validar 16 d�gitos.
	- Owner not empty
	- No validar fecha de expiraci�n. Lo valida el cashier.
	
	cashier checkout: cart with: creditCard.
	
	Return ticket or Amount.
	
	carrito vacio
	checkout robada
	checkout sin fondo
	checkout 
	
	"
	
	"
	cashier checkout: cart creditCardNumber: '13213' creditCardExpiration: '122023' creditCardOwner: 'J kennedy'.
	
	
	Merchant Processor:
		- Tarjeta Robada
		- Tiene cr�dito.
		
	Simular la cara interna de la interfaz.

	"
	
	! !

----QUIT----(19 November 2020 20:57:00) CuisUniversity-4384.image priorSource: 17415411!

----STARTUP---- (23 November 2020 15:14:59) as /Users/dbenitez/uba/2c2020-IS1/IS1-Trabajos/20-TusLibros/macos64-TusLibros/CuisUniversity-4384.image!


TestCase subclass: #CreditCartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!

!classDefinition: #CreditCartTest category: 'Tus Libros.com' stamp: 'db 11/23/2020 15:17:19'!
TestCase subclass: #CreditCartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!

!classDefinition: #CreditCard category: 'Tus Libros.com' stamp: 'db 11/23/2020 15:21:46'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 15:21:41'!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	
	
	CreditCard with: 13131311
	
	
	 

	! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 15:23:57' prior: 50879782!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	
	| cart cashier |
	cart := Cart new.
	cashier := Cashier new.
	
	self  should: [CreditCard with: 1234] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
		
	
	
	
	 

	! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 15:24:11' prior: 50879789!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	self  should: [CreditCard with: 1234] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
		
	
	
	
	 

	! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 15:24:33'!
ERROR!

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 15:24:33'!
ERROR!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:24:43'!
creditCardNumberInvalidLengthNumberErrorDescription
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:25:17' prior: 50879820!
creditCardNumberInvalidLengthNumberErrorDescription
	^'Invalid length number'! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:25:19' prior: 50879826!
creditCardNumberInvalidLengthNumberErrorDescription
	^'Invalid length number�'! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 15:25:20'!
FAILURE!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:25:33' prior: 50879832!
creditCardNumberInvalidLengthNumberErrorDescription
	^'Invalid length number'! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:25:59'!
signalCreditCardNumberInvalidLengthNumber

	^self error: self creditCardNumberInvalidLengthNumberErrorDescription ! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:26:42'!
with: aPan
	
	^CreditCard new initializeWith: aPan ! !
!CreditCard methodsFor: 'nil' stamp: 'db 11/23/2020 15:27:46'!
initializeWith: aPan

	aPan length = 16 ifTrue: [self signalCreditCardNumberInvalidLengthNumber]! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:28:01' prior: 50879859!
initializeWith: aPan

	aPan length = 16 ifFalse: [self signalCreditCardNumberInvalidLengthNumber]! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:28:19' prior: 50879866!
initializeWith: aPan

	aPan length < 16 ifFalse: [self signalCreditCardNumberInvalidLengthNumber]! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:28:55' prior: 50879873!
initializeWith: aPan

	(aPan length = 16 not) ifTrue: [self signalCreditCardNumberInvalidLengthNumber]! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:29:11' prior: 50879880!
initializeWith: aPan

	(aPan length = 16) ifFalse: [self signalCreditCardNumberInvalidLengthNumber]! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 15:29:19'!
FAILURE!

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 15:29:19'!
FAILURE!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 15:30:01' prior: 50879801!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	self  should: [CreditCard with: '1234'] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
		
	
	
	
	 

	! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 15:30:06'!
FAILURE!

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 15:30:06'!
FAILURE!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:30:22' prior: 50879887!
initializeWith: aPan

	(aPan size = 16) ifFalse: [self signalCreditCardNumberInvalidLengthNumber]! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 15:30:25'!
FAILURE!

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 15:30:25'!
FAILURE!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:30:55' prior: 50879921!
initializeWith: aPan

	(aPan size = 16) ifFalse: [^self signalCreditCardNumberInvalidLengthNumber]! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 15:30:57'!
FAILURE!

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 15:30:57'!
FAILURE!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:32:05' prior: 50879936!
initializeWith: aPan

	(aPan size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber]! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 15:32:09'!
PASSED!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 15:32:39' prior: 50879902!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	self  should: [CreditCard with: '1234'] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
		
	
	 

	! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 15:33:05' prior: 50879962!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	| creditCard |
	self  should: [CreditCard with: '1234'] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
		
	
	 
	creditCard := CreditCard with: '1234'! !

'45451234556477894' size.!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 15:35:08' prior: 50879972!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	| creditCard |
	self  should: [CreditCard with: '1234'] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
		
	 
	creditCard := CreditCard with: '4545123455647789'.
	self assert: 16 equals: (creditCard PAN size).! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 15:35:12'!
ERROR!

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 15:35:12'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:35:21'!
PAN
	self shouldBeImplemented.! !

!classDefinition: #CreditCard category: 'Tus Libros.com' stamp: 'db 11/23/2020 15:35:36'!
Object subclass: #CreditCard
	instanceVariableNames: 'pan'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:35:34' prior: 50880007!
PAN
	^pan! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 15:35:39'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:36:03' prior: 50879951!
initializeWith: aPan

	(aPan size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	
	pan := aPan .! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:36:05' prior: 50880027!
initializeWith: aPan

	(aPan size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	pan := aPan .! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 15:36:23'!
PASSED!

 '4545123455647789' isNumber !

 4545123455647789 asString size!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 15:38:43' prior: 50879985!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	| creditCard |
	self  should: [CreditCard with: 1234] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
		
	 
	creditCard := CreditCard with: 4545123455647789.
	self assert: 16 equals: (creditCard PAN size).
	
	
	! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 15:38:57' prior: 50880047!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	| creditCard |
	self  should: [CreditCard with: 1234] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
		
	 
	creditCard := CreditCard with: 4545123455647789.
	self assert: 16 equals: (creditCard PAN size).
	
	
	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:39:07' prior: 50880034!
initializeWith: aPan

	(aPan asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	pan := aPan .! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 15:39:10'!
ERROR!

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 15:39:10'!
ERROR!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 15:39:25' prior: 50880061!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	| creditCard |
	self  should: [CreditCard with: 1234] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
		
	 
	creditCard := CreditCard with: 4545123455647789.
	self assert: 16 equals: (creditCard PAN asString size).
	
	
	! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 15:39:26'!
PASSED!

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 15:39:28'!
PASSED!

----SNAPSHOT----(23 November 2020 15:39:33) CuisUniversity-4384.image priorSource: 17539370!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 15:40:12'!
test02CreditCardNumberOnlyHaveNumbers

	| creditCard |
	self  should: [CreditCard with: 1234] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
		
	 
	creditCard := CreditCard with: 4545123455647789.
	self assert: 16 equals: (creditCard PAN asString size).
	
	
	! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 15:40:24'!
test02CreditCardNumberShouldOnlyHaveNumbers

	| creditCard |
	self  should: [CreditCard with: 1234] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
		
	 
	creditCard := CreditCard with: 4545123455647789.
	self assert: 16 equals: (creditCard PAN asString size).
	
	
	! !

!methodRemoval: CreditCartTest #test02CreditCardNumberOnlyHaveNumbers stamp: 'db 11/23/2020 15:40:24'!
test02CreditCardNumberOnlyHaveNumbers

	| creditCard |
	self  should: [CreditCard with: 1234] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
		
	 
	creditCard := CreditCard with: 4545123455647789.
	self assert: 16 equals: (creditCard PAN asString size).
	
	
	!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 15:41:20' prior: 50880129!
test02CreditCardNumberShouldOnlyHaveNumbers

	
	self  should: [CreditCard with: '789**'] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberShouldOnlyHaveNumbersErrorDescription
		
	 
	! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 15:41:35'!
PASSED!

!testRun: #CreditCartTest #test02CreditCardNumberShouldOnlyHaveNumbers stamp: 'db 11/23/2020 15:41:35'!
ERROR!

!testRun: #CreditCartTest #test02CreditCardNumberShouldOnlyHaveNumbers stamp: 'db 11/23/2020 15:41:35'!
ERROR!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:41:55'!
creditCardNumberShouldOnlyHaveNumbersErrorDescription
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:42:14' prior: 50880176!
creditCardNumberShouldOnlyHaveNumbersErrorDescription
	^'credit card number should only have numbers'! !

!testRun: #CreditCartTest #test02CreditCardNumberShouldOnlyHaveNumbers stamp: 'db 11/23/2020 15:42:19'!
FAILURE!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:42:34' prior: 50880075!
initializeWith: aPan

	
	(aPan asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	pan := aPan .! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:43:03'!
signalCreditCardNumberShouldOnlyHaveNumbers
	^self error: self creditCardNumberShouldOnlyHaveNumbersErrorDescription ! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:43:42' prior: 50880192!
initializeWith: aPan
	
	(aPan isNumber) ifFalse: [^self class signalCreditCardNumberShouldOnlyHaveNumbers ].
	(aPan asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	pan := aPan .! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 15:43:47'!
PASSED!

!testRun: #CreditCartTest #test02CreditCardNumberShouldOnlyHaveNumbers stamp: 'db 11/23/2020 15:43:47'!
PASSED!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 15:44:03' prior: 50880155!
test02CreditCardNumberShouldOnlyHaveNumbers

	self  should: [CreditCard with: '789**'] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberShouldOnlyHaveNumbersErrorDescription
		
	 
	! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 15:44:28' prior: 50880091!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	| creditCard |
	self  should: [CreditCard with: 1234] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
		
	 
	creditCard := CreditCard with: 4545123455647789.
	self assert: 4545123455647789 equals: (creditCard PAN).
	self assert: 16 equals: (creditCard PAN asString size).
	
	
	! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 15:44:31'!
PASSED!

!testRun: #CreditCartTest #test02CreditCardNumberShouldOnlyHaveNumbers stamp: 'db 11/23/2020 15:44:31'!
PASSED!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 15:44:42' prior: 50880233!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	| creditCard |
	self  should: [CreditCard with: 1234] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
	 
	creditCard := CreditCard with: 4545123455647789.
	self assert: 4545123455647789 equals: (creditCard PAN).
	self assert: 16 equals: (creditCard PAN asString size).
	
	
	! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 15:50:52'!
test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 01 expirationYear: 2020 ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberShouldOnlyHaveNumbersErrorDescription
		
	 
	! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 15:50:58'!
PASSED!

!testRun: #CreditCartTest #test02CreditCardNumberShouldOnlyHaveNumbers stamp: 'db 11/23/2020 15:50:58'!
PASSED!

!testRun: #CreditCartTest #test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 11/23/2020 15:50:58'!
FAILURE!

!testRun: #CreditCartTest #test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 11/23/2020 15:50:58'!
FAILURE!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:51:38'!
with: aPan expirationMonth: aMonth expirationYear: aYear
	
	^CreditCard new initializeWith: aPan ! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:51:58' prior: 50880300!
with: aPan expirationMonth: aMonth expirationYear: aYear
	
	^CreditCard new initializeWith: aPan expirationMonth: aMonth expirationYear: aYear.! !

!methodRemoval: CreditCard class #with: stamp: 'db 11/23/2020 15:52:08'!
with: aPan
	
	^CreditCard new initializeWith: aPan !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:53:03'!
initializeWith: aPan expirationMonth: aMonth expirationYear: aYear
	
	(aPan isNumber) ifFalse: [^self class signalCreditCardNumberShouldOnlyHaveNumbers ].
	(aPan asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	pan := aPan .! !

!methodRemoval: CreditCard #initializeWith: stamp: 'db 11/23/2020 15:53:08'!
initializeWith: aPan
	
	(aPan isNumber) ifFalse: [^self class signalCreditCardNumberShouldOnlyHaveNumbers ].
	(aPan asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	pan := aPan .!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 15:53:45' prior: 50880272!
test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 456 expirationYear: 8888 ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberShouldOnlyHaveNumbersErrorDescription.
		
	self  should: [CreditCard with: 4545124512456598 expirationMonth: 78 expirationYear: 79879 ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberShouldOnlyHaveNumbersErrorDescription.
		
	 
	! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 15:55:31' prior: 50880340!
test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 456 expirationYear: 8888 ] 
		 raise: Error 
		 withMessageText: CreditCard expirationMonthShoudHaveTwoDigits.
		
	self  should: [CreditCard with: 4545124512456598 expirationMonth: 78 expirationYear: 79879 ] 
		 raise: Error 
		 withMessageText: CreditCard expirationYearShouldHaveFourDigits.
		
	 
	! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:56:05'!
expirationMonthShoudHaveTwoDigitsErrorDescription
	^'expiration month should have two digits'! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:56:13'!
signalExpirationMonthShoudHaveTwoDigits
	^'expiration month should have two digits'! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:56:48'!
expirationYearShoudHaveFourDigitsErrorDescription
	^'expiration year should have four digits'! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:57:11'!
signalExpirationYearShoudHaveFourDigits
	^self error: self expirationYearShoudHaveFourDigitsErrorDescription ! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 15:57:26' prior: 50880381!
signalExpirationMonthShoudHaveTwoDigits
	^self error: self expirationMonthShoudHaveTwoDigitsErrorDescription ! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 15:57:41' prior: 50880358!
test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 456 expirationYear: 8888 ] 
		 raise: Error 
		 withMessageText: CreditCard expirationMonthShoudHaveTwoDigitsErrorDescription.
		
	self  should: [CreditCard with: 4545124512456598 expirationMonth: 78 expirationYear: 79879 ] 
		 raise: Error 
		 withMessageText: CreditCard expirationYearShouldHaveFourDigitsErrorDescription.
		
	 
	! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 15:57:51'!
FAILURE!

!testRun: #CreditCartTest #test02CreditCardNumberShouldOnlyHaveNumbers stamp: 'db 11/23/2020 15:57:51'!
FAILURE!

!testRun: #CreditCartTest #test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 11/23/2020 15:57:51'!
FAILURE!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 15:58:05' prior: 50880257!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	| creditCard |
	self  should: [CreditCard with: 1234 expirationMonth: 456 expirationYear: 8888 ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
	 
	creditCard := CreditCard with: 4545123455647789.
	self assert: 4545123455647789 equals: (creditCard PAN).
	self assert: 16 equals: (creditCard PAN asString size).
	
	
	! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 15:58:29' prior: 50880437!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	| creditCard |
	self  should: [CreditCard with: 1234 expirationMonth: 45 expirationYear: 8888 ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
	 
	creditCard := CreditCard with: 4545123455647789 expirationMonth: 12 expirationYear: 2025.
	self assert: 4545123455647789 equals: (creditCard PAN).
	self assert: 16 equals: (creditCard PAN asString size).
	
	
	! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 15:58:45' prior: 50880224!
test02CreditCardNumberShouldOnlyHaveNumbers

	self  should: [CreditCard with: '789**'  expirationMonth: 10 expirationYear: 3000 ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberShouldOnlyHaveNumbersErrorDescription
		
	 
	! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 15:58:53'!
PASSED!

!testRun: #CreditCartTest #test02CreditCardNumberShouldOnlyHaveNumbers stamp: 'db 11/23/2020 15:58:53'!
PASSED!

!testRun: #CreditCartTest #test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 11/23/2020 15:58:53'!
FAILURE!

!testRun: #CreditCartTest #test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 11/23/2020 15:58:53'!
FAILURE!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:00:34' prior: 50880319!
initializeWith: aPan expirationMonth: aMonth expirationYear: aYear
	
	(aPan isNumber) ifFalse: [^self class signalCreditCardNumberShouldOnlyHaveNumbers ].
	(aPan asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	
	(aMonth asString size = 2) ifFalse: [^self class signalExpirationMonthShoudHaveTwoDigits ].
	(aYear asString size = 4) ifFalse: [^self class signalExpirationYearShoudHaveFourDigits ].
	pan := aPan .! !

!testRun: #CreditCartTest #test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 11/23/2020 16:00:35'!
ERROR!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:01:23'!
expirationYearShouldHaveFourDigitsErrorDescription
	^'expiration year should have four digits'! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:01:23' prior: 50880393!
signalExpirationYearShoudHaveFourDigits
	^self error: self expirationYearShouldHaveFourDigitsErrorDescription ! !

!methodRemoval: CreditCard class #expirationYearShoudHaveFourDigitsErrorDescription stamp: 'db 11/23/2020 16:01:23'!
expirationYearShoudHaveFourDigitsErrorDescription
	^'expiration year should have four digits'!

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 16:01:28'!
PASSED!

!testRun: #CreditCartTest #test02CreditCardNumberShouldOnlyHaveNumbers stamp: 'db 11/23/2020 16:01:28'!
PASSED!

!testRun: #CreditCartTest #test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 11/23/2020 16:01:28'!
PASSED!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:04:28'!
test04CreditCardShouldHaveANonExpiredExpirationDate

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 13 expirationYear: 8888 ] 
		 raise: Error 
		 withMessageText: CreditCard expirationMonthShoudHaveTwoDigitsErrorDescription.
		! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:04:38'!
test05CreditCardShouldHaveANonExpiredExpirationDate

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 13 expirationYear: 8888 ] 
		 raise: Error 
		 withMessageText: CreditCard expirationMonthShoudHaveTwoDigitsErrorDescription.
		! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:04:46'!
__test05CreditCardShouldHaveANonExpiredExpirationDate

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 13 expirationYear: 8888 ] 
		 raise: Error 
		 withMessageText: CreditCard expirationMonthShoudHaveTwoDigitsErrorDescription.
		! !

!methodRemoval: CreditCartTest #test05CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 16:04:46'!
test05CreditCardShouldHaveANonExpiredExpirationDate

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 13 expirationYear: 8888 ] 
		 raise: Error 
		 withMessageText: CreditCard expirationMonthShoudHaveTwoDigitsErrorDescription.
		!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:05:48'!
test04ExpirationDateShouldHaveAValidMonth

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 13 expirationYear: 8888 ] 
		 raise: Error 
		 withMessageText: CreditCard expirationMonthShoudHaveTwoDigitsErrorDescription.
		! !

!methodRemoval: CreditCartTest #test04CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 16:05:48'!
test04CreditCardShouldHaveANonExpiredExpirationDate

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 13 expirationYear: 8888 ] 
		 raise: Error 
		 withMessageText: CreditCard expirationMonthShoudHaveTwoDigitsErrorDescription.
		!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:06:08' prior: 50880597!
test04ExpirationDateShouldHaveAValidMonth

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 13 expirationYear: 8888 ] 
		 raise: Error 
		 withMessageText: CreditCard nonValidExpirationMonthErrorDescription.
		! !

!testRun: #CreditCartTest #test04ExpirationDateShouldHaveAValidMonth stamp: 'db 11/23/2020 16:06:15'!
ERROR!

!testRun: #CreditCartTest #test04ExpirationDateShouldHaveAValidMonth stamp: 'db 11/23/2020 16:06:15'!
ERROR!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:06:46'!
nonValidExpirationMonthErrorDescription
	^'month should be between 1 and 12'! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:07:17'!
signalNonValidExpirationMonth
	^self error: self nonValidExpirationMonthErrorDescription ! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:07:30' prior: 50880619!
test04ExpirationDateShouldHaveAValidMonth

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 13 expirationYear: 8888 ] 
		 raise: Error 
		 withMessageText: CreditCard nonValidExpirationMonthErrorDescription.
		
	self  should: [CreditCard with: 4545124512456598 expirationMonth: 0 expirationYear: 8888 ] 
		 raise: Error 
		 withMessageText: CreditCard nonValidExpirationMonthErrorDescription.
		
		! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 16:07:34'!
PASSED!

!testRun: #CreditCartTest #test02CreditCardNumberShouldOnlyHaveNumbers stamp: 'db 11/23/2020 16:07:34'!
PASSED!

!testRun: #CreditCartTest #test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 11/23/2020 16:07:34'!
PASSED!

!testRun: #CreditCartTest #test04ExpirationDateShouldHaveAValidMonth stamp: 'db 11/23/2020 16:07:34'!
FAILURE!

!testRun: #CreditCartTest #test04ExpirationDateShouldHaveAValidMonth stamp: 'db 11/23/2020 16:07:34'!
FAILURE!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:08:32' prior: 50880499!
initializeWith: aPan expirationMonth: aMonth expirationYear: aYear
	
	(aPan isNumber) ifFalse: [^self class signalCreditCardNumberShouldOnlyHaveNumbers ].
	(aPan asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	
	(aMonth asString size = 2) ifFalse: [^self class signalExpirationMonthShoudHaveTwoDigits ].
	(aMonth between: 1 and: 12) ifFalse: [^self class signalNonValidExpirationMonth ].
	
	(aYear asString size = 4) ifFalse: [^self class signalExpirationYearShoudHaveFourDigits ].
	
	
	
	pan := aPan .! !

!testRun: #CreditCartTest #test04ExpirationDateShouldHaveAValidMonth stamp: 'db 11/23/2020 16:08:34'!
FAILURE!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:08:54' prior: 50880648!
test04ExpirationDateShouldHaveAValidMonth

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 13 expirationYear: 8888 ] 
		 raise: Error 
		 withMessageText: CreditCard nonValidExpirationMonthErrorDescription.
		
	self  should: [CreditCard with: 4545124512456598 expirationMonth: 00 expirationYear: 8888 ] 
		 raise: Error 
		 withMessageText: CreditCard nonValidExpirationMonthErrorDescription.
		
		! !

!testRun: #CreditCartTest #test04ExpirationDateShouldHaveAValidMonth stamp: 'db 11/23/2020 16:08:55'!
FAILURE!

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 16:09:11'!
PASSED!

!testRun: #CreditCartTest #test02CreditCardNumberShouldOnlyHaveNumbers stamp: 'db 11/23/2020 16:09:11'!
PASSED!

!testRun: #CreditCartTest #test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 11/23/2020 16:09:11'!
FAILURE!

!testRun: #CreditCartTest #test04ExpirationDateShouldHaveAValidMonth stamp: 'db 11/23/2020 16:09:11'!
FAILURE!

!testRun: #CreditCartTest #test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 11/23/2020 16:09:23'!
FAILURE!

!testRun: #CreditCartTest #test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 11/23/2020 16:09:33'!
FAILURE!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:10:05' prior: 50880407!
test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 456 expirationYear: 8888 ] 
		 raise: Error 
		 withMessageText: CreditCard expirationMonthShoudHaveTwoDigitsErrorDescription.
		
	self  should: [CreditCard with: 4545124512456598 expirationMonth: 12 expirationYear: 79879 ] 
		 raise: Error 
		 withMessageText: CreditCard expirationYearShouldHaveFourDigitsErrorDescription.
		
	 
	! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 16:10:07'!
PASSED!

!testRun: #CreditCartTest #test02CreditCardNumberShouldOnlyHaveNumbers stamp: 'db 11/23/2020 16:10:07'!
PASSED!

!testRun: #CreditCartTest #test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 11/23/2020 16:10:07'!
PASSED!

!testRun: #CreditCartTest #test04ExpirationDateShouldHaveAValidMonth stamp: 'db 11/23/2020 16:10:07'!
FAILURE!

!testRun: #CreditCartTest #test04ExpirationDateShouldHaveAValidMonth stamp: 'db 11/23/2020 16:10:08'!
FAILURE!

!testRun: #CreditCartTest #test04ExpirationDateShouldHaveAValidMonth stamp: 'db 11/23/2020 16:10:29'!
FAILURE!

!testRun: #CreditCartTest #test04ExpirationDateShouldHaveAValidMonth stamp: 'db 11/23/2020 16:10:42'!
PASSED!

aMonth asString size!

aMonth asString!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:11:45' prior: 50880708!
test04ExpirationDateShouldHaveAValidMonth

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 13 expirationYear: 8888 ] 
		 raise: Error 
		 withMessageText: CreditCard nonValidExpirationMonthErrorDescription.
		
	self  should: [CreditCard with: 4545124512456598 expirationMonth: -01 expirationYear: 8888 ] 
		 raise: Error 
		 withMessageText: CreditCard nonValidExpirationMonthErrorDescription.
		
		! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 16:11:50'!
PASSED!

!testRun: #CreditCartTest #test02CreditCardNumberShouldOnlyHaveNumbers stamp: 'db 11/23/2020 16:11:50'!
PASSED!

!testRun: #CreditCartTest #test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 11/23/2020 16:11:50'!
PASSED!

!testRun: #CreditCartTest #test04ExpirationDateShouldHaveAValidMonth stamp: 'db 11/23/2020 16:11:50'!
PASSED!

aMonth asString!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:12:46'!
test05CreditCardShouldHaveANonExpiredExpirationDate

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 13 expirationYear: 8888 ] 
		 raise: Error 
		 withMessageText: CreditCard expirationMonthShoudHaveTwoDigitsErrorDescription.
		! !

!methodRemoval: CreditCartTest #__test05CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 16:12:46'!
__test05CreditCardShouldHaveANonExpiredExpirationDate

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 13 expirationYear: 8888 ] 
		 raise: Error 
		 withMessageText: CreditCard expirationMonthShoudHaveTwoDigitsErrorDescription.
		!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:13:07' prior: 50880829!
test05CreditCardShouldHaveANonExpiredExpirationDate

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 07 expirationYear: 1947 ] 
		 raise: Error 
		 withMessageText: CreditCard expirationMonthShoudHaveTwoDigitsErrorDescription.
		! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:13:13' prior: 50880852!
test05CreditCardShouldHaveANonExpiredExpirationDate

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 07 expirationYear: 1947] 
		 raise: Error 
		 withMessageText: CreditCard expirationMonthShoudHaveTwoDigitsErrorDescription.
		! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:13:28' prior: 50880863!
test05CreditCardShouldHaveANonExpiredExpirationDate

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 11 expirationYear: 2020] 
		 raise: Error 
		 withMessageText: CreditCard expirationMonthShoudHaveTwoDigitsErrorDescription.
		! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:13:51' prior: 50880874!
test05CreditCardShouldHaveANonExpiredExpirationDate

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 10 expirationYear: 2020] 
		 raise: Error 
		 withMessageText: CreditCard expirationMonthShoudHaveTwoDigitsErrorDescription.
		! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:14:09' prior: 50880885!
test05CreditCardShouldHaveANonExpiredExpirationDate

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 10 expirationYear: 1947] 
		 raise: Error 
		 withMessageText: CreditCard expirationMonthShoudHaveTwoDigitsErrorDescription.
		! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:14:23' prior: 50880896!
test05CreditCardShouldHaveANonExpiredExpirationDate

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 10 expirationYear: 1947] 
		 raise: Error 
		 withMessageText: CreditCard expirationMonthShoudHaveTwoDigitsErrorDescription.
		
	self  should: [CreditCard with: 4545124512456598 expirationMonth: 10 expirationYear: 2020] 
		 raise: Error 
		 withMessageText: CreditCard expirationMonthShoudHaveTwoDigitsErrorDescription.
		
		! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:15:01' prior: 50880907!
test05CreditCardShouldHaveANonExpiredExpirationDate

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 10 expirationYear: 1947] 
		 raise: Error 
		 withMessageText: CreditCard expiredCreditCardErrorDescription.
		
	self  should: [CreditCard with: 4545124512456598 expirationMonth: 10 expirationYear: 2020] 
		 raise: Error 
		 withMessageText: CreditCard expiredCreditCardErrorDescription.
		
		! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:15:14'!
expiredCreditCardErrorDescription
	^'expired credit card'! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:15:37'!
signalExpiredCreditCard
	^self error: self expiredCreditCardErrorDescription ! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 16:15:47'!
PASSED!

!testRun: #CreditCartTest #test02CreditCardNumberShouldOnlyHaveNumbers stamp: 'db 11/23/2020 16:15:47'!
PASSED!

!testRun: #CreditCartTest #test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 11/23/2020 16:15:47'!
PASSED!

!testRun: #CreditCartTest #test04ExpirationDateShouldHaveAValidMonth stamp: 'db 11/23/2020 16:15:47'!
PASSED!

!testRun: #CreditCartTest #test05CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 16:15:47'!
FAILURE!

!testRun: #CreditCartTest #test05CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 16:15:47'!
FAILURE!

GregorianDate now!

Date today !

Date today year !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:18:54' prior: 50880684!
initializeWith: aPan expirationMonth: aMonth expirationYear: aYear
	
	(aPan isNumber) ifFalse: [^self class signalCreditCardNumberShouldOnlyHaveNumbers ].
	(aPan asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	
	(aMonth asString size = 2) ifFalse: [^self class signalExpirationMonthShoudHaveTwoDigits ].
	(aMonth between: 1 and: 12) ifFalse: [^self class signalNonValidExpirationMonth ].
	
	(aYear asString size = 4) ifFalse: [^self class signalExpirationYearShoudHaveFourDigits ].
	
	aYear >= Date today year ifFalse: [^self class signalExpiredCreditCard ].
	
	
	
	
	
	pan := aPan .! !

Date today month!

Date year: aYear month: aMonth day: 1. !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:21:26' prior: 50880976!
initializeWith: aPan expirationMonth: aMonth expirationYear: aYear
	
	| expirationDate |
	(aPan isNumber) ifFalse: [^self class signalCreditCardNumberShouldOnlyHaveNumbers ].
	(aPan asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	
	(aMonth asString size = 2) ifFalse: [^self class signalExpirationMonthShoudHaveTwoDigits ].
	(aMonth between: 1 and: 12) ifFalse: [^self class signalNonValidExpirationMonth ].
	
	(aYear asString size = 4) ifFalse: [^self class signalExpirationYearShoudHaveFourDigits ].
	
	expirationDate := Date year: aYear month: aMonth day: 1.
	
	expirationDate > Date today ifFalse: [^self class signalExpiredCreditCard ].
	
	
	pan := aPan .! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:21:35' prior: 50881001!
initializeWith: aPan expirationMonth: aMonth expirationYear: aYear
	
	| expirationDate |
	(aPan isNumber) ifFalse: [^self class signalCreditCardNumberShouldOnlyHaveNumbers ].
	(aPan asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	
	(aMonth asString size = 2) ifFalse: [^self class signalExpirationMonthShoudHaveTwoDigits ].
	(aMonth between: 1 and: 12) ifFalse: [^self class signalNonValidExpirationMonth ].
	
	(aYear asString size = 4) ifFalse: [^self class signalExpirationYearShoudHaveFourDigits ].
	
	expirationDate := Date year: aYear month: aMonth day: 1.
	expirationDate > Date today ifFalse: [^self class signalExpiredCreditCard ].
	
	pan := aPan .! !

!testRun: #CreditCartTest #test05CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 16:21:44'!
PASSED!

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 16:21:48'!
PASSED!

!testRun: #CreditCartTest #test02CreditCardNumberShouldOnlyHaveNumbers stamp: 'db 11/23/2020 16:21:48'!
PASSED!

!testRun: #CreditCartTest #test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 11/23/2020 16:21:48'!
PASSED!

!testRun: #CreditCartTest #test04ExpirationDateShouldHaveAValidMonth stamp: 'db 11/23/2020 16:21:48'!
PASSED!

!testRun: #CreditCartTest #test05CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 16:21:48'!
PASSED!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:21:55' prior: 50880924!
test05CreditCardShouldHaveANonExpiredExpirationDate

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 10 expirationYear: 1947] 
		 raise: Error 
		 withMessageText: CreditCard expiredCreditCardErrorDescription.
		
	self  should: [CreditCard with: 4545124512456598 expirationMonth: 11 expirationYear: 2020] 
		 raise: Error 
		 withMessageText: CreditCard expiredCreditCardErrorDescription.
		
		! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 16:21:57'!
PASSED!

!testRun: #CreditCartTest #test02CreditCardNumberShouldOnlyHaveNumbers stamp: 'db 11/23/2020 16:21:57'!
PASSED!

!testRun: #CreditCartTest #test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 11/23/2020 16:21:57'!
PASSED!

!testRun: #CreditCartTest #test04ExpirationDateShouldHaveAValidMonth stamp: 'db 11/23/2020 16:21:57'!
PASSED!

!testRun: #CreditCartTest #test05CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 16:21:57'!
PASSED!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:22:07' prior: 50881074!
test05CreditCardShouldHaveANonExpiredExpirationDate

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 10 expirationYear: 1947] 
		 raise: Error 
		 withMessageText: CreditCard expiredCreditCardErrorDescription.
		
	self  should: [CreditCard with: 4545124512456598 expirationMonth: 12 expirationYear: 2020] 
		 raise: Error 
		 withMessageText: CreditCard expiredCreditCardErrorDescription.
		
		! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 16:22:09'!
PASSED!

!testRun: #CreditCartTest #test02CreditCardNumberShouldOnlyHaveNumbers stamp: 'db 11/23/2020 16:22:09'!
PASSED!

!testRun: #CreditCartTest #test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 11/23/2020 16:22:09'!
PASSED!

!testRun: #CreditCartTest #test04ExpirationDateShouldHaveAValidMonth stamp: 'db 11/23/2020 16:22:09'!
PASSED!

!testRun: #CreditCartTest #test05CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 16:22:09'!
FAILURE!

!testRun: #CreditCartTest #test05CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 16:22:09'!
FAILURE!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:22:15' prior: 50881110!
test05CreditCardShouldHaveANonExpiredExpirationDate

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 10 expirationYear: 1947] 
		 raise: Error 
		 withMessageText: CreditCard expiredCreditCardErrorDescription.
		
	self  should: [CreditCard with: 4545124512456598 expirationMonth: 11 expirationYear: 2020] 
		 raise: Error 
		 withMessageText: CreditCard expiredCreditCardErrorDescription.
		
		! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:22:27' prior: 50881026!
initializeWith: aPan expirationMonth: aMonth expirationYear: aYear
	
	| expirationDate |
	(aPan isNumber) ifFalse: [^self class signalCreditCardNumberShouldOnlyHaveNumbers ].
	(aPan asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	
	(aMonth asString size = 2) ifFalse: [^self class signalExpirationMonthShoudHaveTwoDigits ].
	(aMonth between: 1 and: 12) ifFalse: [^self class signalNonValidExpirationMonth ].
	
	(aYear asString size = 4) ifFalse: [^self class signalExpirationYearShoudHaveFourDigits ].
	
	expirationDate := Date year: aYear month: aMonth day: 31.
	expirationDate > Date today ifFalse: [^self class signalExpiredCreditCard ].
	
	pan := aPan .! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:22:38' prior: 50881165!
initializeWith: aPan expirationMonth: aMonth expirationYear: aYear
	
	| expirationDate |
	(aPan isNumber) ifFalse: [^self class signalCreditCardNumberShouldOnlyHaveNumbers ].
	(aPan asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	
	(aMonth asString size = 2) ifFalse: [^self class signalExpirationMonthShoudHaveTwoDigits ].
	(aMonth between: 1 and: 12) ifFalse: [^self class signalNonValidExpirationMonth ].
	
	(aYear asString size = 4) ifFalse: [^self class signalExpirationYearShoudHaveFourDigits ].
	
	expirationDate := Date year: aYear month: aMonth day: 1.
	expirationDate > Date today ifFalse: [^self class signalExpiredCreditCard ].
	
	pan := aPan .! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:24:36'!
test06CreditCardOwnerCannotBeEmpty

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 10 expirationYear: 1947 creditCardOwner: ''] 
		 raise: Error 
		 withMessageText: CreditCard credtCardOwnerCannotBeEmpty.
		! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:25:13'!
creditCardOwnerCannotBeEmpty
	^'credit card owner cannot be empty'! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:25:38'!
signalCreditCardOwnerCannotBeEmpty
	^self error: self creditCardOwnerCannotBeEmptyErrorDescription ! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:25:47'!
creditCardOwnerCannotBeEmptyErrorDescription
	^'credit card owner cannot be empty'! !

!methodRemoval: CreditCard class #creditCardOwnerCannotBeEmpty stamp: 'db 11/23/2020 16:25:47'!
creditCardOwnerCannotBeEmpty
	^'credit card owner cannot be empty'!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:26:48'!
with: aPan expirationMonth: aMonth expirationYear: aYear creditCardNumber: creditCardOwner 
	
	^CreditCard new initializeWith: aPan expirationMonth: aMonth expirationYear: aYear.! !
!CreditCartTest methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:26:48' prior: 50880797!
test04ExpirationDateShouldHaveAValidMonth

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 13 expirationYear: 8888 creditCardNumber: creditCardOwner ] 
		 raise: Error 
		 withMessageText: CreditCard nonValidExpirationMonthErrorDescription.
		
	self  should: [CreditCard with: 4545124512456598 expirationMonth: -01 expirationYear: 8888 creditCardNumber: creditCardOwner ] 
		 raise: Error 
		 withMessageText: CreditCard nonValidExpirationMonthErrorDescription.
		
		! !
!CreditCartTest methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:26:48' prior: 50880454!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	| creditCard |
	self  should: [CreditCard with: 1234 expirationMonth: 45 expirationYear: 8888 creditCardNumber: creditCardOwner ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
	 
	creditCard := CreditCard with: 4545123455647789 expirationMonth: 12 expirationYear: 2025 creditCardNumber: creditCardOwner.
	self assert: 4545123455647789 equals: (creditCard PAN).
	self assert: 16 equals: (creditCard PAN asString size).
	
	
	! !
!CreditCartTest methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:26:48' prior: 50880752!
test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 456 expirationYear: 8888 creditCardNumber: creditCardOwner ] 
		 raise: Error 
		 withMessageText: CreditCard expirationMonthShoudHaveTwoDigitsErrorDescription.
		
	self  should: [CreditCard with: 4545124512456598 expirationMonth: 12 expirationYear: 79879 creditCardNumber: creditCardOwner ] 
		 raise: Error 
		 withMessageText: CreditCard expirationYearShouldHaveFourDigitsErrorDescription.
		
	 
	! !
!CreditCartTest methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:26:48' prior: 50881149!
test05CreditCardShouldHaveANonExpiredExpirationDate

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 10 expirationYear: 1947 creditCardNumber: creditCardOwner] 
		 raise: Error 
		 withMessageText: CreditCard expiredCreditCardErrorDescription.
		
	self  should: [CreditCard with: 4545124512456598 expirationMonth: 11 expirationYear: 2020 creditCardNumber: creditCardOwner] 
		 raise: Error 
		 withMessageText: CreditCard expiredCreditCardErrorDescription.
		
		! !
!CreditCartTest methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:26:48' prior: 50880472!
test02CreditCardNumberShouldOnlyHaveNumbers

	self  should: [CreditCard with: '789**'  expirationMonth: 10 expirationYear: 3000 creditCardNumber: creditCardOwner ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberShouldOnlyHaveNumbersErrorDescription
		
	 
	! !

!methodRemoval: CreditCard class #with:expirationMonth:expirationYear: stamp: 'db 11/23/2020 16:26:48'!
with: aPan expirationMonth: aMonth expirationYear: aYear
	
	^CreditCard new initializeWith: aPan expirationMonth: aMonth expirationYear: aYear.!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:27:51'!
initializeWith: aPan expirationMonth: aMonth expirationYear: aYear creditCardNumber: creditCardOwner 
	
	| expirationDate |
	(aPan isNumber) ifFalse: [^self class signalCreditCardNumberShouldOnlyHaveNumbers ].
	(aPan asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	
	(aMonth asString size = 2) ifFalse: [^self class signalExpirationMonthShoudHaveTwoDigits ].
	(aMonth between: 1 and: 12) ifFalse: [^self class signalNonValidExpirationMonth ].
	
	(aYear asString size = 4) ifFalse: [^self class signalExpirationYearShoudHaveFourDigits ].
	
	expirationDate := Date year: aYear month: aMonth day: 1.
	expirationDate > Date today ifFalse: [^self class signalExpiredCreditCard ].
	
	pan := aPan .! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:27:51' prior: 50881247!
with: aPan expirationMonth: aMonth expirationYear: aYear creditCardNumber: creditCardOwner 
	
	^CreditCard new initializeWith: aPan expirationMonth: aMonth expirationYear: aYear creditCardNumber: creditCardOwner.! !

!methodRemoval: CreditCard #initializeWith:expirationMonth:expirationYear: stamp: 'db 11/23/2020 16:27:51'!
initializeWith: aPan expirationMonth: aMonth expirationYear: aYear
	
	| expirationDate |
	(aPan isNumber) ifFalse: [^self class signalCreditCardNumberShouldOnlyHaveNumbers ].
	(aPan asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	
	(aMonth asString size = 2) ifFalse: [^self class signalExpirationMonthShoudHaveTwoDigits ].
	(aMonth between: 1 and: 12) ifFalse: [^self class signalNonValidExpirationMonth ].
	
	(aYear asString size = 4) ifFalse: [^self class signalExpirationYearShoudHaveFourDigits ].
	
	expirationDate := Date year: aYear month: aMonth day: 1.
	expirationDate > Date today ifFalse: [^self class signalExpiredCreditCard ].
	
	pan := aPan .!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:28:33' prior: 50881354!
initializeWith: aPan expirationMonth: aMonth expirationYear: aYear creditCardNumber: creditCardOwner 
	
	| expirationDate |
	(aPan isNumber) ifFalse: [^self class signalCreditCardNumberShouldOnlyHaveNumbers ].
	(aPan asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	
	(aMonth asString size = 2) ifFalse: [^self class signalExpirationMonthShoudHaveTwoDigits ].
	(aMonth between: 1 and: 12) ifFalse: [^self class signalNonValidExpirationMonth ].
	
	(aYear asString size = 4) ifFalse: [^self class signalExpirationYearShoudHaveFourDigits ].
	
	expirationDate := Date year: aYear month: aMonth day: 1.
	expirationDate > Date today ifFalse: [^self class signalExpiredCreditCard ].
	
	creditCardOwner isEmpty ifTrue: [^self class signalCreditCardOwnerCannotBeEmpty ].
	
	pan := aPan .! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:28:37' prior: 50881416!
initializeWith: aPan expirationMonth: aMonth expirationYear: aYear creditCardNumber: creditCardOwner 
	
	| expirationDate |
	(aPan isNumber) ifFalse: [^self class signalCreditCardNumberShouldOnlyHaveNumbers ].
	(aPan asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	
	(aMonth asString size = 2) ifFalse: [^self class signalExpirationMonthShoudHaveTwoDigits ].
	(aMonth between: 1 and: 12) ifFalse: [^self class signalNonValidExpirationMonth ].
	
	(aYear asString size = 4) ifFalse: [^self class signalExpirationYearShoudHaveFourDigits ].
	
	expirationDate := Date year: aYear month: aMonth day: 1.
	expirationDate > Date today ifFalse: [^self class signalExpiredCreditCard ].
	
	creditCardOwner isEmpty ifTrue: [^self class signalCreditCardOwnerCannotBeEmpty ].
	
	pan := aPan.! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:28:53' prior: 50881215!
test06CreditCardOwnerCannotBeEmpty

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 10 expirationYear: 1947 creditCardOwner: ''] 
		 raise: Error 
		 withMessageText: CreditCard credtCardOwnerCannotBeEmptyErrorDescription.
		! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:28:59' prior: 50881474!
test06CreditCardOwnerCannotBeEmpty

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 10 expirationYear: 1947 creditCardOwner: ''] 
		 raise: Error 
		 withMessageText: CreditCard creditCardOwnerCannotBeEmptyErrorDescription.
		! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 16:29:01'!
ERROR!

!testRun: #CreditCartTest #test02CreditCardNumberShouldOnlyHaveNumbers stamp: 'db 11/23/2020 16:29:01'!
PASSED!

!testRun: #CreditCartTest #test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 11/23/2020 16:29:01'!
PASSED!

!testRun: #CreditCartTest #test04ExpirationDateShouldHaveAValidMonth stamp: 'db 11/23/2020 16:29:01'!
PASSED!

!testRun: #CreditCartTest #test05CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 16:29:01'!
PASSED!

!testRun: #CreditCartTest #test06CreditCardOwnerCannotBeEmpty stamp: 'db 11/23/2020 16:29:01'!
FAILURE!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:29:25' prior: 50881275!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	| creditCard |
	self  should: [CreditCard with: 1234 expirationMonth: 45 expirationYear: 8888 creditCardNumber: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
	 
	creditCard := CreditCard with: 4545123455647789 expirationMonth: 12 expirationYear: 2025 creditCardNumber: 'owner'.
	self assert: 4545123455647789 equals: (creditCard PAN).
	self assert: 16 equals: (creditCard PAN asString size).
	
	
	! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:29:30' prior: 50881335!
test02CreditCardNumberShouldOnlyHaveNumbers

	self  should: [CreditCard with: '789**'  expirationMonth: 10 expirationYear: 3000 creditCardNumber: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberShouldOnlyHaveNumbersErrorDescription
		
	 
	! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:29:37' prior: 50881296!
test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 456 expirationYear: 8888 creditCardNumber: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard expirationMonthShoudHaveTwoDigitsErrorDescription.
		
	self  should: [CreditCard with: 4545124512456598 expirationMonth: 12 expirationYear: 79879 creditCardNumber: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard expirationYearShouldHaveFourDigitsErrorDescription.
		
	 
	! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:29:45' prior: 50881256!
test04ExpirationDateShouldHaveAValidMonth

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 13 expirationYear: 8888 creditCardNumber: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard nonValidExpirationMonthErrorDescription.
		
	self  should: [CreditCard with: 4545124512456598 expirationMonth: -01 expirationYear: 8888 creditCardNumber: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard nonValidExpirationMonthErrorDescription.
		
		! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:29:59' prior: 50881316!
test05CreditCardShouldHaveANonExpiredExpirationDate

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 10 expirationYear: 1947 creditCardNumber: 'owner'] 
		 raise: Error 
		 withMessageText: CreditCard expiredCreditCardErrorDescription.
		
	self  should: [CreditCard with: 4545124512456598 expirationMonth: 11 expirationYear: 2020 creditCardNumber: 'owner'] 
		 raise: Error 
		 withMessageText: CreditCard expiredCreditCardErrorDescription.
		
		! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 16:30:05'!
PASSED!

!testRun: #CreditCartTest #test02CreditCardNumberShouldOnlyHaveNumbers stamp: 'db 11/23/2020 16:30:05'!
PASSED!

!testRun: #CreditCartTest #test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 11/23/2020 16:30:05'!
PASSED!

!testRun: #CreditCartTest #test04ExpirationDateShouldHaveAValidMonth stamp: 'db 11/23/2020 16:30:05'!
PASSED!

!testRun: #CreditCartTest #test05CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 16:30:05'!
PASSED!

!testRun: #CreditCartTest #test06CreditCardOwnerCannotBeEmpty stamp: 'db 11/23/2020 16:30:05'!
FAILURE!

!testRun: #CreditCartTest #test06CreditCardOwnerCannotBeEmpty stamp: 'db 11/23/2020 16:30:05'!
FAILURE!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:31:05' prior: 50881485!
test06CreditCardOwnerCannotBeEmpty


	self  should: [CreditCard with: 4545124512456598 expirationMonth: 10 expirationYear: 1947 creditCardOwner: ''] 
		 raise: Error 
		 withMessageText: CreditCard creditCardOwnerCannotBeEmptyErrorDescription.
		! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:31:27'!
with: aPan expirationMonth: aMonth expirationYear: aYear creditCardOwner: creditCardOwner 
	
	^CreditCard new initializeWith: aPan expirationMonth: aMonth expirationYear: aYear creditCardNumber: creditCardOwner.! !
!CreditCartTest methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:31:27' prior: 50881551!
test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 456 expirationYear: 8888 creditCardOwner: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard expirationMonthShoudHaveTwoDigitsErrorDescription.
		
	self  should: [CreditCard with: 4545124512456598 expirationMonth: 12 expirationYear: 79879 creditCardOwner: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard expirationYearShouldHaveFourDigitsErrorDescription.
		
	 
	! !
!CreditCartTest methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:31:27' prior: 50881571!
test04ExpirationDateShouldHaveAValidMonth

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 13 expirationYear: 8888 creditCardOwner: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard nonValidExpirationMonthErrorDescription.
		
	self  should: [CreditCard with: 4545124512456598 expirationMonth: -01 expirationYear: 8888 creditCardOwner: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard nonValidExpirationMonthErrorDescription.
		
		! !
!CreditCartTest methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:31:27' prior: 50881539!
test02CreditCardNumberShouldOnlyHaveNumbers

	self  should: [CreditCard with: '789**'  expirationMonth: 10 expirationYear: 3000 creditCardOwner: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberShouldOnlyHaveNumbersErrorDescription
		
	 
	! !
!CreditCartTest methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:31:27' prior: 50881589!
test05CreditCardShouldHaveANonExpiredExpirationDate

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 10 expirationYear: 1947 creditCardOwner: 'owner'] 
		 raise: Error 
		 withMessageText: CreditCard expiredCreditCardErrorDescription.
		
	self  should: [CreditCard with: 4545124512456598 expirationMonth: 11 expirationYear: 2020 creditCardOwner: 'owner'] 
		 raise: Error 
		 withMessageText: CreditCard expiredCreditCardErrorDescription.
		
		! !
!CreditCartTest methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:31:27' prior: 50881519!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	| creditCard |
	self  should: [CreditCard with: 1234 expirationMonth: 45 expirationYear: 8888 creditCardOwner: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
	 
	creditCard := CreditCard with: 4545123455647789 expirationMonth: 12 expirationYear: 2025 creditCardOwner: 'owner'.
	self assert: 4545123455647789 equals: (creditCard PAN).
	self assert: 16 equals: (creditCard PAN asString size).
	
	
	! !

!methodRemoval: CreditCard class #with:expirationMonth:expirationYear:creditCardNumber: stamp: 'db 11/23/2020 16:31:27'!
with: aPan expirationMonth: aMonth expirationYear: aYear creditCardNumber: creditCardOwner 
	
	^CreditCard new initializeWith: aPan expirationMonth: aMonth expirationYear: aYear creditCardNumber: creditCardOwner.!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:31:40' prior: 50881644!
with: aPan expirationMonth: aMonth expirationYear: aYear creditCardOwner: aCreditCardOwner 
	
	^CreditCard new initializeWith: aPan expirationMonth: aMonth expirationYear: aYear creditCardNumber: aCreditCardOwner.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:31:58'!
initializeWith: aPan expirationMonth: aMonth expirationYear: aYear creditCardOwner: creditCardOwner 
	
	| expirationDate |
	(aPan isNumber) ifFalse: [^self class signalCreditCardNumberShouldOnlyHaveNumbers ].
	(aPan asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	
	(aMonth asString size = 2) ifFalse: [^self class signalExpirationMonthShoudHaveTwoDigits ].
	(aMonth between: 1 and: 12) ifFalse: [^self class signalNonValidExpirationMonth ].
	
	(aYear asString size = 4) ifFalse: [^self class signalExpirationYearShoudHaveFourDigits ].
	
	expirationDate := Date year: aYear month: aMonth day: 1.
	expirationDate > Date today ifFalse: [^self class signalExpiredCreditCard ].
	
	creditCardOwner isEmpty ifTrue: [^self class signalCreditCardOwnerCannotBeEmpty ].
	
	pan := aPan.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:31:58' prior: 50881753!
with: aPan expirationMonth: aMonth expirationYear: aYear creditCardOwner: aCreditCardOwner 
	
	^CreditCard new initializeWith: aPan expirationMonth: aMonth expirationYear: aYear creditCardOwner: aCreditCardOwner.! !

!methodRemoval: CreditCard #initializeWith:expirationMonth:expirationYear:creditCardNumber: stamp: 'db 11/23/2020 16:31:58'!
initializeWith: aPan expirationMonth: aMonth expirationYear: aYear creditCardNumber: creditCardOwner 
	
	| expirationDate |
	(aPan isNumber) ifFalse: [^self class signalCreditCardNumberShouldOnlyHaveNumbers ].
	(aPan asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	
	(aMonth asString size = 2) ifFalse: [^self class signalExpirationMonthShoudHaveTwoDigits ].
	(aMonth between: 1 and: 12) ifFalse: [^self class signalNonValidExpirationMonth ].
	
	(aYear asString size = 4) ifFalse: [^self class signalExpirationYearShoudHaveFourDigits ].
	
	expirationDate := Date year: aYear month: aMonth day: 1.
	expirationDate > Date today ifFalse: [^self class signalExpiredCreditCard ].
	
	creditCardOwner isEmpty ifTrue: [^self class signalCreditCardOwnerCannotBeEmpty ].
	
	pan := aPan.!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:32:10' prior: 50881763!
initializeWith: aPan expirationMonth: aMonth expirationYear: aYear creditCardOwner: aCreditCardOwner 
	
	| expirationDate |
	(aPan isNumber) ifFalse: [^self class signalCreditCardNumberShouldOnlyHaveNumbers ].
	(aPan asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	
	(aMonth asString size = 2) ifFalse: [^self class signalExpirationMonthShoudHaveTwoDigits ].
	(aMonth between: 1 and: 12) ifFalse: [^self class signalNonValidExpirationMonth ].
	
	(aYear asString size = 4) ifFalse: [^self class signalExpirationYearShoudHaveFourDigits ].
	
	expirationDate := Date year: aYear month: aMonth day: 1.
	expirationDate > Date today ifFalse: [^self class signalExpiredCreditCard ].
	
	aCreditCardOwner isEmpty ifTrue: [^self class signalCreditCardOwnerCannotBeEmpty ].
	
	pan := aPan.! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 16:32:14'!
PASSED!

!testRun: #CreditCartTest #test02CreditCardNumberShouldOnlyHaveNumbers stamp: 'db 11/23/2020 16:32:14'!
PASSED!

!testRun: #CreditCartTest #test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 11/23/2020 16:32:14'!
PASSED!

!testRun: #CreditCartTest #test04ExpirationDateShouldHaveAValidMonth stamp: 'db 11/23/2020 16:32:14'!
PASSED!

!testRun: #CreditCartTest #test05CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 16:32:14'!
PASSED!

!testRun: #CreditCartTest #test06CreditCardOwnerCannotBeEmpty stamp: 'db 11/23/2020 16:32:14'!
FAILURE!

!testRun: #CreditCartTest #test06CreditCardOwnerCannotBeEmpty stamp: 'db 11/23/2020 16:32:14'!
FAILURE!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:32:34' prior: 50881633!
test06CreditCardOwnerCannotBeEmpty


	self  should: [CreditCard with: 4545124512456598 expirationMonth: 10 expirationYear: 2050 creditCardOwner: ''] 
		 raise: Error 
		 withMessageText: CreditCard creditCardOwnerCannotBeEmptyErrorDescription.
		! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 16:32:38'!
PASSED!

!testRun: #CreditCartTest #test02CreditCardNumberShouldOnlyHaveNumbers stamp: 'db 11/23/2020 16:32:38'!
PASSED!

!testRun: #CreditCartTest #test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 11/23/2020 16:32:38'!
PASSED!

!testRun: #CreditCartTest #test04ExpirationDateShouldHaveAValidMonth stamp: 'db 11/23/2020 16:32:38'!
PASSED!

!testRun: #CreditCartTest #test05CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 16:32:38'!
PASSED!

!testRun: #CreditCartTest #test06CreditCardOwnerCannotBeEmpty stamp: 'db 11/23/2020 16:32:38'!
PASSED!

'dfafasdfadfadsfasdfassdfadsfafas dasdfad'!

self size!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:35:37'!
test06CreditCardOwnerNameCantBeLongerThan30Letters

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 10 expirationYear: 2050 creditCardOwner: 'dfafasdfadfadsfasdfassdfadsfafas dasdfad'] 
		 raise: Error 
		 withMessageText: CreditCard creditCardOwnerNameCantBeLongerThanThirtyErrorDescription.
		! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:36:13'!
creditCardOwnerNameCantBeLongerThanThirtyErrorDescription
	^'credit card owner name cant be longer than thirty '! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:36:42'!
signalCreditCardOwnerNameCantBeLongerThanThirty
	^self error: self creditCardOwnerNameCantBeLongerThanThirtyErrorDescription ! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:36:58'!
test07CreditCardOwnerNameCantBeLongerThan30Letters

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 10 expirationYear: 2050 creditCardOwner: 'dfafasdfadfadsfasdfassdfadsfafas dasdfad'] 
		 raise: Error 
		 withMessageText: CreditCard creditCardOwnerNameCantBeLongerThanThirtyErrorDescription.
		! !

!methodRemoval: CreditCartTest #test06CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 11/23/2020 16:36:58'!
test06CreditCardOwnerNameCantBeLongerThan30Letters

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 10 expirationYear: 2050 creditCardOwner: 'dfafasdfadfadsfasdfassdfadsfafas dasdfad'] 
		 raise: Error 
		 withMessageText: CreditCard creditCardOwnerNameCantBeLongerThanThirtyErrorDescription.
		!

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 16:37:04'!
PASSED!

!testRun: #CreditCartTest #test02CreditCardNumberShouldOnlyHaveNumbers stamp: 'db 11/23/2020 16:37:04'!
PASSED!

!testRun: #CreditCartTest #test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 11/23/2020 16:37:04'!
PASSED!

!testRun: #CreditCartTest #test04ExpirationDateShouldHaveAValidMonth stamp: 'db 11/23/2020 16:37:04'!
PASSED!

!testRun: #CreditCartTest #test05CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 16:37:04'!
PASSED!

!testRun: #CreditCartTest #test06CreditCardOwnerCannotBeEmpty stamp: 'db 11/23/2020 16:37:04'!
PASSED!

!testRun: #CreditCartTest #test07CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 11/23/2020 16:37:04'!
FAILURE!

!testRun: #CreditCartTest #test07CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 11/23/2020 16:37:04'!
FAILURE!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:38:01' prior: 50881832!
initializeWith: aPan expirationMonth: aMonth expirationYear: aYear creditCardOwner: aCreditCardOwner 
	
	| expirationDate |
	(aPan isNumber) ifFalse: [^self class signalCreditCardNumberShouldOnlyHaveNumbers ].
	(aPan asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	
	(aMonth asString size = 2) ifFalse: [^self class signalExpirationMonthShoudHaveTwoDigits ].
	(aMonth between: 1 and: 12) ifFalse: [^self class signalNonValidExpirationMonth ].
	
	(aYear asString size = 4) ifFalse: [^self class signalExpirationYearShoudHaveFourDigits ].
	
	expirationDate := Date year: aYear month: aMonth day: 1.
	expirationDate > Date today ifFalse: [^self class signalExpiredCreditCard ].
	
	aCreditCardOwner isEmpty ifTrue: [^self class signalCreditCardOwnerCannotBeEmpty ].
	
	aCreditCardOwner size <= 30 ifFalse: [^self class signalCreditCardOwnerNameCantBeLongerThanThirty ].
	
	pan := aPan.! !

!testRun: #CreditCartTest #test07CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 11/23/2020 16:38:13'!
PASSED!

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 16:38:15'!
PASSED!

!testRun: #CreditCartTest #test02CreditCardNumberShouldOnlyHaveNumbers stamp: 'db 11/23/2020 16:38:15'!
PASSED!

!testRun: #CreditCartTest #test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 11/23/2020 16:38:15'!
PASSED!

!testRun: #CreditCartTest #test04ExpirationDateShouldHaveAValidMonth stamp: 'db 11/23/2020 16:38:15'!
PASSED!

!testRun: #CreditCartTest #test05CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 16:38:15'!
PASSED!

!testRun: #CreditCartTest #test06CreditCardOwnerCannotBeEmpty stamp: 'db 11/23/2020 16:38:15'!
PASSED!

!testRun: #CreditCartTest #test07CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 11/23/2020 16:38:15'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:40:19' prior: 50879681!
test03CheckoutMoreThanOneItem
	
	| cart cashier catalog |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.

	cashier := Cashier.
	
	self assert: 145 equals: (cashier totalAmountToPay: cart)
	
	! !
!Cart methodsFor: 'testing' stamp: 'db 11/23/2020 16:41:36'!
totalAmountToPay 

	| totalAmount |
	
	totalAmount := 0.
	
	self listItems sum:  [ :anItem | totalAmount := totalAmount + catalog at: anItem].
	
	^totalAmount.! !
!Cart methodsFor: 'testing' stamp: 'db 11/23/2020 16:42:03' prior: 50882082!
totalAmountToPay 

	| totalAmount |
	
	totalAmount := 0.
	
	items sum:  [ :anItem | totalAmount := totalAmount + catalog at: anItem].
	
	^totalAmount.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:42:28' prior: 50879389!
totalAmountToPay: aCart 
	^aCart totalAmountToPay 
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:43:02'!
_testxxx
	
	| cart cashier |
	cart := Cart new.
	cashier := Cashier new.
	
	"
	Catalogo -> Carrito -> Cashier. 
	
	creditCard := CreditCard Number: 121313123 expiration: 122025 owner: 'Juan de los palotes'.
	
	- Validar 16 d�gitos.
	- Owner not empty
	- No validar fecha de expiraci�n. Lo valida el cashier.
	
	cashier checkout: cart with: creditCard.
	
	Return ticket or Amount.
	
	carrito vacio
	checkout robada
	checkout sin fondo
	checkout 
	
	"
	
	"
	cashier checkout: cart creditCardNumber: '13213' creditCardExpiration: '122023' creditCardOwner: 'J kennedy'.
	
	
	Merchant Processor:
		- Tarjeta Robada
		- Tiene cr�dito.
		
	Simular la cara interna de la interfaz.

	"
	
	! !

!methodRemoval: CashierTest #testxxx stamp: 'db 11/23/2020 16:43:02'!
testxxx
	
	| cart cashier |
	cart := Cart new.
	cashier := Cashier new.
	
	"
	Catalogo -> Carrito -> Cashier. 
	
	creditCard := CreditCard Number: 121313123 expiration: 122025 owner: 'Juan de los palotes'.
	
	- Validar 16 d�gitos.
	- Owner not empty
	- No validar fecha de expiraci�n. Lo valida el cashier.
	
	cashier checkout: cart with: creditCard.
	
	Return ticket or Amount.
	
	carrito vacio
	checkout robada
	checkout sin fondo
	checkout 
	
	"
	
	"
	cashier checkout: cart creditCardNumber: '13213' creditCardExpiration: '122023' creditCardOwner: 'J kennedy'.
	
	
	Merchant Processor:
		- Tarjeta Robada
		- Tiene cr�dito.
		
	Simular la cara interna de la interfaz.

	"
	
	!

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/23/2020 16:43:06'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItem stamp: 'db 11/23/2020 16:43:06'!
PASSED!

!testRun: #CashierTest #test03CheckoutMoreThanOneItem stamp: 'db 11/23/2020 16:43:06'!
ERROR!

!testRun: #CashierTest #test03CheckoutMoreThanOneItem stamp: 'db 11/23/2020 16:43:06'!
ERROR!

!testRun: #CashierTest #test03CheckoutMoreThanOneItem stamp: 'db 11/23/2020 16:43:17'!
ERROR!

!methodRemoval: Cashier #initializeWith: stamp: 'db 11/23/2020 16:43:36'!
initializeWith: aListOfPrice

	prices := aListOfPrice.!

!methodRemoval: Cashier class #withPriceList: stamp: 'db 11/23/2020 16:43:44'!
withPriceList: aListOfPrices
 	^self new initializeWith: aListOfPrices 
	!
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:44:02' prior: 50879647!
test02CheckoutCartWithOneItem
	
	| cart cashier catalog |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	
	cashier := Cashier new.
	
	self assert: 100 equals: (cashier totalAmountToPay: cart)
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:44:07' prior: 50882068!
test03CheckoutMoreThanOneItem
	
	| cart cashier catalog |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.

	cashier := Cashier new.
	
	self assert: 145 equals: (cashier totalAmountToPay: cart)
	
	! !

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/23/2020 16:44:11'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItem stamp: 'db 11/23/2020 16:44:11'!
PASSED!

!testRun: #CashierTest #test03CheckoutMoreThanOneItem stamp: 'db 11/23/2020 16:44:11'!
PASSED!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:46:04' prior: 50882006!
initializeWith: aPan expirationMonth: aMonth expirationYear: aYear creditCardOwner: aCreditCardOwner 
	
	
	(aPan isNumber) ifFalse: [^self class signalCreditCardNumberShouldOnlyHaveNumbers ].
	(aPan asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	
	(aMonth asString size = 2) ifFalse: [^self class signalExpirationMonthShoudHaveTwoDigits ].
	(aMonth between: 1 and: 12) ifFalse: [^self class signalNonValidExpirationMonth ].
	
	(aYear asString size = 4) ifFalse: [^self class signalExpirationYearShoudHaveFourDigits ].
	
	aCreditCardOwner isEmpty ifTrue: [^self class signalCreditCardOwnerCannotBeEmpty ].
	
	aCreditCardOwner size <= 30 ifFalse: [^self class signalCreditCardOwnerNameCantBeLongerThanThirty ].
	
	pan := aPan.! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:46:15' prior: 50882102!
_testxxx
	
	| cart cashier |
	cart := Cart new.
	cashier := Cashier new.
	
	"
	Catalogo -> Carrito -> Cashier. 
	
		expirationDate := Date year: aYear month: aMonth day: 1.
	expirationDate > Date today ifFalse: [^self class signalExpiredCreditCard ].
	
	creditCard := CreditCard Number: 121313123 expiration: 122025 owner: 'Juan de los palotes'.
	
	- Validar 16 d�gitos.
	- Owner not empty
	- No validar fecha de expiraci�n. Lo valida el cashier.
	
	cashier checkout: cart with: creditCard.
	
	Return ticket or Amount.
	
	carrito vacio
	checkout robada
	checkout sin fondo
	checkout 
	
	"
	
	"
	cashier checkout: cart creditCardNumber: '13213' creditCardExpiration: '122023' creditCardOwner: 'J kennedy'.
	
	
	Merchant Processor:
		- Tarjeta Robada
		- Tiene cr�dito.
		
	Simular la cara interna de la interfaz.

	"
	
	! !

!classDefinition: #CreditCard category: 'Tus Libros.com' stamp: 'db 11/23/2020 16:47:23'!
Object subclass: #CreditCard
	instanceVariableNames: 'pan expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!

!classDefinition: #CreditCard category: 'Tus Libros.com' stamp: 'db 11/23/2020 16:47:25'!
Object subclass: #CreditCard
	instanceVariableNames: 'pan expirationMonth expirationYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!

!classDefinition: #CreditCard category: 'Tus Libros.com' stamp: 'db 11/23/2020 16:47:26'!
Object subclass: #CreditCard
	instanceVariableNames: 'pan expirationMonth expirationYear creditCardOwner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:47:21' prior: 50882210!
initializeWith: aPan expirationMonth: aMonth expirationYear: aYear creditCardOwner: aCreditCardOwner 
	
	
	(aPan isNumber) ifFalse: [^self class signalCreditCardNumberShouldOnlyHaveNumbers ].
	(aPan asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	
	(aMonth asString size = 2) ifFalse: [^self class signalExpirationMonthShoudHaveTwoDigits ].
	(aMonth between: 1 and: 12) ifFalse: [^self class signalNonValidExpirationMonth ].
	
	(aYear asString size = 4) ifFalse: [^self class signalExpirationYearShoudHaveFourDigits ].
	
	aCreditCardOwner isEmpty ifTrue: [^self class signalCreditCardOwnerCannotBeEmpty ].
	
	aCreditCardOwner size <= 30 ifFalse: [^self class signalCreditCardOwnerNameCantBeLongerThanThirty ].
	
	pan := aPan.
	expirationMonth := aMonth. 
	expirationYear := aYear.
	creditCardOwner := aCreditCardOwner.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:48:27'!
expirationMonth
	^expirationMonth 

	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:48:37'!
expirationYear
	^expirationYear

	! !

!testRun: #CreditCartTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 11/23/2020 16:48:55'!
PASSED!

!testRun: #CreditCartTest #test02CreditCardNumberShouldOnlyHaveNumbers stamp: 'db 11/23/2020 16:48:55'!
PASSED!

!testRun: #CreditCartTest #test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 11/23/2020 16:48:55'!
PASSED!

!testRun: #CreditCartTest #test04ExpirationDateShouldHaveAValidMonth stamp: 'db 11/23/2020 16:48:55'!
PASSED!

!testRun: #CreditCartTest #test05CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 16:48:55'!
FAILURE!

!testRun: #CreditCartTest #test06CreditCardOwnerCannotBeEmpty stamp: 'db 11/23/2020 16:48:55'!
PASSED!

!testRun: #CreditCartTest #test07CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 11/23/2020 16:48:55'!
PASSED!

!testRun: #CreditCartTest #test05CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 16:48:55'!
FAILURE!

!methodRemoval: CreditCartTest #test05CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 16:49:11'!
test05CreditCardShouldHaveANonExpiredExpirationDate

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 10 expirationYear: 1947 creditCardOwner: 'owner'] 
		 raise: Error 
		 withMessageText: CreditCard expiredCreditCardErrorDescription.
		
	self  should: [CreditCard with: 4545124512456598 expirationMonth: 11 expirationYear: 2020 creditCardOwner: 'owner'] 
		 raise: Error 
		 withMessageText: CreditCard expiredCreditCardErrorDescription.
		
		!
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:52:08'!
test04CreditCardShouldHaveANonExpiredExpirationDate



	"

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 10 expirationYear: 1947 creditCardOwner: 'owner'] 
		 raise: Error 
		 withMessageText: CreditCard expiredCreditCardErrorDescription.
		
	self  should: [CreditCard with: 4545124512456598 expirationMonth: 11 expirationYear: 2020 creditCardOwner: 'owner'] 
		 raise: Error 
		 withMessageText: CreditCard expiredCreditCardErrorDescription.
		
		"
	
	| cart cashier catalog vosa |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.

	cashier := Cashier new.
	
	vosa := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2020  creditCardOwner: 'Juan de los palotes'.
	
	cashier checkout: cart creditCard: vosa.
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:52:19' prior: 50882376!
test04CreditCardShouldHaveANonExpiredExpirationDate
	"

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 10 expirationYear: 1947 creditCardOwner: 'owner'] 
		 raise: Error 
		 withMessageText: CreditCard expiredCreditCardErrorDescription.
		
	self  should: [CreditCard with: 4545124512456598 expirationMonth: 11 expirationYear: 2020 creditCardOwner: 'owner'] 
		 raise: Error 
		 withMessageText: CreditCard expiredCreditCardErrorDescription.
		
		"
	
	| cart cashier catalog vosa |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.

	cashier := Cashier new.
	
	vosa := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2020  creditCardOwner: 'Juan de los palotes'.
	
	cashier checkout: cart creditCard: vosa.
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:53:09' prior: 50882408!
test04CreditCardShouldHaveANonExpiredExpirationDate
	"

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 10 expirationYear: 1947 creditCardOwner: 'owner'] 
		 raise: Error 
		 withMessageText: CreditCard expiredCreditCardErrorDescription.
		
	self  should: [CreditCard with: 4545124512456598 expirationMonth: 11 expirationYear: 2020 creditCardOwner: 'owner'] 
		 raise: Error 
		 withMessageText: CreditCard expiredCreditCardErrorDescription.
		
		"
	
	| cart cashier catalog vosa |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.

	cashier := Cashier new.
	
	vosa := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2020  creditCardOwner: 'Juan de los palotes'.
	
	.
	
	self  should: [cashier checkout: cart creditCard: vosa.] 
		 raise: Error 
		 withMessageText: Cashier creditCardExpiredErrorDescription.
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:53:17' prior: 50882440!
test04CreditCardShouldHaveANonExpiredExpirationDate
	"

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 10 expirationYear: 1947 creditCardOwner: 'owner'] 
		 raise: Error 
		 withMessageText: CreditCard expiredCreditCardErrorDescription.
		
	self  should: [CreditCard with: 4545124512456598 expirationMonth: 11 expirationYear: 2020 creditCardOwner: 'owner'] 
		 raise: Error 
		 withMessageText: CreditCard expiredCreditCardErrorDescription.
		
		"
	
	| cart cashier catalog vosa |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.

	cashier := Cashier new.
	
	vosa := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2020  creditCardOwner: 'Juan de los palotes'.
	
	self  should: [cashier checkout: cart creditCard: vosa.] 
		 raise: Error 
		 withMessageText: Cashier creditCardExpiredErrorDescription.
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:54:01' prior: 50882475!
test04CreditCardShouldHaveANonExpiredExpirationDate
	"

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 10 expirationYear: 1947 creditCardOwner: 'owner'] 
		 raise: Error 
		 withMessageText: CreditCard expiredCreditCardErrorDescription.
		
	self  should: [CreditCard with: 4545124512456598 expirationMonth: 11 expirationYear: 2020 creditCardOwner: 'owner'] 
		 raise: Error 
		 withMessageText: CreditCard expiredCreditCardErrorDescription.
		
		"
	
	| cart cashier catalog expiredCC |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.

	cashier := Cashier new.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2020  creditCardOwner: 'Juan de los palotes'.
	
	self  should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier creditCardExpiredErrorDescription.
	
	
	! !

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/23/2020 16:54:07'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItem stamp: 'db 11/23/2020 16:54:07'!
PASSED!

!testRun: #CashierTest #test03CheckoutMoreThanOneItem stamp: 'db 11/23/2020 16:54:07'!
PASSED!

!testRun: #CashierTest #test04CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 16:54:07'!
ERROR!

!testRun: #CashierTest #test04CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 16:54:07'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:54:44'!
checkout: aCart creditCard: creditCard 

	^self class signalCannotCheckoutWithAnEmptyCart ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:54:44' prior: 50876021!
test01CannotCheckoutWithAnEmptyCart
	
	| cart cashier |
	cart := Cart new.
	cashier := Cashier new.
	
	self  should: [cashier checkout: cart creditCard: aCreditCard] 
		 raise: Error 
		 withMessageText: Cashier cannotCheckoutWithAnEmptyCartErrorDescription.
	! !

!methodRemoval: Cashier #checkout: stamp: 'db 11/23/2020 16:54:44'!
checkout: aCart

	^self class signalCannotCheckoutWithAnEmptyCart !
!Cashier methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:55:11' prior: 50882561!
checkout: aCart creditCard: aCreditCard 

	^self class signalCannotCheckoutWithAnEmptyCart ! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:55:37'!
creditCardExpiredErrorDescription
	^'credit card expired'! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:56:06'!
signalCreditCardExpired
	^self error: self creditCardExpiredErrorDescription ! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 16:57:01' prior: 50882567!
test01CannotCheckoutWithAnEmptyCart
	
	| cart cashier aCreditCard |
	cart := Cart new.
	cashier := Cashier new.
	
	aCreditCard := CreditCard with: 4545787845458989 expirationMonth: 12  expirationYear: 2050 creditCardOwner: 'juan de los palotes'.
	
	self  should: [cashier checkout: cart creditCard: aCreditCard] 
		 raise: Error 
		 withMessageText: Cashier cannotCheckoutWithAnEmptyCartErrorDescription.
	! !

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/23/2020 16:57:16'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItem stamp: 'db 11/23/2020 16:57:16'!
PASSED!

!testRun: #CashierTest #test03CheckoutMoreThanOneItem stamp: 'db 11/23/2020 16:57:16'!
PASSED!

!testRun: #CashierTest #test04CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 16:57:16'!
FAILURE!

!testRun: #CashierTest #test04CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 16:57:16'!
FAILURE!

!testRun: #CashierTest #test04CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 16:57:30'!
FAILURE!

----SNAPSHOT----(23 November 2020 16:58:12) CuisUniversity-4384.image priorSource: 17550794!
!Cashier methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 16:59:05' prior: 50882583!
checkout: aCart creditCard: aCreditCard 

	aCart isEmpty ifTrue: [^self class signalCannotCheckoutWithAnEmptyCart]
	
	 ! !

!testRun: #CashierTest #test04CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 16:59:06'!
FAILURE!

aCart isEmpty!
!Cart methodsFor: 'testing' stamp: 'db 11/23/2020 16:59:56'!
isEmpty
	^items isEmpty ! !

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/23/2020 17:00:01'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItem stamp: 'db 11/23/2020 17:00:01'!
PASSED!

!testRun: #CashierTest #test03CheckoutMoreThanOneItem stamp: 'db 11/23/2020 17:00:01'!
PASSED!

!testRun: #CashierTest #test04CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 17:00:01'!
FAILURE!

!testRun: #CashierTest #test04CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 17:00:01'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 17:01:46' prior: 50882639!
checkout: aCart creditCard: aCreditCard 

	| expirationDate |
	aCart isEmpty ifTrue: [^self class signalCannotCheckoutWithAnEmptyCart].
	
	
	expirationDate := Date year: (aCreditCard expirationYear ) month: (aCreditCard expirationMonth) day: 1.
	 
	
	
	 ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 17:02:26' prior: 50882670!
checkout: aCart creditCard: aCreditCard 

	| expirationDate |
	aCart isEmpty ifTrue: [^self class signalCannotCheckoutWithAnEmptyCart].
	
	expirationDate := Date year: (aCreditCard expirationYear ) month: (aCreditCard expirationMonth) day: 1.
	expirationDate <= Date today ifTrue: [^self class signalCreditCardExpired ].
	
	
	 ! !

!testRun: #CashierTest #test04CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 17:02:29'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 17:02:52' prior: 50882681!
checkout: aCart creditCard: aCreditCard 

	| expirationDate |
	aCart isEmpty ifTrue: [^self class signalCannotCheckoutWithAnEmptyCart].
	
	expirationDate := Date year: (aCreditCard expirationYear ) month: (aCreditCard expirationMonth) day: 1.
	expirationDate < (Date today) ifTrue: [^self class signalCreditCardExpired ].
	
	
	 ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 17:02:55' prior: 50882698!
checkout: aCart creditCard: aCreditCard 

	| expirationDate |
	aCart isEmpty ifTrue: [^self class signalCannotCheckoutWithAnEmptyCart].
	
	expirationDate := Date year: (aCreditCard expirationYear ) month: (aCreditCard expirationMonth) day: 1.
	expirationDate <= (Date today) ifTrue: [^self class signalCreditCardExpired ].
	
	
	 ! !

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/23/2020 17:03:04'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItem stamp: 'db 11/23/2020 17:03:04'!
PASSED!

!testRun: #CashierTest #test03CheckoutMoreThanOneItem stamp: 'db 11/23/2020 17:03:04'!
PASSED!

!testRun: #CashierTest #test04CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 17:03:04'!
FAILURE!

!testRun: #CashierTest #test04CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 17:03:04'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 17:03:29' prior: 50882712!
checkout: aCart creditCard: aCreditCard 

	| expirationDate |
	aCart isEmpty ifTrue: [^self class signalCannotCheckoutWithAnEmptyCart].
	
	expirationDate := Date year: (aCreditCard expirationYear ) month: (aCreditCard expirationMonth) day: 1.
	expirationDate < (Date today) ifTrue: [^self class signalCreditCardExpired ].
	
	
	 ! !

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/23/2020 17:03:36'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItem stamp: 'db 11/23/2020 17:03:36'!
PASSED!

!testRun: #CashierTest #test03CheckoutMoreThanOneItem stamp: 'db 11/23/2020 17:03:36'!
PASSED!

!testRun: #CashierTest #test04CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 17:03:36'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 17:03:48' prior: 50882510!
test04CreditCardShouldHaveANonExpiredExpirationDate
	
	| cart cashier catalog expiredCC |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.

	cashier := Cashier new.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2020  creditCardOwner: 'Juan de los palotes'.
	
	self  should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier creditCardExpiredErrorDescription.
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 17:06:21' prior: 50882174!
test02CheckoutCartWithOneItem
	
	| cart cashier catalog aCreditCard totalAmount |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	
	cashier := Cashier new.
	
	totalAmount := cashier checkout: cart creditCard: aCreditCard.
	
	self assert: 100 equals: totalAmount
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 17:06:43' prior: 50882790!
test02CheckoutCartWithOneItem
	
	| cart cashier catalog aCreditCard totalAmount |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	
	cashier := Cashier new.
	
	aCreditCard := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2030  creditCardOwner: 'Juan de los palotes'.
	totalAmount := cashier checkout: cart creditCard: aCreditCard.
	
	self assert: 100 equals: totalAmount
	
	! !

!methodRemoval: Cashier #totalAmountToPay: stamp: 'db 11/23/2020 17:06:57'!
totalAmountToPay: aCart 
	^aCart totalAmountToPay 
	
	
	!
!Cashier methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 17:07:07' prior: 50882742!
checkout: aCart creditCard: aCreditCard 

	| expirationDate |
	aCart isEmpty ifTrue: [^self class signalCannotCheckoutWithAnEmptyCart].
	
	expirationDate := Date year: (aCreditCard expirationYear ) month: (aCreditCard expirationMonth) day: 1.
	expirationDate < (Date today) ifTrue: [^self class signalCreditCardExpired ].
	
	^aCart totalAmountToPay 
	
	
	 ! !

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/23/2020 17:07:13'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItem stamp: 'db 11/23/2020 17:07:13'!
PASSED!

!testRun: #CashierTest #test03CheckoutMoreThanOneItem stamp: 'db 11/23/2020 17:07:13'!
ERROR!

!testRun: #CashierTest #test04CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 17:07:13'!
PASSED!

!testRun: #CashierTest #test03CheckoutMoreThanOneItem stamp: 'db 11/23/2020 17:07:13'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/23/2020 17:07:21'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItem stamp: 'db 11/23/2020 17:07:27'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 17:07:45' prior: 50882186!
test03CheckoutMoreThanOneItem
	
	| cart cashier catalog aCreditCard |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.

	cashier := Cashier new.
	
	cashier checkout: cart creditCard: aCreditCard.
	
	self assert: 145 equals: (cashier totalAmountToPay: cart)
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 17:07:56' prior: 50882863!
test03CheckoutMoreThanOneItem
	
	| cart cashier catalog aCreditCard |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.

	cashier := Cashier new.
	aCreditCard := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2030  creditCardOwner: 'Juan de los palotes'.
	cashier checkout: cart creditCard: aCreditCard.
	
	self assert: 145 equals: (cashier totalAmountToPay: cart)
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 17:08:12' prior: 50882879!
test03CheckoutMoreThanOneItem
	
	| cart cashier catalog aCreditCard totalAmount |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.

	cashier := Cashier new.
	aCreditCard := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2030  creditCardOwner: 'Juan de los palotes'.
	totalAmount := cashier checkout: cart creditCard: aCreditCard.
	
	self assert: 145 equals: totalAmount
	
	! !

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/23/2020 17:08:24'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItem stamp: 'db 11/23/2020 17:08:24'!
PASSED!

!testRun: #CashierTest #test03CheckoutMoreThanOneItem stamp: 'db 11/23/2020 17:08:24'!
PASSED!

!testRun: #CashierTest #test04CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 17:08:24'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 17:09:04' prior: 50882237!
_testxxx
	
	| cart cashier |
	cart := Cart new.
	cashier := Cashier new.
	
	"
	Catalogo -> Carrito -> Cashier. 
	
	expirationDate := Date year: aYear month: aMonth day: 1.
	expirationDate > Date today ifFalse: [^self class signalExpiredCreditCard ].
	
	creditCard := CreditCard Number: 121313123 expiration: 122025 owner: 'Juan de los palotes'.
	
	- Validar 16 d�gitos.
	- Owner not empty
	- No validar fecha de expiraci�n. Lo valida el cashier.
	
	cashier checkout: cart with: creditCard.
	
	Return ticket or Amount.
	
	carrito vacio
	checkout robada
	checkout sin fondo
	 
	
	"
	
	"
	cashier checkout: cart creditCardNumber: '13213' creditCardExpiration: '122023' creditCardOwner: 'J kennedy'.
	
	
	Merchant Processor:
		- Tarjeta Robada
		- Tiene cr�dito.
		
	Simular la cara interna de la interfaz.

	"
	
	! !

Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!

!classDefinition: #MerchantProcessorSimulator category: 'Tus Libros.com' stamp: 'db 11/23/2020 17:18:08'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!
!MerchantProcessorSimulator methodsFor: 'nil' stamp: 'db 11/23/2020 17:19:54'!
debit: anAmount from: aCreditCard
	
! !

!classDefinition: 'MerchantProcessorSimulator class' category: 'Tus Libros.com' stamp: 'db 11/23/2020 17:20:30'!
MerchantProcessorSimulator class
	instanceVariableNames: 'exception'!
!MerchantProcessorSimulator class methodsFor: 'no messages' stamp: 'db 11/23/2020 17:20:27'!
with: anException
	exception := anException 
	! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 17:21:02' prior: 50882984!
with: anException
	^MerchantProcessorSimulator new initializeWith: anException 
	! !

MerchantProcessorSimulator class
	instanceVariableNames: ''!

!classDefinition: 'MerchantProcessorSimulator class' category: 'Tus Libros.com' stamp: 'db 11/23/2020 17:21:10'!
MerchantProcessorSimulator class
	instanceVariableNames: ''!

!classDefinition: #MerchantProcessorSimulator category: 'Tus Libros.com' stamp: 'db 11/23/2020 17:21:43'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'expection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 17:21:40'!
initializeWith: anException
	expection := anException 
	
! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 17:22:02' prior: 50882974!
debit: anAmount from: aCreditCard
	
! !

Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'exception'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!

!classDefinition: #MerchantProcessorSimulator category: 'Tus Libros.com' stamp: 'db 11/23/2020 17:22:29'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'exception'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 17:22:44' prior: 50883018!
debit: anAmount from: aCreditCard
	^exception
! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 17:23:26' prior: 50883012!
initializeWith: anException
	exception := anException 
	
! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 17:24:51'!
test05 
	
	| cart cashier catalog expiredCC mp |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	
	mp := MerchantProcessorSimulator with: 'daf'.

	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2020  creditCardOwner: 'Juan de los palotes'.
	
	self  should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier creditCardExpiredErrorDescription.
	
	
	! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 17:25:31'!
with: aMerchantProcesor
	^Cashier initializeWith: aMerchantProcesor ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 17:25:51'!
initializeWith: aMerchantProcessor	
	 ! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 17:26:57'!
test05MPError
	
	| cart cashier catalog expiredCC mp |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: 'daf'.

	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2020  creditCardOwner: 'Juan de los palotes'.
	
	self  should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier merchantProcessorError.
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 17:28:29' prior: 50883079!
test05MPError

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart cashier catalog expiredCC mp |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: 'daf'.

	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2020  creditCardOwner: 'Juan de los palotes'.
	
	self  should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier merchantProcessorError.
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 17:29:31' prior: 50883101!
test05MPError

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart cashier catalog expiredCC mp |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: 'daf'.

	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2020  creditCardOwner: 'Juan de los palotes'.
	
	self  should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier merchantProcessorFailErrorDescription.
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 17:30:52' prior: 50883125!
test05MPError

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart cashier catalog expiredCC mp |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: 'daf'.

	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2020  creditCardOwner: 'Juan de los palotes'.
	
	self should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier merchantProcessorFailErrorDescription.
	
	
	! !

!methodRemoval: CashierTest #test05 stamp: 'db 11/23/2020 17:35:40'!
test05 
	
	| cart cashier catalog expiredCC mp |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	
	mp := MerchantProcessorSimulator with: 'daf'.

	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2020  creditCardOwner: 'Juan de los palotes'.
	
	self  should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier creditCardExpiredErrorDescription.
	
	
	!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 17:37:34' prior: 50883036!
debit: anAmount from: aCreditCard

	exception notEmpty ifFalse: [^self error: self exception ].
! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 17:37:39' prior: 50883197!
debit: anAmount from: aCreditCard

	exception notEmpty ifFalse: [^self error: self exception].
! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 17:38:17' prior: 50883150!
test05MPError

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart cashier catalog expiredCC mp |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: 'Insufient amount'.

	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2020  creditCardOwner: 'Juan de los palotes'.
	
	self should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier merchantProcessorFailErrorDescription.
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 17:38:30' prior: 50883210!
test05MPError

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart cashier catalog expiredCC mp |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: 'Insuficient amount'.

	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2020  creditCardOwner: 'Juan de los palotes'.
	
	self should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier merchantProcessorFailErrorDescription.
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 17:38:54' prior: 50883235!
test05MPError

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart cashier catalog expiredCC mp |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: 'Insuficient amount'.
	
	mp debit: 'f' from: 'f'.

	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2020  creditCardOwner: 'Juan de los palotes'.
	
	self should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier merchantProcessorFailErrorDescription.
	
	
	! !

!testRun: #CashierTest #test05MPError stamp: 'db 11/23/2020 17:39:24'!
ERROR!
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 17:39:36' prior: 50883260!
test05MPError

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart cashier catalog expiredCC mp |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: 'Insuficient amount'.
	
	mp debit: 'f' from: 'f'.

	"cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2020  creditCardOwner: 'Juan de los palotes'.
	
	self should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier merchantProcessorFailErrorDescription."
	
	
	! !

!testRun: #CashierTest #test05MPError stamp: 'db 11/23/2020 17:39:43'!
PASSED!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 17:40:23' prior: 50883204!
debit: anAmount from: aCreditCard

	exception notEmpty ifFalse: [^self error: exception].
! !

!testRun: #CashierTest #test05MPError stamp: 'db 11/23/2020 17:40:30'!
PASSED!

exception notEmpty!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 17:41:11' prior: 50883317!
debit: anAmount from: aCreditCard

	exception notEmpty ifTrue: [^self error: exception].
! !

!testRun: #CashierTest #test05MPError stamp: 'db 11/23/2020 17:41:12'!
ERROR!
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 17:41:27' prior: 50883288!
test05MPError

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart catalog expiredCC mp |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: ''.
	
	mp debit: 'f' from: 'f'.

	"cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2020  creditCardOwner: 'Juan de los palotes'.
	
	self should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier merchantProcessorFailErrorDescription."
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 17:41:38' prior: 50883335!
test05MPError

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart catalog mp |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator new.
	
	mp debit: 'f' from: 'f'.

	"cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2020  creditCardOwner: 'Juan de los palotes'.
	
	self should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier merchantProcessorFailErrorDescription."
	
	
	! !

!testRun: #CashierTest #test05MPError stamp: 'db 11/23/2020 17:41:42'!
ERROR!

!testRun: #CashierTest #test05MPError stamp: 'db 11/23/2020 17:41:42'!
ERROR!
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 17:41:58' prior: 50883360!
test05MPError

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart catalog mp |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: ''.
	
	mp debit: 'f' from: 'f'.

	"cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2020  creditCardOwner: 'Juan de los palotes'.
	
	self should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier merchantProcessorFailErrorDescription."
	
	
	! !

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/23/2020 17:42:01'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItem stamp: 'db 11/23/2020 17:42:01'!
PASSED!

!testRun: #CashierTest #test03CheckoutMoreThanOneItem stamp: 'db 11/23/2020 17:42:01'!
PASSED!

!testRun: #CashierTest #test04CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 17:42:01'!
PASSED!

!testRun: #CashierTest #test05MPError stamp: 'db 11/23/2020 17:42:01'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/23/2020 17:42:06'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItem stamp: 'db 11/23/2020 17:42:06'!
PASSED!

!testRun: #CashierTest #test03CheckoutMoreThanOneItem stamp: 'db 11/23/2020 17:42:06'!
PASSED!

!testRun: #CashierTest #test04CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 17:42:06'!
PASSED!

!testRun: #CashierTest #test05MPError stamp: 'db 11/23/2020 17:42:06'!
PASSED!

!testRun: #CashierTest #test05MPError stamp: 'db 11/23/2020 17:42:13'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 17:42:18' prior: 50883390!
test05MPError

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart catalog mp |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: 'fsdfs'.
	
	mp debit: 'f' from: 'f'.

	"cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2020  creditCardOwner: 'Juan de los palotes'.
	
	self should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier merchantProcessorFailErrorDescription."
	
	
	! !

!testRun: #CashierTest #test05MPError stamp: 'db 11/23/2020 17:42:21'!
ERROR!

!testRun: #CashierTest #test05MPError stamp: 'db 11/23/2020 17:42:21'!
ERROR!
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 17:42:49' prior: 50883448!
test05MPError

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart catalog mp cashier expiredCC |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: 'insuficient amount'.
	

	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2020  creditCardOwner: 'Juan de los palotes'.
	
	self should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier merchantProcessorFailErrorDescription.
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 17:43:00' prior: 50883478!
test05MPError

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart catalog mp cashier expiredCC |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: 'insuficient amount'.
	
	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2020  creditCardOwner: 'Juan de los palotes'.
	
	self should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier merchantProcessorFailErrorDescription.
	
	
	! !

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/23/2020 17:43:03'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItem stamp: 'db 11/23/2020 17:43:03'!
PASSED!

!testRun: #CashierTest #test03CheckoutMoreThanOneItem stamp: 'db 11/23/2020 17:43:03'!
PASSED!

!testRun: #CashierTest #test04CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/23/2020 17:43:03'!
PASSED!

!testRun: #CashierTest #test05MPError stamp: 'db 11/23/2020 17:43:03'!
ERROR!

!testRun: #CashierTest #test05MPError stamp: 'db 11/23/2020 17:43:03'!
ERROR!

!classDefinition: #Cashier category: 'Tus Libros.com' stamp: 'db 11/23/2020 17:43:23'!
Object subclass: #Cashier
	instanceVariableNames: 'prices merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 17:43:21' prior: 50883075!
initializeWith: aMerchantProcessor	
	merchantProcessor := aMerchantProcessor .
	 ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 17:44:01' prior: 50882827!
checkout: aCart creditCard: aCreditCard 

	| expirationDate |
	aCart isEmpty ifTrue: [^self class signalCannotCheckoutWithAnEmptyCart].
	
	expirationDate := Date year: (aCreditCard expirationYear ) month: (aCreditCard expirationMonth) day: 1.
	expirationDate < (Date today) ifTrue: [^self class signalCreditCardExpired ].
	
	merchantProcessor debit: aCart  totalAmountToPay from: aCreditCard .
	
	^aCart totalAmountToPay 
	
	
	 ! !

!testRun: #CashierTest #test05MPError stamp: 'db 11/23/2020 17:44:16'!
ERROR!

!testRun: #CashierTest #test05MPError stamp: 'db 11/23/2020 17:44:16'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 17:44:36' prior: 50883070!
with: aMerchantProcesor
	^Cashier initializeWith: aMerchantProcesor ! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 17:45:16' prior: 50883582!
with: aMerchantProcesor
	^Cashier new initializeWith: aMerchantProcesor ! !

!testRun: #CashierTest #test05MPError stamp: 'db 11/23/2020 17:45:24'!
ERROR!

!testRun: #CashierTest #test05MPError stamp: 'db 11/23/2020 17:45:24'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 17:46:02'!
merchantProcessorFailErrorDescription
	^'merchant processor fail'! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 17:46:22'!
siganlMerchantProcessorFail
	^'merchant processor fail'! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 17:46:35' prior: 50883603!
siganlMerchantProcessorFail
	^self error: self merchantProcessorFailErrorDescription ! !

!testRun: #CashierTest #test05MPError stamp: 'db 11/23/2020 17:46:50'!
FAILURE!

!testRun: #CashierTest #test05MPError stamp: 'db 11/23/2020 17:46:50'!
FAILURE!
!CashierTest methodsFor: 'testing' stamp: 'db 11/23/2020 17:47:01' prior: 50883503!
test05MPError

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart catalog mp cashier expiredCC |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: 'insuficient amount'.
	
	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2050  creditCardOwner: 'Juan de los palotes'.
	
	self should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier merchantProcessorFailErrorDescription.
	
	
	! !

!testRun: #CashierTest #test05MPError stamp: 'db 11/23/2020 17:47:05'!
FAILURE!

!testRun: #CashierTest #test05MPError stamp: 'db 11/23/2020 17:47:05'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 17:47:32' prior: 50883560!
checkout: aCart creditCard: aCreditCard 

	| expirationDate |
	aCart isEmpty ifTrue: [^self class signalCannotCheckoutWithAnEmptyCart].
	
	expirationDate := Date year: (aCreditCard expirationYear ) month: (aCreditCard expirationMonth) day: 1.
	expirationDate < (Date today) ifTrue: [^self class signalCreditCardExpired ].
	
	
	

	
	merchantProcessor debit: aCart  totalAmountToPay from: aCreditCard .
	
	^aCart totalAmountToPay 
	
	
	 ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'db 11/23/2020 17:50:54' prior: 50883649!
checkout: aCart creditCard: aCreditCard 

	| expirationDate |
	aCart isEmpty ifTrue: [^self class signalCannotCheckoutWithAnEmptyCart].
	
	expirationDate := Date year: (aCreditCard expirationYear ) month: (aCreditCard expirationMonth) day: 1.
	expirationDate < (Date today) ifTrue: [^self class signalCreditCardExpired ].
	

		

	merchantProcessor debit: aCart  totalAmountToPay from: aCreditCard .
	
	^aCart totalAmountToPay 
	
	
	 ! !

----SNAPSHOT----(23 November 2020 18:01:46) CuisUniversity-4384.image priorSource: 17631524!

----QUIT----(23 November 2020 18:01:52) CuisUniversity-4384.image priorSource: 17665012!

----STARTUP---- (24 November 2020 17:36:28) as /Users/dbenitez/uba/2c2020-IS1/IS1-Trabajos/20-TusLibros/macos64-TusLibros/CuisUniversity-4384.image!

!Cashier methodsFor: 'as yet unclassified' stamp: 'db 11/24/2020 17:41:43' prior: 50883666!
checkout: aCart creditCard: aCreditCard 

	| expirationDate |
	aCart isEmpty ifTrue: [^self class signalCannotCheckoutWithAnEmptyCart].
	
	expirationDate := Date year: (aCreditCard expirationYear ) month: (aCreditCard expirationMonth) day: 1.
	expirationDate < (Date today) ifTrue: [^self class signalCreditCardExpired ].
	
	[merchantProcessor debit: aCart  totalAmountToPay from: aCreditCard] on: Error do: [^self class siganlMerchantProcessorFail ].
	
	^aCart totalAmountToPay 
	
	
	 ! !

!testRun: #CashierTest #test05MPError stamp: 'db 11/24/2020 17:41:58'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'db 11/24/2020 17:42:20' prior: 50883693!
checkout: aCart creditCard: aCreditCard 

	| expirationDate |
	aCart isEmpty ifTrue: [^self class signalCannotCheckoutWithAnEmptyCart].
	
	expirationDate := Date year: (aCreditCard expirationYear ) month: (aCreditCard expirationMonth) day: 1.
	expirationDate < (Date today) ifTrue: [^self class signalCreditCardExpired ].
	
	[merchantProcessor debit: aCart  totalAmountToPay from: aCreditCard] on: Error do: [^self class siganlMerchantProcessorFail].
	
	^aCart totalAmountToPay 
	
	
	 ! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/24/2020 17:51:40'!
test06MPOk

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart catalog mp cashier expiredCC |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: ''.
	
	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2050  creditCardOwner: 'Juan de los palotes'.
	
	self should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier merchantProcessorFailErrorDescription.
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/24/2020 17:52:09' prior: 50883732!
test06MPOk

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart catalog mp cashier expiredCC receipt |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: ''.
	
	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2050  creditCardOwner: 'Juan de los palotes'.
	
	receipt := cashier checkout: cart creditCard: expiredCC.


	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/24/2020 17:54:54' prior: 50883756!
test06MPOk

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart catalog mp cashier expiredCC receipt |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: ''.
	
	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2050  creditCardOwner: 'Juan de los palotes'.
	
	receipt := cashier checkout: cart creditCard: expiredCC.

	self assert: 145 equals: receipt .
	
	
	! !

!testRun: #CashierTest #test06MPOk stamp: 'db 11/24/2020 17:54:57'!
PASSED!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/24/2020 18:02:18'!
validateExpirationDate: aMonth expirationYear: aYear message: aMessage

	self  should: [CreditCard with: 4545124512456598 expirationMonth: aMonth expirationYear: aYear creditCardOwner: 'owner' ] 
		 raise: Error 
		 withMessageText: aMessage.
		! !
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/24/2020 18:03:02' prior: 50881654!
test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear

	self validateExpirationDate: 456 expirationYear: 8888 message: CreditCard expirationMonthShoudHaveTwoDigitsErrorDescription.
	self validateExpirationDate: 12 expirationYear: 79879 message: CreditCard expirationMonthShoudHaveTwoDigitsErrorDescription.
		
	 
	! !

!testRun: #CreditCartTest #test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 11/24/2020 18:03:05'!
FAILURE!

!testRun: #CreditCartTest #test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 11/24/2020 18:03:05'!
FAILURE!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/24/2020 18:03:41' prior: 50883814!
test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear

	self validateExpirationDate: 456 expirationYear: 8888 message: CreditCard expirationMonthShoudHaveTwoDigitsErrorDescription.
	self validateExpirationDate: 12 expirationYear: 79879 message: CreditCard expirationYearShouldHaveFourDigitsErrorDescription.
		
	 
	! !

!testRun: #CreditCartTest #test03ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 11/24/2020 18:03:44'!
PASSED!
!CreditCartTest methodsFor: 'testing' stamp: 'db 11/24/2020 18:04:17' prior: 50881674!
test04ExpirationDateShouldHaveAValidMonth


	self validateExpirationDate: 13 expirationYear: 8888 message: CreditCard nonValidExpirationMonthErrorDescription.
	self validateExpirationDate: -01 expirationYear: 8888 message: CreditCard nonValidExpirationMonthErrorDescription.
		! !

!testRun: #CreditCartTest #test04ExpirationDateShouldHaveAValidMonth stamp: 'db 11/24/2020 18:04:21'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'db 11/24/2020 18:06:53'!
test05WhenMPThrowsAnErrorThePurchaseDoesntCarriedOut

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart catalog mp cashier expiredCC |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: 'insuficient amount'.
	
	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2050  creditCardOwner: 'Juan de los palotes'.
	
	self should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier merchantProcessorFailErrorDescription.
	
	
	! !

!methodRemoval: CashierTest #test05MPError stamp: 'db 11/24/2020 18:06:53'!
test05MPError

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart catalog mp cashier expiredCC |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: 'insuficient amount'.
	
	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2050  creditCardOwner: 'Juan de los palotes'.
	
	self should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier merchantProcessorFailErrorDescription.
	
	
	!
!CashierTest methodsFor: 'testing' stamp: 'db 11/24/2020 18:08:42'!
test06SucessfulCheckoutWhenMPDoesntThrownsAnError

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart catalog mp cashier expiredCC receipt |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: ''.
	
	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2050  creditCardOwner: 'Juan de los palotes'.
	
	receipt := cashier checkout: cart creditCard: expiredCC.

	self assert: 145 equals: receipt .
	
	
	! !

!methodRemoval: CashierTest #test06MPOk stamp: 'db 11/24/2020 18:08:43'!
test06MPOk

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart catalog mp cashier expiredCC receipt |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: ''.
	
	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2050  creditCardOwner: 'Juan de los palotes'.
	
	receipt := cashier checkout: cart creditCard: expiredCC.

	self assert: 145 equals: receipt .
	
	
	!
!CashierTest methodsFor: 'testing' stamp: 'db 11/24/2020 18:08:57'!
test05WhenMPThrowsAnErrorThePurchaseDoesntGetCarriedOut

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart catalog mp cashier expiredCC |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: 'insuficient amount'.
	
	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2050  creditCardOwner: 'Juan de los palotes'.
	
	self should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier merchantProcessorFailErrorDescription.
	
	
	! !

!methodRemoval: CashierTest #test05WhenMPThrowsAnErrorThePurchaseDoesntCarriedOut stamp: 'db 11/24/2020 18:08:57'!
test05WhenMPThrowsAnErrorThePurchaseDoesntCarriedOut

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart catalog mp cashier expiredCC |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	catalog at: '978-3-9820137-0-3' put: 45.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: 'insuficient amount'.
	
	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2050  creditCardOwner: 'Juan de los palotes'.
	
	self should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier merchantProcessorFailErrorDescription.
	
	
	!

TestCase subclass: #CashierTest
	instanceVariableNames: 'catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!

TestCase subclass: #CashierTest
	instanceVariableNames: 'defaultCatalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!

!classDefinition: #CashierTest category: 'Tus Libros.com' stamp: 'db 11/24/2020 18:10:42'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'defaultCatalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!
!CashierTest methodsFor: 'testing' stamp: 'db 11/24/2020 18:11:01'!
setup

	defaultCatalog := Dictionary new.
	
	"
	Catalogo -> Carrito -> Cashier. 
	
	expirationDate := Date year: aYear month: aMonth day: 1.
	expirationDate > Date today ifFalse: [^self class signalExpiredCreditCard ].
	
	creditCard := CreditCard Number: 121313123 expiration: 122025 owner: 'Juan de los palotes'.
	
	- Validar 16 d�gitos.
	- Owner not empty
	- No validar fecha de expiraci�n. Lo valida el cashier.
	
	cashier checkout: cart with: creditCard.
	
	Return ticket or Amount.
	
	carrito vacio
	checkout robada
	checkout sin fondo
	 
	
	"
	
	"
	cashier checkout: cart creditCardNumber: '13213' creditCardExpiration: '122023' creditCardOwner: 'J kennedy'.
	
	
	Merchant Processor:
		- Tarjeta Robada
		- Tiene cr�dito.
		
	Simular la cara interna de la interfaz.

	"
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/24/2020 18:11:21' prior: 50884034!
setup

	defaultCatalog := Dictionary new.
	
	defaultCatalog at: '978-3-9820137-0-2' put: 100.
	defaultCatalog at: '978-3-9820137-0-3' put: 45.
	"
	Catalogo -> Carrito -> Cashier. 
	
	expirationDate := Date year: aYear month: aMonth day: 1.
	expirationDate > Date today ifFalse: [^self class signalExpiredCreditCard ].
	
	creditCard := CreditCard Number: 121313123 expiration: 122025 owner: 'Juan de los palotes'.
	
	- Validar 16 d�gitos.
	- Owner not empty
	- No validar fecha de expiraci�n. Lo valida el cashier.
	
	cashier checkout: cart with: creditCard.
	
	Return ticket or Amount.
	
	carrito vacio
	checkout robada
	checkout sin fondo
	 
	
	"
	
	"
	cashier checkout: cart creditCardNumber: '13213' creditCardExpiration: '122023' creditCardOwner: 'J kennedy'.
	
	
	Merchant Processor:
		- Tarjeta Robada
		- Tiene cr�dito.
		
	Simular la cara interna de la interfaz.

	"
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/24/2020 18:11:22' prior: 50884062!
setup

	defaultCatalog := Dictionary new.
	defaultCatalog at: '978-3-9820137-0-2' put: 100.
	defaultCatalog at: '978-3-9820137-0-3' put: 45.
	"
	Catalogo -> Carrito -> Cashier. 
	
	expirationDate := Date year: aYear month: aMonth day: 1.
	expirationDate > Date today ifFalse: [^self class signalExpiredCreditCard ].
	
	creditCard := CreditCard Number: 121313123 expiration: 122025 owner: 'Juan de los palotes'.
	
	- Validar 16 d�gitos.
	- Owner not empty
	- No validar fecha de expiraci�n. Lo valida el cashier.
	
	cashier checkout: cart with: creditCard.
	
	Return ticket or Amount.
	
	carrito vacio
	checkout robada
	checkout sin fondo
	 
	
	"
	
	"
	cashier checkout: cart creditCardNumber: '13213' creditCardExpiration: '122023' creditCardOwner: 'J kennedy'.
	
	
	Merchant Processor:
		- Tarjeta Robada
		- Tiene cr�dito.
		
	Simular la cara interna de la interfaz.

	"
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/24/2020 18:11:33' prior: 50882768!
test04CreditCardShouldHaveANonExpiredExpirationDate
	
	| cart cashier expiredCC |
	
	
	
	cart := Cart with: defaultCatalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.

	cashier := Cashier new.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2020  creditCardOwner: 'Juan de los palotes'.
	
	self  should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier creditCardExpiredErrorDescription.
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/24/2020 18:11:44' prior: 50882899!
test03CheckoutMoreThanOneItem
	
	| cart cashier aCreditCard totalAmount |
	
	
	
	cart := Cart with: defaultCatalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.

	cashier := Cashier new.
	aCreditCard := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2030  creditCardOwner: 'Juan de los palotes'.
	totalAmount := cashier checkout: cart creditCard: aCreditCard.
	
	self assert: 145 equals: totalAmount
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/24/2020 18:11:55' prior: 50883965!
test05WhenMPThrowsAnErrorThePurchaseDoesntGetCarriedOut

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart mp cashier expiredCC |
	
	
	
	cart := Cart with: defaultCatalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: 'insuficient amount'.
	
	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2050  creditCardOwner: 'Juan de los palotes'.
	
	self should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier merchantProcessorFailErrorDescription.
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/24/2020 18:12:05' prior: 50883919!
test06SucessfulCheckoutWhenMPDoesntThrownsAnError

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart catalog mp cashier expiredCC receipt |
	
	
	
	cart := Cart with: defaultCatalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: ''.
	
	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2050  creditCardOwner: 'Juan de los palotes'.
	
	receipt := cashier checkout: cart creditCard: expiredCC.

	self assert: 145 equals: receipt .
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/24/2020 18:12:09' prior: 50884183!
test06SucessfulCheckoutWhenMPDoesntThrownsAnError

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart mp cashier expiredCC receipt |
	
	cart := Cart with: defaultCatalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: ''.
	
	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2050  creditCardOwner: 'Juan de los palotes'.
	
	receipt := cashier checkout: cart creditCard: expiredCC.

	self assert: 145 equals: receipt .
	
	
	! !

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/24/2020 18:12:14'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItem stamp: 'db 11/24/2020 18:12:14'!
ERROR!

!testRun: #CashierTest #test03CheckoutMoreThanOneItem stamp: 'db 11/24/2020 18:12:14'!
ERROR!

!testRun: #CashierTest #test04CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/24/2020 18:12:14'!
ERROR!

!testRun: #CashierTest #test05WhenMPThrowsAnErrorThePurchaseDoesntGetCarriedOut stamp: 'db 11/24/2020 18:12:14'!
ERROR!

!testRun: #CashierTest #test06SucessfulCheckoutWhenMPDoesntThrownsAnError stamp: 'db 11/24/2020 18:12:14'!
ERROR!
!CashierTest methodsFor: 'testing' stamp: 'db 11/24/2020 18:12:34'!
Setup

	defaultCatalog := Dictionary new.
	defaultCatalog at: '978-3-9820137-0-2' put: 100.
	defaultCatalog at: '978-3-9820137-0-3' put: 45.
	"
	Catalogo -> Carrito -> Cashier. 
	
	expirationDate := Date year: aYear month: aMonth day: 1.
	expirationDate > Date today ifFalse: [^self class signalExpiredCreditCard ].
	
	creditCard := CreditCard Number: 121313123 expiration: 122025 owner: 'Juan de los palotes'.
	
	- Validar 16 d�gitos.
	- Owner not empty
	- No validar fecha de expiraci�n. Lo valida el cashier.
	
	cashier checkout: cart with: creditCard.
	
	Return ticket or Amount.
	
	carrito vacio
	checkout robada
	checkout sin fondo
	 
	
	"
	
	"
	cashier checkout: cart creditCardNumber: '13213' creditCardExpiration: '122023' creditCardOwner: 'J kennedy'.
	
	
	Merchant Processor:
		- Tarjeta Robada
		- Tiene cr�dito.
		
	Simular la cara interna de la interfaz.

	"
	
	! !

!methodRemoval: CashierTest #setup stamp: 'db 11/24/2020 18:12:34'!
setup

	defaultCatalog := Dictionary new.
	defaultCatalog at: '978-3-9820137-0-2' put: 100.
	defaultCatalog at: '978-3-9820137-0-3' put: 45.
	"
	Catalogo -> Carrito -> Cashier. 
	
	expirationDate := Date year: aYear month: aMonth day: 1.
	expirationDate > Date today ifFalse: [^self class signalExpiredCreditCard ].
	
	creditCard := CreditCard Number: 121313123 expiration: 122025 owner: 'Juan de los palotes'.
	
	- Validar 16 d�gitos.
	- Owner not empty
	- No validar fecha de expiraci�n. Lo valida el cashier.
	
	cashier checkout: cart with: creditCard.
	
	Return ticket or Amount.
	
	carrito vacio
	checkout robada
	checkout sin fondo
	 
	
	"
	
	"
	cashier checkout: cart creditCardNumber: '13213' creditCardExpiration: '122023' creditCardOwner: 'J kennedy'.
	
	
	Merchant Processor:
		- Tarjeta Robada
		- Tiene cr�dito.
		
	Simular la cara interna de la interfaz.

	"
	
	!
!CashierTest methodsFor: 'testing' stamp: 'db 11/24/2020 18:12:41' prior: 50884244!
Setup

	defaultCatalog := Dictionary new.
	defaultCatalog at: '978-3-9820137-0-2' put: 100.
	defaultCatalog at: '978-3-9820137-0-3' put: 45.
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/24/2020 18:13:25' overrides: 16927572!
setUp

	defaultCatalog := Dictionary new.
	defaultCatalog at: '978-3-9820137-0-2' put: 100.
	defaultCatalog at: '978-3-9820137-0-3' put: 45.
	! !

!methodRemoval: CashierTest #Setup stamp: 'db 11/24/2020 18:13:25'!
Setup

	defaultCatalog := Dictionary new.
	defaultCatalog at: '978-3-9820137-0-2' put: 100.
	defaultCatalog at: '978-3-9820137-0-3' put: 45.
	!

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/24/2020 18:13:42'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItem stamp: 'db 11/24/2020 18:13:42'!
ERROR!

!testRun: #CashierTest #test03CheckoutMoreThanOneItem stamp: 'db 11/24/2020 18:13:42'!
ERROR!

!testRun: #CashierTest #test04CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/24/2020 18:13:42'!
PASSED!

!testRun: #CashierTest #test05WhenMPThrowsAnErrorThePurchaseDoesntGetCarriedOut stamp: 'db 11/24/2020 18:13:42'!
PASSED!

!testRun: #CashierTest #test06SucessfulCheckoutWhenMPDoesntThrownsAnError stamp: 'db 11/24/2020 18:13:42'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItem stamp: 'db 11/24/2020 18:14:07'!
ERROR!
!CashierTest methodsFor: 'testing' stamp: 'db 11/24/2020 18:14:30' prior: 50884124!
test04CreditCardShouldHaveANonExpiredExpirationDate
	
	| cart cashier expiredCC |
	
	cart := Cart with: defaultCatalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.

	cashier := Cashier new.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2020  creditCardOwner: 'Juan de los palotes'.
	
	self  should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier creditCardExpiredErrorDescription.
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/24/2020 18:14:58' prior: 50882804!
test02CheckoutCartWithOneItem
	
	| cart cashier catalog aCreditCard totalAmount mp |
	
	catalog := Dictionary new.
	catalog at: '978-3-9820137-0-2' put: 100.
	
	cart := Cart with: catalog.
	cart add: '978-3-9820137-0-2'.
	
	mp := MerchantProcessorSimulator with: ''.
	
	cashier := Cashier with: mp.
	
	aCreditCard := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2030  creditCardOwner: 'Juan de los palotes'.
	totalAmount := cashier checkout: cart creditCard: aCreditCard.
	
	self assert: 100 equals: totalAmount
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/24/2020 18:15:04' prior: 50884143!
test03CheckoutMoreThanOneItem
	
	| cart cashier aCreditCard totalAmount mp |
	
	
	
	cart := Cart with: defaultCatalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.

	mp := MerchantProcessorSimulator with: ''.
	
	cashier := Cashier with: mp.
	aCreditCard := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2030  creditCardOwner: 'Juan de los palotes'.
	totalAmount := cashier checkout: cart creditCard: aCreditCard.
	
	self assert: 145 equals: totalAmount
	
	! !

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/24/2020 18:15:09'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItem stamp: 'db 11/24/2020 18:15:09'!
PASSED!

!testRun: #CashierTest #test03CheckoutMoreThanOneItem stamp: 'db 11/24/2020 18:15:09'!
PASSED!

!testRun: #CashierTest #test04CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/24/2020 18:15:09'!
PASSED!

!testRun: #CashierTest #test05WhenMPThrowsAnErrorThePurchaseDoesntGetCarriedOut stamp: 'db 11/24/2020 18:15:09'!
PASSED!

!testRun: #CashierTest #test06SucessfulCheckoutWhenMPDoesntThrownsAnError stamp: 'db 11/24/2020 18:15:09'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'db 11/24/2020 18:15:17' prior: 50884389!
test03CheckoutMoreThanOneItem
	
	| cart cashier aCreditCard totalAmount mp |
	
	cart := Cart with: defaultCatalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.

	mp := MerchantProcessorSimulator with: ''.
	
	cashier := Cashier with: mp.
	aCreditCard := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2030  creditCardOwner: 'Juan de los palotes'.
	totalAmount := cashier checkout: cart creditCard: aCreditCard.
	
	self assert: 145 equals: totalAmount
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/24/2020 18:15:30' prior: 50884160!
test05WhenMPThrowsAnErrorThePurchaseDoesntGetCarriedOut

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart mp cashier expiredCC |
	
	cart := Cart with: defaultCatalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: 'insuficient amount'.
	
	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2050  creditCardOwner: 'Juan de los palotes'.
	
	self should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: Cashier merchantProcessorFailErrorDescription.
	
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'db 11/24/2020 18:19:17' prior: 50883714!
checkout: aCart creditCard: aCreditCard 

	| expirationDate |
	aCart isEmpty ifTrue: [^self class signalCannotCheckoutWithAnEmptyCart].
	
	expirationDate := Date year: (aCreditCard expirationYear ) month: (aCreditCard expirationMonth) day: 1.
	expirationDate < (Date today) ifTrue: [^self class signalCreditCardExpired ].
	
	merchantProcessor debit: aCart  totalAmountToPay from: aCreditCard.

	"[merchantProcessor debit: aCart  totalAmountToPay from: aCreditCard] on: Error do: [^self class siganlMerchantProcessorFail]."
	
	^aCart totalAmountToPay 
	
	
	 ! !

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/24/2020 18:19:30'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItem stamp: 'db 11/24/2020 18:19:30'!
PASSED!

!testRun: #CashierTest #test03CheckoutMoreThanOneItem stamp: 'db 11/24/2020 18:19:30'!
PASSED!

!testRun: #CashierTest #test04CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/24/2020 18:19:30'!
PASSED!

!testRun: #CashierTest #test05WhenMPThrowsAnErrorThePurchaseDoesntGetCarriedOut stamp: 'db 11/24/2020 18:19:30'!
FAILURE!

!testRun: #CashierTest #test06SucessfulCheckoutWhenMPDoesntThrownsAnError stamp: 'db 11/24/2020 18:19:30'!
PASSED!

!testRun: #CashierTest #test05WhenMPThrowsAnErrorThePurchaseDoesntGetCarriedOut stamp: 'db 11/24/2020 18:19:30'!
FAILURE!
!CashierTest methodsFor: 'testing' stamp: 'db 11/24/2020 18:19:47' prior: 50884447!
test05WhenMPThrowsAnErrorThePurchaseDoesntGetCarriedOut

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart mp cashier expiredCC |
	
	cart := Cart with: defaultCatalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: 'insuficient amount'.
	
	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2050  creditCardOwner: 'Juan de los palotes'.
	
	self should: [cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: 'insuficient amount'.
	
	
	! !

!testRun: #CashierTest #test01CannotCheckoutWithAnEmptyCart stamp: 'db 11/24/2020 18:19:51'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItem stamp: 'db 11/24/2020 18:19:51'!
PASSED!

!testRun: #CashierTest #test03CheckoutMoreThanOneItem stamp: 'db 11/24/2020 18:19:51'!
PASSED!

!testRun: #CashierTest #test04CreditCardShouldHaveANonExpiredExpirationDate stamp: 'db 11/24/2020 18:19:51'!
PASSED!

!testRun: #CashierTest #test05WhenMPThrowsAnErrorThePurchaseDoesntGetCarriedOut stamp: 'db 11/24/2020 18:19:51'!
PASSED!

!testRun: #CashierTest #test06SucessfulCheckoutWhenMPDoesntThrownsAnError stamp: 'db 11/24/2020 18:19:51'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'db 11/24/2020 18:20:24' prior: 50884515!
test05WhenMPThrowsAnErrorThePurchaseDoesntGetCarriedOut

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart mp cashier expiredCC |
	
	cart := Cart with: defaultCatalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: 'insuficient amount'.
	
	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2050  creditCardOwner: 'Juan de los palotes'.
	
	self should: [ | receipt |receipt := cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: 'insuficient amount'.
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/24/2020 18:20:43' prior: 50884557!
test05WhenMPThrowsAnErrorThePurchaseDoesntGetCarriedOut

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart mp cashier expiredCC receipt|
	
	cart := Cart with: defaultCatalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: 'insuficient amount'.
	
	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2050  creditCardOwner: 'Juan de los palotes'.
	
	self should: [ receipt := cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: 'insuficient amount'.
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'db 11/24/2020 18:21:18' prior: 50884580!
test05WhenMPThrowsAnErrorThePurchaseDoesntGetCarriedOut

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart mp cashier expiredCC receipt|
	
	cart := Cart with: defaultCatalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: 'insuficient amount'.
	
	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2050  creditCardOwner: 'Juan de los palotes'.
	
	self should: [ receipt := cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: 'insuficient amount'.
		
	self assert: receipt isNil .
	
	
	! !

!testRun: #CashierTest #test05WhenMPThrowsAnErrorThePurchaseDoesntGetCarriedOut stamp: 'db 11/24/2020 18:21:21'!
PASSED!

----SNAPSHOT----(24 November 2020 23:03:39) CuisUniversity-4384.image priorSource: 17665106!

----QUIT----(24 November 2020 23:03:42) CuisUniversity-4384.image priorSource: 17695338!

----STARTUP---- (24 November 2020 23:54:07) as /Users/dbenitez/uba/2c2020-IS1/IS1-Trabajos/20-TusLibros/macos64-TusLibros/CuisUniversity-4384.image!

!CreditCartTest methodsFor: 'testing' stamp: 'db 11/24/2020 23:54:25' prior: 50881949!
test07CreditCardOwnerNameCantBeLongerThan30Letters

	self  should: [CreditCard with: 4545124512456598 expirationMonth: 10 expirationYear: 2050 creditCardOwner: 'dfafasdfadfadsfasdfassdfadsfafas dasdfad'] 
		 raise: Error 
		 withMessageText: CreditCard creditCardOwnerNameCantBeLongerThanThirtyErrorDescription.
		! !

GregorianMonthOfYear!

GregorianMonthOfYear new!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/24/2020 23:56:14' prior: 50882290!
initializeWith: aPan expirationMonth: aMonth expirationYear: aYear creditCardOwner: aCreditCardOwner 
	
	
	(aPan isNumber) ifFalse: [^self class signalCreditCardNumberShouldOnlyHaveNumbers ].
	(aPan asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	
	(aMonth asString size = 2) ifFalse: [^self class signalExpirationMonthShoudHaveTwoDigits ].
	(aMonth between: 1 and: 12) ifFalse: [^self class signalNonValidExpirationMonth ].
	
	(aYear asString size = 4) ifFalse: [^self class signalExpirationYearShoudHaveFourDigits ].
	
	aCreditCardOwner isEmpty ifTrue: [^self class signalCreditCardOwnerCannotBeEmpty ].
	
	aCreditCardOwner size <= 30 ifFalse: [^self class signalCreditCardOwnerNameCantBeLongerThanThirty ].
	
	pan := aPan.
	expirationMonth := aMonth. 
	expirationYear := aYear.
	creditCardOwner := aCreditCardOwner.
	
	

	
	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/24/2020 23:56:26' prior: 50884656!
initializeWith: aPan expirationMonth: aMonth expirationYear: aYear creditCardOwner: aCreditCardOwner 
	
	
	(aPan isNumber) ifFalse: [^self class signalCreditCardNumberShouldOnlyHaveNumbers ].
	(aPan asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	
	(aMonth asString size = 2) ifFalse: [^self class signalExpirationMonthShoudHaveTwoDigits ].
	(aMonth between: 1 and: 12) ifFalse: [^self class signalNonValidExpirationMonth ].
	
	(aYear asString size = 4) ifFalse: [^self class signalExpirationYearShoudHaveFourDigits ].
	
	aCreditCardOwner isEmpty ifTrue: [^self class signalCreditCardOwnerCannotBeEmpty ].
	
	aCreditCardOwner size <= 30 ifFalse: [^self class signalCreditCardOwnerNameCantBeLongerThanThirty ].
	
	pan := aPan.
	expirationMonth := aMonth. 
	expirationYear := aYear.
	creditCardOwner := aCreditCardOwner.
	

	
	! !

GregorianYear with: 2020!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'db 11/24/2020 23:58:05' prior: 50884687!
initializeWith: aPan expirationMonth: aMonth expirationYear: aYear creditCardOwner: aCreditCardOwner 
	
	
	(aPan isNumber) ifFalse: [^self class signalCreditCardNumberShouldOnlyHaveNumbers ].
	(aPan asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	
	(aMonth asString size = 2) ifFalse: [^self class signalExpirationMonthShoudHaveTwoDigits ].
	(aMonth between: 1 and: 12) ifFalse: [^self class signalNonValidExpirationMonth ].
	
	(aYear asString size = 4) ifFalse: [^self class signalExpirationYearShoudHaveFourDigits ].
	
	aCreditCardOwner isEmpty ifTrue: [^self class signalCreditCardOwnerCannotBeEmpty ].
	
	aCreditCardOwner size <= 30 ifFalse: [^self class signalCreditCardOwnerNameCantBeLongerThanThirty ].
	
	pan := aPan.
	expirationMonth := aMonth. 
	expirationYear := aYear.
	creditCardOwner := aCreditCardOwner.
	
	GregorianMonthOfYear year: 2020 month: 12 
	

	
	! !

----SNAPSHOT----(24 November 2020 23:58:09) CuisUniversity-4384.image priorSource: 17695432!

----QUIT----(24 November 2020 23:58:12) CuisUniversity-4384.image priorSource: 17699153!

----STARTUP---- (26 November 2020 10:29:29) as /Users/dbenitez/uba/2c2020-IS1/IS1-Trabajos/20-TusLibros/macos64-TusLibros/CuisUniversity-4384.image!


----QUIT----(26 November 2020 10:29:54) CuisUniversity-4384.image priorSource: 17699247!