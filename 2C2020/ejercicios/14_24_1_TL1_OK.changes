----STARTUP---- (16 November 2020 17:31:51) as /Users/vpomsztein/Documents/Facu/ISW1/PracticaParcial/CuisUniversity-4384.image!

TestCase subclass: #MerchantProcessorClientTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorClientTest category: 'TusLibros' stamp: 'VP 11/16/2020 17:36:39'!
TestCase subclass: #MerchantProcessorClientTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorClientTest methodsFor: 'no messages' stamp: 'VP 11/16/2020 17:38:04'!
test01ClientCallWithAllParamsShouldPerformRequest! !
!MerchantProcessorClientTest methodsFor: 'as yet unclassified' stamp: 'VP 11/16/2020 17:38:45'!
test02ClientCallWithMissingCreditCardNumberShouldFail! !
!MerchantProcessorClientTest methodsFor: 'as yet unclassified' stamp: 'VP 11/16/2020 17:38:54'!
test03ClientCallWithMissingCreditCardExpirationShouldFail! !
!MerchantProcessorClientTest methodsFor: 'as yet unclassified' stamp: 'VP 11/16/2020 17:40:44' prior: 50899583!
test03ClientCallWithMissingCreditCardExpirationShouldFail

	"Seguir�amos escribiendo:
		- tests para cada par�metro como faltante
		- tests para validar el formato de cada par�metro (al ser cada request pago, 
		  no tiene sentido enviar requests que sabemos de antemano que van a fallar"! !
!MerchantProcessorClientTest methodsFor: 'as yet unclassified' stamp: 'VP 11/16/2020 17:42:20' prior: 50899589!
test03ClientCallWithMissingCreditCardExpirationShouldFail

	"Seguir�amos escribiendo:
		- tests para cada par�metro como faltante
		- tests para validar el formato de cada par�metro (al ser cada request pago, 
		  no tiene sentido enviar requests que sabemos de antemano que van a fallar"! !

TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'VP 11/16/2020 18:53:36'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'VP 11/16/2020 18:55:18'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'no messages' stamp: 'VP 11/16/2020 18:55:10'!
test01NewCartIsEmpty

	| cart |
	
	cart := Cart new.
	
	self assert: cart isEmpty.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'VP 11/16/2020 18:55:26'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'VP 11/16/2020 18:55:32'!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'accessing' stamp: 'VP 11/16/2020 18:55:40' prior: 50899639!
isEmpty
	
	^true.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'VP 11/16/2020 18:55:41'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'VP 11/16/2020 18:55:41'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'VP 11/16/2020 18:56:54'!
test02ProductAddedToCartIsInCart

	| cart |
	
	cart := Cart new.
	
	self assert: cart isEmpty.! !

!classDefinition: #ISBN category: 'TusLibros' stamp: 'VP 11/16/2020 19:02:17'!
Object subclass: #ISBN
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'VP 11/16/2020 19:02:13' prior: 50899651!
test02ProductAddedToCartIsInCart

	| cart product |
	
	cart := Cart new.
	product := Product withISBN: (ISBN withNumber: '1933988274').
	cart add: product.
	
	self deny: cart isEmpty.
	self assert: 1 equals: (cart quantityOfProduct: product).! !

!testRun: #CartTest #test02ProductAddedToCartIsInCart stamp: 'VP 11/16/2020 19:02:22'!
ERROR!
!ISBN class methodsFor: 'instance creation' stamp: 'VP 11/16/2020 19:02:39'!
withNumber: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithNumber: aString ! !
!ISBN class methodsFor: 'instance creation' stamp: 'VP 11/16/2020 19:02:53' prior: 50899677!
withNumber: anISBNNumber
	^self new initializeWithNumber: anISBNNumber. ! !

!testRun: #CartTest #test02ProductAddedToCartIsInCart stamp: 'VP 11/16/2020 19:02:55'!
ERROR!

!classDefinition: #ISBN category: 'TusLibros' stamp: 'VP 11/16/2020 19:03:11'!
Object subclass: #ISBN
	instanceVariableNames: 'iSBNNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ISBN methodsFor: 'initialization' stamp: 'VP 11/16/2020 19:03:11'!
initializeWithNumber: anISBNNumber 
	self shouldBeImplemented.
	iSBNNumber := anISBNNumber.! !
!ISBN methodsFor: 'initialization' stamp: 'VP 11/16/2020 19:03:15' prior: 50899700!
initializeWithNumber: anISBNNumber 

	iSBNNumber := anISBNNumber.! !

!classDefinition: #ISBN category: 'TusLibros' stamp: 'VP 11/16/2020 19:03:31'!
Object subclass: #ISBN
	instanceVariableNames: 'isbnNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ISBN methodsFor: 'as yet unclassified' stamp: 'VP 11/16/2020 19:03:31' prior: 50899706!
initializeWithNumber: anISBNNumber 

	isbnNumber := anISBNNumber.! !

!testRun: #CartTest #test02ProductAddedToCartIsInCart stamp: 'VP 11/16/2020 19:03:34'!
ERROR!
!Product class methodsFor: 'instance creation' stamp: 'VP 11/16/2020 19:03:48'!
withISBN: anISBN 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithISBN: anISBN ! !
!Product class methodsFor: 'instance creation' stamp: 'VP 11/16/2020 19:04:00' prior: 50899726!
withISBN: anISBN

	^self new initializeWithISBN: anISBN.! !

!testRun: #CartTest #test02ProductAddedToCartIsInCart stamp: 'VP 11/16/2020 19:04:01'!
ERROR!

!classDefinition: #Product category: 'ISW1-2020-1C-Parcial-Solucion' stamp: 'VP 11/16/2020 19:04:09'!
Object subclass: #Product
	instanceVariableNames: 'weight height iSBN'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Solucion'!
!Product methodsFor: 'initialization' stamp: 'VP 11/16/2020 19:04:09'!
initializeWithISBN: anISBN 
	self shouldBeImplemented.
	iSBN := anISBN.! !
!Product methodsFor: 'initialization' stamp: 'VP 11/16/2020 19:04:18' prior: 50899750!
initializeWithISBN: anISBN 

	iSBN := anISBN.! !

!classDefinition: #Product category: 'ISW1-2020-1C-Parcial-Solucion' stamp: 'VP 11/16/2020 19:04:21'!
Object subclass: #Product
	instanceVariableNames: 'weight height isbn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Solucion'!
!Product methodsFor: 'as yet unclassified' stamp: 'VP 11/16/2020 19:04:21' prior: 50899756!
initializeWithISBN: anISBN 

	isbn := anISBN.! !

!testRun: #CartTest #test02ProductAddedToCartIsInCart stamp: 'VP 11/16/2020 19:04:26'!
ERROR!
!Cart methodsFor: 'operations' stamp: 'VP 11/16/2020 19:05:10'!
add: aProduct 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'VP 11/16/2020 19:05:39'!
Object subclass: #Cart
	instanceVariableNames: 'product'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'operations' stamp: 'VP 11/16/2020 19:05:38' prior: 50899776!
add: aProduct 
	
	product := aProduct.! !

!testRun: #CartTest #test02ProductAddedToCartIsInCart stamp: 'VP 11/16/2020 19:05:41'!
FAILURE!
!Cart methodsFor: 'accessing' stamp: 'VP 11/16/2020 19:06:29' prior: 50899643!
isEmpty
	
	^product ~= nil.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'VP 11/16/2020 19:06:32'!
FAILURE!

!testRun: #CartTest #test02ProductAddedToCartIsInCart stamp: 'VP 11/16/2020 19:06:32'!
FAILURE!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'VP 11/16/2020 19:06:33'!
FAILURE!
!Cart methodsFor: 'accessing' stamp: 'VP 11/16/2020 19:06:49' prior: 50899794!
isEmpty
	
	^product = nil.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'VP 11/16/2020 19:06:50'!
PASSED!

!testRun: #CartTest #test02ProductAddedToCartIsInCart stamp: 'VP 11/16/2020 19:06:50'!
ERROR!

!testRun: #CartTest #test02ProductAddedToCartIsInCart stamp: 'VP 11/16/2020 19:06:50'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'VP 11/16/2020 19:06:57'!
quantityOfProduct: aProduct 
	self shouldBeImplemented.! !
!Cart methodsFor: 'accessing' stamp: 'VP 11/16/2020 19:07:01' prior: 50899818!
quantityOfProduct: aProduct 
	
	^1.! !

!testRun: #CartTest #test02ProductAddedToCartIsInCart stamp: 'VP 11/16/2020 19:07:02'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'VP 11/16/2020 19:07:05'!
PASSED!

!testRun: #CartTest #test02ProductAddedToCartIsInCart stamp: 'VP 11/16/2020 19:07:05'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'VP 11/16/2020 19:11:27'!
test03CartCanHoldSameProductMultipleTimes

	| cart productISBN product1 product2 |
	
	cart := Cart new.
	productISBN := ISBN withNumber: '1933988274'.
	product1 := Product withISBN: productISBN.
	product2 := Product withISBN: productISBN.
	cart add: product1.
	cart add: product2.
	
	self deny: cart isEmpty.
	self assert: 2 equals: (cart quantityOfProduct: product1).! !

!testRun: #CartTest #test03CartCanHoldSameProductMultipleTimes stamp: 'VP 11/16/2020 19:11:31'!
FAILURE!
!Cart methodsFor: 'operations' stamp: 'VP 11/16/2020 19:12:28' prior: 50899787!
add: aProduct 
	
	product := aProduct.
	! !
!Cart methodsFor: 'operations' stamp: 'VP 11/16/2020 19:12:30' prior: 50899853!
add: aProduct 
	
	product := aProduct.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'VP 11/16/2020 19:12:33'!
Object subclass: #Cart
	instanceVariableNames: 'quantity'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'VP 11/16/2020 19:12:33' prior: 50899806!
isEmpty
	
	^quantity = nil.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'VP 11/16/2020 19:12:33' prior: 50899857!
add: aProduct 
	
	quantity := aProduct.! !
!Cart methodsFor: 'operations' stamp: 'VP 11/16/2020 19:12:36' prior: 50899872!
add: aProduct 
	
	quantity := 1.! !
!Cart methodsFor: 'operations' stamp: 'VP 11/16/2020 19:12:53' overrides: 16896425!
initialize
	
	quantity := 0.! !
!Cart methodsFor: 'operations' stamp: 'VP 11/16/2020 19:13:10' prior: 50899876!
add: aProduct 
	
	quantity := quantity + 1.! !
!Cart methodsFor: 'accessing' stamp: 'VP 11/16/2020 19:13:16' prior: 50899823!
quantityOfProduct: aProduct 
	
	^quantity.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'VP 11/16/2020 19:13:18'!
FAILURE!

!testRun: #CartTest #test02ProductAddedToCartIsInCart stamp: 'VP 11/16/2020 19:13:18'!
PASSED!

!testRun: #CartTest #test03CartCanHoldSameProductMultipleTimes stamp: 'VP 11/16/2020 19:13:18'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'VP 11/16/2020 19:13:18'!
FAILURE!
!Cart methodsFor: 'accessing' stamp: 'VP 11/16/2020 19:13:28' prior: 50899868!
isEmpty
	
	^quantity = 0.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'VP 11/16/2020 19:13:30'!
PASSED!

!testRun: #CartTest #test02ProductAddedToCartIsInCart stamp: 'VP 11/16/2020 19:13:30'!
PASSED!

!testRun: #CartTest #test03CartCanHoldSameProductMultipleTimes stamp: 'VP 11/16/2020 19:13:30'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'VP 11/16/2020 19:16:05'!
test04CartCanHoldDifferentProducts

	| cart product1 product2 |
	
	cart := Cart new.
	product1 := Product withISBN: (ISBN withNumber: '1933988274').
	product2 := Product withISBN: (ISBN withNumber: '1933988275').
	cart add: product1 times: 2.
	cart add: product2.
	
	self deny: cart isEmpty.
	self assert: 2 equals: (cart quantityOfProduct: product1).
	self assert: 1 equals: (cart quantityOfProduct: product2).! !

!testRun: #CartTest #test04CartCanHoldDifferentProducts stamp: 'VP 11/16/2020 19:16:08'!
ERROR!
!Cart methodsFor: 'operations' stamp: 'VP 11/16/2020 19:16:21'!
add: aProduct times: aSmallInteger 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'VP 11/16/2020 19:20:13'!
Object subclass: #Cart
	instanceVariableNames: 'quantity products'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'operations' stamp: 'VP 11/16/2020 19:20:09' prior: 50899934!
add: aProduct times: aQuantity
	
	| inCartQuantity |
	inCartQuantity := products at: aProduct ifAbsent: [0].
	
	products at: aProduct put: inCartQuantity + aQuantity.! !

!testRun: #CartTest #test04CartCanHoldDifferentProducts stamp: 'VP 11/16/2020 19:20:16'!
ERROR!

Object subclass: #Cart
	instanceVariableNames: 'products'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'VP 11/16/2020 19:20:36'!
Object subclass: #Cart
	instanceVariableNames: 'products'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'VP 11/16/2020 19:20:44' prior: 50899880 overrides: 16896425!
initialize
	
	products := Dictionary new.! !
!Cart methodsFor: 'operations' stamp: 'VP 11/16/2020 19:20:56' prior: 50899884!
add: aProduct 
	
	self add: aProduct times: 1.! !
!Cart methodsFor: 'accessing' stamp: 'VP 11/16/2020 19:21:05' prior: 50899904!
isEmpty
	
	^products isEmpty.! !
!Cart methodsFor: 'accessing' stamp: 'VP 11/16/2020 19:21:16' prior: 50899888!
quantityOfProduct: aProduct 
	
	^products at: aProduct.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'VP 11/16/2020 19:21:20'!
PASSED!

!testRun: #CartTest #test02ProductAddedToCartIsInCart stamp: 'VP 11/16/2020 19:21:20'!
PASSED!

!testRun: #CartTest #test03CartCanHoldSameProductMultipleTimes stamp: 'VP 11/16/2020 19:21:20'!
FAILURE!

!testRun: #CartTest #test04CartCanHoldDifferentProducts stamp: 'VP 11/16/2020 19:21:20'!
PASSED!

!testRun: #CartTest #test03CartCanHoldSameProductMultipleTimes stamp: 'VP 11/16/2020 19:21:20'!
FAILURE!

Object subclass: #Book
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Book category: 'TusLibros' stamp: 'VP 11/16/2020 19:22:03'!
Object subclass: #Book
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'VP 11/16/2020 19:22:06'!
PASSED!

!testRun: #CartTest #test02ProductAddedToCartIsInCart stamp: 'VP 11/16/2020 19:22:06'!
PASSED!

!testRun: #CartTest #test03CartCanHoldSameProductMultipleTimes stamp: 'VP 11/16/2020 19:22:06'!
FAILURE!

!testRun: #CartTest #test04CartCanHoldDifferentProducts stamp: 'VP 11/16/2020 19:22:06'!
PASSED!

!testRun: #CartTest #test03CartCanHoldSameProductMultipleTimes stamp: 'VP 11/16/2020 19:22:06'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'VP 11/16/2020 19:22:20'!
test02BookAddedToCartIsInCart

	| cart product |
	
	cart := Cart new.
	product := Product withISBN: (ISBN withNumber: '1933988274').
	cart add: product.
	
	self deny: cart isEmpty.
	self assert: 1 equals: (cart quantityOfProduct: product).! !

!methodRemoval: CartTest #test02ProductAddedToCartIsInCart stamp: 'VP 11/16/2020 19:22:20'!
test02ProductAddedToCartIsInCart

	| cart product |
	
	cart := Cart new.
	product := Product withISBN: (ISBN withNumber: '1933988274').
	cart add: product.
	
	self deny: cart isEmpty.
	self assert: 1 equals: (cart quantityOfProduct: product).!
!CartTest methodsFor: 'tests' stamp: 'VP 11/16/2020 19:22:22' prior: 50900027!
test02BookAddedToCartIsInCart

	| cart book |
	
	cart := Cart new.
	book := Product withISBN: (ISBN withNumber: '1933988274').
	cart add: book.
	
	self deny: cart isEmpty.
	self assert: 1 equals: (cart quantityOfProduct: book).! !
!CartTest methodsFor: 'tests' stamp: 'VP 11/16/2020 19:22:25' prior: 50900048!
test02BookAddedToCartIsInCart

	| cart book |
	
	cart := Cart new.
	book := Book withISBN: (ISBN withNumber: '1933988274').
	cart add: book.
	
	self deny: cart isEmpty.
	self assert: 1 equals: (cart quantityOfProduct: book).! !
!CartTest methodsFor: 'tests' stamp: 'VP 11/16/2020 19:22:49'!
test03CartCanHoldSameBookMultipleTimes

	| cart productISBN product1 product2 |
	
	cart := Cart new.
	productISBN := ISBN withNumber: '1933988274'.
	product1 := Product withISBN: productISBN.
	product2 := Product withISBN: productISBN.
	cart add: product1.
	cart add: product2.
	
	self deny: cart isEmpty.
	self assert: 2 equals: (cart quantityOfProduct: product1).! !

!methodRemoval: CartTest #test03CartCanHoldSameProductMultipleTimes stamp: 'VP 11/16/2020 19:22:49'!
test03CartCanHoldSameProductMultipleTimes

	| cart productISBN product1 product2 |
	
	cart := Cart new.
	productISBN := ISBN withNumber: '1933988274'.
	product1 := Product withISBN: productISBN.
	product2 := Product withISBN: productISBN.
	cart add: product1.
	cart add: product2.
	
	self deny: cart isEmpty.
	self assert: 2 equals: (cart quantityOfProduct: product1).!
!CartTest methodsFor: 'tests' stamp: 'VP 11/16/2020 19:22:57' prior: 50900068!
test03CartCanHoldSameBookMultipleTimes

	| cart bookISBN product1 product2 |
	
	cart := Cart new.
	bookISBN := ISBN withNumber: '1933988274'.
	product1 := Product withISBN: bookISBN.
	product2 := Product withISBN: bookISBN.
	cart add: product1.
	cart add: product2.
	
	self deny: cart isEmpty.
	self assert: 2 equals: (cart quantityOfProduct: product1).! !
!CartTest methodsFor: 'tests' stamp: 'VP 11/16/2020 19:23:10' prior: 50900097!
test03CartCanHoldSameBookMultipleTimes

	| cart bookISBN book1 product2 |
	
	cart := Cart new.
	bookISBN := ISBN withNumber: '1933988274'.
	book1 := Product withISBN: bookISBN.
	product2 := Product withISBN: bookISBN.
	cart add: book1.
	cart add: product2.
	
	self deny: cart isEmpty.
	self assert: 2 equals: (cart quantityOfProduct: book1).! !
!CartTest methodsFor: 'tests' stamp: 'VP 11/16/2020 19:23:13' prior: 50900111!
test03CartCanHoldSameBookMultipleTimes

	| cart bookISBN book1 book2 |
	
	cart := Cart new.
	bookISBN := ISBN withNumber: '1933988274'.
	book1 := Product withISBN: bookISBN.
	book2 := Product withISBN: bookISBN.
	cart add: book1.
	cart add: book2.
	
	self deny: cart isEmpty.
	self assert: 2 equals: (cart quantityOfProduct: book1).! !
!CartTest methodsFor: 'tests' stamp: 'VP 11/16/2020 19:23:22' prior: 50900125!
test03CartCanHoldSameBookMultipleTimes

	| cart bookISBN book1 book2 |
	
	cart := Cart new.
	bookISBN := ISBN withNumber: '1933988274'.
	book1 := Book withISBN: bookISBN.
	book2 := Book withISBN: bookISBN.
	cart add: book1.
	cart add: book2.
	
	self deny: cart isEmpty.
	self assert: 2 equals: (cart quantityOfProduct: book1).! !
!CartTest methodsFor: 'tests' stamp: 'VP 11/16/2020 19:23:33' prior: 50899916!
test04CartCanHoldDifferentProducts

	| cart book1 product2 |
	
	cart := Cart new.
	book1 := Product withISBN: (ISBN withNumber: '1933988274').
	product2 := Product withISBN: (ISBN withNumber: '1933988275').
	cart add: book1 times: 2.
	cart add: product2.
	
	self deny: cart isEmpty.
	self assert: 2 equals: (cart quantityOfProduct: book1).
	self assert: 1 equals: (cart quantityOfProduct: product2).! !
!CartTest methodsFor: 'tests' stamp: 'VP 11/16/2020 19:23:37' prior: 50900151!
test04CartCanHoldDifferentProducts

	| cart book1 book2 |
	
	cart := Cart new.
	book1 := Product withISBN: (ISBN withNumber: '1933988274').
	book2 := Product withISBN: (ISBN withNumber: '1933988275').
	cart add: book1 times: 2.
	cart add: book2.
	
	self deny: cart isEmpty.
	self assert: 2 equals: (cart quantityOfProduct: book1).
	self assert: 1 equals: (cart quantityOfProduct: book2).! !
!CartTest methodsFor: 'tests' stamp: 'VP 11/16/2020 19:23:45'!
test04CartCanHoldDifferentBooks

	| cart book1 book2 |
	
	cart := Cart new.
	book1 := Product withISBN: (ISBN withNumber: '1933988274').
	book2 := Product withISBN: (ISBN withNumber: '1933988275').
	cart add: book1 times: 2.
	cart add: book2.
	
	self deny: cart isEmpty.
	self assert: 2 equals: (cart quantityOfProduct: book1).
	self assert: 1 equals: (cart quantityOfProduct: book2).! !

!methodRemoval: CartTest #test04CartCanHoldDifferentProducts stamp: 'VP 11/16/2020 19:23:45'!
test04CartCanHoldDifferentProducts

	| cart book1 book2 |
	
	cart := Cart new.
	book1 := Product withISBN: (ISBN withNumber: '1933988274').
	book2 := Product withISBN: (ISBN withNumber: '1933988275').
	cart add: book1 times: 2.
	cart add: book2.
	
	self deny: cart isEmpty.
	self assert: 2 equals: (cart quantityOfProduct: book1).
	self assert: 1 equals: (cart quantityOfProduct: book2).!
!CartTest methodsFor: 'tests' stamp: 'VP 11/16/2020 19:23:52' prior: 50900182!
test04CartCanHoldDifferentBooks

	| cart book1 book2 |
	
	cart := Cart new.
	book1 := Book withISBN: (ISBN withNumber: '1933988274').
	book2 := Book withISBN: (ISBN withNumber: '1933988275').
	cart add: book1 times: 2.
	cart add: book2.
	
	self deny: cart isEmpty.
	self assert: 2 equals: (cart quantityOfProduct: book1).
	self assert: 1 equals: (cart quantityOfProduct: book2).! !

!testRun: #CartTest #test04CartCanHoldDifferentBooks stamp: 'VP 11/16/2020 19:23:53'!
ERROR!
!Book class methodsFor: 'instance creation' stamp: 'VP 11/16/2020 19:24:00'!
withISBN: anISBN 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithISBN: anISBN ! !
!Book class methodsFor: 'instance creation' stamp: 'VP 11/16/2020 19:24:11' prior: 50900230!
withISBN: anISBNNumber
	^self new initializeWithISBN: anISBNNumber.! !
!Book class methodsFor: 'instance creation' stamp: 'VP 11/16/2020 19:24:12' prior: 50900238!
withISBN: anISBNNumber

	^self new initializeWithISBN: anISBNNumber.! !

!testRun: #CartTest #test04CartCanHoldDifferentBooks stamp: 'VP 11/16/2020 19:24:14'!
ERROR!

!classDefinition: #Book category: 'TusLibros' stamp: 'VP 11/16/2020 19:24:25'!
Object subclass: #Book
	instanceVariableNames: 'iSBNNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Book methodsFor: 'initialization' stamp: 'VP 11/16/2020 19:24:25'!
initializeWithISBN: anISBNNumber 
	self shouldBeImplemented.
	iSBNNumber := anISBNNumber.! !

!classDefinition: #Book category: 'TusLibros' stamp: 'VP 11/16/2020 19:24:33'!
Object subclass: #Book
	instanceVariableNames: 'iSBNNumber isbn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Book methodsFor: 'initialization' stamp: 'VP 11/16/2020 19:24:31' prior: 50900258!
initializeWithISBN: anISBN 

	isbn := anISBN.! !

!testRun: #CartTest #test04CartCanHoldDifferentBooks stamp: 'VP 11/16/2020 19:24:36'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'VP 11/16/2020 19:24:36'!
PASSED!

!testRun: #CartTest #test02BookAddedToCartIsInCart stamp: 'VP 11/16/2020 19:24:36'!
PASSED!

!testRun: #CartTest #test03CartCanHoldSameBookMultipleTimes stamp: 'VP 11/16/2020 19:24:36'!
FAILURE!

!testRun: #CartTest #test04CartCanHoldDifferentBooks stamp: 'VP 11/16/2020 19:24:36'!
PASSED!

!testRun: #CartTest #test03CartCanHoldSameBookMultipleTimes stamp: 'VP 11/16/2020 19:24:36'!
FAILURE!
!ISBN methodsFor: 'initialization' stamp: 'VP 11/16/2020 19:25:25' prior: 50899718!
initializeWithNumber: anISBNNumber 

	isbnNumber := anISBNNumber.! !
!Book methodsFor: 'initialization' stamp: 'VP 11/16/2020 19:25:52' overrides: 16881029!
= aBook 
	
	^self isbn = aBook isbn.! !
!Book methodsFor: 'initialization' stamp: 'VP 11/16/2020 19:26:06'!
isbn

	^isbn copy.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'VP 11/16/2020 19:26:19'!
PASSED!

!testRun: #CartTest #test02BookAddedToCartIsInCart stamp: 'VP 11/16/2020 19:26:19'!
ERROR!

!testRun: #CartTest #test03CartCanHoldSameBookMultipleTimes stamp: 'VP 11/16/2020 19:26:19'!
ERROR!

!testRun: #CartTest #test04CartCanHoldDifferentBooks stamp: 'VP 11/16/2020 19:26:19'!
ERROR!

!testRun: #CartTest #test02BookAddedToCartIsInCart stamp: 'VP 11/16/2020 19:26:21'!
ERROR!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'VP 11/16/2020 19:26:50'!
PASSED!

!testRun: #CartTest #test02BookAddedToCartIsInCart stamp: 'VP 11/16/2020 19:26:50'!
ERROR!

!testRun: #CartTest #test03CartCanHoldSameBookMultipleTimes stamp: 'VP 11/16/2020 19:26:50'!
ERROR!

!testRun: #CartTest #test04CartCanHoldDifferentBooks stamp: 'VP 11/16/2020 19:26:50'!
ERROR!

!testRun: #CartTest #test02BookAddedToCartIsInCart stamp: 'VP 11/16/2020 19:26:58'!
ERROR!

self keys!

self keys at: 1!

self keys at: 1!

self isbn!

self isbn!
!ISBN methodsFor: 'initialization' stamp: 'VP 11/16/2020 19:28:23' overrides: 16881029!
= anISBN

	^self number = anISBN number.! !
!ISBN methodsFor: 'initialization' stamp: 'VP 11/16/2020 19:28:37'!
number

	^isbnNumber.! !
!ISBN methodsFor: 'initialization' stamp: 'VP 11/16/2020 19:28:40' prior: 50900342!
number

	^isbnNumber.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'VP 11/16/2020 19:28:50'!
PASSED!

!testRun: #CartTest #test02BookAddedToCartIsInCart stamp: 'VP 11/16/2020 19:28:50'!
PASSED!

!testRun: #CartTest #test03CartCanHoldSameBookMultipleTimes stamp: 'VP 11/16/2020 19:28:50'!
FAILURE!

!testRun: #CartTest #test04CartCanHoldDifferentBooks stamp: 'VP 11/16/2020 19:28:50'!
PASSED!

!testRun: #CartTest #test03CartCanHoldSameBookMultipleTimes stamp: 'VP 11/16/2020 19:28:50'!
FAILURE!

!testRun: #CartTest #test03CartCanHoldSameBookMultipleTimes stamp: 'VP 11/16/2020 19:29:30'!
FAILURE!

!testRun: #CartTest #test03CartCanHoldSameBookMultipleTimes stamp: 'VP 11/16/2020 19:29:30'!
FAILURE!

products at: aProduct!

products at: aProduct!
!Book methodsFor: 'accessing' stamp: 'VP 11/16/2020 19:34:01' overrides: 16881052!
hash

	^isbn hash.! !
!ISBN methodsFor: 'comparing' stamp: 'VP 11/16/2020 19:34:27' overrides: 16881052!
hash

	self isbnNumber hash.! !
!ISBN methodsFor: 'comparing' stamp: 'VP 11/16/2020 19:34:32' prior: 50900377 overrides: 16881052!
hash

	self number hash.! !
!ISBN methodsFor: 'comparing' stamp: 'VP 11/16/2020 19:34:39' prior: 50900382 overrides: 16881052!
hash

	self number.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'VP 11/16/2020 19:34:41'!
PASSED!

!testRun: #CartTest #test02BookAddedToCartIsInCart stamp: 'VP 11/16/2020 19:34:41'!
ERROR!

!testRun: #CartTest #test03CartCanHoldSameBookMultipleTimes stamp: 'VP 11/16/2020 19:34:41'!
ERROR!

!testRun: #CartTest #test04CartCanHoldDifferentBooks stamp: 'VP 11/16/2020 19:34:41'!
ERROR!

!testRun: #CartTest #test02BookAddedToCartIsInCart stamp: 'VP 11/16/2020 19:34:44'!
ERROR!
!ISBN methodsFor: 'comparing' stamp: 'VP 11/16/2020 19:35:33' prior: 50900386 overrides: 16881052!
hash

	^self number.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'VP 11/16/2020 19:35:38'!
PASSED!

!testRun: #CartTest #test02BookAddedToCartIsInCart stamp: 'VP 11/16/2020 19:35:38'!
ERROR!

!testRun: #CartTest #test03CartCanHoldSameBookMultipleTimes stamp: 'VP 11/16/2020 19:35:38'!
ERROR!

!testRun: #CartTest #test04CartCanHoldDifferentBooks stamp: 'VP 11/16/2020 19:35:38'!
ERROR!

!testRun: #CartTest #test02BookAddedToCartIsInCart stamp: 'VP 11/16/2020 19:35:40'!
ERROR!
!ISBN methodsFor: 'comparing' stamp: 'VP 11/16/2020 19:35:54' prior: 50900405 overrides: 16881052!
hash

	^self number hash.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'VP 11/16/2020 19:35:57'!
PASSED!

!testRun: #CartTest #test02BookAddedToCartIsInCart stamp: 'VP 11/16/2020 19:35:57'!
PASSED!

!testRun: #CartTest #test03CartCanHoldSameBookMultipleTimes stamp: 'VP 11/16/2020 19:35:57'!
PASSED!

!testRun: #CartTest #test04CartCanHoldDifferentBooks stamp: 'VP 11/16/2020 19:35:57'!
PASSED!
!Cart methodsFor: 'initialization' stamp: 'VP 11/16/2020 19:37:12' prior: 50899969 overrides: 16896425!
initialize
	
	products := Bag new.! !
!Cart methodsFor: 'accessing' stamp: 'VP 11/16/2020 19:37:52' prior: 50899982!
quantityOfProduct: aProduct 
	
	^products occurrencesOf: aProduct.! !
!Cart methodsFor: 'operations' stamp: 'VP 11/16/2020 19:38:12' prior: 50899946!
add: aProduct times: aQuantity
	
	products add: aProduct.! !
!Cart methodsFor: 'operations' stamp: 'VP 11/16/2020 19:38:29' prior: 50900449!
add: aProduct times: aQuantity
	
	products add: aProduct withOccurrences: aQuantity.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'VP 11/16/2020 19:38:31'!
PASSED!

!testRun: #CartTest #test02BookAddedToCartIsInCart stamp: 'VP 11/16/2020 19:38:31'!
PASSED!

!testRun: #CartTest #test03CartCanHoldSameBookMultipleTimes stamp: 'VP 11/16/2020 19:38:31'!
PASSED!

!testRun: #CartTest #test04CartCanHoldDifferentBooks stamp: 'VP 11/16/2020 19:38:31'!
PASSED!

----SNAPSHOT----(16 November 2020 19:48:23) CuisUniversity-4384.image priorSource: 18172885!

----QUIT----(17 November 2020 09:28:43) CuisUniversity-4384.image priorSource: 18202253!

----STARTUP---- (18 November 2020 15:25:59) as /Users/vpomsztein/Documents/Facu/ISW1/PracticaParcial/CuisUniversity-4384.image!

!CartTest methodsFor: 'tests' stamp: 'VP 11/18/2020 15:26:59' prior: 50900212!
test04CartCanHoldDifferentBooks

	| cart book1 book2 |
	
	cart := Cart new.
	book1 := '1933988274'.
	book2 := '1933988275'.
	cart add: book1 times: 2.
	cart add: book2.
	
	self deny: cart isEmpty.
	self assert: 2 equals: (cart quantityOfProduct: book1).
	self assert: 1 equals: (cart quantityOfProduct: book2).! !
!CartTest methodsFor: 'tests' stamp: 'VP 11/18/2020 15:27:47' prior: 50900138!
test03CartCanHoldSameBookMultipleTimes

	| cart book |
	
	cart := Cart new.
	book := '1933988274'.
	cart add: book.
	cart add: book.
	
	self deny: cart isEmpty.
	self assert: 2 equals: (cart quantityOfProduct: book).! !
!CartTest methodsFor: 'tests' stamp: 'VP 11/18/2020 15:27:57' prior: 50900058!
test02BookAddedToCartIsInCart

	| cart book |
	
	cart := Cart new.
	book := '1933988274'.
	cart add: book.
	
	self deny: cart isEmpty.
	self assert: 1 equals: (cart quantityOfProduct: book).! !

!classRemoval: #ISBN stamp: 'VP 11/18/2020 15:28:05'!
Object subclass: #ISBN
	instanceVariableNames: 'isbnNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Book stamp: 'VP 11/18/2020 15:28:08'!
Object subclass: #Book
	instanceVariableNames: 'iSBNNumber isbn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'VP 11/18/2020 15:28:11'!
PASSED!

!testRun: #CartTest #test02BookAddedToCartIsInCart stamp: 'VP 11/18/2020 15:28:11'!
PASSED!

!testRun: #CartTest #test03CartCanHoldSameBookMultipleTimes stamp: 'VP 11/18/2020 15:28:11'!
PASSED!

!testRun: #CartTest #test04CartCanHoldDifferentBooks stamp: 'VP 11/18/2020 15:28:11'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'VP 11/18/2020 15:31:13'!
test05Empty

	| cart book1 book2 |
	
	cart := Cart new.
	book1 := '1933988274'.
	book2 := '1933988275'.
	cart add: book1 times: 2.
	cart add: book2.
	
	self deny: cart isEmpty.
	self assert: 2 equals: (cart quantityOfProduct: book1).
	self assert: 1 equals: (cart quantityOfProduct: book2).! !
!CartTest methodsFor: 'tests' stamp: 'VP 11/18/2020 15:34:19'!
test05EmptyCartListingIsEmpty

	| cart |
	
	cart := Cart new.
	
	self assert: cart isEmpty.
	self assert: cart productListing isEmpty.! !

!methodRemoval: CartTest #test05Empty stamp: 'VP 11/18/2020 15:34:26'!
test05Empty

	| cart book1 book2 |
	
	cart := Cart new.
	book1 := '1933988274'.
	book2 := '1933988275'.
	cart add: book1 times: 2.
	cart add: book2.
	
	self deny: cart isEmpty.
	self assert: 2 equals: (cart quantityOfProduct: book1).
	self assert: 1 equals: (cart quantityOfProduct: book2).!

!testRun: #CartTest #test05EmptyCartListingIsEmpty stamp: 'VP 11/18/2020 15:34:27'!
ERROR!

!testRun: #CartTest #test05EmptyCartListingIsEmpty stamp: 'VP 11/18/2020 15:34:27'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'VP 11/18/2020 15:34:31'!
productListing
	self shouldBeImplemented.! !
!Cart methodsFor: 'accessing' stamp: 'VP 11/18/2020 15:34:37' prior: 50900572!
productListing
	
	^Dictionary new.! !

!testRun: #CartTest #test05EmptyCartListingIsEmpty stamp: 'VP 11/18/2020 15:34:39'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'VP 11/18/2020 15:35:17'!
test06CartListingHasAllCartProductsWithTheirQuantity

	| cart |
	
	cart := Cart new.
	
	self assert: cart isEmpty.
	self assert: cart productListing isEmpty.! !
!CartTest methodsFor: 'tests' stamp: 'VP 11/18/2020 15:44:24'!
test06CartListingHasAllCartProductsGroupedByISBN

	| cart book1 book2 listing |
	
	cart := Cart new.
	book1 := '1933988274'.
	book2 := '1933988275'.
	cart add: book1 times: 2.
	cart add: book2.
	
	listing := cart productListing.
	
	self deny: cart isEmpty.
	self assert: 2 equals: listing size.
	self assert: 2 equals: (listing at: book1).
	self assert: 1 equals: (listing at: book2).! !

!methodRemoval: CartTest #test06CartListingHasAllCartProductsWithTheirQuantity stamp: 'VP 11/18/2020 15:44:33'!
test06CartListingHasAllCartProductsWithTheirQuantity

	| cart |
	
	cart := Cart new.
	
	self assert: cart isEmpty.
	self assert: cart productListing isEmpty.!

!testRun: #CartTest #test06CartListingHasAllCartProductsGroupedByISBN stamp: 'VP 11/18/2020 15:44:35'!
FAILURE!

!testRun: #CartTest #test06CartListingHasAllCartProductsGroupedByISBN stamp: 'VP 11/18/2020 15:44:35'!
FAILURE!

|bag|
bag := Bag new.

bag add: 3 withOccurrences: 2.!

|bag|
bag := Bag new.

bag add: 3 withOccurrences: 2; yourself.!

self inject: '' into: [ :str :a | str , a asString ].!
!Cart methodsFor: 'accessing' stamp: 'VP 11/18/2020 15:59:47' prior: 50900576!
productListing
	
	^products asSet inject: Dictionary new into: [ :listing :aProduct | 
		listing at: aProduct put: (products occurrencesOf: aProduct); yourself.
	].

	"
	Una alternativa viable es esta, pero nos pareci� m�s operacional y menos declarativa.
	products inject: Dictionary new into: [ :listing :aProduct | 
		| amount |
		amount := listing at: aProduct ifAbsent: [ 0 ].
		listing at: aProduct put: amount + 1.
	].
	"! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'VP 11/18/2020 15:59:51'!
PASSED!

!testRun: #CartTest #test02BookAddedToCartIsInCart stamp: 'VP 11/18/2020 15:59:51'!
PASSED!

!testRun: #CartTest #test03CartCanHoldSameBookMultipleTimes stamp: 'VP 11/18/2020 15:59:51'!
PASSED!

!testRun: #CartTest #test04CartCanHoldDifferentBooks stamp: 'VP 11/18/2020 15:59:51'!
PASSED!

!testRun: #CartTest #test05EmptyCartListingIsEmpty stamp: 'VP 11/18/2020 15:59:51'!
PASSED!

!testRun: #CartTest #test06CartListingHasAllCartProductsGroupedByISBN stamp: 'VP 11/18/2020 15:59:51'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'VP 11/18/2020 16:02:53'!
test07CanNotAddProductOutsideCatalog

	| cart outsideBook |
	
	cart := Cart new.
	outsideBook := '1933988274'.
	
	self should: [ cart add: outsideBook ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Cart negativeTransferErrorMessage equals: anError messageText.
			self assert: cart isEmpty.
		].! !
!CartTest methodsFor: 'tests' stamp: 'VP 11/18/2020 16:03:20' prior: 50900660!
test07CanNotAddProductOutsideCatalog

	| cart outsideBook |
	
	cart := Cart newWithCatalog: #('1933988274').
	outsideBook := 'NOT_A_BOOK'.
	
	self should: [ cart add: outsideBook ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Cart negativeTransferErrorMessage equals: anError messageText.
			self assert: cart isEmpty.
		].! !
!CartTest methodsFor: 'tests' stamp: 'VP 11/18/2020 16:03:49' prior: 50900590!
test06CartListingHasAllCartProductsGroupedByISBN

	| cart book1 book2 listing |
	
	cart := Cart newWithCatalog: #('1', '2').
	book1 := '1'.
	book2 := '2'.
	cart add: book1 times: 2.
	cart add: book2.
	
	listing := cart productListing.
	
	self deny: cart isEmpty.
	self assert: 2 equals: listing size.
	self assert: 2 equals: (listing at: book1).
	self assert: 1 equals: (listing at: book2).! !
!CartTest methodsFor: 'tests' stamp: 'VP 11/18/2020 16:04:00' prior: 50900548!
test05EmptyCartListingIsEmpty

	| cart |
	
	cart := Cart newWithCatalog: #('1').
	
	self assert: cart isEmpty.
	self assert: cart productListing isEmpty.! !
!CartTest methodsFor: 'tests' stamp: 'VP 11/18/2020 16:04:03' prior: 50900481!
test04CartCanHoldDifferentBooks

	| cart book1 book2 |
	
	cart := Cart newWithCatalog: #('1').
	book1 := '1933988274'.
	book2 := '1933988275'.
	cart add: book1 times: 2.
	cart add: book2.
	
	self deny: cart isEmpty.
	self assert: 2 equals: (cart quantityOfProduct: book1).
	self assert: 1 equals: (cart quantityOfProduct: book2).! !
!CartTest methodsFor: 'tests' stamp: 'VP 11/18/2020 16:04:09' prior: 50900710!
test04CartCanHoldDifferentBooks

	| cart book1 book2 |
	
	cart := Cart newWithCatalog: #('1', '2').
	book1 := '1'.
	book2 := '2'.
	cart add: book1 times: 2.
	cart add: book2.
	
	self deny: cart isEmpty.
	self assert: 2 equals: (cart quantityOfProduct: book1).
	self assert: 1 equals: (cart quantityOfProduct: book2).! !
!CartTest methodsFor: 'tests' stamp: 'VP 11/18/2020 16:04:16' prior: 50900494!
test03CartCanHoldSameBookMultipleTimes

	| cart book |
	
	cart := Cart newWithCatalog: #('1').
	book := '1'.
	cart add: book.
	cart add: book.
	
	self deny: cart isEmpty.
	self assert: 2 equals: (cart quantityOfProduct: book).! !
!CartTest methodsFor: 'tests' stamp: 'VP 11/18/2020 16:04:21' prior: 50900504!
test02BookAddedToCartIsInCart

	| cart book |
	
	cart := Cart newWithCatalog: #('1').
	book := '1'.
	cart add: book.
	
	self deny: cart isEmpty.
	self assert: 1 equals: (cart quantityOfProduct: book).! !
!CartTest methodsFor: 'tests' stamp: 'VP 11/18/2020 16:04:23' prior: 50899631!
test01NewCartIsEmpty

	| cart |
	
	cart := Cart newWithCatalog: #('1').
	
	self assert: cart isEmpty.! !
!CartTest methodsFor: 'tests' stamp: 'VP 11/18/2020 16:04:29' prior: 50900673!
test07CanNotAddProductOutsideCatalog

	| cart outsideBook |
	
	cart := Cart newWithCatalog: #('1').
	outsideBook := 'NOT_A_BOOK'.
	
	self should: [ cart add: outsideBook ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Cart negativeTransferErrorMessage equals: anError messageText.
			self assert: cart isEmpty.
		].! !

!testRun: #CartTest #test07CanNotAddProductOutsideCatalog stamp: 'VP 11/18/2020 16:04:31'!
ERROR!
!Cart class methodsFor: 'instance creation' stamp: 'VP 11/18/2020 16:04:36'!
newWithCatalog: anArray 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNewWithCatalog: anArray ! !
!Cart class methodsFor: 'instance creation' stamp: 'VP 11/18/2020 16:04:54' prior: 50900778!
newWithCatalog: aProductCatalog
	^self new initializeNewWithCatalog: aProductCatalog.! !

!testRun: #CartTest #test07CanNotAddProductOutsideCatalog stamp: 'VP 11/18/2020 16:04:59'!
ERROR!

!classDefinition: #Cart category: 'TusLibros' stamp: 'VP 11/18/2020 16:05:10'!
Object subclass: #Cart
	instanceVariableNames: 'products productCatalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'VP 11/18/2020 16:05:10'!
initializeNewWithCatalog: aProductCatalog 
	self shouldBeImplemented.
	productCatalog := aProductCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'VP 11/18/2020 16:05:17' prior: 50900802!
initializeNewWithCatalog: aProductCatalog 

	productCatalog := aProductCatalog.! !

!testRun: #CartTest #test07CanNotAddProductOutsideCatalog stamp: 'VP 11/18/2020 16:05:23'!
FAILURE!
!Cart methodsFor: 'operations' stamp: 'VP 11/18/2020 16:05:47' prior: 50900454!
add: aProduct times: aQuantity
	
	self verifyProductInCatalog: aProduct.
	
	products add: aProduct withOccurrences: aQuantity.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'VP 11/18/2020 16:05:52'!
PASSED!

!testRun: #CartTest #test02BookAddedToCartIsInCart stamp: 'VP 11/18/2020 16:05:52'!
ERROR!

!testRun: #CartTest #test03CartCanHoldSameBookMultipleTimes stamp: 'VP 11/18/2020 16:05:52'!
ERROR!

!testRun: #CartTest #test04CartCanHoldDifferentBooks stamp: 'VP 11/18/2020 16:05:52'!
ERROR!

!testRun: #CartTest #test05EmptyCartListingIsEmpty stamp: 'VP 11/18/2020 16:05:52'!
PASSED!

!testRun: #CartTest #test06CartListingHasAllCartProductsGroupedByISBN stamp: 'VP 11/18/2020 16:05:52'!
ERROR!

!testRun: #CartTest #test07CanNotAddProductOutsideCatalog stamp: 'VP 11/18/2020 16:05:52'!
ERROR!

!testRun: #CartTest #test02BookAddedToCartIsInCart stamp: 'VP 11/18/2020 16:05:54'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'VP 11/18/2020 16:06:18'!
verifyProductInCatalog: aString 
	self shouldBeImplemented.! !
!Cart methodsFor: 'testing' stamp: 'VP 11/18/2020 16:07:09' prior: 50900848!
verifyProductInCatalog: aProduct
	
	(productCatalog includes: aProduct) ifFalse: [ self error: self class  ].! !
!CartTest methodsFor: 'tests' stamp: 'VP 11/18/2020 16:07:47' prior: 50900761!
test07CanNotAddProductOutsideCatalog

	| cart outsideBook |
	
	cart := Cart newWithCatalog: #('1').
	outsideBook := 'NOT_A_BOOK'.
	
	self should: [ cart add: outsideBook ] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Cart productOutsideCatalogErrorMessage equals: anError messageText.
			self assert: cart isEmpty.
		].! !
!Cart methodsFor: 'testing' stamp: 'VP 11/18/2020 16:07:56' prior: 50900853!
verifyProductInCatalog: aProduct
	
	(productCatalog includes: aProduct) ifFalse: [ self error: self class productOutsideCatalogErrorMessage ].! !
!Cart class methodsFor: 'instance creation' stamp: 'VP 11/18/2020 16:08:08' prior: 50900787!
newWithCatalog: aProductCatalog

	^self new initializeNewWithCatalog: aProductCatalog.! !
!Cart class methodsFor: 'instance creation' stamp: 'VP 11/18/2020 16:08:33'!
productOutsideCatalogErrorMessage

	^'The product you are trying to add is outside the catalog, and therefore cannot be added'.! !

!testRun: #CartTest #test07CanNotAddProductOutsideCatalog stamp: 'VP 11/18/2020 16:08:46'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'VP 11/18/2020 16:08:49'!
PASSED!

!testRun: #CartTest #test02BookAddedToCartIsInCart stamp: 'VP 11/18/2020 16:08:49'!
PASSED!

!testRun: #CartTest #test03CartCanHoldSameBookMultipleTimes stamp: 'VP 11/18/2020 16:08:49'!
PASSED!

!testRun: #CartTest #test04CartCanHoldDifferentBooks stamp: 'VP 11/18/2020 16:08:49'!
PASSED!

!testRun: #CartTest #test05EmptyCartListingIsEmpty stamp: 'VP 11/18/2020 16:08:49'!
PASSED!

!testRun: #CartTest #test06CartListingHasAllCartProductsGroupedByISBN stamp: 'VP 11/18/2020 16:08:49'!
PASSED!

!testRun: #CartTest #test07CanNotAddProductOutsideCatalog stamp: 'VP 11/18/2020 16:08:49'!
PASSED!

----SNAPSHOT----(18 November 2020 16:09:14) CuisUniversity-4384.image priorSource: 18202347!