

----STARTUP---- (2 November 2020 19:04:58) as C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CUIS\CuisUniversity-4383.image!


----End fileIn of C:\Users\Chara\Desktop\Facultad\Ingenieria 1\2020-2c\18-Portfolio1\Portfolio-Ejercicio.st----!

!classRemoval: #ReceptiveAccount stamp: 'AM 11/2/2020 19:09:15'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'AM 11/2/2020 19:09:15'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'AM 11/2/2020 19:09:15'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'AM 11/2/2020 19:09:15'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'AM 11/2/2020 19:09:16'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of C:\Users\Chara\Desktop\Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/2/2020 19:15:15'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'AM 11/2/2020 19:21:09' prior: 50869880!
balance

	^transactions sum: [ :aTransaction | aTransaction effectOnBalance ] ifEmpty: [ 0 ]! !
!Withdraw methodsFor: 'value' stamp: 'AM 11/2/2020 19:21:36'!
effectOnBalance

	^ self value negated.! !
!Deposit methodsFor: 'value' stamp: 'AM 11/2/2020 19:21:59'!
effectOnBalance

	^self value.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/2/2020 19:22:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/2/2020 19:22:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/2/2020 19:22:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/2/2020 19:22:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/2/2020 19:22:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/2/2020 19:22:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/2/2020 19:22:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/2/2020 19:22:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/2/2020 19:22:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/2/2020 19:22:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/2/2020 19:22:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/2/2020 19:22:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/2/2020 19:22:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/2/2020 19:22:29'!
PASSED!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'AM 11/2/2020 19:23:04'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AM 11/2/2020 19:31:12'!
Object subclass: #Portfolio
	instanceVariableNames: 'members'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 19:29:45'!
test01EmptyPortfolioHasZeroBalance

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (portfolio balance) equals: 0.! !

Object subclass: #Portfolio
	instanceVariableNames: 'accountsAndPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AM 11/2/2020 19:31:28'!
Object subclass: #Portfolio
	instanceVariableNames: 'accountsAndPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/2/2020 19:31:37'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/2/2020 19:31:44'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/2/2020 19:33:13' prior: 50870004!
balance
	
	accountsAndPortfolios sum: [:anAccountOrPorfolio | anAccountOrPorfolio balance] ifEmpty: [0].! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/2/2020 19:33:13'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'AM 11/2/2020 19:33:57' overrides: 16896425!
initialize 

	accountsAndPortfolios := OrderedCollection new.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/2/2020 19:34:08'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'AM 11/2/2020 19:34:23' prior: 50870009!
balance
	
	^accountsAndPortfolios sum: [:anAccountOrPorfolio | anAccountOrPorfolio balance] ifEmpty: [0].! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/2/2020 19:34:31'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/2/2020 19:34:31'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 19:36:26'!
test02PortfolioWithOneAccountMatchesAccountBalance

	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	self assert: (portfolio balance) equals: 0.! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 19:36:58' prior: 50870039!
test02PortfolioWithOneAccountMatchesAccountBalance

	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	account register: Deposit.
	
	self assert: (portfolio balance) equals: 0.! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 19:37:25' prior: 50870048!
test02PortfolioWithOneAccountMatchesAccountBalance

	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	account register: (Deposit for: 300).
	
	self assert: (portfolio balance) equals: 0.! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 19:37:45' prior: 50870058!
test02PortfolioWithOneAccountMatchesAccountBalance

	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	account register: (Deposit for: 300).
	
	self assert: (portfolio balance) equals: 300.! !

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/2/2020 19:37:48'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 19:38:06' prior: 50870068!
test02PortfolioWithOneAccountMatchesAccountBalance

	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	account register: (Deposit for: 300).
	
	self assert: 300 equals: (portfolio balance).! !

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/2/2020 19:38:11'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 19:39:26' prior: 50870082!
test02PortfolioWithOneAccountMatchesAccountBalance

	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	account register: (Deposit for: 300).
	
	portfolio addAccount: account.
	
	self assert: 300 equals: (portfolio balance).! !

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/2/2020 19:39:30'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'AM 11/2/2020 19:39:39'!
addAccount: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'adding' stamp: 'AM 11/2/2020 19:39:51' prior: 50870110!
addAccount: aReceptiveAccount 
	
	accountsAndPortfolios add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/2/2020 19:39:52'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/2/2020 19:39:52'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/2/2020 19:39:52'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 19:41:13'!
test03PortfolioWithOnePortfolioMatchesPortFolioBalance

	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	account register: (Deposit for: 300).
	
	portfolio addAccount: account.
	
	self assert: 300 equals: (portfolio balance).! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 19:43:19' prior: 50870131!
test03PortfolioWithOnePortfolioMatchesPortFolioBalance

	| portfolioChild portfolioParent account |
	
	portfolioChild := Portfolio new.
	account := ReceptiveAccount new.
	account register: (Deposit for: 300).
	portfolioChild addAccount: account.
	
	portfolioParent := Portfolio new.
	
	portfolioParent addPortfolio: portfolioChild.
	
	self assert: 300 equals: (portfolioParent balance).! !

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioMatchesPortFolioBalance stamp: 'AM 11/2/2020 19:43:33'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'AM 11/2/2020 19:43:40'!
addPortfolio: aPortfolio 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'adding' stamp: 'AM 11/2/2020 19:43:51' prior: 50870161!
addPortfolio: aPortfolio 
	
	accountsAndPortfolios add: aPortfolio.! !

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioMatchesPortFolioBalance stamp: 'AM 11/2/2020 19:43:53'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/2/2020 19:43:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/2/2020 19:43:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioMatchesPortFolioBalance stamp: 'AM 11/2/2020 19:43:53'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 19:45:17'!
test04PortFolioAddsAccountAndPortfolioCorrectly

	| portfolioChild portfolioParent account |
	
	portfolioChild := Portfolio new.
	account := ReceptiveAccount new.
	account register: (Deposit for: 300).
	portfolioChild addAccount: account.
	
	portfolioParent := Portfolio new.
	
	portfolioParent addPortfolio: portfolioChild.
	
	self assert: 300 equals: (portfolioParent balance).! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 19:46:41' prior: 50870185!
test04PortFolioAddsAccountAndPortfolioCorrectly

	| portfolioChild portfolioParent account1 account2 |
	
	portfolioChild := Portfolio new.
	account1 := ReceptiveAccount new.
	account1 register: (Deposit for: 300).
	portfolioChild addAccount: account1.
	
	account2 := ReceptiveAccount new.
	account2 register: (Deposit for: 100).
	
	portfolioParent := Portfolio new.
	
	portfolioParent addPortfolio: portfolioChild.
	portfolioParent addAccount: account2.
	
	self assert: 400 equals: (portfolioParent balance).! !

!testRun: #PortfolioTest #test04PortFolioAddsAccountAndPortfolioCorrectly stamp: 'AM 11/2/2020 19:46:41'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/2/2020 19:46:41'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/2/2020 19:46:41'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioMatchesPortFolioBalance stamp: 'AM 11/2/2020 19:46:41'!
PASSED!

!testRun: #PortfolioTest #test04PortFolioAddsAccountAndPortfolioCorrectly stamp: 'AM 11/2/2020 19:46:42'!
PASSED!

----End fileIn of C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CUIS\Packages\TerseGuide.pck.st----!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 19:51:24'!
test04FindsTransactionCorrectly

	! !

!methodRemoval: PortfolioTest #test04PortFolioAddsAccountAndPortfolioCorrectly stamp: 'AM 11/2/2020 19:51:29'!
test04PortFolioAddsAccountAndPortfolioCorrectly

	| portfolioChild portfolioParent account1 account2 |
	
	portfolioChild := Portfolio new.
	account1 := ReceptiveAccount new.
	account1 register: (Deposit for: 300).
	portfolioChild addAccount: account1.
	
	account2 := ReceptiveAccount new.
	account2 register: (Deposit for: 100).
	
	portfolioParent := Portfolio new.
	
	portfolioParent addPortfolio: portfolioChild.
	portfolioParent addAccount: account2.
	
	self assert: 400 equals: (portfolioParent balance).!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 19:53:07' prior: 50873172!
test04FindsTransactionCorrectly

	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	account register: (Deposit for: 300).
	
	portfolio addAccount: account.
	
	self assert: (portfolio hasRegistered: (Deposit for: 300)).! !

!testRun: #PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/2/2020 19:53:08'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'AM 11/2/2020 19:53:19'!
hasRegistered: aDeposit 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'testing' stamp: 'AM 11/2/2020 19:55:30' prior: 50873210!
hasRegistered: aTransaction
	
	| foundTransaction |
	foundTransaction := false.
	
	accountsAndPortfolios do: [:accountOrPortfolio | foundTransaction := foundTransaction or: [accountOrPortfolio  hasRegistered: aTransaction]]! !

!testRun: #PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/2/2020 19:55:32'!
ERROR!

!testRun: #PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/2/2020 19:55:44'!
ERROR!

!testRun: #PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/2/2020 19:55:44'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'AM 11/2/2020 19:56:22' prior: 50873215!
hasRegistered: aTransaction
	
	| foundTransaction |
	foundTransaction := false.
	
	accountsAndPortfolios do: [
						:accountOrPortfolio | foundTransaction := foundTransaction or: [accountOrPortfolio  hasRegistered: aTransaction]
						].
	
	^foundTransaction.! !

!testRun: #PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/2/2020 19:56:36'!
FAILURE!

^ transactions includes: aTransaction!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 19:59:09' prior: 50873196!
test04FindsTransactionCorrectly

	| portfolio account transaction|
	
	portfolio := Portfolio new.
	transaction := (Deposit for: 300).
	account := ReceptiveAccount new.
	account register: transaction.
	
	portfolio addAccount: account.
	
	self assert: (portfolio hasRegistered: transaction).! !

!testRun: #PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/2/2020 19:59:18'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 20:02:32'!
test05CantRegisterDuplicateAccounts

	| portfolio account transaction|
	
	portfolio := Portfolio new.
	transaction := (Deposit for: 300).
	account := ReceptiveAccount new.
	account register: transaction.
	
	portfolio addAccount: account.
	
	self
	should: [portfolio addAccount: account.]
	raise: Error
	withMessageText: Portfolio duplicateAccountErrorDescription.! !

!testRun: #PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/2/2020 20:02:34'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 20:02:45' prior: 50873265!
test05CantRegisterDuplicateAccounts

	| portfolio account transaction|
	
	portfolio := Portfolio new.
	transaction := (Deposit for: 300).
	account := ReceptiveAccount new.
	account register: transaction.
	
	portfolio addAccount: account.
	
	self
	should: [portfolio addAccount: account.]
	raise: Error
	withMessageText: Portfolio duplicateAccountErrorDescription.! !

!testRun: #PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/2/2020 20:02:47'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 20:16:44' prior: 50870096!
test02PortfolioWithOneAccountMatchesAccountBalance

	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	account register: (Deposit for: 300).
	
	portfolio addAccount: account.
	
	self assert: (account balance) equals: (portfolio balance).! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 20:17:02' prior: 50870143!
test03PortfolioWithOnePortfolioMatchesPortFolioBalance

	| portfolioChild portfolioParent account |
	
	portfolioChild := Portfolio new.
	account := ReceptiveAccount new.
	account register: (Deposit for: 300).
	portfolioChild addAccount: account.
	
	portfolioParent := Portfolio new.
	
	portfolioParent addPortfolio: portfolioChild.
	
	self assert: (portfolioChild balance) equals: (portfolioParent balance).! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 20:22:26' prior: 50873283!
test05CantRegisterDuplicateAccounts

	| portfolio account transaction|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	account register: (Deposit for: 300).
	
	portfolio addAccount: account.
	
	self
	should: [portfolio addAccount: account.]
	raise: Error
	withMessageText: Portfolio duplicateAccountErrorDescription.! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 20:22:33' prior: 50873329!
test05CantRegisterDuplicateAccounts

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	account register: (Deposit for: 300).
	
	portfolio addAccount: account.
	
	self
	should: [portfolio addAccount: account.]
	raise: Error
	withMessageText: Portfolio duplicateAccountErrorDescription.! !
!Withdraw methodsFor: 'value' stamp: 'AM 11/2/2020 20:30:54'!
applyToBalance: aBalanceValue

	^ aBalanceValue - self value.! !

!methodRemoval: Withdraw #effectOnBalance stamp: 'AM 11/2/2020 20:30:59'!
effectOnBalance

	^ self value negated.!
!Deposit methodsFor: 'value' stamp: 'AM 11/2/2020 20:31:48'!
applyToBalance: aBalanceValue

	^ aBalanceValue + self value.! !

!methodRemoval: Deposit #effectOnBalance stamp: 'AM 11/2/2020 20:31:53'!
effectOnBalance

	^self value.!
!ReceptiveAccount methodsFor: 'balance' stamp: 'AM 11/2/2020 20:33:11' prior: 50869897!
balance
	| balance |
	balance := 0.
	transactions do: [:aTransaction | aTransaction applyToBalance: balance].
	
	! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'AM 11/2/2020 20:33:17' prior: 50873373!
balance
	| balance |
	balance := 0.
	transactions do: [:aTransaction | aTransaction applyToBalance: balance].
	
	^balance.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/2/2020 20:33:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/2/2020 20:33:22'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/2/2020 20:33:22'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/2/2020 20:33:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/2/2020 20:33:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/2/2020 20:33:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/2/2020 20:33:22'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'AM 11/2/2020 20:33:42' prior: 50873380!
balance
	| balance |
	balance := 0.
	transactions do: [:aTransaction | balance := aTransaction applyToBalance: balance].
	
	^balance.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/2/2020 20:33:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/2/2020 20:33:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/2/2020 20:33:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/2/2020 20:33:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/2/2020 20:33:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/2/2020 20:33:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/2/2020 20:33:50'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'AM 11/2/2020 20:34:02' prior: 50873414!
balance
	| balance |
	
	balance := 0.
	transactions do: [:aTransaction | balance := aTransaction applyToBalance: balance].
	
	^balance.
	! !

!testRun: #PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/2/2020 20:34:09'!
ERROR!
!Portfolio class methodsFor: 'signals' stamp: 'AM 11/2/2020 20:35:12'!
duplicateAccountErrorDescription
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'signals' stamp: 'AM 11/2/2020 20:35:45' prior: 50873458!
duplicateAccountErrorDescription
	
	^'Account is duplicate'! !

!testRun: #PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/2/2020 20:35:45'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'AM 11/2/2020 20:37:10' prior: 50870115!
addAccount: aReceptiveAccount 
	
	self assertNotDuplicate: aReceptiveAccount.
	accountsAndPortfolios add: aReceptiveAccount.! !
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/2/2020 20:37:38'!
assertNotDuplicate: aReceptiveAccount

	! !
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/2/2020 20:38:59' prior: 50873478!
assertNotDuplicate: aReceptiveAccount

	(accountsAndPortfolios includes: aReceptiveAccount) ifTrue: [self ]! !
!Portfolio methodsFor: 'signals' stamp: 'AM 11/2/2020 20:39:35'!
signal! !
!Portfolio methodsFor: 'signals' stamp: 'AM 11/2/2020 20:40:09'!
signalDuplicateAccount

	^self error: self class duplicateAccountErrorDescription.! !

!methodRemoval: Portfolio #signal stamp: 'AM 11/2/2020 20:40:14'!
signal!
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/2/2020 20:40:31' prior: 50873482!
assertNotDuplicate: aReceptiveAccount

	(accountsAndPortfolios includes: aReceptiveAccount) ifTrue: [self signalDuplicateAccount ]! !
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/2/2020 20:40:34' prior: 50873499!
assertNotDuplicate: aReceptiveAccount

	(accountsAndPortfolios includes: aReceptiveAccount) ifTrue: [self signalDuplicateAccount].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/2/2020 20:40:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/2/2020 20:40:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/2/2020 20:40:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/2/2020 20:40:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/2/2020 20:40:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/2/2020 20:40:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/2/2020 20:40:37'!
PASSED!

!testRun: #PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/2/2020 20:40:43'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/2/2020 20:40:43'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/2/2020 20:40:43'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioMatchesPortFolioBalance stamp: 'AM 11/2/2020 20:40:43'!
PASSED!

!testRun: #PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/2/2020 20:40:43'!
PASSED!

!testRun: #PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/2/2020 20:40:43'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'AM 11/2/2020 20:42:51'!
add: aReceptiveAccountOrPortfolio 
	
	self assertNotDuplicate: aReceptiveAccountOrPortfolio.
	accountsAndPortfolios add: aReceptiveAccountOrPortfolio.! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 20:43:26' prior: 50873301!
test02PortfolioWithOneAccountMatchesAccountBalance

	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	account register: (Deposit for: 300).
	
	portfolio add: account.
	
	self assert: (account balance) equals: (portfolio balance).! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 20:43:31' prior: 50873313!
test03PortfolioWithOnePortfolioMatchesPortFolioBalance

	| portfolioChild portfolioParent account |
	
	portfolioChild := Portfolio new.
	account := ReceptiveAccount new.
	account register: (Deposit for: 300).
	portfolioChild addAccount: account.
	
	portfolioParent := Portfolio new.
	
	portfolioParent add: portfolioChild.
	
	self assert: (portfolioChild balance) equals: (portfolioParent balance).! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 20:43:36' prior: 50873250!
test04FindsTransactionCorrectly

	| portfolio account transaction|
	
	portfolio := Portfolio new.
	transaction := (Deposit for: 300).
	account := ReceptiveAccount new.
	account register: transaction.
	
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: transaction).! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 20:43:42' prior: 50873579!
test03PortfolioWithOnePortfolioMatchesPortFolioBalance

	| portfolioChild portfolioParent account |
	
	portfolioChild := Portfolio new.
	account := ReceptiveAccount new.
	account register: (Deposit for: 300).
	portfolioChild add: account.
	
	portfolioParent := Portfolio new.
	
	portfolioParent add: portfolioChild.
	
	self assert: (portfolioChild balance) equals: (portfolioParent balance).! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 20:43:48' prior: 50873343!
test05CantRegisterDuplicateAccounts

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	account register: (Deposit for: 300).
	
	portfolio add: account.
	
	self
	should: [portfolio addAccount: account.]
	raise: Error
	withMessageText: Portfolio duplicateAccountErrorDescription.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/2/2020 20:43:51'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/2/2020 20:43:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioMatchesPortFolioBalance stamp: 'AM 11/2/2020 20:43:51'!
PASSED!

!testRun: #PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/2/2020 20:43:51'!
PASSED!

!testRun: #PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/2/2020 20:43:51'!
PASSED!

!methodRemoval: Portfolio #addAccount: stamp: 'AM 11/2/2020 20:44:01'!
addAccount: aReceptiveAccount 
	
	self assertNotDuplicate: aReceptiveAccount.
	accountsAndPortfolios add: aReceptiveAccount.!

!methodRemoval: Portfolio #addPortfolio: stamp: 'AM 11/2/2020 20:44:06'!
addPortfolio: aPortfolio 
	
	accountsAndPortfolios add: aPortfolio.!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 20:44:23' prior: 50873622!
test05CantRegisterDuplicateAccounts

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	account register: (Deposit for: 300).
	
	portfolio add: account.
	
	self
	should: [portfolio add: account.]
	raise: Error
	withMessageText: Portfolio duplicateAccountErrorDescription.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/2/2020 20:44:26'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/2/2020 20:44:26'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioMatchesPortFolioBalance stamp: 'AM 11/2/2020 20:44:26'!
PASSED!

!testRun: #PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/2/2020 20:44:26'!
PASSED!

!testRun: #PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/2/2020 20:44:26'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 20:45:20'!
test06CantAddAccountPresentInChildPortfolio

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	account register: (Deposit for: 300).
	
	portfolio add: account.
	
	self
	should: [portfolio add: account.]
	raise: Error
	withMessageText: Portfolio duplicateAccountErrorDescription.! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/2/2020 20:46:20' prior: 50873692!
test06CantAddAccountPresentInChildPortfolio

	| portfolioChild portfolioParent account |
	
	account := ReceptiveAccount new.
	account register: (Deposit for: 300).
	
	portfolioChild := Portfolio new.
	portfolioChild add: account.
	
	portfolioParent := Portfolio new.
	portfolioParent add: portfolioChild.
	
	self
	should: [portfolioParent add: account.]
	raise: Error
	withMessageText: Portfolio duplicateAccountErrorDescription.! !

!testRun: #PortfolioTest #test06CantAddAccountPresentInChildPortfolio stamp: 'AM 11/2/2020 20:46:42'!
FAILURE!

!testRun: #PortfolioTest #test06CantAddAccountPresentInChildPortfolio stamp: 'AM 11/2/2020 20:46:54'!
FAILURE!
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/2/2020 20:48:49' prior: 50873506!
assertNotDuplicate: aReceptiveAccount

	accountsAndPortfolios do: [:anAccounOrPortfolio | anAccounOrPortfolio assertNotDuplicate: aReceptiveAccount].! !
!ReceptiveAccount methodsFor: 'assertions' stamp: 'AM 11/2/2020 20:50:43'!
assertNotDuplicate: aReceptiveAccount

	! !
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/2/2020 20:53:54' prior: 50873729!
assertNotDuplicate: aReceptiveAccount

	accountsAndPortfolios detect: [:anAccounOrPortfolio | anAccounOrPortfolio assertNotDuplicate: aReceptiveAccount] ifNone: [^ false].
	self error: self class signalDuplicateAccount.! !
!ReceptiveAccount methodsFor: 'assertions' stamp: 'AM 11/2/2020 20:54:24' prior: 50873737!
assertNotDuplicate: aReceptiveAccount

	^(self = aReceptiveAccount)! !
!ReceptiveAccount methodsFor: 'assertions' stamp: 'AM 11/2/2020 20:54:34' prior: 50873751!
assertNotDuplicate: aReceptiveAccount

	^(self = aReceptiveAccount).! !

!testRun: #PortfolioTest #test06CantAddAccountPresentInChildPortfolio stamp: 'AM 11/2/2020 20:54:43'!
FAILURE!

!testRun: #PortfolioTest #test06CantAddAccountPresentInChildPortfolio stamp: 'AM 11/2/2020 20:54:43'!
FAILURE!
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/2/2020 20:56:09' prior: 50873741!
assertNotDuplicate: aReceptiveAccount

	accountsAndPortfolios detect: [:anAccounOrPortfolio | anAccounOrPortfolio assertNotDuplicate: aReceptiveAccount] ifNone: [^ false].
	self signalDuplicateAccount.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/2/2020 20:56:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/2/2020 20:56:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/2/2020 20:56:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/2/2020 20:56:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/2/2020 20:56:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/2/2020 20:56:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/2/2020 20:56:11'!
PASSED!

----QUIT----(2 November 2020 22:33:25) CuisUniversity-4383.image priorSource: 17207870!

----STARTUP---- (3 November 2020 11:06:58) as C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CUIS\CuisUniversity-4383.image!


----QUIT----(3 November 2020 15:04:10) CuisUniversity-4383.image priorSource: 17348917!

----STARTUP---- (6 November 2020 14:50:30) as C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CUIS\CuisUniversity-4383.image!


!testRun: #PortfolioTest #test06CantAddAccountPresentInChildPortfolio stamp: 'AM 11/6/2020 15:10:32'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/6/2020 15:26:51'!
test07TransactionsReturnsAllAccountsInPortfolio

	| portfolio account transactions |
	
	account := ReceptiveAccount new.
	transactions := OrderedCollection with: (Deposit for: 300) with: (Withdraw for: 150).
	account register: (transactions at: 1); register: (transactions at: 2).
	
	
	portfolio := Portfolio new.
	portfolio add: account.
	
	self assert: transactions equals: portfolio transactions.! !

!testRun: #PortfolioTest #test07TransactionsReturnsAllAccountsInPortfolio stamp: 'AM 11/6/2020 15:26:53'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'AM 11/6/2020 15:27:02'!
transactions
	self shouldBeImplemented.! !

|or1 or2 a1|

or1 := OrderedCollection addAll: #(1,2,3).
a1 := 4.
or2 := OrderedCollection addAll: or1.!

|or1 or2 a1|

or1 := OrderedCollection new.
or1 addAll: #(1,2,3).
a1 := 4.
or2 := OrderedCollection new.
or2 addAll: or1.!

|or1 or2 a1|

or1 := OrderedCollection new.
or1 addAll: #(1,2,3).
a1 := 4.
or2 := OrderedCollection new.
or2 addAll: or1.!

|or1 or2|

or1 := OrderedCollection new.
or1 addAll: #(1,2,3).
or2 := OrderedCollection with: 4.
or2 addAll: or1. 
!

or2 addAll: or1. !

|or1 or2|

or1 := OrderedCollection new.
or1 addAll: #(1,2,3).
or2 := OrderedCollection with: 4.
or2 addAll: or1. 
!
!Portfolio methodsFor: 'accessing' stamp: 'AM 11/6/2020 15:44:20' prior: 50873840!
transactions
	| transactionCollection |
	
	transactionCollection := OrderedCollection new.
	
	accountsAndPortfolios do: [:anAccountOrPortFolio | anAccountOrPortFolio addTransactionTo: transactionCollection]! !
!Portfolio methodsFor: 'accessing' stamp: 'AM 11/6/2020 15:45:23'!
addTransactionTo: transactionCollection
	
	accountsAndPortfolios do: [:anAccountOrPortFolio | anAccountOrPortFolio addTransactionTo: transactionCollection].! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AM 11/6/2020 15:46:06'!
addTransactionTo: transactionsCollection

	transactionsCollection add: self transactions.! !

!testRun: #PortfolioTest #test07TransactionsReturnsAllAccountsInPortfolio stamp: 'AM 11/6/2020 15:46:24'!
FAILURE!

!testRun: #PortfolioTest #test07TransactionsReturnsAllAccountsInPortfolio stamp: 'AM 11/6/2020 15:46:24'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'AM 11/6/2020 15:46:42' prior: 50873863!
transactions
	| transactionCollection |
	
	transactionCollection := OrderedCollection new.
	
	accountsAndPortfolios do: [:anAccountOrPortFolio | anAccountOrPortFolio addTransactionTo: transactionCollection].
	
	^transactionCollection.! !

!testRun: #PortfolioTest #test07TransactionsReturnsAllAccountsInPortfolio stamp: 'AM 11/6/2020 15:46:49'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AM 11/6/2020 15:48:43' prior: 50873880!
addTransactionTo: transactionsCollection

	transactions do: [:aTransaction | transactionsCollection add: aTransaction].! !

!testRun: #PortfolioTest #test07TransactionsReturnsAllAccountsInPortfolio stamp: 'AM 11/6/2020 15:48:53'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/6/2020 15:48:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/6/2020 15:48:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioMatchesPortFolioBalance stamp: 'AM 11/6/2020 15:48:53'!
PASSED!

!testRun: #PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/6/2020 15:48:53'!
PASSED!

!testRun: #PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/6/2020 15:48:53'!
PASSED!

!testRun: #PortfolioTest #test06CantAddAccountPresentInChildPortfolio stamp: 'AM 11/6/2020 15:48:53'!
PASSED!

!testRun: #PortfolioTest #test07TransactionsReturnsAllAccountsInPortfolio stamp: 'AM 11/6/2020 15:48:53'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AM 11/6/2020 15:50:04' prior: 50873907!
addTransactionTo: transactionsCollection

	transactionsCollection add: self transactions.! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/6/2020 15:51:22' prior: 50873821!
test07TransactionsReturnsAllAccountsInPortfolio

	| portfolio account accountTransactions transactions |
	
	account := ReceptiveAccount new.
	accountTransactions := OrderedCollection with: (Deposit for: 300) with: (Withdraw for: 150).
	account register: (accountTransactions at: 1); register: (accountTransactions at: 2).
	
	transactions := OrderedCollection with: accountTransactions.
	
	portfolio := Portfolio new.
	portfolio add: account.
	
	self assert: transactions equals: portfolio transactions.! !

!testRun: #PortfolioTest #test07TransactionsReturnsAllAccountsInPortfolio stamp: 'AM 11/6/2020 15:51:24'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/6/2020 15:51:24'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/6/2020 15:51:24'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioMatchesPortFolioBalance stamp: 'AM 11/6/2020 15:51:24'!
PASSED!

!testRun: #PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/6/2020 15:51:24'!
PASSED!

!testRun: #PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/6/2020 15:51:24'!
PASSED!

!testRun: #PortfolioTest #test06CantAddAccountPresentInChildPortfolio stamp: 'AM 11/6/2020 15:51:24'!
PASSED!

!testRun: #PortfolioTest #test07TransactionsReturnsAllAccountsInPortfolio stamp: 'AM 11/6/2020 15:51:24'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/6/2020 16:05:32' prior: 50873705!
test06CantAddAccountPresentInChildPortfolio

	| portfolioChild portfolioParent account portfolioToAdd|
	
	account := ReceptiveAccount new.
	account register: (Deposit for: 300).
	
	portfolioChild := Portfolio new.
	portfolioChild add: account.
	
	portfolioParent := Portfolio new.
	portfolioParent add: portfolioChild.
	
	portfolioToAdd:= Portfolio new.
	portfolioToAdd add: account.
	
	self
	should: [portfolioParent add: account.]
	raise: Error
	withMessageText: Portfolio duplicateAccountErrorDescription.! !

!testRun: #PortfolioTest #test06CantAddAccountPresentInChildPortfolio stamp: 'AM 11/6/2020 16:05:33'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/6/2020 16:05:33'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/6/2020 16:05:33'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioMatchesPortFolioBalance stamp: 'AM 11/6/2020 16:05:33'!
PASSED!

!testRun: #PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/6/2020 16:05:33'!
PASSED!

!testRun: #PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/6/2020 16:05:33'!
PASSED!

!testRun: #PortfolioTest #test06CantAddAccountPresentInChildPortfolio stamp: 'AM 11/6/2020 16:05:33'!
PASSED!

!testRun: #PortfolioTest #test07TransactionsReturnsAllAccountsInPortfolio stamp: 'AM 11/6/2020 16:05:33'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/6/2020 16:06:20' prior: 50873995!
test06CantAddAccountPresentInChildPortfolio

	| portfolioChild portfolioParent account|
	
	account := ReceptiveAccount new.
	account register: (Deposit for: 300).
	
	portfolioChild := Portfolio new.
	portfolioChild add: account.
	
	portfolioParent := Portfolio new.
	portfolioParent add: portfolioChild.
	
	self
	should: [portfolioParent add: account.]
	raise: Error
	withMessageText: Portfolio duplicateAccountErrorDescription.! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/6/2020 16:06:52'!
test08CantAddAccountPresentInChildPortfolio

	| portfolioChild portfolioParent portfolioToAdd account|
	
	account := ReceptiveAccount new.
	account register: (Deposit for: 300).
	
	portfolioChild := Portfolio new.
	portfolioChild add: account.
	
	portfolioParent := Portfolio new.
	portfolioParent add: portfolioChild.
	
	portfolioToAdd:= Portfolio new.
	portfolioToAdd add: account.
	
	self
	should: [portfolioParent add: portfolioToAdd ]
	raise: Error
	withMessageText: Portfolio duplicateAccountErrorDescription.! !

!testRun: #PortfolioTest #test08CantAddAccountPresentInChildPortfolio stamp: 'AM 11/6/2020 16:06:53'!
FAILURE!
!Portfolio methodsFor: 'nil' stamp: 'AM 11/6/2020 16:09:44'!
accounts

	| accounts |
	
	accounts := OrderedCollection new.
	
	accountsAndPortfolios do: [:accountOrPortfolio | accountOrPortfolio addAccountTo: accounts].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/6/2020 16:10:21'!
addAccountTo: anAccountCollection
	
	accountsAndPortfolios do: [:accountOrPortfolio | accountOrPortfolio addAccountTo: anAccountCollection].! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AM 11/6/2020 16:10:56'!
addAccountTo: anAccountCollection

	anAccountCollection add: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/6/2020 16:11:10' prior: 50874088!
addAccountTo: anAccountCollection
	
	^accountsAndPortfolios do: [:accountOrPortfolio | accountOrPortfolio addAccountTo: anAccountCollection].! !
!Portfolio methodsFor: 'adding' stamp: 'AM 11/6/2020 16:11:28' prior: 50874101!
addAccountTo: anAccountCollection
	
	accountsAndPortfolios do: [:accountOrPortfolio | accountOrPortfolio addAccountTo: anAccountCollection].! !
!Portfolio methodsFor: 'accessing' stamp: 'AM 11/6/2020 16:11:52' prior: 50874080!
accounts

	| accounts |
	
	accounts := OrderedCollection new.
	
	accountsAndPortfolios do: [:accountOrPortfolio | accountOrPortfolio addAccountTo: accounts].
	
	^accounts.! !
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/6/2020 16:12:51' prior: 50873769!
assertNotDuplicate: aReceptiveAccount

	accountsAndPortfolios detect: [:anAccounOrPortfolio | anAccounOrPortfolio assertNotDuplicate: aReceptiveAccount] ifNone: [^ false].
	self signalDuplicateAccount.! !
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/6/2020 16:15:28' prior: 50874126!
assertNotDuplicate: anAccountOrPortfolio
	
	| accountsInSelf |
	
	accountsInSelf := self accounts.
	anAccountOrPortfolio accounts detect: [: anAccount].
	self signalDuplicateAccount.! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'AM 11/6/2020 16:15:50'!
accounts

 	^self.! !
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/6/2020 16:16:24' prior: 50874136!
assertNotDuplicate: anAccountOrPortfolio
	
	| accountsInSelf |
	
	accountsInSelf := self accounts.
	anAccountOrPortfolio accounts detect: [: anAccount | accountsInSelf includes: anAccount].
	self signalDuplicateAccount.! !
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/6/2020 16:16:44' prior: 50874149!
assertNotDuplicate: anAccountOrPortfolio
	
	| accountsInSelf |
	
	accountsInSelf := self accounts.
	anAccountOrPortfolio accounts detect: [: anAccount | accountsInSelf includes: anAccount] ifNone: [^false].
	self signalDuplicateAccount.! !
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/6/2020 16:19:08' prior: 50874159!
assertNotDuplicate: anAccountOrPortfolio
	
	| accountsInSelf |
	
	accountsInSelf := self accounts.
	anAccountOrPortfolio accounts detect: [:anAccount | accountsInSelf includes: anAccount] ifNone: [^false].
	self signalDuplicateAccount.! !

!testRun: #PortfolioTest #test08CantAddAccountPresentInChildPortfolio stamp: 'AM 11/6/2020 16:19:15'!
ERROR!
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/6/2020 16:19:32' prior: 50874170!
assertNotDuplicate: anAccountOrPortfolio
	
	| accountsInSelf |
	
	accountsInSelf := self accounts.
	(anAccountOrPortfolio accounts) detect: [:anAccount | accountsInSelf includes: anAccount] ifNone: [^false].
	self signalDuplicateAccount.! !

!testRun: #PortfolioTest #test08CantAddAccountPresentInChildPortfolio stamp: 'AM 11/6/2020 16:19:41'!
ERROR!

!testRun: #PortfolioTest #test08CantAddAccountPresentInChildPortfolio stamp: 'AM 11/6/2020 16:20:24'!
ERROR!

!testRun: #PortfolioTest #test08CantAddAccountPresentInChildPortfolio stamp: 'AM 11/6/2020 16:20:37'!
ERROR!

!testRun: #PortfolioTest #test08CantAddAccountPresentInChildPortfolio stamp: 'AM 11/6/2020 16:20:37'!
ERROR!

(anAccountOrPortfolio accounts) !
!ReceptiveAccount methodsFor: 'testing' stamp: 'AM 11/6/2020 16:21:31' prior: 50874145!
accounts

 	^OrderedCollection with: self.! !

!testRun: #PortfolioTest #test08CantAddAccountPresentInChildPortfolio stamp: 'AM 11/6/2020 16:21:39'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/6/2020 16:21:39'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/6/2020 16:21:39'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioMatchesPortFolioBalance stamp: 'AM 11/6/2020 16:21:39'!
PASSED!

!testRun: #PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/6/2020 16:21:39'!
PASSED!

!testRun: #PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/6/2020 16:21:39'!
PASSED!

!testRun: #PortfolioTest #test06CantAddAccountPresentInChildPortfolio stamp: 'AM 11/6/2020 16:21:39'!
PASSED!

!testRun: #PortfolioTest #test07TransactionsReturnsAllAccountsInPortfolio stamp: 'AM 11/6/2020 16:21:39'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAccountPresentInChildPortfolio stamp: 'AM 11/6/2020 16:21:39'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/6/2020 16:25:54'!
test09

	| portfolioChild portfolioParent account|
	
	account := ReceptiveAccount new.
	account register: (Deposit for: 300).
	
	portfolioChild := Portfolio new.
	
	portfolioParent := Portfolio new.
	portfolioParent add: portfolioChild.
	portfolioParent add: account.
	
	self
	should: [portfolioChild add: account]
	raise: Error
	withMessageText: Portfolio duplicateAccountErrorDescription.! !

!testRun: #PortfolioTest #test09 stamp: 'AM 11/6/2020 16:26:02'!
FAILURE!

Object subclass: #Portfolio
	instanceVariableNames: 'accountsAndPortfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AM 11/6/2020 16:26:29'!
Object subclass: #Portfolio
	instanceVariableNames: 'accountsAndPortfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'AM 11/6/2020 16:27:22' prior: 50873559!
add: aReceptiveAccountOrPortfolio 
	
	self assertNotDuplicate: aReceptiveAccountOrPortfolio.
	aReceptiveAccountOrPortfolio addParent: self.
	accountsAndPortfolios add: aReceptiveAccountOrPortfolio.! !
!Portfolio methodsFor: 'adding' stamp: 'AM 11/6/2020 16:27:52'!
addParent: aPortfolio

	parents add: aPortfolio.! !
!Portfolio methodsFor: 'initialization' stamp: 'AM 11/6/2020 16:28:06' prior: 50870019 overrides: 16896425!
initialize 

	accountsAndPortfolios := OrderedCollection new.
	parents := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'AM 11/6/2020 16:28:37'!
addParent: aPortfolio

	! !
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/6/2020 16:34:03' prior: 50874184!
assertNotDuplicate: anAccountOrPortfolio
	
	| accountsInHierachy |
	accountsInHierachy := OrderedCollection new.
	
	parents do: [:parent | accountsInHierachy add: ((parent searchParents) accounts)].
	
	(anAccountOrPortfolio accounts) detect: [:anAccount | accountsInHierachy includes: anAccount] ifNone: [^false].
	self signalDuplicateAccount.! !
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/6/2020 16:35:05'!
searchParents

	parents ! !

----QUIT----(6 November 2020 16:36:24) CuisUniversity-4383.image priorSource: 17349131!

----STARTUP---- (6 November 2020 23:01:53) as C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CUIS\CuisUniversity-4383.image!


!classRemoval: #ReceptiveAccount stamp: 'AM 11/6/2020 23:01:58'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'AM 11/6/2020 23:01:58'!
Object subclass: #Portfolio
	instanceVariableNames: 'accountsAndPortfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'AM 11/6/2020 23:01:58'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'AM 11/6/2020 23:01:58'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'AM 11/6/2020 23:01:59'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'AM 11/6/2020 23:01:59'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'AM 11/6/2020 23:01:59'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of C:\Users\Chara\Desktop\Facultad\Ingenieria 1\2020-2c\18-Portfolio1\Portfolio-Ejercicio.st----!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'AM 11/6/2020 23:08:50'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccount stamp: 'AM 11/6/2020 23:10:48'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'AM 11/6/2020 23:10:49'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'AM 11/6/2020 23:10:49'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'AM 11/6/2020 23:10:49'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'AM 11/6/2020 23:10:49'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'AM 11/6/2020 23:10:50'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of C:\Users\Chara\Desktop\Facultad\Ingenieria 1\ISW1\18-Portfolio1\Portfolio-Ejercicio.st----!

----End fileIn of C:\Users\Chara\Desktop\Facultad\Ingenieria 1\ISW1\18-Portfolio1\Portfolio-Ejercicio.st----!

!classRemoval: #ReceptiveAccount stamp: 'AM 11/6/2020 23:11:45'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'AM 11/6/2020 23:11:45'!
Object subclass: #Portfolio
	instanceVariableNames: 'accountsAndPortfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'AM 11/6/2020 23:11:46'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'AM 11/6/2020 23:11:46'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'AM 11/6/2020 23:11:46'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'AM 11/6/2020 23:11:47'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'AM 11/6/2020 23:11:47'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of C:\Users\Chara\Desktop\Facultad\Ingenieria 1\2020-2c\18-Portfolio1\Portfolio-Ejercicio.st----!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'AM 11/6/2020 23:13:24'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'nil' stamp: 'AM 11/6/2020 23:14:17'!
test01EmptyPortfolioHasZeroBalance

	
	! !

----End fileIn of C:\Users\Chara\Desktop\Facultad\Ingenieria 1\2020-2c\15-Stack\Stack-Exercise.st----!

!classRemoval: #SentenceFinderByPrefix stamp: 'AM 11/6/2020 23:15:08'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'AM 11/6/2020 23:15:09'!
Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'AM 11/6/2020 23:15:09'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'AM 11/6/2020 23:15:09'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of C:\Users\Chara\Desktop\Facultad\Ingenieria 1\2020-2c\12-NumerosDePeano\Numeros de Peano Tests De Verificacion.st----!

!classRemoval: #TestsDeVerificacion stamp: 'AM 11/6/2020 23:15:29'!
DenotativeObject subclass: #TestsDeVerificacion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano Tests De Verificacion'!

----End fileIn of C:\Users\Chara\Desktop\Facultad\Ingenieria 1\2020-2c\12-NumerosDePeano\Numeros De Peano vista en clase 1.st----!

!classRemoval: #IIIIIIIII stamp: 'AM 11/6/2020 23:15:40'!
II subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros De Peano'!

!classRemoval: #IIIIIIII stamp: 'AM 11/6/2020 23:15:40'!
II subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros De Peano'!

!classRemoval: #IIIIIII stamp: 'AM 11/6/2020 23:15:40'!
II subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros De Peano'!

!classRemoval: #IIIIII stamp: 'AM 11/6/2020 23:15:40'!
II subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros De Peano'!

!classRemoval: #IIIII stamp: 'AM 11/6/2020 23:15:41'!
II subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros De Peano'!

!classRemoval: #IIII stamp: 'AM 11/6/2020 23:15:41'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros De Peano'!

!classRemoval: #III stamp: 'AM 11/6/2020 23:15:41'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros De Peano'!

!classRemoval: #II stamp: 'AM 11/6/2020 23:15:42'!
I subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros De Peano'!

!classRemoval: #I stamp: 'AM 11/6/2020 23:15:42'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros De Peano'!

----End fileIn of C:\Users\Chara\Desktop\Facultad\Ingenieria 1\2020-2c\14-Numeros\Solucion\Numero-Solution-2.st----!
!PortfolioTest methodsFor: 'nil' stamp: 'AM 11/6/2020 23:17:25' overrides: 16927572!
setUp

	! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AM 11/6/2020 23:19:06'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/6/2020 23:18:51' prior: 50875991!
test01EmptyPortfolioHasZeroBalance

	
	| portfolio |
	portfolio := Portfolio new.
	
	self assert: (portfolio balance) ! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/6/2020 23:19:23' prior: 50877341!
test01EmptyPortfolioHasZeroBalance

	
	| portfolio |
	portfolio := Portfolio new.
	
	self assert: (portfolio balance) equals: 0.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/6/2020 23:19:26'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'AM 11/6/2020 23:19:38'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accessing' stamp: 'AM 11/6/2020 23:19:45' prior: 50877358!
balance
	
	^0.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/6/2020 23:19:48'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/6/2020 23:19:48'!
PASSED!
!PortfolioTest methodsFor: 'setup' stamp: 'AM 11/6/2020 23:20:12' prior: 50877330 overrides: 16927572!
setUp! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/6/2020 23:21:35'!
test02CanAddAccountToPortfolio

	
	| portfolio |
	portfolio := Portfolio new.
	
	self assert: (portfolio balance) equals: 0.! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/6/2020 23:24:36' prior: 50877376!
test02CanAddAccountToPortfolio

	
	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	account register: (Deposit for: 100).
	portfolio add: account.
	
	self assert: (portfolio balance) equals: 100.! !

!testRun: #PortfolioTest #test02CanAddAccountToPortfolio stamp: 'AM 11/6/2020 23:25:09'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'AM 11/6/2020 23:25:21'!
add: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'adding' stamp: 'AM 11/6/2020 23:25:31' prior: 50877396!
add: aReceptiveAccount 
	
	! !

Object subclass: #Portfolio
	instanceVariableNames: 'portfolioElements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AM 11/6/2020 23:25:41'!
Object subclass: #Portfolio
	instanceVariableNames: 'portfolioElements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'AM 11/6/2020 23:26:34' prior: 50877401!
add: aReceptiveAccount 
	
	portfolioElements add: aReceptiveAccount.
	! !

!testRun: #PortfolioTest #test02CanAddAccountToPortfolio stamp: 'AM 11/6/2020 23:26:37'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'AM 11/6/2020 23:27:10' overrides: 16896425!
initialize

	portfolioElements := OrderedCollection new.! !

!testRun: #PortfolioTest #test02CanAddAccountToPortfolio stamp: 'AM 11/6/2020 23:27:21'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'AM 11/6/2020 23:28:15' prior: 50877362!
balance
	
	^portfolioElements sum: [:element | element balance].! !

!testRun: #PortfolioTest #test02CanAddAccountToPortfolio stamp: 'AM 11/6/2020 23:28:23'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/6/2020 23:28:24'!
ERROR!

!testRun: #PortfolioTest #test02CanAddAccountToPortfolio stamp: 'AM 11/6/2020 23:28:24'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/6/2020 23:28:24'!
ERROR!

!testRun: #PortfolioTest #test02CanAddAccountToPortfolio stamp: 'AM 11/6/2020 23:28:31'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/6/2020 23:28:31'!
ERROR!

!testRun: #PortfolioTest #test02CanAddAccountToPortfolio stamp: 'AM 11/6/2020 23:28:31'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/6/2020 23:28:31'!
ERROR!

Deposit!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/6/2020 23:31:25'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/6/2020 23:31:25'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'AM 11/6/2020 23:31:42' prior: 50877434!
balance
	
	^portfolioElements sum: [:element | element balance] ifEmpty: [^0].! !

!testRun: #PortfolioTest #test02CanAddAccountToPortfolio stamp: 'AM 11/6/2020 23:31:47'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/6/2020 23:31:51'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/6/2020 23:32:28'!
test02PortfolioMatchesAddedAccountBalance

	
	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	account register: (Deposit for: 100).
	portfolio add: account.
	
	self assert: (portfolio balance) equals: 100.! !

!methodRemoval: PortfolioTest #test02CanAddAccountToPortfolio stamp: 'AM 11/6/2020 23:32:28'!
test02CanAddAccountToPortfolio

	
	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	account register: (Deposit for: 100).
	portfolio add: account.
	
	self assert: (portfolio balance) equals: 100.!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/6/2020 23:34:37'!
test03CantAddDuplicateAccountsToPortfolio

	
	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	account register: (Deposit for: 100).
	portfolio add: account.
	
	self assert: (portfolio balance) equals: 100.! !
!PortfolioTest methodsFor: 'setup' stamp: 'AM 11/6/2020 23:36:55' prior: 50877373 overrides: 16927572!
setUp

	| emptyAccount emptyPortfolio oneFiftyWithdraw threeHundredDeposit |
	emptyPortfolio := Portfolio new.
	emptyAccount := ReceptiveAccount new.
	threeHundredDeposit := Deposit for: 300.
	oneFiftyWithdraw := Withdraw for: 150.! !
!PortfolioTest methodsFor: 'setup' stamp: 'AM 11/6/2020 23:37:52' prior: 50877514 overrides: 16927572!
setUp

	! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'AM 11/6/2020 23:38:13'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'emptyPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'AM 11/6/2020 23:38:15'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'emptyPortfolio emptyAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'AM 11/6/2020 23:38:16'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'emptyPortfolio emptyAccount threeHundredDeposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'AM 11/6/2020 23:38:18'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'emptyPortfolio emptyAccount threeHundredDeposit oneFiftyWithdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'setup' stamp: 'AM 11/6/2020 23:38:11' prior: 50877525 overrides: 16927572!
setUp

	emptyPortfolio := Portfolio new.
	emptyAccount := ReceptiveAccount new.
	threeHundredDeposit := Deposit for: 300.
	oneFiftyWithdraw := Withdraw for: 150.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/6/2020 23:38:18'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioMatchesAddedAccountBalance stamp: 'AM 11/6/2020 23:38:18'!
PASSED!

!testRun: #PortfolioTest #test03CantAddDuplicateAccountsToPortfolio stamp: 'AM 11/6/2020 23:38:18'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/6/2020 23:38:37' prior: 50877348!
test01EmptyPortfolioHasZeroBalance

	self assert: (emptyPortfolio balance) equals: 0.! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/6/2020 23:39:26' prior: 50877482!
test02PortfolioMatchesAddedAccountBalance

	
	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	account register: (Deposit for: 100).
	portfolio add: account.
	
	self assert: (portfolio balance) equals: 100.! !

!methodRemoval: PortfolioTest #setUp stamp: 'AM 11/6/2020 23:39:46'!
setUp

	emptyPortfolio := Portfolio new.
	emptyAccount := ReceptiveAccount new.
	threeHundredDeposit := Deposit for: 300.
	oneFiftyWithdraw := Withdraw for: 150.!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'AM 11/6/2020 23:39:57'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/6/2020 23:19:23' prior: 50877582!
test01EmptyPortfolioHasZeroBalance

	
	| portfolio |
	portfolio := Portfolio new.
	
	self assert: (portfolio balance) equals: 0.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/6/2020 23:40:23'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioMatchesAddedAccountBalance stamp: 'AM 11/6/2020 23:40:23'!
PASSED!

!testRun: #PortfolioTest #test03CantAddDuplicateAccountsToPortfolio stamp: 'AM 11/6/2020 23:40:23'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/6/2020 23:41:50' prior: 50877503!
test03CantAddDuplicateAccountsToPortfolio

	
	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	
	self 
		should:[portfolio add: account]
		raise: Error
		withMessageText: Portfolio duplicateAccountErrorDescription.! !

!testRun: #PortfolioTest #test03CantAddDuplicateAccountsToPortfolio stamp: 'AM 11/6/2020 23:41:56'!
ERROR!
!Portfolio class methodsFor: 'error messages' stamp: 'AM 11/6/2020 23:42:19'!
duplicateAccountErrorDescription
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'error messages' stamp: 'AM 11/6/2020 23:46:48' prior: 50877650!
duplicateAccountErrorDescription
	
	^'The account or portfolio contains an element already present in structure'! !

!testRun: #PortfolioTest #test03CantAddDuplicateAccountsToPortfolio stamp: 'AM 11/6/2020 23:46:53'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'AM 11/6/2020 23:47:55' prior: 50877417!
add: aReceptiveAccount 
	
	self assertNotPresent: aReceptiveAccount.
	portfolioElements add: aReceptiveAccount.
	! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/6/2020 23:48:00'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioMatchesAddedAccountBalance stamp: 'AM 11/6/2020 23:48:00'!
ERROR!

!testRun: #PortfolioTest #test03CantAddDuplicateAccountsToPortfolio stamp: 'AM 11/6/2020 23:48:00'!
ERROR!

!testRun: #PortfolioTest #test03CantAddDuplicateAccountsToPortfolio stamp: 'AM 11/6/2020 23:48:08'!
ERROR!
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/6/2020 23:48:17'!
assertNotPresent: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/6/2020 23:49:27' prior: 50877685!
assertNotPresent: aReceptiveAccount 
	
	(portfolioElements includes: aReceptiveAccount) ifTrue: [self signalDuplicateAccount]! !
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/6/2020 23:49:30' prior: 50877690!
assertNotPresent: aReceptiveAccount 
	
	(portfolioElements includes: aReceptiveAccount) ifTrue: [self signalDuplicateAccount].! !

!testRun: #PortfolioTest #test03CantAddDuplicateAccountsToPortfolio stamp: 'AM 11/6/2020 23:49:33'!
FAILURE!
!Portfolio methodsFor: 'error raising' stamp: 'AM 11/6/2020 23:50:24'!
signalDuplicateAccount

	^self class duplicateAccountErrorDescription.! !
!Portfolio methodsFor: 'error raising' stamp: 'AM 11/6/2020 23:50:31' prior: 50877707!
signalDuplicateAccount

	^self error: self class duplicateAccountErrorDescription.! !

!testRun: #PortfolioTest #test03CantAddDuplicateAccountsToPortfolio stamp: 'AM 11/6/2020 23:50:36'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/6/2020 23:50:36'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioMatchesAddedAccountBalance stamp: 'AM 11/6/2020 23:50:36'!
PASSED!

!testRun: #PortfolioTest #test03CantAddDuplicateAccountsToPortfolio stamp: 'AM 11/6/2020 23:50:36'!
PASSED!
!Withdraw methodsFor: 'value' stamp: 'AM 11/6/2020 23:53:28' prior: 50875921 overrides: 50875849!
value

	^ value! !

!classRemoval: #ReceptiveAccount stamp: 'AM 11/6/2020 23:53:50'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'AM 11/6/2020 23:53:50'!
Object subclass: #Portfolio
	instanceVariableNames: 'portfolioElements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'AM 11/6/2020 23:53:51'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'AM 11/6/2020 23:53:51'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'AM 11/6/2020 23:53:51'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'AM 11/6/2020 23:53:52'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'AM 11/6/2020 23:53:52'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of C:\Users\Chara\Desktop\Facultad\Ingenieria 1\ISW1\18-Portfolio1\Portfolio-Ejercicio.st----!

Object subclass: #PortfolioElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioElement category: 'Portfolio-Ejercicio' stamp: 'AM 11/6/2020 23:55:56'!
Object subclass: #PortfolioElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioElement subclass: #Portfolio
	instanceVariableNames: 'accountsAndPortfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AM 11/6/2020 23:57:03'!
PortfolioElement subclass: #Portfolio
	instanceVariableNames: 'accountsAndPortfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioElement subclass: #PortfolioAccount
	instanceVariableNames: 'accountsAndPortfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioAccount category: 'Portfolio-Ejercicio' stamp: 'AM 11/6/2020 23:57:32'!
PortfolioElement subclass: #PortfolioAccount
	instanceVariableNames: 'accountsAndPortfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioElement subclass: #PortfolioAccount
	instanceVariableNames: 'receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioAccount category: 'Portfolio-Ejercicio' stamp: 'AM 11/6/2020 23:57:47'!
PortfolioElement subclass: #PortfolioAccount
	instanceVariableNames: 'receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioElement subclass: #Portfolio
	instanceVariableNames: 'portfolioElements parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AM 11/6/2020 23:58:04'!
PortfolioElement subclass: #Portfolio
	instanceVariableNames: 'portfolioElements parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioElement methodsFor: 'nil' stamp: 'AM 11/6/2020 23:58:25'!
balance

	! !
!PortfolioElement methodsFor: 'as yet unclassified' stamp: 'AM 11/6/2020 23:58:32' prior: 50878363!
balance

	self subclassResponsibility.! !

PortfolioElement subclass: #Portfolio
	instanceVariableNames: 'accountsAndPorfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AM 11/6/2020 23:59:46'!
PortfolioElement subclass: #Portfolio
	instanceVariableNames: 'accountsAndPorfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/6/2020 23:59:51'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/6/2020 23:59:51'!
PASSED!

PortfolioElement subclass: #Portfolio
	instanceVariableNames: 'accountsAndPortfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AM 11/7/2020 00:00:19'!
PortfolioElement subclass: #Portfolio
	instanceVariableNames: 'accountsAndPortfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/7/2020 00:00:26'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/7/2020 00:00:26'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioMatchesPortFolioBalance stamp: 'AM 11/7/2020 00:00:26'!
PASSED!

!testRun: #PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/7/2020 00:00:26'!
PASSED!

!testRun: #PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/7/2020 00:00:26'!
FAILURE!

!testRun: #PortfolioTest #test06CantAddAccountPresentInChildPortfolio stamp: 'AM 11/7/2020 00:00:26'!
FAILURE!

!testRun: #PortfolioTest #test07TransactionsReturnsAllAccountsInPortfolio stamp: 'AM 11/7/2020 00:00:26'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAccountPresentInChildPortfolio stamp: 'AM 11/7/2020 00:00:26'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'AM 11/7/2020 00:00:26'!
FAILURE!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AM 11/7/2020 00:10:55'!
PortfolioElement subclass: #Portfolio
	instanceVariableNames: 'portfolioElements parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 00:10:56' prior: 50878174!
hasRegistered: aTransaction
	
	| foundTransaction |
	foundTransaction := false.
	
	portfolioElements do: [
						:accountOrPortfolio | foundTransaction := foundTransaction or: [accountOrPortfolio  hasRegistered: aTransaction]
						].
	
	^foundTransaction.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 00:10:56' prior: 50878206!
transactions
	| transactionCollection |
	
	transactionCollection := OrderedCollection new.
	
	portfolioElements do: [:anAccountOrPortFolio | anAccountOrPortFolio addTransactionTo: transactionCollection].
	
	^transactionCollection.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 00:10:56' prior: 50878132 overrides: 16896425!
initialize 

	portfolioElements := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 00:10:56' prior: 50878138!
add: aReceptiveAccountOrPortfolio 
	
	self assertNotDuplicate: aReceptiveAccountOrPortfolio.
	aReceptiveAccountOrPortfolio addParent: self.
	portfolioElements add: aReceptiveAccountOrPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 00:10:56' prior: 50878125 overrides: 50878367!
balance
	
	^portfolioElements sum: [:anAccountOrPorfolio | anAccountOrPorfolio balance] ifEmpty: [0].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 00:10:56' prior: 50878190!
accounts

	| accounts |
	
	accounts := OrderedCollection new.
	
	portfolioElements do: [:accountOrPortfolio | accountOrPortfolio addAccountTo: accounts].
	
	^accounts.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 00:10:56' prior: 50878198!
addTransactionTo: transactionCollection
	
	portfolioElements do: [:anAccountOrPortFolio | anAccountOrPortFolio addTransactionTo: transactionCollection].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 00:10:56' prior: 50878147!
addAccountTo: anAccountCollection
	
	portfolioElements do: [:accountOrPortfolio | accountOrPortfolio addAccountTo: anAccountCollection].! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AM 11/7/2020 00:11:19'!
PortfolioElement subclass: #Portfolio
	instanceVariableNames: 'portfolioElements parentPortolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 00:11:19' prior: 50878158!
assertNotDuplicate: anAccountOrPortfolio
	
	| accountsInHierachy |
	accountsInHierachy := OrderedCollection new.
	
	parentPortolios do: [:parent | accountsInHierachy add: ((parent searchParents) accounts)].
	
	(anAccountOrPortfolio accounts) detect: [:anAccount | accountsInHierachy includes: anAccount] ifNone: [^false].
	self signalDuplicateAccount.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 00:11:19' prior: 50878467 overrides: 16896425!
initialize 

	portfolioElements := OrderedCollection new.
	parentPortolios := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 00:11:19' prior: 50878154!
addParent: aPortfolio

	parentPortolios add: aPortfolio.! !

!methodRemoval: PortfolioTest #test09 stamp: 'AM 11/7/2020 00:11:53'!
test09

	| portfolioChild portfolioParent account|
	
	account := ReceptiveAccount new.
	account register: (Deposit for: 300).
	
	portfolioChild := Portfolio new.
	
	portfolioParent := Portfolio new.
	portfolioParent add: portfolioChild.
	portfolioParent add: account.
	
	self
	should: [portfolioChild add: account]
	raise: Error
	withMessageText: Portfolio duplicateAccountErrorDescription.!

PortfolioElement subclass: #NullPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #NullPortfolio category: 'Portfolio-Ejercicio' stamp: 'AM 11/7/2020 00:14:29'!
PortfolioElement subclass: #NullPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioElement subclass: #NullPortfolio
	instanceVariableNames: 'childPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #NullPortfolio category: 'Portfolio-Ejercicio' stamp: 'AM 11/7/2020 00:15:12'!
PortfolioElement subclass: #NullPortfolio
	instanceVariableNames: 'childPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/7/2020 00:15:57' prior: 50878523!
assertNotDuplicate: anAccountOrPortfolio
	
	! !

!methodRemoval: Portfolio #searchParents stamp: 'AM 11/7/2020 00:16:39'!
searchParents

	parents !
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/7/2020 00:25:54' prior: 50878590!
assertNotDuplicate: anAccountOrPortfolio
	
	parentPortolios do: [:parentPortfolio | parentPortfolio assertNotDuplicate: anAccountOrPortfolio].! !
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/7/2020 00:26:29'!
assertNotDuplicated: anAccountOrPortfolio
	
	parentPortolios do: [:parentPortfolio | parentPortfolio assertNotDuplicate: anAccountOrPortfolio].! !
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/7/2020 00:26:31' prior: 50878598!
assertNotDuplicate: anAccountOrPortfolio
	
	parentPortolios do: [:parentPortfolio | parentPortfolio assertNotDuplicate: anAccountOrPortfolio].! !

!methodRemoval: Portfolio #assertNotDuplicated: stamp: 'AM 11/7/2020 00:26:34'!
assertNotDuplicated: anAccountOrPortfolio
	
	parentPortolios do: [:parentPortfolio | parentPortfolio assertNotDuplicate: anAccountOrPortfolio].!
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/7/2020 00:27:07'!
assertNotPresentInHierarchy: anAccountOrPortfolio
	
	parentPortolios do: [:parentPortfolio | parentPortfolio assertNotDuplicate: anAccountOrPortfolio].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 00:27:07' prior: 50878473!
add: aReceptiveAccountOrPortfolio 
	
	self assertNotPresentInHierarchy: aReceptiveAccountOrPortfolio.
	aReceptiveAccountOrPortfolio addParent: self.
	portfolioElements add: aReceptiveAccountOrPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 00:27:07' prior: 50878613!
assertNotDuplicate: anAccountOrPortfolio
	
	parentPortolios do: [:parentPortfolio | parentPortfolio assertNotPresentInHierarchy: anAccountOrPortfolio].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 00:27:07' prior: 50878627!
assertNotPresentInHierarchy: anAccountOrPortfolio
	
	parentPortolios do: [:parentPortfolio | parentPortfolio assertNotPresentInHierarchy: anAccountOrPortfolio].! !

!methodRemoval: Portfolio #assertNotDuplicate: stamp: 'AM 11/7/2020 00:27:07'!
assertNotDuplicate: anAccountOrPortfolio
	
	parentPortolios do: [:parentPortfolio | parentPortfolio assertNotPresentInHierarchy: anAccountOrPortfolio].!
!NullPortfolio methodsFor: 'nil' stamp: 'AM 11/7/2020 00:27:37'!
assertNotPresentInHierarchy

	! !
!Portfolio methodsFor: 'adding' stamp: 'AM 11/7/2020 00:29:10' prior: 50878635!
add: aPortfolioElement 
	
	self assertNotPresentInHierarchy: aPortfolioElement.
	aPortfolioElement addParent: self.
	portfolioElements add: aPortfolioElement.! !
!PortfolioAccount methodsFor: 'nil' stamp: 'AM 11/7/2020 00:30:31'!
addParent: aPortfolio

! !
!NullPortfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 00:31:52'!
assertNotPresentInHierarchy: aPortfolioElement

	! !
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/7/2020 00:32:14' prior: 50878653!
assertNotPresentInHierarchy: aPortfolioElement
	
	parentPortolios do: [:parentPortfolio | parentPortfolio assertNotPresentInHierarchy: aPortfolioElement].! !

!methodRemoval: NullPortfolio #assertNotPresentInHierarchy stamp: 'AM 11/7/2020 00:32:19'!
assertNotPresentInHierarchy

	!
!NullPortfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 00:34:21' prior: 50878684!
assertNotPresentInHierarchy: aPortfolioElement

	childPortfolio assertNoDuplicates: aPortfolioElement.! !
!NullPortfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 00:35:01'!
assertNoDuplicatesInHierarchy: aPortfolioElement

	childPortfolio assertNoDuplicates: aPortfolioElement.! !

!methodRemoval: NullPortfolio #assertNotPresentInHierarchy: stamp: 'AM 11/7/2020 00:35:01'!
assertNotPresentInHierarchy: aPortfolioElement

	childPortfolio assertNoDuplicates: aPortfolioElement.!
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/7/2020 00:35:39'!
assertNoDuplicatesInHierarchy: aPortfolioElement
	
	parentPortolios do: [:parentPortfolio | parentPortfolio assertNotPresentInHierarchy: aPortfolioElement].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 00:35:39' prior: 50878689!
assertNotPresentInHierarchy: aPortfolioElement
	
	parentPortolios do: [:parentPortfolio | parentPortfolio assertNoDuplicatesInHierarchy: aPortfolioElement].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 00:35:39' prior: 50878672!
add: aPortfolioElement 
	
	self assertNoDuplicatesInHierarchy: aPortfolioElement.
	aPortfolioElement addParent: self.
	portfolioElements add: aPortfolioElement.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 00:35:39' prior: 50878719!
assertNoDuplicatesInHierarchy: aPortfolioElement
	
	parentPortolios do: [:parentPortfolio | parentPortfolio assertNoDuplicatesInHierarchy: aPortfolioElement].! !

!methodRemoval: Portfolio #assertNotPresentInHierarchy: stamp: 'AM 11/7/2020 00:35:39'!
assertNotPresentInHierarchy: aPortfolioElement
	
	parentPortolios do: [:parentPortfolio | parentPortfolio assertNoDuplicatesInHierarchy: aPortfolioElement].!
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/7/2020 00:36:30'!
assertNoDuplicate: aPortfolioElement

	! !
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/7/2020 00:36:53'!
assertNoDuplicates: aPortfolioElement

	! !

!methodRemoval: Portfolio #assertNoDuplicate: stamp: 'AM 11/7/2020 00:36:53'!
assertNoDuplicate: aPortfolioElement

	!
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/7/2020 00:41:35' prior: 50878763!
assertNoDuplicates: aPortfolioElement

	portfolioElements detect: [:element | element assertNoDuplicates: aPortfolioElement].! !
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/7/2020 00:42:29' prior: 50878771!
assertNoDuplicates: aPortfolioElement

	portfolioElements detect: [:element | element assertNoDuplicates: aPortfolioElement] ifNone: [^false].! !
!Portfolio methodsFor: 'assertions' stamp: 'AM 11/7/2020 00:42:42' prior: 50878778!
assertNoDuplicates: aPortfolioElement

	portfolioElements detect: [:element | element assertNoDuplicates: aPortfolioElement] ifNone: [^false].
	self signalDuplicateAccount.! !
!PortfolioAccount methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 00:44:47'!
assertNoDuplicates: aPortfolioElement

	! !
!PortfolioAccount methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 00:46:49' prior: 50878795!
assertNoDuplicates: aPortfolioElement

	! !
!PortfolioAccount methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 00:50:00' prior: 50878800!
assertNoDuplicates: aPortfolioElement

	^aPortfolioElement includesOrIsAccount: self.! !

----SNAPSHOT----(7 November 2020 00:51:30) CuisUniversity-4383.image priorSource: 17365307!
!Portfolio methodsFor: 'testing' stamp: 'AM 11/7/2020 00:54:15'!
includesOrIsAccount

	portfolioElements do: [:element | element includesOrIsAccount]! !
!Portfolio methodsFor: 'testing' stamp: 'AM 11/7/2020 00:54:40'!
includesOrIsAccount: aPortfolioAccount

	portfolioElements do: [:element | element includesOrIsAccount: aPortfolioAccount ]! !
!Portfolio methodsFor: 'testing' stamp: 'AM 11/7/2020 00:54:46' prior: 50878818!
includesOrIsAccount: aPortfolioAccount

	portfolioElements do: [:element | element includesOrIsAccount: aPortfolioAccount]! !

!methodRemoval: Portfolio #includesOrIsAccount stamp: 'AM 11/7/2020 00:54:49'!
includesOrIsAccount

	portfolioElements do: [:element | element includesOrIsAccount]!
!Portfolio methodsFor: 'testing' stamp: 'AM 11/7/2020 00:55:05' prior: 50878825!
includesOrIsAccount: aPortfolioAccount

	portfolioElements do: [:element | element includesOrIsAccount: aPortfolioAccount].
	! !
!Portfolio methodsFor: 'testing' stamp: 'AM 11/7/2020 00:55:10' prior: 50878837!
includesOrIsAccount: aPortfolioAccount

	portfolioElements do: [:element | element includesOrIsAccount: aPortfolioAccount].
	^false.! !
!PortfolioAccount methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 00:56:02'!
includesOrIsAccount: aPortfolioAccount

	! !
!PortfolioAccount methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 00:59:24' prior: 50878851!
includesOrIsAccount: aPortfolioAccount

	
	^self == aPortfolioAccount.! !
!Portfolio methodsFor: 'initialization' stamp: 'AM 11/7/2020 01:00:53' prior: 50878538 overrides: 16896425!
initialize 

	portfolioElements := OrderedCollection new.
	parentPortolios := NullPortfolio for: self.! !
!NullPortfolio class methodsFor: 'nil' stamp: 'AM 11/7/2020 01:01:29'!
for: aPortfolio

	! !
!NullPortfolio class methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 01:02:18' prior: 50878868!
for: aPortfolio
	
	^NullPortfolio initializeFor: aPortfolio.
	! !
!NullPortfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 01:02:41'!
initializeFor: aPortfolio

	childPortfolio := aPortfolio.! !
!Portfolio methodsFor: 'adding' stamp: 'AM 11/7/2020 01:03:45' prior: 50878545!
addParent: aPortfolio
	
	
	parentPortolios add: aPortfolio.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AM 11/7/2020 01:04:02'!
PortfolioElement subclass: #Portfolio
	instanceVariableNames: 'portfolioElements parentPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 01:04:02' prior: 50878744!
assertNoDuplicatesInHierarchy: aPortfolioElement
	
	parentPortfolios do: [:parentPortfolio | parentPortfolio assertNoDuplicatesInHierarchy: aPortfolioElement].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 01:04:02' prior: 50878862 overrides: 16896425!
initialize 

	portfolioElements := OrderedCollection new.
	parentPortfolios := NullPortfolio for: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 01:04:02' prior: 50878882!
addParent: aPortfolio
	
	
	parentPortfolios add: aPortfolio.! !
!Portfolio methodsFor: 'adding' stamp: 'AM 11/7/2020 01:06:55' prior: 50878912!
addParent: aPortfolio
	
	parentPortfolios add: aPortfolio.! !
!Portfolio methodsFor: 'initialization' stamp: 'AM 11/7/2020 01:09:37' prior: 50878905 overrides: 16896425!
initialize 

	portfolioElements := OrderedCollection new.
	parentPortfolios := OrderedCollection with: (NullPortfolio for: self).! !
!Portfolio methodsFor: 'adding' stamp: 'AM 11/7/2020 01:14:14' prior: 50878917!
addParent: aPortfolio
	
	(parentPortfolios at: 1) class = NullPortfolio.
	parentPortfolios add: aPortfolio.! !
!NullPortfolio methodsFor: 'assertions' stamp: 'AM 11/7/2020 01:15:12'!
assertNoDuplicates: aPortfolioElement

	^false.! !
!Portfolio methodsFor: 'adding' stamp: 'AM 11/7/2020 01:17:58' prior: 50878930!
addParent: aPortfolio
	
	
	parentPortfolios add: aPortfolio.! !

PortfolioElement subclass: #Portfolio
	instanceVariableNames: 'portfolioElements parentPortfolios isRoot'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AM 11/7/2020 01:18:07'!
PortfolioElement subclass: #Portfolio
	instanceVariableNames: 'portfolioElements parentPortfolios isRoot'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialization' stamp: 'AM 11/7/2020 01:18:31' prior: 50878923 overrides: 16896425!
initialize 

	portfolioElements := OrderedCollection new.
	parentPortfolios := OrderedCollection with: (NullPortfolio for: self).
	isRoot := true.! !
!Portfolio methodsFor: 'adding' stamp: 'AM 11/7/2020 01:19:21' prior: 50878941!
addParent: aPortfolio
	
	isRoot ifTrue: [parentPortfolios removeFirst].
	parentPortfolios add: aPortfolio.! !
!Portfolio methodsFor: 'adding' stamp: 'AM 11/7/2020 01:19:43' prior: 50878969!
addParent: aPortfolio
	
	isRoot ifTrue: [parentPortfolios removeFirst.
				isRoot := false].
	parentPortfolios add: aPortfolio.! !
!PortfolioAccount class methodsFor: 'nil' stamp: 'AM 11/7/2020 01:22:08'!
for: anAccount
	
	^self new initializeFor: anAccount.! !
!PortfolioAccount methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 01:23:07'!
initializeFor: anAccount

	receptiveAccount := anAccount.! !

----SNAPSHOT----(7 November 2020 01:23:36) CuisUniversity-4383.image priorSource: 17509112!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/7/2020 01:23:57'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/7/2020 01:23:57'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioMatchesPortFolioBalance stamp: 'AM 11/7/2020 01:23:57'!
ERROR!

!testRun: #PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/7/2020 01:23:57'!
ERROR!

!testRun: #PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/7/2020 01:23:57'!
ERROR!

!testRun: #PortfolioTest #test06CantAddAccountPresentInChildPortfolio stamp: 'AM 11/7/2020 01:23:57'!
ERROR!

!testRun: #PortfolioTest #test07TransactionsReturnsAllAccountsInPortfolio stamp: 'AM 11/7/2020 01:23:57'!
ERROR!

!testRun: #PortfolioTest #test08CantAddAccountPresentInChildPortfolio stamp: 'AM 11/7/2020 01:23:57'!
ERROR!
!PortfolioAccount methodsFor: 'accesing' stamp: 'AM 11/7/2020 01:25:03' overrides: 50878367!
balance 

	^receptiveAccount balance.! !
!Portfolio methodsFor: 'balance' stamp: 'AM 11/7/2020 01:25:26' prior: 50878483 overrides: 50878367!
balance
	
	^portfolioElements sum: [:element | element balance] ifEmpty: [0].! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/7/2020 01:25:37'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/7/2020 01:25:37'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioMatchesPortFolioBalance stamp: 'AM 11/7/2020 01:25:37'!
ERROR!

!testRun: #PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/7/2020 01:25:37'!
ERROR!

!testRun: #PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/7/2020 01:25:37'!
ERROR!

!testRun: #PortfolioTest #test06CantAddAccountPresentInChildPortfolio stamp: 'AM 11/7/2020 01:25:37'!
ERROR!

!testRun: #PortfolioTest #test07TransactionsReturnsAllAccountsInPortfolio stamp: 'AM 11/7/2020 01:25:37'!
ERROR!

!testRun: #PortfolioTest #test08CantAddAccountPresentInChildPortfolio stamp: 'AM 11/7/2020 01:25:37'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/7/2020 01:25:43'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/7/2020 01:26:14'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/7/2020 01:26:20'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/7/2020 01:26:20'!
ERROR!
!NullPortfolio class methodsFor: 'as yet unclassified' stamp: 'AM 11/7/2020 01:26:45' prior: 50878872!
for: aPortfolio
	
	^self new initializeFor: aPortfolio.
	! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/7/2020 01:26:51'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/7/2020 01:26:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioMatchesPortFolioBalance stamp: 'AM 11/7/2020 01:26:51'!
PASSED!

!testRun: #PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/7/2020 01:26:51'!
PASSED!

!testRun: #PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/7/2020 01:26:51'!
FAILURE!

!testRun: #PortfolioTest #test06CantAddAccountPresentInChildPortfolio stamp: 'AM 11/7/2020 01:26:51'!
FAILURE!

!testRun: #PortfolioTest #test07TransactionsReturnsAllAccountsInPortfolio stamp: 'AM 11/7/2020 01:26:51'!
PASSED!

!testRun: #PortfolioTest #test08CantAddAccountPresentInChildPortfolio stamp: 'AM 11/7/2020 01:26:51'!
FAILURE!

!testRun: #PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/7/2020 01:26:55'!
FAILURE!

!methodRemoval: ReceptiveAccount #accounts stamp: 'AM 11/7/2020 01:27:56'!
accounts

 	^OrderedCollection with: self.!

!methodRemoval: ReceptiveAccount #addAccountTo: stamp: 'AM 11/7/2020 01:28:11'!
addAccountTo: anAccountCollection

	anAccountCollection add: self.!

!methodRemoval: ReceptiveAccount #addParent: stamp: 'AM 11/7/2020 01:28:16'!
addParent: aPortfolio

	!

!methodRemoval: ReceptiveAccount #addTransactionTo: stamp: 'AM 11/7/2020 01:28:22'!
addTransactionTo: transactionsCollection

	transactionsCollection add: self transactions.!

!methodRemoval: ReceptiveAccount #assertNotDuplicate: stamp: 'AM 11/7/2020 01:28:25'!
assertNotDuplicate: aReceptiveAccount

	^(self = aReceptiveAccount).!
!ReceptiveAccount methodsFor: 'balance' stamp: 'AM 11/7/2020 01:29:04' prior: 50878267!
balance

	| balance |
	balance := 0.
	transactions do: [:aTransaction | balance := aTransaction applyToBalance: balance].
	
	^balance.
	! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/7/2020 01:29:12'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/7/2020 01:29:12'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioMatchesPortFolioBalance stamp: 'AM 11/7/2020 01:29:12'!
ERROR!

!testRun: #PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/7/2020 01:29:12'!
ERROR!

!testRun: #PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/7/2020 01:29:12'!
ERROR!

!testRun: #PortfolioTest #test06CantAddAccountPresentInChildPortfolio stamp: 'AM 11/7/2020 01:29:12'!
ERROR!

!testRun: #PortfolioTest #test07TransactionsReturnsAllAccountsInPortfolio stamp: 'AM 11/7/2020 01:29:12'!
ERROR!

!testRun: #PortfolioTest #test08CantAddAccountPresentInChildPortfolio stamp: 'AM 11/7/2020 01:29:12'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/7/2020 01:29:43' prior: 50877801!
test02PortfolioWithOneAccountMatchesAccountBalance

	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	account register: (Deposit for: 300).
	
	portfolio add: (PortfolioAccount for: account).
	
	self assert: (account balance) equals: (portfolio balance).! !

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/7/2020 01:29:46'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/7/2020 01:29:46'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/7/2020 01:29:46'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioMatchesPortFolioBalance stamp: 'AM 11/7/2020 01:29:46'!
ERROR!

!testRun: #PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/7/2020 01:29:46'!
ERROR!

!testRun: #PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/7/2020 01:29:46'!
ERROR!

!testRun: #PortfolioTest #test06CantAddAccountPresentInChildPortfolio stamp: 'AM 11/7/2020 01:29:46'!
ERROR!

!testRun: #PortfolioTest #test07TransactionsReturnsAllAccountsInPortfolio stamp: 'AM 11/7/2020 01:29:46'!
ERROR!

!testRun: #PortfolioTest #test08CantAddAccountPresentInChildPortfolio stamp: 'AM 11/7/2020 01:29:46'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/7/2020 01:29:50'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/7/2020 01:30:12' prior: 50877812!
test03PortfolioWithOnePortfolioMatchesPortFolioBalance

	| portfolioChild portfolioParent account |
	
	portfolioChild := Portfolio new.
	account := ReceptiveAccount new.
	account register: (Deposit for: 300).
	portfolioChild add: (PortfolioAccount for: account).
	
	portfolioParent := Portfolio new.
	
	portfolioParent add: portfolioChild.
	
	self assert: (portfolioChild balance) equals: (portfolioParent balance).! !
!PortfolioAccount methodsFor: 'transactions' stamp: 'AM 11/7/2020 01:31:50'!
register: aTransaction

	receptiveAccount register: aTransaction.! !
!PortfolioAccount methodsFor: 'transactions' stamp: 'AM 11/7/2020 01:32:19'!
transactions

	^receptiveAccount transactions.! !
!PortfolioAccount methodsFor: 'testing' stamp: 'AM 11/7/2020 01:32:47'!
hasRegistered: aTransaction

	^receptiveAccount hasRegistered: aTransaction.! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/7/2020 01:34:24' prior: 50879166!
test02PortfolioWithOneAccountMatchesAccountBalance

	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := PortfolioAccount for: (ReceptiveAccount new).
	account register: (Deposit for: 300).
	
	portfolio add: account.
	
	self assert: (account balance) equals: (portfolio balance).! !

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/7/2020 01:34:27'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/7/2020 01:35:08' prior: 50879213!
test03PortfolioWithOnePortfolioMatchesPortFolioBalance

	| portfolioChild portfolioParent account |
	
	account := PortfolioAccount for: (ReceptiveAccount new).
	account register: (Deposit for: 300).
	portfolioChild := Portfolio new.
	portfolioChild add: account.
	
	portfolioParent := Portfolio new.
	
	portfolioParent add: portfolioChild.
	
	self assert: (portfolioChild balance) equals: (portfolioParent balance).! !

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioMatchesPortFolioBalance stamp: 'AM 11/7/2020 01:35:11'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/7/2020 01:35:50' prior: 50877827!
test04FindsTransactionCorrectly

	| portfolio account transaction|
	
	portfolio := Portfolio new.
	transaction := (Deposit for: 300).
	account := PortfolioAccount for: (ReceptiveAccount new).
	account register: transaction.
	
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: transaction).! !
!Portfolio methodsFor: 'testing' stamp: 'AM 11/7/2020 01:38:03' prior: 50878444!
hasRegistered: aTransaction
	
	portfolioElements detect: [:element | element hasRegistered: aTransaction] ifNone: [^false].
	^true.! !

!testRun: #PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/7/2020 01:38:20'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/7/2020 01:38:32'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/7/2020 01:38:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioMatchesPortFolioBalance stamp: 'AM 11/7/2020 01:38:32'!
PASSED!

!testRun: #PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/7/2020 01:38:33'!
PASSED!

!testRun: #PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/7/2020 01:38:33'!
ERROR!

!testRun: #PortfolioTest #test06CantAddAccountPresentInChildPortfolio stamp: 'AM 11/7/2020 01:38:33'!
ERROR!

!testRun: #PortfolioTest #test07TransactionsReturnsAllAccountsInPortfolio stamp: 'AM 11/7/2020 01:38:33'!
ERROR!

!testRun: #PortfolioTest #test08CantAddAccountPresentInChildPortfolio stamp: 'AM 11/7/2020 01:38:33'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/7/2020 01:38:58' prior: 50877839!
test05CantRegisterDuplicateAccounts

	| portfolio account |
	
	portfolio := Portfolio new.
	account := PortfolioAccount for: (ReceptiveAccount new).
	account register: (Deposit for: 300).
	
	portfolio add: account.
	
	self
	should: [portfolio add: account.]
	raise: Error
	withMessageText: Portfolio duplicateAccountErrorDescription.! !

!testRun: #PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/7/2020 01:39:01'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/7/2020 01:39:12' prior: 50877851!
test06CantAddAccountPresentInChildPortfolio

	| portfolioChild portfolioParent account|
	
	account := PortfolioAccount for: (ReceptiveAccount new).
	account register: (Deposit for: 300).
	
	portfolioChild := Portfolio new.
	portfolioChild add: account.
	
	portfolioParent := Portfolio new.
	portfolioParent add: portfolioChild.
	
	self
	should: [portfolioParent add: account.]
	raise: Error
	withMessageText: Portfolio duplicateAccountErrorDescription.! !

!testRun: #PortfolioTest #test06CantAddAccountPresentInChildPortfolio stamp: 'AM 11/7/2020 01:39:16'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/7/2020 01:39:31' prior: 50877867!
test07TransactionsReturnsAllAccountsInPortfolio

	| portfolio account accountTransactions transactions |
	
	account := PortfolioAccount for: (ReceptiveAccount new).
	accountTransactions := OrderedCollection with: (Deposit for: 300) with: (Withdraw for: 150).
	account register: (accountTransactions at: 1); register: (accountTransactions at: 2).
	
	transactions := OrderedCollection with: accountTransactions.
	
	portfolio := Portfolio new.
	portfolio add: account.
	
	self assert: transactions equals: portfolio transactions.! !

!testRun: #PortfolioTest #test07TransactionsReturnsAllAccountsInPortfolio stamp: 'AM 11/7/2020 01:39:37'!
ERROR!

!testRun: #PortfolioTest #test07TransactionsReturnsAllAccountsInPortfolio stamp: 'AM 11/7/2020 01:39:37'!
ERROR!

!methodRemoval: Portfolio #addAccountTo: stamp: 'AM 11/7/2020 01:40:03'!
addAccountTo: anAccountCollection
	
	portfolioElements do: [:accountOrPortfolio | accountOrPortfolio addAccountTo: anAccountCollection].!

!methodRemoval: Portfolio #addTransactionTo: stamp: 'AM 11/7/2020 01:40:20'!
addTransactionTo: transactionCollection
	
	portfolioElements do: [:anAccountOrPortFolio | anAccountOrPortFolio addTransactionTo: transactionCollection].!

!methodRemoval: Portfolio #transactions stamp: 'AM 11/7/2020 01:40:31'!
transactions
	| transactionCollection |
	
	transactionCollection := OrderedCollection new.
	
	portfolioElements do: [:anAccountOrPortFolio | anAccountOrPortFolio addTransactionTo: transactionCollection].
	
	^transactionCollection.!

!methodRemoval: Portfolio #accounts stamp: 'AM 11/7/2020 01:40:36'!
accounts

	| accounts |
	
	accounts := OrderedCollection new.
	
	portfolioElements do: [:accountOrPortfolio | accountOrPortfolio addAccountTo: accounts].
	
	^accounts.!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/7/2020 01:41:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/7/2020 01:41:15'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioMatchesPortFolioBalance stamp: 'AM 11/7/2020 01:41:15'!
PASSED!

!testRun: #PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/7/2020 01:41:15'!
PASSED!

!testRun: #PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/7/2020 01:41:15'!
PASSED!

!testRun: #PortfolioTest #test06CantAddAccountPresentInChildPortfolio stamp: 'AM 11/7/2020 01:41:15'!
PASSED!

!testRun: #PortfolioTest #test07TransactionsReturnsAllAccountsInPortfolio stamp: 'AM 11/7/2020 01:41:15'!
ERROR!

!testRun: #PortfolioTest #test08CantAddAccountPresentInChildPortfolio stamp: 'AM 11/7/2020 01:41:15'!
ERROR!

!methodRemoval: PortfolioTest #test07TransactionsReturnsAllAccountsInPortfolio stamp: 'AM 11/7/2020 01:41:22'!
test07TransactionsReturnsAllAccountsInPortfolio

	| portfolio account accountTransactions transactions |
	
	account := PortfolioAccount for: (ReceptiveAccount new).
	accountTransactions := OrderedCollection with: (Deposit for: 300) with: (Withdraw for: 150).
	account register: (accountTransactions at: 1); register: (accountTransactions at: 2).
	
	transactions := OrderedCollection with: accountTransactions.
	
	portfolio := Portfolio new.
	portfolio add: account.
	
	self assert: transactions equals: portfolio transactions.!

!methodRemoval: PortfolioTest #test08CantAddAccountPresentInChildPortfolio stamp: 'AM 11/7/2020 01:41:45'!
test08CantAddAccountPresentInChildPortfolio

	| portfolioChild portfolioParent portfolioToAdd account|
	
	account := ReceptiveAccount new.
	account register: (Deposit for: 300).
	
	portfolioChild := Portfolio new.
	portfolioChild add: account.
	
	portfolioParent := Portfolio new.
	portfolioParent add: portfolioChild.
	
	portfolioToAdd:= Portfolio new.
	portfolioToAdd add: account.
	
	self
	should: [portfolioParent add: portfolioToAdd ]
	raise: Error
	withMessageText: Portfolio duplicateAccountErrorDescription.!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/7/2020 01:44:25'!
test07CantAddPortfolioContainingAccountAlreadyPresent

	| portfolioChild portfolioParent account|
	
	account := PortfolioAccount for: (ReceptiveAccount new).
	account register: (Deposit for: 300).
	
	portfolioChild := Portfolio new.
	portfolioChild add: account.
	
	portfolioParent := Portfolio new.
	portfolioParent add: portfolioChild.
	
	self
	should: [portfolioParent add: account.]
	raise: Error
	withMessageText: Portfolio duplicateAccountErrorDescription.! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/7/2020 01:46:04' prior: 50879493!
test07CantAddPortfolioContainingAccountAlreadyPresent

	| portfolio portfolioToAdd account|
	
	account := PortfolioAccount for: (ReceptiveAccount new).
	account register: (Deposit for: 300).
	
	portfolio := Portfolio new.
	portfolio add: account.
	
	portfolioToAdd := Portfolio new.
	portfolioToAdd add: account.
	
	self
	should: [portfolio add: portfolioToAdd.]
	raise: Error
	withMessageText: Portfolio duplicateAccountErrorDescription.! !

!testRun: #PortfolioTest #test07CantAddPortfolioContainingAccountAlreadyPresent stamp: 'AM 11/7/2020 01:46:07'!
FAILURE!

!testRun: #PortfolioTest #test07CantAddPortfolioContainingAccountAlreadyPresent stamp: 'AM 11/7/2020 01:46:07'!
FAILURE!

self == aPortfolioAccount!
!Portfolio methodsFor: 'testing' stamp: 'AM 11/7/2020 01:50:01' prior: 50878844!
includesOrIsAccount: aPortfolioAccount

	portfolioElements detect: [:element | element includesOrIsAccount: aPortfolioAccount] ifNone: [^false].
	^true.! !

!testRun: #PortfolioTest #test07CantAddPortfolioContainingAccountAlreadyPresent stamp: 'AM 11/7/2020 01:50:05'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/7/2020 01:50:09'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/7/2020 01:50:09'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioMatchesPortFolioBalance stamp: 'AM 11/7/2020 01:50:09'!
PASSED!

!testRun: #PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/7/2020 01:50:09'!
PASSED!

!testRun: #PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/7/2020 01:50:09'!
PASSED!

!testRun: #PortfolioTest #test06CantAddAccountPresentInChildPortfolio stamp: 'AM 11/7/2020 01:50:09'!
PASSED!

!testRun: #PortfolioTest #test07CantAddPortfolioContainingAccountAlreadyPresent stamp: 'AM 11/7/2020 01:50:09'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/7/2020 01:52:33'!
test08CantAddPortfolioThatSharesAccountsWithPortfolioAlreadyPresent

	| portfolio portfolioChild portfolioToAdd account|
	
	account := PortfolioAccount for: (ReceptiveAccount new).
	account register: (Deposit for: 300).
	
	portfolioChild := Portfolio new.
	portfolioChild add: account.
	
	portfolio := Portfolio new.
	portfolio add: portfolioChild.
	
	portfolioToAdd := Portfolio new.
	portfolioToAdd add: account.
	
	self
	should: [portfolio add: portfolioToAdd.]
	raise: Error
	withMessageText: Portfolio duplicateAccountErrorDescription.! !

!testRun: #PortfolioTest #test08CantAddPortfolioThatSharesAccountsWithPortfolioAlreadyPresent stamp: 'AM 11/7/2020 01:52:36'!
PASSED!

----SNAPSHOT----(7 November 2020 01:52:51) CuisUniversity-4383.image priorSource: 17514908!

----QUIT----(7 November 2020 01:53:22) CuisUniversity-4383.image priorSource: 17534214!

----STARTUP---- (9 November 2020 11:26:30) as C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CUIS\CuisUniversity-4383.image!


!classRenamed: #NullPortfolio as: #RootPortfolio stamp: 'AM 11/9/2020 11:28:10'!
Smalltalk renameClassNamed: #NullPortfolio as: #RootPortfolio!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/9/2020 11:28:10' prior: 50878961 overrides: 16896425!
initialize 

	portfolioElements := OrderedCollection new.
	parentPortfolios := OrderedCollection with: (RootPortfolio for: self).
	isRoot := true.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/9/2020 11:33:58'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/9/2020 11:33:58'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioMatchesPortFolioBalance stamp: 'AM 11/9/2020 11:33:58'!
PASSED!

!testRun: #PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/9/2020 11:33:58'!
PASSED!

!testRun: #PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/9/2020 11:33:58'!
PASSED!

!testRun: #PortfolioTest #test06CantAddAccountPresentInChildPortfolio stamp: 'AM 11/9/2020 11:33:58'!
PASSED!

!testRun: #PortfolioTest #test07CantAddPortfolioContainingAccountAlreadyPresent stamp: 'AM 11/9/2020 11:33:58'!
PASSED!

!testRun: #PortfolioTest #test08CantAddPortfolioThatSharesAccountsWithPortfolioAlreadyPresent stamp: 'AM 11/9/2020 11:33:58'!
PASSED!
!PortfolioAccount methodsFor: 'initialization' stamp: 'AM 11/9/2020 12:24:11' prior: 50878987!
initializeFor: aReceptiveAccount

	receptiveAccount := aReceptiveAccount.! !
!PortfolioAccount methodsFor: 'adding' stamp: 'AM 11/9/2020 12:25:39' prior: 50878680!
addParent: aPortfolio

	"No es necesario registrar a que portfolio pertenece la cuenta"! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/9/2020 13:45:32'!
test09emptyPortfolioHasNoTransactions

	| portfolio |
	portfolio := Portfolio new.
	self assert: (portfolio transactions) equals: OrderedCollection new.! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/9/2020 13:45:39' prior: 50879658!
test09emptyPortfolioHasNoTransactions

	| portfolio |
	
	portfolio := Portfolio new.
	self assert: (portfolio transactions) equals: OrderedCollection new.! !

!testRun: #PortfolioTest #test09emptyPortfolioHasNoTransactions stamp: 'AM 11/9/2020 13:45:44'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'AM 11/9/2020 13:46:00'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accessing' stamp: 'AM 11/9/2020 13:46:10' prior: 50879677!
transactions
	
	^OrderedCollection new.! !

!testRun: #PortfolioTest #test09emptyPortfolioHasNoTransactions stamp: 'AM 11/9/2020 13:46:11'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/9/2020 13:46:11'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/9/2020 13:46:11'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioMatchesPortFolioBalance stamp: 'AM 11/9/2020 13:46:11'!
PASSED!

!testRun: #PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/9/2020 13:46:11'!
PASSED!

!testRun: #PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/9/2020 13:46:11'!
PASSED!

!testRun: #PortfolioTest #test06CantAddAccountPresentInChildPortfolio stamp: 'AM 11/9/2020 13:46:11'!
PASSED!

!testRun: #PortfolioTest #test07CantAddPortfolioContainingAccountAlreadyPresent stamp: 'AM 11/9/2020 13:46:11'!
PASSED!

!testRun: #PortfolioTest #test08CantAddPortfolioThatSharesAccountsWithPortfolioAlreadyPresent stamp: 'AM 11/9/2020 13:46:11'!
PASSED!

!testRun: #PortfolioTest #test09emptyPortfolioHasNoTransactions stamp: 'AM 11/9/2020 13:46:11'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/9/2020 13:47:02'!
test10PortfolioTransactionsMatchesAccountTransactions

		! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/9/2020 13:49:25' prior: 50879720!
test10PortfolioTransactionsMatchesAccountTransactions
	| portfolio account transaction |
	
	transaction := Deposit for: 300.
	
	account := PortfolioAccount for: (ReceptiveAccount new).
	account register: transaction.
	
	portfolio := Portfolio new.
	portfolio add: account.
	
	self assert: (portfolio transactions) equals: (OrderedCollection with: transaction).! !

!testRun: #PortfolioTest #test10PortfolioTransactionsMatchesAccountTransactions stamp: 'AM 11/9/2020 13:49:27'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'AM 11/9/2020 13:53:33' prior: 50879681!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	portfolioElements do: [:element | element addTransactionsTo: transactions].
	
	^transactions.! !
!PortfolioAccount methodsFor: 'adding private' stamp: 'AM 11/9/2020 13:55:18'!
addTransactionsTo: aCollectionOfTransactions

	self transactions do: [:transaction | aCollectionOfTransactions add: transaction ].! !

!testRun: #PortfolioTest #test10PortfolioTransactionsMatchesAccountTransactions stamp: 'AM 11/9/2020 13:55:29'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/9/2020 13:55:29'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/9/2020 13:55:29'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioMatchesPortFolioBalance stamp: 'AM 11/9/2020 13:55:29'!
PASSED!

!testRun: #PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/9/2020 13:55:29'!
PASSED!

!testRun: #PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/9/2020 13:55:29'!
PASSED!

!testRun: #PortfolioTest #test06CantAddAccountPresentInChildPortfolio stamp: 'AM 11/9/2020 13:55:29'!
PASSED!

!testRun: #PortfolioTest #test07CantAddPortfolioContainingAccountAlreadyPresent stamp: 'AM 11/9/2020 13:55:29'!
PASSED!

!testRun: #PortfolioTest #test08CantAddPortfolioThatSharesAccountsWithPortfolioAlreadyPresent stamp: 'AM 11/9/2020 13:55:29'!
PASSED!

!testRun: #PortfolioTest #test09emptyPortfolioHasNoTransactions stamp: 'AM 11/9/2020 13:55:29'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioTransactionsMatchesAccountTransactions stamp: 'AM 11/9/2020 13:55:29'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/9/2020 13:55:53'!
test11PortfolioTransactionsMatchesAccountAndPortfolioTransactions
	| portfolio account transaction |
	
	transaction := Deposit for: 300.
	
	account := PortfolioAccount for: (ReceptiveAccount new).
	account register: transaction.
	
	portfolio := Portfolio new.
	portfolio add: account.
	
	self assert: (portfolio transactions) equals: (OrderedCollection with: transaction).! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/9/2020 14:00:33' prior: 50879797!
test11PortfolioTransactionsMatchesAccountAndPortfolioTransactions
	
	| portfolio portfolioChild transaction1 transaction2 account1 account2 |
	
	transaction1 := Deposit for: 300.
	transaction2 := Deposit for: 150.
	
	account1 := PortfolioAccount for: (ReceptiveAccount new).
	account1 register: transaction1.
	
	account2 := PortfolioAccount for: (ReceptiveAccount new).
	account2 register: transaction2.
	
	portfolioChild := Portfolio new.
	portfolioChild add: account1.
	
	portfolio := Portfolio new.
	portfolio add: portfolioChild.
	portfolio add: account2.
	
	self assert: (portfolio transactions) equals: (OrderedCollection with: transaction1 with: transaction2).! !

!testRun: #PortfolioTest #test11PortfolioTransactionsMatchesAccountAndPortfolioTransactions stamp: 'AM 11/9/2020 14:00:35'!
ERROR!
!Portfolio methodsFor: 'adding private' stamp: 'AM 11/9/2020 14:01:48'!
addTransactionsTo: aCollectionOfTransactions

	self transactions! !
!Portfolio methodsFor: 'adding private' stamp: 'AM 11/9/2020 14:03:40' prior: 50879840!
addTransactionsTo: aCollectionOfTransactions

	portfolioElements do: [:element | element addTransactionsTo: aCollectionOfTransactions ].! !

!testRun: #PortfolioTest #test11PortfolioTransactionsMatchesAccountAndPortfolioTransactions stamp: 'AM 11/9/2020 14:04:44'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/9/2020 14:04:44'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/9/2020 14:04:44'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioMatchesPortFolioBalance stamp: 'AM 11/9/2020 14:04:44'!
PASSED!

!testRun: #PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/9/2020 14:04:44'!
PASSED!

!testRun: #PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/9/2020 14:04:44'!
PASSED!

!testRun: #PortfolioTest #test06CantAddAccountPresentInChildPortfolio stamp: 'AM 11/9/2020 14:04:44'!
PASSED!

!testRun: #PortfolioTest #test07CantAddPortfolioContainingAccountAlreadyPresent stamp: 'AM 11/9/2020 14:04:44'!
PASSED!

!testRun: #PortfolioTest #test08CantAddPortfolioThatSharesAccountsWithPortfolioAlreadyPresent stamp: 'AM 11/9/2020 14:04:44'!
PASSED!

!testRun: #PortfolioTest #test09emptyPortfolioHasNoTransactions stamp: 'AM 11/9/2020 14:04:44'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioTransactionsMatchesAccountTransactions stamp: 'AM 11/9/2020 14:04:44'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioTransactionsMatchesAccountAndPortfolioTransactions stamp: 'AM 11/9/2020 14:04:44'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/9/2020 14:05:12'!
test04FindsAccountTransactionCorrectly

	| portfolio account transaction|
	
	portfolio := Portfolio new.
	transaction := (Deposit for: 300).
	account := PortfolioAccount for: (ReceptiveAccount new).
	account register: transaction.
	
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: transaction).! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/9/2020 14:05:28'!
test04FindsAccountInPortfolioTransactionCorrectly

	| portfolio account transaction|
	
	portfolio := Portfolio new.
	transaction := (Deposit for: 300).
	account := PortfolioAccount for: (ReceptiveAccount new).
	account register: transaction.
	
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: transaction).! !

!methodRemoval: PortfolioTest #test04FindsTransactionCorrectly stamp: 'AM 11/9/2020 14:05:34'!
test04FindsTransactionCorrectly

	| portfolio account transaction|
	
	portfolio := Portfolio new.
	transaction := (Deposit for: 300).
	account := PortfolioAccount for: (ReceptiveAccount new).
	account register: transaction.
	
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: transaction).!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/9/2020 14:05:48'!
test05FindsAccountTransactionCorrectly

	| portfolio account transaction|
	
	portfolio := Portfolio new.
	transaction := (Deposit for: 300).
	account := PortfolioAccount for: (ReceptiveAccount new).
	account register: transaction.
	
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: transaction).! !

!methodRemoval: PortfolioTest #test04FindsAccountTransactionCorrectly stamp: 'AM 11/9/2020 14:05:48'!
test04FindsAccountTransactionCorrectly

	| portfolio account transaction|
	
	portfolio := Portfolio new.
	transaction := (Deposit for: 300).
	account := PortfolioAccount for: (ReceptiveAccount new).
	account register: transaction.
	
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: transaction).!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/9/2020 14:05:59'!
test06CantRegisterDuplicateAccounts

	| portfolio account |
	
	portfolio := Portfolio new.
	account := PortfolioAccount for: (ReceptiveAccount new).
	account register: (Deposit for: 300).
	
	portfolio add: account.
	
	self
	should: [portfolio add: account.]
	raise: Error
	withMessageText: Portfolio duplicateAccountErrorDescription.! !

!methodRemoval: PortfolioTest #test05CantRegisterDuplicateAccounts stamp: 'AM 11/9/2020 14:05:59'!
test05CantRegisterDuplicateAccounts

	| portfolio account |
	
	portfolio := Portfolio new.
	account := PortfolioAccount for: (ReceptiveAccount new).
	account register: (Deposit for: 300).
	
	portfolio add: account.
	
	self
	should: [portfolio add: account.]
	raise: Error
	withMessageText: Portfolio duplicateAccountErrorDescription.!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/9/2020 14:06:19'!
test12PortfolioTransactionsMatchesAccountAndPortfolioTransactions
	
	| portfolio portfolioChild transaction1 transaction2 account1 account2 |
	
	transaction1 := Deposit for: 300.
	transaction2 := Deposit for: 150.
	
	account1 := PortfolioAccount for: (ReceptiveAccount new).
	account1 register: transaction1.
	
	account2 := PortfolioAccount for: (ReceptiveAccount new).
	account2 register: transaction2.
	
	portfolioChild := Portfolio new.
	portfolioChild add: account1.
	
	portfolio := Portfolio new.
	portfolio add: portfolioChild.
	portfolio add: account2.
	
	self assert: (portfolio transactions) equals: (OrderedCollection with: transaction1 with: transaction2).! !

!methodRemoval: PortfolioTest #test11PortfolioTransactionsMatchesAccountAndPortfolioTransactions stamp: 'AM 11/9/2020 14:06:19'!
test11PortfolioTransactionsMatchesAccountAndPortfolioTransactions
	
	| portfolio portfolioChild transaction1 transaction2 account1 account2 |
	
	transaction1 := Deposit for: 300.
	transaction2 := Deposit for: 150.
	
	account1 := PortfolioAccount for: (ReceptiveAccount new).
	account1 register: transaction1.
	
	account2 := PortfolioAccount for: (ReceptiveAccount new).
	account2 register: transaction2.
	
	portfolioChild := Portfolio new.
	portfolioChild add: account1.
	
	portfolio := Portfolio new.
	portfolio add: portfolioChild.
	portfolio add: account2.
	
	self assert: (portfolio transactions) equals: (OrderedCollection with: transaction1 with: transaction2).!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/9/2020 14:06:25'!
test11PortfolioTransactionsMatchesAccountTransactions
	| portfolio account transaction |
	
	transaction := Deposit for: 300.
	
	account := PortfolioAccount for: (ReceptiveAccount new).
	account register: transaction.
	
	portfolio := Portfolio new.
	portfolio add: account.
	
	self assert: (portfolio transactions) equals: (OrderedCollection with: transaction).! !

!methodRemoval: PortfolioTest #test10PortfolioTransactionsMatchesAccountTransactions stamp: 'AM 11/9/2020 14:06:25'!
test10PortfolioTransactionsMatchesAccountTransactions
	| portfolio account transaction |
	
	transaction := Deposit for: 300.
	
	account := PortfolioAccount for: (ReceptiveAccount new).
	account register: transaction.
	
	portfolio := Portfolio new.
	portfolio add: account.
	
	self assert: (portfolio transactions) equals: (OrderedCollection with: transaction).!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/9/2020 14:06:31'!
test10emptyPortfolioHasNoTransactions

	| portfolio |
	
	portfolio := Portfolio new.
	self assert: (portfolio transactions) equals: OrderedCollection new.! !

!methodRemoval: PortfolioTest #test09emptyPortfolioHasNoTransactions stamp: 'AM 11/9/2020 14:06:31'!
test09emptyPortfolioHasNoTransactions

	| portfolio |
	
	portfolio := Portfolio new.
	self assert: (portfolio transactions) equals: OrderedCollection new.!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/9/2020 14:06:39'!
test09CantAddPortfolioThatSharesAccountsWithPortfolioAlreadyPresent

	| portfolio portfolioChild portfolioToAdd account|
	
	account := PortfolioAccount for: (ReceptiveAccount new).
	account register: (Deposit for: 300).
	
	portfolioChild := Portfolio new.
	portfolioChild add: account.
	
	portfolio := Portfolio new.
	portfolio add: portfolioChild.
	
	portfolioToAdd := Portfolio new.
	portfolioToAdd add: account.
	
	self
	should: [portfolio add: portfolioToAdd.]
	raise: Error
	withMessageText: Portfolio duplicateAccountErrorDescription.! !

!methodRemoval: PortfolioTest #test08CantAddPortfolioThatSharesAccountsWithPortfolioAlreadyPresent stamp: 'AM 11/9/2020 14:06:39'!
test08CantAddPortfolioThatSharesAccountsWithPortfolioAlreadyPresent

	| portfolio portfolioChild portfolioToAdd account|
	
	account := PortfolioAccount for: (ReceptiveAccount new).
	account register: (Deposit for: 300).
	
	portfolioChild := Portfolio new.
	portfolioChild add: account.
	
	portfolio := Portfolio new.
	portfolio add: portfolioChild.
	
	portfolioToAdd := Portfolio new.
	portfolioToAdd add: account.
	
	self
	should: [portfolio add: portfolioToAdd.]
	raise: Error
	withMessageText: Portfolio duplicateAccountErrorDescription.!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/9/2020 14:06:45'!
test08CantAddPortfolioContainingAccountAlreadyPresent

	| portfolio portfolioToAdd account|
	
	account := PortfolioAccount for: (ReceptiveAccount new).
	account register: (Deposit for: 300).
	
	portfolio := Portfolio new.
	portfolio add: account.
	
	portfolioToAdd := Portfolio new.
	portfolioToAdd add: account.
	
	self
	should: [portfolio add: portfolioToAdd.]
	raise: Error
	withMessageText: Portfolio duplicateAccountErrorDescription.! !

!methodRemoval: PortfolioTest #test07CantAddPortfolioContainingAccountAlreadyPresent stamp: 'AM 11/9/2020 14:06:45'!
test07CantAddPortfolioContainingAccountAlreadyPresent

	| portfolio portfolioToAdd account|
	
	account := PortfolioAccount for: (ReceptiveAccount new).
	account register: (Deposit for: 300).
	
	portfolio := Portfolio new.
	portfolio add: account.
	
	portfolioToAdd := Portfolio new.
	portfolioToAdd add: account.
	
	self
	should: [portfolio add: portfolioToAdd.]
	raise: Error
	withMessageText: Portfolio duplicateAccountErrorDescription.!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/9/2020 14:07:09'!
test07CantAddAccountPresentInChildPortfolio

	| portfolioChild portfolioParent account|
	
	account := PortfolioAccount for: (ReceptiveAccount new).
	account register: (Deposit for: 300).
	
	portfolioChild := Portfolio new.
	portfolioChild add: account.
	
	portfolioParent := Portfolio new.
	portfolioParent add: portfolioChild.
	
	self
	should: [portfolioParent add: account.]
	raise: Error
	withMessageText: Portfolio duplicateAccountErrorDescription.! !

!methodRemoval: PortfolioTest #test06CantAddAccountPresentInChildPortfolio stamp: 'AM 11/9/2020 14:07:09'!
test06CantAddAccountPresentInChildPortfolio

	| portfolioChild portfolioParent account|
	
	account := PortfolioAccount for: (ReceptiveAccount new).
	account register: (Deposit for: 300).
	
	portfolioChild := Portfolio new.
	portfolioChild add: account.
	
	portfolioParent := Portfolio new.
	portfolioParent add: portfolioChild.
	
	self
	should: [portfolioParent add: account.]
	raise: Error
	withMessageText: Portfolio duplicateAccountErrorDescription.!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/9/2020 14:07:34'!
test10EmptyPortfolioHasNoTransactions

	| portfolio |
	
	portfolio := Portfolio new.
	self assert: (portfolio transactions) equals: OrderedCollection new.! !

!methodRemoval: PortfolioTest #test10emptyPortfolioHasNoTransactions stamp: 'AM 11/9/2020 14:07:34'!
test10emptyPortfolioHasNoTransactions

	| portfolio |
	
	portfolio := Portfolio new.
	self assert: (portfolio transactions) equals: OrderedCollection new.!

!methodRemoval: PortfolioElement #balance stamp: 'AM 11/9/2020 14:08:07'!
balance

	self subclassResponsibility.!
!PortfolioElement methodsFor: 'no messages' stamp: 'AM 11/9/2020 14:08:33'!
assertNoDuplicates
! !
!PortfolioElement methodsFor: 'as yet unclassified' stamp: 'AM 11/9/2020 14:08:55'!
assertNoDuplicates: anAccountOrPortfolio

	
! !

!methodRemoval: PortfolioElement #assertNoDuplicates stamp: 'AM 11/9/2020 14:08:58'!
assertNoDuplicates
!
!PortfolioElement methodsFor: 'as yet unclassified' stamp: 'AM 11/9/2020 14:09:18' prior: 50880212!
assertNoDuplicates: anAccountOrPortfolio

	self subclassResponsibility.! !
!PortfolioElement methodsFor: 'as yet unclassified' stamp: 'AM 11/9/2020 14:09:27'!
assertNoDuplicatesInHierarchy: anAccountOrPortfolio

	self subclassResponsibility.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'AM 11/9/2020 14:11:02'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountMatchesAccountBalance stamp: 'AM 11/9/2020 14:11:02'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioMatchesPortFolioBalance stamp: 'AM 11/9/2020 14:11:02'!
PASSED!

!testRun: #PortfolioTest #test04FindsAccountInPortfolioTransactionCorrectly stamp: 'AM 11/9/2020 14:11:02'!
PASSED!

!testRun: #PortfolioTest #test05FindsAccountTransactionCorrectly stamp: 'AM 11/9/2020 14:11:02'!
PASSED!

!testRun: #PortfolioTest #test06CantRegisterDuplicateAccounts stamp: 'AM 11/9/2020 14:11:02'!
PASSED!

!testRun: #PortfolioTest #test07CantAddAccountPresentInChildPortfolio stamp: 'AM 11/9/2020 14:11:02'!
PASSED!

!testRun: #PortfolioTest #test08CantAddPortfolioContainingAccountAlreadyPresent stamp: 'AM 11/9/2020 14:11:02'!
PASSED!

!testRun: #PortfolioTest #test09CantAddPortfolioThatSharesAccountsWithPortfolioAlreadyPresent stamp: 'AM 11/9/2020 14:11:02'!
PASSED!

!testRun: #PortfolioTest #test10EmptyPortfolioHasNoTransactions stamp: 'AM 11/9/2020 14:11:02'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioTransactionsMatchesAccountTransactions stamp: 'AM 11/9/2020 14:11:02'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioTransactionsMatchesAccountAndPortfolioTransactions stamp: 'AM 11/9/2020 14:11:02'!
PASSED!

----QUIT----(9 November 2020 14:11:18) CuisUniversity-4383.image priorSource: 17534307!

----STARTUP---- (9 November 2020 18:37:22) as C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CUIS\CuisUniversity-4383.image!


!classRemoval: #ReceptiveAccount stamp: 'AM 11/9/2020 19:02:20'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #RootPortfolio stamp: 'AM 11/9/2020 19:02:20'!
PortfolioElement subclass: #RootPortfolio
	instanceVariableNames: 'childPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioAccount stamp: 'AM 11/9/2020 19:02:20'!
PortfolioElement subclass: #PortfolioAccount
	instanceVariableNames: 'receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'AM 11/9/2020 19:02:21'!
PortfolioElement subclass: #Portfolio
	instanceVariableNames: 'portfolioElements parentPortfolios isRoot'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioElement stamp: 'AM 11/9/2020 19:02:21'!
Object subclass: #PortfolioElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'AM 11/9/2020 19:02:21'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'AM 11/9/2020 19:02:22'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'AM 11/9/2020 19:02:22'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'AM 11/9/2020 19:02:22'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'AM 11/9/2020 19:02:23'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of C:\Users\Chara\Desktop\Facultad\Ingenieria 1\2020-2c\18-Portfolio1\Portfolio-Solucion\Portfolio-Solucion.st----!

TestCase subclass: #TransactionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransactionTest category: 'Portfolio-Solucion' stamp: 'AM 11/9/2020 19:23:01'!
TestCase subclass: #TransactionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TestCase subclass: #AccountTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransfer category: 'Portfolio-Solucion' stamp: 'AM 11/9/2020 19:28:20'!
TestCase subclass: #AccountTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransactionTest stamp: 'AM 11/9/2020 19:28:30'!
TestCase subclass: #TransactionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransfer stamp: 'AM 11/9/2020 19:28:35'!
TestCase subclass: #AccountTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TestCase subclass: #AccountTransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransferTest category: 'Portfolio-Solucion' stamp: 'AM 11/9/2020 19:28:47'!
TestCase subclass: #AccountTransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransferTest methodsFor: 'tests' stamp: 'AM 11/9/2020 19:30:49'!
test01! !

!classDefinition: #AccountTransfer category: 'Portfolio-Solucion' stamp: 'AM 11/9/2020 19:48:00'!
Object subclass: #AccountTransfer
	instanceVariableNames: 'transferor transferee amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransferTest methodsFor: 'tests' stamp: 'AM 11/9/2020 19:47:34'!
test01TransferKnowsTransferorAndTransferee

	| transfer transferor transferee|
	
	transferor := ReceptiveAccount new.
	transferee := ReceptiveAccount new.
	
	transfer := AccountTransfer from: transferor to: transferee for: 500.
	
	self assert: transferor equals: (transfer transferor).
	self assert: transferee equals: (transfer transferee).! !

!methodRemoval: AccountTransferTest #test01 stamp: 'AM 11/9/2020 19:48:11'!
test01!

!testRun: #AccountTransferTest #test01TransferKnowsTransferorAndTransferee stamp: 'AM 11/9/2020 19:48:16'!
ERROR!
!AccountTransfer class methodsFor: 'instance creation' stamp: 'AM 11/9/2020 19:48:53'!
from: aReceptiveAccount to: aReceptiveAccount2 for: aSmallInteger 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFrom: aReceptiveAccount to: aReceptiveAccount2 for: aSmallInteger ! !
!AccountTransfer class methodsFor: 'instance creation' stamp: 'AM 11/9/2020 19:49:54' prior: 50881149!
from: aTransferor to: aTransferee for: anAmount 

	^self new initializeFor: aTransferor to: aTransferee for: anAmount.! !

!testRun: #AccountTransferTest #test01TransferKnowsTransferorAndTransferee stamp: 'AM 11/9/2020 19:49:58'!
ERROR!
!AccountTransfer class methodsFor: 'instance creation' stamp: 'AM 11/9/2020 19:50:31' prior: 50881161!
from: aTransferor to: aTransferee for: anAmount 

	^self new initializeFrom: aTransferor to: aTransferee for: anAmount.! !

!testRun: #AccountTransferTest #test01TransferKnowsTransferorAndTransferee stamp: 'AM 11/9/2020 19:50:32'!
ERROR!
!AccountTransfer methodsFor: 'initialization' stamp: 'AM 11/9/2020 19:50:44'!
initializeFrom: aTransferor to: aTransferee for: anAmount 
	self shouldBeImplemented.
	transferor := aTransferor.
	transferee := aTransferee.
	amount := anAmount.! !
!AccountTransfer methodsFor: 'initialization' stamp: 'AM 11/9/2020 19:50:52' prior: 50881182!
initializeFrom: aTransferor to: aTransferee for: anAmount 
	
	transferor := aTransferor.
	transferee := aTransferee.
	amount := anAmount.! !

!testRun: #AccountTransferTest #test01TransferKnowsTransferorAndTransferee stamp: 'AM 11/9/2020 19:50:53'!
ERROR!
!AccountTransfer methodsFor: 'accessing' stamp: 'AM 11/9/2020 19:51:18'!
transferor
	self shouldBeImplemented.
	^transferor! !
!AccountTransfer methodsFor: 'accessing' stamp: 'AM 11/9/2020 19:51:23' prior: 50881202!
transferor
	
	^transferor! !

!testRun: #AccountTransferTest #test01TransferKnowsTransferorAndTransferee stamp: 'AM 11/9/2020 19:51:26'!
ERROR!
!AccountTransfer methodsFor: 'accessing' stamp: 'AM 11/9/2020 19:51:30'!
transferee
	self shouldBeImplemented.
	^transferee! !
!AccountTransfer methodsFor: 'accessing' stamp: 'AM 11/9/2020 19:51:32' prior: 50881214!
transferee
	
	^transferee! !

!testRun: #AccountTransferTest #test01TransferKnowsTransferorAndTransferee stamp: 'AM 11/9/2020 19:51:34'!
PASSED!

!testRun: #AccountTransferTest #test01TransferKnowsTransferorAndTransferee stamp: 'AM 11/9/2020 19:51:34'!
PASSED!
!AccountTransferTest methodsFor: 'tests' stamp: 'AM 11/9/2020 19:55:09'!
test02TransferAmountReturnedCorrectly

	| transfer transferor transferee|
	
	transferor := ReceptiveAccount new.
	transferee := ReceptiveAccount new.
	
	transfer := AccountTransfer from: transferor to: transferee for: 500.
	
	self assert: 500 equals: (transfer amount).! !

!testRun: #AccountTransferTest #test02TransferAmountReturnedCorrectly stamp: 'AM 11/9/2020 19:55:10'!
ERROR!
!AccountTransfer methodsFor: 'accessing' stamp: 'AM 11/9/2020 19:55:16'!
amount
	self shouldBeImplemented.
	^amount! !
!AccountTransfer methodsFor: 'accessing' stamp: 'AM 11/9/2020 19:55:19' prior: 50881245!
amount
	
	^amount! !

!testRun: #AccountTransferTest #test02TransferAmountReturnedCorrectly stamp: 'AM 11/9/2020 19:55:27'!
PASSED!

!testRun: #AccountTransferTest #test01TransferKnowsTransferorAndTransferee stamp: 'AM 11/9/2020 19:55:27'!
PASSED!

!testRun: #AccountTransferTest #test02TransferAmountReturnedCorrectly stamp: 'AM 11/9/2020 19:55:27'!
PASSED!
!AccountTransfer methodsFor: 'initialization' stamp: 'AM 11/9/2020 20:00:33' prior: 50881191!
initializeFrom: aTransferor to: aTransferee for: anAmount 
	
	transferor := aTransferor.
	transferee := aTransferee.
	amount := anAmount.
	
	! !
!AccountTransferTest methodsFor: 'tests' stamp: 'AM 11/9/2020 20:03:47'!
test03TransactionIsRegisteredInTransferor

	| transfer transferor transferee|
	
	transferor := ReceptiveAccount new.
	transferee := ReceptiveAccount new.
	
	transfer := AccountTransfer from: transferor to: transferee for: 500.
	
	self assert: (transferor transfered: transfer).! !

!testRun: #AccountTransferTest #test03TransactionIsRegisteredInTransferor stamp: 'AM 11/9/2020 20:03:51'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AM 11/9/2020 20:03:59'!
transfered: anAccountTransfer 
	self shouldBeImplemented.! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'AM 11/9/2020 20:05:27'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions sentTransfers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AM 11/9/2020 20:05:24' prior: 50881287!
transfered: anAccountTransfer 
	
	^sentTransfers includes: anAccountTransfer.! !

!testRun: #AccountTransferTest #test03TransactionIsRegisteredInTransferor stamp: 'AM 11/9/2020 20:05:31'!
ERROR!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'AM 11/9/2020 20:06:11' prior: 50880906 overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.
	sentTransfers := OrderedCollection new.! !

!testRun: #AccountTransferTest #test03TransactionIsRegisteredInTransferor stamp: 'AM 11/9/2020 20:06:21'!
ERROR!

!testRun: #AccountTransferTest #test03TransactionIsRegisteredInTransferor stamp: 'AM 11/9/2020 20:06:53'!
FAILURE!
!AccountTransfer methodsFor: 'initialization' stamp: 'AM 11/9/2020 20:07:28' prior: 50881265!
initializeFrom: aTransferor to: aTransferee for: anAmount 
	
	transferor := aTransferor.
	transferee := aTransferee.
	amount := anAmount.
	
	transferor registerSentTransfer: self.
	
	! !

!testRun: #AccountTransferTest #test03TransactionIsRegisteredInTransferor stamp: 'AM 11/9/2020 20:07:39'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AM 11/9/2020 20:07:59'!
registerSentTransfer: anAccountTransfer 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AM 11/9/2020 20:08:13' prior: 50881337!
registerSentTransfer: anAccountTransfer 
	
	sentTransfers add: anAccountTransfer.! !

!testRun: #AccountTransferTest #test03TransactionIsRegisteredInTransferor stamp: 'AM 11/9/2020 20:08:15'!
PASSED!

!testRun: #AccountTransferTest #test01TransferKnowsTransferorAndTransferee stamp: 'AM 11/9/2020 20:08:15'!
PASSED!

!testRun: #AccountTransferTest #test02TransferAmountReturnedCorrectly stamp: 'AM 11/9/2020 20:08:15'!
PASSED!

!testRun: #AccountTransferTest #test03TransactionIsRegisteredInTransferor stamp: 'AM 11/9/2020 20:08:15'!
PASSED!
!AccountTransferTest methodsFor: 'tests' stamp: 'AM 11/9/2020 20:09:13'!
test04TransactionIsRegisteredInTransferee

	| transfer transferor transferee|
	
	transferor := ReceptiveAccount new.
	transferee := ReceptiveAccount new.
	
	transfer := AccountTransfer from: transferor to: transferee for: 500.
	
	self assert: (transferee recieved: transfer).! !

!testRun: #AccountTransferTest #test04TransactionIsRegisteredInTransferee stamp: 'AM 11/9/2020 20:09:17'!
ERROR!
!ReceptiveAccount methodsFor: 'transfers' stamp: 'AM 11/9/2020 20:09:27'!
recieved: anAccountTransfer 
	self shouldBeImplemented.! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'AM 11/9/2020 20:09:52'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions sentTransfers recievedTransactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'transfers' stamp: 'AM 11/9/2020 20:09:50' prior: 50881378!
recieved: anAccountTransfer 
	
	^recievedTransactions includes: anAccountTransfer.! !

!testRun: #AccountTransferTest #test04TransactionIsRegisteredInTransferee stamp: 'AM 11/9/2020 20:09:56'!
ERROR!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'AM 11/9/2020 20:10:15' prior: 50881311 overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.
	sentTransfers := OrderedCollection new.
	recievedTransactions := OrderedCollection new.! !

!testRun: #AccountTransferTest #test04TransactionIsRegisteredInTransferee stamp: 'AM 11/9/2020 20:10:23'!
FAILURE!
!AccountTransfer methodsFor: 'initialization' stamp: 'AM 11/9/2020 20:10:52' prior: 50881325!
initializeFrom: aTransferor to: aTransferee for: anAmount 
	
	transferor := aTransferor.
	transferee := aTransferee.
	amount := anAmount.
	
	transferor registerSentTransfer: self.
	transferee registerRecievedTransfer: self.
	
	! !

!testRun: #AccountTransferTest #test04TransactionIsRegisteredInTransferee stamp: 'AM 11/9/2020 20:11:03'!
ERROR!
!ReceptiveAccount methodsFor: 'transfers' stamp: 'AM 11/9/2020 20:11:10'!
registerRecievedTransfer: anAccountTransfer 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'transfers' stamp: 'AM 11/9/2020 20:11:31' prior: 50881428!
registerRecievedTransfer: anAccountTransfer 
	
	^recievedTransactions add: anAccountTransfer.! !

!testRun: #AccountTransferTest #test04TransactionIsRegisteredInTransferee stamp: 'AM 11/9/2020 20:11:32'!
PASSED!

!testRun: #AccountTransferTest #test01TransferKnowsTransferorAndTransferee stamp: 'AM 11/9/2020 20:11:32'!
PASSED!

!testRun: #AccountTransferTest #test02TransferAmountReturnedCorrectly stamp: 'AM 11/9/2020 20:11:32'!
PASSED!

!testRun: #AccountTransferTest #test03TransactionIsRegisteredInTransferor stamp: 'AM 11/9/2020 20:11:32'!
PASSED!

!testRun: #AccountTransferTest #test04TransactionIsRegisteredInTransferee stamp: 'AM 11/9/2020 20:11:32'!
PASSED!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'AM 11/9/2020 20:11:59'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions sentTransfers recievedTransfers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AM 11/9/2020 20:11:59' prior: 50881392!
recieved: anAccountTransfer 
	
	^recievedTransfers includes: anAccountTransfer.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AM 11/9/2020 20:11:59' prior: 50881402 overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.
	sentTransfers := OrderedCollection new.
	recievedTransfers := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AM 11/9/2020 20:11:59' prior: 50881434!
registerRecievedTransfer: anAccountTransfer 
	
	^recievedTransfers add: anAccountTransfer.! !

!testRun: #AccountTransferTest #test01TransferKnowsTransferorAndTransferee stamp: 'AM 11/9/2020 20:12:05'!
PASSED!

!testRun: #AccountTransferTest #test02TransferAmountReturnedCorrectly stamp: 'AM 11/9/2020 20:12:05'!
PASSED!

!testRun: #AccountTransferTest #test03TransactionIsRegisteredInTransferor stamp: 'AM 11/9/2020 20:12:05'!
PASSED!

!testRun: #AccountTransferTest #test04TransactionIsRegisteredInTransferee stamp: 'AM 11/9/2020 20:12:05'!
PASSED!
!AccountTransferTest methodsFor: 'tests' stamp: 'AM 11/9/2020 20:14:31'!
test03TransferIsRegisteredInTransferor

	| transfer transferor transferee|
	
	transferor := ReceptiveAccount new.
	transferee := ReceptiveAccount new.
	
	transfer := AccountTransfer from: transferor to: transferee for: 500.
	
	self assert: (transferor transfered: transfer).! !

!methodRemoval: AccountTransferTest #test03TransactionIsRegisteredInTransferor stamp: 'AM 11/9/2020 20:14:31'!
test03TransactionIsRegisteredInTransferor

	| transfer transferor transferee|
	
	transferor := ReceptiveAccount new.
	transferee := ReceptiveAccount new.
	
	transfer := AccountTransfer from: transferor to: transferee for: 500.
	
	self assert: (transferor transfered: transfer).!
!AccountTransferTest methodsFor: 'tests' stamp: 'AM 11/9/2020 20:14:44'!
test04TransferIsRegisteredInTransferee

	| transfer transferor transferee|
	
	transferor := ReceptiveAccount new.
	transferee := ReceptiveAccount new.
	
	transfer := AccountTransfer from: transferor to: transferee for: 500.
	
	self assert: (transferee recieved: transfer).! !

!methodRemoval: AccountTransferTest #test04TransactionIsRegisteredInTransferee stamp: 'AM 11/9/2020 20:14:44'!
test04TransactionIsRegisteredInTransferee

	| transfer transferor transferee|
	
	transferor := ReceptiveAccount new.
	transferee := ReceptiveAccount new.
	
	transfer := AccountTransfer from: transferor to: transferee for: 500.
	
	self assert: (transferee recieved: transfer).!

!classRenamed: #AccountTransfer as: #Transfer stamp: 'AM 11/9/2020 20:55:49'!
Smalltalk renameClassNamed: #AccountTransfer as: #Transfer!
!AccountTransferTest methodsFor: 'as yet unclassified' stamp: 'AM 11/9/2020 20:55:49' prior: 50881503!
test03TransferIsRegisteredInTransferor

	| transfer transferor transferee|
	
	transferor := ReceptiveAccount new.
	transferee := ReceptiveAccount new.
	
	transfer := Transfer from: transferor to: transferee for: 500.
	
	self assert: (transferor transfered: transfer).! !
!AccountTransferTest methodsFor: 'as yet unclassified' stamp: 'AM 11/9/2020 20:55:49' prior: 50881129!
test01TransferKnowsTransferorAndTransferee

	| transfer transferor transferee|
	
	transferor := ReceptiveAccount new.
	transferee := ReceptiveAccount new.
	
	transfer := Transfer from: transferor to: transferee for: 500.
	
	self assert: transferor equals: (transfer transferor).
	self assert: transferee equals: (transfer transferee).! !
!AccountTransferTest methodsFor: 'as yet unclassified' stamp: 'AM 11/9/2020 20:55:50' prior: 50881527!
test04TransferIsRegisteredInTransferee

	| transfer transferor transferee|
	
	transferor := ReceptiveAccount new.
	transferee := ReceptiveAccount new.
	
	transfer := Transfer from: transferor to: transferee for: 500.
	
	self assert: (transferee recieved: transfer).! !
!AccountTransferTest methodsFor: 'as yet unclassified' stamp: 'AM 11/9/2020 20:55:50' prior: 50881230!
test02TransferAmountReturnedCorrectly

	| transfer transferor transferee|
	
	transferor := ReceptiveAccount new.
	transferee := ReceptiveAccount new.
	
	transfer := Transfer from: transferor to: transferee for: 500.
	
	self assert: 500 equals: (transfer amount).! !

!classRenamed: #AccountTransferTest as: #TransferTest stamp: 'AM 11/9/2020 20:56:01'!
Smalltalk renameClassNamed: #AccountTransferTest as: #TransferTest!

AccountTransaction subclass: #TransferTransactions
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransactions category: 'Portfolio-Solucion' stamp: 'AM 11/9/2020 20:58:30'!
AccountTransaction subclass: #TransferTransactions
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferTransactions subclass: #TransferDeposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferTransactions subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'AM 11/9/2020 20:58:55'!
TransferTransactions subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferTransactions subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'AM 11/9/2020 20:59:04'!
TransferTransactions subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'tests' stamp: 'AM 11/9/2020 21:00:32' prior: 50881556!
test03TransferIsRegisteredInTransferor

	| transfer transferor transferee|
	
	transferor := ReceptiveAccount new.
	transferee := ReceptiveAccount new.
	
	transfer := Transfer from: transferor to: transferee for: 500.
	
	self assert: (transferor transfered: transfer).! !
!Transfer methodsFor: 'initialization' stamp: 'AM 11/9/2020 21:02:54' prior: 50881414!
initializeFrom: aTransferor to: aTransferee for: anAmount 
	
	transferor := aTransferor.
	transferee := aTransferee.
	amount := anAmount.
	
	transferor register: TransferWithdraw for: self.
	transferee register: TransferDeposit for: self.
	
	! !
!Transfer methodsFor: 'initialization' stamp: 'AM 11/9/2020 21:03:10' prior: 50881666!
initializeFrom: aTransferor to: aTransferee for: anAmount 
	
	transferor := aTransferor.
	transferee := aTransferee.
	amount := anAmount.
	
	transferor register: (TransferWithdraw for: self).
	transferee register: (TransferDeposit for: self).
	
	! !
!TransferTransactions class methodsFor: 'nil' stamp: 'AM 11/9/2020 21:04:06'!
for: aTransfer

	^self new initializeFor: aTransfer.! !

!classDefinition: #TransferTransactions category: 'Portfolio-Solucion' stamp: 'AM 11/9/2020 21:05:08'!
AccountTransaction subclass: #TransferTransactions
	instanceVariableNames: 'value transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTransactions methodsFor: 'nil' stamp: 'AM 11/9/2020 21:05:06'!
initializeFor: aTransfer

	transfer := aTransfer.! !

!methodRemoval: TransferTest #test03TransferIsRegisteredInTransferor stamp: 'AM 11/9/2020 21:07:13'!
test03TransferIsRegisteredInTransferor

	| transfer transferor transferee|
	
	transferor := ReceptiveAccount new.
	transferee := ReceptiveAccount new.
	
	transfer := Transfer from: transferor to: transferee for: 500.
	
	self assert: (transferor transfered: transfer).!

!methodRemoval: TransferTest #test04TransferIsRegisteredInTransferee stamp: 'AM 11/9/2020 21:07:16'!
test04TransferIsRegisteredInTransferee

	| transfer transferor transferee|
	
	transferor := ReceptiveAccount new.
	transferee := ReceptiveAccount new.
	
	transfer := Transfer from: transferor to: transferee for: 500.
	
	self assert: (transferee recieved: transfer).!
!TransferTest methodsFor: 'tests' stamp: 'AM 11/9/2020 21:08:01'!
test03TransferAffectsTransferorBalanceCorrectly

	| transfer transferor transferee|
	
	transferor := ReceptiveAccount new.
	transferee := ReceptiveAccount new.
	
	transfer := Transfer from: transferor to: transferee for: 500.
	
	self assert: -500 equals: (transferor balance).! !

!testRun: #TransferTest #test03TransferAffectsTransferorBalanceCorrectly stamp: 'AM 11/9/2020 21:08:26'!
ERROR!
!TransferDeposit methodsFor: 'no messages' stamp: 'AM 11/9/2020 21:09:15' overrides: 50880968!
affectBalance: aBalance! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'AM 11/9/2020 21:10:29' prior: 50881744 overrides: 50880968!
affectBalance: aBalance

	transfer ! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'AM 11/9/2020 21:11:46' prior: 50881749 overrides: 50880968!
affectBalance: aBalance

	^aBalance + transfer amount.! !
!TransferWithdraw methodsFor: 'nil' stamp: 'AM 11/9/2020 21:12:45' overrides: 50880968!
affectBalance: aBalance

	^aBalance - transfer amount.! !

!testRun: #TransferTest #test03TransferAffectsTransferorBalanceCorrectly stamp: 'AM 11/9/2020 21:12:52'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'AM 11/9/2020 21:13:10'!
test04TransferAffectsTransfereeBalanceCorrectly

	| transfer transferor transferee|
	
	transferor := ReceptiveAccount new.
	transferee := ReceptiveAccount new.
	
	transfer := Transfer from: transferor to: transferee for: 500.
	
	self assert: 500 equals: (transferor balance).! !

!testRun: #TransferTest #test04TransferAffectsTransfereeBalanceCorrectly stamp: 'AM 11/9/2020 21:13:17'!
FAILURE!

!testRun: #TransferTest #test04TransferAffectsTransfereeBalanceCorrectly stamp: 'AM 11/9/2020 21:13:17'!
FAILURE!
!TransferTest methodsFor: 'tests' stamp: 'AM 11/9/2020 21:13:27' prior: 50881767!
test04TransferAffectsTransfereeBalanceCorrectly

	| transfer transferor transferee|
	
	transferor := ReceptiveAccount new.
	transferee := ReceptiveAccount new.
	
	transfer := Transfer from: transferor to: transferee for: 500.
	
	self assert: 500 equals: (transferee balance).! !

!testRun: #TransferTest #test04TransferAffectsTransfereeBalanceCorrectly stamp: 'AM 11/9/2020 21:13:30'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'AM 11/9/2020 21:14:49'!
test05TransferMustBeAPositiveNumber

	| transfer transferor transferee|
	
	transferor := ReceptiveAccount new.
	transferee := ReceptiveAccount new.
	
	Transfer from: transferor to: transferee for: -100.
	
	self .! !
!TransferTest methodsFor: 'tests' stamp: 'AM 11/9/2020 21:15:56' prior: 50881801!
test05TransferMustBeAPositiveNumber

	| transferor transferee|
	
	transferor := ReceptiveAccount new.
	transferee := ReceptiveAccount new.
	
	self 
		should: [Transfer from: transferor to: transferee for: -100]
		raise: Error
		withMessageText: Transfer invalidAmountErrorDescription.! !
!TransferTest methodsFor: 'tests' stamp: 'AM 11/9/2020 21:16:06' prior: 50881786!
test04TransferAffectsTransfereeBalanceCorrectly

	|  transferor transferee|
	
	transferor := ReceptiveAccount new.
	transferee := ReceptiveAccount new.
	
	Transfer from: transferor to: transferee for: 500.
	
	self assert: 500 equals: (transferee balance).! !
!TransferTest methodsFor: 'tests' stamp: 'AM 11/9/2020 21:16:14' prior: 50881728!
test03TransferAffectsTransferorBalanceCorrectly

	| transferor transferee|
	
	transferor := ReceptiveAccount new.
	transferee := ReceptiveAccount new.
	
	Transfer from: transferor to: transferee for: 500.
	
	self assert: -500 equals: (transferor balance).! !

!testRun: #TransferTest #test05TransferMustBeAPositiveNumber stamp: 'AM 11/9/2020 21:16:34'!
ERROR!
!Transfer class methodsFor: 'error descriptions' stamp: 'AM 11/9/2020 21:16:53'!
invalidAmountErrorDescription
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'error descriptions' stamp: 'AM 11/9/2020 21:17:21' prior: 50881848!
invalidAmountErrorDescription
	
	^'Transfer amount must be greater than zero'! !

!testRun: #TransferTest #test05TransferMustBeAPositiveNumber stamp: 'AM 11/9/2020 21:17:22'!
FAILURE!
!Transfer methodsFor: 'initialization' stamp: 'AM 11/9/2020 21:20:57' prior: 50881677!
initializeFrom: aTransferor to: aTransferee for: anAmount 
	
	(anAmount > 0) ifFalse: [self signalInvalidTransactionAmount].
	
	transferor := aTransferor.
	transferee := aTransferee.
	amount := anAmount.
	
	transferor register: (TransferWithdraw for: self).
	transferee register: (TransferDeposit for: self).
	
	! !
!Transfer class methodsFor: 'instance creation' stamp: 'AM 11/9/2020 21:22:06' prior: 50881172!
from: aTransferor to: aTransferee for: anAmount 
	
	(anAmount > 0) ifFalse: [ self signalInvalidTransferAmount ].
	
	^self new initializeFrom: aTransferor to: aTransferee for: anAmount.! !
!Transfer methodsFor: 'initialization' stamp: 'AM 11/9/2020 21:22:15' prior: 50881862!
initializeFrom: aTransferor to: aTransferee for: anAmount 
	
	transferor := aTransferor.
	transferee := aTransferee.
	amount := anAmount.
	
	transferor register: (TransferWithdraw for: self).
	transferee register: (TransferDeposit for: self).
	
	! !
!Transfer class methodsFor: 'error signals' stamp: 'AM 11/9/2020 21:23:00'!
signalInvalidTransactionAmount
	
	^self error: self invalidAmountErrorDescription.! !

!testRun: #TransferTest #test05TransferMustBeAPositiveNumber stamp: 'AM 11/9/2020 21:23:17'!
FAILURE!
!Transfer class methodsFor: 'error signals' stamp: 'AM 11/9/2020 21:24:42'!
signalInvalidTransferAmount
	
	^self error: self invalidAmountErrorDescription.! !

!methodRemoval: Transfer class #signalInvalidTransactionAmount stamp: 'AM 11/9/2020 21:24:42'!
signalInvalidTransactionAmount
	
	^self error: self invalidAmountErrorDescription.!

!testRun: #TransferTest #test05TransferMustBeAPositiveNumber stamp: 'AM 11/9/2020 21:24:54'!
PASSED!

!testRun: #TransferTest #test01TransferKnowsTransferorAndTransferee stamp: 'AM 11/9/2020 21:24:54'!
PASSED!

!testRun: #TransferTest #test02TransferAmountReturnedCorrectly stamp: 'AM 11/9/2020 21:24:54'!
PASSED!

!testRun: #TransferTest #test03TransferAffectsTransferorBalanceCorrectly stamp: 'AM 11/9/2020 21:24:54'!
PASSED!

!testRun: #TransferTest #test04TransferAffectsTransfereeBalanceCorrectly stamp: 'AM 11/9/2020 21:24:54'!
PASSED!

!testRun: #TransferTest #test05TransferMustBeAPositiveNumber stamp: 'AM 11/9/2020 21:24:54'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'AM 11/9/2020 21:26:39'!
test06TransfersToAndFromTheSameAccountNotAllowed

	| account |
	
	account := ReceptiveAccount new.
	
	self 
		should: [Transfer from: account to: account for: 100]
		raise: Error
		withMessageText: Transfer cantTransferToSelfErrorDescription.! !
!Transfer class methodsFor: 'instance creation' stamp: 'AM 11/9/2020 21:28:00' prior: 50881875!
from: aTransferor to: aTransferee for: anAmount 
	
	(anAmount > 0) ifFalse: [ self signalInvalidTransferAmount ].
	(aTransferor == aTransferee) ifTrue: [self signalTransactionToSelfErrorDescription]
	
	^self new initializeFrom: aTransferor to: aTransferee for: anAmount.! !
!Transfer class methodsFor: 'instance creation' stamp: 'AM 11/9/2020 21:28:04' prior: 50881946!
from: aTransferor to: aTransferee for: anAmount 
	
	(anAmount > 0) ifFalse: [ self signalInvalidTransferAmount ].
	(aTransferor == aTransferee) ifTrue: [self signalTransactionToSelfErrorDescription].
	
	^self new initializeFrom: aTransferor to: aTransferee for: anAmount.! !
!Transfer class methodsFor: 'error descriptions' stamp: 'AM 11/9/2020 21:29:10'!
cantTransferToSelfErrorDescription

 	^'Cant transfer from and to the same account'! !
!Transfer class methodsFor: 'error signals' stamp: 'AM 11/9/2020 21:30:11'!
signalTransactionToSelfErrorDescription

	^self error: self cantTransferToSelfErrorDescription.! !

!testRun: #TransferTest #test06TransfersToAndFromTheSameAccountNotAllowed stamp: 'AM 11/9/2020 21:30:20'!
PASSED!

!testRun: #TransferTest #test01TransferKnowsTransferorAndTransferee stamp: 'AM 11/9/2020 21:30:20'!
PASSED!

!testRun: #TransferTest #test02TransferAmountReturnedCorrectly stamp: 'AM 11/9/2020 21:30:20'!
PASSED!

!testRun: #TransferTest #test03TransferAffectsTransferorBalanceCorrectly stamp: 'AM 11/9/2020 21:30:20'!
PASSED!

!testRun: #TransferTest #test04TransferAffectsTransfereeBalanceCorrectly stamp: 'AM 11/9/2020 21:30:20'!
PASSED!

!testRun: #TransferTest #test05TransferMustBeAPositiveNumber stamp: 'AM 11/9/2020 21:30:20'!
PASSED!

!testRun: #TransferTest #test06TransfersToAndFromTheSameAccountNotAllowed stamp: 'AM 11/9/2020 21:30:20'!
PASSED!

!methodRemoval: ReceptiveAccount #recieved: stamp: 'AM 11/9/2020 21:30:56'!
recieved: anAccountTransfer 
	
	^recievedTransfers includes: anAccountTransfer.!

!methodRemoval: ReceptiveAccount #registerRecievedTransfer: stamp: 'AM 11/9/2020 21:30:56'!
registerRecievedTransfer: anAccountTransfer 
	
	^recievedTransfers add: anAccountTransfer.!

!methodRemoval: ReceptiveAccount #registerSentTransfer: stamp: 'AM 11/9/2020 21:30:56'!
registerSentTransfer: anAccountTransfer 
	
	sentTransfers add: anAccountTransfer.!

!methodRemoval: ReceptiveAccount #transfered: stamp: 'AM 11/9/2020 21:30:56'!
transfered: anAccountTransfer 
	
	^sentTransfers includes: anAccountTransfer.!

!testRun: #TransferTest #test01TransferKnowsTransferorAndTransferee stamp: 'AM 11/9/2020 21:30:58'!
PASSED!

!testRun: #TransferTest #test02TransferAmountReturnedCorrectly stamp: 'AM 11/9/2020 21:30:58'!
PASSED!

!testRun: #TransferTest #test03TransferAffectsTransferorBalanceCorrectly stamp: 'AM 11/9/2020 21:30:58'!
PASSED!

!testRun: #TransferTest #test04TransferAffectsTransfereeBalanceCorrectly stamp: 'AM 11/9/2020 21:30:58'!
PASSED!

!testRun: #TransferTest #test05TransferMustBeAPositiveNumber stamp: 'AM 11/9/2020 21:30:59'!
PASSED!

!testRun: #TransferTest #test06TransfersToAndFromTheSameAccountNotAllowed stamp: 'AM 11/9/2020 21:30:59'!
PASSED!

TestCase subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'AM 11/9/2020 21:32:38'!
TestCase subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #AccountSummary as: #AccountSummaryTest stamp: 'AM 11/9/2020 21:32:44'!
Smalltalk renameClassNamed: #AccountSummary as: #AccountSummaryTest!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'AM 11/9/2020 21:38:27'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTest methodsFor: 'tests' stamp: 'AM 11/9/2020 21:37:47'!
test01AccountSummaryForEmptyAccountIsZeroBalance

	| account accountSummary |
	account := ReceptiveAccount new.
	accountSummary := AccountSummary for: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary summary. ! !

!testRun: #AccountSummaryTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/9/2020 21:38:59'!
ERROR!
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/9/2020 21:39:10'!
for: aReceptiveAccount 
	self shouldBeImplemented.! !

!classDefinition: #Reports category: 'Portfolio-Solucion' stamp: 'AM 11/9/2020 21:39:34'!
Object subclass: #Reports
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'AM 11/9/2020 21:39:34'!
Reports subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Reports class methodsFor: 'nil' stamp: 'AM 11/9/2020 21:39:51'!
for: anAccount

	! !

!methodRemoval: AccountSummary class #for: stamp: 'AM 11/9/2020 21:40:13'!
for: aReceptiveAccount 
	self shouldBeImplemented.!

!classDefinition: 'Reports class' category: 'Portfolio-Solucion' stamp: 'AM 11/9/2020 21:40:26'!
Reports class
	instanceVariableNames: 'account'!
!Reports class methodsFor: 'as yet unclassified' stamp: 'AM 11/9/2020 21:40:24' prior: 50882106!
for: anAccount

	account := anAccount.! !
!Reports class methodsFor: 'as yet unclassified' stamp: 'AM 11/9/2020 21:40:53' prior: 50882119!
for: anAccount

	^self new initializeFor: anAccount.! !

Reports class
	instanceVariableNames: ''!

!classDefinition: 'Reports class' category: 'Portfolio-Solucion' stamp: 'AM 11/9/2020 21:41:01'!
Reports class
	instanceVariableNames: ''!

Reports subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'AM 11/9/2020 21:41:39'!
Reports subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Reports category: 'Portfolio-Solucion' stamp: 'AM 11/9/2020 21:42:01'!
Object subclass: #Reports
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Reports methodsFor: 'no messages' stamp: 'AM 11/9/2020 21:42:04'!
initializeFor: anAccount

	account := anAccount.! !

!testRun: #AccountSummaryTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/9/2020 21:42:22'!
ERROR!
!Reports methodsFor: 'initialization' stamp: 'AM 11/9/2020 21:43:01'!
report

	self subclassResponsibility.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'AM 11/9/2020 21:43:14' prior: 50882072!
test01AccountSummaryForEmptyAccountIsZeroBalance

	| account accountSummary |
	account := ReceptiveAccount new.
	accountSummary := AccountSummary for: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary report. ! !

!testRun: #AccountSummaryTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/9/2020 21:43:20'!
ERROR!
!AccountSummary methodsFor: 'report' stamp: 'AM 11/9/2020 21:43:32' overrides: 50882161!
report
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'report' stamp: 'AM 11/9/2020 21:43:53' prior: 50882181 overrides: 50882161!
report
	
	^'Balance = 0'! !
!AccountSummary methodsFor: 'report' stamp: 'AM 11/9/2020 21:43:55' prior: 50882186 overrides: 50882161!
report
	
	^'Balance = 0'.! !

!testRun: #AccountSummaryTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/9/2020 21:43:56'!
FAILURE!
!AccountSummary methodsFor: 'report' stamp: 'AM 11/9/2020 21:44:36' prior: 50882191 overrides: 50882161!
report
	
	^OrderedCollection with: 'Balance = 0'.! !

!testRun: #AccountSummaryTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/9/2020 21:44:58'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/9/2020 21:44:58'!
PASSED!

----QUIT----(9 November 2020 22:43:36) CuisUniversity-4383.image priorSource: 17555943!

----STARTUP---- (14 November 2020 14:46:53) as C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CUIS\CuisUniversity-4383.image!

!TransferTransactions methodsFor: 'initialization' stamp: 'AM 11/14/2020 14:58:39' overrides: 50880964!
value

	^value.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'AM 11/14/2020 15:07:49'!
test02AccountSummaryForAccountWithOneTransactionMatchesBalance

	| account accountSummary expectedReport |
	
	account := ReceptiveAccount new.
	account register: (Deposit for: 100).
	accountSummary := AccountSummary for: account.
	expectedReport := OrderedCollection with: 'Deposit for 100' with: 'Balance = 0'.
	
	self assert: (expectedReport) equals: accountSummary report. ! !

!testRun: #AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalance stamp: 'AM 11/14/2020 15:07:52'!
FAILURE!
!AccountSummaryTest methodsFor: 'tests' stamp: 'AM 11/14/2020 15:08:15' prior: 50882222!
test02AccountSummaryForAccountWithOneTransactionMatchesBalance

	| account accountSummary expectedReport |
	
	account := ReceptiveAccount new.
	account register: (Deposit for: 100).
	accountSummary := AccountSummary for: account.
	expectedReport := OrderedCollection with: 'Deposit for 100' with: 'Balance = 100'.
	
	self assert: (expectedReport) equals: accountSummary report. ! !
!AccountSummary methodsFor: 'report' stamp: 'AM 11/14/2020 15:08:42' prior: 50882199 overrides: 50882161!
report
	
	! !
!AccountSummary methodsFor: 'report' stamp: 'AM 11/14/2020 15:11:14' prior: 50882257 overrides: 50882161!
report
	
	| report |
	
	report := OrderedCollection new.
	
	account transactions do: []! !
!AccountSummary methodsFor: 'report' stamp: 'AM 11/14/2020 15:14:43' prior: 50882261 overrides: 50882161!
report
	
	| report |
	
	report := OrderedCollection new.
	
	account transactions do: [:aTransaction | report add: aTransaction stringRep].
	
	report := 'Balance = ', (account balance asString).! !
!Portfolio methodsFor: 'balance' stamp: 'AM 11/14/2020 15:14:58' prior: 50880797 overrides: 50880734!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ].! !
!Deposit methodsFor: 'balance' stamp: 'AM 11/14/2020 15:15:43'!
stringRep

	! !
!Deposit methodsFor: 'balance' stamp: 'AM 11/14/2020 15:16:11' prior: 50882283!
stringRep

	^'Deposit for ', value asString.! !

!testRun: #AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalance stamp: 'AM 11/14/2020 15:16:21'!
FAILURE!
!AccountSummary methodsFor: 'report' stamp: 'AM 11/14/2020 15:16:37' prior: 50882268 overrides: 50882161!
report
	
	| report |
	
	report := OrderedCollection new.
	
	account transactions do: [:aTransaction | report add: aTransaction stringRep].
	
	report := 'Balance = ', (account balance asString).
	
	^report.! !

!testRun: #AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalance stamp: 'AM 11/14/2020 15:16:47'!
FAILURE!
!AccountSummary methodsFor: 'report' stamp: 'AM 11/14/2020 15:17:17' prior: 50882296 overrides: 50882161!
report
	
	| report |
	
	report := OrderedCollection new.
	
	account transactions do: [:aTransaction | report add: aTransaction stringRep].
	
	report add: 'Balance = ', (account balance asString).
	
	^report.! !

!testRun: #AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalance stamp: 'AM 11/14/2020 15:17:25'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/14/2020 15:17:25'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalance stamp: 'AM 11/14/2020 15:17:25'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'AM 11/14/2020 15:22:27'!
test02AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions

	| account1 account2 accountSummary expectedReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account1 register: (Deposit for: 100).
	Transfer from: account1 to: account2 for: 50. 
	accountSummary := AccountSummary for: account1.
	expectedReport := OrderedCollection with: 'Deposit for 100' with: 'Transfer withdraw for 50' with: 'Balance = 50'.
	
	self assert: (expectedReport) equals: accountSummary report. ! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'AM 11/14/2020 15:22:31'!
test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions

	| account1 account2 accountSummary expectedReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account1 register: (Deposit for: 100).
	Transfer from: account1 to: account2 for: 50. 
	accountSummary := AccountSummary for: account1.
	expectedReport := OrderedCollection with: 'Deposit for 100' with: 'Transfer withdraw for 50' with: 'Balance = 50'.
	
	self assert: (expectedReport) equals: accountSummary report. ! !

!methodRemoval: AccountSummaryTest #test02AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/14/2020 15:22:38'!
test02AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions

	| account1 account2 accountSummary expectedReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account1 register: (Deposit for: 100).
	Transfer from: account1 to: account2 for: 50. 
	accountSummary := AccountSummary for: account1.
	expectedReport := OrderedCollection with: 'Deposit for 100' with: 'Transfer withdraw for 50' with: 'Balance = 50'.
	
	self assert: (expectedReport) equals: accountSummary report. !

!testRun: #AccountSummaryTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/14/2020 15:22:44'!
ERROR!
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'AM 11/14/2020 15:23:29'!
stringRep

	^'Transfer withdraw for', value asString. ! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'AM 11/14/2020 15:23:47'!
stringRep

	^'Transfer deposit for', value asString. ! !
!Withdraw methodsFor: 'nil' stamp: 'AM 11/14/2020 15:24:12'!
stringRep

	^'Withdraw for', value asString. ! !

!testRun: #AccountSummaryTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/14/2020 15:24:20'!
FAILURE!

AccountTransaction subclass: #TransferTransactions
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransactions category: 'Portfolio-Solucion' stamp: 'AM 11/14/2020 15:25:30'!
AccountTransaction subclass: #TransferTransactions
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTransactions methodsFor: 'value' stamp: 'AM 11/14/2020 15:25:39' prior: 50882219 overrides: 50880964!
value

	^transfer value.! !
!TransferTransactions methodsFor: 'value' stamp: 'AM 11/14/2020 15:25:50' prior: 50882430 overrides: 50880964!
value

	^transfer amount.! !

!testRun: #AccountSummaryTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/14/2020 15:25:56'!
FAILURE!
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'AM 11/14/2020 15:26:16' prior: 50882402!
stringRep

	^'Transfer deposit for', self value asString. ! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'AM 11/14/2020 15:26:20' prior: 50882397!
stringRep

	^'Transfer withdraw for', self value asString. ! !

!testRun: #AccountSummaryTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/14/2020 15:26:28'!
FAILURE!
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'AM 11/14/2020 15:26:40' prior: 50882450!
stringRep

	^'Transfer withdraw for ', self value asString. ! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'AM 11/14/2020 15:26:44' prior: 50882444!
stringRep

	^'Transfer deposit for ', self value asString. ! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'AM 11/14/2020 15:26:48' prior: 50882406!
stringRep

	^'Withdraw for ', value asString. ! !

!testRun: #AccountSummaryTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/14/2020 15:26:58'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/14/2020 15:26:58'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalance stamp: 'AM 11/14/2020 15:26:58'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/14/2020 15:26:58'!
PASSED!
!AccountSummary methodsFor: 'report' stamp: 'AM 11/14/2020 15:36:22' prior: 50882311 overrides: 50882161!
report
	
	| report |
	
	report := OrderedCollection new.
	
	account transactions do: [:aTransaction | aTransaction reportTo: self].! !
!AccountTransaction methodsFor: 'balance' stamp: 'AM 11/14/2020 15:38:53'!
reportTo: aReport

	aReport perform: (#handle,self class asSymbol)asSymbol.! !
!AccountSummary methodsFor: 'report' stamp: 'AM 11/14/2020 15:39:12' prior: 50882494 overrides: 50882161!
report

	account transactions do: [:aTransaction | aTransaction reportTo: self].! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'AM 11/14/2020 15:40:18'!
Reports subclass: #AccountSummary
	instanceVariableNames: 'reportCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'report' stamp: 'AM 11/14/2020 15:40:15' prior: 50882507 overrides: 50882161!
report

	account transactions do: [:aTransaction | aTransaction reportTo: self].
	^reportCollection.! !
!AccountSummary methodsFor: 'report' stamp: 'AM 11/14/2020 15:41:24' prior: 50882521 overrides: 50882161!
report

	account transactions do: [:aTransaction | aTransaction reportTo: self].
	reportCollection add: 'Balance = ', account balance asString.
	^reportCollection.! !
!AccountSummary methodsFor: 'report' stamp: 'AM 11/14/2020 15:42:26'!
handleDeposit: aDeposit

	reportCollection add: 'Deposit for ', aDeposit value asString.! !

!testRun: #AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalance stamp: 'AM 11/14/2020 15:43:03'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalance stamp: 'AM 11/14/2020 15:43:03'!
ERROR!
!AccountTransaction methodsFor: 'balance' stamp: 'AM 11/14/2020 15:43:19' prior: 50882501!
reportTo: aReport

	aReport perform: ((#handle,self class asSymbol)asSymbol).! !

!testRun: #AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalance stamp: 'AM 11/14/2020 15:43:20'!
ERROR!
!AccountTransaction methodsFor: 'balance' stamp: 'AM 11/14/2020 15:43:45' prior: 50882551!
reportTo: aReport

	aReport perform: ((#handle,(self class) asSymbol)asSymbol).! !

!testRun: #AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalance stamp: 'AM 11/14/2020 15:43:54'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalance stamp: 'AM 11/14/2020 15:43:54'!
ERROR!

self class!

self asString!
!AccountTransaction methodsFor: 'balance' stamp: 'AM 11/14/2020 15:45:33' prior: 50882561!
reportTo: aReport

	aReport perform: ((#handle,(self class asString) asSymbol)asSymbol).! !

!testRun: #AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalance stamp: 'AM 11/14/2020 15:45:34'!
ERROR!
!AccountTransaction methodsFor: 'balance' stamp: 'AM 11/14/2020 15:47:00' prior: 50882576!
reportTo: aReport

	aReport perform: ((#handle,(self class asString) asSymbol)asSymbol) with: self.! !

!testRun: #AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalance stamp: 'AM 11/14/2020 15:48:16'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalance stamp: 'AM 11/14/2020 15:48:16'!
ERROR!
!AccountTransaction methodsFor: 'balance' stamp: 'AM 11/14/2020 15:48:39' prior: 50882586!
reportTo: aReport

	aReport perform: ((#handle,(self class asString) asSymbol),#:asSymbol) with: self.! !

#hola, 'hola'!
!AccountTransaction methodsFor: 'balance' stamp: 'AM 11/14/2020 15:50:13' prior: 50882601!
reportTo: aReport

	aReport perform: ('handle', self class asString,':') asSymbol with: self.! !

!testRun: #AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalance stamp: 'AM 11/14/2020 15:50:20'!
ERROR!
!Reports methodsFor: 'initialization' stamp: 'AM 11/14/2020 15:51:40' prior: 50882153!
initializeFor: anAccount

	self subclassResponsibility.! !
!Reports methodsFor: 'initialization' stamp: 'AM 11/9/2020 21:42:04' prior: 50882618!
initializeFor: anAccount

	account := anAccount.! !
!AccountSummary methodsFor: 'initialization' stamp: 'AM 11/14/2020 15:52:33' overrides: 50882623!
initializeFor: anAccount

	account := anAccount.
	reportCollection := OrderedCollection new.! !

!testRun: #AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalance stamp: 'AM 11/14/2020 15:52:44'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/14/2020 15:52:44'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalance stamp: 'AM 11/14/2020 15:52:44'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/14/2020 15:52:44'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/14/2020 15:52:44'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalance stamp: 'AM 11/14/2020 15:52:58'!
PASSED!

----QUIT----(14 November 2020 15:57:00) CuisUniversity-4383.image priorSource: 17617926!

----STARTUP---- (14 November 2020 16:59:34) as C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CUIS\CuisUniversity-4383.image!


self class!
!AccountSummary methodsFor: 'report' stamp: 'AM 11/14/2020 17:02:00'!
handleWithdraw: aWithdraw

	reportCollection add: 'Withdraw for ', aWithdraw value asString.! !
!AccountSummary methodsFor: 'report' stamp: 'AM 11/14/2020 17:02:43'!
handleTransferDeposit: aTransferDeposit

	reportCollection add: 'Transfer deposit for ', aTransferDeposit value asString.! !
!AccountSummary methodsFor: 'report' stamp: 'AM 11/14/2020 17:03:03'!
handleTransferWithdraw: aTransferWithdraw

	reportCollection add: 'Transfer deposit for ', aTransferWithdraw value asString.! !

!testRun: #AccountSummaryTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/14/2020 17:03:15'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/14/2020 17:03:15'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/14/2020 17:03:35'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/14/2020 17:03:35'!
FAILURE!
!AccountSummary methodsFor: 'report' stamp: 'AM 11/14/2020 17:04:08' prior: 50882680!
handleTransferWithdraw: aTransferWithdraw

	reportCollection add: 'Transfer withdraw for ', aTransferWithdraw value asString.! !

!testRun: #AccountSummaryTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/14/2020 17:04:22'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/14/2020 17:04:22'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalance stamp: 'AM 11/14/2020 17:04:22'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/14/2020 17:04:22'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'AM 11/14/2020 17:05:11'!
test02AccountSummaryForAccountWithOneTransactionMatchesBalanceAndTransaction

	| account accountSummary expectedReport |
	
	account := ReceptiveAccount new.
	account register: (Deposit for: 100).
	accountSummary := AccountSummary for: account.
	expectedReport := OrderedCollection with: 'Deposit for 100' with: 'Balance = 100'.
	
	self assert: (expectedReport) equals: accountSummary report. ! !

!methodRemoval: AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalance stamp: 'AM 11/14/2020 17:05:11'!
test02AccountSummaryForAccountWithOneTransactionMatchesBalance

	| account accountSummary expectedReport |
	
	account := ReceptiveAccount new.
	account register: (Deposit for: 100).
	accountSummary := AccountSummary for: account.
	expectedReport := OrderedCollection with: 'Deposit for 100' with: 'Balance = 100'.
	
	self assert: (expectedReport) equals: accountSummary report. !
!AccountSummaryTest methodsFor: 'tests' stamp: 'AM 11/14/2020 17:09:42'!
test04SummaryForEmptyPorfolioIsZeroBalance

	| portfolio expectedReport accountSummary|
	
	portfolio := Portfolio new.
	expectedReport := OrderedCollection with: 'Balance = 0'.
	accountSummary := AccountSummary for: portfolio.
	
	self assert: (expectedReport) equals: accountSummary report. ! !

!testRun: #AccountSummaryTest #test04SummaryForEmptyPorfolioIsZeroBalance stamp: 'AM 11/14/2020 17:10:01'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/14/2020 17:10:01'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalanceAndTransaction stamp: 'AM 11/14/2020 17:10:01'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/14/2020 17:10:01'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryForEmptyPorfolioIsZeroBalance stamp: 'AM 11/14/2020 17:10:01'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'AM 11/14/2020 17:10:54'!
test05SummaryForPorfolioWithOneAccountMatchesAccountTransactionsAndBalance

	| portfolio expectedReport accountSummary|
	
	portfolio := Portfolio new.
	expectedReport := OrderedCollection with: 'Balance = 0'.
	accountSummary := AccountSummary for: portfolio.
	
	self assert: (expectedReport) equals: accountSummary report. ! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'AM 11/14/2020 17:11:05' prior: 50882793!
test05SummaryForPorfolioWithOneAccountMatchesAccountTransactionsAndBalance

	| portfolio account expectedReport accountSummary|
	
	portfolio := Portfolio new.
	expectedReport := OrderedCollection with: 'Balance = 0'.
	accountSummary := AccountSummary for: portfolio.
	
	self assert: (expectedReport) equals: accountSummary report. ! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'AM 11/14/2020 17:13:52' prior: 50882806!
test05SummaryForPorfolioWithOneAccountMatchesAccountTransactionsAndBalance

	| portfolio account expectedReport accountSummary|
	
	account := ReceptiveAccount new.
	account register: (Deposit for: 100); register: (Withdraw for: 100) .
	portfolio := Portfolio new.
	portfolio register: account.
	
	expectedReport := OrderedCollection with: 'Deposit for 100' with: 'Withdraw for 100' with: 'Balance = 0'.
	accountSummary := AccountSummary for: portfolio.
	
	self assert: (expectedReport) equals: accountSummary report. ! !

!testRun: #AccountSummaryTest #test05SummaryForPorfolioWithOneAccountMatchesAccountTransactionsAndBalance stamp: 'AM 11/14/2020 17:14:06'!
ERROR!
!AccountSummaryTest methodsFor: 'tests' stamp: 'AM 11/14/2020 17:14:30' prior: 50882820!
test05SummaryForPorfolioWithOneAccountMatchesAccountTransactionsAndBalance

	| portfolio account expectedReport accountSummary|
	
	account := ReceptiveAccount new.
	account register: (Deposit for: 100); register: (Withdraw for: 100) .
	portfolio := Portfolio new.
	portfolio add: account.
	
	expectedReport := OrderedCollection with: 'Deposit for 100' with: 'Withdraw for 100' with: 'Balance = 0'.
	accountSummary := AccountSummary for: portfolio.
	
	self assert: (expectedReport) equals: accountSummary report. ! !

!testRun: #AccountSummaryTest #test05SummaryForPorfolioWithOneAccountMatchesAccountTransactionsAndBalance stamp: 'AM 11/14/2020 17:14:32'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/14/2020 17:14:32'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalanceAndTransaction stamp: 'AM 11/14/2020 17:14:32'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/14/2020 17:14:32'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryForEmptyPorfolioIsZeroBalance stamp: 'AM 11/14/2020 17:14:32'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryForPorfolioWithOneAccountMatchesAccountTransactionsAndBalance stamp: 'AM 11/14/2020 17:14:32'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'AM 11/14/2020 17:15:58'!
test06SummaryForPorfolioWithOnePortfolioMatchesPortfolioTransactionsAndBalance

	| portfolioChild portfolio account expectedReport accountSummary|
	
	account := ReceptiveAccount new.
	account register: (Deposit for: 100); register: (Withdraw for: 100) .
	portfolioChild := Portfolio new.
	portfolioChild add: account.
	portfolio := Portfolio new.
	portfolio add: portfolioChild.
	
	expectedReport := OrderedCollection with: 'Deposit for 100' with: 'Withdraw for 100' with: 'Balance = 0'.
	accountSummary := AccountSummary for: portfolio.
	
	self assert: (expectedReport) equals: accountSummary report. ! !

!testRun: #AccountSummaryTest #test06SummaryForPorfolioWithOnePortfolioMatchesPortfolioTransactionsAndBalance stamp: 'AM 11/14/2020 17:16:46'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/14/2020 17:16:46'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalanceAndTransaction stamp: 'AM 11/14/2020 17:16:46'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/14/2020 17:16:46'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryForEmptyPorfolioIsZeroBalance stamp: 'AM 11/14/2020 17:16:46'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryForPorfolioWithOneAccountMatchesAccountTransactionsAndBalance stamp: 'AM 11/14/2020 17:16:46'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryForPorfolioWithOnePortfolioMatchesPortfolioTransactionsAndBalance stamp: 'AM 11/14/2020 17:16:46'!
PASSED!

Reports subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'AM 11/14/2020 17:19:02'!
Reports subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'AM 11/14/2020 17:19:22'!
Reports subclass: #AccountSummary
	instanceVariableNames: 'summaryCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/14/2020 17:19:22' prior: 50882528 overrides: 50882161!
report

	account transactions do: [:aTransaction | aTransaction reportTo: self].
	summaryCollection add: 'Balance = ', account balance asString.
	^summaryCollection.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/14/2020 17:19:22' prior: 50882628 overrides: 50882623!
initializeFor: anAccount

	account := anAccount.
	summaryCollection := OrderedCollection new.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/14/2020 17:19:22' prior: 50882667!
handleWithdraw: aWithdraw

	summaryCollection add: 'Withdraw for ', aWithdraw value asString.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/14/2020 17:19:22' prior: 50882706!
handleTransferWithdraw: aTransferWithdraw

	summaryCollection add: 'Transfer withdraw for ', aTransferWithdraw value asString.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/14/2020 17:19:22' prior: 50882536!
handleDeposit: aDeposit

	summaryCollection add: 'Deposit for ', aDeposit value asString.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/14/2020 17:19:22' prior: 50882673!
handleTransferDeposit: aTransferDeposit

	summaryCollection add: 'Transfer deposit for ', aTransferDeposit value asString.! !

Reports subclass: #TransferNet
	instanceVariableNames: 'netTotal'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'AM 11/14/2020 17:19:56'!
Reports subclass: #TransferNet
	instanceVariableNames: 'netTotal'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'report' stamp: 'AM 11/14/2020 17:22:16'!
handle: aTransaction

	summaryCollection add: (aTransaction class asString), ' for ', aTransaction value asString.! !
!AccountTransaction methodsFor: 'balance' stamp: 'AM 11/14/2020 17:23:01' prior: 50882608!
reportTo: aReport

	aReport handle: self.! !
!AccountTransaction methodsFor: 'balance' stamp: 'AM 11/14/2020 15:50:13' prior: 50883026!
reportTo: aReport

	aReport perform: ('handle', self class asString,':') asSymbol with: self.! !
!AccountSummary methodsFor: 'report' stamp: 'AM 11/14/2020 17:24:57'!
addStringRepresentationToSummary: aTransaction

	summaryCollection add: (aTransaction class asString), ' for ', aTransaction value asString.! !

!methodRemoval: AccountSummary #handle: stamp: 'AM 11/14/2020 17:25:03'!
handle: aTransaction

	summaryCollection add: (aTransaction class asString), ' for ', aTransaction value asString.!
!AccountSummary methodsFor: 'report' stamp: 'AM 11/14/2020 17:25:19' prior: 50882994!
handleDeposit: aDeposit

	self addStringRepresentationToSummary: aDeposit.! !
!AccountSummary methodsFor: 'report' stamp: 'AM 11/14/2020 17:25:35' prior: 50883000!
handleTransferDeposit: aTransferDeposit

	self addStringRepresentationToSummary: aTransferDeposit.! !
!AccountSummary methodsFor: 'report' stamp: 'AM 11/14/2020 17:25:49' prior: 50882986!
handleTransferWithdraw: aTransferWithdraw

	self addStringRepresentationToSummary: aTransferWithdraw.! !
!AccountSummary methodsFor: 'report' stamp: 'AM 11/14/2020 17:25:59' prior: 50882979!
handleWithdraw: aWithdraw

	self addStringRepresentationToSummary: aWithdraw.! !

TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'AM 11/14/2020 17:26:36'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetTest methodsFor: 'tests' stamp: 'AM 11/14/2020 17:28:08'!
test01EmptyAccountTransferNetIsZero

	| account transferNetReport |! !
!TransferNetTest methodsFor: 'tests' stamp: 'AM 11/14/2020 17:29:43' prior: 50883086!
test01EmptyAccountTransferNetIsZero

	| account transferNetReport |
	
	account := ReceptiveAccount new.
	transferNetReport := TransferNet for: account.
	
	self assert: (transferNetReport report) equals: 0.! !

!testRun: #TransferNetTest #test01EmptyAccountTransferNetIsZero stamp: 'AM 11/14/2020 17:29:44'!
ERROR!
!TransferNet methodsFor: 'no messages' stamp: 'AM 11/14/2020 17:30:09' overrides: 50882161!
report

	^0.! !

!testRun: #TransferNetTest #test01EmptyAccountTransferNetIsZero stamp: 'AM 11/14/2020 17:30:19'!
PASSED!

!testRun: #TransferNetTest #test01EmptyAccountTransferNetIsZero stamp: 'AM 11/14/2020 17:30:19'!
PASSED!
!TransferNetTest methodsFor: 'tests' stamp: 'AM 11/14/2020 17:33:17'!
test02AccountWithTransfersTransferNetReportMatchesNet

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := TransferNet for: account1.
	
	self assert: (transferNetReport report) equals: -500.! !

!testRun: #TransferNetTest #test02AccountWithTransfersTransferNetReportMatchesNet stamp: 'AM 11/14/2020 17:33:21'!
FAILURE!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'AM 11/14/2020 17:34:12' prior: 50883104 overrides: 50882161!
report

	account transactions do: [:aTransaction | aTransaction reportTo: self].
	^netTotal.! !
!TransferNetTest methodsFor: 'tests' stamp: 'AM 11/14/2020 17:34:47'!
test02AccountWithTransfersWithdrawTransferNetReportMatchesNet

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := TransferNet for: account1.
	
	self assert: (transferNetReport report) equals: -500.! !
!TransferNetTest methodsFor: 'tests' stamp: 'AM 11/14/2020 17:35:01'!
test02AccountWithTransfersWithdrawTransferNetReportWithdrawAmount

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := TransferNet for: account1.
	
	self assert: (transferNetReport report) equals: -500.! !

!methodRemoval: TransferNetTest #test02AccountWithTransfersWithdrawTransferNetReportMatchesNet stamp: 'AM 11/14/2020 17:35:04'!
test02AccountWithTransfersWithdrawTransferNetReportMatchesNet

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := TransferNet for: account1.
	
	self assert: (transferNetReport report) equals: -500.!

!methodRemoval: TransferNetTest #test02AccountWithTransfersTransferNetReportMatchesNet stamp: 'AM 11/14/2020 17:35:12'!
test02AccountWithTransfersTransferNetReportMatchesNet

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := TransferNet for: account1.
	
	self assert: (transferNetReport report) equals: -500.!
!TransferNetTest methodsFor: 'tests' stamp: 'AM 11/14/2020 17:36:25'!
test02TransferNetReportForAccountWithTransferWithdrawMatchesWithdrawAmount

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := TransferNet for: account1.
	
	self assert: (transferNetReport report) equals: -500.! !

!methodRemoval: TransferNetTest #test02AccountWithTransfersWithdrawTransferNetReportWithdrawAmount stamp: 'AM 11/14/2020 17:36:25'!
test02AccountWithTransfersWithdrawTransferNetReportWithdrawAmount

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := TransferNet for: account1.
	
	self assert: (transferNetReport report) equals: -500.!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'AM 11/14/2020 17:37:37'!
handleTransferWithdraw: aTransferWithdraw

	netTotal := netTotal - aTransferWithdraw value.! !
!TransferNet methodsFor: 'initialization' stamp: 'AM 11/14/2020 17:39:03' overrides: 50882623!
initializeFor: anAccount

	account := anAccount.
	netTotal := 0.! !

!testRun: #TransferNetTest #test02TransferNetReportForAccountWithTransferWithdrawMatchesWithdrawAmount stamp: 'AM 11/14/2020 17:39:14'!
PASSED!

!testRun: #TransferNetTest #test01EmptyAccountTransferNetIsZero stamp: 'AM 11/14/2020 17:39:14'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetReportForAccountWithTransferWithdrawMatchesWithdrawAmount stamp: 'AM 11/14/2020 17:39:14'!
PASSED!
!TransferNetTest methodsFor: 'tests' stamp: 'AM 11/14/2020 17:39:39'!
test03TransferNetReportForAccountWithTransferDepositMatchesDepositAmount

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := TransferNet for: account2.
	
	self assert: (transferNetReport report) equals: 500.! !

!testRun: #TransferNetTest #test03TransferNetReportForAccountWithTransferDepositMatchesDepositAmount stamp: 'AM 11/14/2020 17:39:41'!
ERROR!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'AM 11/14/2020 17:39:56'!
handleTransferDeposit: aTransferWithdraw

	netTotal := netTotal + aTransferWithdraw value.! !

!testRun: #TransferNetTest #test03TransferNetReportForAccountWithTransferDepositMatchesDepositAmount stamp: 'AM 11/14/2020 17:40:03'!
PASSED!

!testRun: #TransferNetTest #test01EmptyAccountTransferNetIsZero stamp: 'AM 11/14/2020 17:40:03'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetReportForAccountWithTransferWithdrawMatchesWithdrawAmount stamp: 'AM 11/14/2020 17:40:03'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetReportForAccountWithTransferDepositMatchesDepositAmount stamp: 'AM 11/14/2020 17:40:03'!
PASSED!
!TransferNetTest methodsFor: 'tests' stamp: 'AM 11/14/2020 17:40:56'!
test03NonTransferTransactionsDontAffectTrasferNet

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := TransferNet for: account2.
	
	self assert: (transferNetReport report) equals: 500.! !
!TransferNetTest methodsFor: 'tests' stamp: 'AM 11/14/2020 17:41:36' prior: 50883285!
test03NonTransferTransactionsDontAffectTrasferNet

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account1 register: (Deposit for: 500).
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := TransferNet for: account2.
	
	self assert: (transferNetReport report) equals: 500.! !
!TransferNetTest methodsFor: 'tests' stamp: 'AM 11/14/2020 17:41:59' prior: 50883298!
test03NonTransferTransactionsDontAffectTrasferNet

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account1 register: (Deposit for: 500).
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := TransferNet for: account1.
	
	self assert: (transferNetReport report) equals: -500.! !

!testRun: #TransferNetTest #test03NonTransferTransactionsDontAffectTrasferNet stamp: 'AM 11/14/2020 17:42:01'!
ERROR!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'AM 11/14/2020 17:42:18'!
handleDeposit: aTransferWithdraw

	netTotal := netTotal + aTransferWithdraw value.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'AM 11/14/2020 17:42:49' prior: 50883331!
handleDeposit: aTransferWithdraw
	
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'AM 11/14/2020 17:43:02' prior: 50883337!
handleDeposit: aTransferWithdraw
	
	"Deposits dont affect transfer net"! !
!TransferNetTest methodsFor: 'tests' stamp: 'AM 11/14/2020 17:43:12'!
test04TransferNetReportForAccountWithTransferDepositMatchesDepositAmount

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := TransferNet for: account2.
	
	self assert: (transferNetReport report) equals: 500.! !

!methodRemoval: TransferNetTest #test03TransferNetReportForAccountWithTransferDepositMatchesDepositAmount stamp: 'AM 11/14/2020 17:43:15'!
test03TransferNetReportForAccountWithTransferDepositMatchesDepositAmount

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := TransferNet for: account2.
	
	self assert: (transferNetReport report) equals: 500.!
!TransferNetTest methodsFor: 'tests' stamp: 'AM 11/14/2020 17:43:39'!
test03TransferNetReportForAccountWithTransferDepositMatchesDepositAmount

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := TransferNet for: account2.
	
	self assert: (transferNetReport report) equals: 500.! !

!methodRemoval: TransferNetTest #test04TransferNetReportForAccountWithTransferDepositMatchesDepositAmount stamp: 'AM 11/14/2020 17:43:43'!
test04TransferNetReportForAccountWithTransferDepositMatchesDepositAmount

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := TransferNet for: account2.
	
	self assert: (transferNetReport report) equals: 500.!
!TransferNetTest methodsFor: 'tests' stamp: 'AM 11/14/2020 17:43:48'!
test04NonTransferTransactionsDontAffectTrasferNet

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account1 register: (Deposit for: 500).
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := TransferNet for: account1.
	
	self assert: (transferNetReport report) equals: -500.! !

!methodRemoval: TransferNetTest #test03NonTransferTransactionsDontAffectTrasferNet stamp: 'AM 11/14/2020 17:43:50'!
test03NonTransferTransactionsDontAffectTrasferNet

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account1 register: (Deposit for: 500).
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := TransferNet for: account1.
	
	self assert: (transferNetReport report) equals: -500.!
!TransferNetTest methodsFor: 'tests' stamp: 'AM 11/14/2020 17:43:58' prior: 50883405!
test04NonTransferTransactionsDontAffectTrasferNet

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account1 register: (Deposit for: 600).
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := TransferNet for: account1.
	
	self assert: (transferNetReport report) equals: -500.! !
!TransferNetTest methodsFor: 'tests' stamp: 'AM 11/14/2020 17:44:19' prior: 50883435!
test04NonTransferTransactionsDontAffectTrasferNet

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account1 register: (Deposit for: 600).
	account1 register: (Withdraw for: 100).
	
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := TransferNet for: account1.
	
	self assert: (transferNetReport report) equals: -500.! !

!testRun: #TransferNetTest #test04NonTransferTransactionsDontAffectTrasferNet stamp: 'AM 11/14/2020 17:44:27'!
ERROR!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'AM 11/14/2020 17:44:52'!
handleWithdraw: aWithdraw
	
	"Withdraws dont affect transfer net"! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'AM 11/14/2020 17:45:04' prior: 50883469!
handleWithdraw: aWithdrawTransaction
	
	"Withdraws dont affect transfer net"! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'AM 11/14/2020 17:45:13' prior: 50883342!
handleDeposit: aDepositTransaction
	
	"Deposits dont affect transfer net"! !

!testRun: #TransferNetTest #test04NonTransferTransactionsDontAffectTrasferNet stamp: 'AM 11/14/2020 17:45:21'!
PASSED!

!testRun: #TransferNetTest #test01EmptyAccountTransferNetIsZero stamp: 'AM 11/14/2020 17:45:21'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetReportForAccountWithTransferWithdrawMatchesWithdrawAmount stamp: 'AM 11/14/2020 17:45:21'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetReportForAccountWithTransferDepositMatchesDepositAmount stamp: 'AM 11/14/2020 17:45:21'!
PASSED!

!testRun: #TransferNetTest #test04NonTransferTransactionsDontAffectTrasferNet stamp: 'AM 11/14/2020 17:45:21'!
PASSED!

----QUIT----(14 November 2020 17:49:17) CuisUniversity-4383.image priorSource: 17632279!

----STARTUP---- (15 November 2020 20:40:36) as C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CUIS\CuisUniversity-4383.image!


!methodRemoval: TransferDeposit #stringRep stamp: 'AM 11/15/2020 20:41:59'!
stringRep

	^'Transfer deposit for ', self value asString. !

!methodRemoval: TransferWithdraw #stringRep stamp: 'AM 11/15/2020 20:42:05'!
stringRep

	^'Transfer withdraw for ', self value asString. !

!methodRemoval: Deposit #stringRep stamp: 'AM 11/15/2020 20:43:03'!
stringRep

	^'Deposit for ', value asString.!

!methodRemoval: Withdraw #stringRep stamp: 'AM 11/15/2020 20:43:07'!
stringRep

	^'Withdraw for ', value asString. !
!AccountSummary methodsFor: 'report' stamp: 'AM 11/15/2020 20:46:52' prior: 50882963 overrides: 50882161!
report

	account reportTransactionsTo: self.
	summaryCollection add: 'Balance = ', account balance asString.
	^summaryCollection.! !

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'AM 11/15/2020 20:49:41'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/15/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/15/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/15/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/15/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/15/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/15/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/15/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/15/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/15/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/15/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/15/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/15/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/15/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/15/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/15/2020 20:49:51'!
PASSED!

!testRun: #TransferTest #test01TransferKnowsTransferorAndTransferee stamp: 'AM 11/15/2020 20:49:56'!
PASSED!

!testRun: #TransferTest #test02TransferAmountReturnedCorrectly stamp: 'AM 11/15/2020 20:49:56'!
PASSED!

!testRun: #TransferTest #test03TransferAffectsTransferorBalanceCorrectly stamp: 'AM 11/15/2020 20:49:56'!
PASSED!

!testRun: #TransferTest #test04TransferAffectsTransfereeBalanceCorrectly stamp: 'AM 11/15/2020 20:49:56'!
PASSED!

!testRun: #TransferTest #test05TransferMustBeAPositiveNumber stamp: 'AM 11/15/2020 20:49:56'!
PASSED!

!testRun: #TransferTest #test06TransfersToAndFromTheSameAccountNotAllowed stamp: 'AM 11/15/2020 20:49:56'!
PASSED!
!Portfolio methodsFor: 'reports - private' stamp: 'AM 11/15/2020 20:52:43'!
reportTransactionsTo: aReport
	
	accounts do: [:account | account reportTransactionsTo: aReport].! !
!ReceptiveAccount methodsFor: 'reports - private' stamp: 'AM 11/15/2020 20:53:18'!
reportTransactionsTo: aReport
	
	transactions do: [:account | account reportTo: aReport].! !
!TransferNet methodsFor: 'report' stamp: 'AM 11/15/2020 20:53:53' prior: 50883132 overrides: 50882161!
report

	account reportTransactionsTo: self.
	^netTotal.! !

!testRun: #TransferNetTest #test01EmptyAccountTransferNetIsZero stamp: 'AM 11/15/2020 20:53:57'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetReportForAccountWithTransferWithdrawMatchesWithdrawAmount stamp: 'AM 11/15/2020 20:53:57'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetReportForAccountWithTransferDepositMatchesDepositAmount stamp: 'AM 11/15/2020 20:53:57'!
PASSED!

!testRun: #TransferNetTest #test04NonTransferTransactionsDontAffectTrasferNet stamp: 'AM 11/15/2020 20:53:57'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/15/2020 20:54:01'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalanceAndTransaction stamp: 'AM 11/15/2020 20:54:01'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/15/2020 20:54:01'!
FAILURE!

!testRun: #AccountSummaryTest #test04SummaryForEmptyPorfolioIsZeroBalance stamp: 'AM 11/15/2020 20:54:01'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryForPorfolioWithOneAccountMatchesAccountTransactionsAndBalance stamp: 'AM 11/15/2020 20:54:01'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryForPorfolioWithOnePortfolioMatchesPortfolioTransactionsAndBalance stamp: 'AM 11/15/2020 20:54:01'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/15/2020 20:54:01'!
FAILURE!
!AccountSummaryTest methodsFor: 'tests' stamp: 'AM 11/15/2020 20:56:09' prior: 50882352!
test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions

	| account1 account2 accountSummary expectedReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account1 register: (Deposit for: 100).
	Transfer from: account1 to: account2 for: 50. 
	accountSummary := AccountSummary for: account1.
	expectedReport := OrderedCollection with: 'Deposit for 100' with: 'TransferWithdraw for 50' with: 'Balance = 50'.
	
	self assert: (expectedReport) equals: accountSummary report. ! !

!testRun: #AccountSummaryTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/15/2020 20:56:59'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalanceAndTransaction stamp: 'AM 11/15/2020 20:56:59'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/15/2020 20:56:59'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryForEmptyPorfolioIsZeroBalance stamp: 'AM 11/15/2020 20:56:59'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryForPorfolioWithOneAccountMatchesAccountTransactionsAndBalance stamp: 'AM 11/15/2020 20:56:59'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryForPorfolioWithOnePortfolioMatchesPortfolioTransactionsAndBalance stamp: 'AM 11/15/2020 20:56:59'!
PASSED!
!ReceptiveAccount class methodsFor: 'nil' stamp: 'AM 11/15/2020 21:07:20'!
named: aName

	! !

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'AM 11/15/2020 21:07:32'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'AM 11/15/2020 21:07:46' prior: 50881474 overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount class methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 21:08:11' prior: 50883738!
named: aName

	^self new initializeWithName: aName.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'AM 11/15/2020 21:08:31'!
initializeWithName: aName

	! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'AM 11/15/2020 21:08:41' prior: 50883767!
initializeWithName: aName

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'AM 11/15/2020 21:08:51' prior: 50883771!
initializeWithName: aName

	super initialize.
	transactions := OrderedCollection new.
	name := aName.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'AM 11/15/2020 21:09:48' prior: 50883756 overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.
	"Default name for accounts created without a name"
	name := 'Receptive Account'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 21:11:52'!
named: aName with: anAccount

	^(self new initializeWithName: aName)
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 21:12:18'!
named: aName with: anAccount with: anotherAccount

	^(self new initializeWithName: aName)
		add: anAccount;
		add: anotherAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 21:12:36'!
named: aName 

	^self new initializeWithName: aName! !

Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'AM 11/15/2020 21:12:52'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'initialization' stamp: 'AM 11/15/2020 21:13:08'!
initializeWithName: aName

	! !
!Portfolio methodsFor: 'initialization' stamp: 'AM 11/15/2020 21:13:25' prior: 50883823!
initializeWithName: aName

	accounts := OrderedCollection new.
	parents := OrderedCollection new.
	name := aName.! !
!Portfolio methodsFor: 'initialization' stamp: 'AM 11/15/2020 21:13:56' prior: 50880791 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.
	"Default name for portfolio"
	name := 'Portfolio'! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'AM 11/15/2020 21:14:04' prior: 50883784 overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.
	"Default name for accounts created without a name"
	name := 'Receptive account'! !

Reports subclass: #PortfolioStructure
	instanceVariableNames: 'structure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioStructure category: 'Portfolio-Solucion' stamp: 'AM 11/15/2020 21:19:53'!
Reports subclass: #PortfolioStructure
	instanceVariableNames: 'structure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportsTest category: 'Portfolio-Solucion' stamp: 'AM 11/15/2020 21:22:41'!
TestCase subclass: #ReportsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'AM 11/15/2020 21:22:41'!
ReportsTest subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

ReportsTest subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'AM 11/15/2020 21:23:08'!
ReportsTest subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Account subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'AM 11/15/2020 21:23:32'!
Account subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'AM 11/15/2020 21:23:55'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

ReportsTest subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'AM 11/15/2020 21:24:10'!
ReportsTest subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #AccountSummaryTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/15/2020 21:24:25'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalanceAndTransaction stamp: 'AM 11/15/2020 21:24:25'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/15/2020 21:24:25'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryForEmptyPorfolioIsZeroBalance stamp: 'AM 11/15/2020 21:24:25'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryForPorfolioWithOneAccountMatchesAccountTransactionsAndBalance stamp: 'AM 11/15/2020 21:24:25'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryForPorfolioWithOnePortfolioMatchesPortfolioTransactionsAndBalance stamp: 'AM 11/15/2020 21:24:25'!
PASSED!

!classRenamed: #ReportsTest as: #ReportsTests stamp: 'AM 11/15/2020 21:24:31'!
Smalltalk renameClassNamed: #ReportsTest as: #ReportsTests!

!classRenamed: #ReportsTests as: #ReportTests stamp: 'AM 11/15/2020 21:24:42'!
Smalltalk renameClassNamed: #ReportsTests as: #ReportTests!

!testRun: #AccountSummaryTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/15/2020 21:25:06'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalanceAndTransaction stamp: 'AM 11/15/2020 21:25:06'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/15/2020 21:25:07'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryForEmptyPorfolioIsZeroBalance stamp: 'AM 11/15/2020 21:25:07'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryForPorfolioWithOneAccountMatchesAccountTransactionsAndBalance stamp: 'AM 11/15/2020 21:25:07'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryForPorfolioWithOnePortfolioMatchesPortfolioTransactionsAndBalance stamp: 'AM 11/15/2020 21:25:07'!
PASSED!

!testRun: #TransferNetTest #test01EmptyAccountTransferNetIsZero stamp: 'AM 11/15/2020 21:25:09'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetReportForAccountWithTransferWithdrawMatchesWithdrawAmount stamp: 'AM 11/15/2020 21:25:09'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetReportForAccountWithTransferDepositMatchesDepositAmount stamp: 'AM 11/15/2020 21:25:09'!
PASSED!

!testRun: #TransferNetTest #test04NonTransferTransactionsDontAffectTrasferNet stamp: 'AM 11/15/2020 21:25:09'!
PASSED!
!PortfolioStructure methodsFor: 'nil' stamp: 'AM 11/15/2020 21:32:59' overrides: 50882161!
report
	
	account reportStructureTo: self.! !
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 21:33:10' prior: 50884006 overrides: 50882161!
report
	
	account reportStructureTo: self.
	^structure.! !
!PortfolioStructure methodsFor: 'report' stamp: 'AM 11/15/2020 21:39:44' prior: 50884012 overrides: 50882161!
report
	
	account reportStructureAtLevel: 0 to: self.
	^structure.! !
!Portfolio methodsFor: 'reports - private' stamp: 'AM 11/15/2020 21:43:07'!
reportStructureAtLevel: levelNumber to: aReport
	
	aReport addToStructure: name copy.
	accounts do: [:account | account reportTransactionsTo: aReport].! !
!PortfolioStructure methodsFor: 'report' stamp: 'AM 11/15/2020 21:45:15' prior: 50884018 overrides: 50882161!
report
	
	account reportStructureTo: self indentedWith: ''.
	^structure.! !
!PortfolioStructure methodsFor: 'report' stamp: 'AM 11/15/2020 21:45:34' prior: 50884032 overrides: 50882161!
report
	
	account reportStructureTo: self indentedBy: ''.
	^structure.! !
!Portfolio methodsFor: 'reports - private' stamp: 'AM 11/15/2020 21:46:26'!
reportStructureTo: aReport indentedBy: aIndentationString
	
	aReport addToStructure: name copy.
	accounts do: [:account | account reportTransactionsTo: aReport].! !
!Portfolio methodsFor: 'reports - private' stamp: 'AM 11/15/2020 21:46:39' prior: 50884043!
reportStructureTo: aReport indentedBy: anIndentationString
	
	aReport addToStructure: name copy.
	accounts do: [:account | account reportTransactionsTo: aReport].! !

!methodRemoval: Portfolio #reportStructureAtLevel:to: stamp: 'AM 11/15/2020 21:46:43'!
reportStructureAtLevel: levelNumber to: aReport
	
	aReport addToStructure: name copy.
	accounts do: [:account | account reportTransactionsTo: aReport].!
!Portfolio methodsFor: 'reports - private' stamp: 'AM 11/15/2020 21:47:48' prior: 50884052!
reportStructureTo: aReport indentedBy: anIndentationString
	
	aReport addToStructure: (name copy),anIndentationString.
	accounts do: [:account | account reportStructureTo: aReport indentedBy: (anIndentationString, '    ')].! !
!Portfolio methodsFor: 'reports - private' stamp: 'AM 11/15/2020 21:48:02' prior: 50884068!
reportStructureTo: aReport indentedBy: anIndentationString
	
	aReport addToStructure: anIndentationString,(name copy).
	accounts do: [:account | account reportStructureTo: aReport indentedBy: (anIndentationString, '    ')].! !
!Portfolio methodsFor: 'reports - private' stamp: 'AM 11/15/2020 21:48:11' prior: 50884078!
reportStructureTo: aReport indentedBy: anIndentationString
	
	aReport addToStructure: (anIndentationString,(name copy)).
	accounts do: [:account | account reportStructureTo: aReport indentedBy: (anIndentationString, '    ')].! !
!PortfolioStructure methodsFor: 'report - private' stamp: 'AM 11/15/2020 21:49:14'!
addToStructure: aStructureEntry

	structure add: aStructureEntry.! !
!ReceptiveAccount methodsFor: 'reports - private' stamp: 'AM 11/15/2020 21:51:15'!
reportStructureTo: aReport indentedBy: anIndentationString
	
	aReport addToStructure: (anIndentationString,(name copy)).
	! !

ReportTests subclass: #AccountStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountStructure category: 'Portfolio-Solucion' stamp: 'AM 11/15/2020 22:19:23'!
ReportTests subclass: #AccountStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

ReportTests subclass: #AccountStructureTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountStructureTest category: 'Portfolio-Solucion' stamp: 'AM 11/15/2020 22:19:36'!
ReportTests subclass: #AccountStructureTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountStructure stamp: 'AM 11/15/2020 22:19:45'!
ReportTests subclass: #AccountStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #PortfolioStructure as: #AccountStructure stamp: 'AM 11/15/2020 22:19:53'!
Smalltalk renameClassNamed: #PortfolioStructure as: #AccountStructure!

!classRenamed: #TransferNet as: #AccountTransferNet stamp: 'AM 11/15/2020 22:20:16'!
Smalltalk renameClassNamed: #TransferNet as: #AccountTransferNet!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:20:16' prior: 50883193!
test02TransferNetReportForAccountWithTransferWithdrawMatchesWithdrawAmount

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := AccountTransferNet for: account1.
	
	self assert: (transferNetReport report) equals: -500.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:20:16' prior: 50883091!
test01EmptyAccountTransferNetIsZero

	| account transferNetReport |
	
	account := ReceptiveAccount new.
	transferNetReport := AccountTransferNet for: account.
	
	self assert: (transferNetReport report) equals: 0.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:20:16' prior: 50883450!
test04NonTransferTransactionsDontAffectTrasferNet

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account1 register: (Deposit for: 600).
	account1 register: (Withdraw for: 100).
	
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := AccountTransferNet for: account1.
	
	self assert: (transferNetReport report) equals: -500.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:20:16' prior: 50883376!
test03TransferNetReportForAccountWithTransferDepositMatchesDepositAmount

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := AccountTransferNet for: account2.
	
	self assert: (transferNetReport report) equals: 500.! !

!classRenamed: #TransferNetTest as: #AccountTransferNetTest stamp: 'AM 11/15/2020 22:20:40'!
Smalltalk renameClassNamed: #TransferNetTest as: #AccountTransferNetTest!

!classRenamed: #Reports as: #AccountReports stamp: 'AM 11/15/2020 22:21:00'!
Smalltalk renameClassNamed: #Reports as: #AccountReports!

!classRenamed: #AccountStructure as: #Structure stamp: 'AM 11/15/2020 22:21:09'!
Smalltalk renameClassNamed: #AccountStructure as: #Structure!

!classRenamed: #AccountSummary as: #Summary stamp: 'AM 11/15/2020 22:21:23'!
Smalltalk renameClassNamed: #AccountSummary as: #Summary!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:21:23' prior: 50882730!
test02AccountSummaryForAccountWithOneTransactionMatchesBalanceAndTransaction

	| account accountSummary expectedReport |
	
	account := ReceptiveAccount new.
	account register: (Deposit for: 100).
	accountSummary := Summary for: account.
	expectedReport := OrderedCollection with: 'Deposit for 100' with: 'Balance = 100'.
	
	self assert: (expectedReport) equals: accountSummary report. ! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:21:23' prior: 50882889!
test06SummaryForPorfolioWithOnePortfolioMatchesPortfolioTransactionsAndBalance

	| portfolioChild portfolio account expectedReport accountSummary|
	
	account := ReceptiveAccount new.
	account register: (Deposit for: 100); register: (Withdraw for: 100) .
	portfolioChild := Portfolio new.
	portfolioChild add: account.
	portfolio := Portfolio new.
	portfolio add: portfolioChild.
	
	expectedReport := OrderedCollection with: 'Deposit for 100' with: 'Withdraw for 100' with: 'Balance = 0'.
	accountSummary := Summary for: portfolio.
	
	self assert: (expectedReport) equals: accountSummary report. ! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:21:23' prior: 50882166!
test01AccountSummaryForEmptyAccountIsZeroBalance

	| account accountSummary |
	account := ReceptiveAccount new.
	accountSummary := Summary for: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary report. ! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:21:23' prior: 50882844!
test05SummaryForPorfolioWithOneAccountMatchesAccountTransactionsAndBalance

	| portfolio account expectedReport accountSummary|
	
	account := ReceptiveAccount new.
	account register: (Deposit for: 100); register: (Withdraw for: 100) .
	portfolio := Portfolio new.
	portfolio add: account.
	
	expectedReport := OrderedCollection with: 'Deposit for 100' with: 'Withdraw for 100' with: 'Balance = 0'.
	accountSummary := Summary for: portfolio.
	
	self assert: (expectedReport) equals: accountSummary report. ! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:21:23' prior: 50883693!
test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions

	| account1 account2 accountSummary expectedReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account1 register: (Deposit for: 100).
	Transfer from: account1 to: account2 for: 50. 
	accountSummary := Summary for: account1.
	expectedReport := OrderedCollection with: 'Deposit for 100' with: 'TransferWithdraw for 50' with: 'Balance = 50'.
	
	self assert: (expectedReport) equals: accountSummary report. ! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:21:23' prior: 50882761!
test04SummaryForEmptyPorfolioIsZeroBalance

	| portfolio expectedReport accountSummary|
	
	portfolio := Portfolio new.
	expectedReport := OrderedCollection with: 'Balance = 0'.
	accountSummary := Summary for: portfolio.
	
	self assert: (expectedReport) equals: accountSummary report. ! !

!classRenamed: #Structure as: #Structure1 stamp: 'AM 11/15/2020 22:21:37'!
Smalltalk renameClassNamed: #Structure as: #Structure1!

!classRenamed: #Structure1 as: #Structure stamp: 'AM 11/15/2020 22:21:43'!
Smalltalk renameClassNamed: #Structure1 as: #Structure!

----QUIT----(15 November 2020 22:22:20) CuisUniversity-4383.image priorSource: 17659366!

----STARTUP---- (15 November 2020 22:22:27) as C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CUIS\CuisUniversity-4383.image!


AccountReports subclass: #TransferNet
	instanceVariableNames: 'netTotal'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'AM 11/15/2020 22:23:30'!
AccountReports subclass: #TransferNet
	instanceVariableNames: 'netTotal'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferNet stamp: 'AM 11/15/2020 22:23:46'!
AccountReports subclass: #TransferNet
	instanceVariableNames: 'netTotal'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #AccountTransferNet as: #TransferNet stamp: 'AM 11/15/2020 22:23:54'!
Smalltalk renameClassNamed: #AccountTransferNet as: #TransferNet!
!AccountTransferNetTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:23:54' prior: 50884167!
test01EmptyAccountTransferNetIsZero

	| account transferNetReport |
	
	account := ReceptiveAccount new.
	transferNetReport := TransferNet for: account.
	
	self assert: (transferNetReport report) equals: 0.! !
!AccountTransferNetTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:23:54' prior: 50884152!
test02TransferNetReportForAccountWithTransferWithdrawMatchesWithdrawAmount

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := TransferNet for: account1.
	
	self assert: (transferNetReport report) equals: -500.! !
!AccountTransferNetTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:23:54' prior: 50884194!
test03TransferNetReportForAccountWithTransferDepositMatchesDepositAmount

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := TransferNet for: account2.
	
	self assert: (transferNetReport report) equals: 500.! !
!AccountTransferNetTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:23:54' prior: 50884177!
test04NonTransferTransactionsDontAffectTrasferNet

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account1 register: (Deposit for: 600).
	account1 register: (Withdraw for: 100).
	
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := TransferNet for: account1.
	
	self assert: (transferNetReport report) equals: -500.! !

!testRun: #AccountSummaryTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/15/2020 22:24:21'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalanceAndTransaction stamp: 'AM 11/15/2020 22:24:21'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/15/2020 22:24:21'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryForEmptyPorfolioIsZeroBalance stamp: 'AM 11/15/2020 22:24:21'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryForPorfolioWithOneAccountMatchesAccountTransactionsAndBalance stamp: 'AM 11/15/2020 22:24:21'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryForPorfolioWithOnePortfolioMatchesPortfolioTransactionsAndBalance stamp: 'AM 11/15/2020 22:24:21'!
PASSED!

!testRun: #AccountTransferNetTest #test01EmptyAccountTransferNetIsZero stamp: 'AM 11/15/2020 22:24:25'!
PASSED!

!testRun: #AccountTransferNetTest #test02TransferNetReportForAccountWithTransferWithdrawMatchesWithdrawAmount stamp: 'AM 11/15/2020 22:24:25'!
PASSED!

!testRun: #AccountTransferNetTest #test03TransferNetReportForAccountWithTransferDepositMatchesDepositAmount stamp: 'AM 11/15/2020 22:24:25'!
PASSED!

!testRun: #AccountTransferNetTest #test04NonTransferTransactionsDontAffectTrasferNet stamp: 'AM 11/15/2020 22:24:25'!
PASSED!

!classRenamed: #AccountStructureTest as: #StructureReportTest stamp: 'AM 11/15/2020 22:24:51'!
Smalltalk renameClassNamed: #AccountStructureTest as: #StructureReportTest!

!classRenamed: #AccountTransferNetTest as: #TransferNetReportTest stamp: 'AM 11/15/2020 22:25:08'!
Smalltalk renameClassNamed: #AccountTransferNetTest as: #TransferNetReportTest!

!classRenamed: #AccountSummaryTest as: #SummaryReportTest stamp: 'AM 11/15/2020 22:25:21'!
Smalltalk renameClassNamed: #AccountSummaryTest as: #SummaryReportTest!

!testRun: #SummaryReportTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/15/2020 22:25:26'!
PASSED!

!testRun: #SummaryReportTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalanceAndTransaction stamp: 'AM 11/15/2020 22:25:26'!
PASSED!

!testRun: #SummaryReportTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/15/2020 22:25:26'!
PASSED!

!testRun: #SummaryReportTest #test04SummaryForEmptyPorfolioIsZeroBalance stamp: 'AM 11/15/2020 22:25:26'!
PASSED!

!testRun: #SummaryReportTest #test05SummaryForPorfolioWithOneAccountMatchesAccountTransactionsAndBalance stamp: 'AM 11/15/2020 22:25:26'!
PASSED!

!testRun: #SummaryReportTest #test06SummaryForPorfolioWithOnePortfolioMatchesPortfolioTransactionsAndBalance stamp: 'AM 11/15/2020 22:25:26'!
PASSED!

!testRun: #TransferNetReportTest #test01EmptyAccountTransferNetIsZero stamp: 'AM 11/15/2020 22:25:29'!
PASSED!

!testRun: #TransferNetReportTest #test02TransferNetReportForAccountWithTransferWithdrawMatchesWithdrawAmount stamp: 'AM 11/15/2020 22:25:29'!
PASSED!

!testRun: #TransferNetReportTest #test03TransferNetReportForAccountWithTransferDepositMatchesDepositAmount stamp: 'AM 11/15/2020 22:25:29'!
PASSED!

!testRun: #TransferNetReportTest #test04NonTransferTransactionsDontAffectTrasferNet stamp: 'AM 11/15/2020 22:25:29'!
PASSED!
!StructureReportTest methodsFor: 'nil' stamp: 'AM 11/15/2020 22:29:06'!
test01ReceptiveAccountStructureIsAccountName

	| account report expectedReport|
	
	account := ReceptiveAccount named: 'Account'.
	report := Structure for: account.
	
	expectedReport := OrderedCollection with: 'Account'.
	
	self assert: (report report) equals: expectedReport.! !

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/15/2020 22:29:09'!
ERROR!

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/15/2020 22:29:09'!
ERROR!
!Structure methodsFor: 'initialization' stamp: 'AM 11/15/2020 22:30:06' overrides: 16896425!
initialize 

	structure := OrderedCollection new.! !

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/15/2020 22:30:12'!
PASSED!

!classRenamed: #Structure as: #StructureReport stamp: 'AM 11/15/2020 22:30:25'!
Smalltalk renameClassNamed: #Structure as: #StructureReport!
!StructureReportTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:30:26' prior: 50884525!
test01ReceptiveAccountStructureIsAccountName

	| account report expectedReport|
	
	account := ReceptiveAccount named: 'Account'.
	report := StructureReport for: account.
	
	expectedReport := OrderedCollection with: 'Account'.
	
	self assert: (report report) equals: expectedReport.! !

!classRenamed: #Summary as: #SummaryReport stamp: 'AM 11/15/2020 22:30:33'!
Smalltalk renameClassNamed: #Summary as: #SummaryReport!
!SummaryReportTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:30:33' prior: 50884276!
test05SummaryForPorfolioWithOneAccountMatchesAccountTransactionsAndBalance

	| portfolio account expectedReport accountSummary|
	
	account := ReceptiveAccount new.
	account register: (Deposit for: 100); register: (Withdraw for: 100) .
	portfolio := Portfolio new.
	portfolio add: account.
	
	expectedReport := OrderedCollection with: 'Deposit for 100' with: 'Withdraw for 100' with: 'Balance = 0'.
	accountSummary := SummaryReport for: portfolio.
	
	self assert: (expectedReport) equals: accountSummary report. ! !
!SummaryReportTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:30:33' prior: 50884296!
test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions

	| account1 account2 accountSummary expectedReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account1 register: (Deposit for: 100).
	Transfer from: account1 to: account2 for: 50. 
	accountSummary := SummaryReport for: account1.
	expectedReport := OrderedCollection with: 'Deposit for 100' with: 'TransferWithdraw for 50' with: 'Balance = 50'.
	
	self assert: (expectedReport) equals: accountSummary report. ! !
!SummaryReportTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:30:33' prior: 50884227!
test02AccountSummaryForAccountWithOneTransactionMatchesBalanceAndTransaction

	| account accountSummary expectedReport |
	
	account := ReceptiveAccount new.
	account register: (Deposit for: 100).
	accountSummary := SummaryReport for: account.
	expectedReport := OrderedCollection with: 'Deposit for 100' with: 'Balance = 100'.
	
	self assert: (expectedReport) equals: accountSummary report. ! !
!SummaryReportTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:30:33' prior: 50884265!
test01AccountSummaryForEmptyAccountIsZeroBalance

	| account accountSummary |
	account := ReceptiveAccount new.
	accountSummary := SummaryReport for: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary report. ! !
!SummaryReportTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:30:33' prior: 50884243!
test06SummaryForPorfolioWithOnePortfolioMatchesPortfolioTransactionsAndBalance

	| portfolioChild portfolio account expectedReport accountSummary|
	
	account := ReceptiveAccount new.
	account register: (Deposit for: 100); register: (Withdraw for: 100) .
	portfolioChild := Portfolio new.
	portfolioChild add: account.
	portfolio := Portfolio new.
	portfolio add: portfolioChild.
	
	expectedReport := OrderedCollection with: 'Deposit for 100' with: 'Withdraw for 100' with: 'Balance = 0'.
	accountSummary := SummaryReport for: portfolio.
	
	self assert: (expectedReport) equals: accountSummary report. ! !
!SummaryReportTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:30:33' prior: 50884316!
test04SummaryForEmptyPorfolioIsZeroBalance

	| portfolio expectedReport accountSummary|
	
	portfolio := Portfolio new.
	expectedReport := OrderedCollection with: 'Balance = 0'.
	accountSummary := SummaryReport for: portfolio.
	
	self assert: (expectedReport) equals: accountSummary report. ! !

!classRenamed: #TransferNet as: #TransferNetReport stamp: 'AM 11/15/2020 22:30:41'!
Smalltalk renameClassNamed: #TransferNet as: #TransferNetReport!
!TransferNetReportTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:30:41' prior: 50884408!
test04NonTransferTransactionsDontAffectTrasferNet

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account1 register: (Deposit for: 600).
	account1 register: (Withdraw for: 100).
	
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := TransferNetReport for: account1.
	
	self assert: (transferNetReport report) equals: -500.! !
!TransferNetReportTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:30:41' prior: 50884393!
test03TransferNetReportForAccountWithTransferDepositMatchesDepositAmount

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := TransferNetReport for: account2.
	
	self assert: (transferNetReport report) equals: 500.! !
!TransferNetReportTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:30:41' prior: 50884378!
test02TransferNetReportForAccountWithTransferWithdrawMatchesWithdrawAmount

	| account1 account2 transferNetReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer from: account1 to: account2 for: 500. 
	
	transferNetReport := TransferNetReport for: account1.
	
	self assert: (transferNetReport report) equals: -500.! !
!TransferNetReportTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:30:41' prior: 50884368!
test01EmptyAccountTransferNetIsZero

	| account transferNetReport |
	
	account := ReceptiveAccount new.
	transferNetReport := TransferNetReport for: account.
	
	self assert: (transferNetReport report) equals: 0.! !
!StructureReportTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:32:33'!
test02PortfolioWithAccountDisplaysProperIndentation

	| portfolio account report expectedReport|
	
	account := ReceptiveAccount named: 'Account'.
	portfolio := Portfolio named: 'Portfolio' with: account.
	report := StructureReport for: account.
	
	expectedReport := OrderedCollection with: 'Account'.
	
	self assert: (report report) equals: expectedReport.! !
!StructureReportTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:33:10' prior: 50884740!
test02PortfolioWithAccountDisplaysProperIndentation

	| portfolio account report expectedReport|
	
	account := ReceptiveAccount named: 'Account'.
	portfolio := Portfolio named: 'Portfolio' with: account.
	report := StructureReport for: portfolio.
	
	expectedReport := OrderedCollection with: 'Portfolio' with: '    Account'.
	
	self assert: (report report) equals: expectedReport.! !

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/15/2020 22:33:16'!
PASSED!

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/15/2020 22:33:16'!
PASSED!

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/15/2020 22:33:16'!
PASSED!
!StructureReportTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:34:58'!
test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation

	| portfolio account1 account2 report expectedReport|
	
	account1 := ReceptiveAccount named: 'Account1'.
	account2 := ReceptiveAccount named: 'Account2'.
	portfolio := Portfolio named: 'Portfolio' with: account1 with: account2.
	report := StructureReport for: portfolio.
	
	expectedReport := OrderedCollection with: 'Portfolio' with: '    Account1' with: '    Account2'.
	
	self assert: (report report) equals: expectedReport.! !

!testRun: #StructureReportTest #test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation stamp: 'AM 11/15/2020 22:35:00'!
PASSED!

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/15/2020 22:35:00'!
PASSED!

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/15/2020 22:35:00'!
PASSED!

!testRun: #StructureReportTest #test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation stamp: 'AM 11/15/2020 22:35:00'!
PASSED!
!StructureReportTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:37:47'!
test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio

	| portfolio portfolioChild account report expectedReport|
	
	account := ReceptiveAccount named: 'Account'.
	portfolioChild := Portfolio named: 'Portfolio child' with: account.
	portfolio := Portfolio named: 'Portfolio' with: portfolioChild.
	report := StructureReport for: portfolio.
	
	expectedReport := OrderedCollection with: 'Portfolio' with: '    Portfolio child' with: '        Account1'.
	
	self assert: (report report) equals: expectedReport.! !

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/15/2020 22:37:49'!
FAILURE!
!StructureReportTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:37:58' prior: 50884817!
test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio

	| portfolio portfolioChild account report expectedReport|
	
	account := ReceptiveAccount named: 'Account'.
	portfolioChild := Portfolio named: 'Portfolio child' with: account.
	portfolio := Portfolio named: 'Portfolio' with: portfolioChild.
	report := StructureReport for: portfolio.
	
	expectedReport := OrderedCollection with: 'Portfolio' with: '    Portfolio child' with: '        Account'.
	
	self assert: (report report) equals: expectedReport.! !

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/15/2020 22:38:00'!
PASSED!

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/15/2020 22:38:00'!
PASSED!

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/15/2020 22:38:00'!
PASSED!

!testRun: #StructureReportTest #test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation stamp: 'AM 11/15/2020 22:38:00'!
PASSED!

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/15/2020 22:38:00'!
PASSED!

'        Account'!
!StructureReportTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:39:26'!
test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio

	| portfolio portfolioChild account report expectedReport|
	
	account := ReceptiveAccount named: 'Account'.
	portfolioChild := Portfolio named: 'Portfolio child' with: account.
	portfolio := Portfolio named: 'Portfolio' with: portfolioChild.
	report := StructureReport for: portfolio.
	
	expectedReport := OrderedCollection with: 'Portfolio' with: '    Portfolio child' with: '        Account'.
	
	self assert: (report report) equals: expectedReport.! !
!StructureReportTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:40:40' prior: 50884884!
test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio

	| portfolio portfolioChild account1 account2 report expectedReport|
	
	account1 := ReceptiveAccount named: 'Account1'.
	account2 := ReceptiveAccount named: 'Account2'.
	portfolioChild := Portfolio named: 'Portfolio child' with: account1.
	portfolio := Portfolio named: 'Portfolio' with: portfolioChild with: account2.
	report := StructureReport for: portfolio.
	
	expectedReport := OrderedCollection with: 'Portfolio' with: '    Portfolio child' with: '        Account1' with: '    Account2'.
	
	self assert: (report report) equals: expectedReport.! !

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/15/2020 22:40:41'!
PASSED!

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/15/2020 22:40:41'!
PASSED!

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/15/2020 22:40:41'!
PASSED!

!testRun: #StructureReportTest #test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation stamp: 'AM 11/15/2020 22:40:41'!
PASSED!

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/15/2020 22:40:41'!
PASSED!

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/15/2020 22:40:41'!
PASSED!
!StructureReportTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:41:54' prior: 50884905!
test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio

	| portfolio portfolioChild account1 account2 report expectedReport|
	
	account1 := ReceptiveAccount named: 'Account1'.
	account2 := ReceptiveAccount named: 'Account2'.
	portfolioChild := Portfolio named: 'Portfolio child' with: account1.
	portfolio := Portfolio named: 'Portfolio' with: portfolioChild with: account2.
	report := StructureReport for: portfolio.
	
	expectedReport := OrderedCollection   with: 'Portfolio' 
							  	     	with: '    Portfolio child' 
									with: '        Account1'
									with: '    Account2'.
	
	self assert: (report report) equals: expectedReport.! !
!StructureReportTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:42:11' prior: 50884842!
test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio

	| portfolio portfolioChild account report expectedReport|
	
	account := ReceptiveAccount named: 'Account'.
	portfolioChild := Portfolio named: 'Portfolio child' with: account.
	portfolio := Portfolio named: 'Portfolio' with: portfolioChild.
	report := StructureReport for: portfolio.
	
	expectedReport := OrderedCollection   with: 'Portfolio' 
									with: '    Portfolio child' 
									with: '        Account'.
	
	self assert: (report report) equals: expectedReport.! !
!StructureReportTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:42:27' prior: 50884782!
test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation

	| portfolio account1 account2 report expectedReport|
	
	account1 := ReceptiveAccount named: 'Account1'.
	account2 := ReceptiveAccount named: 'Account2'.
	portfolio := Portfolio named: 'Portfolio' with: account1 with: account2.
	report := StructureReport for: portfolio.
	
	expectedReport := OrderedCollection   with: 'Portfolio' 
									with: '    Account1' 
									with: '    Account2'.
	
	self assert: (report report) equals: expectedReport.! !
!StructureReportTest methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:42:37' prior: 50884755!
test02PortfolioWithAccountDisplaysProperIndentation

	| portfolio account report expectedReport|
	
	account := ReceptiveAccount named: 'Account'.
	portfolio := Portfolio named: 'Portfolio' with: account.
	report := StructureReport for: portfolio.
	
	expectedReport := OrderedCollection   with: 'Portfolio' 
									with: '    Account'.
	
	self assert: (report report) equals: expectedReport.! !

AccountReports subclass: #StructuredSummaryReport
	instanceVariableNames: 'structure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #StructuredSummaryReport category: 'Portfolio-Solucion' stamp: 'AM 11/15/2020 22:45:41'!
AccountReports subclass: #StructuredSummaryReport
	instanceVariableNames: 'structure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!StructuredSummaryReport methodsFor: 'no messages' stamp: 'AM 11/15/2020 22:45:52' overrides: 50882161!
report

	! !
!StructuredSummaryReport methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:46:39' prior: 50885052 overrides: 50882161!
report

	! !
!StructuredSummaryReport methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:46:54'!
addToStructure: aStructureEntry

	structure add: aStructureEntry.! !
!StructuredSummaryReport methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:47:21' prior: 50885057 overrides: 50882161!
report

	account reportStructureTo: self indentedBy: ''.
	^structure.! !
!Portfolio methodsFor: 'reports - private' stamp: 'AM 11/15/2020 22:48:30' prior: 50884088!
reportStructureTo: aReport indentedBy: anIndentationString
	
	aReport addToStructure: (anIndentationString,(name copy)).
	aReport addSummaryFor: self.
	accounts do: [:account | account reportStructureTo: aReport indentedBy: (anIndentationString, '    ')].! !
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/15/2020 22:49:04'!
addSummaryFor: anAccount

	"This structure report doesnt include account summaries"! !
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/15/2020 22:49:10' prior: 50885085!
addSummaryFor: anAccount

	"This structure report doesn't include account summaries"! !
!StructuredSummaryReport methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:49:24'!
addSummaryFor: anAccount

	! !
!StructuredSummaryReport methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:50:50' prior: 50885097!
addSummaryFor: anAccount

	structure addAll: (SummaryReport for: anAccount)! !
!StructuredSummaryReport methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:50:59' prior: 50885102!
addSummaryFor: anAccount

	structure addAll: (SummaryReport for: anAccount report)! !
!StructuredSummaryReport methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:51:05' prior: 50885108!
addSummaryFor: anAccount

	structure addAll: ((SummaryReport for: anAccount) report)! !
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/15/2020 22:51:50'!
handleAccount: anAccount

	"This structure report doesn't include account summaries"! !

!methodRemoval: StructureReport #addSummaryFor: stamp: 'AM 11/15/2020 22:51:50'!
addSummaryFor: anAccount

	"This structure report doesn't include account summaries"!
!StructuredSummaryReport methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 22:52:07'!
handleAccount: anAccount

	structure addAll: ((SummaryReport for: anAccount) report)! !

!methodRemoval: StructuredSummaryReport #addSummaryFor: stamp: 'AM 11/15/2020 22:52:07'!
addSummaryFor: anAccount

	structure addAll: ((SummaryReport for: anAccount) report)!
!Portfolio methodsFor: 'reports - private' stamp: 'AM 11/15/2020 22:52:20' prior: 50885074!
reportStructureTo: aReport indentedBy: anIndentationString
	
	aReport addToStructure: (anIndentationString,(name copy)).
	aReport handleAccount: self.
	accounts do: [:account | account reportStructureTo: aReport indentedBy: (anIndentationString, '    ')].! !
!ReceptiveAccount methodsFor: 'reports - private' stamp: 'AM 11/15/2020 22:52:42' prior: 50884103!
reportStructureTo: aReport indentedBy: anIndentationString
	
	aReport addToStructure: (anIndentationString,(name copy)).
	aReport handleAccount: self.
	! !

ReportTests subclass: #StructuredSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #StructuredSummaryTest category: 'Portfolio-Solucion' stamp: 'AM 11/15/2020 22:53:44'!
ReportTests subclass: #StructuredSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!StructuredSummaryReport methodsFor: 'initialization' stamp: 'AM 11/15/2020 22:54:31'!
inititalize

	structure := OrderedCollection new.! !
!StructuredSummaryReport methodsFor: 'initialization' stamp: 'AM 11/15/2020 22:54:46' prior: 50885177!
inititalize

	structure := OrderedCollection new.! !

self new!
!TransferNetReport methodsFor: 'initialization' stamp: 'AM 11/15/2020 22:55:56' overrides: 16896425!
initialize

	netTotal := 0.! !

!methodRemoval: TransferNetReport #initializeFor: stamp: 'AM 11/15/2020 22:56:00'!
initializeFor: anAccount

	account := anAccount.
	netTotal := 0.!
!SummaryReport methodsFor: 'initialization' stamp: 'AM 11/15/2020 22:56:20' overrides: 16896425!
initialize

	summaryCollection := OrderedCollection new.! !

!methodRemoval: SummaryReport #initializeFor: stamp: 'AM 11/15/2020 22:56:25'!
initializeFor: anAccount

	account := anAccount.
	summaryCollection := OrderedCollection new.!
!StructuredSummaryReport methodsFor: 'initialization' stamp: 'AM 11/15/2020 22:57:01' overrides: 16896425!
initialize

	structure := OrderedCollection new.! !

!methodRemoval: StructuredSummaryReport #inititalize stamp: 'AM 11/15/2020 22:57:01'!
inititalize

	structure := OrderedCollection new.!

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/15/2020 22:57:09'!
PASSED!

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/15/2020 22:57:09'!
PASSED!

!testRun: #StructureReportTest #test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation stamp: 'AM 11/15/2020 22:57:09'!
PASSED!

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/15/2020 22:57:09'!
PASSED!

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/15/2020 22:57:09'!
PASSED!

!testRun: #SummaryReportTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/15/2020 22:57:12'!
PASSED!

!testRun: #SummaryReportTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalanceAndTransaction stamp: 'AM 11/15/2020 22:57:12'!
PASSED!

!testRun: #SummaryReportTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/15/2020 22:57:12'!
PASSED!

!testRun: #SummaryReportTest #test04SummaryForEmptyPorfolioIsZeroBalance stamp: 'AM 11/15/2020 22:57:12'!
PASSED!

!testRun: #SummaryReportTest #test05SummaryForPorfolioWithOneAccountMatchesAccountTransactionsAndBalance stamp: 'AM 11/15/2020 22:57:12'!
PASSED!

!testRun: #SummaryReportTest #test06SummaryForPorfolioWithOnePortfolioMatchesPortfolioTransactionsAndBalance stamp: 'AM 11/15/2020 22:57:12'!
PASSED!

!testRun: #TransferNetReportTest #test01EmptyAccountTransferNetIsZero stamp: 'AM 11/15/2020 22:57:16'!
PASSED!

!testRun: #TransferNetReportTest #test02TransferNetReportForAccountWithTransferWithdrawMatchesWithdrawAmount stamp: 'AM 11/15/2020 22:57:16'!
PASSED!

!testRun: #TransferNetReportTest #test03TransferNetReportForAccountWithTransferDepositMatchesDepositAmount stamp: 'AM 11/15/2020 22:57:16'!
PASSED!

!testRun: #TransferNetReportTest #test04NonTransferTransactionsDontAffectTrasferNet stamp: 'AM 11/15/2020 22:57:16'!
PASSED!
!StructuredSummaryTest methodsFor: 'tests' stamp: 'AM 11/15/2020 22:58:17'!
test01AccountStructuredSummaryIncludesAccountSummary

	||! !
!StructuredSummaryTest methodsFor: 'tests' stamp: 'AM 11/15/2020 22:58:49' prior: 50885281!
test01AccountStructuredSummaryIncludesAccountSummary
	
	| account report expectedReport|
	
	account := ReceptiveAccount named: 'Account'.
	report := StructureReport for: account.
	
	expectedReport := OrderedCollection with: 'Account'
										.
	
	self assert: (report report) equals: expectedReport.! !
!StructuredSummaryTest methodsFor: 'tests' stamp: 'AM 11/15/2020 22:59:44' prior: 50885286!
test01AccountStructuredSummaryIncludesAccountSummary
	
	| account report expectedReport|
	
	account := ReceptiveAccount named: 'Account'.
	account register: (Deposit for: 100).
	report := StructureReport for: account.
	
	expectedReport := OrderedCollection with: 'Account'.
	
	self assert: (report report) equals: expectedReport.! !
!StructuredSummaryTest methodsFor: 'tests' stamp: 'AM 11/15/2020 23:00:21' prior: 50885299!
test01AccountStructuredSummaryIncludesAccountSummary
	
	| account report expectedReport|
	
	account := ReceptiveAccount named: 'Account'.
	account register: (Deposit for: 100).
	report := StructureReport for: account.
	
	expectedReport := OrderedCollection with: 'Account' with: 'Deposit for 100' with: 'Balance = 100'.
	
	self assert: (report report) equals: expectedReport.! !

!testRun: #StructuredSummaryTest #test01AccountStructuredSummaryIncludesAccountSummary stamp: 'AM 11/15/2020 23:00:24'!
FAILURE!
!StructuredSummaryTest methodsFor: 'tests' stamp: 'AM 11/15/2020 23:01:01' prior: 50885313!
test01AccountStructuredSummaryIncludesAccountSummary
	
	| account report expectedReport|
	
	account := ReceptiveAccount named: 'Account'.
	account register: (Deposit for: 100).
	report := StructuredSummaryReport for: account.
	
	expectedReport := OrderedCollection with: 'Account' with: 'Deposit for 100' with: 'Balance = 100'.
	
	self assert: (report report) equals: expectedReport.! !

!testRun: #StructuredSummaryTest #test01AccountStructuredSummaryIncludesAccountSummary stamp: 'AM 11/15/2020 23:01:02'!
PASSED!

!testRun: #StructuredSummaryTest #test01AccountStructuredSummaryIncludesAccountSummary stamp: 'AM 11/15/2020 23:01:02'!
PASSED!
!Portfolio methodsFor: 'reports - private' stamp: 'AM 11/15/2020 23:04:19' prior: 50885144!
reportStructureTo: aReport indentedBy: anIndentationString
	
	aReport addToStructure: (anIndentationString,(name copy)).
	accounts do: [:account | account reportStructureTo: aReport indentedBy: (anIndentationString, '    ')].! !
!Portfolio methodsFor: 'reports - private' stamp: 'AM 11/15/2020 23:04:26' prior: 50885356!
reportStructureTo: aReport indentedBy: anIndentationString
	
	aReport addToStructure: (anIndentationString,(name copy)).
	aReport handleAccount: self.
	accounts do: [:account | account reportStructureTo: aReport indentedBy: (anIndentationString, '    ')].! !
!Portfolio methodsFor: 'reports - private' stamp: 'AM 11/15/2020 23:05:04' prior: 50885367!
reportStructureTo: aReport indentedBy: anIndentationString
	
	aReport addToStructure: (anIndentationString,(name copy)).
	accounts do: [:account | account reportStructureTo: aReport indentedBy: (anIndentationString, '    ')].! !
!ReceptiveAccount methodsFor: 'reports - private' stamp: 'AM 11/15/2020 23:05:23' prior: 50885156!
reportStructureTo: aReport indentedBy: anIndentationString
	
	aReport addToStructure: (anIndentationString,(name copy)).
	aReport handleReceptiveAccount: self.
	! !
!ReceptiveAccount methodsFor: 'reports - private' stamp: 'AM 11/15/2020 23:05:55' prior: 50885389!
reportStructureTo: aReport indentedBy: anIndentationString
	
	aReport addToStructure: (anIndentationString,(name copy)).
	aReport addSummaryFor: self.
	! !
!ReceptiveAccount methodsFor: 'reports - private' stamp: 'AM 11/15/2020 23:07:06' prior: 50885398!
reportStructureTo: aReport indentedBy: anIndentationString
	
	aReport addToStructure: (anIndentationString,(name copy)).
	aReport addSummaryFor: self withIndentation: (anIndentationString, '    ').
	! !
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/15/2020 23:08:17'!
addSummaryFor: aReceptiveAccount withIndentation: anIndentationString

	"This structure report doesn't include account summaries"! !
!StructuredSummaryReport methodsFor: 'report - private' stamp: 'AM 11/15/2020 23:08:33'!
addSummaryFor: aReceptiveAccount withIndentation: anIndentationString

	! !
!StructuredSummaryReport methodsFor: 'report - private' stamp: 'AM 11/15/2020 23:09:28' prior: 50885422!
addSummaryFor: aReceptiveAccount withIndentation: anIndentationString

	| indentedSummary |
	
	indentedSummary := (SummaryReport for: aReceptiveAccount) report.
	! !
!StructuredSummaryReport methodsFor: 'report - private' stamp: 'AM 11/15/2020 23:11:33' prior: 50885428!
addSummaryFor: aReceptiveAccount withIndentation: anIndentationString

	| indentedSummary |
	
	indentedSummary := ((SummaryReport for: aReceptiveAccount) report) collect: [:summaryEntry | anIndentationString, summaryEntry].
	
	! !
!StructuredSummaryReport methodsFor: 'report - private' stamp: 'AM 11/15/2020 23:11:54' prior: 50885437!
addSummaryFor: aReceptiveAccount withIndentation: anIndentationString

	| indentedSummary |
	
	indentedSummary := ((SummaryReport for: aReceptiveAccount) report) collect: [:summaryEntry | anIndentationString, summaryEntry].
	
	structure addAll: indentedSummary.
	
	! !
!StructuredSummaryTest methodsFor: 'tests' stamp: 'AM 11/15/2020 23:12:40' prior: 50885332!
test01AccountStructuredSummaryIncludesAccountSummary
	
	| account report expectedReport|
	
	account := ReceptiveAccount named: 'Account'.
	account register: (Deposit for: 100).
	report := StructuredSummaryReport for: account.
	
	expectedReport := OrderedCollection   with: 'Account' 
									with: '    Deposit for 100' 
									with: '    Balance = 100'.
	
	self assert: (report report) equals: expectedReport.! !

!testRun: #StructuredSummaryTest #test01AccountStructuredSummaryIncludesAccountSummary stamp: 'AM 11/15/2020 23:12:41'!
PASSED!

!testRun: #StructuredSummaryTest #test01AccountStructuredSummaryIncludesAccountSummary stamp: 'AM 11/15/2020 23:12:41'!
PASSED!
!StructuredSummaryTest methodsFor: 'tests' stamp: 'AM 11/15/2020 23:14:21'!
test01PortfolioStructuredSummaryIncludesAccountSummary
	
	| portfolio account report expectedReport|
	
	account := ReceptiveAccount named: 'Account'.
	account register: (Deposit for: 100).
	portfolio := Portfolio named: 'Portfolio' with: account.
	report := StructuredSummaryReport for: portfolio.
	
	expectedReport := OrderedCollection   with: 'Portfolio'
									with: '    Account' 
									with: '        Deposit for 100' 
									with: '        Balance = 100'.
	
	self assert: (report report) equals: expectedReport.! !

!testRun: #StructuredSummaryTest #test01PortfolioStructuredSummaryIncludesAccountSummary stamp: 'AM 11/15/2020 23:14:23'!
PASSED!

!testRun: #StructuredSummaryTest #test01AccountStructuredSummaryIncludesAccountSummary stamp: 'AM 11/15/2020 23:14:23'!
PASSED!

!testRun: #StructuredSummaryTest #test01PortfolioStructuredSummaryIncludesAccountSummary stamp: 'AM 11/15/2020 23:14:23'!
PASSED!
!StructuredSummaryTest methodsFor: 'tests' stamp: 'AM 11/15/2020 23:14:31'!
test02PortfolioStructuredSummaryIncludesAccountSummary
	
	| portfolio account report expectedReport|
	
	account := ReceptiveAccount named: 'Account'.
	account register: (Deposit for: 100).
	portfolio := Portfolio named: 'Portfolio' with: account.
	report := StructuredSummaryReport for: portfolio.
	
	expectedReport := OrderedCollection   with: 'Portfolio'
									with: '    Account' 
									with: '        Deposit for 100' 
									with: '        Balance = 100'.
	
	self assert: (report report) equals: expectedReport.! !

!methodRemoval: StructuredSummaryTest #test01PortfolioStructuredSummaryIncludesAccountSummary stamp: 'AM 11/15/2020 23:14:31'!
test01PortfolioStructuredSummaryIncludesAccountSummary
	
	| portfolio account report expectedReport|
	
	account := ReceptiveAccount named: 'Account'.
	account register: (Deposit for: 100).
	portfolio := Portfolio named: 'Portfolio' with: account.
	report := StructuredSummaryReport for: portfolio.
	
	expectedReport := OrderedCollection   with: 'Portfolio'
									with: '    Account' 
									with: '        Deposit for 100' 
									with: '        Balance = 100'.
	
	self assert: (report report) equals: expectedReport.!

!testRun: #StructuredSummaryTest #test02PortfolioStructuredSummaryIncludesAccountSummary stamp: 'AM 11/15/2020 23:14:33'!
PASSED!

!testRun: #StructuredSummaryTest #test01AccountStructuredSummaryIncludesAccountSummary stamp: 'AM 11/15/2020 23:14:33'!
PASSED!

!testRun: #StructuredSummaryTest #test02PortfolioStructuredSummaryIncludesAccountSummary stamp: 'AM 11/15/2020 23:14:33'!
PASSED!
!StructuredSummaryTest methodsFor: 'tests' stamp: 'AM 11/15/2020 23:15:20'!
test02PortfolioWithChildPortfolioStructuredSummaryIncludesChildPortflioSummary
	
	| portfolio account report expectedReport|
	
	account := ReceptiveAccount named: 'Account'.
	account register: (Deposit for: 100).
	portfolio := Portfolio named: 'Portfolio' with: account.
	report := StructuredSummaryReport for: portfolio.
	
	expectedReport := OrderedCollection   with: 'Portfolio'
									with: '    Account' 
									with: '        Deposit for 100' 
									with: '        Balance = 100'.
	
	self assert: (report report) equals: expectedReport.! !
!StructuredSummaryTest methodsFor: 'tests' stamp: 'AM 11/15/2020 23:15:26'!
test03PortfolioWithChildPortfolioStructuredSummaryIncludesChildPortflioSummary
	
	| portfolio account report expectedReport|
	
	account := ReceptiveAccount named: 'Account'.
	account register: (Deposit for: 100).
	portfolio := Portfolio named: 'Portfolio' with: account.
	report := StructuredSummaryReport for: portfolio.
	
	expectedReport := OrderedCollection   with: 'Portfolio'
									with: '    Account' 
									with: '        Deposit for 100' 
									with: '        Balance = 100'.
	
	self assert: (report report) equals: expectedReport.! !

!methodRemoval: StructuredSummaryTest #test02PortfolioWithChildPortfolioStructuredSummaryIncludesChildPortflioSummary stamp: 'AM 11/15/2020 23:15:29'!
test02PortfolioWithChildPortfolioStructuredSummaryIncludesChildPortflioSummary
	
	| portfolio account report expectedReport|
	
	account := ReceptiveAccount named: 'Account'.
	account register: (Deposit for: 100).
	portfolio := Portfolio named: 'Portfolio' with: account.
	report := StructuredSummaryReport for: portfolio.
	
	expectedReport := OrderedCollection   with: 'Portfolio'
									with: '    Account' 
									with: '        Deposit for 100' 
									with: '        Balance = 100'.
	
	self assert: (report report) equals: expectedReport.!
!StructuredSummaryTest methodsFor: 'tests' stamp: 'AM 11/15/2020 23:16:56' prior: 50885588!
test03PortfolioWithChildPortfolioStructuredSummaryIncludesChildPortflioSummary
	
	| portfolio portfolioChild account report expectedReport|
	
	account := ReceptiveAccount named: 'Account'.
	account register: (Deposit for: 100).
	portfolioChild := Portfolio named: 'Portfolio child' with: account.
	portfolio := Portfolio named: 'Portfolio' with: portfolioChild.
	report := StructuredSummaryReport for: portfolio.
	
	expectedReport := OrderedCollection   with: 'Portfolio'
									with: '    Portfolio child'
									with: '        Account' 
									with: '            Deposit for 100' 
									with: '            Balance = 100'.
	
	self assert: (report report) equals: expectedReport.! !

!testRun: #StructuredSummaryTest #test03PortfolioWithChildPortfolioStructuredSummaryIncludesChildPortflioSummary stamp: 'AM 11/15/2020 23:16:59'!
PASSED!

!testRun: #StructuredSummaryTest #test01AccountStructuredSummaryIncludesAccountSummary stamp: 'AM 11/15/2020 23:16:59'!
PASSED!

!testRun: #StructuredSummaryTest #test02PortfolioStructuredSummaryIncludesAccountSummary stamp: 'AM 11/15/2020 23:16:59'!
PASSED!

!testRun: #StructuredSummaryTest #test03PortfolioWithChildPortfolioStructuredSummaryIncludesChildPortflioSummary stamp: 'AM 11/15/2020 23:16:59'!
PASSED!
!StructuredSummaryTest methodsFor: 'tests' stamp: 'AM 11/15/2020 23:18:07'!
test03PortfolioWithChildPortfolioStructuredSummaryShowsEqualIndentationForAccountsAndPortfolios
	
	| portfolio portfolioChild account report expectedReport|
	
	account := ReceptiveAccount named: 'Account'.
	account register: (Deposit for: 100).
	portfolioChild := Portfolio named: 'Portfolio child' with: account.
	portfolio := Portfolio named: 'Portfolio' with: portfolioChild.
	report := StructuredSummaryReport for: portfolio.
	
	expectedReport := OrderedCollection   with: 'Portfolio'
									with: '    Portfolio child'
									with: '        Account' 
									with: '            Deposit for 100' 
									with: '            Balance = 100'.
	
	self assert: (report report) equals: expectedReport.! !
!StructuredSummaryTest methodsFor: 'tests' stamp: 'AM 11/15/2020 23:19:01'!
test04PortfolioWithChildPortfolioStructuredSummaryShowsEqualIndentationForAccountsAndPortfolios
	
	| portfolio portfolioChild account1 account2 report expectedReport|
	
	account1 := ReceptiveAccount named: 'Account1'.
	account1 register: (Deposit for: 100).
	account2 := ReceptiveAccount named: 'Account2'.
	account2 register: (Deposit for: 200).
	portfolioChild := Portfolio named: 'Portfolio child' with: account1.
	portfolio := Portfolio named: 'Portfolio' with: portfolioChild.
	report := StructuredSummaryReport for: portfolio.
	
	expectedReport := OrderedCollection   with: 'Portfolio'
									with: '    Portfolio child'
									with: '        Account' 
									with: '            Deposit for 100' 
									with: '            Balance = 100'.
	
	self assert: (report report) equals: expectedReport.! !

!methodRemoval: StructuredSummaryTest #test03PortfolioWithChildPortfolioStructuredSummaryShowsEqualIndentationForAccountsAndPortfolios stamp: 'AM 11/15/2020 23:19:04'!
test03PortfolioWithChildPortfolioStructuredSummaryShowsEqualIndentationForAccountsAndPortfolios
	
	| portfolio portfolioChild account report expectedReport|
	
	account := ReceptiveAccount named: 'Account'.
	account register: (Deposit for: 100).
	portfolioChild := Portfolio named: 'Portfolio child' with: account.
	portfolio := Portfolio named: 'Portfolio' with: portfolioChild.
	report := StructuredSummaryReport for: portfolio.
	
	expectedReport := OrderedCollection   with: 'Portfolio'
									with: '    Portfolio child'
									with: '        Account' 
									with: '            Deposit for 100' 
									with: '            Balance = 100'.
	
	self assert: (report report) equals: expectedReport.!
!StructuredSummaryTest methodsFor: 'tests' stamp: 'AM 11/15/2020 23:19:33' prior: 50885698!
test04PortfolioWithChildPortfolioStructuredSummaryShowsEqualIndentationForAccountsAndPortfolios
	
	| portfolio portfolioChild account1 account2 report expectedReport|
	
	account1 := ReceptiveAccount named: 'Account1'.
	account1 register: (Deposit for: 100).
	account2 := ReceptiveAccount named: 'Account2'.
	account2 register: (Deposit for: 200).
	portfolioChild := Portfolio named: 'Portfolio child' with: account1.
	portfolio := Portfolio named: 'Portfolio' with: portfolioChild with: account2.
	report := StructuredSummaryReport for: portfolio.
	
	expectedReport := OrderedCollection   with: 'Portfolio'
									with: '    Portfolio child'
									with: '        Account' 
									with: '            Deposit for 100' 
									with: '            Balance = 100'.
	
	self assert: (report report) equals: expectedReport.! !
!StructuredSummaryTest methodsFor: 'tests' stamp: 'AM 11/15/2020 23:22:23' prior: 50885754!
test04PortfolioWithChildPortfolioStructuredSummaryShowsEqualIndentationForAccountsAndPortfolios
	
	| portfolio portfolioChild account1 account2 report expectedReport|
	
	account1 := ReceptiveAccount named: 'Account1'.
	account1 register: (Deposit for: 100).
	account2 := ReceptiveAccount named: 'Account2'.
	account2 register: (Deposit for: 200).
	portfolioChild := Portfolio named: 'Portfolio child' with: account1.
	portfolio := Portfolio named: 'Portfolio' with: portfolioChild with: account2.
	report := StructuredSummaryReport for: portfolio.
	
	expectedReport := OrderedCollection   with: 'Portfolio'
									with: '    Portfolio child'
									with: '        Account1' 
									with: '            Deposit for 100' 
									with: '            Balance = 100'.
					       expectedReport add: '    Account2'.
						expectedReport add: '            Deposit for 200'.
						expectedReport add: '            Balance = 200'.
									
	
	self assert: (report report) equals: expectedReport.! !

!testRun: #StructuredSummaryTest #test04PortfolioWithChildPortfolioStructuredSummaryShowsEqualIndentationForAccountsAndPortfolios stamp: 'AM 11/15/2020 23:22:26'!
FAILURE!
!StructuredSummaryTest methodsFor: 'tests' stamp: 'AM 11/15/2020 23:22:56' prior: 50885783!
test04PortfolioWithChildPortfolioStructuredSummaryShowsEqualIndentationForAccountsAndPortfolios
	
	| portfolio portfolioChild account1 account2 report expectedReport|
	
	account1 := ReceptiveAccount named: 'Account1'.
	account1 register: (Deposit for: 100).
	account2 := ReceptiveAccount named: 'Account2'.
	account2 register: (Deposit for: 200).
	portfolioChild := Portfolio named: 'Portfolio child' with: account1.
	portfolio := Portfolio named: 'Portfolio' with: portfolioChild with: account2.
	report := StructuredSummaryReport for: portfolio.
	
	expectedReport := OrderedCollection   with: 'Portfolio'
									with: '    Portfolio child'
									with: '        Account1' 
									with: '            Deposit for 100' 
									with: '            Balance = 100'.
					       expectedReport add: '    Account2'.
						expectedReport add: '        Deposit for 200'.
						expectedReport add: '        Balance = 200'.
									
	
	self assert: (report report) equals: expectedReport.! !

!testRun: #StructuredSummaryTest #test04PortfolioWithChildPortfolioStructuredSummaryShowsEqualIndentationForAccountsAndPortfolios stamp: 'AM 11/15/2020 23:22:58'!
PASSED!

!testRun: #StructuredSummaryTest #test01AccountStructuredSummaryIncludesAccountSummary stamp: 'AM 11/15/2020 23:22:58'!
PASSED!

!testRun: #StructuredSummaryTest #test02PortfolioStructuredSummaryIncludesAccountSummary stamp: 'AM 11/15/2020 23:22:58'!
PASSED!

!testRun: #StructuredSummaryTest #test03PortfolioWithChildPortfolioStructuredSummaryIncludesChildPortflioSummary stamp: 'AM 11/15/2020 23:22:58'!
PASSED!

!testRun: #StructuredSummaryTest #test04PortfolioWithChildPortfolioStructuredSummaryShowsEqualIndentationForAccountsAndPortfolios stamp: 'AM 11/15/2020 23:22:58'!
PASSED!

!testRun: #TransferNetReportTest #test01EmptyAccountTransferNetIsZero stamp: 'AM 11/15/2020 23:24:03'!
PASSED!

!testRun: #TransferNetReportTest #test02TransferNetReportForAccountWithTransferWithdrawMatchesWithdrawAmount stamp: 'AM 11/15/2020 23:24:03'!
PASSED!

!testRun: #TransferNetReportTest #test03TransferNetReportForAccountWithTransferDepositMatchesDepositAmount stamp: 'AM 11/15/2020 23:24:03'!
PASSED!

!testRun: #TransferNetReportTest #test04NonTransferTransactionsDontAffectTrasferNet stamp: 'AM 11/15/2020 23:24:03'!
PASSED!

!testRun: #SummaryReportTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/15/2020 23:24:06'!
PASSED!

!testRun: #SummaryReportTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalanceAndTransaction stamp: 'AM 11/15/2020 23:24:06'!
PASSED!

!testRun: #SummaryReportTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/15/2020 23:24:06'!
PASSED!

!testRun: #SummaryReportTest #test04SummaryForEmptyPorfolioIsZeroBalance stamp: 'AM 11/15/2020 23:24:06'!
PASSED!

!testRun: #SummaryReportTest #test05SummaryForPorfolioWithOneAccountMatchesAccountTransactionsAndBalance stamp: 'AM 11/15/2020 23:24:06'!
PASSED!

!testRun: #SummaryReportTest #test06SummaryForPorfolioWithOnePortfolioMatchesPortfolioTransactionsAndBalance stamp: 'AM 11/15/2020 23:24:06'!
PASSED!

!testRun: #StructuredSummaryTest #test01AccountStructuredSummaryIncludesAccountSummary stamp: 'AM 11/15/2020 23:24:09'!
PASSED!

!testRun: #StructuredSummaryTest #test02PortfolioStructuredSummaryIncludesAccountSummary stamp: 'AM 11/15/2020 23:24:10'!
PASSED!

!testRun: #StructuredSummaryTest #test03PortfolioWithChildPortfolioStructuredSummaryIncludesChildPortflioSummary stamp: 'AM 11/15/2020 23:24:10'!
PASSED!

!testRun: #StructuredSummaryTest #test04PortfolioWithChildPortfolioStructuredSummaryShowsEqualIndentationForAccountsAndPortfolios stamp: 'AM 11/15/2020 23:24:10'!
PASSED!

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/15/2020 23:24:12'!
PASSED!

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/15/2020 23:24:12'!
PASSED!

!testRun: #StructureReportTest #test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation stamp: 'AM 11/15/2020 23:24:12'!
PASSED!

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/15/2020 23:24:12'!
PASSED!

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/15/2020 23:24:12'!
PASSED!
!AccountTransaction methodsFor: 'initialization' stamp: 'AM 11/15/2020 23:25:12'!
initializeFor: anAccount
	
	self subclassResponsibility.! !

!testRun: #TransferNetReportTest #test01EmptyAccountTransferNetIsZero stamp: 'AM 11/15/2020 23:25:17'!
PASSED!

!testRun: #TransferNetReportTest #test02TransferNetReportForAccountWithTransferWithdrawMatchesWithdrawAmount stamp: 'AM 11/15/2020 23:25:17'!
PASSED!

!testRun: #TransferNetReportTest #test03TransferNetReportForAccountWithTransferDepositMatchesDepositAmount stamp: 'AM 11/15/2020 23:25:17'!
PASSED!

!testRun: #TransferNetReportTest #test04NonTransferTransactionsDontAffectTrasferNet stamp: 'AM 11/15/2020 23:25:17'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #StructureReportTest #test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #StructuredSummaryTest #test01AccountStructuredSummaryIncludesAccountSummary stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #StructuredSummaryTest #test02PortfolioStructuredSummaryIncludesAccountSummary stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #StructuredSummaryTest #test03PortfolioWithChildPortfolioStructuredSummaryIncludesChildPortflioSummary stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #StructuredSummaryTest #test04PortfolioWithChildPortfolioStructuredSummaryShowsEqualIndentationForAccountsAndPortfolios stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #SummaryReportTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #SummaryReportTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalanceAndTransaction stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #SummaryReportTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #SummaryReportTest #test04SummaryForEmptyPorfolioIsZeroBalance stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #SummaryReportTest #test05SummaryForPorfolioWithOneAccountMatchesAccountTransactionsAndBalance stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #SummaryReportTest #test06SummaryForPorfolioWithOnePortfolioMatchesPortfolioTransactionsAndBalance stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #TransferNetReportTest #test01EmptyAccountTransferNetIsZero stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #TransferNetReportTest #test02TransferNetReportForAccountWithTransferWithdrawMatchesWithdrawAmount stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #TransferNetReportTest #test03TransferNetReportForAccountWithTransferDepositMatchesDepositAmount stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #TransferNetReportTest #test04NonTransferTransactionsDontAffectTrasferNet stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #TransferTest #test01TransferKnowsTransferorAndTransferee stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #TransferTest #test02TransferAmountReturnedCorrectly stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #TransferTest #test03TransferAffectsTransferorBalanceCorrectly stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #TransferTest #test04TransferAffectsTransfereeBalanceCorrectly stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #TransferTest #test05TransferMustBeAPositiveNumber stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #TransferTest #test06TransfersToAndFromTheSameAccountNotAllowed stamp: 'AM 11/15/2020 23:25:21'!
PASSED!

!testRun: #TransferNetReportTest #test01EmptyAccountTransferNetIsZero stamp: 'AM 11/15/2020 23:25:29'!
PASSED!

!testRun: #TransferNetReportTest #test02TransferNetReportForAccountWithTransferWithdrawMatchesWithdrawAmount stamp: 'AM 11/15/2020 23:25:29'!
PASSED!

!testRun: #TransferNetReportTest #test03TransferNetReportForAccountWithTransferDepositMatchesDepositAmount stamp: 'AM 11/15/2020 23:25:29'!
PASSED!

!testRun: #TransferNetReportTest #test04NonTransferTransactionsDontAffectTrasferNet stamp: 'AM 11/15/2020 23:25:29'!
PASSED!

!testRun: #SummaryReportTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/15/2020 23:25:30'!
PASSED!

!testRun: #SummaryReportTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalanceAndTransaction stamp: 'AM 11/15/2020 23:25:30'!
PASSED!

!testRun: #SummaryReportTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/15/2020 23:25:30'!
PASSED!

!testRun: #SummaryReportTest #test04SummaryForEmptyPorfolioIsZeroBalance stamp: 'AM 11/15/2020 23:25:30'!
PASSED!

!testRun: #SummaryReportTest #test05SummaryForPorfolioWithOneAccountMatchesAccountTransactionsAndBalance stamp: 'AM 11/15/2020 23:25:30'!
PASSED!

!testRun: #SummaryReportTest #test06SummaryForPorfolioWithOnePortfolioMatchesPortfolioTransactionsAndBalance stamp: 'AM 11/15/2020 23:25:30'!
PASSED!

!testRun: #StructuredSummaryTest #test01AccountStructuredSummaryIncludesAccountSummary stamp: 'AM 11/15/2020 23:25:32'!
PASSED!

!testRun: #StructuredSummaryTest #test02PortfolioStructuredSummaryIncludesAccountSummary stamp: 'AM 11/15/2020 23:25:32'!
PASSED!

!testRun: #StructuredSummaryTest #test03PortfolioWithChildPortfolioStructuredSummaryIncludesChildPortflioSummary stamp: 'AM 11/15/2020 23:25:32'!
PASSED!

!testRun: #StructuredSummaryTest #test04PortfolioWithChildPortfolioStructuredSummaryShowsEqualIndentationForAccountsAndPortfolios stamp: 'AM 11/15/2020 23:25:32'!
PASSED!

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/15/2020 23:25:33'!
PASSED!

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/15/2020 23:25:33'!
PASSED!

!testRun: #StructureReportTest #test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation stamp: 'AM 11/15/2020 23:25:33'!
PASSED!

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/15/2020 23:25:33'!
PASSED!

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/15/2020 23:25:33'!
PASSED!

!testRun: #TransferTest #test01TransferKnowsTransferorAndTransferee stamp: 'AM 11/15/2020 23:25:39'!
PASSED!

!testRun: #TransferTest #test02TransferAmountReturnedCorrectly stamp: 'AM 11/15/2020 23:25:39'!
PASSED!

!testRun: #TransferTest #test03TransferAffectsTransferorBalanceCorrectly stamp: 'AM 11/15/2020 23:25:39'!
PASSED!

!testRun: #TransferTest #test04TransferAffectsTransfereeBalanceCorrectly stamp: 'AM 11/15/2020 23:25:39'!
PASSED!

!testRun: #TransferTest #test05TransferMustBeAPositiveNumber stamp: 'AM 11/15/2020 23:25:39'!
PASSED!

!testRun: #TransferTest #test06TransfersToAndFromTheSameAccountNotAllowed stamp: 'AM 11/15/2020 23:25:39'!
PASSED!
!Portfolio methodsFor: 'reports - private' stamp: 'AM 11/15/2020 23:31:48' prior: 50883628!
reportTransactionsTo: aReport
	
	aReport handlePortfolio: self.
	accounts do: [:account | account reportTo: aReport].! !
!Portfolio methodsFor: 'reports - private' stamp: 'AM 11/15/2020 23:32:09'!
reportTo: aReport
	
	aReport handlePortfolio: self.
	accounts do: [:account | account reportTo: aReport].! !

!methodRemoval: Portfolio #reportTransactionsTo: stamp: 'AM 11/15/2020 23:32:09'!
reportTransactionsTo: aReport
	
	aReport handlePortfolio: self.
	accounts do: [:account | account reportTo: aReport].!
!Portfolio methodsFor: 'reports - private' stamp: 'AM 11/15/2020 23:32:50' prior: 50886284!
reportTo: aReport
	
	accounts do: [:account | account reportTo: aReport].! !
!Portfolio methodsFor: 'reports - private' stamp: 'AM 11/15/2020 23:33:04'!
reportTransactionsTo: aReport
	
	accounts do: [:account | account reportTo: aReport].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 23:33:04' prior: 50886297!
reportTo: aReport
	
	accounts do: [:account | account reportTransactionsTo: aReport].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/15/2020 23:33:04' prior: 50886302!
reportTransactionsTo: aReport
	
	accounts do: [:account | account reportTransactionsTo: aReport].! !

!methodRemoval: Portfolio #reportTo: stamp: 'AM 11/15/2020 23:33:04'!
reportTo: aReport
	
	accounts do: [:account | account reportTransactionsTo: aReport].!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #StructureReportTest #test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #StructuredSummaryTest #test01AccountStructuredSummaryIncludesAccountSummary stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #StructuredSummaryTest #test02PortfolioStructuredSummaryIncludesAccountSummary stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #StructuredSummaryTest #test03PortfolioWithChildPortfolioStructuredSummaryIncludesChildPortflioSummary stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #StructuredSummaryTest #test04PortfolioWithChildPortfolioStructuredSummaryShowsEqualIndentationForAccountsAndPortfolios stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #SummaryReportTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #SummaryReportTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalanceAndTransaction stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #SummaryReportTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #SummaryReportTest #test04SummaryForEmptyPorfolioIsZeroBalance stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #SummaryReportTest #test05SummaryForPorfolioWithOneAccountMatchesAccountTransactionsAndBalance stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #SummaryReportTest #test06SummaryForPorfolioWithOnePortfolioMatchesPortfolioTransactionsAndBalance stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #TransferNetReportTest #test01EmptyAccountTransferNetIsZero stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #TransferNetReportTest #test02TransferNetReportForAccountWithTransferWithdrawMatchesWithdrawAmount stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #TransferNetReportTest #test03TransferNetReportForAccountWithTransferDepositMatchesDepositAmount stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #TransferNetReportTest #test04NonTransferTransactionsDontAffectTrasferNet stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #TransferTest #test01TransferKnowsTransferorAndTransferee stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #TransferTest #test02TransferAmountReturnedCorrectly stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #TransferTest #test03TransferAffectsTransferorBalanceCorrectly stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #TransferTest #test04TransferAffectsTransfereeBalanceCorrectly stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #TransferTest #test05TransferMustBeAPositiveNumber stamp: 'AM 11/15/2020 23:33:09'!
PASSED!

!testRun: #TransferTest #test06TransfersToAndFromTheSameAccountNotAllowed stamp: 'AM 11/15/2020 23:33:09'!
PASSED!
!Portfolio methodsFor: 'reports - private' stamp: 'AM 11/15/2020 23:33:22'!
reportTo: aReport
	
	accounts do: [:account | account reportTransactionsTo: aReport].! !
!Portfolio methodsFor: 'reports - private' stamp: 'AM 11/15/2020 23:33:48' prior: 50886513!
reportTo: aReport
	
	aReport handlePortfolio: self.
	accounts do: [:account | account reportTo: aReport].! !
!ReceptiveAccount methodsFor: 'reports - private' stamp: 'AM 11/15/2020 23:34:24'!
reportTo: aReport
	
	aReport handleReceptiveAccount: self.
	transactions do: [:account | account reportTo: aReport].! !
!SummaryReport methodsFor: 'report - private' stamp: 'AM 11/15/2020 23:35:20'!
handleReceptiveAccount: aReceptiveAccount
! !
!SummaryReport methodsFor: 'report - private' stamp: 'AM 11/15/2020 23:35:29'!
handlePortfolio: aReceptiveAccount
! !
!SummaryReport methodsFor: 'report' stamp: 'AM 11/15/2020 23:36:08' prior: 50883530 overrides: 50882161!
report

	account reportTo: self.
	summaryCollection add: 'Balance = ', account balance asString.
	^summaryCollection.! !

!testRun: #SummaryReportTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/15/2020 23:36:15'!
PASSED!

!testRun: #SummaryReportTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalanceAndTransaction stamp: 'AM 11/15/2020 23:36:15'!
PASSED!

!testRun: #SummaryReportTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/15/2020 23:36:15'!
PASSED!

!testRun: #SummaryReportTest #test04SummaryForEmptyPorfolioIsZeroBalance stamp: 'AM 11/15/2020 23:36:15'!
PASSED!

!testRun: #SummaryReportTest #test05SummaryForPorfolioWithOneAccountMatchesAccountTransactionsAndBalance stamp: 'AM 11/15/2020 23:36:15'!
PASSED!

!testRun: #SummaryReportTest #test06SummaryForPorfolioWithOnePortfolioMatchesPortfolioTransactionsAndBalance stamp: 'AM 11/15/2020 23:36:15'!
PASSED!
!SummaryReport methodsFor: 'report - private' stamp: 'AM 11/15/2020 23:36:44' prior: 50886536!
handlePortfolio: aPortfolio
! !
!TransferNetReport methodsFor: 'report - private' stamp: 'AM 11/15/2020 23:37:03'!
handlePortfolio: aPortfolio
	
	"Deposits dont affect transfer net"! !
!TransferNetReport methodsFor: 'report - private' stamp: 'AM 11/15/2020 23:37:05' prior: 50886578!
handlePortfolio: aPortfolio
	
	! !
!TransferNetReport methodsFor: 'report - private' stamp: 'AM 11/15/2020 23:37:39'!
handleReceptiveAccount: aReceptiveAccount
	
	! !
!TransferNetReport methodsFor: 'report' stamp: 'AM 11/15/2020 23:37:57' prior: 50883641 overrides: 50882161!
report

	account reportTo: self.
	^netTotal.! !

!testRun: #TransferNetReportTest #test01EmptyAccountTransferNetIsZero stamp: 'AM 11/15/2020 23:37:58'!
PASSED!

!testRun: #TransferNetReportTest #test02TransferNetReportForAccountWithTransferWithdrawMatchesWithdrawAmount stamp: 'AM 11/15/2020 23:37:58'!
PASSED!

!testRun: #TransferNetReportTest #test03TransferNetReportForAccountWithTransferDepositMatchesDepositAmount stamp: 'AM 11/15/2020 23:37:58'!
PASSED!

!testRun: #TransferNetReportTest #test04NonTransferTransactionsDontAffectTrasferNet stamp: 'AM 11/15/2020 23:37:58'!
PASSED!

!testRun: #SummaryReportTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/15/2020 23:38:03'!
PASSED!

!testRun: #SummaryReportTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalanceAndTransaction stamp: 'AM 11/15/2020 23:38:03'!
PASSED!

!testRun: #SummaryReportTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/15/2020 23:38:03'!
PASSED!

!testRun: #SummaryReportTest #test04SummaryForEmptyPorfolioIsZeroBalance stamp: 'AM 11/15/2020 23:38:03'!
PASSED!

!testRun: #SummaryReportTest #test05SummaryForPorfolioWithOneAccountMatchesAccountTransactionsAndBalance stamp: 'AM 11/15/2020 23:38:03'!
PASSED!

!testRun: #SummaryReportTest #test06SummaryForPorfolioWithOnePortfolioMatchesPortfolioTransactionsAndBalance stamp: 'AM 11/15/2020 23:38:03'!
PASSED!

!testRun: #TransferNetReportTest #test01EmptyAccountTransferNetIsZero stamp: 'AM 11/15/2020 23:38:11'!
PASSED!

!testRun: #TransferNetReportTest #test02TransferNetReportForAccountWithTransferWithdrawMatchesWithdrawAmount stamp: 'AM 11/15/2020 23:38:11'!
PASSED!

!testRun: #TransferNetReportTest #test03TransferNetReportForAccountWithTransferDepositMatchesDepositAmount stamp: 'AM 11/15/2020 23:38:11'!
PASSED!

!testRun: #TransferNetReportTest #test04NonTransferTransactionsDontAffectTrasferNet stamp: 'AM 11/15/2020 23:38:11'!
PASSED!
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/15/2020 23:38:48'!
handleReceptiveAccount: aReceptiveAccount

	! !
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/15/2020 23:44:41' prior: 50885121!
handleAccount: anAccount
! !
!StructureReport methodsFor: 'report' stamp: 'AM 11/15/2020 23:50:49' prior: 50884038 overrides: 50882161!
report
	
	structure add: account name.
	^structure.! !
!Account methodsFor: 'name' stamp: 'AM 11/15/2020 23:52:02' overrides: 16882612!
name

	! !

Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'AM 11/15/2020 23:52:17'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'AM 11/15/2020 23:52:22'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'AM 11/15/2020 23:52:27'!
Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'name' stamp: 'AM 11/15/2020 23:52:54' prior: 50886672 overrides: 16882612!
name
	
	^name.
	! !
!Account methodsFor: 'name' stamp: 'AM 11/15/2020 23:52:59' prior: 50886712 overrides: 16882612!
name
	
	^name copy.
	! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/15/2020 23:53:14'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/15/2020 23:53:14'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/15/2020 23:53:14'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/15/2020 23:53:14'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/15/2020 23:53:14'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/15/2020 23:53:14'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/15/2020 23:53:14'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/15/2020 23:53:14'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/15/2020 23:53:14'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/15/2020 23:53:14'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/15/2020 23:53:14'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/15/2020 23:53:14'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/15/2020 23:53:14'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/15/2020 23:53:14'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/15/2020 23:53:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/15/2020 23:53:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/15/2020 23:53:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/15/2020 23:53:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/15/2020 23:53:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/15/2020 23:53:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/15/2020 23:53:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/15/2020 23:53:15'!
PASSED!

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/15/2020 23:53:15'!
PASSED!

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/15/2020 23:53:15'!
FAILURE!

!testRun: #StructureReportTest #test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation stamp: 'AM 11/15/2020 23:53:15'!
FAILURE!

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/15/2020 23:53:15'!
FAILURE!

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/15/2020 23:53:15'!
FAILURE!

!testRun: #StructuredSummaryTest #test01AccountStructuredSummaryIncludesAccountSummary stamp: 'AM 11/15/2020 23:53:15'!
PASSED!

!testRun: #StructuredSummaryTest #test02PortfolioStructuredSummaryIncludesAccountSummary stamp: 'AM 11/15/2020 23:53:15'!
PASSED!

!testRun: #StructuredSummaryTest #test03PortfolioWithChildPortfolioStructuredSummaryIncludesChildPortflioSummary stamp: 'AM 11/15/2020 23:53:15'!
PASSED!

!testRun: #StructuredSummaryTest #test04PortfolioWithChildPortfolioStructuredSummaryShowsEqualIndentationForAccountsAndPortfolios stamp: 'AM 11/15/2020 23:53:15'!
PASSED!

!testRun: #SummaryReportTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/15/2020 23:53:15'!
PASSED!

!testRun: #SummaryReportTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalanceAndTransaction stamp: 'AM 11/15/2020 23:53:15'!
PASSED!

!testRun: #SummaryReportTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/15/2020 23:53:15'!
PASSED!

!testRun: #SummaryReportTest #test04SummaryForEmptyPorfolioIsZeroBalance stamp: 'AM 11/15/2020 23:53:15'!
PASSED!

!testRun: #SummaryReportTest #test05SummaryForPorfolioWithOneAccountMatchesAccountTransactionsAndBalance stamp: 'AM 11/15/2020 23:53:15'!
PASSED!

!testRun: #SummaryReportTest #test06SummaryForPorfolioWithOnePortfolioMatchesPortfolioTransactionsAndBalance stamp: 'AM 11/15/2020 23:53:15'!
PASSED!

!testRun: #TransferNetReportTest #test01EmptyAccountTransferNetIsZero stamp: 'AM 11/15/2020 23:53:15'!
PASSED!

!testRun: #TransferNetReportTest #test02TransferNetReportForAccountWithTransferWithdrawMatchesWithdrawAmount stamp: 'AM 11/15/2020 23:53:15'!
PASSED!

!testRun: #TransferNetReportTest #test03TransferNetReportForAccountWithTransferDepositMatchesDepositAmount stamp: 'AM 11/15/2020 23:53:15'!
PASSED!

!testRun: #TransferNetReportTest #test04NonTransferTransactionsDontAffectTrasferNet stamp: 'AM 11/15/2020 23:53:15'!
PASSED!

!testRun: #TransferTest #test01TransferKnowsTransferorAndTransferee stamp: 'AM 11/15/2020 23:53:15'!
PASSED!

!testRun: #TransferTest #test02TransferAmountReturnedCorrectly stamp: 'AM 11/15/2020 23:53:15'!
PASSED!

!testRun: #TransferTest #test03TransferAffectsTransferorBalanceCorrectly stamp: 'AM 11/15/2020 23:53:15'!
PASSED!

!testRun: #TransferTest #test04TransferAffectsTransfereeBalanceCorrectly stamp: 'AM 11/15/2020 23:53:15'!
PASSED!

!testRun: #TransferTest #test05TransferMustBeAPositiveNumber stamp: 'AM 11/15/2020 23:53:15'!
PASSED!

!testRun: #TransferTest #test06TransfersToAndFromTheSameAccountNotAllowed stamp: 'AM 11/15/2020 23:53:15'!
PASSED!
!StructureReport methodsFor: 'report' stamp: 'AM 11/15/2020 23:53:59' prior: 50886667 overrides: 50882161!
report
	
	structure add: account name.
	account reportTo: self.
	^structure.! !

!classDefinition: #StructureReport category: 'Portfolio-Solucion' stamp: 'AM 11/15/2020 23:54:49'!
AccountReports subclass: #StructureReport
	instanceVariableNames: 'structure indentation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!StructureReport methodsFor: 'report' stamp: 'AM 11/15/2020 23:54:48' prior: 50886908 overrides: 50882161!
report
	
	structure add: account name.
	indentation := '    '.
	account reportTo: self.
	^structure.! !
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/15/2020 23:56:00' prior: 50886662!
handleAccount: anAccount
	
	structure add: indentation, anAccount name.! !
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/15/2020 23:56:49' prior: 50886657!
handleReceptiveAccount: aReceptiveAccount

	structure add: indentation, aReceptiveAccount name.! !

!methodRemoval: StructureReport #handleAccount: stamp: 'AM 11/15/2020 23:56:53'!
handleAccount: anAccount
	
	structure add: indentation, anAccount name.!
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/15/2020 23:58:26'!
handlePortfolio: aPortfolio

	structure add: indentation, aPortfolio name.
	self increaseIndentation.! !
!StructureReport methodsFor: 'indentation - private' stamp: 'AM 11/15/2020 23:59:12'!
increaseIndentation
	
	indentation := indentation,'    '.! !
!StructureReport methodsFor: 'initialization' stamp: 'AM 11/15/2020 23:59:30' prior: 50884544 overrides: 16896425!
initialize 

	structure := OrderedCollection new.
	indentation := ''.! !
!StructureReport methodsFor: 'indentation - private' stamp: 'AM 11/15/2020 23:59:50'!
decreaseIndentation

	indentation := indentation! !
!StructureReport methodsFor: 'indentation - private' stamp: 'AM 11/16/2020 00:01:44' prior: 50886964!
decreaseIndentation

	indentation := indentation copyFrom: 1 to: (indentation size - 4).! !
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 00:03:26'!
handleDeposit: aDeposit

	! !
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 00:03:42'!
handleTransferDeposit: aTransferDeposit

	! !
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 00:03:56'!
handleWithdraw: aWithdraw

	! !
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 00:04:04'!
handleTransferWithdraw: aTransferWithdraw

	! !

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/16/2020 00:04:17'!
FAILURE!

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/16/2020 00:04:17'!
FAILURE!

!testRun: #StructureReportTest #test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation stamp: 'AM 11/16/2020 00:04:17'!
FAILURE!

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/16/2020 00:04:17'!
FAILURE!

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/16/2020 00:04:17'!
FAILURE!

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/16/2020 00:04:23'!
FAILURE!

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/16/2020 00:04:23'!
FAILURE!
!StructureReport methodsFor: 'report' stamp: 'AM 11/16/2020 00:05:22' prior: 50886923 overrides: 50882161!
report
	
	account reportTo: self.
	^structure.! !

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/16/2020 00:05:26'!
PASSED!

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/16/2020 00:05:26'!
PASSED!

!testRun: #StructureReportTest #test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation stamp: 'AM 11/16/2020 00:05:26'!
PASSED!

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/16/2020 00:05:26'!
PASSED!

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/16/2020 00:05:26'!
FAILURE!

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/16/2020 00:05:26'!
FAILURE!

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/16/2020 00:05:32'!
PASSED!

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/16/2020 00:05:32'!
PASSED!

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/16/2020 00:05:32'!
PASSED!

!testRun: #StructureReportTest #test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation stamp: 'AM 11/16/2020 00:05:32'!
PASSED!

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/16/2020 00:05:32'!
PASSED!

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/16/2020 00:05:32'!
FAILURE!

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/16/2020 00:05:32'!
FAILURE!

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/16/2020 00:05:42'!
PASSED!

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/16/2020 00:05:45'!
PASSED!

!testRun: #StructureReportTest #test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation stamp: 'AM 11/16/2020 00:05:49'!
PASSED!

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/16/2020 00:05:53'!
PASSED!

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/16/2020 00:05:59'!
FAILURE!

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/16/2020 00:05:59'!
FAILURE!

!methodRemoval: StructureReport #addSummaryFor:withIndentation: stamp: 'AM 11/16/2020 00:09:07'!
addSummaryFor: aReceptiveAccount withIndentation: anIndentationString

	"This structure report doesn't include account summaries"!

!methodRemoval: StructureReport #addToStructure: stamp: 'AM 11/16/2020 00:09:14'!
addToStructure: aStructureEntry

	structure add: aStructureEntry.!

AccountReports subclass: #StructureReport
	instanceVariableNames: 'structure indentation branchLevelSize'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #StructureReport category: 'Portfolio-Solucion' stamp: 'AM 11/16/2020 00:10:04'!
AccountReports subclass: #StructureReport
	instanceVariableNames: 'structure indentation branchLevelSize'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #StructureReport category: 'Portfolio-Solucion' stamp: 'AM 11/16/2020 00:12:16'!
AccountReports subclass: #StructureReport
	instanceVariableNames: 'structure indentation branchLevelSize branchSize'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 00:12:14' prior: 50886947!
handlePortfolio: aPortfolio

	structure add: indentation, aPortfolio name.
	branchSize := aPortfolio accountsSize.
	self increaseIndentation.! !

AccountReports subclass: #StructureReport
	instanceVariableNames: 'structure indentation branchSize'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #StructureReport category: 'Portfolio-Solucion' stamp: 'AM 11/16/2020 00:12:23'!
AccountReports subclass: #StructureReport
	instanceVariableNames: 'structure indentation branchSize'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountReports subclass: #StructureReport
	instanceVariableNames: 'structure indentation treeLevelSize'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #StructureReport category: 'Portfolio-Solucion' stamp: 'AM 11/16/2020 00:19:21'!
AccountReports subclass: #StructureReport
	instanceVariableNames: 'structure indentation treeLevelSize'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 00:19:48' prior: 50887148!
handlePortfolio: aPortfolio

	structure add: indentation, aPortfolio name.
	treeLevelSize add: aPortfolio accountsSize.
	self increaseIndentation.! !
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 00:20:09' prior: 50887185!
handlePortfolio: aPortfolio

	structure add: indentation, aPortfolio name.
	treeLevelSize addFirst: aPortfolio accountsSize.
	self increaseIndentation.! !
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 00:21:10' prior: 50887193!
handlePortfolio: aPortfolio

	structure add: indentation, aPortfolio name.
	treeLevelSize addLast: aPortfolio accountsSize.
	self increaseIndentation.! !
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 00:24:11' prior: 50887201!
handlePortfolio: aPortfolio
	
	(treeLevelSize last = 0) ifTrue: [self decreaseIndentation.
							treeLevelSize removeLast].
	structure add: indentation, aPortfolio name.
	treeLevelSize addLast: aPortfolio accountsSize.
	self increaseIndentation.! !
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 00:25:48' prior: 50887209!
handlePortfolio: aPortfolio
	
	treeLevelSize := treeLevelSize - 1.
	(treeLevelSize last = 0) ifTrue: [self decreaseIndentation.
							treeLevelSize removeLast].
	structure add: indentation, aPortfolio name.
	treeLevelSize addLast: aPortfolio accountsSize.
	self increaseIndentation.! !
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 00:26:45' prior: 50886936!
handleReceptiveAccount: aReceptiveAccount
	
	treeLevelSize := treeLevelSize - 1.
	(treeLevelSize last = 0) ifTrue: [self decreaseIndentation.
							treeLevelSize removeLast].
	structure add: indentation, aReceptiveAccount name.! !
!StructureReport methodsFor: 'initialization' stamp: 'AM 11/16/2020 00:27:43' prior: 50886959 overrides: 16896425!
initialize 

	structure := OrderedCollection new.
	treeLevelSize := OrderedCollection with: 1.
	indentation := ''.! !

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/16/2020 00:27:55'!
PASSED!

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/16/2020 00:27:55'!
FAILURE!

!testRun: #StructureReportTest #test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation stamp: 'AM 11/16/2020 00:27:55'!
FAILURE!

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/16/2020 00:27:55'!
FAILURE!

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/16/2020 00:27:55'!
FAILURE!
!StructureReport methodsFor: 'initialization' stamp: 'AM 11/16/2020 00:29:34' prior: 50887243 overrides: 16896425!
initialize 

	structure := OrderedCollection new.
	treeLevelSize := OrderedCollection with: 1.
	indentation := '    '.! !

|ind|
ind := ''.
ind := ind copyFrom: 1 to: (ind size - 4)!

ind := ind copyFrom: 1 to: (ind size - 4)!

|ind|
ind := '    '.!

|ind|
ind := '    '. 
ind := ind copyFrom: 1 to: (ind size - 4)!

|ind|
ind := ''. 
ind := ind copyFrom: 1 to: (ind size - 4)!

|ind|
ind := '        '. 
ind := ind copyFrom: 1 to: (ind size - 4)!
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 00:33:24' prior: 50887232!
handleReceptiveAccount: aReceptiveAccount
	
	structure add: indentation, aReceptiveAccount name.
	
	treeLevelSize := treeLevelSize - 1.
	(treeLevelSize last = 0) ifTrue: [self decreaseIndentation.
							treeLevelSize removeLast].
	! !

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/16/2020 00:33:29'!
PASSED!

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/16/2020 00:33:32'!
FAILURE!

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/16/2020 00:33:32'!
PASSED!

!testRun: #StructureReportTest #test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation stamp: 'AM 11/16/2020 00:33:32'!
PASSED!

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/16/2020 00:33:32'!
FAILURE!

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/16/2020 00:33:32'!
PASSED!

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/16/2020 00:33:37'!
FAILURE!

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/16/2020 00:33:37'!
FAILURE!
!StructureReport methodsFor: 'initialization' stamp: 'AM 11/16/2020 00:33:53' prior: 50887273 overrides: 16896425!
initialize 

	structure := OrderedCollection new.
	treeLevelSize := OrderedCollection with: 1.
	indentation := ''.! !

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/16/2020 00:33:58'!
PASSED!

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/16/2020 00:33:58'!
PASSED!

!testRun: #StructureReportTest #test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation stamp: 'AM 11/16/2020 00:33:58'!
PASSED!

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/16/2020 00:33:58'!
FAILURE!

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/16/2020 00:33:58'!
PASSED!

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/16/2020 00:33:58'!
FAILURE!

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/16/2020 00:34:26'!
PASSED!

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/16/2020 00:34:26'!
PASSED!

!testRun: #StructureReportTest #test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation stamp: 'AM 11/16/2020 00:34:26'!
PASSED!

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/16/2020 00:34:26'!
FAILURE!

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/16/2020 00:34:26'!
PASSED!

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/16/2020 00:34:26'!
FAILURE!
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 00:36:02' prior: 50887220!
handlePortfolio: aPortfolio
	
	structure add: indentation, aPortfolio name.
	treeLevelSize := treeLevelSize - 1.
	(treeLevelSize last = 0) ifTrue: [self decreaseIndentation.
							treeLevelSize removeLast].
	treeLevelSize addLast: aPortfolio accountsSize.
	self increaseIndentation.! !

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/16/2020 00:36:10'!
PASSED!

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/16/2020 00:36:10'!
PASSED!

!testRun: #StructureReportTest #test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation stamp: 'AM 11/16/2020 00:36:10'!
PASSED!

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/16/2020 00:36:10'!
FAILURE!

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/16/2020 00:36:10'!
PASSED!

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/16/2020 00:36:10'!
FAILURE!
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 00:40:12' prior: 50887396!
handlePortfolio: aPortfolio
	
	structure add: indentation, aPortfolio name.
	treeLevelSize := treeLevelSize - 1.
	treeLevelSize addLast: aPortfolio accountsSize.
	self increaseIndentation.! !
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 00:42:37' prior: 50887291!
handleReceptiveAccount: aReceptiveAccount
	
	structure add: indentation, aReceptiveAccount name.
	
	treeLevelSize := treeLevelSize - 1.
	(treeLevelSize last = 0) ifTrue: [self decreaseIndentation.
							treeLevelSize removeLast.
							(treeLevelSize last = 0) ifTrue: [self decreaseIndentation.
													treeLevelSize removeLast]].
	! !

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/16/2020 00:42:43'!
ERROR!

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/16/2020 00:42:43'!
PASSED!

!testRun: #StructureReportTest #test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation stamp: 'AM 11/16/2020 00:42:43'!
PASSED!

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/16/2020 00:42:43'!
PASSED!

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/16/2020 00:42:43'!
FAILURE!

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/16/2020 00:42:48'!
ERROR!

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/16/2020 00:42:48'!
PASSED!

!testRun: #StructureReportTest #test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation stamp: 'AM 11/16/2020 00:42:48'!
PASSED!

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/16/2020 00:42:48'!
PASSED!

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/16/2020 00:42:48'!
FAILURE!

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/16/2020 00:43:25'!
ERROR!
!StructureReport methodsFor: 'indentation - private' stamp: 'AM 11/16/2020 00:45:03'!
decreaseIndentationIfLastInLevel

	! !
!StructureReport methodsFor: 'indentation - private' stamp: 'AM 11/16/2020 00:46:03' prior: 50887506!
decreaseIndentationIfLastInLevel

	(treeLevelSize last = 0) ifTrue: [self decreaseIndentation.
							treeLevelSize removeLast.]
						
	! !

(OrderedCollection with: 1 with:2) - 1!

((OrderedCollection with: 3 with:4) - 1)!
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 00:51:53' prior: 50887445!
handleReceptiveAccount: aReceptiveAccount
	
	structure add: indentation, aReceptiveAccount name.
	
	
	
	(treeLevelSize last = 0) ifTrue: [self decreaseIndentation.
							treeLevelSize removeLast.
							(treeLevelSize last = 0) ifTrue: [self decreaseIndentation.
													treeLevelSize removeLast]].
	! !
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 00:54:23' prior: 50887522!
handleReceptiveAccount: aReceptiveAccount
	
	| lastLevelSize |
	lastLevelSize := treeLevelSize last.
	treeLevelSize removeLast.
	treeLevelSize addLast: lastLevelSize -1.
	
	structure add: indentation, aReceptiveAccount name.

	

	
	(treeLevelSize last = 0) ifTrue: [self decreaseIndentation.
							treeLevelSize removeLast.
							(treeLevelSize last = 0) ifTrue: [self decreaseIndentation.
													treeLevelSize removeLast]].
	! !
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 00:55:25' prior: 50887535!
handleReceptiveAccount: aReceptiveAccount
	
	| lastLevelSize |
	lastLevelSize := treeLevelSize last.
	treeLevelSize removeLast.
	treeLevelSize addLast: lastLevelSize -1.
	
	structure add: indentation, aReceptiveAccount name.

	self decreaseIndentationIfLastInLevel.

	
	(treeLevelSize last = 0) ifTrue: [self decreaseIndentation.
							treeLevelSize removeLast.
							(treeLevelSize last = 0) ifTrue: [self decreaseIndentation.
													treeLevelSize removeLast]].
	! !
!StructureReport methodsFor: 'indentation - private' stamp: 'AM 11/16/2020 00:55:38'!
updateLastLevelSize

	! !
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 00:55:48' prior: 50887435!
handlePortfolio: aPortfolio
	
	structure add: indentation, aPortfolio name.
	treeLevelSize addLast: aPortfolio accountsSize.
	self increaseIndentation.! !
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 00:55:55' prior: 50887552!
handleReceptiveAccount: aReceptiveAccount

	structure add: indentation, aReceptiveAccount name.

	self decreaseIndentationIfLastInLevel.

	
	(treeLevelSize last = 0) ifTrue: [self decreaseIndentation.
							treeLevelSize removeLast.
							(treeLevelSize last = 0) ifTrue: [self decreaseIndentation.
													treeLevelSize removeLast]].
	! !
!StructureReport methodsFor: 'indentation - private' stamp: 'AM 11/16/2020 00:56:04' prior: 50887570!
updateLastLevelSize

	| lastLevelSize |
	
	lastLevelSize := treeLevelSize last.
	treeLevelSize removeLast.
	treeLevelSize addLast: lastLevelSize -1.
	! !
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 00:56:43' prior: 50887574!
handlePortfolio: aPortfolio
	
	structure add: indentation, aPortfolio name.
	self updateLastLevelSize.
	treeLevelSize addLast: aPortfolio accountsSize.
	self increaseIndentation.! !
!StructureReport methodsFor: 'indentation - private' stamp: 'AM 11/16/2020 00:57:59' prior: 50887511!
decreaseIndentationIfLastInLevel

	(treeLevelSize last = 0) ifTrue: [self decreaseIndentation.
							treeLevelSize removeLast.].
						
	! !
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 00:58:26' prior: 50887582!
handleReceptiveAccount: aReceptiveAccount

	structure add: indentation, aReceptiveAccount name.

	self decreaseIndentationIfLastInLevel.
	
	treeLevelSize isEmpty ifFalse: [self decreaseIndentationIfLastInLevel].
	! !

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/16/2020 00:58:48'!
PASSED!

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/16/2020 00:58:51'!
PASSED!

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/16/2020 00:58:51'!
PASSED!

!testRun: #StructureReportTest #test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation stamp: 'AM 11/16/2020 00:58:51'!
PASSED!

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/16/2020 00:58:51'!
PASSED!

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/16/2020 00:58:51'!
FAILURE!

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/16/2020 00:58:51'!
FAILURE!
!StructureReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 01:01:30' prior: 50887622!
handleReceptiveAccount: aReceptiveAccount

	structure add: indentation, aReceptiveAccount name.
	self updateLastLevelSize.
	self decreaseIndentationIfLastInLevel.
	
	treeLevelSize isEmpty ifFalse: [self decreaseIndentationIfLastInLevel].
	! !

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/16/2020 01:01:46'!
PASSED!

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/16/2020 01:01:46'!
PASSED!

!testRun: #StructureReportTest #test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation stamp: 'AM 11/16/2020 01:01:46'!
PASSED!

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/16/2020 01:01:46'!
PASSED!

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/16/2020 01:01:46'!
PASSED!
!StructureReportTest methodsFor: 'tests' stamp: 'AM 11/16/2020 01:05:55'!
test06PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio

	| portfolioParent portfolio portfolioChild account1 account2 account3 report expectedReport|
	
	account1 := ReceptiveAccount named: 'Account1'.
	account2 := ReceptiveAccount named: 'Account2'.
	account3 := ReceptiveAccount named: 'Account3'.
	portfolioChild := Portfolio named: 'Portfolio child' with: account1.
	portfolio := Portfolio named: 'Portfolio' with: portfolioChild with: account2.
	
	portfolioParent := Portfolio named: 'Parent' with: portfolio with: account3.
	
	report := StructureReport for: portfolio.
	
	expectedReport := OrderedCollection   with: 'Parent' 
							  	     	with: '    Portfolio' 
									with: '        Portfolio child'
									with: '            Account1'.
					       expectedReport add: '        Account2'.
					       expectedReport add: '    Account3'.
	self assert: (report report) equals: expectedReport.! !
!StructureReportTest methodsFor: 'tests' stamp: 'AM 11/16/2020 01:06:03' prior: 50887695!
test06PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio

	| portfolioParent portfolio portfolioChild account1 account2 account3 report expectedReport|
	
	account1 := ReceptiveAccount named: 'Account1'.
	account2 := ReceptiveAccount named: 'Account2'.
	account3 := ReceptiveAccount named: 'Account3'.
	portfolioChild := Portfolio named: 'Portfolio child' with: account1.
	portfolio := Portfolio named: 'Portfolio' with: portfolioChild with: account2.
	
	portfolioParent := Portfolio named: 'Parent' with: portfolio with: account3.
	
	report := StructureReport for: portfolioParent.
	
	expectedReport := OrderedCollection   with: 'Parent' 
							  	     	with: '    Portfolio' 
									with: '        Portfolio child'
									with: '            Account1'.
					       expectedReport add: '        Account2'.
					       expectedReport add: '    Account3'.
	self assert: (report report) equals: expectedReport.! !

!testRun: #StructureReportTest #test06PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/16/2020 01:06:06'!
PASSED!

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/16/2020 01:06:06'!
PASSED!

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/16/2020 01:06:06'!
PASSED!

!testRun: #StructureReportTest #test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation stamp: 'AM 11/16/2020 01:06:07'!
PASSED!

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/16/2020 01:06:07'!
PASSED!

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/16/2020 01:06:07'!
PASSED!

!testRun: #StructureReportTest #test06PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/16/2020 01:06:07'!
PASSED!

!methodRemoval: StructureReportTest #test06PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/16/2020 01:06:37'!
test06PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio

	| portfolioParent portfolio portfolioChild account1 account2 account3 report expectedReport|
	
	account1 := ReceptiveAccount named: 'Account1'.
	account2 := ReceptiveAccount named: 'Account2'.
	account3 := ReceptiveAccount named: 'Account3'.
	portfolioChild := Portfolio named: 'Portfolio child' with: account1.
	portfolio := Portfolio named: 'Portfolio' with: portfolioChild with: account2.
	
	portfolioParent := Portfolio named: 'Parent' with: portfolio with: account3.
	
	report := StructureReport for: portfolioParent.
	
	expectedReport := OrderedCollection   with: 'Parent' 
							  	     	with: '    Portfolio' 
									with: '        Portfolio child'
									with: '            Account1'.
					       expectedReport add: '        Account2'.
					       expectedReport add: '    Account3'.
	self assert: (report report) equals: expectedReport.!

!classDefinition: #StructuredSummaryReport category: 'Portfolio-Solucion' stamp: 'AM 11/16/2020 01:09:07'!
AccountReports subclass: #StructuredSummaryReport
	instanceVariableNames: 'structure indentation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #StructuredSummaryReport category: 'Portfolio-Solucion' stamp: 'AM 11/16/2020 01:09:08'!
AccountReports subclass: #StructuredSummaryReport
	instanceVariableNames: 'structure indentation treeLevelSize'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!StructuredSummaryReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 01:09:05'!
handleReceptiveAccount: aReceptiveAccount

	structure add: indentation, aReceptiveAccount name.
	self updateLastLevelSize.
	self decreaseIndentationIfLastInLevel.
	
	treeLevelSize isEmpty ifFalse: [self decreaseIndentationIfLastInLevel].
	! !

!methodRemoval: StructuredSummaryReport #handleAccount: stamp: 'AM 11/16/2020 01:09:18'!
handleAccount: anAccount

	structure addAll: ((SummaryReport for: anAccount) report)!
!StructuredSummaryReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 01:09:54'!
handlePortfolio: aPortfolio
	
	structure add: indentation, aPortfolio name.
	self updateLastLevelSize.
	treeLevelSize addLast: aPortfolio accountsSize.
	self increaseIndentation.! !
!StructuredSummaryReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 01:10:12' prior: 50887846!
handleReceptiveAccount: aReceptiveAccount

	structure add: indentation, aReceptiveAccount name.
	self updateLastLevelSize.
	
	self decreaseIndentationIfLastInLevel.
	treeLevelSize isEmpty ifFalse: [self decreaseIndentationIfLastInLevel].
	! !
!StructuredSummaryReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 01:11:47' prior: 50887871!
handleReceptiveAccount: aReceptiveAccount

	structure add: indentation, aReceptiveAccount name.
	self addSummaryFor: aReceptiveAccount withIndentation: ('    ', indentation).
	self updateLastLevelSize.
	
	self decreaseIndentationIfLastInLevel.
	treeLevelSize isEmpty ifFalse: [self decreaseIndentationIfLastInLevel].
	! !
!StructuredSummaryReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 01:11:52' prior: 50887882!
handleReceptiveAccount: aReceptiveAccount

	structure add: indentation, aReceptiveAccount name.
	self addSummaryFor: aReceptiveAccount withIndentation: ('    ', indentation copy).
	self updateLastLevelSize.
	
	self decreaseIndentationIfLastInLevel.
	treeLevelSize isEmpty ifFalse: [self decreaseIndentationIfLastInLevel].
	! !

!methodRemoval: StructuredSummaryReport #addToStructure: stamp: 'AM 11/16/2020 01:12:07'!
addToStructure: aStructureEntry

	structure add: aStructureEntry.!

!testRun: #StructuredSummaryTest #test01AccountStructuredSummaryIncludesAccountSummary stamp: 'AM 11/16/2020 01:12:23'!
ERROR!

!testRun: #StructuredSummaryTest #test02PortfolioStructuredSummaryIncludesAccountSummary stamp: 'AM 11/16/2020 01:12:23'!
ERROR!

!testRun: #StructuredSummaryTest #test03PortfolioWithChildPortfolioStructuredSummaryIncludesChildPortflioSummary stamp: 'AM 11/16/2020 01:12:23'!
ERROR!

!testRun: #StructuredSummaryTest #test04PortfolioWithChildPortfolioStructuredSummaryShowsEqualIndentationForAccountsAndPortfolios stamp: 'AM 11/16/2020 01:12:23'!
ERROR!
!StructuredSummaryReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 01:12:45'!
handleDeposit: aDeposit! !
!StructuredSummaryReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 01:12:58'!
handleWithdraw: aWithdraw
! !
!StructuredSummaryReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 01:13:09'!
handleTransferWithdraw: aTransferWithdraw

	! !
!StructuredSummaryReport methodsFor: 'report - private' stamp: 'AM 11/16/2020 01:13:18'!
handleTransferDeposit: aTransferDeposit
! !

!testRun: #StructuredSummaryTest #test01AccountStructuredSummaryIncludesAccountSummary stamp: 'AM 11/16/2020 01:13:27'!
ERROR!

!testRun: #StructuredSummaryTest #test02PortfolioStructuredSummaryIncludesAccountSummary stamp: 'AM 11/16/2020 01:13:27'!
ERROR!

!testRun: #StructuredSummaryTest #test03PortfolioWithChildPortfolioStructuredSummaryIncludesChildPortflioSummary stamp: 'AM 11/16/2020 01:13:27'!
ERROR!

!testRun: #StructuredSummaryTest #test04PortfolioWithChildPortfolioStructuredSummaryShowsEqualIndentationForAccountsAndPortfolios stamp: 'AM 11/16/2020 01:13:27'!
ERROR!

!testRun: #StructuredSummaryTest #test01AccountStructuredSummaryIncludesAccountSummary stamp: 'AM 11/16/2020 01:13:39'!
ERROR!

!testRun: #StructuredSummaryTest #test01AccountStructuredSummaryIncludesAccountSummary stamp: 'AM 11/16/2020 01:13:39'!
ERROR!

!methodRemoval: Portfolio #reportStructureTo:indentedBy: stamp: 'AM 11/16/2020 01:14:07'!
reportStructureTo: aReport indentedBy: anIndentationString
	
	aReport addToStructure: (anIndentationString,(name copy)).
	accounts do: [:account | account reportStructureTo: aReport indentedBy: (anIndentationString, '    ')].!

!methodRemoval: Portfolio #reportTransactionsTo: stamp: 'AM 11/16/2020 01:14:09'!
reportTransactionsTo: aReport
	
	accounts do: [:account | account reportTransactionsTo: aReport].!

!methodRemoval: ReceptiveAccount #reportStructureTo:indentedBy: stamp: 'AM 11/16/2020 01:14:14'!
reportStructureTo: aReport indentedBy: anIndentationString
	
	aReport addToStructure: (anIndentationString,(name copy)).
	aReport addSummaryFor: self withIndentation: (anIndentationString, '    ').
	!

!methodRemoval: ReceptiveAccount #reportTransactionsTo: stamp: 'AM 11/16/2020 01:14:17'!
reportTransactionsTo: aReport
	
	transactions do: [:account | account reportTo: aReport].!

----SNAPSHOT----(16 November 2020 01:14:28) CuisUniversity-4383.image priorSource: 17685927!
!StructuredSummaryReport methodsFor: 'report' stamp: 'AM 11/16/2020 01:14:42' prior: 50885068 overrides: 50882161!
report

	account reportTo: self.
	^structure.! !

!testRun: #StructuredSummaryTest #test01AccountStructuredSummaryIncludesAccountSummary stamp: 'AM 11/16/2020 01:14:47'!
ERROR!

!testRun: #StructuredSummaryTest #test02PortfolioStructuredSummaryIncludesAccountSummary stamp: 'AM 11/16/2020 01:14:47'!
ERROR!

!testRun: #StructuredSummaryTest #test03PortfolioWithChildPortfolioStructuredSummaryIncludesChildPortflioSummary stamp: 'AM 11/16/2020 01:14:47'!
ERROR!

!testRun: #StructuredSummaryTest #test04PortfolioWithChildPortfolioStructuredSummaryShowsEqualIndentationForAccountsAndPortfolios stamp: 'AM 11/16/2020 01:14:47'!
ERROR!

!testRun: #StructuredSummaryTest #test01AccountStructuredSummaryIncludesAccountSummary stamp: 'AM 11/16/2020 01:14:52'!
ERROR!

!testRun: #StructuredSummaryTest #test01AccountStructuredSummaryIncludesAccountSummary stamp: 'AM 11/16/2020 01:14:52'!
ERROR!
!StructuredSummaryReport methodsFor: 'initialization' stamp: 'AM 11/16/2020 01:15:25' prior: 50885208 overrides: 16896425!
initialize

	structure := OrderedCollection new.
	indentation := ''.
	treeLevelSize := 1.! !

!testRun: #StructuredSummaryTest #test01AccountStructuredSummaryIncludesAccountSummary stamp: 'AM 11/16/2020 01:15:30'!
ERROR!

!testRun: #StructuredSummaryTest #test02PortfolioStructuredSummaryIncludesAccountSummary stamp: 'AM 11/16/2020 01:15:30'!
ERROR!

!testRun: #StructuredSummaryTest #test03PortfolioWithChildPortfolioStructuredSummaryIncludesChildPortflioSummary stamp: 'AM 11/16/2020 01:15:30'!
ERROR!

!testRun: #StructuredSummaryTest #test04PortfolioWithChildPortfolioStructuredSummaryShowsEqualIndentationForAccountsAndPortfolios stamp: 'AM 11/16/2020 01:15:30'!
ERROR!

!testRun: #StructuredSummaryTest #test01AccountStructuredSummaryIncludesAccountSummary stamp: 'AM 11/16/2020 01:15:34'!
ERROR!

!testRun: #StructuredSummaryTest #test01AccountStructuredSummaryIncludesAccountSummary stamp: 'AM 11/16/2020 01:15:34'!
ERROR!
!StructuredSummaryReport methodsFor: 'indentation - private' stamp: 'AM 11/16/2020 01:16:03'!
updateLastLevelSize

	| lastLevelSize |
	
	lastLevelSize := treeLevelSize last.
	treeLevelSize removeLast.
	treeLevelSize addLast: lastLevelSize -1.
	! !

!classDefinition: #StructureReports category: 'Portfolio-Solucion' stamp: 'AM 11/16/2020 01:16:51'!
AccountReports subclass: #StructureReports
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #StructureReport category: 'Portfolio-Solucion' stamp: 'AM 11/16/2020 01:16:51'!
StructureReports subclass: #StructureReport
	instanceVariableNames: 'structure indentation treeLevelSize'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

StructureReports subclass: #StructuredSummaryReport
	instanceVariableNames: 'structure indentation treeLevelSize'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #StructuredSummaryReport category: 'Portfolio-Solucion' stamp: 'AM 11/16/2020 01:17:04'!
StructureReports subclass: #StructuredSummaryReport
	instanceVariableNames: 'structure indentation treeLevelSize'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountReports subclass: #StructureReports
	instanceVariableNames: 'indentation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

StructureReports subclass: #StructureReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #StructureReport category: 'Portfolio-Solucion' stamp: 'AM 11/16/2020 01:19:39'!
StructureReports subclass: #StructureReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

StructureReports subclass: #StructuredSummaryReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #StructuredSummaryReport category: 'Portfolio-Solucion' stamp: 'AM 11/16/2020 01:19:45'!
StructureReports subclass: #StructuredSummaryReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountReports subclass: #StructureReports
	instanceVariableNames: 'structure indentation treeLevelSize'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #StructureReports category: 'Portfolio-Solucion' stamp: 'AM 11/16/2020 01:19:49'!
AccountReports subclass: #StructureReports
	instanceVariableNames: 'structure indentation treeLevelSize'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!StructureReports methodsFor: 'indentation - private' stamp: 'AM 11/16/2020 01:19:56'!
decreaseIndentation

	indentation := indentation copyFrom: 1 to: (indentation size - 4).! !

!methodRemoval: StructureReport #decreaseIndentation stamp: 'AM 11/16/2020 01:19:56'!
decreaseIndentation

	indentation := indentation copyFrom: 1 to: (indentation size - 4).!
!StructureReports methodsFor: 'indentation - private' stamp: 'AM 11/16/2020 01:20:08'!
decreaseIndentationIfLastInLevel

	(treeLevelSize last = 0) ifTrue: [self decreaseIndentation.
							treeLevelSize removeLast.].
						
	! !

!methodRemoval: StructureReport #decreaseIndentationIfLastInLevel stamp: 'AM 11/16/2020 01:20:08'!
decreaseIndentationIfLastInLevel

	(treeLevelSize last = 0) ifTrue: [self decreaseIndentation.
							treeLevelSize removeLast.].
						
	!
!StructureReports methodsFor: 'indentation - private' stamp: 'AM 11/16/2020 01:20:11'!
increaseIndentation
	
	indentation := indentation,'    '.! !

!methodRemoval: StructureReport #increaseIndentation stamp: 'AM 11/16/2020 01:20:11'!
increaseIndentation
	
	indentation := indentation,'    '.!
!StructureReports methodsFor: 'indentation - private' stamp: 'AM 11/16/2020 01:20:15'!
updateLastLevelSize

	| lastLevelSize |
	
	lastLevelSize := treeLevelSize last.
	treeLevelSize removeLast.
	treeLevelSize addLast: lastLevelSize -1.
	! !

!methodRemoval: StructureReport #updateLastLevelSize stamp: 'AM 11/16/2020 01:20:15'!
updateLastLevelSize

	| lastLevelSize |
	
	lastLevelSize := treeLevelSize last.
	treeLevelSize removeLast.
	treeLevelSize addLast: lastLevelSize -1.
	!
!StructureReports methodsFor: 'initialization' stamp: 'AM 11/16/2020 01:21:11' overrides: 16896425!
initialize 

	structure := OrderedCollection new.
	treeLevelSize := OrderedCollection with: 1.
	indentation := ''.! !

!methodRemoval: StructureReport #initialize stamp: 'AM 11/16/2020 01:21:11'!
initialize 

	structure := OrderedCollection new.
	treeLevelSize := OrderedCollection with: 1.
	indentation := ''.!
!StructureReports methodsFor: 'report' stamp: 'AM 11/16/2020 01:21:25' overrides: 50882161!
report
	
	account reportTo: self.
	^structure.! !

!methodRemoval: StructureReport #report stamp: 'AM 11/16/2020 01:21:25'!
report
	
	account reportTo: self.
	^structure.!
!StructureReports methodsFor: 'report - private' stamp: 'AM 11/16/2020 01:22:44'!
handlePortfolio: aPortfolio
	
	structure add: indentation, aPortfolio name.
	self updateLastLevelSize.
	treeLevelSize addLast: aPortfolio accountsSize.
	self increaseIndentation.! !

!methodRemoval: StructuredSummaryReport #handlePortfolio: stamp: 'AM 11/16/2020 01:22:44'!
handlePortfolio: aPortfolio
	
	structure add: indentation, aPortfolio name.
	self updateLastLevelSize.
	treeLevelSize addLast: aPortfolio accountsSize.
	self increaseIndentation.!

!methodRemoval: StructureReport #handlePortfolio: stamp: 'AM 11/16/2020 01:23:01'!
handlePortfolio: aPortfolio
	
	structure add: indentation, aPortfolio name.
	self updateLastLevelSize.
	treeLevelSize addLast: aPortfolio accountsSize.
	self increaseIndentation.!
!StructureReports methodsFor: 'report - private' stamp: 'AM 11/16/2020 01:23:09'!
handleDeposit: aDeposit

	! !

!methodRemoval: StructureReport #handleDeposit: stamp: 'AM 11/16/2020 01:23:09'!
handleDeposit: aDeposit

	!

!methodRemoval: StructuredSummaryReport #handleDeposit: stamp: 'AM 11/16/2020 01:23:27'!
handleDeposit: aDeposit!
!StructureReports methodsFor: 'report - private' stamp: 'AM 11/16/2020 01:23:31'!
handleTransferDeposit: aTransferDeposit
! !

!methodRemoval: StructuredSummaryReport #handleTransferDeposit: stamp: 'AM 11/16/2020 01:23:31'!
handleTransferDeposit: aTransferDeposit
!
!StructureReports methodsFor: 'report - private' stamp: 'AM 11/16/2020 01:23:36'!
handleTransferWithdraw: aTransferWithdraw

	! !

!methodRemoval: StructuredSummaryReport #handleTransferWithdraw: stamp: 'AM 11/16/2020 01:23:36'!
handleTransferWithdraw: aTransferWithdraw

	!
!StructureReports methodsFor: 'report - private' stamp: 'AM 11/16/2020 01:23:39'!
handleWithdraw: aWithdraw
! !

!methodRemoval: StructuredSummaryReport #handleWithdraw: stamp: 'AM 11/16/2020 01:23:39'!
handleWithdraw: aWithdraw
!

!methodRemoval: StructureReport #handleTransferDeposit: stamp: 'AM 11/16/2020 01:23:52'!
handleTransferDeposit: aTransferDeposit

	!

!methodRemoval: StructureReport #handleTransferWithdraw: stamp: 'AM 11/16/2020 01:23:55'!
handleTransferWithdraw: aTransferWithdraw

	!

!methodRemoval: StructureReport #handleWithdraw: stamp: 'AM 11/16/2020 01:23:58'!
handleWithdraw: aWithdraw

	!

!methodRemoval: StructuredSummaryReport #initialize stamp: 'AM 11/16/2020 01:24:10'!
initialize

	structure := OrderedCollection new.
	indentation := ''.
	treeLevelSize := 1.!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/16/2020 01:24:17'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/16/2020 01:24:17'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/16/2020 01:24:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/16/2020 01:24:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/16/2020 01:24:17'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/16/2020 01:24:17'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/16/2020 01:24:17'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/16/2020 01:24:17'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/16/2020 01:24:17'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/16/2020 01:24:17'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/16/2020 01:24:17'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/16/2020 01:24:17'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/16/2020 01:24:17'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/16/2020 01:24:17'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/16/2020 01:24:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 01:24:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 01:24:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 01:24:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 01:24:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 01:24:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 01:24:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 01:24:17'!
PASSED!

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/16/2020 01:24:17'!
PASSED!

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/16/2020 01:24:17'!
PASSED!

!testRun: #StructureReportTest #test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation stamp: 'AM 11/16/2020 01:24:17'!
PASSED!

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/16/2020 01:24:18'!
PASSED!

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/16/2020 01:24:18'!
PASSED!

!testRun: #StructuredSummaryTest #test01AccountStructuredSummaryIncludesAccountSummary stamp: 'AM 11/16/2020 01:24:18'!
PASSED!

!testRun: #StructuredSummaryTest #test02PortfolioStructuredSummaryIncludesAccountSummary stamp: 'AM 11/16/2020 01:24:18'!
PASSED!

!testRun: #StructuredSummaryTest #test03PortfolioWithChildPortfolioStructuredSummaryIncludesChildPortflioSummary stamp: 'AM 11/16/2020 01:24:18'!
PASSED!

!testRun: #StructuredSummaryTest #test04PortfolioWithChildPortfolioStructuredSummaryShowsEqualIndentationForAccountsAndPortfolios stamp: 'AM 11/16/2020 01:24:18'!
PASSED!

!testRun: #SummaryReportTest #test01AccountSummaryForEmptyAccountIsZeroBalance stamp: 'AM 11/16/2020 01:24:18'!
PASSED!

!testRun: #SummaryReportTest #test02AccountSummaryForAccountWithOneTransactionMatchesBalanceAndTransaction stamp: 'AM 11/16/2020 01:24:18'!
PASSED!

!testRun: #SummaryReportTest #test03AccountSummaryForAccountWithMultipleTransactionsShowsAllTransactions stamp: 'AM 11/16/2020 01:24:18'!
PASSED!

!testRun: #SummaryReportTest #test04SummaryForEmptyPorfolioIsZeroBalance stamp: 'AM 11/16/2020 01:24:18'!
PASSED!

!testRun: #SummaryReportTest #test05SummaryForPorfolioWithOneAccountMatchesAccountTransactionsAndBalance stamp: 'AM 11/16/2020 01:24:18'!
PASSED!

!testRun: #SummaryReportTest #test06SummaryForPorfolioWithOnePortfolioMatchesPortfolioTransactionsAndBalance stamp: 'AM 11/16/2020 01:24:18'!
PASSED!

!testRun: #TransferNetReportTest #test01EmptyAccountTransferNetIsZero stamp: 'AM 11/16/2020 01:24:18'!
PASSED!

!testRun: #TransferNetReportTest #test02TransferNetReportForAccountWithTransferWithdrawMatchesWithdrawAmount stamp: 'AM 11/16/2020 01:24:18'!
PASSED!

!testRun: #TransferNetReportTest #test03TransferNetReportForAccountWithTransferDepositMatchesDepositAmount stamp: 'AM 11/16/2020 01:24:18'!
PASSED!

!testRun: #TransferNetReportTest #test04NonTransferTransactionsDontAffectTrasferNet stamp: 'AM 11/16/2020 01:24:18'!
PASSED!

!testRun: #TransferTest #test01TransferKnowsTransferorAndTransferee stamp: 'AM 11/16/2020 01:24:18'!
PASSED!

!testRun: #TransferTest #test02TransferAmountReturnedCorrectly stamp: 'AM 11/16/2020 01:24:18'!
PASSED!

!testRun: #TransferTest #test03TransferAffectsTransferorBalanceCorrectly stamp: 'AM 11/16/2020 01:24:18'!
PASSED!

!testRun: #TransferTest #test04TransferAffectsTransfereeBalanceCorrectly stamp: 'AM 11/16/2020 01:24:18'!
PASSED!

!testRun: #TransferTest #test05TransferMustBeAPositiveNumber stamp: 'AM 11/16/2020 01:24:18'!
PASSED!

!testRun: #TransferTest #test06TransfersToAndFromTheSameAccountNotAllowed stamp: 'AM 11/16/2020 01:24:18'!
PASSED!

!testRun: #StructuredSummaryTest #test01AccountStructuredSummaryIncludesAccountSummary stamp: 'AM 11/16/2020 01:24:23'!
PASSED!

!testRun: #StructuredSummaryTest #test02PortfolioStructuredSummaryIncludesAccountSummary stamp: 'AM 11/16/2020 01:24:23'!
PASSED!

!testRun: #StructuredSummaryTest #test03PortfolioWithChildPortfolioStructuredSummaryIncludesChildPortflioSummary stamp: 'AM 11/16/2020 01:24:23'!
PASSED!

!testRun: #StructuredSummaryTest #test04PortfolioWithChildPortfolioStructuredSummaryShowsEqualIndentationForAccountsAndPortfolios stamp: 'AM 11/16/2020 01:24:23'!
PASSED!

!testRun: #StructureReportTest #test01ReceptiveAccountStructureIsAccountName stamp: 'AM 11/16/2020 01:24:26'!
PASSED!

!testRun: #StructureReportTest #test02PortfolioWithAccountDisplaysProperIndentation stamp: 'AM 11/16/2020 01:24:26'!
PASSED!

!testRun: #StructureReportTest #test03PortfolioWithTwoAccountsDisplaysAccountsWithEqualIndentation stamp: 'AM 11/16/2020 01:24:26'!
PASSED!

!testRun: #StructureReportTest #test04PortfolioWithChildPortfolioDisplaysProperIndentationForChildPortfolio stamp: 'AM 11/16/2020 01:24:26'!
PASSED!

!testRun: #StructureReportTest #test05PortfolioWithChildPortfolioDisplaysProperIndentationForAccountsAfterChildPortfolio stamp: 'AM 11/16/2020 01:24:26'!
PASSED!

----QUIT----(16 November 2020 01:25:33) CuisUniversity-4383.image priorSource: 17803398!