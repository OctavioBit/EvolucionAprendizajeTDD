

----STARTUP---- (29 October 2020 17:24:45) as C:\Users\paujimenez\Documents\Ingenieria1\cuisWindows64\windows64-Ternilapilli\CuisUniversity-4384.image!


TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'PJ 10/29/2020 17:37:04'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'PJ 10/29/2020 17:46:23'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliTest methodsFor: 'nil' stamp: 'PJ 10/29/2020 17:46:15'!
test01NewTerniLapilliIsNotOver
	
	|terni|
	terni := TerniLapilli new.
	
	self assert: terni isOver not! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 17:49:29'!
test02NewTerniLapilliHasPlayerXWon
	
	|terni|
	terni := TerniLapilli new.
	
	self assert: terni isOver not! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 17:49:39'!
test02NewTerniLapilliHasPlayerOWon
	
	|terni|
	terni := TerniLapilli new.
	
	self assert: terni isOver not! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 17:50:22'!
test03NewTerniLapilliHasPlayerOWon
	
	|terni|
	terni := TerniLapilli new.
	
	self assert: terni isOver not! !

!methodRemoval: TerniLapilliTest #test02NewTerniLapilliHasPlayerXWon stamp: 'PJ 10/29/2020 17:50:56'!
test02NewTerniLapilliHasPlayerXWon
	
	|terni|
	terni := TerniLapilli new.
	
	self assert: terni isOver not!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 17:52:00'!
test02NewTerniLapilliHasPlayerXWon
	
	|terni|
	terni := TerniLapilli new.
	
	self assert: terni isOver not! !

!methodRemoval: TerniLapilliTest #test02NewTerniLapilliHasPlayerOWon stamp: 'PJ 10/29/2020 17:52:35'!
test02NewTerniLapilliHasPlayerOWon
	
	|terni|
	terni := TerniLapilli new.
	
	self assert: terni isOver not!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 18:08:37'!
test02InNewTerniLapilliPlayerXHasntWon
	
	|terni|
	terni := TerniLapilli new.
	
	self assert: terni isOver not! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 18:08:56'!
test03InNewTerniLapilliPlayerOHasntWon
	
	|terni|
	terni := TerniLapilli new.
	
	self assert: terni isOver not! !

!methodRemoval: TerniLapilliTest #test03NewTerniLapilliHasPlayerOWon stamp: 'PJ 10/29/2020 18:09:16'!
test03NewTerniLapilliHasPlayerOWon
	
	|terni|
	terni := TerniLapilli new.
	
	self assert: terni isOver not!

!methodRemoval: TerniLapilliTest #test02NewTerniLapilliHasPlayerXWon stamp: 'PJ 10/29/2020 18:09:21'!
test02NewTerniLapilliHasPlayerXWon
	
	|terni|
	terni := TerniLapilli new.
	
	self assert: terni isOver not!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 18:15:38' prior: 50867834!
test02InNewTerniLapilliPlayerXHasntWon
	
	|terni|
	terni := TerniLapilli new.
	
	self assert: false equals: terni isOver! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 18:15:43' prior: 50867788!
test01NewTerniLapilliIsNotOver
	
	|terni|
	terni := TerniLapilli new.
	
	self assert: false equals: terni isOver! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 18:16:24' prior: 50867861!
test02InNewTerniLapilliPlayerXHasntWon
	
	|terni|
	terni := TerniLapilli new.
	
	self assert: false equals: terni hasPlayerXWon! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 18:16:43' prior: 50867841!
test03InNewTerniLapilliPlayerOHasntWon
	
	|terni|
	terni := TerniLapilli new.
	
	self assert: false equals: terni hasPlayerOWon! !

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/29/2020 18:17:26'!
ERROR!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/29/2020 18:17:26'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 18:17:38'!
isOver
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 18:18:22' prior: 50867897!
isOver
	false! !

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/29/2020 18:18:28'!
FAILURE!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/29/2020 18:19:09'!
FAILURE!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/29/2020 18:19:09'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 18:19:44' prior: 50867902!
isOver
	^false! !

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/29/2020 18:19:50'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/29/2020 18:19:55'!
ERROR!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/29/2020 18:19:55'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 18:20:06'!
hasPlayerXWon
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 18:20:34' prior: 50867930!
hasPlayerXWon
	^false! !

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/29/2020 18:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/29/2020 18:20:44'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/29/2020 18:20:47'!
ERROR!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/29/2020 18:20:47'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 18:20:53'!
hasPlayerOWon
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 18:21:01' prior: 50867952!
hasPlayerOWon
	^false! !

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/29/2020 18:21:04'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/29/2020 18:21:11'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/29/2020 18:21:11'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/29/2020 18:21:11'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/29/2020 18:21:11'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 18:26:51'!
test04InNewTerniLapilliPlayerXStartsPlaying
	
	|terni|
	terni := TerniLapilli new.
	
	self assert: terni isPlayingX.
	self assert: terni isPlayingO not! !

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlaying stamp: 'PJ 10/29/2020 18:27:04'!
ERROR!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlaying stamp: 'PJ 10/29/2020 18:27:04'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 18:27:13'!
isPlayingX
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 18:27:33' prior: 50867993!
isPlayingX
	^true! !

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlaying stamp: 'PJ 10/29/2020 18:27:36'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 18:27:44'!
isPlayingO
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 18:27:50' prior: 50868005!
isPlayingO
	^false! !

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlaying stamp: 'PJ 10/29/2020 18:27:53'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlaying stamp: 'PJ 10/29/2020 18:27:59'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlaying stamp: 'PJ 10/29/2020 18:28:02'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/29/2020 18:28:02'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/29/2020 18:28:02'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/29/2020 18:28:02'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlaying stamp: 'PJ 10/29/2020 18:28:03'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 18:48:51'!
test05AfterPlayerXTurnIsPlayerOTurn
	
	|terni|
	terni := TerniLapilli new.
	terni playTurnAction: [].
	
	self assert: terni isPlayingX not.
	self assert: terni isPlayingO! !

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/29/2020 18:49:01'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 18:49:09'!
playTurnAction: aBlockClosure 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 18:49:34' prior: 50868050!
playTurnAction: anAction 
	! !

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/29/2020 18:49:39'!
FAILURE!

Object subclass: #TerniLapilli
	instanceVariableNames: 'currentTurn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'PJ 10/29/2020 18:51:06'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentTurn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'nil' stamp: 'PJ 10/29/2020 18:52:35' overrides: 16896425!
initialize
	currentTurn := 'x'! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'PJ 10/29/2020 18:53:55'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 18:54:09' prior: 50868074 overrides: 16896425!
initialize
	isXTurn := true! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 18:54:57' prior: 50868010!
isPlayingO
	isXTurn not! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 18:55:10' prior: 50868095!
isPlayingO
	^isXTurn not! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 18:55:20' prior: 50867998!
isPlayingX
	^isXTurn! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 18:55:54' prior: 50868055!
playTurnAction: anAction 
	isXTurn := isXTurn not! !

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/29/2020 18:56:02'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/29/2020 18:56:02'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/29/2020 18:56:02'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/29/2020 18:56:02'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlaying stamp: 'PJ 10/29/2020 18:56:02'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/29/2020 18:56:02'!
PASSED!

----SNAPSHOT----(29 October 2020 18:56:09) CuisUniversity-4384.image priorSource: 17155564!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/29/2020 19:02:58'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/29/2020 19:02:58'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/29/2020 19:02:58'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/29/2020 19:02:58'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlaying stamp: 'PJ 10/29/2020 19:02:58'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/29/2020 19:02:58'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 19:05:11'!
test06AfterPlayerOTurnIsPlayerXTurnAgain
	
	|terni|
	terni := TerniLapilli new.
	terni playTurnAction: [].
	terni playTurnAction: [].
	
	self assert: terni isPlayingX.
	self assert: terni isPlayingO not! !

!testRun: #TerniLapilliTest #test06AfterPlayerOTurnIsPlayerXTurnAgain stamp: 'PJ 10/29/2020 19:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/29/2020 19:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/29/2020 19:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/29/2020 19:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlaying stamp: 'PJ 10/29/2020 19:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/29/2020 19:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test06AfterPlayerOTurnIsPlayerXTurnAgain stamp: 'PJ 10/29/2020 19:05:13'!
PASSED!

!methodRemoval: TerniLapilliTest #test06AfterPlayerOTurnIsPlayerXTurnAgain stamp: 'PJ 10/29/2020 19:05:56'!
test06AfterPlayerOTurnIsPlayerXTurnAgain
	
	|terni|
	terni := TerniLapilli new.
	terni playTurnAction: [].
	terni playTurnAction: [].
	
	self assert: terni isPlayingX.
	self assert: terni isPlayingO not!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 19:47:13' prior: 50867978!
test04InNewTerniLapilliPlayerXStartsPlaying
	
	|terni|
	terni := TerniLapilli new.
	
	self assert: terni isPlayingX.
	self assert: terni isPlayingO not.
	self assert: 0 equals: terni piecesInPlay ! !

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlaying stamp: 'PJ 10/29/2020 19:47:46'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 19:47:55'!
piecesInPlay
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 19:48:03' prior: 50868212!
piecesInPlay
	^0! !

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlaying stamp: 'PJ 10/29/2020 19:48:07'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/29/2020 19:48:07'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/29/2020 19:48:07'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/29/2020 19:48:07'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlaying stamp: 'PJ 10/29/2020 19:48:07'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/29/2020 19:48:07'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 19:48:16' prior: 50868199!
test04InNewTerniLapilliPlayerXStartsPlaying
	
	|terni|
	terni := TerniLapilli new.
	
	self assert: terni isPlayingX.
	self assert: terni isPlayingO not.
	self assert: 0 equals: terni piecesInPlay.! !

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlaying stamp: 'PJ 10/29/2020 19:48:18'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/29/2020 19:48:18'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/29/2020 19:48:18'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/29/2020 19:48:18'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlaying stamp: 'PJ 10/29/2020 19:48:18'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/29/2020 19:48:18'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 19:48:57'!
test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty
	
	|terni|
	terni := TerniLapilli new.
	
	self assert: terni isPlayingX.
	self assert: terni isPlayingO not.
	self assert: 0 equals: terni piecesInPlay.! !

!methodRemoval: TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlaying stamp: 'PJ 10/29/2020 19:49:28'!
test04InNewTerniLapilliPlayerXStartsPlaying
	
	|terni|
	terni := TerniLapilli new.
	
	self assert: terni isPlayingX.
	self assert: terni isPlayingO not.
	self assert: 0 equals: terni piecesInPlay.!

----SNAPSHOT----(29 October 2020 19:49:32) CuisUniversity-4384.image priorSource: 17167391!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 20:05:36'!
test06XCanPutAPieceInXTurn
	
	|terni|
	terni := TerniLapilli new.
	terni playTurnAction: 2@2.
	
	self assert: 1 equals: terni piecesInPlay.! !

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/29/2020 20:05:45'!
FAILURE!

Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn piecesInPlay'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'PJ 10/29/2020 20:08:32'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn piecesInPlay'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 20:09:26' prior: 50868107!
playTurnAction: anAction 
	isXTurn := isXTurn not.
	piecesInPlay := piecesInPlay + 1.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 20:09:40' prior: 50868217!
piecesInPlay
	^piecesInPlay! !

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/29/2020 20:09:49'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 20:10:21' prior: 50868091 overrides: 16896425!
initialize
	isXTurn := true.
	piecesInPlay := 0.! !

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/29/2020 20:10:28'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/29/2020 20:10:28'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/29/2020 20:10:28'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/29/2020 20:10:28'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/29/2020 20:10:28'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/29/2020 20:10:28'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/29/2020 20:10:28'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 20:25:41' prior: 50868295!
test06XCanPutAPieceInXTurn
	
	|terni|
	terni := TerniLapilli new.
	terni playTurnAction: 2@2.
	
	self assert: 1 equals: terni piecesInPlay.
	self assert: (terni isAnXPieceIn: 2@2).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 20:26:46' prior: 50868361!
test06XCanPutAPieceInXTurn
	
	|terni|
	terni := TerniLapilli new.
	terni playTurnAction: 2@2.
	
	self assert: 1 equals: terni piecesInPlay.
	self assert: (terni hasAnXPieceIn: 2@2).! !

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/29/2020 20:27:01'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 20:27:09'!
hasAnXPieceIn: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 20:28:41' prior: 50868382!
hasAnXPieceIn: aPosition
	^true.! !

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/29/2020 20:28:44'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/29/2020 20:28:44'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/29/2020 20:28:44'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/29/2020 20:28:44'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/29/2020 20:28:44'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/29/2020 20:28:44'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/29/2020 20:28:44'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 20:35:30' prior: 50868370!
test06XCanPutAPieceInXTurn
	
	|terni|
	terni := TerniLapilli new.
	terni playTurnAction: 2@2.
	
	self assert: 1 equals: terni piecesInPlay.
	self assert: (terni hasAnXPieceIn: 453).! !

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/29/2020 20:35:31'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/29/2020 20:35:31'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/29/2020 20:35:31'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/29/2020 20:35:31'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/29/2020 20:35:31'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/29/2020 20:35:31'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/29/2020 20:35:31'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 20:36:01' prior: 50868415!
test06XCanPutAPieceInXTurn
	
	|terni|
	terni := TerniLapilli new.
	terni playTurnAction: 2@2.
	
	self assert: 1 equals: terni piecesInPlay.
	self assert: (terni hasAnXPieceIn: 2@2).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 20:48:40' prior: 50868448!
test06XCanPutAPieceInXTurn
	
	|terni|
	terni := TerniLapilli new.
	terni playTurnAction: 'centro'.
	
	self assert: 1 equals: terni piecesInPlay.
	self assert: (terni hasAnXPieceIn: 'centro').! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 20:48:58' prior: 50868038!
test05AfterPlayerXTurnIsPlayerOTurn
	
	|terni|
	terni := TerniLapilli new.
	terni playTurnAction: 'centro'.
	
	self assert: terni isPlayingX not.
	self assert: terni isPlayingO! !

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/29/2020 20:49:05'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/29/2020 20:49:05'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/29/2020 20:49:05'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/29/2020 20:49:05'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/29/2020 20:49:05'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/29/2020 20:49:05'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/29/2020 20:49:05'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 20:51:36'!
test07OCanPutAPieceInOTurn
	
	|terni|
	terni := TerniLapilli new.
	terni playTurnAction: 'centro'.
	terni playTurnAction: 'centroArriba'.
	
	self assert: 2 equals: terni piecesInPlay.
	self assert: (terni hasAnOPieceIn: 'centroArriba').! !

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/29/2020 20:51:45'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 20:51:54'!
hasAnOPieceIn: aString 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 20:52:39' prior: 50868513!
hasAnOPieceIn: aString 
	^true.! !

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/29/2020 20:52:41'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/29/2020 20:52:41'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/29/2020 20:52:41'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/29/2020 20:52:41'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/29/2020 20:52:41'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/29/2020 20:52:41'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/29/2020 20:52:41'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/29/2020 20:52:41'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 20:59:40'!
test08OCanNotPutAPieceInAnOccupiedSite
	
	|terni|
	terni := TerniLapilli new.
	terni playTurnAction: 'centro'.
	
	self should: [terni playTurnAction: 'centro']
		raise: Error - MessageNotUnderstood
		withMessageText: terni class canNotPutAPieceInAnOccupiedSiteErrorDescription.
		
	self assert: 1 equals: terni piecesInPlay.
	! !

!testRun: #TerniLapilliTest #test08OCanNotPutAPieceInAnOccupiedSite stamp: 'PJ 10/29/2020 20:59:47'!
ERROR!
!TerniLapilli class methodsFor: 'exception descriptions' stamp: 'PJ 10/29/2020 21:00:30'!
canNotPutAPieceInAnOccupiedSiteErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'exception descriptions' stamp: 'PJ 10/29/2020 21:01:15' prior: 50868566!
canNotPutAPieceInAnOccupiedSiteErrorDescription
	^'can Not Put A Piece In An Occupied Site'.! !
!TerniLapilli class methodsFor: 'exception descriptions' stamp: 'PJ 10/29/2020 21:02:11' prior: 50868572!
canNotPutAPieceInAnOccupiedSiteErrorDescription
	^'cannot Put A Piece In An Occupied Site'.! !

!testRun: #TerniLapilliTest #test08OCanNotPutAPieceInAnOccupiedSite stamp: 'PJ 10/29/2020 21:02:13'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 21:10:21' prior: 50868318!
playTurnAction: aPosition 
	
	((self hasAnOPieceIn: aPosition) or: [self hasAnXPieceIn: aPosition]) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedSiteErrorDescription].
	
	isXTurn := isXTurn not.
	piecesInPlay := piecesInPlay + 1.! !

!testRun: #TerniLapilliTest #test08OCanNotPutAPieceInAnOccupiedSite stamp: 'PJ 10/29/2020 21:10:28'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 21:12:07' prior: 50868549!
test08OCanNotPutAPieceInAnOccupiedSite
	
	"|terni|
	terni := TerniLapilli new.
	terni playTurnAction: 'centro'.
	
	self should: [terni playTurnAction: 'centro']
		raise: Error - MessageNotUnderstood
		withMessageText: terni class canNotPutAPieceInAnOccupiedSiteErrorDescription.
		
	self assert: 1 equals: terni piecesInPlay."
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 21:12:23' prior: 50868589!
playTurnAction: aPosition 
	
	"((self hasAnOPieceIn: aPosition) or: [self hasAnXPieceIn: aPosition]) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedSiteErrorDescription]."
	
	isXTurn := isXTurn not.
	piecesInPlay := piecesInPlay + 1.! !

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/29/2020 21:12:29'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/29/2020 21:12:29'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/29/2020 21:12:29'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/29/2020 21:12:29'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/29/2020 21:12:29'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/29/2020 21:12:29'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/29/2020 21:12:29'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/29/2020 21:12:29'!
PASSED!

!testRun: #TerniLapilliTest #test08OCanNotPutAPieceInAnOccupiedSite stamp: 'PJ 10/29/2020 21:12:29'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 21:22:44'!
test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter
	
	|terni|
	terni := TerniLapilli new.
		
	self assert: false equals: (terni hasAnXPieceIn: 'centro').
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 21:23:04'!
test100OCanNotPutAPieceInAnOccupiedSite
	
	"|terni|
	terni := TerniLapilli new.
	terni playTurnAction: 'centro'.
	
	self should: [terni playTurnAction: 'centro']
		raise: Error - MessageNotUnderstood
		withMessageText: terni class canNotPutAPieceInAnOccupiedSiteErrorDescription.
		
	self assert: 1 equals: terni piecesInPlay."
	! !

!methodRemoval: TerniLapilliTest #test08OCanNotPutAPieceInAnOccupiedSite stamp: 'PJ 10/29/2020 21:23:09'!
test08OCanNotPutAPieceInAnOccupiedSite
	
	"|terni|
	terni := TerniLapilli new.
	terni playTurnAction: 'centro'.
	
	self should: [terni playTurnAction: 'centro']
		raise: Error - MessageNotUnderstood
		withMessageText: terni class canNotPutAPieceInAnOccupiedSiteErrorDescription.
		
	self assert: 1 equals: terni piecesInPlay."
	!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/29/2020 21:23:38'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 21:26:01' prior: 50868387!
hasAnXPieceIn: aPosition
	^piecesInPlay > 0.! !

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/29/2020 21:26:08'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/29/2020 21:26:08'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/29/2020 21:26:08'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/29/2020 21:26:08'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/29/2020 21:26:08'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/29/2020 21:26:08'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/29/2020 21:26:08'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/29/2020 21:26:08'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/29/2020 21:26:08'!
PASSED!

!testRun: #TerniLapilliTest #test100OCanNotPutAPieceInAnOccupiedSite stamp: 'PJ 10/29/2020 21:26:08'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 21:26:28'!
test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter
	
	|terni|
	terni := TerniLapilli new.
		
	self assert: false equals: (terni hasAnOPieceIn: 'centro').
	! !

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PJ 10/29/2020 21:26:30'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 21:26:52' prior: 50868518!
hasAnOPieceIn: aString 
	^piecesInPlay > 0.! !

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PJ 10/29/2020 21:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/29/2020 21:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/29/2020 21:27:19'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/29/2020 21:27:19'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/29/2020 21:27:19'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/29/2020 21:27:19'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/29/2020 21:27:19'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/29/2020 21:27:19'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/29/2020 21:27:19'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PJ 10/29/2020 21:27:19'!
PASSED!

!testRun: #TerniLapilliTest #test100OCanNotPutAPieceInAnOccupiedSite stamp: 'PJ 10/29/2020 21:27:19'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 21:36:17'!
test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro
	
	|terni|
	terni := TerniLapilli new.
	terni playTurnAction: 'ArribaCentro'.	
	self assert: false equals: (terni hasAnOPieceIn: 'centro').
	! !

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/29/2020 21:36:24'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 21:36:58' prior: 50868792!
test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro
	
	|terni|
	terni := TerniLapilli new.
	terni playTurnAction: 'ArribaCentro'.	
	self assert: false equals: (terni hasAnOPieceIn: 'centro').
	self assert: false equals: (terni hasAnXPieceIn: 'centro').	! !

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/29/2020 21:37:01'!
FAILURE!

Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn piecesInPlay arribaIzq arribaCentro arribaDer izquierda centro derecha abajoIzq abajoCentro abajoDer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'PJ 10/29/2020 21:53:13'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn piecesInPlay arribaIzq arribaCentro arribaDer izquierda centro derecha abajoIzq abajoCentro abajoDer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 21:54:08' prior: 50868807!
test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro
	
	|terni|
	terni := TerniLapilli new.
	terni playTurnAction: 'arribaCentro'.	
	self assert: false equals: (terni hasAnOPieceIn: 'centro').
	self assert: false equals: (terni hasAnXPieceIn: 'centro').	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 21:57:55' prior: 50868698!
hasAnXPieceIn: aPosition
	aPosition = 'centro' ifTrue: [^centro = 'X'].! !

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/29/2020 21:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/29/2020 21:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/29/2020 21:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/29/2020 21:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/29/2020 21:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/29/2020 21:58:01'!
FAILURE!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/29/2020 21:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/29/2020 21:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PJ 10/29/2020 21:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test100OCanNotPutAPieceInAnOccupiedSite stamp: 'PJ 10/29/2020 21:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/29/2020 21:58:01'!
FAILURE!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/29/2020 21:58:46'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 22:00:23' prior: 50868749!
hasAnOPieceIn: aPosition
	aPosition = 'centro' ifTrue: [^centro = 'O'].! !

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/29/2020 22:00:26'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/29/2020 22:00:30'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 22:03:09' prior: 50868618!
playTurnAction: aPosition 
	
	"((self hasAnOPieceIn: aPosition) or: [self hasAnXPieceIn: aPosition]) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedSiteErrorDescription]."
	aPosition = 'centro' ifTrue: [isXTurn ifTrue: [centro := 'X'] ifFalse: [centro := 'O']].
	isXTurn := isXTurn not.
	piecesInPlay := piecesInPlay + 1.! !

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/29/2020 22:03:13'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/29/2020 22:03:23'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/29/2020 22:03:23'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/29/2020 22:03:23'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/29/2020 22:03:23'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/29/2020 22:03:23'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/29/2020 22:03:23'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/29/2020 22:03:23'!
ERROR!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/29/2020 22:03:23'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PJ 10/29/2020 22:03:23'!
PASSED!

!testRun: #TerniLapilliTest #test100OCanNotPutAPieceInAnOccupiedSite stamp: 'PJ 10/29/2020 22:03:23'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/29/2020 22:03:23'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/29/2020 22:03:23'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 22:04:26' prior: 50868499!
test07OCanPutAPieceInOTurn
	
	|terni|
	terni := TerniLapilli new.
	terni playTurnAction: 'centro'.
	terni playTurnAction: 'arribaCentro'.
	
	self assert: 2 equals: terni piecesInPlay.
	self assert: (terni hasAnOPieceIn: 'centroArriba').! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 22:05:17' prior: 50868915!
playTurnAction: aPosition 
	
	"((self hasAnOPieceIn: aPosition) or: [self hasAnXPieceIn: aPosition]) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedSiteErrorDescription]."
	aPosition = 'centro' ifTrue: [isXTurn ifTrue: [centro := 'X'] ifFalse: [centro := 'O']].
	aPosition = 'arribaCentro' ifTrue: [isXTurn ifTrue: [arribaCentro := 'X'] ifFalse: [arribaCentro := 'O']].
	isXTurn := isXTurn not.
	piecesInPlay := piecesInPlay + 1.! !

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/29/2020 22:05:27'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 22:06:09' prior: 50868902!
hasAnOPieceIn: aPosition
	aPosition = 'centro' ifTrue: [^centro = 'O'].
	aPosition = 'arribaCentro' ifTrue: [^arribaCentro = 'O'].! !

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/29/2020 22:06:12'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/29/2020 22:06:36' prior: 50868974!
test07OCanPutAPieceInOTurn
	
	|terni|
	terni := TerniLapilli new.
	terni playTurnAction: 'centro'.
	terni playTurnAction: 'arribaCentro'.
	
	self assert: 2 equals: terni piecesInPlay.
	self assert: (terni hasAnOPieceIn: 'arribaCentro').! !

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/29/2020 22:06:38'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/29/2020 22:06:44'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/29/2020 22:06:44'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/29/2020 22:06:44'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/29/2020 22:06:44'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/29/2020 22:06:44'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/29/2020 22:06:44'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/29/2020 22:06:44'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/29/2020 22:06:44'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PJ 10/29/2020 22:06:44'!
PASSED!

!testRun: #TerniLapilliTest #test100OCanNotPutAPieceInAnOccupiedSite stamp: 'PJ 10/29/2020 22:06:44'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/29/2020 22:06:44'!
PASSED!

!methodRemoval: TerniLapilliTest #test100OCanNotPutAPieceInAnOccupiedSite stamp: 'PJ 10/29/2020 22:15:16'!
test100OCanNotPutAPieceInAnOccupiedSite
	
	"|terni|
	terni := TerniLapilli new.
	terni playTurnAction: 'centro'.
	
	self should: [terni playTurnAction: 'centro']
		raise: Error - MessageNotUnderstood
		withMessageText: terni class canNotPutAPieceInAnOccupiedSiteErrorDescription.
		
	self assert: 1 equals: terni piecesInPlay."
	!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/29/2020 22:15:23'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/29/2020 22:15:23'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/29/2020 22:15:23'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/29/2020 22:15:23'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/29/2020 22:15:23'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/29/2020 22:15:23'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/29/2020 22:15:23'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/29/2020 22:15:23'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/29/2020 22:15:23'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PJ 10/29/2020 22:15:23'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/29/2020 22:15:23'!
PASSED!

----SNAPSHOT----(29 October 2020 22:32:02) CuisUniversity-4384.image priorSource: 17172495!

----QUIT----(29 October 2020 22:32:11) CuisUniversity-4384.image priorSource: 17199079!

----STARTUP---- (31 October 2020 17:04:03) as C:\Users\paujimenez\Documents\Ingenieria1\cuisWindows64\windows64-Ternilapilli\CuisUniversity-4384.image!


Object subclass: #Posiciones
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #Posiciones category: 'TerniLapilli' stamp: 'PJ 10/31/2020 17:32:15'!
Object subclass: #Posiciones
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

Posiciones subclass: #Centro
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #Centro category: 'TerniLapilli' stamp: 'PJ 10/31/2020 17:32:41'!
Posiciones subclass: #Centro
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

Posiciones subclass: #ArribaCentro
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #ArribaCentro category: 'TerniLapilli' stamp: 'PJ 10/31/2020 17:32:52'!
Posiciones subclass: #ArribaCentro
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

Posiciones subclass: #AbajoCentro
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #AbajoCentro category: 'TerniLapilli' stamp: 'PJ 10/31/2020 17:33:02'!
Posiciones subclass: #AbajoCentro
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

Posiciones subclass: #Izquierda
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #Izquierda category: 'TerniLapilli' stamp: 'PJ 10/31/2020 17:33:16'!
Posiciones subclass: #Izquierda
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

Posiciones subclass: #ArribaIzquierda
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #ArribaIzquierda category: 'TerniLapilli' stamp: 'PJ 10/31/2020 17:33:25'!
Posiciones subclass: #ArribaIzquierda
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

Posiciones subclass: #AbajoIzquierda
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #AbajoIzquierda category: 'TerniLapilli' stamp: 'PJ 10/31/2020 17:33:34'!
Posiciones subclass: #AbajoIzquierda
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

Posiciones subclass: #AbajoDerecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #AbajoDerecha category: 'TerniLapilli' stamp: 'PJ 10/31/2020 17:33:46'!
Posiciones subclass: #AbajoDerecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

Posiciones subclass: #ArribaDerecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #ArribaDerecha category: 'TerniLapilli' stamp: 'PJ 10/31/2020 17:33:52'!
Posiciones subclass: #ArribaDerecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

Posiciones subclass: #Derecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #Derecha category: 'TerniLapilli' stamp: 'PJ 10/31/2020 17:33:59'!
Posiciones subclass: #Derecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

Object subclass: #Posiciones
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #Posiciones category: 'TerniLapilli' stamp: 'PJ 10/31/2020 17:35:35'!
Object subclass: #Posiciones
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!Posiciones methodsFor: 'nil' stamp: 'PJ 10/31/2020 17:39:56'!
isEmpty
	^valor = ''! !
!Posiciones methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 17:40:23'!
hasAnX
	^valor = 'X'! !
!Posiciones methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 17:40:30'!
hasAnO
	^valor = 'O'! !
!Posiciones methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 17:41:01'!
storeAnO
	^valor := 'O'! !
!Posiciones methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 17:41:19'!
storeAnX
	^valor := 'X'! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn piecesInPlay board'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'PJ 10/31/2020 17:50:56'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn piecesInPlay board'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 18:00:09' prior: 50868332 overrides: 16896425!
initialize
	isXTurn := true.
	piecesInPlay := 0.
	board := OrderedCollection new.
	board at: 0 put: ArribaIzquierda new.
	board at: 1 put: ArribaCentro new.
	board at: 2 put: ArribaDerecha new.
	board at: 3 put: Izquierda new.
	board at: 4 put: Centro new.
	board at: 5 put: Derecha new.
	board at: 6 put: AbajoIzquierda new.
	board at: 7 put: AbajoCentro new.
	board at: 8 put: AbajoDerecha new.! !
!Posiciones methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 18:00:49' overrides: 16896425!
initialize
	^valor := ''! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 18:06:51' prior: 50868985!
playTurnAction: aPosition 
	
	"((self hasAnOPieceIn: aPosition) or: [self hasAnXPieceIn: aPosition]) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedSiteErrorDescription]."
	|boardPosition|
	boardPosition := board  detect: [:aBoardPosition | aBoardPosition canHandle: aPosition ].
	self isXTurn ifTrue: [boardPosition storeAnX] ifFalse: [boardPosition storeAnO].
	isXTurn := isXTurn not.
	piecesInPlay := piecesInPlay + 1.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 18:07:42' prior: 50869309!
playTurnAction: aPosition 
	
	"((self hasAnOPieceIn: aPosition) or: [self hasAnXPieceIn: aPosition]) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedSiteErrorDescription]."
	|boardPosition|
	boardPosition := board  detect: [:aBoardPosition | aBoardPosition canHandle: aPosition ].
	self isXTurn ifTrue: [boardPosition storeAnX] ifFalse: [boardPosition storeAnO].
	isXTurn := isXTurn not.
	piecesInPlay := piecesInPlay + 1.! !
!Posiciones methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 18:10:39'!
canHandle: aPositionIdentifier
	self subclassResponsibility ! !
!AbajoCentro methodsFor: 'nil' stamp: 'PJ 10/31/2020 18:11:25' overrides: 50869343!
canHandle: aPositionIdentifier
	
	^aPositionIdentifier = 'abajoCentro'! !
!AbajoDerecha methodsFor: 'nil' stamp: 'PJ 10/31/2020 18:11:44' overrides: 50869343!
canHandle: aPositionIdentifier
	
	^aPositionIdentifier = 'abajoDerecha'! !
!AbajoIzquierda methodsFor: 'nil' stamp: 'PJ 10/31/2020 18:12:00' overrides: 50869343!
canHandle: aPositionIdentifier
	
	^aPositionIdentifier = 'abajoIzquierda'! !
!ArribaCentro methodsFor: 'nil' stamp: 'PJ 10/31/2020 18:12:24' overrides: 50869343!
canHandle: aPositionIdentifier
	
	^aPositionIdentifier = 'arribaCentro'! !
!ArribaDerecha methodsFor: 'nil' stamp: 'PJ 10/31/2020 18:12:36' overrides: 50869343!
canHandle: aPositionIdentifier
	
	^aPositionIdentifier = 'arribaDerecha'! !
!ArribaIzquierda methodsFor: 'nil' stamp: 'PJ 10/31/2020 18:12:47' overrides: 50869343!
canHandle: aPositionIdentifier
	
	^aPositionIdentifier = 'arribaIzquierda'! !
!Centro methodsFor: 'nil' stamp: 'PJ 10/31/2020 18:13:00' overrides: 50869343!
canHandle: aPositionIdentifier
	
	^aPositionIdentifier = 'Centro'! !
!Derecha methodsFor: 'nil' stamp: 'PJ 10/31/2020 18:13:15' overrides: 50869343!
canHandle: aPositionIdentifier
	
	^aPositionIdentifier = 'derecha'! !
!Centro methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 18:13:24' prior: 50869382 overrides: 50869343!
canHandle: aPositionIdentifier
	
	^aPositionIdentifier = 'centro'! !
!Izquierda methodsFor: 'nil' stamp: 'PJ 10/31/2020 18:13:37' overrides: 50869343!
canHandle: aPositionIdentifier
	
	^aPositionIdentifier = 'izquierda'! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 18:16:12' prior: 50869005!
hasAnOPieceIn: aPosition
	|boardPosition|
	boardPosition := board  detect: [:aBoardPosition | aBoardPosition canHandle: aPosition ].
	^boardPosition hasAnO! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 18:16:24' prior: 50868853!
hasAnXPieceIn: aPosition
	|boardPosition|
	boardPosition := board  detect: [:aBoardPosition | aBoardPosition canHandle: aPosition ].
	^boardPosition hasAnX! !

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/31/2020 18:16:45'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 18:17:59' prior: 50869289 overrides: 16896425!
initialize
	isXTurn := true.
	piecesInPlay := 0.
	board := OrderedCollection new.
	board at: 1 put: ArribaIzquierda new.
	board at: 2 put: ArribaCentro new.
	board at: 3 put: ArribaDerecha new.
	board at: 4 put: Izquierda new.
	board at: 5 put: Centro new.
	board at: 6 put: Derecha new.
	board at: 7 put: AbajoIzquierda new.
	board at: 8 put: AbajoCentro new.
	board at: 9 put: AbajoDerecha new.! !

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/31/2020 18:18:01'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 18:24:56' prior: 50869424 overrides: 16896425!
initialize
	isXTurn := true.
	piecesInPlay := 0.
	board := OrderedCollection new.
	board add: ArribaIzquierda new.
	board add: ArribaCentro new.
	board add: ArribaDerecha new.
	board add: Izquierda new.
	board add: Centro new.
	board add: Derecha new.
	board add: AbajoIzquierda new.
	board add: AbajoCentro new.
	board add: AbajoDerecha new.! !

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/31/2020 18:25:03'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/31/2020 18:25:03'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/31/2020 18:25:03'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/31/2020 18:25:03'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/31/2020 18:25:03'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/31/2020 18:25:03'!
ERROR!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/31/2020 18:25:03'!
ERROR!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/31/2020 18:25:03'!
ERROR!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/31/2020 18:25:03'!
ERROR!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PJ 10/31/2020 18:25:03'!
ERROR!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/31/2020 18:25:03'!
ERROR!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/31/2020 18:25:23'!
ERROR!

TerniLapilli!

TerniLapilli new!
!Posiciones methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 18:29:17' prior: 50869305 overrides: 16896425!
initialize
	valor := ''! !

board!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/31/2020 18:30:10'!
ERROR!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/31/2020 18:30:24'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 18:30:50' prior: 50869326!
playTurnAction: aPosition 
	
	"((self hasAnOPieceIn: aPosition) or: [self hasAnXPieceIn: aPosition]) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedSiteErrorDescription]."
	|boardPosition|
	boardPosition := board  detect: [:aBoardPosition | aBoardPosition canHandle: aPosition ].
	isXTurn ifTrue: [boardPosition storeAnX] ifFalse: [boardPosition storeAnO].
	isXTurn := isXTurn not.
	piecesInPlay := piecesInPlay + 1.! !

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/31/2020 18:30:53'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/31/2020 18:31:01'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/31/2020 18:31:01'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/31/2020 18:31:01'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/31/2020 18:31:01'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/31/2020 18:31:01'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/31/2020 18:31:01'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/31/2020 18:31:01'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/31/2020 18:31:01'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/31/2020 18:31:01'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PJ 10/31/2020 18:31:01'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/31/2020 18:31:01'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 18:37:47'!
getBoardPositionFor: aPositionIdentifier 
	
	^board  detect: [:aBoardPosition | aBoardPosition canHandle: aPositionIdentifier].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 18:38:22' prior: 50869404!
hasAnOPieceIn: aPosition
	|boardPosition|
	boardPosition := self getBoardPositionFor: aPosition.
	^boardPosition hasAnO! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 18:38:56' prior: 50869580!
hasAnOPieceIn: aPositionIdentifier
	|boardPosition|
	boardPosition := self getBoardPositionFor: aPositionIdentifier.
	^boardPosition hasAnO! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 18:39:11' prior: 50869412!
hasAnXPieceIn: aPositionIdentifier
	|boardPosition|
	boardPosition := self getBoardPositionFor: aPositionIdentifier.
	^boardPosition hasAnX! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 18:39:27' prior: 50869513!
playTurnAction: aPositionIdentifier 
	
	"((self hasAnOPieceIn: aPosition) or: [self hasAnXPieceIn: aPosition]) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedSiteErrorDescription]."
	|boardPosition|
	boardPosition := self getBoardPositionFor: aPositionIdentifier.
	isXTurn ifTrue: [boardPosition storeAnX] ifFalse: [boardPosition storeAnO].
	isXTurn := isXTurn not.
	piecesInPlay := piecesInPlay + 1.! !

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/31/2020 18:40:12'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/31/2020 18:40:12'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/31/2020 18:40:12'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/31/2020 18:40:12'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/31/2020 18:40:12'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/31/2020 18:40:12'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/31/2020 18:40:12'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/31/2020 18:40:12'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/31/2020 18:40:12'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PJ 10/31/2020 18:40:12'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/31/2020 18:40:12'!
PASSED!

----SNAPSHOT----(31 October 2020 18:40:55) CuisUniversity-4384.image priorSource: 17199172!

----SNAPSHOT----(31 October 2020 19:00:04) CuisUniversity-4384.image priorSource: 17216254!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PJ 10/31/2020 19:53:24'!
test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition
	
	|terni|
	terni := TerniLapilli new.
	terni playTurnAction: 'arribaCentro'.	
	
	self should: [terni playTurnAction: 'arribaCentro'.	]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli canNotPutAPieceInAnOccupiedSiteErrorDescription.
	
	self assert: terni isPlayingO.
	
	terni playTurnAction: 'centro'.	
	
	self assert: (terni hasAnOPieceIn: 'centro').	! !

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PJ 10/31/2020 19:53:28'!
FAILURE!
!TerniLapilli methodsFor: 'game actions' stamp: 'PJ 10/31/2020 19:58:35' prior: 50869603!
playTurnAction: aPositionIdentifier 
	
	"((self hasAnOPieceIn: aPosition) or: [self hasAnXPieceIn: aPosition]) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedSiteErrorDescription]."
	|boardPosition|
	boardPosition := self getBoardPositionFor: aPositionIdentifier.
	(self isPositionTaken: boardPosition) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedSiteErrorDescription].
	 
	isXTurn ifTrue: [boardPosition storeAnX] ifFalse: [boardPosition storeAnO].
	isXTurn := isXTurn not.
	piecesInPlay := piecesInPlay + 1.! !

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PJ 10/31/2020 19:58:57'!
ERROR!
!TerniLapilli methodsFor: 'private position management' stamp: 'PJ 10/31/2020 19:59:24'!
isPositionTaken: anArribaCentro 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'private position management' stamp: 'PJ 10/31/2020 20:00:23' prior: 50869713!
isPositionTaken: aBoardPosition 
	^aBoardPosition isEmpty not! !

boardPosition!

self isPositionTaken: boardPosition!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PJ 10/31/2020 20:01:18'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/31/2020 20:01:18'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/31/2020 20:01:18'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/31/2020 20:01:18'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/31/2020 20:01:18'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/31/2020 20:01:18'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/31/2020 20:01:18'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/31/2020 20:01:18'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/31/2020 20:01:18'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PJ 10/31/2020 20:01:18'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/31/2020 20:01:18'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PJ 10/31/2020 20:01:18'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PJ 10/31/2020 20:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/31/2020 20:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/31/2020 20:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/31/2020 20:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/31/2020 20:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/31/2020 20:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/31/2020 20:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/31/2020 20:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/31/2020 20:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PJ 10/31/2020 20:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/31/2020 20:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PJ 10/31/2020 20:01:54'!
PASSED!
!TerniLapilli methodsFor: 'game actions' stamp: 'PJ 10/31/2020 20:02:37' prior: 50869688!
playTurnAction: aPositionIdentifier 
	
	"((self hasAnOPieceIn: aPosition) or: [self hasAnXPieceIn: aPosition]) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedSiteErrorDescription]."
	|boardPosition|
	boardPosition := self getBoardPositionFor: aPositionIdentifier.
	(self isPositionTaken: boardPosition) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedSiteErrorDescription].
	 
	isXTurn ifTrue: [boardPosition storeAnX] ifFalse: [boardPosition storeAnO].
	self alternateTurn.
	piecesInPlay := piecesInPlay + 1.! !
!TerniLapilli methodsFor: 'game actions' stamp: 'PJ 10/31/2020 20:03:09'!
alternateTurn
	isXTurn := isXTurn not.! !

----SNAPSHOT----(31 October 2020 20:04:28) CuisUniversity-4384.image priorSource: 17216347!
!TerniLapilli methodsFor: 'game actions' stamp: 'PJ 10/31/2020 20:06:09' prior: 50869817!
playTurnAction: aPositionIdentifier 
	
	|boardPosition|
	boardPosition := self getBoardPositionFor: aPositionIdentifier.
	(self isPositionTaken: boardPosition) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedSiteErrorDescription].
	 
	isXTurn ifTrue: [boardPosition storeAnX] ifFalse: [boardPosition storeAnO].
	self alternateTurn.
	piecesInPlay := piecesInPlay + 1.! !
!TerniLapilli class methodsFor: 'exception descriptions' stamp: 'PJ 10/31/2020 20:07:04'!
canNotPutAPieceInAnOccupiedPositionErrorDescription
	^'cannot Put A Piece In An Occupied Site'.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 20:07:04' prior: 50869845!
playTurnAction: aPositionIdentifier 
	
	|boardPosition|
	boardPosition := self getBoardPositionFor: aPositionIdentifier.
	(self isPositionTaken: boardPosition) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedPositionErrorDescription].
	 
	isXTurn ifTrue: [boardPosition storeAnX] ifFalse: [boardPosition storeAnO].
	self alternateTurn.
	piecesInPlay := piecesInPlay + 1.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 20:07:04' prior: 50869665!
test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition
	
	|terni|
	terni := TerniLapilli new.
	terni playTurnAction: 'arribaCentro'.	
	
	self should: [terni playTurnAction: 'arribaCentro'.	]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli canNotPutAPieceInAnOccupiedPositionErrorDescription.
	
	self assert: terni isPlayingO.
	
	terni playTurnAction: 'centro'.	
	
	self assert: (terni hasAnOPieceIn: 'centro').	! !

!methodRemoval: TerniLapilli class #canNotPutAPieceInAnOccupiedSiteErrorDescription stamp: 'PJ 10/31/2020 20:07:04'!
canNotPutAPieceInAnOccupiedSiteErrorDescription
	^'cannot Put A Piece In An Occupied Site'.!
!TerniLapilli class methodsFor: 'exception descriptions' stamp: 'PJ 10/31/2020 20:07:17' prior: 50869860!
canNotPutAPieceInAnOccupiedPositionErrorDescription
	^'cannot Put A Piece In An Occupied Position'.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'PJ 10/31/2020 20:22:46'!
test12TerniLapilliAssertsWithAnInvalidPosition
	
	|terni|
	terni := TerniLapilli new.
	
	self should: [terni playTurnAction: 'arribaDerechaCentro'.	]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli invalidPositionErrorDescription.
	
	self assert: terni isPlayingX.! !

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PJ 10/31/2020 20:22:52'!
ERROR!
!TerniLapilli class methodsFor: 'exception descriptions' stamp: 'PJ 10/31/2020 20:23:14'!
invalidPositionErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'exception descriptions' stamp: 'PJ 10/31/2020 20:24:17' prior: 50869930!
invalidPositionErrorDescription
	^'Invalid Position'! !

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PJ 10/31/2020 20:24:21'!
FAILURE!
!TerniLapilli methodsFor: 'private management' stamp: 'PJ 10/31/2020 20:26:58' prior: 50869572!
getBoardPositionFor: aPositionIdentifier 
	
	^board  detect: [:aBoardPosition | aBoardPosition canHandle: aPositionIdentifier]
		ifNone: [^self error: self class invalidPositionErrorDescription].! !

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PJ 10/31/2020 20:27:09'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/31/2020 20:27:09'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/31/2020 20:27:09'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/31/2020 20:27:09'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/31/2020 20:27:09'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/31/2020 20:27:09'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/31/2020 20:27:09'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/31/2020 20:27:09'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/31/2020 20:27:09'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PJ 10/31/2020 20:27:09'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/31/2020 20:27:09'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PJ 10/31/2020 20:27:09'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PJ 10/31/2020 20:27:09'!
PASSED!

----SNAPSHOT----(31 October 2020 20:27:14) CuisUniversity-4384.image priorSource: 17222089!

2 inform: 'hola'!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PJ 10/31/2020 20:52:28'!
test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer
	
	|terni|
	terni := TerniLapilli new.
	terni playTurnAction: 'arribaIzquierda'.	
	terni playTurnAction: 'arribaCentro'.	
	terni playTurnAction: 'arribaDerecha'.	
	terni playTurnAction: 'izquierda'.	
	terni playTurnAction: 'centro'.	
	terni playTurnAction: 'derecha'.	
	
	self should: [terni playTurnAction: 'izquierda'.	]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli noMorePiecesAvailableErrorDescription.
	
	self assert: terni isPlayingX.	
	terni movePieceFrom: 'arribaIzquierda' to: 'abajoCentro'.
	
	self should: [terni playTurnAction: 'centro'.	]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli noMorePiecesAvailableErrorDescription.
	
	self assert: terni isPlayingX.		! !

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PJ 10/31/2020 20:52:55'!
ERROR!
!TerniLapilli class methodsFor: 'exception descriptions' stamp: 'PJ 10/31/2020 20:53:12'!
noMorePiecesAvailableErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'exception descriptions' stamp: 'PJ 10/31/2020 20:53:50' prior: 50870037!
noMorePiecesAvailableErrorDescription
	^'No More Pieces Available'! !

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PJ 10/31/2020 20:53:52'!
FAILURE!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PJ 10/31/2020 20:55:11' prior: 50870005!
test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer
	
	|terni|
	terni := TerniLapilli new.
	terni playTurnAction: 'arribaIzquierda'.	
	terni playTurnAction: 'arribaCentro'.	
	terni playTurnAction: 'arribaDerecha'.	
	terni playTurnAction: 'izquierda'.	
	terni playTurnAction: 'centro'.	
	terni playTurnAction: 'derecha'.	
	
	self should: [terni playTurnAction: 'abajoIzquierda'.	]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli noMorePiecesAvailableErrorDescription.
	
	self assert: terni isPlayingX.	
	terni movePieceFrom: 'arribaIzquierda' to: 'abajoCentro'.
	
	self should: [terni playTurnAction: 'abajoDerecha'.	]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli noMorePiecesAvailableErrorDescription.
	
	self assert: terni isPlayingX.		! !

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PJ 10/31/2020 20:55:17'!
FAILURE!
!TerniLapilli methodsFor: 'game actions' stamp: 'PJ 10/31/2020 21:01:17' prior: 50869867!
playTurnAction: aPositionIdentifier 
	
	|boardPosition|
	self playerHasAvailablePiecesToPlay ifFalse: [^self error: self class noMorePiecesAvailableErrorDescription].
	
	boardPosition := self getBoardPositionFor: aPositionIdentifier.
	(self isPositionTaken: boardPosition) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedPositionErrorDescription].
	 
	isXTurn ifTrue: [boardPosition storeAnX] ifFalse: [boardPosition storeAnO].
	self alternateTurn.
	piecesInPlay := piecesInPlay + 1.! !
!TerniLapilli methodsFor: 'private management' stamp: 'PJ 10/31/2020 21:01:37'!
playerHasAvailablePiecesToPlay
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'private management' stamp: 'PJ 10/31/2020 21:07:01' prior: 50870105!
playerHasAvailablePiecesToPlay
	^piecesInPlay < 6! !

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PJ 10/31/2020 21:07:11'!
ERROR!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PJ 10/31/2020 21:09:15' prior: 50870053!
test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer
	
	|terni|
	terni := TerniLapilli new.
	terni playTurnAction: 'arribaIzquierda'.	
	terni playTurnAction: 'arribaCentro'.	
	terni playTurnAction: 'arribaDerecha'.	
	terni playTurnAction: 'izquierda'.	
	terni playTurnAction: 'centro'.	
	terni playTurnAction: 'derecha'.	
	
	self should: [terni playTurnAction: 'abajoIzquierda'.	]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli noMorePiecesAvailableErrorDescription.
	
	self assert: terni isPlayingX.	
	terni movePieceFrom: 'arribaIzquierda' to: 'abajoCentro'.
	
	self should: [terni playTurnAction: 'abajoDerecha'.	]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli noMorePiecesAvailableErrorDescription.
	
	self assert: terni isPlayingO.		! !
!TerniLapilli methodsFor: 'game actions' stamp: 'PJ 10/31/2020 21:09:41'!
movePieceFrom: aString to: aString2 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'game actions' stamp: 'PJ 10/31/2020 21:16:18' prior: 50870147!
movePieceFrom: aTakenPosition to: anEmptyPosition 
	|boardTakenPosition boardEmptyPosition|
	
	boardTakenPosition := self getBoardPositionFor: aTakenPosition.
	boardEmptyPosition := self getBoardPositionFor: anEmptyPosition.
	
	boardTakenPosition freePosition.
	isXTurn ifTrue: [boardEmptyPosition storeAnX ] ifFalse: [boardEmptyPosition storeAnO]. ! !

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PJ 10/31/2020 21:16:26'!
ERROR!
!Posiciones methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 21:16:38'!
freePosition
	self shouldBeImplemented.! !
!Posiciones methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 21:17:18' prior: 50870170!
freePosition
	valor := ''! !

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PJ 10/31/2020 21:17:20'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/31/2020 21:17:20'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/31/2020 21:17:20'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/31/2020 21:17:20'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/31/2020 21:17:20'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/31/2020 21:17:20'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/31/2020 21:17:20'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/31/2020 21:17:20'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/31/2020 21:17:20'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PJ 10/31/2020 21:17:20'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/31/2020 21:17:20'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PJ 10/31/2020 21:17:20'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PJ 10/31/2020 21:17:20'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PJ 10/31/2020 21:17:20'!
FAILURE!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PJ 10/31/2020 21:17:20'!
FAILURE!
!TerniLapilli methodsFor: 'game actions' stamp: 'PJ 10/31/2020 21:18:16' prior: 50870152!
movePieceFrom: aTakenPosition to: anEmptyPosition 
	|boardTakenPosition boardEmptyPosition|
	
	boardTakenPosition := self getBoardPositionFor: aTakenPosition.
	boardEmptyPosition := self getBoardPositionFor: anEmptyPosition.
	
	boardTakenPosition freePosition.
	isXTurn ifTrue: [boardEmptyPosition storeAnX ] ifFalse: [boardEmptyPosition storeAnO].
	
	self alternateTurn.! !

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PJ 10/31/2020 21:18:28'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PJ 10/31/2020 21:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/31/2020 21:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/31/2020 21:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/31/2020 21:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/31/2020 21:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/31/2020 21:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/31/2020 21:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/31/2020 21:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/31/2020 21:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PJ 10/31/2020 21:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/31/2020 21:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PJ 10/31/2020 21:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PJ 10/31/2020 21:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PJ 10/31/2020 21:18:36'!
PASSED!

----SNAPSHOT----(31 October 2020 21:18:45) CuisUniversity-4384.image priorSource: 17227231!
!TerniLapilli methodsFor: 'game actions' stamp: 'PJ 10/31/2020 21:22:17'!
placePieceIn: aPositionIdentifier 
	
	|boardPosition|
	self playerHasAvailablePiecesToPlay ifFalse: [^self error: self class noMorePiecesAvailableErrorDescription].
	
	boardPosition := self getBoardPositionFor: aPositionIdentifier.
	(self isPositionTaken: boardPosition) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedPositionErrorDescription].
	 
	isXTurn ifTrue: [boardPosition storeAnX] ifFalse: [boardPosition storeAnO].
	self alternateTurn.
	piecesInPlay := piecesInPlay + 1.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 21:22:17' prior: 50868841!
test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaCentro'.	
	self assert: false equals: (terni hasAnOPieceIn: 'centro').
	self assert: false equals: (terni hasAnXPieceIn: 'centro').	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 21:22:17' prior: 50868457!
test06XCanPutAPieceInXTurn
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'centro'.
	
	self assert: 1 equals: terni piecesInPlay.
	self assert: (terni hasAnXPieceIn: 'centro').! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 21:22:17' prior: 50869883!
test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaCentro'.	
	
	self should: [terni placePieceIn: 'arribaCentro'.	]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli canNotPutAPieceInAnOccupiedPositionErrorDescription.
	
	self assert: terni isPlayingO.
	
	terni placePieceIn: 'centro'.	
	
	self assert: (terni hasAnOPieceIn: 'centro').	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 21:22:17' prior: 50870119!
test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'izquierda'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'derecha'.	
	
	self should: [terni placePieceIn: 'abajoIzquierda'.	]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli noMorePiecesAvailableErrorDescription.
	
	self assert: terni isPlayingX.	
	terni movePieceFrom: 'arribaIzquierda' to: 'abajoCentro'.
	
	self should: [terni placePieceIn: 'abajoDerecha'.	]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli noMorePiecesAvailableErrorDescription.
	
	self assert: terni isPlayingO.		! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 21:22:17' prior: 50868467!
test05AfterPlayerXTurnIsPlayerOTurn
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'centro'.
	
	self assert: terni isPlayingX not.
	self assert: terni isPlayingO! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 21:22:17' prior: 50869016!
test07OCanPutAPieceInOTurn
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'centro'.
	terni placePieceIn: 'arribaCentro'.
	
	self assert: 2 equals: terni piecesInPlay.
	self assert: (terni hasAnOPieceIn: 'arribaCentro').! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 21:22:17' prior: 50869914!
test12TerniLapilliAssertsWithAnInvalidPosition
	
	|terni|
	terni := TerniLapilli new.
	
	self should: [terni placePieceIn: 'arribaDerechaCentro'.	]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli invalidPositionErrorDescription.
	
	self assert: terni isPlayingX.! !

!methodRemoval: TerniLapilli #playTurnAction: stamp: 'PJ 10/31/2020 21:22:17'!
playTurnAction: aPositionIdentifier 
	
	|boardPosition|
	self playerHasAvailablePiecesToPlay ifFalse: [^self error: self class noMorePiecesAvailableErrorDescription].
	
	boardPosition := self getBoardPositionFor: aPositionIdentifier.
	(self isPositionTaken: boardPosition) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedPositionErrorDescription].
	 
	isXTurn ifTrue: [boardPosition storeAnX] ifFalse: [boardPosition storeAnO].
	self alternateTurn.
	piecesInPlay := piecesInPlay + 1.!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PJ 10/31/2020 21:22:56'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/31/2020 21:22:56'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/31/2020 21:22:56'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/31/2020 21:22:57'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/31/2020 21:22:57'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/31/2020 21:22:57'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/31/2020 21:22:57'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/31/2020 21:22:57'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/31/2020 21:22:57'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PJ 10/31/2020 21:22:57'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/31/2020 21:22:57'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PJ 10/31/2020 21:22:57'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PJ 10/31/2020 21:22:57'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PJ 10/31/2020 21:22:57'!
PASSED!

----SNAPSHOT----(31 October 2020 21:23:04) CuisUniversity-4384.image priorSource: 17237009!

4 inform: 'you won!!'!

4 inform: 'you won!!'.
4 inform: 'you won!!'!
!TerniLapilli methodsFor: 'game actions' stamp: 'PJ 10/31/2020 21:32:49' prior: 50870310!
placePieceIn: aPositionIdentifier 
	
	|boardPosition|
	self playerHasAvailablePiecesToPlay ifFalse: [^self error: self class noMorePiecesAvailableErrorDescription].
	
	boardPosition := self getBoardPositionFor: aPositionIdentifier.
	(self isPositionTaken: boardPosition) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedPositionErrorDescription].
	 
	self placePieceInBoard: boardPosition.
	self alternateTurn.
	piecesInPlay := piecesInPlay + 1.! !
!TerniLapilli methodsFor: 'game actions' stamp: 'PJ 10/31/2020 21:33:37'!
placePieceInBoard: aBoardPosition.
	isXTurn ifTrue: [aBoardPosition storeAnX] ifFalse: [aBoardPosition storeAnO]! !
!TerniLapilli methodsFor: 'game actions' stamp: 'PJ 10/31/2020 21:34:24' prior: 50870236!
movePieceFrom: aTakenPosition to: anEmptyPosition 
	|boardTakenPosition boardEmptyPosition|
	
	boardTakenPosition := self getBoardPositionFor: aTakenPosition.
	boardEmptyPosition := self getBoardPositionFor: anEmptyPosition.
	
	boardTakenPosition freePosition.
	self placePieceInBoard: boardEmptyPosition.
	
	self alternateTurn.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'PJ 10/31/2020 21:45:02'!
test14CannotMoveAPieceIntoATakenPosition
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'izquierda'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'derecha'.	
	
	self should: [terni movePieceFrom: 'arribaIzquierda' to: 'izquierda'.]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli canNotPutAPieceInAnOccupiedPositionErrorDescription.! !

!testRun: #TerniLapilliTest #test14CannotMoveAPieceIntoATakenPosition stamp: 'PJ 10/31/2020 21:45:04'!
FAILURE!
!TerniLapilli methodsFor: 'game actions' stamp: 'PJ 10/31/2020 21:48:12' prior: 50870530!
movePieceFrom: aTakenPosition to: anEmptyPosition 
	|boardTakenPosition boardEmptyPosition|
	
	boardTakenPosition := self getBoardPositionFor: aTakenPosition.
	boardEmptyPosition := self getBoardPositionFor: anEmptyPosition.
	(self isPositionTaken: boardEmptyPosition) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedPositionErrorDescription].
	
	boardTakenPosition freePosition.
	self placePieceInBoard: boardEmptyPosition.
	
	self alternateTurn.! !

!testRun: #TerniLapilliTest #test14CannotMoveAPieceIntoATakenPosition stamp: 'PJ 10/31/2020 21:48:18'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/31/2020 21:48:18'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/31/2020 21:48:18'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/31/2020 21:48:18'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/31/2020 21:48:18'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/31/2020 21:48:18'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/31/2020 21:48:18'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/31/2020 21:48:18'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/31/2020 21:48:18'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PJ 10/31/2020 21:48:18'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/31/2020 21:48:18'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PJ 10/31/2020 21:48:18'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PJ 10/31/2020 21:48:18'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PJ 10/31/2020 21:48:18'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceIntoATakenPosition stamp: 'PJ 10/31/2020 21:48:18'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PJ 10/31/2020 21:50:55'!
test14CannotMoveAPieceFromAnEmptyPosition
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'izquierda'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'derecha'.	
	
	self should: [terni movePieceFrom: 'abajoIzquierda' to: 'abajoDerecha'.]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli canNotMoveAPieceFromAnEmptyPositionErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'PJ 10/31/2020 21:51:09'!
test15CannotMoveAPieceIntoATakenPosition
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'izquierda'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'derecha'.	
	
	self should: [terni movePieceFrom: 'arribaIzquierda' to: 'izquierda'.]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli canNotPutAPieceInAnOccupiedPositionErrorDescription.! !

!methodRemoval: TerniLapilliTest #test14CannotMoveAPieceIntoATakenPosition stamp: 'PJ 10/31/2020 21:51:09'!
test14CannotMoveAPieceIntoATakenPosition
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'izquierda'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'derecha'.	
	
	self should: [terni movePieceFrom: 'arribaIzquierda' to: 'izquierda'.]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli canNotPutAPieceInAnOccupiedPositionErrorDescription.!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PJ 10/31/2020 21:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/31/2020 21:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/31/2020 21:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/31/2020 21:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/31/2020 21:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/31/2020 21:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/31/2020 21:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/31/2020 21:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/31/2020 21:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PJ 10/31/2020 21:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/31/2020 21:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PJ 10/31/2020 21:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PJ 10/31/2020 21:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PJ 10/31/2020 21:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PJ 10/31/2020 21:51:15'!
ERROR!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PJ 10/31/2020 21:51:15'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PJ 10/31/2020 21:51:15'!
ERROR!
!TerniLapilli class methodsFor: 'exception descriptions' stamp: 'PJ 10/31/2020 21:51:29'!
canNotMoveAPieceFromAnEmptyPositionErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'exception descriptions' stamp: 'PJ 10/31/2020 21:52:07' prior: 50870756!
canNotMoveAPieceFromAnEmptyPositionErrorDescription
	^'cannot Move A Piece From An Empty Position'! !

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PJ 10/31/2020 21:52:12'!
FAILURE!
!TerniLapilli methodsFor: 'game actions' stamp: 'PJ 10/31/2020 21:54:09' prior: 50870565!
movePieceFrom: aTakenPosition to: anEmptyPosition 
	|boardTakenPosition boardEmptyPosition|
	
	boardTakenPosition := self getBoardPositionFor: aTakenPosition.
	(self isPositionEmpty: boardTakenPosition ) ifTrue: [^self error: self class canNotMoveAPieceFromAnEmptyPositionErrorDescription].
	
	boardEmptyPosition := self getBoardPositionFor: anEmptyPosition.
	(self isPositionTaken: boardEmptyPosition) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedPositionErrorDescription].
	
	boardTakenPosition freePosition.
	self placePieceInBoard: boardEmptyPosition.
	
	self alternateTurn.! !

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PJ 10/31/2020 21:54:17'!
ERROR!
!TerniLapilli methodsFor: 'private management' stamp: 'PJ 10/31/2020 21:54:29'!
isPositionEmpty: anAbajoIzquierda 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'private management' stamp: 'PJ 10/31/2020 21:55:01' prior: 50870797!
isPositionEmpty: aBoardPosition
	^aBoardPosition isEmpty! !

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PJ 10/31/2020 21:55:12'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PJ 10/31/2020 21:55:18'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/31/2020 21:55:18'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/31/2020 21:55:18'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/31/2020 21:55:18'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/31/2020 21:55:18'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/31/2020 21:55:18'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/31/2020 21:55:18'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/31/2020 21:55:18'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/31/2020 21:55:18'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PJ 10/31/2020 21:55:18'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/31/2020 21:55:18'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PJ 10/31/2020 21:55:18'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PJ 10/31/2020 21:55:18'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PJ 10/31/2020 21:55:18'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PJ 10/31/2020 21:55:18'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PJ 10/31/2020 21:55:18'!
PASSED!

----SNAPSHOT----(31 October 2020 21:55:23) CuisUniversity-4384.image priorSource: 17243174!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PJ 10/31/2020 21:57:31'!
test16CannotMoveAPieceBeforeAllPiecesAreInGame
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'izquierda'.	
	
	self should: [terni movePieceFrom: 'arribaIzquierda' to: 'izquierda'.]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli canNotPutAPieceInAnOccupiedPositionErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'PJ 10/31/2020 22:01:04' prior: 50870873!
test16CannotMoveAPieceBeforeAllPiecesAreInGame
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'izquierda'.	
	
	self should: [terni movePieceFrom: 'arribaIzquierda' to: 'izquierda'.]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli canNotMoveAPieceBeforeAllPiecesAreInGameErrorDescription.! !

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PJ 10/31/2020 22:01:08'!
ERROR!
!TerniLapilli class methodsFor: 'exception descriptions' stamp: 'PJ 10/31/2020 22:01:19'!
canNotMoveAPieceBeforeAllPiecesAreInGameErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'exception descriptions' stamp: 'PJ 10/31/2020 22:01:59' prior: 50870911!
canNotMoveAPieceBeforeAllPiecesAreInGameErrorDescription
	^'cannot Move A Piece Before All Pieces Are In Game'! !

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PJ 10/31/2020 22:02:08'!
FAILURE!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PJ 10/31/2020 22:02:43'!
FAILURE!
!TerniLapilli methodsFor: 'game actions' stamp: 'PJ 10/31/2020 22:04:38' prior: 50870772!
movePieceFrom: aTakenPosition to: anEmptyPosition 
	|boardTakenPosition boardEmptyPosition|
	self areAllPiecesInGame ifFalse: [^self error: self class canNotMoveAPieceBeforeAllPiecesAreInGameErrorDescription].
	
	boardTakenPosition := self getBoardPositionFor: aTakenPosition.
	(self isPositionEmpty: boardTakenPosition ) ifTrue: [^self error: self class canNotMoveAPieceFromAnEmptyPositionErrorDescription].
	
	boardEmptyPosition := self getBoardPositionFor: anEmptyPosition.
	(self isPositionTaken: boardEmptyPosition) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedPositionErrorDescription].
	
	boardTakenPosition freePosition.
	self placePieceInBoard: boardEmptyPosition.
	
	self alternateTurn.! !

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PJ 10/31/2020 22:04:45'!
ERROR!
!TerniLapilli methodsFor: 'private management' stamp: 'PJ 10/31/2020 22:05:02'!
areAllPiecesInGame
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'private management' stamp: 'PJ 10/31/2020 22:05:33' prior: 50870961!
areAllPiecesInGame
	^piecesInPlay = 6! !
!TerniLapilli methodsFor: 'private management' stamp: 'PJ 10/31/2020 22:07:51' prior: 50870966!
areAllPiecesInGame
	^self playerHasAvailablePiecesToPlay not! !

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PJ 10/31/2020 22:07:55'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/31/2020 22:07:55'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/31/2020 22:07:55'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/31/2020 22:07:55'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/31/2020 22:07:55'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/31/2020 22:07:55'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/31/2020 22:07:55'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/31/2020 22:07:55'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/31/2020 22:07:55'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PJ 10/31/2020 22:07:55'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/31/2020 22:07:55'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PJ 10/31/2020 22:07:55'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PJ 10/31/2020 22:07:55'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PJ 10/31/2020 22:07:55'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PJ 10/31/2020 22:07:55'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PJ 10/31/2020 22:07:55'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PJ 10/31/2020 22:07:55'!
PASSED!

----SNAPSHOT----(31 October 2020 22:10:56) CuisUniversity-4384.image priorSource: 17255016!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PJ 10/31/2020 22:11:01'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/31/2020 22:11:01'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/31/2020 22:11:01'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/31/2020 22:11:01'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/31/2020 22:11:01'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/31/2020 22:11:01'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/31/2020 22:11:01'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/31/2020 22:11:01'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/31/2020 22:11:01'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PJ 10/31/2020 22:11:01'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/31/2020 22:11:01'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PJ 10/31/2020 22:11:01'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PJ 10/31/2020 22:11:01'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PJ 10/31/2020 22:11:01'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PJ 10/31/2020 22:11:01'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PJ 10/31/2020 22:11:01'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PJ 10/31/2020 22:11:01'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PJ 10/31/2020 22:18:33'!
test17XCannotMoveAnOPiece
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'izquierda'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'derecha'.	
	
	self should: [terni movePieceFrom: 'arribaCentro' to: 'abajoCentro'.]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli canNotMoveAPieceFromAnotherPlayerErrorDescription.! !

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PJ 10/31/2020 22:18:36'!
ERROR!
!TerniLapilli class methodsFor: 'exception descriptions' stamp: 'PJ 10/31/2020 22:18:51'!
canNotMoveAPieceFromAnotherPlayerErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'exception descriptions' stamp: 'PJ 10/31/2020 22:20:03' prior: 50871125!
canNotMoveAPieceFromAnotherPlayerErrorDescription
	^'cannot Move A Piece From Another Player'! !

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PJ 10/31/2020 22:20:06'!
FAILURE!
!TerniLapilli methodsFor: 'game actions' stamp: 'PJ 10/31/2020 22:24:03' prior: 50870932!
movePieceFrom: aTakenPosition to: anEmptyPosition 
	|boardTakenPosition boardEmptyPosition|
	self areAllPiecesInGame ifFalse: [^self error: self class canNotMoveAPieceBeforeAllPiecesAreInGameErrorDescription].
	
	boardTakenPosition := self getBoardPositionFor: aTakenPosition.
	(self isPositionEmpty: boardTakenPosition ) ifTrue: [^self error: self class canNotMoveAPieceFromAnEmptyPositionErrorDescription].
	
	boardEmptyPosition := self getBoardPositionFor: anEmptyPosition.
	(self isPositionTaken: boardEmptyPosition) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedPositionErrorDescription].
	
	(self isPositionTakenByAnotherPlayer: boardTakenPosition) ifTrue: [^self error: self class canNotMoveAPieceFromAnotherPlayerErrorDescription].
	
	boardTakenPosition freePosition.
	self placePieceInBoard: boardEmptyPosition.
	
	self alternateTurn.! !

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PJ 10/31/2020 22:24:08'!
ERROR!
!TerniLapilli methodsFor: 'private management' stamp: 'PJ 10/31/2020 22:24:23'!
isPositionTakenByAnotherPlayer: anArribaCentro 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'private management' stamp: 'PJ 10/31/2020 22:29:14' prior: 50871173!
isPositionTakenByAnotherPlayer: aBoardPosition 
	^(self isPlayingX and: [aBoardPosition hasAnO]) or: [self isPlayingO and: [aBoardPosition hasAnX]].! !

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PJ 10/31/2020 22:29:18'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/31/2020 22:29:18'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/31/2020 22:29:18'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/31/2020 22:29:18'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/31/2020 22:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/31/2020 22:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/31/2020 22:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/31/2020 22:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/31/2020 22:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PJ 10/31/2020 22:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/31/2020 22:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PJ 10/31/2020 22:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PJ 10/31/2020 22:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PJ 10/31/2020 22:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PJ 10/31/2020 22:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PJ 10/31/2020 22:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PJ 10/31/2020 22:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PJ 10/31/2020 22:29:19'!
PASSED!

----SNAPSHOT----(31 October 2020 22:29:37) CuisUniversity-4384.image priorSource: 17260407!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PJ 10/31/2020 22:30:46'!
test18CannotMoveAPieceJumpingPositions
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'izquierda'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'derecha'.	
	
	self should: [terni movePieceFrom: 'arribaCentro' to: 'abajoCentro'.]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli canNotMoveAPieceFromAnotherPlayerErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'PJ 10/31/2020 22:31:26' prior: 50871255!
test18CannotMoveAPieceJumpingPositions
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'izquierda'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'derecha'.	
	
	self should: [terni movePieceFrom: 'arribaCentro' to: 'abajoCentro'.]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli canNotMoveAPieceJumpingPositionsErrorDescription.! !

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PJ 10/31/2020 22:32:31'!
ERROR!
!TerniLapilli class methodsFor: 'exception descriptions' stamp: 'PJ 10/31/2020 22:33:08'!
canNotMoveAPieceJumpingPositionsErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'exception descriptions' stamp: 'PJ 10/31/2020 22:33:44' prior: 50871296!
canNotMoveAPieceJumpingPositionsErrorDescription
	^'cannot Move A Piece Jumping Positions'! !

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PJ 10/31/2020 22:34:23'!
FAILURE!
!TerniLapilli methodsFor: 'game actions' stamp: 'PJ 10/31/2020 22:39:08' prior: 50871140!
movePieceFrom: aTakenPosition to: anEmptyPosition 
	|boardTakenPosition boardEmptyPosition|
	self areAllPiecesInGame ifFalse: [^self error: self class canNotMoveAPieceBeforeAllPiecesAreInGameErrorDescription].
	
	boardTakenPosition := self getBoardPositionFor: aTakenPosition.
	(self isPositionEmpty: boardTakenPosition ) ifTrue: [^self error: self class canNotMoveAPieceFromAnEmptyPositionErrorDescription].
	
	boardEmptyPosition := self getBoardPositionFor: anEmptyPosition.
	(self isPositionTaken: boardEmptyPosition) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedPositionErrorDescription].
	
	(self isPositionTakenByAnotherPlayer: boardTakenPosition) ifTrue: [^self error: self class canNotMoveAPieceFromAnotherPlayerErrorDescription].
	
	(boardTakenPosition isNeightbourOf: boardTakenPosition) ifTrue: [
	boardTakenPosition freePosition.
	self placePieceInBoard: boardEmptyPosition.
	
	self alternateTurn.
	].! !
!TerniLapilli methodsFor: 'game actions' stamp: 'PJ 10/31/2020 22:40:21' prior: 50871312!
movePieceFrom: aTakenPosition to: anEmptyPosition 
	|boardTakenPosition boardEmptyPosition|
	self areAllPiecesInGame ifFalse: [^self error: self class canNotMoveAPieceBeforeAllPiecesAreInGameErrorDescription].
	
	boardTakenPosition := self getBoardPositionFor: aTakenPosition.
	(self isPositionEmpty: boardTakenPosition ) ifTrue: [^self error: self class canNotMoveAPieceFromAnEmptyPositionErrorDescription].
	
	boardEmptyPosition := self getBoardPositionFor: anEmptyPosition.
	(self isPositionTaken: boardEmptyPosition) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedPositionErrorDescription].
	
	(self isPositionTakenByAnotherPlayer: boardTakenPosition) ifTrue: [^self error: self class canNotMoveAPieceFromAnotherPlayerErrorDescription].
	
	(boardTakenPosition isNeighbourOf: boardTakenPosition) ifTrue: [
	boardTakenPosition freePosition.
	self placePieceInBoard: boardEmptyPosition.
	
	self alternateTurn.
	].! !

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PJ 10/31/2020 22:40:51'!
FAILURE!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PJ 10/31/2020 22:41:53' prior: 50871274!
test18CannotMoveAPieceJumpingPositions
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'izquierda'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'derecha'.	
	
	self should: [terni movePieceFrom: 'arribaIzquierda' to: 'abajoCentro'.]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli canNotMoveAPieceJumpingPositionsErrorDescription.! !

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PJ 10/31/2020 22:41:54'!
ERROR!
!ArribaIzquierda methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 22:42:12'!
isNeighbourOf: anArribaIzquierda 
	self shouldBeImplemented.! !
!ArribaIzquierda methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 22:45:07' prior: 50871402!
isNeighbourOf: aPosition 
	^(aPosition isKindOf: ArribaCentro) or: (aPosition isKindOf: Izquierda) or: (aPosition isKindOf: Centro).! !

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PJ 10/31/2020 22:45:13'!
FAILURE!
!TerniLapilli methodsFor: 'game actions' stamp: 'PJ 10/31/2020 22:46:49' prior: 50871344!
movePieceFrom: aTakenPosition to: anEmptyPosition 
	|boardTakenPosition boardEmptyPosition|
	self areAllPiecesInGame ifFalse: [^self error: self class canNotMoveAPieceBeforeAllPiecesAreInGameErrorDescription].
	
	boardTakenPosition := self getBoardPositionFor: aTakenPosition.
	(self isPositionEmpty: boardTakenPosition ) ifTrue: [^self error: self class canNotMoveAPieceFromAnEmptyPositionErrorDescription].
	
	boardEmptyPosition := self getBoardPositionFor: anEmptyPosition.
	(self isPositionTaken: boardEmptyPosition) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedPositionErrorDescription].
	
	(self isPositionTakenByAnotherPlayer: boardTakenPosition) ifTrue: [^self error: self class canNotMoveAPieceFromAnotherPlayerErrorDescription].
	
	(boardTakenPosition isNeighbourOf: boardTakenPosition) ifTrue: [
		boardTakenPosition freePosition.
		self placePieceInBoard: boardEmptyPosition.
	
		self alternateTurn.
	]
	ifFalse: [^self error: self class canNotMoveAPieceJumpingPositionsErrorDescription].! !

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PJ 10/31/2020 22:46:53'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/31/2020 22:46:53'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/31/2020 22:46:53'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/31/2020 22:46:53'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/31/2020 22:46:53'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/31/2020 22:46:53'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/31/2020 22:46:53'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/31/2020 22:46:53'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/31/2020 22:46:53'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PJ 10/31/2020 22:46:53'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/31/2020 22:46:53'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PJ 10/31/2020 22:46:53'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PJ 10/31/2020 22:46:53'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PJ 10/31/2020 22:46:53'!
ERROR!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PJ 10/31/2020 22:46:53'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PJ 10/31/2020 22:46:53'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PJ 10/31/2020 22:46:53'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PJ 10/31/2020 22:46:53'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PJ 10/31/2020 22:46:53'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PJ 10/31/2020 22:46:53'!
ERROR!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PJ 10/31/2020 22:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/31/2020 22:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/31/2020 22:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/31/2020 22:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/31/2020 22:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/31/2020 22:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/31/2020 22:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/31/2020 22:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/31/2020 22:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PJ 10/31/2020 22:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/31/2020 22:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PJ 10/31/2020 22:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PJ 10/31/2020 22:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PJ 10/31/2020 22:47:03'!
ERROR!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PJ 10/31/2020 22:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PJ 10/31/2020 22:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PJ 10/31/2020 22:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PJ 10/31/2020 22:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PJ 10/31/2020 22:47:03'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PJ 10/31/2020 22:47:03'!
ERROR!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PJ 10/31/2020 22:47:58' prior: 50870369!
test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'izquierda'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'derecha'.	
	
	self should: [terni placePieceIn: 'abajoIzquierda'.	]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli noMorePiecesAvailableErrorDescription.
	
	self assert: terni isPlayingX.	
	terni movePieceFrom: 'centro' to: 'abajoCentro'.
	
	self should: [terni placePieceIn: 'abajoDerecha'.	]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli noMorePiecesAvailableErrorDescription.
	
	self assert: terni isPlayingO.		! !

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PJ 10/31/2020 22:48:06'!
ERROR!
!Centro methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 22:48:22'!
isNeighbourOf: aCentro 
	self shouldBeImplemented.! !
!Centro methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 22:49:24' prior: 50871631!
isNeighbourOf: aPosition 
	^true.! !

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PJ 10/31/2020 22:49:26'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PJ 10/31/2020 22:51:21'!
test19CannotMoveAPieceIntoTheSamePosition
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'izquierda'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'derecha'.	
	
	self should: [terni movePieceFrom: 'arribaIzquierda' to: 'arribaIzquierda'.]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli canNotMoveAPieceIntoTheSamePositionErrorDescription.! !

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PJ 10/31/2020 22:51:30'!
ERROR!
!TerniLapilli class methodsFor: 'exception descriptions' stamp: 'PJ 10/31/2020 22:51:38'!
canNotMoveAPieceIntoTheSamePositionErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'exception descriptions' stamp: 'PJ 10/31/2020 22:52:20' prior: 50871667!
canNotMoveAPieceIntoTheSamePositionErrorDescription
	^'cannot Move A Piece Into The Same Position' ! !

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PJ 10/31/2020 22:53:07'!
FAILURE!
!TerniLapilli methodsFor: 'game actions' stamp: 'PJ 10/31/2020 22:56:14' prior: 50871419!
movePieceFrom: aTakenPosition to: anEmptyPosition 
	|boardTakenPosition boardEmptyPosition|
	self areAllPiecesInGame ifFalse: [^self error: self class canNotMoveAPieceBeforeAllPiecesAreInGameErrorDescription].
	
	boardTakenPosition := self getBoardPositionFor: aTakenPosition.
	(self isPositionEmpty: boardTakenPosition ) ifTrue: [^self error: self class canNotMoveAPieceFromAnEmptyPositionErrorDescription].
	
	boardEmptyPosition := self getBoardPositionFor: anEmptyPosition.
	(self isPositionTaken: boardEmptyPosition) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedPositionErrorDescription].
	
	(self isPositionTakenByAnotherPlayer: boardTakenPosition) ifTrue: [^self error: self class canNotMoveAPieceFromAnotherPlayerErrorDescription].
	(aTakenPosition = anEmptyPosition ) ifTrue: [^self error: self class canNotMoveAPieceIntoTheSamePositionErrorDescription].
	
	(boardTakenPosition isNeighbourOf: boardTakenPosition) ifTrue: [
		boardTakenPosition freePosition.
		self placePieceInBoard: boardEmptyPosition.
	
		self alternateTurn.
	]
	ifFalse: [^self error: self class canNotMoveAPieceJumpingPositionsErrorDescription].! !

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PJ 10/31/2020 22:56:17'!
FAILURE!
!TerniLapilli methodsFor: 'game actions' stamp: 'PJ 10/31/2020 22:57:03' prior: 50871683!
movePieceFrom: aTakenPosition to: anEmptyPosition 
	|boardTakenPosition boardEmptyPosition|
	self areAllPiecesInGame ifFalse: [^self error: self class canNotMoveAPieceBeforeAllPiecesAreInGameErrorDescription].
	(aTakenPosition = anEmptyPosition ) ifTrue: [^self error: self class canNotMoveAPieceIntoTheSamePositionErrorDescription].
	
	boardTakenPosition := self getBoardPositionFor: aTakenPosition.
	(self isPositionEmpty: boardTakenPosition ) ifTrue: [^self error: self class canNotMoveAPieceFromAnEmptyPositionErrorDescription].
	
	boardEmptyPosition := self getBoardPositionFor: anEmptyPosition.
	(self isPositionTaken: boardEmptyPosition) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedPositionErrorDescription].
	
	(self isPositionTakenByAnotherPlayer: boardTakenPosition) ifTrue: [^self error: self class canNotMoveAPieceFromAnotherPlayerErrorDescription].
	
	(boardTakenPosition isNeighbourOf: boardTakenPosition) ifTrue: [
		boardTakenPosition freePosition.
		self placePieceInBoard: boardEmptyPosition.
	
		self alternateTurn.
	]
	ifFalse: [^self error: self class canNotMoveAPieceJumpingPositionsErrorDescription].! !

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PJ 10/31/2020 22:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/31/2020 22:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/31/2020 22:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/31/2020 22:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/31/2020 22:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/31/2020 22:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/31/2020 22:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/31/2020 22:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/31/2020 22:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PJ 10/31/2020 22:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/31/2020 22:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PJ 10/31/2020 22:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PJ 10/31/2020 22:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PJ 10/31/2020 22:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PJ 10/31/2020 22:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PJ 10/31/2020 22:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PJ 10/31/2020 22:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PJ 10/31/2020 22:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PJ 10/31/2020 22:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PJ 10/31/2020 22:57:14'!
PASSED!

----SNAPSHOT----(31 October 2020 22:57:22) CuisUniversity-4384.image priorSource: 17267227!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PJ 10/31/2020 22:57:26'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/31/2020 22:57:26'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/31/2020 22:57:26'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/31/2020 22:57:26'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/31/2020 22:57:26'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/31/2020 22:57:26'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/31/2020 22:57:26'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/31/2020 22:57:26'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/31/2020 22:57:26'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PJ 10/31/2020 22:57:26'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/31/2020 22:57:26'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PJ 10/31/2020 22:57:26'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PJ 10/31/2020 22:57:26'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PJ 10/31/2020 22:57:26'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PJ 10/31/2020 22:57:26'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PJ 10/31/2020 22:57:26'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PJ 10/31/2020 22:57:26'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PJ 10/31/2020 22:57:26'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PJ 10/31/2020 22:57:26'!
PASSED!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PJ 10/31/2020 22:57:26'!
PASSED!
!AbajoCentro methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 22:59:23'!
isNeighbourOf: aPosition 
	^(aPosition isKindOf: AbajoIzquierda ) or: (aPosition isKindOf: AbajoDerecha ) or: (aPosition isKindOf: Centro).! !
!AbajoDerecha methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 22:59:59'!
isNeighbourOf: aPosition 
	^(aPosition isKindOf: AbajoCentro ) or: (aPosition isKindOf: Derecha ) or: (aPosition isKindOf: Centro).! !
!AbajoIzquierda methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 23:00:33'!
isNeighbourOf: aPosition 
	^(aPosition isKindOf: AbajoCentro) or: (aPosition isKindOf: Izquierda) or: (aPosition isKindOf: Centro).! !
!ArribaCentro methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 23:01:11'!
isNeighbourOf: aPosition 
	^(aPosition isKindOf: ArribaIzquierda ) or: (aPosition isKindOf: ArribaDerecha) or: (aPosition isKindOf: Centro).! !
!ArribaDerecha methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 23:01:50'!
isNeighbourOf: aPosition 
	^(aPosition isKindOf: ArribaCentro) or: (aPosition isKindOf: Derecha) or: (aPosition isKindOf: Centro).! !
!Derecha methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 23:02:44'!
isNeighbourOf: aPosition 
	^(aPosition isKindOf: ArribaDerecha ) or: (aPosition isKindOf: AbajoDerecha) or: (aPosition isKindOf: Centro).! !
!Izquierda methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 23:03:15'!
isNeighbourOf: aPosition 
	^(aPosition isKindOf: ArribaIzquierda) or: (aPosition isKindOf: AbajoIzquierda) or: (aPosition isKindOf: Centro).! !
!Posiciones methodsFor: 'as yet unclassified' stamp: 'PJ 10/31/2020 23:03:54'!
isNeighbourOf: aPosition 
	self subclassResponsibility ! !

----SNAPSHOT----(31 October 2020 23:06:43) CuisUniversity-4384.image priorSource: 17285961!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PJ 10/31/2020 23:06:49'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PJ 10/31/2020 23:06:49'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PJ 10/31/2020 23:06:49'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PJ 10/31/2020 23:06:49'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PJ 10/31/2020 23:06:49'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PJ 10/31/2020 23:06:49'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PJ 10/31/2020 23:06:49'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PJ 10/31/2020 23:06:49'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PJ 10/31/2020 23:06:49'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PJ 10/31/2020 23:06:49'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PJ 10/31/2020 23:06:49'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PJ 10/31/2020 23:06:49'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PJ 10/31/2020 23:06:49'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PJ 10/31/2020 23:06:49'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PJ 10/31/2020 23:06:49'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PJ 10/31/2020 23:06:49'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PJ 10/31/2020 23:06:49'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PJ 10/31/2020 23:06:49'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PJ 10/31/2020 23:06:49'!
PASSED!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PJ 10/31/2020 23:06:49'!
PASSED!

----SNAPSHOT----(31 October 2020 23:13:51) CuisUniversity-4384.image priorSource: 17290138!

----STARTUP---- (1 November 2020 18:27:55) as /home/pablo/Documents/Ingenieria1/cuis_terniLapilli/CuisUniversity-4384.image!


----QUIT----(1 November 2020 20:05:55) CuisUniversity-4384.image priorSource: 17180043!

----STARTUP---- (1 November 2020 20:45:26) as /home/pablo/Documents/Ingenieria1/cuis_terniLapilli/CuisUniversity-4384.image!


!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PGTA 11/1/2020 21:42:44'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PGTA 11/1/2020 21:42:44'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/1/2020 21:42:44'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/1/2020 21:42:44'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PGTA 11/1/2020 21:42:44'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/1/2020 21:42:44'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/1/2020 21:42:44'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PGTA 11/1/2020 21:42:44'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PGTA 11/1/2020 21:42:44'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PGTA 11/1/2020 21:42:44'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PGTA 11/1/2020 21:42:44'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PGTA 11/1/2020 21:42:44'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PGTA 11/1/2020 21:42:44'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PGTA 11/1/2020 21:42:44'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PGTA 11/1/2020 21:42:44'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PGTA 11/1/2020 21:42:44'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PGTA 11/1/2020 21:42:44'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PGTA 11/1/2020 21:42:44'!
PASSED!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PGTA 11/1/2020 21:42:44'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PGTA 11/1/2020 21:59:26'!
test20GameCanFinishBeforeMovingPhaseTurns
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'derecha'.	
	terni placePieceIn: 'arribaDerecha'.	
	
	self assert: terni hasPlayerXWon.
	"self should: [terni movePieceFrom: 'arribaIzquierda' to: 'arribaIzquierda'.]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli canNotMoveAPieceIntoTheSamePositionErrorDescription."! !

!testRun: #TerniLapilliTest #test20GameCanFinishBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 21:59:31'!
FAILURE!

!testRun: #TerniLapilliTest #test20GameCanFinishBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 21:59:31'!
FAILURE!

!testRun: #TerniLapilliTest #test20GameCanFinishBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 21:59:47'!
FAILURE!

!testRun: #TerniLapilliTest #test20GameCanFinishBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 21:59:56'!
FAILURE!

!testRun: #TerniLapilliTest #test20GameCanFinishBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 22:00:20'!
PASSED!
!TerniLapilli methodsFor: 'game testing' stamp: 'PGTA 11/1/2020 22:03:48' prior: 50868434!
hasPlayerXWon
	^(self hasAnXPieceIn: 'arribaIzquierda') and: (self hasAnXPieceIn: 'arribaCentro') and: (self hasAnXPieceIn: 'arribaDerecha')! !

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/1/2020 22:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PGTA 11/1/2020 22:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PGTA 11/1/2020 22:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/1/2020 22:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/1/2020 22:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PGTA 11/1/2020 22:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/1/2020 22:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/1/2020 22:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PGTA 11/1/2020 22:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PGTA 11/1/2020 22:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PGTA 11/1/2020 22:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PGTA 11/1/2020 22:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PGTA 11/1/2020 22:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PGTA 11/1/2020 22:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PGTA 11/1/2020 22:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PGTA 11/1/2020 22:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PGTA 11/1/2020 22:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PGTA 11/1/2020 22:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PGTA 11/1/2020 22:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PGTA 11/1/2020 22:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test20GameCanFinishBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 22:04:02'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PGTA 11/1/2020 22:04:27' prior: 50868610!
test20GameCanFinishBeforeMovingPhaseTurns
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'derecha'.	
	terni placePieceIn: 'arribaDerecha'.	
	
	self assert: terni hasPlayerXWon.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'PGTA 11/1/2020 22:05:43'!
test20XCanWinBeforeMovingPhaseTurns
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'derecha'.	
	terni placePieceIn: 'arribaDerecha'.	
	
	self assert: terni hasPlayerXWon.! !

!testRun: #TerniLapilliTest #test20XCanWinBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 22:05:44'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PGTA 11/1/2020 22:05:44'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PGTA 11/1/2020 22:05:44'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/1/2020 22:05:44'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/1/2020 22:05:44'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PGTA 11/1/2020 22:05:44'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/1/2020 22:05:44'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/1/2020 22:05:44'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PGTA 11/1/2020 22:05:44'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PGTA 11/1/2020 22:05:44'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PGTA 11/1/2020 22:05:44'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PGTA 11/1/2020 22:05:44'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PGTA 11/1/2020 22:05:44'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PGTA 11/1/2020 22:05:44'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PGTA 11/1/2020 22:05:44'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PGTA 11/1/2020 22:05:44'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PGTA 11/1/2020 22:05:44'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PGTA 11/1/2020 22:05:44'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PGTA 11/1/2020 22:05:44'!
PASSED!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PGTA 11/1/2020 22:05:44'!
PASSED!

!testRun: #TerniLapilliTest #test20GameCanFinishBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 22:05:44'!
PASSED!

!testRun: #TerniLapilliTest #test20XCanWinBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 22:05:44'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PGTA 11/1/2020 22:09:20'!
test21XCanWinUsingMiddleRowBeforeMovingPhaseTurns
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'izquierda'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'derecha'.	
	
	self assert: terni hasPlayerXWon.! !

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleRowBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 22:09:20'!
FAILURE!
!TerniLapilli methodsFor: 'game testing' stamp: 'PGTA 11/1/2020 22:10:08' prior: 50868647!
hasPlayerXWon
	^((self hasAnXPieceIn: 'arribaIzquierda') and: (self hasAnXPieceIn: 'arribaCentro') and: (self hasAnXPieceIn: 'arribaDerecha'))
	or: ((self hasAnXPieceIn: 'izquierda') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'derecha'))! !

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PGTA 11/1/2020 22:10:15'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PGTA 11/1/2020 22:10:15'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PGTA 11/1/2020 22:10:15'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/1/2020 22:10:15'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/1/2020 22:10:15'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PGTA 11/1/2020 22:10:15'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/1/2020 22:10:15'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/1/2020 22:10:15'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PGTA 11/1/2020 22:10:15'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PGTA 11/1/2020 22:10:15'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PGTA 11/1/2020 22:10:15'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PGTA 11/1/2020 22:10:15'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PGTA 11/1/2020 22:10:15'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PGTA 11/1/2020 22:10:15'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PGTA 11/1/2020 22:10:15'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PGTA 11/1/2020 22:10:15'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PGTA 11/1/2020 22:10:15'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PGTA 11/1/2020 22:10:15'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PGTA 11/1/2020 22:10:15'!
PASSED!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PGTA 11/1/2020 22:10:15'!
PASSED!

!testRun: #TerniLapilliTest #test20GameCanFinishBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 22:10:15'!
PASSED!

!testRun: #TerniLapilliTest #test20XCanWinBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 22:10:15'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleRowBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 22:10:15'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PGTA 11/1/2020 22:11:12'!
test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'izquierda'.	
	terni placePieceIn: 'abajoCentro'.	
	
	self assert: terni hasPlayerXWon.! !

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 22:11:12'!
FAILURE!
!TerniLapilli methodsFor: 'game testing' stamp: 'PGTA 11/1/2020 22:11:49' prior: 50868852!
hasPlayerXWon
	^((self hasAnXPieceIn: 'arribaIzquierda') and: (self hasAnXPieceIn: 'arribaCentro') and: (self hasAnXPieceIn: 'arribaDerecha'))
	or: ((self hasAnXPieceIn: 'izquierda') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'derecha'))
	or: ((self hasAnXPieceIn: 'ArribaCentro') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'abajoCentro'))! !

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 22:11:53'!
ERROR!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 22:12:30'!
ERROR!
!TerniLapilli methodsFor: 'game testing' stamp: 'PGTA 11/1/2020 22:12:52' prior: 50868964!
hasPlayerXWon
	^((self hasAnXPieceIn: 'arribaIzquierda') and: (self hasAnXPieceIn: 'arribaCentro') and: (self hasAnXPieceIn: 'arribaDerecha'))
	or: ((self hasAnXPieceIn: 'izquierda') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'derecha'))
	or: ((self hasAnXPieceIn: 'arribaCentro') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'abajoCentro'))! !

!testRun: #TerniLapilliTest #test20XCanWinBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 22:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PGTA 11/1/2020 22:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PGTA 11/1/2020 22:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/1/2020 22:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/1/2020 22:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PGTA 11/1/2020 22:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/1/2020 22:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/1/2020 22:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PGTA 11/1/2020 22:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PGTA 11/1/2020 22:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PGTA 11/1/2020 22:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PGTA 11/1/2020 22:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PGTA 11/1/2020 22:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PGTA 11/1/2020 22:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PGTA 11/1/2020 22:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PGTA 11/1/2020 22:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PGTA 11/1/2020 22:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PGTA 11/1/2020 22:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PGTA 11/1/2020 22:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PGTA 11/1/2020 22:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test20GameCanFinishBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 22:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test20XCanWinBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 22:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 22:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleRowBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 22:12:55'!
PASSED!
!Posiciones methodsFor: 'as yet unclassified' stamp: 'PGTA 11/1/2020 23:39:43'!
isAlignedWith: aPosition1 and: aPosition2
	self subclassResponsibility ! !
!Izquierda methodsFor: 'as yet unclassified' stamp: 'PGTA 11/1/2020 23:41:41' overrides: 50869090!
isAlignedWith: aPosition1 and: aPosition2
	^self class = (aPosition1 computeAlignedPositionWith: aPosition2)! !
!Posiciones methodsFor: 'as yet unclassified' stamp: 'PGTA 11/1/2020 23:42:12'!
computeAlignedPositionWith: aPosition
	^self subclassResponsibility .! !
!Posiciones methodsFor: 'as yet unclassified' stamp: 'PGTA 11/1/2020 23:42:22' prior: 50869102!
computeAlignedPositionWith: aPosition
	^self subclassResponsibility! !

!methodRemoval: Izquierda #isAlignedWith:and: stamp: 'PGTA 11/1/2020 23:43:53'!
isAlignedWith: aPosition1 and: aPosition2
	^self class = (aPosition1 computeAlignedPositionWith: aPosition2)!

!methodRemoval: Posiciones #computeAlignedPositionWith: stamp: 'PGTA 11/1/2020 23:44:01'!
computeAlignedPositionWith: aPosition
	^self subclassResponsibility!

!methodRemoval: Posiciones #isAlignedWith:and: stamp: 'PGTA 11/1/2020 23:44:06'!
isAlignedWith: aPosition1 and: aPosition2
	self subclassResponsibility !
!TerniLapilli methodsFor: 'game testing' stamp: 'PGTA 11/1/2020 23:50:45' prior: 50868987!
hasPlayerXWon
	^(	((self hasAnXPieceIn: 'arribaIzquierda') and: (self hasAnXPieceIn: 'arribaCentro') and: (self hasAnXPieceIn: 'arribaDerecha'))
	or: 	((self hasAnXPieceIn: 'izquierda') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'derecha'))
	or: 	((self hasAnXPieceIn: 'abajoIzquierda') and: (self hasAnXPieceIn: 'abajoCentro') and: (self hasAnXPieceIn: 'abajoDerecha'))
	)
	or:( 	((self hasAnXPieceIn: 'arribaIzquierda') and: (self hasAnXPieceIn: 'izquierda') and: (self hasAnXPieceIn: 'abajoIzquierda'))
	or: 	((self hasAnXPieceIn: 'arribaCentro') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'abajoCentro'))
	or: 	((self hasAnXPieceIn: 'arribaCentro') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'abajoCentro'))
	)
	or:( 	((self hasAnXPieceIn: 'arribaIzquierda') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'abajoDerecha'))
	or: 	((self hasAnXPieceIn: 'arribaDerecha') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'abajoIzquierda'))
	)! !
!TerniLapilli methodsFor: 'game testing' stamp: 'PGTA 11/1/2020 23:52:49' prior: 50869129!
hasPlayerXWon
	^(	((self hasAnXPieceIn: 'arribaIzquierda') and: (self hasAnXPieceIn: 'arribaCentro') and: (self hasAnXPieceIn: 'arribaDerecha'))
	or: 	((self hasAnXPieceIn: 'izquierda') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'derecha'))
	or: 	((self hasAnXPieceIn: 'abajoIzquierda') and: (self hasAnXPieceIn: 'abajoCentro') and: (self hasAnXPieceIn: 'abajoDerecha'))
	)
	or:( 	((self hasAnXPieceIn: 'arribaIzquierda') and: (self hasAnXPieceIn: 'izquierda') and: (self hasAnXPieceIn: 'abajoIzquierda'))
	or: 	((self hasAnXPieceIn: 'arribaCentro') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'abajoCentro'))
	or: 	((self hasAnXPieceIn: 'arribaDerecha') and: (self hasAnXPieceIn: 'derecha') and: (self hasAnXPieceIn: 'abajoDerecha'))
	)
	or:( 	((self hasAnXPieceIn: 'arribaIzquierda') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'abajoDerecha'))
	or: 	((self hasAnXPieceIn: 'arribaDerecha') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'abajoIzquierda'))
	)! !

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:53:04'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:53:08'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PGTA 11/1/2020 23:53:08'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PGTA 11/1/2020 23:53:08'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/1/2020 23:53:08'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/1/2020 23:53:08'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PGTA 11/1/2020 23:53:08'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/1/2020 23:53:08'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/1/2020 23:53:08'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PGTA 11/1/2020 23:53:08'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PGTA 11/1/2020 23:53:08'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PGTA 11/1/2020 23:53:08'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PGTA 11/1/2020 23:53:08'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PGTA 11/1/2020 23:53:08'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PGTA 11/1/2020 23:53:08'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PGTA 11/1/2020 23:53:08'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PGTA 11/1/2020 23:53:08'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PGTA 11/1/2020 23:53:08'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PGTA 11/1/2020 23:53:08'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PGTA 11/1/2020 23:53:08'!
PASSED!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PGTA 11/1/2020 23:53:08'!
PASSED!

!testRun: #TerniLapilliTest #test20GameCanFinishBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:53:08'!
PASSED!

!testRun: #TerniLapilliTest #test20XCanWinBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:53:08'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:53:08'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleRowBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:53:08'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PGTA 11/1/2020 23:54:13'!
test22XCanWinUsingDiagonalsBeforeMovingPhaseTurns
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'abajoDerecha'.	
	
	self assert: terni hasPlayerXWon.! !

!testRun: #TerniLapilliTest #test22XCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:54:13'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PGTA 11/1/2020 23:54:13'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PGTA 11/1/2020 23:54:13'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/1/2020 23:54:13'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/1/2020 23:54:13'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PGTA 11/1/2020 23:54:13'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/1/2020 23:54:13'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/1/2020 23:54:13'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PGTA 11/1/2020 23:54:13'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PGTA 11/1/2020 23:54:13'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PGTA 11/1/2020 23:54:13'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PGTA 11/1/2020 23:54:13'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PGTA 11/1/2020 23:54:13'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PGTA 11/1/2020 23:54:13'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PGTA 11/1/2020 23:54:13'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PGTA 11/1/2020 23:54:13'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PGTA 11/1/2020 23:54:13'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PGTA 11/1/2020 23:54:13'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PGTA 11/1/2020 23:54:13'!
PASSED!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PGTA 11/1/2020 23:54:13'!
PASSED!

!testRun: #TerniLapilliTest #test20GameCanFinishBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:54:13'!
PASSED!

!testRun: #TerniLapilliTest #test20XCanWinBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:54:13'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:54:13'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleRowBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:54:13'!
PASSED!

!testRun: #TerniLapilliTest #test22XCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:54:13'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PGTA 11/1/2020 23:54:43'!
test22OCanWinUsingDiagonalsBeforeMovingPhaseTurns
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'abajoDerecha'.	
	
	self assert: terni hasPlayerXWon.! !

!testRun: #TerniLapilliTest #test22OCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:54:43'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PGTA 11/1/2020 23:54:43'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PGTA 11/1/2020 23:54:43'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/1/2020 23:54:43'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/1/2020 23:54:43'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PGTA 11/1/2020 23:54:43'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/1/2020 23:54:43'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/1/2020 23:54:43'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PGTA 11/1/2020 23:54:43'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PGTA 11/1/2020 23:54:43'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PGTA 11/1/2020 23:54:43'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PGTA 11/1/2020 23:54:43'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PGTA 11/1/2020 23:54:43'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PGTA 11/1/2020 23:54:43'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PGTA 11/1/2020 23:54:43'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PGTA 11/1/2020 23:54:43'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PGTA 11/1/2020 23:54:43'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PGTA 11/1/2020 23:54:43'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PGTA 11/1/2020 23:54:43'!
PASSED!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PGTA 11/1/2020 23:54:43'!
PASSED!

!testRun: #TerniLapilliTest #test20GameCanFinishBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:54:43'!
PASSED!

!testRun: #TerniLapilliTest #test20XCanWinBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:54:43'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:54:43'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleRowBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:54:43'!
PASSED!

!testRun: #TerniLapilliTest #test22OCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:54:43'!
PASSED!

!testRun: #TerniLapilliTest #test22XCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:54:43'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PGTA 11/1/2020 23:54:49' prior: 50869397!
test22OCanWinUsingDiagonalsBeforeMovingPhaseTurns
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'abajoDerecha'.	
	
	self assert: terni hasPlayerOWon.! !

!testRun: #TerniLapilliTest #test22OCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:54:49'!
FAILURE!

!methodRemoval: TerniLapilliTest #test22XCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:55:06'!
test22XCanWinUsingDiagonalsBeforeMovingPhaseTurns
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'abajoDerecha'.	
	
	self assert: terni hasPlayerXWon.!

!testRun: #TerniLapilliTest #test22OCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:55:22'!
FAILURE!
!TerniLapilli methodsFor: 'game testing' stamp: 'PGTA 11/1/2020 23:56:51' prior: 50868430!
hasPlayerOWon
	^(	((self hasAnOPieceIn: 'arribaIzquierda') and: (self hasAnOPieceIn: 'arribaCentro') and: (self hasAnOPieceIn: 'arribaDerecha'))
	or: 	((self hasAnOPieceIn: 'izquierda') and: (self hasAnOPieceIn: 'centro') and: (self hasAnOPieceIn: 'derecha'))
	or: 	((self hasAnOPieceIn: 'abajoIzquierda') and: (self hasAnOPieceIn: 'abajoCentro') and: (self hasAnOPieceIn: 'abajoDerecha'))
	)
	or:( 	((self hasAnOPieceIn: 'arribaIzquierda') and: (self hasAnOPieceIn: 'izquierda') and: (self hasAnOPieceIn: 'abajoIzquierda'))
	or: 	((self hasAnOPieceIn: 'arribaCentro') and: (self hasAnOPieceIn: 'centro') and: (self hasAnOPieceIn: 'abajoCentro'))
	or: 	((self hasAnOPieceIn: 'arribaDerecha') and: (self hasAnOPieceIn: 'derecha') and: (self hasAnOPieceIn: 'abajoDerecha'))
	)
	or:( 	((self hasAnOPieceIn: 'arribaIzquierda') and: (self hasAnOPieceIn: 'centro') and: (self hasAnOPieceIn: 'abajoDerecha'))
	or: 	((self hasAnOPieceIn: 'arribaDerecha') and: (self hasAnOPieceIn: 'centro') and: (self hasAnOPieceIn: 'abajoIzquierda'))
	)! !

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/1/2020 23:56:58'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PGTA 11/1/2020 23:56:58'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PGTA 11/1/2020 23:56:58'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/1/2020 23:56:58'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/1/2020 23:56:58'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PGTA 11/1/2020 23:56:58'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/1/2020 23:56:58'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/1/2020 23:56:58'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PGTA 11/1/2020 23:56:58'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PGTA 11/1/2020 23:56:58'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PGTA 11/1/2020 23:56:58'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PGTA 11/1/2020 23:56:58'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PGTA 11/1/2020 23:56:58'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PGTA 11/1/2020 23:56:58'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PGTA 11/1/2020 23:56:58'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PGTA 11/1/2020 23:56:58'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PGTA 11/1/2020 23:56:58'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PGTA 11/1/2020 23:56:58'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PGTA 11/1/2020 23:56:58'!
PASSED!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PGTA 11/1/2020 23:56:58'!
PASSED!

!testRun: #TerniLapilliTest #test20GameCanFinishBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:56:58'!
PASSED!

!testRun: #TerniLapilliTest #test20XCanWinBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:56:58'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:56:58'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleRowBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:56:58'!
PASSED!

!testRun: #TerniLapilliTest #test22OCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:56:58'!
FAILURE!

!testRun: #TerniLapilliTest #test22OCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:56:58'!
FAILURE!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PGTA 11/1/2020 23:57:22' prior: 50869506!
test22OCanWinUsingDiagonalsBeforeMovingPhaseTurns
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'abajoDerecha'.	
	
	self assert: terni hasPlayerOWon.! !

!testRun: #TerniLapilliTest #test22OCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:57:22'!
FAILURE!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PGTA 11/1/2020 23:57:39' prior: 50869671!
test22OCanWinUsingDiagonalsBeforeMovingPhaseTurns
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'abajoIzquierda'.	
	
	self assert: terni hasPlayerOWon.! !

!testRun: #TerniLapilliTest #test22OCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:57:39'!
FAILURE!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PGTA 11/1/2020 23:58:43' prior: 50869688!
test22OCanWinUsingDiagonalsBeforeMovingPhaseTurns
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'abajoIzquierda'.	
	terni placePieceIn: 'abajoDerecha'.	
	
	self assert: false equals: terni hasPlayerXWon.
	self assert: terni hasPlayerOWon.! !

!testRun: #TerniLapilliTest #test22OCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:58:43'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PGTA 11/1/2020 23:58:43'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PGTA 11/1/2020 23:58:43'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/1/2020 23:58:43'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/1/2020 23:58:43'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PGTA 11/1/2020 23:58:43'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/1/2020 23:58:43'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/1/2020 23:58:43'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PGTA 11/1/2020 23:58:43'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PGTA 11/1/2020 23:58:43'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PGTA 11/1/2020 23:58:43'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PGTA 11/1/2020 23:58:43'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PGTA 11/1/2020 23:58:43'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PGTA 11/1/2020 23:58:43'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PGTA 11/1/2020 23:58:43'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PGTA 11/1/2020 23:58:43'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PGTA 11/1/2020 23:58:43'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PGTA 11/1/2020 23:58:43'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PGTA 11/1/2020 23:58:43'!
PASSED!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PGTA 11/1/2020 23:58:43'!
PASSED!

!testRun: #TerniLapilliTest #test20GameCanFinishBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:58:43'!
PASSED!

!testRun: #TerniLapilliTest #test20XCanWinBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:58:43'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:58:43'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleRowBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:58:43'!
PASSED!

!testRun: #TerniLapilliTest #test22OCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/1/2020 23:58:43'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PGTA 11/2/2020 00:06:43'!
test21XCanWinBeforeMovingPhaseTurns
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'derecha'.	
	terni placePieceIn: 'arribaDerecha'.	
	
	self assert: terni hasPlayerXWon.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'PGTA 11/2/2020 00:06:53'!
test22XCanWinUsingMiddleColumnBeforeMovingPhaseTurns
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'izquierda'.	
	terni placePieceIn: 'abajoCentro'.	
	
	self assert: terni hasPlayerXWon.! !

!methodRemoval: TerniLapilliTest #test20XCanWinBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 00:07:18'!
test20XCanWinBeforeMovingPhaseTurns
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'derecha'.	
	terni placePieceIn: 'arribaDerecha'.	
	
	self assert: terni hasPlayerXWon.!

!methodRemoval: TerniLapilliTest #test20GameCanFinishBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 00:07:54'!
test20GameCanFinishBeforeMovingPhaseTurns
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'derecha'.	
	terni placePieceIn: 'arribaDerecha'.	
	
	self assert: terni hasPlayerXWon.!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PGTA 11/2/2020 00:08:06'!
test20XCanWinBeforeMovingPhaseTurns
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'derecha'.	
	terni placePieceIn: 'arribaDerecha'.	
	
	self assert: terni hasPlayerXWon.! !

!methodRemoval: TerniLapilliTest #test21XCanWinBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 00:08:07'!
test21XCanWinBeforeMovingPhaseTurns
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'derecha'.	
	terni placePieceIn: 'arribaDerecha'.	
	
	self assert: terni hasPlayerXWon.!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PGTA 11/2/2020 00:08:42'!
test20XCanWinUsingUpperRowBeforeMovingPhaseTurns
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'derecha'.	
	terni placePieceIn: 'arribaDerecha'.	
	
	self assert: terni hasPlayerXWon.! !

!methodRemoval: TerniLapilliTest #test20XCanWinBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 00:08:42'!
test20XCanWinBeforeMovingPhaseTurns
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'derecha'.	
	terni placePieceIn: 'arribaDerecha'.	
	
	self assert: terni hasPlayerXWon.!

!methodRemoval: TerniLapilliTest #test22XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 00:08:55'!
test22XCanWinUsingMiddleColumnBeforeMovingPhaseTurns
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'izquierda'.	
	terni placePieceIn: 'abajoCentro'.	
	
	self assert: terni hasPlayerXWon.!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PGTA 11/2/2020 00:09:18'!
test22XCanWinUsingMiddleRowBeforeMovingPhaseTurns
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'izquierda'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'derecha'.	
	
	self assert: terni hasPlayerXWon.! !

!methodRemoval: TerniLapilliTest #test21XCanWinUsingMiddleRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 00:09:18'!
test21XCanWinUsingMiddleRowBeforeMovingPhaseTurns
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'izquierda'.	
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'derecha'.	
	
	self assert: terni hasPlayerXWon.!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PGTA 11/2/2020 00:09:28'!
test23OCanWinUsingDiagonalsBeforeMovingPhaseTurns
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'abajoIzquierda'.	
	terni placePieceIn: 'abajoDerecha'.	
	
	self assert: false equals: terni hasPlayerXWon.
	self assert: terni hasPlayerOWon.! !

!methodRemoval: TerniLapilliTest #test22OCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 00:09:28'!
test22OCanWinUsingDiagonalsBeforeMovingPhaseTurns
	
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'abajoIzquierda'.	
	terni placePieceIn: 'abajoDerecha'.	
	
	self assert: false equals: terni hasPlayerXWon.
	self assert: terni hasPlayerOWon.!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PGTA 11/2/2020 00:50:38'!
test24XCannotMoveAfterOWins
	
"	O X X
	-  O  -
	X O  -   "
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'abajoIzquierda'.	
	terni placePieceIn: 'abajoCentro'.	
	
	self assert: false equals: terni hasPlayerXWon.
	self assert: false equals: terni hasPlayerOWon.
	
	terni movePieceFrom: 'abajoIzquierda' to: 'izquierda'.
	terni movePieceFrom: 'abajoCentro' to: 'abajoIzquierda'.
	
	self assert: false equals: terni hasPlayerXWon.
	self assert: terni hasPlayerOWon.
	
	terni movePieceFrom: 'izquierda' to: 'abajoIzquierda'.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'PGTA 11/2/2020 00:51:52' prior: 50869984!
test24XCannotMoveAfterOWins
	
"	O X X
	-  O  -
	X O  -   "
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'abajoIzquierda'.	
	terni placePieceIn: 'abajoCentro'.	
	
	self assert: false equals: terni hasPlayerXWon.
	self assert: false equals: terni hasPlayerOWon.
	
	terni movePieceFrom: 'abajoIzquierda' to: 'izquierda'.
	terni movePieceFrom: 'abajoCentro' to: 'abajoIzquierda'.
	
	self assert: false equals: terni hasPlayerXWon.
	self assert: terni hasPlayerOWon.
	
	self should: [terni movePieceFrom: 'izquierda' to: 'abajoIzquierda'.]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli canNotPerformActionAfterGameOver.
	! !

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 00:51:53'!
ERROR!
!TerniLapilli methodsFor: 'error handling' stamp: 'PGTA 11/2/2020 00:51:59' overrides: 16881409!
error: aString 
	self shouldBeImplemented.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'PGTA 11/2/2020 00:53:01' prior: 50870009!
test24XCannotMoveAfterOWins
	
"	O X X
	-  O  -
	X O  -   "
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'abajoIzquierda'.	
	terni placePieceIn: 'abajoCentro'.	
	
	self assert: false equals: terni hasPlayerXWon.
	self assert: false equals: terni hasPlayerOWon.
	
	terni movePieceFrom: 'abajoIzquierda' to: 'izquierda'.
	terni movePieceFrom: 'abajoCentro' to: 'abajoIzquierda'.
	
	self assert: false equals: terni hasPlayerXWon.
	self assert: terni hasPlayerOWon.
	
	self should: [terni movePieceFrom: 'izquierda' to: 'abajoIzquierda'.]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli canNotPerformActionAfterGameOverErrorDescription.
	! !
!TerniLapilli methodsFor: 'error handling' stamp: 'PGTA 11/2/2020 00:53:10' overrides: 16881483!
shouldBeImplemented
	self shouldBeImplemented.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'PGTA 11/2/2020 00:53:28' prior: 50870046!
test24XCannotMoveAfterOWins
	
"	O X X
	-  O  -
	X O  -   "
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'abajoIzquierda'.	
	terni placePieceIn: 'abajoCentro'.	
	
	self assert: false equals: terni hasPlayerXWon.
	self assert: false equals: terni hasPlayerOWon.
	
	terni movePieceFrom: 'abajoIzquierda' to: 'izquierda'.
	terni movePieceFrom: 'abajoCentro' to: 'abajoIzquierda'.
	
	self assert: false equals: terni hasPlayerXWon.
	self assert: terni hasPlayerOWon.
	
	self should: [terni movePieceFrom: 'izquierda' to: 'abajoIzquierda'.]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli cannotPerformActionAfterGameOverErrorDescription.
	! !

----SNAPSHOT----(2 November 2020 00:53:35) CuisUniversity-4384.image priorSource: 17180259!

!methodRemoval: TerniLapilli #shouldBeImplemented stamp: 'PGTA 11/2/2020 00:53:53'!
shouldBeImplemented
	self shouldBeImplemented.!

!methodRemoval: TerniLapilli #error: stamp: 'PGTA 11/2/2020 00:54:42'!
error: aString 
	self shouldBeImplemented.!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/2/2020 00:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PGTA 11/2/2020 00:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PGTA 11/2/2020 00:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/2/2020 00:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/2/2020 00:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PGTA 11/2/2020 00:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/2/2020 00:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/2/2020 00:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PGTA 11/2/2020 00:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PGTA 11/2/2020 00:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PGTA 11/2/2020 00:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PGTA 11/2/2020 00:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PGTA 11/2/2020 00:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PGTA 11/2/2020 00:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PGTA 11/2/2020 00:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PGTA 11/2/2020 00:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PGTA 11/2/2020 00:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PGTA 11/2/2020 00:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PGTA 11/2/2020 00:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PGTA 11/2/2020 00:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test20XCanWinUsingUpperRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 00:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 00:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test22XCanWinUsingMiddleRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 00:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test23OCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 00:54:48'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 00:54:48'!
ERROR!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 00:54:48'!
ERROR!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 00:56:05'!
ERROR!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/2/2020 00:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PGTA 11/2/2020 00:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PGTA 11/2/2020 00:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/2/2020 00:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/2/2020 00:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PGTA 11/2/2020 00:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/2/2020 00:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/2/2020 00:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PGTA 11/2/2020 00:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PGTA 11/2/2020 00:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PGTA 11/2/2020 00:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PGTA 11/2/2020 00:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PGTA 11/2/2020 00:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PGTA 11/2/2020 00:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PGTA 11/2/2020 00:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PGTA 11/2/2020 00:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PGTA 11/2/2020 00:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PGTA 11/2/2020 00:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PGTA 11/2/2020 00:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PGTA 11/2/2020 00:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test20XCanWinUsingUpperRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 00:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 00:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test22XCanWinUsingMiddleRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 00:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test23OCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 00:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 00:59:13'!
ERROR!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 00:59:13'!
ERROR!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 00:59:39'!
ERROR!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 00:59:48'!
ERROR!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 01:00:20'!
ERROR!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 01:01:20'!
ERROR!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 01:01:39'!
ERROR!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 01:01:53'!
FAILURE!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 01:02:03'!
ERROR!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'PGTA 11/2/2020 01:02:19'!
cannotPerformActionAfterGameOverErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'PGTA 11/2/2020 01:02:48' prior: 50870333!
cannotPerformActionAfterGameOverErrorDescription
	^'cannot Perform Action After Game Over'! !

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 01:02:54'!
FAILURE!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PGTA 11/2/2020 01:03:18' prior: 50870080!
test24XCannotMoveAfterOWins
	
"	O X X
	-  O  -
	X O  -   "
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'arribaIzquierda'.	
	terni placePieceIn: 'abajoIzquierda'.	
	terni placePieceIn: 'abajoCentro'.	
	
	self assert: false equals: terni hasPlayerXWon.
	self assert: false equals: terni hasPlayerOWon.
	
	terni movePieceFrom: 'abajoIzquierda' to: 'izquierda'.
	terni movePieceFrom: 'abajoCentro' to: 'abajoDerecha'.
	
	self assert: false equals: terni hasPlayerXWon.
	self assert: terni hasPlayerOWon.
	
	self should: [terni movePieceFrom: 'izquierda' to: 'abajoIzquierda'.]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli cannotPerformActionAfterGameOverErrorDescription.
	! !

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 01:03:18'!
ERROR!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 01:03:23'!
ERROR!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 01:04:33'!
ERROR!

a := AbajoIzquierda new.!

(AbajoIzquierda new) isNeighbourOf: (Izquierda new)!

(Izquierda new) isNeighbourOf: (AbajoIzquierda new).!

(AbajoIzquierda new) isNeighbourOf: (Izquierda new). true !

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 01:07:02'!
ERROR!

boardTakenPosition isNeighbourOf: boardTakenPosition!

boardTakenPosition!

boardTakenPosition!

boardTakenPosition!
!TerniLapilli methodsFor: 'game actions' stamp: 'PGTA 11/2/2020 01:10:56' prior: 50868313!
movePieceFrom: aTakenPosition to: anEmptyPosition 
	|boardTakenPosition boardEmptyPosition|
	self areAllPiecesInGame ifFalse: [^self error: self class canNotMoveAPieceBeforeAllPiecesAreInGameErrorDescription].
	(aTakenPosition = anEmptyPosition ) ifTrue: [^self error: self class canNotMoveAPieceIntoTheSamePositionErrorDescription].
	
	boardTakenPosition := self getBoardPositionFor: aTakenPosition.
	(self isPositionEmpty: boardTakenPosition ) ifTrue: [^self error: self class canNotMoveAPieceFromAnEmptyPositionErrorDescription].
	
	boardEmptyPosition := self getBoardPositionFor: anEmptyPosition.
	(self isPositionTaken: boardEmptyPosition) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedPositionErrorDescription].
	
	(self isPositionTakenByAnotherPlayer: boardTakenPosition) ifTrue: [^self error: self class canNotMoveAPieceFromAnotherPlayerErrorDescription].
	
	(boardTakenPosition isNeighbourOf: boardEmptyPosition) ifTrue: [
		boardTakenPosition freePosition.
		self placePieceInBoard: boardEmptyPosition.
	
		self alternateTurn.
	]
	ifFalse: [^self error: self class canNotMoveAPieceJumpingPositionsErrorDescription].! !

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 01:11:03'!
FAILURE!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 01:11:51'!
FAILURE!
!TerniLapilli methodsFor: 'game actions' stamp: 'PGTA 11/2/2020 01:14:27' prior: 50870399!
movePieceFrom: aTakenPosition to: anEmptyPosition 

	|boardTakenPosition boardEmptyPosition|
	
	(self hasPlayerXWon or: self hasPlayerOWon) ifTrue:[^self class cannotPerformActionAfterGameOverErrorDescription].
	
	self areAllPiecesInGame ifFalse: [^self error: self class canNotMoveAPieceBeforeAllPiecesAreInGameErrorDescription].
	(aTakenPosition = anEmptyPosition ) ifTrue: [^self error: self class canNotMoveAPieceIntoTheSamePositionErrorDescription].
	
	boardTakenPosition := self getBoardPositionFor: aTakenPosition.
	(self isPositionEmpty: boardTakenPosition ) ifTrue: [^self error: self class canNotMoveAPieceFromAnEmptyPositionErrorDescription].
	
	boardEmptyPosition := self getBoardPositionFor: anEmptyPosition.
	(self isPositionTaken: boardEmptyPosition) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedPositionErrorDescription].
	
	(self isPositionTakenByAnotherPlayer: boardTakenPosition) ifTrue: [^self error: self class canNotMoveAPieceFromAnotherPlayerErrorDescription].
	
	(boardTakenPosition isNeighbourOf: boardEmptyPosition) ifTrue: [
		boardTakenPosition freePosition.
		self placePieceInBoard: boardEmptyPosition.
	
		self alternateTurn.
	]
	ifFalse: [^self error: self class canNotMoveAPieceJumpingPositionsErrorDescription].! !

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/2/2020 01:14:31'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PGTA 11/2/2020 01:14:31'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PGTA 11/2/2020 01:14:31'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/2/2020 01:14:31'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/2/2020 01:14:31'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PGTA 11/2/2020 01:14:31'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/2/2020 01:14:31'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/2/2020 01:14:31'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PGTA 11/2/2020 01:14:31'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PGTA 11/2/2020 01:14:31'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PGTA 11/2/2020 01:14:31'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PGTA 11/2/2020 01:14:31'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PGTA 11/2/2020 01:14:31'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PGTA 11/2/2020 01:14:31'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PGTA 11/2/2020 01:14:31'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PGTA 11/2/2020 01:14:31'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PGTA 11/2/2020 01:14:31'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PGTA 11/2/2020 01:14:31'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PGTA 11/2/2020 01:14:31'!
PASSED!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PGTA 11/2/2020 01:14:31'!
PASSED!

!testRun: #TerniLapilliTest #test20XCanWinUsingUpperRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 01:14:31'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 01:14:31'!
PASSED!

!testRun: #TerniLapilliTest #test22XCanWinUsingMiddleRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 01:14:31'!
PASSED!

!testRun: #TerniLapilliTest #test23OCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 01:14:31'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 01:14:31'!
FAILURE!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 01:14:31'!
FAILURE!

terni hasPlayerOWon!

terni movePieceFrom: 'izquierda' to: 'abajoIzquierda'.!
!TerniLapilli methodsFor: 'game actions' stamp: 'PGTA 11/2/2020 01:16:16' prior: 50870444!
movePieceFrom: aTakenPosition to: anEmptyPosition 

	|boardTakenPosition boardEmptyPosition|
	
	(self hasPlayerXWon or: self hasPlayerOWon) ifTrue:[^self error: self class cannotPerformActionAfterGameOverErrorDescription].
	
	self areAllPiecesInGame ifFalse: [^self error: self class canNotMoveAPieceBeforeAllPiecesAreInGameErrorDescription].
	(aTakenPosition = anEmptyPosition ) ifTrue: [^self error: self class canNotMoveAPieceIntoTheSamePositionErrorDescription].
	
	boardTakenPosition := self getBoardPositionFor: aTakenPosition.
	(self isPositionEmpty: boardTakenPosition ) ifTrue: [^self error: self class canNotMoveAPieceFromAnEmptyPositionErrorDescription].
	
	boardEmptyPosition := self getBoardPositionFor: anEmptyPosition.
	(self isPositionTaken: boardEmptyPosition) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedPositionErrorDescription].
	
	(self isPositionTakenByAnotherPlayer: boardTakenPosition) ifTrue: [^self error: self class canNotMoveAPieceFromAnotherPlayerErrorDescription].
	
	(boardTakenPosition isNeighbourOf: boardEmptyPosition) ifTrue: [
		boardTakenPosition freePosition.
		self placePieceInBoard: boardEmptyPosition.
	
		self alternateTurn.
	]
	ifFalse: [^self error: self class canNotMoveAPieceJumpingPositionsErrorDescription].! !

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/2/2020 01:16:19'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PGTA 11/2/2020 01:16:19'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PGTA 11/2/2020 01:16:19'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/2/2020 01:16:19'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/2/2020 01:16:19'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PGTA 11/2/2020 01:16:19'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/2/2020 01:16:19'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/2/2020 01:16:19'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PGTA 11/2/2020 01:16:19'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PGTA 11/2/2020 01:16:19'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PGTA 11/2/2020 01:16:19'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PGTA 11/2/2020 01:16:19'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PGTA 11/2/2020 01:16:19'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PGTA 11/2/2020 01:16:19'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PGTA 11/2/2020 01:16:19'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PGTA 11/2/2020 01:16:19'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PGTA 11/2/2020 01:16:19'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PGTA 11/2/2020 01:16:19'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PGTA 11/2/2020 01:16:19'!
PASSED!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PGTA 11/2/2020 01:16:19'!
PASSED!

!testRun: #TerniLapilliTest #test20XCanWinUsingUpperRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 01:16:19'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 01:16:19'!
PASSED!

!testRun: #TerniLapilliTest #test22XCanWinUsingMiddleRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 01:16:19'!
PASSED!

!testRun: #TerniLapilliTest #test23OCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 01:16:19'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 01:16:19'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'PGTA 11/2/2020 01:19:14'!
test25OCannotPlacePieceAfterXWin
	
"	X X X
	-  O  -
	-  O  -   "
	|terni|
	terni := TerniLapilli new.
	terni placePieceIn: 'arribaCentro'.	
	terni placePieceIn: 'centro'.	
	terni placePieceIn: 'arribaDerecha'.	
	terni placePieceIn: 'abajoCentro'.	
	terni placePieceIn: 'arribaIzquierda'.	
	
	self assert: terni hasPlayerXWon.
	self assert: false equals: terni hasPlayerOWon.
	
	self should: [terni placePieceIn: 'abajoIzquierda'.	]
		raise: Error - MessageNotUnderstood
		withMessageText: TerniLapilli cannotPerformActionAfterGameOverErrorDescription.
	! !

!testRun: #TerniLapilliTest #test25OCannotPlacePieceAfterXWin stamp: 'PGTA 11/2/2020 01:19:14'!
FAILURE!
!TerniLapilli methodsFor: 'game actions' stamp: 'PGTA 11/2/2020 01:20:04' prior: 50868352!
placePieceIn: aPositionIdentifier 
	
	|boardPosition|
	
	(self hasPlayerXWon or: self hasPlayerOWon) ifTrue:[^self error: self class cannotPerformActionAfterGameOverErrorDescription].
	
	self playerHasAvailablePiecesToPlay ifFalse: [^self error: self class noMorePiecesAvailableErrorDescription].
	
	boardPosition := self getBoardPositionFor: aPositionIdentifier.
	(self isPositionTaken: boardPosition) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedPositionErrorDescription].
	 
	self placePieceInBoard: boardPosition.
	self alternateTurn.
	piecesInPlay := piecesInPlay + 1.! !

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PGTA 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PGTA 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PGTA 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PGTA 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PGTA 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PGTA 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PGTA 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PGTA 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PGTA 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PGTA 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PGTA 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PGTA 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PGTA 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PGTA 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PGTA 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test20XCanWinUsingUpperRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test22XCanWinUsingMiddleRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test23OCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlacePieceAfterXWin stamp: 'PGTA 11/2/2020 01:20:13'!
PASSED!
!TerniLapilli methodsFor: 'game actions' stamp: 'PGTA 11/2/2020 01:32:20' prior: 50870584!
movePieceFrom: aTakenPosition to: anEmptyPosition 

	|boardTakenPosition boardEmptyPosition|
	
	self isOver ifTrue:[^self error: self class cannotPerformActionAfterGameOverErrorDescription].
	
	self areAllPiecesInGame ifFalse: [^self error: self class canNotMoveAPieceBeforeAllPiecesAreInGameErrorDescription].
	(aTakenPosition = anEmptyPosition ) ifTrue: [^self error: self class canNotMoveAPieceIntoTheSamePositionErrorDescription].
	
	boardTakenPosition := self getBoardPositionFor: aTakenPosition.
	(self isPositionEmpty: boardTakenPosition ) ifTrue: [^self error: self class canNotMoveAPieceFromAnEmptyPositionErrorDescription].
	
	boardEmptyPosition := self getBoardPositionFor: anEmptyPosition.
	(self isPositionTaken: boardEmptyPosition) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedPositionErrorDescription].
	
	(self isPositionTakenByAnotherPlayer: boardTakenPosition) ifTrue: [^self error: self class canNotMoveAPieceFromAnotherPlayerErrorDescription].
	
	(boardTakenPosition isNeighbourOf: boardEmptyPosition) ifTrue: [
		boardTakenPosition freePosition.
		self placePieceInBoard: boardEmptyPosition.
	
		self alternateTurn.
	]
	ifFalse: [^self error: self class canNotMoveAPieceJumpingPositionsErrorDescription].! !
!TerniLapilli methodsFor: 'game testing' stamp: 'PGTA 11/2/2020 01:32:30' prior: 50868452!
isOver
	^(self hasPlayerXWon or: self hasPlayerOWon)! !
!TerniLapilli methodsFor: 'game actions' stamp: 'PGTA 11/2/2020 01:32:46' prior: 50870742!
placePieceIn: aPositionIdentifier 
	
	|boardPosition|
	
	self isOver ifTrue:[^self error: self class cannotPerformActionAfterGameOverErrorDescription].
	
	self playerHasAvailablePiecesToPlay ifFalse: [^self error: self class noMorePiecesAvailableErrorDescription].
	
	boardPosition := self getBoardPositionFor: aPositionIdentifier.
	(self isPositionTaken: boardPosition) ifTrue: [^self error: self class canNotPutAPieceInAnOccupiedPositionErrorDescription].
	 
	self placePieceInBoard: boardPosition.
	self alternateTurn.
	piecesInPlay := piecesInPlay + 1.! !

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/2/2020 01:32:51'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PGTA 11/2/2020 01:32:51'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PGTA 11/2/2020 01:32:51'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/2/2020 01:32:51'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/2/2020 01:32:51'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PGTA 11/2/2020 01:32:51'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/2/2020 01:32:51'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/2/2020 01:32:51'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PGTA 11/2/2020 01:32:51'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PGTA 11/2/2020 01:32:51'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PGTA 11/2/2020 01:32:51'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PGTA 11/2/2020 01:32:51'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PGTA 11/2/2020 01:32:51'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PGTA 11/2/2020 01:32:51'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PGTA 11/2/2020 01:32:51'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PGTA 11/2/2020 01:32:51'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PGTA 11/2/2020 01:32:51'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PGTA 11/2/2020 01:32:51'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PGTA 11/2/2020 01:32:51'!
PASSED!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PGTA 11/2/2020 01:32:51'!
PASSED!

!testRun: #TerniLapilliTest #test20XCanWinUsingUpperRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 01:32:51'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 01:32:51'!
PASSED!

!testRun: #TerniLapilliTest #test22XCanWinUsingMiddleRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 01:32:51'!
PASSED!

!testRun: #TerniLapilliTest #test23OCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 01:32:51'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 01:32:51'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlacePieceAfterXWin stamp: 'PGTA 11/2/2020 01:32:51'!
PASSED!
!TerniLapilli methodsFor: 'game testing' stamp: 'PGTA 11/2/2020 01:39:06' prior: 50869540!
hasPlayerOWon
	 "rows"
	^(	((self hasAnOPieceIn: 'arribaIzquierda') and: (self hasAnOPieceIn: 'arribaCentro') and: (self hasAnOPieceIn: 'arribaDerecha'))
	or: 	((self hasAnOPieceIn: 'izquierda') and: (self hasAnOPieceIn: 'centro') and: (self hasAnOPieceIn: 'derecha'))
	or: 	((self hasAnOPieceIn: 'abajoIzquierda') and: (self hasAnOPieceIn: 'abajoCentro') and: (self hasAnOPieceIn: 'abajoDerecha'))
	)"columns"
	or:( 	((self hasAnOPieceIn: 'arribaIzquierda') and: (self hasAnOPieceIn: 'izquierda') and: (self hasAnOPieceIn: 'abajoIzquierda'))
	or: 	((self hasAnOPieceIn: 'arribaCentro') and: (self hasAnOPieceIn: 'centro') and: (self hasAnOPieceIn: 'abajoCentro'))
	or: 	((self hasAnOPieceIn: 'arribaDerecha') and: (self hasAnOPieceIn: 'derecha') and: (self hasAnOPieceIn: 'abajoDerecha'))
	)"diagonals"
	or:( 	((self hasAnOPieceIn: 'arribaIzquierda') and: (self hasAnOPieceIn: 'centro') and: (self hasAnOPieceIn: 'abajoDerecha'))
	or: 	((self hasAnOPieceIn: 'arribaDerecha') and: (self hasAnOPieceIn: 'centro') and: (self hasAnOPieceIn: 'abajoIzquierda'))
	)! !
!TerniLapilli methodsFor: 'game testing' stamp: 'PGTA 11/2/2020 01:39:38' prior: 50869165!
hasPlayerXWon
	"rows"
	^(	((self hasAnXPieceIn: 'arribaIzquierda') and: (self hasAnXPieceIn: 'arribaCentro') and: (self hasAnXPieceIn: 'arribaDerecha'))
	or: 	((self hasAnXPieceIn: 'izquierda') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'derecha'))
	or: 	((self hasAnXPieceIn: 'abajoIzquierda') and: (self hasAnXPieceIn: 'abajoCentro') and: (self hasAnXPieceIn: 'abajoDerecha'))
	)"columns"
	or:( 	((self hasAnXPieceIn: 'arribaIzquierda') and: (self hasAnXPieceIn: 'izquierda') and: (self hasAnXPieceIn: 'abajoIzquierda'))
	or: 	((self hasAnXPieceIn: 'arribaCentro') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'abajoCentro'))
	or: 	((self hasAnXPieceIn: 'arribaDerecha') and: (self hasAnXPieceIn: 'derecha') and: (self hasAnXPieceIn: 'abajoDerecha'))
	)"diagonals"
	or:( 	((self hasAnXPieceIn: 'arribaIzquierda') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'abajoDerecha'))
	or: 	((self hasAnXPieceIn: 'arribaDerecha') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'abajoIzquierda'))
	)! !
!TerniLapilli methodsFor: 'game testing' stamp: 'PGTA 11/2/2020 01:39:44' prior: 50871057!
hasPlayerXWon
	 "rows"
	^(	((self hasAnXPieceIn: 'arribaIzquierda') and: (self hasAnXPieceIn: 'arribaCentro') and: (self hasAnXPieceIn: 'arribaDerecha'))
	or: 	((self hasAnXPieceIn: 'izquierda') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'derecha'))
	or: 	((self hasAnXPieceIn: 'abajoIzquierda') and: (self hasAnXPieceIn: 'abajoCentro') and: (self hasAnXPieceIn: 'abajoDerecha'))
	)"columns"
	or:( 	((self hasAnXPieceIn: 'arribaIzquierda') and: (self hasAnXPieceIn: 'izquierda') and: (self hasAnXPieceIn: 'abajoIzquierda'))
	or: 	((self hasAnXPieceIn: 'arribaCentro') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'abajoCentro'))
	or: 	((self hasAnXPieceIn: 'arribaDerecha') and: (self hasAnXPieceIn: 'derecha') and: (self hasAnXPieceIn: 'abajoDerecha'))
	)"diagonals"
	or:( 	((self hasAnXPieceIn: 'arribaIzquierda') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'abajoDerecha'))
	or: 	((self hasAnXPieceIn: 'arribaDerecha') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'abajoIzquierda'))
	)! !

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/2/2020 01:39:57'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/2/2020 01:40:01'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PGTA 11/2/2020 01:40:01'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PGTA 11/2/2020 01:40:01'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/2/2020 01:40:01'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/2/2020 01:40:01'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PGTA 11/2/2020 01:40:01'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/2/2020 01:40:01'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/2/2020 01:40:01'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PGTA 11/2/2020 01:40:01'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PGTA 11/2/2020 01:40:01'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PGTA 11/2/2020 01:40:01'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PGTA 11/2/2020 01:40:01'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PGTA 11/2/2020 01:40:01'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PGTA 11/2/2020 01:40:01'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PGTA 11/2/2020 01:40:01'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PGTA 11/2/2020 01:40:01'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PGTA 11/2/2020 01:40:01'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PGTA 11/2/2020 01:40:01'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PGTA 11/2/2020 01:40:01'!
PASSED!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PGTA 11/2/2020 01:40:01'!
PASSED!

!testRun: #TerniLapilliTest #test20XCanWinUsingUpperRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 01:40:01'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 01:40:01'!
PASSED!

!testRun: #TerniLapilliTest #test22XCanWinUsingMiddleRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 01:40:01'!
PASSED!

!testRun: #TerniLapilliTest #test23OCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 01:40:01'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 01:40:01'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlacePieceAfterXWin stamp: 'PGTA 11/2/2020 01:40:01'!
PASSED!

----SNAPSHOT----(2 November 2020 01:41:55) CuisUniversity-4384.image priorSource: 17230646!

----QUIT----(2 November 2020 01:41:58) CuisUniversity-4384.image priorSource: 17266456!

----STARTUP---- (2 November 2020 14:37:43) as /home/pablo/Documents/Ingenieria1/cuis_terniLapilli/CuisUniversity-4384.image!


!testRun: #TerniLapilliTest #test25OCannotPlacePieceAfterXWin stamp: 'PGTA 11/2/2020 14:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PGTA 11/2/2020 14:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PGTA 11/2/2020 14:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/2/2020 14:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/2/2020 14:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PGTA 11/2/2020 14:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/2/2020 14:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/2/2020 14:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PGTA 11/2/2020 14:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PGTA 11/2/2020 14:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PGTA 11/2/2020 14:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PGTA 11/2/2020 14:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PGTA 11/2/2020 14:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PGTA 11/2/2020 14:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PGTA 11/2/2020 14:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PGTA 11/2/2020 14:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PGTA 11/2/2020 14:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PGTA 11/2/2020 14:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PGTA 11/2/2020 14:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PGTA 11/2/2020 14:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test20XCanWinUsingUpperRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 14:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 14:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test22XCanWinUsingMiddleRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 14:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test23OCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 14:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 14:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlacePieceAfterXWin stamp: 'PGTA 11/2/2020 14:37:52'!
PASSED!

a := [:check | check isNeighbourOf: (Izquierda new)]!

a value: (AbajoIzquierda new)!
!TerniLapilli methodsFor: 'game testing' stamp: 'PGTA 11/2/2020 14:51:23'!
playerHasAWinningLine: aPlayerPositionCheck
	 "rows"
	^(	((aPlayerPositionCheck value: 'arribaIzquierda') and: (aPlayerPositionCheck value: 'arribaCentro') and: (aPlayerPositionCheck value: 'arribaDerecha'))
	or: 	((aPlayerPositionCheck value: 'izquierda') and: (aPlayerPositionCheck value: 'centro') and: (aPlayerPositionCheck value: 'derecha'))
	or: 	((aPlayerPositionCheck value: 'abajoIzquierda') and: (aPlayerPositionCheck value: 'abajoCentro') and: (aPlayerPositionCheck value: 'abajoDerecha'))
	)"columns"
	or:( 	((aPlayerPositionCheck value: 'arribaIzquierda') and: (aPlayerPositionCheck value: 'izquierda') and: (aPlayerPositionCheck value: 'abajoIzquierda'))
	or: 	((aPlayerPositionCheck value: 'arribaCentro') and: (aPlayerPositionCheck value: 'centro') and: (aPlayerPositionCheck value: 'abajoCentro'))
	or: 	((aPlayerPositionCheck value: 'arribaDerecha') and: (aPlayerPositionCheck value: 'derecha') and: (aPlayerPositionCheck value: 'abajoDerecha'))
	)"diagonals"
	or:( 	((aPlayerPositionCheck value: 'arribaIzquierda') and: (aPlayerPositionCheck value: 'centro') and: (aPlayerPositionCheck value: 'abajoDerecha'))
	or: 	((aPlayerPositionCheck value: 'arribaDerecha') and: (aPlayerPositionCheck value: 'centro') and: (aPlayerPositionCheck value: 'abajoIzquierda'))
	)! !
!TerniLapilli methodsFor: 'game testing' stamp: 'PGTA 11/2/2020 14:52:51' prior: 50871094!
hasPlayerXWon
	self playerHasAWinningLine: [:position | self hasAnXPieceIn: position].

"
	 
	^(	((self hasAnXPieceIn: 'arribaIzquierda') and: (self hasAnXPieceIn: 'arribaCentro') and: (self hasAnXPieceIn: 'arribaDerecha'))
	or: 	((self hasAnXPieceIn: 'izquierda') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'derecha'))
	or: 	((self hasAnXPieceIn: 'abajoIzquierda') and: (self hasAnXPieceIn: 'abajoCentro') and: (self hasAnXPieceIn: 'abajoDerecha'))
	)
	or:( 	((self hasAnXPieceIn: 'arribaIzquierda') and: (self hasAnXPieceIn: 'izquierda') and: (self hasAnXPieceIn: 'abajoIzquierda'))
	or: 	((self hasAnXPieceIn: 'arribaCentro') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'abajoCentro'))
	or: 	((self hasAnXPieceIn: 'arribaDerecha') and: (self hasAnXPieceIn: 'derecha') and: (self hasAnXPieceIn: 'abajoDerecha'))
	)
	or:( 	((self hasAnXPieceIn: 'arribaIzquierda') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'abajoDerecha'))
	or: 	((self hasAnXPieceIn: 'arribaDerecha') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'abajoIzquierda'))
	)"! !
!TerniLapilli methodsFor: 'game testing' stamp: 'PGTA 11/2/2020 14:54:03' prior: 50871378!
hasPlayerXWon
	^self playerHasAWinningLine: [:position | self hasAnXPieceIn: position].

"
	 
	^(	((self hasAnXPieceIn: 'arribaIzquierda') and: (self hasAnXPieceIn: 'arribaCentro') and: (self hasAnXPieceIn: 'arribaDerecha'))
	or: 	((self hasAnXPieceIn: 'izquierda') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'derecha'))
	or: 	((self hasAnXPieceIn: 'abajoIzquierda') and: (self hasAnXPieceIn: 'abajoCentro') and: (self hasAnXPieceIn: 'abajoDerecha'))
	)
	or:( 	((self hasAnXPieceIn: 'arribaIzquierda') and: (self hasAnXPieceIn: 'izquierda') and: (self hasAnXPieceIn: 'abajoIzquierda'))
	or: 	((self hasAnXPieceIn: 'arribaCentro') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'abajoCentro'))
	or: 	((self hasAnXPieceIn: 'arribaDerecha') and: (self hasAnXPieceIn: 'derecha') and: (self hasAnXPieceIn: 'abajoDerecha'))
	)
	or:( 	((self hasAnXPieceIn: 'arribaIzquierda') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'abajoDerecha'))
	or: 	((self hasAnXPieceIn: 'arribaDerecha') and: (self hasAnXPieceIn: 'centro') and: (self hasAnXPieceIn: 'abajoIzquierda'))
	)"! !

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PGTA 11/2/2020 14:54:07'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PGTA 11/2/2020 14:54:07'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PGTA 11/2/2020 14:54:07'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/2/2020 14:54:07'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/2/2020 14:54:07'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PGTA 11/2/2020 14:54:07'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/2/2020 14:54:07'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/2/2020 14:54:07'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PGTA 11/2/2020 14:54:07'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PGTA 11/2/2020 14:54:07'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PGTA 11/2/2020 14:54:07'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PGTA 11/2/2020 14:54:07'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PGTA 11/2/2020 14:54:07'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PGTA 11/2/2020 14:54:07'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PGTA 11/2/2020 14:54:07'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PGTA 11/2/2020 14:54:07'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PGTA 11/2/2020 14:54:07'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PGTA 11/2/2020 14:54:07'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PGTA 11/2/2020 14:54:07'!
PASSED!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PGTA 11/2/2020 14:54:07'!
PASSED!

!testRun: #TerniLapilliTest #test20XCanWinUsingUpperRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 14:54:07'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 14:54:07'!
PASSED!

!testRun: #TerniLapilliTest #test22XCanWinUsingMiddleRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 14:54:07'!
PASSED!

!testRun: #TerniLapilliTest #test23OCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 14:54:07'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 14:54:07'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlacePieceAfterXWin stamp: 'PGTA 11/2/2020 14:54:07'!
PASSED!
!TerniLapilli methodsFor: 'game testing' stamp: 'PGTA 11/2/2020 14:54:29' prior: 50871416!
hasPlayerXWon
	^self playerHasAWinningLine: [:position | self hasAnXPieceIn: position].! !
!TerniLapilli methodsFor: 'game testing' stamp: 'PGTA 11/2/2020 14:54:44' prior: 50871020!
hasPlayerOWon
	^self playerHasAWinningLine: [:position | self hasAnOPieceIn: position].! !

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/2/2020 14:54:49'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PGTA 11/2/2020 14:54:49'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PGTA 11/2/2020 14:54:49'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/2/2020 14:54:49'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/2/2020 14:54:49'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PGTA 11/2/2020 14:54:49'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/2/2020 14:54:49'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/2/2020 14:54:49'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PGTA 11/2/2020 14:54:49'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PGTA 11/2/2020 14:54:49'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PGTA 11/2/2020 14:54:49'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PGTA 11/2/2020 14:54:49'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PGTA 11/2/2020 14:54:49'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PGTA 11/2/2020 14:54:49'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PGTA 11/2/2020 14:54:49'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PGTA 11/2/2020 14:54:49'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PGTA 11/2/2020 14:54:49'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PGTA 11/2/2020 14:54:49'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PGTA 11/2/2020 14:54:49'!
PASSED!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PGTA 11/2/2020 14:54:49'!
PASSED!

!testRun: #TerniLapilliTest #test20XCanWinUsingUpperRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 14:54:49'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 14:54:49'!
PASSED!

!testRun: #TerniLapilliTest #test22XCanWinUsingMiddleRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 14:54:49'!
PASSED!

!testRun: #TerniLapilliTest #test23OCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 14:54:49'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 14:54:49'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlacePieceAfterXWin stamp: 'PGTA 11/2/2020 14:54:49'!
PASSED!

!classRenamed: #Posiciones as: #PosicionesTerniLapilli stamp: 'PGTA 11/2/2020 15:09:56'!
Smalltalk renameClassNamed: #Posiciones as: #PosicionesTerniLapilli!

!methodRemoval: PosicionesTerniLapilli #storeAnO stamp: 'PGTA 11/2/2020 15:13:37'!
storeAnO
	^valor := 'O'!

!methodRemoval: PosicionesTerniLapilli #storeAnX stamp: 'PGTA 11/2/2020 15:13:42'!
storeAnX
	^valor := 'X'!
!TerniLapilli methodsFor: 'private management' stamp: 'PGTA 11/2/2020 15:14:03' prior: 50868405!
placePieceInBoard: aBoardPosition.
	isXTurn ifTrue: [aBoardPosition hasAnX] ifFalse: [aBoardPosition hasAnO]! !

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/2/2020 15:14:13'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PGTA 11/2/2020 15:14:13'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PGTA 11/2/2020 15:14:13'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/2/2020 15:14:13'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/2/2020 15:14:13'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PGTA 11/2/2020 15:14:13'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/2/2020 15:14:13'!
FAILURE!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/2/2020 15:14:13'!
FAILURE!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PGTA 11/2/2020 15:14:13'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PGTA 11/2/2020 15:14:13'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PGTA 11/2/2020 15:14:13'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PGTA 11/2/2020 15:14:13'!
FAILURE!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PGTA 11/2/2020 15:14:13'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PGTA 11/2/2020 15:14:13'!
ERROR!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PGTA 11/2/2020 15:14:13'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PGTA 11/2/2020 15:14:13'!
FAILURE!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PGTA 11/2/2020 15:14:13'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PGTA 11/2/2020 15:14:13'!
FAILURE!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PGTA 11/2/2020 15:14:13'!
FAILURE!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PGTA 11/2/2020 15:14:13'!
PASSED!

!testRun: #TerniLapilliTest #test20XCanWinUsingUpperRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 15:14:13'!
FAILURE!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 15:14:13'!
FAILURE!

!testRun: #TerniLapilliTest #test22XCanWinUsingMiddleRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 15:14:13'!
FAILURE!

!testRun: #TerniLapilliTest #test23OCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 15:14:13'!
FAILURE!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 15:14:13'!
ERROR!

!testRun: #TerniLapilliTest #test25OCannotPlacePieceAfterXWin stamp: 'PGTA 11/2/2020 15:14:13'!
FAILURE!
!TerniLapilli methodsFor: 'private management' stamp: 'PGTA 11/2/2020 15:15:44' prior: 50871669!
placePieceInBoard: aBoardPosition.
	isXTurn ifTrue: [aBoardPosition storeAnX] ifFalse: [aBoardPosition storeAnO]! !

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/2/2020 15:15:53'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PGTA 11/2/2020 15:15:53'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PGTA 11/2/2020 15:15:53'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/2/2020 15:15:53'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/2/2020 15:15:53'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PGTA 11/2/2020 15:15:53'!
ERROR!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/2/2020 15:15:53'!
ERROR!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/2/2020 15:15:53'!
ERROR!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PGTA 11/2/2020 15:15:53'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PGTA 11/2/2020 15:15:53'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PGTA 11/2/2020 15:15:53'!
ERROR!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PGTA 11/2/2020 15:15:53'!
ERROR!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PGTA 11/2/2020 15:15:53'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PGTA 11/2/2020 15:15:53'!
ERROR!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PGTA 11/2/2020 15:15:53'!
ERROR!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PGTA 11/2/2020 15:15:53'!
ERROR!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PGTA 11/2/2020 15:15:53'!
ERROR!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PGTA 11/2/2020 15:15:53'!
ERROR!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PGTA 11/2/2020 15:15:53'!
ERROR!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PGTA 11/2/2020 15:15:53'!
ERROR!

!testRun: #TerniLapilliTest #test20XCanWinUsingUpperRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 15:15:53'!
ERROR!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 15:15:53'!
ERROR!

!testRun: #TerniLapilliTest #test22XCanWinUsingMiddleRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 15:15:53'!
ERROR!

!testRun: #TerniLapilliTest #test23OCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 15:15:53'!
ERROR!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 15:15:53'!
ERROR!

!testRun: #TerniLapilliTest #test25OCannotPlacePieceAfterXWin stamp: 'PGTA 11/2/2020 15:15:53'!
ERROR!
!PosicionesTerniLapilli methodsFor: 'as yet unclassified' stamp: 'PGTA 11/2/2020 15:16:59'!
storeAnX
	valor := 'X'! !
!PosicionesTerniLapilli methodsFor: 'as yet unclassified' stamp: 'PGTA 11/2/2020 15:17:04'!
storeAnO
	valor := 'O'! !

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/2/2020 15:17:12'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PGTA 11/2/2020 15:17:12'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PGTA 11/2/2020 15:17:12'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/2/2020 15:17:12'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/2/2020 15:17:12'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PGTA 11/2/2020 15:17:12'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/2/2020 15:17:12'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/2/2020 15:17:12'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PGTA 11/2/2020 15:17:12'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PGTA 11/2/2020 15:17:12'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PGTA 11/2/2020 15:17:12'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PGTA 11/2/2020 15:17:12'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PGTA 11/2/2020 15:17:12'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PGTA 11/2/2020 15:17:12'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PGTA 11/2/2020 15:17:12'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PGTA 11/2/2020 15:17:12'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PGTA 11/2/2020 15:17:12'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PGTA 11/2/2020 15:17:12'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PGTA 11/2/2020 15:17:12'!
PASSED!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PGTA 11/2/2020 15:17:12'!
PASSED!

!testRun: #TerniLapilliTest #test20XCanWinUsingUpperRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 15:17:12'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 15:17:12'!
PASSED!

!testRun: #TerniLapilliTest #test22XCanWinUsingMiddleRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 15:17:12'!
PASSED!

!testRun: #TerniLapilliTest #test23OCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 15:17:12'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 15:17:12'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlacePieceAfterXWin stamp: 'PGTA 11/2/2020 15:17:12'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/2/2020 15:24:31'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PGTA 11/2/2020 15:24:31'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PGTA 11/2/2020 15:24:31'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/2/2020 15:24:31'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/2/2020 15:24:31'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PGTA 11/2/2020 15:24:31'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/2/2020 15:24:31'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/2/2020 15:24:31'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PGTA 11/2/2020 15:24:31'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PGTA 11/2/2020 15:24:31'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PGTA 11/2/2020 15:24:31'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PGTA 11/2/2020 15:24:31'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PGTA 11/2/2020 15:24:31'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PGTA 11/2/2020 15:24:31'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PGTA 11/2/2020 15:24:31'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PGTA 11/2/2020 15:24:31'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PGTA 11/2/2020 15:24:31'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PGTA 11/2/2020 15:24:31'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PGTA 11/2/2020 15:24:31'!
PASSED!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PGTA 11/2/2020 15:24:31'!
PASSED!

!testRun: #TerniLapilliTest #test20XCanWinUsingUpperRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 15:24:31'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 15:24:31'!
PASSED!

!testRun: #TerniLapilliTest #test22XCanWinUsingMiddleRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 15:24:31'!
PASSED!

!testRun: #TerniLapilliTest #test23OCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 15:24:31'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 15:24:31'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlacePieceAfterXWin stamp: 'PGTA 11/2/2020 15:24:31'!
PASSED!

----SNAPSHOT----(2 November 2020 16:11:17) CuisUniversity-4384.image priorSource: 17266549!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/2/2020 16:11:21'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/2/2020 16:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PGTA 11/2/2020 16:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PGTA 11/2/2020 16:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/2/2020 16:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/2/2020 16:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PGTA 11/2/2020 16:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/2/2020 16:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/2/2020 16:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PGTA 11/2/2020 16:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PGTA 11/2/2020 16:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PGTA 11/2/2020 16:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PGTA 11/2/2020 16:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PGTA 11/2/2020 16:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PGTA 11/2/2020 16:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PGTA 11/2/2020 16:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PGTA 11/2/2020 16:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PGTA 11/2/2020 16:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PGTA 11/2/2020 16:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PGTA 11/2/2020 16:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PGTA 11/2/2020 16:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test20XCanWinUsingUpperRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 16:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 16:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test22XCanWinUsingMiddleRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 16:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test23OCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 16:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 16:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlacePieceAfterXWin stamp: 'PGTA 11/2/2020 16:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/2/2020 16:16:50'!
PASSED!

!testRun: #TerniLapilliTest #test01NewTerniLapilliIsNotOver stamp: 'PGTA 11/2/2020 16:16:50'!
PASSED!

!testRun: #TerniLapilliTest #test02InNewTerniLapilliPlayerXHasntWon stamp: 'PGTA 11/2/2020 16:16:50'!
PASSED!

!testRun: #TerniLapilliTest #test03InNewTerniLapilliPlayerOHasntWon stamp: 'PGTA 11/2/2020 16:16:50'!
PASSED!

!testRun: #TerniLapilliTest #test04InNewTerniLapilliPlayerXStartsPlayingAndTheBoardIsEmpty stamp: 'PGTA 11/2/2020 16:16:50'!
PASSED!

!testRun: #TerniLapilliTest #test05AfterPlayerXTurnIsPlayerOTurn stamp: 'PGTA 11/2/2020 16:16:50'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPutAPieceInXTurn stamp: 'PGTA 11/2/2020 16:16:50'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPutAPieceInOTurn stamp: 'PGTA 11/2/2020 16:16:50'!
PASSED!

!testRun: #TerniLapilliTest #test08AnEmptyBoardDoesNotHaveAnXPieceInTheCenter stamp: 'PGTA 11/2/2020 16:16:50'!
PASSED!

!testRun: #TerniLapilliTest #test09AnEmptyBoardDoesNotHaveAnOPieceInTheCenter stamp: 'PGTA 11/2/2020 16:16:50'!
PASSED!

!testRun: #TerniLapilliTest #test10ABoardWithAPieceInArribaCentroDoesNotHaveAnXOrAnOPieceInCentro stamp: 'PGTA 11/2/2020 16:16:50'!
PASSED!

!testRun: #TerniLapilliTest #test11TwoPiecesCanNotBePlacedInTheSamePositionAfterThatOCanPlayInADifferentPosition stamp: 'PGTA 11/2/2020 16:16:50'!
PASSED!

!testRun: #TerniLapilliTest #test12TerniLapilliAssertsWithAnInvalidPosition stamp: 'PGTA 11/2/2020 16:16:50'!
PASSED!

!testRun: #TerniLapilliTest #test13NonOfThePlayersCanPutMoreThanTheMaxAmountOfPiecesPerPlayer stamp: 'PGTA 11/2/2020 16:16:50'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveAPieceFromAnEmptyPosition stamp: 'PGTA 11/2/2020 16:16:50'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveAPieceIntoATakenPosition stamp: 'PGTA 11/2/2020 16:16:50'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveAPieceBeforeAllPiecesAreInGame stamp: 'PGTA 11/2/2020 16:16:50'!
PASSED!

!testRun: #TerniLapilliTest #test17XCannotMoveAnOPiece stamp: 'PGTA 11/2/2020 16:16:50'!
PASSED!

!testRun: #TerniLapilliTest #test18CannotMoveAPieceJumpingPositions stamp: 'PGTA 11/2/2020 16:16:50'!
PASSED!

!testRun: #TerniLapilliTest #test19CannotMoveAPieceIntoTheSamePosition stamp: 'PGTA 11/2/2020 16:16:50'!
PASSED!

!testRun: #TerniLapilliTest #test20XCanWinUsingUpperRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 16:16:50'!
PASSED!

!testRun: #TerniLapilliTest #test21XCanWinUsingMiddleColumnBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 16:16:50'!
PASSED!

!testRun: #TerniLapilliTest #test22XCanWinUsingMiddleRowBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 16:16:50'!
PASSED!

!testRun: #TerniLapilliTest #test23OCanWinUsingDiagonalsBeforeMovingPhaseTurns stamp: 'PGTA 11/2/2020 16:16:50'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotMoveAfterOWins stamp: 'PGTA 11/2/2020 16:16:50'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlacePieceAfterXWin stamp: 'PGTA 11/2/2020 16:16:50'!
PASSED!