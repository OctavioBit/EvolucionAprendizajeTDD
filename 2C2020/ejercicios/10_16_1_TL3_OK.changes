----STARTUP---- (26 November 2020 17:35:52) as /Users/dbenitez/uba/2c2020-IS1/IS1-Trabajos/20-TusLibros/macos64-TusLibros/CuisUniversity-4384.image!


!methodRemoval: CashierTest #_testxxx stamp: 'db 11/26/2020 17:38:06'!
_testxxx
	
	| cart cashier |
	cart := Cart new.
	cashier := Cashier new.
	
	"
	Catalogo -> Carrito -> Cashier. 
	
	expirationDate := Date year: aYear month: aMonth day: 1.
	expirationDate > Date today ifFalse: [^self class signalExpiredCreditCard ].
	
	creditCard := CreditCard Number: 121313123 expiration: 122025 owner: 'Juan de los palotes'.
	
	- Validar 16 d�gitos.
	- Owner not empty
	- No validar fecha de expiraci�n. Lo valida el cashier.
	
	cashier checkout: cart with: creditCard.
	
	Return ticket or Amount.
	
	carrito vacio
	checkout robada
	checkout sin fondo
	 
	
	"
	
	"
	cashier checkout: cart creditCardNumber: '13213' creditCardExpiration: '122023' creditCardOwner: 'J kennedy'.
	
	
	Merchant Processor:
		- Tarjeta Robada
		- Tiene cr�dito.
		
	Simular la cara interna de la interfaz.

	"
	
	!
!Cart commentStamp: '<historical>' prior: 0!
Cart representa a Cart!

----STARTUP---- (26 November 2020 20:31:43) as /Users/dbenitez/uba/2c2020-IS1/IS1-Trabajos/20-TusLibros/macos64-TusLibros/CuisUniversity-4384.image!


----QUIT----(26 November 2020 20:31:48) CuisUniversity-4384.image priorSource: 17699488!
!CashierTest methodsFor: 'testing' stamp: 'db 11/26/2020 20:33:13' prior: 50884603!
test05WhenMPThrowsAnErrorThePurchaseDoesntGetCarriedOut

	"Ante un error del mp el cajero no realizo la venta"
	
	| cart mp cashier expiredCC receipt |
	
	cart := Cart with: defaultCatalog.
	cart add: '978-3-9820137-0-2'.
	cart add: '978-3-9820137-0-3'.
	
	mp := MerchantProcessorSimulator with: 'insuficient amount'.
	
	cashier := Cashier with: mp.
	expiredCC := CreditCard with: 3445454545454545 expirationMonth: 10 expirationYear: 2050  creditCardOwner: 'Juan de los palotes'.
	
	self should: [ receipt := cashier checkout: cart creditCard: expiredCC.] 
		 raise: Error 
		 withMessageText: 'insuficient amount'.
		
	self assert: receipt isNil .
	
	
	! !

TestCase subclass: #UserInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!

!classDefinition: #UserInterfaceTest category: 'Tus Libros.com' stamp: 'db 11/26/2020 20:38:58'!
TestCase subclass: #UserInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!

!classRemoval: #MerchantProcessorSimulator stamp: 'db 11/26/2020 20:44:17'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'exception'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!

!classRemoval: #CreditCard stamp: 'db 11/26/2020 20:44:17'!
Object subclass: #CreditCard
	instanceVariableNames: 'pan expirationMonth expirationYear creditCardOwner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!

!classRemoval: #Cashier stamp: 'db 11/26/2020 20:44:18'!
Object subclass: #Cashier
	instanceVariableNames: 'prices merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!

!classRemoval: #Cart stamp: 'db 11/26/2020 20:44:18'!
Object subclass: #Cart
	instanceVariableNames: 'items catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!

!classRemoval: #UserInterfaceTest stamp: 'db 11/26/2020 20:44:18'!
TestCase subclass: #UserInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!

!classRemoval: #CreditCartTest stamp: 'db 11/26/2020 20:44:18'!
TestCase subclass: #CreditCartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!

!classRemoval: #CashierTest stamp: 'db 11/26/2020 20:44:19'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'defaultCatalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!

!classRemoval: #CartTest stamp: 'db 11/26/2020 20:44:19'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus Libros.com'!

----End fileIn of /Users/dbenitez/uba/2c2020-IS1/2020-2c/20-TusLibros/Iteracion2/TusLibros-33.st----!

TestCase subclass: #UserInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #UserInterfaceTest category: 'TusLibros' stamp: 'db 11/26/2020 20:44:55'!
TestCase subclass: #UserInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!UserInterfaceTest methodsFor: 'nil' stamp: 'db 11/26/2020 20:46:24'!
test01CannotCreateACartWithAnInvalidUserID

! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/26/2020 20:46:28' prior: 50885459!
test01CannotCreateACartWithAnInvalidUserID

	! !

!classDefinition: #UserInterfaceTest category: 'TusLibros' stamp: 'db 11/26/2020 20:47:07'!
TestCase subclass: #UserInterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!UserInterfaceTest methodsFor: 'nil' stamp: 'db 11/26/2020 20:47:04' overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/26/2020 20:49:36'!
validate: anUser password: aPassword
	^false! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/26/2020 20:49:42' prior: 50885464!
test01CannotCreateACartWithAnInvalidUserID

	! !

!classDefinition: #UserInterface category: 'TusLibros' stamp: 'db 11/26/2020 20:51:27'!
Object subclass: #UserInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/26/2020 20:51:20' prior: 50885487!
test01CannotCreateACartWithAnInvalidUserID

	| ui |
	ui := UserInterface with: self
	
	

	! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/26/2020 20:51:35' prior: 50885499!
test01CannotCreateACartWithAnInvalidUserID

	| ui |
	ui := UserInterface with: self
	
	
	

	! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/26/2020 20:56:23' prior: 50885506!
test01CannotCreateACartWithAnInvalidUserID

	| ui clientID password |
	ui := UserInterface with: self.
	
	self 
	should: [ ui createCart clientId: clientID password: password ] raise: Error withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]
	

	"| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]"! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'db 11/26/2020 20:57:28'!
defaultClientID
	^1
	
	! !
!StoreTestObjectsFactory methodsFor: 'client' stamp: 'db 11/26/2020 20:58:14'!
defaultPassword
	^'miviejamula'
	
	! !

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/26/2020 20:58:48'!
ERROR!

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/26/2020 20:58:48'!
ERROR!
!UserInterface class methodsFor: 'nil' stamp: 'db 11/26/2020 20:59:11'!
with: anAuthencator! !
!UserInterface class methodsFor: 'as yet unclassified' stamp: 'db 11/26/2020 20:59:17' prior: 50885555!
with: anAuthenticator! !
!UserInterface class methodsFor: 'as yet unclassified' stamp: 'db 11/26/2020 20:59:19' prior: 50885559!
with: anAuthenticator
	! !
!UserInterface class methodsFor: 'as yet unclassified' stamp: 'db 11/26/2020 21:01:07' prior: 50885564!
with: anAuthenticator
	"assertions"
	
	^self new initalizeWith: anAuthenticator ! !

!classDefinition: #UserInterface category: 'TusLibros' stamp: 'db 11/26/2020 21:01:36'!
Object subclass: #UserInterface
	instanceVariableNames: 'authenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!UserInterface methodsFor: 'nil' stamp: 'db 11/26/2020 21:01:35'!
initalizeWith: anAuthenticator

	authenticator := anAuthenticator 
! !

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/26/2020 21:01:44'!
ERROR!

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/26/2020 21:01:44'!
ERROR!
!UserInterface class methodsFor: 'accessing' stamp: 'db 11/26/2020 21:01:56'!
invalidClientErrorMessage
	self shouldBeImplemented.! !
!UserInterface class methodsFor: 'accessing' stamp: 'db 11/26/2020 21:02:37' prior: 50885593!
invalidClientErrorMessage
	^'Invalid client ID or Password!!!!!!'! !
!UserInterface class methodsFor: 'accessing' stamp: 'db 11/26/2020 21:03:00'!
signalInvalidClient
	self error: self invalidClientErrorMessage ! !

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/26/2020 21:03:07'!
FAILURE!

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/26/2020 21:03:07'!
FAILURE!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/26/2020 21:03:46' prior: 50885513!
test01CannotCreateACartWithAnInvalidUserID

	| ui clientID password |
	ui := UserInterface with: self.
	
	self 
	should: [ ui createCart clientId: clientID password: password ] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]
	

	"| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]"! !

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/26/2020 21:03:54'!
ERROR!
!UserInterface methodsFor: 'create' stamp: 'db 11/26/2020 21:04:12'!
createCart
	self shouldBeImplemented.! !
!UserInterface methodsFor: 'create' stamp: 'db 11/26/2020 21:04:25' prior: 50885647!
createCart
	^self class signalInvalidClient ! !

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/26/2020 21:04:26'!
PASSED!

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/26/2020 21:04:31'!
PASSED!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/26/2020 21:04:54'!
test02CannotCreateACartWithAnInvalidPassword

	| ui clientID password |
	ui := UserInterface with: self.
	
	self 
	should: [ ui createCart clientId: clientID password: password ] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]
	

	"| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]"! !

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/26/2020 21:05:09'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/26/2020 21:05:09'!
PASSED!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/26/2020 21:06:27' prior: 50885663!
test02CannotCreateACartWithAnInvalidPassword

	| ui clientID password |
	ui := UserInterface with: self.
	
	self 
	should: [ ui createCart clientId: clientID password: password ] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]
	! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/26/2020 21:07:10'!
test03CreateAnEmptyCart

	| ui clientID password |
	ui := UserInterface with: self.
	
	self 
	should: [ ui createCart clientId: clientID password: password ] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]
	! !

!methodRemoval: UserInterfaceTest #test03CreateAnEmptyCart stamp: 'db 11/26/2020 21:08:27'!
test03CreateAnEmptyCart

	| ui clientID password |
	ui := UserInterface with: self.
	
	self 
	should: [ ui createCart clientId: clientID password: password ] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]
	!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/26/2020 21:11:29' prior: 50885698!
test02CannotCreateACartWithAnInvalidPassword

	| ui clientID password cartID items |
	ui := UserInterface with: self.

	cartID := ui createCart clientId: clientID password: password.
	
	items := ui listCart for: cartID.
	
	self assert: 0 equals: items size.! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/26/2020 21:12:09'!
test03CannotCreateACartWithAnInvalidPassword

	| ui clientID password cartID items |
	ui := UserInterface with: self.

	cartID := ui createCart clientId: clientID password: password.
	
	items := ui listCart for: cartID.
	
	self assert: 0 equals: items size.! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/26/2020 21:06:27' prior: 50885738!
test02CannotCreateACartWithAnInvalidPassword

	| ui clientID password |
	ui := UserInterface with: self.
	
	self 
	should: [ ui createCart clientId: clientID password: password ] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]
	! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/26/2020 21:12:50'!
test03CreateAnEmptyCart

	| ui clientID password cartID items |
	ui := UserInterface with: self.

	cartID := ui createCart clientId: clientID password: password.
	
	items := ui listCart for: cartID.
	
	self assert: 0 equals: items size.! !

!methodRemoval: UserInterfaceTest #test03CannotCreateACartWithAnInvalidPassword stamp: 'db 11/26/2020 21:12:50'!
test03CannotCreateACartWithAnInvalidPassword

	| ui clientID password cartID items |
	ui := UserInterface with: self.

	cartID := ui createCart clientId: clientID password: password.
	
	items := ui listCart for: cartID.
	
	self assert: 0 equals: items size.!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/26/2020 21:13:40'!
test03NewCartsAreCreatedEmpty

	| ui clientID password cartID items |
	ui := UserInterface with: self.

	cartID := ui createCart clientId: clientID password: password.
	
	items := ui listCart for: cartID.
	
	self assert: 0 equals: items size.! !

!methodRemoval: UserInterfaceTest #test03CreateAnEmptyCart stamp: 'db 11/26/2020 21:13:40'!
test03CreateAnEmptyCart

	| ui clientID password cartID items |
	ui := UserInterface with: self.

	cartID := ui createCart clientId: clientID password: password.
	
	items := ui listCart for: cartID.
	
	self assert: 0 equals: items size.!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/26/2020 21:13:48'!
ERROR!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/26/2020 21:13:48'!
ERROR!

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/26/2020 21:13:55'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/26/2020 21:13:55'!
PASSED!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/26/2020 21:13:55'!
ERROR!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/26/2020 21:13:55'!
ERROR!
!UserInterface methodsFor: 'create' stamp: 'db 11/26/2020 21:15:40'!
createCart: clientID
	^self class signalInvalidClient ! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/26/2020 21:15:40' prior: 50885761!
test02CannotCreateACartWithAnInvalidPassword

	| ui clientID password |
	ui := UserInterface with: self.
	
	self 
	should: [ ui createCart: aClientID clientId: clientID password: password ] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]
	! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/26/2020 21:15:40' prior: 50885797!
test03NewCartsAreCreatedEmpty

	| ui clientID password cartID items |
	ui := UserInterface with: self.

	cartID := ui createCart: aClientID clientId: clientID password: password.
	
	items := ui listCart for: cartID.
	
	self assert: 0 equals: items size.! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/26/2020 21:15:40' prior: 50885616!
test01CannotCreateACartWithAnInvalidUserID

	| ui clientID password |
	ui := UserInterface with: self.
	
	self 
	should: [ ui createCart: aClientID clientId: clientID password: password ] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]
	

	"| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]"! !

!methodRemoval: UserInterface #createCart stamp: 'db 11/26/2020 21:15:40'!
createCart
	^self class signalInvalidClient !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/26/2020 21:29:23' prior: 50885870!
test01CannotCreateACartWithAnInvalidUserID

	| ui clientID password |
	ui := UserInterface with: self.
	
	self 
	should: [ | aClientID | ui createCart: aClientID clientId: clientID password: password ] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]
	

	"| salesBook |
	
	webclient
	
	uuid 
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]"! !

----SNAPSHOT----(26 November 2020 21:29:36) CuisUniversity-4384.image priorSource: 17699488!

----QUIT----(26 November 2020 21:29:40) CuisUniversity-4384.image priorSource: 17736958!

----STARTUP---- (29 November 2020 11:16:18) as /Users/dbenitez/uba/2c2020-IS1/IS1-Trabajos/20-TusLibros/macos64-TusLibros/CuisUniversity-4384.image!


!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 11:34:02'!
ERROR!

!testRun: #UserInterfaceTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/29/2020 11:34:02'!
ERROR!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 11:34:02'!
ERROR!
!UserInterface methodsFor: 'create' stamp: 'db 11/29/2020 11:36:59'!
createCart: clientID aPassword: password 
	^self class signalInvalidClient ! !

!methodRemoval: UserInterface #createCart: stamp: 'db 11/29/2020 11:36:59'!
createCart: clientID
	^self class signalInvalidClient !
!UserInterface methodsFor: 'create' stamp: 'db 11/29/2020 11:37:50'!
createCartFor: aClientID withPassword: aPassword 
	^self class signalInvalidClient ! !

!methodRemoval: UserInterface #createCart:aPassword: stamp: 'db 11/29/2020 11:37:54'!
createCart: clientID aPassword: password 
	^self class signalInvalidClient !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 11:39:56' prior: 50885902!
test01CannotCreateACartWithAnInvalidUserID

	| ui aClientID aPassword |
	ui := UserInterface with: self.
	
	aClientID := 'qwerty'.
	aPassword := '123oweE'.
	
	self 
	should: [ui createCartFor: aClientID withPassword: aPassword] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]
	

	"| salesBook |
	
	webclient
	
	uuid 
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]"! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 11:40:10' prior: 50885843!
test02CannotCreateACartWithAnInvalidPassword

	| ui clientID password aClientID aPassword |
	ui := UserInterface with: self.
	aClientID := 'qwerty'.
	aPassword := '123oweE'.
	
	self 
	should: [ ui createCart: aClientID clientId: clientID password: password ] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]
	! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 11:40:42' prior: 50886002!
test02CannotCreateACartWithAnInvalidPassword

	| ui aClientID aPassword |
	ui := UserInterface with: self.
	aClientID := 'qwerty'.
	aPassword := '123oweE'.
	
	self 
	should: [ ui createCartFor: aClientID withPassword: aPassword ] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]
	! !

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 11:41:00'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/29/2020 11:41:00'!
PASSED!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 11:41:00'!
ERROR!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 11:41:00'!
ERROR!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 11:41:31' prior: 50885858!
test03NewCartsAreCreatedEmpty

	| ui clientID password cartID items aClientID aPassword |
	ui := UserInterface with: self.
	aClientID := 'qwerty'.
	aPassword := '123oweE'.

	cartID := ui createCart: aClientID clientId: clientID password: password.
	
	items := ui listCart for: cartID.
	
	self assert: 0 equals: items size.! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 11:42:06' prior: 50886048!
test03NewCartsAreCreatedEmpty

	| ui password cartID items aClientID aPassword |
	ui := UserInterface with: self.
	aClientID := 'qwerty'.
	aPassword := '123oweE'.

	cartID := ui createCartFor: aClientID withPassword: aPassword.
	
	items := ui listCart for: cartID.
	
	self assert: 0 equals: items size.! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 11:42:17' prior: 50886062!
test03NewCartsAreCreatedEmpty

	| ui cartID items aClientID aPassword |
	ui := UserInterface with: self.
	aClientID := 'qwerty'.
	aPassword := '123oweE'.

	cartID := ui createCartFor: aClientID withPassword: aPassword.
	
	items := ui listCart for: cartID.
	
	self assert: 0 equals: items size.! !

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 11:42:24'!
ERROR!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 11:42:24'!
ERROR!

!classDefinition: #UserInterfaceTest category: 'TusLibros' stamp: 'db 11/29/2020 11:44:30'!
TestCase subclass: #UserInterfaceTest
	instanceVariableNames: 'testObjectsFactory validUsers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 11:44:28' prior: 50885477 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	
	validUsers := Dictionary new.
	! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 11:44:57' prior: 50886103 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	
	validUsers := Dictionary new.
	validUsers at: '' put: ''! !

!classDefinition: #UserInterfaceTest category: 'TusLibros' stamp: 'db 11/29/2020 11:45:59'!
TestCase subclass: #UserInterfaceTest
	instanceVariableNames: 'testObjectsFactory validUsers aValidClientID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #UserInterfaceTest category: 'TusLibros' stamp: 'db 11/29/2020 11:46:00'!
TestCase subclass: #UserInterfaceTest
	instanceVariableNames: 'testObjectsFactory validUsers aValidClientID aValidPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 11:45:57' prior: 50886110 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	
	validUsers := Dictionary new.
	

	aValidClientID := 'qwerty'.
	aValidPassword := '123oweE'.
	
	! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 11:46:18' prior: 50886136 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	
	validUsers := Dictionary new.
	

	aValidClientID := 'qwerty'.
	aValidPassword := '123oweE'.
	
	validUsers at: aValidClientID put: aValidPassword.
	
	! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 11:46:48' prior: 50885482!
validate: anUser password: aPassword
	^validUsers at: anUser = aPassword ! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 11:47:08' prior: 50886145 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	
	validUsers := Dictionary new.

	aValidClientID := 'qwerty'.
	aValidPassword := '123oweE'.
	
	validUsers at: aValidClientID put: aValidPassword.
	
	! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 11:47:14' prior: 50885972!
test01CannotCreateACartWithAnInvalidUserID

	| ui aClientID aPassword |
	ui := UserInterface with: self.
	
	aClientID := 'qwerty3'.
	aPassword := '123oweE'.
	
	self 
	should: [ui createCartFor: aClientID withPassword: aPassword] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]
	

	"| salesBook |
	
	webclient
	
	uuid 
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]"! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 11:47:25' prior: 50886019!
test02CannotCreateACartWithAnInvalidPassword

	| ui aClientID aPassword |
	ui := UserInterface with: self.
	aClientID := 'qwerty'.
	aPassword := '123owrE'.
	
	self 
	should: [ ui createCartFor: aClientID withPassword: aPassword ] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]
	! !

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 11:47:37'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/29/2020 11:47:37'!
PASSED!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 11:47:37'!
ERROR!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 11:47:37'!
ERROR!
!UserInterface methodsFor: 'create' stamp: 'db 11/29/2020 11:51:04' prior: 50885960!
createCartFor: aClientID withPassword: aPassword 

	(authenticator validate: aClientID password: aPassword) ifTrue: [^self class signalInvalidClient ]
	
	! !
!UserInterface methodsFor: 'create' stamp: 'db 11/29/2020 11:51:17' prior: 50886231!
createCartFor: aClientID withPassword: aPassword 

	(authenticator validate: aClientID password: aPassword) ifFalse: [^self class signalInvalidClient ]
	
	! !

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 11:51:21'!
ERROR!

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 11:52:21'!
FAILURE!

!testRun: #UserInterfaceTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/29/2020 11:52:21'!
FAILURE!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 11:52:21'!
ERROR!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 11:52:27'!
ERROR!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 11:53:00' prior: 50886155!
validate: anUser password: aPassword
	^(validUsers at: anUser) = aPassword ! !

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 11:53:08'!
ERROR!
!UserInterface methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 11:53:20'!
listCart
	self shouldBeImplemented.! !
!UserInterface methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 11:53:30' prior: 50886273!
listCart
	^OrderedCollection new.! !

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 11:53:32'!
ERROR!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 11:53:57' prior: 50886075!
test03NewCartsAreCreatedEmpty

	| ui cartID items aClientID aPassword |
	ui := UserInterface with: self.
	aClientID := 'qwerty'.
	aPassword := '123oweE'.

	cartID := ui createCartFor: aClientID withPassword: aPassword.
	
	items := ui listCart: cartID.
	
	self assert: 0 equals: items size.! !

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 11:54:00'!
ERROR!
!UserInterface methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 11:54:08'!
listCart: aUserInterface 
	self shouldBeImplemented.! !
!UserInterface methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 11:54:24' prior: 50886301!
listCart: aCartID 
	^OrderedCollection new.! !

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 11:54:26'!
PASSED!

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 11:54:36'!
FAILURE!

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 11:54:49'!
FAILURE!

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 11:54:57'!
FAILURE!

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 11:56:03'!
FAILURE!

!testRun: #UserInterfaceTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/29/2020 11:56:03'!
PASSED!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 11:56:03'!
PASSED!

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 11:56:03'!
FAILURE!

!methodRemoval: UserInterface #listCart stamp: 'db 11/29/2020 11:56:45'!
listCart
	^OrderedCollection new.!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 11:58:30' prior: 50886264!
validate: anUser password: aPassword

	|  validPassword |

	[validPassword := validUsers at: anUser] on: Error do: [:anError | ^false].
	
	^validPassword = aPassword ! !

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 11:58:38'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/29/2020 11:58:38'!
PASSED!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 11:58:38'!
PASSED!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 11:59:14' prior: 50886172!
test01CannotCreateACartWithAnInvalidUserID

	| ui aClientID aPassword |
	ui := UserInterface with: self.
	
	aClientID := 'qwerty3'.
	aPassword := '123oweE'.
	
	self 
	should: [ui createCartFor: aClientID withPassword: aPassword] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]! !

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 11:59:24'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/29/2020 11:59:24'!
PASSED!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 11:59:24'!
PASSED!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 12:01:26'!
__test04AddToCart

	| ui cartID items aClientID aPassword |
	ui := UserInterface with: self.
	aClientID := 'qwerty'.
	aPassword := '123oweE'.

	cartID := ui createCartFor: aClientID withPassword: aPassword.
	
	items := ui listCart: cartID.
	
	self assert: 0 equals: items size.
	
	"
		Recurso: /addToCart Par�metros:
			cartId: Id del carrito creado con /createCart
			bookIsbn: ISBN del libro que se desea agregar. 
			Debe ser un ISBN de la editorial bookQuantity: Cantidad de libros que se desean agregar. Debe ser >= 1.
		Output:
	"! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 12:05:24'!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

	| ui cartID items aClientID aPassword |
	ui := UserInterface with: self.
	aClientID := 'qwerty'.
	aPassword := '123oweE'.

	cartID := ui createCartFor: aClientID withPassword: aPassword.
	
	items := ui listCart: cartID.
	
	self assert: 0 equals: items size.
	
	"
	test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore.
	self deny: cart isEmpty 
	
		Recurso: /addToCart Par�metros:
			cartId: Id del carrito creado con /createCart
			bookIsbn: ISBN del libro que se desea agregar. 
			Debe ser un ISBN de la editorial bookQuantity: Cantidad de libros que se desean agregar. Debe ser >= 1.
		Output:
	"! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 12:07:36' prior: 50886408!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

	| ui cartID items aClientID aPassword |
	ui := UserInterface with: self.
	aClientID := 'qwerty'.
	aPassword := '123oweE'.

	cartID := ui createCartFor: aClientID withPassword: aPassword.
	
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore. 
	
	items := ui listCart: cartID.
	
	self assert: 0 equals: items size.
	
	"
	test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore.
	self deny: cart isEmpty 
	
		Recurso: /addToCart Par�metros:
			cartId: Id del carrito creado con /createCart
			bookIsbn: ISBN del libro que se desea agregar. 
			Debe ser un ISBN de la editorial bookQuantity: Cantidad de libros que se desean agregar. Debe ser >= 1.
		Output:
	"! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 12:08:57' prior: 50886435!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

	| ui cartID items aClientID aPassword |
	ui := UserInterface with: self.
	aClientID := 'qwerty'.
	aPassword := '123oweE'.

	cartID := ui createCartFor: aClientID withPassword: aPassword.
	
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore. 
	
	items := ui listCart: cartID.
	
	self assert: 1 equals: items size.
	self assert: testObjectsFactory itemSellByTheStore equals: (items at: 1).
	
	"
	test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore.
	self deny: cart isEmpty 
	
		Recurso: /addToCart Par�metros:
			cartId: Id del carrito creado con /createCart
			bookIsbn: ISBN del libro que se desea agregar. 
			Debe ser un ISBN de la editorial bookQuantity: Cantidad de libros que se desean agregar. Debe ser >= 1.
		Output:
	"! !

----QUIT----(29 November 2020 12:10:39) CuisUniversity-4384.image priorSource: 17737052!

----STARTUP---- (29 November 2020 12:10:47) as /Users/dbenitez/uba/2c2020-IS1/IS1-Trabajos/20-TusLibros/macos64-TusLibros/CuisUniversity-4384.image!


!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 12:11:18'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/29/2020 12:11:18'!
PASSED!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 12:11:18'!
PASSED!

!testRun: #UserInterfaceTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 11/29/2020 12:11:18'!
ERROR!

!testRun: #UserInterfaceTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 11/29/2020 12:11:18'!
ERROR!
!UserInterface methodsFor: 'operations' stamp: 'db 11/29/2020 12:11:32'!
addToCart: aUserInterface item: aString 
	self shouldBeImplemented.! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/29/2020 12:11:53' prior: 50886522!
addToCart: aCartID item: anItem

	 
	self shouldBeImplemented.! !

!classDefinition: #UserInterface category: 'TusLibros' stamp: 'db 11/29/2020 12:13:29'!
Object subclass: #UserInterface
	instanceVariableNames: 'authenticator carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!UserInterface methodsFor: 'operations' stamp: 'db 11/29/2020 12:13:23' prior: 50886527!
addToCart: aCartID item: anItem

	| cart |
	cart := carts at: aCartID! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/29/2020 12:13:55' prior: 50886540!
addToCart: aCartID item: anItem

	| cart |
	cart := carts at: aCartID.
	cart add: anItem.! !

!testRun: #UserInterfaceTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 11/29/2020 12:13:56'!
ERROR!
!UserInterface methodsFor: 'initialization' stamp: 'db 11/29/2020 12:14:35' prior: 50885581!
initalizeWith: anAuthenticator

	authenticator := anAuthenticator.
	carts := Dictionary new.
! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/29/2020 12:15:05' prior: 50886239!
createCartFor: aClientID withPassword: aPassword 

	(authenticator validate: aClientID password: aPassword) ifFalse: [^self class signalInvalidClient ]
	
	
	! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/29/2020 12:15:51' prior: 50886562!
createCartFor: aClientID withPassword: aPassword 

	(authenticator validate: aClientID password: aPassword) ifFalse: [^self class signalInvalidClient ].
	carts at: 1 put: Cart new.
	
	
	! !

!classDefinition: #UserInterface category: 'TusLibros' stamp: 'db 11/29/2020 12:17:55'!
Object subclass: #UserInterface
	instanceVariableNames: 'authenticator carts catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!UserInterface methodsFor: 'initialization' stamp: 'db 11/29/2020 12:17:52'!
initalizeWith: anAuthenticator catalog: aCatalog

	authenticator := anAuthenticator.
	catalog := aCatalog.
	carts := Dictionary new.
! !

!methodRemoval: UserInterface #initalizeWith: stamp: 'db 11/29/2020 12:18:01'!
initalizeWith: anAuthenticator

	authenticator := anAuthenticator.
	carts := Dictionary new.
!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 12:18:58' prior: 50886362!
test01CannotCreateACartWithAnInvalidUserID

	| ui aClientID aPassword |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog.
	
	aClientID := 'qwerty3'.
	aPassword := '123oweE'.
	
	self 
	should: [ui createCartFor: aClientID withPassword: aPassword] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 12:19:08' prior: 50886202!
test02CannotCreateACartWithAnInvalidPassword

	| ui aClientID aPassword |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog.
	aClientID := 'qwerty'.
	aPassword := '123owrE'.
	
	self 
	should: [ ui createCartFor: aClientID withPassword: aPassword ] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]
	! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 12:19:33' prior: 50886286!
test03NewCartsAreCreatedEmpty

	| ui cartID items aClientID aPassword |
	ui := UserInterface with: self.
	aClientID := 'qwerty'.
	aPassword := '123oweE'.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultClientID.
	
	items := ui listCart: cartID.
	
	self assert: 0 equals: items size.! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 12:19:51' prior: 50886633!
test03NewCartsAreCreatedEmpty

	| ui cartID items |
	ui := UserInterface with: self.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultClientID.
	
	items := ui listCart: cartID.
	
	self assert: 0 equals: items size.! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 12:20:33' prior: 50886465!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

	| ui cartID items |
	ui := UserInterface with: self.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultClientID.

	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore. 
	
	items := ui listCart: cartID.
	
	self assert: 1 equals: items size.
	self assert: testObjectsFactory itemSellByTheStore equals: (items at: 1).
	
	"
	test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore.
	self deny: cart isEmpty 
	
		Recurso: /addToCart Par�metros:
			cartId: Id del carrito creado con /createCart
			bookIsbn: ISBN del libro que se desea agregar. 
			Debe ser un ISBN de la editorial bookQuantity: Cantidad de libros que se desean agregar. Debe ser >= 1.
		Output:
	"! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/29/2020 12:21:11' prior: 50886570!
createCartFor: aClientID withPassword: aPassword 

	(authenticator validate: aClientID password: aPassword) ifFalse: [^self class signalInvalidClient ].
	carts at: 1 put: (Cart acceptingItemsOf: catalog).
	^1
	
	
	! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/29/2020 12:21:51' prior: 50886306!
listCart: aCartID 
	(carts at: aCartID) ! !
!Cart methodsFor: 'total' stamp: 'db 11/29/2020 12:23:35'!
items

	^ items! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/29/2020 12:23:57' prior: 50886700!
listCart: aCartID 
	^(carts at: aCartID) items! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 12:26:49' prior: 50886659!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

	| ui cartID items |
	ui := UserInterface with: self.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultClientID.

	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1. 
	
	items := ui listCart: cartID.
	
	self assert: 1 equals: items size.
	self assert: testObjectsFactory itemSellByTheStore equals: (items at: 1).
	
	"
	test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore.
	self deny: cart isEmpty 
	
	cartId: Id del carrito creado con /createCart
	bookIsbn: ISBN del libro que se desea agregar. Debe ser un ISBN de la editorial 
	bookQuantity: Cantidad de libros que se desean agregar. Debe ser >= 1.
Output:
	
		Recurso: /addToCart Par�metros:
			cartId: Id del carrito creado con /createCart
			bookIsbn: ISBN del libro que se desea agregar. 
			Debe ser un ISBN de la editorial bookQuantity: Cantidad de libros que se desean agregar. Debe ser >= 1.
		Output:
	"! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/29/2020 12:27:26'!
addToCart: aCartID item: anItem aQuantity: quantity 

	| cart |
	cart := carts at: aCartID.
	cart add: anItem.! !

!methodRemoval: UserInterface #addToCart:item: stamp: 'db 11/29/2020 12:27:26'!
addToCart: aCartID item: anItem

	| cart |
	cart := carts at: aCartID.
	cart add: anItem.!
!UserInterface methodsFor: 'operations' stamp: 'db 11/29/2020 12:27:46'!
addToCart: aCartID item: anItem quantity: aQuantity 

	| cart |
	cart := carts at: aCartID.
	cart add: anItem.! !

!methodRemoval: UserInterface #addToCart:item:aQuantity: stamp: 'db 11/29/2020 12:27:53'!
addToCart: aCartID item: anItem aQuantity: quantity 

	| cart |
	cart := carts at: aCartID.
	cart add: anItem.!
!UserInterface methodsFor: 'operations' stamp: 'db 11/29/2020 12:28:33' prior: 50886762!
addToCart: aCartID item: anItem quantity: aQuantity 

	| cart |
	cart := carts at: aCartID.
	cart add: aQuantity of: anItem.
	! !
!Cart methodsFor: 'initialization' stamp: 'db 11/29/2020 12:29:03' prior: 50884927!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !
!Cart methodsFor: 'initialization' stamp: 'db 11/29/2020 12:29:45' prior: 50886782!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 12:29:52'!
ERROR!

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 12:29:52'!
ERROR!
!UserInterface class methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 12:30:28'!
with: anAuthenticator catalog: catalog 
	"assertions"
	
	^self new initalizeWith: anAuthenticator ! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 12:30:28' prior: 50886713!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

	| ui cartID items |
	ui := UserInterface with: self catalog: catalog.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultClientID.

	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1. 
	
	items := ui listCart: cartID.
	
	self assert: 1 equals: items size.
	self assert: testObjectsFactory itemSellByTheStore equals: (items at: 1).
	
	"
	test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore.
	self deny: cart isEmpty 
	
	cartId: Id del carrito creado con /createCart
	bookIsbn: ISBN del libro que se desea agregar. Debe ser un ISBN de la editorial 
	bookQuantity: Cantidad de libros que se desean agregar. Debe ser >= 1.
Output:
	
		Recurso: /addToCart Par�metros:
			cartId: Id del carrito creado con /createCart
			bookIsbn: ISBN del libro que se desea agregar. 
			Debe ser un ISBN de la editorial bookQuantity: Cantidad de libros que se desean agregar. Debe ser >= 1.
		Output:
	"! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 12:30:28' prior: 50886647!
test03NewCartsAreCreatedEmpty

	| ui cartID items |
	ui := UserInterface with: self catalog: catalog.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultClientID.
	
	items := ui listCart: cartID.
	
	self assert: 0 equals: items size.! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 12:30:28' prior: 50886388!
__test04AddToCart

	| ui cartID items aClientID aPassword |
	ui := UserInterface with: self catalog: catalog.
	aClientID := 'qwerty'.
	aPassword := '123oweE'.

	cartID := ui createCartFor: aClientID withPassword: aPassword.
	
	items := ui listCart: cartID.
	
	self assert: 0 equals: items size.
	
	"
		Recurso: /addToCart Par�metros:
			cartId: Id del carrito creado con /createCart
			bookIsbn: ISBN del libro que se desea agregar. 
			Debe ser un ISBN de la editorial bookQuantity: Cantidad de libros que se desean agregar. Debe ser >= 1.
		Output:
	"! !

!methodRemoval: UserInterface class #with: stamp: 'db 11/29/2020 12:30:28'!
with: anAuthenticator
	"assertions"
	
	^self new initalizeWith: anAuthenticator !
!UserInterface class methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 12:30:53' prior: 50886801!
with: anAuthenticator catalog: aCatalog 
	"assertions"
	
	^self new initalizeWith: anAuthenticator catalog: aCatalog! !

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 12:31:08'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/29/2020 12:31:13'!
PASSED!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 12:31:39' prior: 50886847!
test03NewCartsAreCreatedEmpty

	| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultClientID.
	
	items := ui listCart: cartID.
	
	self assert: 0 equals: items size.! !

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 12:31:43'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/29/2020 12:31:43'!
PASSED!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 12:31:43'!
ERROR!

!testRun: #UserInterfaceTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 11/29/2020 12:31:43'!
ERROR!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 12:31:49'!
ERROR!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 12:31:49'!
ERROR!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 12:32:38' prior: 50886162 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	
	validUsers := Dictionary new.

	validUsers at: testObjectsFactory defaultClientID put: testObjectsFactory defaultPassword .
	
	! !

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 12:32:43'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/29/2020 12:32:43'!
PASSED!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 12:32:43'!
ERROR!

!testRun: #UserInterfaceTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 11/29/2020 12:32:43'!
ERROR!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 12:33:53' prior: 50886901!
test03NewCartsAreCreatedEmpty

	| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .
	
	items := ui listCart: cartID.
	
	self assert: 0 equals: items size.! !

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 12:33:55'!
PASSED!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 12:33:59'!
PASSED!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 12:34:25' prior: 50886808!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

	| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog .

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .

	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1. 
	
	items := ui listCart: cartID.
	
	self assert: 1 equals: items size.
	self assert: testObjectsFactory itemSellByTheStore equals: (items at: 1).
	
	"
	test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore.
	self deny: cart isEmpty 
	
	cartId: Id del carrito creado con /createCart
	bookIsbn: ISBN del libro que se desea agregar. Debe ser un ISBN de la editorial 
	bookQuantity: Cantidad de libros que se desean agregar. Debe ser >= 1.
Output:
	
		Recurso: /addToCart Par�metros:
			cartId: Id del carrito creado con /createCart
			bookIsbn: ISBN del libro que se desea agregar. 
			Debe ser un ISBN de la editorial bookQuantity: Cantidad de libros que se desean agregar. Debe ser >= 1.
		Output:
	"! !

!testRun: #UserInterfaceTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 11/29/2020 12:34:29'!
PASSED!

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 12:34:33'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/29/2020 12:34:33'!
PASSED!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 12:34:33'!
PASSED!

!testRun: #UserInterfaceTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 11/29/2020 12:34:33'!
PASSED!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 12:34:43' prior: 50886980!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

	| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog .

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .

	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1. 
	
	items := ui listCart: cartID.
	
	self assert: 1 equals: items size.
	self assert: testObjectsFactory itemSellByTheStore equals: (items at: 1).! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 12:36:56'!
test05AfterRequestingToAddMoreThanOneItemTheCartDisplaysTheCorrectAmountOfItems

	| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog .

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .

	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1. 
	
	items := ui listCart: cartID.
	
	self assert: 1 equals: items size.
	self assert: testObjectsFactory itemSellByTheStore equals: (items at: 1).! !

!methodRemoval: UserInterfaceTest #__test04AddToCart stamp: 'db 11/29/2020 12:37:01'!
__test04AddToCart

	| ui cartID items aClientID aPassword |
	ui := UserInterface with: self catalog: catalog.
	aClientID := 'qwerty'.
	aPassword := '123oweE'.

	cartID := ui createCartFor: aClientID withPassword: aPassword.
	
	items := ui listCart: cartID.
	
	self assert: 0 equals: items size.
	
	"
		Recurso: /addToCart Par�metros:
			cartId: Id del carrito creado con /createCart
			bookIsbn: ISBN del libro que se desea agregar. 
			Debe ser un ISBN de la editorial bookQuantity: Cantidad de libros que se desean agregar. Debe ser >= 1.
		Output:
	"!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 12:39:43' prior: 50887057!
test05AfterRequestingToAddMoreThanOneItemTheCartDisplaysTheCorrectAmountOfItems

	| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog .

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .

	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 3. 
	
	items := ui listCart: cartID.
	
	self assert: 3 equals: items size.
	self assert: testObjectsFactory itemSellByTheStore equals: (items at: 1).! !

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 12:39:46'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/29/2020 12:39:46'!
PASSED!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 12:39:46'!
PASSED!

!testRun: #UserInterfaceTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 11/29/2020 12:39:46'!
PASSED!

!testRun: #UserInterfaceTest #test05AfterRequestingToAddMoreThanOneItemTheCartDisplaysTheCorrectAmountOfItems stamp: 'db 11/29/2020 12:39:46'!
PASSED!

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 12:47:48'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/29/2020 12:47:48'!
PASSED!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 12:47:48'!
PASSED!

!testRun: #UserInterfaceTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 11/29/2020 12:47:48'!
PASSED!

!testRun: #UserInterfaceTest #test05AfterRequestingToAddMoreThanOneItemTheCartDisplaysTheCorrectAmountOfItems stamp: 'db 11/29/2020 12:47:48'!
PASSED!
!UserInterface methodsFor: 'operations' stamp: 'db 11/29/2020 12:49:32' prior: 50886690!
createCartFor: aClientID withPassword: aPassword 

	(authenticator validate: aClientID password: aPassword) ifFalse: [^self class signalInvalidClient ].
	" Duda: un cliente puede tener m�s de un carrito? "
	carts at: 1 put: (Cart acceptingItemsOf: catalog).
	^1
	
	
	! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 12:52:29'!
test06
"Recurso: /checkOutCart Par�metros:
	cartId: Id del carrito creado con /createCart
	ccn: N�mero de tarjeta de credito
	cced: Fecha de expiraci�n con 2 digitos para el mes y 4 para el a�o cco: Nombre del due�o de la tarjeta.
Output:
	En caso de �xito: 0|TRANSACTION_ID
	En caso de error: 1|DESCRIPCION_DE_ERROR
"

! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 12:52:45' prior: 50887167!
test06
"Recurso: /checkOutCart Par�metros:
	cartId: Id del carrito creado con /createCart
	ccn: N�mero de tarjeta de credito
	cced: Fecha de expiraci�n con 2 digitos para el mes y 4 para el a�o cco: Nombre del due�o de la tarjeta.
Output:
	En caso de �xito: 0|TRANSACTION_ID
	En caso de error: 1|DESCRIPCION_DE_ERROR
"


	| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog .

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .

! !

----SNAPSHOT----(29 November 2020 12:52:52) CuisUniversity-4384.image priorSource: 17755049!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 12:54:19' prior: 50887181!
test06
"Recurso: /checkOutCart Par�metros:
	cartId: Id del carrito creado con /createCart
	ccn: N�mero de tarjeta de credito
	cced: Fecha de expiraci�n con 2 digitos para el mes y 4 para el a�o cco: Nombre del due�o de la tarjeta.
Output:
	En caso de �xito: 0|TRANSACTION_ID
	En caso de error: 1|DESCRIPCION_DE_ERROR
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
"


	| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog .

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .
	
	
	
! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 12:55:02' prior: 50887205!
test06
"Recurso: /checkOutCart Par�metros:
	cartId: Id del carrito creado con /createCart
	ccn: N�mero de tarjeta de credito
	cced: Fecha de expiraci�n con 2 digitos para el mes y 4 para el a�o cco: Nombre del due�o de la tarjeta.
Output:
	En caso de �xito: 0|TRANSACTION_ID
	En caso de error: 1|DESCRIPCION_DE_ERROR
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
		| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]
"


	| ui cartID items creditCard |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog .
	creditCard := testObjectsFactory notExpiredCreditCard.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .
	
	
	
! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 12:56:05' prior: 50887230!
test06
"Recurso: /checkOutCart Par�metros:
	cartId: Id del carrito creado con /createCart
	ccn: N�mero de tarjeta de credito
	cced: Fecha de expiraci�n con 2 digitos para el mes y 4 para el a�o cco: Nombre del due�o de la tarjeta.
Output:
	En caso de �xito: 0|TRANSACTION_ID
	En caso de error: 1|DESCRIPCION_DE_ERROR
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
		| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]
"


	| ui cartID creditCard |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog .
	creditCard := testObjectsFactory notExpiredCreditCard.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .
	
	ui checkout: cartID creditCardNumber creditCard 
	
	
! !

Object subclass: #UserInterface
	instanceVariableNames: 'authenticator carts catalog salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #UserInterface category: 'TusLibros' stamp: 'db 11/29/2020 13:02:59'!
Object subclass: #UserInterface
	instanceVariableNames: 'authenticator carts catalog salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:08:58' prior: 50887279!
test06
"Recurso: /checkOutCart Par�metros:
	cartId: Id del carrito creado con /createCart
	ccn: N�mero de tarjeta de credito
	cced: Fecha de expiraci�n con 2 digitos para el mes y 4 para el a�o 
	cco: Nombre del due�o de la tarjeta.
Output:
	En caso de �xito: 0|TRANSACTION_ID
	En caso de error: 1|DESCRIPCION_DE_ERROR
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
		| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]
"


	| ui cartID creditCard |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog .
	creditCard := testObjectsFactory notExpiredCreditCard.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .
	
	"cartId: Id del carrito creado con /createCart
	ccn: N�mero de tarjeta de credito
	cced: Fecha de expiraci�n con 2 digitos para el mes y 4 para el a�o 
	cco: Nombre del due�o de la tarjeta."
	
	"ui checkout: cartID creditCardNumber: '4564646464646' creditCardExpirationDate: '' CreditCardOwner: ''."
	
	
! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:25:08' prior: 50887343!
test06
"Recurso: /checkOutCart Par�metros:
	cartId: Id del carrito creado con /createCart
	ccn: N�mero de tarjeta de credito
	cced: Fecha de expiraci�n con 2 digitos para el mes y 4 para el a�o 
	cco: Nombre del due�o de la tarjeta.
Output:
	En caso de �xito: 0|TRANSACTION_ID
	En caso de error: 1|DESCRIPCION_DE_ERROR
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
		| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]
"


	| ui cartID creditCard |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog .
	creditCard := testObjectsFactory notExpiredCreditCard.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.
	
	
	
	"cartId: Id del carrito creado con /createCart
	ccn: N�mero de tarjeta de credito
	cced: Fecha de expiraci�n con 2 digitos para el mes y 4 para el a�o 
	cco: Nombre del due�o de la tarjeta."
	
	"ui checkout: cartID creditCardNumber: '4564646464646' creditCardExpirationDate: '' CreditCardOwner: ''."
	
	
! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:29:45' prior: 50887401!
test06
"Recurso: /checkOutCart Par�metros:
	cartId: Id del carrito creado con /createCart
	ccn: N�mero de tarjeta de credito
	cced: Fecha de expiraci�n con 2 digitos para el mes y 4 para el a�o 
	cco: Nombre del due�o de la tarjeta.
Output:
	En caso de �xito: 0|TRANSACTION_ID
	En caso de error: 1|DESCRIPCION_DE_ERROR
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
		| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]
"


	| ui cartID creditCard aMerchantProcessor transactionID |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: aMerchantProcessor.
	creditCard := testObjectsFactory notExpiredCreditCard.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.
	
	transactionID := ui checkout: cartID charging: creditCard.
	
	"self (assert ui salesBook first) equals: (ui listPurchases: testObjectsFactory defaultClientID password: testObjectsFactory defaultPassword)."
	
	
	
	"cartId: Id del carrito creado con /createCart
	ccn: N�mero de tarjeta de credito
	cced: Fecha de expiraci�n con 2 digitos para el mes y 4 para el a�o 
	cco: Nombre del due�o de la tarjeta."
	
	"ui checkout: cartID creditCardNumber: '4564646464646' creditCardExpirationDate: '' CreditCardOwner: ''."
	
	
! !

!classDefinition: #UserInterfaceTest category: 'TusLibros' stamp: 'db 11/29/2020 13:30:40'!
TestCase subclass: #UserInterfaceTest
	instanceVariableNames: 'testObjectsFactory validUsers aValidClientID aValidPassword debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:30:39'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:31:09' prior: 50886936 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	
	validUsers := Dictionary new.

	validUsers at: testObjectsFactory defaultClientID put: testObjectsFactory defaultPassword .
	
	debitBehavior := [ :anAmount :aCreditCard | ]
	
	! !
!UserInterface methodsFor: 'initialization' stamp: 'db 11/29/2020 13:35:03'!
initalizeWith: anAuthenticator catalog: aCatalog throught: throught 

	authenticator := anAuthenticator.
	catalog := aCatalog.
	carts := Dictionary new.
! !
!UserInterface class methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:35:03' prior: 50886886!
with: anAuthenticator catalog: aCatalog 
	"assertions"
	
	^self new initalizeWith: anAuthenticator catalog: aCatalog throught: throught! !

!methodRemoval: UserInterface #initalizeWith:catalog: stamp: 'db 11/29/2020 13:35:03'!
initalizeWith: anAuthenticator catalog: aCatalog

	authenticator := anAuthenticator.
	catalog := aCatalog.
	carts := Dictionary new.
!

!classDefinition: #UserInterface category: 'TusLibros' stamp: 'db 11/29/2020 13:35:29'!
Object subclass: #UserInterface
	instanceVariableNames: 'authenticator carts catalog salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!UserInterface methodsFor: 'initialization' stamp: 'db 11/29/2020 13:35:27' prior: 50887557!
initalizeWith: anAuthenticator catalog: aCatalog throught: aMerchantProcessor 

	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor .
	carts := Dictionary new.
! !
!UserInterface methodsFor: 'initialization' stamp: 'db 11/29/2020 13:35:39' prior: 50887589!
initalizeWith: anAuthenticator catalog: aCatalog throught: aMerchantProcessor 

	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	catalog := aCatalog.
	carts := Dictionary new.
! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:36:34' prior: 50886599!
test01CannotCreateACartWithAnInvalidUserID

	| ui aClientID aPassword |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self.
	
	aClientID := 'qwerty3'.
	aPassword := '123oweE'.
	
	self 
	should: [ui createCartFor: aClientID withPassword: aPassword] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]! !
!UserInterface class methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:37:05'!
with: anAuthenticator catalog: aCatalog throught: throught  
	"assertions"
	
	^self new initalizeWith: anAuthenticator catalog: aCatalog throught: throught! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:37:05' prior: 50886960!
test03NewCartsAreCreatedEmpty

	| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: throught.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .
	
	items := ui listCart: cartID.
	
	self assert: 0 equals: items size.! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:37:05' prior: 50887097!
test05AfterRequestingToAddMoreThanOneItemTheCartDisplaysTheCorrectAmountOfItems

	| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: throught .

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .

	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 3. 
	
	items := ui listCart: cartID.
	
	self assert: 3 equals: items size.
	self assert: testObjectsFactory itemSellByTheStore equals: (items at: 1).! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:37:05' prior: 50886616!
test02CannotCreateACartWithAnInvalidPassword

	| ui aClientID aPassword |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: throught.
	aClientID := 'qwerty'.
	aPassword := '123owrE'.
	
	self 
	should: [ ui createCartFor: aClientID withPassword: aPassword ] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]
	! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:37:05' prior: 50887038!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

	| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: throught .

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .

	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1. 
	
	items := ui listCart: cartID.
	
	self assert: 1 equals: items size.
	self assert: testObjectsFactory itemSellByTheStore equals: (items at: 1).! !

!methodRemoval: UserInterface class #with:catalog: stamp: 'db 11/29/2020 13:37:05'!
with: anAuthenticator catalog: aCatalog 
	"assertions"
	
	^self new initalizeWith: anAuthenticator catalog: aCatalog throught: throught!
!UserInterface class methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:37:18' prior: 50887626!
with: anAuthenticator catalog: aCatalog throught: aMerchantProcessor  
	"assertions"
	
	^self new initalizeWith: anAuthenticator catalog: aCatalog throught: aMerchantProcessor! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:37:33' prior: 50887670!
test02CannotCreateACartWithAnInvalidPassword

	| ui aClientID aPassword |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self.
	aClientID := 'qwerty'.
	aPassword := '123owrE'.
	
	self 
	should: [ ui createCartFor: aClientID withPassword: aPassword ] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]
	! !

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 13:37:37'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/29/2020 13:37:42'!
PASSED!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:37:46' prior: 50887635!
test03NewCartsAreCreatedEmpty

	| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .
	
	items := ui listCart: cartID.
	
	self assert: 0 equals: items size.! !

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 13:37:49'!
PASSED!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:37:54' prior: 50887688!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

	| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self .

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .

	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1. 
	
	items := ui listCart: cartID.
	
	self assert: 1 equals: items size.
	self assert: testObjectsFactory itemSellByTheStore equals: (items at: 1).! !

!testRun: #UserInterfaceTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 11/29/2020 13:37:57'!
PASSED!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:38:02' prior: 50887649!
test05AfterRequestingToAddMoreThanOneItemTheCartDisplaysTheCorrectAmountOfItems

	| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self .

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .

	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 3. 
	
	items := ui listCart: cartID.
	
	self assert: 3 equals: items size.
	self assert: testObjectsFactory itemSellByTheStore equals: (items at: 1).! !

!testRun: #UserInterfaceTest #test05AfterRequestingToAddMoreThanOneItemTheCartDisplaysTheCorrectAmountOfItems stamp: 'db 11/29/2020 13:38:05'!
PASSED!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:39:01' prior: 50887462!
test06
"Recurso: /checkOutCart Par�metros:
	cartId: Id del carrito creado con /createCart
	ccn: N�mero de tarjeta de credito
	cced: Fecha de expiraci�n con 2 digitos para el mes y 4 para el a�o 
	cco: Nombre del due�o de la tarjeta.
Output:
	En caso de �xito: 0|TRANSACTION_ID
	En caso de error: 1|DESCRIPCION_DE_ERROR
	
	
"
	| ui cartID creditCard transactionID |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self.
	creditCard := testObjectsFactory notExpiredCreditCard.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.
	
	transactionID := ui checkout: cartID charging: creditCard.
	
	
	"self (assert ui salesBook first) equals: (ui listPurchases: testObjectsFactory defaultClientID password: testObjectsFactory defaultPassword)."
	
	
	
	"cartId: Id del carrito creado con /createCart
	ccn: N�mero de tarjeta de credito
	cced: Fecha de expiraci�n con 2 digitos para el mes y 4 para el a�o 
	cco: Nombre del due�o de la tarjeta."
	
	"ui checkout: cartID creditCardNumber: '4564646464646' creditCardExpirationDate: '' CreditCardOwner: ''."
	
	
! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:44:08' prior: 50887815!
test06

	| ui cartID creditCard transactionID purchases |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self.
	creditCard := testObjectsFactory notExpiredCreditCard.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.
	
	transactionID := ui checkout: cartID charging: creditCard.
	
	purchases := ui listPurchases: testObjectsFactory defaultClientID password: testObjectsFactory defaultPassword.

! !

!testRun: #UserInterfaceTest #test06 stamp: 'db 11/29/2020 13:44:30'!
ERROR!

!testRun: #UserInterfaceTest #test06 stamp: 'db 11/29/2020 13:44:30'!
ERROR!
!UserInterface methodsFor: 'operations' stamp: 'db 11/29/2020 13:44:39'!
checkout: aSmallInteger charging: aCreditCard 
	self shouldBeImplemented.! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/29/2020 13:45:11' prior: 50887883!
checkout: aCartID charging: aCreditCard 
	
	| cart |
	cart := carts at: aCartID ! !

!classDefinition: #UserInterface category: 'TusLibros' stamp: 'db 11/29/2020 13:46:48'!
Object subclass: #UserInterface
	instanceVariableNames: 'authenticator carts catalog salesBook merchantProcessor cashier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!UserInterface methodsFor: 'operations' stamp: 'db 11/29/2020 13:47:53' prior: 50887889!
checkout: aCartID charging: aCreditCard 
	
	| cart today |
	cart := carts at: aCartID.
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard
		throught: merchantProcessor 
		on:  today
		registeringOn: salesBook.
		
	cashier
	
	
	! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/29/2020 13:48:29' prior: 50887904!
checkout: aCartID charging: aCreditCard 
	
	| cart today |
	cart := carts at: aCartID.
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard
		throught: merchantProcessor 
		on:  today
		registeringOn: salesBook.
		
	cashier checkOut.
	
	^1
	
	
	! !
!UserInterface class methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:49:42'!
with: anAuthenticator catalog: aCatalog throught: aMerchantProcessor today: today   
	"assertions"
	
	^self new initalizeWith: anAuthenticator catalog: aCatalog throught: aMerchantProcessor! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:49:42' prior: 50887724!
test02CannotCreateACartWithAnInvalidPassword

	| ui aClientID aPassword |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self today: today.
	aClientID := 'qwerty'.
	aPassword := '123owrE'.
	
	self 
	should: [ ui createCartFor: aClientID withPassword: aPassword ] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]
	! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:49:42' prior: 50887766!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

	| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self today: today .

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .

	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1. 
	
	items := ui listCart: cartID.
	
	self assert: 1 equals: items size.
	self assert: testObjectsFactory itemSellByTheStore equals: (items at: 1).! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:49:42' prior: 50887790!
test05AfterRequestingToAddMoreThanOneItemTheCartDisplaysTheCorrectAmountOfItems

	| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self today: today .

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .

	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 3. 
	
	items := ui listCart: cartID.
	
	self assert: 3 equals: items size.
	self assert: testObjectsFactory itemSellByTheStore equals: (items at: 1).! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:49:42' prior: 50887749!
test03NewCartsAreCreatedEmpty

	| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self today: today.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .
	
	items := ui listCart: cartID.
	
	self assert: 0 equals: items size.! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:49:42' prior: 50887857!
test06

	| ui cartID creditCard transactionID purchases |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self today: today.
	creditCard := testObjectsFactory notExpiredCreditCard.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.
	
	transactionID := ui checkout: cartID charging: creditCard.
	
	purchases := ui listPurchases: testObjectsFactory defaultClientID password: testObjectsFactory defaultPassword.

! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:49:42' prior: 50887609!
test01CannotCreateACartWithAnInvalidUserID

	| ui aClientID aPassword |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self today: today.
	
	aClientID := 'qwerty3'.
	aPassword := '123oweE'.
	
	self 
	should: [ui createCartFor: aClientID withPassword: aPassword] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]! !

!methodRemoval: UserInterface class #with:catalog:throught: stamp: 'db 11/29/2020 13:49:42'!
with: anAuthenticator catalog: aCatalog throught: aMerchantProcessor  
	"assertions"
	
	^self new initalizeWith: anAuthenticator catalog: aCatalog throught: aMerchantProcessor!
!UserInterface class methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:49:47' prior: 50887926!
with: anAuthenticator catalog: aCatalog throught: aMerchantProcessor today: today   
	"assertions"
	
	^self new initalizeWith: anAuthenticator catalog: aCatalog throught: aMerchantProcessor! !
!UserInterface class methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:50:45'!
with: anAuthenticator catalog: aCatalog throught: aMerchantProcessor on: today   
	"assertions"
	
	^self new initalizeWith: anAuthenticator catalog: aCatalog throught: aMerchantProcessor! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:50:45' prior: 50887995!
test03NewCartsAreCreatedEmpty

	| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: today.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .
	
	items := ui listCart: cartID.
	
	self assert: 0 equals: items size.! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:50:45' prior: 50888032!
test01CannotCreateACartWithAnInvalidUserID

	| ui aClientID aPassword |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: today.
	
	aClientID := 'qwerty3'.
	aPassword := '123oweE'.
	
	self 
	should: [ui createCartFor: aClientID withPassword: aPassword] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:50:45' prior: 50887954!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

	| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: today .

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .

	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1. 
	
	items := ui listCart: cartID.
	
	self assert: 1 equals: items size.
	self assert: testObjectsFactory itemSellByTheStore equals: (items at: 1).! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:50:45' prior: 50888010!
test06

	| ui cartID creditCard transactionID purchases |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: today.
	creditCard := testObjectsFactory notExpiredCreditCard.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.
	
	transactionID := ui checkout: cartID charging: creditCard.
	
	purchases := ui listPurchases: testObjectsFactory defaultClientID password: testObjectsFactory defaultPassword.

! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:50:45' prior: 50887936!
test02CannotCreateACartWithAnInvalidPassword

	| ui aClientID aPassword |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: today.
	aClientID := 'qwerty'.
	aPassword := '123owrE'.
	
	self 
	should: [ ui createCartFor: aClientID withPassword: aPassword ] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]
	! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:50:45' prior: 50887974!
test05AfterRequestingToAddMoreThanOneItemTheCartDisplaysTheCorrectAmountOfItems

	| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: today .

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .

	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 3. 
	
	items := ui listCart: cartID.
	
	self assert: 3 equals: items size.
	self assert: testObjectsFactory itemSellByTheStore equals: (items at: 1).! !

!methodRemoval: UserInterface class #with:catalog:throught:today: stamp: 'db 11/29/2020 13:50:45'!
with: anAuthenticator catalog: aCatalog throught: aMerchantProcessor today: today   
	"assertions"
	
	^self new initalizeWith: anAuthenticator catalog: aCatalog throught: aMerchantProcessor!
!UserInterface methodsFor: 'initialization' stamp: 'db 11/29/2020 13:51:17'!
initalizeWith: anAuthenticator catalog: aCatalog throught: aMerchantProcessor on: on  

	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	catalog := aCatalog.
	carts := Dictionary new.
! !
!UserInterface class methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:51:17' prior: 50888067!
with: anAuthenticator catalog: aCatalog throught: aMerchantProcessor on: today   
	"assertions"
	
	^self new initalizeWith: anAuthenticator catalog: aCatalog throught: aMerchantProcessor on: on! !

!methodRemoval: UserInterface #initalizeWith:catalog:throught: stamp: 'db 11/29/2020 13:51:17'!
initalizeWith: anAuthenticator catalog: aCatalog throught: aMerchantProcessor 

	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	catalog := aCatalog.
	carts := Dictionary new.
!
!UserInterface methodsFor: 'initialization' stamp: 'db 11/29/2020 13:51:23' prior: 50888198!
initalizeWith: anAuthenticator catalog: aCatalog throught: aMerchantProcessor on: aDate  

	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	catalog := aCatalog.
	carts := Dictionary new.
! !
!UserInterface class methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:52:14' prior: 50888209!
with: anAuthenticator catalog: aCatalog throught: aMerchantProcessor on: aDate   
	"assertions"
	
	^self new initalizeWith: anAuthenticator catalog: aCatalog throught: aMerchantProcessor on: aDate! !

!classDefinition: #UserInterface category: 'TusLibros' stamp: 'db 11/29/2020 13:52:44'!
Object subclass: #UserInterface
	instanceVariableNames: 'authenticator carts catalog salesBook merchantProcessor cashier today2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!UserInterface methodsFor: 'initialization' stamp: 'db 11/29/2020 13:52:42' prior: 50888228!
initalizeWith: anAuthenticator catalog: aCatalog throught: aMerchantProcessor on: aDate  

	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	catalog := aCatalog.
	carts := Dictionary new.
	today2 := aDate .
! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/29/2020 13:53:01' prior: 50887915!
checkout: aCartID charging: aCreditCard 
	
	| cart  |
	cart := carts at: aCartID.
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard
		throught: merchantProcessor 
		on:  today2
		registeringOn: salesBook.
		
	cashier checkOut.
	
	^1
	
	
	! !

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 13:53:24'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/29/2020 13:53:24'!
PASSED!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 13:53:24'!
PASSED!

!testRun: #UserInterfaceTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 11/29/2020 13:53:24'!
PASSED!

!testRun: #UserInterfaceTest #test05AfterRequestingToAddMoreThanOneItemTheCartDisplaysTheCorrectAmountOfItems stamp: 'db 11/29/2020 13:53:24'!
PASSED!

!testRun: #UserInterfaceTest #test06 stamp: 'db 11/29/2020 13:53:24'!
ERROR!

!testRun: #UserInterfaceTest #test06 stamp: 'db 11/29/2020 13:53:24'!
ERROR!
!UserInterface methodsFor: 'initialization' stamp: 'db 11/29/2020 13:54:25' prior: 50888258!
initalizeWith: anAuthenticator catalog: aCatalog throught: aMerchantProcessor on: aDate  

	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	catalog := aCatalog.
	carts := Dictionary new.
	today2 := aDate .
	salesBook := OrderedCollection new.
! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:55:17' prior: 50888129!
test06

	| ui cartID creditCard transactionID purchases |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today.
	creditCard := testObjectsFactory notExpiredCreditCard.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.
	
	transactionID := ui checkout: cartID charging: creditCard.
	
	purchases := ui listPurchases: testObjectsFactory defaultClientID password: testObjectsFactory defaultPassword.

! !

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 13:55:28'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/29/2020 13:55:28'!
PASSED!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 13:55:28'!
PASSED!

!testRun: #UserInterfaceTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 11/29/2020 13:55:28'!
PASSED!

!testRun: #UserInterfaceTest #test05AfterRequestingToAddMoreThanOneItemTheCartDisplaysTheCorrectAmountOfItems stamp: 'db 11/29/2020 13:55:28'!
PASSED!

!testRun: #UserInterfaceTest #test06 stamp: 'db 11/29/2020 13:55:28'!
ERROR!

!testRun: #UserInterfaceTest #test06 stamp: 'db 11/29/2020 13:55:28'!
ERROR!
!UserInterface methodsFor: 'operations' stamp: 'db 11/29/2020 13:55:39'!
listPurchases: aSmallInteger password: aString 
	self shouldBeImplemented.! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/29/2020 13:56:26' prior: 50888363!
listPurchases: aClientID password: aPassword

	^salesBook ! !

!testRun: #UserInterfaceTest #test06 stamp: 'db 11/29/2020 13:56:50'!
PASSED!

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 13:56:57'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/29/2020 13:56:57'!
PASSED!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 13:56:57'!
PASSED!

!testRun: #UserInterfaceTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 11/29/2020 13:56:57'!
PASSED!

!testRun: #UserInterfaceTest #test05AfterRequestingToAddMoreThanOneItemTheCartDisplaysTheCorrectAmountOfItems stamp: 'db 11/29/2020 13:56:57'!
PASSED!

!testRun: #UserInterfaceTest #test06 stamp: 'db 11/29/2020 13:56:57'!
PASSED!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 13:57:19' prior: 50888317!
test06

	| ui cartID creditCard transactionID purchases |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today.
	creditCard := testObjectsFactory notExpiredCreditCard.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.
	
	transactionID := ui checkout: cartID charging: creditCard.
	
	purchases := ui listPurchases: testObjectsFactory defaultClientID password: testObjectsFactory defaultPassword.
	
	

! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/29/2020 13:58:08' prior: 50888369!
listPurchases: aClientID password: aPassword

	^salesBook 
! !

Object subclass: #Sale
	instanceVariableNames: 'client items total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'
	
	"0|ISBN_1|QUANTITY_1|....|ISBN_N|QUANTITY_N|TOTAL_AMOUNT"!

!classDefinition: #Sale category: 'TusLibros' stamp: 'db 11/29/2020 14:00:39'!
Object subclass: #Sale
	instanceVariableNames: 'client items total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #UserInterface
	instanceVariableNames: 'authenticator carts catalog salesBook merchantProcessor cashier today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #UserInterface category: 'TusLibros' stamp: 'db 11/29/2020 14:01:40'!
Object subclass: #UserInterface
	instanceVariableNames: 'authenticator carts catalog salesBook merchantProcessor cashier today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!UserInterface methodsFor: 'operations' stamp: 'db 11/29/2020 14:01:51' prior: 50888269!
checkout: aCartID charging: aCreditCard 
	
	| cart  |
	cart := carts at: aCartID.
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard
		throught: merchantProcessor 
		on:  today
		registeringOn: salesBook.
		
	cashier checkOut.
	
	^1
	
	
	! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/29/2020 14:04:30' prior: 50887155!
createCartFor: aClientID withPassword: aPassword 

	| cart |
	(authenticator validate: aClientID password: aPassword) ifFalse: [^self class signalInvalidClient ].
	" Duda: un cliente puede tener m�s de un carrito? "
	cart := Cart acceptingItemsOf: catalog.
	carts at: 1 put: cart.
	
	salesBook at: aClientID put: cart.
	^1
	
	
	! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/29/2020 14:05:19' prior: 50888421!
listPurchases: aClientID password: aPassword

	^(salesBook at: aClientID) items 
! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/29/2020 14:06:02' prior: 50888479!
listPurchases: aClientID password: aPassword

	"validar clientID y password"
	
	^(salesBook at: aClientID) items 
! !
!UserInterface methodsFor: 'initialization' stamp: 'db 11/29/2020 14:07:32' prior: 50888305!
initalizeWith: anAuthenticator catalog: aCatalog throught: aMerchantProcessor on: aDate  

	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	catalog := aCatalog.
	carts := Dictionary new.
	today := aDate .
	salesBook := OrderedCollection new.
! !

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 14:07:39'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/29/2020 14:07:39'!
PASSED!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 14:07:39'!
ERROR!

!testRun: #UserInterfaceTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 11/29/2020 14:07:39'!
ERROR!

!testRun: #UserInterfaceTest #test05AfterRequestingToAddMoreThanOneItemTheCartDisplaysTheCorrectAmountOfItems stamp: 'db 11/29/2020 14:07:39'!
ERROR!

!testRun: #UserInterfaceTest #test06 stamp: 'db 11/29/2020 14:07:39'!
ERROR!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 14:07:54' prior: 50888091!
test01CannotCreateACartWithAnInvalidUserID

	| ui aClientID aPassword |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today .
	
	aClientID := 'qwerty3'.
	aPassword := '123oweE'.
	
	self 
	should: [ui createCartFor: aClientID withPassword: aPassword] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 14:08:00' prior: 50888151!
test02CannotCreateACartWithAnInvalidPassword

	| ui aClientID aPassword |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory test.
	aClientID := 'qwerty'.
	aPassword := '123owrE'.
	
	self 
	should: [ ui createCartFor: aClientID withPassword: aPassword ] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]
	! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 14:08:07' prior: 50888544!
test02CannotCreateACartWithAnInvalidPassword

	| ui aClientID aPassword |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today .
	aClientID := 'qwerty'.
	aPassword := '123owrE'.
	
	self 
	should: [ ui createCartFor: aClientID withPassword: aPassword ] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]
	! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 14:08:15' prior: 50888077!
test03NewCartsAreCreatedEmpty

	| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .
	
	items := ui listCart: cartID.
	
	self assert: 0 equals: items size.! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 14:08:24' prior: 50888109!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

	| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .

	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1. 
	
	items := ui listCart: cartID.
	
	self assert: 1 equals: items size.
	self assert: testObjectsFactory itemSellByTheStore equals: (items at: 1).! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 14:08:32' prior: 50888169!
test05AfterRequestingToAddMoreThanOneItemTheCartDisplaysTheCorrectAmountOfItems

	| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today .

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .

	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 3. 
	
	items := ui listCart: cartID.
	
	self assert: 3 equals: items size.
	self assert: testObjectsFactory itemSellByTheStore equals: (items at: 1).! !

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 14:08:37'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/29/2020 14:08:37'!
PASSED!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 14:08:37'!
ERROR!

!testRun: #UserInterfaceTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 11/29/2020 14:08:37'!
ERROR!

!testRun: #UserInterfaceTest #test05AfterRequestingToAddMoreThanOneItemTheCartDisplaysTheCorrectAmountOfItems stamp: 'db 11/29/2020 14:08:37'!
ERROR!

!testRun: #UserInterfaceTest #test06 stamp: 'db 11/29/2020 14:08:37'!
ERROR!

----SNAPSHOT----(29 November 2020 14:08:41) CuisUniversity-4384.image priorSource: 17777596!

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 14:08:45'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/29/2020 14:08:49'!
PASSED!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 14:08:54'!
ERROR!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 14:08:54'!
ERROR!
!UserInterface methodsFor: 'initialization' stamp: 'db 11/29/2020 14:09:21' prior: 50888492!
initalizeWith: anAuthenticator catalog: aCatalog throught: aMerchantProcessor on: aDate  

	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	catalog := aCatalog.
	carts := Dictionary new.
	today := aDate .
	salesBook := Dictionary new.
! !

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 14:09:23'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/29/2020 14:09:23'!
PASSED!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 14:09:23'!
PASSED!

!testRun: #UserInterfaceTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 11/29/2020 14:09:23'!
PASSED!

!testRun: #UserInterfaceTest #test05AfterRequestingToAddMoreThanOneItemTheCartDisplaysTheCorrectAmountOfItems stamp: 'db 11/29/2020 14:09:23'!
PASSED!

!testRun: #UserInterfaceTest #test06 stamp: 'db 11/29/2020 14:09:23'!
ERROR!

!testRun: #UserInterfaceTest #test06 stamp: 'db 11/29/2020 14:09:23'!
ERROR!

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/29/2020 14:10:11'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/29/2020 14:10:11'!
PASSED!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/29/2020 14:10:11'!
PASSED!

!testRun: #UserInterfaceTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 11/29/2020 14:10:11'!
PASSED!

!testRun: #UserInterfaceTest #test05AfterRequestingToAddMoreThanOneItemTheCartDisplaysTheCorrectAmountOfItems stamp: 'db 11/29/2020 14:10:11'!
PASSED!

!testRun: #UserInterfaceTest #test06 stamp: 'db 11/29/2020 14:10:11'!
ERROR!

!testRun: #UserInterfaceTest #test06 stamp: 'db 11/29/2020 14:10:11'!
ERROR!

----SNAPSHOT----(29 November 2020 14:12:09) CuisUniversity-4384.image priorSource: 17824267!

Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'db 11/29/2020 14:13:01'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!UserInterface methodsFor: 'operations' stamp: 'db 11/29/2020 14:18:21' prior: 50888465!
createCartFor: aClientID withPassword: aPassword 

	| cart |
	(authenticator validate: aClientID password: aPassword) ifFalse: [^self class signalInvalidClient ].
	" Duda: un cliente puede tener m�s de un carrito? "
	cart := Cart acceptingItemsOf: catalog.
	carts at: 1 put: cart.
	
	"salesBook at: aClientID put: cart."
	^1
	
	
	! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 14:25:39'!
test06One

	| ui cartID creditCard transactionID purchases |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today.
	creditCard := testObjectsFactory notExpiredCreditCard.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.
	
	transactionID := ui checkout: cartID charging: creditCard.
	
	purchases := ui listPurchases: testObjectsFactory defaultClientID password: testObjectsFactory defaultPassword.
	
	

! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 14:25:50'!
test06Many

	| ui cartID creditCard transactionID purchases |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today.
	creditCard := testObjectsFactory notExpiredCreditCard.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.
	
	transactionID := ui checkout: cartID charging: creditCard.
	
	purchases := ui listPurchases: testObjectsFactory defaultClientID password: testObjectsFactory defaultPassword.
	
	

! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 14:26:30' prior: 50888786!
test06Many

	| ui cartID creditCard transactionID purchases |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today.
	creditCard := testObjectsFactory notExpiredCreditCard.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.
	
	transactionID := ui checkout: cartID charging: creditCard.
	
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.
	transactionID := ui checkout: cartID charging: creditCard.
	
	
	purchases := ui listPurchases: testObjectsFactory defaultClientID password: testObjectsFactory defaultPassword.
	
	

! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/29/2020 14:30:55' prior: 50888764!
test06One

	| ui cartID creditCard transactionID purchases |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today.
	creditCard := testObjectsFactory notExpiredCreditCard.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.
	
	transactionID := ui checkout: cartID charging: creditCard.
	
	purchases := ui listPurchases: testObjectsFactory defaultClientID password: testObjectsFactory defaultPassword.
	
	
	"cardID:1 --> 0|ISBN_1|QUANTITY_1|ISBN_2|QUANTITY_2|....|ISBN_N|QUANTITY_N"
	"cardID:2 --> 0|ISBN_1|QUANTITY_1|ISBN_2|QUANTITY_2|....|ISBN_N|QUANTITY_N"
	"cardID:3 --> 0|ISBN_1|QUANTITY_1|ISBN_2|QUANTITY_2|....|ISBN_N|QUANTITY_N"
	
	"key: clientID value: ordercollection: carts"
	
	"listPurchase (clientID) -> " 
	

! !

----SNAPSHOT----(29 November 2020 14:31:44) CuisUniversity-4384.image priorSource: 17826705!

----QUIT----(29 November 2020 14:33:43) CuisUniversity-4384.image priorSource: 17831077!

----STARTUP---- (30 November 2020 17:06:59) as /Users/dbenitez/uba/2c2020-IS1/IS1-Trabajos/20-TusLibros/macos64-TusLibros/CuisUniversity-4384.image!

!UserInterfaceTest methodsFor: 'testing' stamp: 'db 11/30/2020 17:38:49' prior: 50888617!
test05AfterRequestingToAddMoreThanOneItemTheCartDisplaysTheCorrectAmountOfItems

	| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today .
	"Pasar el merchant processor y el authenticator..."

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .

	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 3. 
	
	items := ui listCart: cartID.
	
	self assert: 3 equals: items size.
	self assert: testObjectsFactory itemSellByTheStore equals: (items at: 1).! !
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 18:12:10'!
test01CannotAddToCartToAnExpiredCart

	| ui cartID |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
! !
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 18:13:36' prior: 50888906!
test01CannotAddToCartToAnExpiredCart

	| ui cartID |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.]
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
! !

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 18:13:40'!
FAILURE!

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 18:13:40'!
FAILURE!

Object subclass: #Cart
	instanceVariableNames: 'catalog items lastTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'db 11/30/2020 18:16:16'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items lastTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'db 11/30/2020 18:16:30'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #UserInterface
	instanceVariableNames: 'authenticator carts  catalog salesBook merchantProcessor cashier today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #UserInterface category: 'TusLibros' stamp: 'db 11/30/2020 18:18:04'!
Object subclass: #UserInterface
	instanceVariableNames: 'authenticator carts catalog salesBook merchantProcessor cashier today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #UserInterfaceTest category: 'TusLibros' stamp: 'db 11/30/2020 18:18:51'!
TestCase subclass: #UserInterfaceTest
	instanceVariableNames: 'testObjectsFactory validUsers aValidClientID aValidPassword debitBehavior today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 18:18:48'!
today

	^today! !

Object subclass: #DateSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #DateSimulator category: 'TusLibros' stamp: 'db 11/30/2020 18:20:42'!
Object subclass: #DateSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #DateSimulator category: 'TusLibros' stamp: 'db 11/30/2020 18:21:01'!
Object subclass: #DateSimulator
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!DateSimulator methodsFor: 'nil' stamp: 'db 11/30/2020 18:20:58'!
today
	^today! !
!DateSimulator methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 18:21:26'!
today: aDate
	today := aDate ! !
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 18:22:05' prior: 50888924!
test01CannotAddToCartToAnExpiredCart

	| ui cartID todaySimulator |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	todaySimulator := DateSimulator new.
	
	
! !
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 18:22:28' prior: 50889032!
test01CannotAddToCartToAnExpiredCart

	| ui cartID todaySimulator |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	todaySimulator := DateSimulator new.
	
	
	todaySimulator today: Date new today.
	
	
! !
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 18:23:48' prior: 50889058!
test01CannotAddToCartToAnExpiredCart

	| ui cartID todaySimulator ahora |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	
	todaySimulator := DateSimulator new.
	todaySimulator today: Date new today.
	
	
	ahora := todaySimulator today

	todaySimulator today: Time new dateAndTimeNow.
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 18:24:41' prior: 50889085!
test01CannotAddToCartToAnExpiredCart

	| ui cartID todaySimulator ahora |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	
	todaySimulator := DateSimulator new.
	todaySimulator today: Time new dateAndTimeNow.
	
	ahora := todaySimulator today.

	todaySimulator today: todaySimulator today + 30 Minutes.
	
	ahora := todaySimulator today.
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !

Time new dateAndTimeNow!

Time new!

self dateAndTimeNow !

self dateAndTime !

self now !

Time dateAndTimeNow!
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 18:28:00' prior: 50889115!
test01CannotAddToCartToAnExpiredCart

	| ui cartID todaySimulator ahora |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	
	todaySimulator := DateSimulator new.
	todaySimulator today: Time dateAndTimeNow.
	
	ahora := todaySimulator today.

	todaySimulator today: todaySimulator today + 30.
	
	ahora := todaySimulator today.
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !

ahora!

30 minutes!

Time dateAndTimeNow +30 minutes!

Time dateAndTimeNow - 30 minutes!

Duration new!

Duration new + 30 minutes !

Time dateAndTimeNow - Duration new + 30 minutes!

Time dateAndTimeNow -  30 minutes!

Duration new + 30 minutes !

Time dateAndTimeNow.!

self subtractDuration: Duration new + 30 minutes!

self subtractDuration: (Duration new + 30 minutes)!

Time dateAndTimeNow subtractDuration: (Duration new + 30 minutes)!

Time dateAndTimeNow.!

GregorianDateTime today!

GregorianDateTime now!

GregorianDateTime now + 30 minutes!

GregorianDateTime now next: (TimeUnits minutes with: 30)!

GregorianDateTime now next: (TimeUnits minute with: 30)!
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 18:42:20' prior: 50889150!
test01CannotAddToCartToAnExpiredCart

	| ui cartID todaySimulator ahora |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	
	todaySimulator := DateSimulator new.
	todaySimulator today: GregorianDateTime now. 
	
	ahora := todaySimulator today.

	todaySimulator today: ( (todaySimulator today) next: (TimeUnits minute with: 30) ).
	
	ahora := todaySimulator today.
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !

ahora!

ahora!

!classDefinition: #UserInterface category: 'TusLibros' stamp: 'db 11/30/2020 18:46:43'!
Object subclass: #UserInterface
	instanceVariableNames: 'authenticator carts catalog salesBook merchantProcessor cashier today timeService'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 18:46:40' prior: 50888750!
createCartFor: aClientID withPassword: aPassword 

	| cart |
	(authenticator validate: aClientID password: aPassword) ifFalse: [^self class signalInvalidClient ].
	" Duda: un cliente puede tener m�s de un carrito? "
	cart := Cart acceptingItemsOf: catalog.
	carts at: 1 put: (Array with: cart with: timeService today).
	
	"salesBook at: aClientID put: cart."
	^1
	
	
	! !
!UserInterface class methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 18:47:36'!
with: anAuthenticator catalog: aCatalog throught: aMerchantProcessor on: aDate timeService: timeService    
	"assertions"
	
	^self new initalizeWith: anAuthenticator catalog: aCatalog throught: aMerchantProcessor on: aDate! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 18:47:36' prior: 50888596!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

	| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: timeService.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .

	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1. 
	
	items := ui listCart: cartID.
	
	self assert: 1 equals: items size.
	self assert: testObjectsFactory itemSellByTheStore equals: (items at: 1).! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 18:47:36' prior: 50888883!
test05AfterRequestingToAddMoreThanOneItemTheCartDisplaysTheCorrectAmountOfItems

	| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: timeService .
	"Pasar el merchant processor y el authenticator..."

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .

	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 3. 
	
	items := ui listCart: cartID.
	
	self assert: 3 equals: items size.
	self assert: testObjectsFactory itemSellByTheStore equals: (items at: 1).! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 18:47:36' prior: 50888809!
test06Many

	| ui cartID creditCard transactionID purchases |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: timeService.
	creditCard := testObjectsFactory notExpiredCreditCard.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.
	
	transactionID := ui checkout: cartID charging: creditCard.
	
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.
	transactionID := ui checkout: cartID charging: creditCard.
	
	
	purchases := ui listPurchases: testObjectsFactory defaultClientID password: testObjectsFactory defaultPassword.
	
	

! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 18:47:36' prior: 50888562!
test02CannotCreateACartWithAnInvalidPassword

	| ui aClientID aPassword |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: timeService .
	aClientID := 'qwerty'.
	aPassword := '123owrE'.
	
	self 
	should: [ ui createCartFor: aClientID withPassword: aPassword ] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]
	! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 18:47:36' prior: 50888840!
test06One

	| ui cartID creditCard transactionID purchases |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: timeService.
	creditCard := testObjectsFactory notExpiredCreditCard.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.
	
	transactionID := ui checkout: cartID charging: creditCard.
	
	purchases := ui listPurchases: testObjectsFactory defaultClientID password: testObjectsFactory defaultPassword.
	
	
	"cardID:1 --> 0|ISBN_1|QUANTITY_1|ISBN_2|QUANTITY_2|....|ISBN_N|QUANTITY_N"
	"cardID:2 --> 0|ISBN_1|QUANTITY_1|ISBN_2|QUANTITY_2|....|ISBN_N|QUANTITY_N"
	"cardID:3 --> 0|ISBN_1|QUANTITY_1|ISBN_2|QUANTITY_2|....|ISBN_N|QUANTITY_N"
	
	"key: clientID value: ordercollection: carts"
	
	"listPurchase (clientID) -> " 
	

! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 18:47:36' prior: 50889202!
test01CannotAddToCartToAnExpiredCart

	| ui cartID todaySimulator ahora |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: timeService.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	
	todaySimulator := DateSimulator new.
	todaySimulator today: GregorianDateTime now. 
	
	ahora := todaySimulator today.

	todaySimulator today: ( (todaySimulator today) next: (TimeUnits minute with: 30) ).
	
	ahora := todaySimulator today.
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 18:47:36' prior: 50888526!
test01CannotCreateACartWithAnInvalidUserID

	| ui aClientID aPassword |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: timeService .
	
	aClientID := 'qwerty3'.
	aPassword := '123oweE'.
	
	self 
	should: [ui createCartFor: aClientID withPassword: aPassword] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 18:47:36' prior: 50888399!
test06

	| ui cartID creditCard transactionID purchases |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: timeService.
	creditCard := testObjectsFactory notExpiredCreditCard.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.
	
	transactionID := ui checkout: cartID charging: creditCard.
	
	purchases := ui listPurchases: testObjectsFactory defaultClientID password: testObjectsFactory defaultPassword.
	
	

! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 18:47:36' prior: 50888581!
test03NewCartsAreCreatedEmpty

	| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: timeService.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .
	
	items := ui listCart: cartID.
	
	self assert: 0 equals: items size.! !

!methodRemoval: UserInterface class #with:catalog:throught:on: stamp: 'db 11/30/2020 18:47:36'!
with: anAuthenticator catalog: aCatalog throught: aMerchantProcessor on: aDate   
	"assertions"
	
	^self new initalizeWith: anAuthenticator catalog: aCatalog throught: aMerchantProcessor on: aDate!
!UserInterface class methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 18:48:07' prior: 50889259!
with: anAuthenticator catalog: aCatalog throught: aMerchantProcessor on: aDate timeService: aTimeService    
	"assertions"
	
	^self new initalizeWith: anAuthenticator catalog: aCatalog throught: aMerchantProcessor on: aDate timeService: aTimeService! !
!UserInterface methodsFor: 'initialization' stamp: 'db 11/30/2020 18:48:47'!
initalizeWith: anAuthenticator catalog: aCatalog throught: aMerchantProcessor on: aDate timeService: aTimeService

	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	catalog := aCatalog.
	carts := Dictionary new.
	today := aDate .
	salesBook := Dictionary new.
! !
!UserInterface methodsFor: 'initialization' stamp: 'db 11/30/2020 18:48:59' prior: 50889513!
initalizeWith: anAuthenticator catalog: aCatalog throught: aMerchantProcessor on: aDate timeService: aTimeService

	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	catalog := aCatalog.
	carts := Dictionary new.
	today := aDate .
	salesBook := Dictionary new.
	timeService := aTimeService 
! !

!methodRemoval: UserInterface #initalizeWith:catalog:throught:on: stamp: 'db 11/30/2020 18:49:03'!
initalizeWith: anAuthenticator catalog: aCatalog throught: aMerchantProcessor on: aDate  

	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	catalog := aCatalog.
	carts := Dictionary new.
	today := aDate .
	salesBook := Dictionary new.
!
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 18:49:37' prior: 50889401!
test01CannotAddToCartToAnExpiredCart

	| ui cartID todaySimulator ahora |
	
	
	todaySimulator := DateSimulator new.
	todaySimulator today: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator today: ( (todaySimulator today) next: (TimeUnits minute with: 30) ).

	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 18:50:09' prior: 50889551!
test01CannotAddToCartToAnExpiredCart

	| ui cartID todaySimulator |
	
	
	todaySimulator := DateSimulator new.
	todaySimulator today: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator today: ( (todaySimulator today) next: (TimeUnits minute with: 35) ).

	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 18:54:02' prior: 50886775!
addToCart: aCartID item: anItem quantity: aQuantity 

	| cart |
	cart := carts at: aCartID.
	
	(cart at: 2) > timeService today ifTrue: [^self class signalOperationOnExpiredCart].
	
	
	(cart at: 2 put: timeService today).
.	(cart at: 1) add: aQuantity of: anItem.
	! !
!UserInterface class methodsFor: 'accessing' stamp: 'db 11/30/2020 18:54:45'!
operationOnExpiredCartErrorDescription
	^'Operation on expired cart!!!!!!'! !
!UserInterface class methodsFor: 'accessing' stamp: 'db 11/30/2020 18:55:01'!
signalOperationOnExpiredCart
	^'Operation on expired cart!!!!!!'! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 18:55:12' prior: 50889614!
addToCart: aCartID item: anItem quantity: aQuantity 

	| cart |
	cart := carts at: aCartID.
	
	(cart at: 2) > timeService today ifTrue: [^self class signalOperationOnExpiredCart].
	
	
	(cart at: 2 put: timeService today).
.	(cart at: 1) add: aQuantity of: anItem.
	! !

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 18:55:32'!
FAILURE!

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 18:55:32'!
FAILURE!

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 18:55:46'!
FAILURE!

cart at: 2!

timeService today!

(cart at: 2) - timeService today!

(cart at: 2) distanceTo: timeService today.!

((cart at: 2) distanceTo: timeService today).!

self minutes !

self minute !

self convertTo: minute!
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 19:04:53' prior: 50889635!
addToCart: aCartID item: anItem quantity: aQuantity 

	| cart |
	cart := carts at: aCartID.

	(((cart at: 2) distanceTo: timeService today) convertTo: minute > 30 minutes) ifTrue: [^self class signalOperationOnExpiredCart].
	
	
	(cart at: 2 put: timeService today).
.	(cart at: 1) add: aQuantity of: anItem.
	! !

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 19:04:55'!
ERROR!

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 19:05:30'!
ERROR!

((cart at: 2) distanceTo: timeService today) convertTo: minute!

self > 10!

self > 10 minute!

self value !

self value > 20 minute!

self value > (20 minute)!

(20 minute)!

----SNAPSHOT----(30 November 2020 19:09:28) CuisUniversity-4384.image priorSource: 17831171!

((cart at: 2) distanceTo: timeService today) convertTo: minute!

self asIntegerAmount !

self asIntegerAmount + 10!

self asIntegerAmount > 34!

self asIntegerAmount >= 34!

((cart at: 2) distanceTo: timeService today) convertTo: minute!

self > SimpleMeasure amount: 30 unit: minute!

self unit!

self > (SimpleMeasure amount: 30 unit: minute)!

self > (SimpleMeasure amount: 30 unit: minute)!

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 19:13:01'!
ERROR!

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 19:13:12'!
ERROR!

(((cart at: 2) distanceTo: timeService today) convertTo: minute > 30 minutes)!
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 19:14:26' prior: 50889664!
addToCart: aCartID item: anItem quantity: aQuantity 

	| cart |
	cart := carts at: aCartID.

	(((cart at: 2) distanceTo: timeService today) convertTo: minute > (Measure amount: 30 unit: minute) ) ifTrue: [^self class signalOperationOnExpiredCart].
	
	
	(cart at: 2 put: timeService today).
.	(cart at: 1) add: aQuantity of: anItem.
	! !

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 19:14:28'!
ERROR!

((cart at: 2) distanceTo: timeService today) convertTo: minute!

((cart at: 2) distanceTo: timeService today) convertTo: minute!

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 19:16:15'!
ERROR!

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 19:16:15'!
ERROR!

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 19:18:07'!
ERROR!

((cart at: 2) distanceTo: timeService today) convertTo: minute!
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 19:18:47' prior: 50889714!
addToCart: aCartID item: anItem quantity: aQuantity 

	| cart |
	cart := carts at: aCartID.

	(((cart at: 2) distanceTo: timeService today) convertTo: minute > (SimpleMeasure amount: 30 unit: minute) ) ifTrue: [^self class signalOperationOnExpiredCart].
	
	
	(cart at: 2 put: timeService today).
.	(cart at: 1) add: aQuantity of: anItem.
	! !

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 19:18:49'!
ERROR!

((cart at: 2) distanceTo: timeService today) convertTo: minute!
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 19:20:04' prior: 50889747!
addToCart: aCartID item: anItem quantity: aQuantity 

	| cart duration |
	cart := carts at: aCartID.
	
	duration := ((cart at: 2) distanceTo: timeService today) convertTo: minute.

	( duration > (SimpleMeasure amount: 30 unit: minute) ) ifTrue: [^self class signalOperationOnExpiredCart].
	
	
	(cart at: 2 put: timeService today).
.	(cart at: 1) add: aQuantity of: anItem.
	! !

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 19:20:24'!
FAILURE!
!UserInterface class methodsFor: 'accessing' stamp: 'db 11/30/2020 19:20:54' prior: 50889625!
operationOnExpiredCartErrorDescription
	^'Operation on expired cart!!!!!!'! !
!UserInterface class methodsFor: 'accessing' stamp: 'db 11/30/2020 19:21:05' prior: 50889630!
signalOperationOnExpiredCart
	^self error: self operationOnExpiredCartErrorDescription! !

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 19:21:13'!
PASSED!
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 19:21:22' prior: 50889583!
test01CannotAddToCartToAnExpiredCart

	| ui cartID todaySimulator |
	
	
	todaySimulator := DateSimulator new.
	todaySimulator today: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator today: ( (todaySimulator today) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 19:22:20' prior: 50889766!
addToCart: aCartID item: anItem quantity: aQuantity 

	| cart duration maxTime |
	cart := carts at: aCartID.
	
	duration := ((cart at: 2) distanceTo: timeService today) convertTo: minute.
	

	( duration >  maxTime) ifTrue: [^self class signalOperationOnExpiredCart].

	(cart at: 2 put: timeService today).
.	(cart at: 1) add: aQuantity of: anItem.
	! !

!classDefinition: #UserInterface category: 'TusLibros' stamp: 'db 11/30/2020 19:22:35'!
Object subclass: #UserInterface
	instanceVariableNames: 'authenticator carts catalog salesBook merchantProcessor cashier today timeService maxTime2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 19:22:34' prior: 50889832!
addToCart: aCartID item: anItem quantity: aQuantity 

	| cart duration  |
	cart := carts at: aCartID.
	
	duration := ((cart at: 2) distanceTo: timeService today) convertTo: minute.
	

	( duration >  maxTime2) ifTrue: [^self class signalOperationOnExpiredCart].

	(cart at: 2 put: timeService today).
.	(cart at: 1) add: aQuantity of: anItem.
	! !
!UserInterface methodsFor: 'initialization' stamp: 'db 11/30/2020 19:22:54' prior: 50889526!
initalizeWith: anAuthenticator catalog: aCatalog throught: aMerchantProcessor on: aDate timeService: aTimeService

	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	catalog := aCatalog.
	carts := Dictionary new.
	today := aDate .
	salesBook := Dictionary new.
	timeService := aTimeService.
	maxTime2 := (SimpleMeasure amount: 30 unit: minute).
! !

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 19:23:05'!
PASSED!
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 19:23:48' prior: 50889856!
addToCart: aCartID item: anItem quantity: aQuantity 

	| cartContainer duration  |
	cartContainer := carts at: aCartID.
	
	duration := ((cartContainer at: 2) distanceTo: timeService today) convertTo: minute.
	( duration >  maxTime2) ifTrue: [^self class signalOperationOnExpiredCart].

	(cartContainer at: 2 put: timeService today).
.	(cartContainer at: 1) add: aQuantity of: anItem.
	! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 19:24:47'!
lastTimeMarkOf: aCartContainer
	^aCartContainer at: 2! !
!UserInterface methodsFor: 'private' stamp: 'db 11/30/2020 19:25:18'!
cart: aCartContainer
	^aCartContainer at: 1! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 19:26:20' prior: 50889888!
addToCart: aCartID item: anItem quantity: aQuantity 

	| cartContainer duration  |
	cartContainer := carts at: aCartID.
	
	duration := ((self lastTimeMarkOf: cartContainer) distanceTo: timeService today) convertTo: minute.
	( duration >  maxTime2) ifTrue: [^self class signalOperationOnExpiredCart].

	(cartContainer at: 2 put: timeService today).
.	(cartContainer at: 1) add: aQuantity of: anItem.
	! !

!classDefinition: #UserInterface category: 'TusLibros' stamp: 'db 11/30/2020 19:26:32'!
Object subclass: #UserInterface
	instanceVariableNames: 'authenticator carts catalog salesBook merchantProcessor cashier today timeService maxTime2 maxTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!UserInterface methodsFor: 'initialization' stamp: 'db 11/30/2020 19:26:29' prior: 50889870!
initalizeWith: anAuthenticator catalog: aCatalog throught: aMerchantProcessor on: aDate timeService: aTimeService

	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	catalog := aCatalog.
	carts := Dictionary new.
	today := aDate .
	salesBook := Dictionary new.
	timeService := aTimeService.
	maxTime := (SimpleMeasure amount: 30 unit: minute).
! !

Object subclass: #UserInterface
	instanceVariableNames: 'authenticator carts catalog salesBook merchantProcessor cashier today timeService maxTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #UserInterface category: 'TusLibros' stamp: 'db 11/30/2020 19:26:38'!
Object subclass: #UserInterface
	instanceVariableNames: 'authenticator carts catalog salesBook merchantProcessor cashier today timeService maxTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 19:28:02' prior: 50889912!
addToCart: aCartID item: anItem quantity: aQuantity 

	| cartContainer activeDuration  |
	cartContainer := carts at: aCartID.
	
	activeDuration := ((self lastTimeMarkOf: cartContainer) distanceTo: timeService today) convertTo: minute.
	( activeDuration >  maxTime) ifTrue: [^self class signalOperationOnExpiredCart].

	(cartContainer at: 2 put: timeService today).
.	(cartContainer at: 1) add: aQuantity of: anItem.
	! !

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 19:28:08'!
PASSED!
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 19:30:37'!
activeDuration: aCartID

	| cartContainer |
	cartContainer := carts at: aCartID.
	
	^ ((self lastTimeMarkOf: cartContainer) distanceTo: timeService today) convertTo: minute.
! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 19:31:04' prior: 50889969!
addToCart: aCartID item: anItem quantity: aQuantity 

	| cartContainer |
	cartContainer := carts at: aCartID.

	( self activeDuration: aCartID > maxTime) ifTrue: [^self class signalOperationOnExpiredCart].

	(cartContainer at: 2 put: timeService today).
.	(cartContainer at: 1) add: aQuantity of: anItem.
	! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 19:31:38' prior: 50889997!
addToCart: aCartID item: anItem quantity: aQuantity 

	| cartContainer |
	cartContainer := carts at: aCartID.

	( self activeDuration: aCartID > maxTime) ifTrue: [^self class signalOperationOnExpiredCart].

	self markLastUsed: aCartID.
	
.	(cartContainer at: 1) add: aQuantity of: anItem.
	! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 19:32:16'!
markLastUsed: aCartID

	| cartContainer |
	cartContainer := carts at: aCartID.
	(cartContainer at: 2 put: timeService today).
	! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 19:32:43' prior: 50890010!
addToCart: aCartID item: anItem quantity: aQuantity 

	| cartContainer |
	cartContainer := carts at: aCartID.

	( self activeDuration: aCartID > maxTime) ifTrue: [^self class signalOperationOnExpiredCart].

	self markLastUsed: aCartID.
	
.	(cartContainer at: 1) add: aQuantity of: anItem.
	! !

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 19:32:59'!
FAILURE!

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 19:32:59'!
FAILURE!

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 19:33:21'!
FAILURE!

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 19:33:56'!
FAILURE!

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 19:34:52'!
FAILURE!
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 19:35:34' prior: 50890029!
addToCart: aCartID item: anItem quantity: aQuantity 

	| cartContainer |
	cartContainer := carts at: aCartID.

	( (self activeDuration: aCartID) > maxTime) ifTrue: [^self class signalOperationOnExpiredCart].

	self markLastUsed: aCartID.
	
.	(cartContainer at: 1) add: aQuantity of: anItem.
	! !

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 19:35:39'!
PASSED!
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 19:35:57' prior: 50889801!
test01CannotAddToCartToAnExpiredCart

	| ui cartID todaySimulator |
	
	
	todaySimulator := DateSimulator new.
	todaySimulator today: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator today: ( (todaySimulator today) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 19:36:04' prior: 50890075!
test01CannotAddToCartToAnExpiredCart

	| ui cartID todaySimulator |
	
	todaySimulator := DateSimulator new.
	todaySimulator today: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator today: ( (todaySimulator today) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 19:36:20'!
test02CannotListCartToAnExpiredCart

	| ui cartID todaySimulator |
	
	todaySimulator := DateSimulator new.
	todaySimulator today: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator today: ( (todaySimulator today) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 19:36:53' prior: 50890137!
test02CannotListCartToAnExpiredCart

	| ui cartID todaySimulator |
	
	todaySimulator := DateSimulator new.
	todaySimulator today: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator today: ( (todaySimulator today) next: (TimeUnits minute with: 35) ).
	
	
	
	self 
	should: [ui listCart: cartID..] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 19:36:55' prior: 50890168!
test02CannotListCartToAnExpiredCart

	| ui cartID todaySimulator |
	
	todaySimulator := DateSimulator new.
	todaySimulator today: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator today: ( (todaySimulator today) next: (TimeUnits minute with: 35) ).
	
	
	
	self 
	should: [ui listCart: cartID.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 19:37:00' prior: 50890197!
test02CannotListCartToAnExpiredCart

	| ui cartID todaySimulator |
	
	todaySimulator := DateSimulator new.
	todaySimulator today: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator today: ( (todaySimulator today) next: (TimeUnits minute with: 35) ).
	
	
	self 
	should: [ui listCart: cartID.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 19:37:05'!
PASSED!

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/30/2020 19:37:06'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/30/2020 19:37:06'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotListCartToAnExpiredCart stamp: 'db 11/30/2020 19:37:06'!
ERROR!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/30/2020 19:37:06'!
ERROR!

!testRun: #UserInterfaceTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 11/30/2020 19:37:06'!
ERROR!

!testRun: #UserInterfaceTest #test05AfterRequestingToAddMoreThanOneItemTheCartDisplaysTheCorrectAmountOfItems stamp: 'db 11/30/2020 19:37:06'!
ERROR!

!testRun: #UserInterfaceTest #test06 stamp: 'db 11/30/2020 19:37:06'!
ERROR!

!testRun: #UserInterfaceTest #test06Many stamp: 'db 11/30/2020 19:37:06'!
ERROR!

!testRun: #UserInterfaceTest #test06One stamp: 'db 11/30/2020 19:37:06'!
ERROR!

!testRun: #UserInterfaceTest #test02CannotListCartToAnExpiredCart stamp: 'db 11/30/2020 19:37:13'!
ERROR!

!testRun: #UserInterfaceTest #test02CannotListCartToAnExpiredCart stamp: 'db 11/30/2020 19:37:22'!
ERROR!
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 19:38:39'!
assertExpiredCart: aCartID

	| cartContainer |
	cartContainer := carts at: aCartID.

	( (self activeDuration: aCartID) > maxTime) ifTrue: [^self class signalOperationOnExpiredCart].
! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 19:38:55' prior: 50890295!
assertExpiredCart: aCartID

	( (self activeDuration: aCartID) > maxTime) ifTrue: [^self class signalOperationOnExpiredCart].
! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 19:39:27' prior: 50890304!
assertExpiredCart: aCartID

	(self isExpired: aCartID) ifTrue: [^self class signalOperationOnExpiredCart].
! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 19:39:45'!
isExpired: aCartID

	^true.
! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 19:40:15' prior: 50890317!
isExpired: aCartID

	^(self activeDuration: aCartID) > maxTime.
! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 19:40:18' prior: 50890321!
isExpired: aCartID
	^(self activeDuration: aCartID) > maxTime.
! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 19:42:14' prior: 50890059!
addToCart: aCartID item: anItem quantity: aQuantity 

	| cartContainer |
	cartContainer := carts at: aCartID.
	
	self assertExpiredCart: aCartID .
	self markLastUsed: aCartID.
	
.	(cartContainer at: 1) add: aQuantity of: anItem.
	! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 19:42:29' prior: 50886708!
listCart: aCartID 

	self assertExpiredCart: aCartID.
	
	^(carts at: aCartID) items! !

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 19:42:37'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotListCartToAnExpiredCart stamp: 'db 11/30/2020 19:42:41'!
PASSED!
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 19:42:57'!
test02CannotCheckoutToAnExpiredCart

	| ui cartID todaySimulator |
	
	todaySimulator := DateSimulator new.
	todaySimulator today: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator today: ( (todaySimulator today) next: (TimeUnits minute with: 35) ).
	
	
	self 
	should: [ui listCart: cartID.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 19:43:15'!
test03CannotCheckoutToAnExpiredCart

	| ui cartID todaySimulator |
	
	todaySimulator := DateSimulator new.
	todaySimulator today: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator today: ( (todaySimulator today) next: (TimeUnits minute with: 35) ).
	
	
	self 
	should: [ui listCart: cartID.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !

!methodRemoval: UserInterfaceTest #test02CannotCheckoutToAnExpiredCart stamp: 'db 11/30/2020 19:43:15'!
test02CannotCheckoutToAnExpiredCart

	| ui cartID todaySimulator |
	
	todaySimulator := DateSimulator new.
	todaySimulator today: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator today: ( (todaySimulator today) next: (TimeUnits minute with: 35) ).
	
	
	self 
	should: [ui listCart: cartID.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
!
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 19:44:35' prior: 50890384!
test03CannotCheckoutToAnExpiredCart

	| ui cartID todaySimulator |
	
	todaySimulator := DateSimulator new.
	todaySimulator today: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator today: ( (todaySimulator today) next: (TimeUnits minute with: 35) ).
	
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.
	
	self 
	should: [ | creditCard |ui checkout: cartID charging: creditCard.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 19:45:19' prior: 50890442!
test03CannotCheckoutToAnExpiredCart

	| ui cartID todaySimulator creditCard |
	
	todaySimulator := DateSimulator new.
	todaySimulator today: GregorianDateTime now. 
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator today: ( (todaySimulator today) next: (TimeUnits minute with: 35) ).
	
	
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.
	
	self 
	should: [ ui checkout: cartID charging: creditCard.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 19:45:22' prior: 50890475!
test03CannotCheckoutToAnExpiredCart

	| ui cartID todaySimulator creditCard |
	
	todaySimulator := DateSimulator new.
	todaySimulator today: GregorianDateTime now. 
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator today: ( (todaySimulator today) next: (TimeUnits minute with: 35) ).
	
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.
	
	self 
	should: [ ui checkout: cartID charging: creditCard.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !

!testRun: #UserInterfaceTest #test03CannotCheckoutToAnExpiredCart stamp: 'db 11/30/2020 19:45:25'!
ERROR!

!testRun: #UserInterfaceTest #test03CannotCheckoutToAnExpiredCart stamp: 'db 11/30/2020 19:45:25'!
ERROR!
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 19:45:49' prior: 50890510!
test03CannotCheckoutToAnExpiredCart

	| ui cartID todaySimulator creditCard |
	
	todaySimulator := DateSimulator new.
	todaySimulator today: GregorianDateTime now. 
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.
	
	todaySimulator today: ( (todaySimulator today) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ ui checkout: cartID charging: creditCard.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !

!testRun: #UserInterfaceTest #test03CannotCheckoutToAnExpiredCart stamp: 'db 11/30/2020 19:45:53'!
ERROR!

!testRun: #UserInterfaceTest #test03CannotCheckoutToAnExpiredCart stamp: 'db 11/30/2020 19:45:53'!
ERROR!

Object subclass: #UserInterface
	instanceVariableNames: 'authenticator carts catalog salesBook merchantProcessor cashier today clock maxTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #UserInterface category: 'TusLibros' stamp: 'db 11/30/2020 19:54:36'!
Object subclass: #UserInterface
	instanceVariableNames: 'authenticator carts catalog salesBook merchantProcessor cashier today clock maxTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 19:55:39' prior: 50889988!
activeDuration: aCartID

	| cartContainer |
	cartContainer := carts at: aCartID.
	
	^ ((self lastTimeMarkOf: cartContainer) distanceTo: clock currentTime) convertTo: minute.
! !
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 19:57:50' prior: 50889244!
createCartFor: aClientID withPassword: aPassword 

	| cart |
	(authenticator validate: aClientID password: aPassword) ifFalse: [^self class signalInvalidClient ].
	" Duda: un cliente puede tener m�s de un carrito? "
	cart := Cart acceptingItemsOf: catalog.
	carts at: 1 put: (Array with: cart with: clock now).
	
	"salesBook at: aClientID put: cart."
	^1
	
	
	! !
!UserInterface methodsFor: 'private' stamp: 'db 11/30/2020 19:58:48' prior: 50890022!
markLastUsed: aCartID

	| cartContainer |
	cartContainer := carts at: aCartID.
	(cartContainer at: 2 put: clock now).
	! !

!classDefinition: #DateSimulator category: 'TusLibros' stamp: 'db 11/30/2020 19:59:19'!
Object subclass: #DateSimulator
	instanceVariableNames: 'today now'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!DateSimulator methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 19:59:14'!
now
	^now! !
!DateSimulator methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 19:59:30'!
now: aDate
	now := aDate ! !

!methodRemoval: DateSimulator #today stamp: 'db 11/30/2020 19:59:36'!
today
	^today!

!methodRemoval: DateSimulator #today: stamp: 'db 11/30/2020 19:59:40'!
today: aDate
	today := aDate !

Object subclass: #DateSimulator
	instanceVariableNames: 'now'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #DateSimulator category: 'TusLibros' stamp: 'db 11/30/2020 19:59:53'!
Object subclass: #DateSimulator
	instanceVariableNames: 'now'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 20:01:16'!
ERROR!

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 20:01:16'!
ERROR!
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 20:01:46' prior: 50890106!
test01CannotAddToCartToAnExpiredCart

	| ui cartID todaySimulator |
	
	todaySimulator := DateSimulator new.
	todaySimulator now: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator now: ( (todaySimulator today) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 20:01:48'!
ERROR!

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 20:06:29'!
ERROR!
!UserInterface methodsFor: 'initialization' stamp: 'db 11/30/2020 20:07:14' prior: 50889938!
initalizeWith: anAuthenticator catalog: aCatalog throught: aMerchantProcessor on: aDate timeService: aTimeService

	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	catalog := aCatalog.
	carts := Dictionary new.
	today := aDate .
	salesBook := Dictionary new.
	clock := aTimeService.
	maxTime := (SimpleMeasure amount: 30 unit: minute).
! !

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 20:07:22'!
ERROR!

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 20:07:22'!
ERROR!
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 20:07:33' prior: 50890677!
test01CannotAddToCartToAnExpiredCart

	| ui cartID todaySimulator |
	
	todaySimulator := DateSimulator new.
	todaySimulator now: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator now: ( (todaySimulator now) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 20:07:34'!
ERROR!
!UserInterface methodsFor: 'operations' stamp: 'db 11/30/2020 20:07:44' prior: 50890608!
activeDuration: aCartID

	| cartContainer |
	cartContainer := carts at: aCartID.
	
	^ ((self lastTimeMarkOf: cartContainer) distanceTo: clock now) convertTo: minute.
! !

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 20:07:55'!
PASSED!

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 20:08:00'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotListCartToAnExpiredCart stamp: 'db 11/30/2020 20:08:03'!
ERROR!

!testRun: #UserInterfaceTest #test02CannotListCartToAnExpiredCart stamp: 'db 11/30/2020 20:08:03'!
ERROR!
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 20:19:50' prior: 50890226!
test02CannotListCartToAnExpiredCart

	| ui cartID todaySimulator |
	
	todaySimulator := DateSimulator new.
	todaySimulator now: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator now: ( (todaySimulator today) next: (TimeUnits minute with: 35) ).
	
	
	self 
	should: [ui listCart: cartID.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !

!testRun: #UserInterfaceTest #test02CannotListCartToAnExpiredCart stamp: 'db 11/30/2020 20:19:53'!
ERROR!
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 20:20:02' prior: 50890792!
test02CannotListCartToAnExpiredCart

	| ui cartID todaySimulator |
	
	todaySimulator := DateSimulator new.
	todaySimulator now: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator now: ( (todaySimulator now) next: (TimeUnits minute with: 35) ).
	
	
	self 
	should: [ui listCart: cartID.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !

!testRun: #UserInterfaceTest #test02CannotListCartToAnExpiredCart stamp: 'db 11/30/2020 20:20:04'!
PASSED!
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 20:20:15' prior: 50890551!
test03CannotCheckoutToAnExpiredCart

	| ui cartID todaySimulator creditCard |
	
	todaySimulator := DateSimulator new.
	todaySimulator now: GregorianDateTime now. 
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.
	
	todaySimulator now: ( (todaySimulator today) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ ui checkout: cartID charging: creditCard.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 20:20:18' prior: 50890857!
test03CannotCheckoutToAnExpiredCart

	| ui cartID todaySimulator creditCard |
	
	todaySimulator := DateSimulator new.
	todaySimulator now: GregorianDateTime now. 
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.
	
	todaySimulator now: ( (todaySimulator now) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ ui checkout: cartID charging: creditCard.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 20:20:22'!
PASSED!

!testRun: #UserInterfaceTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/30/2020 20:20:22'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/30/2020 20:20:22'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotListCartToAnExpiredCart stamp: 'db 11/30/2020 20:20:22'!
PASSED!

!testRun: #UserInterfaceTest #test03CannotCheckoutToAnExpiredCart stamp: 'db 11/30/2020 20:20:22'!
ERROR!

!testRun: #UserInterfaceTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/30/2020 20:20:22'!
ERROR!

!testRun: #UserInterfaceTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 11/30/2020 20:20:22'!
ERROR!

!testRun: #UserInterfaceTest #test05AfterRequestingToAddMoreThanOneItemTheCartDisplaysTheCorrectAmountOfItems stamp: 'db 11/30/2020 20:20:22'!
ERROR!

!testRun: #UserInterfaceTest #test06 stamp: 'db 11/30/2020 20:20:22'!
ERROR!

!testRun: #UserInterfaceTest #test06Many stamp: 'db 11/30/2020 20:20:22'!
ERROR!

!testRun: #UserInterfaceTest #test06One stamp: 'db 11/30/2020 20:20:22'!
ERROR!

!testRun: #UserInterfaceTest #test03CannotCheckoutToAnExpiredCart stamp: 'db 11/30/2020 20:20:30'!
ERROR!

!testRun: #UserInterfaceTest #test03CannotCheckoutToAnExpiredCart stamp: 'db 11/30/2020 20:20:30'!
ERROR!

!testRun: #UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 20:20:40'!
PASSED!

!testRun: #UserInterfaceTest #test02CannotListCartToAnExpiredCart stamp: 'db 11/30/2020 20:20:45'!
PASSED!

----SNAPSHOT----(30 November 2020 20:21:54) CuisUniversity-4384.image priorSource: 17857216!

----QUIT----(30 November 2020 20:21:56) CuisUniversity-4384.image priorSource: 17898366!

----STARTUP---- (30 November 2020 22:02:43) as /Users/dbenitez/uba/2c2020-IS1/IS1-Trabajos/20-TusLibros/macos64-TusLibros/CuisUniversity-4384.image!


TestCase subclass: #InternalFacadeTest
	instanceVariableNames: 'testObjectsFactory '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalFacadeTest category: 'TusLibros' stamp: 'db 11/30/2020 22:03:21'!
TestCase subclass: #InternalFacadeTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalFacadeTest methodsFor: 'nil' stamp: 'db 11/30/2020 22:03:46'!
test01NewCartsAreCreatedEmpty! !
!InternalFacadeTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 22:04:38'!
test02CreateCartMustAuthenticateUser! !
!InternalFacadeTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 22:05:07'!
test03CannotAddToCartWithInvalidCartID! !
!InternalFacadeTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 22:05:46'!
test04ValidItemIsAddedToCart! !
!InternalFacadeTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 22:06:22'!
test05CannotCheckoutCartWithAnInvalidCartID! !
!InternalFacadeTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 22:06:57'!
test06CheckoutCartSotresPurchases! !

!classDefinition: #InternalApi category: 'TusLibros' stamp: 'db 11/30/2020 22:09:21'!
Object subclass: #InternalApi
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalFacadeTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 22:09:13' prior: 50890998!
test01NewCartsAreCreatedEmpty

	| interface |
	interface := InternalApi! !

!classDefinition: #InternalFacadeTest category: 'TusLibros' stamp: 'db 11/30/2020 22:10:12'!
TestCase subclass: #InternalFacadeTest
	instanceVariableNames: 'testObjectsFactory testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalFacadeTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 22:10:07' prior: 50891032!
test01NewCartsAreCreatedEmpty

	| interface |
	interface := InternalApi withAuthenticator: self andCatalog: testObjectFactory defaultCatalog.! !

!classRenamed: #InternalFacadeTest as: #InternalApiTest stamp: 'db 11/30/2020 22:10:42'!
Smalltalk renameClassNamed: #InternalFacadeTest as: #InternalApiTest!
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 22:14:13' prior: 50891046!
test01NewCartsAreCreatedEmpty

	| apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self andMerchantProcessor: self andCatalog: testObjectFactory usingThisClock self.
	
	cartID := apiCaller createCartForClient: 'aClient' withPassword: 'anInvalidPassword'.
	
	self assert: (apiCaller listCart: cartID) isEmpty. 
	! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 22:14:41'!
_test02CreateCartMustAuthenticateUser! !

!methodRemoval: InternalApiTest #test02CreateCartMustAuthenticateUser stamp: 'db 11/30/2020 22:14:41'!
test02CreateCartMustAuthenticateUser!
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 22:14:47'!
_test03CannotAddToCartWithInvalidCartID! !

!methodRemoval: InternalApiTest #test03CannotAddToCartWithInvalidCartID stamp: 'db 11/30/2020 22:14:47'!
test03CannotAddToCartWithInvalidCartID!
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 22:14:54'!
_test04ValidItemIsAddedToCart! !

!methodRemoval: InternalApiTest #test04ValidItemIsAddedToCart stamp: 'db 11/30/2020 22:14:54'!
test04ValidItemIsAddedToCart!
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 22:15:00'!
_test05CannotCheckoutCartWithAnInvalidCartID! !

!methodRemoval: InternalApiTest #test05CannotCheckoutCartWithAnInvalidCartID stamp: 'db 11/30/2020 22:15:00'!
test05CannotCheckoutCartWithAnInvalidCartID!
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 22:15:06'!
_test06CheckoutCartSotresPurchases! !

!methodRemoval: InternalApiTest #test06CheckoutCartSotresPurchases stamp: 'db 11/30/2020 22:15:06'!
test06CheckoutCartSotresPurchases!
!InternalApiTest methodsFor: 'testing' stamp: 'db 11/30/2020 22:15:49' prior: 50891059!
test01NewCartsAreCreatedEmpty

	| apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self.
	
	cartID := apiCaller createCartForClient: 'aClient' withPassword: 'anInvalidPassword'.
	
	self assert: (apiCaller listCart: cartID) isEmpty. 
	! !
!InternalApiTest methodsFor: 'doubles methods' stamp: 'db 11/30/2020 22:18:08'!
authenticate: aClient withPassword: aPassword
	^false.! !
!InternalApiTest methodsFor: 'doubles methods' stamp: 'db 11/30/2020 22:22:36'!
isThisClientValid: aClient withPassword: aPassword
	^false.! !

!methodRemoval: InternalApiTest #isThisClientValid:withPassword: stamp: 'db 11/30/2020 22:24:57'!
isThisClientValid: aClient withPassword: aPassword
	^false.!
!InternalApiTest methodsFor: 'testing' stamp: 'db 11/30/2020 22:25:37' prior: 50891116!
test01NewCartsAreCreatedEmpty

	| apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self.
	
	cartID := apiCaller createCartFor: 'aClient' withPassword: 'anInvalidPassword'.
	
	self assert: (apiCaller listCart: cartID) isEmpty. 
	! !

!testRun: #InternalApiTest #test01NewCartsAreCreatedEmpty stamp: 'db 11/30/2020 22:26:24'!
ERROR!

!testRun: #InternalApiTest #test01NewCartsAreCreatedEmpty stamp: 'db 11/30/2020 22:26:24'!
ERROR!
!InternalApi class methodsFor: 'instance creation' stamp: 'db 11/30/2020 22:26:37'!
withAuthenticator: anInternalApiTest 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithAuthenticator: anInternalApiTest ! !
!InternalApi class methodsFor: 'instance creation' stamp: 'db 11/30/2020 22:26:59' prior: 50891159!
withAuthenticator: anAuthenticator 
	
	^self new initializeWithAuthenticator: anAuthenticator ! !

!testRun: #InternalApiTest #test01NewCartsAreCreatedEmpty stamp: 'db 11/30/2020 22:27:00'!
ERROR!

!classDefinition: #InternalApi category: 'TusLibros' stamp: 'db 11/30/2020 22:28:44'!
Object subclass: #InternalApi
	instanceVariableNames: 'authenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalApi methodsFor: 'initialization' stamp: 'db 11/30/2020 22:28:44'!
initializeWithAuthenticator: anAuthenticator 
	self shouldBeImplemented.
	authenticator := anAuthenticator.! !
!InternalApi methodsFor: 'initialization' stamp: 'db 11/30/2020 22:28:50' prior: 50891185!
initializeWithAuthenticator: anAuthenticator 
	authenticator := anAuthenticator.! !

!testRun: #InternalApiTest #test01NewCartsAreCreatedEmpty stamp: 'db 11/30/2020 22:28:52'!
ERROR!
!InternalApi methodsFor: 'interface' stamp: 'db 11/30/2020 22:29:18'!
createCartFor: aString withPassword: aString2 
	self shouldBeImplemented.! !
!InternalApi methodsFor: 'interface' stamp: 'db 11/30/2020 22:30:31' prior: 50891200!
createCartFor: aClient withPassword: aPassword

	authenticator authenticate: aClient withPassword: aPassword ifFalse: [self class signalNonAuthenticatedClient].! !

!testRun: #InternalApiTest #test01NewCartsAreCreatedEmpty stamp: 'db 11/30/2020 22:30:44'!
ERROR!
!InternalApi methodsFor: 'interface' stamp: 'db 11/30/2020 22:31:31' prior: 50891206!
createCartFor: aClient withPassword: aPassword

	(authenticator authenticate: aClient withPassword: aPassword) ifFalse: [self class signalNonAuthenticatedClient].! !
!InternalApi class methodsFor: 'instance creation' stamp: 'db 11/30/2020 22:32:03'!
signalNonAuthenticatedClient
	
	^self error: self nonAuthenticatedClientErrorDescription! !
!InternalApi class methodsFor: 'instance creation' stamp: 'db 11/30/2020 22:32:19'!
nonAuthenticatedClientErrorDescription
	
	^'Non authenticated client'! !
!InternalApi class methodsFor: 'instance creation' stamp: 'db 11/30/2020 22:32:22' prior: 50891231!
nonAuthenticatedClientErrorDescription
	^'Non authenticated client'! !

!testRun: #InternalApiTest #test01NewCartsAreCreatedEmpty stamp: 'db 11/30/2020 22:32:32'!
ERROR!

!testRun: #InternalApiTest #test01NewCartsAreCreatedEmpty stamp: 'db 11/30/2020 22:32:32'!
ERROR!
!InternalApiTest methodsFor: 'doubles methods' stamp: 'db 11/30/2020 22:33:45' prior: 50891127!
authenticate: aClient withPassword: aPassword
	^true.! !

!testRun: #InternalApiTest #test01NewCartsAreCreatedEmpty stamp: 'db 11/30/2020 22:33:55'!
ERROR!

!testRun: #InternalApiTest #test01NewCartsAreCreatedEmpty stamp: 'db 11/30/2020 22:33:55'!
ERROR!
!InternalApi methodsFor: 'interface' stamp: 'db 11/30/2020 22:34:06'!
listCart: anInternalApi 
	self shouldBeImplemented.! !
!InternalApi methodsFor: 'interface' stamp: 'db 11/30/2020 22:34:15' prior: 50891260!
listCart: anInternalApi 
	^OrderedCollection new.! !

!testRun: #InternalApiTest #test01NewCartsAreCreatedEmpty stamp: 'db 11/30/2020 22:34:16'!
PASSED!

!testRun: #InternalApiTest #test01NewCartsAreCreatedEmpty stamp: 'db 11/30/2020 22:34:19'!
PASSED!

----SNAPSHOT----(30 November 2020 23:13:12) CuisUniversity-4384.image priorSource: 17898460!

!testRun: #InternalApiTest #test01NewCartsAreCreatedEmpty stamp: 'db 11/30/2020 23:13:28'!
PASSED!
!InternalApiTest methodsFor: 'testing' stamp: 'db 11/30/2020 23:14:09' prior: 50891142!
test01NewCartsAreCreatedEmpty

	| apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self.
	
	cartID := apiCaller createCartFor: 'aClient' withPassword: 'anInvalidPassword'.
	
	self assert: (apiCaller listCart: cartID) isEmpty. 
	
	"

	| ui aClientID aPassword |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: timeService .
	
	aClientID := 'qwerty3'.
	aPassword := '123oweE'.
	
	self 
	should: [ui createCartFor: aClientID withPassword: aPassword] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]"! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 11/30/2020 23:14:22'!
test01CannotCreateACartWithAnInvalidUserID

	| apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self.
	
	cartID := apiCaller createCartFor: 'aClient' withPassword: 'anInvalidPassword'.
	
	self assert: (apiCaller listCart: cartID) isEmpty. 
	
	"

	| ui aClientID aPassword |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: timeService .
	
	aClientID := 'qwerty3'.
	aPassword := '123oweE'.
	
	self 
	should: [ui createCartFor: aClientID withPassword: aPassword] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]"! !

!methodRemoval: InternalApiTest #test01NewCartsAreCreatedEmpty stamp: 'db 11/30/2020 23:14:22'!
test01NewCartsAreCreatedEmpty

	| apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self.
	
	cartID := apiCaller createCartFor: 'aClient' withPassword: 'anInvalidPassword'.
	
	self assert: (apiCaller listCart: cartID) isEmpty. 
	
	"

	| ui aClientID aPassword |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: timeService .
	
	aClientID := 'qwerty3'.
	aPassword := '123oweE'.
	
	self 
	should: [ui createCartFor: aClientID withPassword: aPassword] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[
		:anError | 
		self assert: anError messageText = UserInterface invalidClientErrorMessage.]"!
!InternalApiTest methodsFor: 'testing' stamp: 'db 11/30/2020 23:15:24' overrides: 16927572!
setUp! !

TestCase subclass: #InternalApiTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalApiTest category: 'TusLibros' stamp: 'db 11/30/2020 23:16:04'!
TestCase subclass: #InternalApiTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalApiTest category: 'TusLibros' stamp: 'db 11/30/2020 23:16:15'!
TestCase subclass: #InternalApiTest
	instanceVariableNames: 'testObjectFactory testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #InternalApiTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalApiTest category: 'TusLibros' stamp: 'db 11/30/2020 23:16:38'!
TestCase subclass: #InternalApiTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalApiTest methodsFor: 'setUp/tearDown' stamp: 'db 11/30/2020 23:16:53' prior: 50891358 overrides: 16927572!
setUp

	testObjectFactory := StoreTestObjectsFactory new.! !
!StoreTestObjectsFactory methodsFor: 'client' stamp: 'db 11/30/2020 23:19:35'!
invalidClientID
	^Object new.
	
	! !
!StoreTestObjectsFactory methodsFor: 'client' stamp: 'db 11/30/2020 23:19:45'!
invalidPassword
	^Object new.
	
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 11/30/2020 23:21:56' prior: 50891307!
test01CannotCreateACartWithAnInvalidUserID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self.

	self should: 
		[apiCaller createCartFor: testObjectFactory invalidClientID  withPassword: testObjectFactory invalidPassword.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: 
		[:anError |  self assert: anError messageText = InternalApi invalidClientErrorMessage ]! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 11/30/2020 23:23:07' prior: 50891408!
test01CannotCreateACartWithAnInvalidUserID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self.

	self 
		should: [apiCaller 
			createCartFor: testObjectFactory invalidClientID  
			withPassword: testObjectFactory invalidPassword.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi invalidClientErrorMessage ]
	! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/30/2020 23:23:11'!
FAILURE!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/30/2020 23:23:11'!
FAILURE!
!InternalApiTest methodsFor: 'doubles methods' stamp: 'db 11/30/2020 23:23:40' prior: 50891249!
authenticate: aClient withPassword: aPassword
	^false.! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/30/2020 23:23:42'!
ERROR!
!InternalApi class methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 23:24:05'!
invalidClientErrorMessage
	self shouldBeImplemented.! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 11/30/2020 23:24:50' prior: 50891423!
test01CannotCreateACartWithAnInvalidUserID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self.

	self 
		should: [apiCaller 
			createCartFor: testObjectFactory invalidClientID  
			withPassword: testObjectFactory invalidPassword.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	! !

!methodRemoval: InternalApi class #invalidClientErrorMessage stamp: 'db 11/30/2020 23:25:07'!
invalidClientErrorMessage
	self shouldBeImplemented.!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/30/2020 23:25:18'!
PASSED!
!InternalApiTest methodsFor: 'testing' stamp: 'db 11/30/2020 23:25:36'!
test02CannotCreateACartWithAnInvalidPassword

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self.

	self 
		should: [apiCaller 
			createCartFor: testObjectFactory invalidClientID  
			withPassword: testObjectFactory invalidPassword.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 11/30/2020 23:25:56' prior: 50891483!
test02CannotCreateACartWithAnInvalidPassword

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self.

	self 
		should: [apiCaller 
			createCartFor: testObjectFactory defaultClientID  
			withPassword: testObjectFactory invalidPassword.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	! !

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/30/2020 23:26:05'!
PASSED!

!classDefinition: #InternalApiTest category: 'TusLibros' stamp: 'db 11/30/2020 23:27:18'!
TestCase subclass: #InternalApiTest
	instanceVariableNames: 'testObjectFactory authenticatedClients'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalApiTest methodsFor: 'setUp/tearDown' stamp: 'db 11/30/2020 23:28:26' prior: 50891395 overrides: 16927572!
setUp

	testObjectFactory := StoreTestObjectsFactory new.
	
	authenticatedClients := Dictionary new.
	authenticatedClients at: testObjectFactory defaultClientID put: testObjectFactory defaultPassword.! !
!InternalApiTest methodsFor: 'doubles methods' stamp: 'db 11/30/2020 23:30:18' prior: 50891446!
authenticate: aClientID withPassword: aPassword

	| password |
	[password := authenticatedClients at: aClientID] on: Error do: [:anError | ^false].
	
	^password = aPassword .! !
!InternalApiTest methodsFor: 'doubles methods' stamp: 'db 11/30/2020 23:30:24' prior: 50891538!
authenticate: aClientID withPassword: aPassword

	| password |
	[password := authenticatedClients at: aClientID] on: Error do: [:anError | ^false].
	^password = aPassword .! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/30/2020 23:30:57'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/30/2020 23:30:57'!
PASSED!
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 23:32:19'!
test10CannotAddToCartToAnExpiredCart

	| ui cartID todaySimulator |
	
	todaySimulator := DateSimulator new.
	todaySimulator now: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator now: ( (todaySimulator now) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !

!methodRemoval: UserInterfaceTest #test01CannotAddToCartToAnExpiredCart stamp: 'db 11/30/2020 23:32:19'!
test01CannotAddToCartToAnExpiredCart

	| ui cartID todaySimulator |
	
	todaySimulator := DateSimulator new.
	todaySimulator now: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator now: ( (todaySimulator now) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
!
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 23:32:27'!
test11CannotListCartToAnExpiredCart

	| ui cartID todaySimulator |
	
	todaySimulator := DateSimulator new.
	todaySimulator now: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator now: ( (todaySimulator now) next: (TimeUnits minute with: 35) ).
	
	
	self 
	should: [ui listCart: cartID.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !

!methodRemoval: UserInterfaceTest #test02CannotListCartToAnExpiredCart stamp: 'db 11/30/2020 23:32:27'!
test02CannotListCartToAnExpiredCart

	| ui cartID todaySimulator |
	
	todaySimulator := DateSimulator new.
	todaySimulator now: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator now: ( (todaySimulator now) next: (TimeUnits minute with: 35) ).
	
	
	self 
	should: [ui listCart: cartID.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
!
!UserInterfaceTest methodsFor: 'time limit testing' stamp: 'db 11/30/2020 23:32:35'!
test12CannotCheckoutToAnExpiredCart

	| ui cartID todaySimulator creditCard |
	
	todaySimulator := DateSimulator new.
	todaySimulator now: GregorianDateTime now. 
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.
	
	todaySimulator now: ( (todaySimulator now) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ ui checkout: cartID charging: creditCard.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !

!methodRemoval: UserInterfaceTest #test03CannotCheckoutToAnExpiredCart stamp: 'db 11/30/2020 23:32:35'!
test03CannotCheckoutToAnExpiredCart

	| ui cartID todaySimulator creditCard |
	
	todaySimulator := DateSimulator new.
	todaySimulator now: GregorianDateTime now. 
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.
	
	todaySimulator now: ( (todaySimulator now) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ ui checkout: cartID charging: creditCard.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
!

----SNAPSHOT----(30 November 2020 23:33:20) CuisUniversity-4384.image priorSource: 17907996!
!InternalApiTest methodsFor: 'testing' stamp: 'db 11/30/2020 23:34:30'!
test03NewCartsAreCreatedEmpty! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 11/30/2020 23:35:03' prior: 50891459!
test01CannotCreateACartWithAnInvalidUserID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self.

	self 
		should: [apiCaller 
			createCartFor: testObjectFactory invalidClientID  
			withPassword: testObjectFactory invalidPassword.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 11/30/2020 23:35:30' prior: 50891751!
test03NewCartsAreCreatedEmpty

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self.! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 11/30/2020 23:36:08' prior: 50891771!
test03NewCartsAreCreatedEmpty

	| apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 11/30/2020 23:36:52' prior: 50891777!
test03NewCartsAreCreatedEmpty

	| apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	self assert: (apiCaller listCart: cartID) isEmpty.
	
	! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/30/2020 23:36:57'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/30/2020 23:36:57'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/30/2020 23:36:57'!
PASSED!
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 23:39:25'!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

	"| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: timeService.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .

	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1. 
	
	items := ui listCart: cartID.
	
	self assert: 1 equals: items size.
	self assert: testObjectsFactory itemSellByTheStore equals: (items at: 1)."! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 11/30/2020 23:39:50' prior: 50891810!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

|	 apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	self assert: (apiCaller listCart: cartID) isEmpty.

	"| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: timeService.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .

	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1. 
	
	items := ui listCart: cartID.
	
	self assert: 1 equals: items size.
	self assert: testObjectsFactory itemSellByTheStore equals: (items at: 1)."! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 11/30/2020 23:41:23' prior: 50891831!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

|	 apiCaller cartID items |
	apiCaller := InternalApi withAuthenticator: self.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	apiCaller addToCart: cartID item: testObjectFactory itemSellByTheStore quantity: 1.
	items := apiCaller listCart: cartID.
	
	self assert: (apiCaller listCart: cartID) isNotEmpty.
	
	

	"| ui cartID items |
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: timeService.

	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword .

	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1. 
	
	items := ui listCart: cartID.
	
	self assert: 1 equals: items size.
	self assert: testObjectsFactory itemSellByTheStore equals: (items at: 1)."! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 11/30/2020 23:43:00' prior: 50891860!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

|	 apiCaller cartID items |
	apiCaller := InternalApi withAuthenticator: self.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	apiCaller addToCart: cartID item: testObjectFactory itemSellByTheStore quantity: 1.
	items := apiCaller listCart: cartID.
	
	self deny: items isEmpty.
	self assert: testObjectFactory itemSellByTheStore equals: items first.! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/30/2020 23:43:03'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/30/2020 23:43:03'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/30/2020 23:43:03'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 11/30/2020 23:43:03'!
ERROR!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 11/30/2020 23:43:03'!
ERROR!
!InternalApi methodsFor: 'interface' stamp: 'db 11/30/2020 23:43:21'!
addToCart: anInternalApi item: aString quantity: aSmallInteger 
	self shouldBeImplemented.! !
!InternalApi methodsFor: 'interface' stamp: 'db 11/30/2020 23:44:37' prior: 50891929!
addToCart: aCartID item: anITem quantity: quantity

	 
! !

!classDefinition: #InternalApi category: 'TusLibros' stamp: 'db 11/30/2020 23:46:42'!
Object subclass: #InternalApi
	instanceVariableNames: 'authenticator catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalApi category: 'TusLibros' stamp: 'db 11/30/2020 23:46:47'!
Object subclass: #InternalApi
	instanceVariableNames: 'authenticator catalog carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalApi methodsFor: 'interface' stamp: 'db 11/30/2020 23:46:41' prior: 50891217!
createCartFor: aClientID withPassword: aPassword

	| cart |
	(authenticator authenticate: aClientID withPassword: aPassword) ifFalse: [self class signalNonAuthenticatedClient].	
	
	" Duda: un cliente puede tener m�s de un carrito? "
	cart := Cart acceptingItemsOf: catalog.
	carts at: self nextID put: cart.! !

!classDefinition: #InternalApi category: 'TusLibros' stamp: 'db 11/30/2020 23:47:33'!
Object subclass: #InternalApi
	instanceVariableNames: 'authenticator catalog carts lastID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalApi methodsFor: 'privates' stamp: 'db 11/30/2020 23:47:31'!
nextID
	lastID := lastID +1.
	^lastID.! !

!classDefinition: #InternalApi category: 'TusLibros' stamp: 'db 11/30/2020 23:47:50'!
Object subclass: #InternalApi
	instanceVariableNames: 'authenticator catalog carts lastID nextID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalApi methodsFor: 'initialization' stamp: 'db 11/30/2020 23:47:48' prior: 50891192!
initializeWithAuthenticator: anAuthenticator 
	authenticator := anAuthenticator.
	nextID := 1.! !

!classDefinition: #InternalApi category: 'TusLibros' stamp: 'db 11/30/2020 23:48:08'!
Object subclass: #InternalApi
	instanceVariableNames: 'authenticator catalog carts lastID nextID sequence'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalApi methodsFor: 'initialization' stamp: 'db 11/30/2020 23:48:07' prior: 50891988!
initializeWithAuthenticator: anAuthenticator 
	authenticator := anAuthenticator.
	sequence := 1.! !

Object subclass: #InternalApi
	instanceVariableNames: 'authenticator catalog carts sequence'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalApi category: 'TusLibros' stamp: 'db 11/30/2020 23:48:22'!
Object subclass: #InternalApi
	instanceVariableNames: 'authenticator catalog carts sequence'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalApi methodsFor: 'privates' stamp: 'db 11/30/2020 23:48:32' prior: 50891975!
nextID
	sequence := sequence +1.
	^sequence.! !
!InternalApi methodsFor: 'interface' stamp: 'db 11/30/2020 23:49:17' prior: 50891955!
createCartFor: aClientID withPassword: aPassword

	| cart cartID |
	(authenticator authenticate: aClientID withPassword: aPassword) ifFalse: [self class signalNonAuthenticatedClient].	
	
	" Duda: un cliente puede tener m�s de un carrito? "
	cart := Cart acceptingItemsOf: catalog.
	cartID := self nextID.
	carts at: cartID put: cart.
	^cartID.! !
!InternalApi methodsFor: 'interface' stamp: 'db 11/30/2020 23:49:37' prior: 50892027!
createCartFor: aClientID withPassword: aPassword

	| cart cartID |
	(authenticator authenticate: aClientID withPassword: aPassword) ifFalse: [self class signalNonAuthenticatedClient].	
	
	" Duda: un cliente puede tener m�s de un carrito activo? "
	cart := Cart acceptingItemsOf: catalog.
	cartID := self nextID.
	carts at: cartID put: cart.
	^cartID.! !
!InternalApi class methodsFor: 'instance creation' stamp: 'db 11/30/2020 23:50:38'!
withAuthenticator: anAuthenticator withCatalog: withCatalog  
	
	^self new initializeWithAuthenticator: anAuthenticator ! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 23:50:38' prior: 50891788!
test03NewCartsAreCreatedEmpty

	| apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self withCatalog: defatulCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	self assert: (apiCaller listCart: cartID) isEmpty.
	
	! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 23:50:38' prior: 50891893!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

|	 apiCaller cartID items |
	apiCaller := InternalApi withAuthenticator: self withCatalog: defatulCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	apiCaller addToCart: cartID item: testObjectFactory itemSellByTheStore quantity: 1.
	items := apiCaller listCart: cartID.
	
	self deny: items isEmpty.
	self assert: testObjectFactory itemSellByTheStore equals: items first.! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 23:50:38' prior: 50891755!
test01CannotCreateACartWithAnInvalidUserID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self withCatalog: defatulCatalog.

	self 
		should: [apiCaller 
			createCartFor: testObjectFactory invalidClientID  
			withPassword: testObjectFactory invalidPassword.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 23:50:38' prior: 50891499!
test02CannotCreateACartWithAnInvalidPassword

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self withCatalog: defatulCatalog.

	self 
		should: [apiCaller 
			createCartFor: testObjectFactory defaultClientID  
			withPassword: testObjectFactory invalidPassword.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	! !

!methodRemoval: InternalApi class #withAuthenticator: stamp: 'db 11/30/2020 23:50:38'!
withAuthenticator: anAuthenticator 
	
	^self new initializeWithAuthenticator: anAuthenticator !
!InternalApi class methodsFor: 'instance creation' stamp: 'db 11/30/2020 23:50:48' prior: 50892055!
withAuthenticator: anAuthenticator withCatalog: aCatalog  
	
	^self new initializeWithAuthenticator: anAuthenticator ! !
!InternalApi class methodsFor: 'instance creation' stamp: 'db 11/30/2020 23:51:09'!
withAuthenticator: anAuthenticator andCatalog: aCatalog  
	
	^self new initializeWithAuthenticator: anAuthenticator ! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 23:51:09' prior: 50892062!
test03NewCartsAreCreatedEmpty

	| apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self andCatalog: defatulCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	self assert: (apiCaller listCart: cartID) isEmpty.
	
	! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 23:51:09' prior: 50892095!
test01CannotCreateACartWithAnInvalidUserID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self andCatalog: defatulCatalog.

	self 
		should: [apiCaller 
			createCartFor: testObjectFactory invalidClientID  
			withPassword: testObjectFactory invalidPassword.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 23:51:09' prior: 50892075!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

|	 apiCaller cartID items |
	apiCaller := InternalApi withAuthenticator: self andCatalog: defatulCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	apiCaller addToCart: cartID item: testObjectFactory itemSellByTheStore quantity: 1.
	items := apiCaller listCart: cartID.
	
	self deny: items isEmpty.
	self assert: testObjectFactory itemSellByTheStore equals: items first.! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 23:51:09' prior: 50892112!
test02CannotCreateACartWithAnInvalidPassword

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self andCatalog: defatulCatalog.

	self 
		should: [apiCaller 
			createCartFor: testObjectFactory defaultClientID  
			withPassword: testObjectFactory invalidPassword.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	! !

!methodRemoval: InternalApi class #withAuthenticator:withCatalog: stamp: 'db 11/30/2020 23:51:09'!
withAuthenticator: anAuthenticator withCatalog: aCatalog  
	
	^self new initializeWithAuthenticator: anAuthenticator !
!InternalApi methodsFor: 'initialization' stamp: 'db 11/30/2020 23:51:46'!
initializeWithAuthenticator: anAuthenticator andCatalog: andCatalog  
	authenticator := anAuthenticator.
	sequence := 1.! !
!InternalApi class methodsFor: 'as yet unclassified' stamp: 'db 11/30/2020 23:51:46' prior: 50892142!
withAuthenticator: anAuthenticator andCatalog: aCatalog  
	
	^self new initializeWithAuthenticator: anAuthenticator andCatalog: andCatalog ! !

!methodRemoval: InternalApi #initializeWithAuthenticator: stamp: 'db 11/30/2020 23:51:46'!
initializeWithAuthenticator: anAuthenticator 
	authenticator := anAuthenticator.
	sequence := 1.!
!InternalApi methodsFor: 'initialization' stamp: 'db 11/30/2020 23:52:05' prior: 50892223!
initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog  
	authenticator := anAuthenticator.
	catalog := aCatalog.
	sequence := 1.! !
!InternalApi class methodsFor: 'instance creation' stamp: 'db 11/30/2020 23:52:19' prior: 50892231!
withAuthenticator: anAuthenticator andCatalog: aCatalog  
	
	^self new initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog.! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 11/30/2020 23:53:31' prior: 50892162!
test01CannotCreateACartWithAnInvalidUserID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self andCatalog: testObjectFactory defaultCatalog.

	self 
		should: [apiCaller 
			createCartFor: testObjectFactory invalidClientID  
			withPassword: testObjectFactory invalidPassword.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 11/30/2020 23:53:43' prior: 50892199!
test02CannotCreateACartWithAnInvalidPassword

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self andCatalog: testObjectFactory defaultCatalog.

	self 
		should: [apiCaller 
			createCartFor: testObjectFactory defaultClientID  
			withPassword: testObjectFactory invalidPassword.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 11/30/2020 23:53:48' prior: 50892149!
test03NewCartsAreCreatedEmpty

	| apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self andCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	self assert: (apiCaller listCart: cartID) isEmpty.
	
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 11/30/2020 23:53:53' prior: 50892179!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

|	 apiCaller cartID items |
	apiCaller := InternalApi withAuthenticator: self andCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	apiCaller addToCart: cartID item: testObjectFactory itemSellByTheStore quantity: 1.
	items := apiCaller listCart: cartID.
	
	self deny: items isEmpty.
	self assert: testObjectFactory itemSellByTheStore equals: items first.! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/30/2020 23:54:08'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/30/2020 23:54:08'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/30/2020 23:54:08'!
ERROR!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 11/30/2020 23:54:08'!
ERROR!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/30/2020 23:54:11'!
ERROR!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/30/2020 23:54:20'!
ERROR!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/30/2020 23:54:29'!
ERROR!
!InternalApi methodsFor: 'initialization' stamp: 'db 11/30/2020 23:55:32' prior: 50892245!
initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog  
	authenticator := anAuthenticator.
	catalog := aCatalog.
	sequence := 1.
	carts := Dictionary new.! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/30/2020 23:56:03'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/30/2020 23:56:03'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/30/2020 23:56:03'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 11/30/2020 23:56:03'!
FAILURE!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 11/30/2020 23:56:03'!
FAILURE!
!InternalApi methodsFor: 'interface' stamp: 'db 11/30/2020 23:57:12' prior: 50891265!
listCart: aCartID 
	
	^(carts at: aCartID) items! !
!InternalApi methodsFor: 'interface' stamp: 'db 11/30/2020 23:57:18' prior: 50892381!
listCart: aCartID 
	
	^(carts at: aCartID) items asBag ! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 11/30/2020 23:57:29'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 11/30/2020 23:57:29'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 11/30/2020 23:57:29'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 11/30/2020 23:57:29'!
FAILURE!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 11/30/2020 23:57:29'!
FAILURE!
!InternalApi methodsFor: 'interface' stamp: 'db 11/30/2020 23:59:28' prior: 50891935!
addToCart: aCartID item: anITem quantity: quantity

	| cart |
	cart := carts at: aCartID.
	
	cart add: quantity of: anITem.
	
	 
! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 00:01:21'!
add: aQuantity to: aCartID of: anItem
	| cart |
	cart := carts at: aCartID.
	
	cart add: aQuantity of: anItem.
	
	 
! !

!methodRemoval: InternalApi #addToCart:item:quantity: stamp: 'db 12/1/2020 00:01:27'!
addToCart: aCartID item: anITem quantity: quantity

	| cart |
	cart := carts at: aCartID.
	
	cart add: quantity of: anITem.
	
	 
!
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 00:02:11' prior: 50892311!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

|	 apiCaller cartID items |
	apiCaller := InternalApi withAuthenticator: self andCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore .
	items := apiCaller listCart: cartID.
	
	self deny: items isEmpty.
	self assert: testObjectFactory itemSellByTheStore equals: items first.! !

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 00:02:16'!
ERROR!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 00:02:16'!
ERROR!

(carts at: aCartID)!
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 00:04:27' prior: 50892430!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

|	 apiCaller cartID items |
	apiCaller := InternalApi withAuthenticator: self andCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore .
	items := apiCaller listCart: cartID.
	
	self deny: items isEmpty.
	
	self assert: items includes: testObjectFactory itemSellByTheStore.! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 00:04:30' prior: 50892458!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

|	 apiCaller cartID items |
	apiCaller := InternalApi withAuthenticator: self andCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore .
	items := apiCaller listCart: cartID.
	
	self deny: items isEmpty.
	self assert: items includes: testObjectFactory itemSellByTheStore.! !

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 00:04:32'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 00:04:36'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 00:04:36'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 00:04:36'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 00:04:36'!
PASSED!
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 00:07:38'!
test05CannotAddItemsToAnInvalidCartID

	| apiCaller cartID items |
	apiCaller := InternalApi withAuthenticator: self andCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore .
	items := apiCaller listCart: cartID.
	
	self deny: items isEmpty.
	self assert: items includes: testObjectFactory itemSellByTheStore.! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 00:07:46' prior: 50892514!
test05CannotAddItemsToAnInvalidCartID

	| apiCaller cartID items |
	apiCaller := InternalApi withAuthenticator: self andCatalog: testObjectFactory defaultCatalog.
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 00:08:16' prior: 50892533!
test05CannotAddItemsToAnInvalidCartID

	| apiCaller cartID items |
	apiCaller := InternalApi withAuthenticator: self andCatalog: testObjectFactory defaultCatalog.
	
	self 
		should: [apiCaller 
			createCartFor: testObjectFactory invalidClientID  
			withPassword: testObjectFactory invalidPassword.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 00:09:11' prior: 50892541!
test05CannotAddItemsToAnInvalidCartID

	| apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self andCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	self 
		should: [apiCaller add: 4 to: testObjectFactory invalidCartID of: testObjectFactory itemSellByTheStore ] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 00:09:43' prior: 50892559!
test05CannotAddItemsToAnInvalidCartID

	| apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self andCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	self 
		should: [apiCaller add: 4 to: testObjectFactory invalidCartID of: testObjectFactory itemSellByTheStore ] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription]
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 00:09:57' prior: 50892580!
test05CannotAddItemsToAnInvalidCartID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self andCatalog: testObjectFactory defaultCatalog.
	
	self 
		should: [apiCaller add: 4 to: testObjectFactory invalidCartID of: testObjectFactory itemSellByTheStore ] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription]
	! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'db 12/1/2020 00:10:21'!
invalidCartID
	
	^Object new.! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 00:10:41'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 00:10:41'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 00:10:41'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 00:10:41'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 00:10:41'!
ERROR!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 00:10:41'!
ERROR!
!InternalApi class methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 00:10:52'!
cartNotFoundErrorDescription
	self shouldBeImplemented.! !
!InternalApi class methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 00:11:05' prior: 50892641!
cartNotFoundErrorDescription
	^'cartID not found'! !

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 00:11:09'!
FAILURE!
!InternalApi class methodsFor: 'signals' stamp: 'db 12/1/2020 00:13:37'!
signalCartNotFound
	
	^self error: self cartNotFoundErrorDescription ! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 00:13:48'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 00:13:48'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 00:13:48'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 00:13:48'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 00:13:48'!
FAILURE!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 00:13:48'!
FAILURE!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 00:14:22'!
FAILURE!
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 00:17:32' prior: 50892416!
add: aQuantity to: aCartID of: anItem
	
	| cart |
	
	[cart := carts at: aCartID] on: Error do: [:anError | ^self class signalCartNotFound].
	
	cart add: aQuantity of: anItem.
	
	 
! !

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 00:18:18'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 00:18:50'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 00:19:06'!
PASSED!
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 00:20:40' prior: 50892684!
add: aQuantity to: aCartID of: anItem
	
	| cart |
	[cart := carts at: aCartID] on: Dictionary errorKeyNotFound do: [:anError | ^self class signalCartNotFound].
	
	cart add: aQuantity of: anItem.
	
	 
! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 00:20:43'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 00:20:43'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 00:20:43'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 00:20:43'!
ERROR!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 00:20:43'!
ERROR!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 00:20:53'!
ERROR!
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 00:21:22' prior: 50892703!
add: aQuantity to: aCartID of: anItem
	
	| cart |
	[cart := carts at: aCartID] on: Error do: [:anError | ^self class signalCartNotFound].
	
	cart add: aQuantity of: anItem.
	
	 
! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 00:21:33' prior: 50892734!
add: aQuantity to: aCartID of: anItem
	
	| cart |
	[cart := carts at: aCartID] on: Error do: [^self class signalCartNotFound].
	
	cart add: aQuantity of: anItem.
	
	 
! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 00:21:40'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 00:21:40'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 00:21:40'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 00:21:40'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 00:21:40'!
PASSED!
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 00:23:34' prior: 50892743!
add: aQuantity to: aCartID of: anItem
	
	| cart |
	
	cart := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	
	cart add: aQuantity of: anItem.
	
	 
! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 00:23:59'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 00:23:59'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 00:23:59'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 00:23:59'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 00:23:59'!
PASSED!
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 00:25:37'!
test06CannotCheckoutACartWithAnInvalidCartID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self andCatalog: testObjectFactory defaultCatalog.
	
	self 
		should: [apiCaller add: 4 to: testObjectFactory invalidCartID of: testObjectFactory itemSellByTheStore ] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription]
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 00:29:07' prior: 50892794!
test06CannotCheckoutACartWithAnInvalidCartID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self andCatalog: testObjectFactory defaultCatalog.
	
	self 
		should: [apiCaller 
			checkout: testObjectFactory invalidCartID 
			withCreditCardNumber: testObjectFactory defaultCreditCardNumber
			andCreditCardExpirationDate: testObjectFactory notExpiredDate
			andCreditCardOwner: testObjectFactory defaultCreditCardOwner] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription]
	! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'db 12/1/2020 00:29:54'!
defaultCreditCardNumber
	
	^'454678977878789'! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'db 12/1/2020 00:30:29'!
notExpiredDate
	
	^(Month month: today monthIndex year: today yearNumber + 1)! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'db 12/1/2020 00:30:58'!
defaultCreditCardOwner
	
	^'milhouse'! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 00:31:14'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 00:31:14'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 00:31:14'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 00:31:14'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 00:31:14'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 00:31:14'!
ERROR!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 00:31:14'!
ERROR!
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 00:31:24'!
checkout: anObject withCreditCardNumber: aString andCreditCardExpirationDate: aMonth andCreditCardOwner: aString4 
	self shouldBeImplemented.! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 00:32:00' prior: 50892871!
checkout: anObject withCreditCardNumber: aString andCreditCardExpirationDate: aMonth andCreditCardOwner: aString4 
	^self class signalCartNotFound ! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 00:32:28' prior: 50892879!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	^self class signalCartNotFound ! !

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 00:32:30'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 00:32:33'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 00:32:33'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 00:32:33'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 00:32:33'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 00:32:33'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 00:32:33'!
PASSED!

----SNAPSHOT----(1 December 2020 00:33:10) CuisUniversity-4384.image priorSource: 17923124!

!methodRemoval: InternalApiTest #_test02CreateCartMustAuthenticateUser stamp: 'db 12/1/2020 00:33:15'!
_test02CreateCartMustAuthenticateUser!

!methodRemoval: InternalApiTest #_test03CannotAddToCartWithInvalidCartID stamp: 'db 12/1/2020 00:33:18'!
_test03CannotAddToCartWithInvalidCartID!

!methodRemoval: InternalApiTest #_test04ValidItemIsAddedToCart stamp: 'db 12/1/2020 00:33:23'!
_test04ValidItemIsAddedToCart!

!methodRemoval: InternalApiTest #_test05CannotCheckoutCartWithAnInvalidCartID stamp: 'db 12/1/2020 00:33:26'!
_test05CannotCheckoutCartWithAnInvalidCartID!

!methodRemoval: InternalApiTest #_test06CheckoutCartSotresPurchases stamp: 'db 12/1/2020 00:33:29'!
_test06CheckoutCartSotresPurchases!
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 00:40:02'!
test07AfterSucessfulCheckoutThePurchaseIsSaved

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self andCatalog: testObjectFactory defaultCatalog.
	
	self 
		should: [apiCaller 
			checkout: testObjectFactory invalidCartID 
			withCreditCardNumber: testObjectFactory defaultCreditCardNumber
			andCreditCardExpirationDate: testObjectFactory notExpiredDate
			andCreditCardOwner: testObjectFactory defaultCreditCardOwner] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription]
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 00:40:43' prior: 50892944!
test07AfterSucessfulCheckoutThePurchaseIsSaved

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throws: self withCatalog: testObjectFactory defaultCatalog 
	
	
	
	self 
		should: [apiCaller 
			checkout: testObjectFactory invalidCartID 
			withCreditCardNumber: testObjectFactory defaultCreditCardNumber
			andCreditCardExpirationDate: testObjectFactory notExpiredDate
			andCreditCardOwner: testObjectFactory defaultCreditCardOwner] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription]
	! !

Object subclass: #InternalApi
	instanceVariableNames: 'authenticator merchantProcessor catalog carts sequence'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalApi category: 'TusLibros' stamp: 'db 12/1/2020 00:41:10'!
Object subclass: #InternalApi
	instanceVariableNames: 'authenticator merchantProcessor catalog carts sequence'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalApi class methodsFor: 'instance creation' stamp: 'db 12/1/2020 00:42:44'!
withAuthenticator: anAuthenticator throught: throught andCatalog: aCatalog  
	
	^self new initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog.! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 00:42:44' prior: 50892261!
test01CannotCreateACartWithAnInvalidUserID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: aMerchantProcessor andCatalog: testObjectFactory defaultCatalog.

	self 
		should: [apiCaller 
			createCartFor: testObjectFactory invalidClientID  
			withPassword: testObjectFactory invalidPassword.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 00:42:44' prior: 50892297!
test03NewCartsAreCreatedEmpty

	| apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self throught: aMerchantProcessor andCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	self assert: (apiCaller listCart: cartID) isEmpty.
	
	! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 00:42:44' prior: 50892279!
test02CannotCreateACartWithAnInvalidPassword

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: aMerchantProcessor andCatalog: testObjectFactory defaultCatalog.

	self 
		should: [apiCaller 
			createCartFor: testObjectFactory defaultClientID  
			withPassword: testObjectFactory invalidPassword.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 00:42:44' prior: 50892600!
test05CannotAddItemsToAnInvalidCartID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: aMerchantProcessor andCatalog: testObjectFactory defaultCatalog.
	
	self 
		should: [apiCaller add: 4 to: testObjectFactory invalidCartID of: testObjectFactory itemSellByTheStore ] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription]
	! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 00:42:44' prior: 50892811!
test06CannotCheckoutACartWithAnInvalidCartID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: aMerchantProcessor andCatalog: testObjectFactory defaultCatalog.
	
	self 
		should: [apiCaller 
			checkout: testObjectFactory invalidCartID 
			withCreditCardNumber: testObjectFactory defaultCreditCardNumber
			andCreditCardExpirationDate: testObjectFactory notExpiredDate
			andCreditCardOwner: testObjectFactory defaultCreditCardOwner] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription]
	! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 00:42:44' prior: 50892477!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

|	 apiCaller cartID items |
	apiCaller := InternalApi withAuthenticator: self throught: aMerchantProcessor andCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore .
	items := apiCaller listCart: cartID.
	
	self deny: items isEmpty.
	self assert: items includes: testObjectFactory itemSellByTheStore.! !

!methodRemoval: InternalApi class #withAuthenticator:andCatalog: stamp: 'db 12/1/2020 00:42:44'!
withAuthenticator: anAuthenticator andCatalog: aCatalog  
	
	^self new initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog.!
!InternalApi class methodsFor: 'instance creation' stamp: 'db 12/1/2020 00:42:57' prior: 50893002!
withAuthenticator: anAuthenticator throught: aMerchantProcessor andCatalog: aCatalog  
	
	^self new initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog.! !
!InternalApi class methodsFor: 'instance creation' stamp: 'db 12/1/2020 00:43:22'!
withAuthenticator: anAuthenticator throught: aMerchantProcessor withCatalog: aCatalog  
	
	^self new initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog.! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 00:43:22' prior: 50893045!
test02CannotCreateACartWithAnInvalidPassword

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: aMerchantProcessor withCatalog: testObjectFactory defaultCatalog.

	self 
		should: [apiCaller 
			createCartFor: testObjectFactory defaultClientID  
			withPassword: testObjectFactory invalidPassword.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 00:43:22' prior: 50893105!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

|	 apiCaller cartID items |
	apiCaller := InternalApi withAuthenticator: self throught: aMerchantProcessor withCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore .
	items := apiCaller listCart: cartID.
	
	self deny: items isEmpty.
	self assert: items includes: testObjectFactory itemSellByTheStore.! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 00:43:22' prior: 50893064!
test05CannotAddItemsToAnInvalidCartID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: aMerchantProcessor withCatalog: testObjectFactory defaultCatalog.
	
	self 
		should: [apiCaller add: 4 to: testObjectFactory invalidCartID of: testObjectFactory itemSellByTheStore ] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription]
	! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 00:43:22' prior: 50893082!
test06CannotCheckoutACartWithAnInvalidCartID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: aMerchantProcessor withCatalog: testObjectFactory defaultCatalog.
	
	self 
		should: [apiCaller 
			checkout: testObjectFactory invalidCartID 
			withCreditCardNumber: testObjectFactory defaultCreditCardNumber
			andCreditCardExpirationDate: testObjectFactory notExpiredDate
			andCreditCardOwner: testObjectFactory defaultCreditCardOwner] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription]
	! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 00:43:22' prior: 50893011!
test01CannotCreateACartWithAnInvalidUserID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: aMerchantProcessor withCatalog: testObjectFactory defaultCatalog.

	self 
		should: [apiCaller 
			createCartFor: testObjectFactory invalidClientID  
			withPassword: testObjectFactory invalidPassword.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 00:43:22' prior: 50893030!
test03NewCartsAreCreatedEmpty

	| apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self throught: aMerchantProcessor withCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	self assert: (apiCaller listCart: cartID) isEmpty.
	
	! !

!methodRemoval: InternalApi class #withAuthenticator:throught:andCatalog: stamp: 'db 12/1/2020 00:43:22'!
withAuthenticator: anAuthenticator throught: aMerchantProcessor andCatalog: aCatalog  
	
	^self new initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog.!
!InternalApi methodsFor: 'initialization' stamp: 'db 12/1/2020 00:44:12'!
initializeWithAuthenticator: anAuthenticator throught: throught andCatalog: aCatalog  
	authenticator := anAuthenticator.
	catalog := aCatalog.
	sequence := 1.
	carts := Dictionary new.! !
!InternalApi class methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 00:44:12' prior: 50893141!
withAuthenticator: anAuthenticator throught: aMerchantProcessor withCatalog: aCatalog  
	
	^self new initializeWithAuthenticator: anAuthenticator throught: throught andCatalog: aCatalog.! !

!methodRemoval: InternalApi #initializeWithAuthenticator:andCatalog: stamp: 'db 12/1/2020 00:44:12'!
initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog  
	authenticator := anAuthenticator.
	catalog := aCatalog.
	sequence := 1.
	carts := Dictionary new.!
!InternalApi methodsFor: 'initialization' stamp: 'db 12/1/2020 00:44:23' prior: 50893273!
initializeWithAuthenticator: anAuthenticator throught: aMerchantProcessor andCatalog: aCatalog  
	authenticator := anAuthenticator.
	catalog := aCatalog.
	sequence := 1.
	carts := Dictionary new.! !
!InternalApi methodsFor: 'initialization' stamp: 'db 12/1/2020 00:44:46' prior: 50893301!
initializeWithAuthenticator: anAuthenticator throught: aMerchantProcessor andCatalog: aCatalog  
	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor. 
	sequence := 1.
	carts := Dictionary new.! !
!InternalApi class methodsFor: 'instance creation' stamp: 'db 12/1/2020 00:45:06' prior: 50893283!
withAuthenticator: anAuthenticator throught: aMerchantProcessor withCatalog: aCatalog  
	
	^self new initializeWithAuthenticator: anAuthenticator throught: aMerchantProcessor andCatalog: aCatalog.! !
!InternalApi methodsFor: 'initialization' stamp: 'db 12/1/2020 00:45:39'!
initializeWithAuthenticator: anAuthenticator throught: aMerchantProcessor withCatalog: aCatalog  
	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor. 
	sequence := 1.
	carts := Dictionary new.! !
!InternalApi class methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 00:45:39' prior: 50893322!
withAuthenticator: anAuthenticator throught: aMerchantProcessor withCatalog: aCatalog  
	
	^self new initializeWithAuthenticator: anAuthenticator throught: aMerchantProcessor withCatalog: aCatalog.! !

!methodRemoval: InternalApi #initializeWithAuthenticator:throught:andCatalog: stamp: 'db 12/1/2020 00:45:39'!
initializeWithAuthenticator: anAuthenticator throught: aMerchantProcessor andCatalog: aCatalog  
	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor. 
	sequence := 1.
	carts := Dictionary new.!
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 00:46:03' prior: 50893231!
test01CannotCreateACartWithAnInvalidUserID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: self withCatalog: testObjectFactory defaultCatalog.

	self 
		should: [apiCaller 
			createCartFor: testObjectFactory invalidClientID  
			withPassword: testObjectFactory invalidPassword.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 00:46:08' prior: 50893150!
test02CannotCreateACartWithAnInvalidPassword

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: self withCatalog: testObjectFactory defaultCatalog.

	self 
		should: [apiCaller 
			createCartFor: testObjectFactory defaultClientID  
			withPassword: testObjectFactory invalidPassword.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 00:46:12' prior: 50893250!
test03NewCartsAreCreatedEmpty

	| apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self throught: self withCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	self assert: (apiCaller listCart: cartID) isEmpty.
	
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 00:46:16' prior: 50893169!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

|	 apiCaller cartID items |
	apiCaller := InternalApi withAuthenticator: self throught: self withCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore .
	items := apiCaller listCart: cartID.
	
	self deny: items isEmpty.
	self assert: items includes: testObjectFactory itemSellByTheStore.! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 00:46:20' prior: 50893190!
test05CannotAddItemsToAnInvalidCartID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: self withCatalog: testObjectFactory defaultCatalog.
	
	self 
		should: [apiCaller add: 4 to: testObjectFactory invalidCartID of: testObjectFactory itemSellByTheStore ] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription]
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 00:46:31' prior: 50893208!
test06CannotCheckoutACartWithAnInvalidCartID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: self withCatalog: testObjectFactory defaultCatalog.
	
	self 
		should: [apiCaller 
			checkout: testObjectFactory invalidCartID 
			withCreditCardNumber: testObjectFactory defaultCreditCardNumber
			andCreditCardExpirationDate: testObjectFactory notExpiredDate
			andCreditCardOwner: testObjectFactory defaultCreditCardOwner] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription]
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 00:46:47' prior: 50892966!
test07AfterSucessfulCheckoutThePurchaseIsSaved

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: self withCatalog: testObjectFactory defaultCatalog.
	
	self 
		should: [apiCaller 
			checkout: testObjectFactory invalidCartID 
			withCreditCardNumber: testObjectFactory defaultCreditCardNumber
			andCreditCardExpirationDate: testObjectFactory notExpiredDate
			andCreditCardOwner: testObjectFactory defaultCreditCardOwner] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription]
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 00:47:52' prior: 50893471!
test07AfterSucessfulCheckoutThePurchaseIsSaved

	| apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self throught: self withCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 00:48:25' prior: 50893493!
test07AfterSucessfulCheckoutThePurchaseIsSaved

	| apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self throught: self withCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	apiCaller add: 5 to: cartID of: testObjectFactory itemSellByTheStore.
	
	
	
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 00:49:23' prior: 50893506!
test07AfterSucessfulCheckoutThePurchaseIsSaved

	| apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self throught: self withCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	apiCaller add: 5 to: cartID of: testObjectFactory itemSellByTheStore.
	
	self deny: (apiCaller listPurchasesOf: testObjectFactory defaultClientID) isEmpty 
	
	! !

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 00:49:30'!
ERROR!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 00:49:30'!
ERROR!
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 00:49:42'!
listPurchasesOf: aSmallInteger 
	self shouldBeImplemented.! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 00:50:01' prior: 50893545!
listPurchasesOf: aClientID 
	^OrderedCollection new.! !

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 00:50:02'!
FAILURE!
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 00:52:23' prior: 50893521!
test07AfterSucessfulCheckoutThePurchaseIsSaved

	| apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self throught: self withCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	apiCaller add: 5 to: cartID of: testObjectFactory itemSellByTheStore.
	
	apiCaller 
		checkout: cartID 
		withCreditCardNumber: testObjectFactory defaultCreditCardNumber 
		andCreditCardExpirationDate: testObjectFactory exp 
		andCreditCardOwner: testObjectFactory defaultCreditCardOwner.
	
	self deny: (apiCaller listPurchasesOf: testObjectFactory defaultClientID) isEmpty 
	
	! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'db 12/1/2020 00:52:50' prior: 50885423!
notExpiredCreditCard
	
	^CreditCard expiringOn: self notExpiredDate ! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 00:53:08' prior: 50893559!
test07AfterSucessfulCheckoutThePurchaseIsSaved

	| apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self throught: self withCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	apiCaller add: 5 to: cartID of: testObjectFactory itemSellByTheStore.
	
	apiCaller 
		checkout: cartID 
		withCreditCardNumber: testObjectFactory defaultCreditCardNumber 
		andCreditCardExpirationDate: testObjectFactory  
		andCreditCardOwner: testObjectFactory defaultCreditCardOwner.
	
	self deny: (apiCaller listPurchasesOf: testObjectFactory defaultClientID) isEmpty 
	
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 00:53:32' prior: 50893589!
test07AfterSucessfulCheckoutThePurchaseIsSaved

	| apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self throught: self withCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	apiCaller add: 5 to: cartID of: testObjectFactory itemSellByTheStore.
	
	apiCaller 
		checkout: cartID 
		withCreditCardNumber: testObjectFactory defaultCreditCardNumber 
		andCreditCardExpirationDate: testObjectFactory notExpiredDate
		andCreditCardOwner: testObjectFactory defaultCreditCardOwner.
	
	self deny: (apiCaller listPurchasesOf: testObjectFactory defaultClientID) isEmpty 
	
	! !

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 00:53:55'!
ERROR!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 00:53:55'!
ERROR!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 00:54:01'!
FAILURE!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 00:54:16'!
ERROR!
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 00:55:32' prior: 50892887!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cart |
	cart := carts at: aCartID ifAbsent: [self class signalCartNotFound ].! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 00:55:46'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 00:55:46'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 00:55:46'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 00:55:46'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 00:55:46'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 00:55:46'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 00:55:46'!
FAILURE!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 00:55:46'!
FAILURE!

Object subclass: #InternalApi
	instanceVariableNames: 'authenticator merchantProcessor catalog carts sequence salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalApi category: 'TusLibros' stamp: 'db 12/1/2020 00:57:50'!
Object subclass: #InternalApi
	instanceVariableNames: 'authenticator merchantProcessor catalog carts sequence salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 00:58:20' prior: 50893550!
listPurchasesOf: aClientID 
	^salesBook at: aClientID ! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 01:00:07' prior: 50893653!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cart |
	cart := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	
	"Create a cashier"
	
	"Necesito la asociacion entre carrito y clientID"
	"cashier := Cashier 
		toCheckout:  
		Argument expected ->charging:  
		throught:  
		on:  
		registeringOn: "! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 01:01:40' prior: 50892041!
createCartFor: aClientID withPassword: aPassword

	| cart cartID |
	(authenticator authenticate: aClientID withPassword: aPassword) ifFalse: [self class signalNonAuthenticatedClient].	
	
	" Duda: un cliente puede tener m�s de un carrito activo? "
	cart := Cart acceptingItemsOf: catalog.
	cartID := self nextID.
	carts at: cartID put: cart.
	
	"Guardo el cart en el dictionary de salesbook"
	
	
	^cartID.! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 01:04:12' prior: 50893710!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cart |
	cart := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	
	"Leasy initialization para el salesbook"
		
	
	"Create a cashier"
	
	"Necesito la asociacion entre carrito y clientID"
	"cashier := Cashier 
		toCheckout:  
		Argument expected ->charging:  
		throught:  
		on:  
		registeringOn: "! !

Object subclass: #zzz
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #CartContainer
	instanceVariableNames: 'cart clientID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartContainer category: 'TusLibros' stamp: 'db 12/1/2020 01:05:12'!
Object subclass: #CartContainer
	instanceVariableNames: 'cart clientID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartContainer class methodsFor: 'nil' stamp: 'db 12/1/2020 01:07:54'!
associatedTo: aClientID
	^CartContainer new initializeAssociatedTo: aClientID.! !
!CartContainer methodsFor: 'initialization' stamp: 'db 12/1/2020 01:08:28'!
initializeAssociatedTo: aClientID.
	clientID := aClientID.! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 01:10:11' prior: 50893725!
createCartFor: aClientID withPassword: aPassword

	| cart cartID |
	(authenticator authenticate: aClientID withPassword: aPassword) ifFalse: [self class signalNonAuthenticatedClient].	
	
	" Duda: un cliente puede tener m�s de un carrito activo? "
	cart := Cart acceptingItemsOf: catalog.
	cartID := self nextID.
	carts at: cartID put: (CartContainer with: cart associatedTo: aClientID ) .
	
	"Guardo el cart en el dictionary de salesbook"
	
	
	^cartID.! !
!CartContainer class methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 01:10:47'!
aCart: with associatedTo: aClientID
	^CartContainer new initializeAssociatedTo: aClientID.! !

!methodRemoval: CartContainer class #associatedTo: stamp: 'db 12/1/2020 01:10:47'!
associatedTo: aClientID
	^CartContainer new initializeAssociatedTo: aClientID.!
!CartContainer class methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 01:11:02'!
with: with associatedTo: aClientID
	^CartContainer new initializeAssociatedTo: aClientID.! !

!methodRemoval: CartContainer class #aCart:associatedTo: stamp: 'db 12/1/2020 01:11:02'!
aCart: with associatedTo: aClientID
	^CartContainer new initializeAssociatedTo: aClientID.!
!CartContainer class methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 01:11:06' prior: 50893810!
with: aCart associatedTo: aClientID
	^CartContainer new initializeAssociatedTo: aClientID.! !
!CartContainer class methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 01:11:15' prior: 50893822!
with: aCart associatedTo: aClientID
	^CartContainer new initializeWith: aCart AssociatedTo: aClientID.! !
!CartContainer class methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 01:11:18' prior: 50893829!
with: aCart associatedTo: aClientID
	^CartContainer new initializeWith: aCart associatedTo: aClientID.! !
!CartContainer methodsFor: 'initialization' stamp: 'db 12/1/2020 01:12:11'!
initializeWith: aCart associatedTo: aClientID
	clientID := aClientID.
	cart := cart.! !

!methodRemoval: CartContainer #initializeAssociatedTo: stamp: 'db 12/1/2020 01:12:17'!
initializeAssociatedTo: aClientID.
	clientID := aClientID.!
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 01:12:46' prior: 50893782!
createCartFor: aClientID withPassword: aPassword

	| cart cartID |
	(authenticator authenticate: aClientID withPassword: aPassword) ifFalse: [self class signalNonAuthenticatedClient].	
	
	" Duda: un cliente puede tener m�s de un carrito activo? "
	cart := Cart acceptingItemsOf: catalog.
	cartID := self nextID.
	carts at: cartID put: (CartContainer with: cart associatedTo: aClientID) .
	
	"Guardo el cart en el dictionary de salesbook"
	
	
	^cartID.! !
!InternalApi methodsFor: 'initialization' stamp: 'db 12/1/2020 01:13:21' prior: 50893331!
initializeWithAuthenticator: anAuthenticator throught: aMerchantProcessor withCatalog: aCatalog  
	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor. 
	sequence := 1.
	carts := Dictionary new.
	salesBook := Dictionary new.! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 01:14:34' prior: 50893741!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartContiner |
	cartContiner := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	
	
	"Leasy initialization para el salesbook"
		
	
	"Create a cashier"
	
	"Necesito la asociacion entre carrito y clientID"
	"cashier := Cashier 
		toCheckout:  
		Argument expected ->charging:  
		throught:  
		on:  
		registeringOn: "! !
!CartContainer methodsFor: 'initialization' stamp: 'db 12/1/2020 01:15:13'!
clientAssociated
	^clientID ! !
!CartContainer methodsFor: 'initialization' stamp: 'db 12/1/2020 01:15:29'!
cardStored
	^clientID ! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 01:17:11' prior: 50893883!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartContiner clientID |
	cartContiner := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	clientID := cartContiner clientAssociated

	salesBook at:	 clientID  ifAbsent: [salesBook at: clientID put: OrderedCollection new.]
	
	
	"Leasy initialization para el salesbook"
		
	
	"Create a cashier"
	
	"Necesito la asociacion entre carrito y clientID"
	"cashier := Cashier 
		toCheckout:  
		Argument expected ->charging:  
		throught:  
		on:  
		registeringOn: "! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 01:18:57' prior: 50893908!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartContiner clientID clientSalesBook |
	cartContiner := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	clientID := cartContiner clientAssociated.

	clientSalesBook := salesBook at:	 clientID  ifAbsent: [clientSalesBook := OrderedCollection new.].
	
	
	salesBook at: clientID put: clientSalesBook.
	"Leasy initialization para el salesbook"
		
	
	"Create a cashier"
	
	"Necesito la asociacion entre carrito y clientID"
	"cashier := Cashier 
		toCheckout:  
		Argument expected ->charging:  
		throught:  
		on:  
		registeringOn: "! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 01:19:36' prior: 50893929!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartContiner clientID clientSalesBook |
	cartContiner := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	clientID := cartContiner clientAssociated.

	clientSalesBook := salesBook at:	 clientID ifAbsent: [clientSalesBook := OrderedCollection new.].
	
	
	salesBook at: clientID put: clientSalesBook.
	"Lasy initialization para el salesbook"
		
	
	"Create a cashier"
	
	"Necesito la asociacion entre carrito y clientID"
	"cashier := Cashier 
		toCheckout:  
		Argument expected ->charging:  
		throught:  
		on:  
		registeringOn: "! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 01:20:03' prior: 50893953!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartContiner clientID clientSalesBook |
	cartContiner := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	clientID := cartContiner clientAssociated.
	clientSalesBook := salesBook at:	 clientID ifAbsent: [clientSalesBook := OrderedCollection new.].

	salesBook at: clientID put: clientSalesBook.
	"Lasy initialization para el salesbook"
		
	
	"Create a cashier"
	
	"Necesito la asociacion entre carrito y clientID"
	"cashier := Cashier 
		toCheckout:  
		Argument expected ->charging:  
		throught:  
		on:  
		registeringOn: "! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 01:21:12' prior: 50893977!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartContiner clientID clientSalesBook |
	cartContiner := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	clientID := cartContiner clientAssociated.
	clientSalesBook := salesBook at:	 clientID ifAbsent: [clientSalesBook := OrderedCollection new.].
	
	"CreditCard
	
	cashier := Cashier 
		toCheckout: cartContiner cardStored 
		charging: aCreditCard
		throught: merchantProcessor 
		on:  today
		registeringOn: salesBook.
		
	cashier checkOut."

	salesBook at: clientID put: clientSalesBook.
	"Lasy initialization para el salesbook"
		
	
	"Create a cashier"
	
	"Necesito la asociacion entre carrito y clientID"
	"cashier := Cashier 
		toCheckout:  
		Argument expected ->charging:  
		throught:  
		on:  
		registeringOn: "! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 01:21:49' prior: 50894001!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartContiner clientID clientSalesBook |
	cartContiner := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	clientID := cartContiner clientAssociated.
	clientSalesBook := salesBook at:	 clientID ifAbsent: [clientSalesBook := OrderedCollection new.].
	
	"CreditCard
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
	cashier := Cashier 
		toCheckout: cartContiner cardStored 
		charging: aCreditCard
		throught: merchantProcessor 
		on:  today
		registeringOn: salesBook.
		
	cashier checkOut."

	salesBook at: clientID put: clientSalesBook.
	"Lasy initialization para el salesbook"
		
	
	"Create a cashier"
	
	"Necesito la asociacion entre carrito y clientID"
	"cashier := Cashier 
		toCheckout:  
		Argument expected ->charging:  
		throught:  
		on:  
		registeringOn: "! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 01:22:49' prior: 50894031!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartContiner clientID clientSalesBook creditCard |
	cartContiner := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	clientID := cartContiner clientAssociated.
	clientSalesBook := salesBook at:	 clientID ifAbsent: [clientSalesBook := OrderedCollection new.].
	
	creditCard := CreditCard expiringOn: aCCED. 
	
	"CreditCard
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
	cashier := Cashier 
		toCheckout: cartContiner cardStored 
		charging: aCreditCard
		throught: merchantProcessor 
		on:  today
		registeringOn: salesBook.
		
	cashier checkOut."

	salesBook at: clientID put: clientSalesBook.
	"Lasy initialization para el salesbook"
		
	
	"Create a cashier"
	
	"Necesito la asociacion entre carrito y clientID"
	"cashier := Cashier 
		toCheckout:  
		Argument expected ->charging:  
		throught:  
		on:  
		registeringOn: "! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 01:24:11' prior: 50894071!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartContiner clientID clientSalesBook creditCard cashier |
	cartContiner := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	clientID := cartContiner clientAssociated.
	clientSalesBook := salesBook at:	 clientID ifAbsent: [clientSalesBook := OrderedCollection new.].
	
	creditCard := CreditCard expiringOn: aCCED. 
	
	cashier:= Cashier 
		toCheckout: cartContiner cardStored 
		charging: creditCard
		throught: merchantProcessor 
		on: Date now
		registeringOn: clientSalesBook.
		
	"CreditCard
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	
		
	total := cashier checkOut.
	cashier := Cashier 
		toCheckout: cartContiner cardStored 
		charging: aCreditCard
		throught: merchantProcessor 
		on:  today
		registeringOn: salesBook.
		
	cashier checkOut."

	salesBook at: clientID put: clientSalesBook.
	"Lasy initialization para el salesbook"
		
	
	"Create a cashier"
	
	"Necesito la asociacion entre carrito y clientID"
	"cashier := Cashier 
		toCheckout:  
		Argument expected ->charging:  
		throught:  
		on:  
		registeringOn: "! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 01:25:05' prior: 50894113!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartContiner clientID clientSalesBook creditCard cashier |
	cartContiner := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	clientID := cartContiner clientAssociated.
	clientSalesBook := salesBook at:	 clientID ifAbsent: [clientSalesBook := OrderedCollection new.].
	
	creditCard := CreditCard expiringOn: aCCED. 
	
	cashier := Cashier 
		toCheckout: cartContiner cardStored 
		charging: creditCard
		throught: merchantProcessor 
		on: Date now
		registeringOn: clientSalesBook.
		
	cashier checkOut.
		
	"CreditCard
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	
		
	total := cashier checkOut.
	cashier := Cashier 
		toCheckout: cartContiner cardStored 
		charging: aCreditCard
		throught: merchantProcessor 
		on:  today
		registeringOn: salesBook.
		
	cashier checkOut."

	salesBook at: clientID put: clientSalesBook.
	"Lasy initialization para el salesbook"
		
	
	"Create a cashier"
	
	"Necesito la asociacion entre carrito y clientID"
	"cashier := Cashier 
		toCheckout:  
		Argument expected ->charging:  
		throught:  
		on:  
		registeringOn: "! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 01:25:19' prior: 50894155!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartContiner clientID clientSalesBook creditCard cashier |
	cartContiner := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	clientID := cartContiner clientAssociated.
	clientSalesBook := salesBook at:	 clientID ifAbsent: [clientSalesBook := OrderedCollection new.].
	
	creditCard := CreditCard expiringOn: aCCED. 
	
	cashier := Cashier 
		toCheckout: cartContiner cardStored 
		charging: creditCard
		throught: merchantProcessor 
		on: Date now
		registeringOn: clientSalesBook.
		
	cashier checkOut.
		
	

	salesBook at: clientID put: clientSalesBook.
	"Lasy initialization para el salesbook"
		
	
	"Create a cashier"
	
	"Necesito la asociacion entre carrito y clientID"
	! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 01:25:35'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 01:25:35'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 01:25:35'!
ERROR!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 01:25:35'!
ERROR!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 01:25:35'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 01:25:35'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 01:25:35'!
ERROR!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 01:25:40'!
ERROR!
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 01:26:43' prior: 50892386!
listCart: aCartID 
	| cartContiner |
	cartContiner := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	^(cartContiner) items asBag ! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 01:27:15' prior: 50894254!
listCart: aCartID 
	| cartContiner |
	cartContiner := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	
	^cartContiner cardStored items asBag.! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 01:27:22'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 01:27:22'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 01:27:22'!
ERROR!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 01:27:22'!
ERROR!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 01:27:22'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 01:27:22'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 01:27:22'!
ERROR!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 01:27:26'!
ERROR!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 01:28:26'!
ERROR!
!CartContainer methodsFor: 'initialization' stamp: 'db 12/1/2020 01:30:02' prior: 50893904!
cardStored
	^cart ! !
!CartContainer methodsFor: 'initialization' stamp: 'db 12/1/2020 01:30:12'!
cartStored
	^cart ! !
!InternalApi methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 01:30:12' prior: 50894262!
listCart: aCartID 
	| cartContiner |
	cartContiner := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	
	^cartContiner cartStored items asBag.! !

!methodRemoval: CartContainer #cardStored stamp: 'db 12/1/2020 01:30:12'!
cardStored
	^cart !
!CartContainer methodsFor: 'initialization' stamp: 'db 12/1/2020 01:30:23' prior: 50893842!
initializeWith: aCart associatedTo: aClientID
	clientID := aClientID.
	cart := aCart.! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 01:30:28'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 01:30:28'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 01:30:28'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 01:30:28'!
ERROR!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 01:30:28'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 01:30:28'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 01:30:28'!
ERROR!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 01:30:32'!
ERROR!
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 01:31:04' prior: 50892769!
add: aQuantity to: aCartID of: anItem
	
	| cartContainer |
	
	cartContainer := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	
	cartContainer cartStored add: aQuantity of: anItem.
	
	 
! !

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 01:31:05'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 01:31:08'!
ERROR!
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 01:31:23' prior: 50894198!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartContiner clientID clientSalesBook creditCard cashier |
	cartContiner := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	clientID := cartContiner clientAssociated.
	clientSalesBook := salesBook at:	 clientID ifAbsent: [clientSalesBook := OrderedCollection new.].
	
	creditCard := CreditCard expiringOn: aCCED. 
	
	cashier := Cashier 
		toCheckout: cartContiner cartStored 
		charging: creditCard
		throught: merchantProcessor 
		on: Date now
		registeringOn: clientSalesBook.
		
	cashier checkOut.
		
	

	salesBook at: clientID put: clientSalesBook.
	"Lasy initialization para el salesbook"
		
	
	"Create a cashier"
	
	"Necesito la asociacion entre carrito y clientID"
	! !

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 01:31:24'!
ERROR!
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 01:31:43' prior: 50894371!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartContiner clientID clientSalesBook creditCard cashier |
	cartContiner := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	clientID := cartContiner clientAssociated.
	clientSalesBook := salesBook at:	 clientID ifAbsent: [clientSalesBook := OrderedCollection new.].
	
	creditCard := CreditCard expiringOn: aCCED. 
	
	cashier := Cashier 
		toCheckout: cartContiner cartStored 
		charging: creditCard
		throught: merchantProcessor 
		on: Date today
		registeringOn: clientSalesBook.
		
	cashier checkOut.
		
	

	salesBook at: clientID put: clientSalesBook.
	"Lasy initialization para el salesbook"
		
	
	"Create a cashier"
	
	"Necesito la asociacion entre carrito y clientID"
	! !

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 01:31:44'!
ERROR!

Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'db 12/1/2020 01:32:27'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

MerchantProcessor subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'db 12/1/2020 01:32:35'!
MerchantProcessor subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessor methodsFor: 'nil' stamp: 'db 12/1/2020 01:33:11'!
debit: anAmount from: aCreditCard 

	self subclassResponsibility ! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'db 12/1/2020 01:33:17'!
MerchantProcessor subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'nil' stamp: 'db 12/1/2020 01:33:16' overrides: 50894458!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 01:34:05' overrides: 16896425!
initialize
	debitBehavior := [ :anAmount :aCreditCard | ]! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 01:34:33' prior: 50893362!
test01CannotCreateACartWithAnInvalidUserID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: self withCatalog: testObjectFactory defaultCatalog.

	self 
		should: [apiCaller 
			createCartFor: testObjectFactory invalidClientID  
			withPassword: testObjectFactory invalidPassword.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	! !

!classDefinition: #InternalApiTest category: 'TusLibros' stamp: 'db 12/1/2020 01:34:57'!
TestCase subclass: #InternalApiTest
	instanceVariableNames: 'testObjectFactory authenticatedClients merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalApiTest methodsFor: 'setUp/tearDown' stamp: 'db 12/1/2020 01:34:55' prior: 50891528 overrides: 16927572!
setUp

	testObjectFactory := StoreTestObjectsFactory new.
	
	authenticatedClients := Dictionary new.
	authenticatedClients at: testObjectFactory defaultClientID put: testObjectFactory defaultPassword.
	
	merchantProcessor := MerchantProcessorSimulator new.! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 01:35:13' prior: 50894484!
test01CannotCreateACartWithAnInvalidUserID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.

	self 
		should: [apiCaller 
			createCartFor: testObjectFactory invalidClientID  
			withPassword: testObjectFactory invalidPassword.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 01:35:17' prior: 50893380!
test02CannotCreateACartWithAnInvalidPassword

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.

	self 
		should: [apiCaller 
			createCartFor: testObjectFactory defaultClientID  
			withPassword: testObjectFactory invalidPassword.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 01:35:25' prior: 50893398!
test03NewCartsAreCreatedEmpty

	| apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	self assert: (apiCaller listCart: cartID) isEmpty.
	
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 01:35:29' prior: 50893412!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

|	 apiCaller cartID items |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore .
	items := apiCaller listCart: cartID.
	
	self deny: items isEmpty.
	self assert: items includes: testObjectFactory itemSellByTheStore.! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 01:35:32' prior: 50893432!
test05CannotAddItemsToAnInvalidCartID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.
	
	self 
		should: [apiCaller add: 4 to: testObjectFactory invalidCartID of: testObjectFactory itemSellByTheStore ] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription]
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 01:35:35' prior: 50893449!
test06CannotCheckoutACartWithAnInvalidCartID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.
	
	self 
		should: [apiCaller 
			checkout: testObjectFactory invalidCartID 
			withCreditCardNumber: testObjectFactory defaultCreditCardNumber
			andCreditCardExpirationDate: testObjectFactory notExpiredDate
			andCreditCardOwner: testObjectFactory defaultCreditCardOwner] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription]
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 01:35:38' prior: 50893614!
test07AfterSucessfulCheckoutThePurchaseIsSaved

	| apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	apiCaller add: 5 to: cartID of: testObjectFactory itemSellByTheStore.
	
	apiCaller 
		checkout: cartID 
		withCreditCardNumber: testObjectFactory defaultCreditCardNumber 
		andCreditCardExpirationDate: testObjectFactory notExpiredDate
		andCreditCardOwner: testObjectFactory defaultCreditCardOwner.
	
	self deny: (apiCaller listPurchasesOf: testObjectFactory defaultClientID) isEmpty 
	
	! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 01:35:44'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 01:35:44'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 01:35:44'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 01:35:44'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 01:35:44'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 01:35:44'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 01:35:44'!
PASSED!

----QUIT----(1 December 2020 01:36:32) CuisUniversity-4384.image priorSource: 17960575!

----STARTUP---- (1 December 2020 09:47:02) as /Users/dbenitez/uba/2c2020-IS1/IS1-Trabajos/20-TusLibros/macos64-TusLibros/CuisUniversity-4384.image!


Object subclass: #Sale
	instanceVariableNames: 'items total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'db 12/1/2020 09:55:43'!
Object subclass: #Sale
	instanceVariableNames: 'items total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----QUIT----(1 December 2020 10:00:08) CuisUniversity-4384.image priorSource: 18017018!

----STARTUP---- (1 December 2020 10:07:13) as /Users/dbenitez/uba/2c2020-IS1/IS1-Trabajos/20-TusLibros/macos64-TusLibros/CuisUniversity-4384.image!


----QUIT----(1 December 2020 11:26:14) CuisUniversity-4384.image priorSource: 18017599!

----STARTUP---- (1 December 2020 16:12:49) as /Users/dbenitez/uba/2c2020-IS1/IS1-Trabajos/20-TusLibros/macos64-TusLibros/CuisUniversity-4384.image!

!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 16:18:36' prior: 50894633!
test07AfterSucessfulCheckoutThePurchaseIsSaved

	| apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	apiCaller add: 5 to: cartID of: testObjectFactory itemSellByTheStore.
	
	apiCaller 
		checkout: cartID 
		withCreditCardNumber: testObjectFactory defaultCreditCardNumber 
		andCreditCardExpirationDate: testObjectFactory notExpiredDate
		andCreditCardOwner: testObjectFactory defaultCreditCardOwner.
	
	self deny: (apiCaller listPurchasesOf: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword ) isEmpty 
	
	! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 16:19:17'!
listPurchasesOf: aClientID aPassword: withPassword  
	^salesBook at: aClientID ! !

!methodRemoval: InternalApi #listPurchasesOf: stamp: 'db 12/1/2020 16:19:17'!
listPurchasesOf: aClientID 
	^salesBook at: aClientID !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 16:19:34'!
listPurchasesOf: aClientID withPassword: withPassword  
	^salesBook at: aClientID ! !

!methodRemoval: InternalApi #listPurchasesOf:aPassword: stamp: 'db 12/1/2020 16:19:34'!
listPurchasesOf: aClientID aPassword: withPassword  
	^salesBook at: aClientID !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 16:19:39' prior: 50894751!
listPurchasesOf: aClientID withPassword: aPassword  
	^salesBook at: aClientID ! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 16:19:47'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 16:19:47'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 16:19:47'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 16:19:47'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 16:19:47'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 16:19:47'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 16:19:47'!
PASSED!
!Sale methodsFor: 'initialization' stamp: 'db 12/1/2020 16:21:22'!
initializeTotal: aTotal withItems: withItems 

	total := aTotal ! !
!Sale class methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 16:21:22' prior: 50885380!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal withItems: items ! !

!methodRemoval: Sale #initializeTotal: stamp: 'db 12/1/2020 16:21:22'!
initializeTotal: aTotal

	total := aTotal !
!Sale methodsFor: 'initialization' stamp: 'db 12/1/2020 16:21:45' prior: 50894792!
initializeTotal: aTotal withItems: anItems 

	total := aTotal ! !
!Sale methodsFor: 'initialization' stamp: 'db 12/1/2020 16:21:52' prior: 50894808!
initializeTotal: aTotal withItems: aListOfItems 

	total := aTotal ! !
!Sale methodsFor: 'initialization' stamp: 'db 12/1/2020 16:22:05' prior: 50894813!
initializeTotal: aTotal withItems: aListOfItems 

	total := aTotal .
	items := aListOfItems .! !
!Sale methodsFor: 'total' stamp: 'db 12/1/2020 16:22:33'!
items
	
	^ items! !
!Sale class methodsFor: 'instance creation' stamp: 'db 12/1/2020 16:23:56'!
of: aTotal Items: withItems 

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal withItems: items ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 16:23:56' prior: 50885091!
createSale

	^ Sale of: total Items: withItems
! !

!methodRemoval: Sale class #of: stamp: 'db 12/1/2020 16:23:56'!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal withItems: items !
!Sale class methodsFor: 'instance creation' stamp: 'db 12/1/2020 16:24:32'!
of: aTotal withItems: withItems 

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal withItems: items ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 16:24:32' prior: 50894833!
createSale

	^ Sale of: total withItems: withItems
! !

!methodRemoval: Sale class #of:Items: stamp: 'db 12/1/2020 16:24:32'!
of: aTotal Items: withItems 

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal withItems: items !
!Sale class methodsFor: 'instance creation' stamp: 'db 12/1/2020 16:24:39'!
of: aTotal Items: aListOfItems 

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal withItems: aListOfItems ! !

!methodRemoval: Sale class #of:Items: stamp: 'db 12/1/2020 16:24:46'!
of: aTotal Items: aListOfItems 

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal withItems: aListOfItems !
!Sale class methodsFor: 'instance creation' stamp: 'db 12/1/2020 16:24:59' prior: 50894843!
of: aTotal withItems: aListOfItems 

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal withItems: aListOfItems ! !
!Cashier methodsFor: 'checkout - private' stamp: 'db 12/1/2020 16:25:27' prior: 50894851!
createSale

	^ Sale of: total withItems: cart items asBag 
! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 16:26:10' prior: 50894716!
test07AfterSucessfulCheckoutThePurchaseIsSaved

	| apiCaller cartID purchases |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	apiCaller add: 5 to: cartID of: testObjectFactory itemSellByTheStore.
	
	apiCaller 
		checkout: cartID 
		withCreditCardNumber: testObjectFactory defaultCreditCardNumber 
		andCreditCardExpirationDate: testObjectFactory notExpiredDate
		andCreditCardOwner: testObjectFactory defaultCreditCardOwner.
		
	purchases := apiCaller listPurchasesOf: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	self deny:  purchases isEmpty 
	
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 16:27:44' prior: 50894889!
test07AfterSucessfulCheckoutThePurchaseIsSaved

	| apiCaller cartID purchases |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	apiCaller add: 5 to: cartID of: testObjectFactory itemSellByTheStore.
	
	apiCaller 
		checkout: cartID 
		withCreditCardNumber: testObjectFactory defaultCreditCardNumber 
		andCreditCardExpirationDate: testObjectFactory notExpiredDate
		andCreditCardOwner: testObjectFactory defaultCreditCardOwner.
		
	purchases := apiCaller listPurchasesOf: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	self deny:  purchases isEmpty.
	self assert: 50 equals: purchases total.
	self assert: purchases items includes: testObjectFactory itemSellByTheStore 
	
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 16:27:46' prior: 50894917!
test07AfterSucessfulCheckoutThePurchaseIsSaved

	| apiCaller cartID purchases |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	apiCaller add: 5 to: cartID of: testObjectFactory itemSellByTheStore.
	
	apiCaller 
		checkout: cartID 
		withCreditCardNumber: testObjectFactory defaultCreditCardNumber 
		andCreditCardExpirationDate: testObjectFactory notExpiredDate
		andCreditCardOwner: testObjectFactory defaultCreditCardOwner.
		
	purchases := apiCaller listPurchasesOf: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	self deny:  purchases isEmpty.
	self assert: 50 equals: purchases total.
	self assert: purchases items includes: testObjectFactory itemSellByTheStore.
	
	! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 16:27:49'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 16:27:49'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 16:27:49'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 16:27:49'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 16:27:50'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 16:27:50'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 16:27:50'!
ERROR!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 16:27:50'!
ERROR!
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 16:28:49' prior: 50894949!
test07AfterSucessfulCheckoutThePurchaseIsSaved

	| apiCaller cartID purchases |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	apiCaller add: 5 to: cartID of: testObjectFactory itemSellByTheStore.
	
	apiCaller 
		checkout: cartID 
		withCreditCardNumber: testObjectFactory defaultCreditCardNumber 
		andCreditCardExpirationDate: testObjectFactory notExpiredDate
		andCreditCardOwner: testObjectFactory defaultCreditCardOwner.
		
	purchases := apiCaller listPurchasesOf: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	self deny:  purchases isEmpty.
	self assert: 50 equals: purchases first total.
	self assert: purchases first items includes: testObjectFactory itemSellByTheStore.
	
	! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 16:28:52'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 16:28:52'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 16:28:52'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 16:28:52'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 16:28:52'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 16:28:52'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 16:28:52'!
PASSED!
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 16:30:13'!
test08CannotListPurchasesOfNonAuthenticatedClient

	| apiCaller purchases |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.
	
		
		
	purchases := apiCaller listPurchasesOf: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	self deny:  purchases isEmpty.
	self assert: 50 equals: purchases first total.
	self assert: purchases first items includes: testObjectFactory itemSellByTheStore.
	
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 16:31:17' prior: 50895065!
test08CannotListPurchasesOfNonAuthenticatedClient

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.
	
		
		
	self 
		should: [apiCaller 
				listPurchasesOf: testObjectFactory defaultClientID 
				withPassword: testObjectFactory invalidPassword] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 16:31:23' prior: 50895084!
test08CannotListPurchasesOfNonAuthenticatedClient

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.
		
	self 
		should: [apiCaller 
				listPurchasesOf: testObjectFactory defaultClientID 
				withPassword: testObjectFactory invalidPassword] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	
	! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 16:31:26'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 16:31:26'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 16:31:26'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 16:31:26'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 16:31:26'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 16:31:26'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 16:31:26'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/1/2020 16:31:26'!
FAILURE!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/1/2020 16:31:26'!
FAILURE!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/1/2020 16:31:41'!
FAILURE!
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 16:32:43' prior: 50894762!
listPurchasesOf: aClientID withPassword: aPassword  

	authenticator authenticate: aClientID withPassword: aPassword ifFalse: [^self class nonAuthenticatedClientErrorDescription ].
	^salesBook at: aClientID ! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 16:32:54' prior: 50895158!
listPurchasesOf: aClientID withPassword: aPassword  

	(authenticator authenticate: aClientID withPassword: aPassword) ifFalse: [^self class nonAuthenticatedClientErrorDescription ].
	^salesBook at: aClientID ! !

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/1/2020 16:32:55'!
FAILURE!

^password = aPassword!
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 16:34:21' prior: 50895168!
listPurchasesOf: aClientID withPassword: aPassword  

	(authenticator authenticate: aClientID withPassword: aPassword) ifFalse: [^self class signalNonAuthenticatedClient ].
	^salesBook at: aClientID ! !

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/1/2020 16:34:22'!
PASSED!
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 16:39:22'!
assertNonAuthenticatedClientFor: aOperationBlock

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.

	self 
		should: [aOperationBlock value with: apiCaller] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 16:40:14' prior: 50894523!
test01CannotCreateACartWithAnInvalidUserID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.

	self assertNonAuthenticatedClientFor: [apiCaller 
			createCartFor: testObjectFactory invalidClientID  
			withPassword: testObjectFactory invalidPassword].

	self 
		should: [apiCaller 
			createCartFor: testObjectFactory invalidClientID  
			withPassword: testObjectFactory invalidPassword.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 16:40:31' prior: 50895211!
test01CannotCreateACartWithAnInvalidUserID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.

	self assertNonAuthenticatedClientFor: [apiCaller createCartFor: testObjectFactory invalidClientID withPassword: testObjectFactory invalidPassword].

	"self 
		should: [apiCaller 
			createCartFor: testObjectFactory invalidClientID  
			withPassword: testObjectFactory invalidPassword.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]"
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 16:40:44' prior: 50895195!
assertNonAuthenticatedClientFor: aOperationBlock

	self 
		should: [aOperationBlock value] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 16:41:09'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 16:41:12'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 16:41:32'!
PASSED!
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 16:41:39' prior: 50895234!
test01CannotCreateACartWithAnInvalidUserID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.

	self assertNonAuthenticatedClientFor: [apiCaller createCartFor: testObjectFactory invalidClientID withPassword: testObjectFactory invalidPassword].
! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 16:41:58' prior: 50894541!
test02CannotCreateACartWithAnInvalidPassword

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.

	self assertNonAuthenticatedClientFor: [apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory invalidPassword].
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 16:42:30' prior: 50895103!
test08CannotListPurchasesOfNonAuthenticatedClient

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.
	
	
	self assertNonAuthenticatedClientFor: [apiCaller 
				listPurchasesOf: testObjectFactory defaultClientID 
				withPassword: testObjectFactory invalidPassword].

		
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 16:42:34' prior: 50895307!
test08CannotListPurchasesOfNonAuthenticatedClient

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.
	
	self assertNonAuthenticatedClientFor: [apiCaller 
				listPurchasesOf: testObjectFactory defaultClientID 
				withPassword: testObjectFactory invalidPassword].

		
	! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 16:42:41'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 16:42:41'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 16:42:41'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 16:42:41'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 16:42:41'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 16:42:41'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 16:42:41'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/1/2020 16:42:41'!
PASSED!
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 16:44:45'!
test09

	| apiCaller cartID purchases |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	apiCaller add: 5 to: cartID of: testObjectFactory itemSellByTheStore.
	
	apiCaller 
		checkout: cartID 
		withCreditCardNumber: testObjectFactory defaultCreditCardNumber 
		andCreditCardExpirationDate: testObjectFactory notExpiredDate
		andCreditCardOwner: testObjectFactory defaultCreditCardOwner.
		
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore.
	
	apiCaller 
		checkout: cartID 
		withCreditCardNumber: testObjectFactory defaultCreditCardNumber 
		andCreditCardExpirationDate: testObjectFactory notExpiredDate
		andCreditCardOwner: testObjectFactory defaultCreditCardOwner.
		
	purchases := apiCaller listPurchasesOf: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	self deny:  purchases isEmpty.
	self assert: 50 equals: purchases first total.
	self assert: purchases first items includes: testObjectFactory itemSellByTheStore.
	
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 16:45:13' prior: 50895364!
test09

	| apiCaller cartID purchases |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	apiCaller add: 5 to: cartID of: testObjectFactory itemSellByTheStore.
	
	apiCaller 
		checkout: cartID 
		withCreditCardNumber: testObjectFactory defaultCreditCardNumber 
		andCreditCardExpirationDate: testObjectFactory notExpiredDate
		andCreditCardOwner: testObjectFactory defaultCreditCardOwner.
		
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore.
	
	apiCaller 
		checkout: cartID 
		withCreditCardNumber: testObjectFactory defaultCreditCardNumber 
		andCreditCardExpirationDate: testObjectFactory notExpiredDate
		andCreditCardOwner: testObjectFactory defaultCreditCardOwner.
		
	purchases := apiCaller listPurchasesOf: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	self deny:  purchases isEmpty.
	self assert: 50 equals: purchases first total.
	self assert: 20 equals: (purchases at: 2) total.	
	self assert: purchases first items includes: testObjectFactory itemSellByTheStore.
	
	! !

!testRun: #InternalApiTest #test09 stamp: 'db 12/1/2020 16:45:19'!
PASSED!

!methodRemoval: InternalApiTest #test09 stamp: 'db 12/1/2020 16:45:27'!
test09

	| apiCaller cartID purchases |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	apiCaller add: 5 to: cartID of: testObjectFactory itemSellByTheStore.
	
	apiCaller 
		checkout: cartID 
		withCreditCardNumber: testObjectFactory defaultCreditCardNumber 
		andCreditCardExpirationDate: testObjectFactory notExpiredDate
		andCreditCardOwner: testObjectFactory defaultCreditCardOwner.
		
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore.
	
	apiCaller 
		checkout: cartID 
		withCreditCardNumber: testObjectFactory defaultCreditCardNumber 
		andCreditCardExpirationDate: testObjectFactory notExpiredDate
		andCreditCardOwner: testObjectFactory defaultCreditCardOwner.
		
	purchases := apiCaller listPurchasesOf: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	self deny:  purchases isEmpty.
	self assert: 50 equals: purchases first total.
	self assert: 20 equals: (purchases at: 2) total.	
	self assert: purchases first items includes: testObjectFactory itemSellByTheStore.
	
	!
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 16:47:37'!
test10CannotAddToCartToAnExpiredCart

	| ui cartID todaySimulator testObjectsFactory |
	
	todaySimulator := DateSimulator new.
	todaySimulator now: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator now: ( (todaySimulator now) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 16:48:05' prior: 50894574!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

	| apiCaller cartID items |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore .
	items := apiCaller listCart: cartID.
	
	self deny: items isEmpty.
	self assert: items includes: testObjectFactory itemSellByTheStore.! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 16:48:29' prior: 50895501!
test10CannotAddToCartToAnExpiredCart

| apiCaller cartID items |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore .
	items := apiCaller listCart: cartID.
	
	self deny: items isEmpty.
	self assert: items includes: testObjectFactory itemSellByTheStore.
	"
	| ui cartID todaySimulator testObjectsFactory |
	
	
	
	todaySimulator := DateSimulator new.
	todaySimulator now: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator now: ( (todaySimulator now) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	"
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 16:48:43' prior: 50895553!
test10CannotAddToCartToAnExpiredCart

	| apiCaller cartID items |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore .
	items := apiCaller listCart: cartID.
	
	self deny: items isEmpty.
	self assert: items includes: testObjectFactory itemSellByTheStore.
	"
	| ui cartID todaySimulator testObjectsFactory |

	todaySimulator := DateSimulator new.
	todaySimulator now: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator now: ( (todaySimulator now) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	"
	! !

!classRenamed: #DateSimulator as: #ClockSimulator stamp: 'db 12/1/2020 16:49:10'!
Smalltalk renameClassNamed: #DateSimulator as: #ClockSimulator!
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 16:49:11' prior: 50891681!
test12CannotCheckoutToAnExpiredCart

	| ui cartID todaySimulator creditCard |
	
	todaySimulator := ClockSimulator new.
	todaySimulator now: GregorianDateTime now. 
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.
	
	todaySimulator now: ( (todaySimulator now) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ ui checkout: cartID charging: creditCard.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 16:49:11' prior: 50891624!
test11CannotListCartToAnExpiredCart

	| ui cartID todaySimulator |
	
	todaySimulator := ClockSimulator new.
	todaySimulator now: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator now: ( (todaySimulator now) next: (TimeUnits minute with: 35) ).
	
	
	self 
	should: [ui listCart: cartID.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !
!UserInterfaceTest methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 16:49:11' prior: 50891563!
test10CannotAddToCartToAnExpiredCart

	| ui cartID todaySimulator |
	
	todaySimulator := ClockSimulator new.
	todaySimulator now: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator now: ( (todaySimulator now) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	
	" 10:00    10:05    "
	"   |----------|--------------------------------------------------|"
	
	
	
	
	
! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 16:51:17' prior: 50895597!
test10CannotAddToCartToAnExpiredCart

	| apiCaller cartID items clock |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.
	
	clock := ClockSimulator new.
	clock now: Date now.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore .
	items := apiCaller listCart: cartID.
	
	self deny: items isEmpty.
	self assert: items includes: testObjectFactory itemSellByTheStore.
	"
	| ui cartID todaySimulator testObjectsFactory |

	todaySimulator := DateSimulator new.
	todaySimulator now: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator now: ( (todaySimulator now) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	"
	! !

Date now!

DateAndTime now!

DateAndTime now + 30!
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 16:52:57' prior: 50895739!
test10CannotAddToCartToAnExpiredCart

	| apiCaller cartID items clock |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog.
	
	clock := ClockSimulator new.
	clock now: DateAndTime now.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore .
	items := apiCaller listCart: cartID.
	
	self deny: items isEmpty.
	self assert: items includes: testObjectFactory itemSellByTheStore.
	"
	| ui cartID todaySimulator testObjectsFactory |

	todaySimulator := DateSimulator new.
	todaySimulator now: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator now: ( (todaySimulator now) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	"
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 16:53:36' prior: 50895786!
test10CannotAddToCartToAnExpiredCart

	| apiCaller cartID items clock |
	clock := ClockSimulator new.
	clock now: DateAndTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore .
	items := apiCaller listCart: cartID.
	
	self deny: items isEmpty.
	self assert: items includes: testObjectFactory itemSellByTheStore.
	"
	| ui cartID todaySimulator testObjectsFactory |

	todaySimulator := DateSimulator new.
	todaySimulator now: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator now: ( (todaySimulator now) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	"
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 16:54:35' prior: 50895832!
test10CannotAddToCartToAnExpiredCart

	| apiCaller cartID clock |
	clock := ClockSimulator new.
	clock now: DateAndTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore .
	
	"
	| ui cartID todaySimulator testObjectsFactory |

	todaySimulator := DateSimulator new.
	todaySimulator now: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator now: ( (todaySimulator now) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	"
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 16:55:16' prior: 50895878!
test10CannotAddToCartToAnExpiredCart

	| apiCaller cartID clock |
	clock := ClockSimulator new.
	clock now: DateAndTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	
	clock now: DateAndTime now + 30.
	self 
		should: [apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore .] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	
	
	"
	| ui cartID todaySimulator testObjectsFactory |

	todaySimulator := DateSimulator new.
	todaySimulator now: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator now: ( (todaySimulator now) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	"
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 16:56:02' prior: 50895920!
test10CannotAddToCartToAnExpiredCart

	| apiCaller cartID clock |
	clock := ClockSimulator new.
	clock now: DateAndTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	
	clock now: DateAndTime now + 30.
	self 
		should: [apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore .] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi operationOnExpiredCartErrorDescription ]
	
	
	"
	| ui cartID todaySimulator testObjectsFactory |

	todaySimulator := DateSimulator new.
	todaySimulator now: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator now: ( (todaySimulator now) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	"
	! !
!InternalApi class methodsFor: 'instance creation' stamp: 'db 12/1/2020 16:56:53'!
withAuthenticator: anAuthenticator throught: aMerchantProcessor withCatalog: aCatalog andClock: andClock   
	
	^self new initializeWithAuthenticator: anAuthenticator throught: aMerchantProcessor withCatalog: aCatalog.! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 16:56:53' prior: 50894594!
test05CannotAddItemsToAnInvalidCartID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: andClock.
	
	self 
		should: [apiCaller add: 4 to: testObjectFactory invalidCartID of: testObjectFactory itemSellByTheStore ] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription]
	! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 16:56:53' prior: 50895322!
test08CannotListPurchasesOfNonAuthenticatedClient

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: andClock.
	
	self assertNonAuthenticatedClientFor: [apiCaller 
				listPurchasesOf: testObjectFactory defaultClientID 
				withPassword: testObjectFactory invalidPassword].

		
	! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 16:56:53' prior: 50894560!
test03NewCartsAreCreatedEmpty

	| apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: andClock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	self assert: (apiCaller listCart: cartID) isEmpty.
	
	! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 16:56:53' prior: 50895009!
test07AfterSucessfulCheckoutThePurchaseIsSaved

	| apiCaller cartID purchases |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: andClock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	apiCaller add: 5 to: cartID of: testObjectFactory itemSellByTheStore.
	
	apiCaller 
		checkout: cartID 
		withCreditCardNumber: testObjectFactory defaultCreditCardNumber 
		andCreditCardExpirationDate: testObjectFactory notExpiredDate
		andCreditCardOwner: testObjectFactory defaultCreditCardOwner.
		
	purchases := apiCaller listPurchasesOf: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	self deny:  purchases isEmpty.
	self assert: 50 equals: purchases first total.
	self assert: purchases first items includes: testObjectFactory itemSellByTheStore.
	
	! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 16:56:53' prior: 50895279!
test01CannotCreateACartWithAnInvalidUserID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: andClock.

	self assertNonAuthenticatedClientFor: [apiCaller createCartFor: testObjectFactory invalidClientID withPassword: testObjectFactory invalidPassword].
! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 16:56:53' prior: 50895532!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

	| apiCaller cartID items |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: andClock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore .
	items := apiCaller listCart: cartID.
	
	self deny: items isEmpty.
	self assert: items includes: testObjectFactory itemSellByTheStore.! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 16:56:53' prior: 50894611!
test06CannotCheckoutACartWithAnInvalidCartID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: andClock.
	
	self 
		should: [apiCaller 
			checkout: testObjectFactory invalidCartID 
			withCreditCardNumber: testObjectFactory defaultCreditCardNumber
			andCreditCardExpirationDate: testObjectFactory notExpiredDate
			andCreditCardOwner: testObjectFactory defaultCreditCardOwner] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription]
	! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 16:56:53' prior: 50895293!
test02CannotCreateACartWithAnInvalidPassword

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: andClock.

	self assertNonAuthenticatedClientFor: [apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory invalidPassword].
	! !

!methodRemoval: InternalApi class #withAuthenticator:throught:withCatalog: stamp: 'db 12/1/2020 16:56:53'!
withAuthenticator: anAuthenticator throught: aMerchantProcessor withCatalog: aCatalog  
	
	^self new initializeWithAuthenticator: anAuthenticator throught: aMerchantProcessor withCatalog: aCatalog.!
!InternalApi class methodsFor: 'instance creation' stamp: 'db 12/1/2020 16:57:01' prior: 50896017!
withAuthenticator: anAuthenticator throught: aMerchantProcessor withCatalog: aCatalog andClock: aClock   
	
	^self new initializeWithAuthenticator: anAuthenticator throught: aMerchantProcessor withCatalog: aCatalog.! !

Object subclass: #InternalApi
	instanceVariableNames: 'authenticator merchantProcessor catalog carts sequence salesBook clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalApi category: 'TusLibros' stamp: 'db 12/1/2020 16:57:11'!
Object subclass: #InternalApi
	instanceVariableNames: 'authenticator merchantProcessor catalog carts sequence salesBook clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalApi methodsFor: 'initialization' stamp: 'db 12/1/2020 16:57:53'!
initializeWithAuthenticator: anAuthenticator throught: aMerchantProcessor withCatalog: aCatalog andClock: andClock   
	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor. 
	sequence := 1.
	carts := Dictionary new.
	salesBook := Dictionary new.! !
!InternalApi class methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 16:57:53' prior: 50896192!
withAuthenticator: anAuthenticator throught: aMerchantProcessor withCatalog: aCatalog andClock: aClock   
	
	^self new initializeWithAuthenticator: anAuthenticator throught: aMerchantProcessor withCatalog: aCatalog andClock: andClock.! !

!methodRemoval: InternalApi #initializeWithAuthenticator:throught:withCatalog: stamp: 'db 12/1/2020 16:57:53'!
initializeWithAuthenticator: anAuthenticator throught: aMerchantProcessor withCatalog: aCatalog  
	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor. 
	sequence := 1.
	carts := Dictionary new.
	salesBook := Dictionary new.!
!InternalApi methodsFor: 'initialization' stamp: 'db 12/1/2020 16:58:05' prior: 50896217!
initializeWithAuthenticator: anAuthenticator throught: aMerchantProcessor withCatalog: aCatalog andClock: aClock   
	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor. 
	sequence := 1.
	carts := Dictionary new.
	salesBook := Dictionary new.
	clock := aClock ! !
!InternalApi class methodsFor: 'instance creation' stamp: 'db 12/1/2020 16:58:15' prior: 50896230!
withAuthenticator: anAuthenticator throught: aMerchantProcessor withCatalog: aCatalog andClock: aClock   
	
	^self new initializeWithAuthenticator: anAuthenticator throught: aMerchantProcessor withCatalog: aCatalog andClock: aClock .! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 16:58:36' prior: 50896109!
test01CannotCreateACartWithAnInvalidUserID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: DateAndTime new.

	self assertNonAuthenticatedClientFor: [apiCaller createCartFor: testObjectFactory invalidClientID withPassword: testObjectFactory invalidPassword].
! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 16:58:44' prior: 50896168!
test02CannotCreateACartWithAnInvalidPassword

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock:  DateAndTime new.

	self assertNonAuthenticatedClientFor: [apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory invalidPassword].
	! !

DateAndTime new!

self now!
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 16:59:09' prior: 50896292!
test02CannotCreateACartWithAnInvalidPassword

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock:  DateAndTime now.

	self assertNonAuthenticatedClientFor: [apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory invalidPassword].
	! !

 DateAndTime now!

self now!

!classDefinition: #InternalApiTest category: 'TusLibros' stamp: 'db 12/1/2020 17:00:15'!
TestCase subclass: #InternalApiTest
	instanceVariableNames: 'testObjectFactory authenticatedClients merchantProcessor defaultClock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalApiTest methodsFor: 'setUp/tearDown' stamp: 'db 12/1/2020 17:00:08' prior: 50894512 overrides: 16927572!
setUp

	testObjectFactory := StoreTestObjectsFactory new.
	
	authenticatedClients := Dictionary new.
	authenticatedClients at: testObjectFactory defaultClientID put: testObjectFactory defaultPassword.
	
	merchantProcessor := MerchantProcessorSimulator new.
	
	defaultClock := ClockSimulator new.! !
!InternalApiTest methodsFor: 'setUp/tearDown' stamp: 'db 12/1/2020 17:00:25' prior: 50896334 overrides: 16927572!
setUp

	testObjectFactory := StoreTestObjectsFactory new.
	
	authenticatedClients := Dictionary new.
	authenticatedClients at: testObjectFactory defaultClientID put: testObjectFactory defaultPassword.
	
	merchantProcessor := MerchantProcessorSimulator new.
	
	defaultClock := ClockSimulator new.! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 17:00:58' prior: 50896277!
test01CannotCreateACartWithAnInvalidUserID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: defaultClock .

	self assertNonAuthenticatedClientFor: [apiCaller createCartFor: testObjectFactory invalidClientID withPassword: testObjectFactory invalidPassword].
! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 17:01:11' prior: 50896308!
test02CannotCreateACartWithAnInvalidPassword

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock:  defaultClock.

	self assertNonAuthenticatedClientFor: [apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory invalidPassword].
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 17:01:14' prior: 50896061!
test03NewCartsAreCreatedEmpty

	| apiCaller cartID |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: defaultClock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	self assert: (apiCaller listCart: cartID) isEmpty.
	
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 17:01:17' prior: 50896124!
test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore

	| apiCaller cartID items |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: defaultClock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore .
	items := apiCaller listCart: cartID.
	
	self deny: items isEmpty.
	self assert: items includes: testObjectFactory itemSellByTheStore.! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 17:01:21' prior: 50896027!
test05CannotAddItemsToAnInvalidCartID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: defaultClock.
	
	self 
		should: [apiCaller add: 4 to: testObjectFactory invalidCartID of: testObjectFactory itemSellByTheStore ] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription]
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 17:01:25' prior: 50896145!
test06CannotCheckoutACartWithAnInvalidCartID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: defaultClock.
	
	self 
		should: [apiCaller 
			checkout: testObjectFactory invalidCartID 
			withCreditCardNumber: testObjectFactory defaultCreditCardNumber
			andCreditCardExpirationDate: testObjectFactory notExpiredDate
			andCreditCardOwner: testObjectFactory defaultCreditCardOwner] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription]
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 17:01:28' prior: 50896076!
test07AfterSucessfulCheckoutThePurchaseIsSaved

	| apiCaller cartID purchases |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: defaultClock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	apiCaller add: 5 to: cartID of: testObjectFactory itemSellByTheStore.
	
	apiCaller 
		checkout: cartID 
		withCreditCardNumber: testObjectFactory defaultCreditCardNumber 
		andCreditCardExpirationDate: testObjectFactory notExpiredDate
		andCreditCardOwner: testObjectFactory defaultCreditCardOwner.
		
	purchases := apiCaller listPurchasesOf: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	self deny:  purchases isEmpty.
	self assert: 50 equals: purchases first total.
	self assert: purchases first items includes: testObjectFactory itemSellByTheStore.
	
	! !
!InternalApiTest methodsFor: 'testing' stamp: 'db 12/1/2020 17:01:30' prior: 50896045!
test08CannotListPurchasesOfNonAuthenticatedClient

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: defaultClock.
	
	self assertNonAuthenticatedClientFor: [apiCaller 
				listPurchasesOf: testObjectFactory defaultClientID 
				withPassword: testObjectFactory invalidPassword].

		
	! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 17:01:34'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 17:01:34'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 17:01:34'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 17:01:34'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 17:01:34'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 17:01:34'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 17:01:34'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/1/2020 17:01:34'!
PASSED!
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 17:01:45' prior: 50895969!
test10CannotAddToCartToAnExpiredCart

	| apiCaller cartID clock |
	clock := ClockSimulator new.
	clock now: DateAndTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	
	clock now: DateAndTime now.
	self 
		should: [apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore .] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi operationOnExpiredCartErrorDescription ]
	
	
	"
	| ui cartID todaySimulator testObjectsFactory |

	todaySimulator := DateSimulator new.
	todaySimulator now: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator now: ( (todaySimulator now) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	"
	! !

Date now!

Date today!

Time now!

self + 10!
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 17:07:02'!
test09CannotAddToCartToAnExpiredCart

	| apiCaller cartID clock |
	clock := ClockSimulator new.
	clock now: DateAndTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	
	clock now: DateAndTime now.
	self 
		should: [apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore .] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi operationOnExpiredCartErrorDescription ]
	
	
	"
	| ui cartID todaySimulator testObjectsFactory |

	todaySimulator := DateSimulator new.
	todaySimulator now: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator now: ( (todaySimulator now) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	"
	! !

!methodRemoval: InternalApiTest #test10CannotAddToCartToAnExpiredCart stamp: 'db 12/1/2020 17:07:02'!
test10CannotAddToCartToAnExpiredCart

	| apiCaller cartID clock |
	clock := ClockSimulator new.
	clock now: DateAndTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .
	
	
	clock now: DateAndTime now.
	self 
		should: [apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore .] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi operationOnExpiredCartErrorDescription ]
	
	
	"
	| ui cartID todaySimulator testObjectsFactory |

	todaySimulator := DateSimulator new.
	todaySimulator now: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator now: ( (todaySimulator now) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	"
	!
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 17:07:53' prior: 50896593!
test09CannotAddToCartToAnExpiredCart

	| apiCaller cartID clock |
	clock := ClockSimulator new.
	clock now: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .

	clock now: ( (clock now) next: (TimeUnits minute with: 30) ).

	self 
		should: [apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore .] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi operationOnExpiredCartErrorDescription ]
	
	
	"
	| ui cartID todaySimulator testObjectsFactory |

	todaySimulator := DateSimulator new.
	todaySimulator now: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator now: ( (todaySimulator now) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	"
	! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 17:07:56'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 17:07:56'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 17:07:56'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 17:07:56'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 17:07:56'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 17:07:56'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 17:07:56'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/1/2020 17:07:56'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/1/2020 17:07:56'!
FAILURE!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/1/2020 17:07:56'!
FAILURE!

Object subclass: #CartContainer
	instanceVariableNames: 'cart clientID lastTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartContainer category: 'TusLibros' stamp: 'db 12/1/2020 17:09:35'!
Object subclass: #CartContainer
	instanceVariableNames: 'cart clientID lastTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartContainer class methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 17:10:58'!
with: aCart associatedTo: aClientID createAt: createAt 
	^CartContainer new initializeWith: aCart associatedTo: aClientID.! !
!InternalApi methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 17:10:58' prior: 50893853!
createCartFor: aClientID withPassword: aPassword

	| cart cartID |
	(authenticator authenticate: aClientID withPassword: aPassword) ifFalse: [self class signalNonAuthenticatedClient].	
	
	" Duda: un cliente puede tener m�s de un carrito activo? "
	cart := Cart acceptingItemsOf: catalog.
	cartID := self nextID.
	carts at: cartID put: (CartContainer with: cart associatedTo: aClientID createAt: createAt) .
	
	"Guardo el cart en el dictionary de salesbook"
	
	
	^cartID.! !

!methodRemoval: CartContainer class #with:associatedTo: stamp: 'db 12/1/2020 17:10:58'!
with: aCart associatedTo: aClientID
	^CartContainer new initializeWith: aCart associatedTo: aClientID.!
!CartContainer class methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 17:11:14' prior: 50896786!
with: aCart associatedTo: aClientID createAt: aDateAndTime
	^CartContainer new initializeWith: aCart associatedTo: aClientID.! !
!CartContainer methodsFor: 'initialization' stamp: 'db 12/1/2020 17:11:48'!
initializeWith: aCart associatedTo: aClientID createdAt: createdAt 
	clientID := aClientID.
	cart := aCart.! !
!CartContainer class methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 17:11:48' prior: 50896818!
with: aCart associatedTo: aClientID createAt: aDateAndTime
	^CartContainer new initializeWith: aCart associatedTo: aClientID createdAt: createdAt.! !

!methodRemoval: CartContainer #initializeWith:associatedTo: stamp: 'db 12/1/2020 17:11:48'!
initializeWith: aCart associatedTo: aClientID
	clientID := aClientID.
	cart := aCart.!
!CartContainer methodsFor: 'initialization' stamp: 'db 12/1/2020 17:12:06' prior: 50896825!
initializeWith: aCart associatedTo: aClientID createdAt: aDateAndTime 
	clientID := aClientID.
	cart := aCart.
	lastTimeUsed := aDateAndTime! !
!CartContainer class methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 17:12:14' prior: 50896832!
with: aCart associatedTo: aClientID createAt: aDateAndTime
	^CartContainer new initializeWith: aCart associatedTo: aClientID createdAt: aDateAndTime .! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 17:12:32'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 17:12:32'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 17:12:32'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 17:12:32'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 17:12:32'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 17:12:32'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 17:12:32'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/1/2020 17:12:32'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/1/2020 17:12:32'!
FAILURE!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/1/2020 17:12:32'!
FAILURE!
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 17:13:08' prior: 50896793!
createCartFor: aClientID withPassword: aPassword

	| cart cartID |
	(authenticator authenticate: aClientID withPassword: aPassword) ifFalse: [self class signalNonAuthenticatedClient].	
	
	" Duda: un cliente puede tener m�s de un carrito activo? "
	cart := Cart acceptingItemsOf: catalog.
	cartID := self nextID.
	carts at: cartID put: (CartContainer with: cart associatedTo: aClientID createAt: clock now) .
	
	"Guardo el cart en el dictionary de salesbook"
	
	
	^cartID.! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 17:14:08' prior: 50894354!
add: aQuantity to: aCartID of: anItem
	
	| cartContainer |
	
	cartContainer := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	
	
	cartContainer cartStored add: aQuantity of: anItem.
	
	 
! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 17:14:52'!
isExpired: aCartID
	^(self activeDuration: aCartID) > 30.! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 17:16:01' prior: 50896915!
add: aQuantity to: aCartID of: anItem
	
	| cartContainer |
	
	cartContainer := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	
	(self isExpired: aCartID) ifTrue: [^self class signalOperationOnExpiredCart].
	
	cartContainer cartStored add: aQuantity of: anItem.
	
	 
! !
!InternalApi class methodsFor: 'signals' stamp: 'db 12/1/2020 17:17:27'!
signalOperationOnExpiredCart
	
	^self error: self operationOnExpiredCartErrorDescription ! !
!InternalApi class methodsFor: 'error messages' stamp: 'db 12/1/2020 17:17:43'!
operationOnExpiredCartErrorDescription
	^'Operation on expired cart'! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 17:17:57'!
activeDuration: aCartID
	! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 17:18:43' prior: 50896952!
activeDuration: aCartID
	| cartContainer |
	cartContainer := carts at: aCartID.
	
	^ (cartContainer lastTimeUsed distanceTo: clock now) convertTo: minute.
! !
!CartContainer methodsFor: 'initialization' stamp: 'db 12/1/2020 17:18:57'!
lastTimeUsed
	^lastTimeUsed ! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 17:20:11' prior: 50896924!
isExpired: aCartID
	^(self activeDuration: aCartID) > (SimpleMeasure amount: 30 unit: minute).! !

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/1/2020 17:20:29'!
FAILURE!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/1/2020 17:20:29'!
FAILURE!

(self activeDuration: aCartID) !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 17:21:18' prior: 50896968!
isExpired: aCartID
	^(self activeDuration: aCartID) >= (SimpleMeasure amount: 30 unit: minute).! !

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/1/2020 17:21:20'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 17:21:24'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 17:21:24'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 17:21:24'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 17:21:24'!
ERROR!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 17:21:24'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 17:21:24'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 17:21:24'!
ERROR!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/1/2020 17:21:24'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/1/2020 17:21:24'!
PASSED!
!InternalApiTest methodsFor: 'setUp/tearDown' stamp: 'db 12/1/2020 17:22:06' prior: 50896347 overrides: 16927572!
setUp

	testObjectFactory := StoreTestObjectsFactory new.
	
	authenticatedClients := Dictionary new.
	authenticatedClients at: testObjectFactory defaultClientID put: testObjectFactory defaultPassword.
	
	merchantProcessor := MerchantProcessorSimulator new.
	
	defaultClock := ClockSimulator new.
	defaultClock now: GregorianDateTime now.! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 17:22:10'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 17:22:10'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 17:22:10'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 17:22:10'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 17:22:10'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 17:22:10'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 17:22:10'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/1/2020 17:22:10'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/1/2020 17:22:10'!
PASSED!
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 17:22:39'!
test10CannotListCartToAnExpiredCart

	| apiCaller cartID clock |
	clock := ClockSimulator new.
	clock now: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .

	clock now: ( (clock now) next: (TimeUnits minute with: 30) ).

	self 
		should: [apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore .] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi operationOnExpiredCartErrorDescription ]
	
	
	"
	| ui cartID todaySimulator testObjectsFactory |

	todaySimulator := DateSimulator new.
	todaySimulator now: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator now: ( (todaySimulator now) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	"
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 17:23:02' prior: 50897069!
test10CannotListCartToAnExpiredCart

	| apiCaller cartID clock |
	clock := ClockSimulator new.
	clock now: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .

	clock now: ( (clock now) next: (TimeUnits minute with: 30) ).

	self 
		should: [apiCaller listCart: cartID] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi operationOnExpiredCartErrorDescription ]
	
	
	"
	| ui cartID todaySimulator testObjectsFactory |

	todaySimulator := DateSimulator new.
	todaySimulator now: GregorianDateTime now. 
	
	ui := UserInterface with: self catalog: testObjectsFactory defaultCatalog throught: self on: testObjectsFactory today timeService: todaySimulator.
	
	cartID := ui createCartFor: testObjectsFactory defaultClientID withPassword:  testObjectsFactory defaultPassword.
	
	todaySimulator now: ( (todaySimulator now) next: (TimeUnits minute with: 35) ).
	
	self 
	should: [ui addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 5.] raise: Error - MessageNotUnderstood
	 withExceptionDo: 
		[:anError | self assert: anError messageText = UserInterface operationOnExpiredCartErrorDescription.].
	"
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 17:23:11' prior: 50897119!
test10CannotListCartToAnExpiredCart

	| apiCaller cartID clock |
	clock := ClockSimulator new.
	clock now: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .

	clock now: ( (clock now) next: (TimeUnits minute with: 30) ).

	self 
		should: [apiCaller listCart: cartID] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi operationOnExpiredCartErrorDescription ]
	
	
	
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 17:23:15' prior: 50897167!
test10CannotListCartToAnExpiredCart

	| apiCaller cartID clock |
	clock := ClockSimulator new.
	clock now: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .

	clock now: ( (clock now) next: (TimeUnits minute with: 30) ).

	self 
		should: [apiCaller listCart: cartID] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi operationOnExpiredCartErrorDescription ]
	! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 17:23:24'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 17:23:24'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 17:23:24'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 17:23:24'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 17:23:24'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 17:23:24'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 17:23:24'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/1/2020 17:23:24'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/1/2020 17:23:24'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/1/2020 17:23:24'!
FAILURE!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/1/2020 17:23:24'!
FAILURE!
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 17:24:35' prior: 50894309!
listCart: aCartID 
	| cartContiner |
	
	(self isExpired: aCartID) ifTrue: [^self class signalOperationOnExpiredCart ].
	
	
	cartContiner := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	
	^cartContiner cartStored items asBag.! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 17:24:38' prior: 50897254!
listCart: aCartID 
	| cartContiner |
	
	(self isExpired: aCartID) ifTrue: [^self class signalOperationOnExpiredCart ].
	cartContiner := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	
	^cartContiner cartStored items asBag.! !

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/1/2020 17:24:43'!
PASSED!
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 17:25:08'!
test11CannotCheckoutToAnExpiredCart

	| apiCaller cartID clock |
	clock := ClockSimulator new.
	clock now: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .

	clock now: ( (clock now) next: (TimeUnits minute with: 30) ).

	self 
		should: [apiCaller listCart: cartID] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi operationOnExpiredCartErrorDescription ]
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 17:25:31' prior: 50897279!
test11CannotCheckoutToAnExpiredCart

	| apiCaller cartID clock |
	clock := ClockSimulator new.
	clock now: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .

	clock now: ( (clock now) next: (TimeUnits minute with: 30) ).

	self 
		should: [	apiCaller 
			checkout: cartID 
			withCreditCardNumber: testObjectFactory defaultCreditCardNumber 
			andCreditCardExpirationDate: testObjectFactory notExpiredDate
			andCreditCardOwner: testObjectFactory defaultCreditCardOwner.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi operationOnExpiredCartErrorDescription ]
	! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 17:25:38'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 17:25:38'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 17:25:38'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 17:25:38'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 17:25:38'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 17:25:38'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 17:25:38'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/1/2020 17:25:38'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/1/2020 17:25:39'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/1/2020 17:25:39'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/1/2020 17:25:39'!
FAILURE!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/1/2020 17:25:39'!
FAILURE!
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 17:26:46' prior: 50894403!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartContiner clientID clientSalesBook creditCard cashier |
	
	(self isExpired: aCartID) ifTrue: [^self class signalOperationOnExpiredCart ].
	
	cartContiner := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	clientID := cartContiner clientAssociated.
	clientSalesBook := salesBook at:	 clientID ifAbsent: [clientSalesBook := OrderedCollection new.].
	
	creditCard := CreditCard expiringOn: aCCED. 
	
	cashier := Cashier 
		toCheckout: cartContiner cartStored 
		charging: creditCard
		throught: merchantProcessor 
		on: Date today
		registeringOn: clientSalesBook.
		
	cashier checkOut.
		
	

	salesBook at: clientID put: clientSalesBook.
	"Lasy initialization para el salesbook"
		
	
	"Create a cashier"
	
	"Necesito la asociacion entre carrito y clientID"
	! !

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/1/2020 17:26:47'!
PASSED!
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 17:28:12' prior: 50896929!
add: aQuantity to: aCartID of: anItem
	
	| cartContainer |
	
	cartContainer := carts at: aCartID ifAbsent: [^self class signalCartNotFound].
	
	(self isExpired: aCartID) ifTrue: [^self class signalOperationOnExpiredCart].
	
	cartContainer cartStored add: aQuantity of: anItem.
	
	 
! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 17:28:39'!
assertExpiredCart: aCartID 
	
	(self isExpired: aCartID) ifTrue: [^self class signalOperationOnExpiredCart].
	
	 
! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 17:29:22' prior: 50897410!
add: aQuantity to: aCartID of: anItem
	
	| cartContainer |
	
	cartContainer := carts at: aCartID ifAbsent: [^self class signalCartNotFound].
	
	self assertExpiredCart: aCartID.
	
	cartContainer cartStored add: aQuantity of: anItem.
	
	 
! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 17:29:28' prior: 50897376!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartContiner clientID clientSalesBook creditCard cashier |
	
	self assertExpiredCart: aCartID.
	
	cartContiner := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	clientID := cartContiner clientAssociated.
	clientSalesBook := salesBook at:	 clientID ifAbsent: [clientSalesBook := OrderedCollection new.].
	
	creditCard := CreditCard expiringOn: aCCED. 
	
	cashier := Cashier 
		toCheckout: cartContiner cartStored 
		charging: creditCard
		throught: merchantProcessor 
		on: Date today
		registeringOn: clientSalesBook.
		
	cashier checkOut.
		
	

	salesBook at: clientID put: clientSalesBook.
	"Lasy initialization para el salesbook"
		
	
	"Create a cashier"
	
	"Necesito la asociacion entre carrito y clientID"
	! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 17:29:40' prior: 50897265!
listCart: aCartID 
	| cartContiner |
	
	self assertExpiredCart: aCartID.
	cartContiner := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	
	^cartContiner cartStored items asBag.! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 17:30:08'!
assertNonAuthenticatedClient: aClientID withPassword: aPassword  

	(authenticator authenticate: aClientID withPassword: aPassword) ifFalse: [^self class signalNonAuthenticatedClient].
! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 17:30:45' prior: 50896897!
createCartFor: aClientID withPassword: aPassword

	| cart cartID |
	
	self assertNonAuthenticatedClient: aClientID withPassword: aPassword.
	
	" Duda: un cliente puede tener m�s de un carrito activo? "
	cart := Cart acceptingItemsOf: catalog.
	cartID := self nextID.
	carts at: cartID put: (CartContainer with: cart associatedTo: aClientID createAt: clock now) .
	
	"Guardo el cart en el dictionary de salesbook"
	
	
	^cartID.! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 17:30:57' prior: 50895182!
listPurchasesOf: aClientID withPassword: aPassword  

	self assertNonAuthenticatedClient: aClientID withPassword: aPassword.
	^salesBook at: aClientID ! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 17:31:17' prior: 50897440!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartContiner clientID clientSalesBook creditCard cashier |
	
	self assertExpiredCart: aCartID.
	
	cartContiner := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	clientID := cartContiner clientAssociated.
	clientSalesBook := salesBook at:	 clientID ifAbsent: [clientSalesBook := OrderedCollection new.].
	
	creditCard := CreditCard expiringOn: aCCED. 
	
	cashier := Cashier 
		toCheckout: cartContiner cartStored 
		charging: creditCard
		throught: merchantProcessor 
		on: Date today
		registeringOn: clientSalesBook.
		
	cashier checkOut.
		
	salesBook at: clientID put: clientSalesBook.
	
	! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 17:31:48' prior: 50897512!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartContiner clientID clientSalesBook creditCard cashier |
	
	self assertExpiredCart: aCartID.
	
	cartContiner := carts at: aCartID ifAbsent: [^self class signalCartNotFound].
	clientID := cartContiner clientAssociated.
	clientSalesBook := salesBook at:	 clientID ifAbsent: [clientSalesBook := OrderedCollection new.].
	
	creditCard := CreditCard expiringOn: aCCED. 
	
	cashier := Cashier 
		toCheckout: cartContiner cartStored 
		charging: creditCard
		throught: merchantProcessor 
		on: Date today
		registeringOn: clientSalesBook.
		
	cashier checkOut.
		
	salesBook at: clientID put: clientSalesBook.
	
	! !
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 17:32:21' prior: 50897538!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartContiner clientID clientSalesBook creditCard cashier |
	
	self assertExpiredCart: aCartID.
	
	cartContiner := carts at: aCartID ifAbsent: [^self class signalCartNotFound].
	clientID := cartContiner clientAssociated.
	clientSalesBook := salesBook at:	 clientID ifAbsent: [clientSalesBook := OrderedCollection new.].
	
	creditCard := CreditCard expiringOn: aCCED. 
	
	cashier := Cashier 
		toCheckout: cartContiner cartStored 
		charging: creditCard
		throught: merchantProcessor 
		on: Date today
		registeringOn: clientSalesBook.
		
	cashier checkOut.
		
	salesBook at: clientID put: clientSalesBook.
	
	! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 17:32:25'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 17:32:25'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 17:32:25'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 17:32:25'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 17:32:25'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 17:32:25'!
FAILURE!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 17:32:25'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/1/2020 17:32:25'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/1/2020 17:32:25'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/1/2020 17:32:25'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/1/2020 17:32:25'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 17:32:25'!
FAILURE!
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 17:33:36' prior: 50897564!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartContiner clientID clientSalesBook creditCard cashier |

	cartContiner := carts at: aCartID ifAbsent: [^self class signalCartNotFound].
	self assertExpiredCart: aCartID.
	clientID := cartContiner clientAssociated.
	clientSalesBook := salesBook at:	 clientID ifAbsent: [clientSalesBook := OrderedCollection new.].
	
	creditCard := CreditCard expiringOn: aCCED. 
	
	cashier := Cashier 
		toCheckout: cartContiner cartStored 
		charging: creditCard
		throught: merchantProcessor 
		on: Date today
		registeringOn: clientSalesBook.
		
	cashier checkOut.
		
	salesBook at: clientID put: clientSalesBook.
	
	! !

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 17:33:51'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 17:33:55'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 17:33:55'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 17:33:55'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 17:33:55'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 17:33:55'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 17:33:55'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 17:33:55'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/1/2020 17:33:55'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/1/2020 17:33:55'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/1/2020 17:33:55'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/1/2020 17:33:55'!
PASSED!
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 17:36:03'!
test12ExpiredCartShouldBeRemoved

	| apiCaller cartID clock |
	clock := ClockSimulator new.
	clock now: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .

	clock now: ( (clock now) next: (TimeUnits minute with: 30) ).

	self 
		should: [	apiCaller 
			checkout: cartID 
			withCreditCardNumber: testObjectFactory defaultCreditCardNumber 
			andCreditCardExpirationDate: testObjectFactory notExpiredDate
			andCreditCardOwner: testObjectFactory defaultCreditCardOwner.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi operationOnExpiredCartErrorDescription ]
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 17:36:31' prior: 50897699!
test12ExpiredCartShouldBeRemoved

	| apiCaller cartID clock |
	clock := ClockSimulator new.
	clock now: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .

	clock now: ( (clock now) next: (TimeUnits minute with: 30) ).

	self 
		should: [	apiCaller listCart: cartID.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi operationOnExpiredCartErrorDescription ]
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 17:36:43' prior: 50897730!
test12ExpiredCartShouldBeRemoved

	| apiCaller cartID clock |
	clock := ClockSimulator new.
	clock now: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .

	clock now: ( (clock now) next: (TimeUnits minute with: 30) ).

	self 
		should: [	apiCaller listCart: cartID.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi operationOnExpiredCartErrorDescription ]
		
	self 
		should: [	apiCaller listCart: cartID.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi operationOnExpiredCartErrorDescription ]		
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 17:37:43' prior: 50897755!
test12ExpiredCartShouldBeRemoved

	| apiCaller cartID clock |
	clock := ClockSimulator new.
	clock now: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .

	clock now: ( (clock now) next: (TimeUnits minute with: 30) ).

	self 
		should: [	apiCaller listCart: cartID.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi operationOnExpiredCartErrorDescription ].
		
	self 
		should: [	apiCaller listCart: cartID.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription ]	.
	! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 17:37:58'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 17:37:58'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 17:37:58'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 17:37:58'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 17:37:58'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 17:37:58'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 17:37:58'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/1/2020 17:37:58'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/1/2020 17:37:58'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/1/2020 17:37:58'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/1/2020 17:37:58'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/1/2020 17:37:58'!
FAILURE!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/1/2020 17:37:58'!
FAILURE!

----SNAPSHOT----(1 December 2020 17:38:53) CuisUniversity-4384.image priorSource: 18017838!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/1/2020 17:39:30'!
FAILURE!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/1/2020 17:39:38'!
FAILURE!
!InternalApi methodsFor: 'assertions' stamp: 'db 12/1/2020 17:41:40' prior: 50897422!
assertExpiredCart: aCartID 
	
	(self isExpired: aCartID) ifTrue: [
		carts remove: aCartID .
		^self class signalOperationOnExpiredCart].
	
	 
! !

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/1/2020 17:41:42'!
FAILURE!
!InternalApi methodsFor: 'assertions' stamp: 'db 12/1/2020 17:42:42' prior: 50897871!
assertExpiredCart: aCartID 
	
	(self isExpired: aCartID) ifTrue: [
		carts removeKey: aCartID .
		^self class signalOperationOnExpiredCart].
	
	 
! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 17:42:46'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 17:42:46'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 17:42:46'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 17:42:46'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 17:42:46'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 17:42:46'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 17:42:46'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/1/2020 17:42:46'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/1/2020 17:42:46'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/1/2020 17:42:46'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/1/2020 17:42:46'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/1/2020 17:42:46'!
FAILURE!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/1/2020 17:42:47'!
FAILURE!
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 17:45:55' prior: 50897469!
listCart: aCartID 
	| cartContiner |
	
	cartContiner := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	self assertExpiredCart: aCartID.
	
	
	^cartContiner cartStored items asBag.! !

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/1/2020 17:45:56'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 17:46:07'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 17:46:07'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 17:46:07'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 17:46:07'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 17:46:07'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 17:46:07'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 17:46:07'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/1/2020 17:46:07'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/1/2020 17:46:07'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/1/2020 17:46:07'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/1/2020 17:46:07'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/1/2020 17:46:07'!
PASSED!
!InternalApi methodsFor: 'assertions' stamp: 'db 12/1/2020 17:49:00'!
removeCartIfExpired: aCartID 
	
	(self isExpired: aCartID) ifTrue: [
		carts removeKey: aCartID .
		^self class signalOperationOnExpiredCart].
	
	 
! !
!InternalApi methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 17:49:00' prior: 50897429!
add: aQuantity to: aCartID of: anItem
	
	| cartContainer |
	
	cartContainer := carts at: aCartID ifAbsent: [^self class signalCartNotFound].
	
	self removeCartIfExpired: aCartID.
	
	cartContainer cartStored add: aQuantity of: anItem.
	
	 
! !
!InternalApi methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 17:49:00' prior: 50897632!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartContiner clientID clientSalesBook creditCard cashier |

	cartContiner := carts at: aCartID ifAbsent: [^self class signalCartNotFound].
	self removeCartIfExpired: aCartID.
	clientID := cartContiner clientAssociated.
	clientSalesBook := salesBook at:	 clientID ifAbsent: [clientSalesBook := OrderedCollection new.].
	
	creditCard := CreditCard expiringOn: aCCED. 
	
	cashier := Cashier 
		toCheckout: cartContiner cartStored 
		charging: creditCard
		throught: merchantProcessor 
		on: Date today
		registeringOn: clientSalesBook.
		
	cashier checkOut.
		
	salesBook at: clientID put: clientSalesBook.
	
	! !
!InternalApi methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 17:49:00' prior: 50897934!
listCart: aCartID 
	| cartContiner |
	
	cartContiner := carts at: aCartID ifAbsent: [self class signalCartNotFound ].
	self removeCartIfExpired: aCartID.
	
	
	^cartContiner cartStored items asBag.! !

!methodRemoval: InternalApi #assertExpiredCart: stamp: 'db 12/1/2020 17:49:00'!
assertExpiredCart: aCartID 
	
	(self isExpired: aCartID) ifTrue: [
		carts removeKey: aCartID .
		^self class signalOperationOnExpiredCart].
	
	 
!
!InternalApi methodsFor: 'interface' stamp: 'db 12/1/2020 17:49:40' prior: 50897995!
add: aQuantity to: aCartID of: anItem
	
	| cartContainer |
	
	cartContainer := carts at: aCartID ifAbsent: [^self class signalCartNotFound].
	
	self removeCartIfExpired: aCartID.
	
	cartContainer cartStored add: aQuantity of: anItem.
	
	 
! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 17:51:30' prior: 50896689!
test09CannotAddToCartToAnExpiredCart

	| apiCaller cartID clock |
	clock := ClockSimulator new.
	clock now: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .

	clock now: ( (clock now) next: (TimeUnits minute with: 30) ).

	self 
		should: [apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore .] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi operationOnExpiredCartErrorDescription ]
! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 17:52:45'!
assertOperationOnExpiredCart: operationBlock

	| apiCaller cartID clock |
	clock := ClockSimulator new.
	clock now: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .

	clock now: ( (clock now) next: (TimeUnits minute with: 30) ).

	self 
		should: [apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore .] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi operationOnExpiredCartErrorDescription ]
! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 17:52:58' prior: 50898086!
assertOperationOnExpiredCart: operationBlock

	| apiCaller cartID clock |
	clock := ClockSimulator new.
	clock now: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .

	clock now: ( (clock now) next: (TimeUnits minute with: 30) ).

	self 
		should: [operationBlock value] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi operationOnExpiredCartErrorDescription ]
! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 17:53:05' prior: 50898112!
assertOperationOnExpiredCart: operationBlock

	self 
		should: [operationBlock value] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi operationOnExpiredCartErrorDescription ]
! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 17:53:46' prior: 50898060!
test09CannotAddToCartToAnExpiredCart

	| apiCaller cartID clock |
	clock := ClockSimulator new.
	clock now: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .

	clock now: ( (clock now) next: (TimeUnits minute with: 30) ).
	
	
	self assertOperationOnExpiredCart: [apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore].! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 17:53:49' prior: 50898149!
test09CannotAddToCartToAnExpiredCart

	| apiCaller cartID clock |
	clock := ClockSimulator new.
	clock now: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .

	clock now: ( (clock now) next: (TimeUnits minute with: 30) ).
	
	self assertOperationOnExpiredCart: [apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore].! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 17:54:13' prior: 50897192!
test10CannotListCartToAnExpiredCart

	| apiCaller cartID clock |
	clock := ClockSimulator new.
	clock now: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .

	clock now: ( (clock now) next: (TimeUnits minute with: 30) ).
	
	self assertOperationOnExpiredCart: [apiCaller listCart: cartID]! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 17:54:39' prior: 50897304!
test11CannotCheckoutToAnExpiredCart

	| apiCaller cartID clock |
	clock := ClockSimulator new.
	clock now: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .

	clock now: ( (clock now) next: (TimeUnits minute with: 30) ).

	self assertOperationOnExpiredCart: [apiCaller 
			checkout: cartID 
			withCreditCardNumber: testObjectFactory defaultCreditCardNumber 
			andCreditCardExpirationDate: testObjectFactory notExpiredDate
			andCreditCardOwner: testObjectFactory defaultCreditCardOwner]
! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 17:54:48' prior: 50897786!
test12ExpiredCartShouldBeRemoved

	| apiCaller cartID clock |
	clock := ClockSimulator new.
	clock now: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .

	clock now: ( (clock now) next: (TimeUnits minute with: 30) ).


	self 
		should: [	apiCaller listCart: cartID.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi operationOnExpiredCartErrorDescription ].
		
	self 
		should: [	apiCaller listCart: cartID.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription ]	.
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 17:55:19' prior: 50898240!
test12ExpiredCartShouldBeRemoved

	| apiCaller cartID clock |
	clock := ClockSimulator new.
	clock now: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .

	clock now: ( (clock now) next: (TimeUnits minute with: 30) ).

	self assertOperationOnExpiredCart: [apiCaller listCart: cartID].
		
	self 
		should: [	apiCaller listCart: cartID.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription ]	.
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 17:55:51' prior: 50898271!
test12ExpiredCartShouldBeRemoved

	| apiCaller cartID clock |
	clock := ClockSimulator new.
	clock now: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .

	clock advance: 30.

	self assertOperationOnExpiredCart: [apiCaller listCart: cartID].
		
	self 
		should: [	apiCaller listCart: cartID.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription ]	.
	! !
!ClockSimulator methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 17:56:36'!
advance: minutes

	 now := now next: (TimeUnits minute with: minutes).
	! !

!methodRemoval: ClockSimulator #now: stamp: 'db 12/1/2020 17:56:47'!
now: aDate
	now := aDate !
!InternalApiTest methodsFor: 'setUp/tearDown' stamp: 'db 12/1/2020 17:57:41' prior: 50897024 overrides: 16927572!
setUp

	testObjectFactory := StoreTestObjectsFactory new.
	
	authenticatedClients := Dictionary new.
	authenticatedClients at: testObjectFactory defaultClientID put: testObjectFactory defaultPassword.
	
	merchantProcessor := MerchantProcessorSimulator new.
	
	defaultClock := ClockSimulator with: GregorianDateTime now.! !
!ClockSimulator class methodsFor: 'nil' stamp: 'db 12/1/2020 17:58:14'!
with: aDateAndTime
	^ClockSimulator initializeWith: aDateAndTime ! !
!ClockSimulator methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 17:58:37'!
intializeWith: aDateAndTime

	 now := aDateAndTime 
	! !

----SNAPSHOT----(1 December 2020 17:59:11) CuisUniversity-4384.image priorSource: 18118724!
!ClockSimulator class methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 17:59:32' prior: 50898345!
with: aDateAndTime
	^ClockSimulator new initializeWith: aDateAndTime ! !
!ClockSimulator methodsFor: 'as yet unclassified' stamp: 'db 12/1/2020 18:00:55'!
initializeWith: aDateAndTime

	 now := aDateAndTime 
	! !

!methodRemoval: ClockSimulator #intializeWith: stamp: 'db 12/1/2020 18:00:55'!
intializeWith: aDateAndTime

	 now := aDateAndTime 
	!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 18:01:01'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 18:01:01'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 18:01:01'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 18:01:01'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 18:01:01'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 18:01:01'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 18:01:01'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/1/2020 18:01:01'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/1/2020 18:01:01'!
ERROR!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/1/2020 18:01:01'!
ERROR!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/1/2020 18:01:01'!
ERROR!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/1/2020 18:01:01'!
ERROR!

----SNAPSHOT----(1 December 2020 18:01:07) CuisUniversity-4384.image priorSource: 18134520!
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 18:01:39' prior: 50898171!
test09CannotAddToCartToAnExpiredCart

	| apiCaller cartID clock |
	clock := ClockSimulator with: GregorianDateTime now.
	
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .

	clock advance: 30.
	
	self assertOperationOnExpiredCart: [apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore].! !

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/1/2020 18:01:41'!
PASSED!
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 18:02:05' prior: 50898193!
test10CannotListCartToAnExpiredCart

	| apiCaller cartID clock |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .

	clock advance: 30.
	
	self assertOperationOnExpiredCart: [apiCaller listCart: cartID]! !

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/1/2020 18:02:07'!
PASSED!
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 18:02:23' prior: 50898213!
test11CannotCheckoutToAnExpiredCart

	| apiCaller cartID clock |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .

	clock advance: 30.

	self assertOperationOnExpiredCart: [apiCaller 
			checkout: cartID 
			withCreditCardNumber: testObjectFactory defaultCreditCardNumber 
			andCreditCardExpirationDate: testObjectFactory notExpiredDate
			andCreditCardOwner: testObjectFactory defaultCreditCardOwner]
! !

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/1/2020 18:02:24'!
PASSED!
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/1/2020 18:02:32' prior: 50898298!
test12ExpiredCartShouldBeRemoved

	| apiCaller cartID clock |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .

	clock advance: 30.

	self assertOperationOnExpiredCart: [apiCaller listCart: cartID].
		
	self 
		should: [	apiCaller listCart: cartID.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription ]	.
	! !

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/1/2020 18:02:33'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/1/2020 18:02:45'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/1/2020 18:02:45'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/1/2020 18:02:45'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/1/2020 18:02:45'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/1/2020 18:02:45'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/1/2020 18:02:45'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/1/2020 18:02:45'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/1/2020 18:02:45'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/1/2020 18:02:45'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/1/2020 18:02:45'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/1/2020 18:02:45'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/1/2020 18:02:45'!
PASSED!

----SNAPSHOT----(1 December 2020 18:03:27) CuisUniversity-4384.image priorSource: 18136393!

----QUIT----(1 December 2020 18:03:43) CuisUniversity-4384.image priorSource: 18141050!

----STARTUP---- (2 December 2020 16:02:25) as /Users/dbenitez/uba/2c2020-IS1/IS1-Trabajos/20-TusLibros/macos64-TusLibros/CuisUniversity-4384.image!

!CreditCard class methodsFor: 'instance creation' stamp: 'db 12/2/2020 16:08:02'!
owner: ownerNAme  expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth! !
!CreditCard class methodsFor: 'instance creation' stamp: 'db 12/2/2020 16:13:07'!
with: aCreditCardNumber expirationMonth: aMonth expirationYear: aYear creditCartOwner: aCreditCardOwner
	
	"ac� van las validaciones"
	
	^self new initializeWith: aCreditCardNumber expirationMonth: aMonth expirationYear: aYear creditCartOwner: aCreditCardOwner.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'db 12/2/2020 16:14:17'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration ccn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'db 12/2/2020 16:14:19'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration ccn expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'db 12/2/2020 16:14:20'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration ccn expirationMonth expirationYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'db 12/2/2020 16:14:21'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration ccn expirationMonth expirationYear creditCardOwner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'db 12/2/2020 16:14:12'!
initializeWith: aCreditCardNumber expirationMonth: aMonth expirationYear: aYear creditCartOwner: aCreditCardOwner.
	
	ccn := aCreditCardNumber.
	expirationMonth := aMonth. 
	expirationYear := aYear.
	creditCardOwner := aCreditCardOwner.! !

TestCase subclass: #CreditCardTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'db 12/2/2020 16:30:53'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'nil' stamp: 'db 12/2/2020 16:31:26'!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	| creditCard |
	self  should: [CreditCard with: 1234 expirationMonth: 45 expirationYear: 8888 creditCardOwner: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
	 
	creditCard := CreditCard with: 4545123455647789 expirationMonth: 12 expirationYear: 2025 creditCardOwner: 'owner'.
	self assert: 4545123455647789 equals: (creditCard PAN).
	self assert: 16 equals: (creditCard PAN asString size).
	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 16:32:00' prior: 50898639!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	| creditCard |
	self  should: [CreditCard with: 1234 expirationMonth: 45 expirationYear: 8888 creditCardOwner: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
	 
	creditCard := CreditCard with: 4545123455647789 expirationMonth: 12 expirationYear: 2025 creditCardOwner: 'owner'.
	self assert: 4545123455647789 equals: (creditCard PAN).
	self assert: 16 equals: (creditCard creditCardNumber asString size).
	! !
!CreditCard class methodsFor: 'instance creation' stamp: 'db 12/2/2020 16:33:48' prior: 50898575!
with: aCreditCardNumber expirationMonth: aMonth expirationYear: aYear creditCartOwner: aCreditCardOwner
	
	"ac� van las validaciones"
	
	^self new initializeWith: aCreditCardNumber expirationMonth: aMonth expirationYear: aYear creditCartOwner: aCreditCardOwner.! !

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 16:33:57'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 16:33:57'!
ERROR!
!CreditCard class methodsFor: 'error descriptions' stamp: 'db 12/2/2020 16:34:15'!
creditCardNumberInvalidLengthNumberErrorDescription
	self shouldBeImplemented.! !

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 16:34:34'!
ERROR!
!CreditCard class methodsFor: 'signal' stamp: 'db 12/2/2020 16:35:35'!
signalCreditCardNumberInvalidLengthNumber

	^self error: self creditCardNumberInvalidLengthNumberErrorDescription ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'db 12/2/2020 16:38:15' prior: 50898680!
with: aCreditCardNumber expirationMonth: aMonth expirationYear: aYear creditCartOwner: aCreditCardOwner
	
	"ac� van las validaciones"
	self assertCreditCardLength: aCreditCardNumber.
	
	^self new initializeWith: aCreditCardNumber expirationMonth: aMonth expirationYear: aYear creditCartOwner: aCreditCardOwner.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'db 12/2/2020 16:38:45'!
assertCreditCardLength: aCreditCardNumber 
	(aCreditCardNumber asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	! !
!CreditCard class methodsFor: 'instance creation' stamp: 'db 12/2/2020 16:38:46' prior: 50898729!
assertCreditCardLength: aCreditCardNumber 

	(aCreditCardNumber asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber].
	! !

!methodRemoval: CreditCard class #owner:expiringOn: stamp: 'db 12/2/2020 16:39:21'!
owner: ownerNAme  expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth!

!methodRemoval: CreditCard class #expiringOn: stamp: 'db 12/2/2020 16:39:25'!
expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 16:39:44'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 16:39:44'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 16:41:42'!
ERROR!
!CreditCard class methodsFor: 'error descriptions' stamp: 'db 12/2/2020 16:42:33' prior: 50898700!
creditCardNumberInvalidLengthNumberErrorDescription
	^'Invalid length number'! !

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 16:42:54'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 16:42:54'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'db 12/2/2020 16:44:05'!
with: aCreditCardNumber expirationMonth: aMonth expirationYear: aYear creditCardOwner: aCreditCardOwner

	"ac� van las validaciones"
	self assertCreditCardLength: aCreditCardNumber.
	
	^self new initializeWith: aCreditCardNumber expirationMonth: aMonth expirationYear: aYear creditCartOwner: aCreditCardOwner.! !

!methodRemoval: CreditCard class #with:expirationMonth:expirationYear:creditCartOwner: stamp: 'db 12/2/2020 16:44:09'!
with: aCreditCardNumber expirationMonth: aMonth expirationYear: aYear creditCartOwner: aCreditCardOwner
	
	"ac� van las validaciones"
	self assertCreditCardLength: aCreditCardNumber.
	
	^self new initializeWith: aCreditCardNumber expirationMonth: aMonth expirationYear: aYear creditCartOwner: aCreditCardOwner.!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 16:44:14'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 16:44:14'!
FAILURE!
!CreditCard class methodsFor: 'assertions' stamp: 'db 12/2/2020 16:44:56' prior: 50898737!
assertCreditCardLength: aCreditCardNumber 

	(aCreditCardNumber asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber ].
	! !

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 16:45:15'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 16:45:15'!
FAILURE!
!CreditCard class methodsFor: 'signal' stamp: 'db 12/2/2020 16:46:01' prior: 50898709!
signalCreditCardNumberInvalidLengthNumber

	^self error: self creditCardNumberInvalidLengthNumberErrorDescription ! !
!CreditCard class methodsFor: 'assertions' stamp: 'db 12/2/2020 16:46:09' prior: 50898817!
assertCreditCardLength: aCreditCardNumber 

	(aCreditCardNumber asString size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber ].
	! !

self class signalCreditCardNumberInvalidLengthNumber!
!CreditCard class methodsFor: 'assertions' stamp: 'db 12/2/2020 16:46:29' prior: 50898841!
assertCreditCardLength: aCreditCardNumber 

	(aCreditCardNumber size = 16) ifFalse: [^self class signalCreditCardNumberInvalidLengthNumber ].
	! !

self class signalCreditCardNumberInvalidLengthNumber!
!CreditCard class methodsFor: 'assertions' stamp: 'db 12/2/2020 16:47:40' prior: 50898851!
assertCreditCardLength: aCreditCardNumber 

	(aCreditCardNumber size = 16) ifFalse: [^self error: self creditCardNumberInvalidLengthNumberErrorDescription].
	! !

!methodRemoval: CreditCard class #signalCreditCardNumberInvalidLengthNumber stamp: 'db 12/2/2020 16:47:45'!
signalCreditCardNumberInvalidLengthNumber

	^self error: self creditCardNumberInvalidLengthNumberErrorDescription !

!classRemoval: #UserInterfaceTest stamp: 'db 12/2/2020 16:48:06'!
TestCase subclass: #UserInterfaceTest
	instanceVariableNames: 'testObjectsFactory validUsers aValidClientID aValidPassword debitBehavior today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #UserInterface stamp: 'db 12/2/2020 16:48:10'!
Object subclass: #UserInterface
	instanceVariableNames: 'authenticator carts catalog salesBook merchantProcessor cashier today clock maxTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 16:48:19'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 16:48:19'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 16:48:48' prior: 50898659!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	| creditCard |
	self  should: [CreditCard with: '1234' expirationMonth: 45 expirationYear: 8888 creditCardOwner: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
	 
	creditCard := CreditCard with: '4545123455647789' expirationMonth: 12 expirationYear: 2025 creditCardOwner: 'owner'.
	self assert: 4545123455647789 equals: (creditCard PAN).
	self assert: 16 equals: (creditCard creditCardNumber asString size).
	! !

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 16:48:57'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 16:48:57'!
ERROR!
!CreditCard methodsFor: 'testing' stamp: 'db 12/2/2020 16:49:35'!
creditCardNumber
	^ccn ! !
!CreditCardTest methodsFor: 'testing' stamp: 'db 12/2/2020 16:50:00' prior: 50898903!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	| creditCard |
	self  should: [CreditCard with: '1234' expirationMonth: 45 expirationYear: 8888 creditCardOwner: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
	 
	creditCard := CreditCard with: '4545123455647789' expirationMonth: 12 expirationYear: 2025 creditCardOwner: 'owner'.
	self assert: 4545123455647789 equals: (creditCard creditCardNumber ).
	self assert: 16 equals: (creditCard creditCardNumber asString size).
	! !
!CreditCardTest methodsFor: 'testing' stamp: 'db 12/2/2020 16:50:05' prior: 50898935!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	| creditCard |
	self  should: [CreditCard with: '1234' expirationMonth: 45 expirationYear: 8888 creditCardOwner: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
	 
	creditCard := CreditCard with: '4545123455647789' expirationMonth: 12 expirationYear: 2025 creditCardOwner: 'owner'.
	self assert: 4545123455647789 equals: (creditCard creditCardNumber ).
	self assert: 16 equals: (creditCard creditCardNumber size).
	! !

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 16:50:08'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 16:50:08'!
FAILURE!
!CreditCardTest methodsFor: 'testing' stamp: 'db 12/2/2020 16:50:25' prior: 50898956!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	| creditCard |
	self  should: [CreditCard with: '1234' expirationMonth: 45 expirationYear: 8888 creditCardOwner: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
	 
	creditCard := CreditCard with: '4545123455647789' expirationMonth: 12 expirationYear: 2025 creditCardOwner: 'owner'.
	self assert: '4545123455647789' equals: (creditCard creditCardNumber ).
	self assert: 16 equals: (creditCard creditCardNumber size).
	! !

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 16:50:28'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 16:51:06'!
PASSED!
!CreditCardTest methodsFor: 'testing' stamp: 'db 12/2/2020 16:51:10'!
test02CreditCardNumberShouldOnlyHaveNumbers

	self  should: [CreditCard with: '789**'  expirationMonth: 10 expirationYear: 3000 creditCardOwner: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberShouldOnlyHaveNumbersErrorDescription
		
	 
	! !

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 16:51:13'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberShouldOnlyHaveNumbers stamp: 'db 12/2/2020 16:51:13'!
ERROR!

!testRun: #CreditCardTest #test02CreditCardNumberShouldOnlyHaveNumbers stamp: 'db 12/2/2020 16:51:13'!
ERROR!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 16:51:39'!
creditCardNumberShouldOnlyHaveNumbersErrorDescription
	self shouldBeImplemented.! !
!CreditCardTest methodsFor: 'testing' stamp: 'db 12/2/2020 16:52:35'!
test02ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear

	self validateExpirationDate: 456 expirationYear: 8888 message: CreditCard expirationMonthShoudHaveTwoDigitsErrorDescription.
	self validateExpirationDate: 12 expirationYear: 79879 message: CreditCard expirationYearShouldHaveFourDigitsErrorDescription.
		
	 
	! !
!CreditCardTest methodsFor: 'testing' stamp: 'db 12/2/2020 16:52:51'!
validateExpirationDate: aMonth expirationYear: aYear message: aMessage

	self  should: [CreditCard with: 4545124512456598 expirationMonth: aMonth expirationYear: aYear creditCardOwner: 'owner' ] 
		 raise: Error 
		 withMessageText: aMessage.
		! !
!CreditCardTest methodsFor: 'testing' stamp: 'db 12/2/2020 16:52:59' prior: 50899054!
validateExpirationDate: aMonth expirationYear: aYear message: aMessage

	self  should: [CreditCard with: '4545124512456598' expirationMonth: aMonth expirationYear: aYear creditCardOwner: 'owner' ] 
		 raise: Error 
		 withMessageText: aMessage.
		! !

!methodRemoval: CreditCardTest #test02CreditCardNumberShouldOnlyHaveNumbers stamp: 'db 12/2/2020 16:53:07'!
test02CreditCardNumberShouldOnlyHaveNumbers

	self  should: [CreditCard with: '789**'  expirationMonth: 10 expirationYear: 3000 creditCardOwner: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberShouldOnlyHaveNumbersErrorDescription
		
	 
	!

!testRun: #CreditCardTest #test02ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 12/2/2020 16:53:33'!
ERROR!

!testRun: #CreditCardTest #test02ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 12/2/2020 16:53:33'!
ERROR!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 16:53:48'!
expirationMonthShoudHaveTwoDigitsErrorDescription
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 16:54:10' prior: 50899096!
expirationMonthShoudHaveTwoDigitsErrorDescription
	^'expiration month should have two digits'
		! !

!testRun: #CreditCardTest #test02ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 12/2/2020 16:54:14'!
FAILURE!

!testRun: #CreditCardTest #test02ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 12/2/2020 16:54:23'!
ERROR!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 16:54:32'!
expirationYearShouldHaveFourDigitsErrorDescription
	self shouldBeImplemented.! !

!testRun: #CreditCardTest #test02ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 12/2/2020 16:54:43'!
ERROR!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 16:54:54' prior: 50899117!
expirationYearShouldHaveFourDigitsErrorDescription
	^'expiration year should have four digits'! !

!testRun: #CreditCardTest #test02ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 12/2/2020 16:54:55'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'db 12/2/2020 16:55:57' prior: 50898782!
with: aCreditCardNumber expirationMonth: aMonth expirationYear: aYear creditCardOwner: aCreditCardOwner

	"ac� van las validaciones"
	self assertCreditCardLength: aCreditCardNumber.
	self assertExpirationMonthLength: aMonth.
	
	^self new initializeWith: aCreditCardNumber expirationMonth: aMonth expirationYear: aYear creditCartOwner: aCreditCardOwner.! !
!CreditCard class methodsFor: 'assertions' stamp: 'db 12/2/2020 16:57:02'!
assertExpirationMonthLeght: aMonth
	(aMonth asString size = 2) ifFalse: [^self class signalExpirationMonthShoudHaveTwoDigits ].! !

testObjectFactory notExpiredDate!

!methodRemoval: CreditCardTest #test02ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear stamp: 'db 12/2/2020 17:01:50'!
test02ExpirationDateShouldHaveTwoDigitsForMonthAndFourDigitsForYear

	self validateExpirationDate: 456 expirationYear: 8888 message: CreditCard expirationMonthShoudHaveTwoDigitsErrorDescription.
	self validateExpirationDate: 12 expirationYear: 79879 message: CreditCard expirationYearShouldHaveFourDigitsErrorDescription.
		
	 
	!

!methodRemoval: CreditCardTest #validateExpirationDate:expirationYear:message: stamp: 'db 12/2/2020 17:01:53'!
validateExpirationDate: aMonth expirationYear: aYear message: aMessage

	self  should: [CreditCard with: '4545124512456598' expirationMonth: aMonth expirationYear: aYear creditCardOwner: 'owner' ] 
		 raise: Error 
		 withMessageText: aMessage.
		!
!CreditCardTest methodsFor: 'testing' stamp: 'db 12/2/2020 17:02:18'!
test02CreditCardOwnerCannotBeEmpty


	self  should: [CreditCard with: '4545124512456598' expirationMonth: 10 expirationYear: 2050 creditCardOwner: ''] 
		 raise: Error 
		 withMessageText: CreditCard creditCardOwnerCannotBeEmptyErrorDescription.
		! !

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 17:02:22'!
ERROR!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 17:02:22'!
ERROR!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 17:02:30'!
creditCardOwnerCannotBeEmptyErrorDescription
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 17:02:53' prior: 50899203!
creditCardOwnerCannotBeEmptyErrorDescription
	^'credit card owner cannot be empty'! !

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 17:02:54'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'db 12/2/2020 17:03:10' prior: 50899138!
with: aCreditCardNumber expirationMonth: aMonth expirationYear: aYear creditCardOwner: aCreditCardOwner

	"ac� van las validaciones"
	self assertCreditCardLength: aCreditCardNumber.
	
	^self new initializeWith: aCreditCardNumber expirationMonth: aMonth expirationYear: aYear creditCartOwner: aCreditCardOwner.! !

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 17:03:11'!
FAILURE!
!CreditCard class methodsFor: 'assertions' stamp: 'db 12/2/2020 17:04:51'!
assertEmptyCreditCardOwner: aCreditCardOwner
	aCreditCardOwner isEmpty ifTrue: [^self class creditCardOwnerCannotBeEmptyErrorDescription ].! !

!methodRemoval: CreditCard class #assertExpirationMonthLeght: stamp: 'db 12/2/2020 17:05:26'!
assertExpirationMonthLeght: aMonth
	(aMonth asString size = 2) ifFalse: [^self class signalExpirationMonthShoudHaveTwoDigits ].!

!methodRemoval: CreditCard class #creditCardNumberShouldOnlyHaveNumbersErrorDescription stamp: 'db 12/2/2020 17:05:38'!
creditCardNumberShouldOnlyHaveNumbersErrorDescription
	self shouldBeImplemented.!
!CreditCard class methodsFor: 'assertions' stamp: 'db 12/2/2020 17:05:59' prior: 50899234!
assertEmptyCreditCardOwner: aCreditCardOwner

	aCreditCardOwner isEmpty ifTrue: [^self class creditCardOwnerCannotBeEmptyErrorDescription ].! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'db 12/2/2020 17:06:12' prior: 50898768!
creditCardNumberInvalidLengthNumberErrorDescription
	^'Invalid length number'! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'db 12/2/2020 17:06:48' prior: 50899209!
creditCardOwnerCannotBeEmptyErrorDescription
	^'credit card owner cannot be empty'! !

!methodRemoval: CreditCard class #expirationYearShouldHaveFourDigitsErrorDescription stamp: 'db 12/2/2020 17:06:56'!
expirationYearShouldHaveFourDigitsErrorDescription
	^'expiration year should have four digits'!

!methodRemoval: CreditCard class #expirationMonthShoudHaveTwoDigitsErrorDescription stamp: 'db 12/2/2020 17:06:59'!
expirationMonthShoudHaveTwoDigitsErrorDescription
	^'expiration month should have two digits'
		!
!CreditCard class methodsFor: 'instance creation' stamp: 'db 12/2/2020 17:07:21' prior: 50899218!
with: aCreditCardNumber expirationMonth: aMonth expirationYear: aYear creditCardOwner: aCreditCardOwner

	"ac� van las validaciones"
	self assertCreditCardLength: aCreditCardNumber.
	self assertEmptyCreditCardOwner: aCreditCardOwner .
	
	^self new initializeWith: aCreditCardNumber expirationMonth: aMonth expirationYear: aYear creditCartOwner: aCreditCardOwner.! !

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 17:07:26'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 17:07:26'!
FAILURE!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 17:07:26'!
FAILURE!
!CreditCard class methodsFor: 'assertions' stamp: 'db 12/2/2020 17:07:56' prior: 50899255!
assertEmptyCreditCardOwner: aCreditCardOwner

	aCreditCardOwner isEmpty ifTrue: [^self error: self creditCardOwnerCannotBeEmptyErrorDescription ].! !

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 17:08:09'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 17:08:09'!
PASSED!
!CreditCardTest methodsFor: 'testing' stamp: 'db 12/2/2020 17:08:36'!
test07CreditCardOwnerNameCantBeLongerThan30Letters

	self  should: [CreditCard with: '4545124512456598' expirationMonth: 10 expirationYear: 2050 creditCardOwner: 'dfafasdfadfadsfasdfassdfadsfafas dasdfad'] 
		 raise: Error 
		 withMessageText: CreditCard creditCardOwnerNameCantBeLongerThanThirtyErrorDescription.
		! !

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 17:08:41'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 17:08:41'!
PASSED!

!testRun: #CreditCardTest #test07CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 17:08:41'!
ERROR!

!testRun: #CreditCardTest #test07CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 17:08:41'!
ERROR!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 17:08:48'!
creditCardOwnerNameCantBeLongerThanThirtyErrorDescription
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 17:09:11' prior: 50899357!
creditCardOwnerNameCantBeLongerThanThirtyErrorDescription
	^'credit card owner name cant be longer than thirty '! !

!testRun: #CreditCardTest #test07CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 17:09:12'!
FAILURE!
!CreditCard class methodsFor: 'assertions' stamp: 'db 12/2/2020 17:10:26' prior: 50899314!
assertEmptyCreditCardOwner: aCreditCardOwner

	aCreditCardOwner size <= 30 ifFalse: [^self error: self creditCardOwnerNameCantBeLongerThanThirtyErrorDescription].! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'db 12/2/2020 17:10:48' prior: 50899363!
creditCardOwnerNameCantBeLongerThanThirtyErrorDescription
	^'credit card owner name cant be longer than thirty '! !

----SNAPSHOT----(2 December 2020 17:11:12) CuisUniversity-4384.image priorSource: 18141143!
!CreditCard class methodsFor: 'assertions' stamp: 'db 12/2/2020 17:13:24'!
assertWhenCreditCardOwnerAreLongerThanThirty: aCreditCardOwner

	aCreditCardOwner size <= 30 ifFalse: [^self error: self creditCardOwnerNameCantBeLongerThanThirtyErrorDescription].! !
!CreditCard class methodsFor: 'assertions' stamp: 'db 12/2/2020 17:07:56' prior: 50899374!
assertEmptyCreditCardOwner: aCreditCardOwner

	aCreditCardOwner isEmpty ifTrue: [^self error: self creditCardOwnerCannotBeEmptyErrorDescription ].! !
!CreditCard class methodsFor: 'instance creation' stamp: 'db 12/2/2020 17:14:14' prior: 50899289!
with: aCreditCardNumber expirationMonth: aMonth expirationYear: aYear creditCardOwner: aCreditCardOwner

	"ac� van las validaciones"
	self assertCreditCardLength: aCreditCardNumber.
	self assertEmptyCreditCardOwner: aCreditCardOwner.
	self assertWhenCreditCardOwnerAreLongerThanThirty: aCreditCardOwner.
	
	^self new initializeWith: aCreditCardNumber expirationMonth: aMonth expirationYear: aYear creditCartOwner: aCreditCardOwner.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'db 12/2/2020 17:14:20' prior: 50899409!
with: aCreditCardNumber expirationMonth: aMonth expirationYear: aYear creditCardOwner: aCreditCardOwner

	self assertCreditCardLength: aCreditCardNumber.
	self assertEmptyCreditCardOwner: aCreditCardOwner.
	self assertWhenCreditCardOwnerAreLongerThanThirty: aCreditCardOwner.
	
	^self new initializeWith: aCreditCardNumber expirationMonth: aMonth expirationYear: aYear creditCartOwner: aCreditCardOwner.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'db 12/2/2020 17:15:10'!
with: aCreditCardNumber expiration: aMonth creditCardOwner: aCreditCardOwner

	self assertCreditCardLength: aCreditCardNumber.
	self assertEmptyCreditCardOwner: aCreditCardOwner.
	self assertWhenCreditCardOwnerAreLongerThanThirty: aCreditCardOwner.
	
	^self new initializeWith: aCreditCardNumber expirationMonth: aMonth creditCartOwner: aCreditCardOwner.! !
!CreditCard methodsFor: 'initialization' stamp: 'db 12/2/2020 17:15:32'!
initializeWith: aCreditCardNumber expiration: aMonth creditCartOwner: aCreditCardOwner.
	
	ccn := aCreditCardNumber.
	expiration := aMonth. 
	
	creditCardOwner := aCreditCardOwner.! !
!CreditCard methodsFor: 'initialization' stamp: 'db 12/2/2020 17:15:37' prior: 50899456!
initializeWith: aCreditCardNumber expiration: aMonth creditCartOwner: aCreditCardOwner.
	
	ccn := aCreditCardNumber.
	expiration := aMonth. 
	creditCardOwner := aCreditCardOwner.! !

!methodRemoval: CreditCard #initializeWith:expirationMonth:expirationYear:creditCartOwner: stamp: 'db 12/2/2020 17:15:43'!
initializeWith: aCreditCardNumber expirationMonth: aMonth expirationYear: aYear creditCartOwner: aCreditCardOwner.
	
	ccn := aCreditCardNumber.
	expirationMonth := aMonth. 
	expirationYear := aYear.
	creditCardOwner := aCreditCardOwner.!

!methodRemoval: CreditCard #initializeExpiringOn: stamp: 'db 12/2/2020 17:15:50'!
initializeExpiringOn: aMonth 
	
	expiration := aMonth !

!methodRemoval: CreditCard class #with:expirationMonth:expirationYear:creditCardOwner: stamp: 'db 12/2/2020 17:16:09'!
with: aCreditCardNumber expirationMonth: aMonth expirationYear: aYear creditCardOwner: aCreditCardOwner

	self assertCreditCardLength: aCreditCardNumber.
	self assertEmptyCreditCardOwner: aCreditCardOwner.
	self assertWhenCreditCardOwnerAreLongerThanThirty: aCreditCardOwner.
	
	^self new initializeWith: aCreditCardNumber expirationMonth: aMonth expirationYear: aYear creditCartOwner: aCreditCardOwner.!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'db 12/2/2020 17:18:19'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'testObjectsFactory testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'testing' stamp: 'db 12/2/2020 17:18:16' overrides: 16927572!
setUp

	testObjectFactory := StoreTestObjectsFactory new.! !

TestCase subclass: #CreditCardTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'db 12/2/2020 17:18:40'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'testing' stamp: 'db 12/2/2020 17:19:23' prior: 50898985!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	| creditCard |
	self  should: [CreditCard with: '1234' expiration: testObjectFactory expiredCreditCard creditCardOwner: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
	 
	creditCard := CreditCard with: '4545123455647789' expirationMonth: 12 expirationYear: 2025 creditCardOwner: 'owner'.
	self assert: '4545123455647789' equals: (creditCard creditCardNumber ).
	self assert: 16 equals: (creditCard creditCardNumber size).
	! !
!CreditCardTest methodsFor: 'testing' stamp: 'db 12/2/2020 17:19:37' prior: 50899531!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	| creditCard |
	self  should: [CreditCard with: '1234' expiration: testObjectFactory expiredCreditCard creditCardOwner: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
	 
	creditCard := CreditCard with: '4545123455647789' expiration: testObjectFactory expiredCreditCard creditCardOwner: 'owner'.
	self assert: '4545123455647789' equals: (creditCard creditCardNumber ).
	self assert: 16 equals: (creditCard creditCardNumber size).
	! !
!CreditCardTest methodsFor: 'testing' stamp: 'db 12/2/2020 17:19:51' prior: 50899186!
test02CreditCardOwnerCannotBeEmpty


	self  should: [CreditCard with: '4545124512456598' expiration: testObjectFactory expiredCreditCard creditCardOwner: ''] 
		 raise: Error 
		 withMessageText: CreditCard creditCardOwnerCannotBeEmptyErrorDescription.
		! !
!CreditCardTest methodsFor: 'testing' stamp: 'db 12/2/2020 17:19:58'!
test03CreditCardOwnerNameCantBeLongerThan30Letters

	self  should: [CreditCard with: '4545124512456598' expirationMonth: 10 expirationYear: 2050 creditCardOwner: 'dfafasdfadfadsfasdfassdfadsfafas dasdfad'] 
		 raise: Error 
		 withMessageText: CreditCard creditCardOwnerNameCantBeLongerThanThirtyErrorDescription.
		! !

!methodRemoval: CreditCardTest #test07CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 17:19:58'!
test07CreditCardOwnerNameCantBeLongerThan30Letters

	self  should: [CreditCard with: '4545124512456598' expirationMonth: 10 expirationYear: 2050 creditCardOwner: 'dfafasdfadfadsfasdfassdfadsfafas dasdfad'] 
		 raise: Error 
		 withMessageText: CreditCard creditCardOwnerNameCantBeLongerThanThirtyErrorDescription.
		!
!CreditCardTest methodsFor: 'testing' stamp: 'db 12/2/2020 17:20:20' prior: 50899584!
test03CreditCardOwnerNameCantBeLongerThan30Letters

	self  should: [CreditCard with: '4545124512456598' expiration: testObjectFactory expiredCreditCard creditCardOwner: 'dfafasdfadfadsfasdfassdfadsfafas dasdfad'] 
		 raise: Error 
		 withMessageText: CreditCard creditCardOwnerNameCantBeLongerThanThirtyErrorDescription.
		! !

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 17:20:24'!
FAILURE!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 17:20:24'!
FAILURE!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 17:20:24'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 17:20:30'!
FAILURE!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'db 12/2/2020 17:21:55'!
expiredDate
	
	^(Month month: today monthIndex year: today yearNumber - 1)! !
!CreditCardTest methodsFor: 'testing' stamp: 'db 12/2/2020 17:22:09' prior: 50899552!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	| creditCard |
	self  should: [CreditCard with: '1234' expiration: testObjectFactory expiredDate creditCardOwner: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
	 
	creditCard := CreditCard with: '4545123455647789' expiration: testObjectFactory expiredDate creditCardOwner: 'owner'.
	self assert: '4545123455647789' equals: (creditCard creditCardNumber ).
	self assert: 16 equals: (creditCard creditCardNumber size).
	! !
!CreditCardTest methodsFor: 'testing' stamp: 'db 12/2/2020 17:22:49' prior: 50899646!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	| creditCard |
	self  should: [CreditCard with: '1234' expiration: testObjectFactory notExpiredDate creditCardOwner: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
	 
	creditCard := CreditCard with: '4545123455647789' expiration: testObjectFactory notExpiredDate creditCardOwner: 'owner'.
	self assert: '4545123455647789' equals: (creditCard creditCardNumber ).
	self assert: 16 equals: (creditCard creditCardNumber size).
	! !

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 17:22:52'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 17:22:52'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'db 12/2/2020 17:23:33' prior: 50899442!
with: aCreditCardNumber expiration: aMonth creditCardOwner: aCreditCardOwner

	self assertCreditCardLength: aCreditCardNumber.
	self assertEmptyCreditCardOwner: aCreditCardOwner.
	self assertWhenCreditCardOwnerAreLongerThanThirty: aCreditCardOwner.
	
	^self new initializeWith: aCreditCardNumber expiration: aMonth creditCartOwner: aCreditCardOwner.! !

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 17:23:34'!
PASSED!
!CreditCardTest methodsFor: 'testing' stamp: 'db 12/2/2020 17:24:16' prior: 50899573!
test02CreditCardOwnerCannotBeEmpty


	self  should: [CreditCard with: '4545124512456598' expiration: testObjectFactory notExpiredDate creditCardOwner: ''] 
		 raise: Error 
		 withMessageText: CreditCard creditCardOwnerCannotBeEmptyErrorDescription.
		! !
!CreditCardTest methodsFor: 'testing' stamp: 'db 12/2/2020 17:24:20' prior: 50899611!
test03CreditCardOwnerNameCantBeLongerThan30Letters

	self  should: [CreditCard with: '4545124512456598' expiration: testObjectFactory notExpiredDate creditCardOwner: 'dfafasdfadfadsfasdfassdfadsfafas dasdfad'] 
		 raise: Error 
		 withMessageText: CreditCard creditCardOwnerNameCantBeLongerThanThirtyErrorDescription.
		! !

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 17:24:24'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 17:24:24'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 17:24:24'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'db 12/2/2020 17:25:46' prior: 50885430!
expiredCreditCard
	
	^CreditCard with: self defaultCreditCardNumber expiration:  (Month month: today monthIndex year: today yearNumber - 1) creditCardOwner: self defaultCreditCardOwner ! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'db 12/2/2020 17:26:42' prior: 50893584!
notExpiredCreditCard
	
	^CreditCard with: self defaultCreditCardNumber expiration: self notExpiredDate creditCardOwner: self defaultCreditCardOwner! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 17:26:59'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 17:26:59'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 17:26:59'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 17:26:59'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 17:26:59'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 17:26:59'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 17:26:59'!
ERROR!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 17:26:59'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 17:26:59'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 17:26:59'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 17:26:59'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 17:26:59'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 17:26:59'!
ERROR!
!InternalApi methodsFor: 'interface' stamp: 'db 12/2/2020 17:27:43' prior: 50898006!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartContiner clientID clientSalesBook creditCard cashier |

	cartContiner := carts at: aCartID ifAbsent: [^self class signalCartNotFound].
	self removeCartIfExpired: aCartID.
	clientID := cartContiner clientAssociated.
	clientSalesBook := salesBook at:	 clientID ifAbsent: [clientSalesBook := OrderedCollection new.].
	
	creditCard := CreditCard with: aCCN expiration: aCCED creditCardOwner: aCCO. 
	
	cashier := Cashier 
		toCheckout: cartContiner cartStored 
		charging: creditCard
		throught: merchantProcessor 
		on: Date today
		registeringOn: clientSalesBook.
		
	cashier checkOut.
		
	salesBook at: clientID put: clientSalesBook.
	
	! !

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 17:27:44'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'db 12/2/2020 17:28:16' prior: 50892832!
defaultCreditCardNumber
	
	^'4546789778787890'! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 17:28:22'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 17:28:22'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 17:28:22'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 17:28:22'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 17:28:22'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 17:28:22'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 17:28:22'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 17:28:22'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 17:28:22'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 17:28:22'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 17:28:22'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 17:28:22'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 17:28:26'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 17:28:26'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 17:28:26'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 17:28:32'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 17:28:32'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 17:28:32'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 17:28:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 17:28:32'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 17:28:32'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 17:28:32'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 17:28:32'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 17:28:36'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 17:28:36'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 17:28:36'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 17:28:36'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 17:28:36'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 17:28:36'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 17:28:41'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 17:28:41'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 17:28:41'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 17:28:46'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 17:28:46'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 17:28:46'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 17:28:46'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 17:28:46'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 17:28:46'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 17:28:46'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 17:28:46'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 17:28:46'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 17:28:46'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 17:28:46'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 17:28:46'!
PASSED!

!methodRemoval: StoreTestObjectsFactory #today stamp: 'db 12/2/2020 17:29:08'!
today
	
	^ today!

Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTestObjectsFactory category: 'TusLibros' stamp: 'db 12/2/2020 17:29:15'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 17:29:19'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 17:29:19'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 17:29:19'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 17:29:19'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 17:29:19'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 17:29:19'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 17:29:19'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 17:29:19'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 17:29:19'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 17:29:19'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 17:29:19'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 17:29:19'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 17:29:23'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 17:29:23'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 17:29:23'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 17:29:27'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 17:29:27'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 17:29:27'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 17:29:27'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 17:29:27'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 17:29:27'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 17:29:35'!
ERROR!

Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTestObjectsFactory category: 'TusLibros' stamp: 'db 12/2/2020 17:30:03'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'initialization' stamp: 'db 12/2/2020 17:30:27'!
today
	^today! !

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 17:30:41'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 17:30:41'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 17:30:41'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 17:30:48'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 17:30:48'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 17:30:48'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 17:30:48'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 17:30:48'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 17:30:48'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 17:30:48'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 17:30:48'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 17:30:51'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 17:30:51'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 17:30:51'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 17:30:51'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 17:30:51'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 17:30:51'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 17:30:57'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 17:30:57'!
PASSED!
!InternalApiTest methodsFor: 'testing - invalid cartID' stamp: 'db 12/2/2020 17:38:04'!
test13CannotCheckoutACartWithAnInvalidCartID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: defaultClock.
	
	self 
		should: [apiCaller listCart:  testObjectFactory invalidCartID ] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription]
	! !

!testRun: #InternalApiTest #test13CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 17:38:07'!
PASSED!
!InternalApiTest methodsFor: 'testing - invalid cartID' stamp: 'db 12/2/2020 17:38:33'!
test13CannotListACartWithAnInvalidCartID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: defaultClock.
	
	self 
		should: [apiCaller listCart:  testObjectFactory invalidCartID ] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription]
	! !

!methodRemoval: InternalApiTest #test13CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 17:38:33'!
test13CannotCheckoutACartWithAnInvalidCartID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: defaultClock.
	
	self 
		should: [apiCaller listCart:  testObjectFactory invalidCartID ] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription]
	!

!classRenamed: #CartContainer as: #CartInfo stamp: 'db 12/2/2020 17:43:38'!
Smalltalk renameClassNamed: #CartContainer as: #CartInfo!
!InternalApi methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 17:43:38' prior: 50897487!
createCartFor: aClientID withPassword: aPassword

	| cart cartID |
	
	self assertNonAuthenticatedClient: aClientID withPassword: aPassword.
	
	" Duda: un cliente puede tener m�s de un carrito activo? "
	cart := Cart acceptingItemsOf: catalog.
	cartID := self nextID.
	carts at: cartID put: (CartInfo with: cart associatedTo: aClientID createAt: clock now) .
	
	"Guardo el cart en el dictionary de salesbook"
	
	
	^cartID.! !
!CartInfo class methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 17:43:38' prior: 50896854!
with: aCart associatedTo: aClientID createAt: aDateAndTime
	^CartInfo new initializeWith: aCart associatedTo: aClientID createdAt: aDateAndTime .! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 17:44:37'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 17:44:37'!
PASSED!
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 17:46:46'!
cartIdentifyAs: aCartID 
	| cartContiner |
	cartContiner := carts at: aCartID ifAbsent: [^self class signalCartNotFound ].
	^cartContiner 
	
	! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 17:47:22' prior: 50898049!
add: aQuantity to: aCartID of: anItem
	
	| cartContainer |
	
	cartContainer := self cartIdentifyAs: aCartID.
	self removeCartIfExpired: aCartID.
	
	cartContainer cartStored add: aQuantity of: anItem.
	
	 
! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 17:47:45' prior: 50899812!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartInfo clientID clientSalesBook creditCard cashier |

	cartInfo := self cartIdentifyAs: aCartID.
	self removeCartIfExpired: aCartID.
	clientID := cartInfo clientAssociated.
	clientSalesBook := salesBook at:	 clientID ifAbsent: [clientSalesBook := OrderedCollection new.].
	
	creditCard := CreditCard with: aCCN expiration: aCCED creditCardOwner: aCCO. 
	
	cashier := Cashier 
		toCheckout: cartInfo cartStored 
		charging: creditCard
		throught: merchantProcessor 
		on: Date today
		registeringOn: clientSalesBook.
		
	cashier checkOut.
		
	salesBook at: clientID put: clientSalesBook.
	
	! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 17:47:57' prior: 50900462!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartInfo clientID clientSalesBook creditCard cashier |

	cartInfo := self cartIdentifyAs: aCartID.
	self removeCartIfExpired: aCartID.
	
	clientID := cartInfo clientAssociated.
	clientSalesBook := salesBook at:	 clientID ifAbsent: [clientSalesBook := OrderedCollection new.].
	
	creditCard := CreditCard with: aCCN expiration: aCCED creditCardOwner: aCCO. 
	
	cashier := Cashier 
		toCheckout: cartInfo cartStored 
		charging: creditCard
		throught: merchantProcessor 
		on: Date today
		registeringOn: clientSalesBook.
		
	cashier checkOut.
		
	salesBook at: clientID put: clientSalesBook.
	
	! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 17:48:34' prior: 50898032!
listCart: aCartID 
	| cartInfo |
	
	cartInfo := self cartIdentifyAs: aCartID.
	self removeCartIfExpired: aCartID.
	
	^cartInfo cartStored items asBag.! !
!InternalApi methodsFor: 'client - methods' stamp: 'db 12/2/2020 17:49:43' prior: 50900318!
createCartFor: aClientID withPassword: aPassword

	| cart cartID |
	
	self assertNonAuthenticatedClient: aClientID withPassword: aPassword.
	
	" Duda: un cliente puede tener m�s de un carrito activo? "
	cart := Cart acceptingItemsOf: catalog.
	cartID := self nextID.
	carts at: cartID put: (CartInfo with: cart associatedTo: aClientID createAt: clock now) .
	
	^cartID.! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 17:56:39'!
doCheckout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartInfo cashier clientSalesBook creditCard |
	creditCard := CreditCard with: aCCN expiration: aCCED creditCardOwner: aCCO. 
	
	cashier := Cashier 
		toCheckout: cartInfo cartStored 
		charging: creditCard
		throught: merchantProcessor 
		on: Date today
		registeringOn: clientSalesBook.
		
	cashier checkOut.
	
	! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 17:57:49'!
doCheckout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO salesBook: clientSalesBook withCart: aCart
	
	| cashier creditCard |
	creditCard := CreditCard with: aCCN expiration: aCCED creditCardOwner: aCCO. 
	
	cashier := Cashier 
		toCheckout: aCart
		charging: creditCard
		throught: merchantProcessor 
		on: Date today
		registeringOn: clientSalesBook.
		
	cashier checkOut.
	
	! !

!methodRemoval: InternalApi #doCheckout:withCreditCardNumber:andCreditCardExpirationDate:andCreditCardOwner: stamp: 'db 12/2/2020 17:57:59'!
doCheckout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartInfo cashier clientSalesBook creditCard |
	creditCard := CreditCard with: aCCN expiration: aCCED creditCardOwner: aCCO. 
	
	cashier := Cashier 
		toCheckout: cartInfo cartStored 
		charging: creditCard
		throught: merchantProcessor 
		on: Date today
		registeringOn: clientSalesBook.
		
	cashier checkOut.
	
	!
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 17:59:01' prior: 50900487!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartInfo clientID clientSalesBook |

	cartInfo := self cartIdentifyAs: aCartID.
	self removeCartIfExpired: aCartID.
	
	clientID := cartInfo clientAssociated.
	clientSalesBook := salesBook at:	 clientID ifAbsent: [clientSalesBook := OrderedCollection new.].
	
	self doCheckout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED  andCreditCardOwner: aCCO salesBook:  clientSalesBook withCart:  cartInfo cartStored.

	salesBook at: clientID put: clientSalesBook.
	
	! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 18:15:23'!
doCheckout: aCreditCard  salesBook: clientSalesBook withCart: aCart
	
	
	| cashier |
	cashier := Cashier 
		toCheckout: aCart
		charging: aCreditCard
		throught: merchantProcessor 
		on: Date today
		registeringOn: clientSalesBook.
		
	cashier checkOut.
	
	! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 18:25:23' prior: 50900585!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartInfo clientID clientSalesBook |

	cartInfo := self cartIdentifyAs: aCartID.
	self removeCartIfExpired: aCartID.
	
	clientID := cartInfo clientAssociated.
	clientSalesBook := salesBook at:	 clientID ifAbsent: [clientSalesBook := OrderedCollection new.].
	
	self doCheckoutTo: cartInfo cartStored payingWith: (CreditCard with: aCCN expiration: aCCED creditCardOwner: aCCO) andRegisterOn: clientSalesBook.
	
	salesBook at: clientID put: clientSalesBook.
	
	! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 18:26:55' prior: 50900617!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartInfo clientID clientSalesBook |

	cartInfo := self cartIdentifyAs: aCartID.
	self removeCartIfExpired: aCartID.
	
	clientID := cartInfo clientAssociated.
	clientSalesBook := salesBook at:	 clientID ifAbsent: [clientSalesBook := OrderedCollection new.].
	
	
	
	self doCheckoutTo: cartInfo cartStored payingWith: (CreditCard with: aCCN expiration: aCCED creditCardOwner: aCCO) andRegisterIn: clientSalesBook.
	
	salesBook at: clientID put: clientSalesBook.
	
	! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 18:27:38' prior: 50900638!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartInfo clientID clientSalesBook |

	cartInfo := self cartIdentifyAs: aCartID.
	self removeCartIfExpired: aCartID.
	
	clientID := cartInfo clientAssociated.
	clientSalesBook := salesBook at:	 clientID ifAbsent: [clientSalesBook := OrderedCollection new.].
	
	self checkoutTo: cartInfo cartStored payingWith: (CreditCard with: aCCN expiration: aCCED creditCardOwner: aCCO) andRegisterIn: clientSalesBook.
	
	salesBook at: clientID put: clientSalesBook.
	
	! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 18:29:31'!
checkoutTo: aCart payingWith: aCreditCard andRegisterIn: aSalesBook
	
	| cashier |
	cashier := Cashier 
		toCheckout: aCart
		charging: aCreditCard
		throught: merchantProcessor 
		on: Date today
		registeringOn: aSalesBook.
		
	cashier checkOut.
	
	! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 18:30:12' prior: 50900680!
checkoutTo: aCart payingWith: aCreditCard andRegisterIn: aSalesBook
	
	| cashier |
	cashier := Cashier 
		toCheckout: aCart
		charging: aCreditCard
		throught: merchantProcessor 
		on: clock now
		registeringOn: aSalesBook.
		
	cashier checkOut.
	
	! !

!methodRemoval: InternalApi #doCheckout:salesBook:withCart: stamp: 'db 12/2/2020 18:30:29'!
doCheckout: aCreditCard  salesBook: clientSalesBook withCart: aCart
	
	
	| cashier |
	cashier := Cashier 
		toCheckout: aCart
		charging: aCreditCard
		throught: merchantProcessor 
		on: Date today
		registeringOn: clientSalesBook.
		
	cashier checkOut.
	
	!

!methodRemoval: InternalApi #doCheckout:withCreditCardNumber:andCreditCardExpirationDate:andCreditCardOwner:salesBook:withCart: stamp: 'db 12/2/2020 18:30:33'!
doCheckout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO salesBook: clientSalesBook withCart: aCart
	
	| cashier creditCard |
	creditCard := CreditCard with: aCCN expiration: aCCED creditCardOwner: aCCO. 
	
	cashier := Cashier 
		toCheckout: aCart
		charging: creditCard
		throught: merchantProcessor 
		on: Date today
		registeringOn: clientSalesBook.
		
	cashier checkOut.
	
	!
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 18:33:50' prior: 50900659!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartInfo clientID clientSalesBook |

	cartInfo := self cartIdentifyAs: aCartID.
	self removeCartIfExpired: aCartID.
	
	clientID := cartInfo clientAssociated.
	clientSalesBook := self salesBookFrom: cartInfo.
	
	
	
	self checkoutTo: cartInfo cartStored payingWith: (CreditCard with: aCCN expiration: aCCED creditCardOwner: aCCO) andRegisterIn: clientSalesBook.
	
	
	
	salesBook at: clientID put: clientSalesBook.
	
	! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 18:34:34'!
salesBookFrom: aCartInfo
	
	| clientID |
	clientID := aCartInfo clientAssociated.
	
	! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 18:35:31' prior: 50900751!
salesBookFrom: aCartInfo

	^salesBook at:	 aCartInfo clientAssociated ifAbsent: [^OrderedCollection new.].
	
	! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 18:37:20' prior: 50900732!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartInfo clientID clientSalesBook |

	cartInfo := self cartIdentifyAs: aCartID.
	self removeCartIfExpired: aCartID.
	
	clientID := cartInfo clientAssociated.
	clientSalesBook := self salesBookFrom: cartInfo.
	
	self checkoutTo: cartInfo cartStored payingWith: (CreditCard with: aCCN expiration: aCCED creditCardOwner: aCCO) andRegisterIn: clientSalesBook.
	
	
	
	salesBook at: clientID put: clientSalesBook.
	
	! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 18:37:28'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 18:37:28'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 18:37:28'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 18:37:28'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 18:37:28'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 18:37:28'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 18:37:28'!
ERROR!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 18:37:28'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 18:37:28'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 18:37:28'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 18:37:28'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 18:37:28'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 18:37:28'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 18:37:28'!
ERROR!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 18:38:20'!
ERROR!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 18:39:44'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 18:39:44'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 18:39:44'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 18:39:44'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 18:39:44'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 18:39:44'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 18:39:44'!
ERROR!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 18:39:44'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 18:39:44'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 18:39:44'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 18:39:44'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 18:39:44'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 18:39:44'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 18:39:44'!
ERROR!
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 18:44:54' prior: 50900691!
checkoutTo: aCart payingWith: aCreditCard andRegisterIn: aSalesBook
	
	| cashier |
	cashier := Cashier 
		toCheckout: aCart
		charging: aCreditCard
		throught: merchantProcessor 
		on: Date today
		registeringOn: aSalesBook.
		
	cashier checkOut.
	
	! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 18:45:36' prior: 50900764!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartInfo clientID clientSalesBook |

	cartInfo := self cartIdentifyAs: aCartID.
	self removeCartIfExpired: aCartID.
	
	clientID := cartInfo clientAssociated.
	clientSalesBook := self salesBookFrom: cartInfo.
	
	self checkoutTo: cartInfo cartStored payingWith: (CreditCard with: aCCN expiration: aCCED creditCardOwner: aCCO) andRegisterIn: clientSalesBook.
	
	salesBook at: clientID put: clientSalesBook.
	
	! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 18:46:04' prior: 50900452!
add: aQuantity to: aCartID of: anItem
	
	| cartInfo |
	
	cartInfo := self cartIdentifyAs: aCartID.
	self removeCartIfExpired: aCartID.
	
	cartInfo cartStored add: aQuantity of: anItem.
	
	 
! !
!InternalApi methodsFor: 'privates' stamp: 'db 12/2/2020 18:46:41' prior: 50900444!
cartIdentifyAs: aCartID 
	| cartContiner |
	cartContiner := carts at: aCartID ifAbsent: [^self class signalCartNotFound ].
	self removeCartIfExpired: aCartID.
	^cartContiner 
	
	! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 18:47:41' prior: 50900895!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartInfo clientID clientSalesBook |

	cartInfo := self cartIdentifyAs: aCartID.
	
	clientID := cartInfo clientAssociated.
	clientSalesBook := self salesBookFrom: cartInfo.
	
	self checkoutTo: cartInfo cartStored payingWith: (CreditCard with: aCCN expiration: aCCED creditCardOwner: aCCO) andRegisterIn: clientSalesBook.
	
	salesBook at: clientID put: clientSalesBook.
	
	! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 18:47:45' prior: 50900512!
listCart: aCartID 
	| cartInfo |
	
	cartInfo := self cartIdentifyAs: aCartID.
	
	^cartInfo cartStored items asBag.! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 18:47:49' prior: 50900915!
add: aQuantity to: aCartID of: anItem
	
	| cartInfo |
	
	cartInfo := self cartIdentifyAs: aCartID.

	
	cartInfo cartStored add: aQuantity of: anItem.
	
	 
! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 18:47:54' prior: 50900958!
add: aQuantity to: aCartID of: anItem
	
	| cartInfo |
	cartInfo := self cartIdentifyAs: aCartID.
	cartInfo cartStored add: aQuantity of: anItem.
	
	 
! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 18:48:00' prior: 50900951!
listCart: aCartID 
	
	| cartInfo |
	cartInfo := self cartIdentifyAs: aCartID.
	^cartInfo cartStored items asBag.! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 18:48:12' prior: 50900933!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartInfo clientID clientSalesBook |
	cartInfo := self cartIdentifyAs: aCartID.
	
	clientID := cartInfo clientAssociated.
	clientSalesBook := self salesBookFrom: cartInfo.
	
	self checkoutTo: cartInfo cartStored payingWith: (CreditCard with: aCCN expiration: aCCED creditCardOwner: aCCO) andRegisterIn: clientSalesBook.
	
	salesBook at: clientID put: clientSalesBook.
	
	! !
!InternalApi methodsFor: 'privates' stamp: 'db 12/2/2020 18:49:41' prior: 50900924!
cartIdentifyAs: aCartID 
	| cartContiner |
	cartContiner := carts at: aCartID ifAbsent: [^self class signalCartNotFound ].
	self removeCartIfExpired: aCartID.
	
	^cartContiner 
	
	! !
!InternalApi methodsFor: 'privates' stamp: 'db 12/2/2020 18:50:03'!
cartInfoIdentifyAs: aCartID 
	| cartContiner |
	cartContiner := carts at: aCartID ifAbsent: [^self class signalCartNotFound ].
	self removeCartIfExpired: aCartID.
	
	^cartContiner 
	
	! !
!InternalApi methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 18:50:03' prior: 50900981!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartInfo clientID clientSalesBook |
	cartInfo := self cartInfoIdentifyAs: aCartID.
	
	clientID := cartInfo clientAssociated.
	clientSalesBook := self salesBookFrom: cartInfo.
	
	self checkoutTo: cartInfo cartStored payingWith: (CreditCard with: aCCN expiration: aCCED creditCardOwner: aCCO) andRegisterIn: clientSalesBook.
	
	salesBook at: clientID put: clientSalesBook.
	
	! !
!InternalApi methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 18:50:03' prior: 50900974!
listCart: aCartID 
	
	| cartInfo |
	cartInfo := self cartInfoIdentifyAs: aCartID.
	^cartInfo cartStored items asBag.! !
!InternalApi methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 18:50:03' prior: 50900966!
add: aQuantity to: aCartID of: anItem
	
	| cartInfo |
	cartInfo := self cartInfoIdentifyAs: aCartID.
	cartInfo cartStored add: aQuantity of: anItem.
	
	 
! !

!methodRemoval: InternalApi #cartIdentifyAs: stamp: 'db 12/2/2020 18:50:03'!
cartIdentifyAs: aCartID 
	| cartContiner |
	cartContiner := carts at: aCartID ifAbsent: [^self class signalCartNotFound ].
	self removeCartIfExpired: aCartID.
	
	^cartContiner 
	
	!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 18:50:12'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 18:50:12'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 18:50:12'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 18:50:12'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 18:50:12'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 18:50:12'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 18:50:12'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 18:50:12'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 18:50:12'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 18:50:12'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 18:50:12'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 18:50:12'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 18:50:12'!
PASSED!
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 18:54:11'!
updateSalesbookOf: cartInfo with: aClientSalesBook 

	salesBook at: cartInfo clientAssociated put: aClientSalesBook.
	
	! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 18:54:39' prior: 50901016!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartInfo clientID clientSalesBook |
	cartInfo := self cartInfoIdentifyAs: aCartID.
	
	clientID := cartInfo clientAssociated.
	clientSalesBook := self salesBookFrom: cartInfo.
	
	self checkoutTo: cartInfo cartStored payingWith: (CreditCard with: aCCN expiration: aCCED creditCardOwner: aCCO) andRegisterIn: clientSalesBook.
	
	self updateSalesbookOf: cartInfo with: clientSalesBook.
	! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 18:54:46' prior: 50901110!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartInfo clientSalesBook |
	cartInfo := self cartInfoIdentifyAs: aCartID.

	clientSalesBook := self salesBookFrom: cartInfo.
	
	self checkoutTo: cartInfo cartStored payingWith: (CreditCard with: aCCN expiration: aCCED creditCardOwner: aCCO) andRegisterIn: clientSalesBook.
	
	self updateSalesbookOf: cartInfo with: clientSalesBook.
	! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 18:55:17'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 18:55:17'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 18:55:17'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 18:55:17'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 18:55:17'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 18:55:17'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 18:55:17'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 18:55:17'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 18:55:17'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 18:55:17'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 18:55:17'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 18:55:17'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 18:55:17'!
PASSED!
!CartInfo methodsFor: 'operations' stamp: 'db 12/2/2020 18:57:27'!
isExpiredOn: aDate

	^true! !
!CartInfo methodsFor: 'operations' stamp: 'db 12/2/2020 18:58:44' prior: 50901190!
isExpiredOn: aDate

"activeDuration: aCartID
	| cartContainer |
	cartContainer := carts at: aCartID.
	
	^ (cartContainer lastTimeUsed distanceTo: clock now) convertTo: minute.
	
	"
	
	^(lastTimeUsed - aDate) >= 30
	! !
!InternalApi methodsFor: 'privates' stamp: 'db 12/2/2020 19:02:04' prior: 50896956!
activeDuration: aCartID
	| cartInfo |
	cartInfo := carts at: aCartID.
	
	^ (cartInfo lastTimeUsed distanceTo: clock now) convertTo: minute.
! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 19:02:15'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 19:02:15'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 19:02:15'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 19:02:15'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 19:02:15'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 19:02:15'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 19:02:15'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 19:02:15'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 19:02:15'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 19:02:15'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 19:02:15'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 19:02:15'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 19:02:15'!
PASSED!

Cart subclass: #CartInfo
	instanceVariableNames: 'cart clientID lastTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartInfo category: 'TusLibros' stamp: 'db 12/2/2020 19:05:16'!
Cart subclass: #CartInfo
	instanceVariableNames: 'cart clientID lastTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Cart subclass: #CartInfo
	instanceVariableNames: 'clientID lastTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartInfo category: 'TusLibros' stamp: 'db 12/2/2020 19:05:26'!
Cart subclass: #CartInfo
	instanceVariableNames: 'clientID lastTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: CartInfo #cartStored stamp: 'db 12/2/2020 19:05:37'!
cartStored
	^cart !
!CartInfo methodsFor: 'initialization' stamp: 'db 12/2/2020 19:05:57' prior: 50896846!
initializeWith: aCart associatedTo: aClientID createdAt: aDateAndTime 
	clientID := aClientID.
	lastTimeUsed := aDateAndTime! !
!CartInfo methodsFor: 'initialization' stamp: 'db 12/2/2020 19:07:29'!
initializeAcceptingItemsOf: aCatalog associatedTo: aClientID andCreatedAt: aDateAndTime

	catalog := aCatalog.
	clientID := aClientID.
	lastTimeUsed := aDateAndTime.
	
	items := OrderedCollection new.
	
	
	! !

!methodRemoval: CartInfo #initializeWith:associatedTo:createdAt: stamp: 'db 12/2/2020 19:08:03'!
initializeWith: aCart associatedTo: aClientID createdAt: aDateAndTime 
	clientID := aClientID.
	lastTimeUsed := aDateAndTime!

!classRenamed: #CartInfo as: #CartSession stamp: 'db 12/2/2020 19:08:14'!
Smalltalk renameClassNamed: #CartInfo as: #CartSession!
!InternalApi methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 19:08:14' prior: 50900520!
createCartFor: aClientID withPassword: aPassword

	| cart cartID |
	
	self assertNonAuthenticatedClient: aClientID withPassword: aPassword.
	
	" Duda: un cliente puede tener m�s de un carrito activo? "
	cart := Cart acceptingItemsOf: catalog.
	cartID := self nextID.
	carts at: cartID put: (CartSession with: cart associatedTo: aClientID createAt: clock now) .
	
	^cartID.! !
!CartSession class methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 19:08:14' prior: 50900335!
with: aCart associatedTo: aClientID createAt: aDateAndTime
	^CartSession new initializeWith: aCart associatedTo: aClientID createdAt: aDateAndTime .! !
!CartSession class methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 19:09:26' prior: 50901326!
with: aCatalog associatedTo: aClientID createAt: aDateAndTime

	^CartSession new initializeAcceptingItemsOf: aCatalog associatedTo: aClientID andCreatedAt: aDateAndTime! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 19:09:45'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 19:09:45'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 19:09:45'!
ERROR!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 19:09:45'!
ERROR!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 19:09:45'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 19:09:45'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 19:09:45'!
ERROR!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 19:09:45'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 19:09:45'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 19:09:45'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 19:09:45'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 19:09:45'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 19:09:45'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 19:09:47'!
ERROR!
!InternalApi methodsFor: 'client - methods' stamp: 'db 12/2/2020 19:10:35' prior: 50901311!
createCartFor: aClientID withPassword: aPassword

	| cartID |
	
	self assertNonAuthenticatedClient: aClientID withPassword: aPassword.
	
	cartID := self nextID.
	carts at: cartID put: (CartSession with: catalog associatedTo: aClientID createAt: clock now) .
	
	^cartID.! !

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 19:10:42'!
ERROR!
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 19:10:54' prior: 50901035!
listCart: aCartID 
	
	| cartInfo |
	cartInfo := self cartInfoIdentifyAs: aCartID.
	^cartInfo items asBag.! !

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 19:10:58'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 19:11:00'!
ERROR!
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 19:11:08' prior: 50901042!
add: aQuantity to: aCartID of: anItem
	
	| cartInfo |
	cartInfo := self cartInfoIdentifyAs: aCartID.
	cartInfo add: aQuantity of: anItem.
	
	 
! !

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 19:11:08'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 19:11:10'!
ERROR!
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 19:11:50' prior: 50901129!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartSession clientSalesBook |
	cartSession := self cartInfoIdentifyAs: aCartID.

	clientSalesBook := self salesBookFrom: cartSession.
	
	self checkoutTo: cartSession payingWith: (CreditCard with: aCCN expiration: aCCED creditCardOwner: aCCO) andRegisterIn: clientSalesBook.
	
	self updateSalesbookOf: cartSession with: clientSalesBook.
	! !

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 19:12:02'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 19:12:06'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 19:12:06'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 19:12:06'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 19:12:06'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 19:12:06'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 19:12:06'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 19:12:06'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 19:12:06'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 19:12:06'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 19:12:06'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 19:12:06'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 19:12:06'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 19:12:06'!
PASSED!

expiration!

self start!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 19:15:49'!
PASSED!
!InternalApi methodsFor: 'privates' stamp: 'db 12/2/2020 19:17:00' prior: 50901204!
activeDuration: aCartID
	| cartSession |
	cartSession := carts at: aCartID.
	
	^ (cartSession lastTimeUsed distanceTo: clock now) convertTo: minute.
! !
!InternalApi methodsFor: 'privates' stamp: 'db 12/2/2020 19:18:14' prior: 50896982!
isExpired: aCartID

	^ (carts at: aCartID) isExpiredOn: clock now
! !
!CartSession methodsFor: 'operations' stamp: 'db 12/2/2020 19:19:34'!
activeTimeFrom: aDate.

"activeDuration: aCartID
	| cartContainer |
	cartContainer := carts at: aCartID.
	
	^ (cartContainer lastTimeUsed distanceTo: clock now) convertTo: minute.
	
	^(self activeDuration: aCartID) >= (SimpleMeasure amount: 30 unit: minute).
	
	"
	
	
	^(lastTimeUsed - aDate) >= 30
	! !
!CartSession methodsFor: 'operations' stamp: 'db 12/2/2020 19:20:17' prior: 50901518!
activeTimeFrom: aDate.

	^ (lastTimeUsed distanceTo: aDate) convertTo: minute.
	! !

!methodRemoval: CartSession #lastTimeUsed stamp: 'db 12/2/2020 19:20:25'!
lastTimeUsed
	^lastTimeUsed !
!CartSession methodsFor: 'operations' stamp: 'db 12/2/2020 19:20:45' prior: 50901194!
isExpiredOn: aDate

"activeDuration: aCartID
	| cartContainer |
	cartContainer := carts at: aCartID.
	
	^ (cartContainer lastTimeUsed distanceTo: clock now) convertTo: minute.
	
	"
	
	^self activeTimeFrom: aDate >= 30
	! !
!CartSession methodsFor: 'operations' stamp: 'db 12/2/2020 19:20:50' prior: 50901540!
isExpiredOn: aDate
	
	^self activeTimeFrom: aDate >= 30
	! !
!CartSession methodsFor: 'operations' stamp: 'db 12/2/2020 19:21:48' prior: 50901550!
isExpiredOn: aDate
	
	^self activeTimeFrom: aDate >= (SimpleMeasure amount: 30 unit: minute).
	! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 19:22:27'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 19:22:27'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 19:22:27'!
ERROR!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 19:22:27'!
ERROR!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 19:22:27'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 19:22:27'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 19:22:27'!
ERROR!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 19:22:27'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 19:22:27'!
ERROR!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 19:22:27'!
ERROR!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 19:22:27'!
ERROR!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 19:22:27'!
ERROR!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 19:22:27'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 19:22:30'!
ERROR!
!CartSession methodsFor: 'operations' stamp: 'db 12/2/2020 19:23:08' prior: 50901555!
isExpiredOn: aDate
	
	^(self activeTimeFrom: aDate) >= (SimpleMeasure amount: 30 unit: minute).
	! !

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 19:23:09'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 19:23:11'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 19:23:11'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 19:23:11'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 19:23:12'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 19:23:12'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 19:23:12'!
PASSED!

!methodRemoval: InternalApi #activeDuration: stamp: 'db 12/2/2020 19:23:25'!
activeDuration: aCartID
	| cartSession |
	cartSession := carts at: aCartID.
	
	^ (cartSession lastTimeUsed distanceTo: clock now) convertTo: minute.
!

!methodRemoval: InternalApi #isExpired: stamp: 'db 12/2/2020 19:23:33'!
isExpired: aCartID

	^ (carts at: aCartID) isExpiredOn: clock now
!
!InternalApi methodsFor: 'assertions' stamp: 'db 12/2/2020 19:24:56' prior: 50897987!
removeCartIfExpired: aCartID 

	((carts at: aCartID) isExpiredOn: clock now) ifTrue: [
		carts removeKey: aCartID .
		^self class signalOperationOnExpiredCart].
	
	 
! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 19:24:59'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 19:24:59'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 19:24:59'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 19:24:59'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 19:24:59'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 19:24:59'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 19:24:59'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 19:24:59'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 19:24:59'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 19:24:59'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 19:24:59'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 19:24:59'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 19:24:59'!
PASSED!
!InternalApi methodsFor: 'assertions' stamp: 'db 12/2/2020 19:25:32'!
removeCartIfItsExpired: aCartID 

	((carts at: aCartID) isExpiredOn: clock now) ifTrue: [
		carts removeKey: aCartID .
		^self class signalOperationOnExpiredCart].
	
	 
! !
!InternalApi methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 19:25:32' prior: 50901007!
cartInfoIdentifyAs: aCartID 
	| cartContiner |
	cartContiner := carts at: aCartID ifAbsent: [^self class signalCartNotFound ].
	self removeCartIfItsExpired: aCartID.
	
	^cartContiner 
	
	! !

!methodRemoval: InternalApi #removeCartIfExpired: stamp: 'db 12/2/2020 19:25:32'!
removeCartIfExpired: aCartID 

	((carts at: aCartID) isExpiredOn: clock now) ifTrue: [
		carts removeKey: aCartID .
		^self class signalOperationOnExpiredCart].
	
	 
!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 19:25:38'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 19:25:38'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 19:25:38'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 19:25:38'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 19:25:38'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 19:25:38'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 19:25:38'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 19:25:38'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 19:25:38'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 19:25:38'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 19:25:38'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 19:25:38'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 19:25:38'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 19:25:44'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 19:25:44'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 19:25:44'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 19:25:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 19:25:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 19:25:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 19:25:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 19:25:44'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 19:25:47'!
PASSED!

!classRenamed: #CartSession as: #SessionCart stamp: 'db 12/2/2020 19:26:45'!
Smalltalk renameClassNamed: #CartSession as: #SessionCart!
!InternalApi methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 19:26:45' prior: 50901391!
createCartFor: aClientID withPassword: aPassword

	| cartID |
	
	self assertNonAuthenticatedClient: aClientID withPassword: aPassword.
	
	cartID := self nextID.
	carts at: cartID put: (SessionCart with: catalog associatedTo: aClientID createAt: clock now) .
	
	^cartID.! !
!SessionCart class methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 19:26:45' prior: 50901334!
with: aCatalog associatedTo: aClientID createAt: aDateAndTime

	^SessionCart new initializeAcceptingItemsOf: aCatalog associatedTo: aClientID andCreatedAt: aDateAndTime! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 19:26:55'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 19:26:55'!
PASSED!

----SNAPSHOT----(2 December 2020 19:26:58) CuisUniversity-4384.image priorSource: 18167635!
!InternalApi methodsFor: 'privates' stamp: 'db 12/2/2020 19:28:20'!
currentCartSession: aCartID 
	| cartContiner |
	cartContiner := carts at: aCartID ifAbsent: [^self class signalCartNotFound ].
	self removeCartIfItsExpired: aCartID.
	
	^cartContiner 
	
	! !
!InternalApi methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 19:28:20' prior: 50901406!
listCart: aCartID 
	
	| cartInfo |
	cartInfo := self currentCartSession: aCartID.
	^cartInfo items asBag.! !
!InternalApi methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 19:28:20' prior: 50901435!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartSession clientSalesBook |
	cartSession := self currentCartSession: aCartID.

	clientSalesBook := self salesBookFrom: cartSession.
	
	self checkoutTo: cartSession payingWith: (CreditCard with: aCCN expiration: aCCED creditCardOwner: aCCO) andRegisterIn: clientSalesBook.
	
	self updateSalesbookOf: cartSession with: clientSalesBook.
	! !
!InternalApi methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 19:28:20' prior: 50901420!
add: aQuantity to: aCartID of: anItem
	
	| cartInfo |
	cartInfo := self currentCartSession: aCartID.
	cartInfo add: aQuantity of: anItem.
	
	 
! !

!methodRemoval: InternalApi #cartInfoIdentifyAs: stamp: 'db 12/2/2020 19:28:20'!
cartInfoIdentifyAs: aCartID 
	| cartContiner |
	cartContiner := carts at: aCartID ifAbsent: [^self class signalCartNotFound ].
	self removeCartIfItsExpired: aCartID.
	
	^cartContiner 
	
	!
!InternalApi methodsFor: 'privates' stamp: 'db 12/2/2020 19:28:38' prior: 50902030!
currentCartSession: aCartID 
	| sessionCart |
	sessionCart := carts at: aCartID ifAbsent: [^self class signalCartNotFound ].
	self removeCartIfItsExpired: aCartID.
	
	^sessionCart 
	
	! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 19:29:29' prior: 50902039!
listCart: aCartID 
	
	| cartSession |
	cartSession := self currentCartSession: aCartID.
	^cartSession items asBag.! !
!InternalApi methodsFor: 'salesBook' stamp: 'db 12/2/2020 19:30:50' prior: 50900757!
salesBookFrom: aCartSession

	^salesBook at:	 aCartSession clientAssociated ifAbsent: [^OrderedCollection new.].
	
	! !
!InternalApi methodsFor: 'salesBook' stamp: 'db 12/2/2020 19:31:14' prior: 50901103!
updateSalesbookOf: aClientID with: aClientSalesBook 

	salesBook at: aClientID clientAssociated put: aClientSalesBook.
	
	! !
!InternalApi methodsFor: 'salesBook' stamp: 'db 12/2/2020 19:31:37' prior: 50902103!
updateSalesbookOf: aCartSession with: aClientSalesBook 

	salesBook at: aCartSession clientAssociated put: aClientSalesBook.
	
	! !
!InternalApi methodsFor: 'privates' stamp: 'db 12/2/2020 19:32:07' prior: 50900884!
checkoutTo: aCart payingWith: aCreditCard andRegisterIn: aSalesBook
	
	| cashier |
	cashier := Cashier 
		toCheckout: aCart
		charging: aCreditCard
		throught: merchantProcessor 
		on: clock today
		registeringOn: aSalesBook.
		
	cashier checkOut.
	
	! !
!ClockSimulator methodsFor: 'public methods' stamp: 'db 12/2/2020 19:32:20'!
today
	^Date today! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 19:32:28'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 19:32:28'!
PASSED!
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 19:33:45' prior: 50902046!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartSession clientSalesBook |
	
	cartSession := self currentCartSession: aCartID.

	clientSalesBook := self salesBookFrom: cartSession.
	
	self checkoutTo: cartSession payingWith: (CreditCard with: aCCN expiration: aCCED creditCardOwner: aCCO) andRegisterIn: clientSalesBook.
	
	self updateSalesbookOf: cartSession with: clientSalesBook.
	! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 19:35:07' prior: 50902064!
add: aQuantity to: aCartID of: anItem
	
	| cartSession |
	cartSession := self currentCartSession: aCartID.
	cartSession add: aQuantity of: anItem.
	
	 
! !

----SNAPSHOT----(2 December 2020 19:36:09) CuisUniversity-4384.image priorSource: 18252046!
!InternalApi class methodsFor: 'error messages' stamp: 'db 12/2/2020 19:36:39' prior: 50892646!
cartNotFoundErrorDescription
	^'Cart not found'! !
!InternalApi class methodsFor: 'error messages' stamp: 'db 12/2/2020 19:37:49' prior: 50896947!
operationOnExpiredCartErrorDescription
	^'cannot operate in a expired cart'! !
!InternalApi class methodsFor: 'error messages' stamp: 'db 12/2/2020 19:38:27' prior: 50902266!
operationOnExpiredCartErrorDescription
	^'cannot operate on an expired cart'! !
!InternalApi methodsFor: 'initialization' stamp: 'db 12/2/2020 19:38:54' prior: 50896253!
initializeWithAuthenticator: anAuthenticator throught: aMerchantProcessor withCatalog: aCatalog andClock: aClock   
	authenticator := anAuthenticator.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor. 
	sequence := 0.
	carts := Dictionary new.
	salesBook := Dictionary new.
	clock := aClock ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 19:38:59'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 19:38:59'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 19:38:59'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 19:38:59'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 19:38:59'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 19:38:59'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 19:38:59'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 19:38:59'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 19:38:59'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 19:38:59'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 19:38:59'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 19:38:59'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 19:38:59'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 19:38:59'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 19:38:59'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 19:38:59'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 19:38:59'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 19:38:59'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 19:38:59'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 19:38:59'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 19:38:59'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 19:38:59'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 19:39:00'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 19:39:00'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 19:39:00'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 19:39:00'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 19:39:00'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 19:39:00'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 19:39:00'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 19:39:00'!
PASSED!
!InternalApi methodsFor: 'assertions' stamp: 'db 12/2/2020 19:40:36'!
assertNotExpiredCartAndRemoveCartIfItsExpired: aCartID 

	((carts at: aCartID) isExpiredOn: clock now) ifTrue: [
		carts removeKey: aCartID .
		^self class signalOperationOnExpiredCart].
	
	 
! !
!InternalApi methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 19:40:36' prior: 50902080!
currentCartSession: aCartID 
	| sessionCart |
	sessionCart := carts at: aCartID ifAbsent: [^self class signalCartNotFound ].
	self assertNotExpiredCartAndRemoveCartIfItsExpired: aCartID.
	
	^sessionCart 
	
	! !

!methodRemoval: InternalApi #removeCartIfItsExpired: stamp: 'db 12/2/2020 19:40:36'!
removeCartIfItsExpired: aCartID 

	((carts at: aCartID) isExpiredOn: clock now) ifTrue: [
		carts removeKey: aCartID .
		^self class signalOperationOnExpiredCart].
	
	 
!
!InternalApi methodsFor: 'assertions' stamp: 'db 12/2/2020 19:41:38'!
assertIsNotAuthenticatedClient: aClientID withPassword: aPassword  

	(authenticator authenticate: aClientID withPassword: aPassword) ifFalse: [^self class signalNonAuthenticatedClient].
! !
!InternalApi methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 19:41:38' prior: 50901906!
createCartFor: aClientID withPassword: aPassword

	| cartID |
	
	self assertIsNotAuthenticatedClient: aClientID withPassword: aPassword.
	
	cartID := self nextID.
	carts at: cartID put: (SessionCart with: catalog associatedTo: aClientID createAt: clock now) .
	
	^cartID.! !
!InternalApi methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 19:41:38' prior: 50897504!
listPurchasesOf: aClientID withPassword: aPassword  

	self assertIsNotAuthenticatedClient: aClientID withPassword: aPassword.
	^salesBook at: aClientID ! !

!methodRemoval: InternalApi #assertNonAuthenticatedClient:withPassword: stamp: 'db 12/2/2020 19:41:38'!
assertNonAuthenticatedClient: aClientID withPassword: aPassword  

	(authenticator authenticate: aClientID withPassword: aPassword) ifFalse: [^self class signalNonAuthenticatedClient].
!
!InternalApi methodsFor: 'assertions' stamp: 'db 12/2/2020 19:42:47'!
assertIsNotExpiredCartAndRemoveItfItsExpired: aCartID 

	((carts at: aCartID) isExpiredOn: clock now) ifTrue: [
		carts removeKey: aCartID .
		^self class signalOperationOnExpiredCart].
	
	 
! !
!InternalApi methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 19:42:47' prior: 50902401!
currentCartSession: aCartID 
	| sessionCart |
	sessionCart := carts at: aCartID ifAbsent: [^self class signalCartNotFound ].
	self assertIsNotExpiredCartAndRemoveItfItsExpired: aCartID.
	
	^sessionCart 
	
	! !

!methodRemoval: InternalApi #assertNotExpiredCartAndRemoveCartIfItsExpired: stamp: 'db 12/2/2020 19:42:47'!
assertNotExpiredCartAndRemoveCartIfItsExpired: aCartID 

	((carts at: aCartID) isExpiredOn: clock now) ifTrue: [
		carts removeKey: aCartID .
		^self class signalOperationOnExpiredCart].
	
	 
!
!InternalApi methodsFor: 'assertions' stamp: 'db 12/2/2020 19:44:01'!
assertIsNotExpiredCartAndRemoveItIfItIsExpired: aCartID 

	((carts at: aCartID) isExpiredOn: clock now) ifTrue: [
		carts removeKey: aCartID .
		^self class signalOperationOnExpiredCart].
	
	 
! !
!InternalApi methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 19:44:01' prior: 50902466!
currentCartSession: aCartID 
	| sessionCart |
	sessionCart := carts at: aCartID ifAbsent: [^self class signalCartNotFound ].
	self assertIsNotExpiredCartAndRemoveItIfItIsExpired: aCartID.
	
	^sessionCart 
	
	! !

!methodRemoval: InternalApi #assertIsNotExpiredCartAndRemoveItfItsExpired: stamp: 'db 12/2/2020 19:44:01'!
assertIsNotExpiredCartAndRemoveItfItsExpired: aCartID 

	((carts at: aCartID) isExpiredOn: clock now) ifTrue: [
		carts removeKey: aCartID .
		^self class signalOperationOnExpiredCart].
	
	 
!
!InternalApi methodsFor: 'client - methods' stamp: 'db 12/2/2020 19:44:30' prior: 50902427!
createCartFor: aClientID withPassword: aPassword

	| cartID |
	
	self assertIsNotAuthenticatedClient: aClientID withPassword: aPassword.
	
	cartID := self nextID.
	
	carts at: cartID put: (SessionCart with: catalog associatedTo: aClientID createAt: clock now) .
	
	^cartID.! !
!InternalApi methodsFor: 'privates' stamp: 'db 12/2/2020 19:45:27' prior: 50902495!
currentCartSession: aCartID 
	| sessionCart |
	sessionCart := carts at: aCartID ifAbsent: [^self class signalCartNotFound ].
	self assertIsNotExpiredCartAndRemoveItIfItIsExpired: sessionCart.
	
	^sessionCart 
	
	! !
!InternalApi methodsFor: 'privates' stamp: 'db 12/2/2020 19:46:31' prior: 50902526!
currentCartSession: aCartID 
	| sessionCart |
	sessionCart := carts at: aCartID ifAbsent: [^self class signalCartNotFound ].
	self assertIsNotExpiredCartAndRemoveItIfItIsExpired: aCartID.
	
	^sessionCart 
	
	! !
!InternalApi methodsFor: 'privates' stamp: 'db 12/2/2020 19:46:40' prior: 50902536!
currentCartSession: aCartID 
	| sessionCart |
	sessionCart := carts at: aCartID ifAbsent: [^self class signalCartNotFound ].
	
	self assertIsNotExpiredCartAndRemoveItIfItIsExpired: aCartID.
	
	^sessionCart 
	
	! !
!CreditCardTest methodsFor: 'testing' stamp: 'db 12/2/2020 19:49:22'!
test01CreditCardNumberShouldHave16digits

	| creditCard |
	self  should: [CreditCard with: '1234' expiration: testObjectFactory notExpiredDate creditCardOwner: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
	 
	creditCard := CreditCard with: '4545123455647789' expiration: testObjectFactory notExpiredDate creditCardOwner: 'owner'.
	self assert: '4545123455647789' equals: (creditCard creditCardNumber ).
	self assert: 16 equals: (creditCard creditCardNumber size).
	! !

!methodRemoval: CreditCardTest #test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised stamp: 'db 12/2/2020 19:49:22'!
test01CreditCardNumberShouldHave16digitsIfNotAnErrorShouldBeRaised

	| creditCard |
	self  should: [CreditCard with: '1234' expiration: testObjectFactory notExpiredDate creditCardOwner: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
	 
	creditCard := CreditCard with: '4545123455647789' expiration: testObjectFactory notExpiredDate creditCardOwner: 'owner'.
	self assert: '4545123455647789' equals: (creditCard creditCardNumber ).
	self assert: 16 equals: (creditCard creditCardNumber size).
	!
!CreditCardTest methodsFor: 'testing' stamp: 'db 12/2/2020 19:49:54' prior: 50902555!
test01CreditCardNumberShouldHave16digits

	| creditCard |
	self  should: [CreditCard with: '1234' expiration: testObjectFactory notExpiredDate creditCardOwner: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.	! !
!CreditCardTest methodsFor: 'testing' stamp: 'db 12/2/2020 19:50:01' prior: 50902597!
test01CreditCardNumberShouldHave16digits

	| creditCard |
	self  should: [CreditCard with: '1234' expiration: testObjectFactory notExpiredDate creditCardOwner: 'owner' ] 
		 raise: Error 
		 withMessageText: CreditCard creditCardNumberInvalidLengthNumberErrorDescription.
	 
	creditCard := CreditCard with: '4545123455647789' expiration: testObjectFactory notExpiredDate creditCardOwner: 'owner'.
	self assert: '4545123455647789' equals: (creditCard creditCardNumber ).
	self assert: 16 equals: (creditCard creditCardNumber size).
	! !
!CreditCardTest methodsFor: 'testing' stamp: 'db 12/2/2020 19:50:19' prior: 50899725!
test03CreditCardOwnerNameCantBeLongerThan30Letters


	self  should: [CreditCard with: '4545124512456598' expiration: testObjectFactory notExpiredDate creditCardOwner: 'dfafasdfadfadsfasdfassdfadsfafas dasdfad'] 
		 raise: Error 
		 withMessageText: CreditCard creditCardOwnerNameCantBeLongerThanThirtyErrorDescription.
		! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'db 12/2/2020 19:51:16'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'setup' stamp: 'db 12/2/2020 19:51:14' prior: 50885306 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	
		merchantProcessor := MerchantProcessorSimulator new.! !
!CashierTest methodsFor: 'setup' stamp: 'db 12/2/2020 19:51:18' prior: 50902651 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	merchantProcessor := MerchantProcessorSimulator new.! !
!CashierTest methodsFor: 'setup' stamp: 'db 12/2/2020 19:51:22' prior: 50902660 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	merchantProcessor := MerchantProcessorSimulator new.! !

!methodRemoval: CashierTest #debit:from: stamp: 'db 12/2/2020 19:51:38'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard !
!CashierTest methodsFor: 'tests' stamp: 'db 12/2/2020 19:51:50' prior: 50885271!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: merchantProcessor 
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'db 12/2/2020 19:51:53' prior: 50885289!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: merchantProcessor
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'db 12/2/2020 19:51:56' prior: 50885182!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: merchantProcessor
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'db 12/2/2020 19:51:59' prior: 50885203!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'db 12/2/2020 19:52:02' prior: 50885247!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'db 12/2/2020 19:52:06' prior: 50885221!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 19:55:10'!
FAILURE!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 19:55:10'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digits stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 19:55:10'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 19:55:14'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 19:56:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 19:56:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 19:56:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 19:56:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 19:56:53'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 19:56:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 19:56:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 19:56:53'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 19:56:53'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 19:56:53'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 19:56:53'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 19:56:53'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 19:56:53'!
FAILURE!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 19:56:53'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digits stamp: 'db 12/2/2020 19:56:53'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 19:56:53'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 19:56:53'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 19:56:53'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 19:56:53'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 19:56:53'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 19:56:53'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 19:56:53'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 19:56:53'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 19:56:53'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 19:56:53'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 19:56:53'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 19:56:53'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 19:56:53'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 19:56:53'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 19:56:53'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'db 12/2/2020 19:58:57' prior: 50902758!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	
	
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!MerchantProcessorSimulator class methodsFor: 'nil' stamp: 'db 12/2/2020 20:00:54'!
withDebitBehavior: aBehavior

	^MerchantProcessorSimulator initializeWithDebitBehavior: aBehavior .! !
!MerchantProcessorSimulator methodsFor: 'initialization' stamp: 'db 12/2/2020 20:01:41'!
initializeWithDebitBehavior: aDebitBehavior
	debitBehavior := aDebitBehavior! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 20:01:57' prior: 50903039!
withDebitBehavior: aBehavior

	^MerchantProcessorSimulator initializeWithDebitBehavior: aBehavior .! !
!CashierTest methodsFor: 'tests' stamp: 'db 12/2/2020 20:02:58' prior: 50903014!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook specialMerchantProcessor total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	
	
	specialMerchantProcessor := MerchantProcessorSimulator withDebitBehavior: [:anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard
		].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
	
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'db 12/2/2020 20:03:05' prior: 50903058!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook specialMerchantProcessor total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	
	
	specialMerchantProcessor := MerchantProcessorSimulator withDebitBehavior: [:anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard
		].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: specialMerchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
	
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 20:03:08'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 20:03:08'!
ERROR!
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 20:03:52' prior: 50903052!
withDebitBehavior: aBehavior

	^MerchantProcessorSimulator initializeWithDebitBehavior: aBehavior .! !
!MerchantProcessorSimulator methodsFor: 'initialization' stamp: 'db 12/2/2020 20:04:04' prior: 50903045!
initializeWithDebitBehavior: aDebitBehavior

	debitBehavior := aDebitBehavior! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 20:04:14'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 20:04:14'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 20:04:14'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 20:04:14'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 20:04:14'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 20:04:14'!
FAILURE!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 20:04:20'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 20:04:37'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 20:04:46'!
ERROR!
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 20:05:24' prior: 50903122!
withDebitBehavior: aBehavior

	^MerchantProcessorSimulator new initializeWithDebitBehavior: aBehavior .! !

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 20:05:25'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'db 12/2/2020 20:05:33' prior: 50903086!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook specialMerchantProcessor total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	
	specialMerchantProcessor := MerchantProcessorSimulator withDebitBehavior: [:anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard
	].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: specialMerchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
	
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'db 12/2/2020 20:06:02' prior: 50902783!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard specialMerchantProcessor |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	
	specialMerchantProcessor := MerchantProcessorSimulator withDebitBehavior: [ 
		:anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage
	].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'db 12/2/2020 20:06:12' prior: 50903204!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard specialMerchantProcessor |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	
	specialMerchantProcessor := MerchantProcessorSimulator withDebitBehavior: [ 
		:anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage
	].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: specialMerchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digits stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 20:06:16'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 20:06:16'!
PASSED!

----SNAPSHOT----(2 December 2020 20:06:26) CuisUniversity-4384.image priorSource: 18259419!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digits stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 20:11:03'!
PASSED!

!classRenamed: #SessionCart as: #CartSessionCart stamp: 'db 12/2/2020 20:12:25'!
Smalltalk renameClassNamed: #SessionCart as: #CartSessionCart!
!CartSessionCart class methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 20:12:25' prior: 50901918!
with: aCatalog associatedTo: aClientID createAt: aDateAndTime

	^CartSessionCart new initializeAcceptingItemsOf: aCatalog associatedTo: aClientID andCreatedAt: aDateAndTime! !
!InternalApi methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 20:12:25' prior: 50902514!
createCartFor: aClientID withPassword: aPassword

	| cartID |
	
	self assertIsNotAuthenticatedClient: aClientID withPassword: aPassword.
	
	cartID := self nextID.
	
	carts at: cartID put: (CartSessionCart with: catalog associatedTo: aClientID createAt: clock now) .
	
	^cartID.! !

Cart subclass: #CartSession
	instanceVariableNames: 'clientID lastTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'db 12/2/2020 20:13:00'!
Cart subclass: #CartSession
	instanceVariableNames: 'clientID lastTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartSession methodsFor: 'nil' stamp: 'db 12/2/2020 20:13:20'!
activeTimeFrom: aDate.

	^ (lastTimeUsed distanceTo: aDate) convertTo: minute.
	! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 20:13:29'!
clientAssociated
	^clientID ! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 20:13:38'!
initializeAcceptingItemsOf: aCatalog associatedTo: aClientID andCreatedAt: aDateAndTime

	catalog := aCatalog.
	clientID := aClientID.
	lastTimeUsed := aDateAndTime.
	
	items := OrderedCollection new.
	
	
	! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 20:13:46'!
isExpiredOn: aDate
	
	^(self activeTimeFrom: aDate) >= (SimpleMeasure amount: 30 unit: minute).
	
	! !
!CartSession class methodsFor: 'nil' stamp: 'db 12/2/2020 20:13:57'!
with: aCatalog associatedTo: aClientID createAt: aDateAndTime

	^CartSessionCart new initializeAcceptingItemsOf: aCatalog associatedTo: aClientID andCreatedAt: aDateAndTime! !
!InternalApi methodsFor: 'client - methods' stamp: 'db 12/2/2020 20:15:46' prior: 50903482!
createCartFor: aClientID withPassword: aPassword

	| cartID |
	
	self assertIsNotAuthenticatedClient: aClientID withPassword: aPassword.
	
	cartID := self nextID.
	
	carts at: cartID put: (CartSession with: catalog associatedTo: aClientID createAt: clock now) .
	
	^cartID.! !
!CartSession class methodsFor: 'initialization' stamp: 'db 12/2/2020 20:16:30' prior: 50903531!
with: aCatalog associatedTo: aClientID createAt: aDateAndTime

	^CartSession new initializeAcceptingItemsOf: aCatalog associatedTo: aClientID andCreatedAt: aDateAndTime! !

!classRemoval: #CartSessionCart stamp: 'db 12/2/2020 20:16:35'!
Cart subclass: #CartSessionCart
	instanceVariableNames: 'clientID lastTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----SNAPSHOT----(2 December 2020 20:17:16) CuisUniversity-4384.image priorSource: 18294818!

----QUIT----(2 December 2020 20:17:18) CuisUniversity-4384.image priorSource: 18301314!

----STARTUP---- (2 December 2020 21:39:40) as /Users/dbenitez/uba/2c2020-IS1/IS1-Trabajos/20-TusLibros/macos64-TusLibros/CuisUniversity-4384.image!


Object subclass: #CartSession
	instanceVariableNames: 'clientID lastTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'db 12/2/2020 21:39:57'!
Object subclass: #CartSession
	instanceVariableNames: 'clientID lastTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 21:40:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 21:40:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 21:40:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 21:40:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 21:40:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 21:40:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 21:40:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 21:40:01'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 21:40:01'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 21:40:01'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 21:40:01'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 21:40:01'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 21:40:01'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 21:40:01'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digits stamp: 'db 12/2/2020 21:40:01'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 21:40:01'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 21:40:01'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 21:40:01'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 21:40:01'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 21:40:01'!
ERROR!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 21:40:01'!
ERROR!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 21:40:01'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 21:40:01'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 21:40:01'!
ERROR!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 21:40:01'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 21:40:01'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 21:40:01'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 21:40:01'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 21:40:01'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 21:40:01'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 21:40:11'!
ERROR!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'db 12/2/2020 21:41:09'!
Object subclass: #CartSession
	instanceVariableNames: 'clientID lastTimeUsed cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartSession methodsFor: 'initialization' stamp: 'db 12/2/2020 21:41:07'!
initializeWith: aCart associatedTo: aClientID andCreatedAt: aDateAndTime

	cart := aCart.
	clientID := aClientID.
	lastTimeUsed := aDateAndTime.
	
	
	! !

!methodRemoval: CartSession #initializeAcceptingItemsOf:associatedTo:andCreatedAt: stamp: 'db 12/2/2020 21:41:18'!
initializeAcceptingItemsOf: aCatalog associatedTo: aClientID andCreatedAt: aDateAndTime

	catalog := aCatalog.
	clientID := aClientID.
	lastTimeUsed := aDateAndTime.
	
	items := OrderedCollection new.
	
	
	!
!CartSession class methodsFor: 'initialization' stamp: 'db 12/2/2020 21:41:35' prior: 50903552!
with: aCart associatedTo: aClientID createAt: aDateAndTime

	^CartSession new initializeWith: aCart associatedTo: aClientID andCreatedAt: aDateAndTime! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 21:41:44'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 21:41:44'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 21:41:44'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 21:41:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 21:41:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 21:41:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 21:41:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 21:41:44'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 21:41:44'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 21:41:44'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 21:41:44'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 21:41:44'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 21:41:44'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 21:41:44'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digits stamp: 'db 12/2/2020 21:41:44'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 21:41:44'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 21:41:44'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 21:41:44'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 21:41:44'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 21:41:44'!
ERROR!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 21:41:44'!
ERROR!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 21:41:44'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 21:41:44'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 21:41:44'!
ERROR!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 21:41:44'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 21:41:44'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 21:41:44'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 21:41:44'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 21:41:44'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 21:41:44'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 21:41:47'!
ERROR!
!InternalApi methodsFor: 'client - methods' stamp: 'db 12/2/2020 21:42:39' prior: 50903540!
createCartFor: aClientID withPassword: aPassword

	| cartID |
	
	self assertIsNotAuthenticatedClient: aClientID withPassword: aPassword.
	
	cartID := self nextID.
	
	carts at: cartID put: (CartSession with: (Cart acceptingItemsOf: catalog) associatedTo: aClientID createAt: clock now) .
	
	^cartID.! !

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 21:42:40'!
ERROR!
!CartSession methodsFor: 'operations' stamp: 'db 12/2/2020 21:43:19'!
items
	^cart items ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digits stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 21:43:24'!
ERROR!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 21:43:24'!
ERROR!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 21:43:24'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 21:43:27'!
ERROR!
!CartSession methodsFor: 'operations' stamp: 'db 12/2/2020 21:44:10'!
add: aQuantity of: anItem
	^cart add: aQuantity of: anItem! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digits stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 21:44:15'!
ERROR!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 21:44:15'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 21:44:15'!
ERROR!
!CartSession methodsFor: 'operations' stamp: 'db 12/2/2020 21:44:35'!
isEmpty
	^cart isEmpty ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digits stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 21:44:40'!
ERROR!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 21:44:40'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 21:44:40'!
ERROR!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 21:44:56'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digits stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 21:45:01'!
ERROR!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 21:45:01'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 21:45:01'!
ERROR!
!CartSession methodsFor: 'operations' stamp: 'db 12/2/2020 21:45:51'!
total
	^cart total ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digits stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 21:45:54'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 21:45:54'!
PASSED!

Object subclass: #Session
	instanceVariableNames: 'lastTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Session category: 'TusLibros' stamp: 'db 12/2/2020 21:47:20'!
Object subclass: #Session
	instanceVariableNames: 'lastTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #Session
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Session category: 'TusLibros' stamp: 'db 12/2/2020 21:47:25'!
Object subclass: #Session
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Session subclass: #CartSession
	instanceVariableNames: 'clientID lastTimeUsed cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'db 12/2/2020 21:47:31'!
Session subclass: #CartSession
	instanceVariableNames: 'clientID lastTimeUsed cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 21:50:16'!
test14AfterExecutingAddToCartTheExpirationTimeIsExtended

	| apiCaller cartID clock |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .

	clock advance: 30.

	self assertOperationOnExpiredCart: [apiCaller listCart: cartID].
		
	self 
		should: [	apiCaller listCart: cartID.] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi cartNotFoundErrorDescription ]	.
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 21:50:37' prior: 50904413!
test14AfterExecutingAddToCartTheExpirationTimeIsExtended

	| apiCaller cartID clock |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword .

	clock advance: 30.

	self assertOperationOnExpiredCart: [apiCaller listCart: cartID].
		
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 21:51:01' prior: 50904439!
test14AfterExecutingAddToCartTheExpirationTimeIsExtended

	| apiCaller cartID clock |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	

	clock advance: 30.

		
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 21:51:20' prior: 50904458!
test14AfterExecutingAddToCartTheExpirationTimeIsExtended

	| apiCaller cartID clock |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.

	clock advance: 30.
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore

		
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 22:12:52' prior: 50904475!
test14AfterExecutingAddToCartTheExpirationTimeIsExtended

	| apiCaller cartID clock |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.

	clock advance: 30.
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore.
	
	
		
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 22:14:00' prior: 50904494!
test14AfterExecutingAddToCartTheExpirationTimeIsExtended

	| apiCaller cartID clock cartSession |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.

	clock advance: 30.
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore.
	
	
	cartSession := apiCaller currentCartSession: cartID
	
	
		
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 22:14:56' prior: 50904514!
test14AfterExecutingAddToCartTheExpirationTimeIsExtended

	| apiCaller cartID clock cartSession |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.

	clock advance: 30.
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore.
	
	
	cartSession := apiCaller currentCartSession: cartID.
	
	self assert: (cartSession isExpiredOn: clock now)
	
	
		
	! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 22:15:04'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 22:15:04'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 22:15:04'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 22:15:04'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 22:15:04'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 22:15:04'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 22:15:04'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 22:15:04'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 22:15:04'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 22:15:04'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 22:15:04'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 22:15:04'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 22:15:04'!
PASSED!

!testRun: #InternalApiTest #test14AfterExecutingAddToCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:15:04'!
ERROR!

!testRun: #InternalApiTest #test14AfterExecutingAddToCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:15:04'!
ERROR!
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 22:15:30' prior: 50904536!
test14AfterExecutingAddToCartTheExpirationTimeIsExtended

	| apiCaller cartID clock cartSession |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.

	
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore.
	
	clock advance: 30.
	cartSession := apiCaller currentCartSession: cartID.
	
	self assert: (cartSession isExpiredOn: clock now)
	
	
		
	! !

!testRun: #InternalApiTest #test14AfterExecutingAddToCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:15:35'!
ERROR!
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 22:16:12' prior: 50904612!
test14AfterExecutingAddToCartTheExpirationTimeIsExtended

	| apiCaller cartID clock cartSession |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.

	clock advance: 5.
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore.
	
	clock advance: 30.
	cartSession := apiCaller currentCartSession: cartID.
	
	self assert: (cartSession isExpiredOn: clock now)
	
	
		
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 22:16:54' prior: 50904639!
test14AfterExecutingAddToCartTheExpirationTimeIsExtended

	| apiCaller cartID clock cartSession |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.

	clock advance: 5.
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore.
	
	clock advance: 30.
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore.
	
	cartSession := apiCaller currentCartSession: cartID.
	
	self assert: (cartSession isExpiredOn: clock now)
	
	
		
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 22:17:48' prior: 50904663!
test14AfterExecutingAddToCartTheExpirationTimeIsExtended

	| apiCaller cartID clock cartSession |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	clock advance: 29.
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore.
	
	clock advance: 1.
	
	cartSession := apiCaller currentCartSession: cartID.
	
	self assert: (cartSession isExpiredOn: clock now)
	
	
		
	! !

!testRun: #InternalApiTest #test14AfterExecutingAddToCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:17:56'!
ERROR!
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 22:18:22' prior: 50904689!
test14AfterExecutingAddToCartTheExpirationTimeIsExtended

	| apiCaller cartID clock cartSession |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	clock advance: 29.
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore.
	
	
	
	cartSession := apiCaller currentCartSession: cartID.
	
	self assert: (cartSession isExpiredOn: clock now)
	
	
		
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 22:18:34' prior: 50904717!
test14AfterExecutingAddToCartTheExpirationTimeIsExtended

	| apiCaller cartID clock cartSession |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	clock advance: 29.
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore.
	
	clock advance: 1.
	
	cartSession := apiCaller currentCartSession: cartID.
	
	self assert: (cartSession isExpiredOn: clock now)
	
	
		
	! !

!testRun: #InternalApiTest #test14AfterExecutingAddToCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:18:40'!
ERROR!
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 22:20:40' prior: 50902250!
add: aQuantity to: aCartID of: anItem
	
	| cartSession |
	cartSession := self currentCartSession: aCartID.
	cartSession add: aQuantity of: anItem.
	
	self extendTime: cartSession
	
	 
! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 22:20:52' prior: 50904769!
add: aQuantity to: aCartID of: anItem
	
	| cartSession |
	cartSession := self currentCartSession: aCartID.
	cartSession add: aQuantity of: anItem.
	
	self extendTime: cartSession.
	
	 
! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 22:21:36' prior: 50904778!
add: aQuantity to: aCartID of: anItem
	
	| cartSession |
	cartSession := self currentCartSession: aCartID.
	cartSession add: aQuantity of: anItem.
	
	cartSession extendTime: clock now.
	
	 
! !
!Session methodsFor: 'nil' stamp: 'db 12/2/2020 22:22:15'!
extendTime: aDateAndTime
	! !

Session subclass: #CartSession
	instanceVariableNames: 'clientID cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'db 12/2/2020 22:22:21'!
Session subclass: #CartSession
	instanceVariableNames: 'clientID cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Session category: 'TusLibros' stamp: 'db 12/2/2020 22:22:40'!
Object subclass: #Session
	instanceVariableNames: 'lastTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Session methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 22:22:38' prior: 50904795!
extendTime: aDateAndTime
	lastTimeUsed := aDateAndTime.
	! !
!Session methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 22:22:55'!
activeTimeFrom: aDate.

	^ (lastTimeUsed distanceTo: aDate) convertTo: minute.
	! !

!methodRemoval: CartSession #activeTimeFrom: stamp: 'db 12/2/2020 22:23:03'!
activeTimeFrom: aDate.

	^ (lastTimeUsed distanceTo: aDate) convertTo: minute.
	!
!Session methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 22:23:25'!
isExpiredOn: aDate
	
	^(self activeTimeFrom: aDate) >= (SimpleMeasure amount: 30 unit: minute).
	! !

!methodRemoval: CartSession #isExpiredOn: stamp: 'db 12/2/2020 22:23:36'!
isExpiredOn: aDate
	
	^(self activeTimeFrom: aDate) >= (SimpleMeasure amount: 30 unit: minute).
	
	!
!Session methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 22:23:59' prior: 50904818!
extendTime: aDateAndTime

	lastTimeUsed := aDateAndTime.
	! !
!Session methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 22:26:14'!
stamp: aDateAndTime

	lastTimeUsed := aDateAndTime.
	! !

!methodRemoval: Session #extendTime: stamp: 'db 12/2/2020 22:26:41'!
extendTime: aDateAndTime

	lastTimeUsed := aDateAndTime.
	!
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 22:27:12' prior: 50904787!
add: aQuantity to: aCartID of: anItem
	
	| cartSession |
	cartSession := self currentCartSession: aCartID.
	cartSession add: aQuantity of: anItem.
	
	cartSession stamp: clock now.
	
	 
! !
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 22:27:23' prior: 50904859!
add: aQuantity to: aCartID of: anItem
	
	| cartSession |
	cartSession := self currentCartSession: aCartID.
	
	cartSession add: aQuantity of: anItem.
	
	cartSession stamp: clock now.
	
	 
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digits stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 22:27:26'!
PASSED!

!testRun: #InternalApiTest #test14AfterExecutingAddToCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:27:26'!
FAILURE!

!testRun: #InternalApiTest #test14AfterExecutingAddToCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:27:26'!
FAILURE!

self activeTimeFrom: aDate!
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 22:28:32' prior: 50904741!
test14AfterExecutingAddToCartTheExpirationTimeIsExtended

	| apiCaller cartID clock cartSession |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	clock advance: 29.
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore.
	
	clock advance: 1.
	
	cartSession := apiCaller currentCartSession: cartID.
	
	self deny: (cartSession isExpiredOn: clock now)
	
	
		
	! !

!testRun: #InternalApiTest #test14AfterExecutingAddToCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:28:33'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 22:28:38'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digits stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 22:28:39'!
PASSED!

!testRun: #InternalApiTest #test14AfterExecutingAddToCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:28:39'!
PASSED!
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 22:29:30'!
test14AfterExecutingListCartTheExpirationTimeIsExtended

	| apiCaller cartID clock cartSession |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	clock advance: 29.
	
	apiCaller listCart: cartID.
	
	clock advance: 1.
	
	cartSession := apiCaller currentCartSession: cartID.
	
	self deny: (cartSession isExpiredOn: clock now)
	
	
		
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 22:29:38'!
test15AfterExecutingListCartTheExpirationTimeIsExtended

	| apiCaller cartID clock cartSession |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	clock advance: 29.
	
	apiCaller listCart: cartID.
	
	clock advance: 1.
	
	cartSession := apiCaller currentCartSession: cartID.
	
	self deny: (cartSession isExpiredOn: clock now)
	
	
		
	! !

!methodRemoval: InternalApiTest #test14AfterExecutingListCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:29:38'!
test14AfterExecutingListCartTheExpirationTimeIsExtended

	| apiCaller cartID clock cartSession |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	clock advance: 29.
	
	apiCaller listCart: cartID.
	
	clock advance: 1.
	
	cartSession := apiCaller currentCartSession: cartID.
	
	self deny: (cartSession isExpiredOn: clock now)
	
	
		
	!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digits stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #InternalApiTest #test14AfterExecutingAddToCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:29:42'!
PASSED!

!testRun: #InternalApiTest #test15AfterExecutingListCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:29:42'!
ERROR!

!testRun: #InternalApiTest #test15AfterExecutingListCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:29:42'!
ERROR!
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 22:30:40' prior: 50902089!
listCart: aCartID 
	
	| cartSession items |
	cartSession := self currentCartSession: aCartID.
	
	items := cartSession items asBag.
	
	cartSession stamp: clock now.
	
	^items! !

!testRun: #InternalApiTest #test15AfterExecutingListCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:30:52'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 22:30:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 22:30:55'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 22:30:55'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 22:30:55'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 22:30:55'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 22:30:55'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 22:30:55'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 22:30:55'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 22:30:55'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 22:30:55'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 22:30:55'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 22:30:55'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 22:30:55'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 22:30:55'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digits stamp: 'db 12/2/2020 22:30:55'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 22:30:55'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 22:30:55'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 22:30:55'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 22:30:55'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 22:30:55'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 22:30:55'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 22:30:55'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 22:30:55'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 22:30:55'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 22:30:55'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 22:30:56'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 22:30:56'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 22:30:56'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 22:30:56'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 22:30:56'!
PASSED!

!testRun: #InternalApiTest #test14AfterExecutingAddToCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:30:56'!
PASSED!

!testRun: #InternalApiTest #test15AfterExecutingListCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:30:56'!
PASSED!
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 22:31:11'!
test16AfterExecutingCheckoutTheExpirationTimeIsExtended

	| apiCaller cartID clock cartSession |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	clock advance: 29.
	
	apiCaller listCart: cartID.
	
	clock advance: 1.
	
	cartSession := apiCaller currentCartSession: cartID.
	
	self deny: (cartSession isExpiredOn: clock now)
	
	
		
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 22:31:33' prior: 50905419!
test16AfterExecutingCheckoutTheExpirationTimeIsExtended

	| apiCaller cartID clock cartSession |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	clock advance: 29.
	
	apiCaller 
			checkout: cartID 
			withCreditCardNumber: testObjectFactory defaultCreditCardNumber 
			andCreditCardExpirationDate: testObjectFactory notExpiredDate
			andCreditCardOwner: testObjectFactory defaultCreditCardOwner.
	
	clock advance: 1.
	
	cartSession := apiCaller currentCartSession: cartID.
	
	self deny: (cartSession isExpiredOn: clock now)
	
	
		
	! !

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 22:31:39'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 22:31:39'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 22:31:39'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 22:31:39'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 22:31:39'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 22:31:39'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 22:31:40'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 22:31:40'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 22:31:40'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 22:31:40'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 22:31:40'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 22:31:40'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 22:31:40'!
PASSED!

!testRun: #InternalApiTest #test14AfterExecutingAddToCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:31:40'!
PASSED!

!testRun: #InternalApiTest #test15AfterExecutingListCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:31:40'!
PASSED!

!testRun: #InternalApiTest #test16AfterExecutingCheckoutTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:31:40'!
ERROR!

!testRun: #InternalApiTest #test16AfterExecutingCheckoutTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:31:40'!
ERROR!
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 22:32:43' prior: 50905442!
test16AfterExecutingCheckoutTheExpirationTimeIsExtended

	| apiCaller cartID clock cartSession |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore.
	
	clock advance: 29.
	
	apiCaller 
			checkout: cartID 
			withCreditCardNumber: testObjectFactory defaultCreditCardNumber 
			andCreditCardExpirationDate: testObjectFactory notExpiredDate
			andCreditCardOwner: testObjectFactory defaultCreditCardOwner.
	
	clock advance: 1.
	
	cartSession := apiCaller currentCartSession: cartID.
	
	self deny: (cartSession isExpiredOn: clock now)
	
	
		
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digits stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #InternalApiTest #test14AfterExecutingAddToCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #InternalApiTest #test15AfterExecutingListCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:33:04'!
PASSED!

!testRun: #InternalApiTest #test16AfterExecutingCheckoutTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:33:04'!
ERROR!

!testRun: #InternalApiTest #test16AfterExecutingCheckoutTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:33:04'!
ERROR!
!InternalApi methodsFor: 'cart - method' stamp: 'db 12/2/2020 22:34:28' prior: 50902233!
checkout: aCartID withCreditCardNumber: aCCN andCreditCardExpirationDate: aCCED andCreditCardOwner: aCCO 
	
	| cartSession clientSalesBook |
	
	cartSession := self currentCartSession: aCartID.

	clientSalesBook := self salesBookFrom: cartSession.
	
	self checkoutTo: cartSession payingWith: (CreditCard with: aCCN expiration: aCCED creditCardOwner: aCCO) andRegisterIn: clientSalesBook.
	
	self updateSalesbookOf: cartSession with: clientSalesBook.
	
	cartSession stamp: clock now.
	! !

!testRun: #InternalApiTest #test16AfterExecutingCheckoutTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:34:30'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digits stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #InternalApiTest #test14AfterExecutingAddToCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #InternalApiTest #test15AfterExecutingListCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:34:35'!
PASSED!

!testRun: #InternalApiTest #test16AfterExecutingCheckoutTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:34:35'!
PASSED!
!InternalApiTest methodsFor: 'assertions' stamp: 'db 12/2/2020 22:35:22'!
assertIsNotAuthenticatedClientFor: aOperationBlock

	self 
		should: [aOperationBlock value] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 22:35:22' prior: 50896500!
test08CannotListPurchasesOfNonAuthenticatedClient

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: defaultClock.
	
	self assertIsNotAuthenticatedClientFor: [apiCaller 
				listPurchasesOf: testObjectFactory defaultClientID 
				withPassword: testObjectFactory invalidPassword].

		
	! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 22:35:22' prior: 50896360!
test01CannotCreateACartWithAnInvalidUserID

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: defaultClock .

	self assertIsNotAuthenticatedClientFor: [apiCaller createCartFor: testObjectFactory invalidClientID withPassword: testObjectFactory invalidPassword].
! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 22:35:22' prior: 50896375!
test02CannotCreateACartWithAnInvalidPassword

	| apiCaller |
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock:  defaultClock.

	self assertIsNotAuthenticatedClientFor: [apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory invalidPassword].
	! !

!methodRemoval: InternalApiTest #assertNonAuthenticatedClientFor: stamp: 'db 12/2/2020 22:35:22'!
assertNonAuthenticatedClientFor: aOperationBlock

	self 
		should: [aOperationBlock value] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi nonAuthenticatedClientErrorDescription ]
	!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digits stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #InternalApiTest #test14AfterExecutingAddToCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #InternalApiTest #test15AfterExecutingListCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:35:26'!
PASSED!

!testRun: #InternalApiTest #test16AfterExecutingCheckoutTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:35:26'!
PASSED!
!InternalApi class methodsFor: 'error messages' stamp: 'db 12/2/2020 22:35:42'!
notAuthenticatedClientErrorDescription
	^'Non authenticated client'! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 22:35:42' prior: 50905812!
assertIsNotAuthenticatedClientFor: aOperationBlock

	self 
		should: [aOperationBlock value] 
		raise: Error - MessageNotUnderstood
	 	withExceptionDo: [:anError | 
			self assert: anError messageText = InternalApi notAuthenticatedClientErrorDescription ]
	! !
!InternalApi class methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 22:35:42' prior: 50891225!
signalNonAuthenticatedClient
	
	^self error: self notAuthenticatedClientErrorDescription! !

!methodRemoval: InternalApi class #nonAuthenticatedClientErrorDescription stamp: 'db 12/2/2020 22:35:42'!
nonAuthenticatedClientErrorDescription
	^'Non authenticated client'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digits stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #InternalApiTest #test14AfterExecutingAddToCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #InternalApiTest #test15AfterExecutingListCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:35:45'!
PASSED!

!testRun: #InternalApiTest #test16AfterExecutingCheckoutTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:35:45'!
PASSED!
!InternalApi class methodsFor: 'signals' stamp: 'db 12/2/2020 22:36:03'!
signalNotAuthenticatedClient
	
	^self error: self notAuthenticatedClientErrorDescription! !
!InternalApi methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 22:36:03' prior: 50902418!
assertIsNotAuthenticatedClient: aClientID withPassword: aPassword  

	(authenticator authenticate: aClientID withPassword: aPassword) ifFalse: [^self class signalNotAuthenticatedClient].
! !

!methodRemoval: InternalApi class #signalNonAuthenticatedClient stamp: 'db 12/2/2020 22:36:03'!
signalNonAuthenticatedClient
	
	^self error: self notAuthenticatedClientErrorDescription!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digits stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #InternalApiTest #test14AfterExecutingAddToCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #InternalApiTest #test15AfterExecutingListCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:36:06'!
PASSED!

!testRun: #InternalApiTest #test16AfterExecutingCheckoutTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:36:06'!
PASSED!
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 22:36:48'!
denyIsAfterExecutingOperationTheExpirationTimeIsExtended

	| apiCaller cartID clock cartSession |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	clock advance: 29.
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore.
	
	clock advance: 1.
	
	cartSession := apiCaller currentCartSession: cartID.
	
	self deny: (cartSession isExpiredOn: clock now)
	
	
		
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 22:37:07'!
denyIsAfterExecutingOperationTheExpirationTimeIsExtended: aOperationBlock

	| apiCaller cartID clock cartSession |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	clock advance: 29.
	
	aOperationBlock value.
	
	clock advance: 1.
	
	cartSession := apiCaller currentCartSession: cartID.
	
	self deny: (cartSession isExpiredOn: clock now)
	
	
		
	! !

!methodRemoval: InternalApiTest #denyIsAfterExecutingOperationTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:37:13'!
denyIsAfterExecutingOperationTheExpirationTimeIsExtended

	| apiCaller cartID clock cartSession |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	clock advance: 29.
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore.
	
	clock advance: 1.
	
	cartSession := apiCaller currentCartSession: cartID.
	
	self deny: (cartSession isExpiredOn: clock now)
	
	
		
	!
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 22:38:47' prior: 50906291!
denyIsAfterExecutingOperationTheExpirationTimeIsExtended: cartID

	| apiCaller cartSession clock |
	clock advance: 1.
	
	cartSession := apiCaller currentCartSession: cartID.
	
	self deny: (cartSession isExpiredOn: clock now)
	
	
		
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 22:39:56'!
denyIsAfterExecutingOperationTheExpirationTimeIsExtended2: cartID with: apiCaller clioc: aClock

	|  cartSession clock |
	aClock advance: 1.
	
	cartSession := apiCaller currentCartSession: cartID.
	
	self deny: (cartSession isExpiredOn: clock now)
	
	
		
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 22:40:07' prior: 50906349!
denyIsAfterExecutingOperationTheExpirationTimeIsExtended2: cartID with: apiCaller clioc: aClock

	|  cartSession  |
	aClock advance: 1.
	
	cartSession := apiCaller currentCartSession: cartID.
	
	self deny: (cartSession isExpiredOn: aClock now)
	
	
		
	! !

!methodRemoval: InternalApiTest #denyIsAfterExecutingOperationTheExpirationTimeIsExtended: stamp: 'db 12/2/2020 22:40:15'!
denyIsAfterExecutingOperationTheExpirationTimeIsExtended: cartID

	| apiCaller cartSession clock |
	clock advance: 1.
	
	cartSession := apiCaller currentCartSession: cartID.
	
	self deny: (cartSession isExpiredOn: clock now)
	
	
		
	!
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 22:41:21' prior: 50904987!
test14AfterExecutingAddToCartTheExpirationTimeIsExtended

	| apiCaller cartID clock |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	clock advance: 29.
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore.
	
	self denyIsAfterExecutingOperationTheExpirationTimeIsExtended2: apiCaller with: cartID clioc: clock.
	
		
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 22:41:39' prior: 50905141!
test15AfterExecutingListCartTheExpirationTimeIsExtended

	| apiCaller cartID clock |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	clock advance: 29.
	
	apiCaller listCart: cartID.
	
	self denyIsAfterExecutingOperationTheExpirationTimeIsExtended2: apiCaller with: cartID clioc: clock.
	
	
		
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 22:41:46' prior: 50905531!
test16AfterExecutingCheckoutTheExpirationTimeIsExtended

	| apiCaller cartID clock |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore.
	
	clock advance: 29.
	
	apiCaller 
			checkout: cartID 
			withCreditCardNumber: testObjectFactory defaultCreditCardNumber 
			andCreditCardExpirationDate: testObjectFactory notExpiredDate
			andCreditCardOwner: testObjectFactory defaultCreditCardOwner.
	
	self denyIsAfterExecutingOperationTheExpirationTimeIsExtended2: apiCaller with: cartID clioc: clock.
	
		
	! !
!InternalApiTest methodsFor: 'assertions' stamp: 'db 12/2/2020 22:48:04'!
denyCartSessionExpiredAfter30MinutesOfCreated: cartID through: apiCaller using: aClock

	|  cartSession  |
	aClock advance: 1.
	
	cartSession := apiCaller currentCartSession: cartID.
	
	self deny: (cartSession isExpiredOn: aClock now)
	
	
		
	! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 22:48:04' prior: 50906407!
test15AfterExecutingListCartTheExpirationTimeIsExtended

	| apiCaller cartID clock |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	clock advance: 29.
	
	apiCaller listCart: cartID.
	
	self denyCartSessionExpiredAfter30MinutesOfCreated: apiCaller through: cartID using: clock.
	
	
		
	! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 22:48:04' prior: 50906384!
test14AfterExecutingAddToCartTheExpirationTimeIsExtended

	| apiCaller cartID clock |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	clock advance: 29.
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore.
	
	self denyCartSessionExpiredAfter30MinutesOfCreated: apiCaller through: cartID using: clock.
	
		
	! !
!InternalApiTest methodsFor: 'as yet unclassified' stamp: 'db 12/2/2020 22:48:04' prior: 50906429!
test16AfterExecutingCheckoutTheExpirationTimeIsExtended

	| apiCaller cartID clock |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore.
	
	clock advance: 29.
	
	apiCaller 
			checkout: cartID 
			withCreditCardNumber: testObjectFactory defaultCreditCardNumber 
			andCreditCardExpirationDate: testObjectFactory notExpiredDate
			andCreditCardOwner: testObjectFactory defaultCreditCardOwner.
	
	self denyCartSessionExpiredAfter30MinutesOfCreated: apiCaller through: cartID using: clock.
	
		
	! !

!methodRemoval: InternalApiTest #denyIsAfterExecutingOperationTheExpirationTimeIsExtended2:with:clioc: stamp: 'db 12/2/2020 22:48:04'!
denyIsAfterExecutingOperationTheExpirationTimeIsExtended2: cartID with: apiCaller clioc: aClock

	|  cartSession  |
	aClock advance: 1.
	
	cartSession := apiCaller currentCartSession: cartID.
	
	self deny: (cartSession isExpiredOn: aClock now)
	
	
		
	!
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 22:48:27' prior: 50906490!
test14AfterExecutingAddToCartTheExpirationTimeIsExtended

	| apiCaller cartID clock |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	clock advance: 29.
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore.
	
	self denyCartSessionExpiredAfter30MinutesOfCreated: cartID through: apiCaller using: clock.
	
		
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 22:48:57' prior: 50906469!
test15AfterExecutingListCartTheExpirationTimeIsExtended

	| apiCaller cartID clock |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	clock advance: 29.
	
	apiCaller listCart: cartID.
	
	
	self denyCartSessionExpiredAfter30MinutesOfCreated: cartID through: apiCaller using: clock.
	
		
	! !
!InternalApiTest methodsFor: 'testing - expired cart' stamp: 'db 12/2/2020 22:49:05' prior: 50906512!
test16AfterExecutingCheckoutTheExpirationTimeIsExtended

	| apiCaller cartID clock |
	clock := ClockSimulator with: GregorianDateTime now.
	
	apiCaller := InternalApi withAuthenticator: self throught: merchantProcessor withCatalog: testObjectFactory defaultCatalog andClock: clock.
	
	cartID := apiCaller createCartFor: testObjectFactory defaultClientID withPassword: testObjectFactory defaultPassword.
	
	apiCaller add: 2 to: cartID of: testObjectFactory itemSellByTheStore.
	
	clock advance: 29.
	
	apiCaller 
			checkout: cartID 
			withCreditCardNumber: testObjectFactory defaultCreditCardNumber 
			andCreditCardExpirationDate: testObjectFactory notExpiredDate
			andCreditCardOwner: testObjectFactory defaultCreditCardOwner.
			
	self denyCartSessionExpiredAfter30MinutesOfCreated: cartID through: apiCaller using: clock.
	
		
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digits stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #InternalApiTest #test14AfterExecutingAddToCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #InternalApiTest #test15AfterExecutingListCartTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:49:08'!
PASSED!

!testRun: #InternalApiTest #test16AfterExecutingCheckoutTheExpirationTimeIsExtended stamp: 'db 12/2/2020 22:49:08'!
PASSED!

----SNAPSHOT----(2 December 2020 22:52:48) CuisUniversity-4384.image priorSource: 18301407!

----QUIT----(2 December 2020 22:53:42) CuisUniversity-4384.image priorSource: 18402822!

----STARTUP---- (3 December 2020 00:34:56) as /Users/dbenitez/uba/2c2020-IS1/IS1-Trabajos/20-TusLibros/macos64-TusLibros/CuisUniversity-4384.image!


!classDefinition: #Session category: 'TusLibros' stamp: 'db 12/3/2020 00:36:16'!
Object subclass: #Session
	instanceVariableNames: 'lastTimeUsed owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Session methodsFor: 'opeartions' stamp: 'db 12/3/2020 00:36:14'!
owner
	^owner
	! !
!CartSession methodsFor: 'initialization' stamp: 'db 12/3/2020 00:36:30' prior: 50903700!
initializeWith: aCart associatedTo: aClientID andCreatedAt: aDateAndTime

	cart := aCart.
	owner := aClientID.
	lastTimeUsed := aDateAndTime.
	
	
	! !

!methodRemoval: CartSession #clientAssociated stamp: 'db 12/3/2020 00:36:42'!
clientAssociated
	^clientID !

Object subclass: #Session
	instanceVariableNames: 'lastAccessedTime owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Session category: 'TusLibros' stamp: 'db 12/3/2020 00:38:00'!
Object subclass: #Session
	instanceVariableNames: 'lastAccessedTime owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Session methodsFor: 'opeartions' stamp: 'db 12/3/2020 00:38:05' prior: 50904850!
stamp: aDateAndTime

	lastAccessedTime := aDateAndTime.
	! !
!Session methodsFor: 'private methods' stamp: 'db 12/3/2020 00:38:15' prior: 50904823!
activeTimeFrom: aDate.

	^ (lastAccessedTime distanceTo: aDate) convertTo: minute.
	! !
!CartSession methodsFor: 'initialization' stamp: 'db 12/3/2020 00:38:21' prior: 50906760!
initializeWith: aCart associatedTo: aClientID andCreatedAt: aDateAndTime

	cart := aCart.
	owner := aClientID.
	lastAccessedTime := aDateAndTime.
	
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digits stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/3/2020 00:38:28'!
ERROR!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #InternalApiTest #test14AfterExecutingAddToCartTheExpirationTimeIsExtended stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #InternalApiTest #test15AfterExecutingListCartTheExpirationTimeIsExtended stamp: 'db 12/3/2020 00:38:28'!
PASSED!

!testRun: #InternalApiTest #test16AfterExecutingCheckoutTheExpirationTimeIsExtended stamp: 'db 12/3/2020 00:38:28'!
ERROR!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/3/2020 00:38:30'!
ERROR!
!InternalApi methodsFor: 'salesBook' stamp: 'db 12/3/2020 00:38:40' prior: 50902096!
salesBookFrom: aCartSession

	^salesBook at:	 aCartSession owner ifAbsent: [^OrderedCollection new.].
	
	! !

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/3/2020 00:38:41'!
ERROR!
!InternalApi methodsFor: 'salesBook' stamp: 'db 12/3/2020 00:38:50' prior: 50902110!
updateSalesbookOf: aCartSession with: aClientSalesBook 

	salesBook at: aCartSession owner put: aClientSalesBook.
	
	! !

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/3/2020 00:38:52'!
PASSED!

!testRun: #InternalApiTest #test16AfterExecutingCheckoutTheExpirationTimeIsExtended stamp: 'db 12/3/2020 00:38:54'!
PASSED!

Object subclass: #Session
	instanceVariableNames: 'lastAccessedTime clientID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Session subclass: #CartSession
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'db 12/3/2020 00:41:08'!
Session subclass: #CartSession
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Session category: 'TusLibros' stamp: 'db 12/3/2020 00:41:20'!
Object subclass: #Session
	instanceVariableNames: 'lastAccessedTime owner clientID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Session methodsFor: 'opeartions' stamp: 'db 12/3/2020 00:41:18' prior: 50906756!
owner
	^clientID
	! !
!CartSession methodsFor: 'initialization' stamp: 'db 12/3/2020 00:41:30' prior: 50906794!
initializeWith: aCart associatedTo: aClientID andCreatedAt: aDateAndTime

	cart := aCart.
	clientID := aClientID.
	lastAccessedTime := aDateAndTime.
	
	
	! !
!Session methodsFor: 'opeartions' stamp: 'db 12/3/2020 00:41:53'!
clientIDSession
	^clientID
	! !

!methodRemoval: Session #owner stamp: 'db 12/3/2020 00:41:59'!
owner
	^clientID
	!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16digits stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCannotBeEmpty stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameCantBeLongerThan30Letters stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #InternalApiTest #test01CannotCreateACartWithAnInvalidUserID stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #InternalApiTest #test02CannotCreateACartWithAnInvalidPassword stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #InternalApiTest #test03NewCartsAreCreatedEmpty stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #InternalApiTest #test04AfterRequestingToAddAnItemTheCartIsNotEmptyAnymore stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #InternalApiTest #test05CannotAddItemsToAnInvalidCartID stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #InternalApiTest #test06CannotCheckoutACartWithAnInvalidCartID stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/3/2020 00:42:05'!
ERROR!

!testRun: #InternalApiTest #test08CannotListPurchasesOfNonAuthenticatedClient stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #InternalApiTest #test09CannotAddToCartToAnExpiredCart stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #InternalApiTest #test10CannotListCartToAnExpiredCart stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #InternalApiTest #test11CannotCheckoutToAnExpiredCart stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #InternalApiTest #test12ExpiredCartShouldBeRemoved stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #InternalApiTest #test13CannotListACartWithAnInvalidCartID stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #InternalApiTest #test14AfterExecutingAddToCartTheExpirationTimeIsExtended stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #InternalApiTest #test15AfterExecutingListCartTheExpirationTimeIsExtended stamp: 'db 12/3/2020 00:42:05'!
PASSED!

!testRun: #InternalApiTest #test16AfterExecutingCheckoutTheExpirationTimeIsExtended stamp: 'db 12/3/2020 00:42:05'!
ERROR!

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/3/2020 00:42:06'!
ERROR!
!InternalApi methodsFor: 'salesBook' stamp: 'db 12/3/2020 00:42:14' prior: 50906918!
salesBookFrom: aCartSession

	^salesBook at:	 aCartSession clientIDSession ifAbsent: [^OrderedCollection new.].
	
	! !

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/3/2020 00:42:18'!
ERROR!
!InternalApi methodsFor: 'salesBook' stamp: 'db 12/3/2020 00:42:26' prior: 50906928!
updateSalesbookOf: aCartSession with: aClientSalesBook 

	salesBook at: aCartSession clientIDSession put: aClientSalesBook.
	
	! !

!testRun: #InternalApiTest #test07AfterSucessfulCheckoutThePurchaseIsSaved stamp: 'db 12/3/2020 00:42:27'!
PASSED!

!testRun: #InternalApiTest #test16AfterExecutingCheckoutTheExpirationTimeIsExtended stamp: 'db 12/3/2020 00:42:29'!
PASSED!