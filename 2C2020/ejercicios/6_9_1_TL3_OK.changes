----STARTUP---- (26 November 2020 20:39:15) as /home/rodrigo/cuis-linux64-nueva/CuisUniversity-4384.image!


----End fileIn of /home/rodrigo/Documents/2020-2c/20-TusLibros/Iteracion2/TusLibros-33.st----!

TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterfaceTest category: 'TusLibros' stamp: 'RL 11/26/2020 20:47:59'!
TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterface category: 'TusLibros' stamp: 'RL 11/26/2020 21:03:53'!
Object subclass: #InnerInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterfaceTest methodsFor: 'nil' stamp: 'RL 11/26/2020 21:03:44'!
test01
	| interface clientID clientPassword cartID cartItems |
	
	interface := InnerInterface new.
	cartID := (interface createCartFor: clientID with: clientPassword) at: 2.
	cartItems := interface listCart: cartID.
	
	self assert: cartItems equals: (OrderedCollection with: 0).! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/26/2020 21:04:54' prior: 50868341!
test01
	| interface clientID clientPassword cartID cartItems |
	
	clientID := 'client1'.
	clientPassword := 'password1'.
	interface := InnerInterface new.
	
	cartID := (interface createCartFor: clientID with: clientPassword) at: 2.
	cartItems := interface listCart: cartID.
	
	self assert: cartItems equals: (OrderedCollection with: 0).! !
!InnerInterface methodsFor: 'nil' stamp: 'RL 11/26/2020 21:05:12'!
createCartFor: clientID with: clientPassword! !
!InnerInterface methodsFor: 'nil' stamp: 'RL 11/26/2020 21:05:45'!
listCart: cartID
	^OrderedCollection with: 0.! !

!testRun: #InnerInterfaceTest #test01 stamp: 'RL 11/26/2020 21:06:02'!
ERROR!

!testRun: #InnerInterfaceTest #test01 stamp: 'RL 11/26/2020 21:06:02'!
ERROR!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/26/2020 21:07:25' prior: 50868367!
createCartFor: clientID with: clientPassword
	^OrderedCollection with: 0 with: 'cart1'.! !

!testRun: #InnerInterfaceTest #test01 stamp: 'RL 11/26/2020 21:07:33'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/26/2020 21:12:07'!
test01NewCartListsNoItems
	| interface clientID clientPassword cartID cartItems |
	
	clientID := 'client1'.
	clientPassword := 'password1'.
	interface := InnerInterface new.
	
	cartID := (interface createCartFor: clientID with: clientPassword) at: 2.
	cartItems := interface listCart: cartID.
	
	self assert: cartItems equals: (OrderedCollection with: 0).! !

!methodRemoval: InnerInterfaceTest #test01 stamp: 'RL 11/26/2020 21:12:07'!
test01
	| interface clientID clientPassword cartID cartItems |
	
	clientID := 'client1'.
	clientPassword := 'password1'.
	interface := InnerInterface new.
	
	cartID := (interface createCartFor: clientID with: clientPassword) at: 2.
	cartItems := interface listCart: cartID.
	
	self assert: cartItems equals: (OrderedCollection with: 0).!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/26/2020 21:13:17'!
test02NewCartListsNoItems
	| interface clientID clientPassword cartID cartItems |
	
	clientID := 'client1'.
	clientPassword := 'password1'.
	interface := InnerInterface new.
	
	cartID := (interface createCartFor: clientID with: clientPassword) at: 2.
	
	interface addToCart: cartID .
	
	cartItems := interface listCart: cartID.
	
	self assert: cartItems equals: (OrderedCollection with: 0).! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/26/2020 21:15:40' prior: 50868417!
test02NewCartListsNoItems
	| interface clientID clientPassword cartID cartItems aQuantity anItem |
	
	clientID := 'client1'.
	clientPassword := 'password1'.
	interface := InnerInterface new.
	
	cartID := (interface createCartFor: clientID with: clientPassword) at: 2.
	
	interface add: aQuantity of: anItem toCart: cartID.
	
	cartItems := interface listCart: cartID.
	
	self assert: cartItems equals: (OrderedCollection with: 0).! !

----QUIT----(26 November 2020 21:29:20) CuisUniversity-4384.image priorSource: 17155564!

----STARTUP---- (28 November 2020 09:15:42) as /home/rodrigo/cuis-linux64-nueva/CuisUniversity-4384.image!


!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 11/28/2020 09:17:37'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 09:18:32' prior: 50868433!
test02NewCartListsNoItems
	| interface clientID clientPassword cartID cartItems anItem |
	
	clientID := 'client1'.
	clientPassword := 'password1'.
	interface := InnerInterface new.
	
	cartID := (interface createCartFor: clientID with: clientPassword) at: 2.
	
	interface add: 1 of: anItem toCart: cartID.
	
	cartItems := interface listCart: cartID.
	
	self assert: cartItems equals: (OrderedCollection with: 0).! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 09:27:37' prior: 50868460!
test02NewCartListsNoItems
	| interface clientID clientPassword cartID cartItems anItem |
	
	clientID := 'client1'.
	clientPassword := 'password1'.
	interface := InnerInterface new.
	
	cartID := (interface createCartFor: clientID with: clientPassword) at: 2.
	
	interface add: 1 of: anItem toCart: cartID.
	
	cartItems := interface listCart: cartID.
	
	self assert: cartItems equals: (OrderedCollection with: 0).! !

!classDefinition: #InnerInterfaceTest category: 'TusLibros' stamp: 'RL 11/28/2020 09:30:34'!
TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterfaceTest methodsFor: 'nil' stamp: 'RL 11/28/2020 09:30:32' overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 09:31:05' prior: 50868477!
test02NewCartListsNoItems
	| interface clientID clientPassword cartID cartItems |
	
	clientID := 'client1'.
	clientPassword := 'password1'.
	interface := InnerInterface new.
	
	cartID := (interface createCartFor: clientID with: clientPassword) at: 2.
	
	interface add: 1 of: testObjectsFactory  toCart: cartID.
	
	cartItems := interface listCart: cartID.
	
	self assert: cartItems equals: (OrderedCollection with: 0).! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 09:35:18' prior: 50868507!
test02NewCartListsNoItems
	| interface clientID clientPassword cartID cartItems anItem |
	
	clientID := 'client1'.
	clientPassword := 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog.
	anItem := testObjectsFactory itemSellByTheStore.
	
	cartID := (interface createCartFor: clientID with: clientPassword) at: 2.
	
	interface add: 1 of: anItem toCart: cartID.
	
	cartItems := interface listCart: cartID.
	
	self assert: cartItems equals: (OrderedCollection with: 0 with: anItem with: 1).! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 09:36:06' prior: 50868524!
test02NewCartListsNoItems
	| interface cartID cartItems anItem |
	
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog.
	anItem := testObjectsFactory itemSellByTheStore.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	interface add: 1 of: anItem toCart: cartID.
	
	cartItems := interface listCart: cartID.
	
	self assert: cartItems equals: (OrderedCollection with: 0 with: anItem with: 1).! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 09:36:45'!
test02OneItemCartListsTheItem
	| interface cartID cartItems anItem |
	
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog.
	anItem := testObjectsFactory itemSellByTheStore.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	interface add: 1 of: anItem toCart: cartID.
	
	cartItems := interface listCart: cartID.
	
	self assert: cartItems equals: (OrderedCollection with: 0 with: anItem with: 1).! !

!methodRemoval: InnerInterfaceTest #test02NewCartListsNoItems stamp: 'RL 11/28/2020 09:36:50'!
test02NewCartListsNoItems
	| interface cartID cartItems anItem |
	
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog.
	anItem := testObjectsFactory itemSellByTheStore.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	interface add: 1 of: anItem toCart: cartID.
	
	cartItems := interface listCart: cartID.
	
	self assert: cartItems equals: (OrderedCollection with: 0 with: anItem with: 1).!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 11/28/2020 09:36:55'!
ERROR!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 11/28/2020 09:36:55'!
ERROR!
!InnerInterface class methodsFor: 'nil' stamp: 'RL 11/28/2020 09:38:16'!
newWith: aCatalog
	^self new initializeWith: aCatalog ! !

!classDefinition: #InnerInterface category: 'TusLibros' stamp: 'RL 11/28/2020 09:38:49'!
Object subclass: #InnerInterface
	instanceVariableNames: 'catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'nil' stamp: 'RL 11/28/2020 09:38:48'!
initializeWith: aCatalog
	catalog := aCatalog ! !
!InnerInterface methodsFor: 'nil' stamp: 'RL 11/28/2020 09:41:18'!
add: aQuantity of: anItem toCart: aCartID! !

!classDefinition: #InnerInterface category: 'TusLibros' stamp: 'RL 11/28/2020 09:42:06'!
Object subclass: #InnerInterface
	instanceVariableNames: 'catalog carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 09:42:03' prior: 50868612!
initializeWith: aCatalog
	catalog := aCatalog.
	carts := Dictionary new.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 09:44:20' prior: 50868616!
add: aQuantity of: anItem toCart: aCartID
	! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 09:46:28' prior: 50868634!
add: aQuantity of: anItem toCart: aCartID
	(carts at: aCartID) add: aQuantity of: anItem ! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 09:47:27' prior: 50868381!
createCartFor: clientID with: clientPassword
	
	^OrderedCollection with: 0 with: 'cart1'.! !

----End fileIn of /home/rodrigo/cuis-linux64-nueva/Packages/TerseGuide.pck.st----!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 09:50:30' prior: 50868645!
createCartFor: clientID with: clientPassword
	carts add: 'cart1'->Cart
	^OrderedCollection with: 0 with: 'cart1'.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 09:51:22' prior: 50871587!
createCartFor: clientID with: clientPassword
	carts add: ('cart1'->Cart acceptingItemsOf: catalog).
	^OrderedCollection with: 0 with: 'cart1'.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 09:51:32' prior: 50871594!
createCartFor: clientID with: clientPassword
	carts add: 'cart1'->(Cart acceptingItemsOf: catalog).
	^OrderedCollection with: 0 with: 'cart1'.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 09:52:25' prior: 50868371!
listCart: cartID
	^carts at: cartID.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 09:53:22' prior: 50871610!
listCart: cartID
	^(carts at: cartID) listItems.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 09:59:13' prior: 50871615!
listCart: cartID
	| itemsInCart output |
	itemsInCart := (carts at: cartID) listItems.
	output := OrderedCollection with: 0.
	itemsInCart do: [ :item | 
			output addLast: item.
			output.
		 ]! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:01:21' prior: 50871620!
listCart: cartID
	| itemsInCart output cart |
	cart := carts at: cartID.
	itemsInCart := cart listItems.
	output := OrderedCollection with: 0.
	itemsInCart do: [ :item | 
			output addLast: item.
			output addLast: (cart occurrencesOf: item).
		 ].
	^output.! !
!Cart methodsFor: 'nil' stamp: 'RL 11/28/2020 10:01:37'!
listItems
	^items! !

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 11/28/2020 10:02:13'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:10:03'!
test03CreatingCartForInvalidClientReturnsErrorMessage
	| interface output |
	
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog.
	
	output := interface createCartFor: 'client1' with: 'password1'.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Not registered client.').! !

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 11/28/2020 10:10:21'!
FAILURE!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 11/28/2020 10:10:21'!
FAILURE!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:11:06' prior: 50871647!
test03CreatingCartForInvalidClientReturnsErrorMessage
	| interface output |
	
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog.
	
	output := interface createCartFor: 'notRegisteredClient' with: 'password1'.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Not registered client.').! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:13:12' prior: 50871668!
test03CreatingCartForInvalidClientReturnsErrorMessage
	| interface output clients |
	
	clients := Dictionary new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog with: clients.
	
	output := interface createCartFor: 'notRegisteredClient' with: 'password1'.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Not registered client.').! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:13:32' prior: 50871682!
test03CreatingCartForInvalidClientReturnsErrorMessage
	| interface output clients |
	
	clients := Dictionary new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	output := interface createCartFor: 'notRegisteredClient' with: 'password1'.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Not registered client.').! !
!InnerInterface class methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:14:02'!
newWith: aCatalog for: clients
	^self new initializeWith: aCatalog for: clients! !

!classDefinition: #InnerInterface category: 'TusLibros' stamp: 'RL 11/28/2020 10:15:35'!
Object subclass: #InnerInterface
	instanceVariableNames: 'catalog carts registeredClients'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:15:32'!
initializeWith: aCatalog for: clients
	catalog := aCatalog.
	carts := Dictionary new.
	registeredClients := clients.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:17:58' prior: 50871602!
createCartFor: clientID with: clientPassword
	(registeredClients includesKey: clientID) ifTrue: [OrderedCollection with: 1 with: 'cart1'].
	carts add: 'cart1'->(Cart acceptingItemsOf: catalog).
	^OrderedCollection with: 0 with: 'cart1'.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:18:36' prior: 50871733!
createCartFor: clientID with: clientPassword
	(registeredClients includesKey: clientID) ifTrue: [^OrderedCollection with: 1 with: 'Not registered client.'].
	carts add: 'cart1'->(Cart acceptingItemsOf: catalog).
	^OrderedCollection with: 0 with: 'cart1'.! !

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 11/28/2020 10:18:42'!
FAILURE!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 11/28/2020 10:18:42'!
FAILURE!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:19:55' prior: 50871744!
createCartFor: clientID with: clientPassword
	(registeredClients includesKey: clientID) ifFalse: [^OrderedCollection with: 1 with: 'Not registered client.'].
	carts add: 'cart1'->(Cart acceptingItemsOf: catalog).
	^OrderedCollection with: 0 with: 'cart1'.! !

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 11/28/2020 10:20:06'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:21:10'!
test04CreatingCartWithInvalidPasswordReturnsErrorMessage
	| interface output clients |
	
	clients := Dictionary new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	output := interface createCartFor: 'notRegisteredClient' with: 'password1'.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Not registered client.').! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 11/28/2020 10:21:19'!
ERROR!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 11/28/2020 10:21:19'!
ERROR!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 11/28/2020 10:21:19'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 11/28/2020 10:21:19'!
PASSED!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 11/28/2020 10:21:32'!
ERROR!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 11/28/2020 10:21:32'!
ERROR!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:22:18' prior: 50868390!
test01NewCartListsNoItems
	| interface cartID cartItems |
	
	interface := InnerInterface new.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	cartItems := interface listCart: cartID.
	
	self assert: cartItems equals: (OrderedCollection with: 0).! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:22:44' prior: 50871815!
test01NewCartListsNoItems
	| interface cartID cartItems clients |
	
	clients := Dictionary new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	cartItems := interface listCart: cartID.
	
	self assert: cartItems equals: (OrderedCollection with: 0).! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 11/28/2020 10:23:00'!
ERROR!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 11/28/2020 10:23:00'!
ERROR!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:23:47' prior: 50871827!
test01NewCartListsNoItems
	| interface cartID cartItems clients |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	cartItems := interface listCart: cartID.
	
	self assert: cartItems equals: (OrderedCollection with: 0).! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 11/28/2020 10:24:07'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 11/28/2020 10:24:20'!
ERROR!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 11/28/2020 10:24:20'!
ERROR!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:24:37' prior: 50868561!
test02OneItemCartListsTheItem
	| interface cartID cartItems anItem clients |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	anItem := testObjectsFactory itemSellByTheStore.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	interface add: 1 of: anItem toCart: cartID.
	
	cartItems := interface listCart: cartID.
	
	self assert: cartItems equals: (OrderedCollection with: 0 with: anItem with: 1).! !

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 11/28/2020 10:24:53'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 11/28/2020 10:24:58'!
PASSED!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 11/28/2020 10:24:58'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 11/28/2020 10:24:58'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 11/28/2020 10:24:58'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 11/28/2020 10:24:58'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:26:06' prior: 50871779!
test04CreatingCartWithInvalidPasswordReturnsErrorMessage
	| interface output clients |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	output := interface createCartFor: 'client1' with: 'password2'.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Wrong password.').! !

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 11/28/2020 10:26:10'!
FAILURE!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 11/28/2020 10:26:10'!
FAILURE!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:27:50' prior: 50871764!
createCartFor: clientID with: clientPassword
	(registeredClients includesKey: clientID) ifFalse: [^OrderedCollection with: 1 with: 'Not registered client.'].
	(registeredClients at: clientID = clientPassword) ifFalse: [^OrderedCollection with: 1 with: 'Wrong password.'].
	carts add: 'cart1'->(Cart acceptingItemsOf: catalog).
	^OrderedCollection with: 0 with: 'cart1'.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:28:14' prior: 50871939!
createCartFor: clientID with: clientPassword
	(registeredClients includesKey: clientID) ifFalse: [^OrderedCollection with: 1 with: 'Not registered client.'].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^OrderedCollection with: 1 with: 'Wrong password.'].
	carts add: 'cart1'->(Cart acceptingItemsOf: catalog).
	^OrderedCollection with: 0 with: 'cart1'.! !

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 11/28/2020 10:28:23'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 11/28/2020 10:28:25'!
PASSED!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 11/28/2020 10:28:25'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 11/28/2020 10:28:25'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 11/28/2020 10:28:25'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 11/28/2020 10:28:25'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:29:30' prior: 50871915!
test04CreatingCartWithInvalidPasswordReturnsErrorMessage
	| interface output clients |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clients add: 'client2'-> 'password2'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	output := interface createCartFor: 'client1' with: 'password2'.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Wrong password.').! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:30:17' prior: 50871992!
test04CreatingCartWithInvalidPasswordReturnsErrorMessage
	| interface output clients |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clients add: 'client2'-> 'password2'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	interface createCartFor: 'client1' with: 'password1'.
	interface createCartFor: 'client2' with: 'password2'.
	
	
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Wrong password.').! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:32:47'!
test05
	| interface output clients |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clients add: 'client2'-> 'password2'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	interface createCartFor: 'client1' with: 'password1'.
	interface createCartFor: 'client2' with: 'password2'.
	
	
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Wrong password.').! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:26:06' prior: 50872009!
test04CreatingCartWithInvalidPasswordReturnsErrorMessage
	| interface output clients |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	output := interface createCartFor: 'client1' with: 'password2'.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Wrong password.').! !

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 11/28/2020 10:33:32'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 11/28/2020 10:33:36'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:37:56'!
test05TwoCartInterfaceListsCartItemsCorrectly
	| interface output clients |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clients add: 'client2'-> 'password2'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	interface createCartFor: 'client1' with: 'password1'.
	
	
	interface createCartFor: 'client2' with: 'password2'.
		
	self assert: output equals: (OrderedCollection with: 1 with: 'Wrong password.').! !

!methodRemoval: InnerInterfaceTest #test05 stamp: 'RL 11/28/2020 10:38:02'!
test05
	| interface output clients |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clients add: 'client2'-> 'password2'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	interface createCartFor: 'client1' with: 'password1'.
	interface createCartFor: 'client2' with: 'password2'.
	
	
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Wrong password.').!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:38:43' prior: 50872068!
test05TwoCartInterfaceListsCartItemsCorrectly
	| interface output clients |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clients add: 'client2'-> 'password2'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	interface createCartFor: 'client1' with: 'password1'.
	interface add: 1 of: '' toCart: ''.
	
	interface createCartFor: 'client2' with: 'password2'.
		
	self assert: output equals: (OrderedCollection with: 1 with: 'Wrong password.').! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:40:08' prior: 50872102!
test05TwoCartInterfaceListsCartItemsCorrectly
	| interface output clients cart1ID |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clients add: 'client2'-> 'password2'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cart1ID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	interface add: 1 of: testObjectsFactory toCart: cart1ID.
	
	interface createCartFor: 'client2' with: 'password2'.
		
	self assert: output equals: (OrderedCollection with: 1 with: 'Wrong password.').! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:42:17' prior: 50872122!
test05TwoCartInterfaceListsCartItemsCorrectly
	| interface clients cart1ID |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clients add: 'client2'-> 'password2'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cart1ID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cart1ID.
	
	interface createCartFor: 'client2' with: 'password2'.
		
	self assert: (interface listCart: cart1ID) 
		equals: (OrderedCollection with: 0 with: testObjectsFactory itemSellByTheStore with: 1).! !

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 11/28/2020 10:42:31'!
FAILURE!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 11/28/2020 10:42:31'!
FAILURE!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:44:16' prior: 50871726!
initializeWith: aCatalog for: clients
	| nextCartID |
	catalog := aCatalog.
	carts := Dictionary new.
	registeredClients := clients.
	nextCartID := 1! !

!classDefinition: #InnerInterface category: 'TusLibros' stamp: 'RL 11/28/2020 10:44:53'!
Object subclass: #InnerInterface
	instanceVariableNames: 'catalog carts registeredClients nextCartsevID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:44:52' prior: 50872174!
initializeWith: aCatalog for: clients
	catalog := aCatalog.
	carts := Dictionary new.
	registeredClients := clients.
	nextCartsevID := 1! !

Object subclass: #InnerInterface
	instanceVariableNames: 'catalog carts registeredClients nextCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterface category: 'TusLibros' stamp: 'RL 11/28/2020 10:45:06'!
Object subclass: #InnerInterface
	instanceVariableNames: 'catalog carts registeredClients nextCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:45:28' prior: 50872191!
initializeWith: aCatalog for: clients
	catalog := aCatalog.
	carts := Dictionary new.
	registeredClients := clients.
	nextCartID := 1! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 10:46:51' prior: 50871954!
createCartFor: clientID with: clientPassword
	| newID |
	(registeredClients includesKey: clientID) ifFalse: [^OrderedCollection with: 1 with: 'Not registered client.'].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^OrderedCollection with: 1 with: 'Wrong password.'].
	newID := nextCartID.
	carts add: newID->(Cart acceptingItemsOf: catalog).
	nextCartID := nextCartID + 1.
	^OrderedCollection with: 0 with: newID.! !

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 11/28/2020 10:47:01'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 11/28/2020 10:47:03'!
PASSED!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 11/28/2020 10:47:03'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 11/28/2020 10:47:03'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 11/28/2020 10:47:03'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 11/28/2020 10:47:03'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 11/28/2020 10:47:03'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 11:01:30'!
test06AddingItemToInvalidCartReturnsErrorMessage
	| interface output clients |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	interface createCartFor: 'client1' with: 'password1'.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Wrong password.').! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 11:02:58' prior: 50872263!
test06AddingItemToInvalidCartReturnsErrorMessage
	| interface output clients |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	interface createCartFor: 'client1' with: 'password1'.
	
	output := interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: 'invalidCartID'.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Invalid Cart ID.').! !

!testRun: #InnerInterfaceTest #test06AddingItemToInvalidCartReturnsErrorMessage stamp: 'RL 11/28/2020 11:03:02'!
ERROR!

!testRun: #InnerInterfaceTest #test06AddingItemToInvalidCartReturnsErrorMessage stamp: 'RL 11/28/2020 11:03:02'!
ERROR!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 11:04:59' prior: 50868639!
add: aQuantity of: anItem toCart: aCartID
	| cart |
	cart := carts at: aCartID ifAbsent: [^OrderedCollection with: 1 with: 'Invalid Cart ID.'] .
	cart add: aQuantity of: anItem.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 11:05:20' prior: 50872305!
add: aQuantity of: anItem toCart: aCartID
	| cart |
	cart := carts at: aCartID ifAbsent: [^OrderedCollection with: 1 with: 'Invalid Cart ID.'].
	cart add: aQuantity of: anItem.! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 11/28/2020 11:05:24'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 11/28/2020 11:05:24'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 11/28/2020 11:05:24'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 11/28/2020 11:05:24'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 11/28/2020 11:05:24'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToInvalidCartReturnsErrorMessage stamp: 'RL 11/28/2020 11:05:24'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 11:10:42'!
test07AddingItemNotInCatalogReturnsErrorMessage
	| interface output clients cartID |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	output := interface add: 1 of: testObjectsFactory itemNotSellByTheStore toCart: cartID.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Invalid Cart ID.').! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 11:11:30' prior: 50872345!
test07AddingItemNotInCatalogReturnsErrorMessage
	| interface output clients cartID |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	output := interface add: 1 of: testObjectsFactory itemNotSellByTheStore toCart: cartID.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Item not present in catalog.').! !

!testRun: #InnerInterfaceTest #test07AddingItemNotInCatalogReturnsErrorMessage stamp: 'RL 11/28/2020 11:11:49'!
ERROR!

!testRun: #InnerInterfaceTest #test07AddingItemNotInCatalogReturnsErrorMessage stamp: 'RL 11/28/2020 11:11:49'!
ERROR!

!testRun: #InnerInterfaceTest #test07AddingItemNotInCatalogReturnsErrorMessage stamp: 'RL 11/28/2020 11:11:59'!
ERROR!

!testRun: #InnerInterfaceTest #test07AddingItemNotInCatalogReturnsErrorMessage stamp: 'RL 11/28/2020 11:11:59'!
ERROR!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 11:17:09' prior: 50872314!
add: aQuantity of: anItem toCart: aCartID
	| cart |
	cart := carts at: aCartID ifAbsent: [^OrderedCollection with: 1 with: 'Invalid Cart ID.'].
	[cart add: aQuantity of: anItem] on: Error do: [ :error | ^OrderedCollection with: 1 with: error messageText ].! !

!testRun: #InnerInterfaceTest #test07AddingItemNotInCatalogReturnsErrorMessage stamp: 'RL 11/28/2020 11:17:19'!
FAILURE!

!testRun: #InnerInterfaceTest #test07AddingItemNotInCatalogReturnsErrorMessage stamp: 'RL 11/28/2020 11:17:19'!
FAILURE!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 11:18:39' prior: 50872364!
test07AddingItemNotInCatalogReturnsErrorMessage
	| interface output clients cartID |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	output := interface add: 1 of: testObjectsFactory itemNotSellByTheStore toCart: cartID.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Item is not in catalog').! !

!testRun: #InnerInterfaceTest #test07AddingItemNotInCatalogReturnsErrorMessage stamp: 'RL 11/28/2020 11:18:44'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 11:20:49'!
test08ListingInvalidCartReturnsErrorMessage
	| interface output clients cartID |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	output := interface add: 1 of: testObjectsFactory itemNotSellByTheStore toCart: cartID.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Item is not in catalog').! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 11:21:01'!
test08ListingUnregisteredCartReturnsErrorMessage
	| interface output clients cartID |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	output := interface add: 1 of: testObjectsFactory itemNotSellByTheStore toCart: cartID.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Item is not in catalog').! !

!methodRemoval: InnerInterfaceTest #test08ListingInvalidCartReturnsErrorMessage stamp: 'RL 11/28/2020 11:21:01'!
test08ListingInvalidCartReturnsErrorMessage
	| interface output clients cartID |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	output := interface add: 1 of: testObjectsFactory itemNotSellByTheStore toCart: cartID.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Item is not in catalog').!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 11:21:23'!
test06AddingItemToUnregisteredCartReturnsErrorMessage
	| interface output clients |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	interface createCartFor: 'client1' with: 'password1'.
	
	output := interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: 'invalidCartID'.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Invalid Cart ID.').! !

!methodRemoval: InnerInterfaceTest #test06AddingItemToInvalidCartReturnsErrorMessage stamp: 'RL 11/28/2020 11:21:23'!
test06AddingItemToInvalidCartReturnsErrorMessage
	| interface output clients |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	interface createCartFor: 'client1' with: 'password1'.
	
	output := interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: 'invalidCartID'.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Invalid Cart ID.').!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 11:21:56' prior: 50872459!
test08ListingUnregisteredCartReturnsErrorMessage
	| interface output clients cartID |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	output := interface listCart: cartID.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Item is not in catalog').! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 11:22:09' prior: 50872534!
test08ListingUnregisteredCartReturnsErrorMessage
	| interface output clients cartID |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	output := interface listCart: cartID.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Invalid Cart ID.').! !

!testRun: #InnerInterfaceTest #test08ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 11/28/2020 11:22:12'!
FAILURE!

!testRun: #InnerInterfaceTest #test08ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 11/28/2020 11:22:12'!
FAILURE!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 11/28/2020 11:22:17'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 11/28/2020 11:22:17'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 11/28/2020 11:22:17'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 11/28/2020 11:22:17'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 11/28/2020 11:22:17'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 11/28/2020 11:22:17'!
PASSED!

!testRun: #InnerInterfaceTest #test07AddingItemNotInCatalogReturnsErrorMessage stamp: 'RL 11/28/2020 11:22:17'!
PASSED!

!testRun: #InnerInterfaceTest #test08ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 11/28/2020 11:22:17'!
FAILURE!

!testRun: #InnerInterfaceTest #test08ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 11/28/2020 11:22:17'!
FAILURE!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 11:23:10' prior: 50871630!
listCart: cartID
	| itemsInCart output cart |
	cart := carts at: cartID ifAbsent: [^OrderedCollection with: 1 with: 'Invalid Cart ID.'].
	itemsInCart := cart listItems.
	output := OrderedCollection with: 0.
	itemsInCart do: [ :item | 
			output addLast: item.
			output addLast: (cart occurrencesOf: item).
		 ].
	^output.! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 11/28/2020 11:23:18'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 11/28/2020 11:23:18'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 11/28/2020 11:23:18'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 11/28/2020 11:23:18'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 11/28/2020 11:23:18'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 11/28/2020 11:23:18'!
PASSED!

!testRun: #InnerInterfaceTest #test07AddingItemNotInCatalogReturnsErrorMessage stamp: 'RL 11/28/2020 11:23:18'!
PASSED!

!testRun: #InnerInterfaceTest #test08ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 11/28/2020 11:23:18'!
FAILURE!

!testRun: #InnerInterfaceTest #test08ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 11/28/2020 11:23:18'!
FAILURE!

carts!

cartID!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 11:27:24' prior: 50872552!
test08ListingUnregisteredCartReturnsErrorMessage
	| interface output clients |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	interface createCartFor: 'client1' with: 'password1'.
	
	output := interface listCart: 'invalidCartID'.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Invalid Cart ID.').! !

!testRun: #InnerInterfaceTest #test08ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 11/28/2020 11:27:30'!
PASSED!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 11/28/2020 11:27:35'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 11/28/2020 11:27:35'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 11/28/2020 11:27:35'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 11/28/2020 11:27:35'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 11/28/2020 11:27:35'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 11/28/2020 11:27:35'!
PASSED!

!testRun: #InnerInterfaceTest #test07AddingItemNotInCatalogReturnsErrorMessage stamp: 'RL 11/28/2020 11:27:35'!
PASSED!

!testRun: #InnerInterfaceTest #test08ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 11/28/2020 11:27:35'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 11:30:38'!
test07AddingInvalidQuantityOfItemReturnsErrorMessage
	| interface output clients cartID |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	output := interface add: -1 of: testObjectsFactory itemNotSellByTheStore toCart: cartID.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Item is not in catalog').! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 11:32:22'!
test08AddingInvalidQuantityOfItemReturnsErrorMessage
	| interface output clients cartID |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	output := interface add: -1 of: testObjectsFactory itemNotSellByTheStore toCart: cartID.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Item is not in catalog').! !

!methodRemoval: InnerInterfaceTest #test07AddingInvalidQuantityOfItemReturnsErrorMessage stamp: 'RL 11/28/2020 11:32:22'!
test07AddingInvalidQuantityOfItemReturnsErrorMessage
	| interface output clients cartID |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	output := interface add: -1 of: testObjectsFactory itemNotSellByTheStore toCart: cartID.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Item is not in catalog').!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 11:32:30'!
test09AddingInvalidQuantityOfItemReturnsErrorMessage
	| interface output clients cartID |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	output := interface add: -1 of: testObjectsFactory itemNotSellByTheStore toCart: cartID.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Item is not in catalog').! !

!methodRemoval: InnerInterfaceTest #test08AddingInvalidQuantityOfItemReturnsErrorMessage stamp: 'RL 11/28/2020 11:32:30'!
test08AddingInvalidQuantityOfItemReturnsErrorMessage
	| interface output clients cartID |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	output := interface add: -1 of: testObjectsFactory itemNotSellByTheStore toCart: cartID.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Item is not in catalog').!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 11:32:50' prior: 50872767!
test09AddingInvalidQuantityOfItemReturnsErrorMessage
	| interface output clients cartID |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	output := interface add: -1 of: testObjectsFactory itemNotSellByTheStore toCart: cartID.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Invalid number of items').! !

!testRun: #InnerInterfaceTest #test09AddingInvalidQuantityOfItemReturnsErrorMessage stamp: 'RL 11/28/2020 11:33:11'!
PASSED!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 11/28/2020 11:34:22'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 11/28/2020 11:34:22'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 11/28/2020 11:34:22'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 11/28/2020 11:34:22'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 11/28/2020 11:34:22'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 11/28/2020 11:34:22'!
PASSED!

!testRun: #InnerInterfaceTest #test07AddingItemNotInCatalogReturnsErrorMessage stamp: 'RL 11/28/2020 11:34:22'!
PASSED!

!testRun: #InnerInterfaceTest #test08ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 11/28/2020 11:34:22'!
PASSED!

!testRun: #InnerInterfaceTest #test09AddingInvalidQuantityOfItemReturnsErrorMessage stamp: 'RL 11/28/2020 11:34:22'!
PASSED!

!testRun: #InnerInterfaceTest #test09AddingInvalidQuantityOfItemReturnsErrorMessage stamp: 'RL 11/28/2020 11:34:29'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'RL 11/28/2020 11:34:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'RL 11/28/2020 11:34:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'RL 11/28/2020 11:34:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'RL 11/28/2020 11:34:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'RL 11/28/2020 11:34:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'RL 11/28/2020 11:34:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'RL 11/28/2020 11:34:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'RL 11/28/2020 11:34:29'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'RL 11/28/2020 11:34:29'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'RL 11/28/2020 11:34:29'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'RL 11/28/2020 11:34:29'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'RL 11/28/2020 11:34:29'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'RL 11/28/2020 11:34:29'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'RL 11/28/2020 11:34:29'!
PASSED!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 11/28/2020 11:34:29'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 11/28/2020 11:34:29'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 11/28/2020 11:34:29'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 11/28/2020 11:34:29'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 11/28/2020 11:34:29'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 11/28/2020 11:34:29'!
PASSED!

!testRun: #InnerInterfaceTest #test07AddingItemNotInCatalogReturnsErrorMessage stamp: 'RL 11/28/2020 11:34:29'!
PASSED!

!testRun: #InnerInterfaceTest #test08ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 11/28/2020 11:34:29'!
PASSED!

!testRun: #InnerInterfaceTest #test09AddingInvalidQuantityOfItemReturnsErrorMessage stamp: 'RL 11/28/2020 11:34:29'!
PASSED!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 11:39:00' prior: 50872221!
createCartFor: clientID with: clientPassword
	| newID |
	(registeredClients includesKey: clientID) ifFalse: [^OrderedCollection with: 1 with: 'Not registered client.'].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^OrderedCollection with: 1 with: 'Wrong password.'].
	newID := nextCartID.
	carts add: newID->(Cart acceptingItemsOf: catalog).
	nextCartID := nextCartID + 1.
	^OrderedCollection with: 0 with: newID.
	
	"�habria q chequear que el cliente ya no tenga un carrito?"! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 11:46:29'!
test10InvalidCashierCheckoutReturnsErrorMessage
	| interface output clients cartID |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	output := interface add: 1 of: testObjectsFactory itemNotSellByTheStore toCart: cartID.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Invalid number of items').! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 11:46:36' prior: 50872806!
test09AddingInvalidQuantityOfItemReturnsErrorMessage
	| interface output clients cartID |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	output := interface add: -1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Invalid number of items').! !

!testRun: #InnerInterfaceTest #test09AddingInvalidQuantityOfItemReturnsErrorMessage stamp: 'RL 11/28/2020 11:46:39'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 11:47:53' prior: 50872965!
test10InvalidCashierCheckoutReturnsErrorMessage
	| interface output clients cartID |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	output := interface checkoutCart: cartID.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Invalid number of items').! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 11:53:14' prior: 50873007!
test10InvalidCashierCheckoutReturnsErrorMessage
	| interface output clients cartID |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	output := interface checkoutCart: cartID 
		ccn: ''
		cced: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
		cco: 'client1'.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Invalid number of items').! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 11:55:56' prior: 50873025!
test10InvalidCashierCheckoutReturnsErrorMessage
	| interface output clients cartID |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	output := interface checkoutCart: cartID 
		withCCNumber: '1111111111111111'
		expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
		ownedBy: 'client1'.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Invalid number of items').! !
!InnerInterface methodsFor: 'nil' stamp: 'RL 11/28/2020 11:57:16'!
checkoutCart: cartID withCCNumber: aCCNumber expiring: anExpiringDate ownedBy: clientName! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 11:58:38' prior: 50873047!
test10InvalidCashierCheckoutReturnsErrorMessage
	| interface output clients cartID |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	output := interface checkoutCart: cartID 
		withCCNumber: '1111111111111111'
		expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
		ownedBy: 'client1'.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Can not check out an empty cart').! !

!testRun: #InnerInterfaceTest #test10InvalidCashierCheckoutReturnsErrorMessage stamp: 'RL 11/28/2020 11:58:41'!
FAILURE!

!testRun: #InnerInterfaceTest #test10InvalidCashierCheckoutReturnsErrorMessage stamp: 'RL 11/28/2020 11:58:41'!
FAILURE!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 11:59:04' prior: 50873069!
checkoutCart: cartID withCCNumber: aCCNumber expiring: anExpiringDate ownedBy: clientName
	Cashier ! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 12:00:06' prior: 50873107!
checkoutCart: cartID withCCNumber: aCCNumber expiring: anExpiringDate ownedBy: clientName
	| testObjectsFactory |
	Cashier
		toCheckout: (carts at: cartID) 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 12:01:44' prior: 50873114!
checkoutCart: cartID withCCNumber: aCCNumber expiring: anExpiringDate ownedBy: clientName
	| testObjectsFactory |
	Cashier
		toCheckout: (carts at: cartID) 
		charging: (CreditCard expiringOn: anExpiringDate)
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 12:04:56' prior: 50873127!
checkoutCart: cartID withCCNumber: aCCNumber expiring: anExpiringDate ownedBy: clientName
	
	Cashier
		toCheckout: (carts at: cartID) 
		charging: (CreditCard expiringOn: anExpiringDate)
		throught: self
		on: DateAndTime now 
		registeringOn: OrderedCollection new.! !

TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehaviour'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterfaceTest category: 'TusLibros' stamp: 'RL 11/28/2020 12:07:58'!
TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehaviour'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterfaceTest category: 'TusLibros' stamp: 'RL 11/28/2020 12:08:06'!
TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 12:21:14'!
testsCheckout
	"
	1. catchear las excepciones
	2. 
	"! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 12:21:57' prior: 50873179!
testsCheckout
	"
	1. catchear las excepciones
	2. validar cartID
	3. validar respuesta caso exitoso
	4. 
	"! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 12:22:52' prior: 50873184!
testsCheckout
	"
	1. catchear las excepciones
	2. validar cartID
	3. validar respuesta caso exitoso
	4. �MP?
	5. 
	"! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/28/2020 12:24:19' prior: 50873191!
testsCheckout
	"
	1. catchear las excepciones
	2. validar cartID
	3. validar respuesta caso exitoso
	4. �MP?
	5. credit card number??
	"! !

----QUIT----(28 November 2020 12:24:50) CuisUniversity-4384.image priorSource: 17177552!

----STARTUP---- (30 November 2020 18:21:25) as /home/rodrigo/cuis-linux64-nueva/CuisUniversity-4384.image!

!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 18:35:07'!
testTimeout
	self ! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 18:49:37'!
test100CannotAddItemToCartIfItHasBeenInactiveFor30Minutes
	! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 18:49:56'!
test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes
	! !

!methodRemoval: InnerInterfaceTest #test100CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 18:50:01'!
test100CannotAddItemToCartIfItHasBeenInactiveFor30Minutes
	!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 18:51:09' prior: 50873221!
test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes
	| interface output clients |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	interface createCartFor: 'client1' with: 'password1'.
	
	output := interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: 'invalidCartID'.! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 18:53:19' prior: 50873233!
test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes
	| interface output clients |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	interface createCartFor: 'client1' with: 'password1'.
	
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: 'invalidCartID' ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface .]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 18:56:24' prior: 50873249!
test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes
	| interface clients |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	interface createCartFor: 'client1' with: 'password1'.
	
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: 'invalidCartID' ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 19:00:30' prior: 50873269!
test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes
	| interface clients clock |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock.
	
	interface createCartFor: 'client1' with: 'password1'.
	
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: 'invalidCartID' ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !

Object subclass: #Clock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Clock category: 'TusLibros' stamp: 'RL 11/30/2020 19:00:57'!
Object subclass: #Clock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 19:04:58' prior: 50873290!
test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock.
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 19:14:05' prior: 50873321!
test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock. 
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 19:16:37' prior: 50873343!
test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock. 
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !
!InnerInterface class methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 19:17:53'!
newWith: aCatalog for: clients at: aClock
	^self new initializeWith:  aCatalog for: clients at: aClock! !

!classDefinition: #InnerInterface category: 'TusLibros' stamp: 'RL 11/30/2020 19:18:25'!
Object subclass: #InnerInterface
	instanceVariableNames: 'catalog carts registeredClients nextCartID clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 19:18:23'!
initializeWith: aCatalog for: clients at: aClock
	catalog := aCatalog.
	carts := Dictionary new.
	registeredClients := clients.
	nextCartID := 1.
	clock := aClock ! !

!methodRemoval: InnerInterface #initializeWith: stamp: 'RL 11/30/2020 19:18:36'!
initializeWith: aCatalog
	catalog := aCatalog.
	carts := Dictionary new.!

!methodRemoval: InnerInterface #initializeWith:for: stamp: 'RL 11/30/2020 19:18:41'!
initializeWith: aCatalog for: clients
	catalog := aCatalog.
	carts := Dictionary new.
	registeredClients := clients.
	nextCartID := 1!

!methodRemoval: InnerInterface class #newWith: stamp: 'RL 11/30/2020 19:18:49'!
newWith: aCatalog
	^self new initializeWith: aCatalog !

!methodRemoval: InnerInterface class #newWith:for: stamp: 'RL 11/30/2020 19:18:55'!
newWith: aCatalog for: clients
	^self new initializeWith: aCatalog for: clients!
!Clock methodsFor: 'no messages' stamp: 'RL 11/30/2020 19:19:40'!
moveForwardMinutes: numberOfMinutes
! !
!Clock methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 19:19:46' prior: 50873432!
moveForwardMinutes: aNumberOfMinutes
! !

Object subclass: #Clock
	instanceVariableNames: 'initializationTime currentTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Clock category: 'TusLibros' stamp: 'RL 11/30/2020 19:27:31'!
Object subclass: #Clock
	instanceVariableNames: 'initializationTime currentTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 19:32:12' prior: 50872398!
add: aQuantity of: anItem toCart: aCartID
	| cart |
	cart := carts at: aCartID ifAbsent: [^OrderedCollection with: 1 with: 'Invalid Cart ID.'].
	self validateCartExpiracy: aCartID.
	[cart add: aQuantity of: anItem] on: Error do: [ :error | ^OrderedCollection with: 1 with: error messageText ].! !

!classDefinition: #InnerInterface category: 'TusLibros' stamp: 'RL 11/30/2020 19:36:25'!
Object subclass: #InnerInterface
	instanceVariableNames: 'catalog carts registeredClients nextCartID clock cartsLastActivityTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 19:36:21'!
validateCartExpiracy: aCartID
	| lastTimeUsed |
	lastTimeUsed := cartsLastActivityTime at: aCartID! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 19:36:54' prior: 50873475!
validateCartExpiracy: aCartID
	| cartLastActiviyTime |
	cartLastActiviyTime := cartsLastActivityTime at: aCartID! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 19:38:32' prior: 50873482!
validateCartExpiracy: aCartID
	| cartLastActiviyTime |
	cartLastActiviyTime := cartsLastActivityTime at: aCartID.
	clock currentTime + 30 < cartLastActiviyTime ifTrue: [ Error signal: self class  ]! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 19:39:38' prior: 50873489!
validateCartExpiracy: aCartID
	| cartLastActiviyTime |
	cartLastActiviyTime := cartsLastActivityTime at: aCartID.
	clock currentTime + 30 < cartLastActiviyTime ifTrue: [ Error signal: self class expiredCartErrorMessage ]! !
!InnerInterface class methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 19:40:30'!
expiredCartErrorMessage
	^'Cart has expired.'! !
!Clock methodsFor: 'nil' stamp: 'RL 11/30/2020 20:18:30'!
currentTime
	currentTime := currentTime 
	"^currentTime"! !

!classDefinition: #Clock category: 'TusLibros' stamp: 'RL 11/30/2020 20:27:27'!
Object subclass: #Clock
	instanceVariableNames: 'initializationTime currentTime shift'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Clock methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 20:27:26' prior: 50873513!
currentTime
	^DateAndTime now + shift.! !

Object subclass: #Clock
	instanceVariableNames: 'timeShift'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Clock category: 'TusLibros' stamp: 'RL 11/30/2020 20:29:51'!
Object subclass: #Clock
	instanceVariableNames: 'timeShift'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Clock methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 20:29:58' prior: 50873526!
currentTime
	^DateAndTime now + timeShift.! !
!Clock methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 20:30:24' prior: 50873541!
currentTime
	^DateAndTime now + timeShift * minute.! !
!Clock methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 20:31:02' prior: 50873437!
moveForwardMinutes: aNumberOfMinutes
	timeShift := timeShift + aNumberOfMinutes * minute! !
!Clock methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 20:31:32' overrides: 16896425!
initialize
	timeShift := 0! !

!classDefinition: #Clock category: 'TusLibros' stamp: 'RL 11/30/2020 20:31:54'!
Object subclass: #Clock
	instanceVariableNames: 'minuteShift'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Clock methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 20:31:54' prior: 50873551!
moveForwardMinutes: aNumberOfMinutes
	minuteShift := minuteShift + aNumberOfMinutes * minute! !
!Clock methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 20:31:54' prior: 50873557 overrides: 16896425!
initialize
	minuteShift := 0! !
!Clock methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 20:31:54' prior: 50873546!
currentTime
	^DateAndTime now + minuteShift * minute.! !

Object subclass: #Clock
	instanceVariableNames: 'minuteShift'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Clock category: 'TusLibros' stamp: 'RL 11/30/2020 20:32:04'!
Object subclass: #Clock
	instanceVariableNames: 'minuteShift'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 20:33:44' prior: 50872946!
createCartFor: clientID with: clientPassword
	| newID |
	(registeredClients includesKey: clientID) ifFalse: [^OrderedCollection with: 1 with: 'Not registered client.'].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^OrderedCollection with: 1 with: 'Wrong password.'].
	newID := nextCartID.
	carts add: newID->(Cart acceptingItemsOf: catalog).
	carts add: newID->(Cart acceptingItemsOf: catalog).
	nextCartID := nextCartID + 1.	
	^OrderedCollection with: 0 with: newID.
	
	"�habria q chequear que el cliente ya no tenga un carrito?"! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 20:34:48' prior: 50873595!
createCartFor: clientID with: clientPassword
	| newID |
	(registeredClients includesKey: clientID) ifFalse: [^OrderedCollection with: 1 with: 'Not registered client.'].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^OrderedCollection with: 1 with: 'Wrong password.'].
	newID := nextCartID.
	carts add: newID->(Cart acceptingItemsOf: catalog).
	cartsLastActivityTime add: newID->clock currentTime.
	nextCartID := nextCartID + 1.	
	^OrderedCollection with: 0 with: newID.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 20:38:29' prior: 50873499!
validateCartExpiracy: aCartID
	| cartLastActivityTime |
	cartLastActivityTime := cartsLastActivityTime at: aCartID.
	(clock currentTime - (30 * minute) > cartLastActivityTime) ifTrue: [ Error signal: self class expiredCartErrorMessage ]! !
!Clock methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 20:39:15' prior: 50873579!
currentTime
	^DateAndTime now + (minuteShift * minute).! !

minuteShift * minute!

minuteShift * minute!

self class!
!Clock methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 20:45:02' prior: 50873646!
currentTime
	"^DateAndTime now + (minuteShift * minute)."
	^DateAndTime now + Duration minutes: minuteShift.! !
!Clock methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 20:45:31' prior: 50873653!
currentTime
	"^DateAndTime now + (minuteShift * minute)."
	^DateAndTime now + (Duration minutes: minuteShift).! !

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 20:45:35'!
ERROR!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 20:45:35'!
ERROR!

clock currentTime!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 20:46:26' prior: 50873403!
initializeWith: aCatalog for: clients at: aClock
	catalog := aCatalog.
	carts := Dictionary new.
	carts := Dictionary new.
	registeredClients := clients.
	nextCartID := 1.
	clock := aClock ! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 20:46:34' prior: 50873676!
initializeWith: aCatalog for: clients at: aClock
	catalog := aCatalog.
	carts := Dictionary new.
	cartsLastActivityTime := Dictionary new.
	registeredClients := clients.
	nextCartID := 1.
	clock := aClock ! !

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 20:46:40'!
FAILURE!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 20:46:40'!
FAILURE!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 20:47:11'!
FAILURE!

DateAndTime now!

DateAndTime now!

DateAndTime now + (Duration minutes: minuteShift)!

Duration minutes: minuteShift!
!Clock methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 20:49:08' prior: 50873568!
moveForwardMinutes: aNumberOfMinutes
	minuteShift := minuteShift + aNumberOfMinutes! !

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 20:49:14'!
FAILURE!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 20:49:14'!
FAILURE!

aNumberOfMinutes!

minuteShift!

interface!

interface!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 20:50:50'!
FAILURE!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 20:50:50'!
FAILURE!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 20:51:43'!
FAILURE!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 20:52:18' prior: 50873365!
test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock. 
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 20:52:23'!
FAILURE!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 20:52:23'!
FAILURE!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 20:54:58' prior: 50873741!
test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock. 
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 20:55:00'!
FAILURE!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 20:55:00'!
FAILURE!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 20:55:09'!
FAILURE!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 20:55:09'!
FAILURE!

cartID!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 20:56:20'!
FAILURE!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 20:57:45' prior: 50873635!
validateCartExpiracy: aCartID
	| cartLastActivityTime |
	cartLastActivityTime := cartsLastActivityTime at: aCartID.
	^clock currentTime - (30 * minute) > cartLastActivityTime! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 20:58:02' prior: 50873454!
add: aQuantity of: anItem toCart: aCartID
	| cart |
	cart := carts at: aCartID ifAbsent: [^OrderedCollection with: 1 with: 'Invalid Cart ID.'].
	(self validateCartExpiracy: aCartID) ifTrue: [ ^Error signal: self class expiredCartErrorMessage ].
	[cart add: aQuantity of: anItem] on: Error do: [ :error | ^OrderedCollection with: 1 with: error messageText ].! !

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 20:58:07'!
FAILURE!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 20:58:07'!
FAILURE!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 20:59:30'!
FAILURE!

cartsLastActivityTime!

clock currentTime - (30 * minute)!

clock currentTime!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 21:01:25' prior: 50873815!
validateCartExpiracy: aCartID
	| cartLastActivityTime |
	cartLastActivityTime := cartsLastActivityTime at: aCartID.
	^clock currentTime - (Duration minutes: 30) > cartLastActivityTime! !

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 21:01:29'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 21:02:37'!
test20CannotListCartIfItHasBeenInactiveFor30Minutes
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock. 
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface listCart: cartID ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 21:04:38' prior: 50873867!
test20CannotListCartIfItHasBeenInactiveFor30Minutes
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock. 
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface listCart: cartID ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 21:04:52'!
test21CannotListCartIfItHasBeenInactiveFor30Minutes
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock. 
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface listCart: cartID ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !

!methodRemoval: InnerInterfaceTest #test20CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 21:04:52'!
test20CannotListCartIfItHasBeenInactiveFor30Minutes
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock. 
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface listCart: cartID ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 21:05:04'!
FAILURE!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 21:05:04'!
FAILURE!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 21:05:46' prior: 50872611!
listCart: cartID
	| itemsInCart output cart |
	cart := carts at: cartID ifAbsent: [^OrderedCollection with: 1 with: 'Invalid Cart ID.'].
	(self validateCartExpiracy: cartID) ifTrue: [ ^Error signal: self class expiredCartErrorMessage ].
	itemsInCart := cart listItems.
	output := OrderedCollection with: 0.
	itemsInCart do: [ :item | 
			output addLast: item.
			output addLast: (cart occurrencesOf: item).
		 ].
	^output.! !

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 21:05:52'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 21:08:42' prior: 50873911!
test21CannotListCartIfItHasBeenInactiveFor30Minutes
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock. 
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	clock moveForwardMinutes: 10.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	
	clock moveForwardMinutes: 21.
	
	self assert: (interface listCart: cartID) equals: ''! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 21:09:51' prior: 50873987!
test21CannotListCartIfItHasBeenInactiveFor30Minutes
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock. 
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	clock moveForwardMinutes: 10.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	
	clock moveForwardMinutes: 21.
	
	self 
		assert: (interface listCart: cartID) 
		equals: (OrderedCollection with: 0 with: testObjectsFactory itemSellByTheStore with: 1)! !

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 21:09:55'!
ERROR!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 21:09:55'!
ERROR!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 21:11:31' prior: 50873824!
add: aQuantity of: anItem toCart: aCartID
	| cart |
	cart := carts at: aCartID ifAbsent: [^OrderedCollection with: 1 with: 'Invalid Cart ID.'].
	(self validateCartExpiracy: aCartID) ifTrue: [ ^Error signal: self class expiredCartErrorMessage ].
	cartsLastActivityTime at: aCartID put: clock currentTime.
	[cart add: aQuantity of: anItem] on: Error do: [ :error | ^OrderedCollection with: 1 with: error messageText ].! !

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 21:11:35'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 21:13:08' prior: 50874008!
test21CannotListCartIfItHasBeenInactiveFor30Minutes
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock. 
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 10.
	interface listCart: cartID.
	clock moveForwardMinutes: 21.
	
	self 
		assert: (interface listCart: cartID) 
		equals: (OrderedCollection with: 0 with: testObjectsFactory itemSellByTheStore with: 1)! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 21:13:29'!
test22
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock. 
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 10.
	interface listCart: cartID.
	clock moveForwardMinutes: 21.
	
	self 
		assert: (interface listCart: cartID) 
		equals: (OrderedCollection with: 0 with: testObjectsFactory itemSellByTheStore with: 1)! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 21:09:51' prior: 50874060!
test21CannotListCartIfItHasBeenInactiveFor30Minutes
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock. 
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	clock moveForwardMinutes: 10.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	
	clock moveForwardMinutes: 21.
	
	self 
		assert: (interface listCart: cartID) 
		equals: (OrderedCollection with: 0 with: testObjectsFactory itemSellByTheStore with: 1)! !

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 21:14:03'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 21:15:05'!
test23
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock. 
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 10.
	interface listCart: cartID.
	clock moveForwardMinutes: 21.
	
	self 
		assert: (interface listCart: cartID) 
		equals: (OrderedCollection with: 0 with: testObjectsFactory itemSellByTheStore with: 1)! !

!methodRemoval: InnerInterfaceTest #test22 stamp: 'RL 11/30/2020 21:15:05'!
test22
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock. 
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 10.
	interface listCart: cartID.
	clock moveForwardMinutes: 21.
	
	self 
		assert: (interface listCart: cartID) 
		equals: (OrderedCollection with: 0 with: testObjectsFactory itemSellByTheStore with: 1)!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 21:15:12'!
test22
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock. 
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	clock moveForwardMinutes: 10.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	
	clock moveForwardMinutes: 21.
	
	self 
		assert: (interface listCart: cartID) 
		equals: (OrderedCollection with: 0 with: testObjectsFactory itemSellByTheStore with: 1)! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 21:04:52' prior: 50874107!
test21CannotListCartIfItHasBeenInactiveFor30Minutes
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock. 
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface listCart: cartID ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 21:15:53'!
PASSED!

!testRun: #InnerInterfaceTest #test22 stamp: 'RL 11/30/2020 21:15:57'!
PASSED!

!testRun: #InnerInterfaceTest #test23 stamp: 'RL 11/30/2020 21:16:00'!
ERROR!

!testRun: #InnerInterfaceTest #test23 stamp: 'RL 11/30/2020 21:16:00'!
ERROR!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 21:17:00'!
test22AddingItemToCartUpdatesLastActivityTime
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock. 
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	clock moveForwardMinutes: 10.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	
	clock moveForwardMinutes: 21.
	
	self 
		assert: (interface listCart: cartID) 
		equals: (OrderedCollection with: 0 with: testObjectsFactory itemSellByTheStore with: 1)! !

!methodRemoval: InnerInterfaceTest #test22 stamp: 'RL 11/30/2020 21:17:05'!
test22
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock. 
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	clock moveForwardMinutes: 10.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	
	clock moveForwardMinutes: 21.
	
	self 
		assert: (interface listCart: cartID) 
		equals: (OrderedCollection with: 0 with: testObjectsFactory itemSellByTheStore with: 1)!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 21:17:29'!
test23AddingItemToCartUpdatesLastActivityTime
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock. 
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 10.
	interface listCart: cartID.
	clock moveForwardMinutes: 21.
	
	self 
		assert: (interface listCart: cartID) 
		equals: (OrderedCollection with: 0 with: testObjectsFactory itemSellByTheStore with: 1)! !

!methodRemoval: InnerInterfaceTest #test23 stamp: 'RL 11/30/2020 21:17:29'!
test23
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock. 
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 10.
	interface listCart: cartID.
	clock moveForwardMinutes: 21.
	
	self 
		assert: (interface listCart: cartID) 
		equals: (OrderedCollection with: 0 with: testObjectsFactory itemSellByTheStore with: 1)!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 21:17:45'!
test23ListingCartUpdatesLastActivityTime
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock. 
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 10.
	interface listCart: cartID.
	clock moveForwardMinutes: 21.
	
	self 
		assert: (interface listCart: cartID) 
		equals: (OrderedCollection with: 0 with: testObjectsFactory itemSellByTheStore with: 1)! !

!methodRemoval: InnerInterfaceTest #test23AddingItemToCartUpdatesLastActivityTime stamp: 'RL 11/30/2020 21:17:45'!
test23AddingItemToCartUpdatesLastActivityTime
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock. 
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 10.
	interface listCart: cartID.
	clock moveForwardMinutes: 21.
	
	self 
		assert: (interface listCart: cartID) 
		equals: (OrderedCollection with: 0 with: testObjectsFactory itemSellByTheStore with: 1)!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 21:18:28' prior: 50873966!
listCart: cartID
	| itemsInCart output cart |
	cart := carts at: cartID ifAbsent: [^OrderedCollection with: 1 with: 'Invalid Cart ID.'].
	(self validateCartExpiracy: cartID) ifTrue: [ ^Error signal: self class expiredCartErrorMessage ].
	cartsLastActivityTime at: cartID put: clock currentTime.
	itemsInCart := cart listItems.
	output := OrderedCollection with: 0.
	itemsInCart do: [ :item | 
			output addLast: item.
			output addLast: (cart occurrencesOf: item).
		 ].
	^output.! !

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 11/30/2020 21:18:35'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 21:22:07'!
test24ExpiredCartIsNoLongerValid
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock. 
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 31.
	
	self 
		assert: (interface listCart: cartID) 
		equals: (OrderedCollection with: 0 with: testObjectsFactory itemSellByTheStore with: 1)! !

!methodRemoval: InnerInterfaceTest #testTimeout stamp: 'RL 11/30/2020 21:22:49'!
testTimeout
	self !

Cart subclass: #CartInLibrary
	instanceVariableNames: 'lastActivityTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartInLibrary category: 'TusLibros' stamp: 'RL 11/30/2020 21:36:50'!
Cart subclass: #CartInLibrary
	instanceVariableNames: 'lastActivityTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 21:37:43' prior: 50873686!
initializeWith: aCatalog for: clients at: aClock
	catalog := aCatalog.
	carts := Dictionary new.
	registeredClients := clients.
	nextCartID := 1.
	clock := aClock ! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 21:38:39' prior: 50873616!
createCartFor: clientID with: clientPassword
	| newID |
	(registeredClients includesKey: clientID) ifFalse: [^OrderedCollection with: 1 with: 'Not registered client.'].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^OrderedCollection with: 1 with: 'Wrong password.'].
	newID := nextCartID.
	carts add: newID->(CartInLibrary acceptingItemsOf: catalog at: clock).
	nextCartID := nextCartID + 1.	
	^OrderedCollection with: 0 with: newID.! !
!CartInLibrary class methodsFor: 'no messages' stamp: 'RL 11/30/2020 21:39:25'!
acceptingItemsOf: aCatalog at: aClock

	^self new initializeAcceptingItemsOf: aCatalog at: aClock! !
!CartInLibrary methodsFor: 'no messages' stamp: 'RL 11/30/2020 21:40:18'!
initializeAcceptingItemsOf: aCatalog at: aClock

	catalog := aCatalog.
	items := OrderedCollection new.
	lastActivityTime := aClock currentTime.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 21:41:47' prior: 50874039!
add: aQuantity of: anItem toCart: aCartID
	| cart |
	cart := carts at: aCartID ifAbsent: [^OrderedCollection with: 1 with: 'Invalid Cart ID.'].
	(self validateCartExpiracy: cart) ifTrue: [ ^Error signal: self class expiredCartErrorMessage ].
	cart updateLastActivityTime: clock.
	[cart add: aQuantity of: anItem] on: Error do: [ :error | ^OrderedCollection with: 1 with: error messageText ].! !
!CartInLibrary methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 21:42:50'!
updateLastActivityTime: aClock

	lastActivityTime := aClock currentTime.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 21:44:31' prior: 50874469!
add: aQuantity of: anItem toCart: aCartID
	| cart |
	cart := carts at: aCartID ifAbsent: [^OrderedCollection with: 1 with: 'Invalid Cart ID.'].
	(cart validateCartExpiracy: clock) ifTrue: [ ^Error signal: self class expiredCartErrorMessage ].
	cart updateLastActivityTime: clock.
	[cart add: aQuantity of: anItem] on: Error do: [ :error | ^OrderedCollection with: 1 with: error messageText ].! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 21:44:46' prior: 50874490!
add: aQuantity of: anItem toCart: aCartID
	| cart |
	cart := carts at: aCartID ifAbsent: [^OrderedCollection with: 1 with: 'Invalid Cart ID.'].
	(cart validateCartExpiracyAt: clock) ifTrue: [ ^Error signal: self class expiredCartErrorMessage ].
	cart updateLastActivityTime: clock.
	[cart add: aQuantity of: anItem] on: Error do: [ :error | ^OrderedCollection with: 1 with: error messageText ].! !
!CartInLibrary methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 21:46:01'!
validateCartExpiracyAt: aClock
	^aClock currentTime - (Duration minutes: 30) > lastActivityTime.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 11/30/2020 21:46:54' prior: 50874370!
listCart: cartID
	| itemsInCart output cart |
	cart := carts at: cartID ifAbsent: [^OrderedCollection with: 1 with: 'Invalid Cart ID.'].
	(cart validateCartExpiracyAt: clock) ifTrue: [ ^Error signal: self class expiredCartErrorMessage ].
	cart updateLastActivityTime: clock.
	itemsInCart := cart listItems.
	output := OrderedCollection with: 0.
	itemsInCart do: [ :item | 
			output addLast: item.
			output addLast: (cart occurrencesOf: item).
		 ].
	^output.! !

!methodRemoval: InnerInterface #validateCartExpiracy: stamp: 'RL 11/30/2020 21:47:01'!
validateCartExpiracy: aCartID
	| cartLastActivityTime |
	cartLastActivityTime := cartsLastActivityTime at: aCartID.
	^clock currentTime - (Duration minutes: 30) > cartLastActivityTime!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 21:47:26'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 21:47:31'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 11/30/2020 21:47:48'!
PASSED!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 11/30/2020 21:47:48'!
ERROR!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 11/30/2020 21:47:48'!
ERROR!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 11/30/2020 21:47:48'!
ERROR!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 11/30/2020 21:47:48'!
ERROR!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 11/30/2020 21:47:48'!
ERROR!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 11/30/2020 21:47:48'!
ERROR!

!testRun: #InnerInterfaceTest #test07AddingItemNotInCatalogReturnsErrorMessage stamp: 'RL 11/30/2020 21:47:48'!
ERROR!

!testRun: #InnerInterfaceTest #test08ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 11/30/2020 21:47:48'!
ERROR!

!testRun: #InnerInterfaceTest #test09AddingInvalidQuantityOfItemReturnsErrorMessage stamp: 'RL 11/30/2020 21:47:48'!
ERROR!

!testRun: #InnerInterfaceTest #test10InvalidCashierCheckoutReturnsErrorMessage stamp: 'RL 11/30/2020 21:47:48'!
ERROR!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 21:47:48'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 11/30/2020 21:47:48'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 11/30/2020 21:47:48'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 11/30/2020 21:47:48'!
PASSED!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 11/30/2020 21:47:48'!
ERROR!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 11/30/2020 21:47:48'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 11/30/2020 21:47:54'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 11/30/2020 21:47:58'!
PASSED!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 11/30/2020 21:48:03'!
ERROR!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 11/30/2020 21:48:03'!
ERROR!

----QUIT----(30 November 2020 23:42:44) CuisUniversity-4384.image priorSource: 17329739!

----STARTUP---- (1 December 2020 15:54:51) as /home/rodrigo/cuis-linux64-nueva/CuisUniversity-4384.image!


!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/1/2020 15:57:28'!
ERROR!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/1/2020 15:57:28'!
ERROR!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 15:58:05' prior: 50871848!
test01NewCartListsNoItems
	| interface cartID cartItems clients clock |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	cartItems := interface listCart: cartID.
	
	self assert: cartItems equals: (OrderedCollection with: 0).! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/1/2020 15:58:08'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 15:58:40' prior: 50874651!
test01NewCartListsNoItems
	| interface cartID cartItems clients clock |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock.
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	cartItems := interface listCart: cartID.
	
	self assert: cartItems equals: (OrderedCollection with: 0).! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/1/2020 15:58:44'!
FAILURE!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/1/2020 15:58:44'!
FAILURE!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 16:00:58'!
test01CantListACartWithNoItems
	| interface cartID cartItems clients clock |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock.
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	cartItems := interface listCart: cartID.
	
	self assert: cartItems equals: (OrderedCollection with: 0).! !

!methodRemoval: InnerInterfaceTest #test01CantListACartWithNoItems stamp: 'RL 12/1/2020 16:02:37'!
test01CantListACartWithNoItems
	| interface cartID cartItems clients clock |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clock := Clock new.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients at: clock.
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	cartItems := interface listCart: cartID.
	
	self assert: cartItems equals: (OrderedCollection with: 0).!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/1/2020 16:05:26'!
FAILURE!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/1/2020 16:05:26'!
FAILURE!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 16:05:44' prior: 50874672!
test01NewCartListsNoItems
	| interface cartID clients clock |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock.
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	
	self assert: (interface listCart: cartID) isEmpty.! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/1/2020 16:05:50'!
FAILURE!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/1/2020 16:05:50'!
FAILURE!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 16:08:09' prior: 50874506!
add: aQuantity of: anItem toCart: aCartID
	| cart |
	cart := carts at: aCartID ifAbsent: [^Error signal: self class invalidCartErrorMessage].
	(cart validateCartExpiracyAt: clock) ifTrue: [ ^Error signal: self class expiredCartErrorMessage ].
	cart updateLastActivityTime: clock.
	[cart add: aQuantity of: anItem] on: Error do: [ :error | ^OrderedCollection with: 1 with: error messageText ].! !
!InnerInterface class methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 16:08:21'!
invalidCartErrorMessage
	^'Invalid Cart ID.'! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 16:09:16' prior: 50874757!
add: aQuantity of: anItem toCart: aCartID
	| cart |
	cart := carts at: aCartID ifAbsent: [^Error signal: self class invalidCartErrorMessage].
	(cart validateCartExpiracyAt: clock) ifTrue: [ ^Error signal: self class expiredCartErrorMessage ].
	cart updateLastActivityTime: clock.
	cart add: aQuantity of: anItem.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 16:11:15' prior: 50874778!
add: aQuantity of: anItem toCart: aCartID
	| cart |
	cart := carts at: aCartID ifAbsent: [^Error signal: self class invalidCartErrorMessage].
	(cart validateCartExpiracyAt: clock) ifTrue: [ ^Error signal: self class expiredCartErrorMessage ].
	cart updateLastActivityTime: clock.
	"["cart add: aQuantity of: anItem"] on: Error do: [ :error | ^OrderedCollection with: 1 with: error messageText ]".! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 16:12:06' prior: 50874438!
createCartFor: clientID with: clientPassword
	| newID |
	(registeredClients includesKey: clientID) ifFalse: [^Error signal: self class clientNotRegisteredErrorMessage].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^OrderedCollection with: 1 with: 'Wrong password.'].
	newID := nextCartID.
	carts add: newID->(CartInLibrary acceptingItemsOf: catalog at: clock).
	nextCartID := nextCartID + 1.	
	^OrderedCollection with: 0 with: newID.! !
!InnerInterface class methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 16:12:18'!
clientNotRegisteredErrorMessage
	^'Not registered client.'! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 16:13:08' prior: 50874807!
createCartFor: clientID with: clientPassword
	| newID |
	(registeredClients includesKey: clientID) ifFalse: [^Error signal: self class clientNotRegisteredErrorMessage].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^Error signal: self class wrongPasswordErrorMessage ].
	newID := nextCartID.
	carts add: newID->(CartInLibrary acceptingItemsOf: catalog at: clock).
	nextCartID := nextCartID + 1.	
	^OrderedCollection with: 0 with: newID.! !
!InnerInterface class methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 16:13:23'!
wrongPasswordErrorMessage
	^'Wrong password.'! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 16:14:05' prior: 50874829!
createCartFor: clientID with: clientPassword
	| newID |
	(registeredClients includesKey: clientID) ifFalse: [^Error signal: self class clientNotRegisteredErrorMessage].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^Error signal: self class wrongPasswordErrorMessage ].
	carts add: nextCartID->(CartInLibrary acceptingItemsOf: catalog at: clock).
	nextCartID := nextCartID + 1.	
	^OrderedCollection with: 0 with: newID.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 16:14:24' prior: 50874852!
createCartFor: clientID with: clientPassword
	| newID |
	(registeredClients includesKey: clientID) ifFalse: [^Error signal: self class clientNotRegisteredErrorMessage].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^Error signal: self class wrongPasswordErrorMessage ].
	newID := nextCartID.
	carts add: newID->(CartInLibrary acceptingItemsOf: catalog at: clock).
	nextCartID := nextCartID + 1.	
	^newID.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 16:15:21' prior: 50874869!
createCartFor: clientID with: clientPassword
	
	(registeredClients includesKey: clientID) ifFalse: [^Error signal: self class clientNotRegisteredErrorMessage].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^Error signal: self class wrongPasswordErrorMessage ].
	nextCartID := nextCartID + 1.	
	carts add: nextCartID->(CartInLibrary acceptingItemsOf: catalog at: clock).
	^nextCartID copy.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 16:16:04' prior: 50874886!
createCartFor: clientID with: clientPassword
	(registeredClients includesKey: clientID) ifFalse: [^Error signal: self class clientNotRegisteredErrorMessage].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^Error signal: self class wrongPasswordErrorMessage ].
	nextCartID := nextCartID + 1.	
	carts add: nextCartID->(CartInLibrary acceptingItemsOf: catalog at: clock).
	^nextCartID copy.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 16:16:52' prior: 50874528!
listCart: cartID
	| itemsInCart output cart |
	cart := carts at: cartID ifAbsent: [ ^Error signal: self class invalidCartErrorMessage ].
	(cart validateCartExpiracyAt: clock) ifTrue: [ ^Error signal: self class expiredCartErrorMessage ].
	cart updateLastActivityTime: clock.
	itemsInCart := cart listItems.
	output := OrderedCollection with: 0.
	itemsInCart do: [ :item | 
			output addLast: item.
			output addLast: (cart occurrencesOf: item).
		 ].
	^output.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 16:16:58' prior: 50874791!
add: aQuantity of: anItem toCart: aCartID
	| cart |
	cart := carts at: aCartID ifAbsent: [ ^Error signal: self class invalidCartErrorMessage ].
	(cart validateCartExpiracyAt: clock) ifTrue: [ ^Error signal: self class expiredCartErrorMessage ].
	cart updateLastActivityTime: clock.
	"["cart add: aQuantity of: anItem"] on: Error do: [ :error | ^OrderedCollection with: 1 with: error messageText ]".! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 16:17:04' prior: 50874902!
createCartFor: clientID with: clientPassword
	(registeredClients includesKey: clientID) ifFalse: [ ^Error signal: self class clientNotRegisteredErrorMessage ].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^Error signal: self class wrongPasswordErrorMessage ].
	nextCartID := nextCartID + 1.	
	carts add: nextCartID->(CartInLibrary acceptingItemsOf: catalog at: clock).
	^nextCartID copy.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:09:23' prior: 50874918!
listCart: cartID
	| cart |
	cart := carts at: cartID ifAbsent: [ ^Error signal: self class invalidCartErrorMessage ].
	(cart validateCartExpiracyAt: clock) ifTrue: [ ^Error signal: self class expiredCartErrorMessage ].
	cart updateLastActivityTime: clock.
	^cart listItems.! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/1/2020 17:09:44'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/1/2020 17:09:55'!
ERROR!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/1/2020 17:09:55'!
ERROR!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:10:11' prior: 50871874!
test02OneItemCartListsTheItem
	| interface cartID cartItems anItem clients clock |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock.
	anItem := testObjectsFactory itemSellByTheStore.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	interface add: 1 of: anItem toCart: cartID.
	
	cartItems := interface listCart: cartID.
	
	self assert: cartItems equals: (OrderedCollection with: 0 with: anItem with: 1).! !

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/1/2020 17:12:29'!
ERROR!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/1/2020 17:12:29'!
ERROR!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:12:41' prior: 50874990!
test02OneItemCartListsTheItem
	| interface cartID anItem clients clock |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock.
	anItem := testObjectsFactory itemSellByTheStore.
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	interface add: 1 of: anItem toCart: cartID.
		
	self assert: (interface listCart: cartID) equals: (OrderedCollection with: anItem).! !

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/1/2020 17:12:48'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:13:29' prior: 50871697!
test03CreatingCartForInvalidClientReturnsErrorMessage
	| interface output clients clock |
	
	clients := Dictionary new.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock.
	
	output := interface createCartFor: 'notRegisteredClient' with: 'password1'.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Not registered client.').! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:15:48' prior: 50875041!
test03CreatingCartForInvalidClientReturnsErrorMessage
	| interface clients clock |
	
	clients := Dictionary new.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock.
		
	self
		should: [ interface createCartFor: 'notRegisteredClient' with: 'password1' ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface clientNotRegisteredErrorMessage.
			]! !

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/1/2020 17:15:52'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:16:31' prior: 50872044!
test04CreatingCartWithInvalidPasswordReturnsErrorMessage
	| interface output clients clock |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock.
	
	output := interface createCartFor: 'client1' with: 'password2'.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Wrong password.').! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:18:04' prior: 50875080!
test04CreatingCartWithInvalidPasswordReturnsErrorMessage
	| interface clients clock |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock.
	
	self
		should: [ interface createCartFor: 'client1' with: 'password2' ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface wrongPasswordErrorMessage.
			]! !

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/1/2020 17:18:11'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:18:49' prior: 50872143!
test05TwoCartInterfaceListsCartItemsCorrectly
	| interface clients cart1ID clock |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clients add: 'client2'-> 'password2'.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock.
	
	cart1ID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cart1ID.
	
	interface createCartFor: 'client2' with: 'password2'.
		
	self assert: (interface listCart: cart1ID) 
		equals: (OrderedCollection with: 0 with: testObjectsFactory itemSellByTheStore with: 1).! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:20:08' prior: 50875120!
test05TwoCartInterfaceListsCartItemsCorrectly
	| interface clients cart1ID clock |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clients add: 'client2'-> 'password2'.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock.
	
	cart1ID := interface createCartFor: 'client1' with: 'password1'.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cart1ID.
	interface createCartFor: 'client2' with: 'password2'.
		
	self assert: (interface listCart: cart1ID) equals: (OrderedCollection with: testObjectsFactory itemSellByTheStore).! !

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/1/2020 17:20:12'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:20:35' prior: 50872497!
test06AddingItemToUnregisteredCartReturnsErrorMessage
	| interface output clients clock |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock.
	
	interface createCartFor: 'client1' with: 'password1'.
	
	output := interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: 'invalidCartID'.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Invalid Cart ID.').! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:22:28' prior: 50875172!
test06AddingItemToUnregisteredCartReturnsErrorMessage
	| interface clients clock |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock.
		
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: 'invalidCartID'. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/1/2020 17:22:33'!
PASSED!

!methodRemoval: InnerInterfaceTest #test09AddingInvalidQuantityOfItemReturnsErrorMessage stamp: 'RL 12/1/2020 17:23:10'!
test09AddingInvalidQuantityOfItemReturnsErrorMessage
	| interface output clients cartID |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	output := interface add: -1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Invalid number of items').!

!methodRemoval: InnerInterfaceTest #test07AddingItemNotInCatalogReturnsErrorMessage stamp: 'RL 12/1/2020 17:23:20'!
test07AddingItemNotInCatalogReturnsErrorMessage
	| interface output clients cartID |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	output := interface add: 1 of: testObjectsFactory itemNotSellByTheStore toCart: cartID.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Item is not in catalog').!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:24:15' prior: 50872659!
test08ListingUnregisteredCartReturnsErrorMessage
	| interface clients |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	interface createCartFor: 'client1' with: 'password1'.
			
	self
		should: [ interface listCart: 'invalidCartID'. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:24:27' prior: 50875255!
test08ListingUnregisteredCartReturnsErrorMessage
	| interface clients clock |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock.
	
	interface createCartFor: 'client1' with: 'password1'.
			
	self
		should: [ interface listCart: 'invalidCartID'. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:27:11' prior: 50875274!
test08ListingUnregisteredCartReturnsErrorMessage
	| interface clients clock |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock.
				
	self
		should: [ interface listCart: 'invalidCartID'. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !

!testRun: #InnerInterfaceTest #test08ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/1/2020 17:27:14'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:27:40'!
test07ListingUnregisteredCartReturnsErrorMessage
	| interface clients clock |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock.
				
	self
		should: [ interface listCart: 'invalidCartID'. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !

!methodRemoval: InnerInterfaceTest #test08ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/1/2020 17:27:40'!
test08ListingUnregisteredCartReturnsErrorMessage
	| interface clients clock |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock.
				
	self
		should: [ interface listCart: 'invalidCartID'. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:28:00'!
test08InvalidCashierCheckoutReturnsErrorMessage
	| interface output clients cartID |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	output := interface checkoutCart: cartID 
		withCCNumber: '1111111111111111'
		expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
		ownedBy: 'client1'.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Can not check out an empty cart').! !

!methodRemoval: InnerInterfaceTest #test10InvalidCashierCheckoutReturnsErrorMessage stamp: 'RL 12/1/2020 17:28:00'!
test10InvalidCashierCheckoutReturnsErrorMessage
	| interface output clients cartID |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	
	output := interface checkoutCart: cartID 
		withCCNumber: '1111111111111111'
		expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
		ownedBy: 'client1'.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Can not check out an empty cart').!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/1/2020 17:30:25'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/1/2020 17:30:25'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/1/2020 17:30:25'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/1/2020 17:30:25'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/1/2020 17:30:25'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/1/2020 17:30:25'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/1/2020 17:30:25'!
PASSED!

!testRun: #InnerInterfaceTest #test08InvalidCashierCheckoutReturnsErrorMessage stamp: 'RL 12/1/2020 17:30:25'!
ERROR!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/1/2020 17:30:25'!
ERROR!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/1/2020 17:30:25'!
ERROR!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/1/2020 17:30:25'!
ERROR!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/1/2020 17:30:25'!
ERROR!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/1/2020 17:30:25'!
ERROR!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/1/2020 17:30:25'!
PASSED!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/1/2020 17:30:34'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/1/2020 17:30:39'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:31:07' prior: 50873772!
test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog for: clients at: clock. 
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:31:16' prior: 50875455!
test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock. 
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/1/2020 17:31:54'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:32:00' prior: 50875478!
test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock. 
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/1/2020 17:32:03'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:32:40' prior: 50874200!
test21CannotListCartIfItHasBeenInactiveFor30Minutes
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock. 
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface listCart: cartID ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:33:06' prior: 50875532!
test21CannotListCartIfItHasBeenInactiveFor30Minutes
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock. 
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface listCart: cartID ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/1/2020 17:33:08'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:33:34' prior: 50874234!
test22AddingItemToCartUpdatesLastActivityTime
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock. 
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	clock moveForwardMinutes: 10.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 21.
	
	self 
		assert: (interface listCart: cartID) 
		equals: (OrderedCollection with: 0 with: testObjectsFactory itemSellByTheStore with: 1)! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:33:50' prior: 50875556!
test21CannotListCartIfItHasBeenInactiveFor30Minutes
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock. 
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface listCart: cartID ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:36:25' prior: 50875583!
test22AddingItemToCartUpdatesLastActivityTime
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock. 
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	clock moveForwardMinutes: 10.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 21.
	
	self assert: (interface listCart: cartID) equals: (OrderedCollection with: testObjectsFactory itemSellByTheStore)! !

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/1/2020 17:36:28'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:37:04' prior: 50874322!
test23ListingCartUpdatesLastActivityTime
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock. 
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 10.
	interface listCart: cartID.
	clock moveForwardMinutes: 21.
	
	self assert: (interface listCart: cartID) equals: (OrderedCollection with: testObjectsFactory itemSellByTheStore)! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:37:11' prior: 50875656!
test23ListingCartUpdatesLastActivityTime
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock. 
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 10.
	interface listCart: cartID.
	clock moveForwardMinutes: 21.
	
	self assert: (interface listCart: cartID) equals: (OrderedCollection with: testObjectsFactory itemSellByTheStore)! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:37:51' prior: 50874392!
test24ExpiredCartIsNoLongerValid
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock. 
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 31.
	
	self assert: (interface listCart: cartID) equals: (OrderedCollection with: testObjectsFactory itemSellByTheStore)! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/1/2020 17:38:08'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/1/2020 17:38:08'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/1/2020 17:38:08'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/1/2020 17:38:08'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/1/2020 17:38:08'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/1/2020 17:38:08'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/1/2020 17:38:08'!
PASSED!

!testRun: #InnerInterfaceTest #test08InvalidCashierCheckoutReturnsErrorMessage stamp: 'RL 12/1/2020 17:38:08'!
ERROR!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/1/2020 17:38:08'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/1/2020 17:38:08'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/1/2020 17:38:08'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/1/2020 17:38:08'!
PASSED!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/1/2020 17:38:08'!
ERROR!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/1/2020 17:38:08'!
PASSED!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/1/2020 17:38:15'!
ERROR!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/1/2020 17:38:15'!
ERROR!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:39:24' prior: 50875702!
test24ExpiredCartIsNoLongerValid
	| interface clients clock cartID |
	
	clients := Dictionary new.
	clients add: 'client1'->'password1'.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock. 
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 31.
	
	"self assert: (interface listCart: cartID) equals: (OrderedCollection with: testObjectsFactory itemSellByTheStore)"! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/1/2020 17:39:27'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/1/2020 17:39:27'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/1/2020 17:39:27'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/1/2020 17:39:27'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/1/2020 17:39:27'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/1/2020 17:39:27'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/1/2020 17:39:27'!
PASSED!

!testRun: #InnerInterfaceTest #test08InvalidCashierCheckoutReturnsErrorMessage stamp: 'RL 12/1/2020 17:39:27'!
ERROR!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/1/2020 17:39:27'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/1/2020 17:39:27'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/1/2020 17:39:27'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/1/2020 17:39:27'!
PASSED!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/1/2020 17:39:27'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/1/2020 17:39:27'!
PASSED!

!testRun: #InnerInterfaceTest #test08InvalidCashierCheckoutReturnsErrorMessage stamp: 'RL 12/1/2020 17:39:27'!
ERROR!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:39:45' prior: 50875352!
test08InvalidCashierCheckoutReturnsErrorMessage
	| interface output clients cartID |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	interface := InnerInterface newWith: testObjectsFactory defaultCatalog for: clients.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	"
	output := interface checkoutCart: cartID 
		withCCNumber: '1111111111111111'
		expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
		ownedBy: 'client1'.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Can not check out an empty cart')."! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/1/2020 17:39:53'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/1/2020 17:39:53'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/1/2020 17:39:53'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/1/2020 17:39:53'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/1/2020 17:39:53'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/1/2020 17:39:53'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/1/2020 17:39:53'!
PASSED!

!testRun: #InnerInterfaceTest #test08InvalidCashierCheckoutReturnsErrorMessage stamp: 'RL 12/1/2020 17:39:53'!
ERROR!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/1/2020 17:39:53'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/1/2020 17:39:53'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/1/2020 17:39:53'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/1/2020 17:39:53'!
PASSED!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/1/2020 17:39:53'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/1/2020 17:39:53'!
PASSED!

!testRun: #InnerInterfaceTest #test08InvalidCashierCheckoutReturnsErrorMessage stamp: 'RL 12/1/2020 17:39:53'!
ERROR!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:40:18' prior: 50875855!
test08InvalidCashierCheckoutReturnsErrorMessage
	| interface output clients cartID clock |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock.
	
	cartID := (interface createCartFor: 'client1' with: 'password1') at: 2.
	"
	output := interface checkoutCart: cartID 
		withCCNumber: '1111111111111111'
		expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
		ownedBy: 'client1'.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Can not check out an empty cart')."! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/1/2020 17:41:17'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/1/2020 17:41:17'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/1/2020 17:41:17'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/1/2020 17:41:17'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/1/2020 17:41:17'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/1/2020 17:41:17'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/1/2020 17:41:17'!
PASSED!

!testRun: #InnerInterfaceTest #test08InvalidCashierCheckoutReturnsErrorMessage stamp: 'RL 12/1/2020 17:41:17'!
ERROR!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/1/2020 17:41:17'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/1/2020 17:41:17'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/1/2020 17:41:17'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/1/2020 17:41:17'!
PASSED!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/1/2020 17:41:17'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/1/2020 17:41:17'!
PASSED!

!testRun: #InnerInterfaceTest #test08InvalidCashierCheckoutReturnsErrorMessage stamp: 'RL 12/1/2020 17:41:17'!
ERROR!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:41:32' prior: 50875933!
test08InvalidCashierCheckoutReturnsErrorMessage
	| interface output clients cartID clock |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clock := Clock new.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock.
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	"
	output := interface checkoutCart: cartID 
		withCCNumber: '1111111111111111'
		expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
		ownedBy: 'client1'.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Can not check out an empty cart')."! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/1/2020 17:41:39'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/1/2020 17:41:39'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/1/2020 17:41:39'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/1/2020 17:41:39'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/1/2020 17:41:39'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/1/2020 17:41:39'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/1/2020 17:41:39'!
PASSED!

!testRun: #InnerInterfaceTest #test08InvalidCashierCheckoutReturnsErrorMessage stamp: 'RL 12/1/2020 17:41:39'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/1/2020 17:41:39'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/1/2020 17:41:39'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/1/2020 17:41:39'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/1/2020 17:41:39'!
PASSED!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/1/2020 17:41:39'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/1/2020 17:41:39'!
PASSED!

!classRenamed: #CartInLibrary as: #CartInStore stamp: 'RL 12/1/2020 17:50:31'!
Smalltalk renameClassNamed: #CartInLibrary as: #CartInStore!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:50:31' prior: 50874952!
createCartFor: clientID with: clientPassword
	(registeredClients includesKey: clientID) ifFalse: [ ^Error signal: self class clientNotRegisteredErrorMessage ].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^Error signal: self class wrongPasswordErrorMessage ].
	nextCartID := nextCartID + 1.	
	carts add: nextCartID->(CartInStore acceptingItemsOf: catalog at: clock).
	^nextCartID copy.! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/1/2020 17:50:53'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/1/2020 17:50:53'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/1/2020 17:50:53'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/1/2020 17:50:53'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/1/2020 17:50:54'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/1/2020 17:50:54'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/1/2020 17:50:54'!
PASSED!

!testRun: #InnerInterfaceTest #test08InvalidCashierCheckoutReturnsErrorMessage stamp: 'RL 12/1/2020 17:50:54'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/1/2020 17:50:54'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/1/2020 17:50:54'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/1/2020 17:50:54'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/1/2020 17:50:54'!
PASSED!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/1/2020 17:50:54'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/1/2020 17:50:54'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'RL 12/1/2020 17:51:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'RL 12/1/2020 17:51:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'RL 12/1/2020 17:51:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'RL 12/1/2020 17:51:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'RL 12/1/2020 17:51:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'RL 12/1/2020 17:51:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'RL 12/1/2020 17:51:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'RL 12/1/2020 17:51:26'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'RL 12/1/2020 17:52:07'!
currentClock
	
	^ Clock new.! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:53:22' prior: 50874735!
test01NewCartListsNoItems
	| interface cartID clients clock |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clock := testObjectsFactory currentClock.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock.
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	
	self assert: (interface listCart: cartID) isEmpty.! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:53:26' prior: 50875018!
test02OneItemCartListsTheItem
	| interface cartID anItem clients clock |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clock := testObjectsFactory currentClock.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock.
	anItem := testObjectsFactory itemSellByTheStore.
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	interface add: 1 of: anItem toCart: cartID.
		
	self assert: (interface listCart: cartID) equals: (OrderedCollection with: anItem).! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:53:29' prior: 50875058!
test03CreatingCartForInvalidClientReturnsErrorMessage
	| interface clients clock |
	
	clients := Dictionary new.
	clock := testObjectsFactory currentClock.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock.
		
	self
		should: [ interface createCartFor: 'notRegisteredClient' with: 'password1' ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface clientNotRegisteredErrorMessage.
			]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:53:33' prior: 50875097!
test04CreatingCartWithInvalidPasswordReturnsErrorMessage
	| interface clients clock |
	
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	clock := testObjectsFactory currentClock.
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: clients 
		at: clock.
	
	self
		should: [ interface createCartFor: 'client1' with: 'password2' ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface wrongPasswordErrorMessage.
			]! !
!StoreTestObjectsFactory methodsFor: 'sin categoria' stamp: 'RL 12/1/2020 17:55:29'!
clientDictWithOneClient
	
	^ Clock new.! !
!StoreTestObjectsFactory methodsFor: 'sin categoria' stamp: 'RL 12/1/2020 17:55:55' prior: 50876262!
clientDictWithOneClient
	
	| clients |
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	^clients! !
!StoreTestObjectsFactory methodsFor: 'sin categoria' stamp: 'RL 12/1/2020 17:56:02' prior: 50876267!
clientDictWithOneClient
	| clients |
	clients := Dictionary new.
	clients add: 'client1'-> 'password1'.
	^clients! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 17:57:16' prior: 50876187!
test01NewCartListsNoItems
	| interface cartID |
	
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: testObjectsFactory clientDictWithOneClient 
		at: testObjectsFactory currentClock.
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	
	self assert: (interface listCart: cartID) isEmpty.! !
!StoreTestObjectsFactory methodsFor: 'sin categoria' stamp: 'RL 12/1/2020 17:57:45'!
defaultClientID1
! !
!StoreTestObjectsFactory methodsFor: 'sin categoria' stamp: 'RL 12/1/2020 17:57:52'!
defaultPassword1
! !
!StoreTestObjectsFactory methodsFor: 'sin categoria' stamp: 'RL 12/1/2020 17:58:18' prior: 50876274!
clientDictWithOneClient
	| clients |
	clients := Dictionary new.
	clients add: self defaultClientID1 -> 'password1'.
	^clients! !
!StoreTestObjectsFactory methodsFor: 'sin categoria' stamp: 'RL 12/1/2020 17:58:23' prior: 50876295!
defaultClientID1
	^'client1'! !
!StoreTestObjectsFactory methodsFor: 'sin categoria' stamp: 'RL 12/1/2020 17:58:45' prior: 50876303!
clientDictWithOneClient
	| clients |
	clients := Dictionary new.
	clients add: self defaultClientID1 -> self defaultPassword1.
	^clients! !
!StoreTestObjectsFactory methodsFor: 'sin categoria' stamp: 'RL 12/1/2020 17:58:50' prior: 50876299!
defaultPassword1
	^'password1'! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:00:12' prior: 50876281!
test01NewCartListsNoItems
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock.
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	
	self assert: (interface listCart: cartID) isEmpty.! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:00:58' prior: 50876203!
test02OneItemCartListsTheItem
	| interface cartID anItem clients clock |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock.
	anItem := testObjectsFactory itemSellByTheStore.
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	interface add: 1 of: anItem toCart: cartID.
		
	self assert: (interface listCart: cartID) equals: (OrderedCollection with: anItem).! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/1/2020 18:01:08'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:01:35' prior: 50876345!
test02OneItemCartListsTheItem
	| interface cartID anItem |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock.
	anItem := testObjectsFactory itemSellByTheStore.
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
		
	self assert: (interface listCart: cartID) equals: (OrderedCollection with: testObjectsFactory itemSellByTheStore).! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:03:08' prior: 50876367!
test02OneItemCartListsTheItem
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock.	
				
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
		
	self assert: (interface listCart: cartID) equals: (OrderedCollection with: testObjectsFactory itemSellByTheStore).! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:03:15' prior: 50876329!
test01NewCartListsNoItems
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock.
				
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	
	self assert: (interface listCart: cartID) isEmpty.! !
!StoreTestObjectsFactory methodsFor: 'sin categoria' stamp: 'RL 12/1/2020 18:04:56'!
emptyClientDict
	^Dictionary new.! !
!StoreTestObjectsFactory methodsFor: 'sin categoria' stamp: 'RL 12/1/2020 18:05:18'!
invalidClientID
	^'invalidClientID'! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/1/2020 18:05:23'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/1/2020 18:05:28'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:06:25' prior: 50876224!
test03CreatingCartForInvalidClientReturnsErrorMessage
	| interface |
	
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: testObjectsFactory emptyClientDict 
		at: testObjectsFactory currentClock.
		
	self
		should: [ interface createCartFor: testObjectsFactory invalidClientID with: testObjectsFactory defaultPassword1 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface clientNotRegisteredErrorMessage.
			]! !

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/1/2020 18:06:30'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:07:16' prior: 50876440!
test03CreatingCartForInvalidClientReturnsErrorMessage
	| interface |
	
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: testObjectsFactory emptyClientDict 
		at: testObjectsFactory currentClock.
		
	self
		should: [ interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface clientNotRegisteredErrorMessage.
			]! !

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/1/2020 18:07:19'!
PASSED!

!methodRemoval: StoreTestObjectsFactory #invalidClientID stamp: 'RL 12/1/2020 18:07:31'!
invalidClientID
	^'invalidClientID'!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:08:28' prior: 50876243!
test04CreatingCartWithInvalidPasswordReturnsErrorMessage
	| interface |
	
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: testObjectsFactory clientDictWithOneClient 
		at: testObjectsFactory currentClock.
	
	self
		should: [ interface createCartFor: testObjectsFactory defaultClientID1 with: 'password2' ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface wrongPasswordErrorMessage.
			]! !
!StoreTestObjectsFactory methodsFor: 'sin categoria' stamp: 'RL 12/1/2020 18:08:40'!
defaultPassword2
	^'password2'! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:08:56' prior: 50876490!
test04CreatingCartWithInvalidPasswordReturnsErrorMessage
	| interface |
	
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: testObjectsFactory clientDictWithOneClient 
		at: testObjectsFactory currentClock.
	
	self
		should: [ interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword2 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface wrongPasswordErrorMessage.
			]! !

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/1/2020 18:08:59'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'sin categoria' stamp: 'RL 12/1/2020 18:09:24'!
defaultClientID2
	^'client2'! !
!StoreTestObjectsFactory methodsFor: 'sin categoria' stamp: 'RL 12/1/2020 18:09:48'!
clientDictWithTwoClients
	| clients |
	clients := Dictionary new.
	clients add: self defaultClientID1 -> self defaultPassword1.
	clients add: self defaultClientID2 -> self defaultPassword2.
	^clients! !

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/1/2020 18:11:32'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:11:40' prior: 50875145!
test05TwoCartInterfaceListsCartItemsCorrectly
	| interface cart1ID |
	
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: testObjectsFactory clientDictWithTwoClients 
		at: testObjectsFactory currentClock .
	
	cart1ID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cart1ID.
	interface createCartFor: testObjectsFactory defaultClientID2 with: testObjectsFactory defaultPassword2.
		
	self assert: (interface listCart: cart1ID) equals: (OrderedCollection with: testObjectsFactory itemSellByTheStore).! !

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/1/2020 18:11:45'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:12:30' prior: 50875192!
test06AddingItemToUnregisteredCartReturnsErrorMessage
	| interface |
	
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: testObjectsFactory clientDictWithOneClient 
		at: testObjectsFactory currentClock.
		
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: 'invalidCartID'. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !
!StoreTestObjectsFactory methodsFor: 'sin categoria' stamp: 'RL 12/1/2020 18:13:01'!
InvalidCartID
	^-1! !
!StoreTestObjectsFactory methodsFor: 'sin categoria' stamp: 'RL 12/1/2020 18:13:18' prior: 50876600!
InvalidCartID
	^'invalidCart'! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:13:42' prior: 50876582!
test06AddingItemToUnregisteredCartReturnsErrorMessage
	| interface |
	
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: testObjectsFactory clientDictWithOneClient 
		at: testObjectsFactory currentClock.
		
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: testObjectsFactory InvalidCartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/1/2020 18:13:45'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:14:25' prior: 50875316!
test07ListingUnregisteredCartReturnsErrorMessage
	| interface |
	
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: testObjectsFactory clientDictWithOneClient 
		at: testObjectsFactory currentClock .
				
	self
		should: [ interface listCart: testObjectsFactory InvalidCartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:15:34' prior: 50876012!
test08InvalidCashierCheckoutReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: testObjectsFactory clientDictWithOneClient 
		at: testObjectsFactory currentClock .
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	"
	output := interface checkoutCart: cartID 
		withCCNumber: '1111111111111111'
		expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
		ownedBy: 'client1'.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Can not check out an empty cart')."! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:17:01' prior: 50875505!
test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: testObjectsFactory clientDictWithOneClient 
		at: clock. 
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/1/2020 18:17:14'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:18:26' prior: 50875606!
test21CannotListCartIfItHasBeenInactiveFor30Minutes
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: testObjectsFactory clientDictWithOneClient 
		at: clock. 
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface listCart: cartID ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:18:43' prior: 50876703!
test21CannotListCartIfItHasBeenInactiveFor30Minutes
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: testObjectsFactory clientDictWithOneClient 
		at: clock. 
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface listCart: cartID ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:19:27' prior: 50875630!
test22AddingItemToCartUpdatesLastActivityTime
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: testObjectsFactory clientDictWithOneClient 
		at: clock. 
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	clock moveForwardMinutes: 10.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 21.
	
	self assert: (interface listCart: cartID) equals: (OrderedCollection with: testObjectsFactory itemSellByTheStore)! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:19:46' prior: 50876751!
test22AddingItemToCartUpdatesLastActivityTime
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: testObjectsFactory clientDictWithOneClient 
		at: clock. 
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 10.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 21.
	
	self assert: (interface listCart: cartID) equals: (OrderedCollection with: testObjectsFactory itemSellByTheStore)! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:19:59' prior: 50875679!
test23ListingCartUpdatesLastActivityTime
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: testObjectsFactory clientDictWithOneClient 
		at: clock. 
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 10.
	interface listCart: cartID.
	clock moveForwardMinutes: 21.
	
	self assert: (interface listCart: cartID) equals: (OrderedCollection with: testObjectsFactory itemSellByTheStore)! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:20:12' prior: 50876773!
test22AddingItemToCartUpdatesLastActivityTime
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: testObjectsFactory clientDictWithOneClient 
		at: clock. 
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 10.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 21.
	
	self assert: (interface listCart: cartID) equals: (OrderedCollection with: testObjectsFactory itemSellByTheStore)! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:20:28' prior: 50876797!
test23ListingCartUpdatesLastActivityTime
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: testObjectsFactory clientDictWithOneClient 
		at: clock. 
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 10.
	interface listCart: cartID.
	clock moveForwardMinutes: 21.
	
	self assert: (interface listCart: cartID) equals: (OrderedCollection with: testObjectsFactory itemSellByTheStore)! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:20:39' prior: 50875780!
test24ExpiredCartIsNoLongerValid
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: testObjectsFactory clientDictWithOneClient 
		at: clock. 
	
	cartID := interface createCartFor: 'client1' with: 'password1'.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 31.
	
	"self assert: (interface listCart: cartID) equals: (OrderedCollection with: testObjectsFactory itemSellByTheStore)"! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:21:12' prior: 50876868!
test24ExpiredCartIsNoLongerValid
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
		newWith: testObjectsFactory defaultCatalog 
		for: testObjectsFactory clientDictWithOneClient 
		at: clock. 
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 31.
	
	"self assert: (interface listCart: cartID) equals: (OrderedCollection with: testObjectsFactory itemSellByTheStore)"! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:21:49' prior: 50876463!
test03CreatingCartForInvalidClientReturnsErrorMessage
	| interface |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory emptyClientDict 
				at: testObjectsFactory currentClock.
		
	self
		should: [ interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface clientNotRegisteredErrorMessage.
			]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:21:54' prior: 50876513!
test04CreatingCartWithInvalidPasswordReturnsErrorMessage
	| interface |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock.
	
	self
		should: [ interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword2 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface wrongPasswordErrorMessage.
			]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:21:58' prior: 50876554!
test05TwoCartInterfaceListsCartItemsCorrectly
	| interface cart1ID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithTwoClients 
				at: testObjectsFactory currentClock .
	
	cart1ID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cart1ID.
	interface createCartFor: testObjectsFactory defaultClientID2 with: testObjectsFactory defaultPassword2.
		
	self assert: (interface listCart: cart1ID) equals: (OrderedCollection with: testObjectsFactory itemSellByTheStore).! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:22:03' prior: 50876609!
test06AddingItemToUnregisteredCartReturnsErrorMessage
	| interface |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock.
		
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: testObjectsFactory InvalidCartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:22:07' prior: 50876632!
test07ListingUnregisteredCartReturnsErrorMessage
	| interface |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock .
				
	self
		should: [ interface listCart: testObjectsFactory InvalidCartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:22:11' prior: 50876650!
test08InvalidCashierCheckoutReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock .
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	"
	output := interface checkoutCart: cartID 
		withCCNumber: '1111111111111111'
		expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
		ownedBy: 'client1'.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Can not check out an empty cart')."! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:22:18' prior: 50876675!
test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock. 
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:22:21' prior: 50876726!
test21CannotListCartIfItHasBeenInactiveFor30Minutes
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock. 
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface listCart: cartID ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:22:26' prior: 50876820!
test22AddingItemToCartUpdatesLastActivityTime
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock. 
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 10.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 21.
	
	self assert: (interface listCart: cartID) equals: (OrderedCollection with: testObjectsFactory itemSellByTheStore)! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:22:29' prior: 50876844!
test23ListingCartUpdatesLastActivityTime
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock. 
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 10.
	interface listCart: cartID.
	clock moveForwardMinutes: 21.
	
	self assert: (interface listCart: cartID) equals: (OrderedCollection with: testObjectsFactory itemSellByTheStore)! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/1/2020 18:22:32' prior: 50876889!
test24ExpiredCartIsNoLongerValid
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock. 
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 31.
	
	"self assert: (interface listCart: cartID) equals: (OrderedCollection with: testObjectsFactory itemSellByTheStore)"! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/1/2020 18:22:58'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/1/2020 18:22:58'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/1/2020 18:22:58'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/1/2020 18:22:58'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/1/2020 18:22:58'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/1/2020 18:22:58'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/1/2020 18:22:58'!
PASSED!

!testRun: #InnerInterfaceTest #test08InvalidCashierCheckoutReturnsErrorMessage stamp: 'RL 12/1/2020 18:22:58'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/1/2020 18:22:58'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/1/2020 18:22:58'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/1/2020 18:22:58'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/1/2020 18:22:58'!
PASSED!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/1/2020 18:22:58'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/1/2020 18:22:58'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

!testRun: #InnerInterfaceTest #test08InvalidCashierCheckoutReturnsErrorMessage stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/1/2020 18:23:21'!
PASSED!

----QUIT----(1 December 2020 18:23:37) CuisUniversity-4384.image priorSource: 17375578!

----STARTUP---- (2 December 2020 17:13:16) as /home/rodrigo/cuis-linux64-nueva/CuisUniversity-4384.image!

!StoreTestObjectsFactory methodsFor: 'sin categoria' stamp: 'RL 12/2/2020 18:35:09'!
invalidCartID
	^'invalidCart'! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 18:35:09' prior: 50876994!
test07ListingUnregisteredCartReturnsErrorMessage
	| interface |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock .
				
	self
		should: [ interface listCart: testObjectsFactory invalidCartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 18:35:09' prior: 50876975!
test06AddingItemToUnregisteredCartReturnsErrorMessage
	| interface |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock.
		
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: testObjectsFactory invalidCartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !

!methodRemoval: StoreTestObjectsFactory #InvalidCartID stamp: 'RL 12/2/2020 18:35:09'!
InvalidCartID
	^'invalidCart'!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 18:43:48' prior: 50874936!
add: aQuantity of: anItem toCart: aCartID
	| cart |
	cart := carts at: aCartID ifAbsent: [ ^Error signal: self class invalidCartErrorMessage ].
	(cart validateCartExpiracyAt: clock) ifTrue: [ ^Error signal: self class expiredCartErrorMessage ].
	cart updateLastActivityTime: clock.
	cart add: aQuantity of: anItem.! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 18:43:52'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/2/2020 18:43:52'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 18:43:52'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 18:43:52'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/2/2020 18:43:52'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 18:43:52'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 18:43:52'!
PASSED!

!testRun: #InnerInterfaceTest #test08InvalidCashierCheckoutReturnsErrorMessage stamp: 'RL 12/2/2020 18:43:52'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 18:43:52'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 18:43:52'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 18:43:52'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 18:43:52'!
PASSED!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/2/2020 18:43:52'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/2/2020 18:43:52'!
PASSED!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 18:44:18' prior: 50877354!
add: aQuantity of: anItem toCart: aCartID
	| cart |
	cart := carts at: aCartID ifAbsent: [ ^Error signal: self class invalidCartErrorMessage ].
	(cart validateCartExpiracyAt: clock) ifTrue: [ ^Error signal: self class expiredCartErrorMessage ].
	cart add: aQuantity of: anItem at: clock.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 18:44:50' prior: 50876091!
createCartFor: clientID with: clientPassword
	(registeredClients includesKey: clientID) ifFalse: [ ^Error signal: self class clientNotRegisteredErrorMessage ].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^Error signal: self class wrongPasswordErrorMessage ].
	nextCartID := nextCartID + 1.	
	carts add: nextCartID->(Cart acceptingItemsOf: catalog at: clock).
	^nextCartID copy.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 18:45:19' prior: 50874968!
listCart: cartID
	| cart |
	cart := carts at: cartID ifAbsent: [ ^Error signal: self class invalidCartErrorMessage ].
	(cart validateCartExpiracyAt: clock) ifTrue: [ ^Error signal: self class expiredCartErrorMessage ].
	^cart listItemsAt: clock.! !
!Cart methodsFor: 'initialization' stamp: 'RL 12/2/2020 18:46:05'!
initializeAcceptingItemsOf: aCatalog at: aClock

	catalog := aCatalog.
	items := OrderedCollection new.
	"lastActivityTime := aClock currentTime."! !
!Cart methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 18:46:27'!
updateLastActivityTime: aClock

	"lastActivityTime := aClock currentTime."! !
!Cart methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 18:46:43'!
validateCartExpiracyAt: aClock
	"^aClock currentTime - (Duration minutes: 30) > lastActivityTime."! !

!classRemoval: #CartInStore stamp: 'RL 12/2/2020 18:46:52'!
Cart subclass: #CartInStore
	instanceVariableNames: 'lastActivityTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'RL 12/2/2020 18:47:05'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items lastActivityTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'RL 12/2/2020 18:47:02' prior: 50877457!
initializeAcceptingItemsOf: aCatalog at: aClock

	catalog := aCatalog.
	items := OrderedCollection new.
	lastActivityTime := aClock currentTime.! !

!methodRemoval: Cart #initializeAcceptingItemsOf: stamp: 'RL 12/2/2020 18:47:19'!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.!
!Cart class methodsFor: 'instance creation' stamp: 'RL 12/2/2020 18:47:36'!
acceptingItemsOf: aCatalog at: aClock

	^self new initializeAcceptingItemsOf: aCatalog at: aClock! !

!methodRemoval: Cart class #acceptingItemsOf: stamp: 'RL 12/2/2020 18:48:13'!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'RL 12/2/2020 18:48:39' prior: 50868286!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog at: self currentClock ! !
!Cart methodsFor: 'adding' stamp: 'RL 12/2/2020 19:00:31'!
add: aQuantity of: anItem at: aClock

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !

!methodRemoval: Cart #add:of: stamp: 'RL 12/2/2020 19:00:40'!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]!
!Cart methodsFor: 'adding' stamp: 'RL 12/2/2020 19:02:32' prior: 50867832!
add: anItem

	^ self add: 1 of: anItem at: Clock new.! !
!CartTest methodsFor: 'tests' stamp: 'RL 12/2/2020 19:02:57' prior: 50867861!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: 0 of: testObjectsFactory itemSellByTheStore at: testObjectsFactory currentClock ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'RL 12/2/2020 19:03:08' prior: 50867919!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: 2 of: testObjectsFactory itemNotSellByTheStore at: testObjectsFactory currentClock ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'RL 12/2/2020 19:03:14' prior: 50867888!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: 2 of: testObjectsFactory itemSellByTheStore at: testObjectsFactory currentClock.
	self assert: (cart occurrencesOf: testObjectsFactory itemSellByTheStore) = 2! !
!CashierTest methodsFor: 'tests' stamp: 'RL 12/2/2020 19:03:21' prior: 50868164!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore at: testObjectsFactory currentClock.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!Cart methodsFor: 'adding' stamp: 'RL 12/2/2020 19:04:13'!
add: anItem at: aClock

	^ self add: 1 of: anItem at: aClock.! !

!methodRemoval: Cart #add: stamp: 'RL 12/2/2020 19:04:28'!
add: anItem

	^ self add: 1 of: anItem at: Clock new.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'RL 12/2/2020 19:04:35'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'RL 12/2/2020 19:04:35'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'RL 12/2/2020 19:04:35'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'RL 12/2/2020 19:04:35'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'RL 12/2/2020 19:04:35'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'RL 12/2/2020 19:04:35'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'RL 12/2/2020 19:04:35'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'RL 12/2/2020 19:04:35'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'RL 12/2/2020 19:04:51' prior: 50867875!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [ cart add: testObjectsFactory itemNotSellByTheStore at: testObjectsFactory currentClock]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'RL 12/2/2020 19:05:00' prior: 50867903!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore at: testObjectsFactory currentClock.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'RL 12/2/2020 19:05:06' prior: 50867933!
test06CartRemembersAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore at: testObjectsFactory currentClock.
	self assert: (cart includes: testObjectsFactory itemSellByTheStore)! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'RL 12/2/2020 19:05:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'RL 12/2/2020 19:05:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'RL 12/2/2020 19:05:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'RL 12/2/2020 19:05:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'RL 12/2/2020 19:05:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'RL 12/2/2020 19:05:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'RL 12/2/2020 19:05:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'RL 12/2/2020 19:05:10'!
PASSED!
!Cart methodsFor: 'adding' stamp: 'RL 12/2/2020 19:05:35' prior: 50877518!
add: aQuantity of: anItem at: aClock

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ].
	self updateLastActivityTime: aClock.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:06:06' prior: 50871640!
listItems
	
	^items! !
!Cart methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:06:28'!
listItemsAt: aClock
	self updateLastActivityTime: aClock.
	^items! !

!methodRemoval: Cart #listItems stamp: 'RL 12/2/2020 19:06:34'!
listItems
	
	^items!
!Cart methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:07:03' prior: 50877464!
updateLastActivityTime: aClock

	lastActivityTime := aClock currentTime.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:07:11' prior: 50877469!
validateCartExpiracyAt: aClock
	^aClock currentTime - (Duration minutes: 30) > lastActivityTime.! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 19:07:20'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/2/2020 19:07:20'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 19:07:20'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 19:07:20'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/2/2020 19:07:20'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 19:07:20'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 19:07:20'!
PASSED!

!testRun: #InnerInterfaceTest #test08InvalidCashierCheckoutReturnsErrorMessage stamp: 'RL 12/2/2020 19:07:20'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 19:07:20'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 19:07:20'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 19:07:20'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 19:07:20'!
PASSED!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/2/2020 19:07:20'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/2/2020 19:07:20'!
PASSED!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:13:10' prior: 50877447!
listCart: cartID
	| cart |
	cart := carts at: cartID ifAbsent: [ ^Error signal: self class invalidCartErrorMessage ].
	(cart validateCartExpiracyAt: clock) ifTrue: [ ^Error signal: self class expiredCartErrorMessage ].
	^cart listItemsAt: clock asBag.! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 19:13:15'!
ERROR!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/2/2020 19:13:15'!
ERROR!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 19:13:15'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 19:13:15'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/2/2020 19:13:15'!
ERROR!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 19:13:15'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 19:13:15'!
PASSED!

!testRun: #InnerInterfaceTest #test08InvalidCashierCheckoutReturnsErrorMessage stamp: 'RL 12/2/2020 19:13:15'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 19:13:15'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 19:13:15'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 19:13:15'!
ERROR!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 19:13:15'!
ERROR!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/2/2020 19:13:15'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/2/2020 19:13:15'!
PASSED!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 19:13:29'!
ERROR!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 19:13:29'!
ERROR!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 19:13:38'!
ERROR!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 19:13:38'!
ERROR!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:13:51' prior: 50877775!
listCart: cartID
	| cart |
	cart := carts at: cartID ifAbsent: [ ^Error signal: self class invalidCartErrorMessage ].
	(cart validateCartExpiracyAt: clock) ifTrue: [ ^Error signal: self class expiredCartErrorMessage ].
	^(cart listItemsAt: clock) asBag.! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 19:13:56'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/2/2020 19:13:56'!
FAILURE!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 19:13:56'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 19:13:56'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/2/2020 19:13:56'!
FAILURE!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 19:13:56'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 19:13:56'!
PASSED!

!testRun: #InnerInterfaceTest #test08InvalidCashierCheckoutReturnsErrorMessage stamp: 'RL 12/2/2020 19:13:56'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 19:13:56'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 19:13:56'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 19:13:56'!
FAILURE!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 19:13:56'!
FAILURE!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/2/2020 19:13:56'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/2/2020 19:13:56'!
PASSED!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 19:14:02'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/2/2020 19:14:02'!
FAILURE!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 19:14:02'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 19:14:02'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/2/2020 19:14:02'!
FAILURE!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 19:14:02'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 19:14:02'!
PASSED!

!testRun: #InnerInterfaceTest #test08InvalidCashierCheckoutReturnsErrorMessage stamp: 'RL 12/2/2020 19:14:02'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 19:14:02'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 19:14:02'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 19:14:02'!
FAILURE!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 19:14:02'!
FAILURE!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/2/2020 19:14:02'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/2/2020 19:14:02'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:14:19' prior: 50876388!
test02OneItemCartListsTheItem
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock.	
				
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
		
	self assert: (interface listCart: cartID) equals: (Bag with: testObjectsFactory itemSellByTheStore).! !

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/2/2020 19:14:23'!
PASSED!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 19:14:26'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/2/2020 19:14:26'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 19:14:26'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 19:14:26'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/2/2020 19:14:26'!
FAILURE!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 19:14:26'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 19:14:26'!
PASSED!

!testRun: #InnerInterfaceTest #test08InvalidCashierCheckoutReturnsErrorMessage stamp: 'RL 12/2/2020 19:14:26'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 19:14:26'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 19:14:26'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 19:14:26'!
FAILURE!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 19:14:26'!
FAILURE!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/2/2020 19:14:26'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/2/2020 19:14:26'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:14:34' prior: 50876950!
test05TwoCartInterfaceListsCartItemsCorrectly
	| interface cart1ID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithTwoClients 
				at: testObjectsFactory currentClock .
	
	cart1ID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cart1ID.
	interface createCartFor: testObjectsFactory defaultClientID2 with: testObjectsFactory defaultPassword2.
		
	self assert: (interface listCart: cart1ID) equals: (Bag with: testObjectsFactory itemSellByTheStore).! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:14:41' prior: 50877086!
test22AddingItemToCartUpdatesLastActivityTime
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock. 
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 10.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 21.
	
	self assert: (interface listCart: cartID) equals: (Bag with: testObjectsFactory itemSellByTheStore)! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:14:47' prior: 50877110!
test23ListingCartUpdatesLastActivityTime
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock. 
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 10.
	interface listCart: cartID.
	clock moveForwardMinutes: 21.
	
	self assert: (interface listCart: cartID) equals: (Bag with: testObjectsFactory itemSellByTheStore)! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 19:14:49'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/2/2020 19:14:49'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 19:14:49'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 19:14:49'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/2/2020 19:14:49'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 19:14:49'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 19:14:49'!
PASSED!

!testRun: #InnerInterfaceTest #test08InvalidCashierCheckoutReturnsErrorMessage stamp: 'RL 12/2/2020 19:14:49'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 19:14:49'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 19:14:49'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 19:14:49'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 19:14:49'!
PASSED!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/2/2020 19:14:49'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/2/2020 19:14:49'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'RL 12/2/2020 19:15:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'RL 12/2/2020 19:15:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'RL 12/2/2020 19:15:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'RL 12/2/2020 19:15:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'RL 12/2/2020 19:15:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'RL 12/2/2020 19:15:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'RL 12/2/2020 19:15:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'RL 12/2/2020 19:15:02'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'RL 12/2/2020 19:15:02'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'RL 12/2/2020 19:15:02'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'RL 12/2/2020 19:15:02'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'RL 12/2/2020 19:15:02'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'RL 12/2/2020 19:15:02'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'RL 12/2/2020 19:15:02'!
ERROR!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 19:15:02'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/2/2020 19:15:02'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 19:15:02'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 19:15:02'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/2/2020 19:15:02'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 19:15:02'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 19:15:02'!
PASSED!

!testRun: #InnerInterfaceTest #test08InvalidCashierCheckoutReturnsErrorMessage stamp: 'RL 12/2/2020 19:15:02'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 19:15:02'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 19:15:02'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 19:15:02'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 19:15:02'!
PASSED!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/2/2020 19:15:02'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/2/2020 19:15:02'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'RL 12/2/2020 19:15:23'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'RL 12/2/2020 19:15:23'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'RL 12/2/2020 19:15:54' prior: 50868057!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore at: testObjectsFactory currentClock.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'RL 12/2/2020 19:16:00' prior: 50868078!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore at: testObjectsFactory currentClock..
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'RL 12/2/2020 19:16:11' prior: 50878281!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore at: testObjectsFactory currentClock.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'RL 12/2/2020 19:16:18' prior: 50868122!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore at: testObjectsFactory currentClock.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'RL 12/2/2020 19:16:22' prior: 50868096!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore at: testObjectsFactory currentClock.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'RL 12/2/2020 19:16:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'RL 12/2/2020 19:16:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'RL 12/2/2020 19:16:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'RL 12/2/2020 19:16:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'RL 12/2/2020 19:16:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'RL 12/2/2020 19:16:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'RL 12/2/2020 19:16:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'RL 12/2/2020 19:16:26'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'RL 12/2/2020 19:16:26'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'RL 12/2/2020 19:16:26'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'RL 12/2/2020 19:16:26'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'RL 12/2/2020 19:16:26'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'RL 12/2/2020 19:16:26'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'RL 12/2/2020 19:16:26'!
PASSED!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 19:16:26'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/2/2020 19:16:26'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 19:16:26'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 19:16:26'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/2/2020 19:16:26'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 19:16:26'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 19:16:26'!
PASSED!

!testRun: #InnerInterfaceTest #test08InvalidCashierCheckoutReturnsErrorMessage stamp: 'RL 12/2/2020 19:16:26'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 19:16:26'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 19:16:26'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 19:16:26'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 19:16:26'!
PASSED!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/2/2020 19:16:26'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/2/2020 19:16:26'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:17:53' prior: 50873198!
testsCheckout
	"
	2. validar cartID
	3. validar respuesta caso exitoso
	4. �MP?
	5. credit card number
	"! !
!InnerInterface class methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:23:41'!
newWith: aCatalog for: clients at: aClock communicatingWith: aMerchantProcessor
	^self new initializeWith:  aCatalog for: clients at: aClock communicatingWith: aMerchantProcessor! !

!methodRemoval: InnerInterface class #newWith:for:at: stamp: 'RL 12/2/2020 19:23:59'!
newWith: aCatalog for: clients at: aClock
	^self new initializeWith:  aCatalog for: clients at: aClock!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 19:24:27'!
ERROR!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/2/2020 19:24:27'!
ERROR!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 19:24:27'!
ERROR!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 19:24:27'!
ERROR!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/2/2020 19:24:27'!
ERROR!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 19:24:27'!
ERROR!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 19:24:27'!
ERROR!

!testRun: #InnerInterfaceTest #test08InvalidCashierCheckoutReturnsErrorMessage stamp: 'RL 12/2/2020 19:24:27'!
ERROR!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 19:24:27'!
ERROR!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 19:24:27'!
ERROR!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 19:24:27'!
ERROR!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 19:24:27'!
ERROR!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/2/2020 19:24:27'!
ERROR!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/2/2020 19:24:27'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:25:00' prior: 50876409!
test01NewCartListsNoItems
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock
				communicatingWith: self.
				
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	
	self assert: (interface listCart: cartID) isEmpty.! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 19:25:06'!
ERROR!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 19:25:06'!
ERROR!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:26:25' prior: 50877962!
test02OneItemCartListsTheItem
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock
				communicatingWith: self.	
				
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
		
	self assert: (interface listCart: cartID) equals: (Bag with: testObjectsFactory itemSellByTheStore).! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:26:31' prior: 50876911!
test03CreatingCartForInvalidClientReturnsErrorMessage
	| interface |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory emptyClientDict 
				at: testObjectsFactory currentClock
				communicatingWith: self.
		
	self
		should: [ interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface clientNotRegisteredErrorMessage.
			]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:26:35' prior: 50876930!
test04CreatingCartWithInvalidPasswordReturnsErrorMessage
	| interface |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock
				communicatingWith: self.
	
	self
		should: [ interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword2 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface wrongPasswordErrorMessage.
			]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:26:39' prior: 50878036!
test05TwoCartInterfaceListsCartItemsCorrectly
	| interface cart1ID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithTwoClients 
				at: testObjectsFactory currentClock
				communicatingWith: self.
	
	cart1ID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cart1ID.
	interface createCartFor: testObjectsFactory defaultClientID2 with: testObjectsFactory defaultPassword2.
		
	self assert: (interface listCart: cart1ID) equals: (Bag with: testObjectsFactory itemSellByTheStore).! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:26:44' prior: 50877331!
test06AddingItemToUnregisteredCartReturnsErrorMessage
	| interface |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock
				communicatingWith: self.
		
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: testObjectsFactory invalidCartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:26:48' prior: 50877313!
test07ListingUnregisteredCartReturnsErrorMessage
	| interface |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock
				communicatingWith: self.
				
	self
		should: [ interface listCart: testObjectsFactory invalidCartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:26:52' prior: 50877012!
test08InvalidCashierCheckoutReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	"
	output := interface checkoutCart: cartID 
		withCCNumber: '1111111111111111'
		expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
		ownedBy: 'client1'.
	
	self assert: output equals: (OrderedCollection with: 1 with: 'Can not check out an empty cart')."! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:27:10' prior: 50877037!
test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:27:15' prior: 50877061!
test21CannotListCartIfItHasBeenInactiveFor30Minutes
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface listCart: cartID ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:27:20' prior: 50878060!
test22AddingItemToCartUpdatesLastActivityTime
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 10.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 21.
	
	self assert: (interface listCart: cartID) equals: (Bag with: testObjectsFactory itemSellByTheStore)! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:27:24' prior: 50878083!
test23ListingCartUpdatesLastActivityTime
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 10.
	interface listCart: cartID.
	clock moveForwardMinutes: 21.
	
	self assert: (interface listCart: cartID) equals: (Bag with: testObjectsFactory itemSellByTheStore)! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:27:29' prior: 50877134!
test24ExpiredCartIsNoLongerValid
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	clock moveForwardMinutes: 31.
	
	"self assert: (interface listCart: cartID) equals: (OrderedCollection with: testObjectsFactory itemSellByTheStore)"! !

!classDefinition: #InnerInterface category: 'TusLibros' stamp: 'RL 12/2/2020 19:28:22'!
Object subclass: #InnerInterface
	instanceVariableNames: 'catalog carts registeredClients nextCartID clock cartsLastActivityTime merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:28:21'!
initializeWith: aCatalog for: clients at: aClock communicatingWith: aMerchantProcessor
	catalog := aCatalog.
	carts := Dictionary new.
	registeredClients := clients.
	nextCartID := 1.
	clock := aClock .
	merchantProcessor := aMerchantProcessor ! !

!methodRemoval: InnerInterface #initializeWith:for:at: stamp: 'RL 12/2/2020 19:28:27'!
initializeWith: aCatalog for: clients at: aClock
	catalog := aCatalog.
	carts := Dictionary new.
	registeredClients := clients.
	nextCartID := 1.
	clock := aClock !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:30:05' prior: 50878689!
test08InvalidCashierCheckoutReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	interface checkoutCart: cartID 
		withCCNumber: '1111111111111111'
		expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
		ownedBy: ''.
	! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:32:35' prior: 50878866!
test08InvalidCashierCheckoutReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '1111111111111111'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: ''.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface emptyOwnerNameErrorMessage .
			]
	! !
!InnerInterface class methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:33:12'!
emptyOwnerNameErrorMessage
	^'Credit card owner name is empty.'! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:33:57'!
test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '1111111111111111'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: ''.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface emptyOwnerNameErrorMessage .
			]
	! !

!methodRemoval: InnerInterfaceTest #test08InvalidCashierCheckoutReturnsErrorMessage stamp: 'RL 12/2/2020 19:33:57'!
test08InvalidCashierCheckoutReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '1111111111111111'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: ''.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface emptyOwnerNameErrorMessage .
			]
	!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/2/2020 19:34:02'!
FAILURE!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/2/2020 19:34:02'!
FAILURE!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:35:08' prior: 50873140!
checkoutCart: cartID withCCNumber: aCCNumber expiring: anExpiringDate ownedBy: clientName
	
	Cashier
		toCheckout: (carts at: cartID) 
		charging: (CreditCard expiringOn: anExpiringDate)
		throught: merchantProcessor 
		on: DateAndTime now 
		registeringOn: OrderedCollection new.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:36:55'!
debit: anAmount from: aCreditCard ! !

!methodRemoval: InnerInterface #debit:from: stamp: 'RL 12/2/2020 19:37:01'!
debit: anAmount from: aCreditCard !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:37:08'!
debit: anAmount from: aCreditCard ! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:39:05' prior: 50878983!
checkoutCart: cartID withCCNumber: aCCNumber expiring: anExpiringDate ownedBy: clientName
	clientName isEmpty ifTrue: [ ^Error signal: self class emptyOwnerNameErrorMessage ].
	Cashier
		toCheckout: (carts at: cartID) 
		charging: (CreditCard expiringOn: anExpiringDate)
		throught: merchantProcessor 
		on: DateAndTime now 
		registeringOn: OrderedCollection new.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:39:19' prior: 50879008!
checkoutCart: cartID withCCNumber: aCCNumber expiring: anExpiringDate ownedBy: clientName
	clientName isEmpty ifTrue: [ ^Error signal: self class emptyOwnerNameErrorMessage ].
	"Cashier
		toCheckout: (carts at: cartID) 
		charging: (CreditCard expiringOn: anExpiringDate)
		throught: merchantProcessor 
		on: DateAndTime now 
		registeringOn: OrderedCollection new."! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 19:39:24'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/2/2020 19:39:24'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 19:39:24'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 19:39:24'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/2/2020 19:39:24'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 19:39:24'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 19:39:24'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/2/2020 19:39:24'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 19:39:24'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 19:39:24'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 19:39:24'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 19:39:24'!
PASSED!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/2/2020 19:39:24'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/2/2020 19:39:24'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/2/2020 19:39:31'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:41:01'!
test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '1111111111111111'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface ownerNameLongerThan30ErrorMessage .
			]
	! !
!InnerInterface class methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:41:32'!
ownerNameLongerThan30ErrorMessage
	^'Credit card owner name has more than 30 characters.'! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:42:49' prior: 50879023!
checkoutCart: cartID withCCNumber: aCCNumber expiring: anExpiringDate ownedBy: clientName
	clientName isEmpty ifTrue: [ ^Error signal: self class emptyOwnerNameErrorMessage ].
	clientName size > 30 ifTrue: [ ^Error signal: self class ownerNameLongerThan30ErrorMessage ]
	"Cashier
		toCheckout: (carts at: cartID) 
		charging: (CreditCard expiringOn: anExpiringDate)
		throught: merchantProcessor 
		on: DateAndTime now 
		registeringOn: OrderedCollection new."! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 19:42:53'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/2/2020 19:42:53'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 19:42:53'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 19:42:53'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/2/2020 19:42:53'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 19:42:53'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 19:42:53'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/2/2020 19:42:53'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/2/2020 19:42:53'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 19:42:53'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 19:42:53'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 19:42:53'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 19:42:53'!
PASSED!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/2/2020 19:42:53'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/2/2020 19:42:53'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:44:44'!
test09CreditCardNumberWithNotOnlyDigitsReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '111111111111111a'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface ownerNameLongerThan30ErrorMessage .
			]
	! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:45:18' prior: 50879200!
test09CreditCardNumberWithNotOnlyDigitsReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '111111111111111a'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface nonNumericCCNumberErrorMessage .
			]
	! !
!InnerInterface class methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:46:02'!
nonNumericCCNumberErrorMessage
	^'Credit card number is non numeric.'! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:47:54' prior: 50879127!
checkoutCart: cartID withCCNumber: aCCNumber expiring: anExpiringDate ownedBy: clientName
	clientName isEmpty ifTrue: [ ^Error signal: self class emptyOwnerNameErrorMessage ].
	clientName size > 30 ifTrue: [ ^Error signal: self class ownerNameLongerThan30ErrorMessage ].
	aCCNumber do: [:digit | (digit asciiValue between: 48 and: 57) 
		ifFalse: [ ^Error signal: self class nonNumericCCNumberErrorMessage ]]
	"Cashier
		toCheckout: (carts at: cartID) 
		charging: (CreditCard expiringOn: anExpiringDate)
		throught: merchantProcessor 
		on: DateAndTime now 
		registeringOn: OrderedCollection new."! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 19:47:58'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/2/2020 19:47:58'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 19:47:58'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 19:47:58'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/2/2020 19:47:58'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 19:47:58'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 19:47:58'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/2/2020 19:47:58'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/2/2020 19:47:58'!
PASSED!

!testRun: #InnerInterfaceTest #test09CreditCardNumberWithNotOnlyDigitsReturnsErrorMessage stamp: 'RL 12/2/2020 19:47:58'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 19:47:58'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 19:47:58'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 19:47:58'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 19:47:58'!
PASSED!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/2/2020 19:47:58'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/2/2020 19:47:58'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:48:10'!
test10CreditCardNumberWithNotOnlyDigitsReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '111111111111111a'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface nonNumericCCNumberErrorMessage .
			]
	! !

!methodRemoval: InnerInterfaceTest #test09CreditCardNumberWithNotOnlyDigitsReturnsErrorMessage stamp: 'RL 12/2/2020 19:48:10'!
test09CreditCardNumberWithNotOnlyDigitsReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '111111111111111a'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface nonNumericCCNumberErrorMessage .
			]
	!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:50:31'!
test10CCNumberSizeSmallerThan16ReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '111111111111111'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidSizeOfCCNumberErrorMessage .
			]
	! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:51:06' prior: 50879399!
test10CCNumberSizeSmallerThan16ReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '111111111111111'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCCNumberLengthErrorMessage .
			]
	! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:51:17'!
test10CCNumberLengthSmallerThan16ReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '111111111111111'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCCNumberLengthErrorMessage .
			]
	! !

!methodRemoval: InnerInterfaceTest #test10CCNumberSizeSmallerThan16ReturnsErrorMessage stamp: 'RL 12/2/2020 19:51:17'!
test10CCNumberSizeSmallerThan16ReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '111111111111111'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCCNumberLengthErrorMessage .
			]
	!
!InnerInterface class methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:52:11'!
invalidCCNumberLengthErrorMessage
	^'Credit card length is invalid.'! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:53:33' prior: 50879262!
checkoutCart: cartID withCCNumber: aCCNumber expiring: anExpiringDate ownedBy: clientName
	clientName isEmpty ifTrue: [ ^Error signal: self class emptyOwnerNameErrorMessage ].
	clientName size > 30 ifTrue: [ ^Error signal: self class ownerNameLongerThan30ErrorMessage ].
	aCCNumber do: [:digit | (digit asciiValue between: 48 and: 57) 
		ifFalse: [ ^Error signal: self class nonNumericCCNumberErrorMessage ]].
	aCCNumber size ~= 16 ifTrue: [ ^Error signal: self class invalidCCNumberLengthErrorMessage ]
	"Cashier
		toCheckout: (carts at: cartID) 
		charging: (CreditCard expiringOn: anExpiringDate)
		throught: merchantProcessor 
		on: DateAndTime now 
		registeringOn: OrderedCollection new."! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:53:54'!
test11CCNumberLengthSmallerThan16ReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '111111111111111'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCCNumberLengthErrorMessage .
			]
	! !

!methodRemoval: InnerInterfaceTest #test10CCNumberLengthSmallerThan16ReturnsErrorMessage stamp: 'RL 12/2/2020 19:53:54'!
test10CCNumberLengthSmallerThan16ReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '111111111111111'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCCNumberLengthErrorMessage .
			]
	!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:54:43'!
test11CCNumberLengthDifferentFrom16ReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '111111111111111'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCCNumberLengthErrorMessage .
			]
	! !

!methodRemoval: InnerInterfaceTest #test11CCNumberLengthSmallerThan16ReturnsErrorMessage stamp: 'RL 12/2/2020 19:54:43'!
test11CCNumberLengthSmallerThan16ReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '111111111111111'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCCNumberLengthErrorMessage .
			]
	!

!testRun: #InnerInterfaceTest #test11CCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/2/2020 19:55:06'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:57:30' prior: 50879596!
test11CCNumberLengthDifferentFrom16ReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: testObjectsFactory invalidCartID 
				withCCNumber: '111111111111111'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]
	! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:58:45'!
test12CheckoutWithAnInvalidCartIDReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: testObjectsFactory invalidCartID 
				withCCNumber: '111111111111111'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]
	! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:59:01' prior: 50879684!
test12CheckoutWithAnInvalidCartIDReturnsErrorMessage
	| interface |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: testObjectsFactory invalidCartID 
				withCCNumber: '111111111111111'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]
	! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:54:43' prior: 50879656!
test11CCNumberLengthDifferentFrom16ReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '111111111111111'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCCNumberLengthErrorMessage .
			]
	! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 19:59:32' prior: 50879343!
test10CreditCardNumberWithNotOnlyDigitsReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '111111111111111a'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface nonNumericCCNumberErrorMessage .
			]
	! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:00:23'!
test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '111111111111111a'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface nonNumericCCNumberErrorMessage .
			]
	! !

!methodRemoval: InnerInterfaceTest #test10CreditCardNumberWithNotOnlyDigitsReturnsErrorMessage stamp: 'RL 12/2/2020 20:00:23'!
test10CreditCardNumberWithNotOnlyDigitsReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '111111111111111a'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface nonNumericCCNumberErrorMessage .
			]
	!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:00:39'!
test11CheckingOutWithCCNumberLengthDifferentFrom16ReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '111111111111111'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCCNumberLengthErrorMessage .
			]
	! !

!methodRemoval: InnerInterfaceTest #test11CCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/2/2020 20:00:39'!
test11CCNumberLengthDifferentFrom16ReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '111111111111111'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCCNumberLengthErrorMessage .
			]
	!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:01:05'!
test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '111111111111111'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCCNumberLengthErrorMessage .
			]
	! !

!methodRemoval: InnerInterfaceTest #test11CheckingOutWithCCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/2/2020 20:01:05'!
test11CheckingOutWithCCNumberLengthDifferentFrom16ReturnsErrorMessage
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '111111111111111'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCCNumberLengthErrorMessage .
			]
	!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/2/2020 20:01:32'!
FAILURE!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/2/2020 20:01:32'!
FAILURE!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 20:01:37'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/2/2020 20:01:37'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 20:01:37'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 20:01:37'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/2/2020 20:01:37'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 20:01:37'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 20:01:37'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/2/2020 20:01:37'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/2/2020 20:01:37'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/2/2020 20:01:37'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/2/2020 20:01:37'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/2/2020 20:01:37'!
FAILURE!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 20:01:37'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 20:01:37'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 20:01:37'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 20:01:37'!
PASSED!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/2/2020 20:01:37'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/2/2020 20:01:37'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/2/2020 20:01:37'!
FAILURE!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:02:31' prior: 50879515!
checkoutCart: cartID withCCNumber: aCCNumber expiring: anExpiringDate ownedBy: clientName
	| cart |
	clientName isEmpty ifTrue: [ ^Error signal: self class emptyOwnerNameErrorMessage ].
	clientName size > 30 ifTrue: [ ^Error signal: self class ownerNameLongerThan30ErrorMessage ].
	aCCNumber do: [:digit | (digit asciiValue between: 48 and: 57) 
		ifFalse: [ ^Error signal: self class nonNumericCCNumberErrorMessage ]].
	aCCNumber size ~= 16 ifTrue: [ ^Error signal: self class invalidCCNumberLengthErrorMessage ].
	cart := carts at: cartID ifAbsent: [ ^Error signal: self class invalidCartErrorMessage ].
	"Cashier
		toCheckout: (carts at: cartID) 
		charging: (CreditCard expiringOn: anExpiringDate)
		throught: merchantProcessor 
		on: DateAndTime now 
		registeringOn: OrderedCollection new."! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:02:46' prior: 50880045!
checkoutCart: cartID withCCNumber: aCCNumber expiring: anExpiringDate ownedBy: clientName
	| cart |
	clientName isEmpty ifTrue: [ ^Error signal: self class emptyOwnerNameErrorMessage ].
	clientName size > 30 ifTrue: [ ^Error signal: self class ownerNameLongerThan30ErrorMessage ].
	aCCNumber do: [:digit | (digit asciiValue between: 48 and: 57) 
		ifFalse: [ ^Error signal: self class nonNumericCCNumberErrorMessage ]].
	aCCNumber size ~= 16 ifTrue: [ ^Error signal: self class invalidCCNumberLengthErrorMessage ].
	cart := carts at: cartID ifAbsent: [ ^Error signal: self class invalidCartErrorMessage ].
	"Cashier
		toCheckout: cart
		charging: (CreditCard expiringOn: anExpiringDate)
		throught: merchantProcessor 
		on: DateAndTime now 
		registeringOn: OrderedCollection new."! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 20:02:54'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/2/2020 20:02:54'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 20:02:54'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 20:02:54'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/2/2020 20:02:54'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 20:02:54'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 20:02:54'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/2/2020 20:02:54'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/2/2020 20:02:54'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/2/2020 20:02:54'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/2/2020 20:02:54'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/2/2020 20:02:54'!
FAILURE!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 20:02:54'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 20:02:54'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 20:02:54'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 20:02:54'!
PASSED!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/2/2020 20:02:54'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/2/2020 20:02:54'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/2/2020 20:02:54'!
FAILURE!

anError messageText!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:03:34' prior: 50879712!
test12CheckoutWithAnInvalidCartIDReturnsErrorMessage
	| interface |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock 
				communicatingWith: self.
	
	interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	
	self
		should: [ 
			interface checkoutCart: testObjectsFactory invalidCartID 
				withCCNumber: '1111111111111111'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'.
			 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]
	! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 20:03:38'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/2/2020 20:03:38'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 20:03:38'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 20:03:38'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/2/2020 20:03:38'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 20:03:38'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 20:03:38'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/2/2020 20:03:38'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/2/2020 20:03:38'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/2/2020 20:03:38'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/2/2020 20:03:38'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/2/2020 20:03:38'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 20:03:38'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 20:03:38'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 20:03:38'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 20:03:38'!
PASSED!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/2/2020 20:03:38'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/2/2020 20:03:38'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:14:21' prior: 50878815!
test24ExpiredCartIsNoLongerValid
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 31.
	! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:15:44' prior: 50880270!
test24ExpiredCartIsNoLongerValid
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface listCart: cartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage .
			].
	
	self
		should: [ interface listCart: cartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/2/2020 20:15:51'!
FAILURE!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/2/2020 20:15:51'!
FAILURE!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:17:17' prior: 50877418!
add: aQuantity of: anItem toCart: aCartID
	| cart |
	cart := carts at: aCartID ifAbsent: [ ^Error signal: self class invalidCartErrorMessage ].
	(cart validateCartExpiracyAt: clock) ifTrue: [ 
		carts remove: aCartID .
		^Error signal: self class expiredCartErrorMessage 
		].
	cart add: aQuantity of: anItem at: clock.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:17:59' prior: 50877849!
listCart: cartID
	| cart |
	cart := carts at: cartID ifAbsent: [ ^Error signal: self class invalidCartErrorMessage ].
	(cart validateCartExpiracyAt: clock) ifTrue: [ 
		carts remove: cartID .
		^Error signal: self class expiredCartErrorMessage 
		].
	^(cart listItemsAt: clock) asBag.! !

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/2/2020 20:18:08'!
FAILURE!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/2/2020 20:18:08'!
FAILURE!

anError messageText!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:19:31' prior: 50880336!
listCart: cartID
	| cart |
	cart := carts at: cartID ifAbsent: [ ^Error signal: self class invalidCartErrorMessage ].
	(cart validateCartExpiracyAt: clock) ifTrue: [ 
		carts removeKey: cartID .
		^Error signal: self class expiredCartErrorMessage 
		].
	^(cart listItemsAt: clock) asBag.! !

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/2/2020 20:19:39'!
PASSED!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/2/2020 20:19:52'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:19:59' prior: 50880287!
test24ExpiredCartIsNoLongerValid
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 31.
	
	"self
		should: [ interface listCart: cartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage .
			]."
	
	self
		should: [ interface listCart: cartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/2/2020 20:20:02'!
FAILURE!

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/2/2020 20:20:02'!
FAILURE!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:20:07' prior: 50880375!
test24ExpiredCartIsNoLongerValid
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface listCart: cartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage .
			].
	
	self
		should: [ interface listCart: cartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !

!testRun: #InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/2/2020 20:20:10'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:21:36'!
test24ListingExpiredCartMakesItsIDInvalid
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface listCart: cartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage .
			].
	
	self
		should: [ interface listCart: cartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !

!methodRemoval: InnerInterfaceTest #test24ExpiredCartIsNoLongerValid stamp: 'RL 12/2/2020 20:21:40'!
test24ExpiredCartIsNoLongerValid
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface listCart: cartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage .
			].
	
	self
		should: [ interface listCart: cartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:22:03'!
test25AddingItemToExpiredCartMakesItsIDInvalid
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface listCart: cartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage .
			].
	
	self
		should: [ interface listCart: cartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:22:28' prior: 50880497!
test25AddingItemToExpiredCartMakesItsIDInvalid
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface listCart: cartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage .
			].
	
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 20:22:32'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:22:54' prior: 50880526!
test25AddingItemToExpiredCartMakesItsIDInvalid
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage .
			].
	
	self
		should: [ interface listCart: cartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 20:22:57'!
FAILURE!

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 20:22:57'!
FAILURE!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:23:06' prior: 50880322!
add: aQuantity of: anItem toCart: aCartID
	| cart |
	cart := carts at: aCartID ifAbsent: [ ^Error signal: self class invalidCartErrorMessage ].
	(cart validateCartExpiracyAt: clock) ifTrue: [ 
		carts removeKey: aCartID .
		^Error signal: self class expiredCartErrorMessage 
		].
	cart add: aQuantity of: anItem at: clock.! !

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 20:23:12'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:25:09'!
test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:26:04' prior: 50880615!
test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 31.
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '1111111111111111'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'. 
			]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !

!testRun: #InnerInterfaceTest #test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 20:26:09'!
FAILURE!

!testRun: #InnerInterfaceTest #test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 20:26:09'!
FAILURE!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:26:54' prior: 50880074!
checkoutCart: cartID withCCNumber: aCCNumber expiring: anExpiringDate ownedBy: clientName
	| cart |
	clientName isEmpty ifTrue: [ ^Error signal: self class emptyOwnerNameErrorMessage ].
	clientName size > 30 ifTrue: [ ^Error signal: self class ownerNameLongerThan30ErrorMessage ].
	aCCNumber do: [:digit | (digit asciiValue between: 48 and: 57) 
		ifFalse: [ ^Error signal: self class nonNumericCCNumberErrorMessage ]].
	aCCNumber size ~= 16 ifTrue: [ ^Error signal: self class invalidCCNumberLengthErrorMessage ].
	cart := carts at: cartID ifAbsent: [ ^Error signal: self class invalidCartErrorMessage ].
	
	
	"Cashier
		toCheckout: cart
		charging: (CreditCard expiringOn: anExpiringDate)
		throught: merchantProcessor 
		on: DateAndTime now 
		registeringOn: OrderedCollection new."! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:27:42' prior: 50880677!
checkoutCart: cartID withCCNumber: aCCNumber expiring: anExpiringDate ownedBy: clientName
	| cart |
	
	(cart validateCartExpiracyAt: clock) ifTrue: [ 
		"carts removeKey: cartID ."
		^Error signal: self class expiredCartErrorMessage 
		].
	
	clientName isEmpty ifTrue: [ ^Error signal: self class emptyOwnerNameErrorMessage ].
	clientName size > 30 ifTrue: [ ^Error signal: self class ownerNameLongerThan30ErrorMessage ].
	aCCNumber do: [:digit | (digit asciiValue between: 48 and: 57) 
		ifFalse: [ ^Error signal: self class nonNumericCCNumberErrorMessage ]].
	aCCNumber size ~= 16 ifTrue: [ ^Error signal: self class invalidCCNumberLengthErrorMessage ].
	cart := carts at: cartID ifAbsent: [ ^Error signal: self class invalidCartErrorMessage ].
	
	
	"Cashier
		toCheckout: cart
		charging: (CreditCard expiringOn: anExpiringDate)
		throught: merchantProcessor 
		on: DateAndTime now 
		registeringOn: OrderedCollection new."! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:28:12' prior: 50880705!
checkoutCart: cartID withCCNumber: aCCNumber expiring: anExpiringDate ownedBy: clientName
	| cart |
	cart := carts at: cartID ifAbsent: [ ^Error signal: self class invalidCartErrorMessage ].
	(cart validateCartExpiracyAt: clock) ifTrue: [ 
		"carts removeKey: cartID ."
		^Error signal: self class expiredCartErrorMessage 
		].	
	clientName isEmpty ifTrue: [ ^Error signal: self class emptyOwnerNameErrorMessage ].
	clientName size > 30 ifTrue: [ ^Error signal: self class ownerNameLongerThan30ErrorMessage ].
	aCCNumber do: [:digit | (digit asciiValue between: 48 and: 57) 
		ifFalse: [ ^Error signal: self class nonNumericCCNumberErrorMessage ]].
	aCCNumber size ~= 16 ifTrue: [ ^Error signal: self class invalidCCNumberLengthErrorMessage ].
		
	"Cashier
		toCheckout: cart
		charging: (CreditCard expiringOn: anExpiringDate)
		throught: merchantProcessor 
		on: DateAndTime now 
		registeringOn: OrderedCollection new."! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 20:28:18'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/2/2020 20:28:18'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 20:28:18'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 20:28:18'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/2/2020 20:28:18'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 20:28:18'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 20:28:18'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/2/2020 20:28:18'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/2/2020 20:28:18'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/2/2020 20:28:18'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/2/2020 20:28:18'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/2/2020 20:28:18'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 20:28:18'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 20:28:18'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 20:28:18'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 20:28:18'!
PASSED!

!testRun: #InnerInterfaceTest #test24ListingExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 20:28:18'!
PASSED!

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 20:28:18'!
PASSED!

!testRun: #InnerInterfaceTest #test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 20:28:18'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/2/2020 20:28:18'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:30:12'!
test27CheckingOutExpiredCartMakesItsIDInvalid
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage .
			].
	
	self
		should: [ interface listCart: cartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:30:38' prior: 50880846!
test27CheckingOutExpiredCartMakesItsIDInvalid
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 31.
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '1111111111111111'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'. 
			]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage .
			].
	
	self
		should: [ interface listCart: cartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !

!testRun: #InnerInterfaceTest #test27CheckingOutExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 20:30:42'!
FAILURE!

!testRun: #InnerInterfaceTest #test27CheckingOutExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 20:30:42'!
FAILURE!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:30:51' prior: 50880738!
checkoutCart: cartID withCCNumber: aCCNumber expiring: anExpiringDate ownedBy: clientName
	| cart |
	cart := carts at: cartID ifAbsent: [ ^Error signal: self class invalidCartErrorMessage ].
	(cart validateCartExpiracyAt: clock) ifTrue: [ 
		carts removeKey: cartID .
		^Error signal: self class expiredCartErrorMessage 
		].	
	clientName isEmpty ifTrue: [ ^Error signal: self class emptyOwnerNameErrorMessage ].
	clientName size > 30 ifTrue: [ ^Error signal: self class ownerNameLongerThan30ErrorMessage ].
	aCCNumber do: [:digit | (digit asciiValue between: 48 and: 57) 
		ifFalse: [ ^Error signal: self class nonNumericCCNumberErrorMessage ]].
	aCCNumber size ~= 16 ifTrue: [ ^Error signal: self class invalidCCNumberLengthErrorMessage ].
		
	"Cashier
		toCheckout: cart
		charging: (CreditCard expiringOn: anExpiringDate)
		throught: merchantProcessor 
		on: DateAndTime now 
		registeringOn: OrderedCollection new."! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 20:30:53'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/2/2020 20:30:53'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 20:30:53'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 20:30:53'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/2/2020 20:30:53'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 20:30:53'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 20:30:53'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/2/2020 20:30:53'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/2/2020 20:30:53'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/2/2020 20:30:53'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/2/2020 20:30:53'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/2/2020 20:30:53'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 20:30:53'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 20:30:53'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 20:30:53'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 20:30:53'!
PASSED!

!testRun: #InnerInterfaceTest #test24ListingExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 20:30:53'!
PASSED!

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 20:30:53'!
PASSED!

!testRun: #InnerInterfaceTest #test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 20:30:53'!
PASSED!

!testRun: #InnerInterfaceTest #test27CheckingOutExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 20:30:53'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/2/2020 20:30:53'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:31:49'!
test27CheckingOutCartMakesItsIDInvalid
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	interface checkoutCart: cartID 
		withCCNumber: '1111111111111111'
		expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
		ownedBy: 'Alan Kay'.
	
	self
		should: [ interface listCart: cartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:32:00'!
test28CheckingOutCartMakesItsIDInvalid
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	interface checkoutCart: cartID 
		withCCNumber: '1111111111111111'
		expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
		ownedBy: 'Alan Kay'.
	
	self
		should: [ interface listCart: cartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !

!methodRemoval: InnerInterfaceTest #test27CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/2/2020 20:32:00'!
test27CheckingOutCartMakesItsIDInvalid
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	interface checkoutCart: cartID 
		withCCNumber: '1111111111111111'
		expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
		ownedBy: 'Alan Kay'.
	
	self
		should: [ interface listCart: cartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]!

!testRun: #InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/2/2020 20:32:11'!
FAILURE!

!testRun: #InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/2/2020 20:32:11'!
FAILURE!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:32:29' prior: 50880918!
checkoutCart: cartID withCCNumber: aCCNumber expiring: anExpiringDate ownedBy: clientName
	| cart |
	cart := carts at: cartID ifAbsent: [ ^Error signal: self class invalidCartErrorMessage ].
	(cart validateCartExpiracyAt: clock) ifTrue: [ 
		carts removeKey: cartID .
		^Error signal: self class expiredCartErrorMessage 
		].	
	clientName isEmpty ifTrue: [ ^Error signal: self class emptyOwnerNameErrorMessage ].
	clientName size > 30 ifTrue: [ ^Error signal: self class ownerNameLongerThan30ErrorMessage ].
	aCCNumber do: [:digit | (digit asciiValue between: 48 and: 57) 
		ifFalse: [ ^Error signal: self class nonNumericCCNumberErrorMessage ]].
	aCCNumber size ~= 16 ifTrue: [ ^Error signal: self class invalidCCNumberLengthErrorMessage ].
		
	"Cashier
		toCheckout: cart
		charging: (CreditCard expiringOn: anExpiringDate)
		throught: merchantProcessor 
		on: DateAndTime now 
		registeringOn: OrderedCollection new."
		
	carts removeKey: cartID.! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 20:32:53'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/2/2020 20:32:53'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 20:32:53'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 20:32:53'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/2/2020 20:32:53'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 20:32:53'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 20:32:53'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/2/2020 20:32:53'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/2/2020 20:32:53'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/2/2020 20:32:53'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/2/2020 20:32:53'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/2/2020 20:32:53'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 20:32:53'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 20:32:53'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 20:32:53'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 20:32:53'!
PASSED!

!testRun: #InnerInterfaceTest #test24ListingExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 20:32:53'!
PASSED!

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 20:32:53'!
PASSED!

!testRun: #InnerInterfaceTest #test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 20:32:53'!
PASSED!

!testRun: #InnerInterfaceTest #test27CheckingOutExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 20:32:53'!
PASSED!

!testRun: #InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/2/2020 20:32:53'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/2/2020 20:32:53'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:33:11'!
test13CannotAddItemToCartIfItHasBeenInactiveFor30Minutes
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !

!methodRemoval: InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 20:33:11'!
test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:33:36'!
test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !

!methodRemoval: InnerInterfaceTest #test13CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 20:33:36'!
test13CannotAddItemToCartIfItHasBeenInactiveFor30Minutes
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 31.
	
	self
		should: [ interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:44:24'!
test13ListingPurchasesForInvalidClientReturnsErrorMessage
	| interface |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory emptyClientDict 
				at: testObjectsFactory currentClock
				communicatingWith: self.
		
	self
		should: [ interface listPurchasesFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface clientNotRegisteredErrorMessage.
			]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:45:14' prior: 50881334!
test13ListingPurchasesForInvalidClientReturnsErrorMessage
	| interface |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory emptyClientDict 
				at: testObjectsFactory currentClock
				communicatingWith: self.
		
	self
		should: [ interface listPurchasesFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface clientNotRegisteredErrorMessage.
			]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:45:56' prior: 50881354!
test13ListingPurchasesForInvalidClientReturnsErrorMessage
	| interface |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory emptyClientDict 
				at: testObjectsFactory currentClock
				communicatingWith: self.
		
	self
		should: [ interface listPurchasesFor: testObjectsFactory invalidCartID with: testObjectsFactory defaultPassword1 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface clientNotRegisteredErrorMessage.
			]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:46:23' prior: 50881374!
test13ListingPurchasesForInvalidClientReturnsErrorMessage
	| interface |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory emptyClientDict 
				at: testObjectsFactory currentClock
				communicatingWith: self.
		
	self
		should: [ interface listPurchasesFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface clientNotRegisteredErrorMessage.
			]! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:46:54'!
listPurchasesFor: clientID with: clientPassword
	(registeredClients includesKey: clientID) ifFalse: [ ^Error signal: self class clientNotRegisteredErrorMessage ].
	"((registeredClients at: clientID) = clientPassword) ifFalse: [^Error signal: self class wrongPasswordErrorMessage ].
	nextCartID := nextCartID + 1.	
	carts add: nextCartID->(Cart acceptingItemsOf: catalog at: clock).
	^nextCartID copy."! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 20:47:06'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/2/2020 20:47:06'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 20:47:06'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 20:47:06'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/2/2020 20:47:06'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 20:47:06'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 20:47:06'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/2/2020 20:47:06'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/2/2020 20:47:06'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/2/2020 20:47:06'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/2/2020 20:47:06'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/2/2020 20:47:06'!
PASSED!

!testRun: #InnerInterfaceTest #test13ListingPurchasesForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 20:47:06'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 20:47:06'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 20:47:06'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 20:47:06'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 20:47:06'!
PASSED!

!testRun: #InnerInterfaceTest #test24ListingExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 20:47:06'!
PASSED!

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 20:47:06'!
PASSED!

!testRun: #InnerInterfaceTest #test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 20:47:06'!
PASSED!

!testRun: #InnerInterfaceTest #test27CheckingOutExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 20:47:06'!
PASSED!

!testRun: #InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/2/2020 20:47:06'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/2/2020 20:47:06'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:48:08'!
test14ListingPurchasesWithInvalidPasswordReturnsErrorMessage
	| interface |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock
				communicatingWith: self.
	
	self
		should: [ interface listPurchasesFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword2 ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface wrongPasswordErrorMessage.
			]! !

!testRun: #InnerInterfaceTest #test14ListingPurchasesWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 20:48:12'!
FAILURE!

!testRun: #InnerInterfaceTest #test14ListingPurchasesWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 20:48:12'!
FAILURE!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:48:29' prior: 50881414!
listPurchasesFor: clientID with: clientPassword
	(registeredClients includesKey: clientID) ifFalse: [ ^Error signal: self class clientNotRegisteredErrorMessage ].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^Error signal: self class wrongPasswordErrorMessage ].
	"nextCartID := nextCartID + 1.	
	carts add: nextCartID->(Cart acceptingItemsOf: catalog at: clock).
	^nextCartID copy."! !

!testRun: #InnerInterfaceTest #test14ListingPurchasesWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 20:48:35'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:53:54'!
test15NewClientHasNoPurchases
	| interface |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock
				communicatingWith: self.
	
	self
		assert: (interface listPurchasesFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1)
		equals: (OrderedCollection with: 0)! !

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/2/2020 20:54:00'!
FAILURE!

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/2/2020 20:54:00'!
FAILURE!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:54:59' prior: 50881546!
listPurchasesFor: clientID with: clientPassword
	(registeredClients includesKey: clientID) ifFalse: [ ^Error signal: self class clientNotRegisteredErrorMessage ].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^Error signal: self class wrongPasswordErrorMessage ].
	^OrderedCollection with: 0! !

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/2/2020 20:55:06'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:57:12'!
test16CheckingOutAddsAPurchaseToTheClient
	| interface |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock
				communicatingWith: self.
				
	
	
	self
		assert: (interface listPurchasesFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1)
		equals: (OrderedCollection with: 0)! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:57:57' prior: 50881605!
test16CheckingOutAddsAPurchaseToTheClient
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock
				communicatingWith: self.
				
	
	interface checkoutCart: cartID 
		withCCNumber: '1111111111111111'
		expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
		ownedBy: 'Alan Kay'.
	
	self
		assert: (interface listPurchasesFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1)
		equals: (OrderedCollection with: 0)! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:58:40' prior: 50881622!
test16CheckingOutAddsAPurchaseToTheClient
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock
				communicatingWith: self.
				
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	interface checkoutCart: cartID 
		withCCNumber: '1111111111111111'
		expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
		ownedBy: 'Alan Kay'.
	
	self
		assert: (interface listPurchasesFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1)
		equals: (OrderedCollection with: 0)! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 20:59:52' prior: 50881646!
test16CheckingOutAddsAPurchaseToTheClient
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock
				communicatingWith: self.
				
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	interface checkoutCart: cartID 
		withCCNumber: '1111111111111111'
		expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
		ownedBy: 'Alan Kay'.
	
	self
		assert: (interface listPurchasesFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1)
		equals: (OrderedCollection with: testObjectsFactory itemSellByTheStore with: 1 with: 100)! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 21:01:25' prior: 50881673!
test16CheckingOutAddsAPurchaseToTheClient
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock
				communicatingWith: self.
				
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	interface checkoutCart: cartID 
		withCCNumber: '1111111111111111'
		expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
		ownedBy: 'Alan Kay'.
	
	self
		assert: (interface listPurchasesFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1)
		equals: 
			(OrderedCollection 
				with: testObjectsFactory itemSellByTheStore 
				with: 1 
				with: (testObjectsFactory defaultCatalog at: testObjectsFactory defaultCatalog ))! !

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/2/2020 21:01:45'!
ERROR!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/2/2020 21:01:45'!
ERROR!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 21:02:14' prior: 50881704!
test16CheckingOutAddsAPurchaseToTheClient
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock
				communicatingWith: self.
				
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	interface checkoutCart: cartID 
		withCCNumber: '1111111111111111'
		expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
		ownedBy: 'Alan Kay'.
	
	self
		assert: (interface listPurchasesFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1)
		equals: 
			(OrderedCollection 
				with: testObjectsFactory itemSellByTheStore 
				with: 1 
				with: (testObjectsFactory defaultCatalog at: testObjectsFactory itemSellByTheStore ))! !

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/2/2020 21:02:20'!
FAILURE!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/2/2020 21:02:20'!
FAILURE!
!Cashier methodsFor: 'checkout - private' stamp: 'RL 12/2/2020 21:08:29' prior: 50867961!
registerSale

	salesBook add: self createSale "(cart listItemsAt: clock) asBag"! !
!Cart methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 21:09:23' prior: 50877704!
listItemsAt: aClock
	self updateLastActivityTime: aClock.
	^self listItems.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 21:09:40'!
listItems
	^items! !
!Cashier methodsFor: 'checkout - private' stamp: 'RL 12/2/2020 21:11:07' prior: 50881786!
registerSale

	salesBook add: self createSale "cart listItems asBag"! !

Object subclass: #Cart
	instanceVariableNames: 'catalog items lastActivityTime clientID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'RL 12/2/2020 21:13:54'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items lastActivityTime clientID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'RL 12/2/2020 21:14:28'!
initializeAcceptingItemsOf: aCatalog at: aClock for: aClientID
	clientID := aClientID .
	catalog := aCatalog.
	items := OrderedCollection new.
	lastActivityTime := aClock currentTime.! !

!methodRemoval: Cart #initializeAcceptingItemsOf:at: stamp: 'RL 12/2/2020 21:14:51'!
initializeAcceptingItemsOf: aCatalog at: aClock

	catalog := aCatalog.
	items := OrderedCollection new.
	lastActivityTime := aClock currentTime.!
!Cart class methodsFor: 'instance creation' stamp: 'RL 12/2/2020 21:15:19'!
acceptingItemsOf: aCatalog at: aClock for: aClientID

	^self new initializeAcceptingItemsOf: aCatalog at: aClock for: aClientID! !

!methodRemoval: Cart class #acceptingItemsOf:at: stamp: 'RL 12/2/2020 21:15:39'!
acceptingItemsOf: aCatalog at: aClock

	^self new initializeAcceptingItemsOf: aCatalog at: aClock!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 21:16:07' prior: 50877431!
createCartFor: clientID with: clientPassword
	(registeredClients includesKey: clientID) ifFalse: [ ^Error signal: self class clientNotRegisteredErrorMessage ].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^Error signal: self class wrongPasswordErrorMessage ].
	nextCartID := nextCartID + 1.	
	carts add: nextCartID->(Cart acceptingItemsOf: catalog at: clock for: clientID).
	^nextCartID copy.! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'RL 12/2/2020 21:16:25' prior: 50877513!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog at: self currentClock for: self defaultClientID1 ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #InnerInterfaceTest #test13ListingPurchasesForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #InnerInterfaceTest #test14ListingPurchasesWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/2/2020 21:17:18'!
FAILURE!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #InnerInterfaceTest #test24ListingExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #InnerInterfaceTest #test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #InnerInterfaceTest #test27CheckingOutExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/2/2020 21:17:18'!
PASSED!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/2/2020 21:17:18'!
FAILURE!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 21:17:37' prior: 50881745!
test16CheckingOutAddsAPurchaseToTheClient
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock
				communicatingWith: self.
				
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	interface checkoutCart: cartID 
		withCCNumber: '1111111111111111'
		expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
		ownedBy: 'Alan Kay'.
	
	"self
		assert: (interface listPurchasesFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1)
		equals: 
			(OrderedCollection 
				with: testObjectsFactory itemSellByTheStore 
				with: 1 
				with: (testObjectsFactory defaultCatalog at: testObjectsFactory itemSellByTheStore ))"! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #InnerInterfaceTest #test13ListingPurchasesForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #InnerInterfaceTest #test14ListingPurchasesWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #InnerInterfaceTest #test24ListingExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #InnerInterfaceTest #test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #InnerInterfaceTest #test27CheckingOutExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/2/2020 21:17:40'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/2/2020 21:17:40'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 21:17:48' prior: 50882017!
test16CheckingOutAddsAPurchaseToTheClient
	| interface cartID |
	
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: testObjectsFactory currentClock
				communicatingWith: self.
				
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1 .
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	interface checkoutCart: cartID 
		withCCNumber: '1111111111111111'
		expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
		ownedBy: 'Alan Kay'.
	
	self
		assert: (interface listPurchasesFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1)
		equals: 
			(OrderedCollection 
				with: testObjectsFactory itemSellByTheStore 
				with: 1 
				with: (testObjectsFactory defaultCatalog at: testObjectsFactory itemSellByTheStore ))! !
!Cashier methodsFor: 'checkout - private' stamp: 'RL 12/2/2020 21:23:48' prior: 50881801!
registerSale

	cart listItems asBag! !

----QUIT----(2 December 2020 21:24:07) CuisUniversity-4384.image priorSource: 17460824!

----STARTUP---- (2 December 2020 21:25:08) as /home/rodrigo/cuis-linux64-nueva/CuisUniversity-4384.image!

!Cashier methodsFor: 'checkout - private' stamp: 'RL 12/2/2020 21:29:54' prior: 50882228!
registerSale
	| itemBag |
	itemBag := cart listItems asBag
	salesBook at: cart clientID put: itemBag.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'RL 12/2/2020 21:30:34'!
clientID
	^clientID ! !

!methodRemoval: Cashier #createSale stamp: 'RL 12/2/2020 21:31:11'!
createSale

	^ Sale of: total
!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'RL 12/2/2020 21:31:48'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'RL 12/2/2020 21:31:48'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'RL 12/2/2020 21:31:48'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #InnerInterfaceTest #test13ListingPurchasesForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #InnerInterfaceTest #test14ListingPurchasesWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/2/2020 21:31:48'!
FAILURE!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #InnerInterfaceTest #test24ListingExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #InnerInterfaceTest #test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #InnerInterfaceTest #test27CheckingOutExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/2/2020 21:31:48'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/2/2020 21:31:48'!
PASSED!
!Cashier methodsFor: 'checkout - private' stamp: 'RL 12/2/2020 21:33:02' prior: 50882239!
registerSale
	| itemBag |
	itemBag := cart listItems asBag
	"salesBook at: cart clientID put: itemBag."! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'RL 12/2/2020 21:33:09'!
FAILURE!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #InnerInterfaceTest #test13ListingPurchasesForInvalidClientReturnsErrorMessage stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #InnerInterfaceTest #test14ListingPurchasesWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/2/2020 21:33:09'!
FAILURE!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 21:33:09'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 21:33:10'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/2/2020 21:33:10'!
PASSED!

!testRun: #InnerInterfaceTest #test24ListingExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 21:33:10'!
PASSED!

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 21:33:10'!
PASSED!

!testRun: #InnerInterfaceTest #test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/2/2020 21:33:10'!
PASSED!

!testRun: #InnerInterfaceTest #test27CheckingOutExpiredCartMakesItsIDInvalid stamp: 'RL 12/2/2020 21:33:10'!
PASSED!

!testRun: #InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/2/2020 21:33:10'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/2/2020 21:33:10'!
PASSED!

(OrderedCollection with: 'hol' with: 1 with: 'chau' with: 2) asDictionary !

(OrderedCollection with: #'hol' with: 1 with: #'chau' with: 2) asDictionary !

----QUIT----(2 December 2020 21:39:23) CuisUniversity-4384.image priorSource: 17618598!

----STARTUP---- (3 December 2020 14:53:22) as /home/rodrigo/cuis-linux64-nueva/CuisUniversity-4384.image!


!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'RL 12/3/2020 14:54:55'!
FAILURE!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #InnerInterfaceTest #test13ListingPurchasesForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #InnerInterfaceTest #test14ListingPurchasesWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/3/2020 14:54:55'!
FAILURE!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #InnerInterfaceTest #test24ListingExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #InnerInterfaceTest #test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #InnerInterfaceTest #test27CheckingOutExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/3/2020 14:54:55'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'RL 12/3/2020 14:56:36'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'RL 12/3/2020 14:56:36'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'RL 12/3/2020 14:56:36'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'RL 12/3/2020 14:56:36'!
FAILURE!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'RL 12/3/2020 14:56:36'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'RL 12/3/2020 14:56:36'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'RL 12/3/2020 14:56:36'!
FAILURE!
!Cashier methodsFor: 'checkout - private' stamp: 'RL 12/3/2020 15:01:38' prior: 50882395!
registerSale
	| itemBag |
	itemBag := cart listItems asBag.
	salesBook at: cart clientID put: itemBag.! !

!classDefinition: #InnerInterface category: 'TusLibros' stamp: 'RL 12/3/2020 15:02:42'!
Object subclass: #InnerInterface
	instanceVariableNames: 'catalog carts registeredClients nextCartID clock cartsLastActivityTime merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 15:02:40' prior: 50881120!
checkoutCart: cartID withCCNumber: aCCNumber expiring: anExpiringDate ownedBy: clientName
	| cart |
	cart := carts at: cartID ifAbsent: [ ^Error signal: self class invalidCartErrorMessage ].
	(cart validateCartExpiracyAt: clock) ifTrue: [ 
		carts removeKey: cartID .
		^Error signal: self class expiredCartErrorMessage 
		].	
	clientName isEmpty ifTrue: [ ^Error signal: self class emptyOwnerNameErrorMessage ].
	clientName size > 30 ifTrue: [ ^Error signal: self class ownerNameLongerThan30ErrorMessage ].
	aCCNumber do: [:digit | (digit asciiValue between: 48 and: 57) 
		ifFalse: [ ^Error signal: self class nonNumericCCNumberErrorMessage ]].
	aCCNumber size ~= 16 ifTrue: [ ^Error signal: self class invalidCCNumberLengthErrorMessage ].
		
	Cashier
		toCheckout: cart
		charging: (CreditCard expiringOn: anExpiringDate)
		throught: merchantProcessor 
		on: DateAndTime now 
		registeringOn: salesBook.
		
	carts removeKey: cartID.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 15:03:22' prior: 50878847!
initializeWith: aCatalog for: clients at: aClock communicatingWith: aMerchantProcessor
	catalog := aCatalog.
	carts := Dictionary new.
	registeredClients := clients.
	nextCartID := 1.
	clock := aClock .
	merchantProcessor := aMerchantProcessor. 
	salesBook := Dictionary new.! !
!Cashier methodsFor: 'checkout - private' stamp: 'RL 12/3/2020 15:08:48' prior: 50882721!
registerSale
	| itemBag newColl |
	itemBag := cart listItems asBag.
	newColl := (salesBook at: cart clientID ifAbsent: [ OrderedCollection new ]) add: itemBag.
	salesBook at: cart put: newColl! !
!Cashier methodsFor: 'checkout - private' stamp: 'RL 12/3/2020 15:10:15' prior: 50882783!
registerSale
	| itemBag resultantSales |
	itemBag := cart listItems asBag.
	resultantSales := (salesBook at: cart clientID ifAbsent: [ OrderedCollection new ]) add: itemBag.
	salesBook at: cart put: resultantSales! !
!Cashier methodsFor: 'checkout - private' stamp: 'RL 12/3/2020 15:10:48' prior: 50882792!
registerSale
	| itemBag resultingSales |
	itemBag := cart listItems asBag.
	resultingSales := (salesBook at: cart clientID ifAbsent: [ OrderedCollection new ]) add: itemBag.
	salesBook at: cart put: resultingSales! !
!Cashier methodsFor: 'checkout - private' stamp: 'RL 12/3/2020 15:11:02' prior: 50882802!
registerSale
	| itemBag resultingSales |
	itemBag := cart listItems asBag.
	resultingSales := (salesBook at: cart clientID ifAbsent: [ OrderedCollection new ]) add: itemBag.
	salesBook at: cart clientID put: resultingSales! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/3/2020 15:11:21'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/3/2020 15:11:21'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 15:11:21'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 15:11:21'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/3/2020 15:11:21'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 15:11:21'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 15:11:21'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/3/2020 15:11:21'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/3/2020 15:11:21'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/3/2020 15:11:21'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/3/2020 15:11:21'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/3/2020 15:11:21'!
PASSED!

!testRun: #InnerInterfaceTest #test13ListingPurchasesForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 15:11:21'!
PASSED!

!testRun: #InnerInterfaceTest #test14ListingPurchasesWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 15:11:21'!
PASSED!

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/3/2020 15:11:21'!
PASSED!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/3/2020 15:11:21'!
FAILURE!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 15:11:21'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 15:11:21'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 15:11:21'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 15:11:21'!
PASSED!

!testRun: #InnerInterfaceTest #test24ListingExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:11:21'!
PASSED!

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:11:21'!
PASSED!

!testRun: #InnerInterfaceTest #test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 15:11:21'!
PASSED!

!testRun: #InnerInterfaceTest #test27CheckingOutExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:11:21'!
PASSED!

!testRun: #InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:11:21'!
ERROR!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/3/2020 15:11:21'!
PASSED!

!testRun: #InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:11:49'!
ERROR!

!testRun: #InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:11:49'!
ERROR!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 15:12:50' prior: 50881057!
test28CheckingOutCartMakesItsIDInvalid
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	interface checkoutCart: cartID 
		withCCNumber: '1111111111111111'
		expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
		ownedBy: 'Alan Kay'.
	
	self
		should: [ interface listCart: cartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !

!testRun: #InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:12:53'!
PASSED!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/3/2020 15:13:00'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/3/2020 15:13:00'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 15:13:00'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 15:13:00'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/3/2020 15:13:00'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 15:13:00'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 15:13:00'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/3/2020 15:13:00'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/3/2020 15:13:00'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/3/2020 15:13:00'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/3/2020 15:13:00'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/3/2020 15:13:00'!
PASSED!

!testRun: #InnerInterfaceTest #test13ListingPurchasesForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 15:13:00'!
PASSED!

!testRun: #InnerInterfaceTest #test14ListingPurchasesWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 15:13:00'!
PASSED!

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/3/2020 15:13:00'!
PASSED!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/3/2020 15:13:00'!
FAILURE!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 15:13:00'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 15:13:00'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 15:13:00'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 15:13:00'!
PASSED!

!testRun: #InnerInterfaceTest #test24ListingExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:13:00'!
PASSED!

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:13:00'!
PASSED!

!testRun: #InnerInterfaceTest #test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 15:13:00'!
PASSED!

!testRun: #InnerInterfaceTest #test27CheckingOutExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:13:00'!
PASSED!

!testRun: #InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:13:00'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/3/2020 15:13:00'!
PASSED!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/3/2020 15:13:00'!
FAILURE!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 15:14:44' prior: 50881589!
listPurchasesFor: clientID with: clientPassword
	| clientPurchases |
	(registeredClients includesKey: clientID) ifFalse: [ ^Error signal: self class clientNotRegisteredErrorMessage ].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^Error signal: self class wrongPasswordErrorMessage ].
	"^OrderedCollection with: 0"
	clientPurchases := salesBook at: clientID.
	! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 15:20:16' prior: 50883062!
listPurchasesFor: clientID with: clientPassword
	| clientPurchases itemList total |
	(registeredClients includesKey: clientID) ifFalse: [ ^Error signal: self class clientNotRegisteredErrorMessage ].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^Error signal: self class wrongPasswordErrorMessage ].
	"^OrderedCollection with: 0"
	clientPurchases := salesBook at: clientID.
	total := 0.
	itemList := Bag new.
	clientPurchases do: [ 
			
		 ]! !

|bag|
bag := Bag new.
bag add: 'hola�' withOccurrences: 4.
bag add: 'chau' withOccurrences: 7.
bag!

|bag|
bag := Bag new.
bag add: 'hola�' withOccurrences: 4.
bag add: 'chau' withOccurrences: 7.
bag asOrderedCollection !

|bag|
bag := Bag new.
bag add: 'hola�' withOccurrences: 4.
bag add: 'chau' withOccurrences: 7.
bag asArray !

|bag|
bag := Bag new.
bag add: 'hola�' withOccurrences: 4.
bag add: 'chau' withOccurrences: 7.
bag sortedElements !

|bag|
bag := Bag new.
bag add: 'hola�' withOccurrences: 4.
bag add: 'chau' withOccurrences: 7.
bag sortedElements asOrderedCollection !

|bag|
bag := Bag new.
bag add: 'hola�' withOccurrences: 4.
bag add: 'chau' withOccurrences: 7.
bag sortedElements at: 1!

|bag|
bag := Bag new.
bag add: 'hola�' withOccurrences: 4.
bag add: 'chau' withOccurrences: 7.
bag sortedElements asOrderedCollection at: 1!

'chau' -> 7 !

'chau' -> 7 !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 15:32:03' prior: 50883077!
listPurchasesFor: clientID with: clientPassword
	| clientPurchases itemList total itemBag |
	(registeredClients includesKey: clientID) ifFalse: [ ^Error signal: self class clientNotRegisteredErrorMessage ].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^Error signal: self class wrongPasswordErrorMessage ].
	"^OrderedCollection with: 0"
	clientPurchases := salesBook at: clientID.
	itemBag := Bag new.
	clientPurchases do: [ :saleBag | itemList addAll: saleBag. ].
	itemList := OrderedCollection new.
	itemBag sortedElements do: [  ].! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 15:35:51' prior: 50883123!
listPurchasesFor: clientID with: clientPassword
	| clientPurchases itemList total itemBag |
	(registeredClients includesKey: clientID) ifFalse: [ ^Error signal: self class clientNotRegisteredErrorMessage ].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^Error signal: self class wrongPasswordErrorMessage ].
	"^OrderedCollection with: 0"
	clientPurchases := salesBook at: clientID.
	itemBag := Bag new.
	clientPurchases do: [ :saleBag | itemBag addAll: saleBag. ].
	itemList := OrderedCollection new.
	total := 0.
	itemBag sortedElements do: [ :itemAssociation |
			total := total + (itemAssociation value * (catalog at: itemAssociation key)).
			(itemList add: itemAssociation key) add: itemAssociation value.
		 ].
	itemList add: total.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 15:36:06' prior: 50883144!
listPurchasesFor: clientID with: clientPassword
	| clientPurchases itemList total itemBag |
	(registeredClients includesKey: clientID) ifFalse: [ ^Error signal: self class clientNotRegisteredErrorMessage ].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^Error signal: self class wrongPasswordErrorMessage ].
	"^OrderedCollection with: 0"
	clientPurchases := salesBook at: clientID.
	itemBag := Bag new.
	clientPurchases do: [ :saleBag | itemBag addAll: saleBag. ].
	itemList := OrderedCollection new.
	total := 0.
	itemBag sortedElements do: [ :itemAssociation |
			total := total + (itemAssociation value * (catalog at: itemAssociation key)).
			(itemList add: itemAssociation key) add: itemAssociation value.
		 ].
	itemList add: total.
	^itemList ! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 15:36:13' prior: 50883171!
listPurchasesFor: clientID with: clientPassword
	| clientPurchases itemList total itemBag |
	(registeredClients includesKey: clientID) ifFalse: [ ^Error signal: self class clientNotRegisteredErrorMessage ].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^Error signal: self class wrongPasswordErrorMessage ].
	clientPurchases := salesBook at: clientID.
	itemBag := Bag new.
	clientPurchases do: [ :saleBag | itemBag addAll: saleBag. ].
	itemList := OrderedCollection new.
	total := 0.
	itemBag sortedElements do: [ :itemAssociation |
			total := total + (itemAssociation value * (catalog at: itemAssociation key)).
			(itemList add: itemAssociation key) add: itemAssociation value.
		 ].
	itemList add: total.
	^itemList ! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/3/2020 15:36:22'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/3/2020 15:36:22'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 15:36:22'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 15:36:22'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/3/2020 15:36:22'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 15:36:22'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 15:36:22'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/3/2020 15:36:22'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/3/2020 15:36:22'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/3/2020 15:36:22'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/3/2020 15:36:22'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/3/2020 15:36:22'!
PASSED!

!testRun: #InnerInterfaceTest #test13ListingPurchasesForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 15:36:22'!
PASSED!

!testRun: #InnerInterfaceTest #test14ListingPurchasesWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 15:36:22'!
PASSED!

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/3/2020 15:36:22'!
ERROR!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/3/2020 15:36:22'!
ERROR!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 15:36:22'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 15:36:22'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 15:36:22'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 15:36:22'!
PASSED!

!testRun: #InnerInterfaceTest #test24ListingExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:36:22'!
PASSED!

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:36:22'!
PASSED!

!testRun: #InnerInterfaceTest #test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 15:36:22'!
PASSED!

!testRun: #InnerInterfaceTest #test27CheckingOutExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:36:22'!
PASSED!

!testRun: #InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:36:22'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/3/2020 15:36:22'!
PASSED!

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/3/2020 15:36:32'!
ERROR!

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/3/2020 15:36:32'!
ERROR!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 15:38:34' prior: 50883199!
listPurchasesFor: clientID with: clientPassword
	| clientPurchases itemList total itemBag |
	(registeredClients includesKey: clientID) ifFalse: [ ^Error signal: self class clientNotRegisteredErrorMessage ].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^Error signal: self class wrongPasswordErrorMessage ].
	clientPurchases := salesBook at: clientID ifAbsent: [ ^OrderedCollection with: 0 ].
	itemBag := Bag new.
	clientPurchases do: [ :saleBag | itemBag addAll: saleBag. ].
	itemList := OrderedCollection new.
	total := 0.
	itemBag sortedElements do: [ :itemAssociation |
			total := total + (itemAssociation value * (catalog at: itemAssociation key)).
			(itemList add: itemAssociation key) add: itemAssociation value.
		 ].
	itemList add: total.
	^itemList ! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/3/2020 15:38:45'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/3/2020 15:38:45'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 15:38:45'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 15:38:45'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/3/2020 15:38:45'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 15:38:45'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 15:38:45'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/3/2020 15:38:45'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/3/2020 15:38:45'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/3/2020 15:38:45'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/3/2020 15:38:45'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/3/2020 15:38:45'!
PASSED!

!testRun: #InnerInterfaceTest #test13ListingPurchasesForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 15:38:45'!
PASSED!

!testRun: #InnerInterfaceTest #test14ListingPurchasesWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 15:38:45'!
PASSED!

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/3/2020 15:38:45'!
PASSED!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/3/2020 15:38:45'!
FAILURE!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 15:38:45'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 15:38:45'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 15:38:45'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 15:38:45'!
PASSED!

!testRun: #InnerInterfaceTest #test24ListingExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:38:45'!
PASSED!

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:38:45'!
PASSED!

!testRun: #InnerInterfaceTest #test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 15:38:45'!
PASSED!

!testRun: #InnerInterfaceTest #test27CheckingOutExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:38:45'!
PASSED!

!testRun: #InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:38:45'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/3/2020 15:38:45'!
PASSED!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/3/2020 15:38:45'!
FAILURE!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/3/2020 15:38:52'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/3/2020 15:38:52'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 15:38:52'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 15:38:52'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/3/2020 15:38:52'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 15:38:52'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 15:38:52'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/3/2020 15:38:52'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/3/2020 15:38:52'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/3/2020 15:38:52'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/3/2020 15:38:52'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/3/2020 15:38:52'!
PASSED!

!testRun: #InnerInterfaceTest #test13ListingPurchasesForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 15:38:52'!
PASSED!

!testRun: #InnerInterfaceTest #test14ListingPurchasesWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 15:38:52'!
PASSED!

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/3/2020 15:38:52'!
PASSED!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/3/2020 15:38:52'!
FAILURE!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 15:38:52'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 15:38:52'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 15:38:52'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 15:38:52'!
PASSED!

!testRun: #InnerInterfaceTest #test24ListingExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:38:52'!
PASSED!

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:38:52'!
PASSED!

!testRun: #InnerInterfaceTest #test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 15:38:52'!
PASSED!

!testRun: #InnerInterfaceTest #test27CheckingOutExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:38:52'!
PASSED!

!testRun: #InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:38:52'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/3/2020 15:38:52'!
PASSED!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/3/2020 15:38:52'!
FAILURE!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/3/2020 15:39:00'!
FAILURE!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/3/2020 15:39:00'!
FAILURE!

clientID!

testObjectsFactory defaultClientID1!

salesBook!

salesBook!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 15:45:12' prior: 50882738!
checkoutCart: cartID withCCNumber: aCCNumber expiring: anExpiringDate ownedBy: clientName
	| cart cashier |
	cart := carts at: cartID ifAbsent: [ ^Error signal: self class invalidCartErrorMessage ].
	(cart validateCartExpiracyAt: clock) ifTrue: [ 
		carts removeKey: cartID .
		^Error signal: self class expiredCartErrorMessage 
		].	
	clientName isEmpty ifTrue: [ ^Error signal: self class emptyOwnerNameErrorMessage ].
	clientName size > 30 ifTrue: [ ^Error signal: self class ownerNameLongerThan30ErrorMessage ].
	aCCNumber do: [:digit | (digit asciiValue between: 48 and: 57) 
		ifFalse: [ ^Error signal: self class nonNumericCCNumberErrorMessage ]].
	aCCNumber size ~= 16 ifTrue: [ ^Error signal: self class invalidCCNumberLengthErrorMessage ].
		
	cashier := Cashier
		toCheckout: cart
		charging: (CreditCard expiringOn: anExpiringDate)
		throught: merchantProcessor 
		on: DateAndTime now 
		registeringOn: salesBook.
	cashier checkOut.
		
	carts removeKey: cartID.! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/3/2020 15:45:22'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/3/2020 15:45:22'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 15:45:22'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 15:45:22'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/3/2020 15:45:22'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 15:45:22'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 15:45:22'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/3/2020 15:45:22'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/3/2020 15:45:22'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/3/2020 15:45:22'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/3/2020 15:45:22'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/3/2020 15:45:22'!
PASSED!

!testRun: #InnerInterfaceTest #test13ListingPurchasesForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 15:45:22'!
PASSED!

!testRun: #InnerInterfaceTest #test14ListingPurchasesWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 15:45:22'!
PASSED!

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/3/2020 15:45:22'!
PASSED!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/3/2020 15:45:22'!
ERROR!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 15:45:22'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 15:45:22'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 15:45:22'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 15:45:22'!
PASSED!

!testRun: #InnerInterfaceTest #test24ListingExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:45:22'!
PASSED!

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:45:22'!
PASSED!

!testRun: #InnerInterfaceTest #test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 15:45:22'!
PASSED!

!testRun: #InnerInterfaceTest #test27CheckingOutExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:45:22'!
PASSED!

!testRun: #InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:45:22'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/3/2020 15:45:22'!
PASSED!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/3/2020 15:45:22'!
ERROR!

catalog!

itemAssociation key!

itemAssociation value!

itemBag sortedElements!

itemBag!

clientPurchases!

clientPurchases!

clientPurchases!
!Cashier methodsFor: 'checkout - private' stamp: 'RL 12/3/2020 15:49:57' prior: 50882812!
registerSale
	| itemBag resultingSales |
	itemBag := cart listItems asBag.
	resultingSales := (salesBook at: cart clientID ifAbsent: [ OrderedCollection new ]) add: itemBag.
	salesBook at: cart clientID put: resultingSales! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/3/2020 15:51:32'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/3/2020 15:51:32'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 15:51:32'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 15:51:32'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/3/2020 15:51:32'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 15:51:32'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 15:51:32'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/3/2020 15:51:32'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/3/2020 15:51:32'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/3/2020 15:51:32'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/3/2020 15:51:32'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/3/2020 15:51:32'!
PASSED!

!testRun: #InnerInterfaceTest #test13ListingPurchasesForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 15:51:32'!
PASSED!

!testRun: #InnerInterfaceTest #test14ListingPurchasesWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 15:51:32'!
PASSED!

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/3/2020 15:51:32'!
PASSED!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/3/2020 15:51:32'!
ERROR!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 15:51:32'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 15:51:32'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 15:51:32'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 15:51:32'!
PASSED!

!testRun: #InnerInterfaceTest #test24ListingExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:51:32'!
PASSED!

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:51:32'!
PASSED!

!testRun: #InnerInterfaceTest #test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 15:51:32'!
PASSED!

!testRun: #InnerInterfaceTest #test27CheckingOutExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:51:32'!
PASSED!

!testRun: #InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/3/2020 15:51:32'!
PASSED!

!testRun: #InnerInterfaceTest #testsCheckout stamp: 'RL 12/3/2020 15:51:32'!
PASSED!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/3/2020 15:51:32'!
ERROR!

clientPurchases!

itemBag!

salesBook at: cart clientID ifAbsent: [ OrderedCollection new ]!

resultingSales!

resultingSales!

salesBook at: cart clientID ifAbsent: [ OrderedCollection new ]!

|bag|
bag := Bag new.
bag add: 'hola�' withOccurrences: 4.
bag add: 'chau' withOccurrences: 7.
bag sortedElements asOrderedCollection at: 1.
OrderedCollection with: bag.!

|bag|
bag := Bag new.
bag add: 'hola�' withOccurrences: 4.
bag add: 'chau' withOccurrences: 7.
bag sortedElements asOrderedCollection at: 1.
OrderedCollection new add: bag.!

|bag|
bag := Bag new.
bag add: 'hola�' withOccurrences: 4.
bag add: 'chau' withOccurrences: 7.
bag sortedElements asOrderedCollection at: 1.
OrderedCollection new addLast: bag.!

|bag|
bag := Bag new.
bag add: 'hola�' withOccurrences: 4.
bag add: 'chau' withOccurrences: 7.
bag sortedElements asOrderedCollection at: 1.
bag add: bag.!

|bag bag1|
bag := Bag new.
bag add: 'hola�' withOccurrences: 4.
bag add: 'chau' withOccurrences: 7.
bag sortedElements asOrderedCollection at: 1.
bag1 := Bag new.
bag1 add: 'aaaaa' withOccurrences: 4.
bag1 add: 'wwwww' withOccurrences: 7.
bag add: bag1.!

|bag bag1|
bag := Bag new.
bag add: 'hola�' withOccurrences: 4.
bag add: 'chau' withOccurrences: 7.
bag sortedElements asOrderedCollection at: 1.
bag1 := Bag new.
bag1 add: 'aaaaa' withOccurrences: 4.
bag1 add: 'wwwww' withOccurrences: 7.
bag addAll: bag1.!

|bag bag1 bagg|
bag := Bag new.
bag add: 'hola�' withOccurrences: 4.
bag add: 'chau' withOccurrences: 7.
bag sortedElements asOrderedCollection at: 1.
bag1 := Bag new.
bag1 add: 'aaaaa' withOccurrences: 4.
bag1 add: 'wwwww' withOccurrences: 7.
bagg := bag addAll: bag1.!

|bag bag1 bagg|
bag := Bag new.
bag add: 'hola�' withOccurrences: 4.
bag add: 'chau' withOccurrences: 7.
bag sortedElements asOrderedCollection at: 1.
bag1 := Bag new.
bag1 add: 'aaaaa' withOccurrences: 4.
bag1 add: 'wwwww' withOccurrences: 7.
bagg := bag addAll: bag1.!

bagg!

OrderedCollection with: bag!

|bag bag1 bagg|
:= Bag new.
bag add: 'hola�' withOccurrences: 4.
bag add: 'chau' withOccurrences: 7.
bag sortedElements asOrderedCollection at: 1.
bag1 := Bag new.
bag1 add: 'aaaaa' withOccurrences: 4.
bag1 add: 'wwwww' withOccurrences: 7.
OrderedCollection with: bag!

|bag bag1|
bag:= Bag new.
bag add: 'hola�' withOccurrences: 4.
bag add: 'chau' withOccurrences: 7.
bag sortedElements asOrderedCollection at: 1.
bag1 := Bag new.
bag1 add: 'aaaaa' withOccurrences: 4.
bag1 add: 'wwwww' withOccurrences: 7.
(OrderedCollection with: bag) add: bag1 !
!Cashier methodsFor: 'checkout - private' stamp: 'RL 12/3/2020 16:06:11' prior: 50883710!
registerSale
	| itemBag resultingSales |
	itemBag := cart listItems asBag.
	resultingSales := (salesBook at: cart clientID ifAbsent: [ OrderedCollection new ]) add: itemBag.
	"salesBook at: cart clientID put: Sale for: itemBag total: total"! !

|bag1 bag2|
bag1 := Bag new.
bag1 add: 'hola' withOccurrences: 1.
bag1 add: 'chau' withOccurrences: 2.
bag2 := Bag new.
bag2 add: 'aaa' withOccurrences: 3.
bag2 add: 'zzz' withOccurrences: 4.
bag1 addAll: bag2!

|bag1 bag2 bag3|
bag1 := Bag new.
bag1 add: 'hola' withOccurrences: 1.
bag1 add: 'chau' withOccurrences: 2.
bag2 := Bag new.
bag2 add: 'aaa' withOccurrences: 3.
bag2 add: 'zzz' withOccurrences: 4.
bag3 := bag1 addAll: bag2.
bag3 copy!

|bag1 bag2 bag3|
bag1 := Bag new.
bag1 add: 'hola' withOccurrences: 1.
bag1 add: 'chau' withOccurrences: 2.
bag2 := Bag new.
bag2 add: 'aaa' withOccurrences: 3.
bag2 add: 'zzz' withOccurrences: 4.
bag3 := Bag new.
bag3 addAll: bag2.
bag3 addAll: bag1.
bag3 copy!
!Cashier methodsFor: 'checkout - private' stamp: 'RL 12/3/2020 16:12:42' prior: 50883900!
registerSale
	| itemBag resultingSales |
	itemBag := cart listItems asBag.
	resultingSales := (salesBook at: cart clientID ifAbsent: [ Bag new ]) addAll: itemBag.
	salesBook at: cart clientID put: resultingSales.! !

!methodRemoval: InnerInterfaceTest #testsCheckout stamp: 'RL 12/3/2020 16:13:18'!
testsCheckout
	"
	2. validar cartID
	3. validar respuesta caso exitoso
	4. �MP?
	5. credit card number
	"!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:15:13' prior: 50883330!
listPurchasesFor: clientID with: clientPassword
	| clientPurchases itemList total |
	(registeredClients includesKey: clientID) ifFalse: [ ^Error signal: self class clientNotRegisteredErrorMessage ].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^Error signal: self class wrongPasswordErrorMessage ].
	clientPurchases := salesBook at: clientID ifAbsent: [ ^OrderedCollection with: 0 ].
	itemList := OrderedCollection new.
	total := 0.
	clientPurchases sortedElements do: [ :itemAssociation |
			total := total + (itemAssociation value * (catalog at: itemAssociation key)).
			(itemList add: itemAssociation key) add: itemAssociation value.
		 ].
	itemList add: total.
	^itemList ! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/3/2020 16:15:21'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/3/2020 16:15:21'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 16:15:21'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 16:15:21'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/3/2020 16:15:21'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 16:15:21'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 16:15:21'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/3/2020 16:15:21'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/3/2020 16:15:21'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/3/2020 16:15:21'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/3/2020 16:15:21'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/3/2020 16:15:21'!
PASSED!

!testRun: #InnerInterfaceTest #test13ListingPurchasesForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 16:15:21'!
PASSED!

!testRun: #InnerInterfaceTest #test14ListingPurchasesWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 16:15:21'!
PASSED!

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/3/2020 16:15:21'!
PASSED!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/3/2020 16:15:21'!
ERROR!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:15:21'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:15:21'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 16:15:21'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 16:15:21'!
PASSED!

!testRun: #InnerInterfaceTest #test24ListingExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:15:21'!
PASSED!

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:15:21'!
PASSED!

!testRun: #InnerInterfaceTest #test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:15:21'!
PASSED!

!testRun: #InnerInterfaceTest #test27CheckingOutExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:15:21'!
PASSED!

!testRun: #InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:15:21'!
PASSED!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/3/2020 16:15:21'!
ERROR!

itemAssociation value!

itemAssociation key!

itemList!

itemList add: itemAssociation key!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:16:51' prior: 50883949!
listPurchasesFor: clientID with: clientPassword
	| clientPurchases itemList total |
	(registeredClients includesKey: clientID) ifFalse: [ ^Error signal: self class clientNotRegisteredErrorMessage ].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^Error signal: self class wrongPasswordErrorMessage ].
	clientPurchases := salesBook at: clientID ifAbsent: [ ^OrderedCollection with: 0 ].
	itemList := OrderedCollection new.
	total := 0.
	clientPurchases sortedElements do: [ :itemAssociation |
			total := total + (itemAssociation value * (catalog at: itemAssociation key)).
			itemList add: itemAssociation key.
			itemList add: itemAssociation value.
		 ].
	itemList add: total.
	^itemList ! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/3/2020 16:16:56'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/3/2020 16:16:56'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 16:16:56'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 16:16:56'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/3/2020 16:16:56'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 16:16:56'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 16:16:56'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/3/2020 16:16:56'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/3/2020 16:16:56'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/3/2020 16:16:56'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/3/2020 16:16:56'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/3/2020 16:16:56'!
PASSED!

!testRun: #InnerInterfaceTest #test13ListingPurchasesForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 16:16:56'!
PASSED!

!testRun: #InnerInterfaceTest #test14ListingPurchasesWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 16:16:56'!
PASSED!

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/3/2020 16:16:56'!
PASSED!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/3/2020 16:16:56'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:16:56'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:16:56'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 16:16:56'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 16:16:56'!
PASSED!

!testRun: #InnerInterfaceTest #test24ListingExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:16:56'!
PASSED!

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:16:56'!
PASSED!

!testRun: #InnerInterfaceTest #test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:16:56'!
PASSED!

!testRun: #InnerInterfaceTest #test27CheckingOutExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:16:56'!
PASSED!

!testRun: #InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:16:56'!
PASSED!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:20:02'!
validCartForID: aCartID
	^carts at: aCartID ifAbsent: [ ^Error signal: self class invalidCartErrorMessage ]! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:20:20' prior: 50880598!
add: aQuantity of: anItem toCart: aCartID
	| cart |
	cart := self validCartForID: aCartID.
	(cart validateCartExpiracyAt: clock) ifTrue: [ 
		carts removeKey: aCartID .
		^Error signal: self class expiredCartErrorMessage 
		].
	cart add: aQuantity of: anItem at: clock.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:20:43' prior: 50883570!
checkoutCart: cartID withCCNumber: aCCNumber expiring: anExpiringDate ownedBy: clientName
	| cart cashier |
	cart := self validCartForID: cartID.
	(cart validateCartExpiracyAt: clock) ifTrue: [ 
		carts removeKey: cartID .
		^Error signal: self class expiredCartErrorMessage 
		].	
	clientName isEmpty ifTrue: [ ^Error signal: self class emptyOwnerNameErrorMessage ].
	clientName size > 30 ifTrue: [ ^Error signal: self class ownerNameLongerThan30ErrorMessage ].
	aCCNumber do: [:digit | (digit asciiValue between: 48 and: 57) 
		ifFalse: [ ^Error signal: self class nonNumericCCNumberErrorMessage ]].
	aCCNumber size ~= 16 ifTrue: [ ^Error signal: self class invalidCCNumberLengthErrorMessage ].
		
	cashier := Cashier
		toCheckout: cart
		charging: (CreditCard expiringOn: anExpiringDate)
		throught: merchantProcessor 
		on: DateAndTime now 
		registeringOn: salesBook.
	cashier checkOut.
		
	carts removeKey: cartID.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:20:52' prior: 50880356!
listCart: cartID
	| cart |
	cart := self validCartForID: cartID.
	(cart validateCartExpiracyAt: clock) ifTrue: [ 
		carts removeKey: cartID .
		^Error signal: self class expiredCartErrorMessage 
		].
	^(cart listItemsAt: clock) asBag.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:23:43'!
validateExpiracyFor: aCart with: aCartID
	(aCart validateCartExpiracyAt: clock) ifTrue: [ 
		carts removeKey: aCartID.
		^Error signal: self class expiredCartErrorMessage 
		].! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:24:14' prior: 50884203!
add: aQuantity of: anItem toCart: aCartID
	| cart |
	cart := self validCartForID: aCartID.
	self validateExpiracyFor: cart with: aCartID.
	cart add: aQuantity of: anItem at: clock.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:24:41' prior: 50884215!
checkoutCart: cartID withCCNumber: aCCNumber expiring: anExpiringDate ownedBy: clientName
	| cart cashier |
	cart := self validCartForID: cartID.
	self validateExpiracyFor: cart with: cartID.
	clientName isEmpty ifTrue: [ ^Error signal: self class emptyOwnerNameErrorMessage ].
	clientName size > 30 ifTrue: [ ^Error signal: self class ownerNameLongerThan30ErrorMessage ].
	aCCNumber do: [:digit | (digit asciiValue between: 48 and: 57) 
		ifFalse: [ ^Error signal: self class nonNumericCCNumberErrorMessage ]].
	aCCNumber size ~= 16 ifTrue: [ ^Error signal: self class invalidCCNumberLengthErrorMessage ].
		
	cashier := Cashier
		toCheckout: cart
		charging: (CreditCard expiringOn: anExpiringDate)
		throught: merchantProcessor 
		on: DateAndTime now 
		registeringOn: salesBook.
	cashier checkOut.
		
	carts removeKey: cartID.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:24:51' prior: 50884247!
listCart: cartID
	| cart |
	cart := self validCartForID: cartID.
	self validateExpiracyFor: cart with: cartID.
	^(cart listItemsAt: clock) asBag.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:26:37' prior: 50884266!
add: aQuantity of: anItem toCart: aCartID
	| cart |
	cart := self validCartForID: aCartID.
	cart add: aQuantity of: anItem at: clock.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:27:26' prior: 50884196!
validCartForID: aCartID
	| cart |
	cart := carts at: aCartID ifAbsent: [ ^Error signal: self class invalidCartErrorMessage ].
	self validateExpiracyFor: cart with: aCartID.
	^cart! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:27:38' prior: 50884275!
checkoutCart: cartID withCCNumber: aCCNumber expiring: anExpiringDate ownedBy: clientName
	| cart cashier |
	cart := self validCartForID: cartID.
	clientName isEmpty ifTrue: [ ^Error signal: self class emptyOwnerNameErrorMessage ].
	clientName size > 30 ifTrue: [ ^Error signal: self class ownerNameLongerThan30ErrorMessage ].
	aCCNumber do: [:digit | (digit asciiValue between: 48 and: 57) 
		ifFalse: [ ^Error signal: self class nonNumericCCNumberErrorMessage ]].
	aCCNumber size ~= 16 ifTrue: [ ^Error signal: self class invalidCCNumberLengthErrorMessage ].
		
	cashier := Cashier
		toCheckout: cart
		charging: (CreditCard expiringOn: anExpiringDate)
		throught: merchantProcessor 
		on: DateAndTime now 
		registeringOn: salesBook.
	cashier checkOut.
		
	carts removeKey: cartID.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:27:44' prior: 50884305!
listCart: cartID
	| cart |
	cart := self validCartForID: cartID.
	^(cart listItemsAt: clock) asBag.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:29:13'!
validateCCOwnerName: anOwnerName
	anOwnerName isEmpty ifTrue: [ ^Error signal: self class emptyOwnerNameErrorMessage ].
	anOwnerName size > 30 ifTrue: [ ^Error signal: self class ownerNameLongerThan30ErrorMessage ].! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:30:17'!
validateCCNumber: aCCNumber
	aCCNumber do: [:digit | (digit asciiValue between: 48 and: 57) 
		ifFalse: [ ^Error signal: self class nonNumericCCNumberErrorMessage ]].
	aCCNumber size ~= 16 ifTrue: [ ^Error signal: self class invalidCCNumberLengthErrorMessage ].! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:31:10' prior: 50884330!
checkoutCart: cartID withCCNumber: aCCNumber expiring: anExpiringDate ownedBy: anOwnerName
	| cart cashier |
	cart := self validCartForID: cartID.
	self validateCCOwnerName: anOwnerName.
	self validateCCNumber: aCCNumber.
		
	cashier := Cashier
		toCheckout: cart
		charging: (CreditCard expiringOn: anExpiringDate)
		throught: merchantProcessor 
		on: DateAndTime now 
		registeringOn: salesBook.
	cashier checkOut.
		
	carts removeKey: cartID.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:31:27' prior: 50884386!
checkoutCart: cartID withCCNumber: aCCNumber expiring: anExpiringDate ownedBy: anOwnerName
	| cart cashier |
	cart := self validCartForID: cartID.
	self validateCCOwnerName: anOwnerName.
	self validateCCNumber: aCCNumber.
		
	cashier := Cashier
		toCheckout: cart
		charging: (CreditCard expiringOn: anExpiringDate)
		throught: merchantProcessor 
		on: DateAndTime now 
		registeringOn: salesBook.
	
	cashier checkOut.
		
	carts removeKey: cartID.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:32:12'!
authenticate: clientID with: clientPassword
	(registeredClients includesKey: clientID) ifFalse: [ ^Error signal: self class clientNotRegisteredErrorMessage ].
	((registeredClients at: clientID) = clientPassword) ifFalse: [^Error signal: self class wrongPasswordErrorMessage ].! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:32:35' prior: 50881847!
createCartFor: clientID with: clientPassword
	self authenticate: clientID with: clientPassword.
	nextCartID := nextCartID + 1.	
	carts add: nextCartID->(Cart acceptingItemsOf: catalog at: clock for: clientID).
	^nextCartID copy.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:33:22'!
newCartFor: clientID
	^Cart acceptingItemsOf: catalog at: clock for: clientID.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:34:13' prior: 50884433!
createCartFor: clientID with: clientPassword
	self authenticate: clientID with: clientPassword.
	nextCartID := nextCartID + 1.	
	carts add: nextCartID->(self newCartFor: clientID).
	^nextCartID copy.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:35:02'!
generateCartIDFor: clientID
	nextCartID := nextCartID + 1.	
	carts add: nextCartID->(self newCartFor: clientID).
	^nextCartID copy.! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:35:20' prior: 50884449!
createCartFor: clientID with: clientPassword
	self authenticate: clientID with: clientPassword.
	^self generateCartIDFor: clientID! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/3/2020 16:35:32'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/3/2020 16:35:32'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 16:35:32'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 16:35:32'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/3/2020 16:35:32'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 16:35:32'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 16:35:32'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/3/2020 16:35:32'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/3/2020 16:35:32'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/3/2020 16:35:32'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/3/2020 16:35:32'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/3/2020 16:35:32'!
PASSED!

!testRun: #InnerInterfaceTest #test13ListingPurchasesForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 16:35:32'!
PASSED!

!testRun: #InnerInterfaceTest #test14ListingPurchasesWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 16:35:32'!
PASSED!

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/3/2020 16:35:32'!
PASSED!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/3/2020 16:35:32'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:35:32'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:35:32'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 16:35:32'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 16:35:32'!
PASSED!

!testRun: #InnerInterfaceTest #test24ListingExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:35:32'!
PASSED!

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:35:32'!
PASSED!

!testRun: #InnerInterfaceTest #test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:35:32'!
PASSED!

!testRun: #InnerInterfaceTest #test27CheckingOutExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:35:32'!
PASSED!

!testRun: #InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:35:32'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'RL 12/3/2020 16:35:36'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'RL 12/3/2020 16:35:36'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'RL 12/3/2020 16:35:36'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #InnerInterfaceTest #test13ListingPurchasesForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #InnerInterfaceTest #test14ListingPurchasesWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #InnerInterfaceTest #test24ListingExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #InnerInterfaceTest #test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #InnerInterfaceTest #test27CheckingOutExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:35:36'!
PASSED!

!testRun: #InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:35:36'!
PASSED!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:37:37'!
generatePurchasesListFor: clientID
	| clientPurchases itemList total |
	clientPurchases := salesBook at: clientID ifAbsent: [ ^OrderedCollection with: 0 ].
	itemList := OrderedCollection new.
	total := 0.
	clientPurchases sortedElements do: [ :itemAssociation |
			total := total + (itemAssociation value * (catalog at: itemAssociation key)).
			itemList add: itemAssociation key.
			itemList add: itemAssociation value.
		 ].
	itemList add: total.
	^itemList ! !
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:38:31' prior: 50884076!
listPurchasesFor: clientID with: clientPassword
	self authenticate: clientID with: clientPassword. 
	^self generateCartIDFor: clientID.! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/3/2020 16:38:36'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/3/2020 16:38:36'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 16:38:36'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 16:38:36'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/3/2020 16:38:36'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 16:38:36'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 16:38:36'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/3/2020 16:38:36'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/3/2020 16:38:36'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/3/2020 16:38:36'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/3/2020 16:38:36'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/3/2020 16:38:36'!
PASSED!

!testRun: #InnerInterfaceTest #test13ListingPurchasesForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 16:38:36'!
PASSED!

!testRun: #InnerInterfaceTest #test14ListingPurchasesWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 16:38:36'!
PASSED!

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/3/2020 16:38:36'!
FAILURE!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/3/2020 16:38:36'!
FAILURE!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:38:36'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:38:36'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 16:38:36'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 16:38:36'!
PASSED!

!testRun: #InnerInterfaceTest #test24ListingExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:38:36'!
PASSED!

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:38:36'!
PASSED!

!testRun: #InnerInterfaceTest #test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:38:36'!
PASSED!

!testRun: #InnerInterfaceTest #test27CheckingOutExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:38:36'!
PASSED!

!testRun: #InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:38:36'!
PASSED!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/3/2020 16:39:11'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/3/2020 16:39:11'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 16:39:11'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 16:39:11'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/3/2020 16:39:11'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 16:39:11'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 16:39:11'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/3/2020 16:39:11'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/3/2020 16:39:11'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/3/2020 16:39:11'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/3/2020 16:39:11'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/3/2020 16:39:11'!
PASSED!

!testRun: #InnerInterfaceTest #test13ListingPurchasesForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 16:39:11'!
PASSED!

!testRun: #InnerInterfaceTest #test14ListingPurchasesWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 16:39:11'!
PASSED!

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/3/2020 16:39:11'!
FAILURE!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/3/2020 16:39:11'!
FAILURE!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:39:11'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:39:11'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 16:39:11'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 16:39:11'!
PASSED!

!testRun: #InnerInterfaceTest #test24ListingExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:39:11'!
PASSED!

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:39:11'!
PASSED!

!testRun: #InnerInterfaceTest #test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:39:11'!
PASSED!

!testRun: #InnerInterfaceTest #test27CheckingOutExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:39:11'!
PASSED!

!testRun: #InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:39:11'!
PASSED!

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/3/2020 16:39:18'!
FAILURE!

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/3/2020 16:39:18'!
FAILURE!

interface listPurchasesFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1!
!InnerInterface methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:39:59' prior: 50884726!
listPurchasesFor: clientID with: clientPassword
	self authenticate: clientID with: clientPassword. 
	^self generatePurchasesListFor: clientID.! !

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/3/2020 16:40:02'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/3/2020 16:40:02'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 16:40:02'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 16:40:02'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/3/2020 16:40:02'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 16:40:02'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 16:40:02'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/3/2020 16:40:02'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/3/2020 16:40:02'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/3/2020 16:40:02'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/3/2020 16:40:02'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/3/2020 16:40:02'!
PASSED!

!testRun: #InnerInterfaceTest #test13ListingPurchasesForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 16:40:02'!
PASSED!

!testRun: #InnerInterfaceTest #test14ListingPurchasesWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 16:40:02'!
PASSED!

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/3/2020 16:40:02'!
PASSED!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/3/2020 16:40:02'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:40:02'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:40:02'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 16:40:02'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 16:40:02'!
PASSED!

!testRun: #InnerInterfaceTest #test24ListingExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:40:02'!
PASSED!

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:40:02'!
PASSED!

!testRun: #InnerInterfaceTest #test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:40:02'!
PASSED!

!testRun: #InnerInterfaceTest #test27CheckingOutExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:40:02'!
PASSED!

!testRun: #InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:40:02'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'RL 12/3/2020 16:40:43'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'RL 12/3/2020 16:40:43'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'RL 12/3/2020 16:40:43'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'RL 12/3/2020 16:40:43'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'RL 12/3/2020 16:40:43'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'RL 12/3/2020 16:40:43'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'RL 12/3/2020 16:41:00'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'RL 12/3/2020 16:41:00'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'RL 12/3/2020 16:41:00'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'RL 12/3/2020 16:41:00'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'RL 12/3/2020 16:41:00'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'RL 12/3/2020 16:41:00'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'RL 12/3/2020 16:41:08'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'RL 12/3/2020 16:41:08'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'RL 12/3/2020 16:41:46'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'RL 12/3/2020 16:41:46'!
ERROR!

anIndex!

salesBook!
!CashierTest methodsFor: 'tests' stamp: 'RL 12/3/2020 16:43:44' prior: 50877579!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore at: testObjectsFactory currentClock.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: Dictionary new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'RL 12/3/2020 16:43:46'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'RL 12/3/2020 16:43:46'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'RL 12/3/2020 16:43:46'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'RL 12/3/2020 16:43:46'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'RL 12/3/2020 16:43:46'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'RL 12/3/2020 16:43:46'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'RL 12/3/2020 16:43:57' prior: 50878300!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore at: testObjectsFactory currentClock.
	salesBook := Dictionary new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'RL 12/3/2020 16:44:00'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'RL 12/3/2020 16:44:00'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'RL 12/3/2020 16:44:06'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'RL 12/3/2020 16:44:06'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'RL 12/3/2020 16:44:32' prior: 50885126!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore at: testObjectsFactory currentClock.
	salesBook := Dictionary new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook at: testObjectsFactory total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'RL 12/3/2020 16:46:07' prior: 50885157!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore at: testObjectsFactory currentClock.
	salesBook := Dictionary new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.! !
!CashierTest methodsFor: 'tests' stamp: 'RL 12/3/2020 16:46:21' prior: 50885176!
test04CheckoutRegistersASale

	| cart cashier salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore at: testObjectsFactory currentClock.
	salesBook := Dictionary new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	cashier checkOut.
					
	self assert: salesBook size = 1.! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'RL 12/3/2020 16:46:26'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'RL 12/3/2020 16:46:28'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'RL 12/3/2020 16:46:28'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'RL 12/3/2020 16:46:28'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'RL 12/3/2020 16:46:28'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'RL 12/3/2020 16:46:28'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'RL 12/3/2020 16:46:28'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'RL 12/3/2020 16:46:28'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'RL 12/3/2020 16:46:56' prior: 50878319!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore at: testObjectsFactory currentClock.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := Dictionary new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.! !

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'RL 12/3/2020 16:47:14'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'RL 12/3/2020 16:47:20'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'RL 12/3/2020 16:47:20'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'RL 12/3/2020 16:47:20'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'RL 12/3/2020 16:47:20'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'RL 12/3/2020 16:47:20'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'RL 12/3/2020 16:47:20'!
PASSED!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/3/2020 16:47:26'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/3/2020 16:47:26'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 16:47:26'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 16:47:26'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/3/2020 16:47:26'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 16:47:26'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 16:47:26'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/3/2020 16:47:26'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/3/2020 16:47:26'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/3/2020 16:47:26'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/3/2020 16:47:26'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/3/2020 16:47:26'!
PASSED!

!testRun: #InnerInterfaceTest #test13ListingPurchasesForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 16:47:26'!
PASSED!

!testRun: #InnerInterfaceTest #test14ListingPurchasesWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 16:47:26'!
PASSED!

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/3/2020 16:47:26'!
PASSED!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/3/2020 16:47:26'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:47:26'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:47:26'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 16:47:26'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 16:47:26'!
PASSED!

!testRun: #InnerInterfaceTest #test24ListingExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:47:26'!
PASSED!

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:47:26'!
PASSED!

!testRun: #InnerInterfaceTest #test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:47:26'!
PASSED!

!testRun: #InnerInterfaceTest #test27CheckingOutExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:47:26'!
PASSED!

!testRun: #InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:47:26'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:52:04'!
test17CheckingOutExpiredCartMakesItsIDInvalid
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 31.
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '1111111111111111'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'. 
			]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage .
			].
	
	self
		should: [ interface listCart: cartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !

!methodRemoval: InnerInterfaceTest #test27CheckingOutExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:52:04'!
test27CheckingOutExpiredCartMakesItsIDInvalid
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 31.
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '1111111111111111'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'. 
			]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage .
			].
	
	self
		should: [ interface listCart: cartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:52:10'!
test18CheckingOutCartMakesItsIDInvalid
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	interface checkoutCart: cartID 
		withCCNumber: '1111111111111111'
		expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
		ownedBy: 'Alan Kay'.
	
	self
		should: [ interface listCart: cartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]! !

!methodRemoval: InnerInterfaceTest #test28CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:52:10'!
test28CheckingOutCartMakesItsIDInvalid
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	interface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	interface checkoutCart: cartID 
		withCCNumber: '1111111111111111'
		expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
		ownedBy: 'Alan Kay'.
	
	self
		should: [ interface listCart: cartID. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface invalidCartErrorMessage .
			]!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'RL 12/3/2020 16:52:32'!
test19CannotCheckOutCartIfItHasBeenInactiveFor30Minutes
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 31.
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '1111111111111111'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'. 
			]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]! !

!methodRemoval: InnerInterfaceTest #test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:52:32'!
test26CannotCheckOutCartIfItHasBeenInactiveFor30Minutes
	| interface clock cartID |
	
	clock := testObjectsFactory currentClock .
	interface := InnerInterface 
				newWith: testObjectsFactory defaultCatalog 
				for: testObjectsFactory clientDictWithOneClient 
				at: clock
				communicatingWith: self.
	
	cartID := interface createCartFor: testObjectsFactory defaultClientID1 with: testObjectsFactory defaultPassword1.
	clock moveForwardMinutes: 31.
	
	self
		should: [ 
			interface checkoutCart: cartID 
				withCCNumber: '1111111111111111'
				expiring: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) 
				ownedBy: 'Alan Kay'. 
			]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InnerInterface expiredCartErrorMessage.]!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #InnerInterfaceTest #test01NewCartListsNoItems stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #InnerInterfaceTest #test02OneItemCartListsTheItem stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #InnerInterfaceTest #test03CreatingCartForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #InnerInterfaceTest #test04CreatingCartWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #InnerInterfaceTest #test05TwoCartInterfaceListsCartItemsCorrectly stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #InnerInterfaceTest #test06AddingItemToUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #InnerInterfaceTest #test07ListingUnregisteredCartReturnsErrorMessage stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #InnerInterfaceTest #test08CheckoutWithEmptyCCOwnerNameReturnsErrorMessage stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #InnerInterfaceTest #test09CheckoutWithCCOwnerNameLongerThan30CharactersReturnsErrorMessage stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #InnerInterfaceTest #test10CheckingOutWithANonNumericCCNumberReturnsErrorMessage stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #InnerInterfaceTest #test11CheckingOutWithACCNumberLengthDifferentFrom16ReturnsErrorMessage stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #InnerInterfaceTest #test12CheckoutWithAnInvalidCartIDReturnsErrorMessage stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #InnerInterfaceTest #test13ListingPurchasesForInvalidClientReturnsErrorMessage stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #InnerInterfaceTest #test14ListingPurchasesWithInvalidPasswordReturnsErrorMessage stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #InnerInterfaceTest #test15NewClientHasNoPurchases stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #InnerInterfaceTest #test16CheckingOutAddsAPurchaseToTheClient stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #InnerInterfaceTest #test17CheckingOutExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #InnerInterfaceTest #test18CheckingOutCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #InnerInterfaceTest #test19CannotCheckOutCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #InnerInterfaceTest #test20CannotAddItemToCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #InnerInterfaceTest #test21CannotListCartIfItHasBeenInactiveFor30Minutes stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #InnerInterfaceTest #test22AddingItemToCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #InnerInterfaceTest #test23ListingCartUpdatesLastActivityTime stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #InnerInterfaceTest #test24ListingExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:52:38'!
PASSED!

!testRun: #InnerInterfaceTest #test25AddingItemToExpiredCartMakesItsIDInvalid stamp: 'RL 12/3/2020 16:52:38'!
PASSED!