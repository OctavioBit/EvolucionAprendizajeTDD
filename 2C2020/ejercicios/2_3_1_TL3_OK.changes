
----QUIT----(21 November 2020 17:29:34) CuisUniversity-4383.image priorSource: 18898977!

----STARTUP---- (26 November 2020 20:33:00) as C:\Users\Felip\Desktop\Dev\Inge 1\ST\windows64\CuisUniversity-4383.image!

!Cashier methodsFor: 'initialization' stamp: 'FC 11/26/2020 20:36:50' prior: 50921707!
initializeFor: aCart using: aCreditCard withMerchantProcessor: aMerchantProcessor
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.! !
!Cashier methodsFor: 'initialization' stamp: 'FC 11/26/2020 20:37:19'!
initializeFor: aCart using: aCreditCard withMerchantProcessor: aMerchantProcessor registeringOn: aSalesBook 
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'FC 11/26/2020 20:37:19' prior: 50921670!
for: aCart using: aCreditCard withMerchantProcessor: aMerchantProcessor.
	
	aCart isEmpty ifTrue: [
		self error: self emptyCartMessage.
	].
	
	aCreditCard isExpired ifTrue: [
		self error: self creditCardExpiredMessage.
	].
	
	^self new initializeFor: aCart using: aCreditCard withMerchantProcessor: aMerchantProcessor registeringOn: OrderedCollection new.! !

!methodRemoval: Cashier #initializeFor:using:withMerchantProcessor: stamp: 'FC 11/26/2020 20:37:19'!
initializeFor: aCart using: aCreditCard withMerchantProcessor: aMerchantProcessor
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FC 11/26/2020 20:37:29'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'FC 11/26/2020 20:37:28' prior: 50922310!
initializeFor: aCart using: aCreditCard withMerchantProcessor: aMerchantProcessor registeringOn: aSalesBook 
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook = aSalesBook.! !
!Cashier methodsFor: 'initialization' stamp: 'FC 11/26/2020 20:37:34' prior: 50922351!
initializeFor: aCart using: aCreditCard withMerchantProcessor: aMerchantProcessor registeringOn: aSalesBook 
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook.! !
!Cashier class methodsFor: 'instance creation' stamp: 'FC 11/26/2020 20:37:46' prior: 50922320!
for: aCart using: aCreditCard withMerchantProcessor: aMerchantProcessor
	
	aCart isEmpty ifTrue: [
		self error: self emptyCartMessage.
	].
	
	aCreditCard isExpired ifTrue: [
		self error: self creditCardExpiredMessage.
	].
	
	^self new initializeFor: aCart using: aCreditCard withMerchantProcessor: aMerchantProcessor registeringOn: OrderedCollection new.! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'FC 11/26/2020 20:37:55'!
PASSED!

!testRun: #CashierTest #test02checkOutReturnsTotalPriceOfOneItem stamp: 'FC 11/26/2020 20:37:55'!
PASSED!

!testRun: #CashierTest #test03checkOutReturnsTotalPriceOfManyItems stamp: 'FC 11/26/2020 20:37:55'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'FC 11/26/2020 20:37:55'!
PASSED!

!testRun: #CashierTest #test05ValidTransactionGetsBilledCorrectly stamp: 'FC 11/26/2020 20:37:55'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithCardWithInsufficientFunds stamp: 'FC 11/26/2020 20:37:55'!
PASSED!
!Cashier class methodsFor: 'instance creation' stamp: 'FC 11/26/2020 20:38:27' prior: 50922371!
for: aCart using: aCreditCard withMerchantProcessor: aMerchantProcessor
	
	aCart isEmpty ifTrue: [
		self error: self emptyCartMessage.
	].
	
	aCreditCard isExpired ifTrue: [
		self error: self creditCardExpiredMessage.
	].
	
	^self new initializeFor: aCart using: aCreditCard withMerchantProcessor: aMerchantProcessor registeringOn: 1.! !
!Cashier class methodsFor: 'instance creation' stamp: 'FC 11/26/2020 20:39:07'!
for: aCart using: aCreditCard withMerchantProcessor: aMerchantProcessor registeringOn: aSalesBook 
	
	aCart isEmpty ifTrue: [
		self error: self emptyCartMessage.
	].
	
	aCreditCard isExpired ifTrue: [
		self error: self creditCardExpiredMessage.
	].
	
	^self new initializeFor: aCart using: aCreditCard withMerchantProcessor: aMerchantProcessor registeringOn: 1.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FC 11/26/2020 20:39:07' prior: 50922064!
test05ValidTransactionGetsBilledCorrectly
	| aCart aCashier total|
	
	aCart := Cart withCatalog: aCatalog .
	
	aCart add: 2 copiesOf: aBook.
	
	aCashier := Cashier for: aCart using: aValidCreditCard withMerchantProcessor: aMerchantProcessor registeringOn: OrderedCollection new.
	
	total := aCashier checkOut.
	
	self assert: total equals: aBookPrice * 2.
	self assert: aMerchantProcessor amountBilled equals: total.
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FC 11/26/2020 20:39:07' prior: 50922092!
test06CanNotCheckoutWithCardWithInsufficientFunds
	| aCart aCashier anInvalidTransactionMerchantProcessor |
	
	aCart := Cart withCatalog: aCatalog .
	
	anInvalidTransactionMerchantProcessor := InsufficientFundsMerchantProcessorDouble new.
	
	aCart add: 2 copiesOf: aBook.
	
	aCashier := Cashier for: aCart using: aValidCreditCard withMerchantProcessor: anInvalidTransactionMerchantProcessor registeringOn: OrderedCollection new.
	
	self should: [aCashier checkOut] raise: Error withMessageText: Cashier insufficientFundsMessage.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FC 11/26/2020 20:39:07' prior: 50921950!
test01CanNotCheckOutEmptyCart
	| aCart |
	
	aCart := Cart withCatalog: testCatalog.
	
	self should: [ Cashier for: aCart using: aValidCreditCard withMerchantProcessor: aMerchantProcessor registeringOn: OrderedCollection new ] raise: Error withMessageText: Cashier emptyCartMessage.
	
	
	
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FC 11/26/2020 20:39:07' prior: 50922018!
test03checkOutReturnsTotalPriceOfManyItems
	| aCart aCashier total|
	
	aCart := Cart withCatalog: aCatalog .
	
	aCart add: 2 copiesOf: aBook.
	
	aCashier := Cashier for: aCart using: aValidCreditCard withMerchantProcessor: aMerchantProcessor registeringOn: OrderedCollection new.
	
	total := aCashier checkOut.
	
	self assert: total equals: aBookPrice * 2.
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FC 11/26/2020 20:39:07' prior: 50922042!
test04CanNotCheckoutWithExpiredCard
	| aCart |
	
	aCart := Cart withCatalog: aCatalog .
	aCart add: 1 copiesOf: aBook.
	
	
	self should: [Cashier for: aCart using: anExpiredCreditCard withMerchantProcessor: aMerchantProcessor registeringOn: OrderedCollection new] raise: Error withMessageText: Cashier creditCardExpiredMessage.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FC 11/26/2020 20:39:07' prior: 50921993!
test02checkOutReturnsTotalPriceOfOneItem
	| aCart aCashier total|
	
	aCart := Cart withCatalog: aCatalog .
	
	aCart add: 1 copiesOf: aBook.
	
	aCashier := Cashier for: aCart using: aValidCreditCard withMerchantProcessor: aMerchantProcessor registeringOn: OrderedCollection new.
	
	total := aCashier checkOut.
	
	self assert: total equals: aBookPrice.
	
! !

!methodRemoval: Cashier class #for:using:withMerchantProcessor: stamp: 'FC 11/26/2020 20:39:07'!
for: aCart using: aCreditCard withMerchantProcessor: aMerchantProcessor
	
	aCart isEmpty ifTrue: [
		self error: self emptyCartMessage.
	].
	
	aCreditCard isExpired ifTrue: [
		self error: self creditCardExpiredMessage.
	].
	
	^self new initializeFor: aCart using: aCreditCard withMerchantProcessor: aMerchantProcessor registeringOn: 1.!
!Cashier class methodsFor: 'instance creation' stamp: 'FC 11/26/2020 20:39:13' prior: 50922420!
for: aCart using: aCreditCard withMerchantProcessor: aMerchantProcessor registeringOn: aSalesBook 
	
	aCart isEmpty ifTrue: [
		self error: self emptyCartMessage.
	].
	
	aCreditCard isExpired ifTrue: [
		self error: self creditCardExpiredMessage.
	].
	
	^self new initializeFor: aCart using: aCreditCard withMerchantProcessor: aMerchantProcessor registeringOn: aSalesBook ! !
!Cashier class methodsFor: 'instance creation' stamp: 'FC 11/26/2020 20:39:15' prior: 50922542!
for: aCart using: aCreditCard withMerchantProcessor: aMerchantProcessor registeringOn: aSalesBook 
	
	aCart isEmpty ifTrue: [
		self error: self emptyCartMessage.
	].
	
	aCreditCard isExpired ifTrue: [
		self error: self creditCardExpiredMessage.
	].
	
	^self new initializeFor: aCart using: aCreditCard withMerchantProcessor: aMerchantProcessor registeringOn: aSalesBook.! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'FC 11/26/2020 20:39:15'!
PASSED!

!testRun: #CashierTest #test02checkOutReturnsTotalPriceOfOneItem stamp: 'FC 11/26/2020 20:39:15'!
PASSED!

!testRun: #CashierTest #test03checkOutReturnsTotalPriceOfManyItems stamp: 'FC 11/26/2020 20:39:15'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'FC 11/26/2020 20:39:15'!
PASSED!

!testRun: #CashierTest #test05ValidTransactionGetsBilledCorrectly stamp: 'FC 11/26/2020 20:39:15'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithCardWithInsufficientFunds stamp: 'FC 11/26/2020 20:39:15'!
PASSED!
!Cashier methodsFor: 'checkOut' stamp: 'FC 11/26/2020 20:39:42' prior: 50921819!
checkOut
	| total catalog |
	catalog := cart catalog.
	total := 0.
	cart listBooks do: [ :aBook | total := total + catalog at: aBook ].
	
	merchantProcessor debit: total for: creditCard.
	
	salesBook add: total.
	
	^ total.! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'FC 11/26/2020 20:39:44'!
PASSED!

!testRun: #CashierTest #test02checkOutReturnsTotalPriceOfOneItem stamp: 'FC 11/26/2020 20:39:44'!
PASSED!

!testRun: #CashierTest #test03checkOutReturnsTotalPriceOfManyItems stamp: 'FC 11/26/2020 20:39:44'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'FC 11/26/2020 20:39:44'!
PASSED!

!testRun: #CashierTest #test05ValidTransactionGetsBilledCorrectly stamp: 'FC 11/26/2020 20:39:44'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithCardWithInsufficientFunds stamp: 'FC 11/26/2020 20:39:44'!
PASSED!

TestCase subclass: #TusLibrosInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterfaceTest category: 'TusLibros' stamp: 'FC 11/26/2020 21:08:37'!
TestCase subclass: #TusLibrosInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterfaceTest category: 'TusLibros' stamp: 'FC 11/26/2020 21:11:27'!
TestCase subclass: #TusLibrosInterfaceTest
	instanceVariableNames: 'tusLibrosInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FC 11/26/2020 21:11:35'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterfaceTest category: 'TusLibros' stamp: 'FC 11/26/2020 21:11:38'!
TestCase subclass: #TusLibrosInterfaceTest
	instanceVariableNames: 'tusLibrosInterface aCatalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterfaceTest category: 'TusLibros' stamp: 'FC 11/26/2020 21:11:39'!
TestCase subclass: #TusLibrosInterfaceTest
	instanceVariableNames: 'tusLibrosInterface aCatalog registeredUsers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterfaceTest category: 'TusLibros' stamp: 'FC 11/26/2020 21:11:49'!
TestCase subclass: #TusLibrosInterfaceTest
	instanceVariableNames: 'tusLibrosInterface aCatalog registeredUsers aValidUser'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterfaceTest category: 'TusLibros' stamp: 'FC 11/26/2020 21:11:52'!
TestCase subclass: #TusLibrosInterfaceTest
	instanceVariableNames: 'tusLibrosInterface aCatalog registeredUsers aValidUser validUserPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterfaceTest methodsFor: 'nil' stamp: 'FC 11/26/2020 21:11:23'!
test01
	
	| cartId |
	tusLibrosInterface := TusLibrosInterface for: aCatalog withUsers: registeredUsers.
	
	cartId := tusLibrosInterface createCartFor: aValidUser withPassword: validUserPassword.
	
	self assert tusLibrosInterface listCartWithId: cartId isEmpty.
	! !

!classRemoval: #TusLibrosInterface stamp: 'FC 11/26/2020 21:13:06'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #ValidTransactionMerchantProcessorDouble stamp: 'FC 11/26/2020 21:13:06'!
MerchantProcessorDouble subclass: #ValidTransactionMerchantProcessorDouble
	instanceVariableNames: 'billedAmount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #InsufficientFundsMerchantProcessorDouble stamp: 'FC 11/26/2020 21:13:06'!
MerchantProcessorDouble subclass: #InsufficientFundsMerchantProcessorDouble
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessorDouble stamp: 'FC 11/26/2020 21:13:07'!
Object subclass: #MerchantProcessorDouble
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'FC 11/26/2020 21:13:07'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationDate ownerName cardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'FC 11/26/2020 21:13:07'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'FC 11/26/2020 21:13:07'!
Object subclass: #Cart
	instanceVariableNames: 'contents catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #TusLibrosInterfaceTest stamp: 'FC 11/26/2020 21:13:08'!
TestCase subclass: #TusLibrosInterfaceTest
	instanceVariableNames: 'tusLibrosInterface aCatalog registeredUsers aValidUser validUserPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'FC 11/26/2020 21:13:08'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testCatalog aBook aBookPrice anotherBook anotherBookPrice invalidBook aCatalog anExpiredCreditCard aValidCreditCard aMerchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'FC 11/26/2020 21:13:08'!
TestCase subclass: #CartTest
	instanceVariableNames: 'aBook anotherBook invalidBook aCatalog aBookPrice anotherBookPrice'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\Felip\Desktop\Dev\Inge 1\ST\windows64\Iteracion2\TusLibros-33.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FC 11/26/2020 21:14:11'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FC 11/26/2020 21:14:11'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FC 11/26/2020 21:14:11'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FC 11/26/2020 21:14:11'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FC 11/26/2020 21:14:11'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FC 11/26/2020 21:14:11'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FC 11/26/2020 21:14:11'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FC 11/26/2020 21:14:11'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FC 11/26/2020 21:14:11'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FC 11/26/2020 21:14:11'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FC 11/26/2020 21:14:11'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FC 11/26/2020 21:14:11'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FC 11/26/2020 21:14:11'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FC 11/26/2020 21:14:11'!
PASSED!

TestCase subclass: #TusLibrosInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterfaceTest category: 'TusLibros' stamp: 'FC 11/26/2020 21:14:41'!
TestCase subclass: #TusLibrosInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----SNAPSHOT----(26 November 2020 21:38:02) CuisUniversity-4383.image priorSource: 18900616!

----STARTUP---- (27 November 2020 14:46:11) as C:\Users\Felip\Desktop\Dev\Inge 1\ST\windows64\CuisUniversity-4383.image!


----End fileIn of C:\Users\Felip\Downloads\DesignPatterns-Proxy.st----!

----STARTUP---- (29 November 2020 16:38:14) as C:\Users\Felip\Desktop\Dev\Inge 1\ST\windows64\CuisUniversity-4383.image!


!classDefinition: #TusLibrosInterfaceTest category: 'TusLibros' stamp: 'FC 11/29/2020 16:39:57'!
TestCase subclass: #TusLibrosInterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterfaceTest methodsFor: 'no messages' stamp: 'FC 11/29/2020 16:39:54' overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FC 11/29/2020 16:44:48'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 16:44:39'!
test01
	
	|cartId tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	self assert: (tusLibros listCartForId: cartId) isEmpty.! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'FC 11/29/2020 16:45:47'!
defaultUsers
	^Dictionary new add: 'validUser'->'asasas'.! !

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 16:46:16'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 16:46:16'!
ERROR!
!TusLibrosInterface class methodsFor: 'instance creation' stamp: 'FC 11/29/2020 16:46:25'!
forCatalog: aDictionary withUsers: anAssociation through: aTusLibrosInterfaceTest 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeForCatalog: aDictionary withUsers: anAssociation through: aTusLibrosInterfaceTest ! !
!TusLibrosInterface class methodsFor: 'instance creation' stamp: 'FC 11/29/2020 16:47:07' prior: 50923589!
forCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"

	^self new initializeForCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor. ! !

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 16:47:10'!
ERROR!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FC 11/29/2020 16:47:21'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FC 11/29/2020 16:47:21'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog registeredUsers_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FC 11/29/2020 16:47:21'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog registeredUsers_CHANGE_ME merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'initialization' stamp: 'FC 11/29/2020 16:47:21'!
initializeForCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor 
	self shouldBeImplemented.
	catalog := aCatalog.
	registeredUsers_CHANGE_ME := registeredUsers.
	merchantProcessor := aMerchantProcessor.! !
!TusLibrosInterface methodsFor: 'initialization' stamp: 'FC 11/29/2020 16:47:34' prior: 50923640!
initializeForCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor 

	catalog := aCatalog.
	registeredUsers_CHANGE_ME := registeredUsers.
	merchantProcessor := aMerchantProcessor.! !

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 16:47:35'!
ERROR!
!TusLibrosInterface methodsFor: 'cart' stamp: 'FC 11/29/2020 16:47:51'!
createCartForUser: aString withPassword: aString2 
	self shouldBeImplemented.! !

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FC 11/29/2020 16:52:18'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog registeredUsers_CHANGE_ME merchantProcessor lastId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FC 11/29/2020 16:52:20'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog registeredUsers_CHANGE_ME merchantProcessor lastId carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'cart' stamp: 'FC 11/29/2020 16:52:02' prior: 50923663!
createCartForUser: aUser withPassword: aPassword 
	
	| actualPassword cartId |
	actualPassword := registeredUsers_CHANGE_ME at: aUser ifAbsent: [self error: self class invalidUsernameMessage].
	actualPassword = aPassword ifFalse: [self error: self class invalidPasswordMessage].
	
	cartId := lastId + 1.
	lastId := lastId +1.
	
	carts add: cartId->(Cart acceptingItemsOf: catalog).
	
	^cartId.! !

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 16:52:32'!
ERROR!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FC 11/29/2020 16:53:15'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog validUsers merchantProcessor lastId carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 16:53:15' prior: 50923651!
initializeForCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor 

	catalog := aCatalog.
	validUsers := registeredUsers.
	merchantProcessor := aMerchantProcessor.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 16:53:15' prior: 50923687!
createCartForUser: aUser withPassword: aPassword 
	
	| actualPassword cartId |
	actualPassword := validUsers at: aUser ifAbsent: [self error: self class invalidUsernameMessage].
	actualPassword = aPassword ifFalse: [self error: self class invalidPasswordMessage].
	
	cartId := lastId + 1.
	lastId := lastId +1.
	
	carts add: cartId->(Cart acceptingItemsOf: catalog).
	
	^cartId.! !
!StoreTestObjectsFactory methodsFor: 'authentication' stamp: 'FC 11/29/2020 16:53:49' prior: 50923579!
defaultUsers
	^Dictionary new add: ('validUser'->'asasas').! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FC 11/29/2020 16:53:50'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FC 11/29/2020 16:53:50'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FC 11/29/2020 16:53:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FC 11/29/2020 16:53:50'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FC 11/29/2020 16:53:50'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FC 11/29/2020 16:53:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 16:53:50'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FC 11/29/2020 16:53:50'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FC 11/29/2020 16:53:50'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FC 11/29/2020 16:53:50'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FC 11/29/2020 16:53:50'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FC 11/29/2020 16:53:50'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FC 11/29/2020 16:53:50'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FC 11/29/2020 16:53:50'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FC 11/29/2020 16:53:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 16:53:50'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 16:54:01'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'authentication' stamp: 'FC 11/29/2020 16:55:29' prior: 50923740!
defaultUsers
	
	| users |
	users := Dictionary new. 
	users add: ('validUser'->'asasas').
	^users! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FC 11/29/2020 16:55:32'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FC 11/29/2020 16:55:32'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FC 11/29/2020 16:55:32'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FC 11/29/2020 16:55:32'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FC 11/29/2020 16:55:32'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FC 11/29/2020 16:55:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 16:55:32'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FC 11/29/2020 16:55:32'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FC 11/29/2020 16:55:32'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FC 11/29/2020 16:55:32'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FC 11/29/2020 16:55:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FC 11/29/2020 16:55:32'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FC 11/29/2020 16:55:32'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FC 11/29/2020 16:55:32'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FC 11/29/2020 16:55:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 16:55:32'!
ERROR!
!TusLibrosInterface methodsFor: 'initialization' stamp: 'FC 11/29/2020 16:56:11' prior: 50923714!
initializeForCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor 

	catalog := aCatalog.
	validUsers := registeredUsers.
	merchantProcessor := aMerchantProcessor.
	lastId  := 0.
	carts := Dictionary new.! !

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 16:56:12'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 16:56:12'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 16:56:23'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 16:56:23'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 16:56:26'!
ERROR!
!TusLibrosInterface methodsFor: 'accessing' stamp: 'FC 11/29/2020 16:56:33'!
listCartForId: aSmallInteger 
	self shouldBeImplemented.! !
!Cart methodsFor: 'queries' stamp: 'FC 11/29/2020 16:58:29'!
items
	^items.! !
!TusLibrosInterface methodsFor: 'accessing' stamp: 'FC 11/29/2020 16:58:40' prior: 50923879!
listCartForId: aCartId 
	
	|aCart|
	
	aCart := carts at: aCartId ifAbsent: [self error: self class cartNotFoundMessage].
	
	^aCart items.! !

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 16:58:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 16:58:53'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:00:29'!
test02
	
	|tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self.
	
	self should: [tusLibros createCartForUser: 'validUser' withPassword: 'a'] raise: Error withMessageText: TusLibrosInterface invalidPasswordMessage.
	
 	
! !

!testRun: #TusLibrosInterfaceTest #test02 stamp: 'FC 11/29/2020 17:00:33'!
ERROR!
!TusLibrosInterface class methodsFor: 'error' stamp: 'FC 11/29/2020 17:00:42'!
invalidPasswordMessage
	self shouldBeImplemented.! !
!TusLibrosInterface class methodsFor: 'error' stamp: 'FC 11/29/2020 17:00:49' prior: 50923916!
invalidPasswordMessage
	^'Passwor is invalid'.! !

!testRun: #TusLibrosInterfaceTest #test02 stamp: 'FC 11/29/2020 17:00:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 17:00:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02 stamp: 'FC 11/29/2020 17:00:51'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:01:16'!
test03
	
	|tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self.
	
	self should: [tusLibros createCartForUser: 'a' withPassword: 'a'] raise: Error withMessageText: TusLibrosInterface invalidUserMessage.
	
 	
! !

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'FC 11/29/2020 17:01:19'!
ERROR!
!TusLibrosInterface class methodsFor: 'error' stamp: 'FC 11/29/2020 17:01:28'!
invalidUserMessage
	self shouldBeImplemented.! !

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'FC 11/29/2020 17:01:40'!
ERROR!
!TusLibrosInterface class methodsFor: 'error' stamp: 'FC 11/29/2020 17:02:23' prior: 50923949!
invalidUserMessage
	^'User not found'.! !

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 17:02:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02 stamp: 'FC 11/29/2020 17:02:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'FC 11/29/2020 17:02:23'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'FC 11/29/2020 17:02:23'!
FAILURE!
!TusLibrosInterface methodsFor: 'cart' stamp: 'FC 11/29/2020 17:02:37' prior: 50923724!
createCartForUser: aUser withPassword: aPassword 
	
	| actualPassword cartId |
	actualPassword := validUsers at: aUser ifAbsent: [self error: self class invalidUserMessage].
	actualPassword = aPassword ifFalse: [self error: self class invalidPasswordMessage].
	
	cartId := lastId + 1.
	lastId := lastId +1.
	
	carts add: cartId->(Cart acceptingItemsOf: catalog).
	
	^cartId.! !

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 17:02:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02 stamp: 'FC 11/29/2020 17:02:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'FC 11/29/2020 17:02:37'!
PASSED!
!TusLibrosInterface methodsFor: 'cart' stamp: 'FC 11/29/2020 17:05:57'!
authenticateUser: aUsername withPassword: aPassword
	
	|actualPassword| 
	actualPassword := validUsers at: aUsername ifAbsent: [self error: self class invalidUserMessage].
	actualPassword = aPassword ifFalse: [self error: self class invalidPasswordMessage].! !
!TusLibrosInterface methodsFor: 'cart' stamp: 'FC 11/29/2020 17:06:32' prior: 50923972!
createCartForUser: aUser withPassword: aPassword 
	
	| cartId |
	self authenticateUser: aUser withPassword: aPassword.
	
	cartId := lastId + 1.
	lastId := lastId +1.
	
	carts add: cartId->(Cart acceptingItemsOf: catalog).
	
	^cartId.! !
!TusLibrosInterface methodsFor: 'cart' stamp: 'FC 11/29/2020 17:06:51' prior: 50924005!
createCartForUser: aUser withPassword: aPassword 
	
	| cartId |
	self authenticateUser: aUser withPassword: aPassword.
	
	cartId := 
	lastId + 1.
	lastId := lastId +1.
	
	carts add: cartId->(Cart acceptingItemsOf: catalog).
	
	^cartId.! !
!TusLibrosInterface methodsFor: 'cart' stamp: 'FC 11/29/2020 17:06:56' prior: 50924016!
createCartForUser: aUser withPassword: aPassword 
	
	| cartId |
	self authenticateUser: aUser withPassword: aPassword.
	
	cartId := 1.
	lastId + 1.
	lastId := lastId +1.
	
	carts add: cartId->(Cart acceptingItemsOf: catalog).
	
	^cartId.! !
!TusLibrosInterface methodsFor: 'cart' stamp: 'FC 11/29/2020 17:07:04'!
getNewId

	lastId + 1.
	lastId := lastId +1! !
!TusLibrosInterface methodsFor: 'cart' stamp: 'FC 11/29/2020 17:07:04' prior: 50924027!
createCartForUser: aUser withPassword: aPassword 
	
	| cartId |
	self authenticateUser: aUser withPassword: aPassword.
	
	cartId := 1.
	self getNewId.
	
	carts add: cartId->(Cart acceptingItemsOf: catalog).
	
	^cartId.! !
!TusLibrosInterface methodsFor: 'cart' stamp: 'FC 11/29/2020 17:07:13' prior: 50924042!
createCartForUser: aUser withPassword: aPassword 
	
	| cartId |
	self authenticateUser: aUser withPassword: aPassword.
	
	cartId := self getNewId.

	carts add: cartId->(Cart acceptingItemsOf: catalog).
	
	^cartId.! !
!TusLibrosInterface methodsFor: 'cart' stamp: 'FC 11/29/2020 17:07:32' prior: 50924037!
getNewId

	lastId := lastId +1.
	^lastId! !

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 17:07:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02 stamp: 'FC 11/29/2020 17:07:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'FC 11/29/2020 17:07:33'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:09:37'!
test04
	
	|cartId tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	tusLibros addToCart: 1 copiesOf: (testObjectsFactory itemSellByTheStore) forId: cartId.
	
	self assert: (tusLibros listCartForId: cartId) isEmpty.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:10:13' prior: 50924075!
test04
	
	|cartId tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	tusLibros addToCart: 1 of: (testObjectsFactory itemSellByTheStore) forId: cartId.
	
	self assert: (tusLibros listCartForId: cartId) isEmpty.! !

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 17:10:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02 stamp: 'FC 11/29/2020 17:10:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'FC 11/29/2020 17:10:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04 stamp: 'FC 11/29/2020 17:10:19'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test04 stamp: 'FC 11/29/2020 17:10:19'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test04 stamp: 'FC 11/29/2020 17:10:20'!
ERROR!
!TusLibrosInterface methodsFor: 'adding' stamp: 'FC 11/29/2020 17:10:28'!
addToCart: aSmallInteger of: aString forId: aSmallInteger3 
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'adding' stamp: 'FC 11/29/2020 17:13:00' prior: 50924122!
addToCart: aQuantity of: aBook forId: aCartId
	
	| aCart |
	aCart := carts at: aCartId ifAbsent: [self error: self class cartNotFoundMessage].
	
	aCart add: aQuantity of: aBook.
	
	! !

!testRun: #TusLibrosInterfaceTest #test04 stamp: 'FC 11/29/2020 17:13:06'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:13:29' prior: 50924091!
test04
	
	|cartId tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	tusLibros addToCart: 1 of: (testObjectsFactory itemSellByTheStore) forId: cartId.
	
	self assert: (tusLibros listCartForId: cartId) includes: testObjectsFactory itemSellByTheStore .! !

!testRun: #TusLibrosInterfaceTest #test04 stamp: 'FC 11/29/2020 17:13:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 17:13:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02 stamp: 'FC 11/29/2020 17:13:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'FC 11/29/2020 17:13:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04 stamp: 'FC 11/29/2020 17:13:30'!
PASSED!
!TusLibrosInterface class methodsFor: 'error' stamp: 'FC 11/29/2020 17:13:56'!
cartNotFoundMessage
	^'Cart not found'.! !

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 17:13:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02 stamp: 'FC 11/29/2020 17:13:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'FC 11/29/2020 17:13:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04 stamp: 'FC 11/29/2020 17:13:56'!
PASSED!
!TusLibrosInterface methodsFor: 'adding' stamp: 'FC 11/29/2020 17:14:18' prior: 50924128!
addToCart: aQuantity of: aBook forId: aCartId
	
	| aCart |
	aCart := 0
	carts at: aCartId ifAbsent: [self error: self class cartNotFoundMessage].
	
	aCart add: aQuantity of: aBook.
	
	! !
!TusLibrosInterface methodsFor: 'adding' stamp: 'FC 11/29/2020 17:14:19' prior: 50924185!
addToCart: aQuantity of: aBook forId: aCartId
	
	| aCart |
	aCart := 0.
	carts at: aCartId ifAbsent: [self error: self class cartNotFoundMessage].
	
	aCart add: aQuantity of: aBook.
	
	! !
!TusLibrosInterface methodsFor: 'adding' stamp: 'FC 11/29/2020 17:14:29'!
getCartAt: aCartId

	^ carts at: aCartId ifAbsent: [self error: self class cartNotFoundMessage]! !
!TusLibrosInterface methodsFor: 'adding' stamp: 'FC 11/29/2020 17:14:29' prior: 50924194!
addToCart: aQuantity of: aBook forId: aCartId
	
	| aCart |
	aCart := 0.
	self getCartAt: aCartId.
	
	aCart add: aQuantity of: aBook.
	
	! !
!TusLibrosInterface methodsFor: 'adding' stamp: 'FC 11/29/2020 17:14:35' prior: 50924209!
addToCart: aQuantity of: aBook forId: aCartId
	
	| aCart |
	aCart := 	self getCartAt: aCartId.
	
	aCart add: aQuantity of: aBook.
	
	! !

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 17:14:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02 stamp: 'FC 11/29/2020 17:14:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'FC 11/29/2020 17:14:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04 stamp: 'FC 11/29/2020 17:14:36'!
PASSED!
!TusLibrosInterface methodsFor: 'accessing' stamp: 'FC 11/29/2020 17:15:00' prior: 50923887!
listCartForId: aCartId 
	
	|aCart|
	
	aCart := aCart := 	self getCartAt: aCartId.
	
	^aCart items.! !
!TusLibrosInterface methodsFor: 'accessing' stamp: 'FC 11/29/2020 17:15:03' prior: 50924235!
listCartForId: aCartId 
	
	|aCart|
	
	aCart := 	self getCartAt: aCartId.
	
	^aCart items.! !

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 17:15:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02 stamp: 'FC 11/29/2020 17:15:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'FC 11/29/2020 17:15:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04 stamp: 'FC 11/29/2020 17:15:03'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:16:28'!
test05
	
	|cartId tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	tusLibros addToCart: 2 of: (testObjectsFactory itemSellByTheStore) forId: cartId.
	
	self assert: (tusLibros listCartForId: cartId) includes: testObjectsFactory itemSellByTheStore .! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:17:05' prior: 50924259!
test05
	
	|cartId tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	tusLibros addToCart: 2 of: (testObjectsFactory itemSellByTheStore) forId: cartId.
	
	self assert: (tusLibros listCartForId: cartId) includes: testObjectsFactory itemSellByTheStore .
	self assert: ((tusLibros listCartForId: cartId) occurrencesOf: testObjectsFactory itemSellByTheStore) equals: 2 .! !

!testRun: #TusLibrosInterfaceTest #test05 stamp: 'FC 11/29/2020 17:17:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 17:17:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02 stamp: 'FC 11/29/2020 17:17:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'FC 11/29/2020 17:17:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04 stamp: 'FC 11/29/2020 17:17:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05 stamp: 'FC 11/29/2020 17:17:05'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:17:25' prior: 50924277!
test05
	
	|cartId tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	tusLibros addToCart: 2 of: (testObjectsFactory itemSellByTheStore) forId: cartId.
	
	self assert: (tusLibros listCartForId: cartId) includes: testObjectsFactory itemSellByTheStore .
	self assert: ((tusLibros listCartForId: cartId) occurrencesOf: testObjectsFactory itemSellByTheStore) equals: 2.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:18:29'!
test06
	
	|tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self.
	
	
	self should: [tusLibros listCartForId: 1] raise: Error withMessageText: TusLibrosInterface cartNotFoundMessage.! !

!testRun: #TusLibrosInterfaceTest #test06 stamp: 'FC 11/29/2020 17:18:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 17:18:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02 stamp: 'FC 11/29/2020 17:18:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'FC 11/29/2020 17:18:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04 stamp: 'FC 11/29/2020 17:18:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05 stamp: 'FC 11/29/2020 17:18:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06 stamp: 'FC 11/29/2020 17:18:33'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:20:23'!
test07
	
	|tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self.
	
	
	self should: [tusLibros addToCart: 1 of: testObjectsFactory itemNotSellByTheStore forId: 1] raise: Error withMessageText: TusLibrosInterface cartNotFoundMessage.! !

!testRun: #TusLibrosInterfaceTest #test07 stamp: 'FC 11/29/2020 17:20:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 17:20:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02 stamp: 'FC 11/29/2020 17:20:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'FC 11/29/2020 17:20:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04 stamp: 'FC 11/29/2020 17:20:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05 stamp: 'FC 11/29/2020 17:20:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06 stamp: 'FC 11/29/2020 17:20:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07 stamp: 'FC 11/29/2020 17:20:24'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:24:33'!
test08
	
	|cartId tusLibros total |
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	tusLibros addToCart: 1 of: (testObjectsFactory itemSellByTheStore) forId: cartId.
	
	total := tusLibros checkOutCartId: cartId payingWith: testObjectsFactory notExpiredCreditCard.
	
	self assert: total equals: testObjectsFactory itemSellByTheStorePrice.! !
!TusLibrosInterface class methodsFor: 'instance creation' stamp: 'FC 11/29/2020 17:24:50' prior: 50923602!
forCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor 

	^self new initializeForCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor. ! !
!TusLibrosInterface class methodsFor: 'instance creation' stamp: 'FC 11/29/2020 17:25:18'!
forCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor registeringOn: aSalesBook  

	^self new initializeForCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor. ! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:25:18' prior: 50923900!
test02
	
	|tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self registeringOn: OrderedCollection new.
	
	self should: [tusLibros createCartForUser: 'validUser' withPassword: 'a'] raise: Error withMessageText: TusLibrosInterface invalidPasswordMessage.
	
 	
! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:25:18' prior: 50923566!
test01
	
	|cartId tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	self assert: (tusLibros listCartForId: cartId) isEmpty.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:25:18' prior: 50924366!
test07
	
	|tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self registeringOn: OrderedCollection new.
	
	
	self should: [tusLibros addToCart: 1 of: testObjectsFactory itemNotSellByTheStore forId: 1] raise: Error withMessageText: TusLibrosInterface cartNotFoundMessage.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:25:18' prior: 50924335!
test06
	
	|tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self registeringOn: OrderedCollection new.
	
	
	self should: [tusLibros listCartForId: 1] raise: Error withMessageText: TusLibrosInterface cartNotFoundMessage.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:25:18' prior: 50924314!
test05
	
	|cartId tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	tusLibros addToCart: 2 of: (testObjectsFactory itemSellByTheStore) forId: cartId.
	
	self assert: (tusLibros listCartForId: cartId) includes: testObjectsFactory itemSellByTheStore .
	self assert: ((tusLibros listCartForId: cartId) occurrencesOf: testObjectsFactory itemSellByTheStore) equals: 2.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:25:18' prior: 50924401!
test08
	
	|cartId tusLibros total |
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	tusLibros addToCart: 1 of: (testObjectsFactory itemSellByTheStore) forId: cartId.
	
	total := tusLibros checkOutCartId: cartId payingWith: testObjectsFactory notExpiredCreditCard.
	
	self assert: total equals: testObjectsFactory itemSellByTheStorePrice.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:25:18' prior: 50924140!
test04
	
	|cartId tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	tusLibros addToCart: 1 of: (testObjectsFactory itemSellByTheStore) forId: cartId.
	
	self assert: (tusLibros listCartForId: cartId) includes: testObjectsFactory itemSellByTheStore .! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:25:18' prior: 50923934!
test03
	
	|tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self registeringOn: OrderedCollection new.
	
	self should: [tusLibros createCartForUser: 'a' withPassword: 'a'] raise: Error withMessageText: TusLibrosInterface invalidUserMessage.
	
 	
! !

!methodRemoval: TusLibrosInterface class #forCatalog:withUsers:through: stamp: 'FC 11/29/2020 17:25:18'!
forCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor 

	^self new initializeForCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor. !
!TusLibrosInterface methodsFor: 'initialization' stamp: 'FC 11/29/2020 17:26:03'!
initializeForCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor registeringOn: aSalesBook  

	catalog := aCatalog.
	validUsers := registeredUsers.
	merchantProcessor := aMerchantProcessor.
	lastId  := 0.
	carts := Dictionary new.! !
!TusLibrosInterface class methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:26:03' prior: 50924430!
forCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor registeringOn: aSalesBook  

	^self new initializeForCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor registeringOn: aSalesBook. ! !

!methodRemoval: TusLibrosInterface #initializeForCatalog:withUsers:through: stamp: 'FC 11/29/2020 17:26:03'!
initializeForCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor 

	catalog := aCatalog.
	validUsers := registeredUsers.
	merchantProcessor := aMerchantProcessor.
	lastId  := 0.
	carts := Dictionary new.!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FC 11/29/2020 17:26:22'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog validUsers merchantProcessor lastId carts salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'initialization' stamp: 'FC 11/29/2020 17:26:17' prior: 50924584!
initializeForCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor registeringOn: aSalesBook  

	catalog := aCatalog.
	validUsers := registeredUsers.
	merchantProcessor := aMerchantProcessor.
	lastId  := 0.
	carts := Dictionary new.
	salesBook := aSalesBook.! !

!testRun: #TusLibrosInterfaceTest #test08 stamp: 'FC 11/29/2020 17:27:06'!
ERROR!
!TusLibrosInterface methodsFor: 'checkOut' stamp: 'FC 11/29/2020 17:27:16'!
checkOutCartId: aSmallInteger payingWith: aCreditCard 
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'checkOut' stamp: 'FC 11/29/2020 17:28:39' prior: 50924640!
checkOutCartId: aCartId payingWith: aCreditCard 
	
	| cart cashier |
	cart := self getCartAt: aCartId.
	cashier := Cashier toCheckout: cart  charging: aCreditCard  throught: merchantProcessor  on: 1  registeringOn: salesBook.! !

!testRun: #TusLibrosInterfaceTest #test08 stamp: 'FC 11/29/2020 17:28:51'!
ERROR!
!TusLibrosInterface methodsFor: 'checkOut' stamp: 'FC 11/29/2020 17:29:48' prior: 50924646!
checkOutCartId: aCartId payingWith: aCreditCard 
	
	| cart cashier |
	cart := self getCartAt: aCartId.
	cashier := Cashier toCheckout: cart  charging: aCreditCard  throught: merchantProcessor  on: GregorianDate today registeringOn: salesBook.! !

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 17:29:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02 stamp: 'FC 11/29/2020 17:29:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'FC 11/29/2020 17:29:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04 stamp: 'FC 11/29/2020 17:29:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05 stamp: 'FC 11/29/2020 17:29:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06 stamp: 'FC 11/29/2020 17:29:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07 stamp: 'FC 11/29/2020 17:29:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08 stamp: 'FC 11/29/2020 17:29:53'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test08 stamp: 'FC 11/29/2020 17:29:53'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FC 11/29/2020 17:30:14'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FC 11/29/2020 17:30:14'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FC 11/29/2020 17:30:14'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FC 11/29/2020 17:30:14'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FC 11/29/2020 17:30:14'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FC 11/29/2020 17:30:14'!
PASSED!
!TusLibrosInterface class methodsFor: 'instance creation' stamp: 'FC 11/29/2020 17:32:09'!
forCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor on: aDate registeringOn: aSalesBook  

	^self new initializeForCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor registeringOn: aSalesBook. ! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:32:09' prior: 50924542!
test04
	
	|cartId tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self on: testObjectsFactory today registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	tusLibros addToCart: 1 of: (testObjectsFactory itemSellByTheStore) forId: cartId.
	
	self assert: (tusLibros listCartForId: cartId) includes: testObjectsFactory itemSellByTheStore .! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:32:09' prior: 50924499!
test05
	
	|cartId tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self on: testObjectsFactory today registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	tusLibros addToCart: 2 of: (testObjectsFactory itemSellByTheStore) forId: cartId.
	
	self assert: (tusLibros listCartForId: cartId) includes: testObjectsFactory itemSellByTheStore .
	self assert: ((tusLibros listCartForId: cartId) occurrencesOf: testObjectsFactory itemSellByTheStore) equals: 2.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:32:09' prior: 50924440!
test02
	
	|tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self on: testObjectsFactory today registeringOn: OrderedCollection new.
	
	self should: [tusLibros createCartForUser: 'validUser' withPassword: 'a'] raise: Error withMessageText: TusLibrosInterface invalidPasswordMessage.
	
 	
! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:32:09' prior: 50924561!
test03
	
	|tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self on: testObjectsFactory today registeringOn: OrderedCollection new.
	
	self should: [tusLibros createCartForUser: 'a' withPassword: 'a'] raise: Error withMessageText: TusLibrosInterface invalidUserMessage.
	
 	
! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:32:09' prior: 50924470!
test07
	
	|tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self on: testObjectsFactory today registeringOn: OrderedCollection new.
	
	
	self should: [tusLibros addToCart: 1 of: testObjectsFactory itemNotSellByTheStore forId: 1] raise: Error withMessageText: TusLibrosInterface cartNotFoundMessage.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:32:09' prior: 50924455!
test01
	
	|cartId tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self on: testObjectsFactory today registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	self assert: (tusLibros listCartForId: cartId) isEmpty.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:32:09' prior: 50924521!
test08
	
	|cartId tusLibros total |
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self on: testObjectsFactory today registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	tusLibros addToCart: 1 of: (testObjectsFactory itemSellByTheStore) forId: cartId.
	
	total := tusLibros checkOutCartId: cartId payingWith: testObjectsFactory notExpiredCreditCard.
	
	self assert: total equals: testObjectsFactory itemSellByTheStorePrice.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:32:09' prior: 50924485!
test06
	
	|tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self on: testObjectsFactory today registeringOn: OrderedCollection new.
	
	
	self should: [tusLibros listCartForId: 1] raise: Error withMessageText: TusLibrosInterface cartNotFoundMessage.! !

!methodRemoval: TusLibrosInterface class #forCatalog:withUsers:through:registeringOn: stamp: 'FC 11/29/2020 17:32:09'!
forCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor registeringOn: aSalesBook  

	^self new initializeForCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor registeringOn: aSalesBook. !

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FC 11/29/2020 17:32:33'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog validUsers merchantProcessor lastId carts salesBook currentDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'checkOut' stamp: 'FC 11/29/2020 17:32:31' prior: 50924659!
checkOutCartId: aCartId payingWith: aCreditCard 
	
	| cart cashier |
	cart := self getCartAt: aCartId.
	cashier := Cashier toCheckout: cart  charging: aCreditCard  throught: merchantProcessor  on: currentDate registeringOn: salesBook.! !
!TusLibrosInterface methodsFor: 'initialization' stamp: 'FC 11/29/2020 17:33:03'!
initializeForCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor on: aDate registeringOn: aSalesBook  

	catalog := aCatalog.
	validUsers := registeredUsers.
	merchantProcessor := aMerchantProcessor.
	lastId  := 0.
	carts := Dictionary new.
	salesBook := aSalesBook.
	currentDate := aDate.! !

!methodRemoval: TusLibrosInterface #initializeForCatalog:withUsers:through:registeringOn: stamp: 'FC 11/29/2020 17:33:08'!
initializeForCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor registeringOn: aSalesBook  

	catalog := aCatalog.
	validUsers := registeredUsers.
	merchantProcessor := aMerchantProcessor.
	lastId  := 0.
	carts := Dictionary new.
	salesBook := aSalesBook.!
!TusLibrosInterface class methodsFor: 'instance creation' stamp: 'FC 11/29/2020 17:33:18' prior: 50924714!
forCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor on: aDate registeringOn: aSalesBook  

	^self new initializeForCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor on: aDate registeringOn: aSalesBook. ! !

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 17:33:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02 stamp: 'FC 11/29/2020 17:33:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'FC 11/29/2020 17:33:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04 stamp: 'FC 11/29/2020 17:33:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05 stamp: 'FC 11/29/2020 17:33:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06 stamp: 'FC 11/29/2020 17:33:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07 stamp: 'FC 11/29/2020 17:33:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08 stamp: 'FC 11/29/2020 17:33:19'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test08 stamp: 'FC 11/29/2020 17:33:19'!
FAILURE!
!TusLibrosInterface methodsFor: 'checkOut' stamp: 'FC 11/29/2020 17:33:43' prior: 50924889!
checkOutCartId: aCartId payingWith: aCreditCard 
	
	| cart cashier |
	cart := self getCartAt: aCartId.
	cashier := Cashier toCheckout: cart  charging: aCreditCard  throught: merchantProcessor  on: currentDate registeringOn: salesBook.
	
	^cashier checkOut.! !

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 17:33:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02 stamp: 'FC 11/29/2020 17:33:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'FC 11/29/2020 17:33:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04 stamp: 'FC 11/29/2020 17:33:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05 stamp: 'FC 11/29/2020 17:33:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06 stamp: 'FC 11/29/2020 17:33:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07 stamp: 'FC 11/29/2020 17:33:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08 stamp: 'FC 11/29/2020 17:33:43'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test08 stamp: 'FC 11/29/2020 17:33:43'!
ERROR!

!classDefinition: #TusLibrosInterfaceTest category: 'TusLibros' stamp: 'FC 11/29/2020 17:34:04'!
TestCase subclass: #TusLibrosInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:33:58'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:34:21' prior: 50923554 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
		debitBehavior := [ :anAmount :aCreditCard | ]! !

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 17:34:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02 stamp: 'FC 11/29/2020 17:34:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'FC 11/29/2020 17:34:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04 stamp: 'FC 11/29/2020 17:34:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05 stamp: 'FC 11/29/2020 17:34:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06 stamp: 'FC 11/29/2020 17:34:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07 stamp: 'FC 11/29/2020 17:34:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08 stamp: 'FC 11/29/2020 17:34:22'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/29/2020 17:34:26' prior: 50925010 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ]! !

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'FC 11/29/2020 17:34:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02 stamp: 'FC 11/29/2020 17:34:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'FC 11/29/2020 17:34:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04 stamp: 'FC 11/29/2020 17:34:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05 stamp: 'FC 11/29/2020 17:34:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06 stamp: 'FC 11/29/2020 17:34:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07 stamp: 'FC 11/29/2020 17:34:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08 stamp: 'FC 11/29/2020 17:34:26'!
PASSED!

----SNAPSHOT----(29 November 2020 17:35:01) CuisUniversity-4383.image priorSource: 18935489!

----SNAPSHOT----(29 November 2020 17:35:03) CuisUniversity-4383.image priorSource: 18989293!

----SNAPSHOT----(29 November 2020 17:35:04) CuisUniversity-4383.image priorSource: 18989387!

----QUIT----(29 November 2020 17:35:06) CuisUniversity-4383.image priorSource: 18989481!

----STARTUP---- (30 November 2020 18:10:16) as C:\Users\Felip\Desktop\Dev\Inge 1\ST\windows64\CuisUniversity-4383.image!


GregorianDateTime now.!

Object subclass: #TimeSimulator
	instanceVariableNames: 'currentDateTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TimeSimulator category: 'TusLibros' stamp: 'FC 11/30/2020 18:19:27'!
Object subclass: #TimeSimulator
	instanceVariableNames: 'currentDateTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TimeSimulator class methodsFor: 'no messages' stamp: 'FC 11/30/2020 18:22:18'!
startingAt: aDateTime
	^self new initializeStartingAt: aDateTime.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 18:22:55'!
test01InterfaceCreatesEmptyCart
	
	|cartId tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self on: testObjectsFactory today registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	self assert: (tusLibros listCartForId: cartId) isEmpty.! !

!methodRemoval: TusLibrosInterfaceTest #test01 stamp: 'FC 11/30/2020 18:22:55'!
test01
	
	|cartId tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self on: testObjectsFactory today registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	self assert: (tusLibros listCartForId: cartId) isEmpty.!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 18:23:21'!
test02CanNotCreateCartWithInvalidPassword
	
	|tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self on: testObjectsFactory today registeringOn: OrderedCollection new.
	
	self should: [tusLibros createCartForUser: 'validUser' withPassword: 'a'] raise: Error withMessageText: TusLibrosInterface invalidPasswordMessage.
	
 	
! !

!methodRemoval: TusLibrosInterfaceTest #test02 stamp: 'FC 11/30/2020 18:23:21'!
test02
	
	|tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self on: testObjectsFactory today registeringOn: OrderedCollection new.
	
	self should: [tusLibros createCartForUser: 'validUser' withPassword: 'a'] raise: Error withMessageText: TusLibrosInterface invalidPasswordMessage.
	
 	
!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 18:23:51'!
test03CanNotCreateCartWithInvalidUsername
	
	|tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self on: testObjectsFactory today registeringOn: OrderedCollection new.
	
	self should: [tusLibros createCartForUser: 'a' withPassword: 'a'] raise: Error withMessageText: TusLibrosInterface invalidUserMessage.
	
 	
! !

!methodRemoval: TusLibrosInterfaceTest #test03 stamp: 'FC 11/30/2020 18:23:51'!
test03
	
	|tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self on: testObjectsFactory today registeringOn: OrderedCollection new.
	
	self should: [tusLibros createCartForUser: 'a' withPassword: 'a'] raise: Error withMessageText: TusLibrosInterface invalidUserMessage.
	
 	
!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 18:24:43'!
test04InterfaceListsOneItem
	
	|cartId tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self on: testObjectsFactory today registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	tusLibros addToCart: 1 of: (testObjectsFactory itemSellByTheStore) forId: cartId.
	
	self assert: (tusLibros listCartForId: cartId) includes: testObjectsFactory itemSellByTheStore .! !

!methodRemoval: TusLibrosInterfaceTest #test04 stamp: 'FC 11/30/2020 18:24:43'!
test04
	
	|cartId tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self on: testObjectsFactory today registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	tusLibros addToCart: 1 of: (testObjectsFactory itemSellByTheStore) forId: cartId.
	
	self assert: (tusLibros listCartForId: cartId) includes: testObjectsFactory itemSellByTheStore .!

!methodRemoval: TusLibrosInterfaceTest #test05 stamp: 'FC 11/30/2020 18:25:02'!
test05
	
	|cartId tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self on: testObjectsFactory today registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	tusLibros addToCart: 2 of: (testObjectsFactory itemSellByTheStore) forId: cartId.
	
	self assert: (tusLibros listCartForId: cartId) includes: testObjectsFactory itemSellByTheStore .
	self assert: ((tusLibros listCartForId: cartId) occurrencesOf: testObjectsFactory itemSellByTheStore) equals: 2.!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 18:25:17'!
test06CanNotListInvalidCart
	
	|tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self on: testObjectsFactory today registeringOn: OrderedCollection new.
	
	
	self should: [tusLibros listCartForId: 1] raise: Error withMessageText: TusLibrosInterface cartNotFoundMessage.! !

!methodRemoval: TusLibrosInterfaceTest #test06 stamp: 'FC 11/30/2020 18:25:17'!
test06
	
	|tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self on: testObjectsFactory today registeringOn: OrderedCollection new.
	
	
	self should: [tusLibros listCartForId: 1] raise: Error withMessageText: TusLibrosInterface cartNotFoundMessage.!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 18:25:29'!
test07CanNotAddToInvalidCart
	
	|tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self on: testObjectsFactory today registeringOn: OrderedCollection new.
	
	
	self should: [tusLibros addToCart: 1 of: testObjectsFactory itemNotSellByTheStore forId: 1] raise: Error withMessageText: TusLibrosInterface cartNotFoundMessage.! !

!methodRemoval: TusLibrosInterfaceTest #test07 stamp: 'FC 11/30/2020 18:25:29'!
test07
	
	|tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self on: testObjectsFactory today registeringOn: OrderedCollection new.
	
	
	self should: [tusLibros addToCart: 1 of: testObjectsFactory itemNotSellByTheStore forId: 1] raise: Error withMessageText: TusLibrosInterface cartNotFoundMessage.!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 18:26:07'!
test08CheckOutReturnsTotal
	
	|cartId tusLibros total |
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self on: testObjectsFactory today registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	tusLibros addToCart: 1 of: (testObjectsFactory itemSellByTheStore) forId: cartId.
	
	total := tusLibros checkOutCartId: cartId payingWith: testObjectsFactory notExpiredCreditCard.
	
	self assert: total equals: testObjectsFactory itemSellByTheStorePrice.! !

!methodRemoval: TusLibrosInterfaceTest #test08 stamp: 'FC 11/30/2020 18:26:07'!
test08
	
	|cartId tusLibros total |
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self on: testObjectsFactory today registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	tusLibros addToCart: 1 of: (testObjectsFactory itemSellByTheStore) forId: cartId.
	
	total := tusLibros checkOutCartId: cartId payingWith: testObjectsFactory notExpiredCreditCard.
	
	self assert: total equals: testObjectsFactory itemSellByTheStorePrice.!
!TimeSimulator methodsFor: 'no messages' stamp: 'FC 11/30/2020 18:26:44'!
initializeStartingAt: aDateTime
	currentDateTime := aDateTime.! !
!TimeSimulator methodsFor: 'initialization' stamp: 'FC 11/30/2020 18:27:11'!
now
	currentDateTime.! !
!TimeSimulator methodsFor: 'initialization' stamp: 'FC 11/30/2020 18:27:19' prior: 50925358!
now
	^currentDateTime.! !
!TimeSimulator methodsFor: 'initialization' stamp: 'FC 11/30/2020 18:28:24'!
passTime: anInterval.
	currentDateTime := currentDateTime + anInterval.! !

!testRun: #GregorianMonthTest #testApril stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testAugust stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testComma stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testCommonMonthsMeasure stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testCurrent stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testDayOfMonthCreation stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testDecember stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testDivisionSymbolCanBeUseToCreateADayOfMonth stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testFebruary stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testFirstDayOfMonth stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testGlobalVariables stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testGreaterThan stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testIdentity stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testIsApril stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testIsAugust stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testIsDecember stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testIsFebruary stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testIsJanuary stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testIsJuly stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testIsJune stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testIsMarch stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testIsMay stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testIsNovember stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testIsOctober stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testIsSeptember stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testJanuary stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testJuly stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testJune stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testLastDayOfMonth stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testLessThan stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testMarch stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testMay stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testMonthCreation stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testMonthsFrom stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testMonthsTo stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testNamed stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testNext stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testNextInANumberOfMonths stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testNovember stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testNumberOfMonthsPerYear stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testOctober stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testOf stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testOfYear stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testPrevious stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testPreviousInANumberOfMonths stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testSeptember stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testTo stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testToBy stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testToByDo stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testToNegativeByDo stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testToReverse stamp: 'FC 11/30/2020 18:29:13'!
PASSED!

!testRun: #GregorianMonthTest #testApril stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testAugust stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testComma stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testCommonMonthsMeasure stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testCurrent stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testDayOfMonthCreation stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testDecember stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testDivisionSymbolCanBeUseToCreateADayOfMonth stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testFebruary stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testFirstDayOfMonth stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testGlobalVariables stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testGreaterThan stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testIdentity stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testIsApril stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testIsAugust stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testIsDecember stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testIsFebruary stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testIsJanuary stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testIsJuly stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testIsJune stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testIsMarch stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testIsMay stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testIsNovember stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testIsOctober stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testIsSeptember stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testJanuary stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testJuly stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testJune stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testLastDayOfMonth stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testLessThan stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testMarch stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testMay stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testMonthCreation stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testMonthsFrom stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testMonthsTo stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testNamed stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testNext stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testNextInANumberOfMonths stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testNovember stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testNumberOfMonthsPerYear stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testOctober stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testOf stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testOfYear stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testPrevious stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testPreviousInANumberOfMonths stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testSeptember stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testTo stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testToBy stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testToByDo stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testToNegativeByDo stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #GregorianMonthTest #testToReverse stamp: 'FC 11/30/2020 18:29:16'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testEqual stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testGreaterThan stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testHash stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testLastDayNumber stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testLessThan stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testName stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testNext stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testNumber stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testNumberOfDaysFromBeginningOfYear stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testNumberOfDaysIn stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testPrevious stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testPrintString stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FixedGregorianDateTest #test29OfFebruaryToEveryDayOfMonth stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testAsSmalltalkDate stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testAt stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testAtMidnight stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testAtNoon stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testAtTimeOfDay stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testCreation stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testDay stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testDayNumber stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testDayOfMonth stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testDaysFrom stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testDaysTo stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testEqual stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testGreaterThan stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testHash stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testImmutableValue stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testIncludesDate stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testIncludesDateTime stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testIncludesMonthOfYear stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testIncludesYear stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testInvalidCreation stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsApril stamp: 'FC 11/30/2020 18:29:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsAugust stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsDecember stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsFebruary stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsFirstDayOfMonth stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsFirstDayOfYear stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsFriday stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsJanuary stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsJuly stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsJune stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsLastDayOfMonth stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsLastDayOfYear stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsMarch stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsMay stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsMonday stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsNovember stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsOctober stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsSaturday stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsSeptember stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsSunday stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsThursday stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsTuesday stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsWednesday stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testLessThan stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testMonth stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testMonthOfYear stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testNext stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextDay stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextDayOfMonth stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextInNumberOfDays stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextInWeeks stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextMonth stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysFromBaseDate stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysFromBeginningOfMonth stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysFromJanuaryFirst stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysToEndOfMonth stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysToEndOfYear stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testPrevious stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testPreviousDay stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testPreviousDayOfMonth stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testPreviousInNumberOfDays stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testPreviousInWeeks stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testPrintString stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testTheBeginningAndTheEndOfTime stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testTo stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testToBy stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testToByDo stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testToByReverse stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryBeginningDifferentDay stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryBeginningSameDay stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayBeginningDifferentDay stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayBeginningSameDay stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayNumber stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayNumbers stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testEqual stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testGreaterThan stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testHash stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testLastDayNumber stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testLessThan stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testName stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNext stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayOfMonth stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNumber stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNumberOfDaysFromBeginningOfYear stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testToNegativeBy stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNumberOfDaysIn stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testPrevious stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testTomorrow stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testPrintString stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testVisitorAccessing stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testYear stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #FixedGregorianDateTest #testYesterday stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testAccessing stamp: 'FC 11/30/2020 18:29:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testAdd stamp: 'FC 11/30/2020 18:29:22'!
PASSED!

!testRun: #GregorianDateTimeTest #testComparing stamp: 'FC 11/30/2020 18:29:22'!
PASSED!

!testRun: #GregorianDateTimeTest #testFirstTimeOfDay stamp: 'FC 11/30/2020 18:29:22'!
PASSED!

!testRun: #GregorianDateTimeTest #testGreaterThan stamp: 'FC 11/30/2020 18:29:22'!
PASSED!

!testRun: #GregorianDateTimeTest #testHash stamp: 'FC 11/30/2020 18:29:22'!
PASSED!

!testRun: #GregorianDateTimeTest #testLastTimeOfDay stamp: 'FC 11/30/2020 18:29:22'!
PASSED!

!testRun: #GregorianDateTimeTest #testLessThan stamp: 'FC 11/30/2020 18:29:22'!
PASSED!

!testRun: #GregorianDateTimeTest #testNow stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDateTimeTest #testPrintString stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDateTimeTest #testReverse stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDateTimeTest #testSameDateAs stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDateTimeTest #testSameTimeOfDayAs stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDateTimeTest #testSpecialDateTimes stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDateTimeTest #testSubtract stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDateTimeTest #testTimeFrom stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDateTimeTest #testTimeFromMidnight stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDateTimeTest #testTimeTo stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDateTimeTest #testTimeToEndOfDay stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDateTimeTest #testTo stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDateTimeTest #testToBy stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDateTimeTest #testToByDo stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDateTimeTest #testToByMinutesDo stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDateTimeTest #testToNegativeByDo stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDateTimeTest #testWithDay stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDateTimeTest #testWithDayOfMonth stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testComma stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testComparing stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testCreation stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testDateOfYear stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testDaysFrom stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testDaysTo stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testDivisionSymbolCanBeUseToCreateADate stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testEqual stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testHash stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testInvalidCreation stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testIsFirstDayOfMonth stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testIsFirstDayOfYear stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testIsLastDayOfMonth stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testIsLastDayOfYear stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNext stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNextANumberOfDays stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testEqual stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNumberOfDaysFromBeginningOfMonth stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNumberOfDaysFromJanuaryFirst stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testGreaterThan stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNumberOfDaysToEndOfMonth stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testGreaterThanFebruary stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testHash stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNumberOfDaysToEndOfYear stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLastDayNumber stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testPrevious stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLessThan stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testPreviousANumberOfDays stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLessThanFebruary stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testPrintString stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testTo stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testName stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumber stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumberOfDaysFromJanuaryFirst stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToBy stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumberOfDaysIn stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToByDo stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testPrintString stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToEveryDayNumber stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToEveryDayNumbers stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToNegativeBy stamp: 'FC 11/30/2020 18:29:23'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToReverse stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToday stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testCommonDaysMeasure stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testDayCreation stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testDayPositionedInWeek stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testDays stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testDaysFrom stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testDaysTo stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testEqual stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testGlobalVariables stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testInvalidNameCreation stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testIsFriday stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testIsMonday stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testIsSaturday stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testIsSunday stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testIsThursday stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testIsTuesday stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testIsWednesday stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testName stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testNext stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testNextInANumberOfDays stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testNumberOfDaysSinceSunday stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testPrevious stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testPreviousInANumberOfDays stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testPrintString stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testSinceSunday stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testTo stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testToBy stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testToDo stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testToNegativeBy stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testToNegativeByDo stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianDayTest #testToday stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testCardinalDay stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testCreation stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testCurrent stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testDates stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testEqual stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testFirstDate stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testFirstDay stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testGreaterThan stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testHash stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testIncludesDate stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testIncludesDateTime stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testIncludesMonthOfYear stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testIncludesYear stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testInvalidCreation stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testLastDate stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testLastDay stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testLastDayNumber stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testLessThan stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testMonthsFrom stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testMonthsTo stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testName stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testNext stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testNextANumberOfMonths stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testNextMonthDefinedAs stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testNumberOfDays stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testPrevious stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testPreviousANumberOfMonths stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testPreviousMonthDefinedAs stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testPrintString stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testTo stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToBy stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToByDo stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToByYearsDo stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToNegativeBy stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToReverse stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testApril stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testAugust stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testComma stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testCommonMonthsMeasure stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testCurrent stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testDayOfMonthCreation stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testDecember stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testDivisionSymbolCanBeUseToCreateADayOfMonth stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testFebruary stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testFirstDayOfMonth stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testGlobalVariables stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testGreaterThan stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testIdentity stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testIsApril stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testIsAugust stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testIsDecember stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testIsFebruary stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testIsJanuary stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testIsJuly stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testIsJune stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testIsMarch stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testIsMay stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testIsNovember stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testIsOctober stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testIsSeptember stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testJanuary stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testJuly stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testJune stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testLastDayOfMonth stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testLessThan stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testMarch stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testMay stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testMonthCreation stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testMonthsFrom stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testMonthsTo stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testNamed stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testNext stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testNextInANumberOfMonths stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testNovember stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testNumberOfMonthsPerYear stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testOctober stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testOf stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testOfYear stamp: 'FC 11/30/2020 18:29:24'!
PASSED!

!testRun: #GregorianMonthTest #testPrevious stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianMonthTest #testPreviousInANumberOfMonths stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianMonthTest #testSeptember stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianMonthTest #testTo stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianMonthTest #testToBy stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianMonthTest #testToByDo stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianMonthTest #testToNegativeByDo stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianMonthTest #testToReverse stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianTimespanTest #testAccessing stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianTimespanTest #testAsInterval stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianTimespanTest #testCanCreateATimespanAfterATimeMeasure stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianTimespanTest #testCanCreateATimespanBeforeATimeMeasure stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianTimespanTest #testEqual stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianTimespanTest #testFromInterval stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianTimespanTest #testHash stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianTimespanTest #testPrintString stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianTimespanTest #testTo stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testCurrent stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testDates stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testDaysInFebruary stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testDistanceTo stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testEqual stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testFirstDate stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testFirstDay stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testFirstMonth stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testGreaterThan stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testHash stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testIncludesDate stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testIncludesDateTime stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testIncludesMonthOfYear stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testIncludesYear stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testInvalidNextANumberOfYears stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testInvalidPreviousANumberOfYears stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testInvalidYear stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testIsLeap stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testLastDate stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testLastDay stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testLastMonth stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testLessThan stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testMonths stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testMonthsOfYearsAccessing stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testNext stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testNextANumberOfYears stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testNextLeapYear stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testNumber stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testNumberOfDays stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testNumberOfDaysFromBaseDate stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testPrevious stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testPreviousANumberOfYears stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testPreviousLeapYear stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testPrintString stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testTo stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testToBy stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testToByDo stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testToByReverse stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testToNegativeBy stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testYearsFrom stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testYearsTo stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #GregorianYearTest #testZeroYears stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testEqual stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testGreaterThan stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testHash stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testLastDayNumber stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testLessThan stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testName stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNext stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNumber stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNumberOfDaysFromBeginningOfYear stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNumberOfDaysIn stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testPrevious stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testPrintString stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #MoreThanOnePointInTimeIntervalStrategyTest #testIsValidIntervalFromToBy stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testEqual stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testGreaterThan stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testGreaterThanFebruary stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testHash stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLastDayNumber stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLessThan stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLessThanFebruary stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testName stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumber stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumberOfDaysFromJanuaryFirst stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumberOfDaysIn stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testPrintString stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testDayOfMonthCreation stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testEqual stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testGreaterThan stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testGreaterThanFebruary stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testHash stamp: 'FC 11/30/2020 18:29:25'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testLastDayNumber stamp: 'FC 11/30/2020 18:29:26'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testLessThan stamp: 'FC 11/30/2020 18:29:26'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testLessThanFebruary stamp: 'FC 11/30/2020 18:29:26'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testName stamp: 'FC 11/30/2020 18:29:26'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testNumber stamp: 'FC 11/30/2020 18:29:26'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testNumberOfDaysFromJanuaryFirst stamp: 'FC 11/30/2020 18:29:26'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testNumberOfDaysIn stamp: 'FC 11/30/2020 18:29:26'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testPrintString stamp: 'FC 11/30/2020 18:29:26'!
PASSED!

!testRun: #ThirtyOneDaysGregorianMonthTest #testThirtieth stamp: 'FC 11/30/2020 18:29:26'!
PASSED!

!testRun: #ThirtyOneDaysGregorianMonthTest #testThirtyfirst stamp: 'FC 11/30/2020 18:29:26'!
PASSED!

!testRun: #TimeOfDayTest #testAdd stamp: 'FC 11/30/2020 18:29:26'!
PASSED!

!testRun: #TimeOfDayTest #testCanCreateAsWrittenInEnglish stamp: 'FC 11/30/2020 18:29:26'!
PASSED!

!testRun: #TimeOfDayTest #testCanNotCreateTimeOfDayWithSemiColonWhenReceiverHasSeconds stamp: 'FC 11/30/2020 18:29:26'!
PASSED!

!testRun: #TimeOfDayTest #testComparing stamp: 'FC 11/30/2020 18:29:26'!
PASSED!

!testRun: #TimeOfDayTest #testCreation stamp: 'FC 11/30/2020 18:29:26'!
PASSED!

!testRun: #TimeOfDayTest #testCreationHour stamp: 'FC 11/30/2020 18:29:26'!
PASSED!

!testRun: #TimeOfDayTest #testCreationMilliseconds stamp: 'FC 11/30/2020 18:29:26'!
PASSED!

!testRun: #TimeOfDayTest #testCreationMinute stamp: 'FC 11/30/2020 18:29:26'!
PASSED!

!testRun: #TimeOfDayTest #testCreationSecond stamp: 'FC 11/30/2020 18:29:26'!
PASSED!

!testRun: #TimeOfDayTest #testFirstTimeOfDay stamp: 'FC 11/30/2020 18:29:26'!
PASSED!

!testRun: #TimeOfDayTest #testGreaterThan stamp: 'FC 11/30/2020 18:29:26'!
PASSED!

!testRun: #TimeOfDayTest #testHash stamp: 'FC 11/30/2020 18:29:26'!
PASSED!

!testRun: #TimeOfDayTest #testInvalidCreation stamp: 'FC 11/30/2020 18:29:26'!
PASSED!

!testRun: #TimeOfDayTest #testLastTimeOfDay stamp: 'FC 11/30/2020 18:29:26'!
PASSED!

!testRun: #TimeOfDayTest #testLessThan stamp: 'FC 11/30/2020 18:29:26'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLessThan stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testEqual stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testGreaterThan stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testGreaterThanFebruary stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #TimeOfDayTest #testNow stamp: 'FC 11/30/2020 18:29:27'!
FAILURE!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testHash stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #TimeOfDayTest #testOneMillisecond stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLastDayNumber stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLessThan stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #TimeOfDayTest #testOneSecond stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #TimeOfDayTest #testPrintString stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLessThanFebruary stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #TimeOfDayTest #testReverse stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testName stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #TimeOfDayTest #testSubtract stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #TimeOfDayTest #testTimeFrom stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumber stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #TimeOfDayTest #testTimeFromMidnight stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumberOfDaysFromJanuaryFirst stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumberOfDaysIn stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #TimeOfDayTest #testTimeTo stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testPrintString stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #TimeOfDayTest #testTimeToEndOfDay stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #TimeOfDayTest #testTo stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #TimeOfDayTest #testToBy stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #TimeOfDayTest #testToByDo stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #TimeOfDayTest #testToNegativeByDo stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #TimeOfDayTest #testTwentyFourHours stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #TimeOfDayTest #testZeroHours stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #TimeUnitsTest #testAllUnits stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #TimeUnitsTest #testDay stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #TimeUnitsTest #testHour stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #TimeUnitsTest #testMillisecond stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #TimeUnitsTest #testMinute stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #TimeUnitsTest #testMonth stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #TimeUnitsTest #testSecond stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #TimeUnitsTest #testWeek stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #TimeUnitsTest #testYear stamp: 'FC 11/30/2020 18:29:27'!
PASSED!

!testRun: #TimeOfDayTest #testNow stamp: 'FC 11/30/2020 18:29:28'!
PASSED!
!NonSpecificThirtyOneDaysGregorianMonthTest methodsFor: 'test comparing' stamp: 'FC 11/30/2020 18:29:29' prior: 50749501!
testLessThan

	| month1 month2 |
	
	month1 := NonSpecificThirtyOneDaysGregorianMonth named: 'xxx' number: 1.
	month2 := NonSpecificThirtyOneDaysGregorianMonth named: 'yyy' number:  3.

	self assert: month1 < month2.
	self deny: month2 < month1.! !

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLessThan stamp: 'FC 11/30/2020 18:29:29'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testEqual stamp: 'FC 11/30/2020 18:29:29'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testGreaterThan stamp: 'FC 11/30/2020 18:29:29'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testGreaterThanFebruary stamp: 'FC 11/30/2020 18:29:29'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testHash stamp: 'FC 11/30/2020 18:29:29'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLastDayNumber stamp: 'FC 11/30/2020 18:29:29'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLessThan stamp: 'FC 11/30/2020 18:29:29'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLessThanFebruary stamp: 'FC 11/30/2020 18:29:29'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testName stamp: 'FC 11/30/2020 18:29:29'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumber stamp: 'FC 11/30/2020 18:29:29'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumberOfDaysFromJanuaryFirst stamp: 'FC 11/30/2020 18:29:29'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumberOfDaysIn stamp: 'FC 11/30/2020 18:29:29'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testPrintString stamp: 'FC 11/30/2020 18:29:29'!
PASSED!
!NonSpecificThirtyOneDaysGregorianMonthTest methodsFor: 'test comparing' stamp: 'FC 11/30/2020 18:29:32' prior: 50926920!
testLessThan

	| month1 month2 |
	
	month1 := NonSpecificThirtyOneDaysGregorianMonth named: 'xxx' number: 1.
	month2 := NonSpecificThirtyOneDaysGregorianMonth named: 'yyy' number:  3.

	self assert: month1 < month2.
	self deny: month2 < month1.! !

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLessThan stamp: 'FC 11/30/2020 18:29:32'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testEqual stamp: 'FC 11/30/2020 18:29:32'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testGreaterThan stamp: 'FC 11/30/2020 18:29:32'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testGreaterThanFebruary stamp: 'FC 11/30/2020 18:29:32'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testHash stamp: 'FC 11/30/2020 18:29:32'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLastDayNumber stamp: 'FC 11/30/2020 18:29:32'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLessThan stamp: 'FC 11/30/2020 18:29:32'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLessThanFebruary stamp: 'FC 11/30/2020 18:29:32'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testName stamp: 'FC 11/30/2020 18:29:32'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumber stamp: 'FC 11/30/2020 18:29:32'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumberOfDaysFromJanuaryFirst stamp: 'FC 11/30/2020 18:29:32'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumberOfDaysIn stamp: 'FC 11/30/2020 18:29:32'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testPrintString stamp: 'FC 11/30/2020 18:29:32'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testEqual stamp: 'FC 11/30/2020 18:29:38'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testGreaterThan stamp: 'FC 11/30/2020 18:29:38'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testHash stamp: 'FC 11/30/2020 18:29:38'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testLastDayNumber stamp: 'FC 11/30/2020 18:29:38'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testLessThan stamp: 'FC 11/30/2020 18:29:38'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testName stamp: 'FC 11/30/2020 18:29:38'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testNext stamp: 'FC 11/30/2020 18:29:38'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testNumber stamp: 'FC 11/30/2020 18:29:38'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testNumberOfDaysFromBeginningOfYear stamp: 'FC 11/30/2020 18:29:38'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testNumberOfDaysIn stamp: 'FC 11/30/2020 18:29:38'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testPrevious stamp: 'FC 11/30/2020 18:29:38'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testPrintString stamp: 'FC 11/30/2020 18:29:38'!
PASSED!

!testRun: #FixedGregorianDateTest #test29OfFebruaryToEveryDayOfMonth stamp: 'FC 11/30/2020 18:29:38'!
PASSED!

!testRun: #FixedGregorianDateTest #testAsSmalltalkDate stamp: 'FC 11/30/2020 18:29:38'!
PASSED!

!testRun: #FixedGregorianDateTest #testAt stamp: 'FC 11/30/2020 18:29:38'!
PASSED!

!testRun: #FixedGregorianDateTest #testAtMidnight stamp: 'FC 11/30/2020 18:29:38'!
PASSED!

!testRun: #FixedGregorianDateTest #testAtNoon stamp: 'FC 11/30/2020 18:29:38'!
PASSED!

!testRun: #FixedGregorianDateTest #testAtTimeOfDay stamp: 'FC 11/30/2020 18:29:38'!
PASSED!

!testRun: #FixedGregorianDateTest #testCreation stamp: 'FC 11/30/2020 18:29:38'!
PASSED!

!testRun: #FixedGregorianDateTest #testDay stamp: 'FC 11/30/2020 18:29:38'!
PASSED!

!testRun: #FixedGregorianDateTest #testDayNumber stamp: 'FC 11/30/2020 18:29:38'!
PASSED!

!testRun: #FixedGregorianDateTest #testDayOfMonth stamp: 'FC 11/30/2020 18:29:38'!
PASSED!

!testRun: #FixedGregorianDateTest #testDaysFrom stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testDaysTo stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testEqual stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testGreaterThan stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testHash stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testImmutableValue stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testIncludesDate stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testIncludesDateTime stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testIncludesMonthOfYear stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testIncludesYear stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testInvalidCreation stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsApril stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsAugust stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsDecember stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsFebruary stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsFirstDayOfMonth stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsFirstDayOfYear stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsFriday stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsJanuary stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsJuly stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsJune stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsLastDayOfMonth stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsLastDayOfYear stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsMarch stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsMay stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsMonday stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsNovember stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsOctober stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsSaturday stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsSeptember stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsSunday stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsThursday stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsTuesday stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsWednesday stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testLessThan stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testMonth stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testMonthOfYear stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testNext stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextDay stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextDayOfMonth stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextInNumberOfDays stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextInWeeks stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextMonth stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysFromBaseDate stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysFromBeginningOfMonth stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysFromJanuaryFirst stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysToEndOfMonth stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysToEndOfYear stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testPrevious stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testPreviousDay stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testPreviousDayOfMonth stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testPreviousInNumberOfDays stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testPreviousInWeeks stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testPrintString stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testTheBeginningAndTheEndOfTime stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testTo stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testToBy stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testToByDo stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testToByReverse stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryBeginningDifferentDay stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryBeginningSameDay stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayBeginningDifferentDay stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayBeginningSameDay stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayNumber stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayNumbers stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayOfMonth stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testToNegativeBy stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testTomorrow stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testVisitorAccessing stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testYear stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #FixedGregorianDateTest #testYesterday stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #GregorianDateTimeTest #testAccessing stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #GregorianDateTimeTest #testAdd stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #GregorianDateTimeTest #testComparing stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #GregorianDateTimeTest #testFirstTimeOfDay stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #GregorianDateTimeTest #testGreaterThan stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #GregorianDateTimeTest #testHash stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #GregorianDateTimeTest #testLastTimeOfDay stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #GregorianDateTimeTest #testLessThan stamp: 'FC 11/30/2020 18:29:39'!
PASSED!

!testRun: #GregorianDateTimeTest #testNow stamp: 'FC 11/30/2020 18:29:40'!
PASSED!

!testRun: #GregorianDateTimeTest #testPrintString stamp: 'FC 11/30/2020 18:29:40'!
PASSED!

!testRun: #GregorianDateTimeTest #testReverse stamp: 'FC 11/30/2020 18:29:40'!
PASSED!

!testRun: #GregorianDateTimeTest #testSameDateAs stamp: 'FC 11/30/2020 18:29:40'!
PASSED!

!testRun: #GregorianDateTimeTest #testSameTimeOfDayAs stamp: 'FC 11/30/2020 18:29:40'!
PASSED!

!testRun: #GregorianDateTimeTest #testSpecialDateTimes stamp: 'FC 11/30/2020 18:29:40'!
PASSED!

!testRun: #GregorianDateTimeTest #testSubtract stamp: 'FC 11/30/2020 18:29:40'!
PASSED!

!testRun: #GregorianDateTimeTest #testTimeFrom stamp: 'FC 11/30/2020 18:29:40'!
PASSED!

!testRun: #GregorianDateTimeTest #testTimeFromMidnight stamp: 'FC 11/30/2020 18:29:40'!
PASSED!

!testRun: #GregorianDateTimeTest #testTimeTo stamp: 'FC 11/30/2020 18:29:40'!
PASSED!

!testRun: #GregorianDateTimeTest #testTimeToEndOfDay stamp: 'FC 11/30/2020 18:29:40'!
PASSED!

!testRun: #GregorianDateTimeTest #testTo stamp: 'FC 11/30/2020 18:29:40'!
PASSED!

!testRun: #GregorianDateTimeTest #testToBy stamp: 'FC 11/30/2020 18:29:40'!
PASSED!

!testRun: #GregorianDateTimeTest #testToByDo stamp: 'FC 11/30/2020 18:29:40'!
PASSED!

!testRun: #GregorianDateTimeTest #testToByMinutesDo stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDateTimeTest #testToNegativeByDo stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDateTimeTest #testWithDay stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDateTimeTest #testWithDayOfMonth stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testComma stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testComparing stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testCreation stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testDateOfYear stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testDaysFrom stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testDaysTo stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testDivisionSymbolCanBeUseToCreateADate stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testEqual stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testHash stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testInvalidCreation stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testIsFirstDayOfMonth stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testIsFirstDayOfYear stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testIsLastDayOfMonth stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testIsLastDayOfYear stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNext stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNextANumberOfDays stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNumberOfDaysFromBeginningOfMonth stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNumberOfDaysFromJanuaryFirst stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNumberOfDaysToEndOfMonth stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNumberOfDaysToEndOfYear stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testPrevious stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testPreviousANumberOfDays stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testPrintString stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testTo stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToBy stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToByDo stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToEveryDayNumber stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToEveryDayNumbers stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToNegativeBy stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToReverse stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToday stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testCommonDaysMeasure stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testDayCreation stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testDayPositionedInWeek stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testDays stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testDaysFrom stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testDaysTo stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testEqual stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testGlobalVariables stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testInvalidNameCreation stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testIsFriday stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testIsMonday stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testIsSaturday stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testIsSunday stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testIsThursday stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testIsTuesday stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testIsWednesday stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testName stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testNext stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testNextInANumberOfDays stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testNumberOfDaysSinceSunday stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testPrevious stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testPreviousInANumberOfDays stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testPrintString stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testSinceSunday stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testTo stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testToBy stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testToDo stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testToNegativeBy stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testToNegativeByDo stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianDayTest #testToday stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testCardinalDay stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testCreation stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testCurrent stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testDates stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testEqual stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testFirstDate stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testFirstDay stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testGreaterThan stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testHash stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testIncludesDate stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testIncludesDateTime stamp: 'FC 11/30/2020 18:29:41'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testIncludesMonthOfYear stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testIncludesYear stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testInvalidCreation stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testLastDate stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testLastDay stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testLastDayNumber stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testLessThan stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testMonthsFrom stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testMonthsTo stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testName stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testNext stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testNextANumberOfMonths stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testNextMonthDefinedAs stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testNumberOfDays stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testPrevious stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testPreviousANumberOfMonths stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testPreviousMonthDefinedAs stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testPrintString stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testTo stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToBy stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToByDo stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToByYearsDo stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToNegativeBy stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToReverse stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testApril stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testAugust stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testComma stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testCommonMonthsMeasure stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testCurrent stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testDayOfMonthCreation stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testDecember stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testDivisionSymbolCanBeUseToCreateADayOfMonth stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testFebruary stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testFirstDayOfMonth stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testGlobalVariables stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testGreaterThan stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testIdentity stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testIsApril stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testIsAugust stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testIsDecember stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testIsFebruary stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testIsJanuary stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testIsJuly stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testIsJune stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testIsMarch stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testIsMay stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testIsNovember stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testIsOctober stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testIsSeptember stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testJanuary stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testJuly stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testJune stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testLastDayOfMonth stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testLessThan stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testMarch stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testMay stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testMonthCreation stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testMonthsFrom stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testMonthsTo stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testNamed stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testNext stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testNextInANumberOfMonths stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testNovember stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testNumberOfMonthsPerYear stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testOctober stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testOf stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testOfYear stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testPrevious stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testPreviousInANumberOfMonths stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testSeptember stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testTo stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testToBy stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testToByDo stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testToNegativeByDo stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianMonthTest #testToReverse stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianTimespanTest #testAccessing stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianTimespanTest #testAsInterval stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianTimespanTest #testCanCreateATimespanAfterATimeMeasure stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianTimespanTest #testCanCreateATimespanBeforeATimeMeasure stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianTimespanTest #testEqual stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianTimespanTest #testFromInterval stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianTimespanTest #testHash stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianTimespanTest #testPrintString stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianTimespanTest #testTo stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianYearTest #testCurrent stamp: 'FC 11/30/2020 18:29:42'!
PASSED!

!testRun: #GregorianYearTest #testDates stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testDaysInFebruary stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testDistanceTo stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testEqual stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testFirstDate stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testFirstDay stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testFirstMonth stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testGreaterThan stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testHash stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testIncludesDate stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testIncludesDateTime stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testIncludesMonthOfYear stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testIncludesYear stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testInvalidNextANumberOfYears stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testInvalidPreviousANumberOfYears stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testInvalidYear stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testIsLeap stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testLastDate stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testLastDay stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testLastMonth stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testLessThan stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testMonths stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testMonthsOfYearsAccessing stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testNext stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testNextANumberOfYears stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testNextLeapYear stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testNumber stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testNumberOfDays stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testNumberOfDaysFromBaseDate stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testPrevious stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testPreviousANumberOfYears stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testPreviousLeapYear stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testPrintString stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testTo stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testToBy stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testToByDo stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testToByReverse stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testToNegativeBy stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testYearsFrom stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testYearsTo stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #GregorianYearTest #testZeroYears stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testEqual stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testGreaterThan stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testHash stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testLastDayNumber stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testLessThan stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testName stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNext stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNumber stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNumberOfDaysFromBeginningOfYear stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNumberOfDaysIn stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testPrevious stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testPrintString stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #MoreThanOnePointInTimeIntervalStrategyTest #testIsValidIntervalFromToBy stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testEqual stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testGreaterThan stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testGreaterThanFebruary stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testHash stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLastDayNumber stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLessThan stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLessThanFebruary stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testName stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumber stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumberOfDaysFromJanuaryFirst stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumberOfDaysIn stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testPrintString stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testDayOfMonthCreation stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testEqual stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testGreaterThan stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testGreaterThanFebruary stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testHash stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testLastDayNumber stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testLessThan stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testLessThanFebruary stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testName stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testNumber stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testNumberOfDaysFromJanuaryFirst stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testNumberOfDaysIn stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testPrintString stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #ThirtyOneDaysGregorianMonthTest #testThirtieth stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #ThirtyOneDaysGregorianMonthTest #testThirtyfirst stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #TimeOfDayTest #testAdd stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #TimeOfDayTest #testCanCreateAsWrittenInEnglish stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #TimeOfDayTest #testCanNotCreateTimeOfDayWithSemiColonWhenReceiverHasSeconds stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #TimeOfDayTest #testComparing stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #TimeOfDayTest #testCreation stamp: 'FC 11/30/2020 18:29:43'!
PASSED!

!testRun: #TimeOfDayTest #testCreationHour stamp: 'FC 11/30/2020 18:29:44'!
PASSED!

!testRun: #TimeOfDayTest #testCreationMilliseconds stamp: 'FC 11/30/2020 18:29:44'!
PASSED!

!testRun: #TimeOfDayTest #testCreationMinute stamp: 'FC 11/30/2020 18:29:44'!
PASSED!

!testRun: #TimeOfDayTest #testCreationSecond stamp: 'FC 11/30/2020 18:29:44'!
PASSED!

!testRun: #TimeOfDayTest #testFirstTimeOfDay stamp: 'FC 11/30/2020 18:29:44'!
PASSED!

!testRun: #TimeOfDayTest #testGreaterThan stamp: 'FC 11/30/2020 18:29:44'!
PASSED!

!testRun: #TimeOfDayTest #testHash stamp: 'FC 11/30/2020 18:29:44'!
PASSED!

!testRun: #TimeOfDayTest #testInvalidCreation stamp: 'FC 11/30/2020 18:29:44'!
PASSED!

!testRun: #TimeOfDayTest #testLastTimeOfDay stamp: 'FC 11/30/2020 18:29:44'!
PASSED!

!testRun: #TimeOfDayTest #testLessThan stamp: 'FC 11/30/2020 18:29:44'!
PASSED!

!testRun: #TimeOfDayTest #testNow stamp: 'FC 11/30/2020 18:29:45'!
PASSED!

!testRun: #TimeOfDayTest #testOneMillisecond stamp: 'FC 11/30/2020 18:29:45'!
PASSED!

!testRun: #TimeOfDayTest #testOneSecond stamp: 'FC 11/30/2020 18:29:45'!
PASSED!

!testRun: #TimeOfDayTest #testPrintString stamp: 'FC 11/30/2020 18:29:45'!
PASSED!

!testRun: #TimeOfDayTest #testReverse stamp: 'FC 11/30/2020 18:29:45'!
PASSED!

!testRun: #TimeOfDayTest #testSubtract stamp: 'FC 11/30/2020 18:29:45'!
PASSED!

!testRun: #TimeOfDayTest #testTimeFrom stamp: 'FC 11/30/2020 18:29:45'!
PASSED!

!testRun: #TimeOfDayTest #testTimeFromMidnight stamp: 'FC 11/30/2020 18:29:45'!
PASSED!

!testRun: #TimeOfDayTest #testTimeTo stamp: 'FC 11/30/2020 18:29:45'!
PASSED!

!testRun: #TimeOfDayTest #testTimeToEndOfDay stamp: 'FC 11/30/2020 18:29:45'!
PASSED!

!testRun: #TimeOfDayTest #testTo stamp: 'FC 11/30/2020 18:29:45'!
PASSED!

!testRun: #TimeOfDayTest #testToBy stamp: 'FC 11/30/2020 18:29:45'!
PASSED!

!testRun: #TimeOfDayTest #testToByDo stamp: 'FC 11/30/2020 18:29:45'!
PASSED!

!testRun: #TimeOfDayTest #testToNegativeByDo stamp: 'FC 11/30/2020 18:29:45'!
PASSED!

!testRun: #TimeOfDayTest #testTwentyFourHours stamp: 'FC 11/30/2020 18:29:45'!
PASSED!

!testRun: #TimeOfDayTest #testZeroHours stamp: 'FC 11/30/2020 18:29:45'!
PASSED!

!testRun: #TimeUnitsTest #testAllUnits stamp: 'FC 11/30/2020 18:29:45'!
PASSED!

!testRun: #TimeUnitsTest #testDay stamp: 'FC 11/30/2020 18:29:45'!
PASSED!

!testRun: #TimeUnitsTest #testHour stamp: 'FC 11/30/2020 18:29:45'!
PASSED!

!testRun: #TimeUnitsTest #testMillisecond stamp: 'FC 11/30/2020 18:29:45'!
PASSED!

!testRun: #TimeUnitsTest #testMinute stamp: 'FC 11/30/2020 18:29:45'!
PASSED!

!testRun: #TimeUnitsTest #testMonth stamp: 'FC 11/30/2020 18:29:45'!
PASSED!

!testRun: #TimeUnitsTest #testSecond stamp: 'FC 11/30/2020 18:29:45'!
PASSED!

!testRun: #TimeUnitsTest #testWeek stamp: 'FC 11/30/2020 18:29:45'!
PASSED!

!testRun: #TimeUnitsTest #testYear stamp: 'FC 11/30/2020 18:29:45'!
PASSED!

a := GregorianDateTime now.!

a := GregorianDateTime now.!

a + GregorianDateTime now.!

a + 10 minutes.!

a next: 2.!

a next: 2 days.!

a next: 30 * minute.!

a next: 30 * minute.!

a next: 30 * minute.!

a next: 30 * minute.!

a next: 30 * minute.!

a.!

a..!

a.!

a.!

a next: 30 * minute.!
!TimeSimulator methodsFor: 'initialization' stamp: 'FC 11/30/2020 18:34:10'!
passMinutes: minutes.
	currentDateTime := currentDateTime next: minutes * minute.! !

!methodRemoval: TimeSimulator #passTime: stamp: 'FC 11/30/2020 18:34:18'!
passTime: anInterval.
	currentDateTime := currentDateTime + anInterval.!

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 18:34:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 11/30/2020 18:34:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 11/30/2020 18:34:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 11/30/2020 18:34:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 18:34:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 11/30/2020 18:34:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 18:34:42'!
PASSED!

Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog validUsers merchantProcessor lastId carts salesBook currentDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FC 11/30/2020 18:37:29'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog validUsers merchantProcessor lastId carts salesBook currentDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FC 11/30/2020 18:37:34'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog validUsers merchantProcessor lastId carts salesBook currentDateTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 18:37:34' prior: 50924960!
checkOutCartId: aCartId payingWith: aCreditCard 
	
	| cart cashier |
	cart := self getCartAt: aCartId.
	cashier := Cashier toCheckout: cart  charging: aCreditCard  throught: merchantProcessor  on: currentDateTime registeringOn: salesBook.
	
	^cashier checkOut.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 18:37:34' prior: 50924899!
initializeForCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor on: aDate registeringOn: aSalesBook  

	catalog := aCatalog.
	validUsers := registeredUsers.
	merchantProcessor := aMerchantProcessor.
	lastId  := 0.
	carts := Dictionary new.
	salesBook := aSalesBook.
	currentDateTime := aDate.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 18:38:35' prior: 50925099!
test01InterfaceCreatesEmptyCart
	
	|cartId tusLibros|
	
	tusLibros := TusLibrosInterface forCatalog: (testObjectsFactory defaultCatalog) withUsers: (testObjectsFactory defaultUsers) through: self on: testObjectsFactory today registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	self assert: (tusLibros listCartForId: cartId) isEmpty.! !

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 18:38:35'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FC 11/30/2020 18:38:35'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FC 11/30/2020 18:38:35'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FC 11/30/2020 18:38:35'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FC 11/30/2020 18:38:35'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FC 11/30/2020 18:38:35'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FC 11/30/2020 18:38:35'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FC 11/30/2020 18:38:35'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FC 11/30/2020 18:38:35'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FC 11/30/2020 18:38:35'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FC 11/30/2020 18:38:35'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FC 11/30/2020 18:38:35'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FC 11/30/2020 18:38:35'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FC 11/30/2020 18:38:35'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FC 11/30/2020 18:38:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 18:38:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 11/30/2020 18:38:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 11/30/2020 18:38:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 11/30/2020 18:38:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 18:38:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 11/30/2020 18:38:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 18:38:35'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 18:39:06' prior: 50928271!
test01InterfaceCreatesEmptyCart
	
	|cartId tusLibros|
	
	tusLibros := TusLibrosInterface 
				forCatalog: (testObjectsFactory defaultCatalog) 
				withUsers: (testObjectsFactory defaultUsers) 
				through: self 
				on: testObjectsFactory today 
				registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	self assert: (tusLibros listCartForId: cartId) isEmpty.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 18:39:35' prior: 50928360!
test01InterfaceCreatesEmptyCart
	
	|cartId tusLibros|
	
	tusLibros := TusLibrosInterface 
				forCatalog: (testObjectsFactory defaultCatalog) 
				withUsers: (testObjectsFactory defaultUsers) 
				through: self 
				on: (TimeSimulator startingAt: testObjectsFactory today) 
				registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	self assert: (tusLibros listCartForId: cartId) isEmpty.! !

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 18:39:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 18:39:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 11/30/2020 18:39:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 11/30/2020 18:39:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 11/30/2020 18:39:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 18:39:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 11/30/2020 18:39:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 18:39:41'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 18:41:07' prior: 50925129!
test02CanNotCreateCartWithInvalidPassword
	
	|tusLibros|
	
	tusLibros := TusLibrosInterface 
				forCatalog: (testObjectsFactory defaultCatalog) 
				withUsers: (testObjectsFactory defaultUsers) 
				through: self 
				on: (TimeSimulator startingAt: testObjectsFactory today) 
				registeringOn: OrderedCollection new.
	
	self should: [tusLibros createCartForUser: 'validUser' withPassword: 'a'] raise: Error withMessageText: TusLibrosInterface invalidPasswordMessage.
	
 	
! !

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 11/30/2020 18:41:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 18:41:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 11/30/2020 18:41:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 11/30/2020 18:41:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 11/30/2020 18:41:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 18:41:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 11/30/2020 18:41:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 18:41:10'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 18:41:16' prior: 50925160!
test03CanNotCreateCartWithInvalidUsername
	
	|tusLibros|
	
	tusLibros := TusLibrosInterface 
				forCatalog: (testObjectsFactory defaultCatalog) 
				withUsers: (testObjectsFactory defaultUsers) 
				through: self 
				on: (TimeSimulator startingAt: testObjectsFactory today) 
				registeringOn: OrderedCollection new.
	
	self should: [tusLibros createCartForUser: 'a' withPassword: 'a'] raise: Error withMessageText: TusLibrosInterface invalidUserMessage.
	
 	
! !

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 11/30/2020 18:41:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 18:41:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 11/30/2020 18:41:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 11/30/2020 18:41:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 11/30/2020 18:41:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 18:41:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 11/30/2020 18:41:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 18:41:17'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 18:41:22' prior: 50925191!
test04InterfaceListsOneItem
	
	|cartId tusLibros|
	
	tusLibros := TusLibrosInterface 
				forCatalog: (testObjectsFactory defaultCatalog) 
				withUsers: (testObjectsFactory defaultUsers) 
				through: self 
				on: (TimeSimulator startingAt: testObjectsFactory today) 
				registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	tusLibros addToCart: 1 of: (testObjectsFactory itemSellByTheStore) forId: cartId.
	
	self assert: (tusLibros listCartForId: cartId) includes: testObjectsFactory itemSellByTheStore .! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 18:41:26' prior: 50925251!
test06CanNotListInvalidCart
	
	|tusLibros|
	
	tusLibros := TusLibrosInterface 
				forCatalog: (testObjectsFactory defaultCatalog) 
				withUsers: (testObjectsFactory defaultUsers) 
				through: self 
				on: (TimeSimulator startingAt: testObjectsFactory today) 
				registeringOn: OrderedCollection new.
	
	self should: [tusLibros listCartForId: 1] raise: Error withMessageText: TusLibrosInterface cartNotFoundMessage.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 18:41:30' prior: 50925279!
test07CanNotAddToInvalidCart
	
	|tusLibros|
	
	tusLibros := TusLibrosInterface 
				forCatalog: (testObjectsFactory defaultCatalog) 
				withUsers: (testObjectsFactory defaultUsers) 
				through: self 
				on: (TimeSimulator startingAt: testObjectsFactory today) 
				registeringOn: OrderedCollection new.
	
	
	self should: [tusLibros addToCart: 1 of: testObjectsFactory itemNotSellByTheStore forId: 1] raise: Error withMessageText: TusLibrosInterface cartNotFoundMessage.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 18:41:35' prior: 50925311!
test08CheckOutReturnsTotal
	
	|cartId tusLibros total |
	
	tusLibros := TusLibrosInterface 
				forCatalog: (testObjectsFactory defaultCatalog) 
				withUsers: (testObjectsFactory defaultUsers) 
				through: self 
				on: (TimeSimulator startingAt: testObjectsFactory today) 
				registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	tusLibros addToCart: 1 of: (testObjectsFactory itemSellByTheStore) forId: cartId.
	
	total := tusLibros checkOutCartId: cartId payingWith: testObjectsFactory notExpiredCreditCard.
	
	self assert: total equals: testObjectsFactory itemSellByTheStorePrice.! !

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 18:41:35'!
ERROR!
!TusLibrosInterface methodsFor: 'checkOut' stamp: 'FC 11/30/2020 18:41:54' prior: 50928245!
checkOutCartId: aCartId payingWith: aCreditCard 
	
	| cart cashier |
	cart := self getCartAt: aCartId.
	cashier := Cashier toCheckout: cart  charging: aCreditCard  throught: merchantProcessor  on: currentDateTime now registeringOn: salesBook.
	
	^cashier checkOut.! !

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 18:41:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 11/30/2020 18:41:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 11/30/2020 18:41:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 11/30/2020 18:41:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 18:41:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 11/30/2020 18:41:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 18:41:55'!
PASSED!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FC 11/30/2020 18:44:02'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog validUsers merchantProcessor lastId carts salesBook currentDateTime cartTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'cart' stamp: 'FC 11/30/2020 18:44:01' prior: 50924052!
createCartForUser: aUser withPassword: aPassword 
	
	| cartId |
	self authenticateUser: aUser withPassword: aPassword.
	
	cartId := self getNewId.

	carts add: cartId->(Cart acceptingItemsOf: catalog).
	cartTimes add: cartId->currentDateTime now.
	
	^cartId.! !
!TusLibrosInterface methodsFor: 'initialization' stamp: 'FC 11/30/2020 18:44:14' prior: 50928257!
initializeForCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor on: aDate registeringOn: aSalesBook  

	catalog := aCatalog.
	validUsers := registeredUsers.
	merchantProcessor := aMerchantProcessor.
	lastId  := 0.
	carts := Dictionary new.
	cartTimes := Dictionary new.
	salesBook := aSalesBook.
	currentDateTime := aDate.! !

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 18:44:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 18:44:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 18:44:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 11/30/2020 18:44:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 11/30/2020 18:44:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 11/30/2020 18:44:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 18:44:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 11/30/2020 18:44:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 18:44:45'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 18:45:21'!
test09
	
	|cartId tusLibros|
	
	tusLibros := TusLibrosInterface 
				forCatalog: (testObjectsFactory defaultCatalog) 
				withUsers: (testObjectsFactory defaultUsers) 
				through: self 
				on: (TimeSimulator startingAt: testObjectsFactory today) 
				registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	self assert: (tusLibros listCartForId: cartId) isEmpty.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 18:45:43' prior: 50928701!
test09
	
	|cartId tusLibro aTimeSimulators|
	
	aTimeSimulator := TimeSimulator startingAt: testObjectsFactory today.
	tusLibros := TusLibrosInterface 
				forCatalog: (testObjectsFactory defaultCatalog) 
				withUsers: (testObjectsFactory defaultUsers) 
				through: self 
				on: (aTimeSimulator) 
				registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	self assert: (tusLibros listCartForId: cartId) isEmpty.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 18:45:56' prior: 50928718!
test09
	
	|cartId tusLibros aTimeSimulator |
	
	aTimeSimulator := TimeSimulator startingAt: testObjectsFactory today.
	tusLibros := TusLibrosInterface 
				forCatalog: (testObjectsFactory defaultCatalog) 
				withUsers: (testObjectsFactory defaultUsers) 
				through: self 
				on: (aTimeSimulator) 
				registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	self assert: (tusLibros listCartForId: cartId) isEmpty.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 18:46:47' prior: 50928737!
test09
	
	|cartId tusLibros aTimeSimulator |
	
	aTimeSimulator := TimeSimulator startingAt: testObjectsFactory today.
	tusLibros := TusLibrosInterface 
				forCatalog: (testObjectsFactory defaultCatalog) 
				withUsers: (testObjectsFactory defaultUsers) 
				through: self 
				on: (aTimeSimulator) 
				registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	aTimeSimulator passMinutes: 31.
	
	self should: [tusLibros listCartForId: cartId] raise: Error withMessageText: TusLibrosInterface sessionExpiredMessage.! !

!testRun: #TusLibrosInterfaceTest #test09 stamp: 'FC 11/30/2020 18:46:51'!
ERROR!

DateAndTime now.!

DateAndTime now + 30*minute.!

DateAndTime now + (30*minute).!

DateAndTime now + DateAndTime now !

DateAndTime now + 15 minutes.!

DateAndTime now + 15 minutes.!

DateAndTime now + 15 minutes.!

DateAndTime now + 15 minutes.!

DateAndTime now + 15 minutes.!

DateAndTime now + 15 minutes.!

DateAndTime now + 15 minutes.!

DateAndTime now + 15 minutes.!

DateAndTime now + 15 minutes.!

DateAndTime now + 15 minutes.!
!TimeSimulator methodsFor: 'initialization' stamp: 'FC 11/30/2020 18:52:45' prior: 50928185!
passMinutes: aTimeInMinutes.
	currentDateTime := currentDateTime next: aTimeInMinutes minutes.! !

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 18:52:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 11/30/2020 18:52:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 11/30/2020 18:52:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 11/30/2020 18:52:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 18:52:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 11/30/2020 18:52:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 18:52:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09 stamp: 'FC 11/30/2020 18:52:46'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test09 stamp: 'FC 11/30/2020 18:52:46'!
ERROR!
!TimeSimulator methodsFor: 'initialization' stamp: 'FC 11/30/2020 18:52:55' prior: 50928794!
passMinutes: aTimeInMinutes.
	currentDateTime := currentDateTime + aTimeInMinutes minutes.! !

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 18:52:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 11/30/2020 18:52:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 11/30/2020 18:52:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 11/30/2020 18:52:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 18:52:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 11/30/2020 18:52:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 18:52:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09 stamp: 'FC 11/30/2020 18:52:56'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test09 stamp: 'FC 11/30/2020 18:52:56'!
ERROR!
!TusLibrosInterface class methodsFor: 'error' stamp: 'FC 11/30/2020 18:53:03'!
sessionExpiredMessage
	self shouldBeImplemented.! !
!TusLibrosInterface class methodsFor: 'error' stamp: 'FC 11/30/2020 18:53:12' prior: 50928865!
sessionExpiredMessage
	^'Session Expired'.! !

!testRun: #TusLibrosInterfaceTest #test09 stamp: 'FC 11/30/2020 18:53:13'!
FAILURE!

DateAndTime now distanceTo: DateAndTime now.!

DateAndTime now - DateAndTime now.!

DateAndTime now minute !

DateAndTime now minute !

DateAndTime now + (Duration minutes: 30)!

DateAndTime now - DateAndTime now.!

DateAndTime now - DateAndTime now class!

(DateAndTime now - DateAndTime now) class!

(DateAndTime now - DateAndTime now) > 30 minutes.!
!TusLibrosInterface methodsFor: 'adding' stamp: 'FC 11/30/2020 19:03:03' prior: 50924203!
getCartAt: aCartId
	| cartTime |
	cartTime := cartTimes at: aCartId ifAbsent: [self error: self class cartNotFoundMessage].
	^ carts at: aCartId! !
!TusLibrosInterface methodsFor: 'adding' stamp: 'FC 11/30/2020 19:04:20' prior: 50928888!
getCartAt: aCartId
	| cartTime |
	cartTime := cartTimes at: aCartId ifAbsent: [self error: self class cartNotFoundMessage].
	((cartTime - currentDateTime now) > 30 minutes) ifTrue:[ self error: self class sessionExpiredMessage].
	^ carts at: aCartId! !

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 19:04:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 11/30/2020 19:04:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 11/30/2020 19:04:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 11/30/2020 19:04:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 19:04:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 11/30/2020 19:04:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 19:04:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09 stamp: 'FC 11/30/2020 19:04:22'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test09 stamp: 'FC 11/30/2020 19:04:22'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 19:04:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 11/30/2020 19:04:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 11/30/2020 19:04:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 11/30/2020 19:04:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 19:04:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 11/30/2020 19:04:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 19:04:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09 stamp: 'FC 11/30/2020 19:04:41'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test09 stamp: 'FC 11/30/2020 19:04:41'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test09 stamp: 'FC 11/30/2020 19:05:14'!
FAILURE!

currentDateTime now!
!TusLibrosInterface methodsFor: 'adding' stamp: 'FC 11/30/2020 19:07:32' prior: 50928896!
getCartAt: aCartId
	| cartTime |
	cartTime := cartTimes at: aCartId ifAbsent: [self error: self class cartNotFoundMessage].
	((currentDateTime now - cartTime  ) > 30 minutes) ifTrue:[ self error: self class sessionExpiredMessage].
	^ carts at: aCartId! !

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 19:07:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 11/30/2020 19:07:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 11/30/2020 19:07:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 11/30/2020 19:07:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 19:07:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 11/30/2020 19:07:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 19:07:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09 stamp: 'FC 11/30/2020 19:07:33'!
PASSED!
!TusLibrosInterface methodsFor: 'adding' stamp: 'FC 11/30/2020 19:07:44'!
expirationTime

	^ 30 minutes! !
!TusLibrosInterface methodsFor: 'adding' stamp: 'FC 11/30/2020 19:07:44' prior: 50928969!
getCartAt: aCartId
	| cartTime |
	cartTime := cartTimes at: aCartId ifAbsent: [self error: self class cartNotFoundMessage].
	((currentDateTime now - cartTime  ) > self expirationTime) ifTrue:[ self error: self class sessionExpiredMessage].
	^ carts at: aCartId! !
!TusLibrosInterface methodsFor: 'adding' stamp: 'FC 11/30/2020 19:08:07' prior: 50929010!
getCartAt: aCartId
	| cartTime |
	cartTime := cartTimes at: aCartId ifAbsent: [self error: self class cartNotFoundMessage].
	((currentDateTime now - cartTime  ) > self expirationTime) ifTrue:[ self error: self class sessionExpiredMessage].
	^ carts at: aCartId! !
!TusLibrosInterface methodsFor: 'adding' stamp: 'FC 11/30/2020 19:08:14'!
validateExpiration: aCartId

	| cartTime |
	cartTime := cartTimes at: aCartId ifAbsent: [self error: self class cartNotFoundMessage].
	((currentDateTime now - cartTime  ) > self expirationTime) ifTrue:[ self error: self class sessionExpiredMessage]! !
!TusLibrosInterface methodsFor: 'adding' stamp: 'FC 11/30/2020 19:08:14' prior: 50929022!
getCartAt: aCartId
	self validateExpiration: aCartId.
	^ carts at: aCartId! !
!TusLibrosInterface methodsFor: 'adding' stamp: 'FC 11/30/2020 19:08:30'!
validateCart: aCartId

	| cartTime |
	cartTime := cartTimes at: aCartId ifAbsent: [self error: self class cartNotFoundMessage].
	((currentDateTime now - cartTime  ) > self expirationTime) ifTrue:[ self error: self class sessionExpiredMessage]! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 19:08:30' prior: 50929044!
getCartAt: aCartId
	self validateCart: aCartId.
	^ carts at: aCartId! !

!methodRemoval: TusLibrosInterface #validateExpiration: stamp: 'FC 11/30/2020 19:08:30'!
validateExpiration: aCartId

	| cartTime |
	cartTime := cartTimes at: aCartId ifAbsent: [self error: self class cartNotFoundMessage].
	((currentDateTime now - cartTime  ) > self expirationTime) ifTrue:[ self error: self class sessionExpiredMessage]!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FC 11/30/2020 19:09:13'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog validUsers merchantProcessor lastId carts salesBook currentDateTime cartsAccessTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 19:09:13' prior: 50928644!
createCartForUser: aUser withPassword: aPassword 
	
	| cartId |
	self authenticateUser: aUser withPassword: aPassword.
	
	cartId := self getNewId.

	carts add: cartId->(Cart acceptingItemsOf: catalog).
	cartsAccessTimes add: cartId->currentDateTime now.
	
	^cartId.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 19:09:13' prior: 50928656!
initializeForCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor on: aDate registeringOn: aSalesBook  

	catalog := aCatalog.
	validUsers := registeredUsers.
	merchantProcessor := aMerchantProcessor.
	lastId  := 0.
	carts := Dictionary new.
	cartsAccessTimes := Dictionary new.
	salesBook := aSalesBook.
	currentDateTime := aDate.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 19:09:13' prior: 50929049!
validateCart: aCartId

	| cartTime |
	cartTime := cartsAccessTimes at: aCartId ifAbsent: [self error: self class cartNotFoundMessage].
	((currentDateTime now - cartTime  ) > self expirationTime) ifTrue:[ self error: self class sessionExpiredMessage]! !

Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog validUsers merchantProcessor lastId carts salesBook currentDateTime cartTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FC 11/30/2020 19:09:44'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog validUsers merchantProcessor lastId carts salesBook currentDateTime cartTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FC 11/30/2020 19:09:51'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog validUsers merchantProcessor lastId carts salesBook currentDateTime cartAccessTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 19:10:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 11/30/2020 19:10:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 11/30/2020 19:10:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 11/30/2020 19:10:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 19:10:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 11/30/2020 19:10:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 19:10:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09 stamp: 'FC 11/30/2020 19:10:00'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 19:11:26'!
test10
	
	|cartId tusLibros aTimeSimulator |
	
	aTimeSimulator := TimeSimulator startingAt: testObjectsFactory today.
	tusLibros := TusLibrosInterface 
				forCatalog: (testObjectsFactory defaultCatalog) 
				withUsers: (testObjectsFactory defaultUsers) 
				through: self 
				on: (aTimeSimulator) 
				registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	aTimeSimulator passMinutes: 28.
	
	tusLibros listCartForId: cartId.
	
	aTimeSimulator passMinutes: 3.
	
	self assert: (tusLibros listCartForId: cartId) isEmpty.! !

!testRun: #TusLibrosInterfaceTest #test10 stamp: 'FC 11/30/2020 19:11:27'!
ERROR!
!TusLibrosInterface methodsFor: 'adding' stamp: 'FC 11/30/2020 19:12:12' prior: 50929060!
getCartAt: aCartId
	
	self validateCart: aCartId.
	cartAccessTimes at: aCartId put: 	currentDateTime now.
	^ carts at: aCartId! !

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FC 11/30/2020 19:12:19'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog validUsers merchantProcessor lastId carts salesBook currentDateTime updateCartTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 19:12:19' prior: 50929202!
getCartAt: aCartId
	
	self validateCart: aCartId.
	updateCartTime at: aCartId put: 	currentDateTime now.
	^ carts at: aCartId! !

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FC 11/30/2020 19:12:45'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog validUsers merchantProcessor lastId carts salesBook currentDateTime cartAccessTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 19:12:45' prior: 50929220!
getCartAt: aCartId
	
	self validateCart: aCartId.
	cartAccessTimes at: aCartId put: 	currentDateTime now.
	^ carts at: aCartId! !

Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog validUsers merchantProcessor lastId carts salesBook currentDateTime updateCartTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FC 11/30/2020 19:12:51'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog validUsers merchantProcessor lastId carts salesBook currentDateTime updateCartTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FC 11/30/2020 19:13:00'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog validUsers merchantProcessor lastId carts salesBook currentDateTime cartAccessTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'adding' stamp: 'FC 11/30/2020 19:14:05'!
updateCartAccessTime: aCartId

	^ cartAccessTimes at: aCartId put: 	currentDateTime now! !
!TusLibrosInterface methodsFor: 'adding' stamp: 'FC 11/30/2020 19:14:05' prior: 50929238!
getCartAt: aCartId
	
	self validateCart: aCartId.
	self updateCartAccessTime: aCartId.
	^ carts at: aCartId! !

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 19:14:06'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 11/30/2020 19:14:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 11/30/2020 19:14:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 11/30/2020 19:14:06'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 19:14:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 11/30/2020 19:14:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 19:14:06'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test09 stamp: 'FC 11/30/2020 19:14:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10 stamp: 'FC 11/30/2020 19:14:07'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 19:14:11'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 19:14:20'!
ERROR!

cartAccessTimes at: aCartId !

cartAccessTimes!
!TusLibrosInterface methodsFor: 'initialization' stamp: 'FC 11/30/2020 19:15:12' prior: 50929099!
initializeForCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor on: aDate registeringOn: aSalesBook  

	catalog := aCatalog.
	validUsers := registeredUsers.
	merchantProcessor := aMerchantProcessor.
	lastId  := 0.
	carts := Dictionary new.
	cartAccessTimes := Dictionary new.
	salesBook := aSalesBook.
	currentDateTime := aDate.! !

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 19:15:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 11/30/2020 19:15:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 11/30/2020 19:15:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 11/30/2020 19:15:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 19:15:13'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 11/30/2020 19:15:13'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 19:15:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09 stamp: 'FC 11/30/2020 19:15:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10 stamp: 'FC 11/30/2020 19:15:13'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 19:15:16'!
FAILURE!
!TusLibrosInterface methodsFor: 'adding' stamp: 'FC 11/30/2020 19:15:38' prior: 50929114!
validateCart: aCartId

	| cartTime |
	cartTime := cartAccessTimes at: aCartId ifAbsent: [self error: self class cartNotFoundMessage].
	((currentDateTime now - cartTime  ) > self expirationTime) ifTrue:[ self error: self class sessionExpiredMessage]! !

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 19:15:39'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 11/30/2020 19:15:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 11/30/2020 19:15:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 11/30/2020 19:15:39'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 19:15:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 11/30/2020 19:15:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 19:15:39'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test09 stamp: 'FC 11/30/2020 19:15:39'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test10 stamp: 'FC 11/30/2020 19:15:39'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 19:15:43'!
ERROR!
!TusLibrosInterface methodsFor: 'cart' stamp: 'FC 11/30/2020 19:16:23' prior: 50929087!
createCartForUser: aUser withPassword: aPassword 
	
	| cartId |
	self authenticateUser: aUser withPassword: aPassword.
	
	cartId := self getNewId.

	carts add: cartId->(Cart acceptingItemsOf: catalog).
	self updateCartAccessTime: cartId.
	
	^cartId.! !

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 19:16:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 11/30/2020 19:16:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 11/30/2020 19:16:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 11/30/2020 19:16:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 19:16:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 11/30/2020 19:16:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 19:16:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09 stamp: 'FC 11/30/2020 19:16:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10 stamp: 'FC 11/30/2020 19:16:23'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 19:37:14'!
test09CanNotListExpiredCart
	
	|cartId tusLibros aTimeSimulator |
	
	aTimeSimulator := TimeSimulator startingAt: testObjectsFactory today.
	tusLibros := TusLibrosInterface 
				forCatalog: (testObjectsFactory defaultCatalog) 
				withUsers: (testObjectsFactory defaultUsers) 
				through: self 
				on: (aTimeSimulator) 
				registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	aTimeSimulator passMinutes: 31.
	
	self should: [tusLibros listCartForId: cartId] raise: Error withMessageText: TusLibrosInterface sessionExpiredMessage.! !

!methodRemoval: TusLibrosInterfaceTest #test09 stamp: 'FC 11/30/2020 19:37:14'!
test09
	
	|cartId tusLibros aTimeSimulator |
	
	aTimeSimulator := TimeSimulator startingAt: testObjectsFactory today.
	tusLibros := TusLibrosInterface 
				forCatalog: (testObjectsFactory defaultCatalog) 
				withUsers: (testObjectsFactory defaultUsers) 
				through: self 
				on: (aTimeSimulator) 
				registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	aTimeSimulator passMinutes: 31.
	
	self should: [tusLibros listCartForId: cartId] raise: Error withMessageText: TusLibrosInterface sessionExpiredMessage.!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 19:37:49'!
test10ExpirationTimeRefreshesAfterUse
	
	|cartId tusLibros aTimeSimulator |
	
	aTimeSimulator := TimeSimulator startingAt: testObjectsFactory today.
	tusLibros := TusLibrosInterface 
				forCatalog: (testObjectsFactory defaultCatalog) 
				withUsers: (testObjectsFactory defaultUsers) 
				through: self 
				on: (aTimeSimulator) 
				registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	aTimeSimulator passMinutes: 28.
	
	tusLibros listCartForId: cartId.
	
	aTimeSimulator passMinutes: 3.
	
	self assert: (tusLibros listCartForId: cartId) isEmpty.! !

!methodRemoval: TusLibrosInterfaceTest #test10 stamp: 'FC 11/30/2020 19:37:49'!
test10
	
	|cartId tusLibros aTimeSimulator |
	
	aTimeSimulator := TimeSimulator startingAt: testObjectsFactory today.
	tusLibros := TusLibrosInterface 
				forCatalog: (testObjectsFactory defaultCatalog) 
				withUsers: (testObjectsFactory defaultUsers) 
				through: self 
				on: (aTimeSimulator) 
				registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	aTimeSimulator passMinutes: 28.
	
	tusLibros listCartForId: cartId.
	
	aTimeSimulator passMinutes: 3.
	
	self assert: (tusLibros listCartForId: cartId) isEmpty.!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 19:37:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 19:37:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 19:37:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 11/30/2020 19:37:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 11/30/2020 19:37:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 11/30/2020 19:37:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 19:37:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 11/30/2020 19:37:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 19:37:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListExpiredCart stamp: 'FC 11/30/2020 19:37:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10ExpirationTimeRefreshesAfterUse stamp: 'FC 11/30/2020 19:37:55'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 19:38:07'!
test09CanNotOperateWithExpiredCart
	
	|cartId tusLibros aTimeSimulator |
	
	aTimeSimulator := TimeSimulator startingAt: testObjectsFactory today.
	tusLibros := TusLibrosInterface 
				forCatalog: (testObjectsFactory defaultCatalog) 
				withUsers: (testObjectsFactory defaultUsers) 
				through: self 
				on: (aTimeSimulator) 
				registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	aTimeSimulator passMinutes: 31.
	
	self should: [tusLibros listCartForId: cartId] raise: Error withMessageText: TusLibrosInterface sessionExpiredMessage.! !

!methodRemoval: TusLibrosInterfaceTest #test09CanNotListExpiredCart stamp: 'FC 11/30/2020 19:38:07'!
test09CanNotListExpiredCart
	
	|cartId tusLibros aTimeSimulator |
	
	aTimeSimulator := TimeSimulator startingAt: testObjectsFactory today.
	tusLibros := TusLibrosInterface 
				forCatalog: (testObjectsFactory defaultCatalog) 
				withUsers: (testObjectsFactory defaultUsers) 
				through: self 
				on: (aTimeSimulator) 
				registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	aTimeSimulator passMinutes: 31.
	
	self should: [tusLibros listCartForId: cartId] raise: Error withMessageText: TusLibrosInterface sessionExpiredMessage.!

Object subclass: #Session
	instanceVariableNames: 'cartId lastAccessTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Session category: 'TusLibros' stamp: 'FC 11/30/2020 20:22:36'!
Object subclass: #Session
	instanceVariableNames: 'cartId lastAccessTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Session class methodsFor: 'no messages' stamp: 'FC 11/30/2020 20:23:42'!
for: aCartId createdAt: aDateTime.
	^self new initializeFor: aCartId createdAt: aDateTime.! !
!Session methodsFor: 'no messages' stamp: 'FC 11/30/2020 20:25:03'!
initializeFor: aCartId createdAt: aDateTime
	cartId := aCartId 
	! !

!classDefinition: #Session category: 'TusLibros' stamp: 'FC 11/30/2020 20:25:12'!
Object subclass: #Session
	instanceVariableNames: 'cart lastAccessTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Session methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 20:25:12' prior: 50929638!
initializeFor: aCartId createdAt: aDateTime
	cart := aCartId 
	! !
!Session methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 20:25:18' prior: 50929651!
initializeFor: aCart createdAt: aDateTime
	cart := aCart 
	! !
!Session methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 20:25:31' prior: 50929656!
initializeFor: aCart createdAt: aDateTime
	cart := aCart. 
	lastAccessTime := aDateTime! !
!Session class methodsFor: 'instance creation' stamp: 'FC 11/30/2020 20:25:39' prior: 50929632!
for: aCart createdAt: aDateTime.
	^self new initializeFor: aCart createdAt: aDateTime.! !
!Session methodsFor: 'accessing' stamp: 'FC 11/30/2020 20:26:54'!
cart
	^cart.! !

----SNAPSHOT----(30 November 2020 20:27:20) CuisUniversity-4383.image priorSource: 18989575!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FC 11/30/2020 20:29:32'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog validUsers merchantProcessor lastId activeSessions salesBook currentDateTime cartAccessTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 20:29:32' prior: 50929413!
createCartForUser: aUser withPassword: aPassword 
	
	| cartId |
	self authenticateUser: aUser withPassword: aPassword.
	
	cartId := self getNewId.

	activeSessions add: cartId->(Cart acceptingItemsOf: catalog).
	self updateCartAccessTime: cartId.
	
	^cartId.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 20:29:32' prior: 50929322!
initializeForCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor on: aDate registeringOn: aSalesBook  

	catalog := aCatalog.
	validUsers := registeredUsers.
	merchantProcessor := aMerchantProcessor.
	lastId  := 0.
	activeSessions := Dictionary new.
	cartAccessTimes := Dictionary new.
	salesBook := aSalesBook.
	currentDateTime := aDate.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 20:29:32' prior: 50929278!
getCartAt: aCartId
	
	self validateCart: aCartId.
	self updateCartAccessTime: aCartId.
	^ activeSessions at: aCartId! !
!TusLibrosInterface methodsFor: 'cart' stamp: 'FC 11/30/2020 20:31:15'!
newCart

	^ Cart acceptingItemsOf: catalog! !
!TusLibrosInterface methodsFor: 'cart' stamp: 'FC 11/30/2020 20:31:15' prior: 50929689!
createCartForUser: aUser withPassword: aPassword 
	
	| cartId |
	self authenticateUser: aUser withPassword: aPassword.
	
	cartId := self getNewId.

	activeSessions add: cartId->(self newCart).
	self updateCartAccessTime: cartId.
	
	^cartId.! !
!TusLibrosInterface methodsFor: 'cart' stamp: 'FC 11/30/2020 20:31:21' prior: 50929727!
createCartForUser: aUser withPassword: aPassword 
	
	| cartId |
	self authenticateUser: aUser withPassword: aPassword.
	
	cartId := self getNewId.

	activeSessions add: cartId->self newCart.
	self updateCartAccessTime: cartId.
	
	^cartId.! !
!TusLibrosInterface methodsFor: 'cart' stamp: 'FC 11/30/2020 20:32:04' prior: 50929738!
createCartForUser: aUser withPassword: aPassword 
	
	| cartId |
	self authenticateUser: aUser withPassword: aPassword.
	
	cartId := self getNewId.

	activeSessions add: cartId->(Session for: self newCart createdAt: 1 now).
	
	^cartId.! !
!TusLibrosInterface methodsFor: 'cart' stamp: 'FC 11/30/2020 20:32:16' prior: 50929749!
createCartForUser: aUser withPassword: aPassword 
	
	| cartId |
	self authenticateUser: aUser withPassword: aPassword.
	
	cartId := self getNewId.

	activeSessions add: cartId->(Session for: self newCart createdAt: currentDateTime now).
	
	^cartId.! !
!TusLibrosInterface methodsFor: 'accessing - private' stamp: 'FC 11/30/2020 20:32:44' prior: 50929716!
getCartAt: aCartId
	
	self validateCart: aCartId.
	self updateCartAccessTime: aCartId.
	^ activeSessions at: aCartId cart! !
!TusLibrosInterface methodsFor: 'adding' stamp: 'FC 11/30/2020 20:33:12'!
updateSessionAccessTime: aCartId

	^ cartAccessTimes at: aCartId put: 	currentDateTime now! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FC 11/30/2020 20:33:12' prior: 50929772!
getCartAt: aCartId
	
	self validateCart: aCartId.
	self updateSessionAccessTime: aCartId.
	^ activeSessions at: aCartId cart! !

!methodRemoval: TusLibrosInterface #updateCartAccessTime: stamp: 'FC 11/30/2020 20:33:12'!
updateCartAccessTime: aCartId

	^ cartAccessTimes at: aCartId put: 	currentDateTime now!
!TusLibrosInterface methodsFor: 'validation' stamp: 'FC 11/30/2020 20:35:00' prior: 50929369!
validateCart: aCartId

	| session |
	session := activeSessions at: aCartId ifAbsent: [self error: self class cartNotFoundMessage].
	(session isExpiredAt: currentDateTime now) ifTrue: [self error: self class sessionExpiredMessage ].
! !
!Session methodsFor: 'accessing' stamp: 'FC 11/30/2020 20:35:44'!
isExpiredAt: aDateTime
	((aDateTime now - lastAccessTime) > self expirationTime) ifTrue:[ self error: self class sessionExpiredMessage]! !
!TusLibrosInterface class methodsFor: 'constants' stamp: 'FC 11/30/2020 20:35:57'!
expirationTime

	^ 30 minutes! !

!methodRemoval: TusLibrosInterface #expirationTime stamp: 'FC 11/30/2020 20:35:57'!
expirationTime

	^ 30 minutes!
!Session methodsFor: 'accessing' stamp: 'FC 11/30/2020 20:37:03'!
expirationTime
	^ 30 minutes.! !
!Session methodsFor: 'accessing' stamp: 'FC 11/30/2020 20:37:12' prior: 50929809!
isExpiredAt: aDateTime
	^((aDateTime now - lastAccessTime) > self expirationTime)! !

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 20:37:18'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 11/30/2020 20:37:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 11/30/2020 20:37:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 11/30/2020 20:37:18'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 20:37:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 11/30/2020 20:37:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 20:37:18'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test09CanNotOperateWithExpiredCart stamp: 'FC 11/30/2020 20:37:18'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test10ExpirationTimeRefreshesAfterUse stamp: 'FC 11/30/2020 20:37:18'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 20:37:21'!
ERROR!
!Session methodsFor: 'accessing' stamp: 'FC 11/30/2020 20:37:54' prior: 50929827!
isExpiredAt: aDateTime
	^((aDateTime - lastAccessTime) > self expirationTime)! !

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 20:37:57'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 11/30/2020 20:37:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 11/30/2020 20:37:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 11/30/2020 20:37:57'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 20:37:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 11/30/2020 20:37:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 20:37:57'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test09CanNotOperateWithExpiredCart stamp: 'FC 11/30/2020 20:37:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10ExpirationTimeRefreshesAfterUse stamp: 'FC 11/30/2020 20:37:57'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 20:38:00'!
ERROR!
!TusLibrosInterface methodsFor: 'accessing - private' stamp: 'FC 11/30/2020 20:38:18' prior: 50929786!
getCartAt: aCartId
	
	self validateCart: aCartId.
	self updateSessionAccessTime: aCartId.
	^ (activeSessions at: aCartId) cart! !

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 20:38:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 11/30/2020 20:38:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 11/30/2020 20:38:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 11/30/2020 20:38:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 20:38:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 11/30/2020 20:38:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 20:38:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotOperateWithExpiredCart stamp: 'FC 11/30/2020 20:38:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10ExpirationTimeRefreshesAfterUse stamp: 'FC 11/30/2020 20:38:19'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test10ExpirationTimeRefreshesAfterUse stamp: 'FC 11/30/2020 20:38:19'!
ERROR!
!TusLibrosInterface methodsFor: 'adding' stamp: 'FC 11/30/2020 20:39:09' prior: 50929779!
updateSessionAccessTime: aCartId

	^(activeSessions at: aCartId) accesedAt: currentDateTime now.! !
!Session methodsFor: 'accessing' stamp: 'FC 11/30/2020 20:39:28'!
accessedAt: aDateTime
	lastAccessTime := aDateTime.! !

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 20:39:30'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 11/30/2020 20:39:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 11/30/2020 20:39:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 11/30/2020 20:39:30'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 20:39:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 11/30/2020 20:39:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 20:39:30'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test09CanNotOperateWithExpiredCart stamp: 'FC 11/30/2020 20:39:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10ExpirationTimeRefreshesAfterUse stamp: 'FC 11/30/2020 20:39:30'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 20:39:33'!
ERROR!
!TusLibrosInterface methodsFor: 'adding' stamp: 'FC 11/30/2020 20:39:52' prior: 50929950!
updateSessionAccessTime: aCartId

	^(activeSessions at: aCartId) accessedAt: currentDateTime now.! !

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 20:39:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 11/30/2020 20:39:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 11/30/2020 20:39:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 11/30/2020 20:39:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 20:39:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 11/30/2020 20:39:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 20:39:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotOperateWithExpiredCart stamp: 'FC 11/30/2020 20:39:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10ExpirationTimeRefreshesAfterUse stamp: 'FC 11/30/2020 20:39:53'!
PASSED!
!TusLibrosInterface methodsFor: 'checkOut' stamp: 'FC 11/30/2020 20:40:32' prior: 50928599!
checkOutCartId: aCartId payingWith: aCreditCard 
	
	| cart cashier total |
	cart := self getCartAt: aCartId.
	cashier := Cashier toCheckout: cart  charging: aCreditCard  throught: merchantProcessor  on: currentDateTime now registeringOn: salesBook.
	
	total := cashier checkOut.
	
	self removeSession: aCartId.
	^total.! !
!TusLibrosInterface methodsFor: 'checkOut' stamp: 'FC 11/30/2020 20:41:02'!
removeSession: aCartId
	activeSessions remove: aCartId.! !

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 20:41:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 11/30/2020 20:41:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 11/30/2020 20:41:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 11/30/2020 20:41:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 20:41:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 11/30/2020 20:41:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 20:41:04'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test09CanNotOperateWithExpiredCart stamp: 'FC 11/30/2020 20:41:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10ExpirationTimeRefreshesAfterUse stamp: 'FC 11/30/2020 20:41:04'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 20:41:04'!
ERROR!
!TusLibrosInterface methodsFor: 'validation' stamp: 'FC 11/30/2020 20:41:53' prior: 50929799!
validateCart: aCartId

	| session |
	session := activeSessions at: aCartId ifAbsent: [self error: self class cartNotFoundMessage].
	(session isExpiredAt: currentDateTime now) ifTrue: [
		self removeSession: aCartId.
		self error: self class sessionExpiredMessage ].
! !

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 20:41:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 11/30/2020 20:41:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 11/30/2020 20:41:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 11/30/2020 20:41:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 20:41:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 11/30/2020 20:41:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 20:41:54'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test09CanNotOperateWithExpiredCart stamp: 'FC 11/30/2020 20:41:54'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test10ExpirationTimeRefreshesAfterUse stamp: 'FC 11/30/2020 20:41:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 20:41:57'!
ERROR!
!TusLibrosInterface methodsFor: 'session handling - private' stamp: 'FC 11/30/2020 20:43:41' prior: 50930046!
removeSession: aCartId
	activeSessions removeKey: aCartId.! !

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 11/30/2020 20:43:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 11/30/2020 20:43:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 11/30/2020 20:43:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 11/30/2020 20:43:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 11/30/2020 20:43:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 11/30/2020 20:43:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 11/30/2020 20:43:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotOperateWithExpiredCart stamp: 'FC 11/30/2020 20:43:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10ExpirationTimeRefreshesAfterUse stamp: 'FC 11/30/2020 20:43:42'!
PASSED!

----SNAPSHOT----(30 November 2020 20:43:48) CuisUniversity-4383.image priorSource: 19136783!

----QUIT----(30 November 2020 20:43:51) CuisUniversity-4383.image priorSource: 19152575!

----STARTUP---- (2 December 2020 16:11:15) as C:\Users\Felip\Desktop\Dev\Inge 1\ST\windows64\CuisUniversity-4383.image!


!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 12/2/2020 16:11:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 12/2/2020 16:11:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 12/2/2020 16:11:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 12/2/2020 16:11:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 12/2/2020 16:11:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 12/2/2020 16:11:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 12/2/2020 16:11:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotOperateWithExpiredCart stamp: 'FC 12/2/2020 16:11:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10ExpirationTimeRefreshesAfterUse stamp: 'FC 12/2/2020 16:11:21'!
PASSED!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FC 12/2/2020 16:12:46'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration ownerName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FC 12/2/2020 16:12:48'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration ownerName cardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FC 12/2/2020 16:12:44'!
initializeWithOwner: aName Number: aCardNumber ExpirationDate: aMonthOfYear
	ownerName := aName.
	cardNumber := aCardNumber.
	expiration := aMonthOfYear.! !
!CreditCard methodsFor: 'initialization' stamp: 'FC 12/2/2020 16:13:03' prior: 50930224!
initializeWithOwner: aName Number: aCardNumber ExpirationDate: aMonthOfYear
	ownerName = aName.
	cardNumber = aCardNumber.
	expiration := aMonthOfYear.! !
!CreditCard methodsFor: 'initialization' stamp: 'FC 12/2/2020 16:13:10' prior: 50930232!
initializeWithOwner: aName Number: aCardNumber ExpirationDate: aMonthOfYear
	ownerName := aName.
	cardNumber := aCardNumber.
	expiration := aMonthOfYear.! !

!methodRemoval: CreditCard #initializeWithOwner:Number:ExpirationDate: stamp: 'FC 12/2/2020 16:13:45'!
initializeWithOwner: aName Number: aCardNumber ExpirationDate: aMonthOfYear
	ownerName := aName.
	cardNumber := aCardNumber.
	expiration := aMonthOfYear.!
!CreditCard methodsFor: 'initialization' stamp: 'FC 12/2/2020 16:14:28'!
withOwner: aName initializeExpiringOn: aMonth 
	
	expiration := aMonth ! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'FC 12/2/2020 16:14:28' prior: 50923229!
expiringOn: aMonth 
	
	^self new withOwner: aName initializeExpiringOn: aMonth! !

!methodRemoval: CreditCard #initializeExpiringOn: stamp: 'FC 12/2/2020 16:14:28'!
initializeExpiringOn: aMonth 
	
	expiration := aMonth !
!CreditCard methodsFor: 'initialization' stamp: 'FC 12/2/2020 16:14:42' prior: 50930256!
withOwner: aName initializeExpiringOn: aMonth 
	
	expiration := aMonth 
	! !
!CreditCard methodsFor: 'initialization' stamp: 'FC 12/2/2020 16:14:53' prior: 50930272!
withOwner: aName initializeExpiringOn: aMonth 
	
	expiration := aMonth.
	ownerName := aName.
	! !
!CreditCard methodsFor: 'initialization' stamp: 'FC 12/2/2020 16:15:21'!
withOwner: aName aCCNumber: aCCNumber initializeExpiringOn: aMonth 
	
	expiration := aMonth.
	ownerName := aName.
	! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'FC 12/2/2020 16:15:21' prior: 50930262!
expiringOn: aMonth 
	
	^self new withOwner: aName aCCNumber: aCCNumber initializeExpiringOn: aMonth! !

!methodRemoval: CreditCard #withOwner:initializeExpiringOn: stamp: 'FC 12/2/2020 16:15:21'!
withOwner: aName initializeExpiringOn: aMonth 
	
	expiration := aMonth.
	ownerName := aName.
	!
!CreditCard methodsFor: 'initialization' stamp: 'FC 12/2/2020 16:15:30' prior: 50930284!
withOwner: aName aCCNumber: aCCNumber initializeExpiringOn: aMonth 
	
	expiration := aMonth.
	ownerName := aName.
	cardNumber := aCCNumber.
	! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FC 12/2/2020 16:16:37'!
withOwner: aName expiringOn: aMonth 
	
	^self new withOwner: aName aCCNumber: aCCNumber initializeExpiringOn: aMonth! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'FC 12/2/2020 16:16:37' prior: 50923303!
notExpiredCreditCard
	
	^CreditCard withOwner: 'Juan' expiringOn: (Month month: today monthIndex year: today yearNumber + 1)! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'FC 12/2/2020 16:16:37' prior: 50923310!
expiredCreditCard
	
	^CreditCard withOwner: 'Juan' expiringOn: (Month month: today monthIndex year: today yearNumber - 1)! !

!methodRemoval: CreditCard class #expiringOn: stamp: 'FC 12/2/2020 16:16:37'!
expiringOn: aMonth 
	
	^self new withOwner: aName aCCNumber: aCCNumber initializeExpiringOn: aMonth!
!CreditCard methodsFor: 'initialization' stamp: 'FC 12/2/2020 16:17:15'!
withOwner: aName withCCNumber: aCCNumber initializeExpiringOn: aMonth 
	
	expiration := aMonth.
	ownerName := aName.
	cardNumber := aCCNumber.
	! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'FC 12/2/2020 16:17:15' prior: 50930311!
withOwner: aName expiringOn: aMonth 
	
	^self new withOwner: aName withCCNumber: aCCNumber initializeExpiringOn: aMonth! !

!methodRemoval: CreditCard #withOwner:aCCNumber:initializeExpiringOn: stamp: 'FC 12/2/2020 16:17:15'!
withOwner: aName aCCNumber: aCCNumber initializeExpiringOn: aMonth 
	
	expiration := aMonth.
	ownerName := aName.
	cardNumber := aCCNumber.
	!
!CreditCard methodsFor: 'initialization' stamp: 'FC 12/2/2020 16:17:40'!
initializeWithOwner: aName withCCNumber: aCCNumber expiringOn: aMonth 
	
	expiration := aMonth.
	ownerName := aName.
	cardNumber := aCCNumber.
	! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'FC 12/2/2020 16:17:40' prior: 50930347!
withOwner: aName expiringOn: aMonth 
	
	^self new initializeWithOwner: aName withCCNumber: aCCNumber expiringOn: aMonth! !

!methodRemoval: CreditCard #withOwner:withCCNumber:initializeExpiringOn: stamp: 'FC 12/2/2020 16:17:40'!
withOwner: aName withCCNumber: aCCNumber initializeExpiringOn: aMonth 
	
	expiration := aMonth.
	ownerName := aName.
	cardNumber := aCCNumber.
	!
!CreditCard class methodsFor: 'instance creation' stamp: 'FC 12/2/2020 16:18:23'!
withOwner: aName withCCNumber: aCCNumber expiringOn: aMonth 
	
	^self new initializeWithOwner: aName withCCNumber: aCCNumber expiringOn: aMonth! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'FC 12/2/2020 16:18:23' prior: 50930319!
notExpiredCreditCard
	
	^CreditCard withOwner: 'Juan' withCCNumber: '4555123412346666' expiringOn: (Month month: today monthIndex year: today yearNumber + 1)! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'FC 12/2/2020 16:18:23' prior: 50930327!
expiredCreditCard
	
	^CreditCard withOwner: 'Juan' withCCNumber: '4555123412346666' expiringOn: (Month month: today monthIndex year: today yearNumber - 1)! !

!methodRemoval: CreditCard class #withOwner:expiringOn: stamp: 'FC 12/2/2020 16:18:23'!
withOwner: aName expiringOn: aMonth 
	
	^self new initializeWithOwner: aName withCCNumber: aCCNumber expiringOn: aMonth!

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 12/2/2020 16:18:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 12/2/2020 16:18:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 12/2/2020 16:18:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 12/2/2020 16:18:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 12/2/2020 16:18:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 12/2/2020 16:18:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 12/2/2020 16:18:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotOperateWithExpiredCart stamp: 'FC 12/2/2020 16:18:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10ExpirationTimeRefreshesAfterUse stamp: 'FC 12/2/2020 16:18:33'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'FC 12/2/2020 16:18:53' prior: 50930384!
withOwner: aName withCCNumber: aCCNumber expiringOn: aMonth 
	self validateOwnerName: aName.
	self validateCardNumber: aCCNumber.
	^self new initializeWithOwner: aName withCCNumber: aCCNumber expiringOn: aMonth! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FC 12/2/2020 16:19:12'!
validateOwnerName: aName

	^ aName size = 0 ifTrue: [self error: self emptyNameMessage]! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FC 12/2/2020 16:19:19'!
validateCardNumber: aCardNumber

	^ aCardNumber size < 16 ifTrue: [self error: self invalidCardNumberMessage ]! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FC 12/2/2020 16:19:25'!
invalidCardNumberMessage
	^'Card number is invalid'.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FC 12/2/2020 16:19:29'!
emptyNameMessage
	^'Name can not be empty'.! !

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 12/2/2020 16:19:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 12/2/2020 16:19:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 12/2/2020 16:19:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 12/2/2020 16:19:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 12/2/2020 16:19:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 12/2/2020 16:19:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 12/2/2020 16:19:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotOperateWithExpiredCart stamp: 'FC 12/2/2020 16:19:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10ExpirationTimeRefreshesAfterUse stamp: 'FC 12/2/2020 16:19:32'!
PASSED!

Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog validUsers merchantProcessor lastId activeSessions salesBook currentDateTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FC 12/2/2020 16:20:03'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog validUsers merchantProcessor lastId activeSessions salesBook currentDateTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 12/2/2020 16:20:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 12/2/2020 16:20:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 12/2/2020 16:20:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 12/2/2020 16:20:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 12/2/2020 16:20:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 12/2/2020 16:20:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 12/2/2020 16:20:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotOperateWithExpiredCart stamp: 'FC 12/2/2020 16:20:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10ExpirationTimeRefreshesAfterUse stamp: 'FC 12/2/2020 16:20:05'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'tests' stamp: 'FC 12/2/2020 16:28:45'!
test11
	
	|cartId tusLibros total purchases |
	
	tusLibros := TusLibrosInterface 
				forCatalog: (testObjectsFactory defaultCatalog) 
				withUsers: (testObjectsFactory defaultUsers) 
				through: self 
				on: (TimeSimulator startingAt: testObjectsFactory today) 
				registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	tusLibros addToCart: 1 of: (testObjectsFactory itemSellByTheStore) forId: cartId.
	
	total := tusLibros checkOutCartId: cartId payingWith: testObjectsFactory notExpiredCreditCard.
	
	purchases := tusLibros listPurchases for: 'validUser' withPassword: 'asasas'.
	
	self assert: purchases total equals: total.
	self assert: purchases list includes: testObjectsFactory itemSellByTheStore.! !
!TusLibrosInterfaceTest methodsFor: 'tests' stamp: 'FC 12/2/2020 16:28:58' prior: 50930557!
test11
	
	|cartId tusLibros total purchases |
	
	tusLibros := TusLibrosInterface 
				forCatalog: (testObjectsFactory defaultCatalog) 
				withUsers: (testObjectsFactory defaultUsers) 
				through: self 
				on: (TimeSimulator startingAt: testObjectsFactory today) 
				registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	tusLibros addToCart: 1 of: (testObjectsFactory itemSellByTheStore) forId: cartId.
	
	total := tusLibros checkOutCartId: cartId payingWith: testObjectsFactory notExpiredCreditCard.
	
	purchases := tusLibros listPurchasesFor: 'validUser' withPassword: 'asasas'.
	
	self assert: purchases total equals: total.
	self assert: purchases list includes: testObjectsFactory itemSellByTheStore.! !
!Session class methodsFor: 'instance creation' stamp: 'FC 12/2/2020 16:32:22'!
for: aCart createdAt: aDateTime withBuyer: aBuyer .
	^self new initializeFor: aCart createdAt: aDateTime.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FC 12/2/2020 16:32:22' prior: 50929760!
createCartForUser: aUser withPassword: aPassword 
	
	| cartId |
	self authenticateUser: aUser withPassword: aPassword.
	
	cartId := self getNewId.

	activeSessions add: cartId->(Session for: self newCart createdAt: currentDateTime now withBuyer: user).
	
	^cartId.! !

!methodRemoval: Session class #for:createdAt: stamp: 'FC 12/2/2020 16:32:22'!
for: aCart createdAt: aDateTime.
	^self new initializeFor: aCart createdAt: aDateTime.!
!TusLibrosInterface methodsFor: 'cart' stamp: 'FC 12/2/2020 16:32:35' prior: 50930619!
createCartForUser: aUser withPassword: aPassword 
	
	| cartId |
	self authenticateUser: aUser withPassword: aPassword.
	
	cartId := self getNewId.

	activeSessions add: cartId->(Session for: self newCart createdAt: currentDateTime now withBuyer: aUser).
	
	^cartId.! !

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 12/2/2020 16:32:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 12/2/2020 16:32:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 12/2/2020 16:32:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 12/2/2020 16:32:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 12/2/2020 16:32:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 12/2/2020 16:32:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 12/2/2020 16:32:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotOperateWithExpiredCart stamp: 'FC 12/2/2020 16:32:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10ExpirationTimeRefreshesAfterUse stamp: 'FC 12/2/2020 16:32:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11 stamp: 'FC 12/2/2020 16:32:40'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test11 stamp: 'FC 12/2/2020 16:32:40'!
ERROR!
!Session methodsFor: 'initialization' stamp: 'FC 12/2/2020 16:33:23'!
initializeFor: aCart createdAt: aDateTime withBuyer: aBuyer 
	cart := aCart. 
	lastAccessTime := aDateTime! !
!Session class methodsFor: 'as yet unclassified' stamp: 'FC 12/2/2020 16:33:23' prior: 50930612!
for: aCart createdAt: aDateTime withBuyer: aBuyer .
	^self new initializeFor: aCart createdAt: aDateTime withBuyer: aBuyer.! !

!methodRemoval: Session #initializeFor:createdAt: stamp: 'FC 12/2/2020 16:33:23'!
initializeFor: aCart createdAt: aDateTime
	cart := aCart. 
	lastAccessTime := aDateTime!

!classDefinition: #Session category: 'TusLibros' stamp: 'FC 12/2/2020 16:33:34'!
Object subclass: #Session
	instanceVariableNames: 'cart lastAccessTime buyer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Session methodsFor: 'initialization' stamp: 'FC 12/2/2020 16:33:29' prior: 50930683!
initializeFor: aCart createdAt: aDateTime withBuyer: aBuyer 
	cart := aCart. 
	lastAccessTime := aDateTime.
	buyer := aBuyer.! !
!Session methodsFor: 'accessing' stamp: 'FC 12/2/2020 16:33:55'!
buyer
	^buyer! !
!Cashier class methodsFor: 'instance creation' stamp: 'FC 12/2/2020 16:35:38'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook withBuyer: aBuyer 
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FC 12/2/2020 16:35:38' prior: 50923127!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook withBuyer: aUser.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FC 12/2/2020 16:35:38' prior: 50923101!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook withBuyer: aUser.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FC 12/2/2020 16:35:38' prior: 50923062!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory today
				registeringOn: salesBook withBuyer: aUser ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FC 12/2/2020 16:35:38' prior: 50923151!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook withBuyer: aUser ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FC 12/2/2020 16:35:38' prior: 50930033!
checkOutCartId: aCartId payingWith: aCreditCard 
	
	| cart cashier total |
	cart := self getCartAt: aCartId.
	cashier := Cashier toCheckout: cart  charging: aCreditCard  throught: merchantProcessor  on: currentDateTime now registeringOn: salesBook withBuyer: aUser.
	
	total := cashier checkOut.
	
	self removeSession: aCartId.
	^total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FC 12/2/2020 16:35:38' prior: 50923169!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new withBuyer: aUser.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FC 12/2/2020 16:35:38' prior: 50923083!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook withBuyer: aUser.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !

!methodRemoval: Cashier class #toCheckout:charging:throught:on:registeringOn: stamp: 'FC 12/2/2020 16:35:39'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FC 12/2/2020 16:35:44'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FC 12/2/2020 16:35:44'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FC 12/2/2020 16:35:44'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FC 12/2/2020 16:35:44'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FC 12/2/2020 16:35:44'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FC 12/2/2020 16:35:44'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'authentication' stamp: 'FC 12/2/2020 16:36:24'!
defaultUser
	
	^'validUser'
! !
!CashierTest methodsFor: 'tests' stamp: 'FC 12/2/2020 16:36:44' prior: 50930809!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook withBuyer: testObjectsFactory defaultUser]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'FC 12/2/2020 16:36:51' prior: 50930842!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new withBuyer: testObjectsFactory defaultUser.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'FC 12/2/2020 16:36:55' prior: 50930787!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory today
				registeringOn: salesBook withBuyer: testObjectsFactory defaultUser ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'FC 12/2/2020 16:36:59' prior: 50930859!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook withBuyer: testObjectsFactory defaultUser.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'FC 12/2/2020 16:37:06' prior: 50930734!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook withBuyer: testObjectsFactory defaultUser.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FC 12/2/2020 16:37:07'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FC 12/2/2020 16:37:07'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FC 12/2/2020 16:37:07'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FC 12/2/2020 16:37:07'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FC 12/2/2020 16:37:07'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FC 12/2/2020 16:37:07'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FC 12/2/2020 16:37:07'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'FC 12/2/2020 16:37:15' prior: 50930760!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook withBuyer: testObjectsFactory defaultUser.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FC 12/2/2020 16:37:17'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FC 12/2/2020 16:37:17'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FC 12/2/2020 16:37:17'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FC 12/2/2020 16:37:17'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FC 12/2/2020 16:37:17'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FC 12/2/2020 16:37:17'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FC 12/2/2020 16:37:17'!
PASSED!
!Cashier methodsFor: 'initialization' stamp: 'FC 12/2/2020 16:38:49'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook withBuyer: aBuyer 
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'FC 12/2/2020 16:38:49' prior: 50930720!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook withBuyer: aBuyer 
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook withBuyer: aBuyer! !

!methodRemoval: Cashier #initializeToCheckout:charging:throught:registeringOn: stamp: 'FC 12/2/2020 16:38:49'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FC 12/2/2020 16:38:59'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total buyer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'FC 12/2/2020 16:38:57' prior: 50931092!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook withBuyer: aBuyer 
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook.
	buyer := aBuyer! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FC 12/2/2020 16:39:00'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FC 12/2/2020 16:39:00'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FC 12/2/2020 16:39:00'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FC 12/2/2020 16:39:00'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FC 12/2/2020 16:39:00'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FC 12/2/2020 16:39:00'!
PASSED!
!Sale class methodsFor: 'instance creation' stamp: 'FC 12/2/2020 16:39:39'!
of: aTotal withBuyer: aBuyer 

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'FC 12/2/2020 16:39:39' prior: 50922971!
createSale

	^ Sale of: total withBuyer: buyer
! !

!methodRemoval: Sale class #of: stamp: 'FC 12/2/2020 16:39:39'!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal !
!Sale class methodsFor: 'instance creation' stamp: 'FC 12/2/2020 16:39:51' prior: 50931166!
of: aTotal withBuyer: aBuyer 

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal withBuyer: aBuyer.! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'FC 12/2/2020 16:40:07'!
Object subclass: #Sale
	instanceVariableNames: 'total buyer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'FC 12/2/2020 16:40:06'!
initializeTotal: aTotal withBuyer: aBuyer

	total := aTotal. 
	buyer := aBuyer! !

!methodRemoval: Sale #initializeTotal: stamp: 'FC 12/2/2020 16:40:09'!
initializeTotal: aTotal

	total := aTotal !
!Sale class methodsFor: 'instance creation' stamp: 'FC 12/2/2020 16:41:51'!
of: aTotal withBuyer: aBuyer buying: items  

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal withBuyer: aBuyer.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'FC 12/2/2020 16:41:51' prior: 50931173!
createSale

	^ Sale of: total withBuyer: buyer buying: cart items
! !

!methodRemoval: Sale class #of:withBuyer: stamp: 'FC 12/2/2020 16:41:51'!
of: aTotal withBuyer: aBuyer 

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal withBuyer: aBuyer.!
!Sale class methodsFor: 'instance creation' stamp: 'FC 12/2/2020 16:41:57' prior: 50931205!
of: aTotal withBuyer: aBuyer buying: items  

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal withBuyer: aBuyer buying: items.! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'FC 12/2/2020 16:42:28'!
Object subclass: #Sale
	instanceVariableNames: 'total buyer soldItems'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'FC 12/2/2020 16:42:26'!
initializeTotal: aTotal withBuyer: aBuyer buying: items

	total := aTotal. 
	buyer := aBuyer.
	soldItems := items.! !

!methodRemoval: Sale #initializeTotal:withBuyer: stamp: 'FC 12/2/2020 16:42:30'!
initializeTotal: aTotal withBuyer: aBuyer

	total := aTotal. 
	buyer := aBuyer!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FC 12/2/2020 16:42:33'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FC 12/2/2020 16:42:33'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FC 12/2/2020 16:42:33'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FC 12/2/2020 16:42:33'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FC 12/2/2020 16:42:33'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FC 12/2/2020 16:42:33'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FC 12/2/2020 16:42:33'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FC 12/2/2020 16:42:33'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FC 12/2/2020 16:42:33'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FC 12/2/2020 16:42:33'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FC 12/2/2020 16:42:33'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FC 12/2/2020 16:42:33'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FC 12/2/2020 16:42:33'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FC 12/2/2020 16:42:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 12/2/2020 16:42:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 12/2/2020 16:42:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 12/2/2020 16:42:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 12/2/2020 16:42:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 12/2/2020 16:42:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 12/2/2020 16:42:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 12/2/2020 16:42:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotOperateWithExpiredCart stamp: 'FC 12/2/2020 16:42:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10ExpirationTimeRefreshesAfterUse stamp: 'FC 12/2/2020 16:42:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11 stamp: 'FC 12/2/2020 16:42:33'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test11 stamp: 'FC 12/2/2020 16:42:33'!
ERROR!
!TusLibrosInterface methodsFor: 'initialization' stamp: 'FC 12/2/2020 16:42:46' prior: 50929701!
initializeForCatalog: aCatalog withUsers: registeredUsers through: aMerchantProcessor on: aDate registeringOn: aSalesBook  

	catalog := aCatalog.
	validUsers := registeredUsers.
	merchantProcessor := aMerchantProcessor.
	lastId  := 0.
	activeSessions := Dictionary new.
	salesBook := aSalesBook.
	currentDateTime := aDate.! !
!Sale methodsFor: 'total' stamp: 'FC 12/2/2020 16:43:44'!
soldItems
	
	^ soldItems! !
!Sale methodsFor: 'total' stamp: 'FC 12/2/2020 16:43:54'!
buyer
	
	^ buyer! !
!Sale methodsFor: 'total' stamp: 'FC 12/2/2020 16:43:55' prior: 50931349!
buyer
	^ buyer! !
!TusLibrosInterface methodsFor: 'session handling - private' stamp: 'FC 12/2/2020 16:44:51'!
listPurchasesFor: aUser withPassword: aPassword


	! !
!TusLibrosInterface methodsFor: 'session handling - private' stamp: 'FC 12/2/2020 16:45:09' prior: 50931356!
listPurchasesFor: aUser withPassword: aPassword
	self authenticateUser: aUser withPassword: aPassword.
	
	! !
!TusLibrosInterface methodsFor: 'session handling - private' stamp: 'FC 12/2/2020 16:45:50' prior: 50931362!
listPurchasesFor: aUser withPassword: aPassword
	| userSales |
	self authenticateUser: aUser withPassword: aPassword.
	
	userSales := salesBook select: [ :aSale | aSale buyer = aUser ].! !
!TusLibrosInterface methodsFor: 'session handling - private' stamp: 'FC 12/2/2020 16:46:46' prior: 50931369!
listPurchasesFor: aUser withPassword: aPassword
	| userSales total |
	self authenticateUser: aUser withPassword: aPassword.
	
	userSales := salesBook select: [ :aSale | aSale buyer = aUser ].
	
	total := userSales sum: [ :aSale | aSale total ] ifEmpty: [0].! !
!TusLibrosInterface methodsFor: 'session handling - private' stamp: 'FC 12/2/2020 16:48:10' prior: 50931379!
listPurchasesFor: aUser withPassword: aPassword
	| userSales total itemsBought |
	self authenticateUser: aUser withPassword: aPassword.
	
	userSales := salesBook select: [ :aSale | aSale buyer = aUser ].
	
	total := userSales sum: [ :aSale | aSale total ] ifEmpty: [0].
	
	itemsBought := userSales inject: #()  into: [ :totalSales :aSale  | totalSales , aSale ]
	 ! !
!TusLibrosInterface methodsFor: 'session handling - private' stamp: 'FC 12/2/2020 16:48:35' prior: 50931391!
listPurchasesFor: aUser withPassword: aPassword
	| userSales total itemsBought |
	self authenticateUser: aUser withPassword: aPassword.
	
	userSales := salesBook select: [ :aSale | aSale buyer = aUser ].
	
	total := userSales sum: [ :aSale | aSale total ] ifEmpty: [0].
	
	itemsBought := userSales inject: #()  into: [ :totalSales :aSale  | totalSales , aSale ]
	
	 ! !

Object subclass: #SalesSummary
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #SalesSummary category: 'TusLibros' stamp: 'FC 12/2/2020 16:48:58'!
Object subclass: #SalesSummary
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!SalesSummary class methodsFor: 'no messages' stamp: 'FC 12/2/2020 16:50:22'!
for: aListOfItems withTotal: aTotal.
	^self new initializeFor: aListOfItems withSelectorsLimitedTo: aTotal.! !
!SalesSummary class methodsFor: 'as yet unclassified' stamp: 'FC 12/2/2020 16:50:25' prior: 50931432!
for: aListOfItems withTotal: aTotal.
	^self new initializeFor: aListOfItems withTotal: aTotal.! !
!SalesSummary methodsFor: 'no messages' stamp: 'FC 12/2/2020 16:50:42'!
initializeFor: aListOfItems withTotal: aTotal.
	items := aListOfItems.
	total := aTotal.! !
!SalesSummary methodsFor: 'as yet unclassified' stamp: 'FC 12/2/2020 16:50:54'!
total
	^total.! !
!SalesSummary methodsFor: 'accessing' stamp: 'FC 12/2/2020 16:51:49'!
items
	^items.! !
!TusLibrosInterface methodsFor: 'session handling - private' stamp: 'FC 12/2/2020 16:52:55' prior: 50931406!
listPurchasesFor: aUser withPassword: aPassword
	| userSales total itemsBought |
	self authenticateUser: aUser withPassword: aPassword.
	
	userSales := salesBook select: [ :aSale | aSale buyer = aUser ].
	
	total := userSales sum: [ :aSale | aSale total ] ifEmpty: [0].
	
	itemsBought := userSales inject: #()  into: [ :totalSales :aSale  | totalSales , aSale ].
	
	 ^SalesSummary for: itemsBought withTotal: total.! !

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 12/2/2020 16:52:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 12/2/2020 16:52:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 12/2/2020 16:52:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 12/2/2020 16:52:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 12/2/2020 16:52:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 12/2/2020 16:52:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 12/2/2020 16:52:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotOperateWithExpiredCart stamp: 'FC 12/2/2020 16:52:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10ExpirationTimeRefreshesAfterUse stamp: 'FC 12/2/2020 16:52:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11 stamp: 'FC 12/2/2020 16:52:57'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test11 stamp: 'FC 12/2/2020 16:52:57'!
FAILURE!

salesBook!

self at: 1!

self at: 1 buyer!

(self at: 1) buyer!

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 12/2/2020 16:54:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 12/2/2020 16:54:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 12/2/2020 16:54:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 12/2/2020 16:54:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 12/2/2020 16:54:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 12/2/2020 16:54:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 12/2/2020 16:54:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotOperateWithExpiredCart stamp: 'FC 12/2/2020 16:54:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10ExpirationTimeRefreshesAfterUse stamp: 'FC 12/2/2020 16:54:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11 stamp: 'FC 12/2/2020 16:54:24'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test11 stamp: 'FC 12/2/2020 16:54:24'!
FAILURE!
!TusLibrosInterface methodsFor: 'checkOut' stamp: 'FC 12/2/2020 16:55:52' prior: 50930828!
checkOutCartId: aCartId payingWith: aCreditCard 
	
	| cart cashier total buyer |
	cart := self getCartAt: aCartId.
	buyer := self getBuyerFor: aCartId.
	cashier := Cashier toCheckout: cart  charging: aCreditCard  throught: merchantProcessor  on: currentDateTime now registeringOn: salesBook withBuyer: buyer.
	
	total := cashier checkOut.
	
	self removeSession: aCartId.
	^total.! !
!TusLibrosInterface methodsFor: 'accessing - private' stamp: 'FC 12/2/2020 16:56:08' prior: 50929908!
getCartAt: aCartId
	
	self validateCart: aCartId.
	self updateSessionAccessTime: aCartId.
	^ (activeSessions at: aCartId) buyer! !

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 12/2/2020 16:56:09'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 12/2/2020 16:56:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 12/2/2020 16:56:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 12/2/2020 16:56:09'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 12/2/2020 16:56:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 12/2/2020 16:56:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 12/2/2020 16:56:09'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test09CanNotOperateWithExpiredCart stamp: 'FC 12/2/2020 16:56:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10ExpirationTimeRefreshesAfterUse stamp: 'FC 12/2/2020 16:56:09'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test11 stamp: 'FC 12/2/2020 16:56:09'!
ERROR!
!TusLibrosInterface methodsFor: 'accessing - private' stamp: 'FC 12/2/2020 16:56:16' prior: 50931565!
getCartAt: aCartId
	
	self validateCart: aCartId.
	self updateSessionAccessTime: aCartId.
	^ (activeSessions at: aCartId) cart! !
!TusLibrosInterface methodsFor: 'accessing - private' stamp: 'FC 12/2/2020 16:56:23'!
getBuyerFor: aCartId
	
	self validateCart: aCartId.
	self updateSessionAccessTime: aCartId.
	^ (activeSessions at: aCartId) buyer! !

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 12/2/2020 16:56:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 12/2/2020 16:56:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 12/2/2020 16:56:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 12/2/2020 16:56:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 12/2/2020 16:56:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 12/2/2020 16:56:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 12/2/2020 16:56:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotOperateWithExpiredCart stamp: 'FC 12/2/2020 16:56:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10ExpirationTimeRefreshesAfterUse stamp: 'FC 12/2/2020 16:56:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11 stamp: 'FC 12/2/2020 16:56:24'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test11 stamp: 'FC 12/2/2020 16:56:24'!
ERROR!
!TusLibrosInterface methodsFor: 'session handling - private' stamp: 'FC 12/2/2020 16:57:00' prior: 50931458!
listPurchasesFor: aUser withPassword: aPassword
	| userSales total itemsBought |
	self authenticateUser: aUser withPassword: aPassword.
	
	userSales := salesBook select: [ :aSale | aSale buyer = aUser ].
	
	total := userSales sum: [ :aSale | aSale total ] ifEmpty: [0].
	
	itemsBought := userSales inject: #()  into: [ :totalSales :aSale  | totalSales , aSale items ].
	
	 ^SalesSummary for: itemsBought withTotal: total.! !

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 12/2/2020 16:57:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 12/2/2020 16:57:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 12/2/2020 16:57:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 12/2/2020 16:57:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 12/2/2020 16:57:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 12/2/2020 16:57:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 12/2/2020 16:57:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotOperateWithExpiredCart stamp: 'FC 12/2/2020 16:57:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10ExpirationTimeRefreshesAfterUse stamp: 'FC 12/2/2020 16:57:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11 stamp: 'FC 12/2/2020 16:57:01'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test11 stamp: 'FC 12/2/2020 16:57:01'!
ERROR!
!TusLibrosInterface methodsFor: 'session handling - private' stamp: 'FC 12/2/2020 16:57:13' prior: 50931657!
listPurchasesFor: aUser withPassword: aPassword
	| userSales total itemsBought |
	self authenticateUser: aUser withPassword: aPassword.
	
	userSales := salesBook select: [ :aSale | aSale buyer = aUser ].
	
	total := userSales sum: [ :aSale | aSale total ] ifEmpty: [0].
	
	itemsBought := userSales inject: #()  into: [ :totalSales :aSale  | totalSales , aSale soldItems ].
	
	 ^SalesSummary for: itemsBought withTotal: total.! !

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 12/2/2020 16:57:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 12/2/2020 16:57:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 12/2/2020 16:57:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 12/2/2020 16:57:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 12/2/2020 16:57:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 12/2/2020 16:57:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 12/2/2020 16:57:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotOperateWithExpiredCart stamp: 'FC 12/2/2020 16:57:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10ExpirationTimeRefreshesAfterUse stamp: 'FC 12/2/2020 16:57:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11 stamp: 'FC 12/2/2020 16:57:14'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test11 stamp: 'FC 12/2/2020 16:57:14'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'tests' stamp: 'FC 12/2/2020 16:57:28' prior: 50930585!
test11
	
	|cartId tusLibros total purchases |
	
	tusLibros := TusLibrosInterface 
				forCatalog: (testObjectsFactory defaultCatalog) 
				withUsers: (testObjectsFactory defaultUsers) 
				through: self 
				on: (TimeSimulator startingAt: testObjectsFactory today) 
				registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	tusLibros addToCart: 1 of: (testObjectsFactory itemSellByTheStore) forId: cartId.
	
	total := tusLibros checkOutCartId: cartId payingWith: testObjectsFactory notExpiredCreditCard.
	
	purchases := tusLibros listPurchasesFor: 'validUser' withPassword: 'asasas'.
	
	self assert: purchases total equals: total.
	self assert: purchases items includes: testObjectsFactory itemSellByTheStore.! !

!testRun: #TusLibrosInterfaceTest #test11 stamp: 'FC 12/2/2020 16:57:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 12/2/2020 16:57:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 12/2/2020 16:57:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 12/2/2020 16:57:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 12/2/2020 16:57:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 12/2/2020 16:57:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 12/2/2020 16:57:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 12/2/2020 16:57:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotOperateWithExpiredCart stamp: 'FC 12/2/2020 16:57:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10ExpirationTimeRefreshesAfterUse stamp: 'FC 12/2/2020 16:57:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11 stamp: 'FC 12/2/2020 16:57:29'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'tests' stamp: 'FC 12/2/2020 16:58:31'!
test11listPurchasesListsPurchasesCorrectly
	
	|cartId tusLibros total purchases |
	
	tusLibros := TusLibrosInterface 
				forCatalog: (testObjectsFactory defaultCatalog) 
				withUsers: (testObjectsFactory defaultUsers) 
				through: self 
				on: (TimeSimulator startingAt: testObjectsFactory today) 
				registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	tusLibros addToCart: 1 of: (testObjectsFactory itemSellByTheStore) forId: cartId.
	
	total := tusLibros checkOutCartId: cartId payingWith: testObjectsFactory notExpiredCreditCard.
	
	purchases := tusLibros listPurchasesFor: 'validUser' withPassword: 'asasas'.
	
	self assert: purchases total equals: total.
	self assert: purchases items includes: testObjectsFactory itemSellByTheStore.! !

!methodRemoval: TusLibrosInterfaceTest #test11 stamp: 'FC 12/2/2020 16:58:33'!
test11
	
	|cartId tusLibros total purchases |
	
	tusLibros := TusLibrosInterface 
				forCatalog: (testObjectsFactory defaultCatalog) 
				withUsers: (testObjectsFactory defaultUsers) 
				through: self 
				on: (TimeSimulator startingAt: testObjectsFactory today) 
				registeringOn: OrderedCollection new.
	
	cartId := tusLibros createCartForUser: 'validUser' withPassword: 'asasas'.
	
	tusLibros addToCart: 1 of: (testObjectsFactory itemSellByTheStore) forId: cartId.
	
	total := tusLibros checkOutCartId: cartId payingWith: testObjectsFactory notExpiredCreditCard.
	
	purchases := tusLibros listPurchasesFor: 'validUser' withPassword: 'asasas'.
	
	self assert: purchases total equals: total.
	self assert: purchases items includes: testObjectsFactory itemSellByTheStore.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FC 12/2/2020 17:01:28'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FC 12/2/2020 17:01:28'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FC 12/2/2020 17:01:28'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FC 12/2/2020 17:01:28'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FC 12/2/2020 17:01:28'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FC 12/2/2020 17:01:28'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FC 12/2/2020 17:01:28'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FC 12/2/2020 17:01:28'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FC 12/2/2020 17:01:28'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FC 12/2/2020 17:01:28'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FC 12/2/2020 17:01:28'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FC 12/2/2020 17:01:28'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FC 12/2/2020 17:01:28'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FC 12/2/2020 17:01:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 12/2/2020 17:01:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 12/2/2020 17:01:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 12/2/2020 17:01:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 12/2/2020 17:01:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 12/2/2020 17:01:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 12/2/2020 17:01:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 12/2/2020 17:01:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotOperateWithExpiredCart stamp: 'FC 12/2/2020 17:01:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10ExpirationTimeRefreshesAfterUse stamp: 'FC 12/2/2020 17:01:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11listPurchasesListsPurchasesCorrectly stamp: 'FC 12/2/2020 17:01:29'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FC 12/2/2020 17:01:31'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FC 12/2/2020 17:01:31'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FC 12/2/2020 17:01:31'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FC 12/2/2020 17:01:31'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FC 12/2/2020 17:01:31'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FC 12/2/2020 17:01:31'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FC 12/2/2020 17:01:31'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FC 12/2/2020 17:01:31'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FC 12/2/2020 17:01:31'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FC 12/2/2020 17:01:31'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FC 12/2/2020 17:01:31'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FC 12/2/2020 17:01:31'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FC 12/2/2020 17:01:31'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FC 12/2/2020 17:01:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 12/2/2020 17:01:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 12/2/2020 17:01:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 12/2/2020 17:01:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 12/2/2020 17:01:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 12/2/2020 17:01:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 12/2/2020 17:01:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 12/2/2020 17:01:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotOperateWithExpiredCart stamp: 'FC 12/2/2020 17:01:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10ExpirationTimeRefreshesAfterUse stamp: 'FC 12/2/2020 17:01:31'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11listPurchasesListsPurchasesCorrectly stamp: 'FC 12/2/2020 17:01:31'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FC 12/2/2020 17:01:32'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FC 12/2/2020 17:01:32'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FC 12/2/2020 17:01:32'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FC 12/2/2020 17:01:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FC 12/2/2020 17:01:32'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FC 12/2/2020 17:01:32'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FC 12/2/2020 17:01:32'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FC 12/2/2020 17:01:32'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FC 12/2/2020 17:01:32'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FC 12/2/2020 17:01:32'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FC 12/2/2020 17:01:32'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FC 12/2/2020 17:01:33'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FC 12/2/2020 17:01:33'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FC 12/2/2020 17:01:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01InterfaceCreatesEmptyCart stamp: 'FC 12/2/2020 17:01:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateCartWithInvalidPassword stamp: 'FC 12/2/2020 17:01:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CanNotCreateCartWithInvalidUsername stamp: 'FC 12/2/2020 17:01:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04InterfaceListsOneItem stamp: 'FC 12/2/2020 17:01:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotListInvalidCart stamp: 'FC 12/2/2020 17:01:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07CanNotAddToInvalidCart stamp: 'FC 12/2/2020 17:01:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08CheckOutReturnsTotal stamp: 'FC 12/2/2020 17:01:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotOperateWithExpiredCart stamp: 'FC 12/2/2020 17:01:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10ExpirationTimeRefreshesAfterUse stamp: 'FC 12/2/2020 17:01:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11listPurchasesListsPurchasesCorrectly stamp: 'FC 12/2/2020 17:01:33'!
PASSED!

----QUIT----(2 December 2020 17:01:48) CuisUniversity-4383.image priorSource: 19152669!