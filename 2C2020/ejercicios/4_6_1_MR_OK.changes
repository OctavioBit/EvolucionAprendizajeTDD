
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'GR 10/24/2020 16:09:35'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'GR 10/24/2020 16:20:39'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'nil' stamp: 'GR 10/24/2020 16:20:24'!
test01

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: $N.
	
	rover giveComand: $f.
	
	self assert: (1@0) equals: MarsRover position.! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 16:20:44'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'GR 10/24/2020 16:21:04'!
newInPosition: aPoint andDirection: aCharacter 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNewInPosition: aPoint andDirection: aCharacter ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'GR 10/24/2020 16:21:33' prior: 50909849!
newInPosition: aCardinalPoint andDirection: aDirection
	
	^self new initializeNewInPosition: aCardinalPoint andDirection: aDirection ! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 16:21:35'!
ERROR!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'GR 10/24/2020 16:21:59'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'GR 10/24/2020 16:21:59'!
initializeNewInPosition: aCardinalPoint andDirection: aDirection 
	self shouldBeImplemented.
	cardinalPoint := aCardinalPoint.
	direction := aDirection.! !
!MarsRover methodsFor: 'initialization' stamp: 'GR 10/24/2020 16:22:04' prior: 50909876!
initializeNewInPosition: aCardinalPoint andDirection: aDirection 
	
	cardinalPoint := aCardinalPoint.
	direction := aDirection.! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 16:22:07'!
ERROR!
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 16:23:14'!
giveComand: aCharacter 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 16:23:38' prior: 50909893!
giveComand: aCommand

	 
	
	! !

position y !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 16:25:35' prior: 50909839!
test01

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: $N.
	
	rover sendCommand: 'f'.
	
	self assert: (1@0) equals: MarsRover position.! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 16:25:47'!
ERROR!
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 16:25:56'!
sendCommand: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 16:27:50' prior: 50909913!
sendCommand: aCommandSet

	position - (0@1)! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 16:28:00'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 16:29:04' prior: 50909903!
test01

	| rover |
	
	rover := MarsRover newInPosition: 1@1 andDirection: $N.
	
	rover sendCommand: 'f'.
	
	self assert: (1@0) equals: MarsRover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 16:29:14' prior: 50909925!
test01

	| rover |
	
	rover := MarsRover newInPosition: 1@1 andDirection: $N.
	
	rover sendCommand: 'f'.
	
	self assert: (1@0) equals: MarsRover position.! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 16:29:27'!
ERROR!
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 16:29:36' prior: 50909918!
sendCommand: aCommandSet

	position - 0@1! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 16:29:38'!
ERROR!
!MarsRover methodsFor: 'initialization' stamp: 'GR 10/24/2020 16:30:32' prior: 50909884!
initializeNewInPosition: aCoordinate andDirection: aDirection 
	
	cardinalPoint := aCoordinate.
	direction := aDirection.! !

Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'GR 10/24/2020 16:30:48'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'GR 10/24/2020 16:30:59' prior: 50909950!
initializeNewInPosition: aCoordinate andDirection: aDirection 
	
	position := aCoordinate.
	direction := aDirection.! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 16:31:03'!
ERROR!
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 16:31:14' prior: 50909943!
sendCommand: aCommandSet

	position - (0@1)! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 16:31:19'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 16:31:31' prior: 50909933!
test01

	| rover |
	
	rover := MarsRover newInPosition: 1@1 andDirection: $N.
	
	rover sendCommand: 'f'.
	
	self assert: (1@0) equals: rover position.! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 16:31:36'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'GR 10/24/2020 16:31:44'!
position
	self shouldBeImplemented.
	^position! !
!MarsRover methodsFor: 'accessing' stamp: 'GR 10/24/2020 16:31:47' prior: 50909995!
position
	
	^position! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 16:31:51'!
FAILURE!

MarsRover!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 16:32:49' prior: 50909985!
test01

	| rover |
	
	rover := MarsRover newInPosition: 1@1 andDirection: $N.
	
	rover sendCommand: 'f'.
	
	self assert: (1@0) equals: rover position.! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 16:33:12'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 16:33:32' prior: 50910007!
test01

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: $N.
	
	rover sendCommand: 'f'.
	
	self assert: (1@0) equals: rover position.! !
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 16:34:20' prior: 50909978!
sendCommand: aCommandSet

	position y - 1! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 16:34:34'!
FAILURE!
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 16:35:14' prior: 50910026!
sendCommand: aCommandSet

	position y + 1! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 16:35:20'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 16:35:57' prior: 50910018!
test01

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: $N.
	
	rover sendCommand: 'f'.
	
	self assert: (1@2) equals: rover position.! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 16:36:06'!
FAILURE!

(0@0) - (0@1)!

(0@0) y - 1!

(0@0) y - 1 !
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 16:37:26' prior: 50910033!
sendCommand: aCommandSet

	(position) + (0@1)! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 16:37:27'!
FAILURE!
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 16:38:26' prior: 50910052!
sendCommand: aCommandSet

	position := position + (0@1)! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 16:38:29'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 16:38:32'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 16:38:32'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 16:38:44'!
test02

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: $N.
	
	rover sendCommand: 'b'.
	
	self assert: (1@0) equals: rover position.! !

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 16:38:45'!
FAILURE!
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 16:39:53' prior: 50910059!
sendCommand: aCommandSet

	position := position + 
		aCommandSet = 'f' ifTrue: [ (0@1) ] ifFalse: [ (0@-1) ]! !

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 16:39:55'!
ERROR!
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 16:40:11' prior: 50910081!
sendCommand: aCommandSet

	position := position + 
		(aCommandSet = 'f' ifTrue: [ (0@1) ] ifFalse: [ (0@-1) ])! !

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 16:40:15'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 16:40:15'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 16:40:15'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 16:40:37' prior: 50910071!
test02

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: $N.
	
	rover sendCommand: 'l'.
	
	self assert: $O equals: rover direction.! !

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 16:40:45'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'GR 10/24/2020 16:40:57'!
direction
	self shouldBeImplemented.
	^direction! !
!MarsRover methodsFor: 'accessing' stamp: 'GR 10/24/2020 16:40:59' prior: 50910114!
direction
	
	^direction! !

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 16:41:04'!
FAILURE!
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 16:45:50' prior: 50910090!
sendCommand: aCommandSet

	(aCommandSet = 'l' ) ifTrue: [direction := $O]
	ifFalse: [
		position := position + 
		(aCommandSet = 'f' ifTrue: [ (0@1) ] ifFalse: [ (0@-1) ]).
		]
	! !
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 16:45:54' prior: 50910125!
sendCommand: aCommandSet

	(aCommandSet = 'l' ) ifTrue: [direction := $O]
	ifFalse: [
		position := position + 
		(aCommandSet = 'f' ifTrue: [ (0@1) ] ifFalse: [ (0@-1) ]).
		]! !
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 16:46:03' prior: 50910134!
sendCommand: aCommandSet

	(aCommandSet = 'l' ) 
	ifTrue: [direction := $O]
	ifFalse: [
		position := position + 
		(aCommandSet = 'f' ifTrue: [ (0@1) ] ifFalse: [ (0@-1) ]).
		]! !

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 16:46:04'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 16:46:04'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 16:46:04'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 16:40:37' prior: 50910104!
test02

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: $N.
	
	rover sendCommand: 'l'.
	
	self assert: $O equals: rover direction.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 16:40:37' prior: 50910159!
test02

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: $N.
	
	rover sendCommand: 'l'.
	
	self assert: $O equals: rover direction.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 16:38:44' prior: 50910167!
test02

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: $N.
	
	rover sendCommand: 'b'.
	
	self assert: (1@0) equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 16:47:26'!
test03

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: $N.
	
	rover sendCommand: 'l'.
	
	self assert: $O equals: rover direction.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 16:47:53'!
test04

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: $N.
	
	rover sendCommand: 'r'.
	
	self assert: $E equals: rover direction.! !

!testRun: #MarsRoverTest #test03 stamp: 'GR 10/24/2020 16:47:56'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 16:48:00'!
FAILURE!
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 16:50:57' prior: 50910143!
sendCommand: aCommandSet

	(aCommandSet = 'l' ) 
	ifTrue: [direction := $O]
	ifFalse: [
		(aCommandSet = 'r' ) ifTrue: [ direction := $E ] 
			ifFalse: [ position := position + 
			(aCommandSet = 'f' ifTrue: [ (0@1) ] ifFalse: [ (0@-1) ]) 
			].
		]! !

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 16:51:01'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 16:51:01'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 16:51:01'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 10/24/2020 16:51:01'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 16:51:01'!
PASSED!

!methodRemoval: MarsRover #giveComand: stamp: 'GR 10/24/2020 16:52:32'!
giveComand: aCommand

	 
	
	!
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 16:55:03' prior: 50910204!
sendCommand: aCommandSet

	(aCommandSet = 'l' ) ifTrue: [direction := $O].
	(aCommandSet = 'r' ) ifTrue: [direction := $E].
	(aCommandSet = 'f' ) ifTrue: [position := position + (0@1)].
	(aCommandSet = 'b' ) ifTrue: [position := position - (0@1)].! !

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 16:55:11'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 16:55:11'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 16:55:11'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 10/24/2020 16:55:11'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 16:55:11'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 16:57:10' prior: 50910191!
test04

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: $E.
	
	rover sendCommand: 'r'.
	
	self assert: $S equals: rover direction.! !

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 16:57:13'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 16:57:20'!
test05

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: $E.
	
	rover sendCommand: 'r'.
	
	self assert: $S equals: rover direction.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 16:57:10' prior: 50910253!
test04

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: $E.
	
	rover sendCommand: 'r'.
	
	self assert: $S equals: rover direction.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 16:47:53' prior: 50910271!
test04

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: $N.
	
	rover sendCommand: 'r'.
	
	self assert: $E equals: rover direction.! !

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 16:57:40'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 16:57:40'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 16:57:40'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 10/24/2020 16:57:40'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 16:57:40'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 10/24/2020 16:57:40'!
FAILURE!

!testRun: #MarsRoverTest #test05 stamp: 'GR 10/24/2020 16:57:40'!
FAILURE!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'GR 10/24/2020 16:59:03'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction cardinalPoints'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'GR 10/24/2020 16:59:00' prior: 50909969!
initializeNewInPosition: aCoordinate andDirection: aDirection 
	
	position := aCoordinate.
	direction := aDirection.
	cardinalPoints := #($N $E $S $O)! !

-1 \\ 4!
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 17:05:50' prior: 50910230!
sendCommand: aCommandSet

	(aCommandSet = 'l' ) ifTrue: [direction := cardinalPoints at: (((cardinalPoints indexOf: direction) - 1) \\ 4)].
	(aCommandSet = 'r' ) ifTrue: [direction := cardinalPoints at: (((cardinalPoints indexOf: direction) + 1) \\ 4)].	
	(aCommandSet = 'f' ) ifTrue: [position := position + (0@1)].
	(aCommandSet = 'b' ) ifTrue: [position := position - (0@1)].! !

!testRun: #MarsRoverTest #test05 stamp: 'GR 10/24/2020 17:05:51'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 17:05:52'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 17:05:52'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 17:05:52'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 10/24/2020 17:05:52'!
ERROR!

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 17:05:52'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 10/24/2020 17:05:52'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 10/24/2020 17:05:52'!
ERROR!

((cardinalPoints indexOf: direction) - 1) \\ 4!

#(1 2 3) at: 0!

#(1 2 3) at: 1!

hola := OrderedCollection with: 0!

hola at: 0!

hola at: 0!

hola at: 1!

{ 0. 1. } at: 0!
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 17:11:45' prior: 50910319!
sendCommand: aCommandSet

	(aCommandSet = 'l' ) ifTrue: [direction := cardinalPoints at: ((((cardinalPoints indexOf: direction) - 1) \\ 5) + 1)].
	(aCommandSet = 'r' ) ifTrue: [direction := cardinalPoints at: ((((cardinalPoints indexOf: direction) + 1) \\ 5) + 1)].	
	(aCommandSet = 'f' ) ifTrue: [position := position + (0@1)].
	(aCommandSet = 'b' ) ifTrue: [position := position - (0@1)].! !

!testRun: #MarsRoverTest #test03 stamp: 'GR 10/24/2020 17:11:48'!
FAILURE!
!MarsRover methodsFor: 'initialization' stamp: 'GR 10/24/2020 17:12:47' prior: 50910311!
initializeNewInPosition: aCoordinate andDirection: aDirection 
	
	position := aCoordinate.
	direction := aDirection.
	cardinalPoints := OrderedCollection with: $N with: $E with: $S with: $O.! !

!testRun: #MarsRoverTest #test05 stamp: 'GR 10/24/2020 17:13:26'!
FAILURE!

cardinalPoints indexOf: direction!
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 17:16:10' prior: 50910358!
sendCommand: aCommandSet

	(aCommandSet = 'l' ) ifTrue: [direction := cardinalPoints at: ((((cardinalPoints indexOf: direction) - 2) \\ 4) + 1)].
	(aCommandSet = 'r' ) ifTrue: [direction := cardinalPoints at: ((((cardinalPoints indexOf: direction) + 1) \\ 5) + 1)].	
	(aCommandSet = 'f' ) ifTrue: [position := position + (0@1)].
	(aCommandSet = 'b' ) ifTrue: [position := position - (0@1)].! !

!testRun: #MarsRoverTest #test05 stamp: 'GR 10/24/2020 17:16:12'!
FAILURE!
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 17:17:25' prior: 50910389!
sendCommand: aCommandSet

	(aCommandSet = 'l' ) ifTrue: [direction := cardinalPoints at: ((((cardinalPoints indexOf: direction) - 2) \\ 4) + 1)].
	(aCommandSet = 'r' ) ifTrue: [direction := cardinalPoints at: (((cardinalPoints indexOf: direction) + 1) \\ 4)].	
	(aCommandSet = 'f' ) ifTrue: [position := position + (0@1)].
	(aCommandSet = 'b' ) ifTrue: [position := position - (0@1)].! !

!testRun: #MarsRoverTest #test05 stamp: 'GR 10/24/2020 17:17:27'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 17:17:27'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 17:17:27'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 10/24/2020 17:17:27'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 17:17:27'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 10/24/2020 17:17:27'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 17:22:52' prior: 50910263!
test05

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: $E.
	
	rover sendCommand: 'f'.
	
	self assert: (2@1) equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 17:23:03'!
test06

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: $E.
	
	rover sendCommand: 'b'.
	
	self assert: (0@1) equals: rover position.! !

!testRun: #MarsRoverTest #test06 stamp: 'GR 10/24/2020 17:23:48'!
FAILURE!
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 17:28:25' prior: 50910407!
sendCommand: aCommandSet

	(aCommandSet = 'l' ) ifTrue: [direction := cardinalPoints at: ((((cardinalPoints indexOf: direction) - 2) \\ 4) + 1)].
	
	(aCommandSet = 'r' ) ifTrue: [direction := cardinalPoints at: (((cardinalPoints indexOf: direction) + 1) \\ 4)].	
	
	(aCommandSet = 'f' ) ifTrue: [
		(direction = $N) ifTrue: [ position := position + (0@1) ].
		(direction = $E) ifTrue: [ position := position + (1@0) ].
		(direction = $S) ifTrue: [ position := position - (0@1) ].
		(direction = $O)	 ifTrue: [ position := position - (1@0) ].
		].
	
	(aCommandSet = 'b' ) ifTrue: [position := position - (0@1)].! !
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 17:28:59' prior: 50910455!
sendCommand: aCommandSet

	(aCommandSet = 'l' ) ifTrue: [direction := cardinalPoints at: ((((cardinalPoints indexOf: direction) - 2) \\ 4) + 1)].
	
	(aCommandSet = 'r' ) ifTrue: [direction := cardinalPoints at: (((cardinalPoints indexOf: direction) + 1) \\ 4)].	
	
	(aCommandSet = 'f' ) ifTrue: [
		(direction = $N) ifTrue: [ position := position + (0@1) ].
		(direction = $E) ifTrue: [ position := position + (1@0) ].
		(direction = $S) ifTrue: [ position := position - (0@1) ].
		(direction = $O)	 ifTrue: [ position := position - (1@0) ].
		].
	
	(aCommandSet = 'b' ) ifTrue: [
		(direction = $N) ifTrue: [ position := position - (0@1) ].
		(direction = $E) ifTrue: [ position := position - (1@0) ].
		(direction = $S) ifTrue: [ position := position + (0@1) ].
		(direction = $O)	 ifTrue: [ position := position + (1@0) ].
		].! !

!testRun: #MarsRoverTest #test06 stamp: 'GR 10/24/2020 17:29:03'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 17:29:03'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 17:29:03'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 10/24/2020 17:29:03'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 17:29:03'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 10/24/2020 17:29:03'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 10/24/2020 17:29:03'!
PASSED!

!methodRemoval: MarsRoverTest #test06 stamp: 'GR 10/24/2020 17:29:37'!
test06

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: $E.
	
	rover sendCommand: 'b'.
	
	self assert: (0@1) equals: rover position.!

!classDefinition: #North category: 'MarsRover' stamp: 'GR 10/24/2020 17:32:35'!
ProtoObject subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 17:32:19' prior: 50910040!
test01

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommand: 'f'.
	
	self assert: (1@2) equals: rover position.! !

!classDefinition: #Direction category: 'MarsRover' stamp: 'GR 10/24/2020 17:32:54'!
Object subclass: #Direction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Direction subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #North category: 'MarsRover' stamp: 'GR 10/24/2020 17:32:54'!
Direction subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 17:37:57' prior: 50910477!
sendCommand: aCommandSet

	(aCommandSet = 'l' ) ifTrue: [ direction := direction leftCardinalPoint.
		"direction := cardinalPoints at: ((((cardinalPoints indexOf: direction) - 2) \\ 4) + 1)"].
	
	(aCommandSet = 'r' ) ifTrue: [ direction := direction rightCardinalPoint.
		"direction := cardinalPoints at: (((cardinalPoints indexOf: direction) + 1) \\ 4)"].	
	
	(aCommandSet = 'f' ) ifTrue: [
		direction moveForward.
		"(direction = $N) ifTrue: [ position := position + (0@1) ].
		(direction = $E) ifTrue: [ position := position + (1@0) ].
		(direction = $S) ifTrue: [ position := position - (0@1) ].
		(direction = $O)	 ifTrue: [ position := position - (1@0) ]."
		].
	
	(aCommandSet = 'b' ) ifTrue: [
		direction moveBackward.
		"(direction = $N) ifTrue: [ position := position - (0@1) ].
		(direction = $E) ifTrue: [ position := position - (1@0) ].
		(direction = $S) ifTrue: [ position := position + (0@1) ].
		(direction = $O)	 ifTrue: [ position := position + (1@0) ]."
		].! !

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 17:38:25'!
ERROR!
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 17:38:44' prior: 50910175!
test02

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommand: 'b'.
	
	self assert: (1@0) equals: rover position.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 17:38:47' prior: 50910183!
test03

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommand: 'l'.
	
	self assert: $O equals: rover direction.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 17:38:51' prior: 50910279!
test04

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommand: 'r'.
	
	self assert: $E equals: rover direction.! !

!classDefinition: #East category: 'MarsRover' stamp: 'GR 10/24/2020 17:39:11'!
Direction subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 17:39:00' prior: 50910437!
test05

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: East new.
	
	rover sendCommand: 'f'.
	
	self assert: (2@1) equals: rover position.! !

!testRun: #MarsRoverTest #test05 stamp: 'GR 10/24/2020 17:39:23'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'GR 10/24/2020 17:39:55'!
ERROR!
!East methodsFor: 'actions' stamp: 'GR 10/24/2020 17:40:12'!
moveForward
	self shouldBeImplemented.! !

!classDefinition: #East category: 'MarsRover' stamp: 'GR 10/24/2020 17:41:03'!
Direction subclass: #East
	instanceVariableNames: 'rover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!East methodsFor: 'actions' stamp: 'GR 10/24/2020 17:41:01' prior: 50910640!
moveForward
	
	rover moveForwardTowardsEast.! !

!testRun: #MarsRoverTest #test05 stamp: 'GR 10/24/2020 17:41:25'!
ERROR!
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 17:45:14' prior: 50910561!
sendCommand: aCommandSet

	(aCommandSet = 'l' ) ifTrue: [ direction := direction leftCardinalPoint.
		"direction := cardinalPoints at: ((((cardinalPoints indexOf: direction) - 2) \\ 4) + 1)"].
	
	(aCommandSet = 'r' ) ifTrue: [ direction := direction rightCardinalPoint.
		"direction := cardinalPoints at: (((cardinalPoints indexOf: direction) + 1) \\ 4)"].	
	
	(aCommandSet = 'f' ) ifTrue: [
		direction moveForward: self.
		"(direction = $N) ifTrue: [ position := position + (0@1) ].
		(direction = $E) ifTrue: [ position := position + (1@0) ].
		(direction = $S) ifTrue: [ position := position - (0@1) ].
		(direction = $O)	 ifTrue: [ position := position - (1@0) ]."
		].
	
	(aCommandSet = 'b' ) ifTrue: [
		direction moveBackward: self.
		"(direction = $N) ifTrue: [ position := position - (0@1) ].
		(direction = $E) ifTrue: [ position := position - (1@0) ].
		(direction = $S) ifTrue: [ position := position + (0@1) ].
		(direction = $O)	 ifTrue: [ position := position + (1@0) ]."
		].! !
!Direction methodsFor: 'nil' stamp: 'GR 10/24/2020 17:45:42'!
moveForward: aMarsRover

	self subclassResponsibility.! !
!Direction methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 17:46:00'!
moveBackward: aMarsRover

	self subclassResponsibility.! !
!East methodsFor: 'actions' stamp: 'GR 10/24/2020 17:46:25' overrides: 50910692!
moveForward: moveForward
	
	rover moveForwardTowardsEast.! !

!methodRemoval: East #moveForward stamp: 'GR 10/24/2020 17:46:25'!
moveForward
	
	rover moveForwardTowardsEast.!
!East methodsFor: 'actions' stamp: 'GR 10/24/2020 17:46:43' prior: 50910702 overrides: 50910692!
moveForward: aMarsRover
	
	aMarsRover moveForwardTowardsEast.! !
!North methodsFor: 'nil' stamp: 'GR 10/24/2020 17:47:10' overrides: 50910692!
moveForward: aMarsRover
	
	aMarsRover moveForwardTowardsNorth.! !

Direction subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #South category: 'MarsRover' stamp: 'GR 10/24/2020 17:48:06'!
Direction subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Direction subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #West category: 'MarsRover' stamp: 'GR 10/24/2020 17:48:10'!
Direction subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!South methodsFor: 'nil' stamp: 'GR 10/24/2020 17:48:35' overrides: 50910692!
moveForward: aMarsRover
	
	aMarsRover moveForwardTowardsSouth.! !
!West methodsFor: 'no messages' stamp: 'GR 10/24/2020 17:48:48' overrides: 50910692!
moveForward: aMarsRover
	
	aMarsRover moveForwardTowardsWest.! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 17:49:04'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 17:49:04'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 17:49:07'!
ERROR!
!MarsRover methodsFor: 'private' stamp: 'GR 10/24/2020 17:49:21'!
moveForwardTowardsNorth
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'private' stamp: 'GR 10/24/2020 17:49:37' prior: 50910759!
moveForwardTowardsNorth
	
	position := position + (0@1).! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 17:49:41'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 17:49:41'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 17:49:41'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'GR 10/24/2020 17:49:41'!
ERROR!

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 17:49:41'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'GR 10/24/2020 17:49:41'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 17:49:49'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 17:49:52'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 17:49:52'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 17:49:52'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'GR 10/24/2020 17:49:52'!
ERROR!

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 17:49:52'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'GR 10/24/2020 17:49:52'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 17:49:56'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 17:49:56'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 17:49:56'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'GR 10/24/2020 17:49:56'!
ERROR!

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 17:49:56'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'GR 10/24/2020 17:49:56'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 17:49:58'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 17:49:59'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 17:50:08'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 17:50:22'!
ERROR!
!North methodsFor: 'actions' stamp: 'GR 10/24/2020 17:51:28' overrides: 50910697!
moveBackward: aMarsRover 
	self shouldBeImplemented.! !
!North methodsFor: 'actions' stamp: 'GR 10/24/2020 17:53:10' prior: 50910822 overrides: 50910697!
moveBackward: aMarsRover 
	
	aMarsRover moveForwardTowardsSouth.! !

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 17:53:11'!
ERROR!
!MarsRover methodsFor: 'private' stamp: 'GR 10/24/2020 17:53:29'!
moveForwardTowardsSouth
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'private' stamp: 'GR 10/24/2020 17:53:46' prior: 50910834!
moveForwardTowardsSouth
	
	position := position - (0@1)! !

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 17:53:48'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 17:53:48'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 17:53:48'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 10/24/2020 17:53:48'!
ERROR!

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 17:53:48'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'GR 10/24/2020 17:53:48'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 17:53:54'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 17:53:54'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 17:53:54'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 10/24/2020 17:53:54'!
ERROR!

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 17:53:54'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'GR 10/24/2020 17:53:54'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'GR 10/24/2020 17:53:56'!
ERROR!
!Direction methodsFor: 'converting' stamp: 'GR 10/24/2020 17:54:44'!
leftCardinalPoint
	self shouldBeImplemented.! !
!Direction methodsFor: 'converting' stamp: 'GR 10/24/2020 17:54:59' prior: 50910874!
leftCardinalPoint
	
	^West new.! !
!Direction methodsFor: 'converting' stamp: 'GR 10/24/2020 17:55:28' prior: 50910879!
leftCardinalPoint
	
	^West new.! !

!testRun: #MarsRoverTest #test03 stamp: 'GR 10/24/2020 17:56:27'!
FAILURE!
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 17:56:51' prior: 50910605!
test03

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommand: 'l'.
	
	self assert: West equals: rover direction.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 17:56:57' prior: 50910613!
test04

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommand: 'r'.
	
	self assert: West equals: rover direction.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 17:57:08' prior: 50910898!
test04

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommand: 'r'.
	
	self assert: East equals: rover direction.! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 17:57:14'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 17:57:14'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 17:57:14'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 10/24/2020 17:57:14'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 17:57:14'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'GR 10/24/2020 17:57:14'!
ERROR!

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 17:57:17'!
ERROR!
!Direction methodsFor: 'converting' stamp: 'GR 10/24/2020 17:57:29'!
rightCardinalPoint
	self shouldBeImplemented.! !
!Direction methodsFor: 'converting' stamp: 'GR 10/24/2020 17:57:37' prior: 50910930!
rightCardinalPoint
	
	self subclassResponsibility.! !

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 17:57:42'!
ERROR!
!North methodsFor: 'converting' stamp: 'GR 10/24/2020 17:57:50' overrides: 50910935!
rightCardinalPoint
	self shouldBeImplemented.! !
!North methodsFor: 'converting' stamp: 'GR 10/24/2020 17:57:59' prior: 50910942 overrides: 50910935!
rightCardinalPoint
	
	^East new.! !

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 17:58:05'!
FAILURE!
!LayoutMorph methodsFor: 'accessing' stamp: 'GR 10/24/2020 17:59:05' prior: 16863010!
direction
	^direction class! !

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 17:59:09'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 17:59:15'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 17:59:15'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 17:59:15'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 10/24/2020 17:59:15'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 17:59:15'!
FAILURE!

!testRun: #MarsRoverTest #test05 stamp: 'GR 10/24/2020 17:59:15'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'GR 10/24/2020 17:59:17'!
ERROR!
!MarsRover methodsFor: 'private' stamp: 'GR 10/24/2020 17:59:31'!
moveForwardTowardsEast
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'private' stamp: 'GR 10/24/2020 17:59:51' prior: 50910976!
moveForwardTowardsEast
	
	position := position + (1@0)! !

!testRun: #MarsRoverTest #test05 stamp: 'GR 10/24/2020 17:59:56'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 10/24/2020 17:59:58'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'GR 10/24/2020 18:00:38'!
FAILURE!
!MarsRover methodsFor: 'accessing' stamp: 'GR 10/24/2020 18:00:45' prior: 50910119!
direction
	
	^direction class! !

!testRun: #MarsRoverTest #test05 stamp: 'GR 10/24/2020 18:00:51'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 18:00:51'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 18:00:51'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 10/24/2020 18:00:51'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 18:00:51'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 10/24/2020 18:00:51'!
PASSED!
!Direction methodsFor: 'converting' stamp: 'GR 10/24/2020 18:01:47' prior: 50910883!
leftCardinalPoint
	
	self subclassResponsibility .! !
!East methodsFor: 'actions' stamp: 'GR 10/24/2020 18:03:08' overrides: 50910697!
moveBackward: aMarsRover
	
	aMarsRover moveForwardTowardsWest.! !
!East methodsFor: 'nil' stamp: 'GR 10/24/2020 18:04:04'!
leftCardinatePoint

	^North new.! !
!East methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 18:04:14'!
rightCardinatePoint

	^South new.! !
!North methodsFor: 'converting' stamp: 'GR 10/24/2020 18:05:03' overrides: 50911011!
leftCardinalPoint
	
	^West new.! !
!South methodsFor: 'actions' stamp: 'GR 10/24/2020 18:05:20' overrides: 50910697!
moveBackward: aMarsRover
	
	aMarsRover moveForwardTowardsNorth.! !
!South methodsFor: 'nil' stamp: 'GR 10/24/2020 18:05:49' overrides: 50911011!
leftCardinalPoint

	^East new.! !
!South methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 18:06:12' overrides: 50910935!
rightCardinalPoint

	^West new.! !
!West methodsFor: 'actions' stamp: 'GR 10/24/2020 18:06:37' overrides: 50910697!
moveBackward: aMarsRover
	
	aMarsRover moveForwardTowardsEast.! !
!West methodsFor: 'nil' stamp: 'GR 10/24/2020 18:06:56' overrides: 50911011!
leftCardinalPoint

	^South new.! !
!West methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 18:07:07' overrides: 50910935!
rightCardinalPoint

	^North new.! !
!MarsRover methodsFor: 'private' stamp: 'GR 10/24/2020 18:07:52'!
moveForwardTowardsWest
	
	position := position - (0@1)! !
!MarsRover methodsFor: 'private' stamp: 'GR 10/24/2020 18:08:04' prior: 50911058!
moveForwardTowardsWest
	
	position := position - (1@0)! !
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 18:08:39' prior: 50910658!
sendCommand: aCommandSet

	(aCommandSet = 'l' ) ifTrue: [ direction := direction leftCardinalPoint. ].
	
	(aCommandSet = 'r' ) ifTrue: [ direction := direction rightCardinalPoint. ].	
	
	(aCommandSet = 'f' ) ifTrue: [
		direction moveForward: self.
		].
	
	(aCommandSet = 'b' ) ifTrue: [
		direction moveBackward: self.
		].! !
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 18:08:54' prior: 50911068!
sendCommand: aCommandSet

	(aCommandSet = 'l' ) ifTrue: [ direction := direction leftCardinalPoint. ].
	
	(aCommandSet = 'r' ) ifTrue: [ direction := direction rightCardinalPoint. ].	
	
	(aCommandSet = 'f' ) ifTrue: [ direction moveForward: self ].
	
	(aCommandSet = 'b' ) ifTrue: [ direction moveBackward: self ].! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:11:36'!
test06

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: East new.
	
	rover sendCommand: 'f'.
	
	self assert: (2@1) equals: rover position.! !
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 18:12:14'!
sendCommandSet: aCommandSet

	(aCommandSet = 'l' ) ifTrue: [ direction := direction leftCardinalPoint. ].
	
	(aCommandSet = 'r' ) ifTrue: [ direction := direction rightCardinalPoint. ].	
	
	(aCommandSet = 'f' ) ifTrue: [ direction moveForward: self ].
	
	(aCommandSet = 'b' ) ifTrue: [ direction moveBackward: self ].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 18:12:14' prior: 50911094!
test06

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: East new.
	
	rover sendCommandSet: 'f'.
	
	self assert: (2@1) equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 18:12:14' prior: 50910597!
test02

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: 'b'.
	
	self assert: (1@0) equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 18:12:14' prior: 50910890!
test03

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: 'l'.
	
	self assert: West equals: rover direction.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 18:12:14' prior: 50910906!
test04

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: 'r'.
	
	self assert: East equals: rover direction.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 18:12:14' prior: 50910628!
test05

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: East new.
	
	rover sendCommandSet: 'f'.
	
	self assert: (2@1) equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 18:12:14' prior: 50910536!
test01

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: 'f'.
	
	self assert: (1@2) equals: rover position.! !

!methodRemoval: MarsRover #sendCommand: stamp: 'GR 10/24/2020 18:12:14'!
sendCommand: aCommandSet

	(aCommandSet = 'l' ) ifTrue: [ direction := direction leftCardinalPoint. ].
	
	(aCommandSet = 'r' ) ifTrue: [ direction := direction rightCardinalPoint. ].	
	
	(aCommandSet = 'f' ) ifTrue: [ direction moveForward: self ].
	
	(aCommandSet = 'b' ) ifTrue: [ direction moveBackward: self ].!
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:13:49' prior: 50911116!
test06

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: East new.
	
	rover sendCommandSet: 'flbr'.
	
	self assert: (2@1) equals: rover position.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:14:26' prior: 50911182!
test06

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: East new.
	
	rover sendCommandSet: 'flbl'.
	
	self assert: (2@1) equals: rover position.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:14:42' prior: 50911190!
test06

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: East new.
	
	rover sendCommandSet: 'flbl'.
	
	self assert: (2@0) equals: rover position.
	self assert: South equals: rover direction.! !

!testRun: #MarsRoverTest #test06 stamp: 'GR 10/24/2020 18:14:46'!
FAILURE!
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 18:16:55' prior: 50911102!
sendCommandSet: aCommandSet

	aCommandSet do: [ :aCommand | self executeCommand: aCommand ].! !

!testRun: #MarsRoverTest #test06 stamp: 'GR 10/24/2020 18:17:00'!
ERROR!
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 18:17:14'!
executeCommand: aCharacter 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 18:17:35' prior: 50911218!
executeCommand: aCommand
	
	(aCommand = 'l' ) ifTrue: [ direction := direction leftCardinalPoint. ].
	
	(aCommand = 'r' ) ifTrue: [ direction := direction rightCardinalPoint. ].	
	
	(aCommand = 'f' ) ifTrue: [ direction moveForward: self ].
	
	(aCommand = 'b' ) ifTrue: [ direction moveBackward: self ].! !

!testRun: #MarsRoverTest #test06 stamp: 'GR 10/24/2020 18:17:38'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'GR 10/24/2020 18:17:43'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'GR 10/24/2020 18:17:55'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'GR 10/24/2020 18:18:18'!
FAILURE!
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 18:18:44' prior: 50911223!
executeCommand: aCommand
	
	(aCommand = $l ) ifTrue: [ direction := direction leftCardinalPoint. ].
	
	(aCommand = $r ) ifTrue: [ direction := direction rightCardinalPoint. ].	
	
	(aCommand = $f ) ifTrue: [ direction moveForward: self ].
	
	(aCommand = $b ) ifTrue: [ direction moveBackward: self ].! !

!testRun: #MarsRoverTest #test06 stamp: 'GR 10/24/2020 18:18:45'!
ERROR!
!East methodsFor: 'rotations' stamp: 'GR 10/24/2020 18:19:23' overrides: 50911011!
leftCardinalPoint

	^North new.! !

!methodRemoval: East #leftCardinatePoint stamp: 'GR 10/24/2020 18:19:23'!
leftCardinatePoint

	^North new.!
!East methodsFor: 'rotations' stamp: 'GR 10/24/2020 18:19:34' overrides: 50910935!
rightCardinalPoint

	^South new.! !

!methodRemoval: East #rightCardinatePoint stamp: 'GR 10/24/2020 18:19:34'!
rightCardinatePoint

	^South new.!

!testRun: #MarsRoverTest #test06 stamp: 'GR 10/24/2020 18:19:42'!
FAILURE!
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:20:07' prior: 50911198!
test06

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: East new.
	
	rover sendCommandSet: 'flbl'.
	
	self assert: (2@0) equals: rover position.
	self assert: West equals: rover direction.! !

!testRun: #MarsRoverTest #test06 stamp: 'GR 10/24/2020 18:20:12'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 18:20:12'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 18:20:12'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 10/24/2020 18:20:12'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 18:20:12'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 10/24/2020 18:20:12'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 10/24/2020 18:20:12'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:20:27'!
test07

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: East new.
	
	rover sendCommandSet: 'fabl'.
	
	self assert: (2@0) equals: rover position.
	self assert: West equals: rover direction.! !

!testRun: #MarsRoverTest #test07 stamp: 'GR 10/24/2020 18:20:32'!
FAILURE!
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 18:21:21' prior: 50911245!
executeCommand: aCommand
	
	(aCommand = $l ) ifTrue: [ direction := direction leftCardinalPoint. ].
	
	(aCommand = $r ) ifTrue: [ direction := direction rightCardinalPoint. ].	
	
	(aCommand = $f ) ifTrue: [ direction moveForward: self ].
	
	(aCommand = $b ) ifTrue: [ direction moveBackward: self ].
	
	self error: MarsRover commandNotUnderstood.! !

!testRun: #MarsRoverTest #test07 stamp: 'GR 10/24/2020 18:21:24'!
ERROR!
!MarsRover class methodsFor: 'error handling' stamp: 'GR 10/24/2020 18:21:52'!
commandNotUnderstood
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'error handling' stamp: 'GR 10/24/2020 18:22:41' prior: 50911332!
commandNotUnderstood
	
	^'Command set is not valid'! !

!testRun: #MarsRoverTest #test07 stamp: 'GR 10/24/2020 18:22:42'!
ERROR!
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:24:03' prior: 50911304!
test07

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: East new.
	
	self 
		should: [ rover sendCommandSet: 'fabl'. ]	 
		raise: Error
		description: MarsRover commandNotUnderstood.! !

!testRun: #MarsRoverTest #test07 stamp: 'GR 10/24/2020 18:24:04'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 18:24:04'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 18:24:04'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'GR 10/24/2020 18:24:04'!
ERROR!

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 18:24:04'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'GR 10/24/2020 18:24:04'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'GR 10/24/2020 18:24:04'!
ERROR!

!testRun: #MarsRoverTest #test07 stamp: 'GR 10/24/2020 18:24:04'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 18:24:20'!
ERROR!
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 18:27:32' prior: 50911316!
executeCommand: aCommand
	
	(aCommand = $l ) ifTrue: [ direction := direction leftCardinalPoint. ].
	
	(aCommand = $r ) ifTrue: [ direction := direction rightCardinalPoint. ].	
	
	(aCommand = $f ) ifTrue: [ direction moveForward: self ].
	
	(aCommand = $b ) ifTrue: [ direction moveBackward: self ].
	
	self error: MarsRover commandNotUnderstood.! !
!MarsRover methodsFor: 'operations' stamp: 'GR 10/24/2020 18:31:00' prior: 50911374!
executeCommand: aCommand
	
	(aCommand = $l ) ifTrue: [ ^direction := direction leftCardinalPoint. ].
	
	(aCommand = $r ) ifTrue: [ ^direction := direction rightCardinalPoint. ].	
	
	(aCommand = $f ) ifTrue: [ ^direction moveForward: self ].
	
	(aCommand = $b ) ifTrue: [ ^direction moveBackward: self ].
	
	self error: MarsRover commandNotUnderstood.! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 18:31:08'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 10/24/2020 18:31:12'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 10/24/2020 18:31:12'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 10/24/2020 18:31:12'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 10/24/2020 18:31:12'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 10/24/2020 18:31:12'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 10/24/2020 18:31:12'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 10/24/2020 18:31:12'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 10/24/2020 18:31:12'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:34:59'!
test01ForwardToNorthMovesOnePositionToNorth

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: 'f'.
	
	self assert: (1@2) equals: rover position.! !

!methodRemoval: MarsRoverTest #test01 stamp: 'GR 10/24/2020 18:34:59'!
test01

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: 'f'.
	
	self assert: (1@2) equals: rover position.!
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:35:26'!
test01ForwardToNorthMovesRoverOnePositionToNorth

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: 'f'.
	
	self assert: (1@2) equals: rover position.! !

!methodRemoval: MarsRoverTest #test01ForwardToNorthMovesOnePositionToNorth stamp: 'GR 10/24/2020 18:35:26'!
test01ForwardToNorthMovesOnePositionToNorth

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: 'f'.
	
	self assert: (1@2) equals: rover position.!
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:36:00'!
test02BackwardToNorthMovesRoverOnePositionToSouth

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: 'b'.
	
	self assert: (1@0) equals: rover position.! !

!methodRemoval: MarsRoverTest #test02 stamp: 'GR 10/24/2020 18:36:00'!
test02

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: 'b'.
	
	self assert: (1@0) equals: rover position.!
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:36:49'!
test01ForwardNorthMovesRoverOnePositionToNorth

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: 'f'.
	
	self assert: (1@2) equals: rover position.! !

!methodRemoval: MarsRoverTest #test01ForwardToNorthMovesRoverOnePositionToNorth stamp: 'GR 10/24/2020 18:36:49'!
test01ForwardToNorthMovesRoverOnePositionToNorth

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: 'f'.
	
	self assert: (1@2) equals: rover position.!
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:36:59'!
test02BackwardNorthMovesRoverOnePositionToSouth

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: 'b'.
	
	self assert: (1@0) equals: rover position.! !

!methodRemoval: MarsRoverTest #test02BackwardToNorthMovesRoverOnePositionToSouth stamp: 'GR 10/24/2020 18:36:59'!
test02BackwardToNorthMovesRoverOnePositionToSouth

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: 'b'.
	
	self assert: (1@0) equals: rover position.!
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:38:06'!
test03LeftNorthChangesRoverDirectionToWest

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: 'l'.
	
	self assert: West equals: rover direction.! !

!methodRemoval: MarsRoverTest #test03 stamp: 'GR 10/24/2020 18:38:06'!
test03

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: 'l'.
	
	self assert: West equals: rover direction.!
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:40:26'!
test04RightNorthChangesRoverDirectionToEast

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: 'r'.
	
	self assert: East equals: rover direction.! !

!methodRemoval: MarsRoverTest #test04 stamp: 'GR 10/24/2020 18:40:26'!
test04

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: 'r'.
	
	self assert: East equals: rover direction.!
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:41:12'!
test05ForwardEastMovesRoverOnePositionToEast

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: East new.
	
	rover sendCommandSet: 'f'.
	
	self assert: (2@1) equals: rover position.! !

!methodRemoval: MarsRoverTest #test05 stamp: 'GR 10/24/2020 18:41:12'!
test05

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: East new.
	
	rover sendCommandSet: 'f'.
	
	self assert: (2@1) equals: rover position.!
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:41:52'!
test06RoverCanHandleACommandString

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: East new.
	
	rover sendCommandSet: 'flbl'.
	
	self assert: (2@0) equals: rover position.
	self assert: West equals: rover direction.! !

!methodRemoval: MarsRoverTest #test06 stamp: 'GR 10/24/2020 18:41:52'!
test06

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: East new.
	
	rover sendCommandSet: 'flbl'.
	
	self assert: (2@0) equals: rover position.
	self assert: West equals: rover direction.!
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:44:33'!
test07RoverCanNotHandleCommandStringWithInvalidCommand

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: East new.
	
	self 
		should: [ rover sendCommandSet: 'fabl'. ]	 
		raise: Error
		description: MarsRover commandNotUnderstood.! !

!methodRemoval: MarsRoverTest #test07 stamp: 'GR 10/24/2020 18:44:33'!
test07

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: East new.
	
	self 
		should: [ rover sendCommandSet: 'fabl'. ]	 
		raise: Error
		description: MarsRover commandNotUnderstood.!

!testRun: #MarsRoverTest #test07RoverCanNotHandleCommandStringWithInvalidCommand stamp: 'GR 10/24/2020 18:45:13'!
PASSED!

!testRun: #MarsRoverTest #test01ForwardNorthMovesRoverOnePositionToNorth stamp: 'GR 10/24/2020 18:45:13'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardNorthMovesRoverOnePositionToSouth stamp: 'GR 10/24/2020 18:45:13'!
PASSED!

!testRun: #MarsRoverTest #test03LeftNorthChangesRoverDirectionToWest stamp: 'GR 10/24/2020 18:45:13'!
PASSED!

!testRun: #MarsRoverTest #test04RightNorthChangesRoverDirectionToEast stamp: 'GR 10/24/2020 18:45:13'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardEastMovesRoverOnePositionToEast stamp: 'GR 10/24/2020 18:45:13'!
PASSED!

!testRun: #MarsRoverTest #test06RoverCanHandleACommandString stamp: 'GR 10/24/2020 18:45:13'!
PASSED!

!testRun: #MarsRoverTest #test07RoverCanNotHandleCommandStringWithInvalidCommand stamp: 'GR 10/24/2020 18:45:13'!
PASSED!

----QUIT----(24 October 2020 18:46:05) CuisUniversity-4383.image priorSource: 18501252!

----STARTUP---- (24 October 2020 18:49:44) as /home/grosinov/linux64/CuisUniversity-4383.image!

!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:51:32'!
assertMarsRoverPositionIs: aPosition andDirection: aDirection

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: 'f'.
	
	self assert: (1@2) equals: rover position.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:52:06' prior: 50911634!
assertMarsRoverPositionIs: aPosition andDirection: aDirection

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: 'f'.
	
	self assert: aPosition equals: rover position.
	self assert: aDirection equals: rover direction.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:52:41'!
assertMarsRoverPositionIs: aPosition andDirection: aDirection whenSendingCommandSet: aCommandSet

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: aCommandSet.
	
	self assert: aPosition equals: rover position.
	self assert: aDirection equals: rover direction.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:53:00' prior: 50911655!
assertMarsRoverPositionIs: aPosition andDirection: aDirection whenSendingCommandSet: aCommandSet

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: aCommandSet.
	
	self assert: aPosition equals: rover position.
	self assert: aDirection equals: rover direction.! !

Direction subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #East category: 'MarsRover' stamp: 'GR 10/24/2020 18:53:08'!
Direction subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!methodRemoval: MarsRoverTest #assertMarsRoverPositionIs:andDirection: stamp: 'GR 10/24/2020 18:53:16'!
assertMarsRoverPositionIs: aPosition andDirection: aDirection

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: 'f'.
	
	self assert: aPosition equals: rover position.
	self assert: aDirection equals: rover direction.!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'GR 10/24/2020 18:54:20'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:54:19' prior: 50911668!
assertMarsRoverPositionIs: aPosition andDirection: aDirection whenSendingCommandSet: aCommandSet

	marsRover sendCommandSet: aCommandSet.
	
	self assert: aPosition equals: marsRover position.
	self assert: aDirection equals: marsRover direction.! !
!MarsRoverTest methodsFor: 'nil' stamp: 'GR 10/24/2020 18:54:35' overrides: 16927572!
setUp

	marsRover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:55:48' prior: 50911475!
test01ForwardNorthMovesRoverOnePositionToNorth

	self assertMarsRoverPositionIs: (1@2) andDirection: North new whenSendingCommandSet: 'f'.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:56:06' prior: 50911494!
test02BackwardNorthMovesRoverOnePositionToSouth

	self assertMarsRoverPositionIs: (1@0) andDirection: North new whenSendingCommandSet: 'b'.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:56:42' prior: 50911513!
test03LeftNorthChangesRoverDirectionToWest

	self assertMarsRoverPositionIs: (1@1) andDirection: West whenSendingCommandSet: 'l'.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:56:46' prior: 50911735!
test02BackwardNorthMovesRoverOnePositionToSouth

	self assertMarsRoverPositionIs: (1@0) andDirection: North whenSendingCommandSet: 'b'.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:56:50' prior: 50911727!
test01ForwardNorthMovesRoverOnePositionToNorth

	self assertMarsRoverPositionIs: (1@2) andDirection: North whenSendingCommandSet: 'f'.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:57:17' prior: 50911529!
test04RightNorthChangesRoverDirectionToEast

	self assertMarsRoverPositionIs: (1@1) andDirection: East whenSendingCommandSet: 'r'.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:57:43' prior: 50911545!
test05ForwardEastMovesRoverOnePositionToEast

	self assertMarsRoverPositionIs: (2@1) andDirection: East whenSendingCommandSet: 'f'.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:58:11' prior: 50911561!
test06RoverCanHandleACommandString

	self assertMarsRoverPositionIs: (2@0) andDirection: West whenSendingCommandSet: 'flbl'.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:58:25' prior: 50911580!
test07RoverCanNotHandleCommandStringWithInvalidCommand

	self 
		should: [ marsRover sendCommandSet: 'fabl'. ]	 
		raise: Error
		description: MarsRover commandNotUnderstood.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:58:32' prior: 50911786!
test07RoverCanNotHandleCommandStringWithInvalidCommand

	self 
		should: [ marsRover sendCommandSet: 'gaston'. ]	 
		raise: Error
		description: MarsRover commandNotUnderstood.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 18:58:43' prior: 50911795!
test07RoverCanNotHandleCommandStringWithInvalidCommand

	self 
		should: [ marsRover sendCommandSet: 'fabi'. ]	 
		raise: Error
		description: MarsRover commandNotUnderstood.! !

!testRun: #MarsRoverTest #test07RoverCanNotHandleCommandStringWithInvalidCommand stamp: 'GR 10/24/2020 18:58:56'!
PASSED!

!testRun: #MarsRoverTest #test01ForwardNorthMovesRoverOnePositionToNorth stamp: 'GR 10/24/2020 18:58:56'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardNorthMovesRoverOnePositionToSouth stamp: 'GR 10/24/2020 18:58:56'!
PASSED!

!testRun: #MarsRoverTest #test03LeftNorthChangesRoverDirectionToWest stamp: 'GR 10/24/2020 18:58:56'!
PASSED!

!testRun: #MarsRoverTest #test04RightNorthChangesRoverDirectionToEast stamp: 'GR 10/24/2020 18:58:56'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardEastMovesRoverOnePositionToEast stamp: 'GR 10/24/2020 18:58:56'!
FAILURE!

!testRun: #MarsRoverTest #test06RoverCanHandleACommandString stamp: 'GR 10/24/2020 18:58:56'!
FAILURE!

!testRun: #MarsRoverTest #test07RoverCanNotHandleCommandStringWithInvalidCommand stamp: 'GR 10/24/2020 18:58:56'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardEastMovesRoverOnePositionToEast stamp: 'GR 10/24/2020 18:59:10'!
FAILURE!
!MarsRoverTest methodsFor: 'private' stamp: 'GR 10/24/2020 19:01:23' prior: 50911710!
assertMarsRoverPositionIs: aPosition andDirection: aDirection whenSendingCommandSet: aCommandSet

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: aCommandSet.
	
	self assert: aPosition equals: marsRover position.
	self assert: aDirection equals: marsRover direction.! !

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'GR 10/24/2020 19:01:30'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'marsRoverNorth marsRoverEast marsRoverSouth marsRoverWest'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'GR 10/24/2020 19:03:16'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'marsRoverNorth marsRoverEast marsRoverSouth marsRoverWest'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'setUp' stamp: 'GR 10/24/2020 19:03:51' prior: 50911721 overrides: 16927572!
setUp

	marsRoverNorth := MarsRover newInPosition: (1@1) andDirection: North new.
	
	marsRoverEast := MarsRover newInPosition: (1@1) andDirection: East new.
	
	marsRoverSouth := MarsRover newInPosition: (1@1) andDirection: South new.
	
	marsRoverWest := MarsRover newInPosition: (1@1) andDirection: West new.
	
	! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 19:04:50' prior: 50911758!
test01ForwardNorthMovesRoverOnePositionToNorth

	self assertMarsRover: marsRoverNorth endsInPosition: (1@2) andDirection: North whenSendingCommandSet: 'f'.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 19:04:56' prior: 50911897!
test01ForwardNorthMovesRoverOnePositionToNorth

	self assertMarsRover: marsRoverNorth endsInPosition: (1@2) withDirection: North whenSendingCommandSet: 'f'.! !
!MarsRoverTest methodsFor: 'private' stamp: 'GR 10/24/2020 19:06:00'!
assertMarsRover: aMarsRover assertMarsRoverPositionIs: aPosition andDirection: aDirection whenSendingCommandSet: aCommandSet

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: aCommandSet.
	
	self assert: aPosition equals: marsRover position.
	self assert: aDirection equals: marsRover direction.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 19:06:00' prior: 50911772!
test05ForwardEastMovesRoverOnePositionToEast

	self assertMarsRover: marsRover assertMarsRoverPositionIs: (2@1) andDirection: East whenSendingCommandSet: 'f'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 19:06:00' prior: 50911779!
test06RoverCanHandleACommandString

	self assertMarsRover: marsRover assertMarsRoverPositionIs: (2@0) andDirection: West whenSendingCommandSet: 'flbl'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 19:06:00' prior: 50911750!
test02BackwardNorthMovesRoverOnePositionToSouth

	self assertMarsRover: marsRover assertMarsRoverPositionIs: (1@0) andDirection: North whenSendingCommandSet: 'b'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 19:06:00' prior: 50911743!
test03LeftNorthChangesRoverDirectionToWest

	self assertMarsRover: marsRover assertMarsRoverPositionIs: (1@1) andDirection: West whenSendingCommandSet: 'l'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 19:06:00' prior: 50911765!
test04RightNorthChangesRoverDirectionToEast

	self assertMarsRover: marsRover assertMarsRoverPositionIs: (1@1) andDirection: East whenSendingCommandSet: 'r'.! !

!methodRemoval: MarsRoverTest #assertMarsRoverPositionIs:andDirection:whenSendingCommandSet: stamp: 'GR 10/24/2020 19:06:00'!
assertMarsRoverPositionIs: aPosition andDirection: aDirection whenSendingCommandSet: aCommandSet

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: aCommandSet.
	
	self assert: aPosition equals: marsRover position.
	self assert: aDirection equals: marsRover direction.!
!MarsRoverTest methodsFor: 'private' stamp: 'GR 10/24/2020 19:06:28'!
assertMarsRover: aMarsRover endsInPosition: aPosition withDirection: aDirection whenSendingCommandSet: aCommandSet

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: aCommandSet.
	
	self assert: aPosition equals: marsRover position.
	self assert: aDirection equals: marsRover direction.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 19:06:28' prior: 50911945!
test02BackwardNorthMovesRoverOnePositionToSouth

	self assertMarsRover: marsRover endsInPosition: (1@0) withDirection: North whenSendingCommandSet: 'b'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 19:06:28' prior: 50911954!
test03LeftNorthChangesRoverDirectionToWest

	self assertMarsRover: marsRover endsInPosition: (1@1) withDirection: West whenSendingCommandSet: 'l'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 19:06:28' prior: 50911937!
test06RoverCanHandleACommandString

	self assertMarsRover: marsRover endsInPosition: (2@0) withDirection: West whenSendingCommandSet: 'flbl'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 19:06:28' prior: 50911963!
test04RightNorthChangesRoverDirectionToEast

	self assertMarsRover: marsRover endsInPosition: (1@1) withDirection: East whenSendingCommandSet: 'r'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/24/2020 19:06:28' prior: 50911928!
test05ForwardEastMovesRoverOnePositionToEast

	self assertMarsRover: marsRover endsInPosition: (2@1) withDirection: East whenSendingCommandSet: 'f'.! !

!methodRemoval: MarsRoverTest #assertMarsRover:assertMarsRoverPositionIs:andDirection:whenSendingCommandSet: stamp: 'GR 10/24/2020 19:06:28'!
assertMarsRover: aMarsRover assertMarsRoverPositionIs: aPosition andDirection: aDirection whenSendingCommandSet: aCommandSet

	| rover |
	
	rover := MarsRover newInPosition: (1@1) andDirection: North new.
	
	rover sendCommandSet: aCommandSet.
	
	self assert: aPosition equals: marsRover position.
	self assert: aDirection equals: marsRover direction.!
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 19:06:49' prior: 50911999!
test02BackwardNorthMovesRoverOnePositionToSouth

	self assertMarsRover: marsRoverNorth endsInPosition: (1@0) withDirection: North whenSendingCommandSet: 'b'.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 19:06:53' prior: 50912007!
test03LeftNorthChangesRoverDirectionToWest

	self assertMarsRover: marsRoverNorth endsInPosition: (1@1) withDirection: West whenSendingCommandSet: 'l'.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 19:06:57' prior: 50912023!
test04RightNorthChangesRoverDirectionToEast

	self assertMarsRover: marsRoverNorth endsInPosition: (1@1) withDirection: East whenSendingCommandSet: 'r'.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 19:07:01' prior: 50912031!
test05ForwardEastMovesRoverOnePositionToEast

	self assertMarsRover: marsRoverNorth endsInPosition: (2@1) withDirection: East whenSendingCommandSet: 'f'.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 19:07:08' prior: 50912078!
test05ForwardEastMovesRoverOnePositionToEast

	self assertMarsRover: marsRoverEast endsInPosition: (2@1) withDirection: East whenSendingCommandSet: 'f'.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/24/2020 19:07:24' prior: 50912015!
test06RoverCanHandleACommandString

	self assertMarsRover: marsRoverEast endsInPosition: (2@0) withDirection: West whenSendingCommandSet: 'flbl'.! !
!MarsRoverTest methodsFor: 'private' stamp: 'GR 10/24/2020 19:08:14' prior: 50911985!
assertMarsRover: aMarsRover endsInPosition: aPosition withDirection: aDirection whenSendingCommandSet: aCommandSet

	aMarsRover sendCommandSet: aCommandSet.
	
	self assert: aPosition equals: aMarsRover position.
	self assert: aDirection equals: aMarsRover direction.! !

!testRun: #MarsRoverTest #test06RoverCanHandleACommandString stamp: 'GR 10/24/2020 19:08:23'!
PASSED!

!testRun: #MarsRoverTest #test01ForwardNorthMovesRoverOnePositionToNorth stamp: 'GR 10/24/2020 19:08:23'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardNorthMovesRoverOnePositionToSouth stamp: 'GR 10/24/2020 19:08:23'!
PASSED!

!testRun: #MarsRoverTest #test03LeftNorthChangesRoverDirectionToWest stamp: 'GR 10/24/2020 19:08:23'!
PASSED!

!testRun: #MarsRoverTest #test04RightNorthChangesRoverDirectionToEast stamp: 'GR 10/24/2020 19:08:23'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardEastMovesRoverOnePositionToEast stamp: 'GR 10/24/2020 19:08:23'!
PASSED!

!testRun: #MarsRoverTest #test06RoverCanHandleACommandString stamp: 'GR 10/24/2020 19:08:23'!
PASSED!

!testRun: #MarsRoverTest #test07RoverCanNotHandleCommandStringWithInvalidCommand stamp: 'GR 10/24/2020 19:08:23'!
PASSED!

----QUIT----(24 October 2020 19:08:45) CuisUniversity-4383.image priorSource: 18559269!

----STARTUP---- (26 October 2020 11:56:36) as /home/grosinov/linux64/CuisUniversity-4383.image!

!MarsRover class methodsFor: 'instance creation' stamp: 'GR 10/26/2020 11:58:13'!
newInPosition: aCardinalPoint facing: aDirection
	
	^self new initializeNewInPosition: aCardinalPoint andDirection: aDirection ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/26/2020 11:58:13' prior: 50911884 overrides: 16927572!
setUp

	marsRoverNorth := MarsRover newInPosition: (1@1) facing: North new.
	
	marsRoverEast := MarsRover newInPosition: (1@1) facing: East new.
	
	marsRoverSouth := MarsRover newInPosition: (1@1) facing: South new.
	
	marsRoverWest := MarsRover newInPosition: (1@1) facing: West new.
	
	! !

!methodRemoval: MarsRover class #newInPosition:andDirection: stamp: 'GR 10/26/2020 11:58:13'!
newInPosition: aCardinalPoint andDirection: aDirection
	
	^self new initializeNewInPosition: aCardinalPoint andDirection: aDirection !
!MarsRover methodsFor: 'initialization' stamp: 'GR 10/26/2020 11:58:38'!
initializeNewInPosition: aCoordinate facing: aDirection 
	
	position := aCoordinate.
	direction := aDirection.
	cardinalPoints := OrderedCollection with: $N with: $E with: $S with: $O.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'GR 10/26/2020 11:58:38' prior: 50912147!
newInPosition: aCardinalPoint facing: aDirection
	
	^self new initializeNewInPosition: aCardinalPoint facing: aDirection ! !

!methodRemoval: MarsRover #initializeNewInPosition:andDirection: stamp: 'GR 10/26/2020 11:58:38'!
initializeNewInPosition: aCoordinate andDirection: aDirection 
	
	position := aCoordinate.
	direction := aDirection.
	cardinalPoints := OrderedCollection with: $N with: $E with: $S with: $O.!
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/26/2020 12:01:38'!
test01ForwardFacingNorthMovesRoverOnePositionToNorth

	self assertMarsRover: marsRoverNorth endsInPosition: (1@2) withDirection: North whenSendingCommandSet: 'f'.! !

!methodRemoval: MarsRoverTest #test01ForwardNorthMovesRoverOnePositionToNorth stamp: 'GR 10/26/2020 12:01:38'!
test01ForwardNorthMovesRoverOnePositionToNorth

	self assertMarsRover: marsRoverNorth endsInPosition: (1@2) withDirection: North whenSendingCommandSet: 'f'.!
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/26/2020 12:01:45'!
test02BackwardFacingNorthMovesRoverOnePositionToSouth

	self assertMarsRover: marsRoverNorth endsInPosition: (1@0) withDirection: North whenSendingCommandSet: 'b'.! !

!methodRemoval: MarsRoverTest #test02BackwardNorthMovesRoverOnePositionToSouth stamp: 'GR 10/26/2020 12:01:45'!
test02BackwardNorthMovesRoverOnePositionToSouth

	self assertMarsRover: marsRoverNorth endsInPosition: (1@0) withDirection: North whenSendingCommandSet: 'b'.!
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/26/2020 12:01:52'!
test03LeftFacingNorthChangesRoverDirectionToWest

	self assertMarsRover: marsRoverNorth endsInPosition: (1@1) withDirection: West whenSendingCommandSet: 'l'.! !

!methodRemoval: MarsRoverTest #test03LeftNorthChangesRoverDirectionToWest stamp: 'GR 10/26/2020 12:01:52'!
test03LeftNorthChangesRoverDirectionToWest

	self assertMarsRover: marsRoverNorth endsInPosition: (1@1) withDirection: West whenSendingCommandSet: 'l'.!
!MarsRoverTest methodsFor: 'testing' stamp: 'GR 10/26/2020 12:01:58'!
test04RightFacingNorthChangesRoverDirectionToEast

	self assertMarsRover: marsRoverNorth endsInPosition: (1@1) withDirection: East whenSendingCommandSet: 'r'.! !

!methodRemoval: MarsRoverTest #test04RightNorthChangesRoverDirectionToEast stamp: 'GR 10/26/2020 12:01:58'!
test04RightNorthChangesRoverDirectionToEast

	self assertMarsRover: marsRoverNorth endsInPosition: (1@1) withDirection: East whenSendingCommandSet: 'r'.!
!MarsRoverTest methodsFor: 'private' stamp: 'GR 10/26/2020 12:05:05'!
assertMarsRover: aMarsRover endsInPosition: aPosition facing: aDirection whenSendingCommandSet: aCommandSet

	aMarsRover sendCommandSet: aCommandSet.
	
	self assert: aPosition equals: aMarsRover position.
	self assert: aDirection equals: aMarsRover direction.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/26/2020 12:05:05' prior: 50912215!
test02BackwardFacingNorthMovesRoverOnePositionToSouth

	self assertMarsRover: marsRoverNorth endsInPosition: (1@0) facing: North whenSendingCommandSet: 'b'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/26/2020 12:05:05' prior: 50912199!
test01ForwardFacingNorthMovesRoverOnePositionToNorth

	self assertMarsRover: marsRoverNorth endsInPosition: (1@2) facing: North whenSendingCommandSet: 'f'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/26/2020 12:05:05' prior: 50912247!
test04RightFacingNorthChangesRoverDirectionToEast

	self assertMarsRover: marsRoverNorth endsInPosition: (1@1) facing: East whenSendingCommandSet: 'r'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/26/2020 12:05:05' prior: 50912231!
test03LeftFacingNorthChangesRoverDirectionToWest

	self assertMarsRover: marsRoverNorth endsInPosition: (1@1) facing: West whenSendingCommandSet: 'l'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/26/2020 12:05:05' prior: 50912094!
test06RoverCanHandleACommandString

	self assertMarsRover: marsRoverEast endsInPosition: (2@0) facing: West whenSendingCommandSet: 'flbl'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 10/26/2020 12:05:05' prior: 50912086!
test05ForwardEastMovesRoverOnePositionToEast

	self assertMarsRover: marsRoverEast endsInPosition: (2@1) facing: East whenSendingCommandSet: 'f'.! !

!methodRemoval: MarsRoverTest #assertMarsRover:endsInPosition:withDirection:whenSendingCommandSet: stamp: 'GR 10/26/2020 12:05:05'!
assertMarsRover: aMarsRover endsInPosition: aPosition withDirection: aDirection whenSendingCommandSet: aCommandSet

	aMarsRover sendCommandSet: aCommandSet.
	
	self assert: aPosition equals: aMarsRover position.
	self assert: aDirection equals: aMarsRover direction.!

!testRun: #MarsRoverTest #test07RoverCanNotHandleCommandStringWithInvalidCommand stamp: 'GR 10/26/2020 12:05:54'!
PASSED!

!testRun: #MarsRoverTest #test01ForwardFacingNorthMovesRoverOnePositionToNorth stamp: 'GR 10/26/2020 12:05:54'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardFacingNorthMovesRoverOnePositionToSouth stamp: 'GR 10/26/2020 12:05:54'!
PASSED!

!testRun: #MarsRoverTest #test03LeftFacingNorthChangesRoverDirectionToWest stamp: 'GR 10/26/2020 12:05:54'!
PASSED!

!testRun: #MarsRoverTest #test04RightFacingNorthChangesRoverDirectionToEast stamp: 'GR 10/26/2020 12:05:54'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardEastMovesRoverOnePositionToEast stamp: 'GR 10/26/2020 12:05:54'!
PASSED!

!testRun: #MarsRoverTest #test06RoverCanHandleACommandString stamp: 'GR 10/26/2020 12:05:54'!
PASSED!

!testRun: #MarsRoverTest #test07RoverCanNotHandleCommandStringWithInvalidCommand stamp: 'GR 10/26/2020 12:05:54'!
PASSED!

----QUIT----(26 October 2020 12:13:07) CuisUniversity-4383.image priorSource: 18575693!