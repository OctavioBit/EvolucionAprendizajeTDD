

----STARTUP---- (24 October 2020 15:09:32) as C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CuisAct\CuisUniversity-4383.image!


TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRoverTest category: 'MarsRover-Exercise' stamp: 'AM 10/24/2020 15:11:04'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRover category: 'MarsRover-Exercise' stamp: 'AM 10/24/2020 15:16:38'!
Object subclass: #MarsRover
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRoverTest methodsFor: 'nil' stamp: 'AM 10/24/2020 15:15:55'!
test01

	| marsRover |
	
	marsRover := MarsRover at: 1@1.
	
	self assert: marsRover position equals: 1@1. ! !

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/24/2020 15:16:53'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 15:17:43' prior: 50869423!
test01

	| marsRover |
	
	marsRover := MarsRover at: 1@1.
	
	self assert: marsRover position equals: 1@1. ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 15:18:32' prior: 50869432!
test01

	| marsRover |
	
	marsRover := MarsRover atCoordinates: 1@1.
	
	self assert: marsRover position equals: 1@1. ! !

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/24/2020 15:18:46'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'AM 10/24/2020 15:19:08'!
atCoordinates: aPoint 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAtCoordinates: aPoint ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'AM 10/24/2020 15:20:22' prior: 50869448!
atCoordinates: aPoint 

	^self new initializeAtCoordinates: aPoint.! !

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/24/2020 15:20:23'!
ERROR!

!classDefinition: #MarsRover category: 'MarsRover-Exercise' stamp: 'AM 10/24/2020 15:20:57'!
Object subclass: #MarsRover
	instanceVariableNames: 'position point'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRover methodsFor: 'initialization' stamp: 'AM 10/24/2020 15:20:57'!
initializeAtCoordinates: aPoint 
	self shouldBeImplemented.
	point := aPoint.! !
!MarsRover methodsFor: 'initialization' stamp: 'AM 10/24/2020 15:21:21' prior: 50869472!
initializeAtCoordinates: aPoint 

	position := aPoint.! !

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/24/2020 15:21:29'!
ERROR!
!MarsRover methodsFor: 'accesing' stamp: 'AM 10/24/2020 15:21:55'!
position
	self shouldBeImplemented.
	^position! !
!MarsRover methodsFor: 'accesing' stamp: 'AM 10/24/2020 15:22:02' prior: 50869485!
position
	
	^position! !

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/24/2020 15:22:07'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/24/2020 15:22:07'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 15:25:08'!
test02

	| marsRover |
	
	marsRover := MarsRover atCoordinates: 1@1 facing: #N.
	
	self assert: marsRover orientation equals: #N. ! !

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/24/2020 15:25:18'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'AM 10/24/2020 15:25:27'!
atCoordinates: aPoint facing: aSymbol 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAtCoordinates: aPoint facing: aSymbol ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'AM 10/24/2020 15:26:15' prior: 50869509!
atCoordinates: aCoordinate facing: aCardinalPoint
	
	^self new initializeAtCoordinates: aCoordinate facing: aCardinalPoint ! !

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/24/2020 15:26:22'!
ERROR!

!classDefinition: #MarsRover category: 'MarsRover-Exercise' stamp: 'AM 10/24/2020 15:26:45'!
Object subclass: #MarsRover
	instanceVariableNames: 'position point coordinate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRover category: 'MarsRover-Exercise' stamp: 'AM 10/24/2020 15:26:45'!
Object subclass: #MarsRover
	instanceVariableNames: 'position point coordinate cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRover methodsFor: 'initialization' stamp: 'AM 10/24/2020 15:26:45'!
initializeAtCoordinates: aCoordinate facing: aCardinalPoint 
	self shouldBeImplemented.
	coordinate := aCoordinate.
	cardinalPoint := aCardinalPoint.! !

!classDefinition: #MarsRover category: 'MarsRover-Exercise' stamp: 'AM 10/24/2020 15:27:33'!
Object subclass: #MarsRover
	instanceVariableNames: 'position point coordinate cardinalPoint orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRover methodsFor: 'initialization' stamp: 'AM 10/24/2020 15:27:19' prior: 50869544!
initializeAtCoordinates: aCoordinate facing: aCardinalPoint 
	
	position := aCoordinate.
	orientation := aCardinalPoint.! !

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/24/2020 15:27:54'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'AM 10/24/2020 15:28:05'!
orientation
	self shouldBeImplemented.
	^orientation! !
!MarsRover methodsFor: 'accessing' stamp: 'AM 10/24/2020 15:28:09' prior: 50869570!
orientation
	
	^orientation! !

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/24/2020 15:28:10'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/24/2020 15:28:10'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/24/2020 15:28:10'!
PASSED!

Object subclass: #MarsRover
	instanceVariableNames: 'position orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRover category: 'MarsRover-Exercise' stamp: 'AM 10/24/2020 15:28:45'!
Object subclass: #MarsRover
	instanceVariableNames: 'position orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 15:35:13'!
test03

	| marsRover |
	
	marsRover := MarsRover atCoordinates: 1@1 facing: #N.
	
	marsRover recieveCommands: 'f'.
	
	self assert: marsRover position equals: 1@2. ! !

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 15:35:26'!
ERROR!
!MarsRover methodsFor: 'actions' stamp: 'AM 10/24/2020 15:35:50'!
recieveCommands: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'actions' stamp: 'AM 10/24/2020 15:36:44' prior: 50869609!
recieveCommands: aCommandsString
	
	position := 1@2.! !

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 15:36:54'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/24/2020 15:36:54'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/24/2020 15:36:54'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 15:36:54'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 15:37:52'!
test04

	| marsRover |
	
	marsRover := MarsRover atCoordinates: 1@2 facing: #N.
	
	marsRover recieveCommands: 'f'.
	
	self assert: marsRover position equals: 1@2. ! !

!testRun: #MarsRoverTest #test04 stamp: 'AM 10/24/2020 15:37:54'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/24/2020 15:37:54'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/24/2020 15:37:54'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 15:37:54'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'AM 10/24/2020 15:37:54'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 15:38:00' prior: 50869628!
test04

	| marsRover |
	
	marsRover := MarsRover atCoordinates: 1@2 facing: #N.
	
	marsRover recieveCommands: 'f'.
	
	self assert: marsRover position equals: 1@3. ! !

!testRun: #MarsRoverTest #test04 stamp: 'AM 10/24/2020 15:38:01'!
FAILURE!

----End fileIn of C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CuisAct\Packages\TerseGuide.pck.st----!
!MarsRover methodsFor: 'actions' stamp: 'AM 10/24/2020 15:38:54' prior: 50869614!
recieveCommands: aCommandsString
	
	position := 1@2 + 0@1.! !
!MarsRover methodsFor: 'actions' stamp: 'AM 10/24/2020 15:39:06' prior: 50872594!
recieveCommands: aCommandsString
	
	position := position + 0@1.! !

!testRun: #MarsRoverTest #test04 stamp: 'AM 10/24/2020 15:39:08'!
ERROR!
!MarsRover methodsFor: 'actions' stamp: 'AM 10/24/2020 15:39:26' prior: 50872599!
recieveCommands: aCommandsString
	
	position := position + (0@1).! !

!testRun: #MarsRoverTest #test04 stamp: 'AM 10/24/2020 15:39:28'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/24/2020 15:39:28'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/24/2020 15:39:28'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 15:39:28'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'AM 10/24/2020 15:39:28'!
PASSED!

----SNAPSHOT----(24 October 2020 15:45:02) CuisUniversity-4383.image priorSource: 17207870!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 15:50:52'!
test05

	| marsRover |
	
	marsRover := MarsRover atCoordinates: 1@2 facing: #N.
	
	marsRover recieveCommands: 'b'.
	
	self assert: marsRover position equals: 1@1. ! !

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/24/2020 15:50:54'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'AM 10/24/2020 15:53:37' prior: 50872606!
recieveCommands: aCommandsString
	
	
	(aCommandsString at: 1 = 'f') 
		ifTrue: [ position := position + (0@1)]
		ifFalse: [position := position - (0@1)]! !

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/24/2020 15:53:41'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/24/2020 15:53:54'!
ERROR!
!MarsRover methodsFor: 'actions' stamp: 'AM 10/24/2020 15:54:15' prior: 50872637!
recieveCommands: aCommandsString
	
	
	(aCommandsString = 'f') 
		ifTrue: [ position := position + (0@1)]
		ifFalse: [position := position - (0@1)]! !

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/24/2020 15:54:23'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/24/2020 15:54:28'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/24/2020 15:54:28'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 15:54:28'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'AM 10/24/2020 15:54:28'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/24/2020 15:54:28'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 15:54:56'!
test06

	| marsRover |
	
	marsRover := MarsRover atCoordinates: 1@2 facing: #S.
	
	marsRover recieveCommands: 'b'.
	
	self assert: marsRover position equals: 1@1. ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 15:55:19' prior: 50872672!
test06

	| marsRover |
	
	marsRover := MarsRover atCoordinates: 1@2 facing: #S.
	
	marsRover recieveCommands: 'f'.
	
	self assert: marsRover position equals: 1@1. ! !

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/24/2020 15:55:20'!
FAILURE!

Object subclass: #MarsRoverDirectionState
	instanceVariableNames: 'position orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRoverDirectionState category: 'MarsRover-Exercise' stamp: 'AM 10/24/2020 16:00:50'!
Object subclass: #MarsRoverDirectionState
	instanceVariableNames: 'position orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

Object subclass: #MarsRoverDirectionState
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRoverDirectionState category: 'MarsRover-Exercise' stamp: 'AM 10/24/2020 16:01:13'!
Object subclass: #MarsRoverDirectionState
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

MarsRoverDirectionState subclass: #N
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #N category: 'MarsRover-Exercise' stamp: 'AM 10/24/2020 16:02:28'!
MarsRoverDirectionState subclass: #N
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

MarsRoverDirectionState subclass: #S
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #S category: 'MarsRover-Exercise' stamp: 'AM 10/24/2020 16:02:42'!
MarsRoverDirectionState subclass: #S
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

MarsRoverDirectionState subclass: #W
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #W category: 'MarsRover-Exercise' stamp: 'AM 10/24/2020 16:02:51'!
MarsRoverDirectionState subclass: #W
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

MarsRoverDirectionState subclass: #E
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #E category: 'MarsRover-Exercise' stamp: 'AM 10/24/2020 16:02:56'!
MarsRoverDirectionState subclass: #E
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classRenamed: #MarsRoverDirectionState as: #MarsRoverDirection stamp: 'AM 10/24/2020 16:04:30'!
Smalltalk renameClassNamed: #MarsRoverDirectionState as: #MarsRoverDirection!
!MarsRoverDirection class methodsFor: 'nil' stamp: 'AM 10/24/2020 16:05:51'!
for: aMarsRover

	^self new initializeFor: aMarsRover.! !
!MarsRoverDirection methodsFor: 'nil' stamp: 'AM 10/24/2020 16:07:12'!
initializeFor: aMarsRover

	marsRover := aMarsRover.! !
!MarsRover methodsFor: 'initialization' stamp: 'AM 10/24/2020 16:11:16' prior: 50869561!
initializeAtCoordinates: aCoordinate facing: aDirection
	
	position := aCoordinate.
	orientation := aDirection.! !
!N methodsFor: 'nil' stamp: 'AM 10/24/2020 16:15:22'!
f 

	marsRover yCoordinatePlusOne.! !
!MarsRover methodsFor: 'nil' stamp: 'AM 10/24/2020 16:16:20'!
yCoordinatePlusOne
	
	position := position + (0@1).! !
!MarsRover methodsFor: 'actions' stamp: 'AM 10/24/2020 16:18:21' prior: 50872650!
recieveCommands: aCommandsString
	
	"
	(aCommandsString = 'f') 
		ifTrue: [ position := position + (0@1)]
		ifFalse: [position := position - (0@1)]"
		
		
	! !

Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRover category: 'MarsRover-Exercise' stamp: 'AM 10/24/2020 16:18:38'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRover methodsFor: 'initialization' stamp: 'AM 10/24/2020 16:18:46' prior: 50872781!
initializeAtCoordinates: aCoordinate facing: aDirection
	
	position := aCoordinate.
	direction := aDirection.! !
!MarsRover methodsFor: 'actions' stamp: 'AM 10/24/2020 16:21:27' prior: 50872796!
recieveCommands: aCommandsString
	
	direction selector: (aCommandsString asSymbol).! !
!MarsRover class methodsFor: 'instance creation' stamp: 'AM 10/24/2020 16:22:15' prior: 50869519!
atCoordinates: aCoordinate facing: aDirection
	
	^self new initializeAtCoordinates: aCoordinate facing: aDirection.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 16:30:26' prior: 50869599!
test03

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 1@1.
	
	marsRover recieveCommands: 'f'.
	
	self assert: marsRover position equals: 1@2. ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'AM 10/24/2020 16:35:49'!
facingNorthAtCoordinates: aCoordinate
	
	| aMarsRover |
	
	aMarsRover := MarsRover new.
	
	aMarsRover initializeAtCoordinates: aCoordinate facing: N. 
	
	^aMarsRover.! !
!MarsRover class methodsFor: 'instance creation' stamp: 'AM 10/24/2020 16:36:20' prior: 50872845!
facingNorthAtCoordinates: aCoordinate
	
	| aMarsRover |
	
	aMarsRover := MarsRover new.
	
	aMarsRover initializeAtCoordinates: aCoordinate facing: (N for: aMarsRover). 
	
	^aMarsRover.! !

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 16:37:07'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 16:37:07'!
ERROR!

aCommandsString asSymbol!

direction!
!MarsRover methodsFor: 'actions' stamp: 'AM 10/24/2020 16:43:32' prior: 50872824!
recieveCommands: aCommandsString
	
	 direction actionsDo: (aCommandsString asMessage).! !

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 16:43:40'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 16:43:40'!
ERROR!
!MarsRover methodsFor: 'actions' stamp: 'AM 10/24/2020 16:44:05' prior: 50872869!
recieveCommands: aCommandsString
	
	 direction actionsDo: ((aCommandsString asSymbol)asMessage).! !

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 16:44:11'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 16:44:21'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 16:44:21'!
FAILURE!

(aCommandsString asSymbol)asMessage!
!MarsRover methodsFor: 'actions' stamp: 'AM 10/24/2020 16:46:36' prior: 50872879!
recieveCommands: aCommandsString
	
	 direction selector: ((aCommandsString asSymbol)asMessage).! !

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 16:46:42'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 16:46:42'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 16:46:54'!
ERROR!
!MarsRover methodsFor: 'actions' stamp: 'AM 10/24/2020 16:47:42' prior: 50872893!
recieveCommands: aCommandsString
	
	 direction sendsMessageToSelf: ((aCommandsString asSymbol)asMessage).! !

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 16:47:50'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 16:47:50'!
ERROR!
!MarsRover methodsFor: 'actions' stamp: 'AM 10/24/2020 16:48:18' prior: 50872906!
recieveCommands: aCommandsString
	
	 direction with: ((aCommandsString asSymbol)asMessage).! !

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 16:48:22'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 16:48:22'!
ERROR!
!MarsRover methodsFor: 'actions' stamp: 'AM 10/24/2020 16:49:04' prior: 50872917!
recieveCommands: aCommandsString
	
	 direction perform: ((aCommandsString asSymbol)asMessage).! !

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 16:49:11'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 16:49:11'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 16:50:02'!
ERROR!
!MarsRover methodsFor: 'actions' stamp: 'AM 10/24/2020 16:50:54' prior: 50872928!
recieveCommands: aCommandsString
	
	 direction perform: (aCommandsString asSymbol).! !

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 16:51:00'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/24/2020 16:51:00'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/24/2020 16:51:00'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 16:51:00'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'AM 10/24/2020 16:51:00'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/24/2020 16:51:00'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/24/2020 16:51:00'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 16:51:04'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/24/2020 16:51:54'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/24/2020 16:51:54'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 16:51:54'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'AM 10/24/2020 16:51:54'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/24/2020 16:51:54'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/24/2020 16:51:54'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/24/2020 16:52:05'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/24/2020 16:52:05'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 16:52:05'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'AM 10/24/2020 16:52:05'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/24/2020 16:52:05'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/24/2020 16:52:05'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 16:52:26' prior: 50869648!
test04

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 1@2.
	
	marsRover recieveCommands: 'f'.
	
	self assert: marsRover position equals: 1@3. ! !

!testRun: #MarsRoverTest #test04 stamp: 'AM 10/24/2020 16:52:38'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 16:52:56' prior: 50869499!
test02

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 1@1.
	
	self assert: marsRover orientation equals: #N. ! !
!N methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 16:53:39'!
b

	marsRover yCoordinateMinusOne.! !
!MarsRover methodsFor: 'actions private' stamp: 'AM 10/24/2020 16:53:51'!
yCoordinateMinusOne
	
	position := position - (0@1).! !
!S methodsFor: 'nil' stamp: 'AM 10/24/2020 16:54:20'!
f

	marsRover yCoordinateMinusOne.! !
!S methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 16:54:30'!
b

	marsRover yCoordinatePlusOne.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 16:55:02' prior: 50872626!
test05

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 1@2.
	
	marsRover recieveCommands: 'b'.
	
	self assert: marsRover position equals: 1@1. ! !

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/24/2020 16:55:10'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/24/2020 16:55:10'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 16:55:10'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'AM 10/24/2020 16:55:10'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/24/2020 16:55:10'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/24/2020 16:55:10'!
ERROR!
!MarsRover methodsFor: 'testing' stamp: 'AM 10/24/2020 16:57:41'!
directionSymbol

	^direction asSymbol. ! !
!N methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 16:58:04'!
asSymbol

	^#N! !

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/24/2020 16:58:17'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/24/2020 16:58:17'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 16:58:28' prior: 50873005!
test02

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 1@1.
	
	self assert: marsRover directionSymbol equals: #N. ! !
!MarsRover methodsFor: 'accessing' stamp: 'AM 10/24/2020 16:58:39' prior: 50869575!
orientation
	
	^direction! !
!MarsRover methodsFor: 'accessing' stamp: 'AM 10/24/2020 16:58:50'!
direction
	
	^direction! !

!methodRemoval: MarsRover #orientation stamp: 'AM 10/24/2020 16:58:50'!
orientation
	
	^direction!

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/24/2020 16:59:04'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/24/2020 16:59:04'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 16:59:04'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'AM 10/24/2020 16:59:04'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/24/2020 16:59:04'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/24/2020 16:59:04'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/24/2020 16:59:04'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/24/2020 16:59:34'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/24/2020 16:59:37'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 16:59:40'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/24/2020 16:59:44'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/24/2020 16:59:44'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 16:59:44'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'AM 10/24/2020 16:59:44'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/24/2020 16:59:44'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/24/2020 16:59:44'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/24/2020 16:59:44'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'AM 10/24/2020 17:00:22'!
facingSouthAtCoordinates: aCoordinate
	
	| aMarsRover |
	
	aMarsRover := MarsRover new.
	
	aMarsRover initializeAtCoordinates: aCoordinate facing: (S for: aMarsRover). 
	
	^aMarsRover.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:00:44' prior: 50872681!
test06

	| marsRover |
	
	marsRover := MarsRover facingSouthAtCoordinates: 1@2.
	
	marsRover recieveCommands: 'f'.
	
	self assert: marsRover position equals: 1@1. ! !

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/24/2020 17:00:47'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/24/2020 17:00:50'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/24/2020 17:00:50'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 17:00:50'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'AM 10/24/2020 17:00:50'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/24/2020 17:00:50'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/24/2020 17:00:50'!
PASSED!
!S methodsFor: 'nil' stamp: 'AM 10/24/2020 17:01:33'!
asSymbol

	^#S! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:02:14'!
test07

	| marsRover |
	
	marsRover := MarsRover facingSouthAtCoordinates: 1@2.
	
	marsRover recieveCommands: 'l'.
	
	self assert: marsRover directionSymbol equals: #E. ! !

!testRun: #MarsRoverTest #test07 stamp: 'AM 10/24/2020 17:02:32'!
ERROR!

!testRun: #MarsRoverTest #test07 stamp: 'AM 10/24/2020 17:02:32'!
ERROR!
!S methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:02:55'!
l
	self shouldBeImplemented.! !
!S methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:03:23' prior: 50873172!
l
	marsRover turnEast.! !

!testRun: #MarsRoverTest #test07 stamp: 'AM 10/24/2020 17:03:26'!
ERROR!
!MarsRover methodsFor: 'actions private' stamp: 'AM 10/24/2020 17:03:33'!
turnEast
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'actions private' stamp: 'AM 10/24/2020 17:04:11' prior: 50873182!
turnEast
	
	direction := E for: self.! !

!testRun: #MarsRoverTest #test07 stamp: 'AM 10/24/2020 17:04:16'!
ERROR!
!E methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:04:22'!
asSymbol
	self shouldBeImplemented.! !
!E methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:04:35' prior: 50873193!
asSymbol
	
	^#E.! !

!testRun: #MarsRoverTest #test07 stamp: 'AM 10/24/2020 17:04:36'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'AM 10/24/2020 17:04:40'!
PASSED!
!MarsRover class methodsFor: 'instance creation' stamp: 'AM 10/24/2020 17:05:48'!
facingEastAtCoordinates: aCoordinate
	
	| aMarsRover |
	
	aMarsRover := MarsRover new.
	
	aMarsRover initializeAtCoordinates: aCoordinate facing: (E for: aMarsRover). 
	
	^aMarsRover.! !
!MarsRover class methodsFor: 'instance creation' stamp: 'AM 10/24/2020 17:05:54'!
facingWestAtCoordinates: aCoordinate
	
	| aMarsRover |
	
	aMarsRover := MarsRover new.
	
	aMarsRover initializeAtCoordinates: aCoordinate facing: (W for: aMarsRover). 
	
	^aMarsRover.! !

!methodRemoval: MarsRover class #atCoordinates:facing: stamp: 'AM 10/24/2020 17:06:02'!
atCoordinates: aCoordinate facing: aDirection
	
	^self new initializeAtCoordinates: aCoordinate facing: aDirection.!
!E methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:07:03'!
f

	marsRover xCoordinatePlusOne.! !
!E methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:07:27'!
b
	
	marsRover xCoordinateMinusOne.! !
!MarsRover methodsFor: 'actions private' stamp: 'AM 10/24/2020 17:07:44'!
xCoordinatePlusOne
	
	position := position + (1@0).! !
!MarsRover methodsFor: 'actions private' stamp: 'AM 10/24/2020 17:07:53'!
xCoordinateMinusOne
	
	position := position - (1@0).! !
!W methodsFor: 'nil' stamp: 'AM 10/24/2020 17:08:10'!
f

	marsRover xCoordinateMinusOne.! !
!W methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:08:33'!
b

	marsRover xCoordinatePlusOne.! !
!W methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:08:47'!
asSymbol

	^#W! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:09:16'!
test08

	| marsRover |
	
	marsRover := MarsRover facingSouthAtCoordinates: 1@2.
	
	marsRover recieveCommands: 'r'.
	
	self assert: marsRover directionSymbol equals: #E. ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:09:24' prior: 50873258!
test08

	| marsRover |
	
	marsRover := MarsRover facingSouthAtCoordinates: 1@2.
	
	marsRover recieveCommands: 'r'.
	
	self assert: marsRover directionSymbol equals: #W. ! !

!testRun: #MarsRoverTest #test08 stamp: 'AM 10/24/2020 17:09:26'!
ERROR!
!S methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:09:32'!
r
	self shouldBeImplemented.! !
!S methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:09:55' prior: 50873277!
r
	
	marsRover turnWest.! !

!testRun: #MarsRoverTest #test08 stamp: 'AM 10/24/2020 17:10:01'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:10:06'!
turnWest
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:10:24' prior: 50873287!
turnWest
	
	direction := W for: self.! !

!testRun: #MarsRoverTest #test08 stamp: 'AM 10/24/2020 17:10:26'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/24/2020 17:10:26'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/24/2020 17:10:26'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 17:10:26'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'AM 10/24/2020 17:10:26'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/24/2020 17:10:26'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/24/2020 17:10:26'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'AM 10/24/2020 17:10:26'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'AM 10/24/2020 17:10:26'!
PASSED!
!E methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:11:03'!
l

	marsRover turnNorth.! !
!E methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:11:14'!
r

	marsRover turnSouth.! !
!N methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:11:33'!
l

	marsRover turnWest.! !
!N methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:11:44'!
r

	marsRover turnEast.! !
!W methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:12:00'!
r

	marsRover turnNorth.! !
!W methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:12:10' prior: 50873250!
b

	marsRover turnSouth.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:12:21'!
turnNorth
	
	direction := N for: self.! !
!MarsRover methodsFor: 'actions private' stamp: 'AM 10/24/2020 17:12:48'!
turnSouth
	
	direction := S for: self.! !

!testRun: #MarsRoverTest #test08 stamp: 'AM 10/24/2020 17:13:00'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/24/2020 17:14:04'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/24/2020 17:14:04'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 17:14:04'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'AM 10/24/2020 17:14:04'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/24/2020 17:14:04'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/24/2020 17:14:04'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'AM 10/24/2020 17:14:04'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'AM 10/24/2020 17:14:04'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:17:01'!
test09

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	marsRover recieveCommands: 'ffrf'.
	
	self assert: marsRover directionSymbol equals: #E.
	self assert: marsRover position equals: 1@2.! !

!testRun: #MarsRoverTest #test09 stamp: 'AM 10/24/2020 17:17:03'!
ERROR!
!MarsRover methodsFor: 'actions' stamp: 'AM 10/24/2020 17:18:29' prior: 50872941!
recieveCommands: aCommandsString
	
	aCommandsString do: [:command | direction perform: (command asSymbol)].! !

!testRun: #MarsRoverTest #test09 stamp: 'AM 10/24/2020 17:18:35'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/24/2020 17:18:35'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/24/2020 17:18:35'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 17:18:35'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'AM 10/24/2020 17:18:35'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/24/2020 17:18:35'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/24/2020 17:18:35'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'AM 10/24/2020 17:18:35'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'AM 10/24/2020 17:18:35'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'AM 10/24/2020 17:18:35'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:20:35'!
test10

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	
	
	self should: []! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:23:45' prior: 50873412!
test10

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	
	
	self should: [marsRover recieveCommands: 'a']
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		! !

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/24/2020 17:23:55'!
ERROR!
!MarsRover class methodsFor: 'error messages' stamp: 'AM 10/24/2020 17:24:19'!
invalidCommandErrorDescription
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'error messages' stamp: 'AM 10/24/2020 17:24:51' prior: 50873431!
invalidCommandErrorDescription
	
	^'Commands string contained an invalid command'! !
!MarsRover class methodsFor: 'error messages' stamp: 'AM 10/24/2020 17:24:59' prior: 50873436!
invalidCommandErrorDescription
	
	^'Commands string contains an invalid command'! !

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/24/2020 17:25:01'!
FAILURE!
!MarsRover methodsFor: 'testing' stamp: 'AM 10/24/2020 17:32:41'!
assertValidCommand: aCommandChar

	| validCommands |
	
	validCommands := 'fblr'	! !
!MarsRover methodsFor: 'testing' stamp: 'AM 10/24/2020 17:35:34' prior: 50873450!
assertValidCommand: aCommandChar

	| validCommands |
	
	validCommands := OrderedCollection with: #f; with: #b; with: #l; with: #r.
	
	validCommands detect: aCommandChar ifNone: [self signalInvalidCommand].
	
		! !
!MarsRover methodsFor: 'exeptions' stamp: 'AM 10/24/2020 17:36:19'!
signalInvalidCommand

	self error: self class invalidCommandErrorDescription ! !
!MarsRover methodsFor: 'exeptions' stamp: 'AM 10/24/2020 17:36:21' prior: 50873465!
signalInvalidCommand

	self error: self class invalidCommandErrorDescription.! !

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/24/2020 17:36:34'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'AM 10/24/2020 17:37:38' prior: 50873382!
recieveCommands: aCommandsString
	
	aCommandsString do: [:command | self assertValidCommand: command. 
								direction perform: (command asSymbol)].! !

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/24/2020 17:37:52'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/24/2020 17:38:16'!
FAILURE!
!MarsRover methodsFor: 'testing' stamp: 'AM 10/24/2020 17:39:26' prior: 50873456!
assertValidCommand: aCommandChar

	| validCommands |
	
	validCommands := OrderedCollection with: $f; with: $b; with: $l; with: $r.
	
	validCommands detect: aCommandChar ifNone: [self signalInvalidCommand].
	
		! !

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/24/2020 17:39:29'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:40:58' prior: 50873419!
test10

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	self 
		should: [marsRover recieveCommands: 'a']
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		! !

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/24/2020 17:41:28'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/24/2020 17:43:18'!
FAILURE!
!MarsRover methodsFor: 'exeptions' stamp: 'AM 10/24/2020 17:44:35' prior: 50873471!
signalInvalidCommand

	^self error: self class invalidCommandErrorDescription.! !

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/24/2020 17:44:48'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/24/2020 17:46:05'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/24/2020 17:46:49'!
FAILURE!

aBlock!
!MarsRover methodsFor: 'actions' stamp: 'AM 10/24/2020 17:48:04' prior: 50873479!
recieveCommands: aCommandsString
	
	self assertValidCommand: $a.
	"
	aCommandsString do: [:command | self assertValidCommand: command. 
								direction perform: (command asSymbol)]."! !

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/24/2020 17:48:09'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/24/2020 17:48:09'!
FAILURE!
!MarsRover methodsFor: 'testing' stamp: 'AM 10/24/2020 17:48:24' prior: 50873492!
assertValidCommand: aCommandChar

	| validCommands |
	
	validCommands := OrderedCollection with: $f; with: $b; with: $l; with: $r.
	
	validCommands detect: aCommandChar ifNone: [^self signalInvalidCommand].
	
		! !

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/24/2020 17:48:29'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/24/2020 17:48:29'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'AM 10/24/2020 17:48:55' prior: 50873533!
recieveCommands: aCommandsString
	
	self signalInvalidCommand.
	"
	aCommandsString do: [:command | self assertValidCommand: command. 
								direction perform: (command asSymbol)]."! !

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/24/2020 17:48:58'!
PASSED!
!MarsRover methodsFor: 'actions' stamp: 'AM 10/24/2020 17:49:44' prior: 50873562!
recieveCommands: aCommandsString
	
	self assertValidCommand: $a.
	"
	aCommandsString do: [:command | self assertValidCommand: command. 
								direction perform: (command asSymbol)]."! !

self assertValidCommand: $a!

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/24/2020 17:50:51'!
FAILURE!
!MarsRover methodsFor: 'testing' stamp: 'AM 10/24/2020 17:54:16' prior: 50873547!
assertValidCommand: aCommandChar

	| validCommands validFlag|
	
	validCommands := 'fblr'.
	validFlag := false.
	
	validCommands do: [:validChar | (validChar = aCommandChar) ifTrue: [validFlag := true]].
	
	validFlag ifFalse: [^self signalInvalidCommand].
	
		! !

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/24/2020 17:54:25'!
PASSED!
!MarsRover methodsFor: 'actions' stamp: 'AM 10/24/2020 17:54:37' prior: 50873573!
recieveCommands: aCommandsString
	
	aCommandsString do: [:command | self assertValidCommand: command. 
								direction perform: (command asSymbol)].! !

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/24/2020 17:54:42'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/24/2020 17:54:45'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/24/2020 17:54:45'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 17:54:45'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'AM 10/24/2020 17:54:45'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/24/2020 17:54:45'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/24/2020 17:54:45'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'AM 10/24/2020 17:54:45'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'AM 10/24/2020 17:54:45'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'AM 10/24/2020 17:54:45'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/24/2020 17:54:45'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:55:00' prior: 50873505!
test10

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	self 
		should: [marsRover recieveCommands: '9']
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		! !

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/24/2020 17:55:02'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:55:06' prior: 50873633!
test10

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	self 
		should: [marsRover recieveCommands: 'a']
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:57:08'!
test11

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	self 
		should: [marsRover recieveCommands: 'fflafl']
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		
	self assert: 2@0 equals: marsRover position.
	self assert: #W equals: marsRover directionSymbol.
		! !

!testRun: #MarsRoverTest #test11 stamp: 'AM 10/24/2020 17:57:10'!
FAILURE!

!testRun: #MarsRoverTest #test11 stamp: 'AM 10/24/2020 17:57:10'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/24/2020 17:57:22' prior: 50873656!
test11

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	self 
		should: [marsRover recieveCommands: 'fflafl']
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		
	self assert: 0@2 equals: marsRover position.
	self assert: #W equals: marsRover directionSymbol.
		! !

!testRun: #MarsRoverTest #test11 stamp: 'AM 10/24/2020 17:57:24'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/24/2020 17:57:46'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/24/2020 17:57:46'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/24/2020 17:57:46'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'AM 10/24/2020 17:57:46'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/24/2020 17:57:46'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/24/2020 17:57:46'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'AM 10/24/2020 17:57:46'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'AM 10/24/2020 17:57:46'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'AM 10/24/2020 17:57:46'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/24/2020 17:57:46'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'AM 10/24/2020 17:57:46'!
PASSED!

----SNAPSHOT----(24 October 2020 17:58:38) CuisUniversity-4383.image priorSource: 17311099!

----QUIT----(24 October 2020 17:58:41) CuisUniversity-4383.image priorSource: 17346051!

----STARTUP---- (25 October 2020 19:54:44) as C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CuisAct\CuisUniversity-4383.image!

!MarsRover methodsFor: 'testing' stamp: 'AM 10/25/2020 20:09:24' prior: 50873585!
assertValidCommand: aCommandChar

	| validCommands |
	
	validCommands := OrderedCollection with: $f with: $b with: $l with: $r.
	
	validCommands detect: [:validCommand | (aCommandChar = validCommand)] ifNone: [^self signalInvalidCommand].
	
	
		! !

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/25/2020 20:09:39'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'AM 10/25/2020 20:09:42'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/25/2020 20:10:13'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/25/2020 20:10:13'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/25/2020 20:10:13'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'AM 10/25/2020 20:10:13'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/25/2020 20:10:13'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/25/2020 20:10:13'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'AM 10/25/2020 20:10:13'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'AM 10/25/2020 20:10:13'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'AM 10/25/2020 20:10:13'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/25/2020 20:10:13'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'AM 10/25/2020 20:10:13'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:15:32' prior: 50873064!
test02

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 1@1.
	
	self assert: marsRover direction class equals: N. ! !

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/25/2020 20:15:34'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:16:08' prior: 50873159!
test07

	| marsRover |
	
	marsRover := MarsRover facingSouthAtCoordinates: 1@2.
	
	marsRover recieveCommands: 'l'.
	
	self assert: marsRover direction class equals: E. ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:16:18' prior: 50873267!
test08

	| marsRover |
	
	marsRover := MarsRover facingSouthAtCoordinates: 1@2.
	
	marsRover recieveCommands: 'r'.
	
	self assert: marsRover direction class equals: W. ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:16:27' prior: 50873370!
test09

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	marsRover recieveCommands: 'ffrf'.
	
	self assert: marsRover direction class equals: E.
	self assert: marsRover position equals: 1@2.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:16:51' prior: 50873674!
test11

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	self 
		should: [marsRover recieveCommands: 'fflafl']
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		
	self assert: 0@2 equals: marsRover position.
	self assert: marsRover direction class equals: W.
		! !

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/25/2020 20:16:54'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/25/2020 20:16:54'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/25/2020 20:16:54'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'AM 10/25/2020 20:16:54'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/25/2020 20:16:54'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/25/2020 20:16:54'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'AM 10/25/2020 20:16:54'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'AM 10/25/2020 20:16:54'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'AM 10/25/2020 20:16:54'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/25/2020 20:16:54'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'AM 10/25/2020 20:16:54'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:17:10' prior: 50873805!
test11

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	self 
		should: [marsRover recieveCommands: 'fflafl']
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		
	self assert:  marsRover position equals: 0@2.
	self assert: marsRover direction class equals: W.
		! !

!methodRemoval: E #asSymbol stamp: 'AM 10/25/2020 20:17:17'!
asSymbol
	
	^#E.!

!methodRemoval: N #asSymbol stamp: 'AM 10/25/2020 20:17:22'!
asSymbol

	^#N!

!methodRemoval: S #asSymbol stamp: 'AM 10/25/2020 20:17:27'!
asSymbol

	^#S!

!methodRemoval: W #asSymbol stamp: 'AM 10/25/2020 20:17:33'!
asSymbol

	^#W!
!W methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:17:55'!
l

	marsRover turnSouth.! !

!methodRemoval: MarsRover #directionSymbol stamp: 'AM 10/25/2020 20:18:36'!
directionSymbol

	^direction asSymbol. !

!classRenamed: #E as: #East stamp: 'AM 10/25/2020 20:19:20'!
Smalltalk renameClassNamed: #E as: #East!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:19:20' prior: 50873205!
facingEastAtCoordinates: aCoordinate
	
	| aMarsRover |
	
	aMarsRover := MarsRover new.
	
	aMarsRover initializeAtCoordinates: aCoordinate facing: (East for: aMarsRover). 
	
	^aMarsRover.! !
!Float class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:19:20' prior: 50598550!
e
	"Answer the constant, e."

	^East! !
!LayoutMorph class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:19:20' prior: 50359985!
example10
"
	self example10 openInWorld
"
| pane row |
pane _ (LayoutMorph newColumn separation: 5)	name: #example10.
pane color: Color red.

row _ LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color blue); name: #B)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #East)
		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color blue); name: #F)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #G)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BorderedRectMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
^ pane! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:19:20' prior: 50873777!
test07

	| marsRover |
	
	marsRover := MarsRover facingSouthAtCoordinates: 1@2.
	
	marsRover recieveCommands: 'l'.
	
	self assert: marsRover direction class equals: East. ! !
!Float class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:19:20' prior: 50595820 overrides: 50685238!
releaseClassCachedState

	Pi _ nil.
	Halfpi _ nil.
	Twopi _ nil.
	RadiansPerDegree _ nil.

	Ln2 _ nil.
	Ln10 _ nil.
	Sqrt2 _ nil.
	East _ nil.

	MaxVal _ nil.
	MaxValLn _ nil.
	MinValLogBase2 _ nil.

	Infinity _ nil.
	NegativeInfinity _ nil.
	NaN _ nil.
	NegativeZero _ nil! !
!LayoutMorph class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:19:20' prior: 50675119!
example1
"
	self example1
"
| pane row |
pane _ (LayoutMorph newColumn separation: 5)	name: #example1.
pane color: Color red.

row _ LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addMorph: (BorderedRectMorph new color: (Color blue); name: #B)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #East)
		layoutSpec: (LayoutSpec fixedWidth: 200 fixedHeight: 200).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color blue); name: #F)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #G)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BorderedRectMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
pane morphPosition: 150@130 extent: 400@300.
pane openInWorld! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:19:20' prior: 50873187!
turnEast
	
	direction := East for: self.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:19:20' prior: 50873795!
test09

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	marsRover recieveCommands: 'ffrf'.
	
	self assert: marsRover direction class equals: East.
	self assert: marsRover position equals: 1@2.! !
!Float class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:19:20' prior: 50600349 overrides: 16784996!
initClassCachedState
	"Float initialize"
	"Constants from Computer Approximations, pp. 182-183:
		Pi = 3.14159265358979323846264338327950288
		Pi/2 = 1.57079632679489661923132169163975144
		Pi*2 = 6.28318530717958647692528676655900576
		Pi/180 = 0.01745329251994329576923690768488612
		2.0 ln = 0.69314718055994530941723212145817657
		2.0 sqrt = 1.41421356237309504880168872420969808"

	Pi _ 3.14159265358979323846264338327950288.
	Halfpi _ Pi / 2.0.
	Twopi _ Pi * 2.0.
	RadiansPerDegree _ Pi / 180.0.

	Ln2 _ 0.69314718055994530941723212145817657.
	Ln10 _ 10.0 ln.
	Sqrt2 _ 1.41421356237309504880168872420969808.
	East _ 2.718281828459045235360287471353.

	MaxVal _ 1.7976931348623157e308.
	MaxValLn _ 709.782712893384.
	MinValLogBase2 _ -1074.

	Infinity _ MaxVal * MaxVal.
	NegativeInfinity _ 0.0 - Infinity.
	NaN _ Infinity - Infinity.
	NegativeZero _ Float fmin negated nextTowardsZero.
! !
!LayoutMorph class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:19:20' prior: 50360170!
example1b
"
Based on #example1, but using some Morph instead of RectangleLikeMorph -> extent is not adjustable
	self example1b
"
| pane row |
pane _ (LayoutMorph newColumn separation: 5)	name: #example1.
pane color: Color red.

row _ LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addMorph: (Morph new name: #B);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #East)
		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color blue); name: #F)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (Morph new name: #G);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (Morph new name: #J);
	addMorph: (BorderedRectMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BorderedRectMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
pane morphPosition: 150@130 extent: 400@300.
pane openInWorld! !
!LayoutMorph class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:19:20' prior: 50360053!
example11
"
	self example11
"
| pane row |
pane _ (LayoutMorph newColumn separation: 5)	name: #example11.
pane color: Color red.

row _ LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color blue); name: #B)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #East)
		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color blue); name: #F)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #G)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BorderedRectMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
pane morphPosition: 150@130 extent: 400@300.
pane openInWorld! !

!classRenamed: #East as: #FacingEast stamp: 'AM 10/25/2020 20:20:40'!
Smalltalk renameClassNamed: #East as: #FacingEast!
!Float class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:20:40' prior: 50874064 overrides: 16784996!
initClassCachedState
	"Float initialize"
	"Constants from Computer Approximations, pp. 182-183:
		Pi = 3.14159265358979323846264338327950288
		Pi/2 = 1.57079632679489661923132169163975144
		Pi*2 = 6.28318530717958647692528676655900576
		Pi/180 = 0.01745329251994329576923690768488612
		2.0 ln = 0.69314718055994530941723212145817657
		2.0 sqrt = 1.41421356237309504880168872420969808"

	Pi _ 3.14159265358979323846264338327950288.
	Halfpi _ Pi / 2.0.
	Twopi _ Pi * 2.0.
	RadiansPerDegree _ Pi / 180.0.

	Ln2 _ 0.69314718055994530941723212145817657.
	Ln10 _ 10.0 ln.
	Sqrt2 _ 1.41421356237309504880168872420969808.
	FacingEast _ 2.718281828459045235360287471353.

	MaxVal _ 1.7976931348623157e308.
	MaxValLn _ 709.782712893384.
	MinValLogBase2 _ -1074.

	Infinity _ MaxVal * MaxVal.
	NegativeInfinity _ 0.0 - Infinity.
	NaN _ Infinity - Infinity.
	NegativeZero _ Float fmin negated nextTowardsZero.
! !
!LayoutMorph class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:20:40' prior: 50874157!
example11
"
	self example11
"
| pane row |
pane _ (LayoutMorph newColumn separation: 5)	name: #example11.
pane color: Color red.

row _ LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color blue); name: #B)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #FacingEast)
		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color blue); name: #F)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #G)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BorderedRectMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
pane morphPosition: 150@130 extent: 400@300.
pane openInWorld! !
!Float class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:20:40' prior: 50873969 overrides: 50685238!
releaseClassCachedState

	Pi _ nil.
	Halfpi _ nil.
	Twopi _ nil.
	RadiansPerDegree _ nil.

	Ln2 _ nil.
	Ln10 _ nil.
	Sqrt2 _ nil.
	FacingEast _ nil.

	MaxVal _ nil.
	MaxValLn _ nil.
	MinValLogBase2 _ nil.

	Infinity _ nil.
	NegativeInfinity _ nil.
	NaN _ nil.
	NegativeZero _ nil! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:20:40' prior: 50873877!
facingEastAtCoordinates: aCoordinate
	
	| aMarsRover |
	
	aMarsRover := MarsRover new.
	
	aMarsRover initializeAtCoordinates: aCoordinate facing: (FacingEast for: aMarsRover). 
	
	^aMarsRover.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:20:40' prior: 50873959!
test07

	| marsRover |
	
	marsRover := MarsRover facingSouthAtCoordinates: 1@2.
	
	marsRover recieveCommands: 'l'.
	
	self assert: marsRover direction class equals: FacingEast. ! !
!LayoutMorph class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:20:40' prior: 50873981!
example1
"
	self example1
"
| pane row |
pane _ (LayoutMorph newColumn separation: 5)	name: #example1.
pane color: Color red.

row _ LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addMorph: (BorderedRectMorph new color: (Color blue); name: #B)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #FacingEast)
		layoutSpec: (LayoutSpec fixedWidth: 200 fixedHeight: 200).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color blue); name: #F)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #G)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BorderedRectMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
pane morphPosition: 150@130 extent: 400@300.
pane openInWorld! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:20:40' prior: 50874048!
turnEast
	
	direction := FacingEast for: self.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:20:40' prior: 50874053!
test09

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	marsRover recieveCommands: 'ffrf'.
	
	self assert: marsRover direction class equals: FacingEast.
	self assert: marsRover position equals: 1@2.! !
!LayoutMorph class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:20:40' prior: 50873891!
example10
"
	self example10 openInWorld
"
| pane row |
pane _ (LayoutMorph newColumn separation: 5)	name: #example10.
pane color: Color red.

row _ LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color blue); name: #B)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #FacingEast)
		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color blue); name: #F)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #G)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BorderedRectMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
^ pane! !
!Float class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:20:40' prior: 50873886!
e
	"Answer the constant, e."

	^FacingEast! !
!LayoutMorph class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:20:40' prior: 50874096!
example1b
"
Based on #example1, but using some Morph instead of RectangleLikeMorph -> extent is not adjustable
	self example1b
"
| pane row |
pane _ (LayoutMorph newColumn separation: 5)	name: #example1.
pane color: Color red.

row _ LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addMorph: (Morph new name: #B);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #FacingEast)
		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color blue); name: #F)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (Morph new name: #G);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (Morph new name: #J);
	addMorph: (BorderedRectMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BorderedRectMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
pane morphPosition: 150@130 extent: 400@300.
pane openInWorld! !

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/25/2020 20:21:36'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/25/2020 20:21:36'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/25/2020 20:21:36'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'AM 10/25/2020 20:21:36'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/25/2020 20:21:36'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/25/2020 20:21:36'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'AM 10/25/2020 20:21:36'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'AM 10/25/2020 20:21:36'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'AM 10/25/2020 20:21:36'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/25/2020 20:21:36'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'AM 10/25/2020 20:21:36'!
PASSED!

----STARTUP---- (25 October 2020 20:22:38) as C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CuisAct\CuisUniversity-4383.image!


!classRenamed: #E as: #FacingEast stamp: 'AM 10/25/2020 20:24:17'!
Smalltalk renameClassNamed: #E as: #FacingEast!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:24:17' prior: 50873370!
test09

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	marsRover recieveCommands: 'ffrf'.
	
	self assert: marsRover directionSymbol equals: #FacingEast.
	self assert: marsRover position equals: 1@2.! !
!LayoutMorph class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:24:17' prior: 50360170!
example1b
"
Based on #example1, but using some Morph instead of RectangleLikeMorph -> extent is not adjustable
	self example1b
"
| pane row |
pane _ (LayoutMorph newColumn separation: 5)	name: #example1.
pane color: Color red.

row _ LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addMorph: (Morph new name: #B);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #FacingEast)
		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color blue); name: #F)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (Morph new name: #G);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (Morph new name: #J);
	addMorph: (BorderedRectMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BorderedRectMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
pane morphPosition: 150@130 extent: 400@300.
pane openInWorld! !
!LayoutMorph class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:24:17' prior: 50675119!
example1
"
	self example1
"
| pane row |
pane _ (LayoutMorph newColumn separation: 5)	name: #example1.
pane color: Color red.

row _ LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addMorph: (BorderedRectMorph new color: (Color blue); name: #B)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #FacingEast)
		layoutSpec: (LayoutSpec fixedWidth: 200 fixedHeight: 200).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color blue); name: #F)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #G)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BorderedRectMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
pane morphPosition: 150@130 extent: 400@300.
pane openInWorld! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:24:17' prior: 50873205!
facingEastAtCoordinates: aCoordinate
	
	| aMarsRover |
	
	aMarsRover := MarsRover new.
	
	aMarsRover initializeAtCoordinates: aCoordinate facing: (FacingEast for: aMarsRover). 
	
	^aMarsRover.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:24:17' prior: 50873187!
turnEast
	
	direction := FacingEast for: self.! !
!LayoutMorph class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:24:17' prior: 50359985!
example10
"
	self example10 openInWorld
"
| pane row |
pane _ (LayoutMorph newColumn separation: 5)	name: #example10.
pane color: Color red.

row _ LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color blue); name: #B)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #FacingEast)
		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color blue); name: #F)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #G)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BorderedRectMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
^ pane! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:24:17' prior: 50873159!
test07

	| marsRover |
	
	marsRover := MarsRover facingSouthAtCoordinates: 1@2.
	
	marsRover recieveCommands: 'l'.
	
	self assert: marsRover directionSymbol equals: #FacingEast. ! !
!Float class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:24:17' prior: 50595820 overrides: 50685238!
releaseClassCachedState

	Pi _ nil.
	Halfpi _ nil.
	Twopi _ nil.
	RadiansPerDegree _ nil.

	Ln2 _ nil.
	Ln10 _ nil.
	Sqrt2 _ nil.
	FacingEast _ nil.

	MaxVal _ nil.
	MaxValLn _ nil.
	MinValLogBase2 _ nil.

	Infinity _ nil.
	NegativeInfinity _ nil.
	NaN _ nil.
	NegativeZero _ nil! !
!Float class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:24:17' prior: 50598550!
e
	"Answer the constant, e."

	^FacingEast! !
!LayoutMorph class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:24:17' prior: 50360053!
example11
"
	self example11
"
| pane row |
pane _ (LayoutMorph newColumn separation: 5)	name: #example11.
pane color: Color red.

row _ LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color blue); name: #B)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #FacingEast)
		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color blue); name: #F)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #G)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BorderedRectMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
pane morphPosition: 150@130 extent: 400@300.
pane openInWorld! !
!FacingEast methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:24:17' prior: 50873197!
asSymbol
	
	^#FacingEast.! !
!Float class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:24:17' prior: 50600349 overrides: 16784996!
initClassCachedState
	"Float initialize"
	"Constants from Computer Approximations, pp. 182-183:
		Pi = 3.14159265358979323846264338327950288
		Pi/2 = 1.57079632679489661923132169163975144
		Pi*2 = 6.28318530717958647692528676655900576
		Pi/180 = 0.01745329251994329576923690768488612
		2.0 ln = 0.69314718055994530941723212145817657
		2.0 sqrt = 1.41421356237309504880168872420969808"

	Pi _ 3.14159265358979323846264338327950288.
	Halfpi _ Pi / 2.0.
	Twopi _ Pi * 2.0.
	RadiansPerDegree _ Pi / 180.0.

	Ln2 _ 0.69314718055994530941723212145817657.
	Ln10 _ 10.0 ln.
	Sqrt2 _ 1.41421356237309504880168872420969808.
	FacingEast _ 2.718281828459045235360287471353.

	MaxVal _ 1.7976931348623157e308.
	MaxValLn _ 709.782712893384.
	MinValLogBase2 _ -1074.

	Infinity _ MaxVal * MaxVal.
	NegativeInfinity _ 0.0 - Infinity.
	NaN _ Infinity - Infinity.
	NegativeZero _ Float fmin negated nextTowardsZero.
! !

!classRenamed: #N as: #FacingNorth stamp: 'AM 10/25/2020 20:24:33'!
Smalltalk renameClassNamed: #N as: #FacingNorth!
!Character class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:24:33' prior: 50686615!
namedCharactersTable
	"Table of named characters that we can enter in an editor using \name.
	Please keep the names short and try to follow the naming convention used in LaTeX."
	^ #((left $) (right $) (up $) (down $) (oplus $�) (otimes $�) (times $�) (div $�) #(circ $�) (dot $�) (bullet $�) (diamond $�) (star $�) (alpha $�) (beta $�) (gamma $�) (delta $�) (epsilon $�) (lambda $�) (mu $�) (pi $�) (zeta $�) (Delta $�) (Gamma $�) (Omega $�) (N $�) (Z $�) (Q $�) (R $�) (C $�) (P $�) (infty $�) (aleph $�) (sqrt $�) (partial $�) (degree $�))! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:24:33' prior: 50873341!
turnNorth
	
	direction := FacingNorth for: self.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:24:33' prior: 50873064!
test02

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 1@1.
	
	self assert: marsRover directionSymbol equals: #FacingNorth. ! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:24:33' prior: 50872854!
facingNorthAtCoordinates: aCoordinate
	
	| aMarsRover |
	
	aMarsRover := MarsRover new.
	
	aMarsRover initializeAtCoordinates: aCoordinate facing: (FacingNorth for: aMarsRover). 
	
	^aMarsRover.! !
!FacingNorth methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:24:33' prior: 50873055!
asSymbol

	^#FacingNorth! !

!classRenamed: #S as: #FacingSouth stamp: 'AM 10/25/2020 20:24:48'!
Smalltalk renameClassNamed: #S as: #FacingSouth!
!FacingSouth methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:24:48' prior: 50873155!
asSymbol

	^#FacingSouth! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:24:48' prior: 50873122!
facingSouthAtCoordinates: aCoordinate
	
	| aMarsRover |
	
	aMarsRover := MarsRover new.
	
	aMarsRover initializeAtCoordinates: aCoordinate facing: (FacingSouth for: aMarsRover). 
	
	^aMarsRover.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:24:48' prior: 50873345!
turnSouth
	
	direction := FacingSouth for: self.! !

!classRenamed: #W as: #FacingWest stamp: 'AM 10/25/2020 20:24:57'!
Smalltalk renameClassNamed: #W as: #FacingWest!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:24:57' prior: 50873674!
test11

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	self 
		should: [marsRover recieveCommands: 'fflafl']
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		
	self assert: 0@2 equals: marsRover position.
	self assert: #FacingWest equals: marsRover directionSymbol.
		! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:24:57' prior: 50873214!
facingWestAtCoordinates: aCoordinate
	
	| aMarsRover |
	
	aMarsRover := MarsRover new.
	
	aMarsRover initializeAtCoordinates: aCoordinate facing: (FacingWest for: aMarsRover). 
	
	^aMarsRover.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:24:57' prior: 50873292!
turnWest
	
	direction := FacingWest for: self.! !
!FacingWest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:24:57' prior: 50873254!
asSymbol

	^#FacingWest! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:24:57' prior: 50873267!
test08

	| marsRover |
	
	marsRover := MarsRover facingSouthAtCoordinates: 1@2.
	
	marsRover recieveCommands: 'r'.
	
	self assert: marsRover directionSymbol equals: #FacingWest. ! !

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/25/2020 20:25:15'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/25/2020 20:25:15'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/25/2020 20:25:15'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'AM 10/25/2020 20:25:15'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/25/2020 20:25:15'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/25/2020 20:25:15'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'AM 10/25/2020 20:25:15'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'AM 10/25/2020 20:25:15'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'AM 10/25/2020 20:25:15'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/25/2020 20:25:15'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'AM 10/25/2020 20:25:15'!
PASSED!
!MarsRover methodsFor: 'testing' stamp: 'AM 10/25/2020 20:27:06' prior: 50873585!
assertValidCommand: aCommandChar

	| validCommands |
	
	validCommands := OrderedCollection with: $f with: $b with: $l with: $r.
	
	validCommands detect: [:validCommand | (validCommand = aCommandChar)] ifNone: [^self signalInvalidCommand].
	
		! !

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/25/2020 20:27:11'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/25/2020 20:27:11'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/25/2020 20:27:11'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'AM 10/25/2020 20:27:11'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/25/2020 20:27:11'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/25/2020 20:27:11'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'AM 10/25/2020 20:27:11'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'AM 10/25/2020 20:27:11'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'AM 10/25/2020 20:27:11'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/25/2020 20:27:11'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'AM 10/25/2020 20:27:12'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:27:25' prior: 50874116!
test02

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 1@1.
	
	self assert: marsRover direction class equals: FacingNorth. ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:27:39' prior: 50873953!
test07

	| marsRover |
	
	marsRover := MarsRover facingSouthAtCoordinates: 1@2.
	
	marsRover recieveCommands: 'l'.
	
	self assert: marsRover direction equals: FacingEast. ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:27:47' prior: 50874198!
test08

	| marsRover |
	
	marsRover := MarsRover facingSouthAtCoordinates: 1@2.
	
	marsRover recieveCommands: 'r'.
	
	self assert: marsRover direction class equals: FacingWest. ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:27:52' prior: 50874278!
test07

	| marsRover |
	
	marsRover := MarsRover facingSouthAtCoordinates: 1@2.
	
	marsRover recieveCommands: 'l'.
	
	self assert: marsRover direction class equals: FacingEast. ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:28:03' prior: 50873729!
test09

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	marsRover recieveCommands: 'ffrf'.
	
	self assert: marsRover direction class equals: #FacingEast.
	self assert: marsRover position equals: 1@2.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:28:05' prior: 50874305!
test09

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	marsRover recieveCommands: 'ffrf'.
	
	self assert: marsRover direction class equals: FacingEast.
	self assert: marsRover position equals: 1@2.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:28:35' prior: 50874165!
test11

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	self 
		should: [marsRover recieveCommands: 'fflafl']
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		
	self assert: 0@2 equals: marsRover position.
	self assert: marsRover direction class equals: FacingWest .
		! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:28:36' prior: 50874327!
test11

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	self 
		should: [marsRover recieveCommands: 'fflafl']
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		
	self assert: 0@2 equals: marsRover position.
	self assert: marsRover direction class equals: FacingWest.
		! !

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/25/2020 20:28:38'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/25/2020 20:28:38'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/25/2020 20:28:38'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'AM 10/25/2020 20:28:38'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/25/2020 20:28:38'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/25/2020 20:28:38'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'AM 10/25/2020 20:28:38'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'AM 10/25/2020 20:28:38'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'AM 10/25/2020 20:28:38'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/25/2020 20:28:38'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'AM 10/25/2020 20:28:38'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:29:22' prior: 50869439!
test01

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 1@1.
	
	self assert: marsRover position equals: 1@1. ! !

!methodRemoval: MarsRover class #atCoordinates: stamp: 'AM 10/25/2020 20:29:46'!
atCoordinates: aPoint 

	^self new initializeAtCoordinates: aPoint.!

!methodRemoval: MarsRover #initializeAtCoordinates: stamp: 'AM 10/25/2020 20:29:54'!
initializeAtCoordinates: aPoint 

	position := aPoint.!

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/25/2020 20:29:57'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/25/2020 20:29:57'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/25/2020 20:29:57'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'AM 10/25/2020 20:29:57'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/25/2020 20:29:57'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/25/2020 20:29:57'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'AM 10/25/2020 20:29:57'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'AM 10/25/2020 20:29:57'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'AM 10/25/2020 20:29:57'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/25/2020 20:29:57'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'AM 10/25/2020 20:29:57'!
PASSED!

!methodRemoval: MarsRoverTest #test04 stamp: 'AM 10/25/2020 20:31:35'!
test04

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 1@2.
	
	marsRover recieveCommands: 'f'.
	
	self assert: marsRover position equals: 1@3. !

!methodRemoval: MarsRoverTest #test06 stamp: 'AM 10/25/2020 20:31:39'!
test06

	| marsRover |
	
	marsRover := MarsRover facingSouthAtCoordinates: 1@2.
	
	marsRover recieveCommands: 'f'.
	
	self assert: marsRover position equals: 1@1. !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:32:47'!
test12

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	self 
		should: [marsRover recieveCommands: 'fflafl']
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		
	self assert: 0@2 equals: marsRover position.
	self assert: marsRover direction class equals: FacingWest.
		! !

!methodRemoval: MarsRoverTest #test11 stamp: 'AM 10/25/2020 20:32:47'!
test11

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	self 
		should: [marsRover recieveCommands: 'fflafl']
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		
	self assert: 0@2 equals: marsRover position.
	self assert: marsRover direction class equals: FacingWest.
		!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:32:56'!
test11

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	self 
		should: [marsRover recieveCommands: 'a']
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		! !

!methodRemoval: MarsRoverTest #test10 stamp: 'AM 10/25/2020 20:32:56'!
test10

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	self 
		should: [marsRover recieveCommands: 'a']
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:33:04'!
test10

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	marsRover recieveCommands: 'ffrf'.
	
	self assert: marsRover direction class equals: FacingEast.
	self assert: marsRover position equals: 1@2.! !

!methodRemoval: MarsRoverTest #test09 stamp: 'AM 10/25/2020 20:33:04'!
test09

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	marsRover recieveCommands: 'ffrf'.
	
	self assert: marsRover direction class equals: FacingEast.
	self assert: marsRover position equals: 1@2.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:34:28'!
test09

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 1@1.
	
	marsRover recieveCommands: 'fbb'.
	
	self assert: marsRover position equals: 1@0. ! !

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/25/2020 20:34:32'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/25/2020 20:34:32'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/25/2020 20:34:32'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/25/2020 20:34:32'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'AM 10/25/2020 20:34:32'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'AM 10/25/2020 20:34:32'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'AM 10/25/2020 20:34:32'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/25/2020 20:34:32'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'AM 10/25/2020 20:34:32'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'AM 10/25/2020 20:34:32'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:35:04' prior: 50874503!
test09

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 1@1.
	
	marsRover recieveCommands: 'fbb'.
	
	self assert: marsRover direction class equals: FacingNorth. ! !

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/25/2020 20:35:09'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/25/2020 20:35:09'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/25/2020 20:35:09'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/25/2020 20:35:09'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'AM 10/25/2020 20:35:09'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'AM 10/25/2020 20:35:09'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'AM 10/25/2020 20:35:09'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/25/2020 20:35:09'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'AM 10/25/2020 20:35:09'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'AM 10/25/2020 20:35:09'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:37:16'!
test06

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 1@2.
	
	marsRover recieveCommands: 'llr'.
	
	self assert: marsRover position equals: 1@2. ! !

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/25/2020 20:37:19'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/25/2020 20:37:19'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/25/2020 20:37:19'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/25/2020 20:37:19'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/25/2020 20:37:19'!
ERROR!

!testRun: #MarsRoverTest #test07 stamp: 'AM 10/25/2020 20:37:19'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'AM 10/25/2020 20:37:19'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'AM 10/25/2020 20:37:19'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/25/2020 20:37:20'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'AM 10/25/2020 20:37:20'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'AM 10/25/2020 20:37:20'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/25/2020 20:37:20'!
ERROR!
!FacingWest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:37:36'!
l

	marsRover turnSouth.! !

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/25/2020 20:37:39'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/25/2020 20:37:39'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/25/2020 20:37:39'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/25/2020 20:37:39'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/25/2020 20:37:39'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'AM 10/25/2020 20:37:39'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'AM 10/25/2020 20:37:39'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'AM 10/25/2020 20:37:39'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/25/2020 20:37:39'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'AM 10/25/2020 20:37:39'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'AM 10/25/2020 20:37:39'!
PASSED!

!methodRemoval: FacingEast #asSymbol stamp: 'AM 10/25/2020 20:38:44'!
asSymbol
	
	^#FacingEast.!

!methodRemoval: FacingNorth #asSymbol stamp: 'AM 10/25/2020 20:38:49'!
asSymbol

	^#FacingNorth!

!methodRemoval: FacingSouth #asSymbol stamp: 'AM 10/25/2020 20:38:53'!
asSymbol

	^#FacingSouth!

!methodRemoval: FacingWest #asSymbol stamp: 'AM 10/25/2020 20:38:58'!
asSymbol

	^#FacingWest!

!methodRemoval: MarsRover #directionSymbol stamp: 'AM 10/25/2020 20:39:09'!
directionSymbol

	^direction asSymbol. !

!testRun: #MarsRoverTest #test01 stamp: 'AM 10/25/2020 20:40:10'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/25/2020 20:40:10'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/25/2020 20:40:10'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/25/2020 20:40:10'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/25/2020 20:40:10'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'AM 10/25/2020 20:40:10'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'AM 10/25/2020 20:40:10'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'AM 10/25/2020 20:40:10'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/25/2020 20:40:10'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'AM 10/25/2020 20:40:10'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'AM 10/25/2020 20:40:10'!
PASSED!
!MarsRoverDirection methodsFor: 'direction actions' stamp: 'AM 10/25/2020 20:42:05'!
l

	self subclassResponsibility.! !
!MarsRoverDirection methodsFor: 'direction actions' stamp: 'AM 10/25/2020 20:42:12'!
r

	self subclassResponsibility.! !
!MarsRoverDirection methodsFor: 'position actions' stamp: 'AM 10/25/2020 20:42:37'!
f

	self subclassResponsibility.! !
!MarsRoverDirection methodsFor: 'position actions' stamp: 'AM 10/25/2020 20:42:41'!
b

	self subclassResponsibility.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:45:45'!
test01InitializesPositionCorrectly

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 1@1.
	
	self assert: marsRover position equals: 1@1. ! !

!methodRemoval: MarsRoverTest #test01InitializesPositionCorrectly stamp: 'AM 10/25/2020 20:45:51'!
test01InitializesPositionCorrectly

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 1@1.
	
	self assert: marsRover position equals: 1@1. !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:46:13'!
test01InitializesPositionCorrectly

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 1@1.
	
	self assert: marsRover position equals: 1@1. ! !

!methodRemoval: MarsRoverTest #test01 stamp: 'AM 10/25/2020 20:46:14'!
test01

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 1@1.
	
	self assert: marsRover position equals: 1@1. !

!testRun: #MarsRoverTest #test01InitializesPositionCorrectly stamp: 'AM 10/25/2020 20:46:20'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AM 10/25/2020 20:46:20'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'AM 10/25/2020 20:46:20'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'AM 10/25/2020 20:46:20'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'AM 10/25/2020 20:46:20'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'AM 10/25/2020 20:46:20'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'AM 10/25/2020 20:46:20'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'AM 10/25/2020 20:46:20'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'AM 10/25/2020 20:46:20'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'AM 10/25/2020 20:46:20'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'AM 10/25/2020 20:46:20'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:46:55'!
test02InitializesDirectionCorrectly

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 1@1.
	
	self assert: marsRover direction class equals: FacingNorth. ! !

!methodRemoval: MarsRoverTest #test02 stamp: 'AM 10/25/2020 20:46:55'!
test02

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 1@1.
	
	self assert: marsRover direction class equals: FacingNorth. !
!FacingWest methodsFor: 'position actions' stamp: 'AM 10/25/2020 20:48:31' prior: 50873337 overrides: 50874686!
b

	marsRover xCoordinatePlusOne.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:49:30'!
test03fCommandChangesPositionCorrectly

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 1@1.
	
	marsRover recieveCommands: 'f'.
	
	self assert: marsRover position equals: 1@2. ! !

!methodRemoval: MarsRoverTest #test03 stamp: 'AM 10/25/2020 20:49:30'!
test03

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 1@1.
	
	marsRover recieveCommands: 'f'.
	
	self assert: marsRover position equals: 1@2. !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:50:11'!
test04bCommandChangesPositionCorrectly

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 1@2.
	
	marsRover recieveCommands: 'b'.
	
	self assert: marsRover position equals: 1@1. ! !

!methodRemoval: MarsRoverTest #test05 stamp: 'AM 10/25/2020 20:50:11'!
test05

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 1@2.
	
	marsRover recieveCommands: 'b'.
	
	self assert: marsRover position equals: 1@1. !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:51:17'!
test05lCommandChangesDirectionCorrectly

	| marsRover |
	
	marsRover := MarsRover facingSouthAtCoordinates: 1@2.
	
	marsRover recieveCommands: 'l'.
	
	self assert: marsRover direction class equals: FacingEast. ! !

!methodRemoval: MarsRoverTest #test07 stamp: 'AM 10/25/2020 20:51:17'!
test07

	| marsRover |
	
	marsRover := MarsRover facingSouthAtCoordinates: 1@2.
	
	marsRover recieveCommands: 'l'.
	
	self assert: marsRover direction class equals: FacingEast. !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:51:41'!
test06rCommandChangesDirectionCorrectly

	| marsRover |
	
	marsRover := MarsRover facingSouthAtCoordinates: 1@2.
	
	marsRover recieveCommands: 'r'.
	
	self assert: marsRover direction class equals: FacingWest. ! !

!methodRemoval: MarsRoverTest #test08 stamp: 'AM 10/25/2020 20:51:41'!
test08

	| marsRover |
	
	marsRover := MarsRover facingSouthAtCoordinates: 1@2.
	
	marsRover recieveCommands: 'r'.
	
	self assert: marsRover direction class equals: FacingWest. !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:52:14'!
test07DirectionChangesDoNotChangePosition

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 1@2.
	
	marsRover recieveCommands: 'llr'.
	
	self assert: marsRover position equals: 1@2. ! !

!methodRemoval: MarsRoverTest #test06 stamp: 'AM 10/25/2020 20:52:14'!
test06

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 1@2.
	
	marsRover recieveCommands: 'llr'.
	
	self assert: marsRover position equals: 1@2. !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:52:44'!
test08PositionChangesDoNotChangeDirection

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 1@1.
	
	marsRover recieveCommands: 'fbb'.
	
	self assert: marsRover direction class equals: FacingNorth. ! !

!methodRemoval: MarsRoverTest #test09 stamp: 'AM 10/25/2020 20:52:44'!
test09

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 1@1.
	
	marsRover recieveCommands: 'fbb'.
	
	self assert: marsRover direction class equals: FacingNorth. !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:54:02'!
test09PositionChangesCorrectlyAfterDirectionChange

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	marsRover recieveCommands: 'ffrf'.
	
	self assert: marsRover direction class equals: FacingEast.
	self assert: marsRover position equals: 1@2.! !

!methodRemoval: MarsRoverTest #test10 stamp: 'AM 10/25/2020 20:54:02'!
test10

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	marsRover recieveCommands: 'ffrf'.
	
	self assert: marsRover direction class equals: FacingEast.
	self assert: marsRover position equals: 1@2.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:54:36'!
test10InvalidCommandsSignalError

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	self 
		should: [marsRover recieveCommands: 'a']
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		! !

!methodRemoval: MarsRoverTest #test11 stamp: 'AM 10/25/2020 20:54:36'!
test11

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	self 
		should: [marsRover recieveCommands: 'a']
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 10/25/2020 20:55:17'!
test11CommandsAfterInvalidCommandAreNotExecuted

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	self 
		should: [marsRover recieveCommands: 'fflafl']
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		
	self assert: 0@2 equals: marsRover position.
	self assert: marsRover direction class equals: FacingWest.
		! !

!methodRemoval: MarsRoverTest #test12 stamp: 'AM 10/25/2020 20:55:18'!
test12

	| marsRover |
	
	marsRover := MarsRover facingNorthAtCoordinates: 0@0.
	
	self 
		should: [marsRover recieveCommands: 'fflafl']
		raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.
		
	self assert: 0@2 equals: marsRover position.
	self assert: marsRover direction class equals: FacingWest.
		!

!testRun: #MarsRoverTest #test01InitializesPositionCorrectly stamp: 'AM 10/25/2020 20:55:20'!
PASSED!

!testRun: #MarsRoverTest #test02InitializesDirectionCorrectly stamp: 'AM 10/25/2020 20:55:20'!
PASSED!

!testRun: #MarsRoverTest #test03fCommandChangesPositionCorrectly stamp: 'AM 10/25/2020 20:55:20'!
PASSED!

!testRun: #MarsRoverTest #test04bCommandChangesPositionCorrectly stamp: 'AM 10/25/2020 20:55:20'!
PASSED!

!testRun: #MarsRoverTest #test05lCommandChangesDirectionCorrectly stamp: 'AM 10/25/2020 20:55:20'!
PASSED!

!testRun: #MarsRoverTest #test06rCommandChangesDirectionCorrectly stamp: 'AM 10/25/2020 20:55:20'!
PASSED!

!testRun: #MarsRoverTest #test07DirectionChangesDoNotChangePosition stamp: 'AM 10/25/2020 20:55:20'!
PASSED!

!testRun: #MarsRoverTest #test08PositionChangesDoNotChangeDirection stamp: 'AM 10/25/2020 20:55:20'!
PASSED!

!testRun: #MarsRoverTest #test09PositionChangesCorrectlyAfterDirectionChange stamp: 'AM 10/25/2020 20:55:20'!
PASSED!

!testRun: #MarsRoverTest #test10InvalidCommandsSignalError stamp: 'AM 10/25/2020 20:55:20'!
PASSED!

!testRun: #MarsRoverTest #test11CommandsAfterInvalidCommandAreNotExecuted stamp: 'AM 10/25/2020 20:55:20'!
PASSED!