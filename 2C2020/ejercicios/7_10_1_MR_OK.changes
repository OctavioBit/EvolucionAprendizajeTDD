

Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRover category: #'MarsRover-Exercise' stamp: 'ja 10/25/2020 09:54:49'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRoverTest category: #'MarsRover-Exercise' stamp: 'ja 10/25/2020 09:55:09'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRover category: #'MarsRover-Exercise' stamp: 'ja 10/25/2020 09:56:01'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRoverTest methodsFor: 'no messages' stamp: 'ja 10/25/2020 09:56:55'!
test01! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:01:54' prior: 50939194!
test01
	
	| marsRover |
	
	marsRover _ MarsRover ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:01:57' prior: 50939198!
test01
	
	| marsRover |
	
	marsRover _ MarsRover new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:03:47' prior: 50939203!
test01
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:07:04' prior: 50939208!
test01
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isInDirection: #North).! !

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 10:08:32'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 10:10:21'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 10:10:21'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 10:11:12'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 10:11:12'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 10:11:50'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 10:11:50'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 10:11:59'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 10:11:59'!
ERROR!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:12:24'!
inPosition: aPoint andDirection: aSymbol 
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:13:53' prior: 50939244!
inPosition: aPosition andDirection: aDirection 

	^ self new initializeInPosition: aPosition andDirection: aDirection .! !

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 10:14:02'!
ERROR!
!MarsRover methodsFor: 'initialization' stamp: 'ja 10/25/2020 10:14:18'!
initializeInPosition: aPosition andDirection: aDirection 
	self shouldBeImplemented.
	position := aPosition.
	direction := aDirection.! !
!MarsRover methodsFor: 'initialization' stamp: 'ja 10/25/2020 10:14:29' prior: 50939259!
initializeInPosition: aPosition andDirection: aDirection 
	
	position := aPosition.
	direction := aDirection.! !

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 10:14:32'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:14:44'!
isInPosition: aPoint 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:14:54' prior: 50939276!
isInPosition: aPoint 
	
	^true! !

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 10:15:02'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:15:13'!
isInDirection: aSymbol 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:15:23' prior: 50939287!
isInDirection: aSymbol 
	
	^true .! !

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 10:15:25'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 10:15:47'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:19:50'!
test02
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:26:27' prior: 50939301!
test02
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	marsRover move: 'f'.
	
	self assert: (marsRover isInPosition: (0@1)).
	! !

!testRun: #MarsRoverTest #test02 stamp: 'ja 10/25/2020 10:26:39'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'ja 10/25/2020 10:26:39'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:26:59'!
move: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:27:40' prior: 50939321!
move: comands
 
	^(0@1).! !

!testRun: #MarsRoverTest #test02 stamp: 'ja 10/25/2020 10:27:44'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 10/25/2020 10:27:51'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:30:24' prior: 50939308!
test02
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	marsRover move: 'f'.
	
	self assert: (marsRover isInPosition: (0@1)).
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:31:06' prior: 50939335!
test02
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	marsRover move: 'f'.
	
	self assert: (marsRover isInPosition: (0@1)).
	self assert: (marsRover isInDirection: #North).
	
	! !

!testRun: #MarsRoverTest #test02 stamp: 'ja 10/25/2020 10:31:08'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:34:17'!
test03
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	marsRover move: 'r'.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isInDirection: #East).
	
	! !

!testRun: #MarsRoverTest #test03 stamp: 'ja 10/25/2020 10:34:27'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:37:06'!
test04
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	marsRover move: 'r'.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isInDirection: #East).
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:37:17' prior: 50939356!
test03
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	marsRover move: 'r'.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isInDirection: #East).
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:37:50' prior: 50939378!
test03
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	marsRover move: 'rf'.
	
	self assert: (marsRover isInPosition: (1@0)).
	self assert: (marsRover isInDirection: #East).
	
	! !

!testRun: #MarsRoverTest #test03 stamp: 'ja 10/25/2020 10:37:54'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:38:56' prior: 50939326!
move: comands
 
	position _ (0@1).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:39:09' prior: 50939281!
isInPosition: aPosition 
	
	^true! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:39:24' prior: 50939292!
isInDirection: aDirection 
	
	^true .! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:39:39' prior: 50939411!
isInDirection: aDirection 
	
	^ direction = aDirection .! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:39:57' prior: 50939406!
isInPosition: aPosition 
	
	^position = aPosition .! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:40:06' prior: 50939401!
move: comands
 
	position _ (0@1).
	! !

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 10:40:10'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 10/25/2020 10:40:12'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ja 10/25/2020 10:40:14'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'ja 10/25/2020 10:40:14'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'ja 10/25/2020 10:40:20'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'ja 10/25/2020 10:40:20'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:40:38'!
test05
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	marsRover move: 'rf'.
	
	self assert: (marsRover isInPosition: (1@0)).
	self assert: (marsRover isInDirection: #East).
	
	! !

!methodRemoval: MarsRoverTest #test03 stamp: 'ja 10/25/2020 10:41:01'!
test03
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	marsRover move: 'rf'.
	
	self assert: (marsRover isInPosition: (1@0)).
	self assert: (marsRover isInDirection: #East).
	
	!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:41:07'!
test03
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	marsRover move: 'r'.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isInDirection: #East).
	
	! !

!methodRemoval: MarsRoverTest #test04 stamp: 'ja 10/25/2020 10:41:13'!
test04
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	marsRover move: 'r'.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isInDirection: #East).
	
	!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:41:18'!
test04
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	marsRover move: 'rf'.
	
	self assert: (marsRover isInPosition: (1@0)).
	self assert: (marsRover isInDirection: #East).
	
	! !

!methodRemoval: MarsRoverTest #test05 stamp: 'ja 10/25/2020 10:41:22'!
test05
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	marsRover move: 'rf'.
	
	self assert: (marsRover isInPosition: (1@0)).
	self assert: (marsRover isInDirection: #East).
	
	!

!testRun: #MarsRoverTest #test03 stamp: 'ja 10/25/2020 10:41:29'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'ja 10/25/2020 10:41:29'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'ja 10/25/2020 10:43:16'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'ja 10/25/2020 10:43:16'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'ja 10/25/2020 10:44:42'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'ja 10/25/2020 10:44:42'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:46:39' prior: 50939426!
move: comands
 
	comands = 'r' ifTrue:[ direction _ #East ].
	position _ (0@1)! !

!testRun: #MarsRoverTest #test03 stamp: 'ja 10/25/2020 10:46:43'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:47:21' prior: 50939515!
move: comands
 
	comands = 'r' ifTrue:[ direction _ #East ]
				ifFalse:[ position _ (0@1)].! !

!testRun: #MarsRoverTest #test03 stamp: 'ja 10/25/2020 10:47:26'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ja 10/25/2020 10:49:37'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'ja 10/25/2020 10:49:37'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 10:49:42'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 10/25/2020 10:49:44'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ja 10/25/2020 10:49:45'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ja 10/25/2020 10:49:47'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'ja 10/25/2020 10:49:47'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:51:39'!
test07
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	marsRover move: 'rf'.
	
	self assert: (marsRover isInPosition: (1@0)).
	self assert: (marsRover isInDirection: #East).
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:52:20' prior: 50939482!
test04
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	marsRover move: 'w'.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isInDirection: #West).
	
	! !

!testRun: #MarsRoverTest #test04 stamp: 'ja 10/25/2020 10:52:31'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'ja 10/25/2020 10:52:31'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:54:14' prior: 50939523!
move: comands
 
	comands = 'r' ifTrue:[ direction _ #East ]
			       ifFalse:[ comands = 'w' ifTrue: [ direction _ #West ]
								   ifFalse:[ position _ (0@1)]].! !

!testRun: #MarsRoverTest #test04 stamp: 'ja 10/25/2020 10:54:18'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 10:54:29'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 10/25/2020 10:54:30'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ja 10/25/2020 10:54:31'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ja 10/25/2020 10:54:32'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:55:18' prior: 50939558!
test04
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	marsRover move: 'b'.
	
	self assert: (marsRover isInPosition: (0@-1)).
	self assert: (marsRover isInDirection: #North).
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:52:20' prior: 50939594!
test04
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	marsRover move: 'w'.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isInDirection: #West).
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:52:20' prior: 50939604!
test04
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	marsRover move: 'w'.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isInDirection: #West).
	
	! !

!testRun: #MarsRoverTest #test04 stamp: 'ja 10/25/2020 10:56:25'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 10:56:36'!
test05
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	marsRover move: 'b'.
	
	self assert: (marsRover isInPosition: (0@-1)).
	self assert: (marsRover isInDirection: #North).
	
	! !

!testRun: #MarsRoverTest #test05 stamp: 'ja 10/25/2020 10:56:40'!
FAILURE!

!testRun: #MarsRoverTest #test05 stamp: 'ja 10/25/2020 10:56:40'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:00:54' prior: 50939573!
move: comands
 
	comands = 'r' ifTrue:[ direction _ #East ]
			       ifFalse:[ comands = 'w' ifTrue: [ direction _ #West ]
								    ifFalse: [ comands = 'b' ifTrue: [ position _ position x @ (position y - 1) .
															direction _ #Backwards]
													  ifFalse:[ position _ (position x @ (position y + 1))]]].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:01:43' prior: 50939641!
move: comands
 
	comands = 'r' ifTrue:[ direction _ #East ]
			       ifFalse:[ comands = 'w' ifTrue: [ direction _ #West ]
								    ifFalse: [ comands = 'b' ifTrue: [ position _ position x @ (position y - 1) ]
													  ifFalse:[ position _ (position x @ (position y + 1))]]].! !

!testRun: #MarsRoverTest #test05 stamp: 'ja 10/25/2020 11:01:45'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ja 10/25/2020 11:01:48'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:04:14' prior: 50939548!
test07
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	marsRover move: 'javascript'.
	
	self assert: (marsRover isInPosition: (1@0)).
	self assert: (marsRover isInDirection: #East).
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:04:37'!
test06
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	marsRover move: 'frr'.
	
	self assert: (marsRover isInPosition: (1@0)).
	self assert: (marsRover isInDirection: #East).
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:06:29' prior: 50939682!
test06
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	marsRover move: 'frr'.
	
	self assert: (marsRover isInPosition: (1@0)).
	self assert: (marsRover isInDirection: #South).
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:07:39' prior: 50939672!
test07
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	
	self should:  [marsRover move: 'javascript'.] 
		raise:  Error
		description: ['No podemos hacer eso rey']
	
	
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:07:53' prior: 50939702!
test07
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	
	self should:  [marsRover move: 'javascript'.] 
		raise:  Error
		description: ['No puedo hacer eso rey']
	
	
	
	! !

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 11:09:12'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 11:09:12'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 11:09:19'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 10/25/2020 11:09:20'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ja 10/25/2020 11:09:21'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ja 10/25/2020 11:09:22'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ja 10/25/2020 11:09:23'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 11:09:25'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 11:09:25'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 11:26:17'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 11:26:17'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:31:56' prior: 50939655!
move: comands
 
	comands = 'r' ifTrue:[ direction _ #East ]
			       ifFalse:[ comands = 'w' ifTrue: [ direction _ #West ]
								    ifFalse: [ comands = 'b' ifTrue: [ position _ position x @ (position y - 1) ]
													  ifFalse:[ position _ (position x @ (position y + 1))]]].
											
	"comands do:[:comand | ]"! !

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 11:32:01'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ja 10/25/2020 11:32:03'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 10/25/2020 11:32:05'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 11:32:07'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:37:09' prior: 50939214!
test01
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isInDirection: #North).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:37:36' prior: 50939771!
test01
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isInDirection: #North).! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:38:10'!
inPosition: aPosition andCardinalPoint: aDirection 

	^ self new initializeInPosition: aPosition andCardinalPoint: aDirection .! !
!MarsRover methodsFor: 'initialization' stamp: 'ja 10/25/2020 11:38:21'!
initializeInPosition: aPosition andCardinalPoint: aDirection 
	
	position := aPosition.
	direction := aDirection.! !

!methodRemoval: MarsRover #initializeInPosition:andDirection: stamp: 'ja 10/25/2020 11:38:28'!
initializeInPosition: aPosition andDirection: aDirection 
	
	position := aPosition.
	direction := aDirection.!

!methodRemoval: MarsRover class #inPosition:andDirection: stamp: 'ja 10/25/2020 11:38:32'!
inPosition: aPosition andDirection: aDirection 

	^ self new initializeInPosition: aPosition andDirection: aDirection .!
!MarsRover methodsFor: 'initialization' stamp: 'ja 10/25/2020 11:39:11' prior: 50939796!
initializeInPosition: aPosition andCardinalPoint: aCardinalPoint 
	
	position := aPosition.
	direction := aCardinalPoint.! !

Object subclass: #MarsRover
	instanceVariableNames: 'position cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRover category: #'MarsRover-Exercise' stamp: 'ja 10/25/2020 11:39:28'!
Object subclass: #MarsRover
	instanceVariableNames: 'position cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRover methodsFor: 'initialization' stamp: 'ja 10/25/2020 11:39:39' prior: 50939816!
initializeInPosition: aPosition andCardinalPoint: aCardinalPoint 
	
	position := aPosition.
	cardinalPoint := aCardinalPoint.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:39:57' prior: 50939789!
inPosition: aPosition andCardinalPoint: aCardinalPoint

	^ self new initializeInPosition: aPosition andCardinalPoint: aCardinalPoint .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:40:14' prior: 50939780!
test01
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isInDirection: $N).! !

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 11:40:21'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 11:40:21'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:41:36'!
isPointingTo: aDirection 
	
	^ direction = aDirection .! !

!methodRemoval: MarsRover #isInDirection: stamp: 'ja 10/25/2020 11:41:36'!
isInDirection: aDirection 
	
	^ direction = aDirection .!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:41:58' prior: 50939865!
isPointingTo: aCardinalPoint 
	
	^ cardinalPoint = aCardinalPoint  .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:42:11' prior: 50939852!
test01
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isPointingTo: $N).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:42:28' prior: 50939748!
move: comands
 
	comands = 'r' ifTrue:[ cardinalPoint  _ #East ]
			       ifFalse:[ comands = 'w' ifTrue: [ cardinalPoint _ #West ]
								    ifFalse: [ comands = 'b' ifTrue: [ position _ position x @ (position y - 1) ]
													  ifFalse:[ position _ (position x @ (position y + 1))]]].
											
	"comands do:[:comand | ]"! !

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 11:42:54'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 10/25/2020 11:42:56'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'ja 10/25/2020 11:42:56'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:43:49' prior: 50939344!
test02
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover move: 'f'.
	
	self assert: (marsRover isInPosition: (0@1)).
	self assert: (marsRover isInDirection: #North).
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:47:17' prior: 50939910!
test02
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover move: 'f'.
	
	self assert: (marsRover isInPosition: (0@1)).
	self assert: (marsRover isPointingTo: $N).
	
	! !

!testRun: #MarsRoverTest #test02 stamp: 'ja 10/25/2020 11:47:21'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:48:02' prior: 50939463!
test03
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover move: 'r'.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isInDirection: #East).
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:48:11' prior: 50939614!
test04
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover move: 'w'.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isInDirection: #West).
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:48:21' prior: 50939626!
test05
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover move: 'b'.
	
	self assert: (marsRover isInPosition: (0@-1)).
	self assert: (marsRover isInDirection: #North).
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:49:21' prior: 50939942!
test04
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover move: 'l'.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isInDirection: #West).
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:49:34' prior: 50939932!
test03
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover move: 'r'.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isPointingTo: $E).
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:49:46' prior: 50939962!
test04
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover move: 'l'.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isPointingTo: $W).
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:50:01' prior: 50939952!
test05
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover move: 'b'.
	
	self assert: (marsRover isInPosition: (0@-1)).
	self assert: (marsRover isPointingTo: $N).
	
	! !

!testRun: #MarsRoverTest #test02 stamp: 'ja 10/25/2020 11:50:05'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ja 10/25/2020 11:50:06'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'ja 10/25/2020 11:50:06'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:50:33' prior: 50939889!
move: comands
 
	comands = 'r' ifTrue:[ cardinalPoint  _ $E ]
			       ifFalse:[ comands = 'w' ifTrue: [ cardinalPoint _ $W ]
								    ifFalse: [ comands = 'b' ifTrue: [ position _ position x @ (position y - 1) ]
													  ifFalse:[ position _ (position x @ (position y + 1))]]].
											
	"comands do:[:comand | ]"! !

!testRun: #MarsRoverTest #test03 stamp: 'ja 10/25/2020 11:50:35'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ja 10/25/2020 11:50:37'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ja 10/25/2020 11:50:38'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'ja 10/25/2020 11:50:38'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'ja 10/25/2020 11:50:46'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'ja 10/25/2020 11:50:46'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:51:03' prior: 50940009!
move: comands
 
	comands = 'r' ifTrue:[ cardinalPoint  _ $E ]
			       ifFalse:[ comands = 'l' ifTrue: [ cardinalPoint _ $W ]
								    ifFalse: [ comands = 'b' ifTrue: [ position _ position x @ (position y - 1) ]
													  ifFalse:[ position _ (position x @ (position y + 1))]]].
											
	"comands do:[:comand | ]"! !

!testRun: #MarsRoverTest #test04 stamp: 'ja 10/25/2020 11:51:08'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ja 10/25/2020 11:51:10'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ja 10/25/2020 11:51:15'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ja 10/25/2020 11:52:27'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:52:54' prior: 50939692!
test06
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover move: 'frr'.
	
	self assert: (marsRover isInPosition: (1@0)).
	self assert: (marsRover isInDirection: #South).
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:53:05' prior: 50940060!
test06
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover move: 'frr'.
	
	self assert: (marsRover isInPosition: (1@0)).
	self assert: (marsRover isPointingTo: $S).
	
	! !

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 11:53:11'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 11:53:11'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 11:56:24' prior: 50940037!
move: comands
 
	"comands = 'r' ifTrue:[ cardinalPoint  _ $E ]
			       ifFalse:[ comands = 'l' ifTrue: [ cardinalPoint _ $W ]
								    ifFalse: [ comands = 'b' ifTrue: [ position _ position x @ (position y - 1) ]
													  ifFalse:[ position _ (position x @ (position y + 1))]]]."
											
	comands do:[:comand | comand actionForComand]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:01:31'!
test08
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	
	self should:  [marsRover move: 'javascript'.] 
		raise:  Error
		description: ['No puedo hacer eso rey']
	
	
	
	! !

!methodRemoval: MarsRoverTest #test07 stamp: 'ja 10/25/2020 12:01:35'!
test07
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	
	self should:  [marsRover move: 'javascript'.] 
		raise:  Error
		description: ['No puedo hacer eso rey']
	
	
	
	!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:01:41'!
test07
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover move: 'frr'.
	
	self assert: (marsRover isInPosition: (1@0)).
	self assert: (marsRover isPointingTo: $S).
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:02:06' prior: 50940070!
test06
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover move: 'k'.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isPointingTo: $N).
	
	! !

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 12:02:20'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 12:02:20'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 12:02:34'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 12:02:39'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 12:02:39'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:03:00' prior: 50940085!
move: comands
 
	comands = 'r' ifTrue:[ cardinalPoint  _ $E ]
			       ifFalse:[ comands = 'l' ifTrue: [ cardinalPoint _ $W ]
								    ifFalse: [ comands = 'b' ifTrue: [ position _ position x @ (position y - 1) ]
													  ifFalse:[ position _ (position x @ (position y + 1))]]].
											
	"comands do:[:comand | comand actionForComand]"! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:04:40' prior: 50940149!
move: comands
 
	comands = 'r' ifTrue:[ cardinalPoint  _ $E ]
			       ifFalse:[ comands = 'l' ifTrue: [ cardinalPoint _ $W ]
								    ifFalse: [ comands = 'b' ifTrue: [ position _ position x @ (position y - 1) ]
													  ifFalse:[ comands = 'f' ifTrue: [ position _ (position x @ (position y + 1))]
																		ifFalse: [^self] ]]].
											
	"comands do:[:comand | comand actionForComand]"! !

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 12:04:48'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 12:04:50'!
PASSED!

Object subclass: #CardinalPoint
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #CardinalPoint category: #'MarsRover-Exercise' stamp: 'ja 10/25/2020 12:07:53'!
Object subclass: #CardinalPoint
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

CardinalPoint subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #North category: #'MarsRover-Exercise' stamp: 'ja 10/25/2020 12:08:08'!
CardinalPoint subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

CardinalPoint subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #South category: #'MarsRover-Exercise' stamp: 'ja 10/25/2020 12:08:14'!
CardinalPoint subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

CardinalPoint subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #East category: #'MarsRover-Exercise' stamp: 'ja 10/25/2020 12:08:17'!
CardinalPoint subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

CardinalPoint subclass: #Weast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #Weast category: #'MarsRover-Exercise' stamp: 'ja 10/25/2020 12:08:21'!
CardinalPoint subclass: #Weast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

CardinalPoint subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #West category: #'MarsRover-Exercise' stamp: 'ja 10/25/2020 12:08:29'!
CardinalPoint subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classRemoval: #Weast stamp: 'ja 10/25/2020 12:08:33'!
CardinalPoint subclass: #Weast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:11:51' prior: 50939880!
test01
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isPointingTo: $N).! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:13:30' prior: 50939844!
inPosition: aPosition andCardinalPoint: aCardinalPoint
	
	
	^ self new initializeInPosition: aPosition andCardinalPoint: aCardinalPoint .! !

Object subclass: #MarsRoverCardinalPoint
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRoverCardinalPoint category: #'MarsRover-Exercise' stamp: 'ja 10/25/2020 12:14:55'!
Object subclass: #MarsRoverCardinalPoint
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classRemoval: #MarsRoverCardinalPoint stamp: 'ja 10/25/2020 12:15:01'!
Object subclass: #MarsRoverCardinalPoint
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classRenamed: #CardinalPoint as: #MarsRoverCardinalPoint stamp: 'ja 10/25/2020 12:15:19'!
Smalltalk renameClassNamed: #CardinalPoint as: #MarsRoverCardinalPoint!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:16:51' prior: 50940268!
inPosition: aPosition andCardinalPoint: aCardinalPoint
	
	|marsRoverCardinalPoint|
	marsRoverCardinalPoint _ MarsRoverCardinalPoint from: aCardinalPoint .
	^ self new initializeInPosition: aPosition andCardinalPoint: aCardinalPoint .! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:16:56' prior: 50940301!
inPosition: aPosition andCardinalPoint: aCardinalPoint
	
	|marsRoverCardinalPoint|
	marsRoverCardinalPoint _ MarsRoverCardinalPoint from: aCardinalPoint .
	
	^ self new initializeInPosition: aPosition andCardinalPoint: aCardinalPoint .! !
!MarsRoverCardinalPoint class methodsFor: 'no messages' stamp: 'ja 10/25/2020 12:19:00'!
from: aCardinalPoint

	aCardinalPoint = $N ifTrue: [ ^ North new].
	aCardinalPoint = $S ifTrue: [ ^ South new].
	aCardinalPoint = $E ifTrue: [ ^ East new].
	aCardinalPoint = $W ifTrue: [ ^ West new]! !
!MarsRoverCardinalPoint class methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:19:03' prior: 50940323!
from: aCardinalPoint

	aCardinalPoint = $N ifTrue: [ ^ North new].
	aCardinalPoint = $S ifTrue: [ ^ South new].
	aCardinalPoint = $E ifTrue: [ ^ East new].
	aCardinalPoint = $W ifTrue: [ ^ West new].! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:19:44' prior: 50940312!
inPosition: aPosition andCardinalPoint: aCardinalPoint
	
	|marsRoverCardinalPoint|
	marsRoverCardinalPoint _ MarsRoverCardinalPoint from: aCardinalPoint .
	
	^ self new initializeInPosition: aPosition andCardinalPoint: marsRoverCardinalPoint .! !
!MarsRover methodsFor: 'initialization' stamp: 'ja 10/25/2020 12:21:33' prior: 50939836!
initializeInPosition: aPosition andCardinalPoint: aMarsRoverCardinalPoint 
	
	position := aPosition.
	cardinalPoint := aMarsRoverCardinalPoint .! !

Object subclass: #MarsRover
	instanceVariableNames: 'position marsRoverCardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRover category: #'MarsRover-Exercise' stamp: 'ja 10/25/2020 12:21:46'!
Object subclass: #MarsRover
	instanceVariableNames: 'position marsRoverCardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRover methodsFor: 'initialization' stamp: 'ja 10/25/2020 12:22:00' prior: 50940354!
initializeInPosition: aPosition andCardinalPoint: aMarsRoverCardinalPoint 
	
	position := aPosition.
	marsRoverCardinalPoint := aMarsRoverCardinalPoint .! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:22:57' prior: 50939874!
isPointingTo: aCardinalPoint 
	
	^ marsRoverCardinalPoint is: aCardinalPoint  .! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:23:14' prior: 50940163!
move: comands
 
	comands = 'r' ifTrue:[ marsRoverCardinalPoint   _ $E ]
			       ifFalse:[ comands = 'l' ifTrue: [ marsRoverCardinalPoint  _ $W ]
								    ifFalse: [ comands = 'b' ifTrue: [ position _ position x @ (position y - 1) ]
													  ifFalse:[ comands = 'f' ifTrue: [ position _ (position x @ (position y + 1))]
																		ifFalse: [^self] ]]].
											
	"comands do:[:comand | comand actionForComand]"! !

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 12:23:49'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 12:23:49'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 12:24:00'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 12:24:00'!
FAILURE!
!MarsRoverCardinalPoint methodsFor: 'no messages' stamp: 'ja 10/25/2020 12:24:45' overrides: 16882504!
is: aCardinalPoint 
	! !
!MarsRoverCardinalPoint methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:24:51' prior: 50940416 overrides: 16882504!
is: aCardinalPoint 
	
	self subclassResponsibility ! !
!East methodsFor: 'no messages' stamp: 'ja 10/25/2020 12:25:03' overrides: 50940421!
is: aCardinalPoint ! !
!East methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:25:37' prior: 50940426 overrides: 50940421!
is: aCardinalPoint 
	
	^ aCardinalPoint = $E! !
!North methodsFor: 'no messages' stamp: 'ja 10/25/2020 12:25:50' overrides: 50940421!
is: aCardinalPoint 
	
	^ aCardinalPoint = $E! !
!South methodsFor: 'no messages' stamp: 'ja 10/25/2020 12:25:56' overrides: 50940421!
is: aCardinalPoint 
	
	^ aCardinalPoint = $E! !
!West methodsFor: 'no messages' stamp: 'ja 10/25/2020 12:26:00' overrides: 50940421!
is: aCardinalPoint 
	
	^ aCardinalPoint = $E! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:26:06' prior: 50940436 overrides: 50940421!
is: aCardinalPoint 
	
	^ aCardinalPoint = $N! !
!South methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:26:12' prior: 50940441 overrides: 50940421!
is: aCardinalPoint 
	
	^ aCardinalPoint = $S! !
!West methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:26:17' prior: 50940446 overrides: 50940421!
is: aCardinalPoint 
	
	^ aCardinalPoint = $W! !

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 12:26:23'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 10/25/2020 12:26:25'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ja 10/25/2020 12:26:26'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'ja 10/25/2020 12:26:26'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 12:27:57'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 10/25/2020 12:27:59'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ja 10/25/2020 12:28:00'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'ja 10/25/2020 12:28:00'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:30:14' prior: 50940389!
move: comands
 
	comands = 'r' ifTrue:[ marsRoverCardinalPoint _ MarsRoverCardinalPoint from: $E ]
			       ifFalse:[ comands = 'l' ifTrue: [ marsRoverCardinalPoint  _ MarsRoverCardinalPoint from:  $W ]
								    ifFalse: [ comands = 'b' ifTrue: [ position _ position x @ (position y - 1) ]
													  ifFalse:[ comands = 'f' ifTrue: [ position _ (position x @ (position y + 1))]
																		ifFalse: [^self] ]]].
											
	"comands do:[:comand | comand actionForComand]"! !

!testRun: #MarsRoverTest #test03 stamp: 'ja 10/25/2020 12:30:23'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ja 10/25/2020 12:30:25'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ja 10/25/2020 12:30:26'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 12:30:29'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:31:24'!
test09
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	
	self should:  [marsRover move: 'javascript'.] 
		raise:  Error
		description: ['No puedo hacer eso rey']
	
	
	
	! !

!methodRemoval: MarsRoverTest #test08 stamp: 'ja 10/25/2020 12:31:27'!
test08
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	
	self should:  [marsRover move: 'javascript'.] 
		raise:  Error
		description: ['No puedo hacer eso rey']
	
	
	
	!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:31:31'!
test08
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover move: 'frr'.
	
	self assert: (marsRover isInPosition: (1@0)).
	self assert: (marsRover isPointingTo: $S).
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:31:40' prior: 50940117!
test07
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $S.
	marsRover move: 'f'.
	
	self assert: (marsRover isInPosition: (1@0)).
	self assert: (marsRover isPointingTo: $S).
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:32:00' prior: 50940541!
test07
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $S.
	marsRover move: 'f'.
	
	self assert: (marsRover isInPosition: (-1@0)).
	self assert: (marsRover isPointingTo: $S).
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:32:16' prior: 50940551!
test07
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $S.
	marsRover move: 'f'.
	
	self assert: (marsRover isInPosition: (0@-1)).
	self assert: (marsRover isPointingTo: $S).
	
	! !

!testRun: #MarsRoverTest #test07 stamp: 'ja 10/25/2020 12:32:22'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'ja 10/25/2020 12:32:22'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:35:16' prior: 50940485!
move: comands
 
	"comands = 'r' ifTrue:[ marsRoverCardinalPoint _ MarsRoverCardinalPoint from: $E ]
			       ifFalse:[ comands = 'l' ifTrue: [ marsRoverCardinalPoint  _ MarsRoverCardinalPoint from:  $W ]
								    ifFalse: [ comands = 'b' ifTrue: [ position _ position x @ (position y - 1) ]
													  ifFalse:[ comands = 'f' ifTrue: [ position _ (position x @ (position y + 1))]
																		ifFalse: [^self] ]]]."
											
	"comands do:[:comand | comand actionForComand]"! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:35:59' prior: 50940576!
move: comands
 
	"comands = 'r' ifTrue:[ marsRoverCardinalPoint _ MarsRoverCardinalPoint from: $E ]
			       ifFalse:[ comands = 'l' ifTrue: [ marsRoverCardinalPoint  _ MarsRoverCardinalPoint from:  $W ]
								    ifFalse: [ comands = 'b' ifTrue: [ position _ position x @ (position y - 1) ]
													  ifFalse:[ comands = 'f' ifTrue: [ position _ (position x @ (position y + 1))]
																		ifFalse: [^self] ]]]."
											
	comands do:[:comand | marsRoverCardinalPoint move: self following: comand]! !
!MarsRoverCardinalPoint methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:36:30'!
move: aMarsRover following: aComand! !
!MarsRoverCardinalPoint methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:36:42' prior: 50940615!
move: aMarsRover following: aComand

	! !
!MarsRoverCardinalPoint methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:36:46' prior: 50940620!
move: aMarsRover following: aComand

	self subclassResponsibility ! !
!East methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:36:55' overrides: 50940625!
move: aMarsRover following: aComand! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:37:00' overrides: 50940625!
move: aMarsRover following: aComand! !
!South methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:37:04' overrides: 50940625!
move: aMarsRover following: aComand! !
!West methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:37:08' overrides: 50940625!
move: aMarsRover following: aComand! !
!East methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:40:06' prior: 50940631 overrides: 50940625!
move: aMarsRover following: aComand

	aComand = $f ifTrue: [].
	aComand = $b ifTrue: [].
	aComand = $r ifTrue: [].
	aComand = $l ifTrue: [].! !
!MarsRover methodsFor: 'comands handlers' stamp: 'ja 10/25/2020 12:42:47'!
incrementPostionX! !
!MarsRover methodsFor: 'comands handlers' stamp: 'ja 10/25/2020 12:42:56'!
decrementPostionX! !
!MarsRover methodsFor: 'comands handlers' stamp: 'ja 10/25/2020 12:43:08'!
decrementPositionX! !

!methodRemoval: MarsRover #decrementPostionX stamp: 'ja 10/25/2020 12:43:08'!
decrementPostionX!
!MarsRover methodsFor: 'comands handlers' stamp: 'ja 10/25/2020 12:43:16'!
incrementPositionX! !

!methodRemoval: MarsRover #incrementPostionX stamp: 'ja 10/25/2020 12:43:16'!
incrementPostionX!
!MarsRover methodsFor: 'comands handlers' stamp: 'ja 10/25/2020 12:43:20'!
incrementPositionY! !
!MarsRover methodsFor: 'comands handlers' stamp: 'ja 10/25/2020 12:43:25'!
decrementPositionY! !
!MarsRover methodsFor: 'comands handlers' stamp: 'ja 10/25/2020 12:43:56'!
pointToNorth! !
!MarsRover methodsFor: 'comands handlers' stamp: 'ja 10/25/2020 12:44:02'!
pointToSouth! !
!MarsRover methodsFor: 'comands handlers' stamp: 'ja 10/25/2020 12:44:07'!
pointToEast! !
!MarsRover methodsFor: 'comands handlers' stamp: 'ja 10/25/2020 12:44:11'!
pointToWest! !
!MarsRover methodsFor: 'comands handlers' stamp: 'ja 10/25/2020 12:45:16' prior: 50940664!
decrementPositionX

	position _ position - (1@0).! !
!MarsRover methodsFor: 'comands handlers' stamp: 'ja 10/25/2020 12:45:35' prior: 50940682!
decrementPositionY

	position _ position - (0@1).! !
!MarsRover methodsFor: 'comands handlers' stamp: 'ja 10/25/2020 12:45:43' prior: 50940671!
incrementPositionX

	position _ position + (1@0).! !
!MarsRover methodsFor: 'comands handlers' stamp: 'ja 10/25/2020 12:45:55' prior: 50940678!
incrementPositionY

	position _ position + (0@1).! !
!MarsRover methodsFor: 'comands handlers' stamp: 'ja 10/25/2020 12:46:08' prior: 50940692!
pointToEast

	marsRoverCardinalPoint _ East new.! !
!MarsRover methodsFor: 'comands handlers' stamp: 'ja 10/25/2020 12:46:20' prior: 50940686!
pointToNorth

	marsRoverCardinalPoint _ North new.! !
!MarsRover methodsFor: 'comands handlers' stamp: 'ja 10/25/2020 12:46:34' prior: 50940689!
pointToSouth

	marsRoverCardinalPoint _ South new.! !
!MarsRover methodsFor: 'comands handlers' stamp: 'ja 10/25/2020 12:46:43' prior: 50940695!
pointToWest

	marsRoverCardinalPoint _ West new.! !
!East methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:48:53' prior: 50940651 overrides: 50940625!
move: aMarsRover following: aComand

	aComand = $f ifTrue: [^ aMarsRover incrementPositionX ].
	aComand = $b ifTrue: [].
	aComand = $r ifTrue: [].
	aComand = $l ifTrue: [].! !
!East methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:49:41' prior: 50940740 overrides: 50940625!
move: aMarsRover following: aComand

	aComand = $f ifTrue: [^ aMarsRover incrementPositionX ].
	aComand = $b ifTrue: [^ aMarsRover decrementPositionX ].
	aComand = $r ifTrue: [^ aMarsRover pointToSouth ].
	aComand = $l ifTrue: [^ aMarsRover pointToNorth ].! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:50:46' prior: 50940636 overrides: 50940625!
move: aMarsRover following: aComand

	aComand = $f ifTrue: [^ aMarsRover incrementPositionY ].
	aComand = $b ifTrue: [^ aMarsRover decrementPositionY ].
	aComand = $r ifTrue: [^ aMarsRover pointToEast ].
	aComand = $l ifTrue: [^ aMarsRover pointToWest ].
	! !
!South methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:51:33' prior: 50940641 overrides: 50940625!
move: aMarsRover following: aComand

	aComand = $f ifTrue: [^ aMarsRover decrementPositionY ].
	aComand = $b ifTrue: [^ aMarsRover incrementPositionY ].
	aComand = $r ifTrue: [^ aMarsRover pointToWest ].
	aComand = $l ifTrue: [^ aMarsRover pointToEast ].! !
!West methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:52:27' prior: 50940646 overrides: 50940625!
move: aMarsRover following: aComand

	aComand = $f ifTrue: [^ aMarsRover decrementPositionX ].
	aComand = $b ifTrue: [^ aMarsRover incrementPositionX ].
	aComand = $r ifTrue: [^ aMarsRover pointToNorth ].
	aComand = $l ifTrue: [^ aMarsRover pointToSouth ].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:52:43' prior: 50940595!
move: comands
											
	comands do:[:comand | marsRoverCardinalPoint move: self following: comand]! !

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 12:53:34'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 12:53:39'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 12:53:54'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ja 10/25/2020 12:54:20'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 10/25/2020 12:54:25'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ja 10/25/2020 12:54:26'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ja 10/25/2020 12:54:28'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ja 10/25/2020 12:54:29'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 12:54:31'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ja 10/25/2020 12:54:32'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 12:55:04'!
PASSED!
!North methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:57:46' prior: 50940761 overrides: 50940625!
move: aMarsRover following: aComand

	aComand = $f ifTrue: [^ aMarsRover incrementPositionY ].
	aComand = $b ifTrue: [^ aMarsRover decrementPositionY ].
	aComand = $r ifTrue: [^ aMarsRover pointToEast ].
	aComand = $l ifTrue: [^ aMarsRover pointToWest ].
	
	self error: 'No se puede ejecutar comando'! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:58:36' prior: 50940830 overrides: 50940625!
move: aMarsRover following: aComand

	aComand = $f ifTrue: [^ aMarsRover incrementPositionY ].
	aComand = $b ifTrue: [^ aMarsRover decrementPositionY ].
	aComand = $r ifTrue: [^ aMarsRover pointToEast ].
	aComand = $l ifTrue: [^ aMarsRover pointToWest ].
	
	! !

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 12:58:37'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 12:59:50' prior: 50940127!
test06
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	self should: [marsRover move: 'k']
		raise:  Error
		description: marsRover class invalidComandErrorDescription.
	
	
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:00:36' prior: 50940857!
test06
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	self should: [marsRover move: 'k'. self error]
		raise:  Error
		description: marsRover class invalidComandErrorDescription.
	
	
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:01:12' prior: 50940867!
test06
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	self should: [marsRover move: 'k'. self error]
		raise:  Error
		withMessageText: marsRover class invalidComandErrorDescription.
	
	
	
	! !

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 13:02:24'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 13:02:24'!
ERROR!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:03:12'!
invalidComandErrorDescription
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:03:31' prior: 50940893!
invalidComandErrorDescription
	
	self error: 'Comando invalido'! !

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 13:03:33'!
ERROR!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:04:13' prior: 50940898!
invalidComandErrorDescription
	
	 'Comando invalido'! !

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 13:04:15'!
FAILURE!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:04:27' prior: 50940906!
invalidComandErrorDescription
	
	^ 'Comando invalido'! !

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 13:04:34'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 13:04:34'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 13:07:25'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 13:07:25'!
FAILURE!
!East methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:09:27' prior: 50940749 overrides: 50940625!
move: aMarsRover following: aComand

	aComand = $f ifTrue: [^ aMarsRover incrementPositionX ].
	aComand = $b ifTrue: [^ aMarsRover decrementPositionX ].
	aComand = $r ifTrue: [^ aMarsRover pointToSouth ].
	aComand = $l ifTrue: [^ aMarsRover pointToNorth ].
	
	self error: aMarsRover class invalidComandErrorDescription .! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:11:36'!
invalidComandErrorSignal
	
	self error: self invalidComandErrorDescription ! !
!East methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:12:04' prior: 50940929 overrides: 50940625!
move: aMarsRover following: aComand

	aComand = $f ifTrue: [^ aMarsRover incrementPositionX ].
	aComand = $b ifTrue: [^ aMarsRover decrementPositionX ].
	aComand = $r ifTrue: [^ aMarsRover pointToSouth ].
	aComand = $l ifTrue: [^ aMarsRover pointToNorth ].
	
	aMarsRover class invalidComandErrorSignal ! !
!East methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:13:29' prior: 50940948 overrides: 50940625!
move: aMarsRover following: aComand

	aComand = $f ifTrue: [^ aMarsRover incrementPositionX ].
	aComand = $b ifTrue: [^ aMarsRover decrementPositionX ].
	aComand = $r ifTrue: [^ aMarsRover pointToSouth ].
	aComand = $l ifTrue: [^ aMarsRover pointToNorth ].
	
	aMarsRover class invalidComandErrorSignal ! !
!East methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:13:31' prior: 50940961 overrides: 50940625!
move: aMarsRover following: aComand

	aComand = $f ifTrue: [^ aMarsRover incrementPositionX ].
	aComand = $b ifTrue: [^ aMarsRover decrementPositionX ].
	aComand = $r ifTrue: [^ aMarsRover pointToSouth ].
	aComand = $l ifTrue: [^ aMarsRover pointToNorth ].
	
	aMarsRover class invalidComandErrorSignal.! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:13:39' prior: 50940843 overrides: 50940625!
move: aMarsRover following: aComand

	aComand = $f ifTrue: [^ aMarsRover incrementPositionY ].
	aComand = $b ifTrue: [^ aMarsRover decrementPositionY ].
	aComand = $r ifTrue: [^ aMarsRover pointToEast ].
	aComand = $l ifTrue: [^ aMarsRover pointToWest ].
	
	aMarsRover class invalidComandErrorSignal.
	! !
!South methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:13:44' prior: 50940773 overrides: 50940625!
move: aMarsRover following: aComand

	aComand = $f ifTrue: [^ aMarsRover decrementPositionY ].
	aComand = $b ifTrue: [^ aMarsRover incrementPositionY ].
	aComand = $r ifTrue: [^ aMarsRover pointToWest ].
	aComand = $l ifTrue: [^ aMarsRover pointToEast ].
	
	aMarsRover class invalidComandErrorSignal.! !
!West methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:13:49' prior: 50940785 overrides: 50940625!
move: aMarsRover following: aComand

	aComand = $f ifTrue: [^ aMarsRover decrementPositionX ].
	aComand = $b ifTrue: [^ aMarsRover incrementPositionX ].
	aComand = $r ifTrue: [^ aMarsRover pointToNorth ].
	aComand = $l ifTrue: [^ aMarsRover pointToSouth ].
	
	aMarsRover class invalidComandErrorSignal.! !

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 13:13:53'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ja 10/25/2020 13:14:09'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ja 10/25/2020 13:14:30'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'ja 10/25/2020 13:14:30'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:14:52' prior: 50940531!
test08
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover move: 'frr'.
	
	self assert: (marsRover isInPosition: (0@1)).
	self assert: (marsRover isPointingTo: $S).
	
	! !

!testRun: #MarsRoverTest #test08 stamp: 'ja 10/25/2020 13:14:55'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:15:58' prior: 50940513!
test09
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	
	self should:  [marsRover move: ''.] 
		raise:  Error
		description: ['No puedo hacer eso rey']
	
	
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:17:37' prior: 50941049!
test09
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	
	self should:  [marsRover move: 'frrjb'.] 
		raise:  Error
		description: ['No puedo hacer eso rey']
	
	
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:18:14' prior: 50941059!
test09
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	
	self should:  [marsRover move: 'frrjb'. self fail] 
		raise:  Error
		description: ['No puedo hacer eso rey']
	
	
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:18:30' prior: 50941069!
test09
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andDirection: #North.
	
	self should:  [marsRover move: 'frrjb'. self fail] 
		raise:  Error
		withMessageText: marsRover class invalidComandErrorDescription.
	
	
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:18:44' prior: 50941079!
test09
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	self should:  [marsRover move: 'frrjb'. self fail] 
		raise:  Error
		withMessageText: marsRover class invalidComandErrorDescription.
	
	
	
	! !

!testRun: #MarsRoverTest #test09 stamp: 'ja 10/25/2020 13:18:46'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:20:58' prior: 50940878!
test06
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	marsRover move: 'k'.
	
	
	
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:21:13' prior: 50941103!
test06
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	marsRover move: 'k'.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isPointingTo: $N).
	
	
	
	! !

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 13:21:16'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 13:21:16'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:22:43' prior: 50940797!
move: comands
											
	comands do:[:comand | [marsRoverCardinalPoint move: self following: comand] on: Error do: [^self]]! !

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 13:23:31'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ja 10/25/2020 13:23:35'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:25:57' prior: 50941090!
test09
	
	| marsRover1 marsRover2 |
	
	marsRover1 _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover2 _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	marsRover1 move: 'frrjb'.
	marsRover2 move: 'frr'.
	
	self  assert: marsRover1 = marsRover2.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:27:45' overrides: 16881029!
= anOtherMarsRover

	^ position = anOtherMarsRover position and: (marsRoverCardinalPoint = anOtherMarsRover 	marsRoverCardinalPoint).! !

!testRun: #MarsRoverTest #test09 stamp: 'ja 10/25/2020 13:28:06'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'ja 10/25/2020 13:28:06'!
ERROR!

MarsRoverCardinalPoint class
	instanceVariableNames: 'uniqueInstance'!

!classDefinition: 'MarsRoverCardinalPoint class' category: #'MarsRover-Exercise' stamp: 'ja 10/25/2020 13:29:45'!
MarsRoverCardinalPoint class
	instanceVariableNames: 'uniqueInstance'!
!MarsRoverCardinalPoint class methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:30:30' overrides: 16783533!
new

	uniqueInstance  ifNil: [ ^ self basicNew ]! !
!MarsRoverCardinalPoint class methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:30:48' prior: 50941170 overrides: 16783533!
new

	uniqueInstance  ifNil: [ ^ self basicNew ].
	^ uniqueInstance ! !

!testRun: #MarsRoverTest #test09 stamp: 'ja 10/25/2020 13:31:21'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'ja 10/25/2020 13:31:21'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:31:30'!
position
	self shouldBeImplemented.
	^position! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:31:37' prior: 50941186!
position
	
	^position! !

!testRun: #MarsRoverTest #test09 stamp: 'ja 10/25/2020 13:31:40'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:31:48'!
marsRoverCardinalPoint
	self shouldBeImplemented.
	^marsRoverCardinalPoint! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:31:53' prior: 50941197!
marsRoverCardinalPoint
	
	^marsRoverCardinalPoint! !

!testRun: #MarsRoverTest #test09 stamp: 'ja 10/25/2020 13:31:58'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'ja 10/25/2020 13:32:14'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'ja 10/25/2020 13:32:14'!
FAILURE!

self == anObject!
!MarsRoverCardinalPoint class methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:35:18' prior: 50941176 overrides: 16783533!
new

	uniqueInstance  ifNil: [ uniqueInstance _  self basicNew ].
	^ uniqueInstance  ! !
!MarsRoverCardinalPoint class methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:36:00' prior: 50941217 overrides: 16783533!
new

	uniqueInstance ifNil: [ uniqueInstance _  self basicNew ].
	^ uniqueInstance  ! !

!testRun: #MarsRoverTest #test09 stamp: 'ja 10/25/2020 13:36:27'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:40:49' prior: 50940259!
test01
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isPointingTo: $N).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:41:01'!
test01MarsRoverHasPositionAndCardinalPointAtTheBeginning
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isPointingTo: $N).! !

!methodRemoval: MarsRoverTest #test01 stamp: 'ja 10/25/2020 13:41:01'!
test01
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isPointingTo: $N).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:43:17'!
test01AtTheBeginningHasPositionAndCardinalPoint
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isPointingTo: $N).! !

!methodRemoval: MarsRoverTest #test01MarsRoverHasPositionAndCardinalPointAtTheBeginning stamp: 'ja 10/25/2020 13:43:17'!
test01MarsRoverHasPositionAndCardinalPointAtTheBeginning
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isPointingTo: $N).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:43:47' prior: 50939920!
test02
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover move: 'f'.
	
	self assert: (marsRover isInPosition: (0@1)).
	self assert: (marsRover isPointingTo: $N).
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:43:57'!
test02MovesForwardCorrectly
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover move: 'f'.
	
	self assert: (marsRover isInPosition: (0@1)).
	self assert: (marsRover isPointingTo: $N).
	
	! !

!methodRemoval: MarsRoverTest #test02 stamp: 'ja 10/25/2020 13:43:57'!
test02
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover move: 'f'.
	
	self assert: (marsRover isInPosition: (0@1)).
	self assert: (marsRover isPointingTo: $N).
	
	!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:44:27'!
test03MovesRigthCorrectly
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover move: 'r'.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isPointingTo: $E).
	
	! !

!methodRemoval: MarsRoverTest #test03 stamp: 'ja 10/25/2020 13:44:28'!
test03
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover move: 'r'.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isPointingTo: $E).
	
	!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:44:50'!
test04MovesLeftCorrectly
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover move: 'l'.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isPointingTo: $W).
	
	! !

!methodRemoval: MarsRoverTest #test04 stamp: 'ja 10/25/2020 13:44:50'!
test04
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover move: 'l'.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isPointingTo: $W).
	
	!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:45:27'!
test05MovesBackwardCorrectly
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover move: 'b'.
	
	self assert: (marsRover isInPosition: (0@-1)).
	self assert: (marsRover isPointingTo: $N).
	
	! !

!methodRemoval: MarsRoverTest #test05 stamp: 'ja 10/25/2020 13:45:27'!
test05
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover move: 'b'.
	
	self assert: (marsRover isInPosition: (0@-1)).
	self assert: (marsRover isPointingTo: $N).
	
	!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:46:13'!
test06DoNothingOnInvalidCommand
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	marsRover move: 'k'.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isPointingTo: $N).
	
	
	
	! !

!methodRemoval: MarsRoverTest #test06 stamp: 'ja 10/25/2020 13:46:13'!
test06
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	marsRover move: 'k'.
	
	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isPointingTo: $N).
	
	
	
	!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:48:19' prior: 50941260!
test01AtTheBeginningHasPositionAndCardinalPoint
	
	| marsRover1 marsRover2 |
	
	marsRover1 _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	marsRover2 _ MarsRover inPosition: (0@0) andCardinalPoint: $S.
	
	self assert: (marsRover1 isInPosition: (0@0)).
	self assert: (marsRover1 isPointingTo: $N).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:48:36' prior: 50941388!
test01AtTheBeginningHasPositionAndCardinalPoint
	
	| marsRover1 marsRover2 |
	
	marsRover1 _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	marsRover2 _ MarsRover inPosition: (0@0) andCardinalPoint: $S.
	
	self assert: (marsRover1 isInPosition: (0@0)).
	self assert: (marsRover1 isPointingTo: $N).
	
	self assert: (marsRover2 isInPosition: (0@-1)).
	self assert: (marsRover2 isPointingTo: $S).! !

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 13:48:39'!
FAILURE!

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 13:48:39'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:48:56' prior: 50941401!
test01AtTheBeginningHasPositionAndCardinalPoint
	
	| marsRover1 marsRover2 |
	
	marsRover1 _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	marsRover2 _ MarsRover inPosition: (0@0) andCardinalPoint: $S.
	
	self assert: (marsRover1 isInPosition: (0@0)).
	self assert: (marsRover1 isPointingTo: $N).
	
	self assert: (marsRover2 isInPosition: (0@0)).
	self assert: (marsRover2 isPointingTo: $S).! !

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 13:48:59'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:49:55' prior: 50941424!
test01AtTheBeginningHasPositionAndCardinalPoint
	
	| marsRover1 |
	
	marsRover1 _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	self assert: (marsRover1 isInPosition: (0@0)).
	self assert: (marsRover1 isPointingTo: $N).
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:50:36' prior: 50941292!
test02MovesForwardCorrectly
	
	| marsRover1 marsRover2 |
	
	marsRover1 _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover1 move: 'f'.
	
	marsRover2 _ MarsRover inPosition: (0@0) andCardinalPoint: $S.
	
	self assert: (marsRover1 isInPosition: (0@1)).
	self assert: (marsRover1 isPointingTo: $N).
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:51:07' prior: 50941455!
test02MovesForwardCorrectly
	
	| marsRover1 marsRover2 |
	
	marsRover1 _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover1 move: 'f'.
	
	marsRover2 _ MarsRover inPosition: (0@0) andCardinalPoint: $S.
	marsRover2 move: 'f'.
	
	self assert: (marsRover1 isInPosition: (0@1)).
	self assert: (marsRover1 isPointingTo: $N).
	
	self assert: (marsRover2 isInPosition: (0@-1)).
	self assert: (marsRover2 isPointingTo: $S).
	
	
	! !

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 13:51:24'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:53:02'!
setup 
	| marsRover1 marsRover2 |
	
	marsRover1 _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	marsRover2 _ MarsRover inPosition: (0@0) andCardinalPoint: $S.! !

TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'marsRoverInOriginPoitingToNorth marsRoverInOriginPoitingToSouth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRoverTest category: #'MarsRover-Exercise' stamp: 'ja 10/25/2020 13:53:50'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'marsRoverInOriginPoitingToNorth marsRoverInOriginPoitingToSouth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:54:17' prior: 50941488!
setup 
	
	marsRoverInOriginPoitingToNorth _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	marsRoverInOriginPoitingToSouth _ MarsRover inPosition: (0@0) andCardinalPoint: $S.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:54:40' overrides: 16927572!
setUp 
	
	marsRoverInOriginPoitingToNorth _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	marsRoverInOriginPoitingToSouth _ MarsRover inPosition: (0@0) andCardinalPoint: $S.! !

!methodRemoval: MarsRoverTest #setup stamp: 'ja 10/25/2020 13:54:40'!
setup 
	
	marsRoverInOriginPoitingToNorth _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	marsRoverInOriginPoitingToSouth _ MarsRover inPosition: (0@0) andCardinalPoint: $S.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:55:23' prior: 50941444!
test01AtTheBeginningHasPositionAndCardinalPoint
	
	self assert: (marsRoverInOriginPoitingToNorth isInPosition: (0@0)).
	self assert: (marsRoverInOriginPoitingToNorth isPointingTo: $N).
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:57:54'!
assertThat: aMarsRover isInPosition: aPosition poitingTo: aCardinalPoint
	
	self assert: (marsRoverInOriginPoitingToNorth isInPosition: (0@0)).
	self assert: (marsRoverInOriginPoitingToNorth isPointingTo: $N).
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:58:15' prior: 50941548!
assertThat: aMarsRover isInPosition: aPosition poitingTo: aCardinalPoint
	
	self assert: (aMarsRover isInPosition: aPosition ).
	self assert: (aMarsRover isPointingTo: aCardinalPoint ).
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:58:26' prior: 50941558!
assertThat: aMarsRover isInPosition: aPosition poitingTo: aCardinalPoint
	
	self assert: (aMarsRover isInPosition: aPosition).
	self assert: (aMarsRover isPointingTo: aCardinalPoint).
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 13:58:30' prior: 50941568!
assertThat: aMarsRover isInPosition: aPosition poitingTo: aCardinalPoint
	
	self assert: (aMarsRover isInPosition: aPosition).
	
	self assert: (aMarsRover isPointingTo: aCardinalPoint).
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 14:00:41' prior: 50941539!
test01AtTheBeginningHasPositionAndCardinalPoint
	
	self assertThat: marsRoverInOriginPoitingToNorth isInPosition: (0@0)  poitingTo: $N.
	self assertThat: marsRoverInOriginPoitingToSouth isInPosition: (0@0)  poitingTo: $S.
	! !

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 14:00:52'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 14:01:22' prior: 50941587!
test01AtTheBeginningHasPositionAndCardinalPoint
	
	self assertThat: marsRoverInOriginPoitingToNorth isInPosition: (0@0)  poitingTo: $N.
	
	self assertThat: marsRoverInOriginPoitingToSouth isInPosition: (0@0)  poitingTo: $S.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 14:03:03' prior: 50941468!
test02MovesForwardCorrectly
	
	marsRoverInOriginPoitingToNorth move: 'f'.
	
	marsRoverInOriginPoitingToSouth move: 'f'.
	
	self assertThat: marsRoverInOriginPoitingToNorth isInPosition: (0@1)  poitingTo: $N.
	
	self assertThat: marsRoverInOriginPoitingToSouth isInPosition: (0@-1) poitingTo: $S.
	
	
	! !

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 14:03:05'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 14:03:48' prior: 50941311!
test03MovesRigthCorrectly
	
	marsRoverInOriginPoitingToNorth move: 'r'.
	
	marsRoverInOriginPoitingToSouth move: 'r'.
	
"	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isPointingTo: $E)."
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 14:04:43' prior: 50941628!
test03MovesRigthCorrectly
	
	marsRoverInOriginPoitingToNorth move: 'r'.
	
	marsRoverInOriginPoitingToSouth move: 'r'.
	
	self assertThat: marsRoverInOriginPoitingToNorth isInPosition: (0@0)  poitingTo: $E.
	
	self assertThat: marsRoverInOriginPoitingToSouth isInPosition: (0@0) poitingTo: $W.
"	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isPointingTo: $E)."
	
	! !

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 14:04:50'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 14:04:57' prior: 50941638!
test03MovesRigthCorrectly
	
	marsRoverInOriginPoitingToNorth move: 'r'.
	
	marsRoverInOriginPoitingToSouth move: 'r'.
	
	self assertThat: marsRoverInOriginPoitingToNorth isInPosition: (0@0)  poitingTo: $E.
	
	self assertThat: marsRoverInOriginPoitingToSouth isInPosition: (0@0) poitingTo: $W.

	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 14:05:34' prior: 50941330!
test04MovesLeftCorrectly
	
	marsRoverInOriginPoitingToNorth move: 'l'.
	
	marsRoverInOriginPoitingToSouth move: 'l'.
	
"	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isPointingTo: $W)."
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 14:05:55' prior: 50941670!
test04MovesLeftCorrectly
	
	marsRoverInOriginPoitingToNorth move: 'l'.
	
	marsRoverInOriginPoitingToSouth move: 'l'.
	
	self assertThat: marsRoverInOriginPoitingToNorth isInPosition: (0@0)  poitingTo: $W.
	
	self assertThat: marsRoverInOriginPoitingToSouth isInPosition: (0@0) poitingTo: $E.
	
"	self assert: (marsRover isInPosition: (0@0)).
	self assert: (marsRover isPointingTo: $W)."
	
	! !

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 14:05:58'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 14:06:05' prior: 50941680!
test04MovesLeftCorrectly
	
	marsRoverInOriginPoitingToNorth move: 'l'.
	
	marsRoverInOriginPoitingToSouth move: 'l'.
	
	self assertThat: marsRoverInOriginPoitingToNorth isInPosition: (0@0)  poitingTo: $W.
	
	self assertThat: marsRoverInOriginPoitingToSouth isInPosition: (0@0) poitingTo: $E.

	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 14:07:27' prior: 50941349!
test05MovesBackwardCorrectly
	
	marsRoverInOriginPoitingToNorth move: 'b'.
	
	marsRoverInOriginPoitingToSouth move: 'b'.
	
	self assertThat: marsRoverInOriginPoitingToNorth isInPosition: (0@-1)  poitingTo: $N.
	
	self assertThat: marsRoverInOriginPoitingToSouth isInPosition: (0@1) poitingTo: $S.
	
	! !

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 14:07:31'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 14:08:32'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 14:09:56' prior: 50941368!
test06DoNothingOnInvalidCommand
	
	marsRoverInOriginPoitingToNorth move: 'k'.
	
	marsRoverInOriginPoitingToSouth move: 'k'.
		
	self assertThat: marsRoverInOriginPoitingToNorth isInPosition: (0@0) poitingTo: 	$N.

	self assertThat: marsRoverInOriginPoitingToSouth isInPosition: (0@0) poitingTo: 	$S.
	
	
	
	! !

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 14:09:59'!
PASSED!

!methodRemoval: MarsRoverTest #test07 stamp: 'ja 10/25/2020 14:10:06'!
test07
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $S.
	marsRover move: 'f'.
	
	self assert: (marsRover isInPosition: (0@-1)).
	self assert: (marsRover isPointingTo: $S).
	
	!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 14:12:12'!
test07MakesComposedMovementCorrectly
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover move: 'frr'.
	
	self assert: (marsRover isInPosition: (0@1)).
	self assert: (marsRover isPointingTo: $S).
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 14:13:37' prior: 50941756!
test07MakesComposedMovementCorrectly
	
	marsRoverInOriginPoitingToNorth move: 'frr'.
	
	marsRoverInOriginPoitingToSouth move: 'frr'.
		
	self assertThat: marsRoverInOriginPoitingToNorth isInPosition: (0@1)  poitingTo: $S.

	self assertThat: marsRoverInOriginPoitingToSouth isInPosition: (0@-1)  poitingTo: $N.
	

	! !

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 14:13:40'!
PASSED!

!methodRemoval: MarsRoverTest #test08 stamp: 'ja 10/25/2020 14:13:43'!
test08
	
	| marsRover |
	
	marsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover move: 'frr'.
	
	self assert: (marsRover isInPosition: (0@1)).
	self assert: (marsRover isPointingTo: $S).
	
	!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 14:16:16'!
test08ComposedMovementIsExecuteUntilInvalidComandFound
	
	| marsRover1 marsRover2 |
	
	marsRover1 _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover2 _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	marsRover1 move: 'frrjb'.
	marsRover2 move: 'frr'.
	
	self  assert: marsRover1 = marsRover2.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 14:18:20' prior: 50941792!
test08ComposedMovementIsExecuteUntilInvalidComandFound
	
	| marsRoverThatWillReceiveInvalidCommand marsRoverThatWillNotReceiveInvalidCommand |
	
	marsRoverThatWillReceiveInvalidCommand _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRoverThatWillNotReceiveInvalidCommand _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	marsRoverThatWillReceiveInvalidCommand move: 'frrjb'.
	marsRoverThatWillNotReceiveInvalidCommand move: 'frr'.
	
	self  assert: marsRoverThatWillReceiveInvalidCommand = marsRoverThatWillNotReceiveInvalidCommand .! !

!testRun: #MarsRoverTest #test08ComposedMovementIsExecuteUntilInvalidComandFound stamp: 'ja 10/25/2020 14:18:23'!
PASSED!

!methodRemoval: MarsRoverTest #test09 stamp: 'ja 10/25/2020 14:18:30'!
test09
	
	| marsRover1 marsRover2 |
	
	marsRover1 _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRover2 _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	marsRover1 move: 'frrjb'.
	marsRover2 move: 'frr'.
	
	self  assert: marsRover1 = marsRover2.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 14:18:53'!
test08ComposedMovementIsExecuteUntilInvalidCommandFound
	
	| marsRoverThatWillReceiveInvalidCommand marsRoverThatWillNotReceiveInvalidCommand |
	
	marsRoverThatWillReceiveInvalidCommand _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRoverThatWillNotReceiveInvalidCommand _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	marsRoverThatWillReceiveInvalidCommand move: 'frrjb'.
	marsRoverThatWillNotReceiveInvalidCommand move: 'frr'.
	
	self  assert: marsRoverThatWillReceiveInvalidCommand = marsRoverThatWillNotReceiveInvalidCommand .! !

!methodRemoval: MarsRoverTest #test08ComposedMovementIsExecuteUntilInvalidComandFound stamp: 'ja 10/25/2020 14:18:53'!
test08ComposedMovementIsExecuteUntilInvalidComandFound
	
	| marsRoverThatWillReceiveInvalidCommand marsRoverThatWillNotReceiveInvalidCommand |
	
	marsRoverThatWillReceiveInvalidCommand _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRoverThatWillNotReceiveInvalidCommand _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	marsRoverThatWillReceiveInvalidCommand move: 'frrjb'.
	marsRoverThatWillNotReceiveInvalidCommand move: 'frr'.
	
	self  assert: marsRoverThatWillReceiveInvalidCommand = marsRoverThatWillNotReceiveInvalidCommand .!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 14:20:26' prior: 50941125!
move: commands
											
	commands do:[:command | [marsRoverCardinalPoint move: self following: command] on: Error do: [^self]]! !
!MarsRoverCardinalPoint methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 14:20:56' prior: 50940625!
move: aMarsRover following: aCommand

	self subclassResponsibility ! !
!East methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 14:21:13' prior: 50940974 overrides: 50941890!
move: aMarsRover following: aCommand

	aCommand = $f ifTrue: [^ aMarsRover incrementPositionX ].
	aCommand = $b ifTrue: [^ aMarsRover decrementPositionX ].
	aCommand = $r ifTrue: [^ aMarsRover pointToSouth ].
	aCommand = $l ifTrue: [^ aMarsRover pointToNorth ].
	
	aMarsRover class invalidComandErrorSignal.! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 14:21:27' prior: 50940987 overrides: 50941890!
move: aMarsRover following: aCommand

	aCommand = $f ifTrue: [^ aMarsRover incrementPositionY ].
	aCommand = $b ifTrue: [^ aMarsRover decrementPositionY ].
	aCommand = $r ifTrue: [^ aMarsRover pointToEast ].
	aCommand = $l ifTrue: [^ aMarsRover pointToWest ].
	
	aMarsRover class invalidComandErrorSignal.
	! !
!South methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 14:21:38' prior: 50941000 overrides: 50941890!
move: aMarsRover following: aCommand

	aCommand = $f ifTrue: [^ aMarsRover decrementPositionY ].
	aCommand = $b ifTrue: [^ aMarsRover incrementPositionY ].
	aCommand = $r ifTrue: [^ aMarsRover pointToWest ].
	aCommand = $l ifTrue: [^ aMarsRover pointToEast ].
	
	aMarsRover class invalidComandErrorSignal.! !
!West methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 14:21:49' prior: 50941013 overrides: 50941890!
move: aMarsRover following: aCommand

	aCommand = $f ifTrue: [^ aMarsRover decrementPositionX ].
	aCommand = $b ifTrue: [^ aMarsRover incrementPositionX ].
	aCommand = $r ifTrue: [^ aMarsRover pointToNorth ].
	aCommand = $l ifTrue: [^ aMarsRover pointToSouth ].
	
	aMarsRover class invalidComandErrorSignal.! !

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 14:22:16'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 14:22:16'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 14:22:16'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 14:22:16'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 14:22:16'!
PASSED!

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 14:22:16'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 14:22:16'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecuteUntilInvalidCommandFound stamp: 'ja 10/25/2020 14:22:16'!
PASSED!

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 14:32:31'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 14:32:31'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 14:32:31'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 14:32:31'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 14:32:31'!
PASSED!

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 14:32:31'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 14:32:31'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecuteUntilInvalidCommandFound stamp: 'ja 10/25/2020 14:32:31'!
PASSED!

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 14:33:39'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 14:33:39'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 14:33:39'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 14:33:39'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 14:33:39'!
PASSED!

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 14:33:39'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 14:33:39'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecuteUntilInvalidCommandFound stamp: 'ja 10/25/2020 14:33:39'!
PASSED!
!MarsRover methodsFor: 'initialization' stamp: 'ja 10/25/2020 14:39:02' prior: 50940375!
initializeInPosition: aPosition andCardinalPoint: aMarsRoverCardinalPoint 
	
	position := aPosition.
	
	marsRoverCardinalPoint := aMarsRoverCardinalPoint .! !
!MarsRover methodsFor: 'testing' stamp: 'ja 10/25/2020 14:39:35' prior: 50939421!
isInPosition: aPosition 
	
	^ position = aPosition .! !
!MarsRover methodsFor: 'accessing' stamp: 'ja 10/25/2020 14:39:46' prior: 50941203!
marsRoverCardinalPoint
	
	^ marsRoverCardinalPoint! !
!MarsRover methodsFor: 'movement' stamp: 'ja 10/25/2020 14:40:18' prior: 50941882!
move: commands
											
	commands do: [ :command | [ marsRoverCardinalPoint move: self following: command ] on: Error do: [ ^ self ]]! !
!MarsRoverTest methodsFor: 'testing-composed movements' stamp: 'ja 10/25/2020 14:42:52'!
test08ComposedMovementIsExecutedUntilInvalidCommandFound
	
	| marsRoverThatWillReceiveInvalidCommand marsRoverThatWillNotReceiveInvalidCommand |
	
	marsRoverThatWillReceiveInvalidCommand _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRoverThatWillNotReceiveInvalidCommand _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	marsRoverThatWillReceiveInvalidCommand move: 'frrjb'.
	marsRoverThatWillNotReceiveInvalidCommand move: 'frr'.
	
	self  assert: marsRoverThatWillReceiveInvalidCommand = marsRoverThatWillNotReceiveInvalidCommand .! !

!methodRemoval: MarsRoverTest #test08ComposedMovementIsExecuteUntilInvalidCommandFound stamp: 'ja 10/25/2020 14:42:52'!
test08ComposedMovementIsExecuteUntilInvalidCommandFound
	
	| marsRoverThatWillReceiveInvalidCommand marsRoverThatWillNotReceiveInvalidCommand |
	
	marsRoverThatWillReceiveInvalidCommand _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	marsRoverThatWillNotReceiveInvalidCommand _ MarsRover inPosition: (0@0) andCardinalPoint: $N.
	
	marsRoverThatWillReceiveInvalidCommand move: 'frrjb'.
	marsRoverThatWillNotReceiveInvalidCommand move: 'frr'.
	
	self  assert: marsRoverThatWillReceiveInvalidCommand = marsRoverThatWillNotReceiveInvalidCommand .!

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 14:43:00'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 14:43:00'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 14:43:00'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 14:43:00'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 14:43:00'!
PASSED!

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 14:43:00'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 14:43:00'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 14:43:00'!
PASSED!
!MarsRover class methodsFor: 'class initialization' stamp: 'ja 10/25/2020 14:43:47' prior: 50940343!
inPosition: aPosition andCardinalPoint: aCardinalPoint
	
	| marsRoverCardinalPoint |
	
	marsRoverCardinalPoint _ MarsRoverCardinalPoint from: aCardinalPoint .
	
	^ self new initializeInPosition: aPosition andCardinalPoint: marsRoverCardinalPoint .! !
!MarsRoverCardinalPoint class methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 14:47:10' prior: 50940333!
from: aCardinalPoint

	aCardinalPoint = $N ifTrue: [ ^ North new].
	aCardinalPoint = $S ifTrue: [ ^ South new].
	aCardinalPoint = $E ifTrue: [ ^ East new].
	aCardinalPoint = $W ifTrue: [ ^ West new].
	
	! !
!MarsRoverTest methodsFor: 'testing-composed movements' stamp: 'ja 10/25/2020 14:49:39'!
test09

	| marsRoverInvalid |
	
	marsRoverInvalid _ MarsRover inPosition: 'pepito' andCardinalPoint: $N.! !
!MarsRoverTest methodsFor: 'testing-composed movements' stamp: 'ja 10/25/2020 14:50:53'!
test09PositionShouldBeAPoint

	| invalidMarsRover |
	
	invalidMarsRover _ MarsRover inPosition: 'something' andCardinalPoint: $N.
	
	! !
!MarsRoverTest methodsFor: 'testing-composed movements' stamp: 'ja 10/25/2020 14:54:10' prior: 50942151!
test09PositionShouldBeAPoint

	| invalidMarsRover |
	
	self should: [invalidMarsRover _ MarsRover inPosition: 'something' andCardinalPoint: $N. self fail]
	      raise: Error 
	      withMessageText: MarsRover invalidPositionProvidedErrorDescription.
	! !
!MarsRover class methodsFor: 'error handling' stamp: 'ja 10/25/2020 14:55:06'!
invalidPositionProvidedErrorDescription

	^ 'La posici�n debe ser un punto'! !

!methodRemoval: MarsRoverTest #test09 stamp: 'ja 10/25/2020 14:55:31'!
test09

	| marsRoverInvalid |
	
	marsRoverInvalid _ MarsRover inPosition: 'pepito' andCardinalPoint: $N.!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 14:55:36'!
FAILURE!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 14:55:36'!
FAILURE!
!MarsRover class methodsFor: 'class initialization' stamp: 'ja 10/25/2020 14:57:17' prior: 50942122!
inPosition: aPosition andCardinalPoint: aCardinalPoint
	
	| marsRoverCardinalPoint |
	
	(aPosition isKindOf: #Point) ifFalse: [self error: self invalidPositionProvidedErrorDescription ].
	
	marsRoverCardinalPoint _ MarsRoverCardinalPoint from: aCardinalPoint .
	
	^ self new initializeInPosition: aPosition andCardinalPoint: marsRoverCardinalPoint .! !
!MarsRover class methodsFor: 'class initialization' stamp: 'ja 10/25/2020 14:57:45' prior: 50942188!
inPosition: aPosition andCardinalPoint: aCardinalPoint
	
	| marsRoverCardinalPoint |
	
	(aPosition isKindOf: Point) ifFalse: [self error: self invalidPositionProvidedErrorDescription ].
	
	marsRoverCardinalPoint _ MarsRoverCardinalPoint from: aCardinalPoint .
	
	^ self new initializeInPosition: aPosition andCardinalPoint: marsRoverCardinalPoint .! !

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 14:57:48'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 14:57:48'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 14:57:48'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 14:57:48'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 14:57:48'!
PASSED!

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 14:57:48'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 14:57:48'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 14:57:48'!
PASSED!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 14:57:48'!
PASSED!
!MarsRoverTest methodsFor: 'testing-composed movements' stamp: 'ja 10/25/2020 14:59:26'!
test10CardinalPointShouldBeValid

	| invalidMarsRover |
	
	self should: [invalidMarsRover _ MarsRover inPosition: (0@0) andCardinalPoint: $K. self fail]
	      raise: Error 
	      withMessageText: MarsRover invalidCardinalPointProvidedErrorDescription.
	! !

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 14:59:32'!
ERROR!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 14:59:32'!
ERROR!
!MarsRover class methodsFor: 'error handling' stamp: 'ja 10/25/2020 15:00:02'!
invalidCardinalPointProvidedErrorDescription

	^ 'El punto cardinal es invalido'! !

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 15:00:07'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 15:00:07'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 15:00:07'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 15:00:07'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 15:00:07'!
PASSED!

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 15:00:07'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 15:00:07'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 15:00:07'!
PASSED!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 15:00:07'!
PASSED!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 15:00:07'!
FAILURE!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 15:00:07'!
FAILURE!
!MarsRover class methodsFor: 'class initialization' stamp: 'ja 10/25/2020 15:00:32' prior: 50942203!
inPosition: aPosition andCardinalPoint: aCardinalPoint
	
	| marsRoverCardinalPoint |
	
	(aPosition isKindOf: Point) ifFalse: [self error: self invalidPositionProvidedErrorDescription ].
	
	marsRoverCardinalPoint _ MarsRoverCardinalPoint from: aCardinalPoint .
	
	^ self new initializeInPosition: aPosition andCardinalPoint: marsRoverCardinalPoint .! !
!MarsRoverCardinalPoint class methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:01:11' prior: 50942134!
from: aCardinalPoint

	aCardinalPoint = $N ifTrue: [ ^ North new].
	aCardinalPoint = $S ifTrue: [ ^ South new].
	aCardinalPoint = $E ifTrue: [ ^ East new].
	aCardinalPoint = $W ifTrue: [ ^ West new].
	
	self error: MarsRover invalidCardinalPointProvidedErrorDescription .
	! !
!MarsRoverCardinalPoint class methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:01:49' prior: 50942319!
from: aCardinalPoint

	aCardinalPoint = $N ifTrue: [ ^ North new].
	aCardinalPoint = $S ifTrue: [ ^ South new].
	aCardinalPoint = $E ifTrue: [ ^ East new].
	aCardinalPoint = $W ifTrue: [ ^ West new].
	
	MarsRover invalidCardinalPointErrorSignal .
	! !
!MarsRover class methodsFor: 'error handling' stamp: 'ja 10/25/2020 15:02:11'!
invalidCardinalPointErrorSignal
	
	self error: self invalidCardinalPointProvidedErrorDescription .! !
!MarsRover class methodsFor: 'error handling' stamp: 'ja 10/25/2020 15:02:29' prior: 50942343!
invalidCardinalPointErrorSignal
	
	self error: self invalidCardinalPointProvidedErrorDescription .! !
!MarsRover class methodsFor: 'error handling' stamp: 'ja 10/25/2020 15:02:54'!
invalidCardinalPointProvidedErrorSignal
	
	self error: self invalidCardinalPointProvidedErrorDescription .! !

!methodRemoval: MarsRover class #invalidCardinalPointErrorSignal stamp: 'ja 10/25/2020 15:02:54'!
invalidCardinalPointErrorSignal
	
	self error: self invalidCardinalPointProvidedErrorDescription .!
!MarsRoverCardinalPoint class methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:03:22' prior: 50942332!
from: aCardinalPoint

	aCardinalPoint = $N ifTrue: [ ^ North new].
	aCardinalPoint = $S ifTrue: [ ^ South new].
	aCardinalPoint = $E ifTrue: [ ^ East new].
	aCardinalPoint = $W ifTrue: [ ^ West new].
	
	MarsRover invalidCardinalPointProvidedErrorSignal .
	! !

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 15:03:52'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 15:03:52'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 15:03:52'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 15:03:52'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 15:03:52'!
PASSED!

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 15:03:52'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 15:03:52'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 15:03:52'!
PASSED!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 15:03:52'!
PASSED!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 15:03:52'!
PASSED!

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 15:05:36'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 15:05:36'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 15:05:36'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 15:05:36'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 15:05:36'!
PASSED!

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 15:05:36'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 15:05:36'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 15:05:36'!
PASSED!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 15:05:36'!
PASSED!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 15:05:36'!
PASSED!

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 15:16:23'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 15:16:23'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 15:16:23'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 15:16:23'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 15:16:23'!
PASSED!

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 15:16:23'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 15:16:23'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 15:16:23'!
PASSED!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 15:16:23'!
PASSED!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 15:16:23'!
PASSED!

Object subclass: #MarsRoverCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRoverCommand category: #'MarsRover-Exercise' stamp: 'ja 10/25/2020 15:32:56'!
Object subclass: #MarsRoverCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

MarsRoverCommand subclass: #Forward
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #Forward category: #'MarsRover-Exercise' stamp: 'ja 10/25/2020 15:33:11'!
MarsRoverCommand subclass: #Forward
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

MarsRoverCommand subclass: #Backward
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #Backward category: #'MarsRover-Exercise' stamp: 'ja 10/25/2020 15:33:26'!
MarsRoverCommand subclass: #Backward
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

MarsRoverCommand subclass: #Left
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #Left category: #'MarsRover-Exercise' stamp: 'ja 10/25/2020 15:33:30'!
MarsRoverCommand subclass: #Left
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

MarsRoverCommand subclass: #Rigth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #Rigth category: #'MarsRover-Exercise' stamp: 'ja 10/25/2020 15:33:35'!
MarsRoverCommand subclass: #Rigth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRoverCommand class methodsFor: 'no messages' stamp: 'ja 10/25/2020 15:34:59'!
from: aCommand

	
! !
!MarsRoverCommand class methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:36:55' prior: 50942536!
from: aCommand

	aCommand = $f ifTrue: [^ Forward  new].
	aCommand = $b ifTrue: [^ Backward new].
	aCommand = $r ifTrue: [^ Rigth new].
	aCommand = $l ifTrue: [^ Left new].
	
	MarsRover invalidComandErrorSignal.
	
! !

!classDefinition: 'MarsRoverCommand class' category: #'MarsRover-Exercise' stamp: 'ja 10/25/2020 15:37:32'!
MarsRoverCommand class
	instanceVariableNames: 'uniqueInstance'!
!MarsRoverCommand class methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:37:29' overrides: 16783533!
new

	uniqueInstance ifNil: [ uniqueInstance _  self basicNew ].
	^ uniqueInstance  ! !
!East methodsFor: 'movement' stamp: 'ja 10/25/2020 15:39:43' prior: 50941896 overrides: 50941890!
move: aMarsRover following: aCommand

	aCommand = $f ifTrue: [^ aMarsRover incrementPositionX ].
	aCommand = $b ifTrue: [^ aMarsRover decrementPositionX ].
	aCommand = $r ifTrue: [^ aMarsRover pointToSouth ].
	aCommand = $l ifTrue: [^ aMarsRover pointToNorth ].
	
	^ MarsRoverCommand from: aCommand .
	
	"aMarsRover class invalidComandErrorSignal."! !
!East methodsFor: 'movement' stamp: 'ja 10/25/2020 15:39:49' prior: 50942563 overrides: 50941890!
move: aMarsRover following: aCommand

	aCommand = $f ifTrue: [^ aMarsRover incrementPositionX ].
	aCommand = $b ifTrue: [^ aMarsRover decrementPositionX ].
	aCommand = $r ifTrue: [^ aMarsRover pointToSouth ].
	aCommand = $l ifTrue: [^ aMarsRover pointToNorth ].
	
	^ MarsRoverCommand from: aCommand .
! !
!MarsRoverCommand methodsFor: 'no messages' stamp: 'ja 10/25/2020 15:40:34'!
execWhenPointingToNorth: aMarsRover 
	
	self subclassResponsibility ! !
!MarsRoverCommand methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:40:46'!
execWhenPointingToSouth: aMarsRover 
	
	self subclassResponsibility ! !
!MarsRoverCommand methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:40:51'!
execWhenPointingToWest: aMarsRover 
	
	self subclassResponsibility ! !
!MarsRoverCommand methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:40:54'!
execWhenPointingToEast: aMarsRover 
	
	self subclassResponsibility ! !
!East methodsFor: 'movement' stamp: 'ja 10/25/2020 15:42:37' prior: 50942578 overrides: 50941890!
move: aMarsRover following: aCommand
	
	^ (MarsRoverCommand from: aCommand) execWhenPointingToEast: aMarsRover .
	
! !
!North methodsFor: 'movement' stamp: 'ja 10/25/2020 15:43:03' prior: 50941910 overrides: 50941890!
move: aMarsRover following: aCommand

	^ (MarsRoverCommand from: aCommand) execWhenPointingToNorth: aMarsRover .! !
!South methodsFor: 'movement' stamp: 'ja 10/25/2020 15:43:20' prior: 50941924 overrides: 50941890!
move: aMarsRover following: aCommand

	^ (MarsRoverCommand from: aCommand) execWhenPointingToSouth: aMarsRover .! !
!West methodsFor: 'movement' stamp: 'ja 10/25/2020 15:43:35' prior: 50941938 overrides: 50941890!
move: aMarsRover following: aCommand

	^ (MarsRoverCommand from: aCommand) execWhenPointingToWest: aMarsRover .! !
!Backward methodsFor: 'no messages' stamp: 'ja 10/25/2020 15:44:02' overrides: 50942605!
execWhenPointingToEast: aMarsRover 
! !
!Backward methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:44:15' overrides: 50942590!
execWhenPointingToNorth: aMarsRover 
! !
!Backward methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:44:28' overrides: 50942595!
execWhenPointingToSouth: aMarsRover 
! !
!Backward methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:44:45' overrides: 50942600!
execWhenPointingToWest: aMarsRover 
! !
!Backward methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:45:33' prior: 50942639 overrides: 50942605!
execWhenPointingToEast: aMarsRover 

	^ aMarsRover decrementPositionX ! !
!Backward methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:45:48' prior: 50942659 overrides: 50942605!
execWhenPointingToEast: aMarsRover 

	^ aMarsRover decrementPositionX .! !
!Backward methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:46:08' prior: 50942644 overrides: 50942590!
execWhenPointingToNorth: aMarsRover 
	
	^ aMarsRover incrementPositionX .! !
!Backward methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:46:42' prior: 50942649 overrides: 50942595!
execWhenPointingToSouth: aMarsRover 

	^ aMarsRover incrementPositionY .! !
!Backward methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:47:10' prior: 50942654 overrides: 50942600!
execWhenPointingToWest: aMarsRover 

	^ aMarsRover incrementPositionX ! !
!Backward methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:47:51' prior: 50942671 overrides: 50942590!
execWhenPointingToNorth: aMarsRover 
	
	^ aMarsRover decrementPositionY .! !
!Forward methodsFor: 'no messages' stamp: 'ja 10/25/2020 15:48:25' overrides: 50942605!
execWhenPointingToEast: aMarsRover 
! !
!Forward methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:48:36' overrides: 50942590!
execWhenPointingToNorth: aMarsRover 
! !
!Forward methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:48:48' overrides: 50942595!
execWhenPointingToSouth: aMarsRover 
! !
!Forward methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:48:58' overrides: 50942600!
execWhenPointingToWest: aMarsRover 
! !
!Left methodsFor: 'no messages' stamp: 'ja 10/25/2020 15:49:03' overrides: 50942600!
execWhenPointingToWest: aMarsRover 
! !
!Left methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:49:12' overrides: 50942605!
execWhenPointingToEast: aMarsRover 
! !
!Left methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:49:21' overrides: 50942590!
execWhenPointingToNorth: aMarsRover 
! !
!Left methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:49:30' overrides: 50942595!
execWhenPointingToSouth: aMarsRover 
! !
!Rigth methodsFor: 'no messages' stamp: 'ja 10/25/2020 15:49:34' overrides: 50942595!
execWhenPointingToSouth: aMarsRover 
! !
!Rigth methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:49:43' overrides: 50942605!
execWhenPointingToEast: aMarsRover 
! !
!Rigth methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:49:53' overrides: 50942590!
execWhenPointingToNorth: aMarsRover 
! !
!Rigth methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:50:01' overrides: 50942600!
execWhenPointingToWest: aMarsRover 
! !
!Forward methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:50:23' prior: 50942695 overrides: 50942605!
execWhenPointingToEast: aMarsRover 

	^ aMarsRover incrementPositionX ! !
!Forward methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:50:38' prior: 50942700 overrides: 50942590!
execWhenPointingToNorth: aMarsRover 
	
	^ aMarsRover incrementPositionY.! !
!Forward methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:50:52' prior: 50942705 overrides: 50942595!
execWhenPointingToSouth: aMarsRover 
	
	^ aMarsRover decrementPositionY .! !
!Forward methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:51:03' prior: 50942710 overrides: 50942600!
execWhenPointingToWest: aMarsRover 

	^ aMarsRover decrementPositionX .! !
!Left methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:51:34' prior: 50942719 overrides: 50942605!
execWhenPointingToEast: aMarsRover 
	
	^ aMarsRover pointToNorth .! !
!Left methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:51:50' prior: 50942724 overrides: 50942590!
execWhenPointingToNorth: aMarsRover 

	^ aMarsRover pointToWest .! !
!Left methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:52:05' prior: 50942729 overrides: 50942595!
execWhenPointingToSouth: aMarsRover 

	^ aMarsRover  pointToEast .! !
!Left methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:52:21' prior: 50942714 overrides: 50942600!
execWhenPointingToWest: aMarsRover 

	^ aMarsRover  pointToSouth .! !
!Rigth methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:52:35' prior: 50942738 overrides: 50942605!
execWhenPointingToEast: aMarsRover 

	^ aMarsRover pointToSouth .! !
!Rigth methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:52:48' prior: 50942743 overrides: 50942590!
execWhenPointingToNorth: aMarsRover 

	^ aMarsRover pointToEast ! !
!Rigth methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:52:50' prior: 50942807 overrides: 50942590!
execWhenPointingToNorth: aMarsRover 

	^ aMarsRover pointToEast .! !
!Rigth methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:53:03' prior: 50942733 overrides: 50942595!
execWhenPointingToSouth: aMarsRover 

	^ aMarsRover pointToWest .! !
!Rigth methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 15:53:19' prior: 50942748 overrides: 50942600!
execWhenPointingToWest: aMarsRover 

	^ aMarsRover pointToNorth .! !

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 15:53:49'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 15:53:49'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 15:53:49'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 15:53:49'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 15:53:49'!
PASSED!

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 15:53:49'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 15:53:49'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 15:53:49'!
PASSED!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 15:53:49'!
PASSED!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 15:53:49'!
PASSED!

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 15:55:42'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 15:55:42'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 15:55:42'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 15:55:42'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 15:55:42'!
PASSED!

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 15:55:42'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 15:55:42'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 15:55:42'!
PASSED!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 15:55:42'!
PASSED!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 15:55:42'!
PASSED!
!MarsRover methodsFor: 'movement' stamp: 'ja 10/25/2020 15:58:09' prior: 50942046!
move: aCommandCollection
											
	aCommandCollection do: [ :command | [ marsRoverCardinalPoint move: self following: command ] on: Error do: [ ^ self ]]! !

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 16:00:00'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 16:00:00'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 16:00:00'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 16:00:00'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 16:00:00'!
PASSED!

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 16:00:00'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 16:00:00'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 16:00:00'!
PASSED!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 16:00:00'!
PASSED!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 16:00:00'!
PASSED!
!MarsRover methodsFor: 'movement' stamp: 'ja 10/25/2020 16:03:52'!
exec: aCommand
											
	[ marsRoverCardinalPoint move: self following: aCommand ] on: Error do: [ ^ self ]! !
!MarsRover methodsFor: 'movement' stamp: 'ja 10/25/2020 16:04:38' prior: 50942894!
move: aCommandCollection
											
	aCommandCollection do: [ :command | self exec: command ]! !

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 16:05:57'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 16:05:57'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 16:05:57'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 16:05:57'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 16:05:57'!
PASSED!

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 16:05:57'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 16:05:57'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 16:05:57'!
FAILURE!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 16:05:57'!
PASSED!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 16:05:57'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 16:05:57'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'ja 10/25/2020 16:06:41' prior: 50942934!
exec: aCommand
											
	[ (marsRoverCardinalPoint move: self following: aCommand ) on: Error do: [ ^ self ]]! !
!MarsRover methodsFor: 'movement' stamp: 'ja 10/25/2020 16:06:56' prior: 50942983!
exec: aCommand
											
	[ marsRoverCardinalPoint move: self following: aCommand ] ! !
!MarsRover methodsFor: 'movement' stamp: 'ja 10/25/2020 16:07:00' prior: 50942990!
exec: aCommand
											
	 marsRoverCardinalPoint move: self following: aCommand  ! !
!MarsRover methodsFor: 'movement' stamp: 'ja 10/25/2020 16:07:16' prior: 50942941!
move: aCommandCollection
											
	aCommandCollection do: [ :command | [self exec: command ] on: Error do: [ ^ self ]]! !

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 16:07:23'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 16:07:23'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 16:07:23'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 16:07:23'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 16:07:23'!
PASSED!

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 16:07:23'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 16:07:23'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 16:07:23'!
PASSED!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 16:07:23'!
PASSED!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 16:07:23'!
PASSED!
!MarsRover methodsFor: 'movement' stamp: 'ja 10/25/2020 16:07:49' prior: 50943002!
move: aCommandCollection
											
	aCommandCollection do: [ :command | [ self exec: command ] on: Error do: [ ^ self ]]! !

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 16:12:43'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 16:12:43'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 16:12:43'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 16:12:43'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 16:12:43'!
PASSED!

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 16:12:43'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 16:12:43'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 16:12:43'!
PASSED!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 16:12:43'!
PASSED!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 16:12:43'!
PASSED!

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 16:15:01'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 16:15:01'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 16:15:01'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 16:15:01'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 16:15:01'!
PASSED!

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 16:15:01'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 16:15:01'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 16:15:01'!
PASSED!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 16:15:01'!
PASSED!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 16:15:01'!
PASSED!

!classDefinition: #MarsRover category: #'MarsRover-Exercise' stamp: 'ja 10/25/2020 16:15:30'!
Object subclass: #MarsRover
	instanceVariableNames: 'position cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 16:15:30' prior: 50940729!
pointToSouth

	cardinalPoint _ South new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 16:15:30' prior: 50942996!
exec: aCommand
											
	 cardinalPoint move: self following: aCommand  ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 16:15:30' prior: 50942041!
marsRoverCardinalPoint
	
	^ cardinalPoint! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 16:15:31' prior: 50940734!
pointToWest

	cardinalPoint _ West new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 16:15:31' prior: 50941149 overrides: 16881029!
= anOtherMarsRover

	^ position = anOtherMarsRover position and: (cardinalPoint = anOtherMarsRover 	marsRoverCardinalPoint).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 16:15:31' prior: 50940719!
pointToEast

	cardinalPoint _ East new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 16:15:31' prior: 50940724!
pointToNorth

	cardinalPoint _ North new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 16:15:31' prior: 50940383!
isPointingTo: aCardinalPoint 
	
	^ cardinalPoint is: aCardinalPoint  .! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 16:15:31' prior: 50942028!
initializeInPosition: aPosition andCardinalPoint: aMarsRoverCardinalPoint 
	
	position := aPosition.
	
	cardinalPoint := aMarsRoverCardinalPoint .! !

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 16:15:42'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 16:15:42'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 16:15:42'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 16:15:42'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 16:15:42'!
PASSED!

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 16:15:42'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 16:15:42'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 16:15:42'!
PASSED!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 16:15:42'!
PASSED!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 16:15:42'!
PASSED!

!classDefinition: #MarsRover category: #'MarsRover-Exercise' stamp: 'ja 10/25/2020 16:22:56'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 16:22:56' prior: 50943120!
pointToSouth

	direction _ South new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 16:22:56' prior: 50943125!
exec: aCommand
											
	 direction move: self following: aCommand  ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 16:22:56' prior: 50943131!
marsRoverCardinalPoint
	
	^ direction! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 16:22:56' prior: 50943136!
pointToWest

	direction _ West new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 16:22:57' prior: 50943141 overrides: 16881029!
= anOtherMarsRover

	^ position = anOtherMarsRover position and: (direction = anOtherMarsRover 	marsRoverCardinalPoint).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 16:22:57' prior: 50943148!
pointToEast

	direction _ East new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 16:22:57' prior: 50943153!
pointToNorth

	direction _ North new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 16:22:57' prior: 50943158!
isPointingTo: aCardinalPoint 
	
	^ direction is: aCardinalPoint  .! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 16:22:57' prior: 50943164!
initializeInPosition: aPosition andCardinalPoint: aMarsRoverCardinalPoint 
	
	position := aPosition.
	
	direction := aMarsRoverCardinalPoint .! !

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 16:23:00'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 16:23:00'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 16:23:00'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 16:23:00'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 16:23:00'!
PASSED!

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 16:23:00'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 16:23:00'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 16:23:00'!
PASSED!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 16:23:00'!
PASSED!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 16:23:00'!
PASSED!

!classRenamed: #MarsRoverCardinalPoint as: #MarsRoverDirection stamp: 'ja 10/25/2020 16:24:48'!
Smalltalk renameClassNamed: #MarsRoverCardinalPoint as: #MarsRoverDirection!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 16:24:48' prior: 50942304!
inPosition: aPosition andCardinalPoint: aCardinalPoint
	
	| marsRoverCardinalPoint |
	
	(aPosition isKindOf: Point) ifFalse: [self error: self invalidPositionProvidedErrorDescription ].
	
	marsRoverCardinalPoint _ MarsRoverDirection from: aCardinalPoint .
	
	^ self new initializeInPosition: aPosition andCardinalPoint: marsRoverCardinalPoint .! !

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 16:25:23'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 16:25:23'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 16:25:23'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 16:25:23'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 16:25:23'!
PASSED!

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 16:25:23'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 16:25:23'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 16:25:23'!
PASSED!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 16:25:23'!
PASSED!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 16:25:23'!
PASSED!
!MarsRover class methodsFor: 'class initialization' stamp: 'ja 10/25/2020 16:26:20'!
inPosition: aPosition andDirection: aCardinalPoint
	
	| marsRoverCardinalPoint |
	
	(aPosition isKindOf: Point) ifFalse: [self error: self invalidPositionProvidedErrorDescription ].
	
	marsRoverCardinalPoint _ MarsRoverDirection from: aCardinalPoint .
	
	^ self new initializeInPosition: aPosition andCardinalPoint: marsRoverCardinalPoint .! !

!methodRemoval: MarsRover class #inPosition:andCardinalPoint: stamp: 'ja 10/25/2020 16:26:20'!
inPosition: aPosition andCardinalPoint: aCardinalPoint
	
	| marsRoverCardinalPoint |
	
	(aPosition isKindOf: Point) ifFalse: [self error: self invalidPositionProvidedErrorDescription ].
	
	marsRoverCardinalPoint _ MarsRoverDirection from: aCardinalPoint .
	
	^ self new initializeInPosition: aPosition andCardinalPoint: marsRoverCardinalPoint .!
!MarsRover methodsFor: 'initialization' stamp: 'ja 10/25/2020 16:26:50'!
initializeInPosition: aPosition andDirection: aMarsRoverCardinalPoint 
	
	position := aPosition.
	
	direction := aMarsRoverCardinalPoint .! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 16:26:50' prior: 50943348!
inPosition: aPosition andDirection: aCardinalPoint
	
	| marsRoverCardinalPoint |
	
	(aPosition isKindOf: Point) ifFalse: [self error: self invalidPositionProvidedErrorDescription ].
	
	marsRoverCardinalPoint _ MarsRoverDirection from: aCardinalPoint .
	
	^ self new initializeInPosition: aPosition andDirection: marsRoverCardinalPoint .! !

!methodRemoval: MarsRover #initializeInPosition:andCardinalPoint: stamp: 'ja 10/25/2020 16:26:50'!
initializeInPosition: aPosition andCardinalPoint: aMarsRoverCardinalPoint 
	
	position := aPosition.
	
	direction := aMarsRoverCardinalPoint .!
!MarsRover methodsFor: 'initialization' stamp: 'ja 10/25/2020 16:27:01' prior: 50943375!
initializeInPosition: aPosition andDirection: aCardinalPoint 
	
	position := aPosition.
	
	direction := aCardinalPoint .! !
!MarsRover methodsFor: 'accessing' stamp: 'ja 10/25/2020 16:27:33'!
marsRoverDirection
	
	^ direction! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 16:27:33' prior: 50943233 overrides: 16881029!
= anOtherMarsRover

	^ position = anOtherMarsRover position and: (direction = anOtherMarsRover 	marsRoverDirection).! !

!methodRemoval: MarsRover #marsRoverCardinalPoint stamp: 'ja 10/25/2020 16:27:33'!
marsRoverCardinalPoint
	
	^ direction!
!MarsRoverTest methodsFor: 'setUp/tearDown' stamp: 'ja 10/25/2020 16:28:14' prior: 50941522 overrides: 16927572!
setUp 
	
	marsRoverInOriginPoitingToNorth _ MarsRover inPosition: (0@0) andDirection: $N.
	
	marsRoverInOriginPoitingToSouth _ MarsRover inPosition: (0@0) andDirection: $S.! !

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 16:28:19'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 16:28:19'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 16:28:19'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 16:28:19'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 16:28:19'!
PASSED!

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 16:28:19'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 16:28:19'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 16:28:19'!
ERROR!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 16:28:19'!
FAILURE!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 16:28:19'!
FAILURE!
!MarsRoverTest methodsFor: 'testing-composed movements' stamp: 'ja 10/25/2020 16:28:31' prior: 50942054!
test08ComposedMovementIsExecutedUntilInvalidCommandFound
	
	| marsRoverThatWillReceiveInvalidCommand marsRoverThatWillNotReceiveInvalidCommand |
	
	marsRoverThatWillReceiveInvalidCommand _ MarsRover inPosition: (0@0) andDirection: $N.
	marsRoverThatWillNotReceiveInvalidCommand _ MarsRover inPosition: (0@0) andDirection: $N.
	
	marsRoverThatWillReceiveInvalidCommand move: 'frrjb'.
	marsRoverThatWillNotReceiveInvalidCommand move: 'frr'.
	
	self  assert: marsRoverThatWillReceiveInvalidCommand = marsRoverThatWillNotReceiveInvalidCommand .! !
!MarsRoverTest methodsFor: 'testing-input validation' stamp: 'ja 10/25/2020 16:28:38' prior: 50942159!
test09PositionShouldBeAPoint

	| invalidMarsRover |
	
	self should: [invalidMarsRover _ MarsRover inPosition: 'something' andDirection: $N. self fail]
	      raise: Error 
	      withMessageText: MarsRover invalidPositionProvidedErrorDescription.
	! !
!MarsRoverTest methodsFor: 'testing-input validation' stamp: 'ja 10/25/2020 16:28:46' prior: 50942246!
test10CardinalPointShouldBeValid

	| invalidMarsRover |
	
	self should: [invalidMarsRover _ MarsRover inPosition: (0@0) andDirection: $K. self fail]
	      raise: Error 
	      withMessageText: MarsRover invalidCardinalPointProvidedErrorDescription.
	! !

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 16:28:53'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 16:28:53'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 16:28:53'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 16:28:53'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 16:28:53'!
PASSED!

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 16:28:53'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 16:28:53'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 16:28:53'!
PASSED!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 16:28:53'!
PASSED!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 16:28:53'!
PASSED!
!MarsRover methodsFor: 'movement' stamp: 'ja 10/25/2020 16:33:07' prior: 50943217!
exec: aCommand
											
	 direction follow: aCommand  on: self ! !
!MarsRover methodsFor: 'movement' stamp: 'ja 10/25/2020 16:33:10' prior: 50943545!
exec: aCommand
											
	 direction follow: aCommand  on: self . ! !
!MarsRover methodsFor: 'movement' stamp: 'ja 10/25/2020 16:33:20' prior: 50943550!
exec: aCommand
											
	 direction follow: aCommand on: self . ! !
!MarsRoverDirection methodsFor: 'movement' stamp: 'ja 10/25/2020 16:34:17'!
follow: aMarsRover on: aCommand

	self subclassResponsibility ! !

!methodRemoval: MarsRoverDirection #move:following: stamp: 'ja 10/25/2020 16:34:17'!
move: aMarsRover following: aCommand

	self subclassResponsibility !
!MarsRoverDirection methodsFor: 'movement' stamp: 'ja 10/25/2020 16:34:27' prior: 50943560!
follow: aCommand on: aMarsRover

	self subclassResponsibility ! !
!East methodsFor: 'movement' stamp: 'ja 10/25/2020 16:34:39' overrides: 50943570!
follow: aCommand on: aMarsRover
	
	^ (MarsRoverCommand from: aCommand) execWhenPointingToEast: aMarsRover .
	
! !
!North methodsFor: 'movement' stamp: 'ja 10/25/2020 16:34:49' overrides: 50943570!
follow: aCommand on: aMarsRover

	^ (MarsRoverCommand from: aCommand) execWhenPointingToNorth: aMarsRover .! !
!South methodsFor: 'movement' stamp: 'ja 10/25/2020 16:34:57' overrides: 50943570!
follow: aCommand on: aMarsRover

	^ (MarsRoverCommand from: aCommand) execWhenPointingToSouth: aMarsRover .! !
!West methodsFor: 'movement' stamp: 'ja 10/25/2020 16:35:11' overrides: 50943570!
follow: aCommand on: aMarsRover

	^ (MarsRoverCommand from: aCommand) execWhenPointingToWest: aMarsRover .! !

!methodRemoval: West #move:following: stamp: 'ja 10/25/2020 16:35:16'!
move: aMarsRover following: aCommand

	^ (MarsRoverCommand from: aCommand) execWhenPointingToWest: aMarsRover .!

!methodRemoval: South #move:following: stamp: 'ja 10/25/2020 16:35:20'!
move: aMarsRover following: aCommand

	^ (MarsRoverCommand from: aCommand) execWhenPointingToSouth: aMarsRover .!

!methodRemoval: North #move:following: stamp: 'ja 10/25/2020 16:35:24'!
move: aMarsRover following: aCommand

	^ (MarsRoverCommand from: aCommand) execWhenPointingToNorth: aMarsRover .!

!methodRemoval: East #move:following: stamp: 'ja 10/25/2020 16:35:30'!
move: aMarsRover following: aCommand
	
	^ (MarsRoverCommand from: aCommand) execWhenPointingToEast: aMarsRover .
	
!

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 16:35:35'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 16:35:35'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 16:35:35'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 16:35:35'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 16:35:35'!
PASSED!

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 16:35:35'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 16:35:35'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 16:35:35'!
PASSED!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 16:35:35'!
PASSED!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 16:35:35'!
PASSED!
!Rigth methodsFor: 'execution' stamp: 'ja 10/25/2020 16:37:18'!
execWhenPointingToEastOn: aMarsRover 

	^ aMarsRover pointToSouth .! !
!Forward methodsFor: 'execution' stamp: 'ja 10/25/2020 16:37:18'!
execWhenPointingToEastOn: aMarsRover 

	^ aMarsRover incrementPositionX ! !
!MarsRoverCommand methodsFor: 'execution' stamp: 'ja 10/25/2020 16:37:18'!
execWhenPointingToEastOn: aMarsRover 
	
	self subclassResponsibility ! !
!Backward methodsFor: 'execution' stamp: 'ja 10/25/2020 16:37:18' overrides: 50943667!
execWhenPointingToEastOn: aMarsRover 

	^ aMarsRover decrementPositionX .! !
!Left methodsFor: 'execution' stamp: 'ja 10/25/2020 16:37:18' overrides: 50943667!
execWhenPointingToEastOn: aMarsRover 
	
	^ aMarsRover pointToNorth .! !

!methodRemoval: Rigth #execWhenPointingToEast: stamp: 'ja 10/25/2020 16:37:18'!
execWhenPointingToEast: aMarsRover 

	^ aMarsRover pointToSouth .!

!methodRemoval: Forward #execWhenPointingToEast: stamp: 'ja 10/25/2020 16:37:18'!
execWhenPointingToEast: aMarsRover 

	^ aMarsRover incrementPositionX !

!methodRemoval: MarsRoverCommand #execWhenPointingToEast: stamp: 'ja 10/25/2020 16:37:18'!
execWhenPointingToEast: aMarsRover 
	
	self subclassResponsibility !

!methodRemoval: Backward #execWhenPointingToEast: stamp: 'ja 10/25/2020 16:37:18'!
execWhenPointingToEast: aMarsRover 

	^ aMarsRover decrementPositionX .!

!methodRemoval: Left #execWhenPointingToEast: stamp: 'ja 10/25/2020 16:37:18'!
execWhenPointingToEast: aMarsRover 
	
	^ aMarsRover pointToNorth .!
!Rigth methodsFor: 'execution' stamp: 'ja 10/25/2020 16:37:36'!
execWhenPointingToNorthOn: aMarsRover 

	^ aMarsRover pointToEast .! !
!Backward methodsFor: 'execution' stamp: 'ja 10/25/2020 16:37:36'!
execWhenPointingToNorthOn: aMarsRover 
	
	^ aMarsRover decrementPositionY .! !
!Left methodsFor: 'execution' stamp: 'ja 10/25/2020 16:37:36'!
execWhenPointingToNorthOn: aMarsRover 

	^ aMarsRover pointToWest .! !
!MarsRoverCommand methodsFor: 'execution' stamp: 'ja 10/25/2020 16:37:36'!
execWhenPointingToNorthOn: aMarsRover 
	
	self subclassResponsibility ! !
!Forward methodsFor: 'execution' stamp: 'ja 10/25/2020 16:37:36' overrides: 50943721!
execWhenPointingToNorthOn: aMarsRover 
	
	^ aMarsRover incrementPositionY.! !

!methodRemoval: Rigth #execWhenPointingToNorth: stamp: 'ja 10/25/2020 16:37:36'!
execWhenPointingToNorth: aMarsRover 

	^ aMarsRover pointToEast .!

!methodRemoval: Backward #execWhenPointingToNorth: stamp: 'ja 10/25/2020 16:37:36'!
execWhenPointingToNorth: aMarsRover 
	
	^ aMarsRover decrementPositionY .!

!methodRemoval: Left #execWhenPointingToNorth: stamp: 'ja 10/25/2020 16:37:36'!
execWhenPointingToNorth: aMarsRover 

	^ aMarsRover pointToWest .!

!methodRemoval: MarsRoverCommand #execWhenPointingToNorth: stamp: 'ja 10/25/2020 16:37:36'!
execWhenPointingToNorth: aMarsRover 
	
	self subclassResponsibility !

!methodRemoval: Forward #execWhenPointingToNorth: stamp: 'ja 10/25/2020 16:37:36'!
execWhenPointingToNorth: aMarsRover 
	
	^ aMarsRover incrementPositionY.!
!Rigth methodsFor: 'execution' stamp: 'ja 10/25/2020 16:37:47'!
execWhenPointingToSouthOn: aMarsRover 

	^ aMarsRover pointToWest .! !
!Left methodsFor: 'execution' stamp: 'ja 10/25/2020 16:37:47'!
execWhenPointingToSouthOn: aMarsRover 

	^ aMarsRover  pointToEast .! !
!Forward methodsFor: 'execution' stamp: 'ja 10/25/2020 16:37:47'!
execWhenPointingToSouthOn: aMarsRover 
	
	^ aMarsRover decrementPositionY .! !
!MarsRoverCommand methodsFor: 'execution' stamp: 'ja 10/25/2020 16:37:47'!
execWhenPointingToSouthOn: aMarsRover 
	
	self subclassResponsibility ! !
!Backward methodsFor: 'execution' stamp: 'ja 10/25/2020 16:37:47' overrides: 50943770!
execWhenPointingToSouthOn: aMarsRover 

	^ aMarsRover incrementPositionY .! !

!methodRemoval: Rigth #execWhenPointingToSouth: stamp: 'ja 10/25/2020 16:37:47'!
execWhenPointingToSouth: aMarsRover 

	^ aMarsRover pointToWest .!

!methodRemoval: Left #execWhenPointingToSouth: stamp: 'ja 10/25/2020 16:37:47'!
execWhenPointingToSouth: aMarsRover 

	^ aMarsRover  pointToEast .!

!methodRemoval: Forward #execWhenPointingToSouth: stamp: 'ja 10/25/2020 16:37:47'!
execWhenPointingToSouth: aMarsRover 
	
	^ aMarsRover decrementPositionY .!

!methodRemoval: MarsRoverCommand #execWhenPointingToSouth: stamp: 'ja 10/25/2020 16:37:47'!
execWhenPointingToSouth: aMarsRover 
	
	self subclassResponsibility !

!methodRemoval: Backward #execWhenPointingToSouth: stamp: 'ja 10/25/2020 16:37:47'!
execWhenPointingToSouth: aMarsRover 

	^ aMarsRover incrementPositionY .!
!MarsRoverCommand methodsFor: 'execution' stamp: 'ja 10/25/2020 16:37:59'!
execWhenPointingToWestOn: aMarsRover 
	
	self subclassResponsibility ! !
!Forward methodsFor: 'execution' stamp: 'ja 10/25/2020 16:37:59' overrides: 50943806!
execWhenPointingToWestOn: aMarsRover 

	^ aMarsRover decrementPositionX .! !
!Backward methodsFor: 'execution' stamp: 'ja 10/25/2020 16:37:59' overrides: 50943806!
execWhenPointingToWestOn: aMarsRover 

	^ aMarsRover incrementPositionX ! !
!Left methodsFor: 'execution' stamp: 'ja 10/25/2020 16:37:59' overrides: 50943806!
execWhenPointingToWestOn: aMarsRover 

	^ aMarsRover  pointToSouth .! !
!Rigth methodsFor: 'execution' stamp: 'ja 10/25/2020 16:37:59' overrides: 50943806!
execWhenPointingToWestOn: aMarsRover 

	^ aMarsRover pointToNorth .! !

!methodRemoval: MarsRoverCommand #execWhenPointingToWest: stamp: 'ja 10/25/2020 16:37:59'!
execWhenPointingToWest: aMarsRover 
	
	self subclassResponsibility !

!methodRemoval: Forward #execWhenPointingToWest: stamp: 'ja 10/25/2020 16:37:59'!
execWhenPointingToWest: aMarsRover 

	^ aMarsRover decrementPositionX .!

!methodRemoval: Backward #execWhenPointingToWest: stamp: 'ja 10/25/2020 16:37:59'!
execWhenPointingToWest: aMarsRover 

	^ aMarsRover incrementPositionX !

!methodRemoval: Left #execWhenPointingToWest: stamp: 'ja 10/25/2020 16:37:59'!
execWhenPointingToWest: aMarsRover 

	^ aMarsRover  pointToSouth .!

!methodRemoval: Rigth #execWhenPointingToWest: stamp: 'ja 10/25/2020 16:37:59'!
execWhenPointingToWest: aMarsRover 

	^ aMarsRover pointToNorth .!

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 16:38:03'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 16:38:03'!
FAILURE!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 16:38:03'!
FAILURE!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 16:38:03'!
FAILURE!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 16:38:03'!
FAILURE!

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 16:38:03'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 16:38:03'!
FAILURE!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 16:38:03'!
PASSED!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 16:38:03'!
PASSED!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 16:38:03'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 16:38:18'!
FAILURE!
!East methodsFor: 'movement' stamp: 'ja 10/25/2020 16:38:53' prior: 50943575 overrides: 50943570!
follow: aCommand on: aMarsRover
	
	^ (MarsRoverCommand from: aCommand) execWhenPointingToEastOn: aMarsRover .
	
! !
!North methodsFor: 'movement' stamp: 'ja 10/25/2020 16:39:06' prior: 50943582 overrides: 50943570!
follow: aCommand on: aMarsRover

	^ (MarsRoverCommand from: aCommand) execWhenPointingToNorthOn: aMarsRover .! !
!South methodsFor: 'movement' stamp: 'ja 10/25/2020 16:39:13' prior: 50943589 overrides: 50943570!
follow: aCommand on: aMarsRover

	^ (MarsRoverCommand from: aCommand) execWhenPointingToSouthOn: aMarsRover .! !
!West methodsFor: 'movement' stamp: 'ja 10/25/2020 16:39:18' prior: 50943596 overrides: 50943570!
follow: aCommand on: aMarsRover

	^ (MarsRoverCommand from: aCommand) execWhenPointingToWestOn: aMarsRover .! !

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 16:39:21'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 16:39:21'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 16:39:21'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 16:39:21'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 16:39:21'!
PASSED!

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 16:39:21'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 16:39:21'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 16:39:21'!
PASSED!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 16:39:21'!
PASSED!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 16:39:21'!
PASSED!
!MarsRover methodsFor: 'accessing' stamp: 'ja 10/25/2020 16:42:32'!
direction
	
	^ direction! !
!MarsRover methodsFor: 'comparation' stamp: 'ja 10/25/2020 16:42:43' prior: 50943416 overrides: 16881029!
= anOtherMarsRover

	^ position = anOtherMarsRover position and: (direction = anOtherMarsRover 	direction).! !

!methodRemoval: MarsRover #marsRoverDirection stamp: 'ja 10/25/2020 16:42:49'!
marsRoverDirection
	
	^ direction!

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 16:42:52'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 16:42:52'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 16:42:52'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 16:42:52'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 16:42:52'!
PASSED!

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 16:42:52'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 16:42:52'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 16:42:52'!
PASSED!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 16:42:52'!
PASSED!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 16:42:52'!
PASSED!
!MarsRoverDirection class methodsFor: 'class initialization' stamp: 'ja 10/25/2020 16:46:27' prior: 50942370!
from: aCardinalPoint

	aCardinalPoint = $N ifTrue: [ ^ North new ].
	aCardinalPoint = $S ifTrue: [ ^ South new ].
	aCardinalPoint = $E ifTrue: [ ^ East new ].
	aCardinalPoint = $W ifTrue: [ ^ West new ].
	
	MarsRover invalidCardinalPointProvidedErrorSignal .
	! !
!MarsRover class methodsFor: 'class initialization' stamp: 'ja 10/25/2020 16:46:42' prior: 50943383!
inPosition: aPosition andDirection: aCardinalPoint
	
	| marsRoverCardinalPoint |
	
	(aPosition isKindOf: Point) ifFalse: [ self error: self invalidPositionProvidedErrorDescription ].
	
	marsRoverCardinalPoint _ MarsRoverDirection from: aCardinalPoint .
	
	^ self new initializeInPosition: aPosition andDirection: marsRoverCardinalPoint .! !
!MarsRover class methodsFor: 'class initialization' stamp: 'ja 10/25/2020 16:47:19' prior: 50944011!
inPosition: aPosition andDirection: aCardinalPoint
	
	| direction |
	
	(aPosition isKindOf: Point) ifFalse: [ self error: self invalidPositionProvidedErrorDescription ].
	
	direction _ MarsRoverDirection from: aCardinalPoint .
	
	^ self new initializeInPosition: aPosition andDirection: direction .! !
!MarsRover class methodsFor: 'class initialization' stamp: 'ja 10/25/2020 16:48:13'!
shouldBeAPoint: aPosition

	^ (aPosition isKindOf: Point) ifFalse: [ self error: self invalidPositionProvidedErrorDescription ]! !
!MarsRover class methodsFor: 'class initialization' stamp: 'ja 10/25/2020 16:48:13' prior: 50944025!
inPosition: aPosition andDirection: aCardinalPoint
	
	| direction |
	
	self shouldBeAPoint: aPosition.
	
	direction _ MarsRoverDirection from: aCardinalPoint .
	
	^ self new initializeInPosition: aPosition andDirection: direction .! !

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 16:48:53'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 16:48:53'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 16:48:53'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 16:48:53'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 16:48:53'!
PASSED!

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 16:48:53'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 16:48:53'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 16:48:53'!
PASSED!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 16:48:53'!
PASSED!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 16:48:53'!
PASSED!

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 16:49:52'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 16:49:52'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 16:49:52'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 16:49:52'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 16:49:52'!
PASSED!

!testRun: #MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 16:49:52'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 16:49:52'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 16:49:52'!
PASSED!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 16:49:52'!
PASSED!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 16:49:52'!
PASSED!

----QUIT----(25 October 2020 18:54:46) CuisUniversity-4365.image priorSource: 19439037!

----STARTUP---- (25 October 2020 21:21:02) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4365.image!

!MarsRoverTest methodsFor: 'testing-simple movements' stamp: 'ja 10/25/2020 21:29:10' prior: 50941731!
test06DoNothingOnInvalidCommand
	
	self should: [marsRoverInOriginPoitingToNorth move: 'k'. self fail] 
	       raise: Error
	       withMessageText: MarsRover invalidComandErrorDescription .
	
	self assertThat: marsRoverInOriginPoitingToNorth isInPosition: (0@0) poitingTo: 	$N.	
	
! !
!MarsRoverTest methodsFor: 'testing-simple movements' stamp: 'ja 10/25/2020 21:30:21'!
test06InvalidCommandRaisesExceptionAndDontModifyMarsRover
	
	self should: [marsRoverInOriginPoitingToNorth move: 'k'. self fail] 
	       raise: Error
	       withMessageText: MarsRover invalidComandErrorDescription .
	
	self assertThat: marsRoverInOriginPoitingToNorth isInPosition: (0@0) poitingTo: 	$N.	
	
! !

!methodRemoval: MarsRoverTest #test06DoNothingOnInvalidCommand stamp: 'ja 10/25/2020 21:30:21'!
test06DoNothingOnInvalidCommand
	
	self should: [marsRoverInOriginPoitingToNorth move: 'k'. self fail] 
	       raise: Error
	       withMessageText: MarsRover invalidComandErrorDescription .
	
	self assertThat: marsRoverInOriginPoitingToNorth isInPosition: (0@0) poitingTo: 	$N.	
	
!
!MarsRover methodsFor: 'movement' stamp: 'ja 10/25/2020 21:31:08' prior: 50943041!
move: aCommandCollection
											
	aCommandCollection do: [ :command | [ self exec: command ] ]! !
!MarsRover methodsFor: 'movement' stamp: 'ja 10/25/2020 21:31:20' prior: 50944164!
move: aCommandCollection
											
	aCommandCollection do: [ :command |  self exec: command  ]! !
!MarsRover methodsFor: 'movement' stamp: 'ja 10/25/2020 21:31:50' prior: 50944170!
move: aCommandCollection
											
	aCommandCollection do: [ :aCommand |  self exec: aCommand  ]! !

!testRun: #MarsRoverTest #test06InvalidCommandRaisesExceptionAndDontModifyMarsRover stamp: 'ja 10/25/2020 21:32:08'!
PASSED!
!MarsRoverTest methodsFor: 'testing-composed movements' stamp: 'ja 10/25/2020 21:33:18' prior: 50943469!
test08ComposedMovementIsExecutedUntilInvalidCommandFound
	
	| marsRoverThatWillReceiveInvalidCommand marsRoverThatWillNotReceiveInvalidCommand |
	
	marsRoverThatWillReceiveInvalidCommand _ MarsRover inPosition: (0@0) andDirection: $N.
	marsRoverThatWillNotReceiveInvalidCommand _ MarsRover inPosition: (0@0) andDirection: $N.
	
	marsRoverThatWillReceiveInvalidCommand move: 'frrjb'.
	marsRoverThatWillNotReceiveInvalidCommand move: 'frr'.
	
	self should: [marsRoverThatWillReceiveInvalidCommand move: 'frrjb'. self fail]  
	       raise: Error
	       withMessageText: MarsRover invalidComandErrorDescription .
	
	self  assert: marsRoverThatWillReceiveInvalidCommand = marsRoverThatWillNotReceiveInvalidCommand .! !

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 21:33:27'!
ERROR!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 21:33:27'!
ERROR!
!MarsRoverTest methodsFor: 'testing-composed movements' stamp: 'ja 10/25/2020 21:33:58' prior: 50944187!
test08ComposedMovementIsExecutedUntilInvalidCommandFound
	
	| marsRoverThatWillReceiveInvalidCommand marsRoverThatWillNotReceiveInvalidCommand |
	
	marsRoverThatWillReceiveInvalidCommand _ MarsRover inPosition: (0@0) andDirection: $N.
	marsRoverThatWillNotReceiveInvalidCommand _ MarsRover inPosition: (0@0) andDirection: $N.
	
	marsRoverThatWillNotReceiveInvalidCommand move: 'frr'.
	
	self should: [marsRoverThatWillReceiveInvalidCommand move: 'frrjb'. self fail]  
	       raise: Error
	       withMessageText: MarsRover invalidComandErrorDescription .
	
	self  assert: marsRoverThatWillReceiveInvalidCommand = marsRoverThatWillNotReceiveInvalidCommand .! !

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 21:34:02'!
PASSED!

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 21:34:07'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 21:34:07'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 21:34:07'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 21:34:07'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 21:34:07'!
PASSED!

!testRun: #MarsRoverTest #test06InvalidCommandRaisesExceptionAndDontModifyMarsRover stamp: 'ja 10/25/2020 21:34:07'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 21:34:07'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 21:34:07'!
PASSED!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 21:34:07'!
PASSED!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 21:34:07'!
PASSED!
!MarsRoverTest methodsFor: 'testing-simple movements' stamp: 'ja 10/25/2020 21:35:39'!
test06OnInvalidCommandDoNothingAndRaiseException
	
	self should: [marsRoverInOriginPoitingToNorth move: 'k'. self fail] 
	       raise: Error
	       withMessageText: MarsRover invalidComandErrorDescription .
	
	self assertThat: marsRoverInOriginPoitingToNorth isInPosition: (0@0) poitingTo: 	$N.	
	
! !

!methodRemoval: MarsRoverTest #test06InvalidCommandRaisesExceptionAndDontModifyMarsRover stamp: 'ja 10/25/2020 21:35:39'!
test06InvalidCommandRaisesExceptionAndDontModifyMarsRover
	
	self should: [marsRoverInOriginPoitingToNorth move: 'k'. self fail] 
	       raise: Error
	       withMessageText: MarsRover invalidComandErrorDescription .
	
	self assertThat: marsRoverInOriginPoitingToNorth isInPosition: (0@0) poitingTo: 	$N.	
	
!

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 21:35:43'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 21:35:43'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 21:35:43'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 21:35:43'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 21:35:43'!
PASSED!

!testRun: #MarsRoverTest #test06OnInvalidCommandDoNothingAndRaiseException stamp: 'ja 10/25/2020 21:35:43'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 21:35:43'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 21:35:43'!
PASSED!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 21:35:43'!
PASSED!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 21:35:43'!
PASSED!

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 21:36:04'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 21:36:04'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 21:36:04'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 21:36:04'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 21:36:04'!
PASSED!

!testRun: #MarsRoverTest #test06OnInvalidCommandDoNothingAndRaiseException stamp: 'ja 10/25/2020 21:36:04'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 21:36:04'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 21:36:04'!
PASSED!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 21:36:04'!
PASSED!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 21:36:04'!
PASSED!
!MarsRoverTest methodsFor: 'testing-simple movements' stamp: 'ja 10/25/2020 21:43:29' prior: 50944282!
test06OnInvalidCommandDoNothingAndRaiseException
	
"	self should: [marsRoverInOriginPoitingToNorth move: 'k'. self fail] 
	       raise: Error
	       withMessageText: MarsRover invalidComandErrorDescription ."
	
	
	
	self should: [marsRoverInOriginPoitingToNorth move: 'k'. self fail] 
	       raiseInvalidCommandErrorAsserting: [self assertThat: marsRoverInOriginPoitingToNorth isInPosition: (0@0) poitingTo: 	$N.	]! !

!testRun: #MarsRoverTest #test06OnInvalidCommandDoNothingAndRaiseException stamp: 'ja 10/25/2020 21:43:46'!
ERROR!

!testRun: #MarsRoverTest #test06OnInvalidCommandDoNothingAndRaiseException stamp: 'ja 10/25/2020 21:43:46'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 21:43:55'!
should: aBlockClosure raiseInvalidCommandErrorAsserting: aBlockClosure2 
	self shouldBeImplemented.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 21:45:13' prior: 50944397!
should: aBlockClosure raiseInvalidCommandErrorAsserting: aBlockClosure2 
	
	self should: aBlockClosure value 
		raise: Error 
		withMessageText: MarsRover invalidComandErrorDescription.
		
	aBlockClosure2 value! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 21:46:31' prior: 50944404!
should: aBlockWithInvalidCommand raiseInvalidCommandErrorAsserting: aBlockToAssert 
	
	self should: aBlockWithInvalidCommand value 
		raise: Error 
		withMessageText: MarsRover invalidComandErrorDescription.
		
	aBlockToAssert value! !

!testRun: #MarsRoverTest #test06OnInvalidCommandDoNothingAndRaiseException stamp: 'ja 10/25/2020 21:46:33'!
ERROR!
!MarsRoverTest methodsFor: 'testing-simple movements' stamp: 'ja 10/25/2020 21:46:57' prior: 50944374!
test06OnInvalidCommandDoNothingAndRaiseException

	self should: [marsRoverInOriginPoitingToNorth move: 'k'. self fail] 
	       raiseInvalidCommandErrorAsserting: [self assertThat: marsRoverInOriginPoitingToNorth isInPosition: (0@0) poitingTo: 	$N.	]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 10/25/2020 21:47:04' prior: 50944414!
should: aBlockWithInvalidCommand raiseInvalidCommandErrorAsserting: aBlockToAssert 
	
	self should: aBlockWithInvalidCommand 
		raise: Error 
		withMessageText: MarsRover invalidComandErrorDescription.
		
	aBlockToAssert value! !

!testRun: #MarsRoverTest #test06OnInvalidCommandDoNothingAndRaiseException stamp: 'ja 10/25/2020 21:47:07'!
PASSED!
!MarsRoverTest methodsFor: 'testing-composed movements' stamp: 'ja 10/25/2020 21:47:58' prior: 50944221!
test08ComposedMovementIsExecutedUntilInvalidCommandFound
	
	| marsRoverThatWillReceiveInvalidCommand marsRoverThatWillNotReceiveInvalidCommand |
	
	marsRoverThatWillReceiveInvalidCommand _ MarsRover inPosition: (0@0) andDirection: $N.
	marsRoverThatWillNotReceiveInvalidCommand _ MarsRover inPosition: (0@0) andDirection: $N.
	
	marsRoverThatWillNotReceiveInvalidCommand move: 'frr'.
	
	
	self should:  [marsRoverThatWillReceiveInvalidCommand move: 'frrjb'. self fail] 
		raiseInvalidCommandErrorAsserting: [self  assert: marsRoverThatWillReceiveInvalidCommand = marsRoverThatWillNotReceiveInvalidCommand ].
	
	
	
	self should: [marsRoverThatWillReceiveInvalidCommand move: 'frrjb'. self fail]  
	       raise: Error
	       withMessageText: MarsRover invalidComandErrorDescription .
	
	self  assert: marsRoverThatWillReceiveInvalidCommand = marsRoverThatWillNotReceiveInvalidCommand .! !
!MarsRoverTest methodsFor: 'testing-composed movements' stamp: 'ja 10/25/2020 21:48:03' prior: 50944455!
test08ComposedMovementIsExecutedUntilInvalidCommandFound
	
	| marsRoverThatWillReceiveInvalidCommand marsRoverThatWillNotReceiveInvalidCommand |
	
	marsRoverThatWillReceiveInvalidCommand _ MarsRover inPosition: (0@0) andDirection: $N.
	marsRoverThatWillNotReceiveInvalidCommand _ MarsRover inPosition: (0@0) andDirection: $N.
	
	marsRoverThatWillNotReceiveInvalidCommand move: 'frr'.
	
	
	self should:  [marsRoverThatWillReceiveInvalidCommand move: 'frrjb'. self fail] 
		raiseInvalidCommandErrorAsserting: [self  assert: marsRoverThatWillReceiveInvalidCommand = marsRoverThatWillNotReceiveInvalidCommand ].
! !

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 21:48:06'!
PASSED!
!MarsRoverTest methodsFor: 'testing-composed movements' stamp: 'ja 10/25/2020 21:48:20' prior: 50944487!
test08ComposedMovementIsExecutedUntilInvalidCommandFound
	
	| marsRoverThatWillReceiveInvalidCommand marsRoverThatWillNotReceiveInvalidCommand |
	
	marsRoverThatWillReceiveInvalidCommand _ MarsRover inPosition: (0@0) andDirection: $N.
	marsRoverThatWillNotReceiveInvalidCommand _ MarsRover inPosition: (0@0) andDirection: $N.
	
	marsRoverThatWillNotReceiveInvalidCommand move: 'frr'.
	
	self should:  [marsRoverThatWillReceiveInvalidCommand move: 'frrjb'. self fail] 
	      raiseInvalidCommandErrorAsserting: [self  assert: marsRoverThatWillReceiveInvalidCommand = marsRoverThatWillNotReceiveInvalidCommand ].
! !
!MarsRoverTest methodsFor: 'testing-composed movements' stamp: 'ja 10/25/2020 21:48:32' prior: 50944514!
test08ComposedMovementIsExecutedUntilInvalidCommandFound
	
	| marsRoverThatWillReceiveInvalidCommand marsRoverThatWillNotReceiveInvalidCommand |
	
	marsRoverThatWillReceiveInvalidCommand _ MarsRover inPosition: (0@0) andDirection: $N.
	
	marsRoverThatWillNotReceiveInvalidCommand _ MarsRover inPosition: (0@0) andDirection: $N.
	
	marsRoverThatWillNotReceiveInvalidCommand move: 'frr'.
	
	self should:  [marsRoverThatWillReceiveInvalidCommand move: 'frrjb'. self fail] 
	      raiseInvalidCommandErrorAsserting: [self  assert: marsRoverThatWillReceiveInvalidCommand = marsRoverThatWillNotReceiveInvalidCommand ].
! !

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 21:48:48'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 21:48:48'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 21:48:48'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 21:48:48'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 21:48:48'!
PASSED!

!testRun: #MarsRoverTest #test06OnInvalidCommandDoNothingAndRaiseException stamp: 'ja 10/25/2020 21:48:48'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 21:48:48'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 21:48:48'!
PASSED!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 21:48:48'!
PASSED!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 21:48:48'!
PASSED!

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 21:49:43'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 21:49:43'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 21:49:43'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 21:49:43'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 21:49:43'!
PASSED!

!testRun: #MarsRoverTest #test06OnInvalidCommandDoNothingAndRaiseException stamp: 'ja 10/25/2020 21:49:43'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 21:49:43'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 21:49:43'!
PASSED!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 21:49:43'!
PASSED!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 21:49:43'!
PASSED!

!testRun: #MarsRoverTest #test01AtTheBeginningHasPositionAndCardinalPoint stamp: 'ja 10/25/2020 21:51:02'!
PASSED!

!testRun: #MarsRoverTest #test02MovesForwardCorrectly stamp: 'ja 10/25/2020 21:51:02'!
PASSED!

!testRun: #MarsRoverTest #test03MovesRigthCorrectly stamp: 'ja 10/25/2020 21:51:02'!
PASSED!

!testRun: #MarsRoverTest #test04MovesLeftCorrectly stamp: 'ja 10/25/2020 21:51:02'!
PASSED!

!testRun: #MarsRoverTest #test05MovesBackwardCorrectly stamp: 'ja 10/25/2020 21:51:02'!
PASSED!

!testRun: #MarsRoverTest #test06OnInvalidCommandDoNothingAndRaiseException stamp: 'ja 10/25/2020 21:51:02'!
PASSED!

!testRun: #MarsRoverTest #test07MakesComposedMovementCorrectly stamp: 'ja 10/25/2020 21:51:02'!
PASSED!

!testRun: #MarsRoverTest #test08ComposedMovementIsExecutedUntilInvalidCommandFound stamp: 'ja 10/25/2020 21:51:02'!
PASSED!

!testRun: #MarsRoverTest #test09PositionShouldBeAPoint stamp: 'ja 10/25/2020 21:51:02'!
PASSED!

!testRun: #MarsRoverTest #test10CardinalPointShouldBeValid stamp: 'ja 10/25/2020 21:51:02'!
PASSED!