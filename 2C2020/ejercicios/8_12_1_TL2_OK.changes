----STARTUP---- (18 November 2020 17:28:20) as /home/doraserver/CuisUniversity/CuisUniversity-4383.image!

!Cart methodsFor: 'initialization' stamp: 'EMI 11/18/2020 17:32:39' prior: 50916797 overrides: 16896425!
initialize
	amount _ 0.
	books _ Bag new.! !
!Cart methodsFor: 'testing' stamp: 'EMI 11/18/2020 17:33:05' prior: 50916829!
contains: aBook 
	^books includes: aBook.! !

a _ Bag with: 4 with:4.!

a includes:4!

a occurrencesOf: 4.!
!Cart methodsFor: 'adding' stamp: 'EMI 11/18/2020 17:34:42' prior: 50916811!
add: aBook
	amount _ amount + 1.
	books add: aBook.
	
	! !
!Cart methodsFor: 'accessing' stamp: 'EMI 11/18/2020 17:36:29' prior: 50916911!
copiesOf: aBook
	^books occurrencesOf: aBook.! !
!Cart methodsFor: 'adding' stamp: 'EMI 11/18/2020 17:37:06' prior: 50916817!
add: aBook amount: aNumberOfCopies 
	amount _ amount + aNumberOfCopies.
	books add: aBook withOccurrences: aNumberOfCopies.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'EMI 11/18/2020 17:37:22'!
PASSED!

!testRun: #CartTest #test02CartCanAddOneBook stamp: 'EMI 11/18/2020 17:37:22'!
PASSED!

!testRun: #CartTest #test03CartCanAddMoreThanOneCopyOfABookAtOnce stamp: 'EMI 11/18/2020 17:37:22'!
PASSED!

!testRun: #CartTest #test04CartCanAddMoreThanOneBook stamp: 'EMI 11/18/2020 17:37:22'!
PASSED!

!testRun: #CartTest #test05CartCanAddMoreThanOneBookWithDifferentAmountOfCopies stamp: 'EMI 11/18/2020 17:37:22'!
PASSED!

!testRun: #CartTest #test06CartCanShowContents stamp: 'EMI 11/18/2020 17:37:22'!
ERROR!

!testRun: #CartTest #test06CartCanShowContents stamp: 'EMI 11/18/2020 17:37:22'!
ERROR!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'EMI 11/18/2020 17:38:11'!
PASSED!

!testRun: #CartTest #test02CartCanAddOneBook stamp: 'EMI 11/18/2020 17:38:11'!
PASSED!

!testRun: #CartTest #test03CartCanAddMoreThanOneCopyOfABookAtOnce stamp: 'EMI 11/18/2020 17:38:11'!
PASSED!

!testRun: #CartTest #test04CartCanAddMoreThanOneBook stamp: 'EMI 11/18/2020 17:38:11'!
PASSED!

!testRun: #CartTest #test05CartCanAddMoreThanOneBookWithDifferentAmountOfCopies stamp: 'EMI 11/18/2020 17:38:11'!
PASSED!

!testRun: #CartTest #test06CartCanShowContents stamp: 'EMI 11/18/2020 17:38:11'!
ERROR!

!testRun: #CartTest #test06CartCanShowContents stamp: 'EMI 11/18/2020 17:38:11'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'EMI 11/18/2020 17:38:22'!
contents
	self shouldBeImplemented.! !

a _ Bag with: 4 with: 4.!

a _ Bag with: 4 with: 4.!

a asOrderedCollection.!

a asDictionary.!

a asSet.!

a contents.!

a _ Bag with: 1 with: 1.!

a collect: [:element | a occurrencesOf: element].!

b _ OrderedCollection new.!

a do: [:element | b add: (a occurrencesOf: element)]. !

b!

a do: [:element | b add: element].!

b!

a _ Bag with: 1 with: 1 with: 4.
b _ OrderedCollection new.
a do: [:element | b add: element].
b !
!Cart methodsFor: 'accessing' stamp: 'EMI 11/18/2020 17:51:15' prior: 50917145!
contents
	^books copy.! !
!Cart methodsFor: 'adding' stamp: 'EMI 11/18/2020 17:52:25' prior: 50917087!
add: aBook
	amount _ amount + 1.
	self checkIfBookIsInCatalogue ifFalse: [].
	books add: aBook.
	
	! !
!Cart methodsFor: 'adding' stamp: 'EMI 11/18/2020 17:53:16' prior: 50917167!
add: aBook
	amount _ amount + 1.
	(self checkIfBookIsInCatalogue: aBook) ifFalse: [].
	books add: aBook.
	
	! !
!Cart methodsFor: 'private' stamp: 'EMI 11/18/2020 17:53:33'!
checkIfBookIsInCatalogue: aBook
	^true.! !
!Cart methodsFor: 'adding' stamp: 'EMI 11/18/2020 17:54:28' prior: 50917173!
add: aBook
	amount _ amount + 1.
	(self checkIfBookIsInCatalogue: aBook) ifFalse: [^Error signal: self class bookNotFoundInCatalogue.].
	books add: aBook.
	
	! !
!Cart methodsFor: 'adding' stamp: 'EMI 11/18/2020 17:54:45' prior: 50917183!
add: aBook
	(self checkIfBookIsInCatalogue: aBook) ifFalse: [^Error signal: self class bookNotFoundInCatalogue.].
	amount _ amount + 1.
	books add: aBook.
	
	! !
!Cart methodsFor: 'adding' stamp: 'EMI 11/18/2020 17:54:52' prior: 50917096!
add: aBook amount: aNumberOfCopies 
	(self checkIfBookIsInCatalogue: aBook) ifFalse: [^Error signal: self class bookNotFoundInCatalogue.].
	amount _ amount + aNumberOfCopies.
	books add: aBook withOccurrences: aNumberOfCopies.! !
!Cart class methodsFor: 'nil' stamp: 'EMI 11/18/2020 17:57:44'!
bookNotFoundInCatalogue
	^'Cannot find requested book in catalogue.'! !
!CartTest methodsFor: 'tests' stamp: 'EMI 11/18/2020 17:59:03' prior: 50917051!
test06CartCanShowContents
	| carrito expectedResult |
	
	carrito _ Cart create.
	carrito add: 'El principito'.
	carrito add: 'El principito' amount: 2.
	carrito add: 'El principote'.
	
	expectedResult _ Bag with: 'El principote'; add: 'El principito' withOccurrences: 3.
	
	self assert: (carrito contents) equals: expectedResult.! !

!testRun: #CartTest #test06CartCanShowContents stamp: 'EMI 11/18/2020 17:59:56'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'EMI 11/18/2020 18:00:21' prior: 50917214!
test06CartCanShowContents
	| carrito expectedResult |
	
	carrito _ Cart create.
	carrito add: 'El principito'.
	carrito add: 'El principito' amount: 2.
	carrito add: 'El principote'.
	
	expectedResult _ Bag with: 'El principote'.
	expectedResult add: 'El principito' withOccurrences: 3.
	
	self assert: (carrito contents) equals: expectedResult.! !

!testRun: #CartTest #test06CartCanShowContents stamp: 'EMI 11/18/2020 18:00:23'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'EMI 11/18/2020 18:00:23'!
PASSED!

!testRun: #CartTest #test02CartCanAddOneBook stamp: 'EMI 11/18/2020 18:00:23'!
PASSED!

!testRun: #CartTest #test03CartCanAddMoreThanOneCopyOfABookAtOnce stamp: 'EMI 11/18/2020 18:00:23'!
PASSED!

!testRun: #CartTest #test04CartCanAddMoreThanOneBook stamp: 'EMI 11/18/2020 18:00:23'!
PASSED!

!testRun: #CartTest #test05CartCanAddMoreThanOneBookWithDifferentAmountOfCopies stamp: 'EMI 11/18/2020 18:00:23'!
PASSED!

!testRun: #CartTest #test06CartCanShowContents stamp: 'EMI 11/18/2020 18:00:23'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'EMI 11/18/2020 18:00:56'!
test07CartCannotAddBookMissingFromCatalogue
	| carrito expectedResult |
	
	carrito _ Cart create.
	carrito add: 'El principito'.
	carrito add: 'El principito' amount: 2.
	carrito add: 'El principote'.
	
	expectedResult _ Bag with: 'El principote'.
	expectedResult add: 'El principito' withOccurrences: 3.
	
	self assert: (carrito contents) equals: expectedResult.! !
!CartTest methodsFor: 'tests' stamp: 'EMI 11/18/2020 18:02:53' prior: 50917265!
test07CartCannotAddBookMissingFromCatalogue
	| carrito catalogue |
	
	carrito _ Cart create.
	
	self should: [carrito add: 'La celula'] 
	raise: Error 
	withExceptionDo: [:anError| self assert: anError messageText equals: Cart bookNotFoundInCatalogue].! !
!CartTest methodsFor: 'tests' stamp: 'EMI 11/18/2020 18:03:18' prior: 50917279!
test07CartCannotAddBookMissingFromCatalogue
	| carrito catalogue |
	
	catalogue _ Set with: 'El principito' with: 'El principote'.
	carrito _ Cart create.
	
	self should: [carrito add: 'La celula'] 
	raise: Error 
	withExceptionDo: [:anError| self assert: anError messageText equals: Cart bookNotFoundInCatalogue].! !
!CartTest methodsFor: 'tests' stamp: 'EMI 11/18/2020 18:08:36' prior: 50917290!
test07CartCannotAddBookMissingFromCatalogue
	| carrito catalogue |
	
	catalogue _ Set with: 'El principito' with: 'El principote'.
	carrito _ Cart create.
	
	self should: [carrito add: 'La celula'] 
	raise: Error 
	withExceptionDo: [:anError| 
		self assert: anError messageText equals: Cart bookNotFoundInCatalogue.
		self assert: carrito isEmpty.
		].! !
!CartTest methodsFor: 'tests' stamp: 'EMI 11/18/2020 18:08:57' prior: 50917303!
test07CartCannotAddBookMissingFromCatalogue
	| carrito catalogue |
	
	catalogue _ Set with: 'El principito' with: 'El principote'.
	carrito _ Cart createUsingCatalogue: catalogue.
	
	self should: [carrito add: 'La celula'] 
	raise: Error 
	withExceptionDo: [:anError| 
		self assert: anError messageText equals: Cart bookNotFoundInCatalogue.
		self assert: carrito isEmpty.
		].! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'EMI 11/18/2020 18:09:24'!
createUsingCatalogue: aCatalogue
	^self new initialize: aCatalogue.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'EMI 11/18/2020 18:09:49'!
Object subclass: #Cart
	instanceVariableNames: 'books amount catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'EMI 11/18/2020 18:09:47'!
initialize: aCatalogue
	amount _ 0.
	books _ Bag new.
	catalogue _ aCatalogue.! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'EMI 11/18/2020 18:10:17'!
bookNotFoundInCatalogueMessage
	^'Cannot find requested book in catalogue.'! !
!Cart methodsFor: 'as yet unclassified' stamp: 'EMI 11/18/2020 18:10:17' prior: 50917191!
add: aBook
	(self checkIfBookIsInCatalogue: aBook) ifFalse: [^Error signal: self class bookNotFoundInCatalogueMessage.].
	amount _ amount + 1.
	books add: aBook.
	
	! !
!Cart methodsFor: 'as yet unclassified' stamp: 'EMI 11/18/2020 18:10:17' prior: 50917199!
add: aBook amount: aNumberOfCopies 
	(self checkIfBookIsInCatalogue: aBook) ifFalse: [^Error signal: self class bookNotFoundInCatalogueMessage.].
	amount _ amount + aNumberOfCopies.
	books add: aBook withOccurrences: aNumberOfCopies.! !

!methodRemoval: Cart class #bookNotFoundInCatalogue stamp: 'EMI 11/18/2020 18:10:17'!
bookNotFoundInCatalogue
	^'Cannot find requested book in catalogue.'!

!testRun: #CartTest #test07CartCannotAddBookMissingFromCatalogue stamp: 'EMI 11/18/2020 18:10:33'!
FAILURE!

!testRun: #CartTest #test07CartCannotAddBookMissingFromCatalogue stamp: 'EMI 11/18/2020 18:10:33'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'EMI 11/18/2020 18:10:48' prior: 50917317!
test07CartCannotAddBookMissingFromCatalogue
	| carrito catalogue |
	
	catalogue _ Set with: 'El principito' with: 'El principote'.
	carrito _ Cart createUsingCatalogue: catalogue.
	
	self should: [carrito add: 'La celula'] 
	raise: Error 
	withExceptionDo: [:anError| 
		self assert: anError messageText equals: Cart bookNotFoundInCatalogueMessage.
		self assert: carrito isEmpty.
		].! !

!testRun: #CartTest #test07CartCannotAddBookMissingFromCatalogue stamp: 'EMI 11/18/2020 18:10:50'!
FAILURE!
!Cart methodsFor: 'private' stamp: 'EMI 11/18/2020 18:11:35' prior: 50917179!
checkIfBookIsInCatalogue: aBook
	^catalogue includes: aBook.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'EMI 11/18/2020 18:11:38'!
PASSED!

!testRun: #CartTest #test02CartCanAddOneBook stamp: 'EMI 11/18/2020 18:11:38'!
ERROR!

!testRun: #CartTest #test03CartCanAddMoreThanOneCopyOfABookAtOnce stamp: 'EMI 11/18/2020 18:11:38'!
ERROR!

!testRun: #CartTest #test04CartCanAddMoreThanOneBook stamp: 'EMI 11/18/2020 18:11:38'!
ERROR!

!testRun: #CartTest #test05CartCanAddMoreThanOneBookWithDifferentAmountOfCopies stamp: 'EMI 11/18/2020 18:11:38'!
ERROR!

!testRun: #CartTest #test06CartCanShowContents stamp: 'EMI 11/18/2020 18:11:38'!
ERROR!

!testRun: #CartTest #test07CartCannotAddBookMissingFromCatalogue stamp: 'EMI 11/18/2020 18:11:38'!
PASSED!
!CartTest methodsFor: 'nil' stamp: 'EMI 11/18/2020 18:12:25' overrides: 16927572!
setUp! !
!CartTest methodsFor: 'tests' stamp: 'EMI 11/18/2020 18:12:37' prior: 50917387!
test07CartCannotAddBookMissingFromCatalogue
	| carrito |
	

	
	self should: [carrito add: 'La celula'] 
	raise: Error 
	withExceptionDo: [:anError| 
		self assert: anError messageText equals: Cart bookNotFoundInCatalogueMessage.
		self assert: carrito isEmpty.
		].! !
!CartTest methodsFor: 'tests' stamp: 'EMI 11/18/2020 18:13:06' prior: 50917435!
test07CartCannotAddBookMissingFromCatalogue
	| carrito |
	

	
	self should: [carrito add: 'La celula'] 
	raise: Error 
	withExceptionDo: [:anError| 
		self assert: anError messageText equals: Cart bookNotFoundInCatalogueMessage.
		self assert: carrito isEmpty.
		].! !

!classDefinition: #CartTest category: 'TusLibros' stamp: 'EMI 11/18/2020 18:13:20'!
TestCase subclass: #CartTest
	instanceVariableNames: 'catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #CartTest
	instanceVariableNames: 'catalogue carrito'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'EMI 11/18/2020 18:14:42'!
TestCase subclass: #CartTest
	instanceVariableNames: 'catalogue c'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/18/2020 18:14:39' prior: 50917432 overrides: 16927572!
setUp
	catalogue _ Set with: 'El principito' with: 'El principote'.
	c _ Cart createUsingCatalogue: catalogue.! !
!CartTest methodsFor: 'tests' stamp: 'EMI 11/18/2020 18:14:52' prior: 50916506!
test01NewCartIsEmpty
	c _ Cart create.
	self assert: (c isEmpty).! !
!CartTest methodsFor: 'tests' stamp: 'EMI 11/18/2020 18:15:04' prior: 50916613!
test02CartCanAddOneBook
	c add: 'El principito'.
	self deny: (c isEmpty).
	self assert: (c productsAmount) equals: 1.! !
!CartTest methodsFor: 'tests' stamp: 'EMI 11/18/2020 18:15:13' prior: 50916933!
test03CartCanAddMoreThanOneCopyOfABookAtOnce
	c add: 'El principito' amount: 2.
	self deny: (c isEmpty).
	self assert: (c productsAmount) equals: 2.
	self assert: (c copiesOf: 'El principito') equals: 2.! !
!CartTest methodsFor: 'tests' stamp: 'EMI 11/18/2020 18:15:25' prior: 50916862!
test04CartCanAddMoreThanOneBook
	c _ Cart create.
	c add: 'El principito'.
	c add: 'El principote'.
	self deny: (c isEmpty).
	self assert: (c productsAmount) equals: 2.
	self assert: (c contains: 'El principito').
	self assert: (c contains: 'El principote').! !
!CartTest methodsFor: 'tests' stamp: 'EMI 11/18/2020 18:15:38' prior: 50916995!
test05CartCanAddMoreThanOneBookWithDifferentAmountOfCopies
	c add: 'El principito'.
	c add: 'El principito' amount: 2.
	c add: 'El principote'.
	self deny: (c isEmpty).
	self assert: (c productsAmount) equals: 4.
	self assert: (c contains: 'El principito').
	self assert: (c contains: 'El principote').
	self assert: (c copiesOf: 'El principito') equals: 3.
	self assert: (c copiesOf: 'El principote') equals: 1.! !
!CartTest methodsFor: 'tests' stamp: 'EMI 11/18/2020 18:15:57' prior: 50917230!
test06CartCanShowContents
	| expectedResult |
	
	c add: 'El principito'.
	c add: 'El principito' amount: 2.
	c add: 'El principote'.
	
	expectedResult _ Bag with: 'El principote'.
	expectedResult add: 'El principito' withOccurrences: 3.
	
	self assert: (c contents) equals: expectedResult.! !
!CartTest methodsFor: 'tests' stamp: 'EMI 11/18/2020 18:16:08' prior: 50917446!
test07CartCannotAddBookMissingFromCatalogue
	self should: [c add: 'La celula'] 
	raise: Error 
	withExceptionDo: [:anError| 
		self assert: anError messageText equals: Cart bookNotFoundInCatalogueMessage.
		self assert: c isEmpty.
		].! !

!classDefinition: #CartTest category: 'TusLibros' stamp: 'EMI 11/18/2020 18:16:25'!
TestCase subclass: #CartTest
	instanceVariableNames: 'catalogue carrito'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/18/2020 18:16:25' prior: 50917516!
test05CartCanAddMoreThanOneBookWithDifferentAmountOfCopies
	carrito add: 'El principito'.
	carrito add: 'El principito' amount: 2.
	carrito add: 'El principote'.
	self deny: (carrito isEmpty).
	self assert: (carrito productsAmount) equals: 4.
	self assert: (carrito contains: 'El principito').
	self assert: (carrito contains: 'El principote').
	self assert: (carrito copiesOf: 'El principito') equals: 3.
	self assert: (carrito copiesOf: 'El principote') equals: 1.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/18/2020 18:16:25' prior: 50917544!
test07CartCannotAddBookMissingFromCatalogue
	self should: [carrito add: 'La celula'] 
	raise: Error 
	withExceptionDo: [:anError| 
		self assert: anError messageText equals: Cart bookNotFoundInCatalogueMessage.
		self assert: carrito isEmpty.
		].! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/18/2020 18:16:25' prior: 50917489!
test02CartCanAddOneBook
	carrito add: 'El principito'.
	self deny: (carrito isEmpty).
	self assert: (carrito productsAmount) equals: 1.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/18/2020 18:16:25' prior: 50917496!
test03CartCanAddMoreThanOneCopyOfABookAtOnce
	carrito add: 'El principito' amount: 2.
	self deny: (carrito isEmpty).
	self assert: (carrito productsAmount) equals: 2.
	self assert: (carrito copiesOf: 'El principito') equals: 2.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/18/2020 18:16:25' prior: 50917484!
test01NewCartIsEmpty
	carrito _ Cart create.
	self assert: (carrito isEmpty).! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/18/2020 18:16:25' prior: 50917477 overrides: 16927572!
setUp
	catalogue _ Set with: 'El principito' with: 'El principote'.
	carrito _ Cart createUsingCatalogue: catalogue.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/18/2020 18:16:25' prior: 50917532!
test06CartCanShowContents
	| expectedResult |
	
	carrito add: 'El principito'.
	carrito add: 'El principito' amount: 2.
	carrito add: 'El principote'.
	
	expectedResult _ Bag with: 'El principote'.
	expectedResult add: 'El principito' withOccurrences: 3.
	
	self assert: (carrito contents) equals: expectedResult.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/18/2020 18:16:25' prior: 50917505!
test04CartCanAddMoreThanOneBook
	carrito _ Cart create.
	carrito add: 'El principito'.
	carrito add: 'El principote'.
	self deny: (carrito isEmpty).
	self assert: (carrito productsAmount) equals: 2.
	self assert: (carrito contains: 'El principito').
	self assert: (carrito contains: 'El principote').! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'EMI 11/18/2020 18:16:34'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'EMI 11/18/2020 18:16:36'!
PASSED!

!testRun: #CartTest #test02CartCanAddOneBook stamp: 'EMI 11/18/2020 18:16:36'!
PASSED!

!testRun: #CartTest #test03CartCanAddMoreThanOneCopyOfABookAtOnce stamp: 'EMI 11/18/2020 18:16:36'!
PASSED!

!testRun: #CartTest #test04CartCanAddMoreThanOneBook stamp: 'EMI 11/18/2020 18:16:36'!
ERROR!

!testRun: #CartTest #test05CartCanAddMoreThanOneBookWithDifferentAmountOfCopies stamp: 'EMI 11/18/2020 18:16:36'!
PASSED!

!testRun: #CartTest #test06CartCanShowContents stamp: 'EMI 11/18/2020 18:16:36'!
PASSED!

!testRun: #CartTest #test07CartCannotAddBookMissingFromCatalogue stamp: 'EMI 11/18/2020 18:16:36'!
PASSED!

!testRun: #CartTest #test04CartCanAddMoreThanOneBook stamp: 'EMI 11/18/2020 18:16:36'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'EMI 11/18/2020 18:16:57' prior: 50917637!
test04CartCanAddMoreThanOneBook
	carrito add: 'El principito'.
	carrito add: 'El principote'.
	self deny: (carrito isEmpty).
	self assert: (carrito productsAmount) equals: 2.
	self assert: (carrito contains: 'El principito').
	self assert: (carrito contains: 'El principote').! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'EMI 11/18/2020 18:17:07'!
PASSED!

!testRun: #CartTest #test02CartCanAddOneBook stamp: 'EMI 11/18/2020 18:17:07'!
PASSED!

!testRun: #CartTest #test03CartCanAddMoreThanOneCopyOfABookAtOnce stamp: 'EMI 11/18/2020 18:17:07'!
PASSED!

!testRun: #CartTest #test04CartCanAddMoreThanOneBook stamp: 'EMI 11/18/2020 18:17:07'!
PASSED!

!testRun: #CartTest #test05CartCanAddMoreThanOneBookWithDifferentAmountOfCopies stamp: 'EMI 11/18/2020 18:17:07'!
PASSED!

!testRun: #CartTest #test06CartCanShowContents stamp: 'EMI 11/18/2020 18:17:07'!
PASSED!

!testRun: #CartTest #test07CartCannotAddBookMissingFromCatalogue stamp: 'EMI 11/18/2020 18:17:07'!
PASSED!

----SNAPSHOT----(18 November 2020 18:18:58) CuisUniversity-4383.image priorSource: 18733422!

!methodRemoval: Cart #initialize stamp: 'EMI 11/18/2020 18:20:02'!
initialize
	amount _ 0.
	books _ Bag new.!

!methodRemoval: Cart class #create stamp: 'EMI 11/18/2020 18:20:08'!
create
	^self new initialize.!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'EMI 11/18/2020 18:20:11'!
ERROR!

!testRun: #CartTest #test02CartCanAddOneBook stamp: 'EMI 11/18/2020 18:20:11'!
PASSED!

!testRun: #CartTest #test03CartCanAddMoreThanOneCopyOfABookAtOnce stamp: 'EMI 11/18/2020 18:20:11'!
PASSED!

!testRun: #CartTest #test04CartCanAddMoreThanOneBook stamp: 'EMI 11/18/2020 18:20:11'!
PASSED!

!testRun: #CartTest #test05CartCanAddMoreThanOneBookWithDifferentAmountOfCopies stamp: 'EMI 11/18/2020 18:20:11'!
PASSED!

!testRun: #CartTest #test06CartCanShowContents stamp: 'EMI 11/18/2020 18:20:11'!
PASSED!

!testRun: #CartTest #test07CartCannotAddBookMissingFromCatalogue stamp: 'EMI 11/18/2020 18:20:11'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'EMI 11/18/2020 18:20:11'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'EMI 11/18/2020 18:20:23' prior: 50917610!
test01NewCartIsEmpty
	self assert: (carrito isEmpty).! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'EMI 11/18/2020 18:20:24'!
PASSED!

----SNAPSHOT----(18 November 2020 18:20:39) CuisUniversity-4383.image priorSource: 18753906!

----SNAPSHOT----(18 November 2020 18:23:24) CuisUniversity-4383.image priorSource: 18755245!

----QUIT----(18 November 2020 18:23:55) CuisUniversity-4383.image priorSource: 18755339!

----STARTUP---- (19 November 2020 16:46:17) as /home/doraserver/CuisUniversity/CuisUniversity-4383.image!

!CartTest methodsFor: 'tests' stamp: 'EMI 11/19/2020 18:46:05'!
test08CartCannotAddInvalidAmountOfBooks
	self should: [carrito add: 'La celula'] 
	raise: Error 
	withExceptionDo: [:anError| 
		self assert: anError messageText equals: Cart bookNotFoundInCatalogueMessage.
		self assert: carrito isEmpty.
		].! !
!CartTest methodsFor: 'tests' stamp: 'EMI 11/19/2020 18:46:27' prior: 50917764!
test08CartCannotAddInvalidAmountOfBooks
	self should: [carrito add: 'La celula' amount: 2.5] 
	raise: Error 
	withExceptionDo: [:anError| 
		self assert: anError messageText equals: Cart bookNotFoundInCatalogueMessage.
		self assert: carrito isEmpty.
		].! !
!CartTest methodsFor: 'tests' stamp: 'EMI 11/19/2020 18:46:44' prior: 50917775!
test08CartCannotAddInvalidAmountOfBooks
	self should: [carrito add: 'La celula' amount: 2.5] 
	raise: Error 
	withExceptionDo: [:anError| 
		self assert: anError messageText equals: Cart bookAmountMustBeIntegerMessage.
		self assert: carrito isEmpty.
		].! !
!CartTest methodsFor: 'tests' stamp: 'EMI 11/19/2020 18:47:09' prior: 50917786!
test08CartCannotAddInvalidAmountOfBooks
	self should: [carrito add: 'La celula' amount: 2.5] 
	raise: Error 
	withExceptionDo: [:anError| 
		self assert: anError messageText equals: Cart bookAmountMustBeIntegerMessage.
		self assert: carrito isEmpty.
		].
	self should: [carrito add: 'La celula' amount: -1] 
	raise: Error 
	withExceptionDo: [:anError| 
		self assert: anError messageText equals: Cart bookAmountMustBePositiveMessage.
		self assert: carrito isEmpty.
		].! !

!testRun: #CartTest #test08CartCannotAddInvalidAmountOfBooks stamp: 'EMI 11/19/2020 18:49:28'!
ERROR!
!Cart class methodsFor: 'error messages' stamp: 'EMI 11/19/2020 18:49:46'!
bookAmountMustBeIntegerMessage
	self shouldBeImplemented.! !
!Cart class methodsFor: 'error messages' stamp: 'EMI 11/19/2020 18:50:11' prior: 50917818!
bookAmountMustBeIntegerMessage
	^'Book amount must be an integer'.! !

!testRun: #CartTest #test08CartCannotAddInvalidAmountOfBooks stamp: 'EMI 11/19/2020 18:50:12'!
FAILURE!
!Cart methodsFor: 'adding' stamp: 'EMI 11/19/2020 18:51:08' prior: 50917356!
add: aBook
	self add: aBook amount: 1.
	
	! !
!Cart methodsFor: 'adding' stamp: 'EMI 11/19/2020 18:51:51' prior: 50917365!
add: aBook amount: aNumberOfCopies 
	(self checkIfBookIsInCatalogue: aBook) ifFalse: [^Error signal: self class bookNotFoundInCatalogueMessage.].
	(aNumberOfCopies isInteger) ifFalse: [^Error signal: self class bookAmountMustBeIntegerMessage.].
	amount _ amount + aNumberOfCopies.
	books add: aBook withOccurrences: aNumberOfCopies.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'EMI 11/19/2020 18:51:54'!
PASSED!

!testRun: #CartTest #test02CartCanAddOneBook stamp: 'EMI 11/19/2020 18:51:54'!
PASSED!

!testRun: #CartTest #test03CartCanAddMoreThanOneCopyOfABookAtOnce stamp: 'EMI 11/19/2020 18:51:54'!
PASSED!

!testRun: #CartTest #test04CartCanAddMoreThanOneBook stamp: 'EMI 11/19/2020 18:51:54'!
PASSED!

!testRun: #CartTest #test05CartCanAddMoreThanOneBookWithDifferentAmountOfCopies stamp: 'EMI 11/19/2020 18:51:54'!
PASSED!

!testRun: #CartTest #test06CartCanShowContents stamp: 'EMI 11/19/2020 18:51:54'!
PASSED!

!testRun: #CartTest #test07CartCannotAddBookMissingFromCatalogue stamp: 'EMI 11/19/2020 18:51:54'!
PASSED!

!testRun: #CartTest #test08CartCannotAddInvalidAmountOfBooks stamp: 'EMI 11/19/2020 18:51:54'!
FAILURE!

!testRun: #CartTest #test08CartCannotAddInvalidAmountOfBooks stamp: 'EMI 11/19/2020 18:51:54'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'EMI 11/19/2020 18:52:30' prior: 50917797!
test08CartCannotAddInvalidAmountOfBooks
	self should: [carrito add: 'El principito' amount: 2.5] 
	raise: Error 
	withExceptionDo: [:anError| 
		self assert: anError messageText equals: Cart bookAmountMustBeIntegerMessage.
		self assert: carrito isEmpty.
		].
	self should: [carrito add: 'El principito' amount: -1] 
	raise: Error 
	withExceptionDo: [:anError| 
		self assert: anError messageText equals: Cart bookAmountMustBePositiveMessage.
		self assert: carrito isEmpty.
		].! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'EMI 11/19/2020 18:52:33'!
PASSED!

!testRun: #CartTest #test02CartCanAddOneBook stamp: 'EMI 11/19/2020 18:52:33'!
PASSED!

!testRun: #CartTest #test03CartCanAddMoreThanOneCopyOfABookAtOnce stamp: 'EMI 11/19/2020 18:52:33'!
PASSED!

!testRun: #CartTest #test04CartCanAddMoreThanOneBook stamp: 'EMI 11/19/2020 18:52:33'!
PASSED!

!testRun: #CartTest #test05CartCanAddMoreThanOneBookWithDifferentAmountOfCopies stamp: 'EMI 11/19/2020 18:52:33'!
PASSED!

!testRun: #CartTest #test06CartCanShowContents stamp: 'EMI 11/19/2020 18:52:33'!
PASSED!

!testRun: #CartTest #test07CartCannotAddBookMissingFromCatalogue stamp: 'EMI 11/19/2020 18:52:33'!
PASSED!

!testRun: #CartTest #test08CartCannotAddInvalidAmountOfBooks stamp: 'EMI 11/19/2020 18:52:33'!
FAILURE!

!testRun: #CartTest #test08CartCannotAddInvalidAmountOfBooks stamp: 'EMI 11/19/2020 18:52:33'!
FAILURE!
!Cart methodsFor: 'adding' stamp: 'EMI 11/19/2020 18:53:32' prior: 50917835!
add: aBook amount: aNumberOfCopies 
	(self checkIfBookIsInCatalogue: aBook) ifFalse: [^Error signal: self class bookNotFoundInCatalogueMessage.].
	(aNumberOfCopies isInteger) ifFalse: [^Error signal: self class bookAmountMustBeIntegerMessage.].
	(aNumberOfCopies > 0) ifFalse: [^Error signal: self class].
	amount _ amount + aNumberOfCopies.
	books add: aBook withOccurrences: aNumberOfCopies.! !
!Cart class methodsFor: 'error messages' stamp: 'EMI 11/19/2020 18:54:03'!
bookAmountMustBePositiveMessage
	^'Book amount must be a positive integer'.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'EMI 11/19/2020 18:54:06'!
PASSED!

!testRun: #CartTest #test02CartCanAddOneBook stamp: 'EMI 11/19/2020 18:54:06'!
PASSED!

!testRun: #CartTest #test03CartCanAddMoreThanOneCopyOfABookAtOnce stamp: 'EMI 11/19/2020 18:54:06'!
PASSED!

!testRun: #CartTest #test04CartCanAddMoreThanOneBook stamp: 'EMI 11/19/2020 18:54:06'!
PASSED!

!testRun: #CartTest #test05CartCanAddMoreThanOneBookWithDifferentAmountOfCopies stamp: 'EMI 11/19/2020 18:54:06'!
PASSED!

!testRun: #CartTest #test06CartCanShowContents stamp: 'EMI 11/19/2020 18:54:06'!
PASSED!

!testRun: #CartTest #test07CartCannotAddBookMissingFromCatalogue stamp: 'EMI 11/19/2020 18:54:06'!
PASSED!

!testRun: #CartTest #test08CartCannotAddInvalidAmountOfBooks stamp: 'EMI 11/19/2020 18:54:06'!
FAILURE!

!testRun: #CartTest #test08CartCannotAddInvalidAmountOfBooks stamp: 'EMI 11/19/2020 18:54:06'!
FAILURE!
!Cart methodsFor: 'adding' stamp: 'EMI 11/19/2020 18:54:19' prior: 50917923!
add: aBook amount: aNumberOfCopies 
	(self checkIfBookIsInCatalogue: aBook) ifFalse: [^Error signal: self class bookNotFoundInCatalogueMessage.].
	(aNumberOfCopies isInteger) ifFalse: [^Error signal: self class bookAmountMustBeIntegerMessage.].
	(aNumberOfCopies > 0) ifFalse: [^Error signal: self class bookAmountMustBePositiveMessage].
	amount _ amount + aNumberOfCopies.
	books add: aBook withOccurrences: aNumberOfCopies.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'EMI 11/19/2020 18:54:22'!
PASSED!

!testRun: #CartTest #test02CartCanAddOneBook stamp: 'EMI 11/19/2020 18:54:22'!
PASSED!

!testRun: #CartTest #test03CartCanAddMoreThanOneCopyOfABookAtOnce stamp: 'EMI 11/19/2020 18:54:22'!
PASSED!

!testRun: #CartTest #test04CartCanAddMoreThanOneBook stamp: 'EMI 11/19/2020 18:54:22'!
PASSED!

!testRun: #CartTest #test05CartCanAddMoreThanOneBookWithDifferentAmountOfCopies stamp: 'EMI 11/19/2020 18:54:22'!
PASSED!

!testRun: #CartTest #test06CartCanShowContents stamp: 'EMI 11/19/2020 18:54:22'!
PASSED!

!testRun: #CartTest #test07CartCannotAddBookMissingFromCatalogue stamp: 'EMI 11/19/2020 18:54:22'!
PASSED!

!testRun: #CartTest #test08CartCannotAddInvalidAmountOfBooks stamp: 'EMI 11/19/2020 18:54:22'!
PASSED!

----SNAPSHOT----(19 November 2020 18:54:58) CuisUniversity-4383.image priorSource: 18755433!

TestCase subclass: #CashierTest
	instanceVariableNames: 'catalogue carrito'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'EMI 11/19/2020 18:55:18'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'catalogue carrito'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'nil' stamp: 'EMI 11/19/2020 18:56:12'!
test01CashierCannotCheckoutEmptyCart! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 18:56:29' prior: 50918028!
test01CashierCannotCheckoutEmptyCart
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 18:56:50' prior: 50918033!
test01CashierCannotCheckoutEmptyCart
	catalogue _ Set new.
	carrito _ Cart createUsingCatalogue: catalogue.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 18:57:16' prior: 50918038!
test01CashierCannotCheckoutEmptyCart
	catalogue _ Set new.
	carrito _ Cart createUsingCatalogue: catalogue.
	
	self should: [] 
	raise: Error 
	withExceptionDo: [].! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'EMI 11/19/2020 18:59:32'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:01:11' prior: 50918045!
test01CashierCannotCheckoutEmptyCart
	| cashier |
	catalogue _ Set new.
	carrito _ Cart createUsingCatalogue: catalogue.
	cashier _ Cashier withCart: carrito.
	self should: [] 
	raise: Error 
	withExceptionDo: [].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:02:59' prior: 50918060!
test01CashierCannotCheckoutEmptyCart
	| cashier |
	catalogue _ Set new.
	carrito _ Cart createUsingCatalogue: catalogue.
	cashier _ Cashier new.
	self should: [cashier checkout: carrito usingCard: 1234.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText equals: self class CannotCheckoutEmptyCart].! !

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/19/2020 19:03:21'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:03:46' prior: 50918070!
test01CashierCannotCheckoutEmptyCart
	| cashier |
	catalogue _ Set new.
	carrito _ Cart createUsingCatalogue: catalogue.
	cashier _ Cashier new.
	self should: [cashier checkout: carrito usingCard: 1234.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier CannotCheckoutEmptyCart].! !

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/19/2020 19:03:48'!
ERROR!
!Cashier class methodsFor: 'error messages' stamp: 'EMI 11/19/2020 19:04:00'!
CannotCheckoutEmptyCart
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 'EMI 11/19/2020 19:04:20' prior: 50918103!
CannotCheckoutEmptyCart
	^'Cannot checkout empty cart.'.! !

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/19/2020 19:04:21'!
FAILURE!

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/19/2020 19:05:01'!
FAILURE!
!Cashier methodsFor: 'no messages' stamp: 'EMI 11/19/2020 19:06:12'!
checkout: aCart usingCard: aCard! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:06:57' prior: 50918119!
checkout: aCart usingCard: aCard
	(aCart isEmpty) ifTrue: [^Error signal: self class CannotCheckoutEmptyCart].
	^true.! !

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/19/2020 19:07:00'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:07:31'!
test02CashierCanCheckoutCartWithOneBook
	| cashier |
	catalogue _ Set new.
	carrito _ Cart createUsingCatalogue: catalogue.
	cashier _ Cashier new.
	self should: [cashier checkout: carrito usingCard: 1234.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier CannotCheckoutEmptyCart].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:08:01' prior: 50918134!
test02CashierCanCheckoutCartWithOneBook
	| cashier |
	catalogue _ Set with: '1234'.
	carrito _ Cart createUsingCatalogue: catalogue.
	carrito add: '1234'.
	cashier _ Cashier new.
	self should: [cashier checkout: carrito usingCard: 1234.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier CannotCheckoutEmptyCart].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:09:08' prior: 50918148!
test02CashierCanCheckoutCartWithOneBook
	| cashier |
	catalogue _ Set with: '1234'.
	carrito _ Cart createUsingCatalogue: catalogue.
	carrito add: '1234'.
	cashier _ Cashier new.
	
	self assert: (cashier checkout: carrito usingCard: 1111) equals: 1.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:09:45' prior: 50918124!
checkout: aCart usingCard: aCard
	(aCart isEmpty) ifTrue: [^Error signal: self class CannotCheckoutEmptyCart].
	^1.! !

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/19/2020 19:09:46'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutCartWithOneBook stamp: 'EMI 11/19/2020 19:09:46'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:10:07'!
test03CashierCanCheckoutCartWithMoreThanOne
	| cashier |
	catalogue _ Set with: '1234'.
	carrito _ Cart createUsingCatalogue: catalogue.
	carrito add: '1234'.
	cashier _ Cashier new.
	
	self assert: (cashier checkout: carrito usingCard: 1111) equals: 1.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:10:19' prior: 50918187!
test03CashierCanCheckoutCartWithMoreThanOne
	| cashier |
	catalogue _ Set with: '1234'.
	carrito _ Cart createUsingCatalogue: catalogue.
	carrito add: '1234' amount: 50.
	cashier _ Cashier new.
	
	self assert: (cashier checkout: carrito usingCard: 1111) equals: 50.! !

!testRun: #CashierTest #test03CashierCanCheckoutCartWithMoreThanOne stamp: 'EMI 11/19/2020 19:10:25'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:14:29' prior: 50918199!
test03CashierCanCheckoutCartWithMoreThanOne
	| cashier |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	carrito _ Cart createUsingCatalogue: catalogue.
	carrito add: '1234' amount: 50.
	cashier _ Cashier new.
	
	self assert: (cashier checkout: carrito usingCard: 1111) equals: 50.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:14:57' prior: 50918214!
test03CashierCanCheckoutCartWithMoreThanOne
	| cashier |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	cashier _ Cashier withCatalogue: catalogue.
	
	self assert: (cashier checkout: carrito usingCard: 1111) equals: 50.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:15:05' prior: 50918227!
test03CashierCanCheckoutCartWithMoreThanOne
	| cashier |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	
	cashier _ Cashier withCatalogue: catalogue.
	
	self assert: (cashier checkout: carrito usingCard: 1111) equals: 50.! !

!testRun: #CashierTest #test03CashierCanCheckoutCartWithMoreThanOne stamp: 'EMI 11/19/2020 19:15:30'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'EMI 11/19/2020 19:15:39'!
withCatalogue: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCatalogue: aDictionary ! !
!Cashier class methodsFor: 'instance creation' stamp: 'EMI 11/19/2020 19:15:57' prior: 50918258!
withCatalogue: aCatalogueDictionary
	^self new initializeWithCatalogue: aCatalogueDictionary ! !

!testRun: #CashierTest #test03CashierCanCheckoutCartWithMoreThanOne stamp: 'EMI 11/19/2020 19:17:28'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'EMI 11/19/2020 19:17:41'!
Object subclass: #Cashier
	instanceVariableNames: 'catalogueDictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'EMI 11/19/2020 19:17:41'!
initializeWithCatalogue: aCatalogueDictionary 
	self shouldBeImplemented.
	catalogueDictionary := aCatalogueDictionary.! !
!Cashier methodsFor: 'initialization' stamp: 'EMI 11/19/2020 19:17:48' prior: 50918283!
initializeWithCatalogue: aCatalogueDictionary 
	catalogueDictionary := aCatalogueDictionary.! !

!testRun: #CashierTest #test03CashierCanCheckoutCartWithMoreThanOne stamp: 'EMI 11/19/2020 19:17:51'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:19:29' prior: 50918174!
checkout: aCart usingCard: aCard
	| bill |
	(aCart isEmpty) ifTrue: [^Error signal: self class CannotCheckoutEmptyCart].
	bill _ 0.
	aCart contents do: [:aCartItem | bill _ bill + catalogueDictionary at: aCartItem].
	^aCart! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:19:32' prior: 50918300!
checkout: aCart usingCard: aCard
	| bill |
	(aCart isEmpty) ifTrue: [^Error signal: self class CannotCheckoutEmptyCart].
	bill _ 0.
	aCart contents do: [:aCartItem | bill _ bill + catalogueDictionary at: aCartItem].
	^bill! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:19:33' prior: 50918310!
checkout: aCart usingCard: aCard
	| bill |
	(aCart isEmpty) ifTrue: [^Error signal: self class CannotCheckoutEmptyCart].
	bill _ 0.
	aCart contents do: [:aCartItem | bill _ bill + catalogueDictionary at: aCartItem].
	^bill.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:20:04' prior: 50918163!
test02CashierCanCheckoutCartWithOneBook
	| cashier |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234'.
	cashier _ Cashier new.
	
	self assert: (cashier checkout: carrito usingCard: 1111) equals: 1.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:20:11' prior: 50918331!
test02CashierCanCheckoutCartWithOneBook
	| cashier |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234'.
	cashier _ Cashier withCatalogue: catalogue.
	
	self assert: (cashier checkout: carrito usingCard: 1111) equals: 1.! !

!testRun: #CashierTest #test02CashierCanCheckoutCartWithOneBook stamp: 'EMI 11/19/2020 19:20:33'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/19/2020 19:20:33'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutCartWithOneBook stamp: 'EMI 11/19/2020 19:20:33'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutCartWithMoreThanOne stamp: 'EMI 11/19/2020 19:20:33'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:20:43' prior: 50918343!
test02CashierCanCheckoutCartWithOneBook
	| cashier |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234'.
	
	cashier _ Cashier withCatalogue: catalogue.
	
	self assert: (cashier checkout: carrito usingCard: 1111) equals: 1.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:21:10'!
test03CashierCanCheckoutCartWithMoreThanOneBook
	| cashier |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	
	cashier _ Cashier withCatalogue: catalogue.
	
	self assert: (cashier checkout: carrito usingCard: 1111) equals: 50.! !

!methodRemoval: CashierTest #test03CashierCanCheckoutCartWithMoreThanOne stamp: 'EMI 11/19/2020 19:21:10'!
test03CashierCanCheckoutCartWithMoreThanOne
	| cashier |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	
	cashier _ Cashier withCatalogue: catalogue.
	
	self assert: (cashier checkout: carrito usingCard: 1111) equals: 50.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:24:41'!
test04CashierCannotCheckoutWithInvalidCard
	| cashier |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	
	cashier _ Cashier withCatalogue: catalogue.
	
	self assert: (cashier checkout: carrito usingCard: 1111) equals: 50.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:24:50' prior: 50918409!
test04CashierCannotCheckoutWithInvalidCard
	| cashier |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	
	cashier _ Cashier withCatalogue: catalogue.
	
	self assert: (cashier checkout: carrito usingCard: 1112) equals: 50.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:27:10' prior: 50918423!
test04CashierCannotCheckoutWithInvalidCard
	| cashier |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	
	cashier _ Cashier withCatalogue: catalogue.
	
	self should: (cashier checkout: carrito usingCard: 1112) 
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithInvalidCardMessage].! !

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/19/2020 19:28:02'!
FAILURE!
!Cashier class methodsFor: 'error messages' stamp: 'EMI 11/19/2020 19:28:23'!
cannotCheckoutWithInvalidCardMessage
	^'Cannot checkout with invalid card.'.! !
!Cashier class methodsFor: 'error messages' stamp: 'EMI 11/19/2020 19:28:43'!
cannotCheckoutEmptyCart
	^'Cannot checkout empty cart.'.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:28:43' prior: 50918320!
checkout: aCart usingCard: aCard
	| bill |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCart].
	bill _ 0.
	aCart contents do: [:aCartItem | bill _ bill + catalogueDictionary at: aCartItem].
	^bill.! !

!methodRemoval: Cashier class #CannotCheckoutEmptyCart stamp: 'EMI 11/19/2020 19:28:43'!
CannotCheckoutEmptyCart
	^'Cannot checkout empty cart.'.!

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/19/2020 19:29:24'!
FAILURE!

----SNAPSHOT----(19 November 2020 19:29:28) CuisUniversity-4383.image priorSource: 18763599!
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/19/2020 19:30:35' prior: 50918437!
test04CashierCannotCheckoutWithInvalidCard
	| cashier mp |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	mp _ Set with: 1111.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: (cashier checkout: carrito usingCard: 1112) 
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithInvalidCardMessage].! !

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/19/2020 19:30:44'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'EMI 11/19/2020 19:30:51'!
withCatalogue: aDictionary withMerchantProcessor: aSet 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCatalogue: aDictionary withMerchantProcessor: aSet ! !
!Cashier class methodsFor: 'instance creation' stamp: 'EMI 11/19/2020 19:31:14' prior: 50918510!
withCatalogue: aCatalogueDictionary withMerchantProcessor: aMerchantProcessor 
	^self new initializeWithCatalogue: aCatalogueDictionary withMerchantProcessor: aMerchantProcessor ! !

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/19/2020 19:31:17'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'EMI 11/19/2020 19:31:32'!
Object subclass: #Cashier
	instanceVariableNames: 'catalogueDictionary merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'EMI 11/19/2020 19:31:32'!
initializeWithCatalogue: aCatalogueDictionary withMerchantProcessor: aMerchantProcessor 
	self shouldBeImplemented.
	catalogueDictionary := aCatalogueDictionary.
	merchantProcessor := aMerchantProcessor.! !
!Cashier methodsFor: 'initialization' stamp: 'EMI 11/19/2020 19:31:36' prior: 50918540!
initializeWithCatalogue: aCatalogueDictionary withMerchantProcessor: aMerchantProcessor 
	catalogueDictionary := aCatalogueDictionary.
	merchantProcessor := aMerchantProcessor.! !

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/19/2020 19:31:38'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:33:13' prior: 50918467!
checkout: aCart usingCard: aCard
	| bill |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCart].
	bill _ 0.
	aCart contents do: [:aCartItem | bill _ bill + catalogueDictionary at: aCartItem].
	(merchantProcessor includes: aCard) ifFalse: [^Error signal: self class cannotCheckoutWithInvalidCardMessage.].
	^bill.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/19/2020 19:33:46' prior: 50918382!
test03CashierCanCheckoutCartWithMoreThanOneBook
	| cashier mp |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	mp _ Set with: 1111.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self assert: (cashier checkout: carrito usingCard: 1111) equals: 50.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/19/2020 19:33:54' prior: 50918369!
test02CashierCanCheckoutCartWithOneBook
	| cashier mp |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234'.
	mp _ Set with: 1111.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self assert: (cashier checkout: carrito usingCard: 1111) equals: 1.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/19/2020 19:34:09' prior: 50918087!
test01CashierCannotCheckoutEmptyCart
	| cashier |
	catalogue _ Set new.
	carrito _ Cart createUsingCatalogue: catalogue.
	cashier _ Cashier new.
	self should: [cashier checkout: carrito usingCard: 1234.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutEmptyCart].! !

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/19/2020 19:34:21'!
ERROR!

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/19/2020 19:34:21'!
ERROR!

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/19/2020 19:34:44'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/19/2020 19:35:20' prior: 50918488!
test04CashierCannotCheckoutWithInvalidCard
	| cashier mp |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	mp _ Set with: 1111.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: 1112]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithInvalidCardMessage].! !

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/19/2020 19:35:30'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/19/2020 19:35:30'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutCartWithOneBook stamp: 'EMI 11/19/2020 19:35:30'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutCartWithMoreThanOneBook stamp: 'EMI 11/19/2020 19:35:30'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/19/2020 19:35:30'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/19/2020 19:39:27'!
test05CashierCannotCheckoutWithExpiredCard
	| cashier mp |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	mp _ Set with: 1111.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: 1112]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithInvalidCardMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/19/2020 19:39:41' prior: 50918664!
test05CashierCannotCheckoutWithExpiredCard
	| cashier mp |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	mp _ Set with: 1111.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: 1112]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithExpiredCardMessage].! !

7/1991!

October oneMonth .!

October ofYear: 1991.!

October ofYear: 1991. !

a _ October ofYear: 1991.!

a monthNumber !

a monthNumber.!

a year.!

a monthNumber.!
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/19/2020 19:46:02' prior: 50918682!
test05CashierCannotCheckoutWithExpiredCard
	| cashier mp |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	mp _ Set with: 1112.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: #(1112 07 1991)]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithExpiredCardMessage].! !

!testRun: #CashierTest #test05CashierCannotCheckoutWithExpiredCard stamp: 'EMI 11/19/2020 19:46:04'!
ERROR!
!Cashier class methodsFor: 'error messages' stamp: 'EMI 11/19/2020 19:46:18'!
cannotCheckoutWithExpiredCardMessage
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 'EMI 11/19/2020 19:46:32' prior: 50918728!
cannotCheckoutWithExpiredCardMessage
	^'Cannot checkout with expired card.'.! !

!testRun: #CashierTest #test05CashierCannotCheckoutWithExpiredCard stamp: 'EMI 11/19/2020 19:46:34'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:47:04' prior: 50918562!
checkout: aCart usingCard: aCard
	| bill |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCart].
	bill _ 0.
	aCart contents do: [:aCartItem | bill _ bill + catalogueDictionary at: aCartItem].
	(merchantProcessor includes: aCard first) ifFalse: [^Error signal: self class cannotCheckoutWithInvalidCardMessage.].
	^bill.! !

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/19/2020 19:47:06'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutCartWithOneBook stamp: 'EMI 11/19/2020 19:47:06'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutCartWithMoreThanOneBook stamp: 'EMI 11/19/2020 19:47:06'!
ERROR!

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/19/2020 19:47:06'!
FAILURE!

!testRun: #CashierTest #test05CashierCannotCheckoutWithExpiredCard stamp: 'EMI 11/19/2020 19:47:06'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/19/2020 19:47:25' prior: 50918629!
test04CashierCannotCheckoutWithInvalidCard
	| cashier mp |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	mp _ Set with: 1111.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: #(1112)]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithInvalidCardMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/19/2020 19:47:30' prior: 50918576!
test03CashierCanCheckoutCartWithMoreThanOneBook
	| cashier mp |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	mp _ Set with: 1111.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self assert: (cashier checkout: carrito usingCard: #(1111)) equals: 50.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/19/2020 19:47:37' prior: 50918591!
test02CashierCanCheckoutCartWithOneBook
	| cashier mp |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234'.
	mp _ Set with: 1111.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self assert: (cashier checkout: carrito usingCard: #(1111)) equals: 1.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/19/2020 19:47:49' prior: 50918605!
test01CashierCannotCheckoutEmptyCart
	| cashier |
	catalogue _ Set new.
	carrito _ Cart createUsingCatalogue: catalogue.
	cashier _ Cashier new.
	self should: [cashier checkout: carrito usingCard: #(1234).] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutEmptyCart].! !

!testRun: #CashierTest #test05CashierCannotCheckoutWithExpiredCard stamp: 'EMI 11/19/2020 19:47:57'!
FAILURE!

!testRun: #CashierTest #test05CashierCannotCheckoutWithExpiredCard stamp: 'EMI 11/19/2020 19:47:57'!
FAILURE!

	Date month.!

	Date current.!

	Date current month!

	Date current month monthIndex !

Date current year!

 Date current yearNumber!
!Cashier methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:51:05' prior: 50918743!
checkout: aCart usingCard: aCard
	| bill currentMonth currentYear |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCart].
	bill _ 0.
	aCart contents do: [:aCartItem | bill _ bill + catalogueDictionary at: aCartItem].
	(merchantProcessor includes: aCard first) ifFalse: [^Error signal: self class cannotCheckoutWithInvalidCardMessage.].
	currentMonth  _ Date current month monthIndex.
	currentYear _ Date current yearNumber.
	^bill.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:52:17' prior: 50918847!
checkout: aCart usingCard: aCard
	| bill currentMonth currentYear |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCart].
	bill _ 0.
	aCart contents do: [:aCartItem | bill _ bill + catalogueDictionary at: aCartItem].
	(merchantProcessor includes: aCard first) ifFalse: [^Error signal: self class cannotCheckoutWithInvalidCardMessage.].
	currentMonth  _ Date current month monthIndex.
	currentYear _ Date current yearNumber.
	((aCard at:3) < currentYear) ifTrue: [^Error signal: self class cannotCheckoutWithExpiredCardMessage].
	^bill.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:53:07' prior: 50918865!
checkout: aCart usingCard: aCard
	| bill currentMonth currentYear |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCart].
	bill _ 0.
	aCart contents do: [:aCartItem | bill _ bill + catalogueDictionary at: aCartItem].
	(merchantProcessor includes: aCard first) ifFalse: [^Error signal: self class cannotCheckoutWithInvalidCardMessage.].
	currentMonth  _ Date current month monthIndex.
	currentYear _ Date current yearNumber.
	((aCard at:3) < currentYear) ifTrue: [^Error signal: self class cannotCheckoutWithExpiredCardMessage].
	((aCard at:3) = currentYear and: [(aCard at:2) < currentMonth]) ifTrue: [^Error signal: self class cannotCheckoutWithExpiredCardMessage].
	^bill.! !

!testRun: #CashierTest #test05CashierCannotCheckoutWithExpiredCard stamp: 'EMI 11/19/2020 19:53:51'!
PASSED!

----SNAPSHOT----(19 November 2020 19:54:02) CuisUniversity-4383.image priorSource: 18778693!

Object subclass: #CreditCard
	instanceVariableNames: 'id month year name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'EMI 11/19/2020 19:54:58'!
Object subclass: #CreditCard
	instanceVariableNames: 'id month year name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'nil' stamp: 'EMI 11/19/2020 19:55:17'!
id
	^id.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:55:28'!
expirationMonth
	^month.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:55:38'!
expirationYear
	^year.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:55:47'!
ownerName
	^name.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'EMI 11/19/2020 19:55:57'!
ownerFullName
	^name.! !

!methodRemoval: CreditCard #ownerName stamp: 'EMI 11/19/2020 19:55:57'!
ownerName
	^name.!
!CreditCard class methodsFor: 'nil' stamp: 'EMI 11/19/2020 19:57:48'!
of: aName withID: anID withExpirationDate: aDate
	^self new initializeWithID: anID withExpirationDate: aDate ofOwner: aName. ! !
!CreditCard methodsFor: 'nil' stamp: 'EMI 11/19/2020 19:58:44'!
initializeWithID: anID withExpirationDate: aDate ofOwner: aName.
	id _ anID.
	month _ aDate month monthIndex.
	year _ aDate yearNumber.
	name _ aName.! !

----SNAPSHOT----(19 November 2020 19:59:44) CuisUniversity-4383.image priorSource: 18792427!

----QUIT----(19 November 2020 20:56:58) CuisUniversity-4383.image priorSource: 18794041!

----STARTUP---- (23 November 2020 19:47:12) as /home/doraserver/CuisUniversity/CuisUniversity-4383.image!


a _ GregorianMonthOfYear year: 2020 monthNumber: 11.!

a!

b _ GregorianMonthOfYear  year: 2020  monthNumber: 10.!

a < b!

b < a!

Object subclass: #CreditCard
	instanceVariableNames: 'id date name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'EMI 11/23/2020 19:58:15'!
Object subclass: #CreditCard
	instanceVariableNames: 'id date name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 19:58:28' prior: 50918957!
initializeWithID: anID withExpirationDate: aDate ofOwner: aName.
	id _ anID.
	date _ aDate.
	name _ aName.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'EMI 11/23/2020 19:58:37'!
Object subclass: #CreditCard
	instanceVariableNames: 'id expirationDate name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 19:58:37' prior: 50918990!
initializeWithID: anID withExpirationDate: aDate ofOwner: aName.
	id _ anID.
	expirationDate _ aDate.
	name _ aName.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 19:58:50' prior: 50918936!
expirationYear
	^expirationDate yearNumber.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 19:59:01' prior: 50918932!
expirationMonth
	^expirationDate monthNumber.! !
!CreditCard methodsFor: 'nil' stamp: 'EMI 11/23/2020 20:01:12'!
expires
	^expirationDate.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 20:01:42' prior: 50918886!
checkout: aCart usingCard: aCard
	| bill currentMonth currentYear |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCart].
	bill _ 0.
	aCart contents do: [:aCartItem | bill _ bill + catalogueDictionary at: aCartItem].
	(merchantProcessor includes: aCard first) ifFalse: [^Error signal: self class cannotCheckoutWithInvalidCardMessage.].
	currentMonth  _ Date current month monthIndex.
	currentYear _ Date current yearNumber.
	((aCard at:3) < currentYear) ifTrue: [^Error signal: self class cannotCheckoutWithExpiredCardMessage].
	((aCard at:3) = currentYear and: [(aCard at:2) < currentMonth]) ifTrue: [^Error signal: self class cannotCheckoutWithExpiredCardMessage].
	
	^bill.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 20:04:03' prior: 50919004!
initializeWithID: anID withExpirationDate: aDate ofOwner: aName.
	(id <= 0) ifTrue: [].
	(aName isEmpty or: [aName length > 30]) ifTrue: [].
	id _ anID.
	expirationDate _ aDate.
	name _ aName.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 20:04:37' prior: 50919049!
initializeWithID: anID withExpirationDate: aDate ofOwner: aName.
	(id <= 0) ifTrue: [^Error signal: self class cannotCreateCardWithInvalidID].
	(aName isEmpty or: [aName length > 30]) ifTrue: [].
	id _ anID.
	expirationDate _ aDate.
	name _ aName.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 20:05:59' prior: 50919059!
initializeWithID: anID withExpirationDate: aDate ofOwner: aName.
	(id <= 0 or:[anID isInteger not]) ifTrue: [^Error signal: self class cannotCreateCardWithInvalidID].
	(aName isEmpty or: [aName length > 30]) ifTrue: [^Error signal: self class cannotCreateCardWithInvalidName].
	id _ anID.
	expirationDate _ aDate.
	name _ aName.! !
!CreditCard class methodsFor: 'nil' stamp: 'EMI 11/23/2020 20:06:28'!
cannotCreateCardWithInvalidID
	^'Cannot create card with invalid ID'.! !
!CreditCard class methodsFor: 'nil' stamp: 'EMI 11/23/2020 20:07:15'!
cannotCreateCardWithInvalidName
	^'Cannot create card with invalid name.'.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 20:09:14' prior: 50918822!
test01CashierCannotCheckoutEmptyCart
	| cashier card |
	catalogue _ Set new.
	carrito _ Cart createUsingCatalogue: catalogue.
	cashier _ Cashier new.
	card _ CreditCard initializeWithID: 1234 withExpirationDate: GregorianMonthOfYear today ofOwner: 'Pepito'.
	self should: [cashier checkout: carrito usingCard: card.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutEmptyCart].! !

c _ GregorianMonthOfYear today.!

c _ GregorianMonthOfYear current. !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 20:09:49' prior: 50919094!
test01CashierCannotCheckoutEmptyCart
	| cashier card |
	catalogue _ Set new.
	carrito _ Cart createUsingCatalogue: catalogue.
	cashier _ Cashier new.
	card _ CreditCard initializeWithID: 1234 withExpirationDate: GregorianMonthOfYear current ofOwner: 'Pepito'.
	self should: [cashier checkout: carrito usingCard: card.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutEmptyCart].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 20:11:07' prior: 50918808!
test02CashierCanCheckoutCartWithOneBook
	| cashier mp card |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard initializeWithID: 1111 withExpirationDate: GregorianMonthOfYear current ofOwner: 'Pepo'.
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234'.
	mp _ Set with: 1111.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self assert: (cashier checkout: carrito usingCard: #(1111)) equals: 1.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 20:11:18' prior: 50919130!
test02CashierCanCheckoutCartWithOneBook
	| cashier mp card |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard initializeWithID: 1111 withExpirationDate: GregorianMonthOfYear current ofOwner: 'Pepo'.
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234'.
	mp _ Set with: 1111.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self assert: (cashier checkout: carrito usingCard: card) equals: 1.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 20:13:45' prior: 50918793!
test03CashierCanCheckoutCartWithMoreThanOneBook
	| cashier mp card |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard initializeWithID: 1111 withExpirationDate: GregorianMonthOfYear current ofOwner: 'Pepo'.

	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	mp _ Set with: 1111.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self assert: (cashier checkout: carrito usingCard: card) equals: 50.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 20:14:13' prior: 50918774!
test04CashierCannotCheckoutWithInvalidCard
	| cashier mp card |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard initializeWithID: 1112 withExpirationDate: GregorianMonthOfYear current ofOwner: 'Tito'.

	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	mp _ Set with: 1111.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithInvalidCardMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 20:15:34' prior: 50918706!
test05CashierCannotCheckoutWithExpiredCard
	| cashier mp card |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard initializeWithID: 1112 withExpirationDate: (GregorianMonthOfYear year: 2020 monthNumber: 1) ofOwner: 'Tito'.
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	mp _ Set with: 1112.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithExpiredCardMessage].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 20:17:20' prior: 50919024!
checkout: aCart usingCard: aCard
	| bill  |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCart].
	bill _ 0.
	aCart contents do: [:aCartItem | bill _ bill + catalogueDictionary at: aCartItem].
	(merchantProcessor includes: aCard first) ifFalse: [^Error signal: self class cannotCheckoutWithInvalidCardMessage.].
	
	(GregorianMonthOfYear current < aCard expires) ifFalse:[^Error signal: self class cannotCheckoutWithExpiredCardMessage.].
	
	^bill.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 20:17:41' prior: 50919229!
checkout: aCart usingCard: aCard
	| bill  |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCart].
	bill _ 0.
	aCart contents do: [:aCartItem | bill _ bill + catalogueDictionary at: aCartItem].
	(GregorianMonthOfYear current < aCard expires) ifFalse:[^Error signal: self class cannotCheckoutWithExpiredCardMessage.].
	(merchantProcessor includes: aCard first) ifFalse: [^Error signal: self class cannotCheckoutWithInvalidCardMessage.].
	^bill.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 20:18:47'!
expiration
	^expirationDate.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 20:18:47' prior: 50919247!
checkout: aCart usingCard: aCard
	| bill  |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCart].
	bill _ 0.
	aCart contents do: [:aCartItem | bill _ bill + catalogueDictionary at: aCartItem].
	(GregorianMonthOfYear current < aCard expiration) ifFalse:[^Error signal: self class cannotCheckoutWithExpiredCardMessage.].
	(merchantProcessor includes: aCard first) ifFalse: [^Error signal: self class cannotCheckoutWithInvalidCardMessage.].
	^bill.! !

!methodRemoval: CreditCard #expires stamp: 'EMI 11/23/2020 20:18:47'!
expires
	^expirationDate.!
!Cashier methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 20:19:29' prior: 50919269!
checkout: aCart usingCard: aCard
	| bill  |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCart].
	(GregorianMonthOfYear current < aCard expiration) ifFalse:[^Error signal: self class cannotCheckoutWithExpiredCardMessage.].
	bill _ 0.
	aCart contents do: [:aCartItem | bill _ bill + catalogueDictionary at: aCartItem].
	(merchantProcessor includes: aCard first) ifFalse: [^Error signal: self class cannotCheckoutWithInvalidCardMessage.].
	^bill.! !

----SNAPSHOT----(23 November 2020 20:21:07) CuisUniversity-4383.image priorSource: 18794135!

----SNAPSHOT----(23 November 2020 20:21:49) CuisUniversity-4383.image priorSource: 18805016!

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/23/2020 20:21:52'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutCartWithOneBook stamp: 'EMI 11/23/2020 20:21:52'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutCartWithMoreThanOneBook stamp: 'EMI 11/23/2020 20:21:52'!
ERROR!

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/23/2020 20:21:52'!
ERROR!

!testRun: #CashierTest #test05CashierCannotCheckoutWithExpiredCard stamp: 'EMI 11/23/2020 20:21:52'!
ERROR!

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/23/2020 20:21:55'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 20:23:25' prior: 50919113!
test01CashierCannotCheckoutEmptyCart
	| cashier card |
	catalogue _ Set new.
	carrito _ Cart createUsingCatalogue: catalogue.
	cashier _ Cashier new.
	card _ CreditCard of: 'Pepito' withID: 1234 withExpirationDate: GregorianMonthOfYear current.
	self should: [cashier checkout: carrito usingCard: card.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutEmptyCart].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 20:23:50' prior: 50919148!
test02CashierCanCheckoutCartWithOneBook
	| cashier mp card |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'Pepo' withID: 1111 withExpirationDate: GregorianMonthOfYear current.
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234'.
	mp _ Set with: 1111.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self assert: (cashier checkout: carrito usingCard: card) equals: 1.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 20:24:15' prior: 50919166!
test03CashierCanCheckoutCartWithMoreThanOneBook
	| cashier mp card |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'Pepo' withID: 1111 withExpirationDate: GregorianMonthOfYear current.

	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	mp _ Set with: 1111.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self assert: (cashier checkout: carrito usingCard: card) equals: 50.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 20:24:36' prior: 50919184!
test04CashierCannotCheckoutWithInvalidCard
	| cashier mp card |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'Tito' withID: 1112 withExpirationDate: GregorianMonthOfYear current.

	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	mp _ Set with: 1111.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithInvalidCardMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 20:24:56' prior: 50919206!
test05CashierCannotCheckoutWithExpiredCard
	| cashier mp card |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'Tito' withID: 1112 withExpirationDate: (GregorianMonthOfYear year: 2020 monthNumber: 1).
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	mp _ Set with: 1112.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithExpiredCardMessage].! !

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/23/2020 20:25:09'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutCartWithOneBook stamp: 'EMI 11/23/2020 20:25:09'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutCartWithMoreThanOneBook stamp: 'EMI 11/23/2020 20:25:09'!
ERROR!

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/23/2020 20:25:09'!
ERROR!

!testRun: #CashierTest #test05CashierCannotCheckoutWithExpiredCard stamp: 'EMI 11/23/2020 20:25:09'!
ERROR!

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/23/2020 20:25:11'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 20:25:32' prior: 50919070!
initializeWithID: anID withExpirationDate: aDate ofOwner: aName.
	(anID <= 0 or:[anID isInteger not]) ifTrue: [^Error signal: self class cannotCreateCardWithInvalidID].
	(aName isEmpty or: [aName length > 30]) ifTrue: [^Error signal: self class cannotCreateCardWithInvalidName].
	id _ anID.
	expirationDate _ aDate.
	name _ aName.! !

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/23/2020 20:25:33'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 20:26:33' prior: 50919449!
initializeWithID: anID withExpirationDate: aDate ofOwner: aName.
	(anID <= 0 or:[anID isInteger not]) ifTrue: [^Error signal: self class cannotCreateCardWithInvalidID].
	(aName isEmpty or: [aName size > 30]) ifTrue: [^Error signal: self class cannotCreateCardWithInvalidName].
	id _ anID.
	expirationDate _ aDate.
	name _ aName.! !

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/23/2020 20:26:34'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutCartWithOneBook stamp: 'EMI 11/23/2020 20:26:36'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 20:27:07' prior: 50919290!
checkout: aCart usingCard: aCard
	| bill  |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCart].
	(GregorianMonthOfYear current <= aCard expiration) ifFalse:[^Error signal: self class cannotCheckoutWithExpiredCardMessage.].
	bill _ 0.
	aCart contents do: [:aCartItem | bill _ bill + catalogueDictionary at: aCartItem].
	(merchantProcessor includes: aCard first) ifFalse: [^Error signal: self class cannotCheckoutWithInvalidCardMessage.].
	^bill.! !

!testRun: #CashierTest #test02CashierCanCheckoutCartWithOneBook stamp: 'EMI 11/23/2020 20:27:11'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutCartWithOneBook stamp: 'EMI 11/23/2020 20:27:48'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutCartWithMoreThanOneBook stamp: 'EMI 11/23/2020 20:27:58'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 20:28:32' prior: 50919486!
checkout: aCart usingCard: aCard
	| bill  |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCart].
	(GregorianMonthOfYear current <= aCard expiration) ifFalse:[^Error signal: self class cannotCheckoutWithExpiredCardMessage.].
	bill _ 0.
	aCart contents do: [:aCartItem | bill _ bill + catalogueDictionary at: aCartItem].
	(merchantProcessor includes: aCard id) ifFalse: [^Error signal: self class cannotCheckoutWithInvalidCardMessage.].
	^bill.! !

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/23/2020 20:28:43'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutCartWithOneBook stamp: 'EMI 11/23/2020 20:28:43'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutCartWithMoreThanOneBook stamp: 'EMI 11/23/2020 20:28:43'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/23/2020 20:28:43'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithExpiredCard stamp: 'EMI 11/23/2020 20:28:43'!
FAILURE!

!testRun: #CashierTest #test05CashierCannotCheckoutWithExpiredCard stamp: 'EMI 11/23/2020 20:28:43'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 20:30:00' prior: 50919406!
test05CashierCannotCheckoutWithExpiredCard
	| cashier mp card |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'Tito' withID: 1112 withExpirationDate: (GregorianMonthOfYear yearNumber: 2020 monthNumber: 1).
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	mp _ Set with: 1112.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithExpiredCardMessage].! !

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/23/2020 20:30:03'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutCartWithOneBook stamp: 'EMI 11/23/2020 20:30:03'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutCartWithMoreThanOneBook stamp: 'EMI 11/23/2020 20:30:03'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/23/2020 20:30:03'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithExpiredCard stamp: 'EMI 11/23/2020 20:30:03'!
PASSED!

TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'EMI 11/23/2020 20:32:33'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'nil' stamp: 'EMI 11/23/2020 20:33:15'!
test01CannotCreateCardWithInvalidIDFormat! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 20:35:41' prior: 50919602!
test01CannotCreateCardWithInvalidIDFormat
	self should:[CreditCard of: 'Bob' withID: 1 negated withExpirationDate: GregorianMonthOfYear current.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cannotCreateCardWithInvalidID].! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 20:35:54' prior: 50919607!
test01CannotCreateCardWithInvalidIDFormat
	self should:[CreditCard of: 'Bob' withID: 1 negated withExpirationDate: GregorianMonthOfYear current.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cannotCreateCardWithInvalidID].
	
	self should:[CreditCard of: 'Bob' withID: 1.5 withExpirationDate: GregorianMonthOfYear current.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cannotCreateCardWithInvalidID].! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 20:36:14' prior: 50919619!
test01CannotCreateCardWithInvalidIDFormat
	self should:[CreditCard of: 'Bob' withID: 1 negated withExpirationDate: GregorianMonthOfYear current.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cannotCreateCardWithInvalidID].
	
	self should:[CreditCard of: 'Bob' withID: 1.5 withExpirationDate: GregorianMonthOfYear current.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cannotCreateCardWithInvalidID].
	
	self should:[CreditCard of: 'Bob' withID: 0 withExpirationDate: GregorianMonthOfYear current.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cannotCreateCardWithInvalidID].! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 20:37:32'!
test02CannotCreateCardWithInvalidName
	self should:[CreditCard of: '' withID: 1 withExpirationDate: GregorianMonthOfYear current.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cannotCreateCardWithInvalidID].
	
	self should:[CreditCard of: 'A' withID: 1 withExpirationDate: GregorianMonthOfYear current.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cannotCreateCardWithInvalidID].! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 20:39:18' prior: 50919664!
test02CannotCreateCardWithInvalidName
	self should:[CreditCard of: '' withID: 1 withExpirationDate: GregorianMonthOfYear current.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cannotCreateCardWithInvalidName].
	
	self should:[CreditCard of: 'UnStringConMasDeTreintaCaracteres' withID: 1 withExpirationDate: GregorianMonthOfYear current.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cannotCreateCardWithInvalidName].! !

!testRun: #CreditCardTest #test01CannotCreateCardWithInvalidIDFormat stamp: 'EMI 11/23/2020 20:39:24'!
PASSED!

!testRun: #CreditCardTest #test02CannotCreateCardWithInvalidName stamp: 'EMI 11/23/2020 20:39:24'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 20:39:53'!
test03CannotCreateCardWithInvalidDateFormat
	self should:[CreditCard of: '' withID: 1 withExpirationDate: GregorianMonthOfYear current.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cannotCreateCardWithInvalidDateFormat].! !
!CreditCard class methodsFor: 'nil' stamp: 'EMI 11/23/2020 20:40:32'!
cannotCreateCardWithInvalidDateFormat
	^'Cannot create card with invalid date format. Use GregorianMonthOfYear.'! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 20:40:48' prior: 50919083!
cannotCreateCardWithInvalidID
	^'Cannot create card with invalid ID, must be a positive integer'.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 20:41:05' prior: 50919088!
cannotCreateCardWithInvalidName
	^'Cannot create card with invalid name. Must not be empty or exceed 30 characters.'.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 20:41:21' prior: 50919709!
test03CannotCreateCardWithInvalidDateFormat
	self should:[CreditCard of: 'Pepo' withID: 1 withExpirationDate: GregorianMonthOfYear current.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cannotCreateCardWithInvalidDateFormat].! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 20:41:36' prior: 50919741!
test03CannotCreateCardWithInvalidDateFormat
	self should:[CreditCard of: 'Pepo' withID: 1 withExpirationDate: Date today]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cannotCreateCardWithInvalidDateFormat].! !

!testRun: #CreditCardTest #test03CannotCreateCardWithInvalidDateFormat stamp: 'EMI 11/23/2020 20:41:54'!
FAILURE!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 20:42:48' prior: 50919466!
initializeWithID: anID withExpirationDate: aDate ofOwner: aName.
	(anID <= 0 or:[anID isInteger not]) ifTrue: [^Error signal: self class cannotCreateCardWithInvalidID].
	(aName isEmpty or: [aName size > 30]) ifTrue: [^Error signal: self class cannotCreateCardWithInvalidName].
	(aDate isKindOf: GregorianMonthOfYear) ifFalse: [^Error signal: self class cannotCreateCardWithInvalidDateFormat.].
	id _ anID.
	expirationDate _ aDate.
	name _ aName.! !

!testRun: #CreditCardTest #test01CannotCreateCardWithInvalidIDFormat stamp: 'EMI 11/23/2020 20:42:53'!
PASSED!

!testRun: #CreditCardTest #test02CannotCreateCardWithInvalidName stamp: 'EMI 11/23/2020 20:42:53'!
PASSED!

!testRun: #CreditCardTest #test03CannotCreateCardWithInvalidDateFormat stamp: 'EMI 11/23/2020 20:42:53'!
PASSED!

Object subclass: #AlwaysValidMerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #AlwaysValidMerchantProcessorSimulator category: 'TusLibros' stamp: 'EMI 11/23/2020 20:45:36'!
Object subclass: #AlwaysValidMerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!AlwaysValidMerchantProcessorSimulator methodsFor: 'nil' stamp: 'EMI 11/23/2020 20:47:48'!
debit: anAmount from: aCreditCard
	^true.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 20:49:22' prior: 50919514!
checkout: aCart usingCard: aCard
	| bill  |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCart].
	(GregorianMonthOfYear current <= aCard expiration) ifFalse:[^Error signal: self class cannotCheckoutWithExpiredCardMessage.].
	bill _ 0.
	aCart contents do: [:aCartItem | bill _ bill + catalogueDictionary at: aCartItem].
	merchantProcessor debit: bill from: aCard.
	^bill.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 20:50:49' prior: 50919334!
test01CashierCannotCheckoutEmptyCart
	| cashier card mp |
	catalogue _ Dictionary new.
	carrito _ Cart createUsingCatalogue: catalogue keys.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	card _ CreditCard of: 'Pepito' withID: 1234 withExpirationDate: GregorianMonthOfYear current.
	self should: [cashier checkout: carrito usingCard: card.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutEmptyCart].! !

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/23/2020 20:51:07'!
PASSED!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'EMI 11/23/2020 20:53:13'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 20:53:19' prior: 50919830!
test01CashierCannotCheckoutEmptyCart
	| cashier card mp catalogue carrito |
	catalogue _ Dictionary new.
	carrito _ Cart createUsingCatalogue: catalogue keys.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	card _ CreditCard of: 'Pepito' withID: 1234 withExpirationDate: GregorianMonthOfYear current.
	self should: [cashier checkout: carrito usingCard: card.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutEmptyCart].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 20:53:23' prior: 50919350!
test02CashierCanCheckoutCartWithOneBook
	| cashier mp card catalogue carrito |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'Pepo' withID: 1111 withExpirationDate: GregorianMonthOfYear current.
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234'.
	mp _ Set with: 1111.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self assert: (cashier checkout: carrito usingCard: card) equals: 1.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 20:53:28' prior: 50919367!
test03CashierCanCheckoutCartWithMoreThanOneBook
	| cashier mp card catalogue carrito |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'Pepo' withID: 1111 withExpirationDate: GregorianMonthOfYear current.

	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	mp _ Set with: 1111.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self assert: (cashier checkout: carrito usingCard: card) equals: 50.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 20:53:34' prior: 50919385!
test04CashierCannotCheckoutWithInvalidCard
	| cashier mp card catalogue carrito |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'Tito' withID: 1112 withExpirationDate: GregorianMonthOfYear current.

	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	mp _ Set with: 1111.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithInvalidCardMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 20:53:38' prior: 50919552!
test05CashierCannotCheckoutWithExpiredCard
	| cashier mp card catalogue carrito |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'Tito' withID: 1112 withExpirationDate: (GregorianMonthOfYear yearNumber: 2020 monthNumber: 1).
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	mp _ Set with: 1112.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithExpiredCardMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 20:54:28' prior: 50919884!
test02CashierCanCheckoutCartWithOneBook
	| cashier mp card catalogue carrito |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'Pepo' withID: 1111 withExpirationDate: GregorianMonthOfYear current.
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234'.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self assert: (cashier checkout: carrito usingCard: card) equals: 1.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 20:54:40' prior: 50919902!
test03CashierCanCheckoutCartWithMoreThanOneBook
	| cashier mp card catalogue carrito |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'Pepo' withID: 1111 withExpirationDate: GregorianMonthOfYear current.

	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self assert: (cashier checkout: carrito usingCard: card) equals: 50.! !

Object subclass: #OnlyChecksIDsMerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #OnlyChecksIDsMerchantProcessorSimulator category: 'TusLibros' stamp: 'EMI 11/23/2020 20:56:00'!
Object subclass: #OnlyChecksIDsMerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!OnlyChecksIDsMerchantProcessorSimulator methodsFor: 'nil' stamp: 'EMI 11/23/2020 20:56:13'!
debit: anAmount from: aCreditCard
	^true.! !
!OnlyChecksIDsMerchantProcessorSimulator class methodsFor: 'nil' stamp: 'EMI 11/23/2020 20:56:54'!
initialize: aSetOfValidIDs
	^self new initializeWith: aSetOfValidIDs.! !

!classDefinition: #OnlyChecksIDsMerchantProcessorSimulator category: 'TusLibros' stamp: 'EMI 11/23/2020 20:57:29'!
Object subclass: #OnlyChecksIDsMerchantProcessorSimulator
	instanceVariableNames: 'validIDs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!OnlyChecksIDsMerchantProcessorSimulator methodsFor: 'nil' stamp: 'EMI 11/23/2020 20:57:26'!
initializeWith: aSetOfValidIDs
	validIDs _ aSetOfValidIDs.! !
!OnlyChecksIDsMerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 20:59:22' prior: 50920017!
debit: anAmount from: aCreditCard
	(validIDs includes: aCreditCard id) ifFalse: [^Error signal: self class cannotDebitFromCreditCardWihInvalidID].
	^true.! !
!OnlyChecksIDsMerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 21:00:10' prior: 50920042!
debit: anAmount from: aCreditCard
	(validIDs includes: aCreditCard id) ifFalse: [^Error signal: self class cannotDebitFromCreditCardWithInvalidID].
	^true.! !

Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'EMI 11/23/2020 21:02:11'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

MerchantProcessorSimulator subclass: #OnlyChecksIDsMerchantProcessorSimulator
	instanceVariableNames: 'validIDs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #OnlyChecksIDsMerchantProcessorSimulator category: 'TusLibros' stamp: 'EMI 11/23/2020 21:02:18'!
MerchantProcessorSimulator subclass: #OnlyChecksIDsMerchantProcessorSimulator
	instanceVariableNames: 'validIDs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

MerchantProcessorSimulator subclass: #AlwaysValidMerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #AlwaysValidMerchantProcessorSimulator category: 'TusLibros' stamp: 'EMI 11/23/2020 21:02:24'!
MerchantProcessorSimulator subclass: #AlwaysValidMerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator class methodsFor: 'nil' stamp: 'EMI 11/23/2020 21:03:05'!
cannotDebitFromCreditCardWithInvalidID
	^'Cannot debit from credit card with invalid ID.'! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 21:04:17' prior: 50919920!
test04CashierCannotCheckoutWithInvalidCard
	| cashier mp card catalogue carrito |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'Tito' withID: 1112 withExpirationDate: GregorianMonthOfYear current.

	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	mp _ OnlyChecksIDsMerchantProcessorSimulator initialize: (Set with: 1111).
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithInvalidCardMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 21:04:44' prior: 50920107!
test04CashierCannotCheckoutWithInvalidCard
	| cashier mp card catalogue carrito |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'Tito' withID: 1112 withExpirationDate: GregorianMonthOfYear current.

	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	mp _ OnlyChecksIDsMerchantProcessorSimulator initialize: (Set with: 1111).
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: mp class cannotDebitFromCreditCardWithInvalidID].! !

!testRun: #CashierTest #test02CashierCanCheckoutCartWithOneBook stamp: 'EMI 11/23/2020 21:04:49'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutCartWithMoreThanOneBook stamp: 'EMI 11/23/2020 21:04:52'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/23/2020 21:04:54'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/23/2020 21:04:56'!
PASSED!

d _ Dictionary new;add: '1234'->1!

d _ Dictionary new.
d add: '1234'->1.!
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 21:16:28' prior: 50919942!
test05CashierCannotCheckoutWithExpiredCard
	| cashier mp card catalogue carrito |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'Tito' withID: 1112 withExpirationDate: (GregorianMonthOfYear yearNumber: 2020 monthNumber: 1).
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithExpiredCardMessage].! !

!testRun: #CashierTest #test05CashierCannotCheckoutWithExpiredCard stamp: 'EMI 11/23/2020 21:16:34'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/23/2020 21:16:34'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutCartWithOneBook stamp: 'EMI 11/23/2020 21:16:34'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutCartWithMoreThanOneBook stamp: 'EMI 11/23/2020 21:16:34'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/23/2020 21:16:34'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithExpiredCard stamp: 'EMI 11/23/2020 21:16:34'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 21:18:25'!
test06CashierCannotCheckoutWithIncorrectNameOnCard
	| cashier mp card catalogue carrito |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'Tito' withID: 1112 withExpirationDate: (GregorianMonthOfYear yearNumber: 2020 monthNumber: 1).
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithExpiredCardMessage].! !

!classDefinition: #OnlyChecksIDsAndNamesMerchantProcessorSimulator category: 'TusLibros' stamp: 'EMI 11/23/2020 21:21:51'!
MerchantProcessorSimulator subclass: #OnlyChecksIDsAndNamesMerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 21:21:34' prior: 50920215!
test06CashierCannotCheckoutWithIncorrectNameOnCard
	| cashier mp card catalogue carrito idsToNamesDictionary |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'NombreInvalido' withID: 1112 withExpirationDate: (GregorianMonthOfYear yearNumber: 2020 monthNumber: 1).
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	
	idsToNamesDictionary _ Dictionary new.
	idsToNamesDictionary add:1112->'NombreValido'.
	mp _ OnlyChecksIDsAndNamesMerchantProcessorSimulator with: idsToNamesDictionary.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithIncorrectName].! !
!MerchantProcessorSimulator methodsFor: 'nil' stamp: 'EMI 11/23/2020 21:22:25'!
debit: anAmount from: aCreditCard
	^self subclassResponsibility.! !

!classDefinition: #OnlyChecksIDsAndNamesMerchantProcessorSimulator category: 'TusLibros' stamp: 'EMI 11/23/2020 21:26:41'!
MerchantProcessorSimulator subclass: #OnlyChecksIDsAndNamesMerchantProcessorSimulator
	instanceVariableNames: 'registeredNamesForIDs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!OnlyChecksIDsAndNamesMerchantProcessorSimulator methodsFor: 'nil' stamp: 'EMI 11/23/2020 21:26:50' overrides: 50920278!
debit: anAmount from: aCreditCard
	| validName |
	validName _ registeredNamesForIDs at: aCreditCard id ifAbsent:[^self class cannotDebitFromCreditCardWithInvalidID.].
	(validName = aCreditCard ownerFullName) ifFalse: [^self].
	^true.
! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 21:27:24'!
cannotDebitUsingCardWithIncorrectName
	^'Cannot debit from credit card with incorrect name.'! !
!OnlyChecksIDsAndNamesMerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 21:27:38' prior: 50920295 overrides: 50920278!
debit: anAmount from: aCreditCard
	| validName |
	validName _ registeredNamesForIDs at: aCreditCard id ifAbsent:[^self class cannotDebitFromCreditCardWithInvalidID.].
	(validName = aCreditCard ownerFullName) ifFalse: [^self class cannotDebitUsingCardWithIncorrectName.].
	^true.
! !
!OnlyChecksIDsAndNamesMerchantProcessorSimulator class methodsFor: 'nil' stamp: 'EMI 11/23/2020 21:28:35'!
initialize: anIDToNamesDictionary
	^self new initialize: anIDToNamesDictionary.! !
!OnlyChecksIDsAndNamesMerchantProcessorSimulator methodsFor: 'nil' stamp: 'EMI 11/23/2020 21:28:46'!
initialize: anIDToNamesDictionary
	registeredNamesForIDs _ anIDToNamesDictionary.! !

!testRun: #CashierTest #test06CashierCannotCheckoutWithIncorrectNameOnCard stamp: 'EMI 11/23/2020 21:29:07'!
ERROR!

!testRun: #CashierTest #test06CashierCannotCheckoutWithIncorrectNameOnCard stamp: 'EMI 11/23/2020 21:29:07'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 21:29:24' prior: 50920249!
test06CashierCannotCheckoutWithIncorrectNameOnCard
	| cashier mp card catalogue carrito idsToNamesDictionary |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'NombreInvalido' withID: 1112 withExpirationDate: (GregorianMonthOfYear yearNumber: 2020 monthNumber: 1).
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	
	idsToNamesDictionary _ Dictionary new.
	idsToNamesDictionary add:1112->'NombreValido'.
	mp _ OnlyChecksIDsAndNamesMerchantProcessorSimulator initialize: idsToNamesDictionary.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithIncorrectName].! !

!testRun: #CashierTest #test06CashierCannotCheckoutWithIncorrectNameOnCard stamp: 'EMI 11/23/2020 21:29:26'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/23/2020 21:29:53' prior: 50920346!
test06CashierCannotCheckoutWithIncorrectNameOnCard
	| cashier mp card catalogue carrito idsToNamesDictionary |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'NombreInvalido' withID: 1112 withExpirationDate: (GregorianMonthOfYear current).
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	
	idsToNamesDictionary _ Dictionary new.
	idsToNamesDictionary add:1112->'NombreValido'.
	mp _ OnlyChecksIDsAndNamesMerchantProcessorSimulator initialize: idsToNamesDictionary.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithIncorrectName].! !

!testRun: #CashierTest #test06CashierCannotCheckoutWithIncorrectNameOnCard stamp: 'EMI 11/23/2020 21:29:56'!
FAILURE!
!OnlyChecksIDsAndNamesMerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'EMI 11/23/2020 21:32:46' prior: 50920314 overrides: 50920278!
debit: anAmount from: aCreditCard
	| validName |
	validName _ registeredNamesForIDs at: aCreditCard id ifAbsent:[^Error signal: self class cannotDebitFromCreditCardWithInvalidID.].
	(validName = aCreditCard ownerFullName) ifFalse: [^Error signal: self class cannotDebitUsingCardWithIncorrectName.].
	^true.
! !

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/23/2020 21:32:50'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutCartWithOneBook stamp: 'EMI 11/23/2020 21:32:50'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutCartWithMoreThanOneBook stamp: 'EMI 11/23/2020 21:32:50'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/23/2020 21:32:50'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithExpiredCard stamp: 'EMI 11/23/2020 21:32:50'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutWithIncorrectNameOnCard stamp: 'EMI 11/23/2020 21:32:50'!
PASSED!

----SNAPSHOT----(23 November 2020 21:32:54) CuisUniversity-4383.image priorSource: 18805110!

----SNAPSHOT----(23 November 2020 21:33:23) CuisUniversity-4383.image priorSource: 18841486!

----SNAPSHOT----(23 November 2020 21:33:42) CuisUniversity-4383.image priorSource: 18841580!

----SNAPSHOT----(23 November 2020 21:59:19) CuisUniversity-4383.image priorSource: 18841674!

----QUIT----(23 November 2020 21:59:22) CuisUniversity-4383.image priorSource: 18841768!

----STARTUP---- (24 November 2020 17:29:04) as /home/doraserver/CuisUniversity/CuisUniversity-4383.image!

!CreditCard class methodsFor: 'error messages' stamp: 'EMI 11/24/2020 17:32:49'!
cannotCreateCardWithInvalidDateFormatMessage
	^'Cannot create card with invalid date format. Use GregorianMonthOfYear.'! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 17:32:49' prior: 50919768!
initializeWithID: anID withExpirationDate: aDate ofOwner: aName.
	(anID <= 0 or:[anID isInteger not]) ifTrue: [^Error signal: self class cannotCreateCardWithInvalidID].
	(aName isEmpty or: [aName size > 30]) ifTrue: [^Error signal: self class cannotCreateCardWithInvalidName].
	(aDate isKindOf: GregorianMonthOfYear) ifFalse: [^Error signal: self class cannotCreateCardWithInvalidDateFormatMessage.].
	id _ anID.
	expirationDate _ aDate.
	name _ aName.! !

!methodRemoval: CreditCard class #cannotCreateCardWithInvalidDateFormat stamp: 'EMI 11/24/2020 17:32:49'!
cannotCreateCardWithInvalidDateFormat
	^'Cannot create card with invalid date format. Use GregorianMonthOfYear.'!
!CreditCard class methodsFor: 'error messages' stamp: 'EMI 11/24/2020 17:33:00'!
cannotCreateCardWithInvalidIDMessage
	^'Cannot create card with invalid ID, must be a positive integer'.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 17:33:00' prior: 50920472!
initializeWithID: anID withExpirationDate: aDate ofOwner: aName.
	(anID <= 0 or:[anID isInteger not]) ifTrue: [^Error signal: self class cannotCreateCardWithInvalidIDMessage].
	(aName isEmpty or: [aName size > 30]) ifTrue: [^Error signal: self class cannotCreateCardWithInvalidName].
	(aDate isKindOf: GregorianMonthOfYear) ifFalse: [^Error signal: self class cannotCreateCardWithInvalidDateFormatMessage.].
	id _ anID.
	expirationDate _ aDate.
	name _ aName.! !

!methodRemoval: CreditCard class #cannotCreateCardWithInvalidID stamp: 'EMI 11/24/2020 17:33:01'!
cannotCreateCardWithInvalidID
	^'Cannot create card with invalid ID, must be a positive integer'.!
!CreditCard class methodsFor: 'error messages' stamp: 'EMI 11/24/2020 17:33:12'!
cannotCreateCardWithInvalidNameMessage
	^'Cannot create card with invalid name. Must not be empty or exceed 30 characters.'.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 17:33:12' prior: 50920503!
initializeWithID: anID withExpirationDate: aDate ofOwner: aName.
	(anID <= 0 or:[anID isInteger not]) ifTrue: [^Error signal: self class cannotCreateCardWithInvalidIDMessage].
	(aName isEmpty or: [aName size > 30]) ifTrue: [^Error signal: self class cannotCreateCardWithInvalidNameMessage].
	(aDate isKindOf: GregorianMonthOfYear) ifFalse: [^Error signal: self class cannotCreateCardWithInvalidDateFormatMessage.].
	id _ anID.
	expirationDate _ aDate.
	name _ aName.! !

!methodRemoval: CreditCard class #cannotCreateCardWithInvalidName stamp: 'EMI 11/24/2020 17:33:12'!
cannotCreateCardWithInvalidName
	^'Cannot create card with invalid name. Must not be empty or exceed 30 characters.'.!
!Cashier class methodsFor: 'error messages' stamp: 'EMI 11/24/2020 17:33:30'!
cannotCheckoutEmptyCartMessage
	^'Cannot checkout empty cart.'.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 17:33:30' prior: 50919814!
checkout: aCart usingCard: aCard
	| bill  |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCartMessage].
	(GregorianMonthOfYear current <= aCard expiration) ifFalse:[^Error signal: self class cannotCheckoutWithExpiredCardMessage.].
	bill _ 0.
	aCart contents do: [:aCartItem | bill _ bill + catalogueDictionary at: aCartItem].
	merchantProcessor debit: bill from: aCard.
	^bill.! !

!methodRemoval: Cashier class #cannotCheckoutEmptyCart stamp: 'EMI 11/24/2020 17:33:30'!
cannotCheckoutEmptyCart
	^'Cannot checkout empty cart.'.!
!MerchantProcessorSimulator class methodsFor: 'error messages' stamp: 'EMI 11/24/2020 17:34:19'!
cannotDebitFromCreditCardWithInvalidIDMessage
	^'Cannot debit from credit card with invalid ID.'! !
!OnlyChecksIDsMerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 17:34:19' prior: 50920051 overrides: 50920278!
debit: anAmount from: aCreditCard
	(validIDs includes: aCreditCard id) ifFalse: [^Error signal: self class cannotDebitFromCreditCardWithInvalidIDMessage].
	^true.! !
!OnlyChecksIDsAndNamesMerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 17:34:20' prior: 50920414 overrides: 50920278!
debit: anAmount from: aCreditCard
	| validName |
	validName _ registeredNamesForIDs at: aCreditCard id ifAbsent:[^Error signal: self class cannotDebitFromCreditCardWithInvalidIDMessage.].
	(validName = aCreditCard ownerFullName) ifFalse: [^Error signal: self class cannotDebitUsingCardWithIncorrectName.].
	^true.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 17:34:20' prior: 50920131!
test04CashierCannotCheckoutWithInvalidCard
	| cashier mp card catalogue carrito |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'Tito' withID: 1112 withExpirationDate: GregorianMonthOfYear current.

	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	mp _ OnlyChecksIDsMerchantProcessorSimulator initialize: (Set with: 1111).
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: mp class cannotDebitFromCreditCardWithInvalidIDMessage].! !

!methodRemoval: MerchantProcessorSimulator class #cannotDebitFromCreditCardWithInvalidID stamp: 'EMI 11/24/2020 17:34:20'!
cannotDebitFromCreditCardWithInvalidID
	^'Cannot debit from credit card with invalid ID.'!
!MerchantProcessorSimulator class methodsFor: 'error messages' stamp: 'EMI 11/24/2020 17:34:30'!
cannotDebitUsingCardWithIncorrectNameMessage
	^'Cannot debit from credit card with incorrect name.'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 17:34:30' prior: 50920379!
test06CashierCannotCheckoutWithIncorrectNameOnCard
	| cashier mp card catalogue carrito idsToNamesDictionary |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'NombreInvalido' withID: 1112 withExpirationDate: (GregorianMonthOfYear current).
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	
	idsToNamesDictionary _ Dictionary new.
	idsToNamesDictionary add:1112->'NombreValido'.
	mp _ OnlyChecksIDsAndNamesMerchantProcessorSimulator initialize: idsToNamesDictionary.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithIncorrectNameMessage].! !
!OnlyChecksIDsAndNamesMerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 17:34:30' prior: 50920602 overrides: 50920278!
debit: anAmount from: aCreditCard
	| validName |
	validName _ registeredNamesForIDs at: aCreditCard id ifAbsent:[^Error signal: self class cannotDebitFromCreditCardWithInvalidIDMessage.].
	(validName = aCreditCard ownerFullName) ifFalse: [^Error signal: self class cannotDebitUsingCardWithIncorrectNameMessage.].
	^true.
! !

!methodRemoval: MerchantProcessorSimulator class #cannotDebitUsingCardWithIncorrectName stamp: 'EMI 11/24/2020 17:34:30'!
cannotDebitUsingCardWithIncorrectName
	^'Cannot debit from credit card with incorrect name.'!

----SNAPSHOT----(24 November 2020 17:35:37) CuisUniversity-4383.image priorSource: 18841862!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 17:36:00' prior: 50919638!
test01CannotCreateCardWithInvalidIDFormat
	self should:[CreditCard of: 'Bob' withID: 1 negated withExpirationDate: GregorianMonthOfYear current.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cannotCreateCardWithInvalidIDMessage].
	
	self should:[CreditCard of: 'Bob' withID: 1.5 withExpirationDate: GregorianMonthOfYear current.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cannotCreateCardWithInvalidIDMessage].
	
	self should:[CreditCard of: 'Bob' withID: 0 withExpirationDate: GregorianMonthOfYear current.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cannotCreateCardWithInvalidIDMessage].! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 17:36:12' prior: 50919683!
test02CannotCreateCardWithInvalidName
	self should:[CreditCard of: '' withID: 1 withExpirationDate: GregorianMonthOfYear current.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cannotCreateCardWithInvalidNameMessage].
	
	self should:[CreditCard of: 'UnStringConMasDeTreintaCaracteres' withID: 1 withExpirationDate: GregorianMonthOfYear current.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cannotCreateCardWithInvalidNameMessage].! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 17:36:17' prior: 50919753!
test03CannotCreateCardWithInvalidDateFormat
	self should:[CreditCard of: 'Pepo' withID: 1 withExpirationDate: Date today]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cannotCreateCardWithInvalidDateFormatMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 17:36:31' prior: 50919864!
test01CashierCannotCheckoutEmptyCart
	| cashier card mp catalogue carrito |
	catalogue _ Dictionary new.
	carrito _ Cart createUsingCatalogue: catalogue keys.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	card _ CreditCard of: 'Pepito' withID: 1234 withExpirationDate: GregorianMonthOfYear current.
	self should: [cashier checkout: carrito usingCard: card.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutEmptyCartMessage].! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'EMI 11/24/2020 17:36:51'!
PASSED!

!testRun: #CartTest #test02CartCanAddOneBook stamp: 'EMI 11/24/2020 17:36:51'!
PASSED!

!testRun: #CartTest #test03CartCanAddMoreThanOneCopyOfABookAtOnce stamp: 'EMI 11/24/2020 17:36:51'!
PASSED!

!testRun: #CartTest #test04CartCanAddMoreThanOneBook stamp: 'EMI 11/24/2020 17:36:51'!
PASSED!

!testRun: #CartTest #test05CartCanAddMoreThanOneBookWithDifferentAmountOfCopies stamp: 'EMI 11/24/2020 17:36:51'!
PASSED!

!testRun: #CartTest #test06CartCanShowContents stamp: 'EMI 11/24/2020 17:36:51'!
PASSED!

!testRun: #CartTest #test07CartCannotAddBookMissingFromCatalogue stamp: 'EMI 11/24/2020 17:36:51'!
PASSED!

!testRun: #CartTest #test08CartCannotAddInvalidAmountOfBooks stamp: 'EMI 11/24/2020 17:36:51'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/24/2020 17:36:53'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutCartWithOneBook stamp: 'EMI 11/24/2020 17:36:53'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutCartWithMoreThanOneBook stamp: 'EMI 11/24/2020 17:36:53'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/24/2020 17:36:53'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithExpiredCard stamp: 'EMI 11/24/2020 17:36:53'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutWithIncorrectNameOnCard stamp: 'EMI 11/24/2020 17:36:53'!
PASSED!

!testRun: #CreditCardTest #test01CannotCreateCardWithInvalidIDFormat stamp: 'EMI 11/24/2020 17:36:56'!
PASSED!

!testRun: #CreditCardTest #test02CannotCreateCardWithInvalidName stamp: 'EMI 11/24/2020 17:36:56'!
PASSED!

!testRun: #CreditCardTest #test03CannotCreateCardWithInvalidDateFormat stamp: 'EMI 11/24/2020 17:36:56'!
PASSED!

----SNAPSHOT----(24 November 2020 17:37:35) CuisUniversity-4383.image priorSource: 18849693!
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 17:41:01'!
test07CashierCannotCheckoutUsingCardWithoutFunds
	| cashier mp card catalogue carrito idsToNamesDictionary |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'NombreInvalido' withID: 1112 withExpirationDate: (GregorianMonthOfYear current).
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	
	idsToNamesDictionary _ Dictionary new.
	idsToNamesDictionary add:1112->'NombreValido'.
	mp _ OnlyChecksIDsAndNamesMerchantProcessorSimulator initialize: idsToNamesDictionary.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithIncorrectNameMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 17:41:10' prior: 50920844!
test07CashierCannotCheckoutUsingCardWithoutFunds
	| cashier mp card catalogue carrito idsToNamesDictionary |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'NombreInvalido' withID: 1112 withExpirationDate: (GregorianMonthOfYear current).
	
	carrito _ Cart createUsingCatalogue: catalogue keys.
	carrito add: '1234' amount: 50.
	
	idsToNamesDictionary _ Dictionary new.
	idsToNamesDictionary add:1112->'NombreValido'.
	mp _ OnlyChecksIDsAndNamesMerchantProcessorSimulator initialize: idsToNamesDictionary.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithIncorrectNameMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 17:41:16' prior: 50920873!
test07CashierCannotCheckoutUsingCardWithoutFunds
	| cashier mp card catalogue cart idsToNamesDictionary |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'NombreInvalido' withID: 1112 withExpirationDate: (GregorianMonthOfYear current).
	
	cart _ Cart createUsingCatalogue: catalogue keys.
	cart add: '1234' amount: 50.
	
	idsToNamesDictionary _ Dictionary new.
	idsToNamesDictionary add:1112->'NombreValido'.
	mp _ OnlyChecksIDsAndNamesMerchantProcessorSimulator initialize: idsToNamesDictionary.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithIncorrectNameMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 17:41:55' prior: 50920902!
test07CashierCannotCheckoutUsingCardWithoutFunds
	| cashier mp card catalogue cart idsToNamesDictionary |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'NombreValido' withID: 1112 withExpirationDate: (GregorianMonthOfYear current).
	
	cart _ Cart createUsingCatalogue: catalogue keys.
	cart add: '1234' amount: 50.
	
	idsToNamesDictionary _ Dictionary new.
	idsToNamesDictionary add:1112->'NombreValido'.
	mp _ OnlyChecksIDsAndNamesMerchantProcessorSimulator initialize: idsToNamesDictionary.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithIncorrectNameMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 17:43:01' prior: 50920931!
test07CashierCannotCheckoutUsingCardWithoutFunds
	| cashier mp card catalogue cart idsToNamesDictionary |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'NombreValido' withID: 1112 withExpirationDate: (GregorianMonthOfYear current).
	
	cart _ Cart createUsingCatalogue: catalogue keys.
	cart add: '1234' amount: 50.
	
	idsToNamesDictionary _ Dictionary new.
	idsToNamesDictionary add:1112->49.
	mp _ OnlyChecksIDsAndNamesMerchantProcessorSimulator initialize: idsToNamesDictionary.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithIncorrectNameMessage].! !

!classDefinition: #OnlyChecksIDsAndFundsMerchantProcessorSimulator category: 'TusLibros' stamp: 'EMI 11/24/2020 17:44:37'!
MerchantProcessorSimulator subclass: #OnlyChecksIDsAndFundsMerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 17:44:20' prior: 50920960!
test07CashierCannotCheckoutUsingCardWithoutFunds
	| cashier mp card catalogue cart idsToNamesDictionary |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'NombreValido' withID: 1112 withExpirationDate: (GregorianMonthOfYear current).
	
	cart _ Cart createUsingCatalogue: catalogue keys.
	cart add: '1234' amount: 50.
	
	idsToNamesDictionary _ Dictionary new.
	idsToNamesDictionary add:1112->49.
	mp _ OnlyChecksIDsAndFundsMerchantProcessorSimulator initialize: idsToNamesDictionary.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithInsufficientFunds].! !
!MerchantProcessorSimulator class methodsFor: 'nil' stamp: 'EMI 11/24/2020 17:44:49'!
cannotDebitUsingCardWithInsufficientFunds! !
!MerchantProcessorSimulator class methodsFor: 'error messages' stamp: 'EMI 11/24/2020 17:45:37' prior: 50921026!
cannotDebitUsingCardWithInsufficientFunds
	^'Cannot debit using card with insufficient funds.'.! !

!classDefinition: #OnlyChecksIDsAndFundsMerchantProcessorSimulator category: 'TusLibros' stamp: 'EMI 11/24/2020 17:47:08'!
MerchantProcessorSimulator subclass: #OnlyChecksIDsAndFundsMerchantProcessorSimulator
	instanceVariableNames: 'registeredFundsForIDs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!OnlyChecksIDsAndFundsMerchantProcessorSimulator methodsFor: 'nil' stamp: 'EMI 11/24/2020 17:47:07' overrides: 50920278!
debit: anAmount from: aCreditCard
	| funds |
	funds _ registeredFundsForIDs at: aCreditCard id ifAbsent:[^Error signal: self class cannotDebitFromCreditCardWithInvalidIDMessage.].
	(funds < anAmount) ifFalse: [^Error signal: self class cannotDebitUsingCardWithInsufficientFunds.].
	^true.! !
!OnlyChecksIDsAndFundsMerchantProcessorSimulator methodsFor: 'nil' stamp: 'EMI 11/24/2020 17:47:42'!
initialize: anIDToFundsDictionary
	registeredFundsForIDs _ anIDToFundsDictionary.! !
!OnlyChecksIDsAndFundsMerchantProcessorSimulator class methodsFor: 'nil' stamp: 'EMI 11/24/2020 17:47:58'!
initialize: anIDToNamesDictionary
	^self new initialize: anIDToNamesDictionary.! !
!OnlyChecksIDsAndFundsMerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 17:48:05' prior: 50921068!
initialize: anIDToFundsDictionary
	^self new initialize: anIDToFundsDictionary.! !

!testRun: #CashierTest #test07CashierCannotCheckoutUsingCardWithoutFunds stamp: 'EMI 11/24/2020 17:48:45'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 17:49:47' prior: 50920998!
test07CashierCannotCheckoutUsingCardWithoutFunds
	| cashier mp card catalogue cart idsToFundsDictionary |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'NombreValido' withID: 1112 withExpirationDate: (GregorianMonthOfYear current).
	
	cart _ Cart createUsingCatalogue: catalogue keys.
	cart add: '1234' amount: 50.
	
	idsToFundsDictionary _ Dictionary new.
	idsToFundsDictionary add:1112->49.
	mp _ OnlyChecksIDsAndFundsMerchantProcessorSimulator initialize: idsToFundsDictionary.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithInsufficientFunds].! !
!OnlyChecksIDsAndFundsMerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 17:50:20' prior: 50921049 overrides: 50920278!
debit: anAmount from: aCreditCard
	| funds |
	funds _ registeredFundsForIDs at: aCreditCard id ifAbsent:[^Error signal: self class cannotDebitFromCreditCardWithInvalidIDMessage.].
	(funds < anAmount) ifTrue: [^Error signal: self class cannotDebitUsingCardWithInsufficientFunds.].
	^true.! !

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/24/2020 17:50:25'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutCartWithOneBook stamp: 'EMI 11/24/2020 17:50:25'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutCartWithMoreThanOneBook stamp: 'EMI 11/24/2020 17:50:25'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/24/2020 17:50:25'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithExpiredCard stamp: 'EMI 11/24/2020 17:50:25'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutWithIncorrectNameOnCard stamp: 'EMI 11/24/2020 17:50:26'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutUsingCardWithoutFunds stamp: 'EMI 11/24/2020 17:50:26'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 17:57:38' prior: 50920615!
test04CashierCannotCheckoutWithInvalidCard
	| cashier mp card catalogue cart |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'Tito' withID: 1112 withExpirationDate: GregorianMonthOfYear current.

	cart _ Cart createUsingCatalogue: catalogue keys.
	cart add: '1234' amount: 50.
	mp _ OnlyChecksIDsMerchantProcessorSimulator initialize: (Set with: 1111).
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: mp class cannotDebitFromCreditCardWithInvalidIDMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 17:57:51' prior: 50920765!
test01CashierCannotCheckoutEmptyCart
	| cashier card mp catalogue cart |
	catalogue _ Dictionary new.
	cart _ Cart createUsingCatalogue: catalogue keys.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	card _ CreditCard of: 'Pepito' withID: 1234 withExpirationDate: GregorianMonthOfYear current.
	self should: [cashier checkout: cart usingCard: card.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutEmptyCartMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 17:58:02' prior: 50919965!
test02CashierCanCheckoutCartWithOneBook
	| cashier mp card catalogue cart |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'Pepo' withID: 1111 withExpirationDate: GregorianMonthOfYear current.
	cart _ Cart createUsingCatalogue: catalogue keys.
	cart add: '1234'.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card) equals: 1.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 17:58:12' prior: 50919984!
test03CashierCanCheckoutCartWithMoreThanOneBook
	| cashier mp card catalogue cart |
	catalogue _ Dictionary new.
	catalogue add: '1234'->1.
	card _ CreditCard of: 'Pepo' withID: 1111 withExpirationDate: GregorianMonthOfYear current.

	cart _ Cart createUsingCatalogue: catalogue keys.
	cart add: '1234' amount: 50.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card) equals: 50.! !

'aaaaaaaaaaaaaa' copyFrom: 0 to: 30.!

'aaaaaaaaaaaaaa' copyFrom: 1 to: 30.!

s _ 'aaaaaaaaaaaaaa'.!

s copyFrom: 1 to: s size.!

s copyFrom: 1 to: s size.!
!CreditCard methodsFor: 'initialize' stamp: 'EMI 11/24/2020 18:06:09' prior: 50920534!
initializeWithID: anID withExpirationDate: aDate ofOwner: aName.
	(anID <= 0 or:[anID isInteger not]) ifTrue: [^Error signal: self class cannotCreateCardWithInvalidIDMessage].
	(aName isEmpty) ifTrue: [^Error signal: self class cannotCreateCardWithInvalidNameMessage].
	(aDate isKindOf: GregorianMonthOfYear) ifFalse: [^Error signal: self class cannotCreateCardWithInvalidDateFormatMessage.].
	id _ anID.
	expirationDate _ aDate.
	name _ (aName size <= 30) ifTrue: [aName] ifFalse:[aName copyFrom: 1 to: 30].! !
!CreditCard methodsFor: 'initialize' stamp: 'EMI 11/24/2020 18:07:23' prior: 50921237!
initializeWithID: anID withExpirationDate: aDate ofOwner: aName.
	(anID <= 0 or:[anID isInteger not]) ifTrue: [^Error signal: self class cannotCreateCardWithInvalidIDMessage].
	(aName isEmpty) ifTrue: [^Error signal: self class cannotCreateCardWithInvalidNameMessage].
	(aDate isKindOf: GregorianMonthOfYear) ifFalse: [^Error signal: self class cannotCreateCardWithInvalidDateFormatMessage.].
	id _ anID.
	expirationDate _ aDate.
	name _ aName copyFrom: 1 to: (30 min: aName size).! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 18:07:49' prior: 50920734!
test02CannotCreateCardWithInvalidName
	self should:[CreditCard of: '' withID: 1 withExpirationDate: GregorianMonthOfYear current.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cannotCreateCardWithInvalidNameMessage].! !

!testRun: #CreditCardTest #test01CannotCreateCardWithInvalidIDFormat stamp: 'EMI 11/24/2020 18:08:09'!
PASSED!

!testRun: #CreditCardTest #test02CannotCreateCardWithInvalidName stamp: 'EMI 11/24/2020 18:08:09'!
PASSED!

!testRun: #CreditCardTest #test03CannotCreateCardWithInvalidDateFormat stamp: 'EMI 11/24/2020 18:08:09'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/24/2020 18:08:12'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutCartWithOneBook stamp: 'EMI 11/24/2020 18:08:12'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutCartWithMoreThanOneBook stamp: 'EMI 11/24/2020 18:08:12'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/24/2020 18:08:12'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithExpiredCard stamp: 'EMI 11/24/2020 18:08:12'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutWithIncorrectNameOnCard stamp: 'EMI 11/24/2020 18:08:12'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutUsingCardWithoutFunds stamp: 'EMI 11/24/2020 18:08:12'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'EMI 11/24/2020 18:08:20'!
PASSED!

!testRun: #CartTest #test02CartCanAddOneBook stamp: 'EMI 11/24/2020 18:08:20'!
PASSED!

!testRun: #CartTest #test03CartCanAddMoreThanOneCopyOfABookAtOnce stamp: 'EMI 11/24/2020 18:08:20'!
PASSED!

!testRun: #CartTest #test04CartCanAddMoreThanOneBook stamp: 'EMI 11/24/2020 18:08:20'!
PASSED!

!testRun: #CartTest #test05CartCanAddMoreThanOneBookWithDifferentAmountOfCopies stamp: 'EMI 11/24/2020 18:08:20'!
PASSED!

!testRun: #CartTest #test06CartCanShowContents stamp: 'EMI 11/24/2020 18:08:20'!
PASSED!

!testRun: #CartTest #test07CartCannotAddBookMissingFromCatalogue stamp: 'EMI 11/24/2020 18:08:20'!
PASSED!

!testRun: #CartTest #test08CartCannotAddInvalidAmountOfBooks stamp: 'EMI 11/24/2020 18:08:20'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:13:00' prior: 50921175!
test01CashierCannotCheckoutEmptyCart
	| cashier card mp catalogue cart |
	catalogue _ Dictionary new.
	cart _ Cart createUsingCatalogue: catalogue keys.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withCatalogue: catalogue withMerchantProcessor: mp.
	card _ CreditCard of: 'Pepito' withID: 1234 withExpirationDate: GregorianMonthOfYear current.
	
	self should: [cashier checkout: cart usingCard: card.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutEmptyCartMessage].! !

TestCase subclass: #CashierTest
	instanceVariableNames: 'catalogo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'EMI 11/24/2020 18:14:59'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'catalogo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'setUp' stamp: 'EMI 11/24/2020 18:15:15' overrides: 16927572!
setUp! !
!CashierTest methodsFor: 'setUp' stamp: 'EMI 11/24/2020 18:15:23' prior: 50921378 overrides: 16927572!
setUp
	catalogo _ Dictionary new.! !
!CashierTest methodsFor: 'setUp' stamp: 'EMI 11/24/2020 18:15:38' prior: 50921382 overrides: 16927572!
setUp
	catalogo _ Dictionary new.
	catalogo add: '1234'->1.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:16:11' prior: 50921346!
test01CashierCannotCheckoutEmptyCart
	| cashier card mp cart |
	cart _ Cart createUsingCatalogue: catalogo keys.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withCatalogue: catalogo withMerchantProcessor: mp.
	card _ CreditCard of: 'Pepito' withID: 1234 withExpirationDate: GregorianMonthOfYear current.
	
	self should: [cashier checkout: cart usingCard: card.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutEmptyCartMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:16:28' prior: 50921195!
test02CashierCanCheckoutCartWithOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: 1111 withExpirationDate: GregorianMonthOfYear current.
	cart _ Cart createUsingCatalogue: catalogo keys.
	cart add: '1234'.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withCatalogue: catalogo withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card) equals: 1.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:16:54' prior: 50921213!
test03CashierCanCheckoutCartWithMoreThanOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: 1111 withExpirationDate: GregorianMonthOfYear current.

	cart _ Cart createUsingCatalogue: catalogo keys.
	cart add: '1234' amount: 50.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withCatalogue: catalogo withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card) equals: 50.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:17:09' prior: 50921151!
test04CashierCannotCheckoutWithInvalidCard
	| cashier mp card cart |
	card _ CreditCard of: 'Tito' withID: 1112 withExpirationDate: GregorianMonthOfYear current.

	cart _ Cart createUsingCatalogue: catalogo keys.
	cart add: '1234' amount: 50.
	mp _ OnlyChecksIDsMerchantProcessorSimulator initialize: (Set with: 1111).
	cashier _ Cashier withCatalogue: catalogo withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: mp class cannotDebitFromCreditCardWithInvalidIDMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:17:26' prior: 50920171!
test05CashierCannotCheckoutWithExpiredCard
	| cashier mp card carrito |
	card _ CreditCard of: 'Tito' withID: 1112 withExpirationDate: (GregorianMonthOfYear yearNumber: 2020 monthNumber: 1).
	
	carrito _ Cart createUsingCatalogue: catalogo keys.
	carrito add: '1234' amount: 50.
	
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withCatalogue: catalogo withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithExpiredCardMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:17:41' prior: 50920653!
test06CashierCannotCheckoutWithIncorrectNameOnCard
	| cashier mp card carrito idsToNamesDictionary |
	card _ CreditCard of: 'NombreInvalido' withID: 1112 withExpirationDate: (GregorianMonthOfYear current).
	
	carrito _ Cart createUsingCatalogue: catalogo keys.
	carrito add: '1234' amount: 50.
	
	idsToNamesDictionary _ Dictionary new.
	idsToNamesDictionary add:1112->'NombreValido'.
	mp _ OnlyChecksIDsAndNamesMerchantProcessorSimulator initialize: idsToNamesDictionary.
	cashier _ Cashier withCatalogue: catalogo withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithIncorrectNameMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:18:00' prior: 50921084!
test07CashierCannotCheckoutUsingCardWithoutFunds
	| cashier mp card cart idsToFundsDictionary |
	card _ CreditCard of: 'NombreValido' withID: 1112 withExpirationDate: (GregorianMonthOfYear current).
	
	cart _ Cart createUsingCatalogue: catalogo keys.
	cart add: '1234' amount: 50.
	
	idsToFundsDictionary _ Dictionary new.
	idsToFundsDictionary add:1112->49.
	mp _ OnlyChecksIDsAndFundsMerchantProcessorSimulator initialize: idsToFundsDictionary.
	cashier _ Cashier withCatalogue: catalogo withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithInsufficientFunds].! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'EMI 11/24/2020 18:19:07'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'listaPrecios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 18:19:07' prior: 50921515!
test07CashierCannotCheckoutUsingCardWithoutFunds
	| cashier mp card cart idsToFundsDictionary |
	card _ CreditCard of: 'NombreValido' withID: 1112 withExpirationDate: (GregorianMonthOfYear current).
	
	cart _ Cart createUsingCatalogue: listaPrecios keys.
	cart add: '1234' amount: 50.
	
	idsToFundsDictionary _ Dictionary new.
	idsToFundsDictionary add:1112->49.
	mp _ OnlyChecksIDsAndFundsMerchantProcessorSimulator initialize: idsToFundsDictionary.
	cashier _ Cashier withCatalogue: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithInsufficientFunds].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 18:19:07' prior: 50921444!
test04CashierCannotCheckoutWithInvalidCard
	| cashier mp card cart |
	card _ CreditCard of: 'Tito' withID: 1112 withExpirationDate: GregorianMonthOfYear current.

	cart _ Cart createUsingCatalogue: listaPrecios keys.
	cart add: '1234' amount: 50.
	mp _ OnlyChecksIDsMerchantProcessorSimulator initialize: (Set with: 1111).
	cashier _ Cashier withCatalogue: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: mp class cannotDebitFromCreditCardWithInvalidIDMessage].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 18:19:07' prior: 50921392!
test01CashierCannotCheckoutEmptyCart
	| cashier card mp cart |
	cart _ Cart createUsingCatalogue: listaPrecios keys.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withCatalogue: listaPrecios withMerchantProcessor: mp.
	card _ CreditCard of: 'Pepito' withID: 1234 withExpirationDate: GregorianMonthOfYear current.
	
	self should: [cashier checkout: cart usingCard: card.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutEmptyCartMessage].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 18:19:07' prior: 50921466!
test05CashierCannotCheckoutWithExpiredCard
	| cashier mp card carrito |
	card _ CreditCard of: 'Tito' withID: 1112 withExpirationDate: (GregorianMonthOfYear yearNumber: 2020 monthNumber: 1).
	
	carrito _ Cart createUsingCatalogue: listaPrecios keys.
	carrito add: '1234' amount: 50.
	
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withCatalogue: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithExpiredCardMessage].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 18:19:07' prior: 50921427!
test03CashierCanCheckoutCartWithMoreThanOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: 1111 withExpirationDate: GregorianMonthOfYear current.

	cart _ Cart createUsingCatalogue: listaPrecios keys.
	cart add: '1234' amount: 50.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withCatalogue: listaPrecios withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card) equals: 50.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 18:19:07' prior: 50921411!
test02CashierCanCheckoutCartWithOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: 1111 withExpirationDate: GregorianMonthOfYear current.
	cart _ Cart createUsingCatalogue: listaPrecios keys.
	cart add: '1234'.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withCatalogue: listaPrecios withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card) equals: 1.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 18:19:07' prior: 50921387 overrides: 16927572!
setUp
	listaPrecios _ Dictionary new.
	listaPrecios add: '1234'->1.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 18:19:07' prior: 50921488!
test06CashierCannotCheckoutWithIncorrectNameOnCard
	| cashier mp card carrito idsToNamesDictionary |
	card _ CreditCard of: 'NombreInvalido' withID: 1112 withExpirationDate: (GregorianMonthOfYear current).
	
	carrito _ Cart createUsingCatalogue: listaPrecios keys.
	carrito add: '1234' amount: 50.
	
	idsToNamesDictionary _ Dictionary new.
	idsToNamesDictionary add:1112->'NombreValido'.
	mp _ OnlyChecksIDsAndNamesMerchantProcessorSimulator initialize: idsToNamesDictionary.
	cashier _ Cashier withCatalogue: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithIncorrectNameMessage].! !
!CashierTest methodsFor: 'aux' stamp: 'EMI 11/24/2020 18:20:27'!
catalogue
	^listaPrecios keys.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:20:38' prior: 50921598!
test01CashierCannotCheckoutEmptyCart
	| cashier card mp cart |
	cart _ Cart createUsingCatalogue: self catalogue.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withCatalogue: listaPrecios withMerchantProcessor: mp.
	card _ CreditCard of: 'Pepito' withID: 1234 withExpirationDate: GregorianMonthOfYear current.
	
	self should: [cashier checkout: cart usingCard: card.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutEmptyCartMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:20:50' prior: 50921657!
test02CashierCanCheckoutCartWithOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: 1111 withExpirationDate: GregorianMonthOfYear current.
	cart _ Cart createUsingCatalogue: self catalogue.
	cart add: '1234'.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withCatalogue: listaPrecios withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card) equals: 1.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:20:56' prior: 50921640!
test03CashierCanCheckoutCartWithMoreThanOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: 1111 withExpirationDate: GregorianMonthOfYear current.

	cart _ Cart createUsingCatalogue: self catalogue.
	cart add: '1234' amount: 50.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withCatalogue: listaPrecios withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card) equals: 50.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:21:05' prior: 50921576!
test04CashierCannotCheckoutWithInvalidCard
	| cashier mp card cart |
	card _ CreditCard of: 'Tito' withID: 1112 withExpirationDate: GregorianMonthOfYear current.

	cart _ Cart createUsingCatalogue: self catalogue.
	cart add: '1234' amount: 50.
	mp _ OnlyChecksIDsMerchantProcessorSimulator initialize: (Set with: 1111).
	cashier _ Cashier withCatalogue: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: mp class cannotDebitFromCreditCardWithInvalidIDMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:21:12' prior: 50921618!
test05CashierCannotCheckoutWithExpiredCard
	| cashier mp card carrito |
	card _ CreditCard of: 'Tito' withID: 1112 withExpirationDate: (GregorianMonthOfYear yearNumber: 2020 monthNumber: 1).
	
	carrito _ Cart createUsingCatalogue: self catalogue.
	carrito add: '1234' amount: 50.
	
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withCatalogue: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithExpiredCardMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:21:17' prior: 50921680!
test06CashierCannotCheckoutWithIncorrectNameOnCard
	| cashier mp card carrito idsToNamesDictionary |
	card _ CreditCard of: 'NombreInvalido' withID: 1112 withExpirationDate: (GregorianMonthOfYear current).
	
	carrito _ Cart createUsingCatalogue: self catalogue.
	carrito add: '1234' amount: 50.
	
	idsToNamesDictionary _ Dictionary new.
	idsToNamesDictionary add:1112->'NombreValido'.
	mp _ OnlyChecksIDsAndNamesMerchantProcessorSimulator initialize: idsToNamesDictionary.
	cashier _ Cashier withCatalogue: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithIncorrectNameMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:21:22' prior: 50921549!
test07CashierCannotCheckoutUsingCardWithoutFunds
	| cashier mp card cart idsToFundsDictionary |
	card _ CreditCard of: 'NombreValido' withID: 1112 withExpirationDate: (GregorianMonthOfYear current).
	
	cart _ Cart createUsingCatalogue: self catalogue.
	cart add: '1234' amount: 50.
	
	idsToFundsDictionary _ Dictionary new.
	idsToFundsDictionary add:1112->49.
	mp _ OnlyChecksIDsAndFundsMerchantProcessorSimulator initialize: idsToFundsDictionary.
	cashier _ Cashier withCatalogue: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithInsufficientFunds].! !

----SNAPSHOT----(24 November 2020 18:21:28) CuisUniversity-4383.image priorSource: 18854108!

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/24/2020 18:21:32'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutCartWithOneBook stamp: 'EMI 11/24/2020 18:21:32'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutCartWithMoreThanOneBook stamp: 'EMI 11/24/2020 18:21:32'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/24/2020 18:21:32'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithExpiredCard stamp: 'EMI 11/24/2020 18:21:32'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutWithIncorrectNameOnCard stamp: 'EMI 11/24/2020 18:21:32'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutUsingCardWithoutFunds stamp: 'EMI 11/24/2020 18:21:32'!
PASSED!

!methodRemoval: Cashier class #withCatalogue: stamp: 'EMI 11/24/2020 18:21:49'!
withCatalogue: aCatalogueDictionary
	^self new initializeWithCatalogue: aCatalogueDictionary !
!Cashier class methodsFor: 'instance creation' stamp: 'EMI 11/24/2020 18:22:14'!
withPricesList: aCatalogueDictionary withMerchantProcessor: aMerchantProcessor 
	^self new initializeWithCatalogue: aCatalogueDictionary withMerchantProcessor: aMerchantProcessor ! !

!methodRemoval: Cashier class #withCatalogue:withMerchantProcessor: stamp: 'EMI 11/24/2020 18:22:14'!
withCatalogue: aCatalogueDictionary withMerchantProcessor: aMerchantProcessor 
	^self new initializeWithCatalogue: aCatalogueDictionary withMerchantProcessor: aMerchantProcessor !
!Cashier class methodsFor: 'instance creation' stamp: 'EMI 11/24/2020 18:22:25' prior: 50921893!
withPricesList: aPriceListDictionary withMerchantProcessor: aMerchantProcessor 
	^self new initializeWithCatalogue: aPriceListDictionary withMerchantProcessor: aMerchantProcessor ! !

!methodRemoval: Cashier #initializeWithCatalogue: stamp: 'EMI 11/24/2020 18:22:31'!
initializeWithCatalogue: aCatalogueDictionary 
	catalogueDictionary := aCatalogueDictionary.!
!Cashier methodsFor: 'initialization' stamp: 'EMI 11/24/2020 18:23:34'!
initializeWithPriceList: aCatalogueDictionary withMerchantProcessor: aMerchantProcessor 
	catalogueDictionary := aCatalogueDictionary.
	merchantProcessor := aMerchantProcessor.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 18:23:34' prior: 50921911!
withPricesList: aPriceListDictionary withMerchantProcessor: aMerchantProcessor 
	^self new initializeWithPriceList: aPriceListDictionary withMerchantProcessor: aMerchantProcessor ! !

!methodRemoval: Cashier #initializeWithCatalogue:withMerchantProcessor: stamp: 'EMI 11/24/2020 18:23:34'!
initializeWithCatalogue: aCatalogueDictionary withMerchantProcessor: aMerchantProcessor 
	catalogueDictionary := aCatalogueDictionary.
	merchantProcessor := aMerchantProcessor.!
!Cashier methodsFor: 'initialization' stamp: 'EMI 11/24/2020 18:23:45' prior: 50921925!
initializeWithPriceList: aPriceListDictionary withMerchantProcessor: aMerchantProcessor 
	catalogueDictionary := aPriceListDictionary.
	merchantProcessor := aMerchantProcessor.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'EMI 11/24/2020 18:23:53'!
Object subclass: #Cashier
	instanceVariableNames: 'priceListDictionary merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 18:23:53' prior: 50920563!
checkout: aCart usingCard: aCard
	| bill  |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCartMessage].
	(GregorianMonthOfYear current <= aCard expiration) ifFalse:[^Error signal: self class cannotCheckoutWithExpiredCardMessage.].
	bill _ 0.
	aCart contents do: [:aCartItem | bill _ bill + priceListDictionary at: aCartItem].
	merchantProcessor debit: bill from: aCard.
	^bill.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 18:23:53' prior: 50921952!
initializeWithPriceList: aPriceListDictionary withMerchantProcessor: aMerchantProcessor 
	priceListDictionary := aPriceListDictionary.
	merchantProcessor := aMerchantProcessor.! !
!Cashier class methodsFor: 'instance creation' stamp: 'EMI 11/24/2020 18:24:03'!
withPriceList: aPriceListDictionary withMerchantProcessor: aMerchantProcessor 
	^self new initializeWithPriceList: aPriceListDictionary withMerchantProcessor: aMerchantProcessor ! !

!methodRemoval: Cashier class #withPricesList:withMerchantProcessor: stamp: 'EMI 11/24/2020 18:24:04'!
withPricesList: aPriceListDictionary withMerchantProcessor: aMerchantProcessor 
	^self new initializeWithPriceList: aPriceListDictionary withMerchantProcessor: aMerchantProcessor !

----SNAPSHOT----(24 November 2020 18:24:07) CuisUniversity-4383.image priorSource: 18886689!
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:24:25' prior: 50921711!
test01CashierCannotCheckoutEmptyCart
	| cashier card mp cart |
	cart _ Cart createUsingCatalogue: self catalogue.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	card _ CreditCard of: 'Pepito' withID: 1234 withExpirationDate: GregorianMonthOfYear current.
	
	self should: [cashier checkout: cart usingCard: card.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutEmptyCartMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:24:43' prior: 50921730!
test02CashierCanCheckoutCartWithOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: 1111 withExpirationDate: GregorianMonthOfYear current.
	cart _ Cart createUsingCatalogue: self catalogue.
	cart add: '1234'.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card) equals: 1.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:25:01' prior: 50921746!
test03CashierCanCheckoutCartWithMoreThanOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: 1111 withExpirationDate: GregorianMonthOfYear current.

	cart _ Cart createUsingCatalogue: self catalogue.
	cart add: '1234' amount: 50.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card) equals: 50.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:25:07' prior: 50921763!
test04CashierCannotCheckoutWithInvalidCard
	| cashier mp card cart |
	card _ CreditCard of: 'Tito' withID: 1112 withExpirationDate: GregorianMonthOfYear current.

	cart _ Cart createUsingCatalogue: self catalogue.
	cart add: '1234' amount: 50.
	mp _ OnlyChecksIDsMerchantProcessorSimulator initialize: (Set with: 1111).
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: mp class cannotDebitFromCreditCardWithInvalidIDMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:25:15' prior: 50921785!
test05CashierCannotCheckoutWithExpiredCard
	| cashier mp card carrito |
	card _ CreditCard of: 'Tito' withID: 1112 withExpirationDate: (GregorianMonthOfYear yearNumber: 2020 monthNumber: 1).
	
	carrito _ Cart createUsingCatalogue: self catalogue.
	carrito add: '1234' amount: 50.
	
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithExpiredCardMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:25:22' prior: 50921807!
test06CashierCannotCheckoutWithIncorrectNameOnCard
	| cashier mp card carrito idsToNamesDictionary |
	card _ CreditCard of: 'NombreInvalido' withID: 1112 withExpirationDate: (GregorianMonthOfYear current).
	
	carrito _ Cart createUsingCatalogue: self catalogue.
	carrito add: '1234' amount: 50.
	
	idsToNamesDictionary _ Dictionary new.
	idsToNamesDictionary add:1112->'NombreValido'.
	mp _ OnlyChecksIDsAndNamesMerchantProcessorSimulator initialize: idsToNamesDictionary.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithIncorrectNameMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:25:31' prior: 50921834!
test07CashierCannotCheckoutUsingCardWithoutFunds
	| cashier mp card cart idsToFundsDictionary |
	card _ CreditCard of: 'NombreValido' withID: 1112 withExpirationDate: (GregorianMonthOfYear current).
	
	cart _ Cart createUsingCatalogue: self catalogue.
	cart add: '1234' amount: 50.
	
	idsToFundsDictionary _ Dictionary new.
	idsToFundsDictionary add:1112->49.
	mp _ OnlyChecksIDsAndFundsMerchantProcessorSimulator initialize: idsToFundsDictionary.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithInsufficientFunds].! !

!testRun: #CashierTest #test07CashierCannotCheckoutUsingCardWithoutFunds stamp: 'EMI 11/24/2020 18:25:41'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/24/2020 18:25:41'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutCartWithOneBook stamp: 'EMI 11/24/2020 18:25:41'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutCartWithMoreThanOneBook stamp: 'EMI 11/24/2020 18:25:41'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/24/2020 18:25:41'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithExpiredCard stamp: 'EMI 11/24/2020 18:25:41'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutWithIncorrectNameOnCard stamp: 'EMI 11/24/2020 18:25:41'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutUsingCardWithoutFunds stamp: 'EMI 11/24/2020 18:25:41'!
PASSED!

TestCase subclass: #CashierTest
	instanceVariableNames: 'listaPrecios catalogo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'EMI 11/24/2020 18:27:08'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'listaPrecios catalogo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'setUp' stamp: 'EMI 11/24/2020 18:27:32' prior: 50921674 overrides: 16927572!
setUp
	listaPrecios _ Dictionary new.
	listaPrecios add: '1234'->1.
	catalogo _ listaPrecios keys.! !

!methodRemoval: CashierTest #catalogue stamp: 'EMI 11/24/2020 18:27:41'!
catalogue
	^listaPrecios keys.!
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:27:57' prior: 50922015!
test01CashierCannotCheckoutEmptyCart
	| cashier card mp cart |
	cart _ Cart createUsingCatalogue: catalogo.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	card _ CreditCard of: 'Pepito' withID: 1234 withExpirationDate: GregorianMonthOfYear current.
	
	self should: [cashier checkout: cart usingCard: card.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutEmptyCartMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:28:02' prior: 50922034!
test02CashierCanCheckoutCartWithOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: 1111 withExpirationDate: GregorianMonthOfYear current.
	cart _ Cart createUsingCatalogue: catalogo.
	cart add: '1234'.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card) equals: 1.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:28:07' prior: 50922050!
test03CashierCanCheckoutCartWithMoreThanOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: 1111 withExpirationDate: GregorianMonthOfYear current.

	cart _ Cart createUsingCatalogue: catalogo.
	cart add: '1234' amount: 50.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card) equals: 50.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:28:12' prior: 50922067!
test04CashierCannotCheckoutWithInvalidCard
	| cashier mp card cart |
	card _ CreditCard of: 'Tito' withID: 1112 withExpirationDate: GregorianMonthOfYear current.

	cart _ Cart createUsingCatalogue: catalogo.
	cart add: '1234' amount: 50.
	mp _ OnlyChecksIDsMerchantProcessorSimulator initialize: (Set with: 1111).
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: mp class cannotDebitFromCreditCardWithInvalidIDMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:28:17' prior: 50922089!
test05CashierCannotCheckoutWithExpiredCard
	| cashier mp card carrito |
	card _ CreditCard of: 'Tito' withID: 1112 withExpirationDate: (GregorianMonthOfYear yearNumber: 2020 monthNumber: 1).
	
	carrito _ Cart createUsingCatalogue: catalogo.
	carrito add: '1234' amount: 50.
	
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithExpiredCardMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:28:22' prior: 50922111!
test06CashierCannotCheckoutWithIncorrectNameOnCard
	| cashier mp card carrito idsToNamesDictionary |
	card _ CreditCard of: 'NombreInvalido' withID: 1112 withExpirationDate: (GregorianMonthOfYear current).
	
	carrito _ Cart createUsingCatalogue: catalogo.
	carrito add: '1234' amount: 50.
	
	idsToNamesDictionary _ Dictionary new.
	idsToNamesDictionary add:1112->'NombreValido'.
	mp _ OnlyChecksIDsAndNamesMerchantProcessorSimulator initialize: idsToNamesDictionary.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithIncorrectNameMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/24/2020 18:28:28' prior: 50922138!
test07CashierCannotCheckoutUsingCardWithoutFunds
	| cashier mp card cart idsToFundsDictionary |
	card _ CreditCard of: 'NombreValido' withID: 1112 withExpirationDate: (GregorianMonthOfYear current).
	
	cart _ Cart createUsingCatalogue: catalogo.
	cart add: '1234' amount: 50.
	
	idsToFundsDictionary _ Dictionary new.
	idsToFundsDictionary add:1112->49.
	mp _ OnlyChecksIDsAndFundsMerchantProcessorSimulator initialize: idsToFundsDictionary.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithInsufficientFunds].! !
!CreditCard methodsFor: 'initialize' stamp: 'EMI 11/24/2020 18:32:21' prior: 50921256!
initializeWithID: anID withExpirationDate: aDate ofOwner: aName.
	(anID <= 0 or:[anID isInteger not]) ifTrue: [^Error signal: self class cannotCreateCardWithInvalidIDMessage].
	(aName isEmpty) ifTrue: [^Error signal: self class cannotCreateCardWithInvalidNameMessage].
	(aDate isKindOf: GregorianMonthOfYear) ifFalse: [^Error signal: self class cannotCreateCardWithInvalidDateFormatMessage.].
	
	id _ anID.
	expirationDate _ aDate.
	name _ aName copyFrom: 1 to: (30 min: aName size).! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'EMI 11/24/2020 18:34:18'!
Object subclass: #Cart
	instanceVariableNames: 'items amount catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 18:34:18' prior: 50917972!
add: aBook amount: aNumberOfCopies 
	(self checkIfBookIsInCatalogue: aBook) ifFalse: [^Error signal: self class bookNotFoundInCatalogueMessage.].
	(aNumberOfCopies isInteger) ifFalse: [^Error signal: self class bookAmountMustBeIntegerMessage.].
	(aNumberOfCopies > 0) ifFalse: [^Error signal: self class bookAmountMustBePositiveMessage].
	amount _ amount + aNumberOfCopies.
	items add: aBook withOccurrences: aNumberOfCopies.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 18:34:18' prior: 50917092!
copiesOf: aBook
	^items occurrencesOf: aBook.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 18:34:18' prior: 50917163!
contents
	^items copy.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 18:34:18' prior: 50917344!
initialize: aCatalogue
	amount _ 0.
	items _ Bag new.
	catalogue _ aCatalogue.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 18:34:18' prior: 50917081!
contains: aBook 
	^items includes: aBook.! !
!Cart methodsFor: 'testing' stamp: 'EMI 11/24/2020 18:34:27' prior: 50922421!
contains: anItem 
	^items includes: anItem.! !
!Cart methodsFor: 'adding' stamp: 'EMI 11/24/2020 18:34:49' prior: 50917831!
add: anItem
	self add: anItem amount: 1.
	
	! !
!Cart methodsFor: 'adding' stamp: 'EMI 11/24/2020 18:34:58' prior: 50922389!
add: anItem amount: aNumberOfCopies 
	(self checkIfBookIsInCatalogue: anItem) ifFalse: [^Error signal: self class bookNotFoundInCatalogueMessage.].
	(aNumberOfCopies isInteger) ifFalse: [^Error signal: self class bookAmountMustBeIntegerMessage.].
	(aNumberOfCopies > 0) ifFalse: [^Error signal: self class bookAmountMustBePositiveMessage].
	amount _ amount + aNumberOfCopies.
	items add: anItem withOccurrences: aNumberOfCopies.! !
!Cart methodsFor: 'adding' stamp: 'EMI 11/24/2020 18:35:13' prior: 50922433!
add: anItem amount: aNumberOfItems 
	(self checkIfBookIsInCatalogue: anItem) ifFalse: [^Error signal: self class bookNotFoundInCatalogueMessage.].
	(aNumberOfItems isInteger) ifFalse: [^Error signal: self class bookAmountMustBeIntegerMessage.].
	(aNumberOfItems > 0) ifFalse: [^Error signal: self class bookAmountMustBePositiveMessage].
	amount _ amount + aNumberOfItems.
	items add: anItem withOccurrences: aNumberOfItems.! !
!Cart methodsFor: 'private' stamp: 'EMI 11/24/2020 18:35:31' prior: 50917405!
checkIfBookIsInCatalogue: anItem
	^catalogue includes: anItem.! !
!Cart methodsFor: 'private' stamp: 'EMI 11/24/2020 18:35:48'!
checkIfItemIsInCatalogue: anItem
	^catalogue includes: anItem.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 18:35:48' prior: 50922449!
add: anItem amount: aNumberOfItems 
	(self checkIfItemIsInCatalogue: anItem) ifFalse: [^Error signal: self class bookNotFoundInCatalogueMessage.].
	(aNumberOfItems isInteger) ifFalse: [^Error signal: self class bookAmountMustBeIntegerMessage.].
	(aNumberOfItems > 0) ifFalse: [^Error signal: self class bookAmountMustBePositiveMessage].
	amount _ amount + aNumberOfItems.
	items add: anItem withOccurrences: aNumberOfItems.! !

!methodRemoval: Cart #checkIfBookIsInCatalogue: stamp: 'EMI 11/24/2020 18:35:48'!
checkIfBookIsInCatalogue: anItem
	^catalogue includes: anItem.!
!Cart methodsFor: 'accessing' stamp: 'EMI 11/24/2020 18:36:06' prior: 50922406!
copiesOf: anItem
	^items occurrencesOf: anItem.! !
!Cart class methodsFor: 'error messages' stamp: 'EMI 11/24/2020 18:36:21'!
itemAmountMustBeIntegerMessage
	^'Book amount must be an integer'.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 18:36:21' prior: 50922474!
add: anItem amount: aNumberOfItems 
	(self checkIfItemIsInCatalogue: anItem) ifFalse: [^Error signal: self class bookNotFoundInCatalogueMessage.].
	(aNumberOfItems isInteger) ifFalse: [^Error signal: self class itemAmountMustBeIntegerMessage.].
	(aNumberOfItems > 0) ifFalse: [^Error signal: self class bookAmountMustBePositiveMessage].
	amount _ amount + aNumberOfItems.
	items add: anItem withOccurrences: aNumberOfItems.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 18:36:21' prior: 50917877!
test08CartCannotAddInvalidAmountOfBooks
	self should: [carrito add: 'El principito' amount: 2.5] 
	raise: Error 
	withExceptionDo: [:anError| 
		self assert: anError messageText equals: Cart itemAmountMustBeIntegerMessage.
		self assert: carrito isEmpty.
		].
	self should: [carrito add: 'El principito' amount: -1] 
	raise: Error 
	withExceptionDo: [:anError| 
		self assert: anError messageText equals: Cart bookAmountMustBePositiveMessage.
		self assert: carrito isEmpty.
		].! !

!methodRemoval: Cart class #bookAmountMustBeIntegerMessage stamp: 'EMI 11/24/2020 18:36:21'!
bookAmountMustBeIntegerMessage
	^'Book amount must be an integer'.!
!Cart class methodsFor: 'error messages' stamp: 'EMI 11/24/2020 18:36:39'!
itemAmountMustBePositiveMessage
	^'Book amount must be a positive integer'.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 18:36:39' prior: 50922504!
add: anItem amount: aNumberOfItems 
	(self checkIfItemIsInCatalogue: anItem) ifFalse: [^Error signal: self class bookNotFoundInCatalogueMessage.].
	(aNumberOfItems isInteger) ifFalse: [^Error signal: self class itemAmountMustBeIntegerMessage.].
	(aNumberOfItems > 0) ifFalse: [^Error signal: self class itemAmountMustBePositiveMessage].
	amount _ amount + aNumberOfItems.
	items add: anItem withOccurrences: aNumberOfItems.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 18:36:39' prior: 50922521!
test08CartCannotAddInvalidAmountOfBooks
	self should: [carrito add: 'El principito' amount: 2.5] 
	raise: Error 
	withExceptionDo: [:anError| 
		self assert: anError messageText equals: Cart itemAmountMustBeIntegerMessage.
		self assert: carrito isEmpty.
		].
	self should: [carrito add: 'El principito' amount: -1] 
	raise: Error 
	withExceptionDo: [:anError| 
		self assert: anError messageText equals: Cart itemAmountMustBePositiveMessage.
		self assert: carrito isEmpty.
		].! !

!methodRemoval: Cart class #bookAmountMustBePositiveMessage stamp: 'EMI 11/24/2020 18:36:39'!
bookAmountMustBePositiveMessage
	^'Book amount must be a positive integer'.!
!Cart class methodsFor: 'error messages' stamp: 'EMI 11/24/2020 18:37:01'!
itemNotFoundInCatalogueMessage
	^'Cannot find requested book in catalogue.'! !
!Cart methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 18:37:01' prior: 50922550!
add: anItem amount: aNumberOfItems 
	(self checkIfItemIsInCatalogue: anItem) ifFalse: [^Error signal: self class itemNotFoundInCatalogueMessage.].
	(aNumberOfItems isInteger) ifFalse: [^Error signal: self class itemAmountMustBeIntegerMessage.].
	(aNumberOfItems > 0) ifFalse: [^Error signal: self class itemAmountMustBePositiveMessage].
	amount _ amount + aNumberOfItems.
	items add: anItem withOccurrences: aNumberOfItems.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 18:37:01' prior: 50917580!
test07CartCannotAddBookMissingFromCatalogue
	self should: [carrito add: 'La celula'] 
	raise: Error 
	withExceptionDo: [:anError| 
		self assert: anError messageText equals: Cart itemNotFoundInCatalogueMessage.
		self assert: carrito isEmpty.
		].! !

!methodRemoval: Cart class #bookNotFoundInCatalogueMessage stamp: 'EMI 11/24/2020 18:37:01'!
bookNotFoundInCatalogueMessage
	^'Cannot find requested book in catalogue.'!
!Cart class methodsFor: 'error messages' stamp: 'EMI 11/24/2020 18:37:18' prior: 50922499!
itemAmountMustBeIntegerMessage
	^'Item amount must be an integer'.! !
!Cart class methodsFor: 'error messages' stamp: 'EMI 11/24/2020 18:37:23' prior: 50922544!
itemAmountMustBePositiveMessage
	^'Item amount must be a positive integer'.! !
!Cart class methodsFor: 'error messages' stamp: 'EMI 11/24/2020 18:37:28' prior: 50922590!
itemNotFoundInCatalogueMessage
	^'Cannot find requested item in catalogue.'! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'EMI 11/24/2020 18:38:03'!
PASSED!

!testRun: #CartTest #test02CartCanAddOneBook stamp: 'EMI 11/24/2020 18:38:03'!
PASSED!

!testRun: #CartTest #test03CartCanAddMoreThanOneCopyOfABookAtOnce stamp: 'EMI 11/24/2020 18:38:03'!
PASSED!

!testRun: #CartTest #test04CartCanAddMoreThanOneBook stamp: 'EMI 11/24/2020 18:38:03'!
PASSED!

!testRun: #CartTest #test05CartCanAddMoreThanOneBookWithDifferentAmountOfCopies stamp: 'EMI 11/24/2020 18:38:03'!
PASSED!

!testRun: #CartTest #test06CartCanShowContents stamp: 'EMI 11/24/2020 18:38:03'!
PASSED!

!testRun: #CartTest #test07CartCannotAddBookMissingFromCatalogue stamp: 'EMI 11/24/2020 18:38:03'!
PASSED!

!testRun: #CartTest #test08CartCannotAddInvalidAmountOfBooks stamp: 'EMI 11/24/2020 18:38:03'!
PASSED!

----SNAPSHOT----(24 November 2020 18:38:07) CuisUniversity-4383.image priorSource: 18891538!
!MerchantProcessorSimulator class methodsFor: 'error messages' stamp: 'EMI 11/24/2020 18:38:57'!
cannotDebitUsingCardWithInsufficientFundsMessage
	^'Cannot debit using card with insufficient funds.'.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 18:38:57' prior: 50922338!
test07CashierCannotCheckoutUsingCardWithoutFunds
	| cashier mp card cart idsToFundsDictionary |
	card _ CreditCard of: 'NombreValido' withID: 1112 withExpirationDate: (GregorianMonthOfYear current).
	
	cart _ Cart createUsingCatalogue: catalogo.
	cart add: '1234' amount: 50.
	
	idsToFundsDictionary _ Dictionary new.
	idsToFundsDictionary add:1112->49.
	mp _ OnlyChecksIDsAndFundsMerchantProcessorSimulator initialize: idsToFundsDictionary.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithInsufficientFundsMessage].! !
!OnlyChecksIDsAndFundsMerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'EMI 11/24/2020 18:38:57' prior: 50921114 overrides: 50920278!
debit: anAmount from: aCreditCard
	| funds |
	funds _ registeredFundsForIDs at: aCreditCard id ifAbsent:[^Error signal: self class cannotDebitFromCreditCardWithInvalidIDMessage.].
	(funds < anAmount) ifTrue: [^Error signal: self class cannotDebitUsingCardWithInsufficientFundsMessage.].
	^true.! !

!methodRemoval: MerchantProcessorSimulator class #cannotDebitUsingCardWithInsufficientFunds stamp: 'EMI 11/24/2020 18:38:57'!
cannotDebitUsingCardWithInsufficientFunds
	^'Cannot debit using card with insufficient funds.'.!

----SNAPSHOT----(24 November 2020 18:43:48) CuisUniversity-4383.image priorSource: 18912689!

----SNAPSHOT----(24 November 2020 18:45:22) CuisUniversity-4383.image priorSource: 18914537!

----SNAPSHOT----(24 November 2020 18:45:38) CuisUniversity-4383.image priorSource: 18914631!

----QUIT----(24 November 2020 18:45:51) CuisUniversity-4383.image priorSource: 18914725!

----STARTUP---- (26 November 2020 20:31:42) as /home/doraserver/CuisUniversity/CuisUniversity-4383.image!

!Cart class methodsFor: 'instance creation' stamp: 'EMI 11/26/2020 20:37:05'!
createUsingPriceList: aCatalogue
	^self new initialize: aCatalogue.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 20:37:05' prior: 50922234!
test02CashierCanCheckoutCartWithOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: 1111 withExpirationDate: GregorianMonthOfYear current.
	cart _ Cart createUsingPriceList: catalogo.
	cart add: '1234'.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card) equals: 1.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 20:37:05' prior: 50922289!
test05CashierCannotCheckoutWithExpiredCard
	| cashier mp card carrito |
	card _ CreditCard of: 'Tito' withID: 1112 withExpirationDate: (GregorianMonthOfYear yearNumber: 2020 monthNumber: 1).
	
	carrito _ Cart createUsingPriceList: catalogo.
	carrito add: '1234' amount: 50.
	
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithExpiredCardMessage].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 20:37:05' prior: 50922311!
test06CashierCannotCheckoutWithIncorrectNameOnCard
	| cashier mp card carrito idsToNamesDictionary |
	card _ CreditCard of: 'NombreInvalido' withID: 1112 withExpirationDate: (GregorianMonthOfYear current).
	
	carrito _ Cart createUsingPriceList: catalogo.
	carrito add: '1234' amount: 50.
	
	idsToNamesDictionary _ Dictionary new.
	idsToNamesDictionary add:1112->'NombreValido'.
	mp _ OnlyChecksIDsAndNamesMerchantProcessorSimulator initialize: idsToNamesDictionary.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithIncorrectNameMessage].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 20:37:05' prior: 50922215!
test01CashierCannotCheckoutEmptyCart
	| cashier card mp cart |
	cart _ Cart createUsingPriceList: catalogo.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	card _ CreditCard of: 'Pepito' withID: 1234 withExpirationDate: GregorianMonthOfYear current.
	
	self should: [cashier checkout: cart usingCard: card.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutEmptyCartMessage].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 20:37:06' prior: 50922683!
test07CashierCannotCheckoutUsingCardWithoutFunds
	| cashier mp card cart idsToFundsDictionary |
	card _ CreditCard of: 'NombreValido' withID: 1112 withExpirationDate: (GregorianMonthOfYear current).
	
	cart _ Cart createUsingPriceList: catalogo.
	cart add: '1234' amount: 50.
	
	idsToFundsDictionary _ Dictionary new.
	idsToFundsDictionary add:1112->49.
	mp _ OnlyChecksIDsAndFundsMerchantProcessorSimulator initialize: idsToFundsDictionary.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithInsufficientFundsMessage].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 20:37:06' prior: 50922267!
test04CashierCannotCheckoutWithInvalidCard
	| cashier mp card cart |
	card _ CreditCard of: 'Tito' withID: 1112 withExpirationDate: GregorianMonthOfYear current.

	cart _ Cart createUsingPriceList: catalogo.
	cart add: '1234' amount: 50.
	mp _ OnlyChecksIDsMerchantProcessorSimulator initialize: (Set with: 1111).
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: mp class cannotDebitFromCreditCardWithInvalidIDMessage].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 20:37:06' prior: 50922250!
test03CashierCanCheckoutCartWithMoreThanOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: 1111 withExpirationDate: GregorianMonthOfYear current.

	cart _ Cart createUsingPriceList: catalogo.
	cart add: '1234' amount: 50.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card) equals: 50.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 20:37:06' prior: 50917617 overrides: 16927572!
setUp
	catalogue _ Set with: 'El principito' with: 'El principote'.
	carrito _ Cart createUsingPriceList: catalogue.! !

!methodRemoval: Cart class #createUsingCatalogue: stamp: 'EMI 11/26/2020 20:37:06'!
createUsingCatalogue: aCatalogue
	^self new initialize: aCatalogue.!
!Cart class methodsFor: 'instance creation' stamp: 'EMI 11/26/2020 20:37:16' prior: 50922745!
createUsingPriceList: aPriceList
	^self new initialize: aPriceList.! !
!Cart methodsFor: 'initialization' stamp: 'EMI 11/26/2020 20:37:32' prior: 50922415!
initialize: aPriceList
	amount _ 0.
	items _ Bag new.
	catalogue _ aPriceList.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'EMI 11/26/2020 20:37:42'!
Object subclass: #Cart
	instanceVariableNames: 'items amount priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 20:37:42' prior: 50922921!
initialize: aPriceList
	amount _ 0.
	items _ Bag new.
	priceList _ aPriceList.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 20:37:42' prior: 50922469!
checkIfItemIsInCatalogue: anItem
	^priceList includes: anItem.! !
!Cart methodsFor: 'private' stamp: 'EMI 11/26/2020 20:38:32' prior: 50922940!
checkIfItemIsInCatalogue: anItem
	^priceList includesKey: anItem.! !
!Cart methodsFor: 'accessing' stamp: 'EMI 11/26/2020 20:40:26'!
contentsTotalPrice! !
!Cart methodsFor: 'accessing' stamp: 'EMI 11/26/2020 20:42:01' prior: 50922950!
contentsTotalPrice
	| total |
	total _ 0.
	items do:[:anItem | total _ total + priceList at: anItem].
	^total.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'EMI 11/26/2020 20:42:17'!
PASSED!

!testRun: #CartTest #test02CartCanAddOneBook stamp: 'EMI 11/26/2020 20:42:17'!
ERROR!

!testRun: #CartTest #test03CartCanAddMoreThanOneCopyOfABookAtOnce stamp: 'EMI 11/26/2020 20:42:17'!
ERROR!

!testRun: #CartTest #test04CartCanAddMoreThanOneBook stamp: 'EMI 11/26/2020 20:42:17'!
ERROR!

!testRun: #CartTest #test05CartCanAddMoreThanOneBookWithDifferentAmountOfCopies stamp: 'EMI 11/26/2020 20:42:17'!
ERROR!

!testRun: #CartTest #test06CartCanShowContents stamp: 'EMI 11/26/2020 20:42:17'!
ERROR!

!testRun: #CartTest #test07CartCannotAddBookMissingFromCatalogue stamp: 'EMI 11/26/2020 20:42:17'!
FAILURE!

!testRun: #CartTest #test08CartCannotAddInvalidAmountOfBooks stamp: 'EMI 11/26/2020 20:42:17'!
FAILURE!
!CartTest methodsFor: 'set up' stamp: 'EMI 11/26/2020 20:42:49' prior: 50922904 overrides: 16927572!
setUp
	catalogue _ Dictionary with: 'El principito'->1 with: 'El principote'->2.
	carrito _ Cart createUsingPriceList: catalogue.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'EMI 11/26/2020 20:42:54'!
PASSED!

!testRun: #CartTest #test02CartCanAddOneBook stamp: 'EMI 11/26/2020 20:42:54'!
PASSED!

!testRun: #CartTest #test03CartCanAddMoreThanOneCopyOfABookAtOnce stamp: 'EMI 11/26/2020 20:42:54'!
PASSED!

!testRun: #CartTest #test04CartCanAddMoreThanOneBook stamp: 'EMI 11/26/2020 20:42:54'!
PASSED!

!testRun: #CartTest #test05CartCanAddMoreThanOneBookWithDifferentAmountOfCopies stamp: 'EMI 11/26/2020 20:42:54'!
PASSED!

!testRun: #CartTest #test06CartCanShowContents stamp: 'EMI 11/26/2020 20:42:54'!
PASSED!

!testRun: #CartTest #test07CartCannotAddBookMissingFromCatalogue stamp: 'EMI 11/26/2020 20:42:54'!
PASSED!

!testRun: #CartTest #test08CartCannotAddInvalidAmountOfBooks stamp: 'EMI 11/26/2020 20:42:54'!
PASSED!
!Cashier methodsFor: 'operations' stamp: 'EMI 11/26/2020 20:44:01' prior: 50921969!
checkout: aCart usingCard: aCard
	| bill  |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCartMessage].
	(GregorianMonthOfYear current <= aCard expiration) ifFalse:[^Error signal: self class cannotCheckoutWithExpiredCardMessage.].
	bill _ aCart contentsTotalPrice.
	merchantProcessor debit: bill from: aCard.
	^bill.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 20:44:37' prior: 50922817!
test01CashierCannotCheckoutEmptyCart
	| cashier card mp cart |
	cart _ Cart createUsingPriceList: listaPrecios.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	card _ CreditCard of: 'Pepito' withID: 1234 withExpirationDate: GregorianMonthOfYear current.
	
	self should: [cashier checkout: cart usingCard: card.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutEmptyCartMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 20:44:45' prior: 50922751!
test02CashierCanCheckoutCartWithOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: 1111 withExpirationDate: GregorianMonthOfYear current.
	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234'.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card) equals: 1.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 20:44:54' prior: 50922886!
test03CashierCanCheckoutCartWithMoreThanOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: 1111 withExpirationDate: GregorianMonthOfYear current.

	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234' amount: 50.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card) equals: 50.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 20:44:59' prior: 50922864!
test04CashierCannotCheckoutWithInvalidCard
	| cashier mp card cart |
	card _ CreditCard of: 'Tito' withID: 1112 withExpirationDate: GregorianMonthOfYear current.

	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234' amount: 50.
	mp _ OnlyChecksIDsMerchantProcessorSimulator initialize: (Set with: 1111).
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: mp class cannotDebitFromCreditCardWithInvalidIDMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 20:45:04' prior: 50922768!
test05CashierCannotCheckoutWithExpiredCard
	| cashier mp card carrito |
	card _ CreditCard of: 'Tito' withID: 1112 withExpirationDate: (GregorianMonthOfYear yearNumber: 2020 monthNumber: 1).
	
	carrito _ Cart createUsingPriceList: listaPrecios.
	carrito add: '1234' amount: 50.
	
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithExpiredCardMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 20:45:08' prior: 50922790!
test06CashierCannotCheckoutWithIncorrectNameOnCard
	| cashier mp card carrito idsToNamesDictionary |
	card _ CreditCard of: 'NombreInvalido' withID: 1112 withExpirationDate: (GregorianMonthOfYear current).
	
	carrito _ Cart createUsingPriceList: listaPrecios.
	carrito add: '1234' amount: 50.
	
	idsToNamesDictionary _ Dictionary new.
	idsToNamesDictionary add:1112->'NombreValido'.
	mp _ OnlyChecksIDsAndNamesMerchantProcessorSimulator initialize: idsToNamesDictionary.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithIncorrectNameMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 20:45:13' prior: 50922837!
test07CashierCannotCheckoutUsingCardWithoutFunds
	| cashier mp card cart idsToFundsDictionary |
	card _ CreditCard of: 'NombreValido' withID: 1112 withExpirationDate: (GregorianMonthOfYear current).
	
	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234' amount: 50.
	
	idsToFundsDictionary _ Dictionary new.
	idsToFundsDictionary add:1112->49.
	mp _ OnlyChecksIDsAndFundsMerchantProcessorSimulator initialize: idsToFundsDictionary.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithInsufficientFundsMessage].! !
!CashierTest methodsFor: 'setUp' stamp: 'EMI 11/26/2020 20:45:29' prior: 50922205 overrides: 16927572!
setUp
	listaPrecios _ Dictionary new.
	listaPrecios add: '1234'->1.! !

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/26/2020 20:45:43'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutCartWithOneBook stamp: 'EMI 11/26/2020 20:45:43'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutCartWithMoreThanOneBook stamp: 'EMI 11/26/2020 20:45:43'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/26/2020 20:45:43'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithExpiredCard stamp: 'EMI 11/26/2020 20:45:43'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutWithIncorrectNameOnCard stamp: 'EMI 11/26/2020 20:45:43'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutUsingCardWithoutFunds stamp: 'EMI 11/26/2020 20:45:43'!
PASSED!
!CreditCard methodsFor: 'testing' stamp: 'EMI 11/26/2020 20:46:42'!
isExpiredOn: aDate
	! !
!CreditCard methodsFor: 'testing' stamp: 'EMI 11/26/2020 20:47:00' prior: 50923211!
isExpiredOn: aDate
	^expirationDate  > aDate.! !
!CreditCard methodsFor: 'testing' stamp: 'EMI 11/26/2020 20:47:19' prior: 50923215!
isExpiredOn: aDate
	^expirationDate  < aDate.! !
!Cashier methodsFor: 'operations' stamp: 'EMI 11/26/2020 20:48:28' prior: 50923018!
checkout: aCart usingCard: aCard
	| bill  |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCartMessage].
	(aCard isExpiredOn: GregorianMonthOfYear current) ifTrue:[^Error signal: self class cannotCheckoutWithExpiredCardMessage.].
	bill _ aCart contentsTotalPrice.
	merchantProcessor debit: bill from: aCard.
	^bill.! !
!CashierTest methodsFor: 'aux' stamp: 'EMI 11/26/2020 20:51:16'!
expiredCardDate
	^GregorianMonthOfYear current previous.! !
!CashierTest methodsFor: 'aux' stamp: 'EMI 11/26/2020 20:51:46'!
nonExpiredCardDate
	^GregorianMonthOfYear current next.! !

GregorianMonthOfYear current next!
!CashierTest methodsFor: 'aux' stamp: 'EMI 11/26/2020 20:51:58' prior: 50923242!
nonExpiredCardDate
	^GregorianMonthOfYear current next.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 20:52:21' prior: 50923032!
test01CashierCannotCheckoutEmptyCart
	| cashier card mp cart |
	cart _ Cart createUsingPriceList: listaPrecios.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	card _ CreditCard of: 'Pepito' withID: 1234 withExpirationDate: self nonExpiredCardDate.
	
	self should: [cashier checkout: cart usingCard: card.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutEmptyCartMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 20:53:07' prior: 50923051!
test02CashierCanCheckoutCartWithOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: 1111 withExpirationDate: self nonExpiredCardDate.
	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234'.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card) equals: 1.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 20:53:17' prior: 50923067!
test03CashierCanCheckoutCartWithMoreThanOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: 1111 withExpirationDate: self nonExpiredCardDate.

	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234' amount: 50.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card) equals: 50.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 20:53:25' prior: 50923084!
test04CashierCannotCheckoutWithInvalidCard
	| cashier mp card cart |
	card _ CreditCard of: 'Tito' withID: 1112 withExpirationDate: self nonExpiredCardDate.

	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234' amount: 50.
	mp _ OnlyChecksIDsMerchantProcessorSimulator initialize: (Set with: 1111).
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: mp class cannotDebitFromCreditCardWithInvalidIDMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 20:53:39' prior: 50923106!
test05CashierCannotCheckoutWithExpiredCard
	| cashier mp card carrito |
	card _ CreditCard of: 'Tito' withID: 1112 withExpirationDate: self expiredCardDate.
	
	carrito _ Cart createUsingPriceList: listaPrecios.
	carrito add: '1234' amount: 50.
	
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithExpiredCardMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 20:53:51' prior: 50923128!
test06CashierCannotCheckoutWithIncorrectNameOnCard
	| cashier mp card carrito idsToNamesDictionary |
	card _ CreditCard of: 'NombreInvalido' withID: 1112 withExpirationDate: self nonExpiredCardDate.
	
	carrito _ Cart createUsingPriceList: listaPrecios.
	carrito add: '1234' amount: 50.
	
	idsToNamesDictionary _ Dictionary new.
	idsToNamesDictionary add:1112->'NombreValido'.
	mp _ OnlyChecksIDsAndNamesMerchantProcessorSimulator initialize: idsToNamesDictionary.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithIncorrectNameMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 20:54:02' prior: 50923155!
test07CashierCannotCheckoutUsingCardWithoutFunds
	| cashier mp card cart idsToFundsDictionary |
	card _ CreditCard of: 'NombreValido' withID: 1112 withExpirationDate: self nonExpiredCardDate.
	
	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234' amount: 50.
	
	idsToFundsDictionary _ Dictionary new.
	idsToFundsDictionary add:1112->49.
	mp _ OnlyChecksIDsAndFundsMerchantProcessorSimulator initialize: idsToFundsDictionary.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithInsufficientFundsMessage].! !

!testRun: #CashierTest #test07CashierCannotCheckoutUsingCardWithoutFunds stamp: 'EMI 11/26/2020 20:54:08'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/26/2020 20:54:08'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutCartWithOneBook stamp: 'EMI 11/26/2020 20:54:08'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutCartWithMoreThanOneBook stamp: 'EMI 11/26/2020 20:54:08'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/26/2020 20:54:08'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithExpiredCard stamp: 'EMI 11/26/2020 20:54:08'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutWithIncorrectNameOnCard stamp: 'EMI 11/26/2020 20:54:08'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutUsingCardWithoutFunds stamp: 'EMI 11/26/2020 20:54:08'!
PASSED!
!CreditCard methodsFor: 'initialize' stamp: 'EMI 11/26/2020 20:56:32' prior: 50922364!
initializeWithID: anID withExpirationDate: aDate ofOwner: aName.
	(anID isEmpty) ifTrue: [^Error signal: self class cannotCreateCardWithInvalidIDMessage].
	(aName isEmpty) ifTrue: [^Error signal: self class cannotCreateCardWithInvalidNameMessage].
	(aDate isKindOf: GregorianMonthOfYear) ifFalse: [^Error signal: self class cannotCreateCardWithInvalidDateFormatMessage.].
	
	id _ anID.
	expirationDate _ aDate.
	name _ aName copyFrom: 1 to: (30 min: aName size).! !
!CreditCardTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 20:58:48' prior: 50920707!
test01CannotCreateCardWithInvalidIDFormat
	self should:[CreditCard of: 'Bob' withID: '' negated withExpirationDate: GregorianMonthOfYear current.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cannotCreateCardWithInvalidIDMessage].! !

!testRun: #CreditCardTest #test01CannotCreateCardWithInvalidIDFormat stamp: 'EMI 11/26/2020 20:58:50'!
PASSED!

!testRun: #CreditCardTest #test01CannotCreateCardWithInvalidIDFormat stamp: 'EMI 11/26/2020 20:58:50'!
PASSED!

!testRun: #CreditCardTest #test02CannotCreateCardWithInvalidName stamp: 'EMI 11/26/2020 20:58:50'!
FAILURE!

!testRun: #CreditCardTest #test03CannotCreateCardWithInvalidDateFormat stamp: 'EMI 11/26/2020 20:58:50'!
FAILURE!
!CreditCardTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 20:58:55' prior: 50923446!
test01CannotCreateCardWithInvalidIDFormat
	self should:[CreditCard of: 'Bob' withID: '' withExpirationDate: GregorianMonthOfYear current.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cannotCreateCardWithInvalidIDMessage].! !
!CreditCardTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 20:59:02' prior: 50921275!
test02CannotCreateCardWithInvalidName
	self should:[CreditCard of: '' withID: '1' withExpirationDate: GregorianMonthOfYear current.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cannotCreateCardWithInvalidNameMessage].! !
!CreditCardTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 20:59:06' prior: 50920754!
test03CannotCreateCardWithInvalidDateFormat
	self should:[CreditCard of: 'Pepo' withID: '1' withExpirationDate: Date today]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cannotCreateCardWithInvalidDateFormatMessage].! !

!testRun: #CreditCardTest #test03CannotCreateCardWithInvalidDateFormat stamp: 'EMI 11/26/2020 20:59:07'!
PASSED!

!testRun: #CreditCardTest #test01CannotCreateCardWithInvalidIDFormat stamp: 'EMI 11/26/2020 20:59:07'!
PASSED!

!testRun: #CreditCardTest #test02CannotCreateCardWithInvalidName stamp: 'EMI 11/26/2020 20:59:07'!
PASSED!

!testRun: #CreditCardTest #test03CannotCreateCardWithInvalidDateFormat stamp: 'EMI 11/26/2020 20:59:07'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 20:59:32' prior: 50923253!
test01CashierCannotCheckoutEmptyCart
	| cashier card mp cart |
	cart _ Cart createUsingPriceList: listaPrecios.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	card _ CreditCard of: 'Pepito' withID: '1234' withExpirationDate: self nonExpiredCardDate.
	
	self should: [cashier checkout: cart usingCard: card.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutEmptyCartMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 20:59:41' prior: 50923272!
test02CashierCanCheckoutCartWithOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: '1111' withExpirationDate: self nonExpiredCardDate.
	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234'.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card) equals: 1.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 20:59:48' prior: 50923288!
test03CashierCanCheckoutCartWithMoreThanOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: '1111' withExpirationDate: self nonExpiredCardDate.

	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234' amount: 50.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card) equals: 50.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 21:00:00' prior: 50923305!
test04CashierCannotCheckoutWithInvalidCard
	| cashier mp card cart |
	card _ CreditCard of: 'Tito' withID: '1112' withExpirationDate: self nonExpiredCardDate.

	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234' amount: 50.
	mp _ OnlyChecksIDsMerchantProcessorSimulator initialize: (Set with: 1111).
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: mp class cannotDebitFromCreditCardWithInvalidIDMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 21:00:08' prior: 50923574!
test04CashierCannotCheckoutWithInvalidCard
	| cashier mp card cart |
	card _ CreditCard of: 'Tito' withID: '1112' withExpirationDate: self nonExpiredCardDate.

	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234' amount: 50.
	mp _ OnlyChecksIDsMerchantProcessorSimulator initialize: (Set with: '1111').
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: mp class cannotDebitFromCreditCardWithInvalidIDMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 21:00:29' prior: 50923326!
test05CashierCannotCheckoutWithExpiredCard
	| cashier mp card carrito |
	card _ CreditCard of: 'Tito' withID: '1112' withExpirationDate: self expiredCardDate.
	
	carrito _ Cart createUsingPriceList: listaPrecios.
	carrito add: '1234' amount: 50.
	
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithExpiredCardMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 21:00:40' prior: 50923347!
test06CashierCannotCheckoutWithIncorrectNameOnCard
	| cashier mp card carrito idsToNamesDictionary |
	card _ CreditCard of: 'NombreInvalido' withID: '1112' withExpirationDate: self nonExpiredCardDate.
	
	carrito _ Cart createUsingPriceList: listaPrecios.
	carrito add: '1234' amount: 50.
	
	idsToNamesDictionary _ Dictionary new.
	idsToNamesDictionary add:'1112'->'NombreValido'.
	mp _ OnlyChecksIDsAndNamesMerchantProcessorSimulator initialize: idsToNamesDictionary.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithIncorrectNameMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 21:00:59' prior: 50923374!
test07CashierCannotCheckoutUsingCardWithoutFunds
	| cashier mp card cart idsToFundsDictionary |
	card _ CreditCard of: 'NombreValido' withID: '1112' withExpirationDate: self nonExpiredCardDate.
	
	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234' amount: 50.
	
	idsToFundsDictionary _ Dictionary new.
	idsToFundsDictionary add:'1112'->49.
	mp _ OnlyChecksIDsAndFundsMerchantProcessorSimulator initialize: idsToFundsDictionary.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithInsufficientFundsMessage].! !

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/26/2020 21:01:09'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutCartWithOneBook stamp: 'EMI 11/26/2020 21:01:09'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutCartWithMoreThanOneBook stamp: 'EMI 11/26/2020 21:01:09'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/26/2020 21:01:09'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithExpiredCard stamp: 'EMI 11/26/2020 21:01:10'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutWithIncorrectNameOnCard stamp: 'EMI 11/26/2020 21:01:10'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutUsingCardWithoutFunds stamp: 'EMI 11/26/2020 21:01:10'!
PASSED!

----SNAPSHOT----(26 November 2020 21:01:37) CuisUniversity-4383.image priorSource: 18914819!
!Cashier methodsFor: 'operations' stamp: 'EMI 11/26/2020 21:03:23'!
checkout: aCart usingCard: aCard aDate: onDate 
	| bill  |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCartMessage].
	(aCard isExpiredOn: GregorianMonthOfYear current) ifTrue:[^Error signal: self class cannotCheckoutWithExpiredCardMessage.].
	bill _ aCart contentsTotalPrice.
	merchantProcessor debit: bill from: aCard.
	^bill.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 21:03:23' prior: 50923618!
test05CashierCannotCheckoutWithExpiredCard
	| cashier mp card carrito |
	card _ CreditCard of: 'Tito' withID: '1112' withExpirationDate: self expiredCardDate.
	
	carrito _ Cart createUsingPriceList: listaPrecios.
	carrito add: '1234' amount: 50.
	
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card aDate: GregorianMonthOfYear current]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithExpiredCardMessage].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 21:03:23' prior: 50923541!
test02CashierCanCheckoutCartWithOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: '1111' withExpirationDate: self nonExpiredCardDate.
	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234'.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card aDate: GregorianMonthOfYear current) equals: 1.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 21:03:23' prior: 50923666!
test07CashierCannotCheckoutUsingCardWithoutFunds
	| cashier mp card cart idsToFundsDictionary |
	card _ CreditCard of: 'NombreValido' withID: '1112' withExpirationDate: self nonExpiredCardDate.
	
	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234' amount: 50.
	
	idsToFundsDictionary _ Dictionary new.
	idsToFundsDictionary add:'1112'->49.
	mp _ OnlyChecksIDsAndFundsMerchantProcessorSimulator initialize: idsToFundsDictionary.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card aDate: GregorianMonthOfYear current]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithInsufficientFundsMessage].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 21:03:23' prior: 50923639!
test06CashierCannotCheckoutWithIncorrectNameOnCard
	| cashier mp card carrito idsToNamesDictionary |
	card _ CreditCard of: 'NombreInvalido' withID: '1112' withExpirationDate: self nonExpiredCardDate.
	
	carrito _ Cart createUsingPriceList: listaPrecios.
	carrito add: '1234' amount: 50.
	
	idsToNamesDictionary _ Dictionary new.
	idsToNamesDictionary add:'1112'->'NombreValido'.
	mp _ OnlyChecksIDsAndNamesMerchantProcessorSimulator initialize: idsToNamesDictionary.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card aDate: GregorianMonthOfYear current]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithIncorrectNameMessage].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 21:03:23' prior: 50923522!
test01CashierCannotCheckoutEmptyCart
	| cashier card mp cart |
	cart _ Cart createUsingPriceList: listaPrecios.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	card _ CreditCard of: 'Pepito' withID: '1234' withExpirationDate: self nonExpiredCardDate.
	
	self should: [cashier checkout: cart usingCard: card aDate: GregorianMonthOfYear current.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutEmptyCartMessage].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 21:03:23' prior: 50923557!
test03CashierCanCheckoutCartWithMoreThanOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: '1111' withExpirationDate: self nonExpiredCardDate.

	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234' amount: 50.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card aDate: GregorianMonthOfYear current) equals: 50.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 21:03:23' prior: 50923596!
test04CashierCannotCheckoutWithInvalidCard
	| cashier mp card cart |
	card _ CreditCard of: 'Tito' withID: '1112' withExpirationDate: self nonExpiredCardDate.

	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234' amount: 50.
	mp _ OnlyChecksIDsMerchantProcessorSimulator initialize: (Set with: '1111').
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card aDate: GregorianMonthOfYear current]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: mp class cannotDebitFromCreditCardWithInvalidIDMessage].! !

!methodRemoval: Cashier #checkout:usingCard: stamp: 'EMI 11/26/2020 21:03:23'!
checkout: aCart usingCard: aCard
	| bill  |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCartMessage].
	(aCard isExpiredOn: GregorianMonthOfYear current) ifTrue:[^Error signal: self class cannotCheckoutWithExpiredCardMessage.].
	bill _ aCart contentsTotalPrice.
	merchantProcessor debit: bill from: aCard.
	^bill.!
!Cashier methodsFor: 'operations' stamp: 'EMI 11/26/2020 21:03:42'!
checkout: aCart usingCard: aCard onDate: onDate 
	| bill  |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCartMessage].
	(aCard isExpiredOn: GregorianMonthOfYear current) ifTrue:[^Error signal: self class cannotCheckoutWithExpiredCardMessage.].
	bill _ aCart contentsTotalPrice.
	merchantProcessor debit: bill from: aCard.
	^bill.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 21:03:42' prior: 50923852!
test03CashierCanCheckoutCartWithMoreThanOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: '1111' withExpirationDate: self nonExpiredCardDate.

	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234' amount: 50.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card onDate: GregorianMonthOfYear current) equals: 50.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 21:03:42' prior: 50923774!
test07CashierCannotCheckoutUsingCardWithoutFunds
	| cashier mp card cart idsToFundsDictionary |
	card _ CreditCard of: 'NombreValido' withID: '1112' withExpirationDate: self nonExpiredCardDate.
	
	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234' amount: 50.
	
	idsToFundsDictionary _ Dictionary new.
	idsToFundsDictionary add:'1112'->49.
	mp _ OnlyChecksIDsAndFundsMerchantProcessorSimulator initialize: idsToFundsDictionary.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card onDate: GregorianMonthOfYear current]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithInsufficientFundsMessage].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 21:03:42' prior: 50923734!
test05CashierCannotCheckoutWithExpiredCard
	| cashier mp card carrito |
	card _ CreditCard of: 'Tito' withID: '1112' withExpirationDate: self expiredCardDate.
	
	carrito _ Cart createUsingPriceList: listaPrecios.
	carrito add: '1234' amount: 50.
	
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card onDate: GregorianMonthOfYear current]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithExpiredCardMessage].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 21:03:42' prior: 50923831!
test01CashierCannotCheckoutEmptyCart
	| cashier card mp cart |
	cart _ Cart createUsingPriceList: listaPrecios.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	card _ CreditCard of: 'Pepito' withID: '1234' withExpirationDate: self nonExpiredCardDate.
	
	self should: [cashier checkout: cart usingCard: card onDate: GregorianMonthOfYear current.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutEmptyCartMessage].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 21:03:42' prior: 50923870!
test04CashierCannotCheckoutWithInvalidCard
	| cashier mp card cart |
	card _ CreditCard of: 'Tito' withID: '1112' withExpirationDate: self nonExpiredCardDate.

	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234' amount: 50.
	mp _ OnlyChecksIDsMerchantProcessorSimulator initialize: (Set with: '1111').
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card onDate: GregorianMonthOfYear current]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: mp class cannotDebitFromCreditCardWithInvalidIDMessage].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 21:03:43' prior: 50923802!
test06CashierCannotCheckoutWithIncorrectNameOnCard
	| cashier mp card carrito idsToNamesDictionary |
	card _ CreditCard of: 'NombreInvalido' withID: '1112' withExpirationDate: self nonExpiredCardDate.
	
	carrito _ Cart createUsingPriceList: listaPrecios.
	carrito add: '1234' amount: 50.
	
	idsToNamesDictionary _ Dictionary new.
	idsToNamesDictionary add:'1112'->'NombreValido'.
	mp _ OnlyChecksIDsAndNamesMerchantProcessorSimulator initialize: idsToNamesDictionary.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card onDate: GregorianMonthOfYear current]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithIncorrectNameMessage].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 21:03:43' prior: 50923756!
test02CashierCanCheckoutCartWithOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: '1111' withExpirationDate: self nonExpiredCardDate.
	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234'.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card onDate: GregorianMonthOfYear current) equals: 1.! !

!methodRemoval: Cashier #checkout:usingCard:aDate: stamp: 'EMI 11/26/2020 21:03:43'!
checkout: aCart usingCard: aCard aDate: onDate 
	| bill  |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCartMessage].
	(aCard isExpiredOn: GregorianMonthOfYear current) ifTrue:[^Error signal: self class cannotCheckoutWithExpiredCardMessage.].
	bill _ aCart contentsTotalPrice.
	merchantProcessor debit: bill from: aCard.
	^bill.!
!Cashier methodsFor: 'operations' stamp: 'EMI 11/26/2020 21:03:52' prior: 50923905!
checkout: aCart usingCard: aCard onDate: aDate 
	| bill  |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCartMessage].
	(aCard isExpiredOn: GregorianMonthOfYear current) ifTrue:[^Error signal: self class cannotCheckoutWithExpiredCardMessage.].
	bill _ aCart contentsTotalPrice.
	merchantProcessor debit: bill from: aCard.
	^bill.! !
!Cashier methodsFor: 'operations' stamp: 'EMI 11/26/2020 21:03:58' prior: 50924092!
checkout: aCart usingCard: aCard onDate: aDate 
	| bill  |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCartMessage].
	(aCard isExpiredOn: aDate) ifTrue:[^Error signal: self class cannotCheckoutWithExpiredCardMessage.].
	bill _ aCart contentsTotalPrice.
	merchantProcessor debit: bill from: aCard.
	^bill.! !

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/26/2020 21:04:16'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutCartWithOneBook stamp: 'EMI 11/26/2020 21:04:16'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutCartWithMoreThanOneBook stamp: 'EMI 11/26/2020 21:04:16'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/26/2020 21:04:16'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithExpiredCard stamp: 'EMI 11/26/2020 21:04:16'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutWithIncorrectNameOnCard stamp: 'EMI 11/26/2020 21:04:16'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutUsingCardWithoutFunds stamp: 'EMI 11/26/2020 21:04:16'!
PASSED!
!Cashier methodsFor: 'operations' stamp: 'EMI 11/26/2020 21:07:54'!
checkout: aCart usingCard: aCard onDate: aDate usingSalesBook: aSalesBook  
	| bill  |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCartMessage].
	(aCard isExpiredOn: aDate) ifTrue:[^Error signal: self class cannotCheckoutWithExpiredCardMessage.].
	bill _ aCart contentsTotalPrice.
	merchantProcessor debit: bill from: aCard.
	^bill.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 21:07:54' prior: 50924032!
test06CashierCannotCheckoutWithIncorrectNameOnCard
	| cashier mp card carrito idsToNamesDictionary |
	card _ CreditCard of: 'NombreInvalido' withID: '1112' withExpirationDate: self nonExpiredCardDate.
	
	carrito _ Cart createUsingPriceList: listaPrecios.
	carrito add: '1234' amount: 50.
	
	idsToNamesDictionary _ Dictionary new.
	idsToNamesDictionary add:'1112'->'NombreValido'.
	mp _ OnlyChecksIDsAndNamesMerchantProcessorSimulator initialize: idsToNamesDictionary.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card onDate: GregorianMonthOfYear current usingSalesBook: OrderedCollection new]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithIncorrectNameMessage].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 21:07:54' prior: 50923938!
test07CashierCannotCheckoutUsingCardWithoutFunds
	| cashier mp card cart idsToFundsDictionary |
	card _ CreditCard of: 'NombreValido' withID: '1112' withExpirationDate: self nonExpiredCardDate.
	
	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234' amount: 50.
	
	idsToFundsDictionary _ Dictionary new.
	idsToFundsDictionary add:'1112'->49.
	mp _ OnlyChecksIDsAndFundsMerchantProcessorSimulator initialize: idsToFundsDictionary.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card onDate: GregorianMonthOfYear current usingSalesBook: OrderedCollection new]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithInsufficientFundsMessage].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 21:07:55' prior: 50924009!
test04CashierCannotCheckoutWithInvalidCard
	| cashier mp card cart |
	card _ CreditCard of: 'Tito' withID: '1112' withExpirationDate: self nonExpiredCardDate.

	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234' amount: 50.
	mp _ OnlyChecksIDsMerchantProcessorSimulator initialize: (Set with: '1111').
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card onDate: GregorianMonthOfYear current usingSalesBook: OrderedCollection new]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: mp class cannotDebitFromCreditCardWithInvalidIDMessage].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 21:07:55' prior: 50923988!
test01CashierCannotCheckoutEmptyCart
	| cashier card mp cart |
	cart _ Cart createUsingPriceList: listaPrecios.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	card _ CreditCard of: 'Pepito' withID: '1234' withExpirationDate: self nonExpiredCardDate.
	
	self should: [cashier checkout: cart usingCard: card onDate: GregorianMonthOfYear current usingSalesBook: OrderedCollection new.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutEmptyCartMessage].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 21:07:55' prior: 50924061!
test02CashierCanCheckoutCartWithOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: '1111' withExpirationDate: self nonExpiredCardDate.
	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234'.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card onDate: GregorianMonthOfYear current usingSalesBook: OrderedCollection new) equals: 1.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 21:07:55' prior: 50923966!
test05CashierCannotCheckoutWithExpiredCard
	| cashier mp card carrito |
	card _ CreditCard of: 'Tito' withID: '1112' withExpirationDate: self expiredCardDate.
	
	carrito _ Cart createUsingPriceList: listaPrecios.
	carrito add: '1234' amount: 50.
	
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card onDate: GregorianMonthOfYear current usingSalesBook: OrderedCollection new]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithExpiredCardMessage].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/26/2020 21:07:55' prior: 50923920!
test03CashierCanCheckoutCartWithMoreThanOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: '1111' withExpirationDate: self nonExpiredCardDate.

	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234' amount: 50.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card onDate: GregorianMonthOfYear current usingSalesBook: OrderedCollection new) equals: 50.! !

!methodRemoval: Cashier #checkout:usingCard:onDate: stamp: 'EMI 11/26/2020 21:07:55'!
checkout: aCart usingCard: aCard onDate: aDate 
	| bill  |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCartMessage].
	(aCard isExpiredOn: aDate) ifTrue:[^Error signal: self class cannotCheckoutWithExpiredCardMessage.].
	bill _ aCart contentsTotalPrice.
	merchantProcessor debit: bill from: aCard.
	^bill.!

TestCase subclass: #CashierTest
	instanceVariableNames: 'listaPrecios salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'EMI 11/26/2020 21:08:41'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'listaPrecios salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'setUp' stamp: 'EMI 11/26/2020 21:08:53' prior: 50923182 overrides: 16927572!
setUp
	listaPrecios _ Dictionary new.
	listaPrecios add: '1234'->1.
	salesBook _ OrderedCollection new.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 21:09:02' prior: 50924241!
test01CashierCannotCheckoutEmptyCart
	| cashier card mp cart |
	cart _ Cart createUsingPriceList: listaPrecios.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	card _ CreditCard of: 'Pepito' withID: '1234' withExpirationDate: self nonExpiredCardDate.
	
	self should: [cashier checkout: cart usingCard: card onDate: GregorianMonthOfYear current usingSalesBook: salesBook] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutEmptyCartMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 21:09:08' prior: 50924263!
test02CashierCanCheckoutCartWithOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: '1111' withExpirationDate: self nonExpiredCardDate.
	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234'.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card onDate: GregorianMonthOfYear current usingSalesBook: salesBook) equals: 1.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 21:09:14' prior: 50924306!
test03CashierCanCheckoutCartWithMoreThanOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: '1111' withExpirationDate: self nonExpiredCardDate.

	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234' amount: 50.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self assert: (cashier checkout: cart usingCard: card onDate: GregorianMonthOfYear current usingSalesBook: salesBook) equals: 50.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 21:09:23' prior: 50924217!
test04CashierCannotCheckoutWithInvalidCard
	| cashier mp card cart |
	card _ CreditCard of: 'Tito' withID: '1112' withExpirationDate: self nonExpiredCardDate.

	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234' amount: 50.
	mp _ OnlyChecksIDsMerchantProcessorSimulator initialize: (Set with: '1111').
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card onDate: GregorianMonthOfYear current usingSalesBook: salesBook]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: mp class cannotDebitFromCreditCardWithInvalidIDMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 21:09:29' prior: 50924282!
test05CashierCannotCheckoutWithExpiredCard
	| cashier mp card carrito |
	card _ CreditCard of: 'Tito' withID: '1112' withExpirationDate: self expiredCardDate.
	
	carrito _ Cart createUsingPriceList: listaPrecios.
	carrito add: '1234' amount: 50.
	
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card onDate: GregorianMonthOfYear current usingSalesBook: salesBook]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithExpiredCardMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 21:09:38' prior: 50924158!
test06CashierCannotCheckoutWithIncorrectNameOnCard
	| cashier mp card carrito idsToNamesDictionary |
	card _ CreditCard of: 'NombreInvalido' withID: '1112' withExpirationDate: self nonExpiredCardDate.
	
	carrito _ Cart createUsingPriceList: listaPrecios.
	carrito add: '1234' amount: 50.
	
	idsToNamesDictionary _ Dictionary new.
	idsToNamesDictionary add:'1112'->'NombreValido'.
	mp _ OnlyChecksIDsAndNamesMerchantProcessorSimulator initialize: idsToNamesDictionary.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card onDate: GregorianMonthOfYear current usingSalesBook: salesBook]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithIncorrectNameMessage].! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 21:09:48' prior: 50924188!
test07CashierCannotCheckoutUsingCardWithoutFunds
	| cashier mp card cart idsToFundsDictionary |
	card _ CreditCard of: 'NombreValido' withID: '1112' withExpirationDate: self nonExpiredCardDate.
	
	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234' amount: 50.
	
	idsToFundsDictionary _ Dictionary new.
	idsToFundsDictionary add:'1112'->49.
	mp _ OnlyChecksIDsAndFundsMerchantProcessorSimulator initialize: idsToFundsDictionary.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card onDate: GregorianMonthOfYear current usingSalesBook: salesBook]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithInsufficientFundsMessage].! !
!Cashier methodsFor: 'operations' stamp: 'EMI 11/26/2020 21:11:32' prior: 50924143!
checkout: aCart usingCard: aCard onDate: aDate usingSalesBook: aSalesBook  
	| bill  |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCartMessage].
	(aCard isExpiredOn: aDate) ifTrue:[^Error signal: self class cannotCheckoutWithExpiredCardMessage.].
	bill _ aCart contentsTotalPrice.
	merchantProcessor debit: bill from: aCard.
	aSalesBook addAll: aCart contents.
	aSalesBook add: bill.
	^bill.! !
!Cashier methodsFor: 'operations' stamp: 'EMI 11/26/2020 21:11:53' prior: 50924519!
checkout: aCart usingCard: aCard onDate: aDate usingSalesBook: aSalesBook  
	| bill  |
	(aCart isEmpty) ifTrue: [^Error signal: self class cannotCheckoutEmptyCartMessage].
	(aCard isExpiredOn: aDate) ifTrue:[^Error signal: self class cannotCheckoutWithExpiredCardMessage.].
	bill _ aCart contentsTotalPrice.
	merchantProcessor debit: bill from: aCard.
	aSalesBook addAll: aCart contents asOrderedCollection.
	aSalesBook add: bill.
	^bill.! !

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/26/2020 21:12:10'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutCartWithOneBook stamp: 'EMI 11/26/2020 21:12:10'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutCartWithMoreThanOneBook stamp: 'EMI 11/26/2020 21:12:10'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/26/2020 21:12:10'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithExpiredCard stamp: 'EMI 11/26/2020 21:12:10'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutWithIncorrectNameOnCard stamp: 'EMI 11/26/2020 21:12:10'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutUsingCardWithoutFunds stamp: 'EMI 11/26/2020 21:12:10'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 21:12:53' prior: 50924378!
test02CashierCanCheckoutCartWithOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: '1111' withExpirationDate: self nonExpiredCardDate.
	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234'.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	cashier checkout: cart usingCard: card onDate: GregorianMonthOfYear current usingSalesBook: salesBook.
	self deny: salesBook isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 21:13:37' prior: 50924576!
test02CashierCanCheckoutCartWithOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: '1111' withExpirationDate: self nonExpiredCardDate.
	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234'.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	cashier checkout: cart usingCard: card onDate: GregorianMonthOfYear current usingSalesBook: salesBook.
	self deny: salesBook isEmpty.
	self assert: salesBook last equals: 1.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 21:14:12' prior: 50924396!
test03CashierCanCheckoutCartWithMoreThanOneBook
	| cashier mp card cart |
	card _ CreditCard of: 'Pepo' withID: '1111' withExpirationDate: self nonExpiredCardDate.

	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234' amount: 50.
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	cashier checkout: cart usingCard: card onDate: GregorianMonthOfYear current usingSalesBook: salesBook.
	self deny: salesBook isEmpty.
	self assert: salesBook last equals: 50.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 21:14:41' prior: 50924415!
test04CashierCannotCheckoutWithInvalidCard
	| cashier mp card cart |
	card _ CreditCard of: 'Tito' withID: '1112' withExpirationDate: self nonExpiredCardDate.

	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234' amount: 50.
	mp _ OnlyChecksIDsMerchantProcessorSimulator initialize: (Set with: '1111').
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card onDate: GregorianMonthOfYear current usingSalesBook: salesBook]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: mp class cannotDebitFromCreditCardWithInvalidIDMessage].
	
	self assert: salesBook isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 21:15:02' prior: 50924439!
test05CashierCannotCheckoutWithExpiredCard
	| cashier mp card carrito |
	card _ CreditCard of: 'Tito' withID: '1112' withExpirationDate: self expiredCardDate.
	
	carrito _ Cart createUsingPriceList: listaPrecios.
	carrito add: '1234' amount: 50.
	
	mp _ AlwaysValidMerchantProcessorSimulator new.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card onDate: GregorianMonthOfYear current usingSalesBook: salesBook]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Cashier cannotCheckoutWithExpiredCardMessage].
	self assert: salesBook isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 21:15:17' prior: 50924462!
test06CashierCannotCheckoutWithIncorrectNameOnCard
	| cashier mp card carrito idsToNamesDictionary |
	card _ CreditCard of: 'NombreInvalido' withID: '1112' withExpirationDate: self nonExpiredCardDate.
	
	carrito _ Cart createUsingPriceList: listaPrecios.
	carrito add: '1234' amount: 50.
	
	idsToNamesDictionary _ Dictionary new.
	idsToNamesDictionary add:'1112'->'NombreValido'.
	mp _ OnlyChecksIDsAndNamesMerchantProcessorSimulator initialize: idsToNamesDictionary.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: carrito usingCard: card onDate: GregorianMonthOfYear current usingSalesBook: salesBook]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithIncorrectNameMessage].
	
	self assert: salesBook isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'EMI 11/26/2020 21:15:26' prior: 50924491!
test07CashierCannotCheckoutUsingCardWithoutFunds
	| cashier mp card cart idsToFundsDictionary |
	card _ CreditCard of: 'NombreValido' withID: '1112' withExpirationDate: self nonExpiredCardDate.
	
	cart _ Cart createUsingPriceList: listaPrecios.
	cart add: '1234' amount: 50.
	
	idsToFundsDictionary _ Dictionary new.
	idsToFundsDictionary add:'1112'->49.
	mp _ OnlyChecksIDsAndFundsMerchantProcessorSimulator initialize: idsToFundsDictionary.
	cashier _ Cashier withPriceList: listaPrecios withMerchantProcessor: mp.
	
	self should: [cashier checkout: cart usingCard: card onDate: GregorianMonthOfYear current usingSalesBook: salesBook]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: MerchantProcessorSimulator cannotDebitUsingCardWithInsufficientFundsMessage].
	self assert: salesBook isEmpty.! !

!testRun: #CashierTest #test07CashierCannotCheckoutUsingCardWithoutFunds stamp: 'EMI 11/26/2020 21:15:28'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutEmptyCart stamp: 'EMI 11/26/2020 21:15:28'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutCartWithOneBook stamp: 'EMI 11/26/2020 21:15:28'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutCartWithMoreThanOneBook stamp: 'EMI 11/26/2020 21:15:28'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutWithInvalidCard stamp: 'EMI 11/26/2020 21:15:28'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithExpiredCard stamp: 'EMI 11/26/2020 21:15:28'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutWithIncorrectNameOnCard stamp: 'EMI 11/26/2020 21:15:28'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutUsingCardWithoutFunds stamp: 'EMI 11/26/2020 21:15:28'!
PASSED!

----SNAPSHOT----(26 November 2020 21:16:06) CuisUniversity-4383.image priorSource: 18946095!

----SNAPSHOT----(26 November 2020 21:16:13) CuisUniversity-4383.image priorSource: 18979779!

----QUIT----(26 November 2020 21:23:24) CuisUniversity-4383.image priorSource: 18979873!

----STARTUP---- (30 November 2020 17:01:56) as /home/doraserver/CuisUniversity/CuisUniversity-4383.image!


----QUIT----(30 November 2020 17:05:41) CuisUniversity-4383.image priorSource: 18979967!

