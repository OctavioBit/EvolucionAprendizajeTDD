----STARTUP---- (26 November 2020 12:32:51) as C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CUIS\CuisUniversity-4383.image!


----SNAPSHOT----(26 November 2020 14:40:29) CuisUniversity-4383.image priorSource: 17444409!
!CashierTest methodsFor: 'tests' stamp: 'AM 11/26/2020 14:46:54' prior: 50876447!
test05checkOutAfterUnsuccesfulTransactionShouldReturnCorrectAmount
	
	| cart cashier |
	
	cart := Cart forCatalogue: priceCatalogue.
	cart addToCart: 1111111111111 quantity: 1.
	cashier := Cashier forPriceCatalogue: priceCatalogue.
	
	self 
		should:[cashier checkOut: cart with: nonExpiredCreditCard through: unsuccessfulTransactionApiSim]
		raise: Error
		withMessageText: ApiRestSimulator unsuccessfulTransactionErrorDescription.
		
	self assert: 500 equals: (cashier checkOut: cart with: nonExpiredCreditCard through: succesfulTransactionApiSim).
! !

----SNAPSHOT----(26 November 2020 14:47:24) CuisUniversity-4383.image priorSource: 17444625!

----QUIT----(26 November 2020 14:49:03) CuisUniversity-4383.image priorSource: 17445386!

----STARTUP---- (26 November 2020 20:12:41) as C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CUIS\CuisUniversity-4383.image!


!classRenamed: #ApiRestSimulator as: #MerchantProcessorSimulator stamp: 'AM 11/26/2020 20:18:48'!
Smalltalk renameClassNamed: #ApiRestSimulator as: #MerchantProcessorSimulator!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 11/26/2020 20:18:48' prior: 50876346 overrides: 16927572!
setUp
	
	priceCatalogue := Dictionary new.
	priceCatalogue add: 1111111111111->500; add: 9999999999999->1000.
	succesfulTransactionApiSim := MerchantProcessorSimulator simSuccessfulTransaction.
	unsuccessfulTransactionApiSim := MerchantProcessorSimulator simUnsuccessfulTransaction.
	expiredCreditCard := CreditCard withNumber: 1234678910111213 expirationOn: November,1998 Owner: 'Perez Juan'.  
	nonExpiredCreditCard := CreditCard withNumber: 1234123412341234 expirationOn: (GregorianMonthOfYear current next) Owner: 'Juan Perez'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 11/26/2020 20:18:48' prior: 50876799!
test05checkOutAfterUnsuccesfulTransactionShouldReturnCorrectAmount
	
	| cart cashier |
	
	cart := Cart forCatalogue: priceCatalogue.
	cart addToCart: 1111111111111 quantity: 1.
	cashier := Cashier forPriceCatalogue: priceCatalogue.
	
	self 
		should:[cashier checkOut: cart with: nonExpiredCreditCard through: unsuccessfulTransactionApiSim]
		raise: Error
		withMessageText: MerchantProcessorSimulator unsuccessfulTransactionErrorDescription.
		
	self assert: 500 equals: (cashier checkOut: cart with: nonExpiredCreditCard through: succesfulTransactionApiSim).
! !

----STARTUP---- (26 November 2020 20:19:24) as C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CUIS\CuisUniversity-4383.image!


!classRemoval: #Cashier stamp: 'AM 11/26/2020 20:19:42'!
Object subclass: #Cashier
	instanceVariableNames: 'priceCatalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio TusLibros'!

!classRemoval: #Cart stamp: 'AM 11/26/2020 20:19:42'!
Object subclass: #Cart
	instanceVariableNames: 'items itemCatalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio TusLibros'!

!classRemoval: #ApiRestSimulator stamp: 'AM 11/26/2020 20:19:42'!
Object subclass: #ApiRestSimulator
	instanceVariableNames: 'messageToSend'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio TusLibros'!

!classRemoval: #CreditCard stamp: 'AM 11/26/2020 20:19:43'!
TestCase subclass: #CreditCard
	instanceVariableNames: 'number expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio TusLibros'!

!classRemoval: #CashierTest stamp: 'AM 11/26/2020 20:19:43'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'priceCatalogue nonExpiredCreditCard succesfulTransactionApiSim expiredCreditCard unsuccessfulTransactionApiSim'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio TusLibros'!

!classRemoval: #CartTest stamp: 'AM 11/26/2020 20:19:43'!
TestCase subclass: #CartTest
	instanceVariableNames: 'priceCatalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio TusLibros'!

----End fileIn of C:\Users\Chara\Desktop\Facultad\Ingenieria 1\ISW1\20-TusLibros\TusLibros-Ejercicio2.st----!

!classRenamed: #ApiRestSimulator as: #MerchantProcessorSim stamp: 'AM 11/26/2020 20:20:02'!
Smalltalk renameClassNamed: #ApiRestSimulator as: #MerchantProcessorSim!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 11/26/2020 20:20:02' prior: 50877085 overrides: 16927572!
setUp
	
	priceCatalogue := Dictionary new.
	priceCatalogue add: 1111111111111->500; add: 9999999999999->1000.
	succesfulTransactionApiSim := MerchantProcessorSim simSuccessfulTransaction.
	unsuccessfulTransactionApiSim := MerchantProcessorSim simUnsuccessfulTransaction.
	expiredCreditCard := CreditCard withNumber: 1234678910111213 expirationOn: November,1998 Owner: 'Perez Juan'.  
	nonExpiredCreditCard := CreditCard withNumber: 1234123412341234 expirationOn: (GregorianMonthOfYear current next) Owner: 'Juan Perez'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 11/26/2020 20:20:02' prior: 50877064!
test05checkOutAfterUnsuccesfulTransactionShouldReturnCorrectAmount
	
	| cart cashier |
	
	cart := Cart forCatalogue: priceCatalogue.
	cart addToCart: 1111111111111 quantity: 1.
	cashier := Cashier forPriceCatalogue: priceCatalogue.
	
	self 
		should:[cashier checkOut: cart with: nonExpiredCreditCard through: unsuccessfulTransactionApiSim ]
		raise: Error
		withMessageText: MerchantProcessorSim unsuccessfulTransactionErrorDescription.
		
	self assert: 500 equals: (cashier checkOut: cart with: nonExpiredCreditCard through: succesfulTransactionApiSim).
! !

!classDefinition: #CashierTest category: 'Ejercicio TusLibros' stamp: 'AM 11/26/2020 20:21:02'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'priceCatalogue nonExpiredCreditCard succesfulTransactionApiSim expiredCreditCard unsuccessfulTransactionApiSim succesfulTransactionMPSim'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio TusLibros'!

!classDefinition: #CashierTest category: 'Ejercicio TusLibros' stamp: 'AM 11/26/2020 20:21:03'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'priceCatalogue nonExpiredCreditCard succesfulTransactionApiSim expiredCreditCard unsuccessfulTransactionApiSim succesfulTransactionMPSim unsuccessfulTransactionMPSim'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio TusLibros'!
!CashierTest methodsFor: 'setup' stamp: 'AM 11/26/2020 20:21:00' prior: 50877429 overrides: 16927572!
setUp
	
	priceCatalogue := Dictionary new.
	priceCatalogue add: 1111111111111->500; add: 9999999999999->1000.
	succesfulTransactionMPSim := MerchantProcessorSim simSuccessfulTransaction.
	unsuccessfulTransactionMPSim:= MerchantProcessorSim simUnsuccessfulTransaction.
	expiredCreditCard := CreditCard withNumber: 1234678910111213 expirationOn: November,1998 Owner: 'Perez Juan'.  
	nonExpiredCreditCard := CreditCard withNumber: 1234123412341234 expirationOn: (GregorianMonthOfYear current next) Owner: 'Juan Perez'! !

TestCase subclass: #CashierTest
	instanceVariableNames: 'priceCatalogue nonExpiredCreditCard expiredCreditCard succesfulTransactionMPSim unsuccessfulTransactionMPSim'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio TusLibros'!

!classDefinition: #CashierTest category: 'Ejercicio TusLibros' stamp: 'AM 11/26/2020 20:21:25'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'priceCatalogue nonExpiredCreditCard expiredCreditCard succesfulTransactionMPSim unsuccessfulTransactionMPSim'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio TusLibros'!
!CreditCard class methodsFor: 'instance creation' stamp: 'AM 11/26/2020 20:28:07' prior: 50877169!
withNumber: aCreditCardNumber expirationOn: anExpirationDate Owner: anOwnerNameString

	(aCreditCardNumber decimalDigitLength = 16) ifFalse: [self signalInvalidCreditCardNumber].
	^self new initializeForNumber: aCreditCardNumber expirationOn: anExpirationDate Owner: anOwnerNameString.
	! !

!testRun: #CashierTest #test01cantCheckOutEmptyCart stamp: 'AM 11/26/2020 20:29:06'!
PASSED!

!testRun: #CashierTest #test02cantCheckOutWithExpiredCreditCard stamp: 'AM 11/26/2020 20:29:06'!
PASSED!

!testRun: #CashierTest #test03successfulCheckOutForOneItemReturnsCorrectAmount stamp: 'AM 11/26/2020 20:29:06'!
ERROR!

!testRun: #CashierTest #test04successfulCheckOutForMultipleItemsReturnsCorrectAmount stamp: 'AM 11/26/2020 20:29:06'!
ERROR!

!testRun: #CashierTest #test05checkOutAfterUnsuccesfulTransactionShouldReturnCorrectAmount stamp: 'AM 11/26/2020 20:29:06'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'AM 11/26/2020 20:29:25' prior: 50877449!
test05checkOutAfterUnsuccesfulTransactionShouldReturnCorrectAmount
	
	| cart cashier |
	
	cart := Cart forCatalogue: priceCatalogue.
	cart addToCart: 1111111111111 quantity: 1.
	cashier := Cashier forPriceCatalogue: priceCatalogue.
	
	self 
		should:[cashier checkOut: cart with: nonExpiredCreditCard through: unsuccessfulTransactionMPSim ]
		raise: Error
		withMessageText: MerchantProcessorSim unsuccessfulTransactionErrorDescription.
		
	self assert: 500 equals: (cashier checkOut: cart with: nonExpiredCreditCard through: succesfulTransactionMPSim).
! !
!CashierTest methodsFor: 'tests' stamp: 'AM 11/26/2020 20:29:33' prior: 50877049!
test04successfulCheckOutForMultipleItemsReturnsCorrectAmount
	
	| cart cashier |
	
	cart := Cart forCatalogue: priceCatalogue.
	cart addToCart: 1111111111111 quantity: 3.
	cart addToCart: 9999999999999 quantity: 2.
	cashier := Cashier forPriceCatalogue: priceCatalogue.
	
	self assert: 3500 equals: (cashier checkOut: cart with: nonExpiredCreditCard through: succesfulTransactionMPSim).
! !
!CashierTest methodsFor: 'tests' stamp: 'AM 11/26/2020 20:29:42' prior: 50877036!
test03successfulCheckOutForOneItemReturnsCorrectAmount
	
	| cart cashier |
	
	cart := Cart forCatalogue: priceCatalogue.
	cart addToCart: 1111111111111 quantity: 3.
	cashier := Cashier forPriceCatalogue: priceCatalogue.
	
	self assert: 1500 equals: (cashier checkOut: cart with: nonExpiredCreditCard through: succesfulTransactionMPSim).
! !
!CashierTest methodsFor: 'tests' stamp: 'AM 11/26/2020 20:29:47' prior: 50877022!
test02cantCheckOutWithExpiredCreditCard
	
	| cart cashier |
	cart := Cart forCatalogue: priceCatalogue.
	cart addToCart: 1111111111111 quantity: 1.
	cashier := Cashier new.

	self
		should:[cashier checkOut: cart with: expiredCreditCard through: succesfulTransactionMPSim]
		raise: Error
		withMessageText: Cashier expiredCreditCardErrorDescription.
	
! !
!CashierTest methodsFor: 'tests' stamp: 'AM 11/26/2020 20:29:54' prior: 50877010!
test01cantCheckOutEmptyCart
	
	| cart cashier|
	cart := Cart forCatalogue: priceCatalogue.
	cashier := Cashier new.
	
	self
		should:[cashier checkOut: cart with: nonExpiredCreditCard through: succesfulTransactionMPSim]
		raise: Error
		withMessageText: Cashier checkOutEmptyCartErrorDescription.
	
! !

!testRun: #CashierTest #test01cantCheckOutEmptyCart stamp: 'AM 11/26/2020 20:29:57'!
PASSED!

!testRun: #CashierTest #test02cantCheckOutWithExpiredCreditCard stamp: 'AM 11/26/2020 20:29:57'!
PASSED!

!testRun: #CashierTest #test03successfulCheckOutForOneItemReturnsCorrectAmount stamp: 'AM 11/26/2020 20:29:57'!
PASSED!

!testRun: #CashierTest #test04successfulCheckOutForMultipleItemsReturnsCorrectAmount stamp: 'AM 11/26/2020 20:29:57'!
PASSED!

!testRun: #CashierTest #test05checkOutAfterUnsuccesfulTransactionShouldReturnCorrectAmount stamp: 'AM 11/26/2020 20:29:57'!
PASSED!
!Cashier methodsFor: 'check out' stamp: 'AM 11/26/2020 20:30:26' prior: 50877372!
checkOut: anItemCart with: aCreditCard through: aMerchantProcessor
	
	| value |
	
	self assertCartHasItems: anItemCart.
	self assertNotExpired: aCreditCard.
	value := self valueForCart: anItemCart.
	
	^aMerchantProcessor debit: value from: aCreditCard.
! !

!testRun: #CashierTest #test01cantCheckOutEmptyCart stamp: 'AM 11/26/2020 20:30:33'!
PASSED!

!testRun: #CashierTest #test02cantCheckOutWithExpiredCreditCard stamp: 'AM 11/26/2020 20:30:33'!
PASSED!

!testRun: #CashierTest #test03successfulCheckOutForOneItemReturnsCorrectAmount stamp: 'AM 11/26/2020 20:30:33'!
PASSED!

!testRun: #CashierTest #test04successfulCheckOutForMultipleItemsReturnsCorrectAmount stamp: 'AM 11/26/2020 20:30:33'!
PASSED!

!testRun: #CashierTest #test05checkOutAfterUnsuccesfulTransactionShouldReturnCorrectAmount stamp: 'AM 11/26/2020 20:30:33'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'AM 11/26/2020 20:35:00' prior: 50877532!
withNumber: aCreditCardNumber expirationOn: anExpirationDate Owner: anOwnerNameString

	self assertValidNumber: aCreditCardNumber ifFalse: [self signalInvalidCreditCardNumber].
	^self new initializeForNumber: aCreditCardNumber expirationOn: anExpirationDate Owner: anOwnerNameString.
	! !
!CreditCard class methodsFor: 'instance creation' stamp: 'AM 11/26/2020 20:35:10' prior: 50877686!
withNumber: aCreditCardNumber expirationOn: anExpirationDate Owner: anOwnerNameString

	(self assertValidNumber: aCreditCardNumber) ifFalse: [self signalInvalidCreditCardNumber].
	^self new initializeForNumber: aCreditCardNumber expirationOn: anExpirationDate Owner: anOwnerNameString.
	! !
!CreditCard class methodsFor: 'assertions' stamp: 'AM 11/26/2020 20:37:50'!
assertValidNumber: aCreditCardNumber
	
	| isValid |

	isValid := (aCreditCardNumber size) = 16 and: (aCreditCardNumber allSatisfy: [:char | char isAlphaNumeric]) ! !
!CreditCard class methodsFor: 'assertions' stamp: 'AM 11/26/2020 20:38:25' prior: 50877711!
assertValidNumber: aCreditCardNumber
	
	| isValid |

	isValid := (aCreditCardNumber size) = 16 and: [aCreditCardNumber allSatisfy: [:char | char isAlphaNumeric]].
	
	isValid ifFalse: [self signalInvalidCreditCardNumber].! !

CreditCard withNumber: '' expirationOn: 2000,November Owner: 'Juan perez'!

CreditCard withNumber: '' expirationOn: (2000,November) Owner: 'Juan perez'!

CreditCard withNumber: '' expirationOn: (November,2000) Owner: 'Juan perez'!

CreditCard withNumber: '1111111111111111' expirationOn: (November,2000) Owner: 'Juan perez'!
!CreditCard class methodsFor: 'instance creation' stamp: 'AM 11/26/2020 20:41:45' prior: 50877699!
withNumber: aCreditCardNumber expirationOn: anExpirationDate Owner: anOwnerNameString

	self assertValidNumber: aCreditCardNumber.
	^self new initializeForNumber: aCreditCardNumber expirationOn: anExpirationDate Owner: anOwnerNameString.
	! !

CreditCard withNumber: '1111111111111111' expirationOn: (November,2000) Owner: 'Juan perez'!

!methodRemoval: CreditCard class #signalInvalidExpirationDate stamp: 'AM 11/26/2020 20:42:30'!
signalInvalidExpirationDate
	
	self error: self InvalidExpirationDateErrorDescription.!

!methodRemoval: CreditCard class #InvalidExpirationDateErrorDescription stamp: 'AM 11/26/2020 20:42:37'!
InvalidExpirationDateErrorDescription

	^'Expiration date must be a month of year'!

!classRemoval: #MerchantProcessorSim stamp: 'AM 11/26/2020 20:50:45'!
Object subclass: #MerchantProcessorSim
	instanceVariableNames: 'messageToSend'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio TusLibros'!

!classRemoval: #Cashier stamp: 'AM 11/26/2020 20:50:45'!
Object subclass: #Cashier
	instanceVariableNames: 'priceCatalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio TusLibros'!

!classRemoval: #Cart stamp: 'AM 11/26/2020 20:50:46'!
Object subclass: #Cart
	instanceVariableNames: 'items itemCatalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio TusLibros'!

!classRemoval: #CreditCard stamp: 'AM 11/26/2020 20:50:46'!
TestCase subclass: #CreditCard
	instanceVariableNames: 'number expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio TusLibros'!

!classRemoval: #CashierTest stamp: 'AM 11/26/2020 20:50:46'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'priceCatalogue nonExpiredCreditCard expiredCreditCard succesfulTransactionMPSim unsuccessfulTransactionMPSim'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio TusLibros'!

!classRemoval: #CartTest stamp: 'AM 11/26/2020 20:50:47'!
TestCase subclass: #CartTest
	instanceVariableNames: 'priceCatalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio TusLibros'!

----End fileIn of C:\Users\Chara\Desktop\Facultad\Ingenieria 1\TusLibros-33.st----!
!Cashier class methodsFor: 'instance creation' stamp: 'AM 11/26/2020 20:54:05'!
toCheckout: aCart charging: aCreditCard through: aMerchantProcessor on: aDate registeringOn: aSalesBook
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook! !

!classRemoval: #StoreTestObjectsFactory stamp: 'AM 11/26/2020 21:01:10'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 'AM 11/26/2020 21:01:10'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'AM 11/26/2020 21:01:10'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'AM 11/26/2020 21:01:11'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'AM 11/26/2020 21:01:11'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'AM 11/26/2020 21:01:11'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'AM 11/26/2020 21:01:12'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CUIS\Ejercicio TusLibros.st----!

TestCase subclass: #ApiRestTest
	instanceVariableNames: 'messageToSend'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio TusLibros'!

!classDefinition: #ApiRestTest category: 'Ejercicio TusLibros' stamp: 'AM 11/26/2020 21:02:58'!
TestCase subclass: #ApiRestTest
	instanceVariableNames: 'messageToSend'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio TusLibros'!

----QUIT----(26 November 2020 21:29:16) CuisUniversity-4383.image priorSource: 17445480!

----STARTUP---- (29 November 2020 15:07:53) as C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CUIS\CuisUniversity-4383.image!


!classRemoval: #MerchantProcessorSim stamp: 'AM 11/29/2020 15:08:07'!
Object subclass: #MerchantProcessorSim
	instanceVariableNames: 'messageToSend'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio TusLibros'!

!classRemoval: #Cashier stamp: 'AM 11/29/2020 15:08:07'!
Object subclass: #Cashier
	instanceVariableNames: 'priceCatalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio TusLibros'!

!classRemoval: #Cart stamp: 'AM 11/29/2020 15:08:07'!
Object subclass: #Cart
	instanceVariableNames: 'items itemCatalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio TusLibros'!

!classRemoval: #CreditCard stamp: 'AM 11/29/2020 15:08:08'!
TestCase subclass: #CreditCard
	instanceVariableNames: 'number expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio TusLibros'!

!classRemoval: #CashierTest stamp: 'AM 11/29/2020 15:08:08'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'priceCatalogue nonExpiredCreditCard expiredCreditCard succesfulTransactionMPSim unsuccessfulTransactionMPSim'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio TusLibros'!

!classRemoval: #CartTest stamp: 'AM 11/29/2020 15:08:08'!
TestCase subclass: #CartTest
	instanceVariableNames: 'priceCatalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio TusLibros'!

!classRemoval: #ApiRestTest stamp: 'AM 11/29/2020 15:08:09'!
TestCase subclass: #ApiRestTest
	instanceVariableNames: 'messageToSend'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio TusLibros'!

----End fileIn of C:\Users\Chara\Desktop\Facultad\Ingenieria 1\2020-2c-master\20-TusLibros\Iteracion2\Iteracion2\TusLibros-33.st----!

TestCase subclass: #ApiRestTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApiRestTest category: 'TusLibros' stamp: 'AM 11/29/2020 15:13:51'!
TestCase subclass: #ApiRestTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApiRestTest category: 'TusLibros' stamp: 'AM 11/29/2020 15:14:40'!
TestCase subclass: #ApiRestTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApiRestTest methodsFor: 'set up' stamp: 'AM 11/29/2020 15:14:39' overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ]! !
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/29/2020 15:19:15'!
test01

	| Api |
	
	Api ! !
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/29/2020 15:23:35' prior: 50879567!
test01

	| Api |
	
	Api! !

!classDefinition: #ApiRest category: 'TusLibros' stamp: 'AM 11/29/2020 15:34:35'!
Object subclass: #ApiRest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/29/2020 15:34:55' prior: 50879571!
test01

	| Api cartID expected |
	
	Api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self.
	
	cartID := Api createCartFor: testObjectsFactory validClientID withPassword: testObjectsFactory validPasswordForID.
	
	expected := Bag new.
	
	self assert: expected equals: (Api listCart: cartID).! !
!ApiRestTest methodsFor: 'merchant processor protocol' stamp: 'AM 11/29/2020 15:35:33'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !
!StoreTestObjectsFactory methodsFor: 'clientID and password' stamp: 'AM 11/29/2020 15:37:12'!
validClientID

	^'0000'! !
!StoreTestObjectsFactory methodsFor: 'clientID and password' stamp: 'AM 11/29/2020 15:37:35'!
validPasswordForID
	
	^'0000'! !

!testRun: #ApiRestTest #test01 stamp: 'AM 11/29/2020 15:37:48'!
ERROR!
!ApiRest class methodsFor: 'instance creation' stamp: 'AM 11/29/2020 15:37:56'!
withCatalogue: aDictionary salesThrough: anApiRestTest 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCatalogue: aDictionary salesThrough: anApiRestTest ! !
!ApiRest class methodsFor: 'instance creation' stamp: 'AM 11/29/2020 15:38:41' prior: 50879610!
withCatalogue: aPriceCatalogue salesThrough: aMerchanProcessor
	
	^self new initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchanProcessor! !

!testRun: #ApiRestTest #test01 stamp: 'AM 11/29/2020 15:38:46'!
ERROR!

!classDefinition: #ApiRest category: 'TusLibros' stamp: 'AM 11/29/2020 15:39:03'!
Object subclass: #ApiRest
	instanceVariableNames: 'priceCatalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApiRest category: 'TusLibros' stamp: 'AM 11/29/2020 15:39:03'!
Object subclass: #ApiRest
	instanceVariableNames: 'priceCatalogue merchanProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApiRest methodsFor: 'initialization' stamp: 'AM 11/29/2020 15:39:03'!
initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchanProcessor 
	self shouldBeImplemented.
	priceCatalogue := aPriceCatalogue.
	merchanProcessor := aMerchanProcessor.! !
!ApiRest methodsFor: 'initialization' stamp: 'AM 11/29/2020 15:39:13' prior: 50879645!
initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchanProcessor 
	
	priceCatalogue := aPriceCatalogue.
	merchanProcessor := aMerchanProcessor.! !

!testRun: #ApiRestTest #test01 stamp: 'AM 11/29/2020 15:39:15'!
ERROR!
!ApiRest methodsFor: 'cart' stamp: 'AM 11/29/2020 15:39:40'!
createCartFor: aString withPassword: aString2 
	self shouldBeImplemented.! !

!classDefinition: #ApiRest category: 'TusLibros' stamp: 'AM 11/29/2020 15:45:21'!
Object subclass: #ApiRest
	instanceVariableNames: 'priceCatalogue merchanProcessor activeCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApiRest category: 'TusLibros' stamp: 'AM 11/29/2020 15:45:23'!
Object subclass: #ApiRest
	instanceVariableNames: 'priceCatalogue merchanProcessor activeCarts nextCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApiRest methodsFor: 'cart' stamp: 'AM 11/29/2020 15:45:18' prior: 50879663!
createCartFor: aClientID withPassword: aPassword

	activeCarts at: nextCartID put: (Cart acceptingItemsOf: priceCatalogue).
	nextCartID := nextCartID + 1.
	
	! !
!ApiRest methodsFor: 'initialization' stamp: 'AM 11/29/2020 15:46:05' prior: 50879654!
initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchanProcessor 
	
	priceCatalogue := aPriceCatalogue.
	merchanProcessor := aMerchanProcessor.
	nextCartID := 0.
	activeCarts := Dictionary new.! !

!testRun: #ApiRestTest #test01 stamp: 'AM 11/29/2020 15:46:16'!
ERROR!
!ApiRest methodsFor: 'cart' stamp: 'AM 11/29/2020 15:46:49' prior: 50879684!
createCartFor: aClientID withPassword: aPassword

	activeCarts at: (nextCartID asSymbol) put: (Cart acceptingItemsOf: priceCatalogue).
	nextCartID := nextCartID + 1.
	
	! !

!testRun: #ApiRestTest #test01 stamp: 'AM 11/29/2020 15:46:51'!
ERROR!

!testRun: #ApiRestTest #test01 stamp: 'AM 11/29/2020 15:47:15'!
ERROR!

!testRun: #ApiRestTest #test01 stamp: 'AM 11/29/2020 15:47:15'!
ERROR!
!ApiRest methodsFor: 'cart' stamp: 'AM 11/29/2020 15:47:32' prior: 50879704!
createCartFor: aClientID withPassword: aPassword

	activeCarts at: nextCartID put: (Cart acceptingItemsOf: priceCatalogue).
	nextCartID := nextCartID + 1.
	
	! !

!testRun: #ApiRestTest #test01 stamp: 'AM 11/29/2020 15:47:36'!
ERROR!

!testRun: #ApiRestTest #test01 stamp: 'AM 11/29/2020 15:47:36'!
ERROR!
!ApiRest methodsFor: 'cart' stamp: 'AM 11/29/2020 15:47:48'!
listCart: anApiRest 
	self shouldBeImplemented.! !
!ApiRest methodsFor: 'cart' stamp: 'AM 11/29/2020 15:48:22' prior: 50879731!
listCart: aCartId

	^Bag new.
	
	! !

!testRun: #ApiRestTest #test01 stamp: 'AM 11/29/2020 15:48:23'!
PASSED!

!testRun: #ApiRestTest #test01 stamp: 'AM 11/29/2020 15:48:31'!
PASSED!
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/29/2020 15:49:05'!
test01newCartShouldBeEmpty

	| Api cartID expected |
	
	Api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self.
	
	cartID := Api createCartFor: testObjectsFactory validClientID withPassword: testObjectsFactory validPasswordForID.
	
	expected := Bag new.
	
	self assert: expected equals: (Api listCart: cartID).! !

!methodRemoval: ApiRestTest #test01 stamp: 'AM 11/29/2020 15:49:06'!
test01

	| Api cartID expected |
	
	Api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self.
	
	cartID := Api createCartFor: testObjectsFactory validClientID withPassword: testObjectsFactory validPasswordForID.
	
	expected := Bag new.
	
	self assert: expected equals: (Api listCart: cartID).!
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/29/2020 15:50:58'!
test02

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self.
	
	cartID := api createCartFor: testObjectsFactory validClientID withPassword: testObjectsFactory validPasswordForID.
	
	
	
	expected := Bag new.
	
	self assert: expected equals: (api listCart: cartID).! !
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/29/2020 15:52:39' prior: 50879768!
test02

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self.
	
	cartID := api createCartFor: testObjectsFactory validClientID withPassword: testObjectsFactory validPasswordForID.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	
	expected := Bag new.
	
	self assert: expected equals: (api listCart: cartID).! !
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/29/2020 15:53:05' prior: 50879781!
test02

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self.
	
	cartID := api createCartFor: testObjectsFactory validClientID withPassword: testObjectsFactory validPasswordForID.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	
	expected := Bag with: testObjectsFactory itemSellByTheStore.
	
	self assert: expected equals: (api listCart: cartID).! !

!testRun: #ApiRestTest #test02 stamp: 'AM 11/29/2020 15:53:22'!
ERROR!
!ApiRest methodsFor: 'cart' stamp: 'AM 11/29/2020 15:53:30'!
addToCart: anApiRest item: aString quantity: aSmallInteger 
	self shouldBeImplemented.! !
!ApiRest methodsFor: 'cart' stamp: 'AM 11/29/2020 15:56:21' prior: 50879816!
addToCart: aCartID item: anItemID quantity: aQuantity

	| cart |
	
	cart := activeCarts at: aCartID.
	cart add: anItemID.
	
	! !

!testRun: #ApiRestTest #test02 stamp: 'AM 11/29/2020 15:56:23'!
ERROR!
!ApiRest methodsFor: 'cart' stamp: 'AM 11/29/2020 15:59:28' prior: 50879719!
createCartFor: aClientID withPassword: aPassword

	activeCarts at: nextCartID put: (Cart acceptingItemsOf: priceCatalogue).
	nextCartID := nextCartID + 1.
	
	^nextCartID - 1.
	
	! !

!testRun: #ApiRestTest #test02 stamp: 'AM 11/29/2020 15:59:44'!
FAILURE!

!testRun: #ApiRestTest #test02 stamp: 'AM 11/29/2020 15:59:44'!
FAILURE!
!ApiRest methodsFor: 'cart' stamp: 'AM 11/29/2020 16:00:34' prior: 50879735!
listCart: aCartId

	^activeCarts at: aCartId.! !
!ApiRest methodsFor: 'cart' stamp: 'AM 11/29/2020 16:03:07' prior: 50879844!
listCart: aCartId
	
	| cart cartItemList |
	
	cartItemList := Bag new.
	cart := activeCarts at: aCartId.
	
	cart addItemsTo: cartItemList.
	
	^cartItemList.! !
!Cart methodsFor: 'item queries' stamp: 'AM 11/29/2020 16:04:26'!
addItemsTo: anItemCollection

	items do: [:item | anItemCollection add: item].! !
!Cart methodsFor: 'item queries' stamp: 'AM 11/29/2020 16:04:39' prior: 50879856!
addItemsTo: anItemCollection

	items do: [:item | anItemCollection add: item copy].! !

!testRun: #ApiRestTest #test02 stamp: 'AM 11/29/2020 16:04:50'!
PASSED!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 11/29/2020 16:04:54'!
PASSED!
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/29/2020 16:05:29'!
test02itemIsAddedToCartCorrectly

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self.
	
	cartID := api createCartFor: testObjectsFactory validClientID withPassword: testObjectsFactory validPasswordForID.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	
	expected := Bag with: testObjectsFactory itemSellByTheStore.
	
	self assert: expected equals: (api listCart: cartID).! !

!methodRemoval: ApiRestTest #test02 stamp: 'AM 11/29/2020 16:05:29'!
test02

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self.
	
	cartID := api createCartFor: testObjectsFactory validClientID withPassword: testObjectsFactory validPasswordForID.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	
	expected := Bag with: testObjectsFactory itemSellByTheStore.
	
	self assert: expected equals: (api listCart: cartID).!
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/29/2020 16:13:15'!
test03cantCreateCartForInvalidClientIDPasswordCombination

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	self
		should:[api createCartFor: testObjectsFactory validClientID withPassword: testObjectsFactory validPasswordForID]
		raise: Error
		withMessageText: ApiRest invalidIDOrPasswordErrorDescription.
		
	self assert: ApiRest hasNoActiveCarts.! !

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 11/29/2020 16:13:47'!
PASSED!

!testRun: #ApiRestTest #test02itemIsAddedToCartCorrectly stamp: 'AM 11/29/2020 16:13:47'!
PASSED!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/29/2020 16:13:47'!
ERROR!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/29/2020 16:13:47'!
ERROR!
!ApiRest class methodsFor: 'instance creation' stamp: 'AM 11/29/2020 16:13:54'!
withCatalogue: aDictionary salesThrough: anApiRestTest validatingClientsThrough: anApiRestTest3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCatalogue: aDictionary salesThrough: anApiRestTest validatingClientsThrough: anApiRestTest3 ! !
!ApiRest class methodsFor: 'instance creation' stamp: 'AM 11/29/2020 16:15:11' prior: 50879935!
withCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator
	
	^self new initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator.! !

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/29/2020 16:15:14'!
ERROR!

!classDefinition: #ApiRest category: 'TusLibros' stamp: 'AM 11/29/2020 16:15:21'!
Object subclass: #ApiRest
	instanceVariableNames: 'priceCatalogue merchanProcessor activeCarts nextCartID merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApiRest category: 'TusLibros' stamp: 'AM 11/29/2020 16:15:21'!
Object subclass: #ApiRest
	instanceVariableNames: 'priceCatalogue merchanProcessor activeCarts nextCartID merchantProcessor clientPasswordValidator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApiRest methodsFor: 'initialization' stamp: 'AM 11/29/2020 16:15:21'!
initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator 
	self shouldBeImplemented.
	priceCatalogue := aPriceCatalogue.
	merchantProcessor := aMerchantProcessor.
	clientPasswordValidator := aClientPasswordValidator.! !
!ApiRest methodsFor: 'initialization' stamp: 'AM 11/29/2020 16:15:51' prior: 50879981!
initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator 
	
	priceCatalogue := aPriceCatalogue.
	merchanProcessor := aMerchantProcessor.
	nextCartID := 0.
	activeCarts := Dictionary new.! !

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/29/2020 16:15:52'!
ERROR!
!ApiRest class methodsFor: 'error descriptions' stamp: 'AM 11/29/2020 16:16:07'!
invalidIDOrPasswordErrorDescription
	self shouldBeImplemented.! !
!ApiRest class methodsFor: 'error descriptions' stamp: 'AM 11/29/2020 16:16:24' prior: 50880008!
invalidIDOrPasswordErrorDescription
	
	^'ID or password is invalid'! !

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/29/2020 16:16:25'!
FAILURE!
!ApiRestTest methodsFor: 'clientPassworValidation' stamp: 'AM 11/29/2020 16:19:29'!
validate: aClientID and: aPassword

	! !

!classDefinition: #ApiRestTest category: 'TusLibros' stamp: 'AM 11/29/2020 16:21:04'!
TestCase subclass: #ApiRestTest
	instanceVariableNames: 'testObjectsFactory debitBehavior validClients'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApiRestTest methodsFor: 'clientPassworValidation' stamp: 'AM 11/29/2020 16:21:03' prior: 50880023!
validate: aClientID and: aPassword

	validClients at: aClientID ifAbsent: []! !

TestCase subclass: #ApiRestTest
	instanceVariableNames: 'testObjectsFactory debitBehavior clientValidationBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApiRestTest category: 'TusLibros' stamp: 'AM 11/29/2020 16:23:06'!
TestCase subclass: #ApiRestTest
	instanceVariableNames: 'testObjectsFactory debitBehavior clientValidationBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApiRestTest methodsFor: 'set up' stamp: 'AM 11/29/2020 16:23:13' prior: 50879561 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	clientValidationBehavior := [:aClientID : aPassword | ].! !

!methodRemoval: StoreTestObjectsFactory #validPasswordForID stamp: 'AM 11/29/2020 16:23:36'!
validPasswordForID
	
	^'0000'!

!methodRemoval: StoreTestObjectsFactory #validClientID stamp: 'AM 11/29/2020 16:23:40'!
validClientID

	^'0000'!
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/29/2020 16:24:24' prior: 50879905!
test03cantCreateCartForInvalidClientIDPasswordCombination

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	self
		should:[api createCartFor: 'client' withPassword: 'password']
		raise: Error
		withMessageText: ApiRest invalidIDOrPasswordErrorDescription.
		
	self assert: ApiRest hasNoActiveCarts.! !
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/29/2020 16:26:16' prior: 50880073!
test03cantCreateCartForInvalidClientIDPasswordCombination

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	clientValidationBehavior := [:client :password | self signalInvalidIDOrPassword]
	
	self
		should:[api createCartFor: 'client' withPassword: 'password']
		raise: Error
		withMessageText: self invalidIDOrPasswordErrorDescription.
		
	self assert: ApiRest hasNoActiveCarts.! !
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/29/2020 16:27:41' prior: 50880088!
test03cantCreateCartForInvalidClientIDPasswordCombination

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	clientValidationBehavior := [:client :password | self error : ApiRest invalidIDOrPasswordErrorDescription]
	
	self
		should:[api createCartFor: 'client' withPassword: 'password']
		raise: Error
		withMessageText: ApiRest invalidIDOrPasswordErrorDescription.
		
	self assert: ApiRest hasNoActiveCarts.! !

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/29/2020 16:28:32'!
ERROR!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/29/2020 16:28:32'!
ERROR!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/29/2020 16:28:56'!
ERROR!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/29/2020 16:28:56'!
ERROR!
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/29/2020 16:29:04' prior: 50880106!
test03cantCreateCartForInvalidClientIDPasswordCombination

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	clientValidationBehavior := [:client :password | self error : ApiRest invalidIDOrPasswordErrorDescription].
	
	self
		should:[api createCartFor: 'client' withPassword: 'password']
		raise: Error
		withMessageText: ApiRest invalidIDOrPasswordErrorDescription.
		
	self assert: ApiRest hasNoActiveCarts.! !

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/29/2020 16:29:07'!
FAILURE!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/29/2020 16:29:07'!
FAILURE!
!ApiRestTest methodsFor: 'clientPassworValidation' stamp: 'AM 11/29/2020 16:30:52' prior: 50880036!
validate: aClientID and: aPassword

	clientValidationBehavior value: aClientID value: aPassword.! !
!ApiRest methodsFor: 'cart' stamp: 'AM 11/29/2020 16:32:12' prior: 50879831!
createCartFor: aClientID withPassword: aPassword
	
	clientPasswordValidator validate: aClientID and: aPassword.
	activeCarts at: nextCartID put: (Cart acceptingItemsOf: priceCatalogue).
	nextCartID := nextCartID + 1.
	
	^nextCartID - 1.
	
	! !

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/29/2020 16:32:17'!
FAILURE!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/29/2020 16:32:17'!
FAILURE!
!ApiRest methodsFor: 'initialization' stamp: 'AM 11/29/2020 16:32:51' prior: 50879993!
initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator 
	
	priceCatalogue := aPriceCatalogue.
	merchanProcessor := aMerchantProcessor.
	nextCartID := 0.
	activeCarts := Dictionary new.
	! !
!ApiRest methodsFor: 'initialization' stamp: 'AM 11/29/2020 16:33:05' prior: 50880192!
initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator 
	
	priceCatalogue := aPriceCatalogue.
	merchanProcessor := aMerchantProcessor.
	nextCartID := 0.
	activeCarts := Dictionary new.
	clientPasswordValidator := aClientPasswordValidator.! !

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/29/2020 16:33:11'!
FAILURE!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/29/2020 16:33:11'!
FAILURE!
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/29/2020 16:33:35' prior: 50880140!
test03cantCreateCartForInvalidClientIDPasswordCombination

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	clientValidationBehavior := [:client :password | self error: ApiRest invalidIDOrPasswordErrorDescription].
	
	self
		should:[api createCartFor: 'client' withPassword: 'password']
		raise: Error
		withMessageText: ApiRest invalidIDOrPasswordErrorDescription.
		
	self assert: ApiRest hasNoActiveCarts.! !

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/29/2020 16:33:37'!
ERROR!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/29/2020 16:33:37'!
ERROR!
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/29/2020 16:33:52' prior: 50880224!
test03cantCreateCartForInvalidClientIDPasswordCombination

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	clientValidationBehavior := [:client :password | self error: ApiRest invalidIDOrPasswordErrorDescription].
	
	self
		should:[api createCartFor: 'client' withPassword: 'password']
		raise: Error
		withMessageText: ApiRest invalidIDOrPasswordErrorDescription.
		
	self assert: api hasNoActiveCarts.! !

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/29/2020 16:34:02'!
ERROR!
!ApiRest methodsFor: 'cart' stamp: 'AM 11/29/2020 16:34:08'!
hasNoActiveCarts
	self shouldBeImplemented.! !
!ApiRest methodsFor: 'cart' stamp: 'AM 11/29/2020 16:34:19' prior: 50880272!
hasNoActiveCarts
	
	activeCarts isEmpty.! !
!ApiRest methodsFor: 'cart' stamp: 'AM 11/29/2020 16:34:23' prior: 50880276!
hasNoActiveCarts
	
	^activeCarts isEmpty.! !

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/29/2020 16:34:24'!
PASSED!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 11/29/2020 16:34:24'!
ERROR!

!testRun: #ApiRestTest #test02itemIsAddedToCartCorrectly stamp: 'AM 11/29/2020 16:34:24'!
ERROR!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/29/2020 16:34:24'!
PASSED!
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/29/2020 16:35:55' prior: 50879743!
test01newCartShouldBeEmpty

	| Api cartID expected |
	
	Api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	cartID := Api createCartFor: 'client' withPassword: 'password'.
	
	expected := Bag new.
	
	self assert: expected equals: (Api listCart: cartID).! !
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/29/2020 16:36:35' prior: 50879872!
test02itemIsAddedToCartCorrectly

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	
	expected := Bag with: testObjectsFactory itemSellByTheStore.
	
	self assert: expected equals: (api listCart: cartID).! !
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/29/2020 16:36:43' prior: 50880298!
test01newCartShouldBeEmpty

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	expected := Bag new.
	
	self assert: expected equals: (api listCart: cartID).! !

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 11/29/2020 16:36:48'!
PASSED!

!testRun: #ApiRestTest #test02itemIsAddedToCartCorrectly stamp: 'AM 11/29/2020 16:36:48'!
PASSED!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/29/2020 16:36:48'!
PASSED!
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/29/2020 16:43:40'!
test02checksOutCorrectly

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	
	"api checkOutCart: cartID charging: testObjectsFactory "! !
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/29/2020 16:45:07' prior: 50880350!
test02checksOutCorrectly

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	
	api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard! !
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/29/2020 16:46:11'!
test04checksOutCorrectly

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	
	api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard! !

!methodRemoval: ApiRestTest #test02checksOutCorrectly stamp: 'AM 11/29/2020 16:46:11'!
test02checksOutCorrectly

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	
	api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard!
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/29/2020 16:48:31' prior: 50880380!
test04checksOutCorrectly

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	
	api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard.
	
	self assert: (Bag with: testObjectsFactory itemSellByTheStore) equals: api listPurchasesFor: 'client'. ! !
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/29/2020 16:49:02' prior: 50880411!
test04checksOutCorrectly

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	
	api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard.
	
	expected := Bag with: testObjectsFactory itemSellByTheStore.
	
	self assert: expected equals: api listPurchasesFor: 'client'. ! !

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/29/2020 16:49:08'!
ERROR!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/29/2020 16:49:08'!
ERROR!
!ApiRest methodsFor: 'check out' stamp: 'AM 11/29/2020 16:49:22'!
checkOutCart: aSmallInteger charging: aCreditCard 
	self shouldBeImplemented.! !

!classDefinition: #ApiRest category: 'TusLibros' stamp: 'AM 11/29/2020 16:52:03'!
Object subclass: #ApiRest
	instanceVariableNames: 'priceCatalogue merchanProcessor activeCarts nextCartID merchantProcessor clientPasswordValidator salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApiRest methodsFor: 'check out' stamp: 'AM 11/29/2020 16:52:01' prior: 50880455!
checkOutCart: aCartID charging: aCreditCard 
	
	| cashier |
	
	cashier := Cashier toCheckout: (activeCarts at: aCartID) throught: merchanProcessor on: (Date today) registeringOn: salesBook.
	 ! !
!ApiRest methodsFor: 'check out' stamp: 'AM 11/29/2020 16:53:28' prior: 50880470!
checkOutCart: aCartID charging: aCreditCard 
	
	| cashier |
	
	cashier := Cashier toCheckout: (activeCarts at: aCartID ) charging: aCreditCard throught: merchanProcessor on: (Date today) registeringOn: salesBook.
	 ! !
!ApiRest methodsFor: 'check out' stamp: 'AM 11/29/2020 16:53:59' prior: 50880479!
checkOutCart: aCartID charging: aCreditCard 
	
	| cashier |
	
	cashier := Cashier toCheckout: (activeCarts at: aCartID ) charging: aCreditCard throught: merchanProcessor on: (Date today) registeringOn: salesBook.
	
	cashier checkOut.
	 ! !
!ApiRest methodsFor: 'check out' stamp: 'AM 11/29/2020 16:55:20' prior: 50880489!
checkOutCart: aCartID charging: aCreditCard 
	
	| cashier |
	
	cashier := Cashier toCheckout: (activeCarts at: aCartID ) charging: aCreditCard throught: merchanProcessor on: (Date today) registeringOn: salesBook.
	
	cashier checkOut.
	 ! !

----SNAPSHOT----(29 November 2020 16:57:47) CuisUniversity-4383.image priorSource: 17512888!

----QUIT----(29 November 2020 16:57:52) CuisUniversity-4383.image priorSource: 17563503!

----STARTUP---- (30 November 2020 17:12:00) as C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CUIS\CuisUniversity-4383.image!

!ApiRestTest methodsFor: 'clientPassworValidation' stamp: 'AM 11/30/2020 18:11:22'!
authenticate: aClientID withPassword: aPassword

	clientValidationBehavior value: aClientID value: aPassword.! !

!methodRemoval: ApiRestTest #validate:and: stamp: 'AM 11/30/2020 18:11:22'!
validate: aClientID and: aPassword

	clientValidationBehavior value: aClientID value: aPassword.!
!ApiRest methodsFor: 'initialization' stamp: 'AM 11/30/2020 18:12:22'!
initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor authenticatingClientsThrough: aClientPasswordValidator 
	
	priceCatalogue := aPriceCatalogue.
	merchanProcessor := aMerchantProcessor.
	nextCartID := 0.
	activeCarts := Dictionary new.
	clientPasswordValidator := aClientPasswordValidator.! !
!ApiRest class methodsFor: 'as yet unclassified' stamp: 'AM 11/30/2020 18:12:22' prior: 50879948!
withCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator
	
	^self new initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor authenticatingClientsThrough: aClientPasswordValidator.! !

!methodRemoval: ApiRest #initializeWithCatalogue:salesThrough:validatingClientsThrough: stamp: 'AM 11/30/2020 18:12:22'!
initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator 
	
	priceCatalogue := aPriceCatalogue.
	merchanProcessor := aMerchantProcessor.
	nextCartID := 0.
	activeCarts := Dictionary new.
	clientPasswordValidator := aClientPasswordValidator.!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 11/30/2020 18:13:10'!
ERROR!

!testRun: #ApiRestTest #test02itemIsAddedToCartCorrectly stamp: 'AM 11/30/2020 18:13:10'!
ERROR!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/30/2020 18:13:10'!
FAILURE!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 18:13:10'!
ERROR!
!ApiRest methodsFor: 'initialization' stamp: 'AM 11/30/2020 18:13:33'!
initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator 
	
	priceCatalogue := aPriceCatalogue.
	merchanProcessor := aMerchantProcessor.
	nextCartID := 0.
	activeCarts := Dictionary new.
	clientPasswordValidator := aClientPasswordValidator.! !
!ApiRest class methodsFor: 'as yet unclassified' stamp: 'AM 11/30/2020 18:13:33' prior: 50880545!
withCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator
	
	^self new initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator.! !

!methodRemoval: ApiRest #initializeWithCatalogue:salesThrough:authenticatingClientsThrough: stamp: 'AM 11/30/2020 18:13:33'!
initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor authenticatingClientsThrough: aClientPasswordValidator 
	
	priceCatalogue := aPriceCatalogue.
	merchanProcessor := aMerchantProcessor.
	nextCartID := 0.
	activeCarts := Dictionary new.
	clientPasswordValidator := aClientPasswordValidator.!
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/30/2020 18:14:48' prior: 50880430!
test04checksOutCorrectly

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	
	api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard.
	
	expected := Bag with: testObjectsFactory itemSellByTheStore.
	
	self assert: expected equals: (api listPurchasesFor: 'client'). ! !

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 11/30/2020 18:15:14'!
ERROR!

!testRun: #ApiRestTest #test02itemIsAddedToCartCorrectly stamp: 'AM 11/30/2020 18:15:14'!
ERROR!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/30/2020 18:15:14'!
FAILURE!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 18:15:14'!
ERROR!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 11/30/2020 18:15:24'!
ERROR!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 11/30/2020 18:15:24'!
ERROR!
!ApiRest methodsFor: 'cart' stamp: 'AM 11/30/2020 18:16:28' prior: 50880173!
createCartFor: aClientID withPassword: aPassword
	
	clientPasswordValidator authenticate: aClientID withPassword: aPassword.
	activeCarts at: nextCartID put: (Cart acceptingItemsOf: priceCatalogue).
	nextCartID := nextCartID + 1.
	
	^nextCartID - 1.
	
	! !

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 11/30/2020 18:18:04'!
PASSED!

!testRun: #ApiRestTest #test02itemIsAddedToCartCorrectly stamp: 'AM 11/30/2020 18:18:04'!
PASSED!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/30/2020 18:18:04'!
PASSED!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 18:18:04'!
ERROR!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 18:18:04'!
ERROR!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 11/30/2020 18:18:07'!
PASSED!

!testRun: #ApiRestTest #test02itemIsAddedToCartCorrectly stamp: 'AM 11/30/2020 18:18:07'!
PASSED!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/30/2020 18:18:07'!
PASSED!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 18:18:07'!
ERROR!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 18:18:07'!
ERROR!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 11/30/2020 18:18:10'!
PASSED!

!testRun: #ApiRestTest #test02itemIsAddedToCartCorrectly stamp: 'AM 11/30/2020 18:18:10'!
PASSED!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/30/2020 18:18:10'!
PASSED!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 18:18:10'!
ERROR!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 18:18:10'!
ERROR!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 11/30/2020 18:18:22'!
PASSED!

!testRun: #ApiRestTest #test02itemIsAddedToCartCorrectly stamp: 'AM 11/30/2020 18:18:22'!
PASSED!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/30/2020 18:18:22'!
PASSED!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 18:18:22'!
ERROR!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 18:18:22'!
ERROR!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 11/30/2020 18:18:54'!
PASSED!

!classDefinition: #ApiRest category: 'TusLibros' stamp: 'AM 11/30/2020 18:26:11'!
Object subclass: #ApiRest
	instanceVariableNames: 'priceCatalogue merchanProcessor activeCarts nextCartID merchantProcessor clientPasswordValidator salesBook ownerForCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApiRest methodsFor: 'cart' stamp: 'AM 11/30/2020 18:26:10' prior: 50880658!
createCartFor: aClientID withPassword: aPassword
	
	clientPasswordValidator authenticate: aClientID withPassword: aPassword.
	activeCarts at: nextCartID put: (Cart acceptingItemsOf: priceCatalogue).
	ownerForCart at: nextCartID put: aClientID.
	nextCartID := nextCartID + 1.
	
	^nextCartID - 1.
	
	! !
!ApiRest methodsFor: 'initialization' stamp: 'AM 11/30/2020 18:26:32' prior: 50880582!
initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator 
	
	priceCatalogue := aPriceCatalogue.
	merchanProcessor := aMerchantProcessor.
	nextCartID := 0.
	activeCarts := Dictionary new.
	ownerForCart := Dictionary new.
	clientPasswordValidator := aClientPasswordValidator.! !
!ApiRest methodsFor: 'check out' stamp: 'AM 11/30/2020 18:31:38' prior: 50880500!
checkOutCart: aCartID charging: aCreditCard 
	
	| cashier clientSalesBook |
	
	clientSalesBook := salesBook at: (ownerForCart at: aCartID).
	
	cashier := Cashier toCheckout: (activeCarts at: aCartID ) charging: aCreditCard throught: merchanProcessor on: (Date today) registeringOn: clientSalesBook.
	
	cashier checkOut.
	 ! !

!methodRemoval: ApiRest #initializeWithCatalogue:salesThrough: stamp: 'AM 11/30/2020 18:31:56'!
initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchanProcessor 
	
	priceCatalogue := aPriceCatalogue.
	merchanProcessor := aMerchanProcessor.
	nextCartID := 0.
	activeCarts := Dictionary new.!
!ApiRest methodsFor: 'initialization' stamp: 'AM 11/30/2020 18:32:20' prior: 50880757!
initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator 
	
	priceCatalogue := aPriceCatalogue.
	merchanProcessor := aMerchantProcessor.
	nextCartID := 0.
	salesBook := Dictionary new.
	activeCarts := Dictionary new.
	ownerForCart := Dictionary new.
	clientPasswordValidator := aClientPasswordValidator.! !
!ApiRest methodsFor: 'check out' stamp: 'AM 11/30/2020 18:35:48' prior: 50880771!
checkOutCart: aCartID charging: aCreditCard 
	
	| cashier cartOwner clientSalesBook |
	
	cartOwner := ownerForCart at: aCartID.
	clientSalesBook := salesBook at: cartOwner ifAbsent:[salesBook at: cartOwner put: OrderedCollection new.
												salesBook at: cartOwner.].
	
	cashier := Cashier toCheckout: (activeCarts at: aCartID ) charging: aCreditCard throught: merchanProcessor on: (Date today) registeringOn: clientSalesBook.
	
	cashier checkOut.
	 ! !

| dictionary |


dictionary := Dictionary new.

dictionary at: '1' put: 1.!
!ApiRest methodsFor: 'check out' stamp: 'AM 11/30/2020 18:37:28' prior: 50880809!
checkOutCart: aCartID charging: aCreditCard 
	
	| cashier cartOwner clientSalesBook |
	
	cartOwner := ownerForCart at: aCartID.
	clientSalesBook := salesBook at: cartOwner ifAbsent:[salesBook at: cartOwner put: OrderedCollection new].
	
	cashier := Cashier toCheckout: (activeCarts at: aCartID ) charging: aCreditCard throught: merchanProcessor on: (Date today) registeringOn: clientSalesBook.
	
	cashier checkOut.
	 ! !
!ApiRest methodsFor: 'check out' stamp: 'AM 11/30/2020 18:37:32' prior: 50880829!
checkOutCart: aCartID charging: aCreditCard 
	
	| cashier cartOwner clientSalesBook |
	
	cartOwner := ownerForCart at: aCartID.
	clientSalesBook := salesBook at: cartOwner ifAbsent: [salesBook at: cartOwner put: OrderedCollection new].
	
	cashier := Cashier toCheckout: (activeCarts at: aCartID ) charging: aCreditCard throught: merchanProcessor on: (Date today) registeringOn: clientSalesBook.
	
	cashier checkOut.
	 ! !

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 18:38:46'!
ERROR!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 18:38:46'!
ERROR!
!ApiRest methodsFor: 'as yet unclassified' stamp: 'AM 11/30/2020 18:38:58'!
listPurchasesFor: aString 
	self shouldBeImplemented.! !
!ApiRest methodsFor: 'as yet unclassified' stamp: 'AM 11/30/2020 18:39:40' prior: 50880867!
listPurchasesFor: aClientID

	^salesBook at: aClientID.! !

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 18:39:47'!
FAILURE!
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/30/2020 18:40:37' prior: 50880620!
test04checksOutCorrectly

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	
	api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard.
	
	expected := OrderedCollection with: 'validBook' with: 1 with: 1000.
	
	self assert: expected equals: (api listPurchasesFor: 'client'). ! !
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/30/2020 18:41:07' prior: 50880880!
test04checksOutCorrectly

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	
	api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard.
	
	expected := OrderedCollection with: 'validBook' with: 1 with: 10.
	
	self assert: expected equals: (api listPurchasesFor: 'client'). ! !

Object subclass: #Sale
	instanceVariableNames: 'items total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'AM 11/30/2020 18:42:32'!
Object subclass: #Sale
	instanceVariableNames: 'items total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale class methodsFor: 'instance creation' stamp: 'AM 11/30/2020 18:44:44'!
forCart: aCart

	! !

!classDefinition: 'Sale class' category: 'TusLibros' stamp: 'AM 11/30/2020 18:45:26'!
Sale class
	instanceVariableNames: 'soldItems'!

!classDefinition: 'Sale class' category: 'TusLibros' stamp: 'AM 11/30/2020 18:45:28'!
Sale class
	instanceVariableNames: 'soldItems total'!
!Sale class methodsFor: 'instance creation' stamp: 'AM 11/30/2020 18:45:25' prior: 50880930!
forCart: aCart
	
	soldItems := aCart items.
	total := aCart .
	! !
!Sale class methodsFor: 'instance creation' stamp: 'AM 11/30/2020 18:45:45' prior: 50880943!
forCart: aCart
	
	soldItems := aCart items.
	total := aCart total.
	! !
!Sale methodsFor: 'items' stamp: 'AM 11/30/2020 18:46:33'!
soldItems

	^items copy.! !

Sale class
	instanceVariableNames: ''!

!classDefinition: 'Sale class' category: 'TusLibros' stamp: 'AM 11/30/2020 18:46:56'!
Sale class
	instanceVariableNames: ''!
!Sale class methodsFor: 'instance creation' stamp: 'AM 11/30/2020 18:47:53' prior: 50880948!
forCart: aCart
	
	^self new initializeSaleOf: aCart items for: aCart total.
	! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'AM 11/30/2020 18:48:52'!
Object subclass: #Sale
	instanceVariableNames: 'items total soldItems'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'AM 11/30/2020 18:48:51'!
initializeSaleOf: aSoldItemsCollection for: aSaleTotal

	total := aSaleTotal.
	soldItems := aSoldItemsCollection.! !
!Sale methodsFor: 'items' stamp: 'AM 11/30/2020 18:49:03' prior: 50880953!
soldItems

	^soldItems copy.! !

Object subclass: #Sale
	instanceVariableNames: 'total soldItems'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'AM 11/30/2020 18:49:14'!
Object subclass: #Sale
	instanceVariableNames: 'total soldItems'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: Sale #initializeTotal: stamp: 'AM 11/30/2020 18:49:25'!
initializeTotal: aTotal

	total := aTotal !

!methodRemoval: Sale class #of: stamp: 'AM 11/30/2020 18:49:29'!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal !
!Cashier methodsFor: 'checkout - private' stamp: 'AM 11/30/2020 18:49:49' prior: 50879183!
createSale

	^ Sale forCart: cart.
! !
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/30/2020 18:53:35' prior: 50880900!
test04checksOutCorrectly

	| api cartID expected cart|
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	cartID := api createCartFor: 'client' withPassword: 'password'.
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard.
	cart := Cart acceptingItemsOf: testObjectsFactory defaultCatalog.
	cart add: (testObjectsFactory itemSellByTheStore).
	
	expected := Sale forCart: cart.
	
	self assert: expected equals: (api listPurchasesFor: 'client'). ! !

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 18:53:40'!
ERROR!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 18:53:40'!
ERROR!
!Cart methodsFor: 'item queries' stamp: 'AM 11/30/2020 18:54:03'!
items

	^items copy.! !

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 18:54:51'!
FAILURE!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 18:54:51'!
FAILURE!
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/30/2020 18:55:16' prior: 50881008!
test04checksOutCorrectly

	| api cartID expected cart|
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	cartID := api createCartFor: 'client' withPassword: 'password'.
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard.
	cart := Cart acceptingItemsOf: testObjectsFactory defaultCatalog.
	cart add: (testObjectsFactory itemSellByTheStore).
	
	expected := OrderedCollection with: (Sale forCart: cart).
	
	self assert: expected equals: (api listPurchasesFor: 'client'). ! !

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 18:55:19'!
FAILURE!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 18:55:19'!
FAILURE!
!Cashier methodsFor: 'checkout - private' stamp: 'AM 11/30/2020 18:59:02' prior: 50881004!
createSale

	^ cart items add: total.
! !
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/30/2020 19:00:09' prior: 50881046!
test04checksOutCorrectly

	| api cartID expected cart|
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	cartID := api createCartFor: 'client' withPassword: 'password'.
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard.
	cart := Cart acceptingItemsOf: testObjectsFactory defaultCatalog.
	cart add: (testObjectsFactory itemSellByTheStore).
	
	expected := OrderedCollection with: (testObjectsFactory itemSellByTheStore) with: 10.
	
	self assert: expected equals: (api listPurchasesFor: 'client'). ! !

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:00:28'!
FAILURE!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:00:28'!
FAILURE!

self items!

^ cart items add: total!

cart items!
!Cashier methodsFor: 'checkout - private' stamp: 'AM 11/30/2020 19:04:27' prior: 50881075!
createSale

	^ (cart items)add: total.
! !

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:04:28'!
FAILURE!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:04:36'!
FAILURE!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:04:36'!
FAILURE!
!Cashier methodsFor: 'checkout - private' stamp: 'AM 11/30/2020 19:05:28' prior: 50881111!
createSale

	^ ((cart items)addLast: total).
! !

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:05:34'!
FAILURE!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:05:34'!
FAILURE!
!Cashier methodsFor: 'checkout - private' stamp: 'AM 11/30/2020 19:06:40' prior: 50881124!
createSale
	
	| sale |
	sale := (cart items) addLast: total.
	^sale.
! !

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:06:45'!
FAILURE!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:06:45'!
FAILURE!

cart items!

self add: 10!

self!
!Cashier methodsFor: 'checkout - private' stamp: 'AM 11/30/2020 19:09:42' prior: 50881135!
createSale
	
	
	^OrderedCollection with: (cart items) with: total.
! !

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:09:43'!
FAILURE!
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/30/2020 19:10:48' prior: 50881079!
test04checksOutCorrectly

	| api cartID expected cart|
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	cartID := api createCartFor: 'client' withPassword: 'password'.
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard.
	cart := Cart acceptingItemsOf: testObjectsFactory defaultCatalog.
	cart add: (testObjectsFactory itemSellByTheStore).
	
	expected := OrderedCollection with: (OrderedCollection with: testObjectsFactory itemSellByTheStore) with: 10.
	
	self assert: expected equals: (api listPurchasesFor: 'client'). ! !

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:10:52'!
FAILURE!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:10:52'!
FAILURE!
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/30/2020 19:12:50' prior: 50881155!
test04checksOutCorrectly

	| api cartID expected expectedItems cart|
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	cartID := api createCartFor: 'client' withPassword: 'password'.
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard.
	cart := Cart acceptingItemsOf: testObjectsFactory defaultCatalog.
	cart add: (testObjectsFactory itemSellByTheStore).
	
	expectedItems := OrderedCollection with: testObjectsFactory itemSellByTheStore.
	expected := OrderedCollection with: expectedItems with: 10.
	
	self assert: expected equals: (api listPurchasesFor: 'client'). ! !

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:12:54'!
FAILURE!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:12:54'!
FAILURE!

^OrderedCollection with: (cart items) with: total!
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/30/2020 19:14:21' prior: 50881186!
test04checksOutCorrectly

	| api cartID expected expectedItems cart|
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	cartID := api createCartFor: 'client' withPassword: 'password'.
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard.
	cart := Cart acceptingItemsOf: testObjectsFactory defaultCatalog.
	cart add: (testObjectsFactory itemSellByTheStore).
	
	expectedItems := OrderedCollection with: testObjectsFactory itemSellByTheStore.
	expected := OrderedCollection with: (OrderedCollection with: expectedItems with: 10).
	
	self assert: expected equals: (api listPurchasesFor: 'client'). ! !

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:14:30'!
PASSED!
!Cashier methodsFor: 'checkout' stamp: 'AM 11/30/2020 19:24:36' prior: 50879196!
checkOut
	
	| sale |
	self calculateTotal.
	self debitTotal.
	sale := self registerSale.

	^ sale.! !
!ApiRest methodsFor: 'check out' stamp: 'AM 11/30/2020 19:24:55' prior: 50880845!
checkOutCart: aCartID charging: aCreditCard 
	
	| cashier cartOwner clientSalesBook |
	
	cartOwner := ownerForCart at: aCartID.
	clientSalesBook := salesBook at: cartOwner ifAbsent: [salesBook at: cartOwner put: OrderedCollection new].
	
	cashier := Cashier toCheckout: (activeCarts at: aCartID ) charging: aCreditCard throught: merchanProcessor on: (Date today) registeringOn: clientSalesBook.
	
	^cashier checkOut.
	 ! !
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/30/2020 19:25:25' prior: 50881220!
test04checksOutCorrectly

	| api cartID expected cart|
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	cartID := api createCartFor: 'client' withPassword: 'password'.
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard.
	
	self assert: expected equals: (api listPurchasesFor: 'client'). ! !
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/30/2020 19:26:08' prior: 50881272!
test04checksOutCorrectly

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	cartID := api createCartFor: 'client' withPassword: 'password'.
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	
	self assert: (api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard) equals: (api listPurchasesFor: 'client'). ! !

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:26:16'!
FAILURE!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:26:17'!
FAILURE!
!Cashier methodsFor: 'checkout - private' stamp: 'AM 11/30/2020 19:26:49' prior: 50879178!
registerSale

	^salesBook add: self createSale! !

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:26:55'!
FAILURE!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:26:55'!
FAILURE!
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/30/2020 19:27:51' prior: 50881290!
test04checksOutCorrectly

	| api cartID expected|
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	cartID := api createCartFor: 'client' withPassword: 'password'.
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	expected := OrderedCollection with: (api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard).
	self assert: expected equals: (api listPurchasesFor: 'client'). ! !

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:27:54'!
PASSED!
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/30/2020 19:28:35' prior: 50881323!
test04checksOutCorrectly

	| api cartID expected|
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	cartID := api createCartFor: 'client' withPassword: 'password'.
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	expected := OrderedCollection with: (api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard).
	
	self assert: expected equals: (api listPurchasesFor: 'client'). ! !
!ApiRest methodsFor: 'cart' stamp: 'AM 11/30/2020 19:29:30' prior: 50879848!
listCart: aCartId
	
	^activeCarts at: aCartId items.! !

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 11/30/2020 19:29:36'!
ERROR!

!testRun: #ApiRestTest #test02itemIsAddedToCartCorrectly stamp: 'AM 11/30/2020 19:29:36'!
ERROR!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/30/2020 19:29:36'!
PASSED!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:29:36'!
PASSED!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 11/30/2020 19:29:40'!
ERROR!
!ApiRest methodsFor: 'cart' stamp: 'AM 11/30/2020 19:29:56' prior: 50881364!
listCart: aCartId
	
	^(activeCarts at: aCartId) items.! !

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 11/30/2020 19:30:01'!
FAILURE!

!testRun: #ApiRestTest #test02itemIsAddedToCartCorrectly stamp: 'AM 11/30/2020 19:30:01'!
FAILURE!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/30/2020 19:30:01'!
PASSED!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:30:01'!
PASSED!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 11/30/2020 19:30:03'!
FAILURE!
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/30/2020 19:30:45' prior: 50880328!
test01newCartShouldBeEmpty

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	expected := OrderedCollection new.
	
	self assert: expected equals: (api listCart: cartID).! !
!ApiRestTest methodsFor: 'tests' stamp: 'AM 11/30/2020 19:30:55' prior: 50880311!
test02itemIsAddedToCartCorrectly

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	
	expected := OrderedCollection with: testObjectsFactory itemSellByTheStore.
	
	self assert: expected equals: (api listCart: cartID).! !

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 11/30/2020 19:30:58'!
PASSED!

!testRun: #ApiRestTest #test02itemIsAddedToCartCorrectly stamp: 'AM 11/30/2020 19:30:58'!
PASSED!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/30/2020 19:30:59'!
PASSED!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:30:59'!
PASSED!

Object subclass: #ApiRest
	instanceVariableNames: 'priceCatalogue activeCarts nextCartID merchantProcessor clientPasswordValidator salesBook ownerForCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApiRest category: 'TusLibros' stamp: 'AM 11/30/2020 19:32:01'!
Object subclass: #ApiRest
	instanceVariableNames: 'priceCatalogue activeCarts nextCartID merchantProcessor clientPasswordValidator salesBook ownerForCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 11/30/2020 19:32:04'!
PASSED!

!testRun: #ApiRestTest #test02itemIsAddedToCartCorrectly stamp: 'AM 11/30/2020 19:32:04'!
PASSED!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/30/2020 19:32:04'!
PASSED!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:32:04'!
PASSED!
!ApiRest methodsFor: 'check out' stamp: 'AM 11/30/2020 19:32:29' prior: 50881256!
checkOutCart: aCartID charging: aCreditCard 
	
	| cashier cartOwner clientSalesBook |
	
	cartOwner := ownerForCart at: aCartID.
	clientSalesBook := salesBook at: cartOwner ifAbsent: [salesBook at: cartOwner put: OrderedCollection new].
	
	cashier := Cashier toCheckout: (activeCarts at: aCartID ) charging: aCreditCard throught: merchantProcessor on: (Date today) registeringOn: clientSalesBook.
	
	^cashier checkOut.
	 ! !

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 11/30/2020 19:32:43'!
PASSED!

!testRun: #ApiRestTest #test02itemIsAddedToCartCorrectly stamp: 'AM 11/30/2020 19:32:43'!
PASSED!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/30/2020 19:32:43'!
PASSED!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:32:43'!
ERROR!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:32:43'!
ERROR!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 11/30/2020 19:33:05'!
PASSED!

!testRun: #ApiRestTest #test02itemIsAddedToCartCorrectly stamp: 'AM 11/30/2020 19:33:05'!
PASSED!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/30/2020 19:33:05'!
PASSED!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:33:05'!
ERROR!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:33:05'!
ERROR!
!ApiRest methodsFor: 'initialization' stamp: 'AM 11/30/2020 19:33:29' prior: 50880794!
initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator 
	
	priceCatalogue := aPriceCatalogue.
	merchantProcessor := aMerchantProcessor.
	nextCartID := 0.
	salesBook := Dictionary new.
	activeCarts := Dictionary new.
	ownerForCart := Dictionary new.
	clientPasswordValidator := aClientPasswordValidator.! !

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 11/30/2020 19:33:32'!
PASSED!

!testRun: #ApiRestTest #test02itemIsAddedToCartCorrectly stamp: 'AM 11/30/2020 19:33:32'!
PASSED!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 11/30/2020 19:33:32'!
PASSED!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 11/30/2020 19:33:32'!
PASSED!

----QUIT----(30 November 2020 20:11:49) CuisUniversity-4383.image priorSource: 17563597!

----STARTUP---- (1 December 2020 15:33:19) as C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CUIS\CuisUniversity-4383.image!


Object subclass: #xxx
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #Temp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Temp category: 'TusLibros' stamp: 'AM 12/1/2020 15:39:02'!
Object subclass: #Temp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApiRest methodsFor: 'initialization' stamp: 'AM 12/1/2020 15:44:08' prior: 50881526!
initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator 
	
	priceCatalogue := aPriceCatalogue.
	merchantProcessor := aMerchantProcessor.
	nextCartID := 0.
	salesBook := Dictionary new.
	activeCarts := Dictionary new.
	ownerForCart := Dictionary new.
	clientPasswordValidator := aClientPasswordValidator.! !

!classDefinition: #Temp category: 'TusLibros' stamp: 'AM 12/1/2020 15:45:13'!
Object subclass: #Temp
	instanceVariableNames: 'activeCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Temp methodsFor: 'initialization' stamp: 'AM 12/1/2020 15:45:11' overrides: 16896425!
initialize
	
	activeCarts := Dictionary new.
	! !
!ApiRest methodsFor: 'initialization' stamp: 'AM 12/1/2020 15:45:58' prior: 50881574!
initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator 
	
	priceCatalogue := aPriceCatalogue.
	merchantProcessor := aMerchantProcessor.
	nextCartID := 0.
	salesBook := Dictionary new.
	activeCarts := Dictionary new.
	clientPasswordValidator := aClientPasswordValidator.! !
!Temp methodsFor: 'initialization' stamp: 'AM 12/1/2020 15:47:03' prior: 50881596 overrides: 16896425!
initialize
	
	"Keys son clientID, podemos obtener client id para carrito, value carrito"
	activeCarts := Dictionary new.
	! !

!classDefinition: #Temp category: 'TusLibros' stamp: 'AM 12/1/2020 15:47:45'!
Object subclass: #Temp
	instanceVariableNames: 'activeCarts cartLastActionTimestamp'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Temp methodsFor: 'initialization' stamp: 'AM 12/1/2020 15:47:44' prior: 50881615 overrides: 16896425!
initialize
	
	"Keys son clientID, podemos obtener client id para carrito, value carrito"
	activeCarts := Dictionary new.
	cartLastActionTimestamp := Dictionary new.! !

!classDefinition: #Temp category: 'TusLibros' stamp: 'AM 12/1/2020 15:48:43'!
Object subclass: #Temp
	instanceVariableNames: 'activeCarts cartLastActionTimestamp salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Temp methodsFor: 'initialization' stamp: 'AM 12/1/2020 15:48:42' prior: 50881630 overrides: 16896425!
initialize
	
	"Keys son clientID, podemos obtener client id para carrito, value carrito"
	activeCarts := Dictionary new.
	cartLastActionTimestamp := Dictionary new.
	salesBook := Dictionary new.! !
!Temp methodsFor: 'initialization' stamp: 'AM 12/1/2020 15:53:26'!
cartForClient: aClientID
	
	activeCarts at: aClientID ifAbsent: [].! !
!Temp methodsFor: 'initialization' stamp: 'AM 12/1/2020 15:54:10' prior: 50881656!
cartForClient: aClientID
	
	^activeCarts at: aClientID ifAbsent: [].! !
!Temp methodsFor: 'initialization' stamp: 'AM 12/1/2020 15:54:35'!
salesForClient: aClientID
	
	^salesBook .! !
!Temp methodsFor: 'initialization' stamp: 'AM 12/1/2020 15:55:48' prior: 50881666!
salesForClient: aClientID
	
	^salesBook at: aClientID ifAbsent: [].! !
!Temp methodsFor: 'initialization' stamp: 'AM 12/1/2020 15:57:04'!
clientForCart: aCart
	
	^activeCarts keyAtValue: aCart ifAbsent: [].! !
!Temp methodsFor: 'initialization' stamp: 'AM 12/1/2020 16:02:04' prior: 50881647 overrides: 16896425!
initialize
	
	"Keys son clientID, podemos obtener client id para carrito, value carrito"
	activeCarts := Dictionary new.
	cartLastActionTimestamp := Dictionary new.
	salesBook := Dictionary new.! !
!Temp methodsFor: 'initialization' stamp: 'AM 12/1/2020 16:03:26'!
addCart: aCart forClient: aClientID

! !

!classDefinition: #Temp category: 'TusLibros' stamp: 'AM 12/1/2020 16:06:29'!
Object subclass: #Temp
	instanceVariableNames: 'activeCarts cartLastActionTimestamp salesBook nextCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Temp methodsFor: 'initialization' stamp: 'AM 12/1/2020 16:06:27' prior: 50881690!
addCart: aCart forClient: aClientID

	activeCarts at: nextCartID put: aClientID->aCart.
	nextCartID := nextCartID + 1.! !

!methodRemoval: Temp #cartForClient: stamp: 'AM 12/1/2020 16:07:46'!
cartForClient: aClientID
	
	^activeCarts at: aClientID ifAbsent: [].!

!methodRemoval: Temp #clientForCart: stamp: 'AM 12/1/2020 16:08:20'!
clientForCart: aCart
	
	^activeCarts keyAtValue: aCart ifAbsent: [].!

!methodRemoval: Temp #salesForClient: stamp: 'AM 12/1/2020 16:08:33'!
salesForClient: aClientID
	
	^salesBook at: aClientID ifAbsent: [].!

x _ #myVar->'hello'.		"Create an association"
y _ x key.
y _ x value.
!
!Temp methodsFor: 'initialization' stamp: 'AM 12/1/2020 16:09:26'!
cartWithID: aCartID

	activeCarts at: aCartID value.! !
!Temp methodsFor: 'initialization' stamp: 'AM 12/1/2020 16:10:00'!
ownerIDForCart: aCartID

	activeCarts at: aCartID key.! !

!classRenamed: #Temp as: #CartManager stamp: 'AM 12/1/2020 16:10:59'!
Smalltalk renameClassNamed: #Temp as: #CartManager!

----QUIT----(1 December 2020 16:11:19) CuisUniversity-4383.image priorSource: 17596878!

----STARTUP---- (1 December 2020 16:11:28) as C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CUIS\CuisUniversity-4383.image!

!CartManager methodsFor: 'adding' stamp: 'AM 12/1/2020 16:13:55'!
addToCart: aCartID

	activeCarts at: aCartID ifAbsent: [].! !
!CartManager methodsFor: 'adding' stamp: 'AM 12/1/2020 16:14:56'!
addToCart: aCartID item: anItem quantity: aQuantity

	activeCarts at: aCartID ifAbsent: [].! !

!methodRemoval: CartManager #addToCart: stamp: 'AM 12/1/2020 16:15:15'!
addToCart: aCartID

	activeCarts at: aCartID ifAbsent: [].!
!CartManager methodsFor: 'adding' stamp: 'AM 12/1/2020 16:15:42' prior: 50881747!
addToCart: aCartID item: anItem quantity: aQuantity

	| cart |
	
	cart := activeCarts at: aCartID ifAbsent: [].
	cart ! !
!CartManager methodsFor: 'adding' stamp: 'AM 12/1/2020 16:16:47' prior: 50881757!
addToCart: aCartID item: anItem quantity: aQuantity

	| cart |
	
	cart := activeCarts at: aCartID ifAbsent: [].
	cart add: anItem of: aQuantity.! !
!CartManager methodsFor: 'adding' stamp: 'AM 12/1/2020 16:17:00' prior: 50881764!
addToCart: aCartID item: anItem quantity: aQuantity

	| cart |
	
	cart := activeCarts at: aCartID ifAbsent: [] value.
	cart add: anItem of: aQuantity.! !

!classDefinition: #ApiRest category: 'TusLibros' stamp: 'AM 12/1/2020 16:18:06'!
Object subclass: #ApiRest
	instanceVariableNames: 'priceCatalogue activeCarts nextCartID merchantProcessor clientPasswordValidator salesBook ownerForCart cartManager'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApiRest methodsFor: 'cart' stamp: 'AM 12/1/2020 16:18:03' prior: 50880744!
createCartFor: aClientID withPassword: aPassword
	
	clientPasswordValidator authenticate: aClientID withPassword: aPassword.
	cartManager addCart: (Cart acceptingItemsOf: priceCatalogue) forClient: aClientID.
	ownerForCart at: nextCartID put: aClientID.
	nextCartID := nextCartID + 1.
	
	^nextCartID - 1.
	
	! !
!ApiRest methodsFor: 'cart' stamp: 'AM 12/1/2020 16:18:18' prior: 50881790!
createCartFor: aClientID withPassword: aPassword
	
	clientPasswordValidator authenticate: aClientID withPassword: aPassword.
	cartManager addCart: (Cart acceptingItemsOf: priceCatalogue) forClient: aClientID.
	
	^nextCartID - 1.
	
	! !
!ApiRest methodsFor: 'cart' stamp: 'AM 12/1/2020 16:18:59' prior: 50881803!
createCartFor: aClientID withPassword: aPassword
	
	clientPasswordValidator authenticate: aClientID withPassword: aPassword.
	^cartManager addCart: (Cart acceptingItemsOf: priceCatalogue) forClient: aClientID.
	
	
	
	! !
!CartManager methodsFor: 'adding' stamp: 'AM 12/1/2020 16:19:51' prior: 50881702!
addCart: aCart forClient: aClientID

	| cartID |
	
	cartID := nextCartID.
	nextCartID := nextCartID + 1.
	activeCarts at: nextCartID put: aClientID->aCart.
	
	^cartID.
	! !
!CartManager methodsFor: 'adding' stamp: 'AM 12/1/2020 16:20:06' prior: 50881823!
addCart: aCart forClient: aClientID

	| cartID |
	
	cartID := nextCartID.
	nextCartID := nextCartID + 1
	.
	activeCarts at: cartID put: aClientID->aCart.
	^cartID.
	! !
!CartManager methodsFor: 'adding' stamp: 'AM 12/1/2020 16:20:11' prior: 50881831!
addCart: aCart forClient: aClientID

	| cartID |
	
	cartID := nextCartID.
	nextCartID := nextCartID + 1.
	
	activeCarts at: cartID put: aClientID->aCart.
	^cartID.
	! !
!ApiRest methodsFor: 'initialization' stamp: 'AM 12/1/2020 16:20:56' prior: 50881601!
initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator 
	
	priceCatalogue := aPriceCatalogue.
	merchantProcessor := aMerchantProcessor.
	salesBook := Dictionary new.
	cartManager := CartManager new.
	clientPasswordValidator := aClientPasswordValidator.! !
!ApiRest methodsFor: 'cart' stamp: 'AM 12/1/2020 16:21:40' prior: 50879822!
addToCart: aCartID item: anItemID quantity: aQuantity

	cartManager addToCart: aCartID item: anItemID quantity: aQuantity.
	
	! !
!ApiRest methodsFor: 'check out' stamp: 'AM 12/1/2020 16:24:52' prior: 50881479!
checkOutCart: aCartID charging: aCreditCard 
	
	| cashier cartOwner clientSalesBook cartToCheckOut |
	
	cartToCheckOut := cartManager cartWithID: aCartID.
	cartOwner := cartManager ownerIDForCart: aCartID.
	clientSalesBook := salesBook at: cartOwner ifAbsent: [salesBook at: cartOwner put: OrderedCollection new].
	
	cashier := Cashier toCheckout: cartManager  charging: aCreditCard throught: merchantProcessor on: (Date today) registeringOn: clientSalesBook.
	
	^cashier checkOut.
	 ! !
!ApiRest methodsFor: 'check out' stamp: 'AM 12/1/2020 16:25:06' prior: 50881867!
checkOutCart: aCartID charging: aCreditCard 
	
	| cashier cartOwner clientSalesBook cartToCheckOut |
	
	cartToCheckOut := cartManager cartWithID: aCartID.
	cartOwner := cartManager ownerIDForCart: aCartID.
	clientSalesBook := salesBook at: cartOwner ifAbsent: [salesBook at: cartOwner put: OrderedCollection new].
	
	cashier := Cashier toCheckout: cartToCheckOut charging: aCreditCard throught: merchantProcessor on: (Date today) registeringOn: clientSalesBook.
	
	^cashier checkOut.
	 ! !
!ApiRest methodsFor: 'check out' stamp: 'AM 12/1/2020 16:25:09' prior: 50881885!
checkOutCart: aCartID charging: aCreditCard 
	
	| cashier cartOwner clientSalesBook cartToCheckOut |
	
	cartToCheckOut := cartManager cartWithID: aCartID.
	cartOwner := cartManager ownerIDForCart: aCartID.
	clientSalesBook := salesBook at: cartOwner ifAbsent: [salesBook at: cartOwner put: OrderedCollection new].
	
	cashier := Cashier toCheckout: cartToCheckOut charging: aCreditCard throught: merchantProcessor on: (Date today) registeringOn: clientSalesBook.
	^cashier checkOut.
	 ! !
!CartManager methodsFor: 'accessing' stamp: 'AM 12/1/2020 16:26:30'!
listCart: aCartID

	activeCarts at: 	aCartID value.! !
!CartManager methodsFor: 'accessing' stamp: 'AM 12/1/2020 16:27:08' prior: 50881921!
listCart: aCartID
	
	| cartToList |
	
	cartToList := activeCarts at: 	aCartID value.! !
!CartManager methodsFor: 'accessing' stamp: 'AM 12/1/2020 16:27:24' prior: 50881926!
listCart: aCartID
	
	| cartToList |
	
	cartToList := activeCarts at: 	aCartID value.
	
	! !
!CartManager methodsFor: 'accessing' stamp: 'AM 12/1/2020 16:27:49' prior: 50881932!
listCart: aCartID
	
	| cartToList |
	
	cartToList := activeCarts at: 	aCartID value.
	
	^cartToList items.! !
!CartManager methodsFor: 'testing' stamp: 'AM 12/1/2020 16:29:10'!
hasNoActiveCarts
	
	^activeCarts isEmpty.! !
!ApiRest methodsFor: 'cart' stamp: 'AM 12/1/2020 16:29:21' prior: 50880280!
hasNoActiveCarts
	
	^cartManager hasNoActiveCarts.! !
!ApiRest methodsFor: 'cart' stamp: 'AM 12/1/2020 16:29:45' prior: 50881384!
listCart: aCartId
	
	^cartManager listCart: aCartId.! !

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 12/1/2020 16:30:12'!
ERROR!

!testRun: #ApiRestTest #test02itemIsAddedToCartCorrectly stamp: 'AM 12/1/2020 16:30:12'!
ERROR!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 12/1/2020 16:30:12'!
PASSED!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 12/1/2020 16:30:12'!
ERROR!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 12/1/2020 16:30:19'!
ERROR!
!CartManager methodsFor: 'initialization' stamp: 'AM 12/1/2020 16:30:39' prior: 50881681 overrides: 16896425!
initialize
	
	"Keys son clientID, podemos obtener client id para carrito, value carrito"
	activeCarts := Dictionary new.
	cartLastActionTimestamp := Dictionary new.
	salesBook := Dictionary new.
	nextCartID := 0.! !
!CartManager methodsFor: 'initialization' stamp: 'AM 12/1/2020 16:30:44' prior: 50881974 overrides: 16896425!
initialize
	
	activeCarts := Dictionary new.
	cartLastActionTimestamp := Dictionary new.
	salesBook := Dictionary new.
	nextCartID := 0.! !

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 12/1/2020 16:30:48'!
ERROR!

!testRun: #ApiRestTest #test02itemIsAddedToCartCorrectly stamp: 'AM 12/1/2020 16:30:48'!
ERROR!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 12/1/2020 16:30:48'!
PASSED!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 12/1/2020 16:30:48'!
ERROR!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 12/1/2020 16:30:51'!
ERROR!
!CartManager methodsFor: 'accessing' stamp: 'AM 12/1/2020 16:31:22' prior: 50881728!
ownerIDForCart: aCartID

	^(activeCarts at: aCartID) key.! !
!CartManager methodsFor: 'accessing' stamp: 'AM 12/1/2020 16:31:32' prior: 50881938!
listCart: aCartID
	
	| cartToList |
	
	cartToList := (activeCarts at: 	aCartID) value.
	
	^cartToList items.! !
!CartManager methodsFor: 'accessing' stamp: 'AM 12/1/2020 16:31:43' prior: 50881724!
cartWithID: aCartID

	^(activeCarts at: aCartID) value.! !

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 12/1/2020 16:31:57'!
PASSED!

!testRun: #ApiRestTest #test02itemIsAddedToCartCorrectly stamp: 'AM 12/1/2020 16:31:57'!
ERROR!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 12/1/2020 16:31:57'!
PASSED!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 12/1/2020 16:31:57'!
ERROR!

!testRun: #ApiRestTest #test02itemIsAddedToCartCorrectly stamp: 'AM 12/1/2020 16:32:00'!
ERROR!
!CartManager methodsFor: 'adding' stamp: 'AM 12/1/2020 16:32:18' prior: 50881772!
addToCart: aCartID item: anItem quantity: aQuantity

	| cart |
	
	cart := (activeCarts at: aCartID ifAbsent: []) value.
	cart add: anItem of: aQuantity.! !

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 12/1/2020 16:32:26'!
PASSED!

!testRun: #ApiRestTest #test02itemIsAddedToCartCorrectly stamp: 'AM 12/1/2020 16:32:26'!
ERROR!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 12/1/2020 16:32:26'!
PASSED!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 12/1/2020 16:32:26'!
ERROR!

!testRun: #ApiRestTest #test02itemIsAddedToCartCorrectly stamp: 'AM 12/1/2020 16:32:28'!
ERROR!

!testRun: #ApiRestTest #test02itemIsAddedToCartCorrectly stamp: 'AM 12/1/2020 16:33:01'!
ERROR!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 12/1/2020 16:33:09'!
PASSED!

!testRun: #ApiRestTest #test02itemIsAddedToCartCorrectly stamp: 'AM 12/1/2020 16:33:09'!
ERROR!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 12/1/2020 16:33:09'!
PASSED!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 12/1/2020 16:33:09'!
ERROR!

!testRun: #ApiRestTest #test02itemIsAddedToCartCorrectly stamp: 'AM 12/1/2020 16:33:10'!
ERROR!
!CartManager methodsFor: 'adding' stamp: 'AM 12/1/2020 16:34:12' prior: 50882040!
addToCart: aCartID item: anItemID quantity: aQuantity

	| cart |
	
	cart := (activeCarts at: aCartID ifAbsent: []) value.
	cart add: aQuantity of: anItemID.! !

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 12/1/2020 16:34:17'!
PASSED!

!testRun: #ApiRestTest #test02itemIsAddedToCartCorrectly stamp: 'AM 12/1/2020 16:34:17'!
PASSED!

!testRun: #ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 12/1/2020 16:34:17'!
PASSED!

!testRun: #ApiRestTest #test04checksOutCorrectly stamp: 'AM 12/1/2020 16:34:17'!
PASSED!
!ApiRestTest methodsFor: 'cartTests' stamp: 'AM 12/1/2020 16:35:52'!
test03itemIsAddedToCartCorrectly

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	
	expected := OrderedCollection with: testObjectsFactory itemSellByTheStore.
	
	self assert: expected equals: (api listCart: cartID).! !

!methodRemoval: ApiRestTest #test02itemIsAddedToCartCorrectly stamp: 'AM 12/1/2020 16:35:52'!
test02itemIsAddedToCartCorrectly

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	
	expected := OrderedCollection with: testObjectsFactory itemSellByTheStore.
	
	self assert: expected equals: (api listCart: cartID).!
!ApiRestTest methodsFor: 'cartTests' stamp: 'AM 12/1/2020 16:38:36'!
test02cantAddItemsToNonExistingCart

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	self 
		should:[api addToCart: 1 item: (testObjectsFactory itemSellByTheStore) quantity: 1]
		raise: Error 
		withMessageText: CartManager cartDoesntExistErrorDescription.
	! !
!ApiRestTest methodsFor: 'cartTests' stamp: 'AM 12/1/2020 16:39:13' prior: 50882137!
test02cantAddItemsToNonExistingCart

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	self 
		should:[api addToCart: 1 item: (testObjectsFactory itemSellByTheStore) quantity: 1]
		raise: Error 
		withMessageText: CartManager cartDoesntExistErrorDescription.
		
	self assert: (api hasNoActiveCarts).
	! !
!CartManager class methodsFor: 'no messages' stamp: 'AM 12/1/2020 16:40:08'!
cartDoesntExistErrorDescription

	^'There is no cart with provided ID'! !
!CartManager class methodsFor: 'as yet unclassified' stamp: 'AM 12/1/2020 16:40:10' prior: 50882166!
cartDoesntExistErrorDescription

	^'There is no cart with provided ID'.! !
!CartManager methodsFor: 'error signaling' stamp: 'AM 12/1/2020 16:41:23'!
signalNonExistentCart! !
!CartManager methodsFor: 'error signaling' stamp: 'AM 12/1/2020 16:41:35' prior: 50882177!
signalNonExistentCart

	self error: self class cartDoesntExistErrorDescription.! !
!CartManager methodsFor: 'adding' stamp: 'AM 12/1/2020 16:42:08' prior: 50882082!
addToCart: aCartID item: anItemID quantity: aQuantity

	| cart |
	
	cart := (activeCarts at: aCartID ifAbsent: [self signalNonExistentCart]) value.
	cart add: aQuantity of: anItemID.! !

!testRun: #ApiRestTest #test02cantAddItemsToNonExistingCart stamp: 'AM 12/1/2020 16:42:26'!
PASSED!
!CartManager methodsFor: 'accessing' stamp: 'AM 12/1/2020 16:43:00' prior: 50882020!
cartWithID: aCartID

	^(activeCarts at: aCartID ifAbsent: [self signalNonExistentCart]) value.! !
!ApiRestTest methodsFor: 'cartManagementTests' stamp: 'AM 12/1/2020 16:44:57'!
test03cantListItemsOfNonExistingCart

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	self 
		should:[api listCart: 1]
		raise: Error 
		withMessageText: CartManager cartDoesntExistErrorDescription.
		
	self assert: (api hasNoActiveCarts).
	! !
!ApiRestTest methodsFor: 'cartManagementTests' stamp: 'AM 12/1/2020 16:45:04' prior: 50882205!
test03cantListItemsOfNonExistingCart

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	self 
		should:[api listCart: 1]
		raise: Error 
		withMessageText: CartManager cartDoesntExistErrorDescription.
	
	! !

!testRun: #ApiRestTest #test03cantListItemsOfNonExistingCart stamp: 'AM 12/1/2020 16:45:09'!
FAILURE!

!testRun: #ApiRestTest #test03cantListItemsOfNonExistingCart stamp: 'AM 12/1/2020 16:45:09'!
FAILURE!
!CartManager methodsFor: 'accessing' stamp: 'AM 12/1/2020 16:46:06' prior: 50882199!
cartWithID: aCartID
	
	^(activeCarts at: aCartID ifAbsent: [self signalNonExistentCart]) value.! !
!CartManager methodsFor: 'accessing' stamp: 'AM 12/1/2020 16:47:06' prior: 50882013!
listCart: aCartID
	
	| cartToList |
	
	cartToList := (self cartWithID: aCartID) value.
	
	^cartToList items.! !
!CartManager methodsFor: 'accessing' stamp: 'AM 12/1/2020 16:47:31' prior: 50882008!
ownerIDForCart: aCartID

	^(self cartWithID: aCartID) key.! !
!CartManager methodsFor: 'accessing' stamp: 'AM 12/1/2020 16:10:00' prior: 50882251!
ownerIDForCart: aCartID

	activeCarts at: aCartID key.! !
!CartManager methodsFor: 'accessing' stamp: 'AM 12/1/2020 16:48:09' prior: 50882244!
listCart: aCartID
	
	| cartToList |
	
	cartToList := self cartWithID: aCartID.
	
	^cartToList items.! !

!testRun: #ApiRestTest #test03cantListItemsOfNonExistingCart stamp: 'AM 12/1/2020 16:48:19'!
PASSED!
!CartManager methodsFor: 'accessing' stamp: 'AM 12/1/2020 16:48:45' prior: 50882256!
ownerIDForCart: aCartID

	^activeCarts at: aCartID key.! !
!CartManager methodsFor: 'accessing' stamp: 'AM 12/1/2020 16:49:16' prior: 50882271!
ownerIDForCart: aCartID

	^(activeCarts at: aCartID ifAbsent: [self signalNonExistentCart]) key.! !
!ApiRestTest methodsFor: 'cartManagementTests' stamp: 'AM 12/1/2020 16:50:23'!
test04cantCheckOutNonExistingCart

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	self 
		should:[api checkOutCart: 1 charging: testObjectsFactory notExpiredCreditCard]
		raise: Error 
		withMessageText: CartManager cartDoesntExistErrorDescription.
	
	! !

!testRun: #ApiRestTest #test04cantCheckOutNonExistingCart stamp: 'AM 12/1/2020 16:50:30'!
PASSED!
!ApiRestTest methodsFor: 'cartManagementTests' stamp: 'AM 12/1/2020 16:50:41'!
test05itemIsAddedToCartCorrectly

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	
	expected := OrderedCollection with: testObjectsFactory itemSellByTheStore.
	
	self assert: expected equals: (api listCart: cartID).! !

!methodRemoval: ApiRestTest #test03itemIsAddedToCartCorrectly stamp: 'AM 12/1/2020 16:50:41'!
test03itemIsAddedToCartCorrectly

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	
	expected := OrderedCollection with: testObjectsFactory itemSellByTheStore.
	
	self assert: expected equals: (api listCart: cartID).!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 12/1/2020 16:51:00'!
PASSED!

!testRun: #ApiRestTest #test02cantAddItemsToNonExistingCart stamp: 'AM 12/1/2020 16:51:00'!
PASSED!

!testRun: #ApiRestTest #test03cantListItemsOfNonExistingCart stamp: 'AM 12/1/2020 16:51:00'!
PASSED!

!testRun: #ApiRestTest #test04cantCheckOutNonExistingCart stamp: 'AM 12/1/2020 16:51:00'!
PASSED!

!testRun: #ApiRestTest #test05itemIsAddedToCartCorrectly stamp: 'AM 12/1/2020 16:51:00'!
PASSED!
!ApiRestTest methodsFor: 'timeKeepingTests' stamp: 'AM 12/1/2020 16:57:54'!
test01cantCheckOutCart30MinutesAfterCreation

	! !
!ApiRestTest methodsFor: 'timeKeepingTests' stamp: 'AM 12/1/2020 16:58:19' prior: 50882349!
test01cantCheckOutCart30MinutesAfterCreation

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	! !

!classDefinition: #ApiRestTest category: 'TusLibros' stamp: 'AM 12/1/2020 16:58:55'!
TestCase subclass: #ApiRestTest
	instanceVariableNames: 'testObjectsFactory debitBehavior clientValidationBehavior simulatedTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApiRestTest methodsFor: 'clock protocol' stamp: 'AM 12/1/2020 16:58:53'!
now
	
	^simulatedTime.! !
!ApiRestTest methodsFor: 'clock protocol' stamp: 'AM 12/1/2020 17:00:45'!
leap30MinutesIntoTheFuture
	
	simulatedTime.! !

DateAndTime now.!
!ApiRestTest methodsFor: 'set up' stamp: 'AM 12/1/2020 17:01:13' prior: 50880057 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	clientValidationBehavior := [:aClientID : aPassword | ].
	simulatedTime := DateAndTime now.! !

30 minutes!
!ApiRestTest methodsFor: 'clock protocol' stamp: 'AM 12/1/2020 17:02:17' prior: 50882378!
leap30MinutesIntoTheFuture
	
	simulatedTime := simulatedTime + 30 minutes.! !
!ApiRestTest methodsFor: 'timeKeepingTests' stamp: 'AM 12/1/2020 17:02:48' prior: 50882354!
test01cantCheckOutCart30MinutesAfterCreation

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	self leap30MinutesIntoTheFuture.
	
	! !
!ApiRestTest methodsFor: 'timeKeepingTests' stamp: 'AM 12/1/2020 17:02:51' prior: 50882400!
test01cantCheckOutCart30MinutesAfterCreation

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	self leap30MinutesIntoTheFuture.
	
	
	! !
!ApiRest methodsFor: 'initialization' stamp: 'AM 12/1/2020 17:04:12'!
initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator keepingTimeWith: aClock  
	
	priceCatalogue := aPriceCatalogue.
	merchantProcessor := aMerchantProcessor.
	salesBook := Dictionary new.
	cartManager := CartManager new.
	clientPasswordValidator := aClientPasswordValidator.! !
!ApiRest class methodsFor: 'as yet unclassified' stamp: 'AM 12/1/2020 17:04:12' prior: 50880595!
withCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator
	
	^self new initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator keepingTimeWith: aClock.! !

!methodRemoval: ApiRest #initializeWithCatalogue:salesThrough:validatingClientsThrough: stamp: 'AM 12/1/2020 17:04:12'!
initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator 
	
	priceCatalogue := aPriceCatalogue.
	merchantProcessor := aMerchantProcessor.
	salesBook := Dictionary new.
	cartManager := CartManager new.
	clientPasswordValidator := aClientPasswordValidator.!
!ApiRest class methodsFor: 'instance creation' stamp: 'AM 12/1/2020 17:05:54'!
withCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator keepingTimeWith: aClock 
	
	^self new initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator keepingTimeWith: aClock.! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/1/2020 17:05:54' prior: 50882219!
test03cantListItemsOfNonExistingCart

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: aClock.
	
	self 
		should:[api listCart: 1]
		raise: Error 
		withMessageText: CartManager cartDoesntExistErrorDescription.
	
	! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/1/2020 17:05:54' prior: 50881345!
test04checksOutCorrectly

	| api cartID expected|
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: aClock.
	cartID := api createCartFor: 'client' withPassword: 'password'.
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	expected := OrderedCollection with: (api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard).
	
	self assert: expected equals: (api listPurchasesFor: 'client'). ! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/1/2020 17:05:54' prior: 50882151!
test02cantAddItemsToNonExistingCart

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: aClock.
	
	self 
		should:[api addToCart: 1 item: (testObjectsFactory itemSellByTheStore) quantity: 1]
		raise: Error 
		withMessageText: CartManager cartDoesntExistErrorDescription.
		
	self assert: (api hasNoActiveCarts).
	! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/1/2020 17:05:54' prior: 50881405!
test01newCartShouldBeEmpty

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: aClock.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	expected := OrderedCollection new.
	
	self assert: expected equals: (api listCart: cartID).! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/1/2020 17:05:54' prior: 50882299!
test05itemIsAddedToCartCorrectly

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: aClock.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	
	expected := OrderedCollection with: testObjectsFactory itemSellByTheStore.
	
	self assert: expected equals: (api listCart: cartID).! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/1/2020 17:05:54' prior: 50882282!
test04cantCheckOutNonExistingCart

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: aClock.
	
	self 
		should:[api checkOutCart: 1 charging: testObjectsFactory notExpiredCreditCard]
		raise: Error 
		withMessageText: CartManager cartDoesntExistErrorDescription.
	
	! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/1/2020 17:05:54' prior: 50880250!
test03cantCreateCartForInvalidClientIDPasswordCombination

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: aClock.
	
	clientValidationBehavior := [:client :password | self error: ApiRest invalidIDOrPasswordErrorDescription].
	
	self
		should:[api createCartFor: 'client' withPassword: 'password']
		raise: Error
		withMessageText: ApiRest invalidIDOrPasswordErrorDescription.
		
	self assert: api hasNoActiveCarts.! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/1/2020 17:05:55' prior: 50882412!
test01cantCheckOutCart30MinutesAfterCreation

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: aClock.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	self leap30MinutesIntoTheFuture.
	
	
	! !

!methodRemoval: ApiRest class #withCatalogue:salesThrough:validatingClientsThrough: stamp: 'AM 12/1/2020 17:05:55'!
withCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator
	
	^self new initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator keepingTimeWith: aClock.!

!methodRemoval: ApiRest class #withCatalogue:salesThrough: stamp: 'AM 12/1/2020 17:06:12'!
withCatalogue: aPriceCatalogue salesThrough: aMerchanProcessor
	
	^self new initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchanProcessor!
!ApiRestTest methodsFor: 'checkOutTests' stamp: 'AM 12/1/2020 17:06:34' prior: 50882575!
test03cantCreateCartForInvalidClientIDPasswordCombination

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	clientValidationBehavior := [:client :password | self error: ApiRest invalidIDOrPasswordErrorDescription].
	
	self
		should:[api createCartFor: 'client' withPassword: 'password']
		raise: Error
		withMessageText: ApiRest invalidIDOrPasswordErrorDescription.
		
	self assert: api hasNoActiveCarts.! !
!ApiRestTest methodsFor: 'checkOutTests' stamp: 'AM 12/1/2020 17:06:38' prior: 50882490!
test04checksOutCorrectly

	| api cartID expected|
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	cartID := api createCartFor: 'client' withPassword: 'password'.
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	expected := OrderedCollection with: (api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard).
	
	self assert: expected equals: (api listPurchasesFor: 'client'). ! !
!ApiRestTest methodsFor: 'cartManagementTests' stamp: 'AM 12/1/2020 17:06:46' prior: 50882526!
test01newCartShouldBeEmpty

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	expected := OrderedCollection new.
	
	self assert: expected equals: (api listCart: cartID).! !
!ApiRestTest methodsFor: 'cartManagementTests' stamp: 'AM 12/1/2020 17:06:51' prior: 50882510!
test02cantAddItemsToNonExistingCart

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	self 
		should:[api addToCart: 1 item: (testObjectsFactory itemSellByTheStore) quantity: 1]
		raise: Error 
		withMessageText: CartManager cartDoesntExistErrorDescription.
		
	self assert: (api hasNoActiveCarts).
	! !
!ApiRestTest methodsFor: 'cartManagementTests' stamp: 'AM 12/1/2020 17:06:55' prior: 50882477!
test03cantListItemsOfNonExistingCart

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	self 
		should:[api listCart: 1]
		raise: Error 
		withMessageText: CartManager cartDoesntExistErrorDescription.
	
	! !
!ApiRestTest methodsFor: 'cartManagementTests' stamp: 'AM 12/1/2020 17:06:59' prior: 50882560!
test04cantCheckOutNonExistingCart

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	self 
		should:[api checkOutCart: 1 charging: testObjectsFactory notExpiredCreditCard]
		raise: Error 
		withMessageText: CartManager cartDoesntExistErrorDescription.
	
	! !
!ApiRestTest methodsFor: 'cartManagementTests' stamp: 'AM 12/1/2020 17:07:03' prior: 50882541!
test05itemIsAddedToCartCorrectly

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	
	expected := OrderedCollection with: testObjectsFactory itemSellByTheStore.
	
	self assert: expected equals: (api listCart: cartID).! !

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 12/1/2020 17:07:06'!
PASSED!

!testRun: #ApiRestTest #test02cantAddItemsToNonExistingCart stamp: 'AM 12/1/2020 17:07:06'!
PASSED!

!testRun: #ApiRestTest #test03cantListItemsOfNonExistingCart stamp: 'AM 12/1/2020 17:07:06'!
PASSED!

!testRun: #ApiRestTest #test04cantCheckOutNonExistingCart stamp: 'AM 12/1/2020 17:07:06'!
PASSED!

!testRun: #ApiRestTest #test05itemIsAddedToCartCorrectly stamp: 'AM 12/1/2020 17:07:06'!
PASSED!
!ApiRestTest methodsFor: 'timeKeepingTests' stamp: 'AM 12/1/2020 17:07:15' prior: 50882594!
test01cantCheckOutCart30MinutesAfterCreation

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	self leap30MinutesIntoTheFuture.
	
	
	! !
!ApiRestTest methodsFor: 'timeKeepingTests' stamp: 'AM 12/1/2020 17:08:38' prior: 50882759!
test01cantCheckOutCart30MinutesAfterCreation

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	self leap30MinutesIntoTheFuture.
	
	self
		should: [api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withMessageText: CartManager cartExpiredErrorDescription.
	
	
	! !
!ApiRestTest methodsFor: 'timeKeepingTests' stamp: 'AM 12/1/2020 17:09:59' prior: 50882772!
test01cantCheckOutCart30MinutesAfterCreation

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	self leap30MinutesIntoTheFuture.
	
	self
		should: [api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withMessageText: CartManager cartExpiredErrorDescription.
	
	self assert: (api listPurchasesFor: 'client') isEmpty.
	
	! !

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterCreation stamp: 'AM 12/1/2020 17:10:07'!
ERROR!

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterCreation stamp: 'AM 12/1/2020 17:10:07'!
ERROR!
!CartManager class methodsFor: 'error descriptions' stamp: 'AM 12/1/2020 17:10:21'!
cartExpiredErrorDescription
	self shouldBeImplemented.! !
!CartManager class methodsFor: 'error descriptions' stamp: 'AM 12/1/2020 17:10:32' prior: 50882817!
cartExpiredErrorDescription
	
	^'Cart is expired'! !

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterCreation stamp: 'AM 12/1/2020 17:10:34'!
FAILURE!
!ApiRestTest methodsFor: 'timeKeepingTests' stamp: 'AM 12/1/2020 17:11:15' prior: 50882790!
test01cantCheckOutCart30MinutesAfterCreation

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	api addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1.
	
	self leap30MinutesIntoTheFuture.
	
	self
		should: [api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withMessageText: CartManager cartExpiredErrorDescription.
	
	self assert: (api listPurchasesFor: 'client') isEmpty.
	
	! !

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterCreation stamp: 'AM 12/1/2020 17:11:21'!
FAILURE!

!classDefinition: #ApiRest category: 'TusLibros' stamp: 'AM 12/1/2020 17:13:35'!
Object subclass: #ApiRest
	instanceVariableNames: 'priceCatalogue activeCarts nextCartID merchantProcessor clientPasswordValidator salesBook ownerForCart cartManager clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApiRest methodsFor: 'initialization' stamp: 'AM 12/1/2020 17:13:33' prior: 50882424!
initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator keepingTimeWith: aClock  
	
	priceCatalogue := aPriceCatalogue.
	merchantProcessor := aMerchantProcessor.
	salesBook := Dictionary new.
	cartManager := CartManager new.
	clientPasswordValidator := aClientPasswordValidator.
	clock := aClock.! !
!CartManager methodsFor: 'adding' stamp: 'AM 12/1/2020 17:14:55'!
addCart: aCart forClient: aClientID atTime: aDateTime 

	| cartID |
	
	cartID := nextCartID.
	nextCartID := nextCartID + 1.
	
	activeCarts at: cartID put: aClientID->aCart.
	^cartID.
	! !
!ApiRest methodsFor: 'as yet unclassified' stamp: 'AM 12/1/2020 17:14:55' prior: 50881813!
createCartFor: aClientID withPassword: aPassword
	
	clientPasswordValidator authenticate: aClientID withPassword: aPassword.
	^cartManager addCart: (Cart acceptingItemsOf: priceCatalogue) forClient: aClientID atTime: (clock now).
	
	
	
	! !

!methodRemoval: CartManager #addCart:forClient: stamp: 'AM 12/1/2020 17:14:55'!
addCart: aCart forClient: aClientID

	| cartID |
	
	cartID := nextCartID.
	nextCartID := nextCartID + 1.
	
	activeCarts at: cartID put: aClientID->aCart.
	^cartID.
	!
!CartManager methodsFor: 'adding' stamp: 'AM 12/1/2020 17:15:53' prior: 50882880!
addCart: aCart forClient: aClientID atTime: aDateTime 

	| cartID |
	
	cartID := nextCartID.
	nextCartID := nextCartID + 1.
	
	cartLastActionTimestamp at: cartID put: aDateTime.
	activeCarts at: cartID put: aClientID->aCart.
	^cartID.
	! !
!ApiRest methodsFor: 'check out' stamp: 'AM 12/1/2020 17:16:51' prior: 50881903!
checkOutCart: aCartID charging: aCreditCard 
	
	| cashier cartOwner clientSalesBook cartToCheckOut |
	
	cartToCheckOut := cartManager cartWithID: aCartID.
	cartOwner := cartManager ownerIDForCart: aCartID.
	clientSalesBook := salesBook at: cartOwner ifAbsent: [salesBook at: cartOwner put: OrderedCollection new].
	
	cashier := Cashier toCheckout: cartToCheckOut charging: aCreditCard throught: merchantProcessor on: (clock now) registeringOn: clientSalesBook.
	^cashier checkOut.
	 ! !
!CartManager methodsFor: 'accessing' stamp: 'AM 12/1/2020 17:18:34' prior: 50882238!
cartWithID: aCartID
	
	self assertIsNotExpired: aCartID.
	^(activeCarts at: aCartID ifAbsent: [self signalNonExistentCart]) value.! !
!CartManager methodsFor: 'assertions' stamp: 'AM 12/1/2020 17:20:15'!
assertIsNotExpired: aCartID

	(cartLastActionTimestamp at: aCartID)! !
!CartManager methodsFor: 'accessing' stamp: 'AM 12/1/2020 17:21:39' prior: 50882936!
cartWithID: aCartID
	
	| cart |
	
	 cart := (activeCarts at: aCartID ifAbsent: [self signalNonExistentCart]) value.
	 self assertIsNotExpired: aCartID.
	^cart.! !
!CartManager methodsFor: 'accessing' stamp: 'AM 12/1/2020 17:21:44' prior: 50882948!
cartWithID: aCartID
	
	| cart |
	
	cart := (activeCarts at: aCartID ifAbsent: [self signalNonExistentCart]) value.
	self assertIsNotExpired: aCartID.
	^cart.! !
!CartManager methodsFor: 'assertions' stamp: 'AM 12/1/2020 17:23:31' prior: 50882943!
assertIsNotExpired: aCartID

	(cartLastActionTimestamp at: aCartID - 30 minutes)! !
!CartManager class methodsFor: 'instance creation' stamp: 'AM 12/1/2020 17:24:16'!
for: anApi

	^self new initializeFor: anApi.! !

!classDefinition: #CartManager category: 'TusLibros' stamp: 'AM 12/1/2020 17:25:03'!
Object subclass: #CartManager
	instanceVariableNames: 'activeCarts cartLastActionTimestamp salesBook nextCartID api'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartManager methodsFor: 'initialization' stamp: 'AM 12/1/2020 17:25:01'!
initializeFor: anApi
	
	api := anApi.
	activeCarts := Dictionary new.
	cartLastActionTimestamp := Dictionary new.
	salesBook := Dictionary new.
	nextCartID := 0.! !

!methodRemoval: CartManager #initialize stamp: 'AM 12/1/2020 17:25:17'!
initialize
	
	activeCarts := Dictionary new.
	cartLastActionTimestamp := Dictionary new.
	salesBook := Dictionary new.
	nextCartID := 0.!
!CartManager methodsFor: 'assertions' stamp: 'AM 12/1/2020 17:30:35' prior: 50882964!
assertIsNotExpired: aCartID

	((cartLastActionTimestamp at: aCartID) > (api timeNow - 30)) ifFalse: [ activeCarts removeKey: aCartID.
														     cartLastActionTimestamp removeKey: aCartID.
															self signalCartExpired.]! !
!CartManager methodsFor: 'assertions' stamp: 'AM 12/1/2020 17:31:24'!
removeIfExpiredAndRaiseExeption: aCartID

	((cartLastActionTimestamp at: aCartID) > (api timeNow - 30)) ifFalse: [ activeCarts removeKey: aCartID.
														     cartLastActionTimestamp removeKey: aCartID.
															self signalCartExpired.]! !
!CartManager methodsFor: 'as yet unclassified' stamp: 'AM 12/1/2020 17:31:24' prior: 50882956!
cartWithID: aCartID
	
	| cart |
	
	cart := (activeCarts at: aCartID ifAbsent: [self signalNonExistentCart]) value.
	self removeIfExpiredAndRaiseExeption: aCartID.
	^cart.! !

!methodRemoval: CartManager #assertIsNotExpired: stamp: 'AM 12/1/2020 17:31:24'!
assertIsNotExpired: aCartID

	((cartLastActionTimestamp at: aCartID) > (api timeNow - 30)) ifFalse: [ activeCarts removeKey: aCartID.
														     cartLastActionTimestamp removeKey: aCartID.
															self signalCartExpired.]!
!CartManager methodsFor: 'error signaling' stamp: 'AM 12/1/2020 17:32:15'!
signalCartExpired

	self error: self class expiredCartErrorDescription.! !
!CartManager methodsFor: 'error signaling' stamp: 'AM 12/1/2020 17:32:43' prior: 50883037!
signalCartExpired

	self error: self class cartExpiredErrorDescription.! !
!ApiRest methodsFor: 'time keeping protocol' stamp: 'AM 12/1/2020 17:33:14'!
timeNow
	
	^clock now.! !

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterCreation stamp: 'AM 12/1/2020 17:33:32'!
ERROR!

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterCreation stamp: 'AM 12/1/2020 17:33:32'!
ERROR!
!ApiRest methodsFor: 'initialization' stamp: 'AM 12/1/2020 17:34:01' prior: 50882866!
initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator keepingTimeWith: aClock  
	
	priceCatalogue := aPriceCatalogue.
	merchantProcessor := aMerchantProcessor.
	salesBook := Dictionary new.
	cartManager := CartManager new.
	clientPasswordValidator := aClientPasswordValidator.
	nextCartID := 0.
	clock := aClock.! !

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterCreation stamp: 'AM 12/1/2020 17:34:17'!
ERROR!

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterCreation stamp: 'AM 12/1/2020 17:34:17'!
ERROR!
!ApiRest methodsFor: 'initialization' stamp: 'AM 12/1/2020 17:34:59' prior: 50883059!
initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator keepingTimeWith: aClock  
	
	priceCatalogue := aPriceCatalogue.
	merchantProcessor := aMerchantProcessor.
	salesBook := Dictionary new.
	cartManager := CartManager new.
	clientPasswordValidator := aClientPasswordValidator.
	clock := aClock.! !

Object subclass: #ApiRest
	instanceVariableNames: 'priceCatalogue activeCarts merchantProcessor clientPasswordValidator salesBook ownerForCart cartManager clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #ApiRest
	instanceVariableNames: 'priceCatalogue activeCarts merchantProcessor clientPasswordValidator salesBook ownerForCart cartManager clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #ApiRest
	instanceVariableNames: 'priceCatalogue activeCarts nextCartID merchantProcessor clientPasswordValidator salesBook ownerForCart cartManager clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApiRest category: 'TusLibros' stamp: 'AM 12/1/2020 17:35:21'!
Object subclass: #ApiRest
	instanceVariableNames: 'priceCatalogue activeCarts nextCartID merchantProcessor clientPasswordValidator salesBook ownerForCart cartManager clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #ApiRest
	instanceVariableNames: 'priceCatalogue activeCarts merchantProcessor clientPasswordValidator salesBook ownerForCart cartManager clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #ApiRest
	instanceVariableNames: 'priceCatalogue activeCarts merchantProcessor clientPasswordValidator salesBook ownerForCart cartManager clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApiRest category: 'TusLibros' stamp: 'AM 12/1/2020 17:36:27'!
Object subclass: #ApiRest
	instanceVariableNames: 'priceCatalogue activeCarts merchantProcessor clientPasswordValidator salesBook ownerForCart cartManager clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterCreation stamp: 'AM 12/1/2020 17:36:42'!
ERROR!

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterCreation stamp: 'AM 12/1/2020 17:36:42'!
ERROR!
!ApiRest methodsFor: 'initialization' stamp: 'AM 12/1/2020 17:37:10' prior: 50883081!
initializeWithCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator keepingTimeWith: aClock  
	
	priceCatalogue := aPriceCatalogue.
	merchantProcessor := aMerchantProcessor.
	salesBook := Dictionary new.
	cartManager := CartManager for: self.
	clientPasswordValidator := aClientPasswordValidator.
	clock := aClock.! !
!CartManager methodsFor: 'adding' stamp: 'AM 12/1/2020 17:38:11' prior: 50882907!
addCart: aCart forClient: aClientID atTime: aDateTime 

	| cartID |
	
	cartID := nextCartID.
	nextCartID := nextCartID + 1.
	
	cartLastActionTimestamp at: cartID put: api timeNow.
	activeCarts at: cartID put: aClientID->aCart.
	^cartID.
	! !
!CartManager methodsFor: 'adding' stamp: 'AM 12/1/2020 17:38:21'!
addCart: aCart forClient: aClientID  

	| cartID |
	
	cartID := nextCartID.
	nextCartID := nextCartID + 1.
	
	cartLastActionTimestamp at: cartID put: api timeNow.
	activeCarts at: cartID put: aClientID->aCart.
	^cartID.
	! !
!ApiRest methodsFor: 'as yet unclassified' stamp: 'AM 12/1/2020 17:38:21' prior: 50882889!
createCartFor: aClientID withPassword: aPassword
	
	clientPasswordValidator authenticate: aClientID withPassword: aPassword.
	^cartManager addCart: (Cart acceptingItemsOf: priceCatalogue) forClient: aClientID .
	
	
	
	! !

!methodRemoval: CartManager #addCart:forClient:atTime: stamp: 'AM 12/1/2020 17:38:21'!
addCart: aCart forClient: aClientID atTime: aDateTime 

	| cartID |
	
	cartID := nextCartID.
	nextCartID := nextCartID + 1.
	
	cartLastActionTimestamp at: cartID put: api timeNow.
	activeCarts at: cartID put: aClientID->aCart.
	^cartID.
	!

self time now!

self timeNow!

cartLastActionTimestamp at: aCartID!

(api timeNow - 30)!

api timeNow!
!CartManager methodsFor: 'time keeping protocol' stamp: 'AM 12/1/2020 17:41:33' prior: 50883008!
removeIfExpiredAndRaiseExeption: aCartID

	((cartLastActionTimestamp at: aCartID) > ((api timeNow) - 30)) ifFalse: [ activeCarts removeKey: aCartID.
														     cartLastActionTimestamp removeKey: aCartID.
															self signalCartExpired.]! !
!CartManager methodsFor: 'time keeping protocol' stamp: 'AM 12/1/2020 17:42:18' prior: 50883218!
removeIfExpiredAndRaiseExeption: aCartID

	((cartLastActionTimestamp at: aCartID) > ((api timeNow) - 30 minutes)) ifFalse: [ activeCarts removeKey: aCartID.
														     cartLastActionTimestamp removeKey: aCartID.
															self signalCartExpired.]! !

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterCreation stamp: 'AM 12/1/2020 17:42:42'!
ERROR!

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterCreation stamp: 'AM 12/1/2020 17:42:42'!
ERROR!
!ApiRest methodsFor: 'as yet unclassified' stamp: 'AM 12/1/2020 17:43:44' prior: 50880872!
listPurchasesFor: aClientID

	^salesBook at: aClientID ifAbsent: [salesBook at: aClientID put: OrderedCollection new.].! !

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterCreation stamp: 'AM 12/1/2020 17:43:53'!
PASSED!
!ApiRestTest methodsFor: 'timeKeepingTests' stamp: 'AM 12/1/2020 17:45:15'!
test02cantListCart30MinutesAfterCreation

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	api addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1.
	
	self leap30MinutesIntoTheFuture.
	
	self
		should: [api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withMessageText: CartManager cartExpiredErrorDescription.
	
	self assert: (api listPurchasesFor: 'client') isEmpty.
	
	! !
!ApiRestTest methodsFor: 'clock protocol' stamp: 'AM 12/1/2020 17:46:02'!
leap15MinutesIntoTheFuture
	
	simulatedTime := simulatedTime + 15 minutes.! !
!ApiRestTest methodsFor: 'timeKeepingTests' stamp: 'AM 12/1/2020 17:46:26' prior: 50883257!
test02cantListCart30MinutesAfterCreation

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	api addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1.
	
	self leap30MinutesIntoTheFuture.
	
	self
		should: [api listCart: cartID]
		raise: Error
		withMessageText: CartManager cartExpiredErrorDescription.
	
	self assert: (api listPurchasesFor: 'client') isEmpty.
	
	! !
!ApiRestTest methodsFor: 'timeKeepingTests' stamp: 'AM 12/1/2020 17:48:38' prior: 50883285!
test02cantListCart30MinutesAfterCreation

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	api addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1.
	
	self leap30MinutesIntoTheFuture.
	
	self
		should: [api listCart: cartID]
		raise: Error
		withMessageText: CartManager cartExpiredErrorDescription.
	

	
	! !
!ApiRestTest methodsFor: 'timeKeepingTests' stamp: 'AM 12/1/2020 17:48:40' prior: 50883306!
test02cantListCart30MinutesAfterCreation

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	api addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1.
	
	self leap30MinutesIntoTheFuture.
	
	self
		should: [api listCart: cartID]
		raise: Error
		withMessageText: CartManager cartExpiredErrorDescription.

	
	! !
!ApiRestTest methodsFor: 'timeKeepingTests' stamp: 'AM 12/1/2020 17:48:58' prior: 50883325!
test02cantListCart30MinutesAfterCreation

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	self leap30MinutesIntoTheFuture.
	
	self
		should: [api listCart: cartID]
		raise: Error
		withMessageText: CartManager cartExpiredErrorDescription.

	
	! !

!testRun: #ApiRestTest #test02cantListCart30MinutesAfterCreation stamp: 'AM 12/1/2020 17:49:02'!
PASSED!
!ApiRestTest methodsFor: 'timeKeepingTests' stamp: 'AM 12/1/2020 17:55:21'!
test03addingItemsToCartResetsExpirationDeadline

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	self leap15MinutesIntoTheFuture.
	
	api addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1.
	self leap15MinutesIntoTheFuture.
	
	expected := OrderedCollection with: (testObjectsFactory itemSellByTheStore).	
	self assert: (api listCart: cartID) equals: expected.
	
	! !

!testRun: #ApiRestTest #test03addingItemsToCartResetsExpirationDeadline stamp: 'AM 12/1/2020 17:55:24'!
ERROR!

!testRun: #ApiRestTest #test03addingItemsToCartResetsExpirationDeadline stamp: 'AM 12/1/2020 17:55:24'!
ERROR!
!CartManager methodsFor: 'adding' stamp: 'AM 12/1/2020 17:56:10' prior: 50882187!
addToCart: aCartID item: anItemID quantity: aQuantity

	| cart |
	
	cart := (activeCarts at: aCartID ifAbsent: [self signalNonExistentCart]) value.
	cartLastActionTimestamp at: aCartID put: api timeNow.
	cart add: aQuantity of: anItemID.! !

!testRun: #ApiRestTest #test03addingItemsToCartResetsExpirationDeadline stamp: 'AM 12/1/2020 17:56:28'!
PASSED!
!ApiRestTest methodsFor: 'timeKeepingTests' stamp: 'AM 12/1/2020 17:57:04' prior: 50883363!
test03addingItemsToCartResetsExpirationDeadline

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	self leap15MinutesIntoTheFuture.
	
	api addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1.
	self leap15MinutesIntoTheFuture.
	
	expected := OrderedCollection with: (testObjectsFactory itemSellByTheStore).	
	self assert: (api listCart: cartID) equals: expected.
	
	! !
!ApiRestTest methodsFor: 'timeKeepingTests' stamp: 'AM 12/1/2020 17:57:38'!
test04listingCartResetsExpirationDeadline

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	self leap15MinutesIntoTheFuture.
	
	api addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1.
	self leap15MinutesIntoTheFuture.
	
	expected := OrderedCollection with: (testObjectsFactory itemSellByTheStore).	
	self assert: (api listCart: cartID) equals: expected.
	
	! !
!ApiRestTest methodsFor: 'timeKeepingTests' stamp: 'AM 12/1/2020 17:58:14' prior: 50883426!
test04listingCartResetsExpirationDeadline

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	self leap15MinutesIntoTheFuture.
	
	api listCart: cartID.
	self leap15MinutesIntoTheFuture.
	
	expected := OrderedCollection with: (testObjectsFactory itemSellByTheStore).	
	self assert: (api listCart: cartID) equals: expected.
	
	! !
!ApiRestTest methodsFor: 'timeKeepingTests' stamp: 'AM 12/1/2020 17:59:14'!
test04listeCartResetsExpirationDeadline

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	self leap15MinutesIntoTheFuture.
	
	api listCart: cartID.
	self leap15MinutesIntoTheFuture.
	
	expected := OrderedCollection with: (testObjectsFactory itemSellByTheStore).	
	self assert: (api listCart: cartID) equals: expected.
	
	! !
!ApiRestTest methodsFor: 'timeKeepingTests' stamp: 'AM 12/1/2020 17:59:20' prior: 50883466!
test04listeCartResetsExpirationDeadline

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	self leap15MinutesIntoTheFuture.
	
	api listCart: cartID.
	self leap15MinutesIntoTheFuture.
	
	expected := OrderedCollection new.
	self assert: (api listCart: cartID) equals: expected.
	
	! !

!methodRemoval: ApiRestTest #test04listeCartResetsExpirationDeadline stamp: 'AM 12/1/2020 17:59:38'!
test04listeCartResetsExpirationDeadline

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	self leap15MinutesIntoTheFuture.
	
	api listCart: cartID.
	self leap15MinutesIntoTheFuture.
	
	expected := OrderedCollection new.
	self assert: (api listCart: cartID) equals: expected.
	
	!

!testRun: #ApiRestTest #test04listingCartResetsExpirationDeadline stamp: 'AM 12/1/2020 17:59:46'!
ERROR!

!testRun: #ApiRestTest #test04listingCartResetsExpirationDeadline stamp: 'AM 12/1/2020 17:59:46'!
ERROR!
!ApiRestTest methodsFor: 'timeKeepingTests' stamp: 'AM 12/1/2020 17:59:55' prior: 50883447!
test04listingCartResetsExpirationDeadline

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	self leap15MinutesIntoTheFuture.
	
	api listCart: cartID.
	self leap15MinutesIntoTheFuture.
	
	expected := OrderedCollection new.	
	self assert: (api listCart: cartID) equals: expected.
	
	! !

!testRun: #ApiRestTest #test04listingCartResetsExpirationDeadline stamp: 'AM 12/1/2020 17:59:59'!
ERROR!

!testRun: #ApiRestTest #test04listingCartResetsExpirationDeadline stamp: 'AM 12/1/2020 17:59:59'!
ERROR!
!CartManager methodsFor: 'accessing' stamp: 'AM 12/1/2020 18:00:40' prior: 50882261!
listCart: aCartID
	
	| cartToList |
	
	cartToList := self cartWithID: aCartID.
	cartLastActionTimestamp at: aCartID put: api timeNow.
	
	^cartToList items.! !
!CartManager methodsFor: 'accessing' stamp: 'AM 12/1/2020 18:00:58'!
updateTimeFor: aCartID

	^ cartLastActionTimestamp at: aCartID put: api timeNow! !
!CartManager methodsFor: 'accessing' stamp: 'AM 12/1/2020 18:00:58' prior: 50883551!
listCart: aCartID
	
	| cartToList |
	
	cartToList := self cartWithID: aCartID.
	self updateTimeFor: aCartID.
	
	^cartToList items.! !
!CartManager methodsFor: 'adding' stamp: 'AM 12/1/2020 18:01:25' prior: 50883184!
addCart: aCart forClient: aClientID  

	| cartID |
	
	cartID := nextCartID.
	nextCartID := nextCartID + 1.
	
	self updateTimeFor: cartID.
	activeCarts at: cartID put: aClientID->aCart.
	^cartID.
	! !
!CartManager methodsFor: 'adding' stamp: 'AM 12/1/2020 18:01:46' prior: 50883391!
addToCart: aCartID item: anItemID quantity: aQuantity

	| cart |
	
	cart := (activeCarts at: aCartID ifAbsent: [self signalNonExistentCart]) value.
	self updateTimeFor: aCartID.
	cart add: aQuantity of: anItemID.! !
!CartManager methodsFor: 'time keeping protocol' stamp: 'AM 12/1/2020 18:01:55' prior: 50883559!
updateTimeFor: aCartID

	^ cartLastActionTimestamp at: aCartID put: api timeNow.! !

!testRun: #ApiRestTest #test04listingCartResetsExpirationDeadline stamp: 'AM 12/1/2020 18:02:17'!
PASSED!
!ApiRestTest methodsFor: 'timeKeepingTests' stamp: 'AM 12/1/2020 18:03:08'!
test04addingItemsToCartResetsExpirationDeadline

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	self leap15MinutesIntoTheFuture.
	
	api addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1.
	self leap15MinutesIntoTheFuture.
	
	expected := OrderedCollection with: (testObjectsFactory itemSellByTheStore).	
	self assert: (api listCart: cartID) equals: expected.
	
	! !

!methodRemoval: ApiRestTest #test03addingItemsToCartResetsExpirationDeadline stamp: 'AM 12/1/2020 18:03:08'!
test03addingItemsToCartResetsExpirationDeadline

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	self leap15MinutesIntoTheFuture.
	
	api addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1.
	self leap15MinutesIntoTheFuture.
	
	expected := OrderedCollection with: (testObjectsFactory itemSellByTheStore).	
	self assert: (api listCart: cartID) equals: expected.
	
	!
!ApiRestTest methodsFor: 'timeKeepingTests' stamp: 'AM 12/1/2020 18:03:15'!
test05listingCartResetsExpirationDeadline

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	self leap15MinutesIntoTheFuture.
	
	api listCart: cartID.
	self leap15MinutesIntoTheFuture.
	
	expected := OrderedCollection new.	
	self assert: (api listCart: cartID) equals: expected.
	
	! !

!methodRemoval: ApiRestTest #test04listingCartResetsExpirationDeadline stamp: 'AM 12/1/2020 18:03:15'!
test04listingCartResetsExpirationDeadline

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	self leap15MinutesIntoTheFuture.
	
	api listCart: cartID.
	self leap15MinutesIntoTheFuture.
	
	expected := OrderedCollection new.	
	self assert: (api listCart: cartID) equals: expected.
	
	!
!ApiRestTest methodsFor: 'timeKeepingTests' stamp: 'AM 12/1/2020 18:03:39'!
test03cantAddItemsToCart30MinutesAfterLastAction

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	self leap30MinutesIntoTheFuture.
	
	self
		should: [api listCart: cartID]
		raise: Error
		withMessageText: CartManager cartExpiredErrorDescription.

	
	! !
!ApiRestTest methodsFor: 'timeKeepingTests' stamp: 'AM 12/1/2020 18:03:50'!
test02cantListCart30MinutesAfterLastAction

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	self leap30MinutesIntoTheFuture.
	
	self
		should: [api listCart: cartID]
		raise: Error
		withMessageText: CartManager cartExpiredErrorDescription.

	
	! !

!methodRemoval: ApiRestTest #test02cantListCart30MinutesAfterCreation stamp: 'AM 12/1/2020 18:03:50'!
test02cantListCart30MinutesAfterCreation

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	self leap30MinutesIntoTheFuture.
	
	self
		should: [api listCart: cartID]
		raise: Error
		withMessageText: CartManager cartExpiredErrorDescription.

	
	!
!ApiRestTest methodsFor: 'timeKeepingTests' stamp: 'AM 12/1/2020 18:03:59'!
test01cantCheckOutCart30MinutesAfterLastAction

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	api addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1.
	
	self leap30MinutesIntoTheFuture.
	
	self
		should: [api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withMessageText: CartManager cartExpiredErrorDescription.
	
	self assert: (api listPurchasesFor: 'client') isEmpty.
	
	! !

!methodRemoval: ApiRestTest #test01cantCheckOutCart30MinutesAfterCreation stamp: 'AM 12/1/2020 18:03:59'!
test01cantCheckOutCart30MinutesAfterCreation

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	api addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1.
	
	self leap30MinutesIntoTheFuture.
	
	self
		should: [api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withMessageText: CartManager cartExpiredErrorDescription.
	
	self assert: (api listPurchasesFor: 'client') isEmpty.
	
	!
!ApiRestTest methodsFor: 'timeKeepingTests' stamp: 'AM 12/1/2020 18:05:30' prior: 50883677!
test03cantAddItemsToCart30MinutesAfterLastAction

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	self leap30MinutesIntoTheFuture.
	
	self
		should: [api addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1]
		raise: Error
		withMessageText: CartManager cartExpiredErrorDescription.

	
	! !

!testRun: #ApiRestTest #test03cantAddItemsToCart30MinutesAfterLastAction stamp: 'AM 12/1/2020 18:05:33'!
FAILURE!

!testRun: #ApiRestTest #test03cantAddItemsToCart30MinutesAfterLastAction stamp: 'AM 12/1/2020 18:05:33'!
FAILURE!
!CartManager methodsFor: 'adding' stamp: 'AM 12/1/2020 18:06:50' prior: 50883581!
addToCart: aCartID item: anItemID quantity: aQuantity

	| cart |
	
	cart := (activeCarts at: aCartID ifAbsent: [self signalNonExistentCart]) value.
	self removeIfExpiredAndRaiseExeption: aCartID.
	self updateTimeFor: aCartID.
	cart add: aQuantity of: anItemID.! !

!testRun: #ApiRestTest #test03cantAddItemsToCart30MinutesAfterLastAction stamp: 'AM 12/1/2020 18:07:05'!
PASSED!

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterLastAction stamp: 'AM 12/1/2020 18:07:08'!
PASSED!

!testRun: #ApiRestTest #test02cantListCart30MinutesAfterLastAction stamp: 'AM 12/1/2020 18:07:08'!
PASSED!

!testRun: #ApiRestTest #test03cantAddItemsToCart30MinutesAfterLastAction stamp: 'AM 12/1/2020 18:07:08'!
PASSED!

!testRun: #ApiRestTest #test04addingItemsToCartResetsExpirationDeadline stamp: 'AM 12/1/2020 18:07:08'!
PASSED!

!testRun: #ApiRestTest #test05listingCartResetsExpirationDeadline stamp: 'AM 12/1/2020 18:07:08'!
PASSED!
!ApiRestTest methodsFor: 'cartManagementTests' stamp: 'AM 12/1/2020 18:08:17'!
test04cantCreateCartForInvalidClientIDPasswordCombination

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	clientValidationBehavior := [:client :password | self error: ApiRest invalidIDOrPasswordErrorDescription].
	
	self
		should:[api createCartFor: 'client' withPassword: 'password']
		raise: Error
		withMessageText: ApiRest invalidIDOrPasswordErrorDescription.
		
	self assert: api hasNoActiveCarts.! !

!methodRemoval: ApiRestTest #test03cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 12/1/2020 18:08:17'!
test03cantCreateCartForInvalidClientIDPasswordCombination

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	clientValidationBehavior := [:client :password | self error: ApiRest invalidIDOrPasswordErrorDescription].
	
	self
		should:[api createCartFor: 'client' withPassword: 'password']
		raise: Error
		withMessageText: ApiRest invalidIDOrPasswordErrorDescription.
		
	self assert: api hasNoActiveCarts.!
!ApiRestTest methodsFor: 'cartManagementTests' stamp: 'AM 12/1/2020 18:08:29'!
test05cantCreateCartForInvalidClientIDPasswordCombination

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	clientValidationBehavior := [:client :password | self error: ApiRest invalidIDOrPasswordErrorDescription].
	
	self
		should:[api createCartFor: 'client' withPassword: 'password']
		raise: Error
		withMessageText: ApiRest invalidIDOrPasswordErrorDescription.
		
	self assert: api hasNoActiveCarts.! !

!methodRemoval: ApiRestTest #test04cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 12/1/2020 18:08:29'!
test04cantCreateCartForInvalidClientIDPasswordCombination

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	clientValidationBehavior := [:client :password | self error: ApiRest invalidIDOrPasswordErrorDescription].
	
	self
		should:[api createCartFor: 'client' withPassword: 'password']
		raise: Error
		withMessageText: ApiRest invalidIDOrPasswordErrorDescription.
		
	self assert: api hasNoActiveCarts.!
!ApiRestTest methodsFor: 'cartManagementTests' stamp: 'AM 12/1/2020 18:08:34'!
test06itemIsAddedToCartCorrectly

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	
	expected := OrderedCollection with: testObjectsFactory itemSellByTheStore.
	
	self assert: expected equals: (api listCart: cartID).! !

!methodRemoval: ApiRestTest #test05itemIsAddedToCartCorrectly stamp: 'AM 12/1/2020 18:08:34'!
test05itemIsAddedToCartCorrectly

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	
	expected := OrderedCollection with: testObjectsFactory itemSellByTheStore.
	
	self assert: expected equals: (api listCart: cartID).!
!ApiRestTest methodsFor: 'cart management tests' stamp: 'AM 12/1/2020 18:09:33'!
test04cantCreateCartForInvalidClientIDPasswordCombination

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	clientValidationBehavior := [:client :password | self error: ApiRest invalidIDOrPasswordErrorDescription].
	
	self
		should:[api createCartFor: 'client' withPassword: 'password']
		raise: Error
		withMessageText: ApiRest invalidIDOrPasswordErrorDescription.
		
	self assert: api hasNoActiveCarts.! !

!methodRemoval: ApiRestTest #test05cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 12/1/2020 18:09:33'!
test05cantCreateCartForInvalidClientIDPasswordCombination

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	clientValidationBehavior := [:client :password | self error: ApiRest invalidIDOrPasswordErrorDescription].
	
	self
		should:[api createCartFor: 'client' withPassword: 'password']
		raise: Error
		withMessageText: ApiRest invalidIDOrPasswordErrorDescription.
		
	self assert: api hasNoActiveCarts.!
!ApiRestTest methodsFor: 'cart management tests' stamp: 'AM 12/1/2020 18:09:39'!
test05itemIsAddedToCartCorrectly

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	
	expected := OrderedCollection with: testObjectsFactory itemSellByTheStore.
	
	self assert: expected equals: (api listCart: cartID).! !

!methodRemoval: ApiRestTest #test06itemIsAddedToCartCorrectly stamp: 'AM 12/1/2020 18:09:39'!
test06itemIsAddedToCartCorrectly

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	
	expected := OrderedCollection with: testObjectsFactory itemSellByTheStore.
	
	self assert: expected equals: (api listCart: cartID).!
!ApiRestTest methodsFor: 'checkOutTests' stamp: 'AM 12/1/2020 18:10:50'!
test04checkOutReturnsSaleInformation

	| api cartID expected|
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	cartID := api createCartFor: 'client' withPassword: 'password'.
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	expected := OrderedCollection with: (api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard).
	
	self assert: expected equals: (api listPurchasesFor: 'client'). ! !

!methodRemoval: ApiRestTest #test04checksOutCorrectly stamp: 'AM 12/1/2020 18:10:50'!
test04checksOutCorrectly

	| api cartID expected|
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	cartID := api createCartFor: 'client' withPassword: 'password'.
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	expected := OrderedCollection with: (api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard).
	
	self assert: expected equals: (api listPurchasesFor: 'client'). !
!ApiRestTest methodsFor: 'checkOutTests' stamp: 'AM 12/1/2020 18:11:09' prior: 50884018!
test04checkOutReturnsSaleInformation

	| api cartID expected|
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	expected := OrderedCollection with: (api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard).
	
	self assert: expected equals: (api listPurchasesFor: 'client'). ! !
!ApiRestTest methodsFor: 'checkOutTests' stamp: 'AM 12/1/2020 18:11:36' prior: 50884057!
test04checkOutReturnsSaleInformation

	| api cartID expected sale |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	sale := api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard.
	expected := OrderedCollection with: sale.
	
	self assert: expected equals: (api listPurchasesFor: 'client'). ! !
!ApiRestTest methodsFor: 'checkOutTests' stamp: 'AM 12/1/2020 18:11:57'!
test01cantCheckOutNonExistingCart

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	self 
		should:[api checkOutCart: 1 charging: testObjectsFactory notExpiredCreditCard]
		raise: Error 
		withMessageText: CartManager cartDoesntExistErrorDescription.
	
	! !

!methodRemoval: ApiRestTest #test04cantCheckOutNonExistingCart stamp: 'AM 12/1/2020 18:11:57'!
test04cantCheckOutNonExistingCart

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	self 
		should:[api checkOutCart: 1 charging: testObjectsFactory notExpiredCreditCard]
		raise: Error 
		withMessageText: CartManager cartDoesntExistErrorDescription.
	
	!
!ApiRestTest methodsFor: 'checkOutTests' stamp: 'AM 12/1/2020 18:12:02'!
test02checkOutReturnsSaleInformation

	| api cartID expected sale |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	sale := api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard.
	expected := OrderedCollection with: sale.
	
	self assert: expected equals: (api listPurchasesFor: 'client'). ! !

!methodRemoval: ApiRestTest #test04checkOutReturnsSaleInformation stamp: 'AM 12/1/2020 18:12:02'!
test04checkOutReturnsSaleInformation

	| api cartID expected sale |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	sale := api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard.
	expected := OrderedCollection with: sale.
	
	self assert: expected equals: (api listPurchasesFor: 'client'). !
!ApiRestTest methodsFor: 'cart management tests' stamp: 'AM 12/1/2020 18:14:50'!
test06cartIsDeletedAfterCheckOut

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalog salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard.
	
	self
		should: [api listCart: cartID]
		raise: Error
		withMessageText: CartManager cartDoesntExistErrorDescription.! !

!testRun: #ApiRestTest #test06cartIsDeletedAfterCheckOut stamp: 'AM 12/1/2020 18:14:55'!
FAILURE!

!testRun: #ApiRestTest #test06cartIsDeletedAfterCheckOut stamp: 'AM 12/1/2020 18:14:55'!
FAILURE!
!ApiRest methodsFor: 'check out' stamp: 'AM 12/1/2020 18:16:05' prior: 50882918!
checkOutCart: aCartID charging: aCreditCard 
	
	| cashier cartOwner clientSalesBook cartToCheckOut sale |
	
	cartToCheckOut := cartManager cartWithID: aCartID.
	cartOwner := cartManager ownerIDForCart: aCartID.
	clientSalesBook := salesBook at: cartOwner ifAbsent: [salesBook at: cartOwner put: OrderedCollection new].
	
	cashier := Cashier toCheckout: cartToCheckOut charging: aCreditCard throught: merchantProcessor on: (clock now) registeringOn: clientSalesBook.
	sale := cashier checkOut.
	 ! !
!ApiRest methodsFor: 'check out' stamp: 'AM 12/1/2020 18:17:04' prior: 50884192!
checkOutCart: aCartID charging: aCreditCard 
	
	| cashier cartOwner clientSalesBook cartToCheckOut sale |
	
	cartToCheckOut := cartManager cartWithID: aCartID.
	cartOwner := cartManager ownerIDForCart: aCartID.
	clientSalesBook := salesBook at: cartOwner ifAbsent: [salesBook at: cartOwner put: OrderedCollection new].
	
	cashier := Cashier toCheckout: cartToCheckOut charging: aCreditCard throught: merchantProcessor on: (clock now) registeringOn: clientSalesBook.
	sale := cashier checkOut.
	
	cartManager removeCart: aCartID.
	
	^sale.
	 ! !
!CartManager methodsFor: 'adding' stamp: 'AM 12/1/2020 18:17:29'!
removeCart: aCartID

	! !
!CartManager methodsFor: 'adding' stamp: 'AM 12/1/2020 18:18:32' prior: 50884231!
removeCart: aCartID

	activeCarts removeKey: aCartID.
	cartLastActionTimestamp removeKey: aCartID.! !

Object subclass: #CartManager
	instanceVariableNames: 'activeCarts cartLastActionTimestamp nextCartID api'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartManager category: 'TusLibros' stamp: 'AM 12/1/2020 18:19:07'!
Object subclass: #CartManager
	instanceVariableNames: 'activeCarts cartLastActionTimestamp nextCartID api'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterLastAction stamp: 'AM 12/1/2020 18:19:13'!
PASSED!

!testRun: #ApiRestTest #test01cantCheckOutNonExistingCart stamp: 'AM 12/1/2020 18:19:13'!
PASSED!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 12/1/2020 18:19:13'!
PASSED!

!testRun: #ApiRestTest #test02cantAddItemsToNonExistingCart stamp: 'AM 12/1/2020 18:19:13'!
PASSED!

!testRun: #ApiRestTest #test02cantListCart30MinutesAfterLastAction stamp: 'AM 12/1/2020 18:19:13'!
PASSED!

!testRun: #ApiRestTest #test02checkOutReturnsSaleInformation stamp: 'AM 12/1/2020 18:19:13'!
PASSED!

!testRun: #ApiRestTest #test03cantAddItemsToCart30MinutesAfterLastAction stamp: 'AM 12/1/2020 18:19:13'!
PASSED!

!testRun: #ApiRestTest #test03cantListItemsOfNonExistingCart stamp: 'AM 12/1/2020 18:19:13'!
PASSED!

!testRun: #ApiRestTest #test04addingItemsToCartResetsExpirationDeadline stamp: 'AM 12/1/2020 18:19:13'!
PASSED!

!testRun: #ApiRestTest #test04cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 12/1/2020 18:19:13'!
PASSED!

!testRun: #ApiRestTest #test05itemIsAddedToCartCorrectly stamp: 'AM 12/1/2020 18:19:13'!
PASSED!

!testRun: #ApiRestTest #test05listingCartResetsExpirationDeadline stamp: 'AM 12/1/2020 18:19:13'!
PASSED!

!testRun: #ApiRestTest #test06cartIsDeletedAfterCheckOut stamp: 'AM 12/1/2020 18:19:13'!
PASSED!
!CartManager methodsFor: 'initialization' stamp: 'AM 12/1/2020 18:19:23' prior: 50882983!
initializeFor: anApi
	
	api := anApi.
	activeCarts := Dictionary new.
	cartLastActionTimestamp := Dictionary new.
	nextCartID := 0.! !

!testRun: #ApiRestTest #test02checkOutReturnsSaleInformation stamp: 'AM 12/1/2020 18:20:00'!
PASSED!

!testRun: #ApiRestTest #test06cartIsDeletedAfterCheckOut stamp: 'AM 12/1/2020 18:20:12'!
PASSED!

----QUIT----(1 December 2020 18:21:02) CuisUniversity-4383.image priorSource: 17602740!

----STARTUP---- (1 December 2020 19:42:14) as C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CUIS\CuisUniversity-4383.image!


----QUIT----(1 December 2020 19:47:57) CuisUniversity-4383.image priorSource: 17685134!

----STARTUP---- (2 December 2020 22:56:36) as C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CUIS\CuisUniversity-4383.image!

!CreditCard class methodsFor: 'instance creation' stamp: 'AM 12/2/2020 23:02:10'!
withNumber: aCreditCardNumber expirationOn: anExpirationDate Owner: anOwnerNameString

	self assertValidNumber: aCreditCardNumber.
	^self new initializeForNumber: aCreditCardNumber expirationOn: anExpirationDate Owner: anOwnerNameString.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'AM 12/2/2020 23:02:41'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'AM 12/2/2020 23:02:43'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'AM 12/2/2020 23:02:44'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'AM 12/2/2020 23:02:39'!
initializeForNumber: aCreditCardNumber expirationOn: anExpirationDate Owner: anOwnerNameString
	
	number := aCreditCardNumber.
	expirationDate := anExpirationDate.
	owner := anOwnerNameString.! !
!CreditCard methodsFor: 'testing' stamp: 'AM 12/2/2020 23:03:19' prior: 50879422!
isExpiredOn: aDate 
	
	^expirationDate start < (Month month: aDate monthIndex year: aDate yearNumber) start ! !
!Cashier methodsFor: 'checkout - private' stamp: 'AM 12/2/2020 23:03:47' prior: 50881147!
createSale
	
	^OrderedCollection with: (cart items) with: total.
! !
!CartManager methodsFor: 'time keeping protocol' stamp: 'AM 12/2/2020 23:06:46' prior: 50883229!
removeIfExpiredAndRaiseExeption: aCartID

	((cartLastActionTimestamp at: aCartID) > ((api timeNow) - 30 minutes)) ifFalse: [ activeCarts removeKey: aCartID.
														     			cartLastActionTimestamp removeKey: aCartID.
																	self signalCartExpired.]! !
!CartManager methodsFor: 'time keeping protocol' stamp: 'AM 12/2/2020 23:07:57'!
removeIfExpiredAndRaiseException: aCartID

	((cartLastActionTimestamp at: aCartID) > ((api timeNow) - 30 minutes)) ifFalse: [ activeCarts removeKey: aCartID.
														     			cartLastActionTimestamp removeKey: aCartID.
																	self signalCartExpired.]! !
!CartManager methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:07:57' prior: 50883797!
addToCart: aCartID item: anItemID quantity: aQuantity

	| cart |
	
	cart := (activeCarts at: aCartID ifAbsent: [self signalNonExistentCart]) value.
	self removeIfExpiredAndRaiseException: aCartID.
	self updateTimeFor: aCartID.
	cart add: aQuantity of: anItemID.! !
!CartManager methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:07:57' prior: 50883019!
cartWithID: aCartID
	
	| cart |
	
	cart := (activeCarts at: aCartID ifAbsent: [self signalNonExistentCart]) value.
	self removeIfExpiredAndRaiseException: aCartID.
	^cart.! !

!methodRemoval: CartManager #removeIfExpiredAndRaiseExeption: stamp: 'AM 12/2/2020 23:07:57'!
removeIfExpiredAndRaiseExeption: aCartID

	((cartLastActionTimestamp at: aCartID) > ((api timeNow) - 30 minutes)) ifFalse: [ activeCarts removeKey: aCartID.
														     			cartLastActionTimestamp removeKey: aCartID.
																	self signalCartExpired.]!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'AM 12/2/2020 23:09:59' prior: 50879522!
expiredCreditCard
	
	^CreditCard withNumber: '1234123412341234' expirationOn: (Month month: today monthIndex year: today yearNumber - 1) Owner: 'Juan Perez'! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'AM 12/2/2020 23:10:41' prior: 50879515!
notExpiredCreditCard
	
	^CreditCard withNumber: '1234123412341234' expirationOn: (Month month: today monthIndex year: today yearNumber + 1) Owner: 'Juan Perez'! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'AM 12/2/2020 23:11:43' prior: 50884435!
expiredCreditCard
	
	^CreditCard withNumber: '1234123412341234' expirationOn: (Month month: today monthIndex year: today yearNumber - 1) Owner: 'Pat Terna Buser'! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'AM 12/2/2020 23:12:11' prior: 50884453!
expiredCreditCard
	
	^CreditCard withNumber: '1234123412341234' expirationOn: (Month month: today monthIndex year: today yearNumber - 1) Owner: 'Juan Perez'! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'AM 12/2/2020 23:13:32'!
defaultCatalogue
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStorePrice;
		yourself ! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:13:32' prior: 50883600!
test04addingItemsToCartResetsExpirationDeadline

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	self leap15MinutesIntoTheFuture.
	
	api addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1.
	self leap15MinutesIntoTheFuture.
	
	expected := OrderedCollection with: (testObjectsFactory itemSellByTheStore).	
	self assert: (api listCart: cartID) equals: expected.
	
	! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:13:32' prior: 50884097!
test01cantCheckOutNonExistingCart

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	self 
		should:[api checkOutCart: 1 charging: testObjectsFactory notExpiredCreditCard]
		raise: Error 
		withMessageText: CartManager cartDoesntExistErrorDescription.
	
	! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:13:32' prior: 50883693!
test02cantListCart30MinutesAfterLastAction

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	self leap30MinutesIntoTheFuture.
	
	self
		should: [api listCart: cartID]
		raise: Error
		withMessageText: CartManager cartExpiredErrorDescription.

	
	! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:13:32' prior: 50879503!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalogue! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:13:32' prior: 50882681!
test02cantAddItemsToNonExistingCart

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	self 
		should:[api addToCart: 1 item: (testObjectsFactory itemSellByTheStore) quantity: 1]
		raise: Error 
		withMessageText: CartManager cartDoesntExistErrorDescription.
		
	self assert: (api hasNoActiveCarts).
	! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:13:32' prior: 50884125!
test02checkOutReturnsSaleInformation

	| api cartID expected sale |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	sale := api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard.
	expected := OrderedCollection with: sale.
	
	self assert: expected equals: (api listPurchasesFor: 'client'). ! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:13:32' prior: 50883642!
test05listingCartResetsExpirationDeadline

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	self leap15MinutesIntoTheFuture.
	
	api listCart: cartID.
	self leap15MinutesIntoTheFuture.
	
	expected := OrderedCollection new.	
	self assert: (api listCart: cartID) equals: expected.
	
	! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:13:32' prior: 50883771!
test03cantAddItemsToCart30MinutesAfterLastAction

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	self leap30MinutesIntoTheFuture.
	
	self
		should: [api addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1]
		raise: Error
		withMessageText: CartManager cartExpiredErrorDescription.

	
	! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:13:32' prior: 50882697!
test03cantListItemsOfNonExistingCart

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	self 
		should:[api listCart: 1]
		raise: Error 
		withMessageText: CartManager cartDoesntExistErrorDescription.
	
	! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:13:32' prior: 50883943!
test04cantCreateCartForInvalidClientIDPasswordCombination

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	clientValidationBehavior := [:client :password | self error: ApiRest invalidIDOrPasswordErrorDescription].
	
	self
		should:[api createCartFor: 'client' withPassword: 'password']
		raise: Error
		withMessageText: ApiRest invalidIDOrPasswordErrorDescription.
		
	self assert: api hasNoActiveCarts.! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:13:32' prior: 50884166!
test06cartIsDeletedAfterCheckOut

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard.
	
	self
		should: [api listCart: cartID]
		raise: Error
		withMessageText: CartManager cartDoesntExistErrorDescription.! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:13:32' prior: 50882666!
test01newCartShouldBeEmpty

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	expected := OrderedCollection new.
	
	self assert: expected equals: (api listCart: cartID).! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:13:32' prior: 50883726!
test01cantCheckOutCart30MinutesAfterLastAction

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	api addToCart: cartID item: testObjectsFactory itemSellByTheStore quantity: 1.
	
	self leap30MinutesIntoTheFuture.
	
	self
		should: [api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withMessageText: CartManager cartExpiredErrorDescription.
	
	self assert: (api listPurchasesFor: 'client') isEmpty.
	
	! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:13:32' prior: 50883982!
test05itemIsAddedToCartCorrectly

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSellByTheStore) quantity: 1. 
	
	expected := OrderedCollection with: testObjectsFactory itemSellByTheStore.
	
	self assert: expected equals: (api listCart: cartID).! !

!methodRemoval: StoreTestObjectsFactory #defaultCatalog stamp: 'AM 12/2/2020 23:13:32'!
defaultCatalog
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStorePrice;
		yourself !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'AM 12/2/2020 23:14:04'!
itemSoldByTheStore
	
	^ 'validBook'! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:14:04' prior: 50879078!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: 0 of: testObjectsFactory itemSoldByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:14:04' prior: 50884477!
test04addingItemsToCartResetsExpirationDeadline

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	self leap15MinutesIntoTheFuture.
	
	api addToCart: cartID item: testObjectsFactory itemSoldByTheStore quantity: 1.
	self leap15MinutesIntoTheFuture.
	
	expected := OrderedCollection with: (testObjectsFactory itemSoldByTheStore).	
	self assert: (api listCart: cartID) equals: expected.
	
	! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:14:05' prior: 50884551!
test02checkOutReturnsSaleInformation

	| api cartID expected sale |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSoldByTheStore) quantity: 1. 
	sale := api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard.
	expected := OrderedCollection with: sale.
	
	self assert: expected equals: (api listPurchasesFor: 'client'). ! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:14:05' prior: 50884590!
test03cantAddItemsToCart30MinutesAfterLastAction

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	self leap30MinutesIntoTheFuture.
	
	self
		should: [api addToCart: cartID item: testObjectsFactory itemSoldByTheStore quantity: 1]
		raise: Error
		withMessageText: CartManager cartExpiredErrorDescription.

	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:14:05' prior: 50879295!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSoldByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:14:05' prior: 50884699!
test05itemIsAddedToCartCorrectly

	| api cartID expected |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSoldByTheStore) quantity: 1. 
	
	expected := OrderedCollection with: testObjectsFactory itemSoldByTheStore.
	
	self assert: expected equals: (api listCart: cartID).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:14:05' prior: 50879274!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSoldByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:14:05' prior: 50879150!
test06CartRemembersAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSoldByTheStore.
	self assert: (cart includes: testObjectsFactory itemSoldByTheStore)! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:14:05' prior: 50884535!
test02cantAddItemsToNonExistingCart

	| api |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	self 
		should:[api addToCart: 1 item: (testObjectsFactory itemSoldByTheStore) quantity: 1]
		raise: Error 
		withMessageText: CartManager cartDoesntExistErrorDescription.
		
	self assert: (api hasNoActiveCarts).
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:14:05' prior: 50879105!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: 2 of: testObjectsFactory itemSoldByTheStore.
	self assert: (cart occurrencesOf: testObjectsFactory itemSoldByTheStore) = 2! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:14:05' prior: 50879120!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSoldByTheStore.
	self deny: cart isEmpty ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:14:05' prior: 50879339!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSoldByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:14:05' prior: 50879128!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self deny: (cart includes: testObjectsFactory itemSoldByTheStore)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:14:05' prior: 50879313!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSoldByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:14:05' prior: 50879381!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSoldByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:14:05' prior: 50884641!
test06cartIsDeletedAfterCheckOut

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSoldByTheStore) quantity: 1. 
	api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard.
	
	self
		should: [api listCart: cartID]
		raise: Error
		withMessageText: CartManager cartDoesntExistErrorDescription.! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:14:05' prior: 50884676!
test01cantCheckOutCart30MinutesAfterLastAction

	| api cartID |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID := api createCartFor: 'client' withPassword: 'password'.
	api addToCart: cartID item: testObjectsFactory itemSoldByTheStore quantity: 1.
	
	self leap30MinutesIntoTheFuture.
	
	self
		should: [api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withMessageText: CartManager cartExpiredErrorDescription.
	
	self assert: (api listPurchasesFor: 'client') isEmpty.
	
	! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:14:05' prior: 50884470!
defaultCatalogue
	
	^ Dictionary new
		at: self itemSoldByTheStore put: self itemSellByTheStorePrice;
		yourself ! !

!methodRemoval: StoreTestObjectsFactory #itemSellByTheStore stamp: 'AM 12/2/2020 23:14:05'!
itemSellByTheStore
	
	^ 'validBook'!
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'AM 12/2/2020 23:14:32'!
itemSoldByTheStorePrice
	
	^10! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:14:32' prior: 50885028!
defaultCatalogue
	
	^ Dictionary new
		at: self itemSoldByTheStore put: self itemSoldByTheStorePrice;
		yourself ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:14:32' prior: 50884968!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSoldByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSoldByTheStorePrice * 2)! !

!methodRemoval: StoreTestObjectsFactory #itemSellByTheStorePrice stamp: 'AM 12/2/2020 23:14:33'!
itemSellByTheStorePrice
	
	^10!
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'AM 12/2/2020 23:14:50'!
itemNotSoldByTheStore
	
	^'invalidBook'! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:14:50' prior: 50879092!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [ cart add: testObjectsFactory itemNotSoldByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:14:50' prior: 50879136!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: 2 of: testObjectsFactory itemNotSoldByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!methodRemoval: StoreTestObjectsFactory #itemNotSellByTheStore stamp: 'AM 12/2/2020 23:14:50'!
itemNotSellByTheStore
	
	^'invalidBook'!
!Cashier methodsFor: 'initialization' stamp: 'AM 12/2/2020 23:16:26'!
initializeToCheckout: aCart charging: aCreditCard through: aMerchantProcessor registeringOn: aSalesBook
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:16:26' prior: 50879233!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard through: aMerchantProcessor registeringOn: aSalesBook! !

!methodRemoval: Cashier #initializeToCheckout:charging:throught:registeringOn: stamp: 'AM 12/2/2020 23:16:26'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook!

!methodRemoval: CreditCard class #expiringOn: stamp: 'AM 12/2/2020 23:17:00'!
expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth!

!methodRemoval: CreditCard #initializeExpiringOn: stamp: 'AM 12/2/2020 23:17:07'!
initializeExpiringOn: aMonth 
	
	expiration := aMonth !

Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'AM 12/2/2020 23:17:12'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard class methodsFor: 'assertions' stamp: 'AM 12/2/2020 23:18:10'!
assertValidNumber: aCreditCardNumber
	
	| isValid |

	isValid := (aCreditCardNumber size) = 16 and: [aCreditCardNumber allSatisfy: [:char | char isAlphaNumeric]].
	
	isValid ifFalse: [self signalInvalidCreditCardNumber].! !
!CreditCard class methodsFor: 'error signals' stamp: 'AM 12/2/2020 23:19:03'!
signalInvalidCreditCardNumber
	
	self error: self ! !
!CreditCard class methodsFor: 'error signals' stamp: 'AM 12/2/2020 23:19:17' prior: 50885172!
signalInvalidCreditCardNumber
	
	self error: self InvalidCreditCardNumberErrorDescription.! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'AM 12/2/2020 23:19:24'!
InvalidCreditCardNumberErrorDescription
	
	^'Credit card number must be a 16 digit number'! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'AM 12/2/2020 23:19:26' prior: 50885183!
InvalidCreditCardNumberErrorDescription
	
	^'Credit card number must be a 16 digit number'.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'AM 12/2/2020 23:20:02' prior: 50884325!
withNumber: aCreditCardNumber expirationOn: anExpirationDate Owner: anOwnerNameString

	self assertValidNumber: aCreditCardNumber.
	self assertValidOwnerName: anOwnerNameString.
	
	^self new initializeForNumber: aCreditCardNumber expirationOn: anExpirationDate Owner: anOwnerNameString.! !
!CreditCard class methodsFor: 'assertions' stamp: 'AM 12/2/2020 23:21:01'!
assertValidOwnerName: anOwnerNameString

	anOwnerNameString isEmpty ifTrue: [self signalInvalidOwnerName].! !
!CreditCard class methodsFor: 'error signals' stamp: 'AM 12/2/2020 23:22:22'!
signalInvalidOwnerName

	self error: self invalidOwnerNameErrorDescription.! !
!CreditCard class methodsFor: 'assertions' stamp: 'AM 12/2/2020 23:23:13' prior: 50885162!
assertValidNumber: aCreditCardNumber
	
	| isValid |

	isValid := (aCreditCardNumber size) = 16 and: [aCreditCardNumber allSatisfy: [:char | char isAlphaNumeric]].
	
	isValid ifFalse: [self error: self InvalidCreditCardNumberErrorDescription.].! !

!methodRemoval: CreditCard class #signalInvalidCreditCardNumber stamp: 'AM 12/2/2020 23:23:21'!
signalInvalidCreditCardNumber
	
	self error: self InvalidCreditCardNumberErrorDescription.!

!methodRemoval: CreditCard class #signalInvalidOwnerName stamp: 'AM 12/2/2020 23:23:31'!
signalInvalidOwnerName

	self error: self invalidOwnerNameErrorDescription.!
!CreditCard class methodsFor: 'assertions' stamp: 'AM 12/2/2020 23:24:04' prior: 50885209!
assertValidOwnerName: anOwnerNameString

	anOwnerNameString isEmpty ifTrue: [self error: self invalidOwnerNameErrorDescription].! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'AM 12/2/2020 23:24:22'!
invalidOwnerNameErrorDescription

	^'Owner name cant be empty'! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'AM 12/2/2020 23:24:32' prior: 50885250!
invalidOwnerNameErrorDescription

	^'Owner name cant be empty'! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'AM 12/2/2020 23:24:36' prior: 50885256!
invalidOwnerNameErrorDescription

	^'Owner name can not be empty'! !
!CartManager methodsFor: 'time keeping protocol' stamp: 'AM 12/2/2020 23:26:39'!
assertIfExpiredAndRemoveIfTrue: aCartID

	((cartLastActionTimestamp at: aCartID) > ((api timeNow) - 30 minutes)) ifFalse: [ activeCarts removeKey: aCartID.
														     			cartLastActionTimestamp removeKey: aCartID.
																	self signalCartExpired.]! !
!CartManager methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:26:39' prior: 50884403!
addToCart: aCartID item: anItemID quantity: aQuantity

	| cart |
	
	cart := (activeCarts at: aCartID ifAbsent: [self signalNonExistentCart]) value.
	self assertIfExpiredAndRemoveIfTrue: aCartID.
	self updateTimeFor: aCartID.
	cart add: aQuantity of: anItemID.! !
!CartManager methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:26:39' prior: 50884415!
cartWithID: aCartID
	
	| cart |
	
	cart := (activeCarts at: aCartID ifAbsent: [self signalNonExistentCart]) value.
	self assertIfExpiredAndRemoveIfTrue: aCartID.
	^cart.! !

!methodRemoval: CartManager #removeIfExpiredAndRaiseException: stamp: 'AM 12/2/2020 23:26:39'!
removeIfExpiredAndRaiseException: aCartID

	((cartLastActionTimestamp at: aCartID) > ((api timeNow) - 30 minutes)) ifFalse: [ activeCarts removeKey: aCartID.
														     			cartLastActionTimestamp removeKey: aCartID.
																	self signalCartExpired.]!

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterLastAction stamp: 'AM 12/2/2020 23:26:45'!
PASSED!

!testRun: #ApiRestTest #test01cantCheckOutNonExistingCart stamp: 'AM 12/2/2020 23:26:45'!
PASSED!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 12/2/2020 23:26:45'!
PASSED!

!testRun: #ApiRestTest #test02cantAddItemsToNonExistingCart stamp: 'AM 12/2/2020 23:26:45'!
PASSED!

!testRun: #ApiRestTest #test02cantListCart30MinutesAfterLastAction stamp: 'AM 12/2/2020 23:26:46'!
PASSED!

!testRun: #ApiRestTest #test02checkOutReturnsSaleInformation stamp: 'AM 12/2/2020 23:26:46'!
PASSED!

!testRun: #ApiRestTest #test03cantAddItemsToCart30MinutesAfterLastAction stamp: 'AM 12/2/2020 23:26:46'!
PASSED!

!testRun: #ApiRestTest #test03cantListItemsOfNonExistingCart stamp: 'AM 12/2/2020 23:26:46'!
PASSED!

!testRun: #ApiRestTest #test04addingItemsToCartResetsExpirationDeadline stamp: 'AM 12/2/2020 23:26:46'!
PASSED!

!testRun: #ApiRestTest #test04cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 12/2/2020 23:26:46'!
PASSED!

!testRun: #ApiRestTest #test05itemIsAddedToCartCorrectly stamp: 'AM 12/2/2020 23:26:46'!
PASSED!

!testRun: #ApiRestTest #test05listingCartResetsExpirationDeadline stamp: 'AM 12/2/2020 23:26:46'!
PASSED!

!testRun: #ApiRestTest #test06cartIsDeletedAfterCheckOut stamp: 'AM 12/2/2020 23:26:46'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'AM 12/2/2020 23:29:06'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'AM 12/2/2020 23:29:06'!
FAILURE!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'AM 12/2/2020 23:29:06'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'AM 12/2/2020 23:29:06'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'AM 12/2/2020 23:29:06'!
FAILURE!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'AM 12/2/2020 23:29:06'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'AM 12/2/2020 23:29:09'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'AM 12/2/2020 23:30:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'AM 12/2/2020 23:30:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'AM 12/2/2020 23:30:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'AM 12/2/2020 23:30:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'AM 12/2/2020 23:30:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'AM 12/2/2020 23:30:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'AM 12/2/2020 23:30:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'AM 12/2/2020 23:30:26'!
PASSED!

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterLastAction stamp: 'AM 12/2/2020 23:30:29'!
PASSED!

!testRun: #ApiRestTest #test01cantCheckOutNonExistingCart stamp: 'AM 12/2/2020 23:30:29'!
PASSED!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 12/2/2020 23:30:29'!
PASSED!

!testRun: #ApiRestTest #test02cantAddItemsToNonExistingCart stamp: 'AM 12/2/2020 23:30:29'!
PASSED!

!testRun: #ApiRestTest #test02cantListCart30MinutesAfterLastAction stamp: 'AM 12/2/2020 23:30:29'!
PASSED!

!testRun: #ApiRestTest #test02checkOutReturnsSaleInformation stamp: 'AM 12/2/2020 23:30:29'!
PASSED!

!testRun: #ApiRestTest #test03cantAddItemsToCart30MinutesAfterLastAction stamp: 'AM 12/2/2020 23:30:29'!
PASSED!

!testRun: #ApiRestTest #test03cantListItemsOfNonExistingCart stamp: 'AM 12/2/2020 23:30:29'!
PASSED!

!testRun: #ApiRestTest #test04addingItemsToCartResetsExpirationDeadline stamp: 'AM 12/2/2020 23:30:29'!
PASSED!

!testRun: #ApiRestTest #test04cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 12/2/2020 23:30:29'!
PASSED!

!testRun: #ApiRestTest #test05itemIsAddedToCartCorrectly stamp: 'AM 12/2/2020 23:30:29'!
PASSED!

!testRun: #ApiRestTest #test05listingCartResetsExpirationDeadline stamp: 'AM 12/2/2020 23:30:29'!
PASSED!

!testRun: #ApiRestTest #test06cartIsDeletedAfterCheckOut stamp: 'AM 12/2/2020 23:30:29'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'AM 12/2/2020 23:30:38'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'AM 12/2/2020 23:30:44'!
FAILURE!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'AM 12/2/2020 23:30:44'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'AM 12/2/2020 23:32:00' prior: 50881250!
checkOut
	
	| sale |
	self calculateTotal.
	self debitTotal.
	self registerSale.

	^ total.! !

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterLastAction stamp: 'AM 12/2/2020 23:32:15'!
PASSED!

!testRun: #ApiRestTest #test01cantCheckOutNonExistingCart stamp: 'AM 12/2/2020 23:32:15'!
PASSED!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 12/2/2020 23:32:15'!
PASSED!

!testRun: #ApiRestTest #test02cantAddItemsToNonExistingCart stamp: 'AM 12/2/2020 23:32:15'!
PASSED!

!testRun: #ApiRestTest #test02cantListCart30MinutesAfterLastAction stamp: 'AM 12/2/2020 23:32:15'!
PASSED!

!testRun: #ApiRestTest #test02checkOutReturnsSaleInformation stamp: 'AM 12/2/2020 23:32:15'!
FAILURE!

!testRun: #ApiRestTest #test03cantAddItemsToCart30MinutesAfterLastAction stamp: 'AM 12/2/2020 23:32:15'!
PASSED!

!testRun: #ApiRestTest #test03cantListItemsOfNonExistingCart stamp: 'AM 12/2/2020 23:32:15'!
PASSED!

!testRun: #ApiRestTest #test04addingItemsToCartResetsExpirationDeadline stamp: 'AM 12/2/2020 23:32:15'!
PASSED!

!testRun: #ApiRestTest #test04cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 12/2/2020 23:32:15'!
PASSED!

!testRun: #ApiRestTest #test05itemIsAddedToCartCorrectly stamp: 'AM 12/2/2020 23:32:15'!
PASSED!

!testRun: #ApiRestTest #test05listingCartResetsExpirationDeadline stamp: 'AM 12/2/2020 23:32:15'!
PASSED!

!testRun: #ApiRestTest #test06cartIsDeletedAfterCheckOut stamp: 'AM 12/2/2020 23:32:15'!
PASSED!

!testRun: #ApiRestTest #test02checkOutReturnsSaleInformation stamp: 'AM 12/2/2020 23:32:15'!
FAILURE!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'AM 12/2/2020 23:32:41'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'AM 12/2/2020 23:32:41'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'AM 12/2/2020 23:32:41'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'AM 12/2/2020 23:32:41'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'AM 12/2/2020 23:32:41'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'AM 12/2/2020 23:32:41'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'AM 12/2/2020 23:32:41'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'AM 12/2/2020 23:33:49'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'AM 12/2/2020 23:33:53'!
PASSED!
!Cashier methodsFor: 'checkout - private' stamp: 'AM 12/2/2020 23:35:55' prior: 50884374!
createSale
	
	^Sale forCart: cart.
! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'AM 12/2/2020 23:36:14'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'AM 12/2/2020 23:36:14'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'AM 12/2/2020 23:36:14'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'AM 12/2/2020 23:36:14'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'AM 12/2/2020 23:36:14'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'AM 12/2/2020 23:36:14'!
PASSED!

!methodRemoval: Cart #addItemsTo: stamp: 'AM 12/2/2020 23:37:40'!
addItemsTo: anItemCollection

	items do: [:item | anItemCollection add: item copy].!

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterLastAction stamp: 'AM 12/2/2020 23:37:44'!
PASSED!

!testRun: #ApiRestTest #test01cantCheckOutNonExistingCart stamp: 'AM 12/2/2020 23:37:44'!
PASSED!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 12/2/2020 23:37:44'!
PASSED!

!testRun: #ApiRestTest #test02cantAddItemsToNonExistingCart stamp: 'AM 12/2/2020 23:37:44'!
PASSED!

!testRun: #ApiRestTest #test02cantListCart30MinutesAfterLastAction stamp: 'AM 12/2/2020 23:37:44'!
PASSED!

!testRun: #ApiRestTest #test02checkOutReturnsSaleInformation stamp: 'AM 12/2/2020 23:37:44'!
FAILURE!

!testRun: #ApiRestTest #test03cantAddItemsToCart30MinutesAfterLastAction stamp: 'AM 12/2/2020 23:37:44'!
PASSED!

!testRun: #ApiRestTest #test03cantListItemsOfNonExistingCart stamp: 'AM 12/2/2020 23:37:44'!
PASSED!

!testRun: #ApiRestTest #test04addingItemsToCartResetsExpirationDeadline stamp: 'AM 12/2/2020 23:37:44'!
PASSED!

!testRun: #ApiRestTest #test04cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 12/2/2020 23:37:44'!
PASSED!

!testRun: #ApiRestTest #test05itemIsAddedToCartCorrectly stamp: 'AM 12/2/2020 23:37:44'!
PASSED!

!testRun: #ApiRestTest #test05listingCartResetsExpirationDeadline stamp: 'AM 12/2/2020 23:37:44'!
PASSED!

!testRun: #ApiRestTest #test06cartIsDeletedAfterCheckOut stamp: 'AM 12/2/2020 23:37:44'!
PASSED!

!testRun: #ApiRestTest #test02checkOutReturnsSaleInformation stamp: 'AM 12/2/2020 23:37:44'!
FAILURE!

!classDefinition: #Cart category: 'TusLibros' stamp: 'AM 12/2/2020 23:38:06'!
Object subclass: #Cart
	instanceVariableNames: 'catalogue items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:38:06' prior: 50879006!
assertIsValidItem: anItem

	(catalogue includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!Cart methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:38:06' prior: 50879037!
total

	^ items sum: [ :anItem | catalogue at: anItem ]! !
!Cart methodsFor: 'as yet unclassified' stamp: 'AM 12/2/2020 23:38:06' prior: 50879019!
initializeAcceptingItemsOf: aCatalog

	catalogue := aCatalog.
	items := OrderedCollection new.! !

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterLastAction stamp: 'AM 12/2/2020 23:38:10'!
PASSED!

!testRun: #ApiRestTest #test01cantCheckOutNonExistingCart stamp: 'AM 12/2/2020 23:38:10'!
PASSED!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 12/2/2020 23:38:10'!
PASSED!

!testRun: #ApiRestTest #test02cantAddItemsToNonExistingCart stamp: 'AM 12/2/2020 23:38:11'!
PASSED!

!testRun: #ApiRestTest #test02cantListCart30MinutesAfterLastAction stamp: 'AM 12/2/2020 23:38:11'!
PASSED!

!testRun: #ApiRestTest #test02checkOutReturnsSaleInformation stamp: 'AM 12/2/2020 23:38:11'!
FAILURE!

!testRun: #ApiRestTest #test03cantAddItemsToCart30MinutesAfterLastAction stamp: 'AM 12/2/2020 23:38:11'!
PASSED!

!testRun: #ApiRestTest #test03cantListItemsOfNonExistingCart stamp: 'AM 12/2/2020 23:38:11'!
PASSED!

!testRun: #ApiRestTest #test04addingItemsToCartResetsExpirationDeadline stamp: 'AM 12/2/2020 23:38:11'!
PASSED!

!testRun: #ApiRestTest #test04cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 12/2/2020 23:38:11'!
PASSED!

!testRun: #ApiRestTest #test05itemIsAddedToCartCorrectly stamp: 'AM 12/2/2020 23:38:11'!
PASSED!

!testRun: #ApiRestTest #test05listingCartResetsExpirationDeadline stamp: 'AM 12/2/2020 23:38:11'!
PASSED!

!testRun: #ApiRestTest #test06cartIsDeletedAfterCheckOut stamp: 'AM 12/2/2020 23:38:11'!
PASSED!

!testRun: #ApiRestTest #test02checkOutReturnsSaleInformation stamp: 'AM 12/2/2020 23:38:11'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'AM 12/2/2020 23:38:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'AM 12/2/2020 23:38:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'AM 12/2/2020 23:38:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'AM 12/2/2020 23:38:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'AM 12/2/2020 23:38:53'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'AM 12/2/2020 23:38:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'AM 12/2/2020 23:38:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'AM 12/2/2020 23:38:53'!
PASSED!
!Cashier methodsFor: 'checkout - private' stamp: 'AM 12/2/2020 23:42:23' prior: 50879191!
debitTotal

	^merchantProcessor debit: total from: creditCard.
	! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'AM 12/2/2020 23:44:19'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior transactionID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'AM 12/2/2020 23:44:22'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior transactionID nextTransactionID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'merchant processor protocol' stamp: 'AM 12/2/2020 23:44:18' prior: 50879405!
debit: anAmount from: aCreditCard 
	
	transactionID := nextTransactionID.
	debitBehavior value: anAmount value: aCreditCard ! !
!CashierTest methodsFor: 'merchant processor protocol' stamp: 'AM 12/2/2020 23:44:45' prior: 50885729!
debit: anAmount from: aCreditCard 
	
	debitBehavior value: anAmount value: aCreditCard.
	transactionID := nextTransactionID.! !

TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior nextTransactionID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'AM 12/2/2020 23:44:50'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior nextTransactionID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'merchant processor protocol' stamp: 'AM 12/2/2020 23:45:25' prior: 50885737!
debit: anAmount from: aCreditCard 
	
	| transactionID |
	
	debitBehavior value: anAmount value: aCreditCard.
	transactionID := nextTransactionID.
	nextTransactionID := nextTransactionID + 1.! !
!CashierTest methodsFor: 'merchant processor protocol' stamp: 'AM 12/2/2020 23:45:31' prior: 50885759!
debit: anAmount from: aCreditCard 
	
	| transactionID |
	
	debitBehavior value: anAmount value: aCreditCard.
	transactionID := nextTransactionID.
	nextTransactionID := nextTransactionID + 1.
	
	^transactionID.! !

!classDefinition: #ApiRestTest category: 'TusLibros' stamp: 'AM 12/2/2020 23:45:45'!
TestCase subclass: #ApiRestTest
	instanceVariableNames: 'testObjectsFactory debitBehavior clientValidationBehavior simulatedTime nextTransactionID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApiRestTest methodsFor: 'merchant processor protocol' stamp: 'AM 12/2/2020 23:45:40' prior: 50879594!
debit: anAmount from: aCreditCard 
	
	| transactionID |
	
	debitBehavior value: anAmount value: aCreditCard.
	transactionID := nextTransactionID.
	nextTransactionID := nextTransactionID + 1.
	
	^transactionID.! !
!Cashier methodsFor: 'checkout' stamp: 'AM 12/2/2020 23:46:37' prior: 50885453!
checkOut
	
	
	self calculateTotal.
	self debitTotal.
	self registerSale.

	^ total.! !
!Cashier methodsFor: 'checkout' stamp: 'AM 12/2/2020 23:46:43' prior: 50885799!
checkOut
	
	self calculateTotal.
	self debitTotal.
	self registerSale.

	^ total.! !
!Cashier methodsFor: 'checkout - private' stamp: 'AM 12/2/2020 23:46:51' prior: 50885706!
debitTotal

	merchantProcessor debit: total from: creditCard.
	! !
!Cashier methodsFor: 'checkout - private' stamp: 'AM 12/2/2020 23:47:22' prior: 50885811!
debitTotal

	| debitTransactionID |
	
	debitTransactionID := merchantProcessor debit: total from: creditCard.
	! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'AM 12/2/2020 23:48:12'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total transactionID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checkout - private' stamp: 'AM 12/2/2020 23:48:11' prior: 50885816!
debitTotal

	transactionID :=  merchantProcessor debit: total from: creditCard.
	
	
	! !
!Cashier methodsFor: 'checkout - private' stamp: 'AM 12/2/2020 23:49:12' prior: 50885534!
createSale
	
	^Sale forCart: cart withTransactionID: transactionID.
! !
!Sale class methodsFor: 'instance creation' stamp: 'AM 12/2/2020 23:49:45'!
forCart: aCart withTransactionID: aTransactionID
	
	^self new initializeSaleOf: aCart items for: aCart total.
	! !
!Sale class methodsFor: 'instance creation' stamp: 'AM 12/2/2020 23:49:58' prior: 50885842!
forCart: aCart withTransactionID: aTransactionID
	
	^self new initializeSaleOf: aCart for: aCart total.
	! !
!Sale class methodsFor: 'instance creation' stamp: 'AM 12/2/2020 23:50:15' prior: 50885849!
forCart: aCart withTransactionID: aTransactionID
	
	^self new initializeSaleOf: aCart withTransactionID: aTransactionID .
	! !
!Sale class methodsFor: 'instance creation' stamp: 'AM 12/2/2020 23:50:17' prior: 50885856!
forCart: aCart withTransactionID: aTransactionID
	
	^self new initializeSaleOf: aCart withTransactionID: aTransactionID.
	! !

!methodRemoval: Sale class #forCart: stamp: 'AM 12/2/2020 23:50:21'!
forCart: aCart
	
	^self new initializeSaleOf: aCart items for: aCart total.
	!
!Sale methodsFor: 'initialization' stamp: 'AM 12/2/2020 23:51:08'!
initializeSaleOf: aCart withTransactionID: aTransactionID

	total := aCart total.
	soldItems := aCart items.! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'AM 12/2/2020 23:51:21'!
Object subclass: #Sale
	instanceVariableNames: 'total soldItems transactionID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'AM 12/2/2020 23:51:19' prior: 50885874!
initializeSaleOf: aCart withTransactionID: aTransactionID

	total := aCart total.
	soldItems := aCart items.
	transactionID := aTransactionID.! !

!methodRemoval: Sale #initializeSaleOf:for: stamp: 'AM 12/2/2020 23:51:26'!
initializeSaleOf: aSoldItemsCollection for: aSaleTotal

	total := aSaleTotal.
	soldItems := aSoldItemsCollection.!
!Sale methodsFor: 'transaction ID' stamp: 'AM 12/2/2020 23:51:45'!
transactionID

	^transactionID.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'AM 12/2/2020 23:51:59'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'AM 12/2/2020 23:51:59'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'AM 12/2/2020 23:51:59'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'AM 12/2/2020 23:51:59'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'AM 12/2/2020 23:51:59'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'AM 12/2/2020 23:51:59'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'AM 12/2/2020 23:52:07'!
ERROR!
!CashierTest methodsFor: 'setup' stamp: 'AM 12/2/2020 23:52:41' prior: 50879398 overrides: 16927572!
setUp 
	
	testObjectsFactory := StoreTestObjectsFactory new.
	nextTransactionID := 0.
	debitBehavior := [ :anAmount :aCreditCard | ]! !
!CashierTest methodsFor: 'setup' stamp: 'AM 12/2/2020 23:52:54' prior: 50885928 overrides: 16927572!
setUp 
	
	testObjectsFactory := StoreTestObjectsFactory new.
	nextTransactionID := 0.
	debitBehavior := [ :anAmount :aCreditCard | ].! !
!ApiRestTest methodsFor: 'set up' stamp: 'AM 12/2/2020 23:53:08' prior: 50882384 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	nextTransactionID := 0.
	clientValidationBehavior := [:aClientID : aPassword | ].
	simulatedTime := DateAndTime now.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'AM 12/2/2020 23:53:12'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'AM 12/2/2020 23:53:12'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'AM 12/2/2020 23:53:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'AM 12/2/2020 23:53:12'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'AM 12/2/2020 23:53:12'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'AM 12/2/2020 23:53:12'!
PASSED!

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterLastAction stamp: 'AM 12/2/2020 23:56:50'!
PASSED!

!testRun: #ApiRestTest #test01cantCheckOutNonExistingCart stamp: 'AM 12/2/2020 23:56:50'!
PASSED!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 12/2/2020 23:56:50'!
PASSED!

!testRun: #ApiRestTest #test02cantAddItemsToNonExistingCart stamp: 'AM 12/2/2020 23:56:50'!
PASSED!

!testRun: #ApiRestTest #test02cantListCart30MinutesAfterLastAction stamp: 'AM 12/2/2020 23:56:50'!
PASSED!

!testRun: #ApiRestTest #test02checkOutReturnsSaleInformation stamp: 'AM 12/2/2020 23:56:50'!
FAILURE!

!testRun: #ApiRestTest #test03cantAddItemsToCart30MinutesAfterLastAction stamp: 'AM 12/2/2020 23:56:50'!
PASSED!

!testRun: #ApiRestTest #test03cantListItemsOfNonExistingCart stamp: 'AM 12/2/2020 23:56:50'!
PASSED!

!testRun: #ApiRestTest #test04addingItemsToCartResetsExpirationDeadline stamp: 'AM 12/2/2020 23:56:50'!
PASSED!

!testRun: #ApiRestTest #test04cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 12/2/2020 23:56:50'!
PASSED!

!testRun: #ApiRestTest #test05itemIsAddedToCartCorrectly stamp: 'AM 12/2/2020 23:56:50'!
PASSED!

!testRun: #ApiRestTest #test05listingCartResetsExpirationDeadline stamp: 'AM 12/2/2020 23:56:50'!
PASSED!

!testRun: #ApiRestTest #test06cartIsDeletedAfterCheckOut stamp: 'AM 12/2/2020 23:56:50'!
PASSED!

!testRun: #ApiRestTest #test02checkOutReturnsSaleInformation stamp: 'AM 12/2/2020 23:56:50'!
FAILURE!

!testRun: #ApiRestTest #test02checkOutReturnsSaleInformation stamp: 'AM 12/2/2020 23:56:55'!
FAILURE!

!testRun: #ApiRestTest #test02checkOutReturnsSaleInformation stamp: 'AM 12/2/2020 23:56:55'!
FAILURE!
!ApiRestTest methodsFor: 'check out tests' stamp: 'AM 12/2/2020 23:58:55' prior: 50884764!
test02checkOutReturnsSaleInformation

	| api cartID sale |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSoldByTheStore) quantity: 1. 
	sale := api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard.
	
	self assert: (sale total) equals: (testObjectsFactory itemSoldByTheStorePrice * 1).! !
!ApiRest methodsFor: 'check out' stamp: 'AM 12/3/2020 00:00:17' prior: 50884211!
checkOutCart: aCartID charging: aCreditCard 
	
	| cashier cartOwner clientSalesBook cartToCheckOut |
	
	cartToCheckOut := cartManager cartWithID: aCartID.
	cartOwner := cartManager ownerIDForCart: aCartID.
	clientSalesBook := salesBook at: cartOwner ifAbsent: [salesBook at: cartOwner put: OrderedCollection new].
	
	cashier := Cashier toCheckout: cartToCheckOut charging: aCreditCard throught: merchantProcessor on: (clock now) registeringOn: clientSalesBook.
	cashier checkOut.
	
	cartManager removeCart: aCartID.
	
	^self lastSaleForClient: cartOwner.
	 ! !
!ApiRest methodsFor: 'clients' stamp: 'AM 12/3/2020 00:01:07'!
lastSaleForClient: aClientID
	
	^salesBook at: aClientID last.! !
!ApiRest methodsFor: 'check out' stamp: 'AM 12/3/2020 00:01:53'!
salesBookForClient: cartOwner

	^ salesBook at: cartOwner ifAbsent: [salesBook at: cartOwner put: OrderedCollection new]! !
!ApiRest methodsFor: 'check out' stamp: 'AM 12/3/2020 00:01:53' prior: 50886046!
checkOutCart: aCartID charging: aCreditCard 
	
	| cashier cartOwner clientSalesBook cartToCheckOut |
	
	cartToCheckOut := cartManager cartWithID: aCartID.
	cartOwner := cartManager ownerIDForCart: aCartID.
	clientSalesBook := self salesBookForClient: cartOwner.
	
	cashier := Cashier toCheckout: cartToCheckOut charging: aCreditCard throught: merchantProcessor on: (clock now) registeringOn: clientSalesBook.
	cashier checkOut.
	
	cartManager removeCart: aCartID.
	
	^self lastSaleForClient: cartOwner.
	 ! !
!ApiRest methodsFor: 'check out' stamp: 'AM 12/3/2020 00:02:34' prior: 50886078!
checkOutCart: aCartID charging: aCreditCard 
	
	| cashier cartOwner cartToCheckOut |
	
	cartToCheckOut := cartManager cartWithID: aCartID.
	cartOwner := cartManager ownerIDForCart: aCartID.
	
	
	cashier := Cashier toCheckout: cartToCheckOut 
					charging: aCreditCard 
					throught: merchantProcessor on: (clock now) 
					registeringOn: (self salesBookForClient: cartOwner).
	cashier checkOut.
	
	cartManager removeCart: aCartID.
	
	^self lastSaleForClient: cartOwner.
	 ! !
!ApiRest methodsFor: 'check out' stamp: 'AM 12/3/2020 00:03:08' prior: 50886097!
checkOutCart: aCartID charging: aCreditCard 
	
	| cashier cartOwner |
	
	cartOwner := cartManager ownerIDForCart: aCartID.
	
	
	cashier := Cashier toCheckout: cartManager cartWithID: aCartID
					charging: aCreditCard 
					throught: merchantProcessor on: (clock now) 
					registeringOn: (self salesBookForClient: cartOwner).
	cashier checkOut.
	
	cartManager removeCart: aCartID.
	
	^self lastSaleForClient: cartOwner.
	 ! !
!ApiRest methodsFor: 'check out' stamp: 'AM 12/3/2020 00:03:18' prior: 50886115!
checkOutCart: aCartID charging: aCreditCard 
	
	| cashier cartOwner |
	
	cartOwner := cartManager ownerIDForCart: aCartID.
	
	cashier := Cashier toCheckout: cartManager cartWithID: aCartID
					charging: aCreditCard 
					through: merchantProcessor on: (clock now) 
					registeringOn: (self salesBookForClient: cartOwner).
	cashier checkOut.
	
	cartManager removeCart: aCartID.
	
	^self lastSaleForClient: cartOwner.
	 ! !
!ApiRest methodsFor: 'check out' stamp: 'AM 12/3/2020 00:03:32' prior: 50886131!
checkOutCart: aCartID charging: aCreditCard 
	
	| cashier cartOwner |
	
	cartOwner := cartManager ownerIDForCart: aCartID.
	
	cashier := Cashier toCheckout: (cartManager cartWithID: aCartID)
					charging: aCreditCard 
					through: merchantProcessor on: (clock now) 
					registeringOn: (self salesBookForClient: cartOwner).
	cashier checkOut.
	
	cartManager removeCart: aCartID.
	
	^self lastSaleForClient: cartOwner.
	 ! !
!ApiRest methodsFor: 'check out' stamp: 'AM 12/3/2020 00:03:59' prior: 50886147!
checkOutCart: aCartID charging: aCreditCard 
	
	| cashier cartOwner |
	
	cartOwner := cartManager ownerIDForCart: aCartID.
	
	cashier := Cashier toCheckout: (cartManager cartWithID: aCartID)
					charging: aCreditCard 
					throught: merchantProcessor on: (clock now) 
					registeringOn: (self salesBookForClient: cartOwner).
	cashier checkOut.
	
	cartManager removeCart: aCartID.
	
	^self lastSaleForClient: cartOwner.
	 ! !

Cashier!

Cashier!
!Cashier class methodsFor: 'instance creation' stamp: 'AM 12/3/2020 00:04:50'!
toCheckout: aCart charging: aCreditCard through: aMerchantProcessor on: aDate registeringOn: aSalesBook
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard through: aMerchantProcessor registeringOn: aSalesBook! !
!ApiRest methodsFor: 'as yet unclassified' stamp: 'AM 12/3/2020 00:04:50' prior: 50886163!
checkOutCart: aCartID charging: aCreditCard 
	
	| cashier cartOwner |
	
	cartOwner := cartManager ownerIDForCart: aCartID.
	
	cashier := Cashier toCheckout: (cartManager cartWithID: aCartID)
					charging: aCreditCard 
					through: merchantProcessor on: (clock now) 
					registeringOn: (self salesBookForClient: cartOwner).
	cashier checkOut.
	
	cartManager removeCart: aCartID.
	
	^self lastSaleForClient: cartOwner.
	 ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 12/3/2020 00:04:50' prior: 50879363!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			through: self
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 12/3/2020 00:04:50' prior: 50884941!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSoldByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		through: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 12/3/2020 00:04:50' prior: 50884908!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSoldByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		through: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 12/3/2020 00:04:50' prior: 50885051!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSoldByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		through: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSoldByTheStorePrice * 2)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 12/3/2020 00:04:50' prior: 50884804!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSoldByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		through: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 12/3/2020 00:04:50' prior: 50884841!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSoldByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				through: self
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !

!methodRemoval: Cashier class #toCheckout:charging:throught:on:registeringOn: stamp: 'AM 12/3/2020 00:04:50'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard through: aMerchantProcessor registeringOn: aSalesBook!

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterLastAction stamp: 'AM 12/3/2020 00:04:54'!
PASSED!

!testRun: #ApiRestTest #test01cantCheckOutNonExistingCart stamp: 'AM 12/3/2020 00:04:54'!
PASSED!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 12/3/2020 00:04:54'!
PASSED!

!testRun: #ApiRestTest #test02cantAddItemsToNonExistingCart stamp: 'AM 12/3/2020 00:04:54'!
PASSED!

!testRun: #ApiRestTest #test02cantListCart30MinutesAfterLastAction stamp: 'AM 12/3/2020 00:04:54'!
PASSED!

!testRun: #ApiRestTest #test02checkOutReturnsSaleInformation stamp: 'AM 12/3/2020 00:04:54'!
ERROR!

!testRun: #ApiRestTest #test03cantAddItemsToCart30MinutesAfterLastAction stamp: 'AM 12/3/2020 00:04:54'!
PASSED!

!testRun: #ApiRestTest #test03cantListItemsOfNonExistingCart stamp: 'AM 12/3/2020 00:04:54'!
PASSED!

!testRun: #ApiRestTest #test04addingItemsToCartResetsExpirationDeadline stamp: 'AM 12/3/2020 00:04:54'!
PASSED!

!testRun: #ApiRestTest #test04cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 12/3/2020 00:04:54'!
PASSED!

!testRun: #ApiRestTest #test05itemIsAddedToCartCorrectly stamp: 'AM 12/3/2020 00:04:54'!
PASSED!

!testRun: #ApiRestTest #test05listingCartResetsExpirationDeadline stamp: 'AM 12/3/2020 00:04:54'!
PASSED!

!testRun: #ApiRestTest #test06cartIsDeletedAfterCheckOut stamp: 'AM 12/3/2020 00:04:54'!
ERROR!
!ApiRest class methodsFor: 'instance creation' stamp: 'AM 12/3/2020 00:05:12' prior: 50882464!
withCatalogue: aPriceCatalogue salesThrough: aMerchantProcessor validatingClientsThrough: aClientPasswordValidator keepingTimeWith: aClock 
	
	^self new initializeWithCatalogue: aPriceCatalogue 
					salesThrough: aMerchantProcessor 
					validatingClientsThrough: aClientPasswordValidator 
					keepingTimeWith: aClock.! !
!ApiRest methodsFor: 'cart' stamp: 'AM 12/3/2020 00:05:36' prior: 50881860!
addToCart: aCartID item: anItemID quantity: aQuantity

	cartManager addToCart: aCartID 
				item: anItemID 
				quantity: aQuantity.
	
	! !
!ApiRest methodsFor: 'clients' stamp: 'AM 12/3/2020 00:07:05' prior: 50883247!
listPurchasesFor: aClientID

	^self salesBookForClient: aClientID.! !
!ApiRest methodsFor: 'clients' stamp: 'AM 12/3/2020 00:07:41' prior: 50886066!
lastSaleForClient: aClientID
	
	^self salesBookForClient: aClientID last.! !
!ApiRest methodsFor: 'clients' stamp: 'AM 12/3/2020 00:07:48' prior: 50886417!
lastSaleForClient: aClientID
	
	^(self salesBookForClient: aClientID) last.! !

OrderedCollection new last!

OrderedCollection new last ifEmpty: [^'s']!

OrderedCollection new last ifEmpty: '1'!

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterLastAction stamp: 'AM 12/3/2020 00:11:28'!
PASSED!

!testRun: #ApiRestTest #test01cantCheckOutNonExistingCart stamp: 'AM 12/3/2020 00:11:28'!
PASSED!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 12/3/2020 00:11:28'!
PASSED!

!testRun: #ApiRestTest #test02cantAddItemsToNonExistingCart stamp: 'AM 12/3/2020 00:11:28'!
PASSED!

!testRun: #ApiRestTest #test02cantListCart30MinutesAfterLastAction stamp: 'AM 12/3/2020 00:11:28'!
PASSED!

!testRun: #ApiRestTest #test02checkOutReturnsSaleInformation stamp: 'AM 12/3/2020 00:11:28'!
PASSED!

!testRun: #ApiRestTest #test03cantAddItemsToCart30MinutesAfterLastAction stamp: 'AM 12/3/2020 00:11:28'!
PASSED!

!testRun: #ApiRestTest #test03cantListItemsOfNonExistingCart stamp: 'AM 12/3/2020 00:11:28'!
PASSED!

!testRun: #ApiRestTest #test04addingItemsToCartResetsExpirationDeadline stamp: 'AM 12/3/2020 00:11:28'!
PASSED!

!testRun: #ApiRestTest #test04cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 12/3/2020 00:11:28'!
PASSED!

!testRun: #ApiRestTest #test05itemIsAddedToCartCorrectly stamp: 'AM 12/3/2020 00:11:28'!
PASSED!

!testRun: #ApiRestTest #test05listingCartResetsExpirationDeadline stamp: 'AM 12/3/2020 00:11:29'!
PASSED!

!testRun: #ApiRestTest #test06cartIsDeletedAfterCheckOut stamp: 'AM 12/3/2020 00:11:29'!
PASSED!
!ApiRestTest methodsFor: 'check out tests' stamp: 'AM 12/3/2020 00:11:51' prior: 50886027!
test02checkOutReturnsSaleInformation

	| api cartID sale |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSoldByTheStore) quantity: 1. 
	sale := api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard.
	
	self assert: (sale total) equals: (testObjectsFactory itemSoldByTheStorePrice * 1).
	self assert: (sale items)! !
!ApiRestTest methodsFor: 'check out tests' stamp: 'AM 12/3/2020 00:12:45' prior: 50886474!
test02checkOutReturnsSaleInformation

	| api cartID sale |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSoldByTheStore) quantity: 1. 
	sale := api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard.
	
	self assert: (sale total) equals: (testObjectsFactory itemSoldByTheStorePrice * 1).
	self assert: (sale soldItems) equals: (OrderedCollection with: testObjectsFactory itemSoldByTheStore).! !

!testRun: #ApiRestTest #test01cantCheckOutNonExistingCart stamp: 'AM 12/3/2020 00:12:46'!
PASSED!

!testRun: #ApiRestTest #test02checkOutReturnsSaleInformation stamp: 'AM 12/3/2020 00:12:46'!
PASSED!
!ApiRestTest methodsFor: 'check out tests' stamp: 'AM 12/3/2020 00:12:53' prior: 50886495!
test02checkOutReturnsSaleInformation

	| api cartID sale |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	cartID := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID item: (testObjectsFactory itemSoldByTheStore) quantity: 1. 
	sale := api checkOutCart: cartID charging: testObjectsFactory notExpiredCreditCard.
	
	self assert: (sale total) equals: (testObjectsFactory itemSoldByTheStorePrice * 1).
	self assert: (sale soldItems) equals: (OrderedCollection with: testObjectsFactory itemSoldByTheStore).! !
!ApiRestTest methodsFor: 'check out tests' stamp: 'AM 12/3/2020 00:16:53'!
test03differentCheckOutsReturnDifferentTransactionIDs

	| api cartID1 cartID2 sale1 sale2 |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	cartID1 := api createCartFor: 'client' withPassword: 'password'.
	cartID2 := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID1 item: (testObjectsFactory itemSoldByTheStore) quantity: 1. 
	sale1 := api checkOutCart: cartID1 charging: testObjectsFactory notExpiredCreditCard.
	api addToCart: cartID2 item: (testObjectsFactory itemSoldByTheStore) quantity: 1. 
	sale2 := api checkOutCart: cartID2 charging: testObjectsFactory notExpiredCreditCard.
	
	self deny: (sale1 transactionID) = (sale2 transactionID).
! !

!testRun: #ApiRestTest #test03differentCheckOutsReturnDifferentTransactionIDs stamp: 'AM 12/3/2020 00:16:56'!
PASSED!
!ApiRestTest methodsFor: 'check out tests' stamp: 'AM 12/3/2020 00:18:30' prior: 50886547!
test03differentCheckOutsReturnDifferentTransactionIDs

	| api cartID1 cartID2 sale1 sale2 |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue 
				salesThrough: self 
				validatingClientsThrough: self 
				keepingTimeWith: self.
				
	cartID1 := api createCartFor: 'client' withPassword: 'password'.
	cartID2 := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID1 
		item: (testObjectsFactory itemSoldByTheStore) 
		quantity: 1. 
		
	sale1 := api checkOutCart: cartID1 charging: testObjectsFactory notExpiredCreditCard.
				
	api addToCart: cartID2 
		item: (testObjectsFactory itemSoldByTheStore) 
		quantity: 1. 
		
	sale2 := api checkOutCart: cartID2 charging: testObjectsFactory notExpiredCreditCard.
	
	self deny: (sale1 transactionID) = (sale2 transactionID).
! !

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterLastAction stamp: 'AM 12/3/2020 00:18:59'!
PASSED!

!testRun: #ApiRestTest #test01cantCheckOutNonExistingCart stamp: 'AM 12/3/2020 00:18:59'!
PASSED!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 12/3/2020 00:18:59'!
PASSED!

!testRun: #ApiRestTest #test02cantAddItemsToNonExistingCart stamp: 'AM 12/3/2020 00:18:59'!
PASSED!

!testRun: #ApiRestTest #test02cantListCart30MinutesAfterLastAction stamp: 'AM 12/3/2020 00:18:59'!
PASSED!

!testRun: #ApiRestTest #test02checkOutReturnsSaleInformation stamp: 'AM 12/3/2020 00:18:59'!
PASSED!

!testRun: #ApiRestTest #test03cantAddItemsToCart30MinutesAfterLastAction stamp: 'AM 12/3/2020 00:18:59'!
PASSED!

!testRun: #ApiRestTest #test03cantListItemsOfNonExistingCart stamp: 'AM 12/3/2020 00:18:59'!
PASSED!

!testRun: #ApiRestTest #test03differentCheckOutsReturnDifferentTransactionIDs stamp: 'AM 12/3/2020 00:18:59'!
PASSED!

!testRun: #ApiRestTest #test04addingItemsToCartResetsExpirationDeadline stamp: 'AM 12/3/2020 00:18:59'!
PASSED!

!testRun: #ApiRestTest #test04cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 12/3/2020 00:18:59'!
PASSED!

!testRun: #ApiRestTest #test05itemIsAddedToCartCorrectly stamp: 'AM 12/3/2020 00:19:00'!
PASSED!

!testRun: #ApiRestTest #test05listingCartResetsExpirationDeadline stamp: 'AM 12/3/2020 00:19:00'!
PASSED!

!testRun: #ApiRestTest #test06cartIsDeletedAfterCheckOut stamp: 'AM 12/3/2020 00:19:00'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'AM 12/3/2020 00:19:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'AM 12/3/2020 00:19:03'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'AM 12/3/2020 00:19:03'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'AM 12/3/2020 00:19:03'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'AM 12/3/2020 00:19:03'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'AM 12/3/2020 00:19:03'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'AM 12/3/2020 00:19:03'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'AM 12/3/2020 00:19:03'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'AM 12/3/2020 00:19:06'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'AM 12/3/2020 00:19:06'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'AM 12/3/2020 00:19:06'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'AM 12/3/2020 00:19:06'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'AM 12/3/2020 00:19:06'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'AM 12/3/2020 00:19:06'!
PASSED!

----SNAPSHOT----(3 December 2020 00:22:21) CuisUniversity-4383.image priorSource: 17685348!

!classRemoval: #StoreTestObjectsFactory stamp: 'AM 12/3/2020 00:22:24'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 'AM 12/3/2020 00:22:24'!
Object subclass: #Sale
	instanceVariableNames: 'total soldItems transactionID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'AM 12/3/2020 00:22:25'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'AM 12/3/2020 00:22:25'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total transactionID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartManager stamp: 'AM 12/3/2020 00:22:25'!
Object subclass: #CartManager
	instanceVariableNames: 'activeCarts cartLastActionTimestamp nextCartID api'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'AM 12/3/2020 00:22:26'!
Object subclass: #Cart
	instanceVariableNames: 'catalogue items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #ApiRest stamp: 'AM 12/3/2020 00:22:26'!
Object subclass: #ApiRest
	instanceVariableNames: 'priceCatalogue activeCarts merchantProcessor clientPasswordValidator salesBook ownerForCart cartManager clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'AM 12/3/2020 00:22:26'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior nextTransactionID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'AM 12/3/2020 00:22:27'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #ApiRestTest stamp: 'AM 12/3/2020 00:22:27'!
TestCase subclass: #ApiRestTest
	instanceVariableNames: 'testObjectsFactory debitBehavior clientValidationBehavior simulatedTime nextTransactionID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\Chara\Desktop\TusLibros-Ejercicio3.st----!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'AM 12/3/2020 00:23:32'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'AM 12/3/2020 00:23:32'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'AM 12/3/2020 00:23:32'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'AM 12/3/2020 00:23:32'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'AM 12/3/2020 00:23:32'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'AM 12/3/2020 00:23:32'!
PASSED!

----QUIT----(3 December 2020 00:25:25) CuisUniversity-4383.image priorSource: 17761508!

----STARTUP---- (3 December 2020 12:14:04) as C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CUIS\CuisUniversity-4383.image!

!Sale class methodsFor: 'instance creation' stamp: 'AM 12/3/2020 12:17:51' prior: 50887867!
forCart: aCart withTransactionID: aTransactionID
	
	^self new initializeSaleOf: aCart.
	! !
!Sale class methodsFor: 'instance creation' stamp: 'AM 12/3/2020 12:18:13' prior: 50887964!
forCart: aCart withTransactionID: aTransactionID
	
	^self new initializeSaleOf: aCart withTransactionID: ''.
	! !
!Sale class methodsFor: 'instance creation' stamp: 'AM 12/3/2020 12:18:20'!
forCart: aCart 
	
	^self new initializeSaleOf: aCart withTransactionID: ''.
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'AM 12/3/2020 12:18:20' prior: 50887675!
createSale
	
	^Sale forCart: cart .
! !

!methodRemoval: Sale class #forCart:withTransactionID: stamp: 'AM 12/3/2020 12:18:20'!
forCart: aCart withTransactionID: aTransactionID
	
	^self new initializeSaleOf: aCart withTransactionID: ''.
	!

!classDefinition: 'Sale class' category: 'TusLibros' stamp: 'AM 12/3/2020 12:19:13'!
Sale class
	instanceVariableNames: 'nextSaleID'!
!Sale class methodsFor: 'instance creation' stamp: 'AM 12/3/2020 12:19:11' prior: 50887976!
forCart: aCart 
	
	| saleID |
	
	saleID := nextSaleID.
	
	^self new initializeSaleOf: aCart withTransactionID: ''.
	! !
!Sale class methodsFor: 'instance creation' stamp: 'AM 12/3/2020 12:19:43' prior: 50887997!
forCart: aCart 
	
	^self new initializeSaleOf: aCart withTransactionID: self saleID.
	! !
!Sale class methodsFor: 'sale ID' stamp: 'AM 12/3/2020 12:20:43'!
saleID

	| saleID |
	
	saleID := 	nextSaleID.
	nextSaleID := nextSaleID + 1.! !
!Sale class methodsFor: 'sale ID' stamp: 'AM 12/3/2020 12:20:49' prior: 50888009!
saleID

	| saleID |
	
	saleID := 	nextSaleID.
	nextSaleID := nextSaleID + 1.
	
	^saleID.! !
!Sale class methodsFor: 'sale ID' stamp: 'AM 12/3/2020 12:20:57'!
newSaleID

	| saleID |
	
	saleID := 	nextSaleID.
	nextSaleID := nextSaleID + 1.
	
	^saleID.! !

!methodRemoval: Sale class #saleID stamp: 'AM 12/3/2020 12:21:06'!
saleID

	| saleID |
	
	saleID := 	nextSaleID.
	nextSaleID := nextSaleID + 1.
	
	^saleID.!
!Sale class methodsFor: 'instance creation' stamp: 'AM 12/3/2020 12:21:16' prior: 50888004!
forCart: aCart 
	
	^self new initializeSaleOf: aCart withTransactionID: self newSaleID.
	! !
!Sale methodsFor: 'initialization' stamp: 'AM 12/3/2020 12:22:05'!
initializeSaleOf: aCart withSaleID: aTransactionID

	total := aCart total.
	soldItems := aCart items.
	transactionID := aTransactionID.! !
!Sale class methodsFor: 'as yet unclassified' stamp: 'AM 12/3/2020 12:22:05' prior: 50888031!
forCart: aCart 
	
	^self new initializeSaleOf: aCart withSaleID: self newSaleID.
	! !

!methodRemoval: Sale #initializeSaleOf:withTransactionID: stamp: 'AM 12/3/2020 12:22:05'!
initializeSaleOf: aCart withTransactionID: aTransactionID

	total := aCart total.
	soldItems := aCart items.
	transactionID := aTransactionID.!
!Sale methodsFor: 'initialization' stamp: 'AM 12/3/2020 12:22:24' prior: 50888036!
initializeSaleOf: aCart withSaleID: aSaleID

	total := aCart total.
	soldItems := aCart items.
	transactionID := aSaleID.! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'AM 12/3/2020 12:22:41'!
Object subclass: #Sale
	instanceVariableNames: 'total soldItems ID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'as yet unclassified' stamp: 'AM 12/3/2020 12:22:41' prior: 50888057!
initializeSaleOf: aCart withSaleID: aSaleID

	total := aCart total.
	soldItems := aCart items.
	ID := aSaleID.! !
!Sale methodsFor: 'as yet unclassified' stamp: 'AM 12/3/2020 12:22:41' prior: 50887843!
transactionID

	^ID.! !
!Sale methodsFor: 'transaction ID' stamp: 'AM 12/3/2020 12:23:01'!
saleID

	^ID.! !
!ApiRestTest methodsFor: 'as yet unclassified' stamp: 'AM 12/3/2020 12:23:01' prior: 50886827!
test03differentCheckOutsReturnDifferentTransactionIDs

	| api cartID1 cartID2 sale1 sale2 |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue 
				salesThrough: self 
				validatingClientsThrough: self 
				keepingTimeWith: self.
				
	cartID1 := api createCartFor: 'client' withPassword: 'password'.
	cartID2 := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID1 
		item: (testObjectsFactory itemSoldByTheStore) 
		quantity: 1. 
		
	sale1 := api checkOutCart: cartID1 charging: testObjectsFactory notExpiredCreditCard.
				
	api addToCart: cartID2 
		item: (testObjectsFactory itemSoldByTheStore) 
		quantity: 1. 
		
	sale2 := api checkOutCart: cartID2 charging: testObjectsFactory notExpiredCreditCard.
	
	self deny: (sale1 saleID) = (sale2 saleID).
! !

!methodRemoval: Sale #transactionID stamp: 'AM 12/3/2020 12:23:01'!
transactionID

	^ID.!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'AM 12/3/2020 12:23:24'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'AM 12/3/2020 12:23:24'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'AM 12/3/2020 12:23:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'AM 12/3/2020 12:23:24'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'AM 12/3/2020 12:23:24'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'AM 12/3/2020 12:23:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'AM 12/3/2020 12:23:31'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'AM 12/3/2020 12:23:31'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'AM 12/3/2020 12:23:31'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'AM 12/3/2020 12:23:31'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'AM 12/3/2020 12:23:31'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'AM 12/3/2020 12:23:31'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'AM 12/3/2020 12:23:34'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'AM 12/3/2020 12:23:34'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'AM 12/3/2020 12:23:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'AM 12/3/2020 12:23:34'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'AM 12/3/2020 12:23:34'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'AM 12/3/2020 12:23:34'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'AM 12/3/2020 12:23:47'!
ERROR!

Sale class
	instanceVariableNames: 'nextSaleID'!

!classDefinition: 'Sale class' category: 'TusLibros' stamp: 'AM 12/3/2020 12:24:25'!
Sale class
	instanceVariableNames: 'nextSaleID'!
!Sale methodsFor: 'initialization' stamp: 'AM 12/3/2020 12:28:06' prior: 50888071!
initializeSaleOf: aCart withSaleID: aSaleID

	total := aCart total.
	soldItems := aCart items.
! !
!Sale methodsFor: 'initialization' stamp: 'AM 12/3/2020 12:28:19'!
initializeSaleOf: aCart 

	total := aCart total.
	soldItems := aCart items.
! !
!Sale class methodsFor: 'as yet unclassified' stamp: 'AM 12/3/2020 12:28:19' prior: 50888044!
forCart: aCart 
	
	^self new initializeSaleOf: aCart .
	! !

!methodRemoval: Sale #initializeSaleOf:withSaleID: stamp: 'AM 12/3/2020 12:28:19'!
initializeSaleOf: aCart withSaleID: aSaleID

	total := aCart total.
	soldItems := aCart items.
!

!methodRemoval: Sale class #newSaleID stamp: 'AM 12/3/2020 12:28:28'!
newSaleID

	| saleID |
	
	saleID := 	nextSaleID.
	nextSaleID := nextSaleID + 1.
	
	^saleID.!

Sale class
	instanceVariableNames: ''!

!classDefinition: 'Sale class' category: 'TusLibros' stamp: 'AM 12/3/2020 12:28:37'!
Sale class
	instanceVariableNames: ''!
!Sale methodsFor: 'transaction ID' stamp: 'AM 12/3/2020 12:29:08'!
registerID: aSaleID! !
!ApiRest methodsFor: 'check out' stamp: 'AM 12/3/2020 12:30:27' prior: 50887395!
checkOutCart: aCartID charging: aCreditCard 
	
	| cashier cartOwner sale|
	
	cartOwner := cartManager ownerIDForCart: aCartID.
	
	cashier := Cashier toCheckout: (cartManager cartWithID: aCartID)
					charging: aCreditCard 
					through: merchantProcessor on: (clock now) 
					registeringOn: (self salesBookForClient: cartOwner).
	cashier checkOut.
	
	cartManager removeCart: aCartID.
	
	sale := (self lastSaleForClient: cartOwner) registerID: aCartID.
	^sale.
	 ! !

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterLastAction stamp: 'AM 12/3/2020 12:30:36'!
PASSED!

!testRun: #ApiRestTest #test01cantCheckOutNonExistingCart stamp: 'AM 12/3/2020 12:30:36'!
PASSED!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 12/3/2020 12:30:36'!
PASSED!

!testRun: #ApiRestTest #test02cantAddItemsToNonExistingCart stamp: 'AM 12/3/2020 12:30:36'!
PASSED!

!testRun: #ApiRestTest #test02cantListCart30MinutesAfterLastAction stamp: 'AM 12/3/2020 12:30:36'!
PASSED!

!testRun: #ApiRestTest #test02checkOutReturnsSaleInformation stamp: 'AM 12/3/2020 12:30:36'!
PASSED!

!testRun: #ApiRestTest #test03cantAddItemsToCart30MinutesAfterLastAction stamp: 'AM 12/3/2020 12:30:36'!
PASSED!

!testRun: #ApiRestTest #test03cantListItemsOfNonExistingCart stamp: 'AM 12/3/2020 12:30:36'!
PASSED!

!testRun: #ApiRestTest #test03differentCheckOutsReturnDifferentTransactionIDs stamp: 'AM 12/3/2020 12:30:36'!
FAILURE!

!testRun: #ApiRestTest #test04addingItemsToCartResetsExpirationDeadline stamp: 'AM 12/3/2020 12:30:36'!
PASSED!

!testRun: #ApiRestTest #test04cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 12/3/2020 12:30:36'!
PASSED!

!testRun: #ApiRestTest #test05itemIsAddedToCartCorrectly stamp: 'AM 12/3/2020 12:30:36'!
PASSED!

!testRun: #ApiRestTest #test05listingCartResetsExpirationDeadline stamp: 'AM 12/3/2020 12:30:36'!
PASSED!

!testRun: #ApiRestTest #test06cartIsDeletedAfterCheckOut stamp: 'AM 12/3/2020 12:30:36'!
PASSED!

!testRun: #ApiRestTest #test03differentCheckOutsReturnDifferentTransactionIDs stamp: 'AM 12/3/2020 12:30:36'!
FAILURE!
!ApiRestTest methodsFor: 'check out tests' stamp: 'AM 12/3/2020 12:31:44'!
test03differentCheckOutsReturnDifferentSaleIDs

	| api cartID1 cartID2 sale1 sale2 |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue 
				salesThrough: self 
				validatingClientsThrough: self 
				keepingTimeWith: self.
				
	cartID1 := api createCartFor: 'client' withPassword: 'password'.
	cartID2 := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID1 
		item: (testObjectsFactory itemSoldByTheStore) 
		quantity: 1. 
		
	sale1 := api checkOutCart: cartID1 charging: testObjectsFactory notExpiredCreditCard.
				
	api addToCart: cartID2 
		item: (testObjectsFactory itemSoldByTheStore) 
		quantity: 1. 
		
	sale2 := api checkOutCart: cartID2 charging: testObjectsFactory notExpiredCreditCard.
	
	self deny: (sale1 saleID) = (sale2 saleID).
! !

!methodRemoval: ApiRestTest #test03differentCheckOutsReturnDifferentTransactionIDs stamp: 'AM 12/3/2020 12:31:44'!
test03differentCheckOutsReturnDifferentTransactionIDs

	| api cartID1 cartID2 sale1 sale2 |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue 
				salesThrough: self 
				validatingClientsThrough: self 
				keepingTimeWith: self.
				
	cartID1 := api createCartFor: 'client' withPassword: 'password'.
	cartID2 := api createCartFor: 'client' withPassword: 'password'.
	
	api addToCart: cartID1 
		item: (testObjectsFactory itemSoldByTheStore) 
		quantity: 1. 
		
	sale1 := api checkOutCart: cartID1 charging: testObjectsFactory notExpiredCreditCard.
				
	api addToCart: cartID2 
		item: (testObjectsFactory itemSoldByTheStore) 
		quantity: 1. 
		
	sale2 := api checkOutCart: cartID2 charging: testObjectsFactory notExpiredCreditCard.
	
	self deny: (sale1 saleID) = (sale2 saleID).
!
!Sale methodsFor: 'transaction ID' stamp: 'AM 12/3/2020 12:32:50' prior: 50888216!
registerID: aSaleID

	ID := aSaleID.! !

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterLastAction stamp: 'AM 12/3/2020 12:32:53'!
PASSED!

!testRun: #ApiRestTest #test01cantCheckOutNonExistingCart stamp: 'AM 12/3/2020 12:32:53'!
PASSED!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 12/3/2020 12:32:53'!
PASSED!

!testRun: #ApiRestTest #test02cantAddItemsToNonExistingCart stamp: 'AM 12/3/2020 12:32:53'!
PASSED!

!testRun: #ApiRestTest #test02cantListCart30MinutesAfterLastAction stamp: 'AM 12/3/2020 12:32:53'!
PASSED!

!testRun: #ApiRestTest #test02checkOutReturnsSaleInformation stamp: 'AM 12/3/2020 12:32:53'!
PASSED!

!testRun: #ApiRestTest #test03cantAddItemsToCart30MinutesAfterLastAction stamp: 'AM 12/3/2020 12:32:53'!
PASSED!

!testRun: #ApiRestTest #test03cantListItemsOfNonExistingCart stamp: 'AM 12/3/2020 12:32:53'!
PASSED!

!testRun: #ApiRestTest #test03differentCheckOutsReturnDifferentSaleIDs stamp: 'AM 12/3/2020 12:32:53'!
PASSED!

!testRun: #ApiRestTest #test04addingItemsToCartResetsExpirationDeadline stamp: 'AM 12/3/2020 12:32:53'!
PASSED!

!testRun: #ApiRestTest #test04cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 12/3/2020 12:32:53'!
PASSED!

!testRun: #ApiRestTest #test05itemIsAddedToCartCorrectly stamp: 'AM 12/3/2020 12:32:54'!
PASSED!

!testRun: #ApiRestTest #test05listingCartResetsExpirationDeadline stamp: 'AM 12/3/2020 12:32:54'!
PASSED!

!testRun: #ApiRestTest #test06cartIsDeletedAfterCheckOut stamp: 'AM 12/3/2020 12:32:54'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'AM 12/3/2020 12:32:58'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'AM 12/3/2020 12:32:58'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'AM 12/3/2020 12:32:58'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'AM 12/3/2020 12:32:58'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'AM 12/3/2020 12:32:58'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'AM 12/3/2020 12:32:58'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'AM 12/3/2020 12:33:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'AM 12/3/2020 12:33:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'AM 12/3/2020 12:33:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'AM 12/3/2020 12:33:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'AM 12/3/2020 12:33:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'AM 12/3/2020 12:33:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'AM 12/3/2020 12:33:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'AM 12/3/2020 12:33:01'!
PASSED!
!ApiRestTest methodsFor: 'cart management tests' stamp: 'AM 12/3/2020 12:34:20'!
test06cartsHaveDifferentIDs

	| api cartID1 cartID2 |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID1 := api createCartFor: 'client' withPassword: 'password'.
	cartID2 := api createCartFor: 'client' withPassword: 'password'.
	
	self deny: cartID1 = cartID2.! !
!ApiRestTest methodsFor: 'cart management tests' stamp: 'AM 12/3/2020 12:34:28'!
test07cartsHaveDifferentIDs

	| api cartID1 cartID2 |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID1 := api createCartFor: 'client' withPassword: 'password'.
	cartID2 := api createCartFor: 'client' withPassword: 'password'.
	
	self deny: cartID1 = cartID2.! !

!methodRemoval: ApiRestTest #test06cartsHaveDifferentIDs stamp: 'AM 12/3/2020 12:34:28'!
test06cartsHaveDifferentIDs

	| api cartID1 cartID2 |
	
	api := ApiRest withCatalogue: testObjectsFactory defaultCatalogue salesThrough: self validatingClientsThrough: self keepingTimeWith: self.
	
	cartID1 := api createCartFor: 'client' withPassword: 'password'.
	cartID2 := api createCartFor: 'client' withPassword: 'password'.
	
	self deny: cartID1 = cartID2.!

!testRun: #ApiRestTest #test07cartsHaveDifferentIDs stamp: 'AM 12/3/2020 12:34:30'!
PASSED!
!CashierTest methodsFor: 'merchant processor protocol' stamp: 'AM 12/3/2020 12:36:11' prior: 50887331!
debit: anAmount from: aCreditCard 
	
	debitBehavior value: anAmount value: aCreditCard.! !
!CashierTest methodsFor: 'setup' stamp: 'AM 12/3/2020 12:36:20' prior: 50887324 overrides: 16927572!
setUp 
	
	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].! !

TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'AM 12/3/2020 12:36:27'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'merchant processor protocol' stamp: 'AM 12/3/2020 12:36:33' prior: 50888487!
debit: anAmount from: aCreditCard 
	
	^debitBehavior value: anAmount value: aCreditCard.! !
!Cashier methodsFor: 'checkout - private' stamp: 'AM 12/3/2020 12:36:46' prior: 50887680!
debitTotal

	merchantProcessor debit: total from: creditCard.
	
	
	! !

Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'AM 12/3/2020 12:36:52'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'AM 12/3/2020 12:37:13'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'AM 12/3/2020 12:37:13'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'AM 12/3/2020 12:37:13'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'AM 12/3/2020 12:37:13'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'AM 12/3/2020 12:37:13'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'AM 12/3/2020 12:37:13'!
PASSED!

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterLastAction stamp: 'AM 12/3/2020 12:37:16'!
PASSED!

!testRun: #ApiRestTest #test01cantCheckOutNonExistingCart stamp: 'AM 12/3/2020 12:37:16'!
PASSED!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 12/3/2020 12:37:16'!
PASSED!

!testRun: #ApiRestTest #test02cantAddItemsToNonExistingCart stamp: 'AM 12/3/2020 12:37:16'!
PASSED!

!testRun: #ApiRestTest #test02cantListCart30MinutesAfterLastAction stamp: 'AM 12/3/2020 12:37:16'!
PASSED!

!testRun: #ApiRestTest #test02checkOutReturnsSaleInformation stamp: 'AM 12/3/2020 12:37:16'!
PASSED!

!testRun: #ApiRestTest #test03cantAddItemsToCart30MinutesAfterLastAction stamp: 'AM 12/3/2020 12:37:16'!
PASSED!

!testRun: #ApiRestTest #test03cantListItemsOfNonExistingCart stamp: 'AM 12/3/2020 12:37:16'!
PASSED!

!testRun: #ApiRestTest #test03differentCheckOutsReturnDifferentSaleIDs stamp: 'AM 12/3/2020 12:37:16'!
PASSED!

!testRun: #ApiRestTest #test04addingItemsToCartResetsExpirationDeadline stamp: 'AM 12/3/2020 12:37:16'!
PASSED!

!testRun: #ApiRestTest #test04cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 12/3/2020 12:37:16'!
PASSED!

!testRun: #ApiRestTest #test05itemIsAddedToCartCorrectly stamp: 'AM 12/3/2020 12:37:16'!
PASSED!

!testRun: #ApiRestTest #test05listingCartResetsExpirationDeadline stamp: 'AM 12/3/2020 12:37:16'!
PASSED!

!testRun: #ApiRestTest #test06cartIsDeletedAfterCheckOut stamp: 'AM 12/3/2020 12:37:16'!
PASSED!

!testRun: #ApiRestTest #test07cartsHaveDifferentIDs stamp: 'AM 12/3/2020 12:37:16'!
PASSED!
!ApiRestTest methodsFor: 'merchant processor protocol' stamp: 'AM 12/3/2020 12:37:31' prior: 50886873!
debit: anAmount from: aCreditCard 
	
	debitBehavior value: anAmount value: aCreditCard.! !
!ApiRestTest methodsFor: 'merchant processor protocol' stamp: 'AM 12/3/2020 12:37:34' prior: 50888607!
debit: anAmount from: aCreditCard 
	
	^debitBehavior value: anAmount value: aCreditCard.! !

TestCase subclass: #ApiRestTest
	instanceVariableNames: 'testObjectsFactory debitBehavior clientValidationBehavior simulatedTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApiRestTest category: 'TusLibros' stamp: 'AM 12/3/2020 12:37:42'!
TestCase subclass: #ApiRestTest
	instanceVariableNames: 'testObjectsFactory debitBehavior clientValidationBehavior simulatedTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApiRestTest methodsFor: 'set up' stamp: 'AM 12/3/2020 12:37:51' prior: 50886856 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	clientValidationBehavior := [:aClientID : aPassword | ].
	simulatedTime := DateAndTime now.! !

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterLastAction stamp: 'AM 12/3/2020 12:37:53'!
PASSED!

!testRun: #ApiRestTest #test01cantCheckOutNonExistingCart stamp: 'AM 12/3/2020 12:37:53'!
PASSED!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 12/3/2020 12:37:53'!
PASSED!

!testRun: #ApiRestTest #test02cantAddItemsToNonExistingCart stamp: 'AM 12/3/2020 12:37:53'!
PASSED!

!testRun: #ApiRestTest #test02cantListCart30MinutesAfterLastAction stamp: 'AM 12/3/2020 12:37:53'!
PASSED!

!testRun: #ApiRestTest #test02checkOutReturnsSaleInformation stamp: 'AM 12/3/2020 12:37:53'!
PASSED!

!testRun: #ApiRestTest #test03cantAddItemsToCart30MinutesAfterLastAction stamp: 'AM 12/3/2020 12:37:53'!
PASSED!

!testRun: #ApiRestTest #test03cantListItemsOfNonExistingCart stamp: 'AM 12/3/2020 12:37:53'!
PASSED!

!testRun: #ApiRestTest #test03differentCheckOutsReturnDifferentSaleIDs stamp: 'AM 12/3/2020 12:37:53'!
PASSED!

!testRun: #ApiRestTest #test04addingItemsToCartResetsExpirationDeadline stamp: 'AM 12/3/2020 12:37:53'!
PASSED!

!testRun: #ApiRestTest #test04cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 12/3/2020 12:37:53'!
PASSED!

!testRun: #ApiRestTest #test05itemIsAddedToCartCorrectly stamp: 'AM 12/3/2020 12:37:53'!
PASSED!

!testRun: #ApiRestTest #test05listingCartResetsExpirationDeadline stamp: 'AM 12/3/2020 12:37:53'!
PASSED!

!testRun: #ApiRestTest #test06cartIsDeletedAfterCheckOut stamp: 'AM 12/3/2020 12:37:53'!
PASSED!

!testRun: #ApiRestTest #test07cartsHaveDifferentIDs stamp: 'AM 12/3/2020 12:37:53'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'AM 12/3/2020 12:37:58'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'AM 12/3/2020 12:37:58'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'AM 12/3/2020 12:37:58'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'AM 12/3/2020 12:37:58'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'AM 12/3/2020 12:37:58'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'AM 12/3/2020 12:37:58'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'AM 12/3/2020 12:37:58'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'AM 12/3/2020 12:37:58'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'AM 12/3/2020 12:38:06'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'AM 12/3/2020 12:38:06'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'AM 12/3/2020 12:38:06'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'AM 12/3/2020 12:38:06'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'AM 12/3/2020 12:38:06'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'AM 12/3/2020 12:38:06'!
PASSED!

!testRun: #ApiRestTest #test01cantCheckOutCart30MinutesAfterLastAction stamp: 'AM 12/3/2020 12:39:48'!
PASSED!

!testRun: #ApiRestTest #test01cantCheckOutNonExistingCart stamp: 'AM 12/3/2020 12:39:48'!
PASSED!

!testRun: #ApiRestTest #test01newCartShouldBeEmpty stamp: 'AM 12/3/2020 12:39:48'!
PASSED!

!testRun: #ApiRestTest #test02cantAddItemsToNonExistingCart stamp: 'AM 12/3/2020 12:39:48'!
PASSED!

!testRun: #ApiRestTest #test02cantListCart30MinutesAfterLastAction stamp: 'AM 12/3/2020 12:39:48'!
PASSED!

!testRun: #ApiRestTest #test02checkOutReturnsSaleInformation stamp: 'AM 12/3/2020 12:39:48'!
PASSED!

!testRun: #ApiRestTest #test03cantAddItemsToCart30MinutesAfterLastAction stamp: 'AM 12/3/2020 12:39:48'!
PASSED!

!testRun: #ApiRestTest #test03cantListItemsOfNonExistingCart stamp: 'AM 12/3/2020 12:39:48'!
PASSED!

!testRun: #ApiRestTest #test03differentCheckOutsReturnDifferentSaleIDs stamp: 'AM 12/3/2020 12:39:49'!
PASSED!

!testRun: #ApiRestTest #test04addingItemsToCartResetsExpirationDeadline stamp: 'AM 12/3/2020 12:39:49'!
PASSED!

!testRun: #ApiRestTest #test04cantCreateCartForInvalidClientIDPasswordCombination stamp: 'AM 12/3/2020 12:39:49'!
PASSED!

!testRun: #ApiRestTest #test05itemIsAddedToCartCorrectly stamp: 'AM 12/3/2020 12:39:49'!
PASSED!

!testRun: #ApiRestTest #test05listingCartResetsExpirationDeadline stamp: 'AM 12/3/2020 12:39:49'!
PASSED!

!testRun: #ApiRestTest #test06cartIsDeletedAfterCheckOut stamp: 'AM 12/3/2020 12:39:49'!
PASSED!

!testRun: #ApiRestTest #test07cartsHaveDifferentIDs stamp: 'AM 12/3/2020 12:39:49'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'AM 12/3/2020 12:39:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'AM 12/3/2020 12:39:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'AM 12/3/2020 12:39:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'AM 12/3/2020 12:39:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'AM 12/3/2020 12:39:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'AM 12/3/2020 12:39:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'AM 12/3/2020 12:39:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'AM 12/3/2020 12:39:54'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'AM 12/3/2020 12:39:57'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'AM 12/3/2020 12:39:57'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'AM 12/3/2020 12:39:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'AM 12/3/2020 12:39:57'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'AM 12/3/2020 12:39:57'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'AM 12/3/2020 12:39:57'!
PASSED!