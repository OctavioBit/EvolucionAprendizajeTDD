----End fileIn of C:\Users\paujimenez\Documents\Ingenieria1\RepoCatedra\20-TusLibros\Iteracion2\TusLibros-33.st----!

!classRemoval: #StoreTestObjectsFactory stamp: 'PJ 11/28/2020 15:28:53'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 'PJ 11/28/2020 15:28:53'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'PJ 11/28/2020 15:28:54'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'PJ 11/28/2020 15:28:54'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'PJ 11/28/2020 15:28:55'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'PJ 11/28/2020 15:28:55'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'PJ 11/28/2020 15:28:55'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\paujimenez\Documents\Ingenieria1\RepoCatedra\20-TusLibros\Iteracion2\TusLibros-32.st----!

!classRemoval: #StoreTestObjectsFactory stamp: 'PJ 11/28/2020 15:29:32'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 'PJ 11/28/2020 15:29:33'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MonthOfYear stamp: 'PJ 11/28/2020 15:29:33'!
Object subclass: #MonthOfYear
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'PJ 11/28/2020 15:29:33'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'PJ 11/28/2020 15:29:34'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'PJ 11/28/2020 15:29:34'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'PJ 11/28/2020 15:29:35'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'PJ 11/28/2020 15:29:35'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\paujimenez\Documents\Ingenieria1\RepoCatedra\20-TusLibros\Iteracion2\TusLibros-33.st----!

TestCase subclass: #TusLibrosInterfazTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!

!classDefinition: #TusLibrosInterfazTest category: 'TusLibros-Iteracion3' stamp: 'PJ 11/28/2020 15:54:20'!
TestCase subclass: #TusLibrosInterfazTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!

!classDefinition: #TusLibrosInterfazTest category: 'TusLibros-Iteracion3' stamp: 'PJ 11/28/2020 15:58:08'!
TestCase subclass: #TusLibrosInterfazTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!
!TusLibrosInterfazTest methodsFor: 'no messages' stamp: 'PJ 11/28/2020 15:58:05' overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !

!classDefinition: #TusLibrosInterface category: 'TusLibros-Iteracion3' stamp: 'PJ 11/28/2020 16:18:29'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!
!TusLibrosInterfazTest methodsFor: 'nil' stamp: 'PJ 11/28/2020 16:18:20'!
test01_CannotCreateCartWithInvalidClient

	|tusLibros|

	tusLibros := TusLibrosInterface withCatalog: StoreTestObjectsFactory.! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/28/2020 16:20:58' prior: 50869586!
test01_CannotCreateCartWithInvalidClient

	|tusLibros|

	tusLibros := TusLibrosInterface withCatalog: StoreTestObjectsFactory defaultCatalog.! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/28/2020 16:47:15' prior: 50869594!
test01_CannotCreateCartWithInvalidClient

	|tusLibros|

	tusLibros := TusLibrosInterface withCatalog: StoreTestObjectsFactory defaultCatalog authenticator: self.
	
	self should: [tusLibros createCartWithClient: '1239' password: 'test1234']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidClientErrorDescription.! !

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/28/2020 16:48:37'!
ERROR!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/28/2020 16:50:24' prior: 50869602!
test01_CannotCreateCartWithInvalidClient

	|tusLibros|

	tusLibros := TusLibrosInterface withCatalog: StoreTestObjectsFactory defaultCatalog authenticator: self.
	
	self should: [tusLibros createCartWithClient: '1239' password: 'test1234']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidClientErrorDescription.! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/28/2020 16:50:41' prior: 50869620!
test01_CannotCreateCartWithInvalidClient

	|tusLibros|

	tusLibros := TusLibrosInterface withCatalog: testObjectsFactory defaultCatalog authenticator: self.
	
	self should: [tusLibros createCartWithClient: '1239' password: 'test1234']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidClientErrorDescription.! !

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/28/2020 16:50:43'!
ERROR!
!TusLibrosInterface class methodsFor: 'instance creation' stamp: 'PJ 11/28/2020 16:51:20'!
withCatalog: aDictionary authenticator: aTusLibrosInterfazTest 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCatalog: aDictionary authenticator: aTusLibrosInterfazTest ! !
!TusLibrosInterface class methodsFor: 'instance creation' stamp: 'PJ 11/28/2020 16:52:34' prior: 50869653!
withCatalog: aCatalog authenticator: anAuthenticator

	^self new initializeWithCatalog: aCatalog authenticator: anAuthenticator ! !

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/28/2020 16:52:40'!
ERROR!

!classDefinition: #TusLibrosInterface category: 'TusLibros-Iteracion3' stamp: 'PJ 11/28/2020 16:53:30'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!

!classDefinition: #TusLibrosInterface category: 'TusLibros-Iteracion3' stamp: 'PJ 11/28/2020 16:53:30'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog authenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!
!TusLibrosInterface methodsFor: 'initialization' stamp: 'PJ 11/28/2020 16:53:30'!
initializeWithCatalog: aCatalog authenticator: anAuthenticator 
	self shouldBeImplemented.
	catalog := aCatalog.
	authenticator := anAuthenticator.! !
!TusLibrosInterface methodsFor: 'initialization' stamp: 'PJ 11/28/2020 16:53:45' prior: 50869692!
initializeWithCatalog: aCatalog authenticator: anAuthenticator 
	
	catalog := aCatalog.
	authenticator := anAuthenticator.! !

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/28/2020 16:53:48'!
ERROR!
!TusLibrosInterface class methodsFor: 'errors' stamp: 'PJ 11/28/2020 16:54:14'!
invalidClientErrorDescription
	self shouldBeImplemented.! !
!TusLibrosInterface class methodsFor: 'errors' stamp: 'PJ 11/28/2020 16:54:43' prior: 50869711!
invalidClientErrorDescription
	^'Invalid Client'! !

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/28/2020 16:54:46'!
ERROR!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/28/2020 16:55:42'!
createCartWithClient: aString password: aString2 
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/28/2020 16:57:18' prior: 50869724!
createCartWithClient: aClientId password: aPassword 

	^self error: self class invalidClientErrorDescription ! !

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/28/2020 16:57:20'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/28/2020 16:57:20'!
PASSED!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/28/2020 16:58:08'!
test02_CannotCreateCartWithInvalidClient

	|tusLibros|

	tusLibros := TusLibrosInterface withCatalog: testObjectsFactory defaultCatalog authenticator: self.
	
	self should: [tusLibros createCartWithClient: '1239' password: 'invalid']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidClientErrorDescription.! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/28/2020 16:58:26' prior: 50869744!
test02_CannotCreateCartWithInvalidClient

	|tusLibros|

	tusLibros := TusLibrosInterface withCatalog: testObjectsFactory defaultCatalog authenticator: self.
	
	self should: [tusLibros createCartWithClient: '1239' password: 'invalid']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidPasswordErrorDescription.! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/28/2020 16:58:56'!
test02_CannotCreateCartWithInvalidPassword

	|tusLibros|

	tusLibros := TusLibrosInterface withCatalog: testObjectsFactory defaultCatalog authenticator: self.
	
	self should: [tusLibros createCartWithClient: '1239' password: 'invalid']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidPasswordErrorDescription.! !

!methodRemoval: TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidClient stamp: 'PJ 11/28/2020 16:59:26'!
test02_CannotCreateCartWithInvalidClient

	|tusLibros|

	tusLibros := TusLibrosInterface withCatalog: testObjectsFactory defaultCatalog authenticator: self.
	
	self should: [tusLibros createCartWithClient: '1239' password: 'invalid']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidPasswordErrorDescription.!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/28/2020 16:59:30'!
ERROR!
!TusLibrosInterface class methodsFor: 'errors' stamp: 'PJ 11/28/2020 16:59:48'!
invalidPasswordErrorDescription
	self shouldBeImplemented.! !
!TusLibrosInterface class methodsFor: 'errors' stamp: 'PJ 11/28/2020 17:00:13' prior: 50869805!
invalidPasswordErrorDescription
	^'Invalid Password'! !

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/28/2020 17:00:19'!
FAILURE!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/28/2020 17:07:59' prior: 50869730!
createCartWithClient: aClientId password: aPassword 

	(authenticator authenticate: aClientId with: aPassword) ifFalse: [^self error: self class invalidClientErrorDescription]! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/28/2020 17:12:56' prior: 50869819!
createCartWithClient: aClientId password: aPassword 

	authenticator authenticate: aClientId with: aPassword.! !

!classDefinition: #TusLibrosInterfazTest category: 'TusLibros-Iteracion3' stamp: 'PJ 11/28/2020 17:14:06'!
TestCase subclass: #TusLibrosInterfazTest
	instanceVariableNames: 'testObjectsFactory authenticateBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!
!TusLibrosInterfazTest methodsFor: 'setup' stamp: 'PJ 11/28/2020 17:14:04' prior: 50869573 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	authenticateBehavior := [:aClientId :aPassword|]! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/28/2020 17:15:31' prior: 50869773!
test02_CannotCreateCartWithInvalidPassword

	|tusLibros|

	tusLibros := TusLibrosInterface withCatalog: testObjectsFactory defaultCatalog authenticator: self.
	authenticateBehavior := [:aClientId :aPassword| ^tusLibros error: tusLibros class invalidPasswordErrorDescription]
	
	self should: [tusLibros createCartWithClient: '1239' password: 'invalid']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidPasswordErrorDescription.! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/28/2020 17:17:12' prior: 50869852!
test02_CannotCreateCartWithInvalidPassword

	|tusLibros|

	tusLibros := TusLibrosInterface withCatalog: testObjectsFactory defaultCatalog authenticator: self.
	authenticateBehavior := [:aClientId :aPassword| self error: tusLibros class invalidPasswordErrorDescription]
	
	self should: [tusLibros createCartWithClient: '1239' password: 'invalid']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidPasswordErrorDescription.! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/28/2020 17:17:43' prior: 50869870!
test02_CannotCreateCartWithInvalidPassword

	|tusLibros|

	tusLibros := TusLibrosInterface withCatalog: testObjectsFactory defaultCatalog authenticator: self.
	authenticateBehavior := [:aClientId :aPassword| self error: TusLibrosInterface invalidPasswordErrorDescription]
	
	self should: [tusLibros createCartWithClient: '1239' password: 'invalid']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidPasswordErrorDescription.! !
!TusLibrosInterfazTest methodsFor: 'nil' stamp: 'PJ 11/28/2020 17:21:52'!
authenticate: aClientId password: aPassword 

	^authenticateBehavior value: aClientId value: aPassword ! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/28/2020 17:22:22' prior: 50869828!
createCartWithClient: aClientId password: aPassword 

	authenticator authenticate: aClientId password: aPassword.! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/28/2020 17:23:17' prior: 50869888!
test02_CannotCreateCartWithInvalidPassword

	|tusLibros|

	tusLibros := TusLibrosInterface withCatalog: testObjectsFactory defaultCatalog authenticator: self.
	authenticateBehavior := [:aClientId :aPassword| self error: TusLibrosInterface invalidPasswordErrorDescription].
	
	self should: [tusLibros createCartWithClient: '1239' password: 'invalid']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidPasswordErrorDescription.! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/28/2020 17:27:31' prior: 50869635!
test01_CannotCreateCartWithInvalidClient

	|tusLibros|

	tusLibros := TusLibrosInterface withCatalog: testObjectsFactory defaultCatalog authenticator: self.
	authenticateBehavior := [:aClientId :aPassword| self error: TusLibrosInterface invalidClientErrorDescription ].
	
	self should: [tusLibros createCartWithClient: '1239' password: 'test1234']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidClientErrorDescription.! !

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/28/2020 17:27:43'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/28/2020 17:27:43'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/28/2020 17:27:43'!
PASSED!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/28/2020 17:31:49'!
test03_InterfaceCanCreateACartAndIsEmpty

	|tusLibros|

	tusLibros := TusLibrosInterface withCatalog: testObjectsFactory defaultCatalog authenticator: self.
	authenticateBehavior := [:aClientId :aPassword| self error: TusLibrosInterface invalidPasswordErrorDescription].
	
	self should: [tusLibros createCartWithClient: '1239' password: 'invalid']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidPasswordErrorDescription.! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/28/2020 17:44:00' prior: 50869966!
test03_InterfaceCanCreateACartAndIsEmpty

	|tusLibros cartId cartList| 

	tusLibros := TusLibrosInterface withCatalog: testObjectsFactory defaultCatalog authenticator: self.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	cartList := tusLibros 	listCart: cartId.
	
	self assert: cartList isEmpty.
	! !

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/28/2020 18:02:45'!
ERROR!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/28/2020 18:03:01'!
listCart: aTusLibrosInterface 
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/28/2020 18:05:21' prior: 50870001!
listCart: aCartId
	^Dictionary new.
	! !

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/28/2020 18:05:25'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/28/2020 18:05:25'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/28/2020 18:05:25'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/28/2020 18:05:25'!
PASSED!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/28/2020 18:11:18'!
test04_InterfaceCannotListAnInvalidCartId

	|tusLibros cartId cartList| 

	tusLibros := TusLibrosInterface withCatalog: testObjectsFactory defaultCatalog authenticator: self.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	cartList := tusLibros 	listCart: 'invalid'.
	
	self assert: cartList isEmpty.
	! !

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/28/2020 18:11:55'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/28/2020 18:11:55'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/28/2020 18:11:55'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/28/2020 18:11:55'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/28/2020 18:11:55'!
PASSED!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/28/2020 18:16:57' prior: 50870025!
test04_InterfaceCannotListAnInvalidCartId

	|tusLibros cartId invalidCartId| 
	
	invalidCartId := 'invalid'.
	tusLibros := TusLibrosInterface withCatalog: testObjectsFactory defaultCatalog authenticator: self.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	
	self assert: (cartId = invalidCartId) not.
	self should: [tusLibros 	listCart: invalidCartId]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/28/2020 18:17:26' prior: 50870058!
test04_InterfaceCannotListAnInvalidCartId

	|tusLibros cartId invalidCartId| 
	
	invalidCartId := 'invalid'.
	tusLibros := TusLibrosInterface withCatalog: testObjectsFactory defaultCatalog authenticator: self.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	
	self assert: (cartId = invalidCartId) not.
	
	self should: [tusLibros 	listCart: invalidCartId]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	! !

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/28/2020 18:17:51'!
ERROR!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/28/2020 18:18:34'!
ERROR!
!TusLibrosInterface class methodsFor: 'errors' stamp: 'PJ 11/28/2020 18:18:47'!
invalidCartIdErrorDescription
	self shouldBeImplemented.! !
!TusLibrosInterface class methodsFor: 'errors' stamp: 'PJ 11/28/2020 18:19:10' prior: 50870103!
invalidCartIdErrorDescription
	^'Invalid CartId'! !

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/28/2020 18:19:13'!
FAILURE!

!classDefinition: #TusLibrosInterface category: 'TusLibros-Iteracion3' stamp: 'PJ 11/28/2020 18:26:31'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog authenticator carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!

!classDefinition: #TusLibrosInterface category: 'TusLibros-Iteracion3' stamp: 'PJ 11/28/2020 18:26:33'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog authenticator carts cartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/28/2020 18:26:28' prior: 50869912!
createCartWithClient: aClientId password: aPassword 

	authenticator authenticate: aClientId password: aPassword.
	
	carts := Cart acceptingItemsOf: catalog.
	cartId := 1.
	^cartId asString.! !

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/28/2020 18:26:42'!
FAILURE!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/28/2020 18:28:37' prior: 50870006!
listCart: aCartId
	cartId = aCartId ifFalse: [^self error: self class invalidCartIdErrorDescription].
	^Dictionary new.
	! !

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/28/2020 18:28:40'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/28/2020 18:28:40'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/28/2020 18:28:40'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/28/2020 18:28:40'!
ERROR!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/28/2020 18:28:40'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/28/2020 18:28:40'!
ERROR!

cartId!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/28/2020 18:30:17' prior: 50870147!
listCart: aCartId
	cartId asString = aCartId ifFalse: [^self error: self class invalidCartIdErrorDescription].
	^Dictionary new.
	! !

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/28/2020 18:30:26'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/28/2020 18:30:41'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/28/2020 18:30:41'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/28/2020 18:30:41'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/28/2020 18:30:41'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/28/2020 18:30:41'!
PASSED!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/28/2020 18:33:16'!
test05_InterfaceCanCreateManyCarts

	|tusLibros cartId invalidCartId| 
	
	invalidCartId := 'invalid'.
	tusLibros := TusLibrosInterface withCatalog: testObjectsFactory defaultCatalog authenticator: self.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	
	self assert: (cartId = invalidCartId) not.
	
	self should: [tusLibros 	listCart: invalidCartId]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/28/2020 18:37:02' prior: 50870207!
test05_InterfaceCanCreateManyCarts

	|tusLibros cartId1 cartId2| 
	
	tusLibros := TusLibrosInterface withCatalog: testObjectsFactory defaultCatalog authenticator: self.
	
	cartId1 := tusLibros createCartWithClient: '1239' password: 'test123'.
	cartId2 := tusLibros createCartWithClient: '1238' password: 'test123'.
	
	self assert: (tusLibros 	listCart: cartId1).
	self assert: (tusLibros 	listCart: cartId2).
	! !

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/28/2020 18:37:06'!
ERROR!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/28/2020 18:37:37' prior: 50870226!
test05_InterfaceCanCreateManyCarts

	|tusLibros cartId1 cartId2| 
	
	tusLibros := TusLibrosInterface withCatalog: testObjectsFactory defaultCatalog authenticator: self.
	
	cartId1 := tusLibros createCartWithClient: '1239' password: 'test123'.
	cartId2 := tusLibros createCartWithClient: '1238' password: 'test123'.
	
	self assert: (tusLibros 	listCart: cartId1) isEmpty.
	self assert: (tusLibros 	listCart: cartId2) isEmpty.
	! !

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/28/2020 18:37:40'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/28/2020 18:37:40'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/28/2020 18:37:40'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/28/2020 18:37:40'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/28/2020 18:37:40'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/28/2020 18:37:40'!
PASSED!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/28/2020 18:39:13' prior: 50870134!
createCartWithClient: aClientId password: aPassword 

	authenticator authenticate: aClientId password: aPassword.
	
	carts := Cart acceptingItemsOf: catalog.
	cartId := cartId + 1.
	^cartId asString.! !
!TusLibrosInterface methodsFor: 'initialization' stamp: 'PJ 11/28/2020 18:39:43' prior: 50869700!
initializeWithCatalog: aCatalog authenticator: anAuthenticator 
	
	catalog := aCatalog.
	authenticator := anAuthenticator.
	cartId := 0.! !

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/28/2020 18:40:09'!
ERROR!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/28/2020 18:44:47' prior: 50870285!
createCartWithClient: aClientId password: aPassword 
	
	|cart cartIdStr|
	authenticator authenticate: aClientId password: aPassword.
	
	cart := Cart acceptingItemsOf: catalog.
	cartId := cartId + 1.
	
	cartIdStr := cartId asString.
	carts at: cartIdStr put: cart.
	
	^cartIdStr.! !

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/28/2020 18:44:51'!
ERROR!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/28/2020 18:47:26' prior: 50870306!
createCartWithClient: aClientId password: aPassword 
	
	|cart cartIdStr|
	authenticator authenticate: aClientId password: aPassword.
	
	cart := Cart acceptingItemsOf: catalog.
	cartId := cartId + 1.
	
	cartIdStr := cartId asString.
	carts add: (OrderedCollection with: cartIdStr with: cart).
	
	^cartIdStr.! !

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/28/2020 18:47:28'!
ERROR!
!TusLibrosInterface methodsFor: 'initialization' stamp: 'PJ 11/28/2020 18:48:05' prior: 50870295!
initializeWithCatalog: aCatalog authenticator: anAuthenticator 
	
	catalog := aCatalog.
	authenticator := anAuthenticator.
	cartId := 0.
	carts := Dictionary new.! !

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/28/2020 18:48:07'!
ERROR!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/28/2020 18:51:06' prior: 50870322!
createCartWithClient: aClientId password: aPassword 
	
	|cart cartIdStr|
	authenticator authenticate: aClientId password: aPassword.
	
	cart := Cart acceptingItemsOf: catalog.
	cartId := cartId + 1.
	
	cartIdStr := cartId asString.
	carts at: cartIdStr put: cart.
	
	^cartIdStr.! !

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/28/2020 18:51:16'!
ERROR!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/28/2020 18:52:40' prior: 50870177!
listCart: aCartId
	(carts includesKey: aCartId) ifFalse: [^self error: self class invalidCartIdErrorDescription].
	^Dictionary new.
	! !

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/28/2020 18:52:42'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/28/2020 18:52:42'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/28/2020 18:52:42'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/28/2020 18:52:42'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/28/2020 18:52:42'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/28/2020 18:52:42'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/28/2020 18:52:51'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/28/2020 18:52:51'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/28/2020 18:52:51'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/28/2020 18:52:51'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/28/2020 18:52:51'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/28/2020 18:52:51'!
PASSED!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/28/2020 19:03:15'!
test06_InterfaceCanAddBooksIntoACart

	|tusLibros cartId cartList bookIsbn| 
	
	bookIsbn := '1234'.
	
	tusLibros := TusLibrosInterface withCatalog: testObjectsFactory defaultCatalog authenticator: self.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	tusLibros addToCart: cartId isbn: bookIsbn quantity: 1.
	
	cartList := tusLibros 	listCart: cartId.
	
	self assert: 1 equals: cartList size.
	self assert: 1 equals: (cartList at: bookIsbn).
	
	! !

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACart stamp: 'PJ 11/28/2020 19:03:22'!
ERROR!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/28/2020 19:03:37'!
addToCart: aString isbn: aString2 quantity: aSmallInteger 
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/28/2020 19:08:11' prior: 50870439!
addToCart: aCartId isbn: aBookIsbn quantity: aBookQuantity
	
	|cart|
	
	cart := carts at: aCartId.
	cart add: aBookQuantity of: aBookIsbn. 
	! !

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACart stamp: 'PJ 11/28/2020 19:08:17'!
ERROR!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/28/2020 19:09:40' prior: 50870418!
test06_InterfaceCanAddBooksIntoACart

	|tusLibros cartId cartList bookIsbn| 
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := TusLibrosInterface withCatalog: testObjectsFactory defaultCatalog authenticator: self.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	tusLibros addToCart: cartId isbn: bookIsbn quantity: 1.
	
	cartList := tusLibros 	listCart: cartId.
	
	self assert: 1 equals: cartList size.
	self assert: 1 equals: (cartList at: bookIsbn).
	
	! !

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACart stamp: 'PJ 11/28/2020 19:09:48'!
FAILURE!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/28/2020 20:42:24' prior: 50870367!
listCart: aCartId
	|cart cartList|
	(carts includesKey: aCartId) ifFalse: [^self error: self class invalidCartIdErrorDescription].
	
	cart := carts at: aCartId.
	cartList := OrderedCollection new.
	cart addItemsWithQuantityTo: cartList.
	^cartList.
	! !

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACart stamp: 'PJ 11/28/2020 20:42:29'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'PJ 11/28/2020 20:43:21'!
addItemsWithQuantityTo: anOrderedCollection 
	self shouldBeImplemented.! !
!Cart methodsFor: 'accessing' stamp: 'PJ 11/28/2020 21:33:58' prior: 50870494!
addItemsWithQuantityTo: anItemList
	items do: [:item |
		(anItemList includes: item) ifFalse: [
			anItemList add: item.
			anItemList add: (self occurrencesOf: item)
		]
	] 
	! !

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACart stamp: 'PJ 11/28/2020 21:34:02'!
FAILURE!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/28/2020 21:36:49' prior: 50870457!
test06_InterfaceCanAddBooksIntoACart

	|tusLibros cartId cartList bookIsbn| 
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := TusLibrosInterface withCatalog: testObjectsFactory defaultCatalog authenticator: self.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	tusLibros addToCart: cartId isbn: bookIsbn quantity: 5.
	
	cartList := tusLibros 	listCart: cartId.
	
	self assert: 2 equals: cartList size.
	self assert: bookIsbn equals: (cartList at: 1).
	self assert: 5 equals: (cartList at: 2).	
	! !

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACart stamp: 'PJ 11/28/2020 21:36:55'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/28/2020 21:36:55'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/28/2020 21:36:55'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/28/2020 21:36:55'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/28/2020 21:36:55'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/28/2020 21:36:55'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACart stamp: 'PJ 11/28/2020 21:36:55'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACart stamp: 'PJ 11/28/2020 21:37:05'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/28/2020 21:37:05'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/28/2020 21:37:05'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/28/2020 21:37:05'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/28/2020 21:37:05'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/28/2020 21:37:05'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACart stamp: 'PJ 11/28/2020 21:37:05'!
PASSED!

----SNAPSHOT----(28 November 2020 21:37:17) CuisUniversity-4384.image priorSource: 17155564!

----QUIT----(28 November 2020 21:38:09) CuisUniversity-4384.image priorSource: 17245809!

----STARTUP---- (29 November 2020 15:18:25) as C:\Users\paujimenez\Documents\Ingenieria1\cuisWindows64\20-windows64-TusLibros3\CuisUniversity-4384.image!

!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 15:49:04'!
test07_InterfaceCannotAddBooksIntoAnInvalidCart

	|tusLibros cartId cartList bookIsbn invalidCartId|
	
	invalidCartId := 'invalid'. 
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := TusLibrosInterface withCatalog: testObjectsFactory defaultCatalog authenticator: self.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	
	self assert: (invalidCartId = cartId) not.
	
	self should: [tusLibros addToCart: invalidCartId isbn: bookIsbn quantity: 5]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 15:50:02' prior: 50870593!
test07_InterfaceCannotAddBooksIntoAnInvalidCart

	|tusLibros cartId bookIsbn invalidCartId|
	
	invalidCartId := 'invalid'. 
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := TusLibrosInterface withCatalog: testObjectsFactory defaultCatalog authenticator: self.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	
	self assert: (invalidCartId = cartId) not.
	
	self should: [tusLibros addToCart: invalidCartId isbn: bookIsbn quantity: 5]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
		
	self should: [tusLibros listCart: invalidCartId]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	
	! !

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/29/2020 15:50:07'!
FAILURE!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/29/2020 15:55:10' prior: 50870445!
addToCart: aCartId isbn: aBookIsbn quantity: aBookQuantity
	
	|cart|
	self on: [
		cart := carts at: aCartId.
		cart add: aBookQuantity of: aBookIsbn. 	
	] do: [
		^self error: self class invalidCartIdErrorDescription.
	]
	
	! !

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/29/2020 15:55:36'!
ERROR!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/29/2020 15:56:53' prior: 50870647!
addToCart: aCartId isbn: aBookIsbn quantity: aBookQuantity
	
	|cart|
	[
		cart := carts at: aCartId.
		cart add: aBookQuantity of: aBookIsbn. 	
	]
	on: Error
 	do: [
		^self error: self class invalidCartIdErrorDescription.
	]
	
	! !

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/29/2020 15:58:48'!
PASSED!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/29/2020 15:58:53'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/29/2020 15:58:53'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/29/2020 15:58:53'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/29/2020 15:58:53'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/29/2020 15:58:53'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/29/2020 15:58:53'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACart stamp: 'PJ 11/29/2020 15:58:53'!
PASSED!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/29/2020 15:58:53'!
PASSED!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/29/2020 16:02:54'!
listCartWithQuantity: aCart
	|cartList|
	
	cartList := OrderedCollection new.
	aCart addItemsWithQuantityTo: cartList.
	^cartList.
	! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/29/2020 16:05:00' prior: 50870480!
listCart: aCartId
	|cart|
	
	[cart := carts at: aCartId]
	on: Error
	do: [^self error: self class invalidCartIdErrorDescription].
	
	^self listCartWithQuantity: cart.
	! !

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/29/2020 16:05:07'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/29/2020 16:05:07'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/29/2020 16:05:07'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/29/2020 16:05:07'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/29/2020 16:05:07'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/29/2020 16:05:07'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACart stamp: 'PJ 11/29/2020 16:05:07'!
PASSED!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/29/2020 16:05:07'!
PASSED!

----SNAPSHOT----(29 November 2020 16:06:42) CuisUniversity-4384.image priorSource: 17245903!
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'PJ 11/29/2020 16:08:06'!
createTusLibrosInterface
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'PJ 11/29/2020 16:09:40'!
createTusLibrosInterface: anAuthenticator
	
	^TusLibrosInterface withCatalog: self defaultCatalog authenticator: anAuthenticator! !

!methodRemoval: StoreTestObjectsFactory #createTusLibrosInterface stamp: 'PJ 11/29/2020 16:09:54'!
createTusLibrosInterface
	
	^Cart acceptingItemsOf: self defaultCatalog!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 16:11:56' prior: 50869937!
test01_CannotCreateCartWithInvalidClient

	|tusLibros|

	tusLibros := testObjectsFactory createTusLibrosInterface: self.
	authenticateBehavior := [:aClientId :aPassword| self error: TusLibrosInterface invalidClientErrorDescription ].
	
	self should: [tusLibros createCartWithClient: '1239' password: 'test1234']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidClientErrorDescription.! !

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/29/2020 16:12:00'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/29/2020 16:12:00'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/29/2020 16:12:00'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/29/2020 16:12:00'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/29/2020 16:12:00'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/29/2020 16:12:00'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACart stamp: 'PJ 11/29/2020 16:12:00'!
PASSED!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/29/2020 16:12:00'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'interface' stamp: 'PJ 11/29/2020 16:12:30'!
createTusLibrosInterfaceWith: anAuthenticator
	
	^TusLibrosInterface withCatalog: self defaultCatalog authenticator: anAuthenticator! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 16:12:30' prior: 50870772!
test01_CannotCreateCartWithInvalidClient

	|tusLibros|

	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self.
	authenticateBehavior := [:aClientId :aPassword| self error: TusLibrosInterface invalidClientErrorDescription ].
	
	self should: [tusLibros createCartWithClient: '1239' password: 'test1234']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidClientErrorDescription.! !

!methodRemoval: StoreTestObjectsFactory #createTusLibrosInterface: stamp: 'PJ 11/29/2020 16:12:30'!
createTusLibrosInterface: anAuthenticator
	
	^TusLibrosInterface withCatalog: self defaultCatalog authenticator: anAuthenticator!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 16:13:03' prior: 50869919!
test02_CannotCreateCartWithInvalidPassword

	|tusLibros|

	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self.
	authenticateBehavior := [:aClientId :aPassword| self error: TusLibrosInterface invalidPasswordErrorDescription].
	
	self should: [tusLibros createCartWithClient: '1239' password: 'invalid']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidPasswordErrorDescription.! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 16:13:10' prior: 50869984!
test03_InterfaceCanCreateACartAndIsEmpty

	|tusLibros cartId cartList| 

	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	cartList := tusLibros 	listCart: cartId.
	
	self assert: cartList isEmpty.
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 16:13:22' prior: 50870077!
test04_InterfaceCannotListAnInvalidCartId

	|tusLibros cartId invalidCartId| 
	
	invalidCartId := 'invalid'.
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	
	self assert: (cartId = invalidCartId) not.
	
	self should: [tusLibros 	listCart: invalidCartId]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 16:13:33' prior: 50870246!
test05_InterfaceCanCreateManyCarts

	|tusLibros cartId1 cartId2| 
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self.
	
	cartId1 := tusLibros createCartWithClient: '1239' password: 'test123'.
	cartId2 := tusLibros createCartWithClient: '1238' password: 'test123'.
	
	self assert: (tusLibros 	listCart: cartId1) isEmpty.
	self assert: (tusLibros 	listCart: cartId2) isEmpty.
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 16:13:40' prior: 50870512!
test06_InterfaceCanAddBooksIntoACart

	|tusLibros cartId cartList bookIsbn| 
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	tusLibros addToCart: cartId isbn: bookIsbn quantity: 5.
	
	cartList := tusLibros 	listCart: cartId.
	
	self assert: 2 equals: cartList size.
	self assert: bookIsbn equals: (cartList at: 1).
	self assert: 5 equals: (cartList at: 2).	
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 16:13:49' prior: 50870616!
test07_InterfaceCannotAddBooksIntoAnInvalidCart

	|tusLibros cartId bookIsbn invalidCartId|
	
	invalidCartId := 'invalid'. 
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	
	self assert: (invalidCartId = cartId) not.
	
	self should: [tusLibros addToCart: invalidCartId isbn: bookIsbn quantity: 5]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
		
	self should: [tusLibros listCart: invalidCartId]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	
	! !

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/29/2020 16:14:01'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/29/2020 16:14:01'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/29/2020 16:14:01'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/29/2020 16:14:01'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/29/2020 16:14:01'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/29/2020 16:14:01'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACart stamp: 'PJ 11/29/2020 16:14:01'!
PASSED!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/29/2020 16:14:01'!
PASSED!

----SNAPSHOT----(29 November 2020 16:14:06) CuisUniversity-4384.image priorSource: 17251194!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 16:47:11'!
test06_InterfaceCanAddBooksIntoACartAndListThem

	|tusLibros cartId cartList bookIsbn| 
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	tusLibros addToCart: cartId isbn: bookIsbn quantity: 5.
	
	cartList := tusLibros 	listCart: cartId.
	
	self assert: 2 equals: cartList size.
	self assert: bookIsbn equals: (cartList at: 1).
	self assert: 5 equals: (cartList at: 2).	
	! !

!methodRemoval: TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACart stamp: 'PJ 11/29/2020 16:47:12'!
test06_InterfaceCanAddBooksIntoACart

	|tusLibros cartId cartList bookIsbn| 
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	tusLibros addToCart: cartId isbn: bookIsbn quantity: 5.
	
	cartList := tusLibros 	listCart: cartId.
	
	self assert: 2 equals: cartList size.
	self assert: bookIsbn equals: (cartList at: 1).
	self assert: 5 equals: (cartList at: 2).	
	!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 16:57:49'!
test08_InterfaceCannotCheckoutAnInvalidCart

	|tusLibros cartId bookIsbn invalidCartId|
	
	invalidCartId := 'invalid'. 
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	tusLibros addToCart: cartId isbn: bookIsbn quantity: 2.
	
	self assert: (invalidCartId = cartId) not.
	
	self should: [tusLibros checkoutCart: invalidCartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez']
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	
	! !

!testRun: #TusLibrosInterfazTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/29/2020 16:58:03'!
ERROR!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/29/2020 16:58:20'!
checkoutCart: aString cardNumeber: aString2 expDate: aString3 ownerName: aString4 
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/29/2020 17:00:06' prior: 50871057!
checkoutCart: aCartId cardNumeber: aCreditCardNumber expDate: anExpDate ownerName: aCreditCardOwner
	^self error: self class invalidCartIdErrorDescription 
	! !

!testRun: #TusLibrosInterfazTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/29/2020 17:00:09'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/29/2020 17:00:09'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/29/2020 17:00:09'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/29/2020 17:00:09'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/29/2020 17:00:09'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/29/2020 17:00:09'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/29/2020 17:00:09'!
PASSED!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/29/2020 17:00:09'!
PASSED!

!testRun: #TusLibrosInterfazTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/29/2020 17:00:09'!
PASSED!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 17:05:07'!
test09_InterfaceCannotCheckoutAnEmptyCart

	|tusLibros cartId|
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	
	self should: [tusLibros checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez']
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface emptyCartErrorDescription.
	
	! !

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/29/2020 17:05:11'!
ERROR!
!TusLibrosInterface class methodsFor: 'errors' stamp: 'PJ 11/29/2020 17:05:25'!
emptyCartErrorDescription
	self shouldBeImplemented.! !
!TusLibrosInterface class methodsFor: 'errors' stamp: 'PJ 11/29/2020 17:05:56' prior: 50871126!
emptyCartErrorDescription
	^'Your cart is empty'! !

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/29/2020 17:05:58'!
FAILURE!

!classDefinition: #TusLibrosInterface category: 'TusLibros-Iteracion3' stamp: 'PJ 11/29/2020 17:12:26'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog authenticator carts cartId salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!
!TusLibrosInterface methodsFor: 'initialization' stamp: 'PJ 11/29/2020 17:12:19' prior: 50870339!
initializeWithCatalog: aCatalog authenticator: anAuthenticator 
	
	catalog := aCatalog.
	authenticator := anAuthenticator.
	cartId := 0.
	carts := Dictionary new.
	salesBook := OrderedCollection new.! !

!classDefinition: #TusLibrosInterface category: 'TusLibros-Iteracion3' stamp: 'PJ 11/29/2020 17:25:36'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog authenticator carts cartId salesBook merchantProcesor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/29/2020 17:25:33' prior: 50871064!
checkoutCart: aCartId cardNumeber: aCreditCardNumber expDate: anExpDate ownerName: aCreditCardOwner
	
	|cart cashier today|
	
	[cart := carts at: aCartId ]
	on: Error
	do: [^self error: self class invalidCartIdErrorDescription].
	 
	today := DateAndTime now.
	cashier := Cashier toCheckout: cart charging: cart total throught: merchantProcesor on: today registeringOn: salesBook.
	! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/29/2020 17:32:53' prior: 50871168!
checkoutCart: aCartId cardNumeber: aCreditCardNumber expDate: anExpDate ownerName: aCreditCardOwner
	
	|cart cashier today|
	
	[cart := carts at: aCartId ]
	on: Error
	do: [^self error: self class invalidCartIdErrorDescription].
	
	[
	today := DateAndTime now.
	cashier := Cashier toCheckout: cart charging: cart total throught: merchantProcesor on: today registeringOn: salesBook.
	]
	on: Error
	do: [^self error: self class emptyCartErrorDescription].
	
	cashier checkOut.
	
	^self transactionId
	! !
!TusLibrosInterface class methodsFor: 'instance creation' stamp: 'PJ 11/29/2020 17:35:40'!
withCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: aMerchantProcessor 

	^self new initializeWithCatalog: aCatalog authenticator: anAuthenticator ! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 17:35:40' prior: 50870817!
createTusLibrosInterfaceWith: anAuthenticator
	
	^TusLibrosInterface withCatalog: self defaultCatalog authenticator: anAuthenticator merchantProcessor: self! !

!methodRemoval: TusLibrosInterface class #withCatalog:authenticator: stamp: 'PJ 11/29/2020 17:35:40'!
withCatalog: aCatalog authenticator: anAuthenticator

	^self new initializeWithCatalog: aCatalog authenticator: anAuthenticator !
!TusLibrosInterface methodsFor: 'initialization' stamp: 'PJ 11/29/2020 17:36:57'!
initializeWithCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: aMerchantProcessor  
	
	catalog := aCatalog.
	authenticator := anAuthenticator.
	cartId := 0.
	carts := Dictionary new.
	salesBook := OrderedCollection new.! !
!TusLibrosInterface class methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 17:36:57' prior: 50871202!
withCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: aMerchantProcessor 

	^self new initializeWithCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: self ! !

!methodRemoval: TusLibrosInterface #initializeWithCatalog:authenticator: stamp: 'PJ 11/29/2020 17:36:57'!
initializeWithCatalog: aCatalog authenticator: anAuthenticator 
	
	catalog := aCatalog.
	authenticator := anAuthenticator.
	cartId := 0.
	carts := Dictionary new.
	salesBook := OrderedCollection new.!
!TusLibrosInterface methodsFor: 'initialization' stamp: 'PJ 11/29/2020 17:37:21' prior: 50871226!
initializeWithCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: aMerchantProcessor  
	
	catalog := aCatalog.
	authenticator := anAuthenticator.
	merchantProcesor := aMerchantProcessor.
	cartId := 0.
	carts := Dictionary new.
	salesBook := OrderedCollection new.! !

Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog authenticator carts cartId salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!

!classDefinition: #TusLibrosInterface category: 'TusLibros-Iteracion3' stamp: 'PJ 11/29/2020 17:38:03'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog authenticator carts cartId salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 17:38:03' prior: 50871256!
initializeWithCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: aMerchantProcessor  
	
	catalog := aCatalog.
	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	cartId := 0.
	carts := Dictionary new.
	salesBook := OrderedCollection new.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 17:38:03' prior: 50871183!
checkoutCart: aCartId cardNumeber: aCreditCardNumber expDate: anExpDate ownerName: aCreditCardOwner
	
	|cart cashier today|
	
	[cart := carts at: aCartId ]
	on: Error
	do: [^self error: self class invalidCartIdErrorDescription].
	
	[
	today := DateAndTime now.
	cashier := Cashier toCheckout: cart charging: cart total throught: merchantProcessor on: today registeringOn: salesBook.
	]
	on: Error
	do: [^self error: self class emptyCartErrorDescription].
	
	cashier checkOut.
	
	^self transactionId
	! !
!StoreTestObjectsFactory methodsFor: 'interface' stamp: 'PJ 11/29/2020 17:45:37'!
createTusLibrosInterfaceWith: anAuthenticator andMerchant: aMerchantProcessor 
	
	^TusLibrosInterface withCatalog: self defaultCatalog authenticator: anAuthenticator merchantProcessor: self! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 17:45:37' prior: 50870897!
test05_InterfaceCanCreateManyCarts

	|tusLibros cartId1 cartId2| 
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new.
	
	cartId1 := tusLibros createCartWithClient: '1239' password: 'test123'.
	cartId2 := tusLibros createCartWithClient: '1238' password: 'test123'.
	
	self assert: (tusLibros 	listCart: cartId1) isEmpty.
	self assert: (tusLibros 	listCart: cartId2) isEmpty.
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 17:45:37' prior: 50870825!
test01_CannotCreateCartWithInvalidClient

	|tusLibros|

	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new.
	authenticateBehavior := [:aClientId :aPassword| self error: TusLibrosInterface invalidClientErrorDescription ].
	
	self should: [tusLibros createCartWithClient: '1239' password: 'test1234']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidClientErrorDescription.! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 17:45:37' prior: 50870849!
test02_CannotCreateCartWithInvalidPassword

	|tusLibros|

	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new.
	authenticateBehavior := [:aClientId :aPassword| self error: TusLibrosInterface invalidPasswordErrorDescription].
	
	self should: [tusLibros createCartWithClient: '1239' password: 'invalid']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidPasswordErrorDescription.! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 17:45:37' prior: 50870933!
test07_InterfaceCannotAddBooksIntoAnInvalidCart

	|tusLibros cartId bookIsbn invalidCartId|
	
	invalidCartId := 'invalid'. 
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	
	self assert: (invalidCartId = cartId) not.
	
	self should: [tusLibros addToCart: invalidCartId isbn: bookIsbn quantity: 5]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
		
	self should: [tusLibros listCart: invalidCartId]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 17:45:37' prior: 50870879!
test04_InterfaceCannotListAnInvalidCartId

	|tusLibros cartId invalidCartId| 
	
	invalidCartId := 'invalid'.
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	
	self assert: (cartId = invalidCartId) not.
	
	self should: [tusLibros 	listCart: invalidCartId]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 17:45:37' prior: 50871106!
test09_InterfaceCannotCheckoutAnEmptyCart

	|tusLibros cartId|
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	
	self should: [tusLibros checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez']
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface emptyCartErrorDescription.
	
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 17:45:37' prior: 50871030!
test08_InterfaceCannotCheckoutAnInvalidCart

	|tusLibros cartId bookIsbn invalidCartId|
	
	invalidCartId := 'invalid'. 
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	tusLibros addToCart: cartId isbn: bookIsbn quantity: 2.
	
	self assert: (invalidCartId = cartId) not.
	
	self should: [tusLibros checkoutCart: invalidCartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez']
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 17:45:37' prior: 50870991!
test06_InterfaceCanAddBooksIntoACartAndListThem

	|tusLibros cartId cartList bookIsbn| 
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	tusLibros addToCart: cartId isbn: bookIsbn quantity: 5.
	
	cartList := tusLibros 	listCart: cartId.
	
	self assert: 2 equals: cartList size.
	self assert: bookIsbn equals: (cartList at: 1).
	self assert: 5 equals: (cartList at: 2).	
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 17:45:37' prior: 50870866!
test03_InterfaceCanCreateACartAndIsEmpty

	|tusLibros cartId cartList| 

	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	cartList := tusLibros 	listCart: cartId.
	
	self assert: cartList isEmpty.
	! !

!methodRemoval: StoreTestObjectsFactory #createTusLibrosInterfaceWith: stamp: 'PJ 11/29/2020 17:45:37'!
createTusLibrosInterfaceWith: anAuthenticator
	
	^TusLibrosInterface withCatalog: self defaultCatalog authenticator: anAuthenticator merchantProcessor: self!
!StoreTestObjectsFactory methodsFor: 'interface' stamp: 'PJ 11/29/2020 17:45:46' prior: 50871317!
createTusLibrosInterfaceWith: anAuthenticator andMerchant: aMerchantProcessor 
	
	^TusLibrosInterface withCatalog: self defaultCatalog authenticator: anAuthenticator merchantProcessor: aMerchantProcessor! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/29/2020 17:47:07' prior: 50871298!
checkoutCart: aCartId cardNumeber: aCreditCardNumber expDate: anExpDate ownerName: aCreditCardOwner
	
	|cart cashier today|
	
	[cart := carts at: aCartId ]
	on: Error
	do: [^self error: self class invalidCartIdErrorDescription].
	
	[
	today := DateAndTime now.
	cashier := Cashier toCheckout: cart charging: cart total throught: merchantProcessor on: today registeringOn: salesBook.
	]
	on: Error
	do: [^self error: self class emptyCartErrorDescription].
	
	cashier checkOut.
	
	^self transactionId
	! !

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/29/2020 17:47:10'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/29/2020 17:47:10'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/29/2020 17:47:10'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/29/2020 17:47:10'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/29/2020 17:47:10'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/29/2020 17:47:10'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/29/2020 17:47:10'!
PASSED!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/29/2020 17:47:10'!
PASSED!

!testRun: #TusLibrosInterfazTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/29/2020 17:47:10'!
PASSED!

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/29/2020 17:47:10'!
PASSED!

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/29/2020 17:47:18'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/29/2020 17:47:18'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/29/2020 17:47:18'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/29/2020 17:47:18'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/29/2020 17:47:18'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/29/2020 17:47:18'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/29/2020 17:47:18'!
PASSED!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/29/2020 17:47:18'!
PASSED!

!testRun: #TusLibrosInterfazTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/29/2020 17:47:18'!
PASSED!

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/29/2020 17:47:18'!
PASSED!

----SNAPSHOT----(29 November 2020 17:49:17) CuisUniversity-4384.image priorSource: 17258786!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 17:55:48'!
test10_InterfaceSuccessfullyMakesASale

	|tusLibros cartId bookIsbn transactionId|
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	tusLibros addToCart: cartId isbn: bookIsbn quantity: 2.
	
	transactionId := tusLibros checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	self assert: transactionId isNotNil.
	
	! !

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/29/2020 17:55:50'!
ERROR!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/29/2020 18:00:20' prior: 50871522!
checkoutCart: aCartId cardNumeber: aCreditCardNumber expDate: anExpDate ownerName: aCreditCardOwner
	
	|cart cashier creditCard today|
	
	[cart := carts at: aCartId ]
	on: Error
	do: [^self error: self class invalidCartIdErrorDescription].
	
	creditCard := CreditCard expiringOn: anExpDate.
	
	[
	today := DateAndTime now.
	cashier := Cashier toCheckout: cart charging: creditCard throught: merchantProcessor on: today registeringOn: salesBook.
	]
	on: Error
	do: [^self error: self class emptyCartErrorDescription].
	
	cashier checkOut.
	
	^self transactionId
	! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/29/2020 18:05:13' prior: 50871642!
checkoutCart: aCartId cardNumeber: aCreditCardNumber expDate: anExpDate ownerName: aCreditCardOwner
	
	|cart cashier creditCard today|
	
	[cart := carts at: aCartId ]
	on: Error
	do: [^self error: self class invalidCartIdErrorDescription].
	
	creditCard := CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber + 1) "Change this!! anExpDate".
	
	[
	today := DateAndTime now.
	cashier := Cashier toCheckout: cart charging: creditCard throught: merchantProcessor on: today registeringOn: salesBook.
	]
	on: Error
	do: [^self error: self class emptyCartErrorDescription].
	
	cashier checkOut.
	
	^self transactionId
	! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/29/2020 18:05:59' prior: 50871663!
checkoutCart: aCartId cardNumeber: aCreditCardNumber expDate: anExpDate ownerName: aCreditCardOwner
	
	|cart cashier creditCard today|
	
	[cart := carts at: aCartId ]
	on: Error
	do: [^self error: self class invalidCartIdErrorDescription].
	
	creditCard := CreditCard expiringOn: (Month month: 5 year: 2025) "Change this!! anExpDate".
	
	[
	today := DateAndTime now.
	cashier := Cashier toCheckout: cart charging: creditCard throught: merchantProcessor on: today registeringOn: salesBook.
	]
	on: Error
	do: [^self error: self class emptyCartErrorDescription].
	
	cashier checkOut.
	
	^self transactionId
	! !

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/29/2020 18:06:08'!
ERROR!
!TusLibrosInterface class methodsFor: 'instance creation' stamp: 'PJ 11/29/2020 18:08:22' prior: 50871237!
withCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: aMerchantProcessor 

	^self new initializeWithCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: aMerchantProcessor ! !

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/29/2020 18:08:27'!
ERROR!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 18:14:02' prior: 50871618!
test10_InterfaceSuccessfullyMakesASale

	|tusLibros cartId bookIsbn transactionId|
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	tusLibros addToCart: cartId isbn: bookIsbn quantity: 2.
	
	transactionId := tusLibros checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	self assert: transactionId isNotNil.
	
	! !

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/29/2020 18:16:32'!
ERROR!
!TusLibrosInterface methodsFor: 'private operations' stamp: 'PJ 11/29/2020 18:16:54'!
transactionId
	self shouldBeImplemented.! !

!classDefinition: #TusLibrosInterface category: 'TusLibros-Iteracion3' stamp: 'PJ 11/29/2020 18:18:55'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog authenticator carts cartId salesBook merchantProcessor transactionId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!
!TusLibrosInterface methodsFor: 'private operations' stamp: 'PJ 11/29/2020 18:18:52' prior: 50871750!
transactionId
	transactionId := transactionId + 1.
	^transactionId asString! !

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/29/2020 18:19:08'!
ERROR!
!TusLibrosInterface methodsFor: 'initialization' stamp: 'PJ 11/29/2020 18:19:49' prior: 50871285!
initializeWithCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: aMerchantProcessor  
	
	catalog := aCatalog.
	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	cartId := 0.
	transactionId := 0.
	carts := Dictionary new.
	salesBook := OrderedCollection new.! !

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/29/2020 18:19:56'!
ERROR!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 18:20:55' prior: 50871726!
test10_InterfaceSuccessfullyMakesASale

	|tusLibros cartId bookIsbn transactionId|
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	tusLibros addToCart: cartId isbn: bookIsbn quantity: 2.
	
	transactionId := tusLibros checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	self assert: transactionId isEmpty not.
	
	! !

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/29/2020 18:20:59'!
PASSED!

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/29/2020 18:21:04'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/29/2020 18:21:04'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/29/2020 18:21:04'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/29/2020 18:21:04'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/29/2020 18:21:04'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/29/2020 18:21:04'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/29/2020 18:21:04'!
PASSED!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/29/2020 18:21:04'!
PASSED!

!testRun: #TusLibrosInterfazTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/29/2020 18:21:04'!
PASSED!

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/29/2020 18:21:04'!
PASSED!

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/29/2020 18:21:04'!
PASSED!

----SNAPSHOT----(29 November 2020 18:21:09) CuisUniversity-4384.image priorSource: 17278843!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 18:21:37' prior: 50871426!
test09_InterfaceCannotCheckoutAnEmptyCart

	|tusLibros cartId|
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	
	self should: [tusLibros checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez']
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface emptyCartErrorDescription.
	
	! !

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/29/2020 18:21:49'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/29/2020 18:21:49'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/29/2020 18:21:49'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/29/2020 18:21:49'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/29/2020 18:21:49'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/29/2020 18:21:49'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/29/2020 18:21:49'!
PASSED!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/29/2020 18:21:49'!
PASSED!

!testRun: #TusLibrosInterfazTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/29/2020 18:21:49'!
PASSED!

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/29/2020 18:21:49'!
PASSED!

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/29/2020 18:21:49'!
PASSED!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 18:22:02' prior: 50871860!
test09_InterfaceCannotCheckoutAnEmptyCart

	|tusLibros cartId|
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	
	self should: [tusLibros checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez']
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface emptyCartErrorDescription.
	
	! !
!CartTest methodsFor: 'tests' stamp: 'PJ 11/29/2020 18:45:48'!
test09CartReturnsAnEmptyListWhenItDoesntHaveItems

	| cart cartList|
	
	cart := testObjectsFactory createCart.
	cartList := OrderedCollection new.
	
	cart listCartWithQuantity: cartList.
	self assert: cartList isEmpty.! !

!testRun: #CartTest #test09CartReturnsAnEmptyListWhenItDoesntHaveItems stamp: 'PJ 11/29/2020 18:45:54'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'PJ 11/29/2020 18:48:23'!
test09CartDoesntAddAnyItemsIntoTheListWhenItIsEmpty

	| cart cartList|
	
	cart := testObjectsFactory createCart.
	cartList := OrderedCollection new.
	
	cart addItemsWithQuantityTo: cartList.
	self assert: cartList isEmpty.! !

!methodRemoval: CartTest #test09CartReturnsAnEmptyListWhenItDoesntHaveItems stamp: 'PJ 11/29/2020 18:48:34'!
test09CartReturnsAnEmptyListWhenItDoesntHaveItems

	| cart cartList|
	
	cart := testObjectsFactory createCart.
	cartList := OrderedCollection new.
	
	cart listCartWithQuantity: cartList.
	self assert: cartList isEmpty.!

!testRun: #CartTest #test09CartDoesntAddAnyItemsIntoTheListWhenItIsEmpty stamp: 'PJ 11/29/2020 18:48:37'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PJ 11/29/2020 18:48:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PJ 11/29/2020 18:48:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PJ 11/29/2020 18:48:37'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PJ 11/29/2020 18:48:37'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PJ 11/29/2020 18:48:37'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PJ 11/29/2020 18:48:37'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PJ 11/29/2020 18:48:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PJ 11/29/2020 18:48:37'!
PASSED!

!testRun: #CartTest #test09CartDoesntAddAnyItemsIntoTheListWhenItIsEmpty stamp: 'PJ 11/29/2020 18:48:37'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'PJ 11/29/2020 18:55:42'!
test10CartAddsItsItemsIntoTheListWhenItIsNotEmpty

	| cart cartList bookIsbn|
	
	cartList := OrderedCollection new.
	cart := testObjectsFactory createCart.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cart add: 3 of: bookIsbn.
	
	cart addItemsWithQuantityTo: cartList.
	
	self assert: 2 equals: cartList size.
	self assert: bookIsbn equals: (cartList at: 1).
	self assert: 3 equals: (cartList at: 2).! !

!testRun: #CartTest #test10CartAddsItsItemsIntoTheListWhenItIsNotEmpty stamp: 'PJ 11/29/2020 18:55:47'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PJ 11/29/2020 18:55:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PJ 11/29/2020 18:55:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PJ 11/29/2020 18:55:47'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PJ 11/29/2020 18:55:47'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PJ 11/29/2020 18:55:47'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PJ 11/29/2020 18:55:47'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PJ 11/29/2020 18:55:47'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PJ 11/29/2020 18:55:47'!
PASSED!

!testRun: #CartTest #test09CartDoesntAddAnyItemsIntoTheListWhenItIsEmpty stamp: 'PJ 11/29/2020 18:55:47'!
PASSED!

!testRun: #CartTest #test10CartAddsItsItemsIntoTheListWhenItIsNotEmpty stamp: 'PJ 11/29/2020 18:55:47'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'PJ 11/29/2020 19:00:24'!
secondItemSellByTheStore
	
	^ 'validBook2'! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'PJ 11/29/2020 19:01:07'!
secondItemSellByTheStorePrice
	
	^25! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'PJ 11/29/2020 19:02:10' prior: 50869519!
defaultCatalog
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStorePrice;
		at: self secondItemSellByTheStore put: self secondItemSellByTheStorePrice;
		yourself ! !

!testRun: #CartTest #test10CartAddsItsItemsIntoTheListWhenItIsNotEmpty stamp: 'PJ 11/29/2020 19:02:27'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PJ 11/29/2020 19:02:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PJ 11/29/2020 19:02:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PJ 11/29/2020 19:02:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PJ 11/29/2020 19:02:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PJ 11/29/2020 19:02:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PJ 11/29/2020 19:02:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PJ 11/29/2020 19:02:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PJ 11/29/2020 19:02:27'!
PASSED!

!testRun: #CartTest #test09CartDoesntAddAnyItemsIntoTheListWhenItIsEmpty stamp: 'PJ 11/29/2020 19:02:27'!
PASSED!

!testRun: #CartTest #test10CartAddsItsItemsIntoTheListWhenItIsNotEmpty stamp: 'PJ 11/29/2020 19:02:27'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'PJ 11/29/2020 19:03:39' prior: 50872002!
test10CartAddsItsItemsIntoTheListWhenItIsNotEmpty

	| cart cartList bookIsbn1 bookIsbn2|
	
	cartList := OrderedCollection new.
	cart := testObjectsFactory createCart.
	bookIsbn1 := testObjectsFactory itemSellByTheStore.
	bookIsbn2 := testObjectsFactory secondItemSellByTheStore.
	
	cart add: 3 of: bookIsbn1.
	
	cart addItemsWithQuantityTo: cartList.
	
	self assert: 2 equals: cartList size.
	self assert: bookIsbn1 equals: (cartList at: 1).
	self assert: 3 equals: (cartList at: 2).! !
!CartTest methodsFor: 'tests' stamp: 'PJ 11/29/2020 19:06:16' prior: 50872108!
test10CartAddsItsItemsIntoTheListWhenItIsNotEmpty

	| cart cartList bookIsbn1 bookIsbn2|
	
	cartList := OrderedCollection new.
	cart := testObjectsFactory createCart.
	bookIsbn1 := testObjectsFactory itemSellByTheStore.
	bookIsbn2 := testObjectsFactory secondItemSellByTheStore.
	
	cart add: 3 of: bookIsbn1.
	cart add: 6 of: bookIsbn2.
	cart add: 2 of: bookIsbn1.
	
	cart addItemsWithQuantityTo: cartList.
	
	self assert: 4 equals: cartList size.
	
	self assert: bookIsbn1 equals: (cartList at: 1).
	self assert: 5 equals: (cartList at: 2).
	
	self assert: bookIsbn2 equals: (cartList at: 3).
	self assert: 6 equals: (cartList at: 4).! !

!testRun: #CartTest #test10CartAddsItsItemsIntoTheListWhenItIsNotEmpty stamp: 'PJ 11/29/2020 19:06:18'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PJ 11/29/2020 19:06:18'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PJ 11/29/2020 19:06:18'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PJ 11/29/2020 19:06:18'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PJ 11/29/2020 19:06:18'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PJ 11/29/2020 19:06:18'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PJ 11/29/2020 19:06:18'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PJ 11/29/2020 19:06:18'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PJ 11/29/2020 19:06:18'!
PASSED!

!testRun: #CartTest #test09CartDoesntAddAnyItemsIntoTheListWhenItIsEmpty stamp: 'PJ 11/29/2020 19:06:18'!
PASSED!

!testRun: #CartTest #test10CartAddsItsItemsIntoTheListWhenItIsNotEmpty stamp: 'PJ 11/29/2020 19:06:18'!
PASSED!

!testRun: #CartTest #test10CartAddsItsItemsIntoTheListWhenItIsNotEmpty stamp: 'PJ 11/29/2020 19:06:34'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PJ 11/29/2020 19:06:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PJ 11/29/2020 19:06:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PJ 11/29/2020 19:06:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PJ 11/29/2020 19:06:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PJ 11/29/2020 19:06:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PJ 11/29/2020 19:06:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PJ 11/29/2020 19:06:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PJ 11/29/2020 19:06:34'!
PASSED!

!testRun: #CartTest #test09CartDoesntAddAnyItemsIntoTheListWhenItIsEmpty stamp: 'PJ 11/29/2020 19:06:34'!
PASSED!

!testRun: #CartTest #test10CartAddsItsItemsIntoTheListWhenItIsNotEmpty stamp: 'PJ 11/29/2020 19:06:34'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PJ 11/29/2020 19:06:34'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PJ 11/29/2020 19:06:34'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PJ 11/29/2020 19:06:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PJ 11/29/2020 19:06:34'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PJ 11/29/2020 19:06:34'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PJ 11/29/2020 19:06:34'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/29/2020 19:06:34'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/29/2020 19:06:34'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/29/2020 19:06:34'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/29/2020 19:06:34'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/29/2020 19:06:34'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/29/2020 19:06:34'!
PASSED!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/29/2020 19:06:34'!
PASSED!

!testRun: #TusLibrosInterfazTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/29/2020 19:06:34'!
PASSED!

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/29/2020 19:06:34'!
PASSED!

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/29/2020 19:06:34'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'PJ 11/29/2020 20:04:27' prior: 50869306!
test04CheckoutRegistersASale

	| cart cashier salesBook total cartList|

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 	cartList := OrderedCollection new.
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
	cart addItemsWithQuantityTo: cartList.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.
	self assert: (salesBook at: 2) itemsSold = cartList.
	! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PJ 11/29/2020 20:04:33'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'PJ 11/29/2020 20:05:17' prior: 50872278!
test04CheckoutRegistersASale

	| cart cashier salesBook total cartList|

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 	cartList := OrderedCollection new.
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
	cart addItemsWithQuantityTo: cartList.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.
	self assert: salesBook first itemsSold = cartList.
	! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PJ 11/29/2020 20:05:19'!
ERROR!
!Sale methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 20:05:31'!
itemsSold
	self shouldBeImplemented.! !

!classDefinition: #Sale category: 'TusLibros-Iteracion3' stamp: 'PJ 11/29/2020 20:06:36'!
Object subclass: #Sale
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!
!Sale methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 20:06:33' prior: 50872328!
itemsSold
	^items copy! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PJ 11/29/2020 20:06:44'!
FAILURE!
!Sale class methodsFor: 'instance creation' stamp: 'PJ 11/29/2020 20:10:22'!
of: aTotal withItems: aSoldItemsList 

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 20:10:22' prior: 50869194!
createSale

	^ Sale of: total withItems: self
! !

!methodRemoval: Sale class #of: stamp: 'PJ 11/29/2020 20:10:22'!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal !
!Cashier methodsFor: 'checkout - private' stamp: 'PJ 11/29/2020 20:12:57' prior: 50872354!
createSale

	|cartList|
	
	cartList := OrderedCollection new.
	cart addItemsWithQuantityTo: cartList.
	
	^ Sale of: total withItems: cartList.
! !
!Sale methodsFor: 'initialization' stamp: 'PJ 11/29/2020 20:14:40'!
initializeTotal: aTotal withItems: aSoldItemsList 

	total := aTotal ! !
!Sale class methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 20:14:40' prior: 50872347!
of: aTotal withItems: aSoldItemsList 

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal withItems: aSoldItemsList ! !

!methodRemoval: Sale #initializeTotal: stamp: 'PJ 11/29/2020 20:14:40'!
initializeTotal: aTotal

	total := aTotal !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PJ 11/29/2020 20:14:48'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PJ 11/29/2020 20:15:02'!
ERROR!
!Sale methodsFor: 'initialization' stamp: 'PJ 11/29/2020 20:16:05' prior: 50872371!
initializeTotal: aTotal withItems: aSoldItemsList 

	total := aTotal.
	items := aSoldItemsList.! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PJ 11/29/2020 20:16:08'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PJ 11/29/2020 20:16:21'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PJ 11/29/2020 20:16:21'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PJ 11/29/2020 20:16:21'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PJ 11/29/2020 20:16:21'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PJ 11/29/2020 20:16:21'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PJ 11/29/2020 20:16:21'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PJ 11/29/2020 20:16:21'!
PASSED!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 20:25:52'!
test11_NewInterfaceHasNoSales

	|tusLibros purchaseList|
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp.
	
	purchaseList := 	tusLibros listPurchasesFor: '1234' password: 'test1234'.
	
	self assert: purchaseList isEmpty.
	
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 20:26:00' prior: 50872426!
test11_NewInterfaceHasNoSales

	|tusLibros purchaseList|
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp.
	
	purchaseList := 	tusLibros listPurchasesFor: '1234' password: 'test1234'.
	
	self assert: purchaseList isEmpty.! !

!testRun: #TusLibrosInterfazTest #test11_NewInterfaceHasNoSales stamp: 'PJ 11/29/2020 20:26:02'!
ERROR!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/29/2020 20:26:14'!
listPurchasesFor: aString password: aString2 
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/29/2020 20:26:28' prior: 50872454!
listPurchasesFor: aString password: aString2 
	^OrderedCollection new.! !

!testRun: #TusLibrosInterfazTest #test11_NewInterfaceHasNoSales stamp: 'PJ 11/29/2020 20:26:30'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/29/2020 20:26:30'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/29/2020 20:26:30'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/29/2020 20:26:30'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/29/2020 20:26:30'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/29/2020 20:26:30'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/29/2020 20:26:30'!
PASSED!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/29/2020 20:26:30'!
PASSED!

!testRun: #TusLibrosInterfazTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/29/2020 20:26:30'!
PASSED!

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/29/2020 20:26:30'!
PASSED!

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/29/2020 20:26:30'!
PASSED!

!testRun: #TusLibrosInterfazTest #test11_NewInterfaceHasNoSales stamp: 'PJ 11/29/2020 20:26:30'!
PASSED!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 20:28:51'!
test12_CannotListPurchasesForAnInvalidClient

	|tusLibros purchaseList|
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp.
	
	purchaseList := 	tusLibros listPurchasesFor: '1234' password: 'test1234'.
	
	self assert: purchaseList isEmpty.! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 20:32:00' prior: 50872509!
test12_CannotListPurchasesForAnInvalidClient

	|tusLibros |
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp.
	authenticateBehavior := [:aClientId :aPassword| self error: TusLibrosInterface invalidClientErrorDescription ].	
	
	self should: [tusLibros listPurchasesFor: '1234' password: 'test1234']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidClientErrorDescription.! !

!testRun: #TusLibrosInterfazTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PJ 11/29/2020 20:32:06'!
FAILURE!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/29/2020 20:33:58' prior: 50872460!
listPurchasesFor: aClientId password: aPassword
	
	authenticator authenticate: aClientId password: aPassword.
	^OrderedCollection new.! !

!testRun: #TusLibrosInterfazTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PJ 11/29/2020 20:34:20'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/29/2020 20:34:20'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/29/2020 20:34:20'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/29/2020 20:34:20'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/29/2020 20:34:20'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/29/2020 20:34:20'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/29/2020 20:34:20'!
PASSED!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/29/2020 20:34:20'!
PASSED!

!testRun: #TusLibrosInterfazTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/29/2020 20:34:20'!
PASSED!

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/29/2020 20:34:20'!
PASSED!

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/29/2020 20:34:20'!
PASSED!

!testRun: #TusLibrosInterfazTest #test11_NewInterfaceHasNoSales stamp: 'PJ 11/29/2020 20:34:20'!
PASSED!

!testRun: #TusLibrosInterfazTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PJ 11/29/2020 20:34:20'!
PASSED!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 20:35:27'!
test12_CannotListPurchasesForAClientWithAnInvalidPassword

	|tusLibros |
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp.
	authenticateBehavior := [:aClientId :aPassword| self error: TusLibrosInterface invalidPasswordErrorDescription].	
	
	self should: [tusLibros listPurchasesFor: '1234' password: 'test1234']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidPasswordErrorDescription .! !

!testRun: #TusLibrosInterfazTest #test12_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PJ 11/29/2020 20:35:36'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/29/2020 20:35:36'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/29/2020 20:35:36'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/29/2020 20:35:36'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/29/2020 20:35:36'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/29/2020 20:35:36'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/29/2020 20:35:36'!
PASSED!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/29/2020 20:35:36'!
PASSED!

!testRun: #TusLibrosInterfazTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/29/2020 20:35:36'!
PASSED!

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/29/2020 20:35:36'!
PASSED!

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/29/2020 20:35:36'!
PASSED!

!testRun: #TusLibrosInterfazTest #test11_NewInterfaceHasNoSales stamp: 'PJ 11/29/2020 20:35:36'!
PASSED!

!testRun: #TusLibrosInterfazTest #test12_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PJ 11/29/2020 20:35:36'!
PASSED!

!testRun: #TusLibrosInterfazTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PJ 11/29/2020 20:35:36'!
PASSED!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 20:35:47'!
test13_CannotListPurchasesForAClientWithAnInvalidPassword

	|tusLibros |
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp.
	authenticateBehavior := [:aClientId :aPassword| self error: TusLibrosInterface invalidPasswordErrorDescription].	
	
	self should: [tusLibros listPurchasesFor: '1234' password: 'test1234']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidPasswordErrorDescription .! !

!methodRemoval: TusLibrosInterfazTest #test12_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PJ 11/29/2020 20:35:47'!
test12_CannotListPurchasesForAClientWithAnInvalidPassword

	|tusLibros |
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp.
	authenticateBehavior := [:aClientId :aPassword| self error: TusLibrosInterface invalidPasswordErrorDescription].	
	
	self should: [tusLibros listPurchasesFor: '1234' password: 'test1234']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidPasswordErrorDescription .!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 20:46:35'!
test14_InterfaceCanListClientPurchases

	|tusLibros cartId bookIsbn purchaseList clientId password total quantity|
	
	clientId := '1239'.
	password := 'test123'.
	quantity := 2.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	total := testObjectsFactory itemSellByTheStorePrice * quantity.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp.
	
	cartId := tusLibros createCartWithClient: clientId password: password .
	tusLibros addToCart: cartId isbn: bookIsbn quantity: quantity.
	
	tusLibros checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	purchaseList := tusLibros listPurchasesFor: clientId password: password.
	
	self assert: 3 equals: purchaseList size.
	self assert: bookIsbn equals: (purchaseList at: 1).
	self assert: quantity equals: (purchaseList at: 2).
	self assert: total equals: (purchaseList at: 3).
	! !

----SNAPSHOT----(29 November 2020 20:46:46) CuisUniversity-4384.image priorSource: 17286563!

!testRun: #TusLibrosInterfazTest #test14_InterfaceCanListClientPurchases stamp: 'PJ 11/29/2020 20:52:27'!
FAILURE!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 20:54:47'!
test15_InterfaceCanListMoreThanOnePurchaseFromAClient

	|tusLibros cartId bookIsbn purchaseList clientId password total quantity|
	
	self shouldBeImplemented.
	
	clientId := '1239'.
	password := 'test123'.
	quantity := 2.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	total := testObjectsFactory itemSellByTheStorePrice * quantity.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp.
	
	cartId := tusLibros createCartWithClient: clientId password: password .
	tusLibros addToCart: cartId isbn: bookIsbn quantity: quantity.
	
	tusLibros checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	purchaseList := tusLibros listPurchasesFor: clientId password: password.
	
	self assert: 3 equals: purchaseList size.
	self assert: bookIsbn equals: (purchaseList at: 1).
	self assert: quantity equals: (purchaseList at: 2).
	self assert: total equals: (purchaseList at: 3).
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 20:55:17'!
test14_InterfaceCanListOneClientPurchase

	|tusLibros cartId bookIsbn purchaseList clientId password total quantity|
	
	clientId := '1239'.
	password := 'test123'.
	quantity := 2.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	total := testObjectsFactory itemSellByTheStorePrice * quantity.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp.
	
	cartId := tusLibros createCartWithClient: clientId password: password .
	tusLibros addToCart: cartId isbn: bookIsbn quantity: quantity.
	
	tusLibros checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	purchaseList := tusLibros listPurchasesFor: clientId password: password.
	
	self assert: 3 equals: purchaseList size.
	self assert: bookIsbn equals: (purchaseList at: 1).
	self assert: quantity equals: (purchaseList at: 2).
	self assert: total equals: (purchaseList at: 3).
	! !

!methodRemoval: TusLibrosInterfazTest #test14_InterfaceCanListClientPurchases stamp: 'PJ 11/29/2020 20:55:17'!
test14_InterfaceCanListClientPurchases

	|tusLibros cartId bookIsbn purchaseList clientId password total quantity|
	
	clientId := '1239'.
	password := 'test123'.
	quantity := 2.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	total := testObjectsFactory itemSellByTheStorePrice * quantity.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp.
	
	cartId := tusLibros createCartWithClient: clientId password: password .
	tusLibros addToCart: cartId isbn: bookIsbn quantity: quantity.
	
	tusLibros checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	purchaseList := tusLibros listPurchasesFor: clientId password: password.
	
	self assert: 3 equals: purchaseList size.
	self assert: bookIsbn equals: (purchaseList at: 1).
	self assert: quantity equals: (purchaseList at: 2).
	self assert: total equals: (purchaseList at: 3).
	!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 20:55:54'!
test16_InterfaceCanListPurchasesFromMoreThanOneClient

	|tusLibros cartId bookIsbn purchaseList clientId password total quantity|
	
	self shouldBeImplemented.
	
	clientId := '1239'.
	password := 'test123'.
	quantity := 2.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	total := testObjectsFactory itemSellByTheStorePrice * quantity.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp.
	
	cartId := tusLibros createCartWithClient: clientId password: password .
	tusLibros addToCart: cartId isbn: bookIsbn quantity: quantity.
	
	tusLibros checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	purchaseList := tusLibros listPurchasesFor: clientId password: password.
	
	self assert: 3 equals: purchaseList size.
	self assert: bookIsbn equals: (purchaseList at: 1).
	self assert: quantity equals: (purchaseList at: 2).
	self assert: total equals: (purchaseList at: 3).
	! !

!testRun: #TusLibrosInterfazTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/29/2020 20:56:01'!
ERROR!

----SNAPSHOT----(29 November 2020 20:56:07) CuisUniversity-4384.image priorSource: 17314812!

!testRun: #TusLibrosInterfazTest #test14_InterfaceCanListOneClientPurchase stamp: 'PJ 11/29/2020 23:17:45'!
FAILURE!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/29/2020 23:28:01' prior: 50872544!
listPurchasesFor: aClientId password: aPassword
	
	|purchaseList|
	
	authenticator authenticate: aClientId password: aPassword.
	
	purchaseList := OrderedCollection new.
	
	salesBook do: [:sale |
		purchaseList addAllLast: sale itemsSold.
		purchaseList add: sale total.
	].

	^purchaseList ! !

!testRun: #TusLibrosInterfazTest #test14_InterfaceCanListOneClientPurchase stamp: 'PJ 11/29/2020 23:28:05'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/29/2020 23:28:05'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/29/2020 23:28:05'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/29/2020 23:28:05'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/29/2020 23:28:05'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/29/2020 23:28:05'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/29/2020 23:28:05'!
PASSED!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/29/2020 23:28:05'!
PASSED!

!testRun: #TusLibrosInterfazTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/29/2020 23:28:05'!
PASSED!

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/29/2020 23:28:05'!
PASSED!

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/29/2020 23:28:05'!
PASSED!

!testRun: #TusLibrosInterfazTest #test11_NewInterfaceHasNoSales stamp: 'PJ 11/29/2020 23:28:05'!
PASSED!

!testRun: #TusLibrosInterfazTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PJ 11/29/2020 23:28:05'!
PASSED!

!testRun: #TusLibrosInterfazTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PJ 11/29/2020 23:28:05'!
PASSED!

!testRun: #TusLibrosInterfazTest #test14_InterfaceCanListOneClientPurchase stamp: 'PJ 11/29/2020 23:28:05'!
PASSED!

!testRun: #TusLibrosInterfazTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PJ 11/29/2020 23:28:05'!
ERROR!

!testRun: #TusLibrosInterfazTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/29/2020 23:28:05'!
ERROR!

!testRun: #TusLibrosInterfazTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PJ 11/29/2020 23:28:23'!
ERROR!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 23:35:16' prior: 50872746!
test15_InterfaceCanListMoreThanOnePurchaseFromAClient

	|tusLibros cartId1 cartId2 bookIsbn1 bookIsbn2 purchaseList clientId password total quantity|
	
	clientId := '1239'.
	password := 'test123'.
	quantity := 2.
	bookIsbn1 := testObjectsFactory itemSellByTheStore.
	bookIsbn2 := testObjectsFactory secondItemSellByTheStore.
	total := (testObjectsFactory itemSellByTheStorePrice * quantity) + (testObjectsFactory secondItemSellByTheStorePrice * (quantity + 1)).
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp.
	
	cartId1 := tusLibros createCartWithClient: clientId password: password .
	tusLibros addToCart: cartId1 isbn: bookIsbn1 quantity: quantity.
	tusLibros checkoutCart: cartId1 cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	cartId2 := tusLibros createCartWithClient: clientId password: password .
	tusLibros addToCart: cartId2 isbn: bookIsbn2 quantity: (quantity + 1).
	tusLibros checkoutCart: cartId2 cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	purchaseList := tusLibros listPurchasesFor: clientId password: password.
	
	self assert: 5 equals: purchaseList size.
	self assert: bookIsbn1 equals: (purchaseList at: 1).
	self assert: quantity equals: (purchaseList at: 2).
	self assert: bookIsbn2 equals: (purchaseList at: 3).
	self assert: (quantity + 1) equals: (purchaseList at: 4).
	self assert: total equals: (purchaseList at: 5).
	! !

!testRun: #TusLibrosInterfazTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PJ 11/29/2020 23:35:22'!
FAILURE!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/29/2020 23:38:16' prior: 50872889!
listPurchasesFor: aClientId password: aPassword
	
	|purchaseList total|
	
	authenticator authenticate: aClientId password: aPassword.
	
	total := 0.
	purchaseList := OrderedCollection new.
	
	salesBook do: [:sale |
		purchaseList addAllLast: sale itemsSold.
		total := total + sale total.
	].
	
	purchaseList add: total.
	^purchaseList ! !

!testRun: #TusLibrosInterfazTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PJ 11/29/2020 23:38:19'!
PASSED!

!testRun: #TusLibrosInterfazTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/29/2020 23:38:27'!
ERROR!
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 23:45:38' prior: 50872845!
test16_InterfaceCanListPurchasesFromMoreThanOneClient
	
	|tusLibros cartId1 cartId2 bookIsbn1 bookIsbn2 purchaseList1 purchaseList2 clientId1 clientId2 password total1 total2 quantity|
	
	clientId1 := '1239'.
	clientId2 := '5678'.
	password := 'test123'.
	quantity := 2.
	bookIsbn1 := testObjectsFactory itemSellByTheStore.
	bookIsbn2 := testObjectsFactory secondItemSellByTheStore.
	total1 := (testObjectsFactory itemSellByTheStorePrice * quantity).
	total2 := (testObjectsFactory secondItemSellByTheStorePrice * (quantity + 1)).
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp.
	
	cartId1 := tusLibros createCartWithClient: clientId1 password: password .
	tusLibros addToCart: cartId1 isbn: bookIsbn1 quantity: quantity.
	tusLibros checkoutCart: cartId1 cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	purchaseList1 := tusLibros listPurchasesFor: clientId1 password: password.
	
	cartId2 := tusLibros createCartWithClient: clientId2 password: password .
	tusLibros addToCart: cartId2 isbn: bookIsbn2 quantity: (quantity + 1).
	tusLibros checkoutCart: cartId2 cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	purchaseList2 := tusLibros listPurchasesFor: clientId2 password: password.
	
	self assert: 3 equals: purchaseList1 size.
	self assert: bookIsbn1 equals: (purchaseList1 at: 1).
	self assert: quantity equals: (purchaseList1 at: 2).
	self assert: total1 equals: (purchaseList1 at: 3).
	
	self assert: 3 equals: purchaseList2 size.
	self assert: bookIsbn2 equals: (purchaseList2 at: 1).
	self assert: (quantity + 1) equals: (purchaseList2 at: 2).
	self assert: total2 equals: (purchaseList2 at: 3).
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/29/2020 23:46:43' prior: 50873046!
test16_InterfaceCanListPurchasesFromMoreThanOneClient
	
	|tusLibros cartId1 cartId2 bookIsbn1 bookIsbn2 purchaseList1 purchaseList2 clientId1 clientId2 password total1 total2 quantity|
	
	clientId1 := '1239'.
	clientId2 := '5678'.
	password := 'test123'.
	quantity := 2.
	bookIsbn1 := testObjectsFactory itemSellByTheStore.
	bookIsbn2 := testObjectsFactory secondItemSellByTheStore.
	total1 := (testObjectsFactory itemSellByTheStorePrice * quantity).
	total2 := (testObjectsFactory secondItemSellByTheStorePrice * (quantity + 1)).
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp.
	
	cartId1 := tusLibros createCartWithClient: clientId1 password: password .
	tusLibros addToCart: cartId1 isbn: bookIsbn1 quantity: quantity.
	tusLibros checkoutCart: cartId1 cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	purchaseList1 := tusLibros listPurchasesFor: clientId1 password: password.
	
	cartId2 := tusLibros createCartWithClient: clientId2 password: password .
	tusLibros addToCart: cartId2 isbn: bookIsbn2 quantity: (quantity + 1).
	tusLibros checkoutCart: cartId2 cardNumeber: '14556458' expDate: '102030' ownerName: 'Ana Sanchez'.
	
	purchaseList2 := tusLibros listPurchasesFor: clientId2 password: password.
	
	self assert: 3 equals: purchaseList1 size.
	self assert: bookIsbn1 equals: (purchaseList1 at: 1).
	self assert: quantity equals: (purchaseList1 at: 2).
	self assert: total1 equals: (purchaseList1 at: 3).
	
	self assert: 3 equals: purchaseList2 size.
	self assert: bookIsbn2 equals: (purchaseList2 at: 1).
	self assert: (quantity + 1) equals: (purchaseList2 at: 2).
	self assert: total2 equals: (purchaseList2 at: 3).
	! !

!testRun: #TusLibrosInterfazTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/29/2020 23:46:53'!
FAILURE!
!TusLibrosInterface methodsFor: 'initialization' stamp: 'PJ 11/29/2020 23:48:57' prior: 50871775!
initializeWithCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: aMerchantProcessor  
	
	catalog := aCatalog.
	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	cartId := 0.
	transactionId := 0.
	carts := Dictionary new.
	salesBook := Dictionary new.! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/29/2020 23:58:05' prior: 50870351!
createCartWithClient: aClientId password: aPassword 
	
	|cart cartIdStr clientSalesBook|
	authenticator authenticate: aClientId password: aPassword.
	
	clientSalesBook := salesBook at: aClientId ifAbsent: [salesBook at: aClientId put: OrderedCollection new].
	
	cart := Cart acceptingItemsOf: catalog.
	cartId := cartId + 1.
	
	cartIdStr := cartId asString.
	carts at: cartIdStr put: cart.
	
	^cartIdStr.! !

#('awe' 23)!

self first!

self second!

car := 45.!

#('awe' 23 car)!

{'awe'. 23. car}!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 00:15:16' prior: 50873177!
createCartWithClient: aClientId password: aPassword 
	
	|cart cartIdStr clientSalesBook|
	authenticator authenticate: aClientId password: aPassword.
	
	clientSalesBook := salesBook at: aClientId ifAbsent: [salesBook at: aClientId put: OrderedCollection new].
	
	cart := Cart acceptingItemsOf: catalog.
	cartId := cartId + 1.
	
	cartIdStr := cartId asString.
	carts at: cartIdStr put: {cart. clientSalesBook}.
	
	^cartIdStr.! !

!testRun: #TusLibrosInterfazTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/30/2020 00:16:03'!
ERROR!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 00:19:05' prior: 50870661!
addToCart: aCartId isbn: aBookIsbn quantity: aBookQuantity
	
	|cart|
	[
		cart := (carts at: aCartId) first.
		cart add: aBookQuantity of: aBookIsbn. 	
	]
	on: Error
 	do: [
		^self error: self class invalidCartIdErrorDescription.
	]
	
	! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 00:23:43' prior: 50871686!
checkoutCart: aCartId cardNumeber: aCreditCardNumber expDate: anExpDate ownerName: aCreditCardOwner
	
	|clientAccount clientCart clientSalesBook cashier creditCard today|
	
	[clientAccount := carts at: aCartId ]
	on: Error
	do: [^self error: self class invalidCartIdErrorDescription].
	
	clientCart := clientAccount first.
	clientSalesBook := clientAccount second.
	creditCard := CreditCard expiringOn: (Month month: 5 year: 2025) "Change this!! anExpDate".
	
	[
	today := DateAndTime now.
	cashier := Cashier toCheckout: clientCart charging: creditCard throught: merchantProcessor on: today registeringOn: clientSalesBook.
	]
	on: Error
	do: [^self error: self class emptyCartErrorDescription].
	
	cashier checkOut.
	
	^self transactionId
	! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 00:27:13' prior: 50873023!
listPurchasesFor: aClientId password: aPassword
	
	|purchaseList total clientSalesBook|
	
	authenticator authenticate: aClientId password: aPassword.
	
	total := 0.
	purchaseList := OrderedCollection new.
	
	clientSalesBook := salesBook at: aClientId ifAbsent: [^purchaseList ].
	
	clientSalesBook do: [:sale |
		purchaseList addAllLast: sale itemsSold.
		total := total + sale total.
	].
	
	purchaseList add: total.
	^purchaseList ! !

!testRun: #TusLibrosInterfazTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/30/2020 00:32:43'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/30/2020 00:32:43'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/30/2020 00:32:43'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/30/2020 00:32:43'!
ERROR!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/30/2020 00:32:43'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/30/2020 00:32:43'!
ERROR!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/30/2020 00:32:43'!
ERROR!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/30/2020 00:32:43'!
PASSED!

!testRun: #TusLibrosInterfazTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/30/2020 00:32:43'!
PASSED!

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 00:32:43'!
PASSED!

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/30/2020 00:32:43'!
PASSED!

!testRun: #TusLibrosInterfazTest #test11_NewInterfaceHasNoSales stamp: 'PJ 11/30/2020 00:32:43'!
PASSED!

!testRun: #TusLibrosInterfazTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PJ 11/30/2020 00:32:43'!
PASSED!

!testRun: #TusLibrosInterfazTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PJ 11/30/2020 00:32:43'!
PASSED!

!testRun: #TusLibrosInterfazTest #test14_InterfaceCanListOneClientPurchase stamp: 'PJ 11/30/2020 00:32:43'!
PASSED!

!testRun: #TusLibrosInterfazTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PJ 11/30/2020 00:32:43'!
PASSED!

!testRun: #TusLibrosInterfazTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/30/2020 00:32:43'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/30/2020 00:33:11'!
ERROR!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/30/2020 00:33:16'!
ERROR!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 00:34:40' prior: 50870713!
listCart: aCartId
	|clientAccount clientCart|
	
	[clientAccount := carts at: aCartId]
	on: Error
	do: [^self error: self class invalidCartIdErrorDescription].
	
	clientCart  := clientAccount first.
	^self listCartWithQuantity: clientCart .
	! !

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/30/2020 00:34:43'!
PASSED!

!testRun: #TusLibrosInterfazTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/30/2020 00:35:04'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/30/2020 00:35:04'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/30/2020 00:35:04'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/30/2020 00:35:04'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/30/2020 00:35:04'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/30/2020 00:35:04'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/30/2020 00:35:04'!
PASSED!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/30/2020 00:35:04'!
PASSED!

!testRun: #TusLibrosInterfazTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/30/2020 00:35:04'!
PASSED!

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 00:35:04'!
PASSED!

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/30/2020 00:35:04'!
PASSED!

!testRun: #TusLibrosInterfazTest #test11_NewInterfaceHasNoSales stamp: 'PJ 11/30/2020 00:35:04'!
PASSED!

!testRun: #TusLibrosInterfazTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PJ 11/30/2020 00:35:04'!
PASSED!

!testRun: #TusLibrosInterfazTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PJ 11/30/2020 00:35:04'!
PASSED!

!testRun: #TusLibrosInterfazTest #test14_InterfaceCanListOneClientPurchase stamp: 'PJ 11/30/2020 00:35:04'!
PASSED!

!testRun: #TusLibrosInterfazTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PJ 11/30/2020 00:35:04'!
PASSED!

!testRun: #TusLibrosInterfazTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/30/2020 00:35:04'!
PASSED!

----SNAPSHOT----(30 November 2020 00:35:21) CuisUniversity-4384.image priorSource: 17319401!

!testRun: #TusLibrosInterfazTest #test11_NewInterfaceHasNoSales stamp: 'PJ 11/30/2020 00:36:30'!
PASSED!
!TusLibrosInterface methodsFor: 'private operations' stamp: 'PJ 11/30/2020 00:40:53'!
cartId
	cartId := cartId + 1.
	^cartId asString! !
!TusLibrosInterface methodsFor: 'private operations' stamp: 'PJ 11/30/2020 00:41:33'!
nextCartId
	cartId := cartId + 1.
	^cartId asString! !

!methodRemoval: TusLibrosInterface #cartId stamp: 'PJ 11/30/2020 00:41:33'!
cartId
	cartId := cartId + 1.
	^cartId asString!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 00:43:55' prior: 50873196!
createCartWithClient: aClientId password: aPassword 
	
	|cart cartIdStr clientSalesBook|
	authenticator authenticate: aClientId password: aPassword.
	
	clientSalesBook := salesBook at: aClientId ifAbsent: [salesBook at: aClientId put: OrderedCollection new].
	
	cart := Cart acceptingItemsOf: catalog.
	cartIdStr := self nextCartId.
	carts at: cartIdStr put: {cart. clientSalesBook}.
	
	^cartIdStr.! !

!testRun: #TusLibrosInterfazTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #CartTest #test09CartDoesntAddAnyItemsIntoTheListWhenItIsEmpty stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #CartTest #test10CartAddsItsItemsIntoTheListWhenItIsNotEmpty stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #TusLibrosInterfazTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #TusLibrosInterfazTest #test11_NewInterfaceHasNoSales stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #TusLibrosInterfazTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #TusLibrosInterfazTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #TusLibrosInterfazTest #test14_InterfaceCanListOneClientPurchase stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #TusLibrosInterfazTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

!testRun: #TusLibrosInterfazTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/30/2020 00:46:16'!
PASSED!

----SNAPSHOT----(30 November 2020 00:46:24) CuisUniversity-4384.image priorSource: 17336652!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 01:20:13'!
assertOnInvalidCartIdFor: aBlock
	
	aBlock on: Error 	do: [^self error: self class invalidCartIdErrorDescription.	]
	
	! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 01:21:11' prior: 50873217!
addToCart: aCartId isbn: aBookIsbn quantity: aBookQuantity
	
	|cart|
	self assertOnInvalidCartIdFor:
	[
		cart := (carts at: aCartId) first.
		cart add: aBookQuantity of: aBookIsbn. 	
	]
	
	! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 01:21:57' prior: 50873228!
checkoutCart: aCartId cardNumeber: aCreditCardNumber expDate: anExpDate ownerName: aCreditCardOwner
	
	|clientAccount clientCart clientSalesBook cashier creditCard today|
	
	self assertOnInvalidCartIdFor: [clientAccount := carts at: aCartId ].
	
	clientCart := clientAccount first.
	clientSalesBook := clientAccount second.
	creditCard := CreditCard expiringOn: (Month month: 5 year: 2025) "Change this!! anExpDate".
	
	[
	today := DateAndTime now.
	cashier := Cashier toCheckout: clientCart charging: creditCard throught: merchantProcessor on: today registeringOn: clientSalesBook.
	]
	on: Error
	do: [^self error: self class emptyCartErrorDescription].
	
	cashier checkOut.
	
	^self transactionId
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #CartTest #test09CartDoesntAddAnyItemsIntoTheListWhenItIsEmpty stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #CartTest #test10CartAddsItsItemsIntoTheListWhenItIsNotEmpty stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #TusLibrosInterfazTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #TusLibrosInterfazTest #test11_NewInterfaceHasNoSales stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #TusLibrosInterfazTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #TusLibrosInterfazTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #TusLibrosInterfazTest #test14_InterfaceCanListOneClientPurchase stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #TusLibrosInterfazTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!

!testRun: #TusLibrosInterfazTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/30/2020 01:22:02'!
PASSED!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 01:22:39' prior: 50873343!
listCart: aCartId
	|clientAccount clientCart|
	
	self assertOnInvalidCartIdFor: [clientAccount := carts at: aCartId].
	
	clientCart  := clientAccount first.
	^self listCartWithQuantity: clientCart .
	! !
!TusLibrosInterface methodsFor: 'asserts' stamp: 'PJ 11/30/2020 01:27:58'!
assertOnEmptyCartFor: aBlock
	
	aBlock on: Error 	do: [^self error: self class emptyCartErrorDescription	]
	
	! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 01:28:39' prior: 50873593!
checkoutCart: aCartId cardNumeber: aCreditCardNumber expDate: anExpDate ownerName: aCreditCardOwner
	
	|clientAccount clientCart clientSalesBook cashier creditCard today|
	
	self assertOnInvalidCartIdFor: [clientAccount := carts at: aCartId ].
	
	clientCart := clientAccount first.
	clientSalesBook := clientAccount second.
	creditCard := CreditCard expiringOn: (Month month: 5 year: 2025) "Change this!! anExpDate".
	
	self assertOnEmptyCartFor:[
		today := DateAndTime now.
		cashier := Cashier toCheckout: clientCart charging: creditCard throught: merchantProcessor on: today registeringOn: clientSalesBook.
	].
	
	cashier checkOut.
	
	^self transactionId
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PJ 11/30/2020 01:28:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #CartTest #test09CartDoesntAddAnyItemsIntoTheListWhenItIsEmpty stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #CartTest #test10CartAddsItsItemsIntoTheListWhenItIsNotEmpty stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #TusLibrosInterfazTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #TusLibrosInterfazTest #test11_NewInterfaceHasNoSales stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #TusLibrosInterfazTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #TusLibrosInterfazTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #TusLibrosInterfazTest #test14_InterfaceCanListOneClientPurchase stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #TusLibrosInterfazTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #TusLibrosInterfazTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/30/2020 01:28:41'!
PASSED!

!testRun: #TusLibrosInterfazTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #CartTest #test09CartDoesntAddAnyItemsIntoTheListWhenItIsEmpty stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #CartTest #test10CartAddsItsItemsIntoTheListWhenItIsNotEmpty stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #TusLibrosInterfazTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #TusLibrosInterfazTest #test11_NewInterfaceHasNoSales stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #TusLibrosInterfazTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #TusLibrosInterfazTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #TusLibrosInterfazTest #test14_InterfaceCanListOneClientPurchase stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #TusLibrosInterfazTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #TusLibrosInterfazTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/30/2020 01:44:10'!
PASSED!

!testRun: #TusLibrosInterfazTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/30/2020 01:50:51'!
PASSED!

self proceed!

----SNAPSHOT----(30 November 2020 02:11:46) CuisUniversity-4384.image priorSource: 17341545!

!testRun: #TusLibrosInterfazTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #CartTest #test09CartDoesntAddAnyItemsIntoTheListWhenItIsEmpty stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #CartTest #test10CartAddsItsItemsIntoTheListWhenItIsNotEmpty stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #TusLibrosInterfazTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #TusLibrosInterfazTest #test11_NewInterfaceHasNoSales stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #TusLibrosInterfazTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #TusLibrosInterfazTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #TusLibrosInterfazTest #test14_InterfaceCanListOneClientPurchase stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #TusLibrosInterfazTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

!testRun: #TusLibrosInterfazTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/30/2020 02:13:59'!
PASSED!

----QUIT----(30 November 2020 02:14:05) CuisUniversity-4384.image priorSource: 17355318!

----STARTUP---- (30 November 2020 18:03:24) as C:\Users\paujimenez\Documents\Ingenieria1\cuisWindows64\20-windows64-TusLibros3\CuisUniversity-4384.image!

!Cart methodsFor: 'accessing' stamp: 'PJ 11/30/2020 18:37:36' prior: 50870499!
addItemsWithQuantityTo: anItemList
	items do: [:item |
		(anItemList includes: item) ifFalse: [
			anItemList add: item copy.
			anItemList add: (self occurrencesOf: item)
		]
	] 
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #CartTest #test09CartDoesntAddAnyItemsIntoTheListWhenItIsEmpty stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #CartTest #test10CartAddsItsItemsIntoTheListWhenItIsNotEmpty stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #TusLibrosInterfazTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #TusLibrosInterfazTest #test11_NewInterfaceHasNoSales stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #TusLibrosInterfazTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #TusLibrosInterfazTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #TusLibrosInterfazTest #test14_InterfaceCanListOneClientPurchase stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #TusLibrosInterfazTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!

!testRun: #TusLibrosInterfazTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/30/2020 18:37:55'!
PASSED!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 19:26:01' prior: 50873442!
createCartWithClient: aClientId password: aPassword 
	
	|cart cartIdStr clientSalesBook|
	authenticator authenticate: aClientId password: aPassword.
	
	clientSalesBook := salesBook at: aClientId ifAbsent: [salesBook at: aClientId put: OrderedCollection new].
	
	cart := Cart acceptingItemsOf: catalog.
	cartIdStr := self nextCartId.
	carts at: cartIdStr put: {cart. clientSalesBook}.
	"clientCurrentSale cartIsExp  withExpTime: 30 lasModified: now."
	^cartIdStr.! !
!TusLibrosInterfazTest methodsFor: '4-list purchases' stamp: 'PJ 11/30/2020 20:31:28'!
test17_InterfaceCannotListAnExpiredCart
	
	|tusLibros cartId1 clientId1 password |
	
	clientId1 := '1239'.
	password := 'test123'.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp.
	
	cartId1 := tusLibros createCartWithClient: clientId1 password: password.
	
	
	
	tusLibros listCart: cartId1.
	
	
	! !

DateAndTime now!

self now!

DateAndTime!

self now!

!classDefinition: #TusLibrosInterfazTest category: 'TusLibros-Iteracion3' stamp: 'PJ 11/30/2020 20:42:27'!
TestCase subclass: #TusLibrosInterfazTest
	instanceVariableNames: 'testObjectsFactory authenticateBehavior clockSimulator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!
!TusLibrosInterfazTest methodsFor: 'setup' stamp: 'PJ 11/30/2020 20:42:18' prior: 50869845 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	authenticateBehavior := [:aClientId :aPassword|].
	clockSimulator := DateAndTime now.! !
!TusLibrosInterfazTest methodsFor: 'clock simulator' stamp: 'PJ 11/30/2020 20:44:10'!
now
	^clockSimulator.! !
!TusLibrosInterfazTest methodsFor: 'clock simulator' stamp: 'PJ 11/30/2020 20:52:35'!
advance30Minutes
	
	clockSimulator := clockSimulator + 30 minutes.! !
!TusLibrosInterfazTest methodsFor: '5-cart expiration' stamp: 'PJ 11/30/2020 20:59:33' prior: 50874272!
test17_InterfaceCannotListAnExpiredCart
	
	|tusLibros cartId1 clientId1 password |
	
	clientId1 := '1239'.
	password := 'test123'.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp.
	
	cartId1 := tusLibros createCartWithClient: clientId1 password: password.
	
	self advance30Minutes.
	
	self should: [tusLibros listCart: cartId1]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface expiredCartErrorDescription.
	
	
	! !
!TusLibrosInterface class methodsFor: 'instance creation' stamp: 'PJ 11/30/2020 21:01:45'!
withCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: aMerchantProcessor clock: aClock  

	^self new initializeWithCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: aMerchantProcessor ! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'PJ 11/30/2020 21:01:45' prior: 50871512!
createTusLibrosInterfaceWith: anAuthenticator andMerchant: aMerchantProcessor 
	
	^TusLibrosInterface withCatalog: self defaultCatalog authenticator: anAuthenticator merchantProcessor: aMerchantProcessor clock: self! !

!methodRemoval: TusLibrosInterface class #withCatalog:authenticator:merchantProcessor: stamp: 'PJ 11/30/2020 21:01:45'!
withCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: aMerchantProcessor 

	^self new initializeWithCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: aMerchantProcessor !
!TusLibrosInterface methodsFor: 'initialization' stamp: 'PJ 11/30/2020 21:02:54'!
initializeWithCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: aMerchantProcessor clock: aClock   
	
	catalog := aCatalog.
	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	cartId := 0.
	transactionId := 0.
	carts := Dictionary new.
	salesBook := Dictionary new.! !
!TusLibrosInterface class methodsFor: 'as yet unclassified' stamp: 'PJ 11/30/2020 21:02:54' prior: 50874336!
withCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: aMerchantProcessor clock: aClock  

	^self new initializeWithCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: aMerchantProcessor clock: aClock ! !

!methodRemoval: TusLibrosInterface #initializeWithCatalog:authenticator:merchantProcessor: stamp: 'PJ 11/30/2020 21:02:54'!
initializeWithCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: aMerchantProcessor  
	
	catalog := aCatalog.
	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	cartId := 0.
	transactionId := 0.
	carts := Dictionary new.
	salesBook := Dictionary new.!

!classDefinition: #TusLibrosInterface category: 'TusLibros-Iteracion3' stamp: 'PJ 11/30/2020 21:03:25'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog authenticator carts cartId salesBook merchantProcessor transactionId clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!
!TusLibrosInterface methodsFor: 'initialization' stamp: 'PJ 11/30/2020 21:03:22' prior: 50874367!
initializeWithCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: aMerchantProcessor clock: aClock   
	
	catalog := aCatalog.
	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	clock := aClock.
	cartId := 0.
	transactionId := 0.
	carts := Dictionary new.
	salesBook := Dictionary new.! !
!StoreTestObjectsFactory methodsFor: 'interface' stamp: 'PJ 11/30/2020 21:06:18'!
createTusLibrosInterfaceWith: anAuthenticator andMerchant: aMerchantProcessor clock: aClock  
	
	^TusLibrosInterface withCatalog: self defaultCatalog authenticator: anAuthenticator merchantProcessor: aMerchantProcessor clock: self! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/30/2020 21:06:18' prior: 50874317!
test17_InterfaceCannotListAnExpiredCart
	
	|tusLibros cartId1 clientId1 password |
	
	clientId1 := '1239'.
	password := 'test123'.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp clock: self.
	
	cartId1 := tusLibros createCartWithClient: clientId1 password: password.
	
	self advance30Minutes.
	
	self should: [tusLibros listCart: cartId1]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface expiredCartErrorDescription.
	
	
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/30/2020 21:06:18' prior: 50871362!
test02_CannotCreateCartWithInvalidPassword

	|tusLibros|

	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new clock: self.
	authenticateBehavior := [:aClientId :aPassword| self error: TusLibrosInterface invalidPasswordErrorDescription].
	
	self should: [tusLibros createCartWithClient: '1239' password: 'invalid']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidPasswordErrorDescription.! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/30/2020 21:06:18' prior: 50872780!
test14_InterfaceCanListOneClientPurchase

	|tusLibros cartId bookIsbn purchaseList clientId password total quantity|
	
	clientId := '1239'.
	password := 'test123'.
	quantity := 2.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	total := testObjectsFactory itemSellByTheStorePrice * quantity.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp clock: self.
	
	cartId := tusLibros createCartWithClient: clientId password: password .
	tusLibros addToCart: cartId isbn: bookIsbn quantity: quantity.
	
	tusLibros checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	purchaseList := tusLibros listPurchasesFor: clientId password: password.
	
	self assert: 3 equals: purchaseList size.
	self assert: bookIsbn equals: (purchaseList at: 1).
	self assert: quantity equals: (purchaseList at: 2).
	self assert: total equals: (purchaseList at: 3).
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/30/2020 21:06:18' prior: 50872439!
test11_NewInterfaceHasNoSales

	|tusLibros purchaseList|
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp clock: self.
	
	purchaseList := 	tusLibros listPurchasesFor: '1234' password: 'test1234'.
	
	self assert: purchaseList isEmpty.! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/30/2020 21:06:19' prior: 50871327!
test05_InterfaceCanCreateManyCarts

	|tusLibros cartId1 cartId2| 
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new clock: self.
	
	cartId1 := tusLibros createCartWithClient: '1239' password: 'test123'.
	cartId2 := tusLibros createCartWithClient: '1238' password: 'test123'.
	
	self assert: (tusLibros 	listCart: cartId1) isEmpty.
	self assert: (tusLibros 	listCart: cartId2) isEmpty.
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/30/2020 21:06:19' prior: 50871344!
test01_CannotCreateCartWithInvalidClient

	|tusLibros|

	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new clock: self.
	authenticateBehavior := [:aClientId :aPassword| self error: TusLibrosInterface invalidClientErrorDescription ].
	
	self should: [tusLibros createCartWithClient: '1239' password: 'test1234']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidClientErrorDescription.! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/30/2020 21:06:19' prior: 50871490!
test03_InterfaceCanCreateACartAndIsEmpty

	|tusLibros cartId cartList| 

	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new clock: self.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	cartList := tusLibros 	listCart: cartId.
	
	self assert: cartList isEmpty.
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/30/2020 21:06:19' prior: 50871444!
test08_InterfaceCannotCheckoutAnInvalidCart

	|tusLibros cartId bookIsbn invalidCartId|
	
	invalidCartId := 'invalid'. 
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new clock: self.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	tusLibros addToCart: cartId isbn: bookIsbn quantity: 2.
	
	self assert: (invalidCartId = cartId) not.
	
	self should: [tusLibros checkoutCart: invalidCartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez']
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/30/2020 21:06:19' prior: 50871407!
test04_InterfaceCannotListAnInvalidCartId

	|tusLibros cartId invalidCartId| 
	
	invalidCartId := 'invalid'.
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new clock: self.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	
	self assert: (cartId = invalidCartId) not.
	
	self should: [tusLibros 	listCart: invalidCartId]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/30/2020 21:06:19' prior: 50872970!
test15_InterfaceCanListMoreThanOnePurchaseFromAClient

	|tusLibros cartId1 cartId2 bookIsbn1 bookIsbn2 purchaseList clientId password total quantity|
	
	clientId := '1239'.
	password := 'test123'.
	quantity := 2.
	bookIsbn1 := testObjectsFactory itemSellByTheStore.
	bookIsbn2 := testObjectsFactory secondItemSellByTheStore.
	total := (testObjectsFactory itemSellByTheStorePrice * quantity) + (testObjectsFactory secondItemSellByTheStorePrice * (quantity + 1)).
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp clock: self.
	
	cartId1 := tusLibros createCartWithClient: clientId password: password .
	tusLibros addToCart: cartId1 isbn: bookIsbn1 quantity: quantity.
	tusLibros checkoutCart: cartId1 cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	cartId2 := tusLibros createCartWithClient: clientId password: password .
	tusLibros addToCart: cartId2 isbn: bookIsbn2 quantity: (quantity + 1).
	tusLibros checkoutCart: cartId2 cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	purchaseList := tusLibros listPurchasesFor: clientId password: password.
	
	self assert: 5 equals: purchaseList size.
	self assert: bookIsbn1 equals: (purchaseList at: 1).
	self assert: quantity equals: (purchaseList at: 2).
	self assert: bookIsbn2 equals: (purchaseList at: 3).
	self assert: (quantity + 1) equals: (purchaseList at: 4).
	self assert: total equals: (purchaseList at: 5).
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/30/2020 21:06:19' prior: 50871469!
test06_InterfaceCanAddBooksIntoACartAndListThem

	|tusLibros cartId cartList bookIsbn| 
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new clock: self.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	tusLibros addToCart: cartId isbn: bookIsbn quantity: 5.
	
	cartList := tusLibros 	listCart: cartId.
	
	self assert: 2 equals: cartList size.
	self assert: bookIsbn equals: (cartList at: 1).
	self assert: 5 equals: (cartList at: 2).	
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/30/2020 21:06:19' prior: 50872670!
test13_CannotListPurchasesForAClientWithAnInvalidPassword

	|tusLibros |
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp clock: self.
	authenticateBehavior := [:aClientId :aPassword| self error: TusLibrosInterface invalidPasswordErrorDescription].	
	
	self should: [tusLibros listPurchasesFor: '1234' password: 'test1234']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidPasswordErrorDescription .! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/30/2020 21:06:19' prior: 50873103!
test16_InterfaceCanListPurchasesFromMoreThanOneClient
	
	|tusLibros cartId1 cartId2 bookIsbn1 bookIsbn2 purchaseList1 purchaseList2 clientId1 clientId2 password total1 total2 quantity|
	
	clientId1 := '1239'.
	clientId2 := '5678'.
	password := 'test123'.
	quantity := 2.
	bookIsbn1 := testObjectsFactory itemSellByTheStore.
	bookIsbn2 := testObjectsFactory secondItemSellByTheStore.
	total1 := (testObjectsFactory itemSellByTheStorePrice * quantity).
	total2 := (testObjectsFactory secondItemSellByTheStorePrice * (quantity + 1)).
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp clock: self.
	
	cartId1 := tusLibros createCartWithClient: clientId1 password: password .
	tusLibros addToCart: cartId1 isbn: bookIsbn1 quantity: quantity.
	tusLibros checkoutCart: cartId1 cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	purchaseList1 := tusLibros listPurchasesFor: clientId1 password: password.
	
	cartId2 := tusLibros createCartWithClient: clientId2 password: password .
	tusLibros addToCart: cartId2 isbn: bookIsbn2 quantity: (quantity + 1).
	tusLibros checkoutCart: cartId2 cardNumeber: '14556458' expDate: '102030' ownerName: 'Ana Sanchez'.
	
	purchaseList2 := tusLibros listPurchasesFor: clientId2 password: password.
	
	self assert: 3 equals: purchaseList1 size.
	self assert: bookIsbn1 equals: (purchaseList1 at: 1).
	self assert: quantity equals: (purchaseList1 at: 2).
	self assert: total1 equals: (purchaseList1 at: 3).
	
	self assert: 3 equals: purchaseList2 size.
	self assert: bookIsbn2 equals: (purchaseList2 at: 1).
	self assert: (quantity + 1) equals: (purchaseList2 at: 2).
	self assert: total2 equals: (purchaseList2 at: 3).
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/30/2020 21:06:19' prior: 50871919!
test09_InterfaceCannotCheckoutAnEmptyCart

	|tusLibros cartId|
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new clock: self.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	
	self should: [tusLibros checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez']
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface emptyCartErrorDescription.
	
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/30/2020 21:06:19' prior: 50871380!
test07_InterfaceCannotAddBooksIntoAnInvalidCart

	|tusLibros cartId bookIsbn invalidCartId|
	
	invalidCartId := 'invalid'. 
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new clock: self.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	
	self assert: (invalidCartId = cartId) not.
	
	self should: [tusLibros addToCart: invalidCartId isbn: bookIsbn quantity: 5]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
		
	self should: [tusLibros listCart: invalidCartId]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/30/2020 21:06:19' prior: 50871792!
test10_InterfaceSuccessfullyMakesASale

	|tusLibros cartId bookIsbn transactionId|
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp clock: self.
	
	cartId := tusLibros createCartWithClient: '1239' password: 'test123'.
	tusLibros addToCart: cartId isbn: bookIsbn quantity: 2.
	
	transactionId := tusLibros checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	self assert: transactionId isEmpty not.
	
	! !
!TusLibrosInterfazTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/30/2020 21:06:19' prior: 50872522!
test12_CannotListPurchasesForAnInvalidClient

	|tusLibros |
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp clock: self.
	authenticateBehavior := [:aClientId :aPassword| self error: TusLibrosInterface invalidClientErrorDescription ].	
	
	self should: [tusLibros listPurchasesFor: '1234' password: 'test1234']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidClientErrorDescription.! !

!methodRemoval: StoreTestObjectsFactory #createTusLibrosInterfaceWith:andMerchant: stamp: 'PJ 11/30/2020 21:06:19'!
createTusLibrosInterfaceWith: anAuthenticator andMerchant: aMerchantProcessor 
	
	^TusLibrosInterface withCatalog: self defaultCatalog authenticator: anAuthenticator merchantProcessor: aMerchantProcessor clock: self!
!StoreTestObjectsFactory methodsFor: 'interface' stamp: 'PJ 11/30/2020 21:06:26' prior: 50874429!
createTusLibrosInterfaceWith: anAuthenticator andMerchant: aMerchantProcessor clock: aClock  
	
	^TusLibrosInterface withCatalog: self defaultCatalog authenticator: anAuthenticator merchantProcessor: aMerchantProcessor clock: aClock! !
!TusLibrosInterfazTest methodsFor: '5-cart expiration' stamp: 'PJ 11/30/2020 21:07:03' prior: 50874440!
test17_InterfaceCannotListAnExpiredCart
	
	|tusLibros cartId1 clientId1 password |
	
	clientId1 := '1239'.
	password := 'test123'.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: (CashierTest new setUp) clock: self.
	
	cartId1 := tusLibros createCartWithClient: clientId1 password: password.
	
	self advance30Minutes.
	
	self should: [tusLibros listCart: cartId1]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface expiredCartErrorDescription.
	
	
	! !

!testRun: #TusLibrosInterfazTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PJ 11/30/2020 21:07:16'!
ERROR!
!TusLibrosInterface class methodsFor: 'errors' stamp: 'PJ 11/30/2020 21:07:27'!
expiredCartErrorDescription
	self shouldBeImplemented.! !
!TusLibrosInterface class methodsFor: 'errors' stamp: 'PJ 11/30/2020 21:07:42' prior: 50874900!
expiredCartErrorDescription
	^'Expired cart'! !

!testRun: #TusLibrosInterfazTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PJ 11/30/2020 21:07:44'!
FAILURE!

!classDefinition: #ClientOrder category: 'TusLibros-Iteracion3' stamp: 'PJ 11/30/2020 21:32:37'!
Object subclass: #ClientOrder
	instanceVariableNames: 'cart salesBook expTime lastActivity'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 21:31:21' prior: 50874254!
createCartWithClient: aClientId password: aPassword 
	
	|cart cartIdStr clientSalesBook clientOrder|
	authenticator authenticate: aClientId password: aPassword.
	
	clientSalesBook := salesBook at: aClientId ifAbsent: [salesBook at: aClientId put: OrderedCollection new].
	
	cart := Cart acceptingItemsOf: catalog.
	cartIdStr := self nextCartId.
	clientOrder := ClientOrder withCart: cart salesBook: clientSalesBook startTime: clock now.
	carts at: cartIdStr put: clientOrder.
	
	^cartIdStr.! !

!testRun: #TusLibrosInterfazTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PJ 11/30/2020 21:32:54'!
ERROR!
!ClientOrder class methodsFor: 'instance creation' stamp: 'PJ 11/30/2020 21:34:36'!
withCart: aCart salesBook: anOrderedCollection startTime: aDateAndTime 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCart: aCart salesBook: anOrderedCollection startTime: aDateAndTime ! !

DateAndTime now!
!ClientOrder class methodsFor: 'instance creation' stamp: 'PJ 11/30/2020 21:38:05' prior: 50874944!
withCart: aCart salesBook: aSalesBook startTime: aDateAndTime 
	
	^self new initializeWithCart: aCart salesBook: aSalesBook startTime: aDateAndTime ! !

!testRun: #TusLibrosInterfazTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PJ 11/30/2020 21:38:24'!
ERROR!

!classDefinition: #ClientOrder category: 'TusLibros-Iteracion3' stamp: 'PJ 11/30/2020 21:39:19'!
Object subclass: #ClientOrder
	instanceVariableNames: 'cart salesBook expTime lastActivity dateAndTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!
!ClientOrder methodsFor: 'initialization' stamp: 'PJ 11/30/2020 21:39:19'!
initializeWithCart: aCart salesBook: aSalesBook startTime: aDateAndTime 
	self shouldBeImplemented.
	cart := aCart.
	salesBook := aSalesBook.
	dateAndTime := aDateAndTime.! !
!ClientOrder methodsFor: 'initialization' stamp: 'PJ 11/30/2020 21:40:24' prior: 50874976!
initializeWithCart: aCart salesBook: aSalesBook startTime: aDateAndTime 
	
	cart := aCart.
	salesBook := aSalesBook.
	lastActivity := aDateAndTime.
	expTime := 30 minutes.! !

!testRun: #TusLibrosInterfazTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PJ 11/30/2020 21:40:29'!
ERROR!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 21:42:11' prior: 50873731!
listCart: aCartId
	|clientOrder clientCart|
	
	self assertOnInvalidCartIdFor: [clientOrder := carts at: aCartId].
	
	clientCart  := clientOrder cart.
	^self listCartWithQuantity: clientCart .
	! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 21:45:31' prior: 50874997!
listCart: aCartId
	|clientOrder clientCart|
	
	self assertOnInvalidCartIdFor: [clientOrder := carts at: aCartId].
	
	clientOrder isExpired ifTrue: [^self error: self class expiredCartErrorDescription].
	
	clientCart  := clientOrder cart.
	^self listCartWithQuantity: clientCart .
	! !

!testRun: #TusLibrosInterfazTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PJ 11/30/2020 21:45:33'!
ERROR!
!ClientOrder methodsFor: 'as yet unclassified' stamp: 'PJ 11/30/2020 21:46:29'!
isExpired
	self shouldBeImplemented.! !
!ClientOrder methodsFor: 'as yet unclassified' stamp: 'PJ 11/30/2020 21:49:19' prior: 50875022!
isExpired
	! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 21:50:04' prior: 50875007!
listCart: aCartId
	|clientOrder clientCart|
	
	self assertOnInvalidCartIdFor: [clientOrder := carts at: aCartId].
	
	(clientOrder isExpired: clock now) ifTrue: [^self error: self class expiredCartErrorDescription].
	
	clientCart  := clientOrder cart.
	^self listCartWithQuantity: clientCart .
	! !

!testRun: #TusLibrosInterfazTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PJ 11/30/2020 21:50:09'!
ERROR!
!ClientOrder methodsFor: 'as yet unclassified' stamp: 'PJ 11/30/2020 21:50:17'!
isExpired: aDateAndTime 
	self shouldBeImplemented.! !
!ClientOrder methodsFor: 'as yet unclassified' stamp: 'PJ 11/30/2020 21:50:23' prior: 50875047!
isExpired: aTime
	^(lastActivity + expTime) < aTime.! !

!testRun: #TusLibrosInterfazTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PJ 11/30/2020 21:50:26'!
ERROR!
!ClientOrder methodsFor: 'accessing' stamp: 'PJ 11/30/2020 21:50:39'!
cart
	self shouldBeImplemented.
	^cart! !
!ClientOrder methodsFor: 'accessing' stamp: 'PJ 11/30/2020 21:50:49' prior: 50875060!
cart
	^cart! !

!testRun: #TusLibrosInterfazTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PJ 11/30/2020 21:50:57'!
FAILURE!

clock now!

!testRun: #TusLibrosInterfazTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PJ 11/30/2020 21:52:48'!
FAILURE!
!ClientOrder methodsFor: 'as yet unclassified' stamp: 'PJ 11/30/2020 21:55:31' prior: 50875052!
isExpired: aTime
	^(lastActivity + expTime) <= aTime.! !

!testRun: #TusLibrosInterfazTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PJ 11/30/2020 21:55:34'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/30/2020 21:55:34'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/30/2020 21:55:34'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/30/2020 21:55:34'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/30/2020 21:55:34'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/30/2020 21:55:34'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/30/2020 21:55:34'!
ERROR!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/30/2020 21:55:34'!
PASSED!

!testRun: #TusLibrosInterfazTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/30/2020 21:55:34'!
ERROR!

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 21:55:34'!
ERROR!

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/30/2020 21:55:34'!
ERROR!

!testRun: #TusLibrosInterfazTest #test11_NewInterfaceHasNoSales stamp: 'PJ 11/30/2020 21:55:34'!
PASSED!

!testRun: #TusLibrosInterfazTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PJ 11/30/2020 21:55:34'!
PASSED!

!testRun: #TusLibrosInterfazTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PJ 11/30/2020 21:55:34'!
PASSED!

!testRun: #TusLibrosInterfazTest #test14_InterfaceCanListOneClientPurchase stamp: 'PJ 11/30/2020 21:55:34'!
ERROR!

!testRun: #TusLibrosInterfazTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PJ 11/30/2020 21:55:34'!
ERROR!

!testRun: #TusLibrosInterfazTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/30/2020 21:55:34'!
ERROR!

!testRun: #TusLibrosInterfazTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PJ 11/30/2020 21:55:34'!
PASSED!

a := DateAndTime now.
b := DateAndTime now + 30 minutes.
a <= b!

a := DateAndTime now.
b := DateAndTime now.
a <= b!

a < b!

a := DateAndTime now.
b := b.
a < b!

a := DateAndTime now.
b := a.
a < b !

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/30/2020 21:58:43'!
ERROR!

!methodRemoval: ClientOrder #isExpired stamp: 'PJ 11/30/2020 22:00:17'!
isExpired
	!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 22:01:02' prior: 50873584!
addToCart: aCartId isbn: aBookIsbn quantity: aBookQuantity
	
	|cart|
	self assertOnInvalidCartIdFor:
	[
		cart := (carts at: aCartId) cart.
		cart add: aBookQuantity of: aBookIsbn. 	
	]
	
	! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 22:01:45' prior: 50873747!
checkoutCart: aCartId cardNumeber: aCreditCardNumber expDate: anExpDate ownerName: aCreditCardOwner
	
	|clientOrder clientCart clientSalesBook cashier creditCard today|
	
	self assertOnInvalidCartIdFor: [clientOrder := carts at: aCartId ].
	
	clientCart := clientOrder cart.
	clientSalesBook := clientOrder salesBook.
	creditCard := CreditCard expiringOn: (Month month: 5 year: 2025) "Change this!! anExpDate".
	
	self assertOnEmptyCartFor:[
		today := DateAndTime now.
		cashier := Cashier toCheckout: clientCart charging: creditCard throught: merchantProcessor on: today registeringOn: clientSalesBook.
	].
	
	cashier checkOut.
	
	^self transactionId
	! !

!testRun: #TusLibrosInterfazTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PJ 11/30/2020 22:02:21'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/30/2020 22:02:21'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/30/2020 22:02:21'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/30/2020 22:02:21'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/30/2020 22:02:21'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/30/2020 22:02:21'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/30/2020 22:02:21'!
PASSED!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/30/2020 22:02:21'!
PASSED!

!testRun: #TusLibrosInterfazTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/30/2020 22:02:21'!
PASSED!

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 22:02:21'!
ERROR!

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/30/2020 22:02:21'!
ERROR!

!testRun: #TusLibrosInterfazTest #test11_NewInterfaceHasNoSales stamp: 'PJ 11/30/2020 22:02:21'!
PASSED!

!testRun: #TusLibrosInterfazTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PJ 11/30/2020 22:02:21'!
PASSED!

!testRun: #TusLibrosInterfazTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PJ 11/30/2020 22:02:21'!
PASSED!

!testRun: #TusLibrosInterfazTest #test14_InterfaceCanListOneClientPurchase stamp: 'PJ 11/30/2020 22:02:21'!
ERROR!

!testRun: #TusLibrosInterfazTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PJ 11/30/2020 22:02:21'!
ERROR!

!testRun: #TusLibrosInterfazTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/30/2020 22:02:21'!
ERROR!

!testRun: #TusLibrosInterfazTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PJ 11/30/2020 22:02:21'!
PASSED!

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 22:02:36'!
ERROR!
!ClientOrder methodsFor: 'accessing' stamp: 'PJ 11/30/2020 22:02:49'!
salesBook
	self shouldBeImplemented.
	^salesBook! !
!ClientOrder methodsFor: 'accessing' stamp: 'PJ 11/30/2020 22:02:56' prior: 50875264!
salesBook
	^salesBook! !

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 22:03:19'!
PASSED!

!testRun: #TusLibrosInterfazTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PJ 11/30/2020 22:03:26'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/30/2020 22:03:26'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/30/2020 22:03:26'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/30/2020 22:03:26'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/30/2020 22:03:26'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/30/2020 22:03:26'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/30/2020 22:03:26'!
PASSED!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/30/2020 22:03:26'!
PASSED!

!testRun: #TusLibrosInterfazTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/30/2020 22:03:26'!
PASSED!

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 22:03:26'!
PASSED!

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/30/2020 22:03:26'!
PASSED!

!testRun: #TusLibrosInterfazTest #test11_NewInterfaceHasNoSales stamp: 'PJ 11/30/2020 22:03:26'!
PASSED!

!testRun: #TusLibrosInterfazTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PJ 11/30/2020 22:03:26'!
PASSED!

!testRun: #TusLibrosInterfazTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PJ 11/30/2020 22:03:26'!
PASSED!

!testRun: #TusLibrosInterfazTest #test14_InterfaceCanListOneClientPurchase stamp: 'PJ 11/30/2020 22:03:26'!
PASSED!

!testRun: #TusLibrosInterfazTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PJ 11/30/2020 22:03:26'!
PASSED!

!testRun: #TusLibrosInterfazTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/30/2020 22:03:26'!
PASSED!

!testRun: #TusLibrosInterfazTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PJ 11/30/2020 22:03:26'!
PASSED!
!TusLibrosInterfazTest methodsFor: '5-cart expiration' stamp: 'PJ 11/30/2020 22:04:54'!
test17_InterfaceCannotAddToAnExpiredCart
	
	|tusLibros cartId1 clientId1 password |
	
	clientId1 := '1239'.
	password := 'test123'.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: (CashierTest new setUp) clock: self.
	
	cartId1 := tusLibros createCartWithClient: clientId1 password: password.
	
	self advance30Minutes.
	
	self should: [tusLibros listCart: cartId1]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface expiredCartErrorDescription.
	
	
	! !
!TusLibrosInterfazTest methodsFor: '5-cart expiration' stamp: 'PJ 11/30/2020 22:05:08'!
test18_InterfaceCannotAddToAnExpiredCart
	
	|tusLibros cartId1 clientId1 password |
	
	clientId1 := '1239'.
	password := 'test123'.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: (CashierTest new setUp) clock: self.
	
	cartId1 := tusLibros createCartWithClient: clientId1 password: password.
	
	self advance30Minutes.
	
	self should: [tusLibros listCart: cartId1]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface expiredCartErrorDescription.
	
	
	! !

!methodRemoval: TusLibrosInterfazTest #test17_InterfaceCannotAddToAnExpiredCart stamp: 'PJ 11/30/2020 22:05:08'!
test17_InterfaceCannotAddToAnExpiredCart
	
	|tusLibros cartId1 clientId1 password |
	
	clientId1 := '1239'.
	password := 'test123'.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: (CashierTest new setUp) clock: self.
	
	cartId1 := tusLibros createCartWithClient: clientId1 password: password.
	
	self advance30Minutes.
	
	self should: [tusLibros listCart: cartId1]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface expiredCartErrorDescription.
	
	
	!
!TusLibrosInterfazTest methodsFor: '5-cart expiration' stamp: 'PJ 11/30/2020 22:07:36' prior: 50875363!
test18_InterfaceCannotAddToAnExpiredCart
	
	|tusLibros cartId1 clientId1 password bookIsbn|
	
	clientId1 := '1239'.
	password := 'test123'.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: (CashierTest new setUp) clock: self.
	
	cartId1 := tusLibros createCartWithClient: clientId1 password: password.
	
	self advance30Minutes.
	
	self should: [tusLibros addToCart: cartId1 isbn: bookIsbn quantity: 5.]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface expiredCartErrorDescription.
	
	
	
	! !

!testRun: #TusLibrosInterfazTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PJ 11/30/2020 22:07:41'!
FAILURE!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 22:10:27' prior: 50875161!
addToCart: aCartId isbn: aBookIsbn quantity: aBookQuantity
	
	|cart|
	self assertOnInvalidCartIdFor: 	[		cart := (carts at: aCartId) cart	].
	self assertOnExpiredCart.
	
	cart add: aBookQuantity of: aBookIsbn.
	
	! !

!testRun: #TusLibrosInterfazTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PJ 11/30/2020 22:10:31'!
ERROR!
!TusLibrosInterface methodsFor: 'asserts' stamp: 'PJ 11/30/2020 22:10:39'!
assertOnExpiredCart
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'asserts' stamp: 'PJ 11/30/2020 22:11:28' prior: 50875441!
assertOnExpiredCart
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 22:13:04' prior: 50875428!
addToCart: aCartId isbn: aBookIsbn quantity: aBookQuantity
	
	|clientOrder cart|
	self assertOnInvalidCartIdFor: 	[		clientOrder := carts at: aCartId	].
	self assertOnExpiredOrder: clientOrder.
	
	cart := clientOrder cart.
	cart add: aBookQuantity of: aBookIsbn.
	
	! !

!testRun: #TusLibrosInterfazTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PJ 11/30/2020 22:13:08'!
ERROR!
!TusLibrosInterface methodsFor: 'asserts' stamp: 'PJ 11/30/2020 22:13:17'!
assertOnExpiredOrder: aClientOrder 
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'asserts' stamp: 'PJ 11/30/2020 22:13:41' prior: 50875466!
assertOnExpiredOrder: aClientOrder 

	(aClientOrder isExpired: clock now) ifTrue: [^self error: self class expiredCartErrorDescription]! !

!testRun: #TusLibrosInterfazTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PJ 11/30/2020 22:13:54'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/30/2020 22:13:54'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/30/2020 22:13:54'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/30/2020 22:13:54'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/30/2020 22:13:54'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/30/2020 22:13:54'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/30/2020 22:13:54'!
PASSED!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/30/2020 22:13:54'!
PASSED!

!testRun: #TusLibrosInterfazTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/30/2020 22:13:54'!
PASSED!

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 22:13:54'!
PASSED!

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/30/2020 22:13:54'!
PASSED!

!testRun: #TusLibrosInterfazTest #test11_NewInterfaceHasNoSales stamp: 'PJ 11/30/2020 22:13:54'!
PASSED!

!testRun: #TusLibrosInterfazTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PJ 11/30/2020 22:13:54'!
PASSED!

!testRun: #TusLibrosInterfazTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PJ 11/30/2020 22:13:54'!
PASSED!

!testRun: #TusLibrosInterfazTest #test14_InterfaceCanListOneClientPurchase stamp: 'PJ 11/30/2020 22:13:54'!
PASSED!

!testRun: #TusLibrosInterfazTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PJ 11/30/2020 22:13:54'!
PASSED!

!testRun: #TusLibrosInterfazTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/30/2020 22:13:54'!
PASSED!

!testRun: #TusLibrosInterfazTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PJ 11/30/2020 22:13:54'!
PASSED!

!testRun: #TusLibrosInterfazTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PJ 11/30/2020 22:13:54'!
PASSED!

!methodRemoval: TusLibrosInterface #assertOnExpiredCart stamp: 'PJ 11/30/2020 22:14:08'!
assertOnExpiredCart
	self shouldBeImplemented.!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 22:14:44' prior: 50875031!
listCart: aCartId
	|clientOrder clientCart|
	
	self assertOnInvalidCartIdFor: [clientOrder := carts at: aCartId].
	
	self assertOnExpiredOrder: clientOrder.
	
	clientCart  := clientOrder cart.
	^self listCartWithQuantity: clientCart .
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #CartTest #test09CartDoesntAddAnyItemsIntoTheListWhenItIsEmpty stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #CartTest #test10CartAddsItsItemsIntoTheListWhenItIsNotEmpty stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #TusLibrosInterfazTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #TusLibrosInterfazTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #TusLibrosInterfazTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #TusLibrosInterfazTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #TusLibrosInterfazTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #TusLibrosInterfazTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #TusLibrosInterfazTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #TusLibrosInterfazTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #TusLibrosInterfazTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #TusLibrosInterfazTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #TusLibrosInterfazTest #test11_NewInterfaceHasNoSales stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #TusLibrosInterfazTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #TusLibrosInterfazTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #TusLibrosInterfazTest #test14_InterfaceCanListOneClientPurchase stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #TusLibrosInterfazTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #TusLibrosInterfazTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #TusLibrosInterfazTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!testRun: #TusLibrosInterfazTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PJ 11/30/2020 22:14:48'!
PASSED!

!classRenamed: #TusLibrosInterfazTest as: #TusLibrosInterfaceTest stamp: 'PJ 11/30/2020 22:15:02'!
Smalltalk renameClassNamed: #TusLibrosInterfazTest as: #TusLibrosInterfaceTest!
!TusLibrosInterfaceTest methodsFor: '5-cart expiration' stamp: 'PJ 11/30/2020 22:17:44'!
test19_InterfaceCannotCheckoutAnExpiredCart
	
	|tusLibros cartId1 clientId1 password bookIsbn|
	
	clientId1 := '1239'.
	password := 'test123'.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: (CashierTest new setUp) clock: self.
	
	cartId1 := tusLibros createCartWithClient: clientId1 password: password.
	tusLibros addToCart: cartId1 isbn: bookIsbn quantity: 5.
	
	self advance30Minutes.
	
	self should: [tusLibros checkoutCart: cartId1 cardNumeber: '124345' expDate: '052025' ownerName: 'pepito']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface expiredCartErrorDescription.
	
	
	
	! !

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PJ 11/30/2020 22:17:45'!
FAILURE!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 22:18:29' prior: 50875170!
checkoutCart: aCartId cardNumeber: aCreditCardNumber expDate: anExpDate ownerName: aCreditCardOwner
	
	|clientOrder clientCart clientSalesBook cashier creditCard today|
	
	self assertOnInvalidCartIdFor: [clientOrder := carts at: aCartId ].
	self assertOnExpiredOrder: clientOrder.
	
	clientCart := clientOrder cart.
	clientSalesBook := clientOrder salesBook.
	creditCard := CreditCard expiringOn: (Month month: 5 year: 2025) "Change this!! anExpDate".
	
	self assertOnEmptyCartFor:[
		today := DateAndTime now.
		cashier := Cashier toCheckout: clientCart charging: creditCard throught: merchantProcessor on: today registeringOn: clientSalesBook.
	].
	
	cashier checkOut.
	
	^self transactionId
	! !

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PJ 11/30/2020 22:18:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/30/2020 22:18:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/30/2020 22:18:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/30/2020 22:18:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/30/2020 22:18:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/30/2020 22:18:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/30/2020 22:18:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/30/2020 22:18:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/30/2020 22:18:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 22:18:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/30/2020 22:18:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11_NewInterfaceHasNoSales stamp: 'PJ 11/30/2020 22:18:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PJ 11/30/2020 22:18:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PJ 11/30/2020 22:18:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PJ 11/30/2020 22:18:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PJ 11/30/2020 22:18:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/30/2020 22:18:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PJ 11/30/2020 22:18:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PJ 11/30/2020 22:18:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PJ 11/30/2020 22:18:53'!
PASSED!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 22:23:17' prior: 50875719!
checkoutCart: aCartId cardNumeber: aCreditCardNumber expDate: anExpDate ownerName: aCreditCardOwner
	
	|clientOrder clientCart clientSalesBook cashier creditCard today monthNumber yearNumber |
	
	self assertOnInvalidCartIdFor: [clientOrder := carts at: aCartId ].
	self assertOnExpiredOrder: clientOrder.
	
	clientCart := clientOrder cart.
	clientSalesBook := clientOrder salesBook.
	
	monthNumber := (anExpDate collect: [:digit | digit] from: 1 to: 2) asNumber.
	yearNumber := (anExpDate collect: [:digit | digit] from: 3 to: 6) asNumber.
	month := (Month month: monthNumber year: yearNumber).
	creditCard := CreditCard expiringOn: month.
	
	self assertOnEmptyCartFor:[
		today := DateAndTime now.
		cashier := Cashier toCheckout: clientCart charging: creditCard throught: merchantProcessor on: today registeringOn: clientSalesBook.
	].
	
	cashier checkOut.
	
	^self transactionId
	! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 22:24:46' prior: 50875820!
checkoutCart: aCartId cardNumeber: aCreditCardNumber expDate: anExpDate ownerName: aCreditCardOwner
	
	|clientOrder clientCart clientSalesBook cashier creditCard today monthNumber yearNumber |
	
	monthNumber := (anExpDate collect: [:digit | digit] from: 1 to: 2) asNumber.
	yearNumber := (anExpDate collect: [:digit | digit] from: 3 to: 6) asNumber.
	month := (Month month: monthNumber year: yearNumber).
	creditCard := CreditCard expiringOn: month.
	
	self assertOnInvalidCartIdFor: [clientOrder := carts at: aCartId ].
	self assertOnExpiredOrder: clientOrder.
	
	clientCart := clientOrder cart.
	clientSalesBook := clientOrder salesBook.
	

	
	self assertOnEmptyCartFor:[
		today := DateAndTime now.
		cashier := Cashier toCheckout: clientCart charging: creditCard throught: merchantProcessor on: today registeringOn: clientSalesBook.
	].
	
	cashier checkOut.
	
	^self transactionId
	! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 22:26:15' prior: 50875851!
checkoutCart: aCartId cardNumeber: aCreditCardNumber expDate: anExpDate ownerName: aCreditCardOwner
	
	|clientOrder clientCart clientSalesBook cashier creditCard today monthNumber yearNumber |
	
	self assertOnInvalidCartIdFor: [clientOrder := carts at: aCartId ].
	self assertOnExpiredOrder: clientOrder.
	
	clientCart := clientOrder cart.
	clientSalesBook := clientOrder salesBook.
	
	creditCard := self createCreditCard: anExpDate.
	
	self assertOnEmptyCartFor:[
		today := DateAndTime now.
		cashier := Cashier toCheckout: clientCart charging: creditCard throught: merchantProcessor on: today registeringOn: clientSalesBook.
	].
	
	cashier checkOut.
	
	^self transactionId
	! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 22:27:08' prior: 50875882!
checkoutCart: aCartId cardNumeber: aCreditCardNumber expDate: anExpDate ownerName: aCreditCardOwner
	
	|clientOrder clientCart clientSalesBook cashier creditCard today monthNumber |
	
	self assertOnInvalidCartIdFor: [clientOrder := carts at: aCartId ].
	self assertOnExpiredOrder: clientOrder.
	
	clientCart := clientOrder cart.
	clientSalesBook := clientOrder salesBook.
	
	creditCard := self createCreditCard: anExpDate.
	
	self assertOnEmptyCartFor:[		cashier := Cashier toCheckout: clientCart charging: creditCard throught: merchantProcessor on: clock now registeringOn: clientSalesBook	].
	
	cashier checkOut.
	
	^self transactionId
	! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 22:27:27' prior: 50875907!
checkoutCart: aCartId cardNumeber: aCreditCardNumber expDate: anExpDate ownerName: aCreditCardOwner
	
	|clientOrder clientCart clientSalesBook cashier creditCard |
	
	self assertOnInvalidCartIdFor: [clientOrder := carts at: aCartId ].
	self assertOnExpiredOrder: clientOrder.
	
	clientCart := clientOrder cart.
	clientSalesBook := clientOrder salesBook.
	
	creditCard := self createCreditCard: anExpDate.
	
	self assertOnEmptyCartFor:[		cashier := Cashier toCheckout: clientCart charging: creditCard throught: merchantProcessor on: clock now registeringOn: clientSalesBook	].
	
	cashier checkOut.
	
	^self transactionId
	! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 22:28:33'!
createCreditCard: anExpDate
	
	|monthNumber yearNumber|
	
	monthNumber := (anExpDate collect: [:digit | digit] from: 1 to: 2) asNumber.
	yearNumber := (anExpDate collect: [:digit | digit] from: 3 to: 6) asNumber.
	month := (Month month: monthNumber year: yearNumber).
	^CreditCard expiringOn: month.
	! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 22:29:33' prior: 50875953!
createCreditCard: anExpDate
	
	|monthNumber yearNumber month|
	
	monthNumber := (anExpDate collect: [:digit | digit] from: 1 to: 2) asNumber.
	yearNumber := (anExpDate collect: [:digit | digit] from: 3 to: 6) asNumber.
	month := (Month month: monthNumber year: yearNumber).
	^CreditCard expiringOn: month.
	! !

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PJ 11/30/2020 22:30:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/30/2020 22:30:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/30/2020 22:30:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/30/2020 22:30:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/30/2020 22:30:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/30/2020 22:30:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/30/2020 22:30:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/30/2020 22:30:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/30/2020 22:30:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 22:30:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/30/2020 22:30:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11_NewInterfaceHasNoSales stamp: 'PJ 11/30/2020 22:30:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PJ 11/30/2020 22:30:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PJ 11/30/2020 22:30:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PJ 11/30/2020 22:30:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PJ 11/30/2020 22:30:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/30/2020 22:30:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PJ 11/30/2020 22:30:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PJ 11/30/2020 22:30:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PJ 11/30/2020 22:30:23'!
PASSED!
!TusLibrosInterfaceTest methodsFor: '5-cart expiration' stamp: 'PJ 11/30/2020 22:39:09'!
test20_InterfaceUpdatesTheExpirationTime
	
	|tusLibros cartId1 clientId1 password bookIsbn|
	
	clientId1 := '1239'.
	password := 'test123'.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: (CashierTest new setUp) clock: self.
	
	cartId1 := tusLibros createCartWithClient: clientId1 password: password.
	
	self advance15minutes.
	
	tusLibros addToCart: cartId1 isbn: bookIsbn quantity: 5.
	
	self advance15minutes.
	
	tusLibros addToCart: cartId1 isbn: bookIsbn quantity: 5.
	tusLibros listCart: cartId1 .
	tusLibros checkoutCart: cartId1 cardNumeber: '124345' expDate: '052025' ownerName: 'pepito'.
	
	
	
	! !
!TusLibrosInterfaceTest methodsFor: '5-cart expiration' stamp: 'PJ 11/30/2020 22:40:38' prior: 50876054!
test20_InterfaceUpdatesTheExpirationTime
	
	|tusLibros cartId1 clientId1 password bookIsbn|
	
	clientId1 := '1239'.
	password := 'test123'.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: (CashierTest new setUp) clock: self.
	
	cartId1 := tusLibros createCartWithClient: clientId1 password: password.
	
	self advance15minutes.
	
	tusLibros addToCart: cartId1 isbn: bookIsbn quantity: 5.
	
	self advance15minutes.
	
	tusLibros addToCart: cartId1 isbn: bookIsbn quantity: 5.
	tusLibros listCart: cartId1 .
	self assert: 1 equals: (tusLibros checkoutCart: cartId1 cardNumeber: '124345' expDate: '052025' ownerName: 'pepito').
	
	
	
	! !

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTime stamp: 'PJ 11/30/2020 22:40:53'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'clock simulator' stamp: 'PJ 11/30/2020 22:41:38'!
advance15minutes
	self shouldBeImplemented.! !
!TusLibrosInterfaceTest methodsFor: 'clock simulator' stamp: 'PJ 11/30/2020 22:41:57' prior: 50876109!
advance15minutes
	clockSimulator + 15 minutes.! !

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTime stamp: 'PJ 11/30/2020 22:42:00'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'clock simulator' stamp: 'PJ 11/30/2020 22:42:33' prior: 50876114!
advance15minutes
	clockSimulator := clockSimulator + 15 minutes.! !

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTime stamp: 'PJ 11/30/2020 22:42:39'!
ERROR!
!TusLibrosInterfaceTest methodsFor: '5-cart expiration' stamp: 'PJ 11/30/2020 22:47:56'!
test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart
	
	|tusLibros cartId1 clientId1 password bookIsbn|
	
	clientId1 := '1239'.
	password := 'test123'.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: (CashierTest new setUp) clock: self.
	
	cartId1 := tusLibros createCartWithClient: clientId1 password: password.
	
	self advance15minutes.
	
	tusLibros addToCart: cartId1 isbn: bookIsbn quantity: 5.
	
	self advance15minutes.
	
	tusLibros addToCart: cartId1 isbn: bookIsbn quantity: 5.
	
	
	
	
	! !
!TusLibrosInterfaceTest methodsFor: '5-cart expiration' stamp: 'PJ 11/30/2020 22:50:12'!
test20_InterfaceUpdatesTheExpirationTimeAfterListCart
	
	|tusLibros cartId1 clientId1 password bookIsbn|
	
	clientId1 := '1239'.
	password := 'test123'.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: (CashierTest new setUp) clock: self.
	
	cartId1 := tusLibros createCartWithClient: clientId1 password: password.
	
	self advance15minutes.
	
	tusLibros listCart: cartId1 .
	
	self advance15minutes.
	
	self shouldnt: [tusLibros addToCart: cartId1 isbn: bookIsbn quantity: 5] raise: Error.
	
	
	
	
	! !
!TusLibrosInterfaceTest methodsFor: '5-cart expiration' stamp: 'PJ 11/30/2020 22:51:06'!
test21_InterfaceUpdatesTheExpirationTimeAfterListCart
	
	|tusLibros cartId1 clientId1 password bookIsbn|
	
	clientId1 := '1239'.
	password := 'test123'.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: (CashierTest new setUp) clock: self.
	
	cartId1 := tusLibros createCartWithClient: clientId1 password: password.
	
	self advance15minutes.
	
	tusLibros listCart: cartId1 .
	
	self advance15minutes.
	
	self shouldnt: [tusLibros addToCart: cartId1 isbn: bookIsbn quantity: 5] raise: Error.
	
	
	
	
	! !

!methodRemoval: TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PJ 11/30/2020 22:51:06'!
test20_InterfaceUpdatesTheExpirationTimeAfterListCart
	
	|tusLibros cartId1 clientId1 password bookIsbn|
	
	clientId1 := '1239'.
	password := 'test123'.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: (CashierTest new setUp) clock: self.
	
	cartId1 := tusLibros createCartWithClient: clientId1 password: password.
	
	self advance15minutes.
	
	tusLibros listCart: cartId1 .
	
	self advance15minutes.
	
	self shouldnt: [tusLibros addToCart: cartId1 isbn: bookIsbn quantity: 5] raise: Error.
	
	
	
	
	!
!TusLibrosInterfaceTest methodsFor: '5-cart expiration' stamp: 'PJ 11/30/2020 22:51:26' prior: 50876132!
test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart
	
	|tusLibros cartId1 clientId1 password bookIsbn|
	
	clientId1 := '1239'.
	password := 'test123'.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: (CashierTest new setUp) clock: self.
	
	cartId1 := tusLibros createCartWithClient: clientId1 password: password.
	
	self advance15minutes.
	
	tusLibros addToCart: cartId1 isbn: bookIsbn quantity: 5.
	
	self advance15minutes.
	
	self shouldnt: [tusLibros addToCart: cartId1 isbn: bookIsbn quantity: 5] raise: Error.
	
	
	
	
	! !
!TusLibrosInterfaceTest methodsFor: '5-cart expiration' stamp: 'PJ 11/30/2020 22:52:06' prior: 50876176!
test21_InterfaceUpdatesTheExpirationTimeAfterListCart
	
	|tusLibros cartId1 clientId1 password bookIsbn|
	
	clientId1 := '1239'.
	password := 'test123'.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: (CashierTest new setUp) clock: self.
	
	cartId1 := tusLibros createCartWithClient: clientId1 password: password.
	
	self advance15minutes.
	
	tusLibros listCart: cartId1.
	
	self advance15minutes.
	
	self shouldnt: [tusLibros listCart: cartId1.] raise: Error.
	
	
	
	
	! !
!TusLibrosInterfaceTest methodsFor: '5-cart expiration' stamp: 'PJ 11/30/2020 22:52:26' prior: 50876244!
test21_InterfaceUpdatesTheExpirationTimeAfterListCart
	
	|tusLibros cartId1 clientId1 password|
	
	clientId1 := '1239'.
	password := 'test123'.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: (CashierTest new setUp) clock: self.
	
	cartId1 := tusLibros createCartWithClient: clientId1 password: password.
	
	self advance15minutes.
	
	tusLibros listCart: cartId1.
	
	self advance15minutes.
	
	self shouldnt: [tusLibros listCart: cartId1.] raise: Error.
	
	
	
	
	! !

!methodRemoval: TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTime stamp: 'PJ 11/30/2020 22:53:36'!
test20_InterfaceUpdatesTheExpirationTime
	
	|tusLibros cartId1 clientId1 password bookIsbn|
	
	clientId1 := '1239'.
	password := 'test123'.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: (CashierTest new setUp) clock: self.
	
	cartId1 := tusLibros createCartWithClient: clientId1 password: password.
	
	self advance15minutes.
	
	tusLibros addToCart: cartId1 isbn: bookIsbn quantity: 5.
	
	self advance15minutes.
	
	tusLibros addToCart: cartId1 isbn: bookIsbn quantity: 5.
	tusLibros listCart: cartId1 .
	self assert: 1 equals: (tusLibros checkoutCart: cartId1 cardNumeber: '124345' expDate: '052025' ownerName: 'pepito').
	
	
	
	!
!TusLibrosInterfaceTest methodsFor: '5-cart expiration' stamp: 'PJ 11/30/2020 22:57:07' prior: 50876221!
test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart
	
	|tusLibros cartId1 clientId1 password bookIsbn|
	
	clientId1 := '1239'.
	password := 'test123'.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: (CashierTest new setUp) clock: self.
	
	cartId1 := tusLibros createCartWithClient: clientId1 password: password.
	
	self advance15minutes.
	
	tusLibros addToCart: cartId1 isbn: bookIsbn quantity: 5.
	
	self advance15minutes.
	
	self shouldnt: [tusLibros addToCart: cartId1 isbn: bookIsbn quantity: 5] raise: Error.
	self shouldnt: [tusLibros listCart: cartId1 ] raise: Error.
	self shouldnt: [tusLibros checkoutCart: cartId1 cardNumeber: '1213545' expDate: '052025' ownerName: 'alguien'] raise: Error.
	
	
	
	
	! !
!TusLibrosInterfaceTest methodsFor: '5-cart expiration' stamp: 'PJ 11/30/2020 22:57:29' prior: 50876265!
test21_InterfaceUpdatesTheExpirationTimeAfterListCart
	
	|tusLibros cartId1 clientId1 password bookIsbn |
	
	clientId1 := '1239'.
	password := 'test123'.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: (CashierTest new setUp) clock: self.
	
	cartId1 := tusLibros createCartWithClient: clientId1 password: password.
	
	self advance15minutes.
	
	tusLibros listCart: cartId1.
	
	self advance15minutes.
	
	self shouldnt: [tusLibros listCart: cartId1.] raise: Error.
	self shouldnt: [tusLibros addToCart: cartId1 isbn: bookIsbn quantity: 5] raise: Error.
	self shouldnt: [tusLibros checkoutCart: cartId1 cardNumeber: '1213545' expDate: '052025' ownerName: 'alguien'] raise: Error.
	
	
	
	! !
!TusLibrosInterfaceTest methodsFor: '5-cart expiration' stamp: 'PJ 11/30/2020 22:57:47' prior: 50876339!
test21_InterfaceUpdatesTheExpirationTimeAfterListCart
	
	|tusLibros cartId1 clientId1 password bookIsbn |
	
	clientId1 := '1239'.
	password := 'test123'.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibros := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: (CashierTest new setUp) clock: self.
	
	cartId1 := tusLibros createCartWithClient: clientId1 password: password.
	
	self advance15minutes.
	
	tusLibros listCart: cartId1.
	
	self advance15minutes.
	
	self shouldnt: [tusLibros listCart: cartId1.] raise: Error.
	self shouldnt: [tusLibros addToCart: cartId1 isbn: bookIsbn quantity: 5] raise: Error.
	self shouldnt: [tusLibros checkoutCart: cartId1 cardNumeber: '1213545' expDate: '052025' ownerName: 'alguien'] raise: Error.
	
	
	
	! !

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PJ 11/30/2020 22:58:04'!
FAILURE!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 23:03:06' prior: 50875554!
listCart: aCartId
	|clientOrder clientCart|
	
	self assertOnInvalidCartIdFor: [clientOrder := carts at: aCartId].
	
	self assertOnExpiredOrder: clientOrder.
	
	clientCart  := clientOrder cart.
	clientOrder updateLastActivity: clock now.
	^self listCartWithQuantity: clientCart .
	! !

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PJ 11/30/2020 23:03:14'!
ERROR!
!ClientOrder methodsFor: 'as yet unclassified' stamp: 'PJ 11/30/2020 23:04:27'!
updateLastActivity: aDateAndTime 
	self shouldBeImplemented.! !
!ClientOrder methodsFor: 'as yet unclassified' stamp: 'PJ 11/30/2020 23:04:55' prior: 50876413!
updateLastActivity: aDateAndTime 
	lastActivity := aDateAndTime.! !

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PJ 11/30/2020 23:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/30/2020 23:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/30/2020 23:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/30/2020 23:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/30/2020 23:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/30/2020 23:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/30/2020 23:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/30/2020 23:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/30/2020 23:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 23:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/30/2020 23:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11_NewInterfaceHasNoSales stamp: 'PJ 11/30/2020 23:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PJ 11/30/2020 23:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PJ 11/30/2020 23:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PJ 11/30/2020 23:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PJ 11/30/2020 23:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/30/2020 23:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PJ 11/30/2020 23:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PJ 11/30/2020 23:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PJ 11/30/2020 23:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PJ 11/30/2020 23:04:57'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PJ 11/30/2020 23:04:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PJ 11/30/2020 23:04:57'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PJ 11/30/2020 23:05:29'!
FAILURE!

----SNAPSHOT----(30 November 2020 23:06:15) CuisUniversity-4384.image priorSource: 17359148!

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PJ 11/30/2020 23:06:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/30/2020 23:06:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/30/2020 23:06:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/30/2020 23:06:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/30/2020 23:06:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/30/2020 23:06:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/30/2020 23:06:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/30/2020 23:06:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/30/2020 23:06:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 23:06:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/30/2020 23:06:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11_NewInterfaceHasNoSales stamp: 'PJ 11/30/2020 23:06:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PJ 11/30/2020 23:06:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PJ 11/30/2020 23:06:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PJ 11/30/2020 23:06:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PJ 11/30/2020 23:06:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/30/2020 23:06:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PJ 11/30/2020 23:06:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PJ 11/30/2020 23:06:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PJ 11/30/2020 23:06:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PJ 11/30/2020 23:06:35'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PJ 11/30/2020 23:06:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PJ 11/30/2020 23:06:35'!
FAILURE!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PJ 11/30/2020 23:08:11' prior: 50875451!
addToCart: aCartId isbn: aBookIsbn quantity: aBookQuantity
	
	|clientOrder cart|
	self assertOnInvalidCartIdFor: 	[		clientOrder := carts at: aCartId	].
	self assertOnExpiredOrder: clientOrder.
	
	cart := clientOrder cart.
	cart add: aBookQuantity of: aBookIsbn.
	clientOrder updateLastActivity: clock now.
	
	! !

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PJ 11/30/2020 23:08:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PJ 11/30/2020 23:08:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/30/2020 23:08:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/30/2020 23:08:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/30/2020 23:08:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/30/2020 23:08:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/30/2020 23:08:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/30/2020 23:08:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/30/2020 23:08:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/30/2020 23:08:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 23:08:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/30/2020 23:08:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11_NewInterfaceHasNoSales stamp: 'PJ 11/30/2020 23:08:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PJ 11/30/2020 23:08:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PJ 11/30/2020 23:08:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PJ 11/30/2020 23:08:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PJ 11/30/2020 23:08:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/30/2020 23:08:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PJ 11/30/2020 23:08:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PJ 11/30/2020 23:08:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PJ 11/30/2020 23:08:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PJ 11/30/2020 23:08:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PJ 11/30/2020 23:08:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/30/2020 23:21:07'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PJ 11/30/2020 23:21:07'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PJ 11/30/2020 23:21:07'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PJ 11/30/2020 23:21:07'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PJ 11/30/2020 23:21:07'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PJ 11/30/2020 23:21:07'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #CartTest #test09CartDoesntAddAnyItemsIntoTheListWhenItIsEmpty stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #CartTest #test10CartAddsItsItemsIntoTheListWhenItIsNotEmpty stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11_NewInterfaceHasNoSales stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PJ 11/30/2020 23:21:08'!
PASSED!

----QUIT----(30 November 2020 23:21:14) CuisUniversity-4384.image priorSource: 17435661!

----STARTUP---- (1 December 2020 20:18:21) as /home/pablo/Documents/Ingenieria1/cuis_TusLibros3/CuisUniversity-4384.image!


Object subclass: #ClientOrder
	instanceVariableNames: 'cart salesBook expTime lastActivity'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!

!classDefinition: #ClientOrder category: 'TusLibros-Iteracion3' stamp: 'PGTA 12/1/2020 20:23:28'!
Object subclass: #ClientOrder
	instanceVariableNames: 'cart salesBook expTime lastActivity'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!

!classDefinition: #TusLibrosInterface category: 'TusLibros-Iteracion3' stamp: 'PGTA 12/1/2020 20:28:17'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'catalog authenticator clientOrders cartId salesBook merchantProcessor transactionId clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'PGTA 12/1/2020 20:28:17' prior: 50869099!
createCartWithClient: aClientId password: aPassword 
	
	|cart cartIdStr clientSalesBook clientOrder|
	authenticator authenticate: aClientId password: aPassword.
	
	clientSalesBook := salesBook at: aClientId ifAbsent: [salesBook at: aClientId put: OrderedCollection new].
	
	cart := Cart acceptingItemsOf: catalog.
	cartIdStr := self nextCartId.
	clientOrder := ClientOrder withCart: cart salesBook: clientSalesBook startTime: clock now.
	clientOrders at: cartIdStr put: clientOrder.
	
	^cartIdStr.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'PGTA 12/1/2020 20:28:18' prior: 50869077!
checkoutCart: aCartId cardNumeber: aCreditCardNumber expDate: anExpDate ownerName: aCreditCardOwner
	
	|clientOrder clientCart clientSalesBook cashier creditCard |
	
	self assertOnInvalidCartIdFor: [clientOrder := clientOrders at: aCartId ].
	self assertOnExpiredOrder: clientOrder.
	
	clientCart := clientOrder cart.
	clientSalesBook := clientOrder salesBook.
	
	creditCard := self createCreditCard: anExpDate.
	
	self assertOnEmptyCartFor:[		cashier := Cashier toCheckout: clientCart charging: creditCard throught: merchantProcessor on: clock now registeringOn: clientSalesBook	].
	
	cashier checkOut.
	
	^self transactionId
	! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'PGTA 12/1/2020 20:28:18' prior: 50869130!
listCart: aCartId
	|clientOrder clientCart|
	
	self assertOnInvalidCartIdFor: [clientOrder := clientOrders at: aCartId].
	
	self assertOnExpiredOrder: clientOrder.
	
	clientCart  := clientOrder cart.
	clientOrder updateLastActivity: clock now.
	^self listCartWithQuantity: clientCart .
	! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'PGTA 12/1/2020 20:28:18' prior: 50869064!
addToCart: aCartId isbn: aBookIsbn quantity: aBookQuantity
	
	|clientOrder cart|
	self assertOnInvalidCartIdFor: 	[		clientOrder := clientOrders at: aCartId	].
	self assertOnExpiredOrder: clientOrder.
	
	cart := clientOrder cart.
	cart add: aBookQuantity of: aBookIsbn.
	clientOrder updateLastActivity: clock now.
	
	! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'PGTA 12/1/2020 20:28:18' prior: 50869031!
initializeWithCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: aMerchantProcessor clock: aClock   
	
	catalog := aCatalog.
	authenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor.
	clock := aClock.
	cartId := 0.
	transactionId := 0.
	clientOrders := Dictionary new.
	salesBook := Dictionary new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #CartTest #test09CartDoesntAddAnyItemsIntoTheListWhenItIsEmpty stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #CartTest #test10CartAddsItsItemsIntoTheListWhenItIsNotEmpty stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11_NewInterfaceHasNoSales stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PGTA 12/1/2020 20:28:42'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #CartTest #test09CartDoesntAddAnyItemsIntoTheListWhenItIsEmpty stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #CartTest #test10CartAddsItsItemsIntoTheListWhenItIsNotEmpty stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11_NewInterfaceHasNoSales stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PGTA 12/1/2020 20:38:28'!
PASSED!

!classDefinition: #TusLibrosInterfaceTest category: 'TusLibros-Iteracion3' stamp: 'PGTA 12/1/2020 20:41:57'!
TestCase subclass: #TusLibrosInterfaceTest
	instanceVariableNames: 'testObjectsFactory authenticateBehavior clockSimulator tusLibrosIface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!
!TusLibrosInterfaceTest methodsFor: 'setup' stamp: 'PGTA 12/1/2020 20:41:52' prior: 50868073 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	authenticateBehavior := [:aClientId :aPassword|].
	clockSimulator := DateAndTime now.
	tusLibrosIface := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp clock: self.! !
!TusLibrosInterfaceTest methodsFor: '1-create and list cart' stamp: 'PGTA 12/1/2020 20:42:25' prior: 50868102!
test01_CannotCreateCartWithInvalidClient

	authenticateBehavior := [:aClientId :aPassword| self error: TusLibrosInterface invalidClientErrorDescription ].
	
	self should: [tusLibrosIface createCartWithClient: '1239' password: 'test1234']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidClientErrorDescription.! !
!TusLibrosInterfaceTest methodsFor: '1-create and list cart' stamp: 'PGTA 12/1/2020 20:42:37' prior: 50868120!
test02_CannotCreateCartWithInvalidPassword

	authenticateBehavior := [:aClientId :aPassword| self error: TusLibrosInterface invalidPasswordErrorDescription].
	
	self should: [tusLibrosIface createCartWithClient: '1239' password: 'invalid']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidPasswordErrorDescription.! !
!TusLibrosInterfaceTest methodsFor: '1-create and list cart' stamp: 'PGTA 12/1/2020 20:43:14' prior: 50868138!
test03_InterfaceCanCreateACartAndIsEmpty

	| cartId cartList| 
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	cartList := tusLibrosIface 	listCart: cartId.
	
	self assert: cartList isEmpty.
	! !

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PGTA 12/1/2020 20:43:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PGTA 12/1/2020 20:43:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PGTA 12/1/2020 20:43:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PGTA 12/1/2020 20:43:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PGTA 12/1/2020 20:43:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PGTA 12/1/2020 20:43:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PGTA 12/1/2020 20:43:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PGTA 12/1/2020 20:43:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PGTA 12/1/2020 20:43:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PGTA 12/1/2020 20:43:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PGTA 12/1/2020 20:43:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11_NewInterfaceHasNoSales stamp: 'PGTA 12/1/2020 20:43:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PGTA 12/1/2020 20:43:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PGTA 12/1/2020 20:43:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PGTA 12/1/2020 20:43:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PGTA 12/1/2020 20:43:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PGTA 12/1/2020 20:43:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PGTA 12/1/2020 20:43:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PGTA 12/1/2020 20:43:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PGTA 12/1/2020 20:43:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PGTA 12/1/2020 20:43:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PGTA 12/1/2020 20:43:18'!
PASSED!
!TusLibrosInterfaceTest methodsFor: '1-create and list cart' stamp: 'PGTA 12/1/2020 20:43:34' prior: 50868152!
test04_InterfaceCannotListAnInvalidCartId

	| cartId invalidCartId| 
	
	invalidCartId := 'invalid'.
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	
	self assert: (cartId = invalidCartId) not.
	
	self should: [tusLibrosIface 	listCart: invalidCartId]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	! !
!TusLibrosInterfaceTest methodsFor: '1-create and list cart' stamp: 'PGTA 12/1/2020 20:43:52' prior: 50868171!
test05_InterfaceCanCreateManyCarts

	| cartId1 cartId2| 
	
	cartId1 := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	cartId2 := tusLibrosIface createCartWithClient: '1238' password: 'test123'.
	
	self assert: (tusLibrosIface 	listCart: cartId1) isEmpty.
	self assert: (tusLibrosIface 	listCart: cartId2) isEmpty.
	! !
!TusLibrosInterfaceTest methodsFor: '2-add books and list cart' stamp: 'PGTA 12/1/2020 20:44:08' prior: 50868188!
test06_InterfaceCanAddBooksIntoACartAndListThem

	| cartId cartList bookIsbn| 
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	tusLibrosIface addToCart: cartId isbn: bookIsbn quantity: 5.
	
	cartList := tusLibrosIface 	listCart: cartId.
	
	self assert: 2 equals: cartList size.
	self assert: bookIsbn equals: (cartList at: 1).
	self assert: 5 equals: (cartList at: 2).	
	! !
!TusLibrosInterfaceTest methodsFor: '2-add books and list cart' stamp: 'PGTA 12/1/2020 20:44:29' prior: 50868209!
test07_InterfaceCannotAddBooksIntoAnInvalidCart

	| cartId bookIsbn invalidCartId|
	
	invalidCartId := 'invalid'. 
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	
	self assert: (invalidCartId = cartId) not.
	
	self should: [tusLibrosIface addToCart: invalidCartId isbn: bookIsbn quantity: 5]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
		
	self should: [tusLibrosIface listCart: invalidCartId]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	
	! !

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PGTA 12/1/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PGTA 12/1/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PGTA 12/1/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PGTA 12/1/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PGTA 12/1/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PGTA 12/1/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PGTA 12/1/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PGTA 12/1/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PGTA 12/1/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PGTA 12/1/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PGTA 12/1/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11_NewInterfaceHasNoSales stamp: 'PGTA 12/1/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PGTA 12/1/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PGTA 12/1/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PGTA 12/1/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PGTA 12/1/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PGTA 12/1/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PGTA 12/1/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PGTA 12/1/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PGTA 12/1/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PGTA 12/1/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PGTA 12/1/2020 20:44:30'!
PASSED!
!TusLibrosInterfaceTest methodsFor: '3-checkout cart' stamp: 'PGTA 12/1/2020 20:44:55' prior: 50868236!
test08_InterfaceCannotCheckoutAnInvalidCart

	| cartId bookIsbn invalidCartId|
	
	invalidCartId := 'invalid'. 
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	tusLibrosIface addToCart: cartId isbn: bookIsbn quantity: 2.
	
	self assert: (invalidCartId = cartId) not.
	
	self should: [tusLibrosIface checkoutCart: invalidCartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez']
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	
	! !
!TusLibrosInterfaceTest methodsFor: '3-checkout cart' stamp: 'PGTA 12/1/2020 20:45:13' prior: 50868261!
test09_InterfaceCannotCheckoutAnEmptyCart

	| cartId|
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	
	self should: [tusLibrosIface checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez']
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface emptyCartErrorDescription.
	
	! !
!TusLibrosInterfaceTest methodsFor: '3-checkout cart' stamp: 'PGTA 12/1/2020 20:45:38' prior: 50868279!
test10_InterfaceSuccessfullyMakesASale

	| cartId bookIsbn transactionId|
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	tusLibrosIface addToCart: cartId isbn: bookIsbn quantity: 2.
	
	transactionId := tusLibrosIface checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	self assert: transactionId isEmpty not.
	
	! !

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PGTA 12/1/2020 20:45:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PGTA 12/1/2020 20:45:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PGTA 12/1/2020 20:45:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PGTA 12/1/2020 20:45:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PGTA 12/1/2020 20:45:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PGTA 12/1/2020 20:45:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PGTA 12/1/2020 20:45:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PGTA 12/1/2020 20:45:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PGTA 12/1/2020 20:45:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PGTA 12/1/2020 20:45:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PGTA 12/1/2020 20:45:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11_NewInterfaceHasNoSales stamp: 'PGTA 12/1/2020 20:45:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PGTA 12/1/2020 20:45:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PGTA 12/1/2020 20:45:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PGTA 12/1/2020 20:45:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PGTA 12/1/2020 20:45:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PGTA 12/1/2020 20:45:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PGTA 12/1/2020 20:45:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PGTA 12/1/2020 20:45:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PGTA 12/1/2020 20:45:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PGTA 12/1/2020 20:45:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PGTA 12/1/2020 20:45:41'!
PASSED!
!TusLibrosInterfaceTest methodsFor: '4-list purchases' stamp: 'PGTA 12/1/2020 20:46:05' prior: 50868300!
test11_NewInterfaceHasNoSales

	| purchaseList|
	
	tusLibrosIface := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: CashierTest new setUp clock: self.
	
	purchaseList := 	tusLibrosIface listPurchasesFor: '1234' password: 'test1234'.
	
	self assert: purchaseList isEmpty.! !
!TusLibrosInterfaceTest methodsFor: '4-list purchases' stamp: 'PGTA 12/1/2020 20:46:13' prior: 50870050!
test11_NewInterfaceHasNoSales

	| purchaseList|
	
	purchaseList := 	tusLibrosIface listPurchasesFor: '1234' password: 'test1234'.
	
	self assert: purchaseList isEmpty.! !
!TusLibrosInterfaceTest methodsFor: '4-list purchases' stamp: 'PGTA 12/1/2020 20:46:16' prior: 50870063!
test11_NewInterfaceHasNoSales

	| purchaseList |
	
	purchaseList := 	tusLibrosIface listPurchasesFor: '1234' password: 'test1234'.
	
	self assert: purchaseList isEmpty.! !
!TusLibrosInterfaceTest methodsFor: '4-list purchases' stamp: 'PGTA 12/1/2020 20:46:48' prior: 50868312!
test12_CannotListPurchasesForAnInvalidClient
	
	authenticateBehavior := [:aClientId :aPassword| self error: TusLibrosInterface invalidClientErrorDescription ].	
	
	self should: [tusLibrosIface listPurchasesFor: '1234' password: 'test1234']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidClientErrorDescription.! !
!TusLibrosInterfaceTest methodsFor: '4-list purchases' stamp: 'PGTA 12/1/2020 20:47:02' prior: 50868330!
test13_CannotListPurchasesForAClientWithAnInvalidPassword
	
	authenticateBehavior := [:aClientId :aPassword| self error: TusLibrosInterface invalidPasswordErrorDescription].	
	
	self should: [tusLibrosIface listPurchasesFor: '1234' password: 'test1234']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidPasswordErrorDescription .! !
!TusLibrosInterfaceTest methodsFor: '4-list purchases' stamp: 'PGTA 12/1/2020 20:47:27' prior: 50868349!
test14_InterfaceCanListOneClientPurchase

	| cartId bookIsbn purchaseList clientId password total quantity|
	
	clientId := '1239'.
	password := 'test123'.
	quantity := 2.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	total := testObjectsFactory itemSellByTheStorePrice * quantity.
	
	cartId := tusLibrosIface createCartWithClient: clientId password: password .
	tusLibrosIface addToCart: cartId isbn: bookIsbn quantity: quantity.
	
	tusLibrosIface checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	purchaseList := tusLibrosIface listPurchasesFor: clientId password: password.
	
	self assert: 3 equals: purchaseList size.
	self assert: bookIsbn equals: (purchaseList at: 1).
	self assert: quantity equals: (purchaseList at: 2).
	self assert: total equals: (purchaseList at: 3).
	! !

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PGTA 12/1/2020 20:47:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PGTA 12/1/2020 20:47:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PGTA 12/1/2020 20:47:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PGTA 12/1/2020 20:47:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PGTA 12/1/2020 20:47:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PGTA 12/1/2020 20:47:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PGTA 12/1/2020 20:47:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PGTA 12/1/2020 20:47:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PGTA 12/1/2020 20:47:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PGTA 12/1/2020 20:47:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PGTA 12/1/2020 20:47:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11_NewInterfaceHasNoSales stamp: 'PGTA 12/1/2020 20:47:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PGTA 12/1/2020 20:47:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PGTA 12/1/2020 20:47:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PGTA 12/1/2020 20:47:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PGTA 12/1/2020 20:47:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PGTA 12/1/2020 20:47:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PGTA 12/1/2020 20:47:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PGTA 12/1/2020 20:47:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PGTA 12/1/2020 20:47:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PGTA 12/1/2020 20:47:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PGTA 12/1/2020 20:47:28'!
PASSED!
!TusLibrosInterfaceTest methodsFor: '4-list purchases' stamp: 'PGTA 12/1/2020 20:47:53' prior: 50868382!
test15_InterfaceCanListMoreThanOnePurchaseFromAClient

	| cartId1 cartId2 bookIsbn1 bookIsbn2 purchaseList clientId password total quantity|
	
	clientId := '1239'.
	password := 'test123'.
	quantity := 2.
	bookIsbn1 := testObjectsFactory itemSellByTheStore.
	bookIsbn2 := testObjectsFactory secondItemSellByTheStore.
	total := (testObjectsFactory itemSellByTheStorePrice * quantity) + (testObjectsFactory secondItemSellByTheStorePrice * (quantity + 1)).
		
	cartId1 := tusLibrosIface createCartWithClient: clientId password: password .
	tusLibrosIface addToCart: cartId1 isbn: bookIsbn1 quantity: quantity.
	tusLibrosIface checkoutCart: cartId1 cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	cartId2 := tusLibrosIface createCartWithClient: clientId password: password .
	tusLibrosIface addToCart: cartId2 isbn: bookIsbn2 quantity: (quantity + 1).
	tusLibrosIface checkoutCart: cartId2 cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	purchaseList := tusLibrosIface listPurchasesFor: clientId password: password.
	
	self assert: 5 equals: purchaseList size.
	self assert: bookIsbn1 equals: (purchaseList at: 1).
	self assert: quantity equals: (purchaseList at: 2).
	self assert: bookIsbn2 equals: (purchaseList at: 3).
	self assert: (quantity + 1) equals: (purchaseList at: 4).
	self assert: total equals: (purchaseList at: 5).
	! !
!TusLibrosInterfaceTest methodsFor: '4-list purchases' stamp: 'PGTA 12/1/2020 20:48:20' prior: 50868431!
test16_InterfaceCanListPurchasesFromMoreThanOneClient
	
	| cartId1 cartId2 bookIsbn1 bookIsbn2 purchaseList1 purchaseList2 clientId1 clientId2 password total1 total2 quantity|
	
	clientId1 := '1239'.
	clientId2 := '5678'.
	password := 'test123'.
	quantity := 2.
	bookIsbn1 := testObjectsFactory itemSellByTheStore.
	bookIsbn2 := testObjectsFactory secondItemSellByTheStore.
	total1 := (testObjectsFactory itemSellByTheStorePrice * quantity).
	total2 := (testObjectsFactory secondItemSellByTheStorePrice * (quantity + 1)).
	
	cartId1 := tusLibrosIface createCartWithClient: clientId1 password: password .
	tusLibrosIface addToCart: cartId1 isbn: bookIsbn1 quantity: quantity.
	tusLibrosIface checkoutCart: cartId1 cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	purchaseList1 := tusLibrosIface listPurchasesFor: clientId1 password: password.
	
	cartId2 := tusLibrosIface createCartWithClient: clientId2 password: password .
	tusLibrosIface addToCart: cartId2 isbn: bookIsbn2 quantity: (quantity + 1).
	tusLibrosIface checkoutCart: cartId2 cardNumeber: '14556458' expDate: '102030' ownerName: 'Ana Sanchez'.
	
	purchaseList2 := tusLibrosIface listPurchasesFor: clientId2 password: password.
	
	self assert: 3 equals: purchaseList1 size.
	self assert: bookIsbn1 equals: (purchaseList1 at: 1).
	self assert: quantity equals: (purchaseList1 at: 2).
	self assert: total1 equals: (purchaseList1 at: 3).
	
	self assert: 3 equals: purchaseList2 size.
	self assert: bookIsbn2 equals: (purchaseList2 at: 1).
	self assert: (quantity + 1) equals: (purchaseList2 at: 2).
	self assert: total2 equals: (purchaseList2 at: 3).
	! !

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PGTA 12/1/2020 20:48:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PGTA 12/1/2020 20:48:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PGTA 12/1/2020 20:48:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PGTA 12/1/2020 20:48:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PGTA 12/1/2020 20:48:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PGTA 12/1/2020 20:48:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PGTA 12/1/2020 20:48:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PGTA 12/1/2020 20:48:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PGTA 12/1/2020 20:48:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PGTA 12/1/2020 20:48:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PGTA 12/1/2020 20:48:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11_NewInterfaceHasNoSales stamp: 'PGTA 12/1/2020 20:48:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PGTA 12/1/2020 20:48:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PGTA 12/1/2020 20:48:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PGTA 12/1/2020 20:48:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PGTA 12/1/2020 20:48:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PGTA 12/1/2020 20:48:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PGTA 12/1/2020 20:48:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PGTA 12/1/2020 20:48:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PGTA 12/1/2020 20:48:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PGTA 12/1/2020 20:48:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PGTA 12/1/2020 20:48:24'!
PASSED!
!TusLibrosInterfaceTest methodsFor: '5-cart expiration' stamp: 'PGTA 12/1/2020 20:48:43' prior: 50868488!
test17_InterfaceCannotListAnExpiredCart
	
	| cartId1 clientId1 password |
	
	clientId1 := '1239'.
	password := 'test123'.
	
	cartId1 := tusLibrosIface createCartWithClient: clientId1 password: password.
	
	self advance30Minutes.
	
	self should: [tusLibrosIface listCart: cartId1]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface expiredCartErrorDescription.
	
	
	! !
!TusLibrosInterfaceTest methodsFor: '5-cart expiration' stamp: 'PGTA 12/1/2020 20:49:04' prior: 50868507!
test18_InterfaceCannotAddToAnExpiredCart
	
	| cartId1 clientId1 password bookIsbn|
	
	clientId1 := '1239'.
	password := 'test123'.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cartId1 := tusLibrosIface createCartWithClient: clientId1 password: password.
	
	self advance30Minutes.
	
	self should: [tusLibrosIface addToCart: cartId1 isbn: bookIsbn quantity: 5.]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface expiredCartErrorDescription.
	
	
	
	! !

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PGTA 12/1/2020 20:49:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PGTA 12/1/2020 20:49:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PGTA 12/1/2020 20:49:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PGTA 12/1/2020 20:49:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PGTA 12/1/2020 20:49:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PGTA 12/1/2020 20:49:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PGTA 12/1/2020 20:49:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PGTA 12/1/2020 20:49:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PGTA 12/1/2020 20:49:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PGTA 12/1/2020 20:49:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PGTA 12/1/2020 20:49:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11_NewInterfaceHasNoSales stamp: 'PGTA 12/1/2020 20:49:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PGTA 12/1/2020 20:49:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PGTA 12/1/2020 20:49:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PGTA 12/1/2020 20:49:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PGTA 12/1/2020 20:49:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PGTA 12/1/2020 20:49:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PGTA 12/1/2020 20:49:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PGTA 12/1/2020 20:49:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PGTA 12/1/2020 20:49:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PGTA 12/1/2020 20:49:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PGTA 12/1/2020 20:49:06'!
PASSED!
!TusLibrosInterfaceTest methodsFor: '5-cart expiration' stamp: 'PGTA 12/1/2020 20:49:23' prior: 50868529!
test19_InterfaceCannotCheckoutAnExpiredCart
	
	| cartId1 clientId1 password bookIsbn|
	
	clientId1 := '1239'.
	password := 'test123'.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cartId1 := tusLibrosIface createCartWithClient: clientId1 password: password.
	tusLibrosIface addToCart: cartId1 isbn: bookIsbn quantity: 5.
	
	self advance30Minutes.
	
	self should: [tusLibrosIface checkoutCart: cartId1 cardNumeber: '124345' expDate: '052025' ownerName: 'pepito']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface expiredCartErrorDescription.
	
	
	
	! !
!TusLibrosInterfaceTest methodsFor: '5-cart expiration' stamp: 'PGTA 12/1/2020 20:49:43' prior: 50868554!
test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart
	
	| cartId1 clientId1 password bookIsbn|
	
	clientId1 := '1239'.
	password := 'test123'.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibrosIface := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: (CashierTest new setUp) clock: self.
	
	cartId1 := tusLibrosIface createCartWithClient: clientId1 password: password.
	
	self advance15minutes.
	
	tusLibrosIface addToCart: cartId1 isbn: bookIsbn quantity: 5.
	
	self advance15minutes.
	
	self shouldnt: [tusLibrosIface addToCart: cartId1 isbn: bookIsbn quantity: 5] raise: Error.
	self shouldnt: [tusLibrosIface listCart: cartId1 ] raise: Error.
	self shouldnt: [tusLibrosIface checkoutCart: cartId1 cardNumeber: '1213545' expDate: '052025' ownerName: 'alguien'] raise: Error.
	
	
	
	
	! !
!TusLibrosInterfaceTest methodsFor: '5-cart expiration' stamp: 'PGTA 12/1/2020 20:50:05' prior: 50868582!
test21_InterfaceUpdatesTheExpirationTimeAfterListCart
	
	| cartId1 clientId1 password bookIsbn |
	
	clientId1 := '1239'.
	password := 'test123'.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cartId1 := tusLibrosIface createCartWithClient: clientId1 password: password.
	
	self advance15minutes.
	
	tusLibrosIface listCart: cartId1.
	
	self advance15minutes.
	
	self shouldnt: [tusLibrosIface listCart: cartId1.] raise: Error.
	self shouldnt: [tusLibrosIface addToCart: cartId1 isbn: bookIsbn quantity: 5] raise: Error.
	self shouldnt: [tusLibrosIface checkoutCart: cartId1 cardNumeber: '1213545' expDate: '052025' ownerName: 'alguien'] raise: Error.
	
	
	
	! !

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PGTA 12/1/2020 20:50:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PGTA 12/1/2020 20:50:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PGTA 12/1/2020 20:50:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PGTA 12/1/2020 20:50:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PGTA 12/1/2020 20:50:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PGTA 12/1/2020 20:50:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PGTA 12/1/2020 20:50:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PGTA 12/1/2020 20:50:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PGTA 12/1/2020 20:50:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PGTA 12/1/2020 20:50:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PGTA 12/1/2020 20:50:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11_NewInterfaceHasNoSales stamp: 'PGTA 12/1/2020 20:50:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PGTA 12/1/2020 20:50:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PGTA 12/1/2020 20:50:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PGTA 12/1/2020 20:50:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PGTA 12/1/2020 20:50:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PGTA 12/1/2020 20:50:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PGTA 12/1/2020 20:50:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PGTA 12/1/2020 20:50:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PGTA 12/1/2020 20:50:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PGTA 12/1/2020 20:50:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PGTA 12/1/2020 20:50:11'!
PASSED!
!TusLibrosInterfaceTest methodsFor: '1-create and list cart' stamp: 'PGTA 12/1/2020 20:58:47' prior: 50869628!
test01_CannotCreateCartWithInvalidClient

	authenticateBehavior := [:aClientId :aPassword| self error: TusLibrosInterface invalidClientErrorDescription ].
	
	self should: [tusLibrosIface createCartWithClient: 'invalid' password: 'test1234']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidClientErrorDescription.! !
!TusLibrosInterfaceTest methodsFor: '1-create and list cart' stamp: 'PGTA 12/1/2020 21:02:41' prior: 50869753!
test04_InterfaceCannotListAnInvalidCartId

	| cartId invalidCartId | 
	
	invalidCartId := 'invalid'.
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	
	self assert: (cartId = invalidCartId) not.
	
	self should: [tusLibrosIface 	listCart: invalidCartId]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	! !

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PGTA 12/1/2020 21:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PGTA 12/1/2020 21:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PGTA 12/1/2020 21:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PGTA 12/1/2020 21:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PGTA 12/1/2020 21:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PGTA 12/1/2020 21:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PGTA 12/1/2020 21:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PGTA 12/1/2020 21:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PGTA 12/1/2020 21:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PGTA 12/1/2020 21:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PGTA 12/1/2020 21:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11_NewInterfaceHasNoSales stamp: 'PGTA 12/1/2020 21:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PGTA 12/1/2020 21:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PGTA 12/1/2020 21:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PGTA 12/1/2020 21:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PGTA 12/1/2020 21:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PGTA 12/1/2020 21:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PGTA 12/1/2020 21:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PGTA 12/1/2020 21:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PGTA 12/1/2020 21:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PGTA 12/1/2020 21:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PGTA 12/1/2020 21:02:46'!
PASSED!
!TusLibrosInterfaceTest methodsFor: '1-create and list cart' stamp: 'PGTA 12/1/2020 21:02:57' prior: 50869769!
test05_InterfaceCanCreateManyCarts

	| cartId1 cartId2| 
	
	cartId1 := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	cartId2 := tusLibrosIface createCartWithClient: '1238' password: 'test123'.
	
	self assert: (tusLibrosIface 	listCart: cartId1) isEmpty.
	self assert: (tusLibrosIface 	listCart: cartId2) isEmpty.! !
!TusLibrosInterfaceTest methodsFor: '2-add books and list cart' stamp: 'PGTA 12/1/2020 21:06:03' prior: 50869784!
test06_InterfaceCanAddBooksIntoACartAndListThem

	| cartId cartList bookIsbn | 
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	tusLibrosIface addToCart: cartId isbn: bookIsbn quantity: 5.
	
	cartList := tusLibrosIface 	listCart: cartId.
	
	self assert: 2 equals: cartList size.
	self assert: bookIsbn equals: (cartList at: 1).
	self assert: 5 equals: (cartList at: 2).	
	! !
!TusLibrosInterfaceTest methodsFor: '2-add books and list cart' stamp: 'PGTA 12/1/2020 21:06:13' prior: 50869802!
test07_InterfaceCannotAddBooksIntoAnInvalidCart

	| cartId bookIsbn invalidCartId |
	
	invalidCartId := 'invalid'. 
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	
	self assert: (invalidCartId = cartId) not.
	
	self should: [tusLibrosIface addToCart: invalidCartId isbn: bookIsbn quantity: 5]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
		
	self should: [tusLibrosIface listCart: invalidCartId]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	
	! !
!TusLibrosInterfaceTest methodsFor: '2-add books and list cart' stamp: 'PGTA 12/1/2020 21:11:26' prior: 50870842!
test07_InterfaceCannotAddBooksIntoAnInvalidCart

	| cartId bookIsbn invalidCartId |
	
	invalidCartId := 'invalid'. 
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	
	self assert: (invalidCartId = cartId) not.
	
	self should: [tusLibrosIface addToCart: invalidCartId isbn: bookIsbn quantity: 5]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	
	! !
!TusLibrosInterfaceTest methodsFor: '5-cart expiration' stamp: 'PGTA 12/1/2020 21:12:47'!
test22_InterfaceRemovesCartAfterCheckOut
	
	| cartId1 clientId1 password bookIsbn |
	
	clientId1 := '1239'.
	password := 'test123'.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cartId1 := tusLibrosIface createCartWithClient: clientId1 password: password.
	
	self advance15minutes.
	
	tusLibrosIface listCart: cartId1.
	
	self advance15minutes.
	
	self shouldnt: [tusLibrosIface listCart: cartId1.] raise: Error.
	self shouldnt: [tusLibrosIface addToCart: cartId1 isbn: bookIsbn quantity: 5] raise: Error.
	self shouldnt: [tusLibrosIface checkoutCart: cartId1 cardNumeber: '1213545' expDate: '052025' ownerName: 'alguien'] raise: Error.
	
	
	
	! !
!TusLibrosInterfaceTest methodsFor: '5-cart expiration' stamp: 'PGTA 12/1/2020 21:18:53'!
test22_InterfaceCannotCheckOutSameCartTwice
	
	| cartId bookIsbn transactionId |
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	tusLibrosIface addToCart: cartId isbn: bookIsbn quantity: 2.
	
	transactionId := tusLibrosIface checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	self  should: [transactionId := tusLibrosIface checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	
	
	! !
!TusLibrosInterfaceTest methodsFor: '5-cart expiration' stamp: 'PGTA 12/1/2020 21:19:13' prior: 50870910!
test22_InterfaceCannotCheckOutSameCartTwice
	
	| cartId bookIsbn transactionId |
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	tusLibrosIface addToCart: cartId isbn: bookIsbn quantity: 2.
	
	transactionId := tusLibrosIface checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	self  should: [tusLibrosIface checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	
	
	! !
!TusLibrosInterfaceTest methodsFor: '5-cart expiration' stamp: 'PGTA 12/1/2020 21:20:04' prior: 50870934!
test22_InterfaceCannotCheckOutSameCartTwice
	
	| cartId bookIsbn |
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	tusLibrosIface addToCart: cartId isbn: bookIsbn quantity: 2.
	
	self  shouldnt: [tusLibrosIface checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.]
		raise: Error.
	
	self  should: [tusLibrosIface checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	
	
	! !

!methodRemoval: TusLibrosInterfaceTest #test22_InterfaceRemovesCartAfterCheckOut stamp: 'PGTA 12/1/2020 21:20:28'!
test22_InterfaceRemovesCartAfterCheckOut
	
	| cartId1 clientId1 password bookIsbn |
	
	clientId1 := '1239'.
	password := 'test123'.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cartId1 := tusLibrosIface createCartWithClient: clientId1 password: password.
	
	self advance15minutes.
	
	tusLibrosIface listCart: cartId1.
	
	self advance15minutes.
	
	self shouldnt: [tusLibrosIface listCart: cartId1.] raise: Error.
	self shouldnt: [tusLibrosIface addToCart: cartId1 isbn: bookIsbn quantity: 5] raise: Error.
	self shouldnt: [tusLibrosIface checkoutCart: cartId1 cardNumeber: '1213545' expDate: '052025' ownerName: 'alguien'] raise: Error.
	
	
	
	!

!testRun: #TusLibrosInterfaceTest #test22_InterfaceCannotCheckOutSameCartTwice stamp: 'PGTA 12/1/2020 21:20:36'!
FAILURE!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PGTA 12/1/2020 21:23:20' prior: 50869274!
checkoutCart: aCartId cardNumeber: aCreditCardNumber expDate: anExpDate ownerName: aCreditCardOwner
	
	|clientOrder clientCart clientSalesBook cashier creditCard |
	
	self assertOnInvalidCartIdFor: [clientOrder := clientOrders at: aCartId ].
	self assertOnExpiredOrder: clientOrder.
	
	clientCart := clientOrder cart.
	clientSalesBook := clientOrder salesBook.
	
	creditCard := self createCreditCard: anExpDate.
	
	self assertOnEmptyCartFor:[		cashier := Cashier toCheckout: clientCart charging: creditCard throught: merchantProcessor on: clock now registeringOn: clientSalesBook	].
	
	cashier checkOut.
	
	clientOrders removeKey: aCartId.
	
	^self transactionId
	! !

!testRun: #TusLibrosInterfaceTest #test22_InterfaceCannotCheckOutSameCartTwice stamp: 'PGTA 12/1/2020 21:23:21'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test22_InterfaceCannotCheckOutSameCartTwice stamp: 'PGTA 12/1/2020 21:23:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PGTA 12/1/2020 21:23:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PGTA 12/1/2020 21:23:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PGTA 12/1/2020 21:23:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PGTA 12/1/2020 21:23:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PGTA 12/1/2020 21:23:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PGTA 12/1/2020 21:23:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PGTA 12/1/2020 21:23:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PGTA 12/1/2020 21:23:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PGTA 12/1/2020 21:23:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PGTA 12/1/2020 21:23:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11_NewInterfaceHasNoSales stamp: 'PGTA 12/1/2020 21:23:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PGTA 12/1/2020 21:23:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PGTA 12/1/2020 21:23:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PGTA 12/1/2020 21:23:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PGTA 12/1/2020 21:23:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PGTA 12/1/2020 21:23:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PGTA 12/1/2020 21:23:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PGTA 12/1/2020 21:23:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PGTA 12/1/2020 21:23:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PGTA 12/1/2020 21:23:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PGTA 12/1/2020 21:23:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test22_InterfaceCannotCheckOutSameCartTwice stamp: 'PGTA 12/1/2020 21:23:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test22_InterfaceCannotCheckOutSameCartTwice stamp: 'PGTA 12/1/2020 21:23:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PGTA 12/1/2020 21:23:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PGTA 12/1/2020 21:23:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PGTA 12/1/2020 21:23:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PGTA 12/1/2020 21:23:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PGTA 12/1/2020 21:23:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PGTA 12/1/2020 21:23:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PGTA 12/1/2020 21:23:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PGTA 12/1/2020 21:23:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PGTA 12/1/2020 21:23:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PGTA 12/1/2020 21:23:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11_NewInterfaceHasNoSales stamp: 'PGTA 12/1/2020 21:23:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PGTA 12/1/2020 21:23:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PGTA 12/1/2020 21:23:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PGTA 12/1/2020 21:23:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PGTA 12/1/2020 21:23:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PGTA 12/1/2020 21:23:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PGTA 12/1/2020 21:23:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PGTA 12/1/2020 21:23:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PGTA 12/1/2020 21:23:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PGTA 12/1/2020 21:23:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PGTA 12/1/2020 21:23:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test22_InterfaceCannotCheckOutSameCartTwice stamp: 'PGTA 12/1/2020 21:23:32'!
PASSED!
!TusLibrosInterfaceTest methodsFor: '5-cart expiration' stamp: 'PGTA 12/1/2020 21:28:32'!
test22_InvalidCartErrorIsRaisedAfterListAnExpiredCartTwice
	
	| cartId bookIsbn |
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	tusLibrosIface addToCart: cartId isbn: bookIsbn quantity: 2.
	
	self  shouldnt: [tusLibrosIface checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.]
		raise: Error.
	
	self  should: [tusLibrosIface checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	
	
	! !
!TusLibrosInterfaceTest methodsFor: '5-cart expiration' stamp: 'PGTA 12/1/2020 21:28:49'!
test23_InvalidCartErrorIsRaisedAfterListAnExpiredCartTwice
	
	| cartId bookIsbn |
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	tusLibrosIface addToCart: cartId isbn: bookIsbn quantity: 2.
	
	self  shouldnt: [tusLibrosIface checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.]
		raise: Error.
	
	self  should: [tusLibrosIface checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	
	
	! !

!methodRemoval: TusLibrosInterfaceTest #test22_InvalidCartErrorIsRaisedAfterListAnExpiredCartTwice stamp: 'PGTA 12/1/2020 21:28:49'!
test22_InvalidCartErrorIsRaisedAfterListAnExpiredCartTwice
	
	| cartId bookIsbn |
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	tusLibrosIface addToCart: cartId isbn: bookIsbn quantity: 2.
	
	self  shouldnt: [tusLibrosIface checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.]
		raise: Error.
	
	self  should: [tusLibrosIface checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	
	
	!
!TusLibrosInterfaceTest methodsFor: '5-cart expiration' stamp: 'PGTA 12/1/2020 21:30:46' prior: 50871238!
test23_InvalidCartErrorIsRaisedAfterListAnExpiredCartTwice
	
	| cartId clientId password |
	
	clientId := '1239'.
	password := 'test123'.
	
	cartId := tusLibrosIface createCartWithClient: clientId password: password.
	
	self advance30Minutes.
	
	self should: [tusLibrosIface listCart: cartId]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface expiredCartErrorDescription.
	
	self should: [tusLibrosIface listCart: cartId]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	
	! !

!testRun: #TusLibrosInterfaceTest #test23_InvalidCartErrorIsRaisedAfterListAnExpiredCartTwice stamp: 'PGTA 12/1/2020 21:30:49'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test23_InvalidCartErrorIsRaisedAfterListAnExpiredCartTwice stamp: 'PGTA 12/1/2020 21:31:00'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test23_InvalidCartErrorIsRaisedAfterListAnExpiredCartTwice stamp: 'PGTA 12/1/2020 21:31:17'!
FAILURE!

!methodRemoval: TusLibrosInterfaceTest #test23_InvalidCartErrorIsRaisedAfterListAnExpiredCartTwice stamp: 'PGTA 12/1/2020 21:54:05'!
test23_InvalidCartErrorIsRaisedAfterListAnExpiredCartTwice
	
	| cartId clientId password |
	
	clientId := '1239'.
	password := 'test123'.
	
	cartId := tusLibrosIface createCartWithClient: clientId password: password.
	
	self advance30Minutes.
	
	self should: [tusLibrosIface listCart: cartId]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface expiredCartErrorDescription.
	
	self should: [tusLibrosIface listCart: cartId]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	
	!

!testRun: #TusLibrosInterfaceTest #test22_InterfaceCannotCheckOutSameCartTwice stamp: 'PGTA 12/1/2020 21:54:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PGTA 12/1/2020 21:54:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PGTA 12/1/2020 21:54:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PGTA 12/1/2020 21:54:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PGTA 12/1/2020 21:54:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PGTA 12/1/2020 21:54:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PGTA 12/1/2020 21:54:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PGTA 12/1/2020 21:54:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PGTA 12/1/2020 21:54:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PGTA 12/1/2020 21:54:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PGTA 12/1/2020 21:54:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11_NewInterfaceHasNoSales stamp: 'PGTA 12/1/2020 21:54:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PGTA 12/1/2020 21:54:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PGTA 12/1/2020 21:54:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PGTA 12/1/2020 21:54:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PGTA 12/1/2020 21:54:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PGTA 12/1/2020 21:54:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PGTA 12/1/2020 21:54:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PGTA 12/1/2020 21:54:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PGTA 12/1/2020 21:54:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PGTA 12/1/2020 21:54:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PGTA 12/1/2020 21:54:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test22_InterfaceCannotCheckOutSameCartTwice stamp: 'PGTA 12/1/2020 21:54:09'!
PASSED!
!TusLibrosInterfaceTest methodsFor: '5-cart expiration' stamp: 'PGTA 12/1/2020 21:54:18' prior: 50870958!
test22_InterfaceCannotCheckOutSameCartTwice
	
	| cartId bookIsbn |	
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	tusLibrosIface addToCart: cartId isbn: bookIsbn quantity: 2.
	
	self  shouldnt: [tusLibrosIface checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.]
		raise: Error.
	
	self  should: [tusLibrosIface checkoutCart: cartId cardNumeber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	
	
	! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PGTA 12/1/2020 21:58:07'!
checkoutCart: aCartId cardNumber: aCreditCardNumber expDate: anExpDate ownerName: aCreditCardOwner
	
	|clientOrder clientCart clientSalesBook cashier creditCard |
	
	self assertOnInvalidCartIdFor: [clientOrder := clientOrders at: aCartId ].
	self assertOnExpiredOrder: clientOrder.
	
	clientCart := clientOrder cart.
	clientSalesBook := clientOrder salesBook.
	
	creditCard := self createCreditCard: anExpDate.
	
	self assertOnEmptyCartFor:[		cashier := Cashier toCheckout: clientCart charging: creditCard throught: merchantProcessor on: clock now registeringOn: clientSalesBook	].
	
	cashier checkOut.
	
	clientOrders removeKey: aCartId.
	
	^self transactionId
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'PGTA 12/1/2020 21:58:07' prior: 50870553!
test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart
	
	| cartId1 clientId1 password bookIsbn|
	
	clientId1 := '1239'.
	password := 'test123'.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	tusLibrosIface := testObjectsFactory createTusLibrosInterfaceWith: self andMerchant: (CashierTest new setUp) clock: self.
	
	cartId1 := tusLibrosIface createCartWithClient: clientId1 password: password.
	
	self advance15minutes.
	
	tusLibrosIface addToCart: cartId1 isbn: bookIsbn quantity: 5.
	
	self advance15minutes.
	
	self shouldnt: [tusLibrosIface addToCart: cartId1 isbn: bookIsbn quantity: 5] raise: Error.
	self shouldnt: [tusLibrosIface listCart: cartId1 ] raise: Error.
	self shouldnt: [tusLibrosIface checkoutCart: cartId1 cardNumber: '1213545' expDate: '052025' ownerName: 'alguien'] raise: Error.
	
	
	
	
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'PGTA 12/1/2020 21:58:07' prior: 50870272!
test16_InterfaceCanListPurchasesFromMoreThanOneClient
	
	| cartId1 cartId2 bookIsbn1 bookIsbn2 purchaseList1 purchaseList2 clientId1 clientId2 password total1 total2 quantity|
	
	clientId1 := '1239'.
	clientId2 := '5678'.
	password := 'test123'.
	quantity := 2.
	bookIsbn1 := testObjectsFactory itemSellByTheStore.
	bookIsbn2 := testObjectsFactory secondItemSellByTheStore.
	total1 := (testObjectsFactory itemSellByTheStorePrice * quantity).
	total2 := (testObjectsFactory secondItemSellByTheStorePrice * (quantity + 1)).
	
	cartId1 := tusLibrosIface createCartWithClient: clientId1 password: password .
	tusLibrosIface addToCart: cartId1 isbn: bookIsbn1 quantity: quantity.
	tusLibrosIface checkoutCart: cartId1 cardNumber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	purchaseList1 := tusLibrosIface listPurchasesFor: clientId1 password: password.
	
	cartId2 := tusLibrosIface createCartWithClient: clientId2 password: password .
	tusLibrosIface addToCart: cartId2 isbn: bookIsbn2 quantity: (quantity + 1).
	tusLibrosIface checkoutCart: cartId2 cardNumber: '14556458' expDate: '102030' ownerName: 'Ana Sanchez'.
	
	purchaseList2 := tusLibrosIface listPurchasesFor: clientId2 password: password.
	
	self assert: 3 equals: purchaseList1 size.
	self assert: bookIsbn1 equals: (purchaseList1 at: 1).
	self assert: quantity equals: (purchaseList1 at: 2).
	self assert: total1 equals: (purchaseList1 at: 3).
	
	self assert: 3 equals: purchaseList2 size.
	self assert: bookIsbn2 equals: (purchaseList2 at: 1).
	self assert: (quantity + 1) equals: (purchaseList2 at: 2).
	self assert: total2 equals: (purchaseList2 at: 3).
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'PGTA 12/1/2020 21:58:07' prior: 50870531!
test19_InterfaceCannotCheckoutAnExpiredCart
	
	| cartId1 clientId1 password bookIsbn|
	
	clientId1 := '1239'.
	password := 'test123'.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cartId1 := tusLibrosIface createCartWithClient: clientId1 password: password.
	tusLibrosIface addToCart: cartId1 isbn: bookIsbn quantity: 5.
	
	self advance30Minutes.
	
	self should: [tusLibrosIface checkoutCart: cartId1 cardNumber: '124345' expDate: '052025' ownerName: 'pepito']
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosInterface expiredCartErrorDescription.
	
	
	
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'PGTA 12/1/2020 21:58:08' prior: 50870111!
test14_InterfaceCanListOneClientPurchase

	| cartId bookIsbn purchaseList clientId password total quantity|
	
	clientId := '1239'.
	password := 'test123'.
	quantity := 2.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	total := testObjectsFactory itemSellByTheStorePrice * quantity.
	
	cartId := tusLibrosIface createCartWithClient: clientId password: password .
	tusLibrosIface addToCart: cartId isbn: bookIsbn quantity: quantity.
	
	tusLibrosIface checkoutCart: cartId cardNumber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	purchaseList := tusLibrosIface listPurchasesFor: clientId password: password.
	
	self assert: 3 equals: purchaseList size.
	self assert: bookIsbn equals: (purchaseList at: 1).
	self assert: quantity equals: (purchaseList at: 2).
	self assert: total equals: (purchaseList at: 3).
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'PGTA 12/1/2020 21:58:08' prior: 50870583!
test21_InterfaceUpdatesTheExpirationTimeAfterListCart
	
	| cartId1 clientId1 password bookIsbn |
	
	clientId1 := '1239'.
	password := 'test123'.
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cartId1 := tusLibrosIface createCartWithClient: clientId1 password: password.
	
	self advance15minutes.
	
	tusLibrosIface listCart: cartId1.
	
	self advance15minutes.
	
	self shouldnt: [tusLibrosIface listCart: cartId1.] raise: Error.
	self shouldnt: [tusLibrosIface addToCart: cartId1 isbn: bookIsbn quantity: 5] raise: Error.
	self shouldnt: [tusLibrosIface checkoutCart: cartId1 cardNumber: '1213545' expDate: '052025' ownerName: 'alguien'] raise: Error.
	
	
	
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'PGTA 12/1/2020 21:58:08' prior: 50869911!
test08_InterfaceCannotCheckoutAnInvalidCart

	| cartId bookIsbn invalidCartId|
	
	invalidCartId := 'invalid'. 
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	tusLibrosIface addToCart: cartId isbn: bookIsbn quantity: 2.
	
	self assert: (invalidCartId = cartId) not.
	
	self should: [tusLibrosIface checkoutCart: invalidCartId cardNumber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez']
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'PGTA 12/1/2020 21:58:08' prior: 50870225!
test15_InterfaceCanListMoreThanOnePurchaseFromAClient

	| cartId1 cartId2 bookIsbn1 bookIsbn2 purchaseList clientId password total quantity|
	
	clientId := '1239'.
	password := 'test123'.
	quantity := 2.
	bookIsbn1 := testObjectsFactory itemSellByTheStore.
	bookIsbn2 := testObjectsFactory secondItemSellByTheStore.
	total := (testObjectsFactory itemSellByTheStorePrice * quantity) + (testObjectsFactory secondItemSellByTheStorePrice * (quantity + 1)).
		
	cartId1 := tusLibrosIface createCartWithClient: clientId password: password .
	tusLibrosIface addToCart: cartId1 isbn: bookIsbn1 quantity: quantity.
	tusLibrosIface checkoutCart: cartId1 cardNumber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	cartId2 := tusLibrosIface createCartWithClient: clientId password: password .
	tusLibrosIface addToCart: cartId2 isbn: bookIsbn2 quantity: (quantity + 1).
	tusLibrosIface checkoutCart: cartId2 cardNumber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	purchaseList := tusLibrosIface listPurchasesFor: clientId password: password.
	
	self assert: 5 equals: purchaseList size.
	self assert: bookIsbn1 equals: (purchaseList at: 1).
	self assert: quantity equals: (purchaseList at: 2).
	self assert: bookIsbn2 equals: (purchaseList at: 3).
	self assert: (quantity + 1) equals: (purchaseList at: 4).
	self assert: total equals: (purchaseList at: 5).
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'PGTA 12/1/2020 21:58:08' prior: 50869933!
test09_InterfaceCannotCheckoutAnEmptyCart

	| cartId|
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	
	self should: [tusLibrosIface checkoutCart: cartId cardNumber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez']
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface emptyCartErrorDescription.
	
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'PGTA 12/1/2020 21:58:08' prior: 50869948!
test10_InterfaceSuccessfullyMakesASale

	| cartId bookIsbn transactionId|
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	tusLibrosIface addToCart: cartId isbn: bookIsbn quantity: 2.
	
	transactionId := tusLibrosIface checkoutCart: cartId cardNumber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	self assert: transactionId isEmpty not.
	
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'PGTA 12/1/2020 21:58:08' prior: 50871431!
test22_InterfaceCannotCheckOutSameCartTwice
	
	| cartId bookIsbn |	
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	tusLibrosIface addToCart: cartId isbn: bookIsbn quantity: 2.
	
	self  shouldnt: [tusLibrosIface checkoutCart: cartId cardNumber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.]
		raise: Error.
	
	self  should: [tusLibrosIface checkoutCart: cartId cardNumber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	
	
	! !

!methodRemoval: TusLibrosInterface #checkoutCart:cardNumeber:expDate:ownerName: stamp: 'PGTA 12/1/2020 21:58:08'!
checkoutCart: aCartId cardNumeber: aCreditCardNumber expDate: anExpDate ownerName: aCreditCardOwner
	
	|clientOrder clientCart clientSalesBook cashier creditCard |
	
	self assertOnInvalidCartIdFor: [clientOrder := clientOrders at: aCartId ].
	self assertOnExpiredOrder: clientOrder.
	
	clientCart := clientOrder cart.
	clientSalesBook := clientOrder salesBook.
	
	creditCard := self createCreditCard: anExpDate.
	
	self assertOnEmptyCartFor:[		cashier := Cashier toCheckout: clientCart charging: creditCard throught: merchantProcessor on: clock now registeringOn: clientSalesBook	].
	
	cashier checkOut.
	
	clientOrders removeKey: aCartId.
	
	^self transactionId
	!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #CartTest #test09CartDoesntAddAnyItemsIntoTheListWhenItIsEmpty stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #CartTest #test10CartAddsItsItemsIntoTheListWhenItIsNotEmpty stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11_NewInterfaceHasNoSales stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test22_InterfaceCannotCheckOutSameCartTwice stamp: 'PGTA 12/1/2020 21:58:13'!
PASSED!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PGTA 12/1/2020 22:02:37' prior: 50871454!
checkoutCart: aCartId cardNumber: aCreditCardNumber expDate: anExpDate ownerName: aCreditCardOwner
	
	|clientOrder clientCart clientSalesBook cashier creditCard |
	
	self assertOnInvalidCartIdFor: [clientOrder := clientOrders at: aCartId ].
	self assertOnExpiredOrder: clientOrder.
	
	clientCart := clientOrder cart.
	clientSalesBook := clientOrder salesBook.
	
	creditCard := self createCreditCard: anExpDate.
	
	"self assertOnEmptyCartFor:[		cashier := Cashier toCheckout: clientCart charging: creditCard throught: merchantProcessor on: clock now registeringOn: clientSalesBook	]."
	cashier := Cashier toCheckout: clientCart charging: creditCard throught: merchantProcessor on: clock now registeringOn: clientSalesBook.
	cashier checkOut.
	
	clientOrders removeKey: aCartId.
	
	^self transactionId
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #CartTest #test09CartDoesntAddAnyItemsIntoTheListWhenItIsEmpty stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #CartTest #test10CartAddsItsItemsIntoTheListWhenItIsNotEmpty stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PGTA 12/1/2020 22:02:46'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11_NewInterfaceHasNoSales stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test22_InterfaceCannotCheckOutSameCartTwice stamp: 'PGTA 12/1/2020 22:02:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PGTA 12/1/2020 22:02:46'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PGTA 12/1/2020 22:03:43'!
PASSED!
!TusLibrosInterfaceTest methodsFor: '3-checkout cart' stamp: 'PGTA 12/1/2020 22:07:27'!
InterfaceRaisesCashierErrorIfCartIsEmpty

	| cartId|
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	
	self should: [tusLibrosIface checkoutCart: cartId cardNumber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez']
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface emptyCartErrorDescription.
	
	! !

!methodRemoval: TusLibrosInterfaceTest #test09_InterfaceCannotCheckoutAnEmptyCart stamp: 'PGTA 12/1/2020 22:07:27'!
test09_InterfaceCannotCheckoutAnEmptyCart

	| cartId|
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	
	self should: [tusLibrosIface checkoutCart: cartId cardNumber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez']
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface emptyCartErrorDescription.
	
	!
!TusLibrosInterfaceTest methodsFor: '3-checkout cart' stamp: 'PGTA 12/1/2020 22:07:36'!
test09_InterfaceRaisesCashierErrorIfCartIsEmpty

	| cartId|
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	
	self should: [tusLibrosIface checkoutCart: cartId cardNumber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez']
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface emptyCartErrorDescription.
	
	! !

!methodRemoval: TusLibrosInterfaceTest #InterfaceRaisesCashierErrorIfCartIsEmpty stamp: 'PGTA 12/1/2020 22:07:36'!
InterfaceRaisesCashierErrorIfCartIsEmpty

	| cartId|
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	
	self should: [tusLibrosIface checkoutCart: cartId cardNumber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez']
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosInterface emptyCartErrorDescription.
	
	!
!TusLibrosInterfaceTest methodsFor: '3-checkout cart' stamp: 'PGTA 12/1/2020 22:07:43' prior: 50872131!
test09_InterfaceRaisesCashierErrorIfCartIsEmpty

	| cartId|
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	
	self should: [tusLibrosIface checkoutCart: cartId cardNumber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez']
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier emptyCartErrorDescription.
	
	! !

!testRun: #TusLibrosInterfaceTest #test09_InterfaceRaisesCashierErrorIfCartIsEmpty stamp: 'PGTA 12/1/2020 22:07:44'!
ERROR!
!TusLibrosInterfaceTest methodsFor: '3-checkout cart' stamp: 'PGTA 12/1/2020 22:08:08' prior: 50872161!
test09_InterfaceRaisesCashierErrorIfCartIsEmpty

	| cartId|
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	
	self should: [tusLibrosIface checkoutCart: cartId cardNumber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez']
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier emptyCartErrorDescription.
	
	! !

!testRun: #TusLibrosInterfaceTest #test09_InterfaceRaisesCashierErrorIfCartIsEmpty stamp: 'PGTA 12/1/2020 22:08:09'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceRaisesCashierErrorIfCartIsEmpty stamp: 'PGTA 12/1/2020 22:08:18'!
ERROR!
!TusLibrosInterfaceTest methodsFor: '3-checkout cart' stamp: 'PGTA 12/1/2020 22:08:50' prior: 50872180!
test09_InterfaceRaisesCashierErrorIfCartIsEmpty

	| cartId|
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	
	self should: [tusLibrosIface checkoutCart: cartId cardNumber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez']
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier cartCanNotBeEmptyErrorMessage.
	
	! !

!testRun: #TusLibrosInterfaceTest #test09_InterfaceRaisesCashierErrorIfCartIsEmpty stamp: 'PGTA 12/1/2020 22:08:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PGTA 12/1/2020 22:08:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PGTA 12/1/2020 22:08:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PGTA 12/1/2020 22:08:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PGTA 12/1/2020 22:08:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PGTA 12/1/2020 22:08:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PGTA 12/1/2020 22:08:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PGTA 12/1/2020 22:08:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PGTA 12/1/2020 22:08:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceRaisesCashierErrorIfCartIsEmpty stamp: 'PGTA 12/1/2020 22:08:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PGTA 12/1/2020 22:08:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11_NewInterfaceHasNoSales stamp: 'PGTA 12/1/2020 22:08:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PGTA 12/1/2020 22:08:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PGTA 12/1/2020 22:08:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PGTA 12/1/2020 22:08:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PGTA 12/1/2020 22:08:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PGTA 12/1/2020 22:08:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PGTA 12/1/2020 22:08:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PGTA 12/1/2020 22:08:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PGTA 12/1/2020 22:08:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PGTA 12/1/2020 22:08:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PGTA 12/1/2020 22:08:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test22_InterfaceCannotCheckOutSameCartTwice stamp: 'PGTA 12/1/2020 22:08:52'!
PASSED!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PGTA 12/1/2020 22:09:09' prior: 50871928!
checkoutCart: aCartId cardNumber: aCreditCardNumber expDate: anExpDate ownerName: aCreditCardOwner
	
	|clientOrder clientCart clientSalesBook cashier creditCard |
	
	self assertOnInvalidCartIdFor: [clientOrder := clientOrders at: aCartId ].
	self assertOnExpiredOrder: clientOrder.
	
	clientCart := clientOrder cart.
	clientSalesBook := clientOrder salesBook.
	
	creditCard := self createCreditCard: anExpDate.
	
	cashier := Cashier toCheckout: clientCart charging: creditCard throught: merchantProcessor on: clock now registeringOn: clientSalesBook.
	cashier checkOut.
	
	clientOrders removeKey: aCartId.
	
	^self transactionId
	! !

!methodRemoval: TusLibrosInterface #assertOnEmptyCartFor: stamp: 'PGTA 12/1/2020 22:09:32'!
assertOnEmptyCartFor: aBlock
	
	aBlock on: Error 	do: [^self error: self class emptyCartErrorDescription	]
	
	!

----SNAPSHOT----(1 December 2020 22:09:39) CuisUniversity-4384.image priorSource: 17202317!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PGTA 12/1/2020 22:19:19' prior: 50869255!
createCartWithClient: aClientId password: aPassword 
	
	|cart cartIdStr clientSalesBook clientOrder|
	authenticator authenticate: aClientId password: aPassword.
	
	clientSalesBook := salesBook at: aClientId ifAbsent: [salesBook at: aClientId put: OrderedCollection new].
	
	cart := Cart acceptingItemsOf: catalog.
	cartIdStr := self nextCartId.
	clientOrder := ClientOrder withCart: cart salesBook: clientSalesBook startTime: clock now.
	clientOrders at: cartIdStr put: clientOrder.
	
	^cartIdStr.! !
!TusLibrosInterface methodsFor: 'operations' stamp: 'PGTA 12/1/2020 22:20:36' prior: 50869297!
listCart: aCartId
	|clientOrder clientCart|
	
	self assertOnInvalidCartIdFor: [clientOrder := clientOrders at: aCartId].
	self assertOnExpiredOrder: clientOrder.
	
	clientCart  := clientOrder cart.
	clientOrder updateLastActivity: clock now.
	^self listCartWithQuantity: clientCart .
	! !

----SNAPSHOT----(1 December 2020 22:21:26) CuisUniversity-4384.image priorSource: 17301894!

----QUIT----(1 December 2020 22:21:37) CuisUniversity-4384.image priorSource: 17303008!

----STARTUP---- (2 December 2020 23:51:10) as /home/pablo/Documents/Ingenieria1/cuis_TusLibros3/CuisUniversity-4384.image!


TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!

!classDefinition: #CreditCardTest category: 'TusLibros-Iteracion3' stamp: 'PGTA 12/2/2020 23:55:00'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!
!CreditCardTest methodsFor: 'no messages' stamp: 'PGTA 12/2/2020 23:55:31'!
test01_newCreditCardCantHaveEmptyNumber
	
	self should: [ CreditCard withNumber: '' owner: 'Pepe S�nchez' expirationDate: '022021'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard wrongCreditCardNumberErrorDescription.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 12/2/2020 23:56:01'!
test02_cannotCreateCreditCardWithEmptyExpirationDate
	
	self should: [ CreditCard withNumber: '1234123' owner: 'Pepe S�nchez' expirationDate: ''. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard wrongCreditCardExpirationDateErrorDescription.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 12/2/2020 23:56:23'!
test03_cannotCreateCreditCardWithInvalidInputExpirationDate
	
	self should: [ CreditCard withNumber: '1234123' owner: 'Pepe S�nchez' expirationDate: '022021abc'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard wrongCreditCardExpirationDateErrorDescription.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 12/2/2020 23:57:02'!
test04_cannotCreateCreditCardWithInvalidInputStringInNumber
	
	self should: [ CreditCard withNumber: '1234dfgh123' owner: 'Pepe S�nchez' expirationDate: '022021'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard wrongCreditCardNumberErrorDescription.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 12/2/2020 23:57:16'!
test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate
	
	self should: [ CreditCard withNumber: '1234123' owner: 'Pepe S�nchez' expirationDate: '022021111'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard wrongCreditCardExpirationDateErrorDescription.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 12/2/2020 23:57:28'!
test06_cannotCreateCreditCardWithInvalidMonthExpirationDate
	
	self should: [ CreditCard withNumber: '1234123' owner: 'Pepe S�nchez' expirationDate: '232050'. ]
		raise: Error.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 12/2/2020 23:57:41'!
test07_cannotCreateCreditCardWithEmptyOwnerString
	
	self should: [ CreditCard withNumber: '1234123' owner: '' expirationDate: '022021'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard wrongCreditCardOwnerErrorDescription.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 12/2/2020 23:57:53'!
test08_creditCardKnowsItsCardNumber
	| ccard |
	
	ccard := CreditCard withNumber: '1234123' owner: 'Pepe' expirationDate: '022021'.
	self assert: '1234123' equals: ccard cardNumber.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 12/2/2020 23:58:08'!
test09_creditCardKnowsItsOwnerName
	| ccard |
	
	ccard := CreditCard withNumber: '1234123' owner: 'Pepe' expirationDate: '022021'.
	self assert: 'Pepe' equals: ccard ownerName.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 12/2/2020 23:58:24'!
test10_creditCardKnowsItsExpirationDate
	| ccard expDate |
	
	expDate := GregorianMonthOfYear yearNumber: 2021 monthNumber: 2.
	
	ccard := CreditCard withNumber: '1234123' owner: 'Pepe' expirationDate: '022021'.
	self assert: expDate = ccard expirationDate! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 12/2/2020 23:58:42'!
test11_creditCardKnowsIfItsExpired
	| ccard |
	
	ccard := CreditCard withNumber: '1234123' owner: 'Pepe' expirationDate: '022019'.
	self assert: ccard isExpired.! !

!classDefinition: #CreditCard category: 'TusLibros-Iteracion3' stamp: 'PGTA 12/2/2020 23:59:23'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!
!CreditCard methodsFor: 'initialization' stamp: 'PGTA 12/2/2020 23:59:19'!
cardNumber
	^number.! !

!classDefinition: #CreditCard category: 'TusLibros-Iteracion3' stamp: 'PGTA 12/2/2020 23:59:37'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!
!CreditCard methodsFor: 'initialization' stamp: 'PGTA 12/2/2020 23:59:35'!
expirationDate

	^expirationDate! !

!classDefinition: #CreditCard category: 'TusLibros-Iteracion3' stamp: 'PGTA 12/3/2020 00:00:32'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number expirationDate ownerName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Iteracion3'!
!CreditCard methodsFor: 'initialization' stamp: 'PGTA 12/3/2020 00:00:30'!
initializeWithNumber: aCreditCardNumberString owner: aCreditCardOwnerName expirationDate: aCreditCardExpirationDateString 

	| yearNumber monthNumber |
	
	aCreditCardNumberString isEmpty ifTrue: [ ^self error: self class wrongCreditCardNumberErrorDescription ].
	aCreditCardNumberString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardNumberErrorDescription ] ].

	aCreditCardOwnerName isEmpty ifTrue: [ ^self error: self class wrongCreditCardOwnerErrorDescription ].
	
	aCreditCardExpirationDateString isEmpty ifTrue: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ].
	aCreditCardExpirationDateString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ] ].
	aCreditCardExpirationDateString size > 6 ifTrue: [^self error: self class wrongCreditCardExpirationDateErrorDescription].
	
	monthNumber := (aCreditCardExpirationDateString collect: [:digit | digit] from: 1 to: 2) asNumber.
	yearNumber := (aCreditCardExpirationDateString collect: [:digit | digit] from: 3 to: 6) asNumber.

	expirationDate := GregorianMonthOfYear yearNumber: yearNumber monthNumber: monthNumber.
	number := aCreditCardNumberString.
	ownerName := aCreditCardOwnerName.
	! !
!CreditCard methodsFor: 'old' stamp: 'PGTA 12/3/2020 00:00:49'!
isExpired
	| today |
	today := FixedGregorianDate today.
	
	^expirationDate < (GregorianMonthOfYear year: today year month: today month).! !
!CreditCard methodsFor: 'old' stamp: 'PGTA 12/3/2020 00:00:59'!
ownerName
	^ownerName! !
!CreditCard class methodsFor: 'instance creation' stamp: 'PGTA 12/3/2020 00:04:28'!
withNumber: aCreditCardNumberString owner: aCreditCardOwnerName expirationDate: aCreditCardExpirationDateString
	
	^self new initializeWithNumber: aCreditCardNumberString owner: aCreditCardOwnerName expirationDate: aCreditCardExpirationDateString ! !
!CreditCard class methodsFor: 'old' stamp: 'PGTA 12/3/2020 00:05:05'!
wrongCreditCardExpirationDateErrorDescription
	^'Wrong credit card expiration date'! !
!CreditCard class methodsFor: 'old' stamp: 'PGTA 12/3/2020 00:05:18'!
wrongCreditCardNumberErrorDescription
	^'Wrong credit card number'! !
!CreditCard class methodsFor: 'old' stamp: 'PGTA 12/3/2020 00:05:28'!
wrongCreditCardOwnerErrorDescription
	^'Invalid credit card owner'! !

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 12/3/2020 00:07:06'!
PASSED!

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 12/3/2020 00:07:06'!
PASSED!

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithEmptyExpirationDate stamp: 'PGTA 12/3/2020 00:07:06'!
PASSED!

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputExpirationDate stamp: 'PGTA 12/3/2020 00:07:06'!
PASSED!

!testRun: #CreditCardTest #test04_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PGTA 12/3/2020 00:07:06'!
PASSED!

!testRun: #CreditCardTest #test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate stamp: 'PGTA 12/3/2020 00:07:06'!
PASSED!

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PGTA 12/3/2020 00:07:06'!
PASSED!

!testRun: #CreditCardTest #test07_cannotCreateCreditCardWithEmptyOwnerString stamp: 'PGTA 12/3/2020 00:07:06'!
PASSED!

!testRun: #CreditCardTest #test08_creditCardKnowsItsCardNumber stamp: 'PGTA 12/3/2020 00:07:06'!
PASSED!

!testRun: #CreditCardTest #test09_creditCardKnowsItsOwnerName stamp: 'PGTA 12/3/2020 00:07:06'!
PASSED!

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PGTA 12/3/2020 00:07:06'!
PASSED!

!testRun: #CreditCardTest #test11_creditCardKnowsIfItsExpired stamp: 'PGTA 12/3/2020 00:07:06'!
PASSED!
!TusLibrosInterface methodsFor: 'operations' stamp: 'PGTA 12/3/2020 00:10:31' prior: 50872306!
checkoutCart: aCartId cardNumber: aCreditCardNumber expDate: anExpDate ownerName: aCreditCardOwner
	
	|clientOrder clientCart clientSalesBook cashier creditCard |
	
	self assertOnInvalidCartIdFor: [clientOrder := clientOrders at: aCartId ].
	self assertOnExpiredOrder: clientOrder.
	
	clientCart := clientOrder cart.
	clientSalesBook := clientOrder salesBook.
	
	creditCard := CreditCard withNumber: aCreditCardNumber owner: aCreditCardOwner expirationDate: anExpDate.
	
	cashier := Cashier toCheckout: clientCart charging: creditCard throught: merchantProcessor on: clock now registeringOn: clientSalesBook.
	cashier checkOut.
	
	clientOrders removeKey: aCartId.
	
	^self transactionId
	! !

!methodRemoval: TusLibrosInterface #createCreditCard: stamp: 'PGTA 12/3/2020 00:10:45'!
createCreditCard: anExpDate
	
	|monthNumber yearNumber month|
	
	monthNumber := (anExpDate collect: [:digit | digit] from: 1 to: 2) asNumber.
	yearNumber := (anExpDate collect: [:digit | digit] from: 3 to: 6) asNumber.
	month := (Month month: monthNumber year: yearNumber).
	^CreditCard expiringOn: month.
	!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PGTA 12/3/2020 00:11:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PGTA 12/3/2020 00:11:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PGTA 12/3/2020 00:11:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PGTA 12/3/2020 00:11:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PGTA 12/3/2020 00:11:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PGTA 12/3/2020 00:11:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PGTA 12/3/2020 00:11:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PGTA 12/3/2020 00:11:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PGTA 12/3/2020 00:11:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceRaisesCashierErrorIfCartIsEmpty stamp: 'PGTA 12/3/2020 00:11:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PGTA 12/3/2020 00:11:21'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test11_NewInterfaceHasNoSales stamp: 'PGTA 12/3/2020 00:11:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PGTA 12/3/2020 00:11:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PGTA 12/3/2020 00:11:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PGTA 12/3/2020 00:11:21'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PGTA 12/3/2020 00:11:21'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PGTA 12/3/2020 00:11:21'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PGTA 12/3/2020 00:11:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PGTA 12/3/2020 00:11:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PGTA 12/3/2020 00:11:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PGTA 12/3/2020 00:11:21'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PGTA 12/3/2020 00:11:21'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test22_InterfaceCannotCheckOutSameCartTwice stamp: 'PGTA 12/3/2020 00:11:21'!
FAILURE!

Month fromString: '04'!

Month fromString: '4/2010'!

Month fromString: '042010'!

Month month: 04 year: 2010!
!CreditCard methodsFor: 'old' stamp: 'PGTA 12/3/2020 00:18:31' prior: 50872540!
initializeWithNumber: aCreditCardNumberString owner: aCreditCardOwnerName expirationDate: aCreditCardExpirationDateString 

	| yearNumber monthNumber |
	
	aCreditCardNumberString isEmpty ifTrue: [ ^self error: self class wrongCreditCardNumberErrorDescription ].
	aCreditCardNumberString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardNumberErrorDescription ] ].

	aCreditCardOwnerName isEmpty ifTrue: [ ^self error: self class wrongCreditCardOwnerErrorDescription ].
	
	aCreditCardExpirationDateString isEmpty ifTrue: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ].
	aCreditCardExpirationDateString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ] ].
	aCreditCardExpirationDateString size > 6 ifTrue: [^self error: self class wrongCreditCardExpirationDateErrorDescription].
	
	monthNumber := (aCreditCardExpirationDateString collect: [:digit | digit] from: 1 to: 2) asNumber.
	yearNumber := (aCreditCardExpirationDateString collect: [:digit | digit] from: 3 to: 6) asNumber.

	expirationDate := Month month: monthNumber year: yearNumber.
	number := aCreditCardNumberString.
	ownerName := aCreditCardOwnerName.
	! !
!CreditCard methodsFor: 'testing' stamp: 'PGTA 12/3/2020 00:19:35' prior: 50868869!
isExpiredOn: aDate 
	
	^expirationDate start < (Month month: aDate monthIndex year: aDate yearNumber) start ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 12/3/2020 00:21:00' prior: 50872488!
test10_creditCardKnowsItsExpirationDate
	| ccard expDate |
	
	expDate := Month month: 02 year: 2021.
	
	ccard := CreditCard withNumber: '1234123' owner: 'Pepe' expirationDate: '022021'.
	self assert: expDate = ccard expirationDate! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 12/3/2020 00:22:10' prior: 50872499!
test11_creditCardKnowsIfItsExpired
	| ccard |
	
	ccard := CreditCard withNumber: '1234123' owner: 'Pepe' expirationDate: '022019'.
	self assert: (ccard isExpiredOn: (Month month: 04 year: 2020)).! !

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 12/3/2020 00:22:19'!
PASSED!

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 12/3/2020 00:22:19'!
PASSED!

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithEmptyExpirationDate stamp: 'PGTA 12/3/2020 00:22:19'!
PASSED!

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputExpirationDate stamp: 'PGTA 12/3/2020 00:22:19'!
PASSED!

!testRun: #CreditCardTest #test04_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PGTA 12/3/2020 00:22:19'!
PASSED!

!testRun: #CreditCardTest #test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate stamp: 'PGTA 12/3/2020 00:22:19'!
PASSED!

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PGTA 12/3/2020 00:22:19'!
PASSED!

!testRun: #CreditCardTest #test07_cannotCreateCreditCardWithEmptyOwnerString stamp: 'PGTA 12/3/2020 00:22:19'!
PASSED!

!testRun: #CreditCardTest #test08_creditCardKnowsItsCardNumber stamp: 'PGTA 12/3/2020 00:22:19'!
PASSED!

!testRun: #CreditCardTest #test09_creditCardKnowsItsOwnerName stamp: 'PGTA 12/3/2020 00:22:19'!
PASSED!

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PGTA 12/3/2020 00:22:19'!
PASSED!

!testRun: #CreditCardTest #test11_creditCardKnowsIfItsExpired stamp: 'PGTA 12/3/2020 00:22:19'!
PASSED!

!methodRemoval: CreditCard #isExpired stamp: 'PGTA 12/3/2020 00:22:54'!
isExpired
	| today |
	today := FixedGregorianDate today.
	
	^expirationDate < (GregorianMonthOfYear year: today year month: today month).!

!testRun: #CreditCardTest #test07_cannotCreateCreditCardWithEmptyOwnerString stamp: 'PGTA 12/3/2020 00:23:00'!
PASSED!

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 12/3/2020 00:23:00'!
PASSED!

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithEmptyExpirationDate stamp: 'PGTA 12/3/2020 00:23:00'!
PASSED!

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputExpirationDate stamp: 'PGTA 12/3/2020 00:23:00'!
PASSED!

!testRun: #CreditCardTest #test04_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PGTA 12/3/2020 00:23:00'!
PASSED!

!testRun: #CreditCardTest #test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate stamp: 'PGTA 12/3/2020 00:23:00'!
PASSED!

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PGTA 12/3/2020 00:23:00'!
PASSED!

!testRun: #CreditCardTest #test07_cannotCreateCreditCardWithEmptyOwnerString stamp: 'PGTA 12/3/2020 00:23:00'!
PASSED!

!testRun: #CreditCardTest #test08_creditCardKnowsItsCardNumber stamp: 'PGTA 12/3/2020 00:23:00'!
PASSED!

!testRun: #CreditCardTest #test09_creditCardKnowsItsOwnerName stamp: 'PGTA 12/3/2020 00:23:00'!
PASSED!

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PGTA 12/3/2020 00:23:00'!
PASSED!

!testRun: #CreditCardTest #test11_creditCardKnowsIfItsExpired stamp: 'PGTA 12/3/2020 00:23:00'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PGTA 12/3/2020 00:23:10'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PGTA 12/3/2020 00:23:46'!
ERROR!

!methodRemoval: CreditCard #initializeExpiringOn: stamp: 'PGTA 12/3/2020 00:24:42'!
initializeExpiringOn: aMonth 
	
	expiration := aMonth !

!methodRemoval: CreditCard class #expiringOn: stamp: 'PGTA 12/3/2020 00:25:22'!
expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth!

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputExpirationDate stamp: 'PGTA 12/3/2020 00:25:30'!
PASSED!

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 12/3/2020 00:25:30'!
PASSED!

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithEmptyExpirationDate stamp: 'PGTA 12/3/2020 00:25:30'!
PASSED!

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputExpirationDate stamp: 'PGTA 12/3/2020 00:25:30'!
PASSED!

!testRun: #CreditCardTest #test04_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PGTA 12/3/2020 00:25:30'!
PASSED!

!testRun: #CreditCardTest #test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate stamp: 'PGTA 12/3/2020 00:25:30'!
PASSED!

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PGTA 12/3/2020 00:25:30'!
PASSED!

!testRun: #CreditCardTest #test07_cannotCreateCreditCardWithEmptyOwnerString stamp: 'PGTA 12/3/2020 00:25:30'!
PASSED!

!testRun: #CreditCardTest #test08_creditCardKnowsItsCardNumber stamp: 'PGTA 12/3/2020 00:25:30'!
PASSED!

!testRun: #CreditCardTest #test09_creditCardKnowsItsOwnerName stamp: 'PGTA 12/3/2020 00:25:30'!
PASSED!

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PGTA 12/3/2020 00:25:30'!
PASSED!

!testRun: #CreditCardTest #test11_creditCardKnowsIfItsExpired stamp: 'PGTA 12/3/2020 00:25:30'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PGTA 12/3/2020 00:25:34'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PGTA 12/3/2020 00:25:34'!
ERROR!

(today monthIndex) asString, (today yearNumber + 1) asString!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'PGTA 12/3/2020 00:28:04' prior: 50868987!
notExpiredCreditCard
	
	^CreditCard withNumber: '123456' owner: 'Pepito' expirationDate: (today monthIndex) asString, (today yearNumber + 1) asString.! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PGTA 12/3/2020 00:28:06'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PGTA 12/3/2020 00:28:14'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PGTA 12/3/2020 00:28:14'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PGTA 12/3/2020 00:28:14'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PGTA 12/3/2020 00:28:14'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PGTA 12/3/2020 00:28:14'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PGTA 12/3/2020 00:28:14'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PGTA 12/3/2020 00:28:14'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PGTA 12/3/2020 00:28:14'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'PGTA 12/3/2020 00:28:57' prior: 50868980!
expiredCreditCard
	
	^CreditCard withNumber: '123456' owner: 'Pepito' expirationDate: (today monthIndex) asString, (today yearNumber - 1) asString.! !

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PGTA 12/3/2020 00:29:05'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PGTA 12/3/2020 00:29:05'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PGTA 12/3/2020 00:29:05'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PGTA 12/3/2020 00:29:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PGTA 12/3/2020 00:29:05'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PGTA 12/3/2020 00:29:05'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PGTA 12/3/2020 00:29:05'!
PASSED!

!testRun: #CreditCardTest #test04_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PGTA 12/3/2020 00:29:11'!
PASSED!

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 12/3/2020 00:29:11'!
PASSED!

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithEmptyExpirationDate stamp: 'PGTA 12/3/2020 00:29:11'!
PASSED!

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputExpirationDate stamp: 'PGTA 12/3/2020 00:29:11'!
PASSED!

!testRun: #CreditCardTest #test04_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PGTA 12/3/2020 00:29:11'!
PASSED!

!testRun: #CreditCardTest #test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate stamp: 'PGTA 12/3/2020 00:29:11'!
PASSED!

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PGTA 12/3/2020 00:29:11'!
PASSED!

!testRun: #CreditCardTest #test07_cannotCreateCreditCardWithEmptyOwnerString stamp: 'PGTA 12/3/2020 00:29:11'!
PASSED!

!testRun: #CreditCardTest #test08_creditCardKnowsItsCardNumber stamp: 'PGTA 12/3/2020 00:29:11'!
PASSED!

!testRun: #CreditCardTest #test09_creditCardKnowsItsOwnerName stamp: 'PGTA 12/3/2020 00:29:11'!
PASSED!

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PGTA 12/3/2020 00:29:11'!
PASSED!

!testRun: #CreditCardTest #test11_creditCardKnowsIfItsExpired stamp: 'PGTA 12/3/2020 00:29:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PGTA 12/3/2020 00:29:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PGTA 12/3/2020 00:29:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PGTA 12/3/2020 00:29:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PGTA 12/3/2020 00:29:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PGTA 12/3/2020 00:29:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PGTA 12/3/2020 00:29:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PGTA 12/3/2020 00:29:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PGTA 12/3/2020 00:29:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceRaisesCashierErrorIfCartIsEmpty stamp: 'PGTA 12/3/2020 00:29:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PGTA 12/3/2020 00:29:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11_NewInterfaceHasNoSales stamp: 'PGTA 12/3/2020 00:29:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PGTA 12/3/2020 00:29:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PGTA 12/3/2020 00:29:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PGTA 12/3/2020 00:29:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PGTA 12/3/2020 00:29:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PGTA 12/3/2020 00:29:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PGTA 12/3/2020 00:29:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PGTA 12/3/2020 00:29:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PGTA 12/3/2020 00:29:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PGTA 12/3/2020 00:29:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PGTA 12/3/2020 00:29:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test22_InterfaceCannotCheckOutSameCartTwice stamp: 'PGTA 12/3/2020 00:29:23'!
PASSED!
!TusLibrosInterfaceTest methodsFor: '3-checkout cart' stamp: 'PGTA 12/3/2020 00:33:20'!
test10b_InterfaceTransactionIDIsDifferentForDifferentCheckOuts

	| cartId bookIsbn transactionId|
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	tusLibrosIface addToCart: cartId isbn: bookIsbn quantity: 2.
	
	transactionId := tusLibrosIface checkoutCart: cartId cardNumber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	self assert: transactionId isEmpty not.
	
	! !
!TusLibrosInterfaceTest methodsFor: '3-checkout cart' stamp: 'PGTA 12/3/2020 00:35:19' prior: 50873226!
test10b_InterfaceTransactionIDIsDifferentForDifferentCheckOuts

	| cartId bookIsbn transactionId1 transactionId2 |
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	
	tusLibrosIface addToCart: cartId isbn: bookIsbn quantity: 2.
	transactionId1 := tusLibrosIface checkoutCart: cartId cardNumber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	tusLibrosIface addToCart: cartId isbn: bookIsbn quantity: 2.
	transactionId2 := tusLibrosIface checkoutCart: cartId cardNumber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	self assert: (transactionId1 = transactionId2) not.! !
!TusLibrosInterfaceTest methodsFor: '3-checkout cart' stamp: 'PGTA 12/3/2020 00:36:06' prior: 50873244!
test10b_InterfaceTransactionIDIsDifferentForDifferentCheckOuts

	| cartId bookIsbn transactionId1 transactionId2 |
	
	bookIsbn := testObjectsFactory itemSellByTheStore.
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	tusLibrosIface addToCart: cartId isbn: bookIsbn quantity: 2.
	transactionId1 := tusLibrosIface checkoutCart: cartId cardNumber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	cartId := tusLibrosIface createCartWithClient: '1239' password: 'test123'.
	tusLibrosIface addToCart: cartId isbn: bookIsbn quantity: 2.
	transactionId2 := tusLibrosIface checkoutCart: cartId cardNumber: '12345458' expDate: '052025' ownerName: 'Pepe Sanchez'.
	
	self assert: (transactionId1 = transactionId2) not.! !

!testRun: #TusLibrosInterfaceTest #test10b_InterfaceTransactionIDIsDifferentForDifferentCheckOuts stamp: 'PGTA 12/3/2020 00:36:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PGTA 12/3/2020 00:36:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PGTA 12/3/2020 00:36:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PGTA 12/3/2020 00:36:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PGTA 12/3/2020 00:36:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PGTA 12/3/2020 00:36:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PGTA 12/3/2020 00:36:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PGTA 12/3/2020 00:36:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PGTA 12/3/2020 00:36:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceRaisesCashierErrorIfCartIsEmpty stamp: 'PGTA 12/3/2020 00:36:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10b_InterfaceTransactionIDIsDifferentForDifferentCheckOuts stamp: 'PGTA 12/3/2020 00:36:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PGTA 12/3/2020 00:36:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11_NewInterfaceHasNoSales stamp: 'PGTA 12/3/2020 00:36:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PGTA 12/3/2020 00:36:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PGTA 12/3/2020 00:36:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PGTA 12/3/2020 00:36:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PGTA 12/3/2020 00:36:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PGTA 12/3/2020 00:36:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PGTA 12/3/2020 00:36:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PGTA 12/3/2020 00:36:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PGTA 12/3/2020 00:36:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PGTA 12/3/2020 00:36:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PGTA 12/3/2020 00:36:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test22_InterfaceCannotCheckOutSameCartTwice stamp: 'PGTA 12/3/2020 00:36:09'!
PASSED!

----SNAPSHOT----(3 December 2020 00:40:10) CuisUniversity-4384.image priorSource: 17303101!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PGTA 12/3/2020 00:40:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PGTA 12/3/2020 00:40:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PGTA 12/3/2020 00:40:14'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PGTA 12/3/2020 00:40:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PGTA 12/3/2020 00:40:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PGTA 12/3/2020 00:40:14'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PGTA 12/3/2020 00:40:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PGTA 12/3/2020 00:40:14'!
PASSED!

!testRun: #CartTest #test09CartDoesntAddAnyItemsIntoTheListWhenItIsEmpty stamp: 'PGTA 12/3/2020 00:40:14'!
PASSED!

!testRun: #CartTest #test10CartAddsItsItemsIntoTheListWhenItIsNotEmpty stamp: 'PGTA 12/3/2020 00:40:14'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PGTA 12/3/2020 00:40:14'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PGTA 12/3/2020 00:40:14'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PGTA 12/3/2020 00:40:14'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PGTA 12/3/2020 00:40:14'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PGTA 12/3/2020 00:40:14'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PGTA 12/3/2020 00:40:14'!
PASSED!

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 12/3/2020 00:40:14'!
PASSED!

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithEmptyExpirationDate stamp: 'PGTA 12/3/2020 00:40:14'!
PASSED!

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputExpirationDate stamp: 'PGTA 12/3/2020 00:40:14'!
PASSED!

!testRun: #CreditCardTest #test04_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PGTA 12/3/2020 00:40:14'!
PASSED!

!testRun: #CreditCardTest #test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate stamp: 'PGTA 12/3/2020 00:40:14'!
PASSED!

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PGTA 12/3/2020 00:40:14'!
PASSED!

!testRun: #CreditCardTest #test07_cannotCreateCreditCardWithEmptyOwnerString stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #CreditCardTest #test08_creditCardKnowsItsCardNumber stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #CreditCardTest #test09_creditCardKnowsItsOwnerName stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #CreditCardTest #test11_creditCardKnowsIfItsExpired stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceRaisesCashierErrorIfCartIsEmpty stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10b_InterfaceTransactionIDIsDifferentForDifferentCheckOuts stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11_NewInterfaceHasNoSales stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test22_InterfaceCannotCheckOutSameCartTwice stamp: 'PGTA 12/3/2020 00:40:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #CartTest #test09CartDoesntAddAnyItemsIntoTheListWhenItIsEmpty stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #CartTest #test10CartAddsItsItemsIntoTheListWhenItIsNotEmpty stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithEmptyExpirationDate stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputExpirationDate stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #CreditCardTest #test04_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #CreditCardTest #test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #CreditCardTest #test07_cannotCreateCreditCardWithEmptyOwnerString stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #CreditCardTest #test08_creditCardKnowsItsCardNumber stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #CreditCardTest #test09_creditCardKnowsItsOwnerName stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #CreditCardTest #test11_creditCardKnowsIfItsExpired stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01_CannotCreateCartWithInvalidClient stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02_CannotCreateCartWithInvalidPassword stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03_InterfaceCanCreateACartAndIsEmpty stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04_InterfaceCannotListAnInvalidCartId stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05_InterfaceCanCreateManyCarts stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06_InterfaceCanAddBooksIntoACartAndListThem stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07_InterfaceCannotAddBooksIntoAnInvalidCart stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08_InterfaceCannotCheckoutAnInvalidCart stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09_InterfaceRaisesCashierErrorIfCartIsEmpty stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10b_InterfaceTransactionIDIsDifferentForDifferentCheckOuts stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10_InterfaceSuccessfullyMakesASale stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11_NewInterfaceHasNoSales stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12_CannotListPurchasesForAnInvalidClient stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13_CannotListPurchasesForAClientWithAnInvalidPassword stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14_InterfaceCanListOneClientPurchase stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15_InterfaceCanListMoreThanOnePurchaseFromAClient stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16_InterfaceCanListPurchasesFromMoreThanOneClient stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17_InterfaceCannotListAnExpiredCart stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test18_InterfaceCannotAddToAnExpiredCart stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test19_InterfaceCannotCheckoutAnExpiredCart stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test20_InterfaceUpdatesTheExpirationTimeAfterAddToCart stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test21_InterfaceUpdatesTheExpirationTimeAfterListCart stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test22_InterfaceCannotCheckOutSameCartTwice stamp: 'PGTA 12/3/2020 00:40:24'!
PASSED!

----SNAPSHOT----(3 December 2020 00:41:16) CuisUniversity-4384.image priorSource: 17335611!

----QUIT----(3 December 2020 00:42:03) CuisUniversity-4384.image priorSource: 17347514!