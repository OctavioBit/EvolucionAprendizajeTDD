

----STARTUP---- (25 October 2020 11:26:44) as /home/cmarta/Downloads/parcial/limpio/linux64/CuisUniversity-4384.image!


TestCase subclass: #XXTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!

!classDefinition: #XXTest category: 'ISW1 - Ejercicio 16' stamp: 'CM 10/25/2020 11:28:17'!
TestCase subclass: #XXTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!

!classDefinition: #MarsRover category: 'ISW1 - Ejercicio 16' stamp: 'CM 10/25/2020 11:30:28'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!
!XXTest methodsFor: 'nil' stamp: 'CM 10/25/2020 11:30:20'!
test01
	| marsRover |
	
	marsRover := MarsRover startingAtX: 50 andY: 50 headintTo: $N.

	self assert: marsRover position equals: #(50 50).
	self assert: marsRover headingTo equals: $N.! !

!testRun: #XXTest #test01 stamp: 'CM 10/25/2020 11:30:33'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'CM 10/25/2020 11:30:38'!
startingAtX: aSmallInteger andY: aSmallInteger2 headintTo: aCharacter 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeStartingAtX: aSmallInteger andY: aSmallInteger2 headintTo: aCharacter ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'CM 10/25/2020 11:31:48' prior: 50867798!
startingAtX: startingCoordinateX andY: startingCoordinateY headintTo: aCardinalPoint 
	
	^self new initializeStartingAtX: startingCoordinateX andY: startingCoordinateY headintTo: aCardinalPoint ! !

!testRun: #XXTest #test01 stamp: 'CM 10/25/2020 11:31:50'!
ERROR!

!classDefinition: #MarsRover category: 'ISW1 - Ejercicio 16' stamp: 'CM 10/25/2020 11:31:57'!
Object subclass: #MarsRover
	instanceVariableNames: 'startingCoordinateX_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!

!classDefinition: #MarsRover category: 'ISW1 - Ejercicio 16' stamp: 'CM 10/25/2020 11:31:57'!
Object subclass: #MarsRover
	instanceVariableNames: 'startingCoordinateX_CHANGE_ME startingCoordinateY_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!

!classDefinition: #MarsRover category: 'ISW1 - Ejercicio 16' stamp: 'CM 10/25/2020 11:31:57'!
Object subclass: #MarsRover
	instanceVariableNames: 'startingCoordinateX_CHANGE_ME startingCoordinateY_CHANGE_ME cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!
!MarsRover methodsFor: 'initialization' stamp: 'CM 10/25/2020 11:31:57'!
initializeStartingAtX: startingCoordinateX andY: startingCoordinateY headintTo: aCardinalPoint 
	self shouldBeImplemented.
	startingCoordinateX_CHANGE_ME := startingCoordinateX.
	startingCoordinateY_CHANGE_ME := startingCoordinateY.
	cardinalPoint := aCardinalPoint.! !
!MarsRover methodsFor: 'initialization' stamp: 'CM 10/25/2020 11:32:08' prior: 50867848!
initializeStartingAtX: startingCoordinateX andY: startingCoordinateY headintTo: aCardinalPoint 
	
	startingCoordinateX_CHANGE_ME := startingCoordinateX.
	startingCoordinateY_CHANGE_ME := startingCoordinateY.
	cardinalPoint := aCardinalPoint.! !

!classDefinition: #MarsRover category: 'ISW1 - Ejercicio 16' stamp: 'CM 10/25/2020 11:32:18'!
Object subclass: #MarsRover
	instanceVariableNames: 'coordinateX startingCoordinateY_CHANGE_ME cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 11:32:18' prior: 50867860!
initializeStartingAtX: startingCoordinateX andY: startingCoordinateY headintTo: aCardinalPoint 
	
	coordinateX := startingCoordinateX.
	startingCoordinateY_CHANGE_ME := startingCoordinateY.
	cardinalPoint := aCardinalPoint.! !

!testRun: #XXTest #test01 stamp: 'CM 10/25/2020 11:32:25'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'CM 10/25/2020 11:32:36'!
position
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'accessing' stamp: 'CM 10/25/2020 11:33:15' prior: 50867892!
position
	^ Array with: coordinateX  with: startingCoordinateY_CHANGE_ME.! !

!testRun: #XXTest #test01 stamp: 'CM 10/25/2020 11:33:16'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'CM 10/25/2020 11:33:22'!
headingTo
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'accessing' stamp: 'CM 10/25/2020 11:33:31' prior: 50867903!
headingTo
	^ cardinalPoint .! !

!testRun: #XXTest #test01 stamp: 'CM 10/25/2020 11:33:33'!
PASSED!

!testRun: #XXTest #test01 stamp: 'CM 10/25/2020 11:33:33'!
PASSED!

!classDefinition: #MarsRover category: 'ISW1 - Ejercicio 16' stamp: 'CM 10/25/2020 11:33:58'!
Object subclass: #MarsRover
	instanceVariableNames: 'coordinateX coordinateY cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 11:33:58' prior: 50867880!
initializeStartingAtX: startingCoordinateX andY: startingCoordinateY headintTo: aCardinalPoint 
	
	coordinateX := startingCoordinateX.
	coordinateY := startingCoordinateY.
	cardinalPoint := aCardinalPoint.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 11:33:58' prior: 50867896!
position
	^ Array with: coordinateX  with: coordinateY.! !

!classDefinition: #MarsRover category: 'ISW1 - Ejercicio 16' stamp: 'CM 10/25/2020 11:34:06'!
Object subclass: #MarsRover
	instanceVariableNames: 'coordinateX coordinateY direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 11:34:06' prior: 50867924!
initializeStartingAtX: startingCoordinateX andY: startingCoordinateY headintTo: aCardinalPoint 
	
	coordinateX := startingCoordinateX.
	coordinateY := startingCoordinateY.
	direction := aCardinalPoint.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 11:34:06' prior: 50867907!
headingTo
	^ direction .! !
!MarsRover methodsFor: 'initialization' stamp: 'CM 10/25/2020 11:34:39'!
initializeStartingAtX: startingCoordinateX andY: startingCoordinateY headingTo: aCardinalPoint 
	
	coordinateX := startingCoordinateX.
	coordinateY := startingCoordinateY.
	direction := aCardinalPoint.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 11:34:39' prior: 50867810!
startingAtX: startingCoordinateX andY: startingCoordinateY headintTo: aCardinalPoint 
	
	^self new initializeStartingAtX: startingCoordinateX andY: startingCoordinateY headingTo: aCardinalPoint ! !

!methodRemoval: MarsRover #initializeStartingAtX:andY:headintTo: stamp: 'CM 10/25/2020 11:34:39'!
initializeStartingAtX: startingCoordinateX andY: startingCoordinateY headintTo: aCardinalPoint 
	
	coordinateX := startingCoordinateX.
	coordinateY := startingCoordinateY.
	direction := aCardinalPoint.!

!testRun: #XXTest #test01 stamp: 'CM 10/25/2020 11:34:44'!
PASSED!
!XXTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 11:37:21'!
test02
	| marsRover |
	
	marsRover := MarsRover startingAtX: 10 andY: 20 headintTo: $N.
	marsRover executeCommands: ''.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover headingTo equals: $N.! !

!testRun: #XXTest #test02 stamp: 'CM 10/25/2020 11:37:24'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 11:37:32'!
executeCommands: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 11:37:37' prior: 50868004!
executeCommands: aString 
	! !

!testRun: #XXTest #test02 stamp: 'CM 10/25/2020 11:37:38'!
PASSED!

!testRun: #XXTest #test01 stamp: 'CM 10/25/2020 11:37:38'!
PASSED!

!testRun: #XXTest #test02 stamp: 'CM 10/25/2020 11:37:38'!
PASSED!
!XXTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 11:38:21'!
test03
	| marsRover |
	
	marsRover := MarsRover startingAtX: 10 andY: 20 headintTo: $N.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(9 20).
	self assert: marsRover headingTo equals: $N.! !

!testRun: #XXTest #test03 stamp: 'CM 10/25/2020 11:38:24'!
FAILURE!

!testRun: #XXTest #test03 stamp: 'CM 10/25/2020 11:38:24'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 11:39:36' prior: 50868009!
executeCommands: aString 
	aString isEmpty ifFalse: [
		coordinateX := coordinateX - 1
	]
	! !

!testRun: #XXTest #test03 stamp: 'CM 10/25/2020 11:39:37'!
PASSED!

!testRun: #XXTest #test01 stamp: 'CM 10/25/2020 11:39:40'!
PASSED!

!testRun: #XXTest #test02 stamp: 'CM 10/25/2020 11:39:40'!
PASSED!

!testRun: #XXTest #test03 stamp: 'CM 10/25/2020 11:39:40'!
PASSED!
!XXTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 11:40:34'!
test04
	| marsRover |
	
	marsRover := MarsRover startingAtX: 10 andY: 20 headintTo: $S.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(11 20).
	self assert: marsRover headingTo equals: $S.! !

!testRun: #XXTest #test04 stamp: 'CM 10/25/2020 11:40:36'!
FAILURE!

!testRun: #XXTest #test04 stamp: 'CM 10/25/2020 11:40:36'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 11:41:39' prior: 50868034!
executeCommands: aString 
	aString isEmpty ifFalse: [
		direction = $N ifTrue: [
			coordinateX := coordinateX - 1
		] ifFalse: [
			coordinateX := coordinateX + 1
		]
		
	]
	! !

!testRun: #XXTest #test04 stamp: 'CM 10/25/2020 11:41:40'!
PASSED!

!testRun: #XXTest #test01 stamp: 'CM 10/25/2020 11:41:42'!
PASSED!

!testRun: #XXTest #test02 stamp: 'CM 10/25/2020 11:41:42'!
PASSED!

!testRun: #XXTest #test03 stamp: 'CM 10/25/2020 11:41:42'!
PASSED!

!testRun: #XXTest #test04 stamp: 'CM 10/25/2020 11:41:42'!
PASSED!

----SNAPSHOT----(25 October 2020 11:42:03) CuisUniversity-4384.image priorSource: 17155564!

Object subclass: #MarsRoverState
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!

!classDefinition: #MarsRoverState category: 'ISW1 - Ejercicio 16' stamp: 'CM 10/25/2020 11:44:24'!
Object subclass: #MarsRoverState
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!
!MarsRoverState class methodsFor: 'nil' stamp: 'CM 10/25/2020 11:45:03'!
for: aMarsRover

	^ self new initializeFor: aMarsRover! !
!MarsRoverState methodsFor: 'nil' stamp: 'CM 10/25/2020 11:45:43'!
initializeFor: aMarsRover
	
	marsRover := aMarsRover .! !
!MarsRoverState class methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 11:46:20'!
canHandle: aMarsRover

	self subclassResponsibility .! !
!MarsRoverState class methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 11:47:02'!
stateFor: aMarsRover

	^(self subclasses detect: [:aMarsRoverStateClass | aMarsRoverStateClass canHandle: aMarsRover ]) for: aMarsRover! !
!MarsRoverState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 11:48:08'!
moveForward
	
	self subclassResponsibility .! !

MarsRoverState subclass: #MarsRoverHeadingNorthState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!

!classDefinition: #MarsRoverHeadingNorthState category: 'ISW1 - Ejercicio 16' stamp: 'CM 10/25/2020 11:48:41'!
MarsRoverState subclass: #MarsRoverHeadingNorthState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!
!MarsRoverHeadingNorthState class methodsFor: 'nil' stamp: 'CM 10/25/2020 11:49:17' overrides: 50868106!
canHandle: aMarsRover

	^ aMarsRover direction = $N! !

MarsRoverState subclass: #MarsRoverHeadingSouthState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!

!classDefinition: #MarsRoverHeadingSouthState category: 'ISW1 - Ejercicio 16' stamp: 'CM 10/25/2020 11:49:43'!
MarsRoverState subclass: #MarsRoverHeadingSouthState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!
!MarsRoverHeadingSouthState class methodsFor: 'nil' stamp: 'CM 10/25/2020 11:50:12' overrides: 50868106!
canHandle: aMarsRover

	^ aMarsRover direction = $S.! !
!MarsRoverHeadingNorthState methodsFor: 'nil' stamp: 'CM 10/25/2020 11:50:45' overrides: 50868118!
moveForward

	marsRover moveNorth.! !
!MarsRoverHeadingSouthState methodsFor: 'nil' stamp: 'CM 10/25/2020 11:52:30' overrides: 50868118!
moveForward

	marsRover moveSouth.! !
!MarsRover methodsFor: 'private' stamp: 'CM 10/25/2020 11:53:05'!
moveNorth

	coordinateX := coordinateX - 1.! !
!MarsRover methodsFor: 'private' stamp: 'CM 10/25/2020 11:53:13'!
moveSouth

	coordinateX := coordinateX + 1.! !
!MarsRover methodsFor: 'private' stamp: 'CM 10/25/2020 11:54:03'!
state

	^ MarsRoverState stateFor: self.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 11:54:41' prior: 50868063!
executeCommands: aString 
	aString isEmpty ifFalse: [
		self state moveForward .
	]
	! !

!testRun: #XXTest #test01 stamp: 'CM 10/25/2020 11:54:46'!
PASSED!

!testRun: #XXTest #test02 stamp: 'CM 10/25/2020 11:54:46'!
PASSED!

!testRun: #XXTest #test03 stamp: 'CM 10/25/2020 11:54:46'!
ERROR!

!testRun: #XXTest #test04 stamp: 'CM 10/25/2020 11:54:46'!
ERROR!

!testRun: #XXTest #test03 stamp: 'CM 10/25/2020 11:54:49'!
ERROR!
!MarsRoverHeadingNorthState class methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 11:56:09' prior: 50868137 overrides: 50868106!
canHandle: aMarsRover

	^ aMarsRover headingTo = $N! !
!MarsRoverHeadingSouthState class methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 11:56:12' prior: 50868156 overrides: 50868106!
canHandle: aMarsRover

	^ aMarsRover headingTo = $S.! !

!testRun: #XXTest #test01 stamp: 'CM 10/25/2020 11:56:14'!
PASSED!

!testRun: #XXTest #test02 stamp: 'CM 10/25/2020 11:56:14'!
PASSED!

!testRun: #XXTest #test03 stamp: 'CM 10/25/2020 11:56:14'!
PASSED!

!testRun: #XXTest #test04 stamp: 'CM 10/25/2020 11:56:14'!
PASSED!
!XXTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 11:57:40' prior: 50868048!
test04
	| marsRover |
	
	marsRover := MarsRover startingAtX: 10 andY: 20 headintTo: $E.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(10 21).
	self assert: marsRover headingTo equals: $E.! !
!XXTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 11:40:34' prior: 50868221!
test04
	| marsRover |
	
	marsRover := MarsRover startingAtX: 10 andY: 20 headintTo: $S.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(11 20).
	self assert: marsRover headingTo equals: $S.! !
!XXTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 11:58:08'!
test05
	| marsRover |
	
	marsRover := MarsRover startingAtX: 10 andY: 20 headintTo: $E.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(10 21).
	self assert: marsRover headingTo equals: $E.! !

!testRun: #XXTest #test05 stamp: 'CM 10/25/2020 11:58:09'!
ERROR!

!testRun: #XXTest #test05 stamp: 'CM 10/25/2020 11:58:10'!
ERROR!

MarsRoverState subclass: #MarsRoverHeadingEastState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!

!classDefinition: #MarsRoverHeadingEastState category: 'ISW1 - Ejercicio 16' stamp: 'CM 10/25/2020 11:58:35'!
MarsRoverState subclass: #MarsRoverHeadingEastState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!
!MarsRoverHeadingEastState class methodsFor: 'nil' stamp: 'CM 10/25/2020 11:58:50' overrides: 50868106!
canHandle: aMarsRover

	^ aMarsRover headingTo = $E.! !
!MarsRoverHeadingEastState methodsFor: 'nil' stamp: 'CM 10/25/2020 11:59:09' overrides: 50868118!
moveForward

	marsRover moveEast.! !
!MarsRover methodsFor: 'private' stamp: 'CM 10/25/2020 11:59:28'!
moveEast

	coordinateY := coordinateY + 1.! !

!testRun: #XXTest #test01 stamp: 'CM 10/25/2020 11:59:29'!
PASSED!

!testRun: #XXTest #test02 stamp: 'CM 10/25/2020 11:59:29'!
PASSED!

!testRun: #XXTest #test03 stamp: 'CM 10/25/2020 11:59:29'!
PASSED!

!testRun: #XXTest #test04 stamp: 'CM 10/25/2020 11:59:29'!
PASSED!

!testRun: #XXTest #test05 stamp: 'CM 10/25/2020 11:59:29'!
PASSED!
!XXTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:00:38'!
test06
	| marsRover |
	
	marsRover := MarsRover startingAtX: 10 andY: 20 headintTo: $W.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(10 19).
	self assert: marsRover headingTo equals: $W.! !

!testRun: #XXTest #test06 stamp: 'CM 10/25/2020 12:00:42'!
ERROR!

!testRun: #XXTest #test06 stamp: 'CM 10/25/2020 12:00:42'!
ERROR!

MarsRoverState subclass: #MarsRoverHeadingWestState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!

!classDefinition: #MarsRoverHeadingWestState category: 'ISW1 - Ejercicio 16' stamp: 'CM 10/25/2020 12:00:56'!
MarsRoverState subclass: #MarsRoverHeadingWestState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!
!MarsRoverHeadingWestState class methodsFor: 'nil' stamp: 'CM 10/25/2020 12:01:17' overrides: 50868106!
canHandle: aMarsRover

	^ aMarsRover headingTo = $W.! !
!MarsRoverHeadingWestState methodsFor: 'nil' stamp: 'CM 10/25/2020 12:01:36' overrides: 50868118!
moveForward

	marsRover moveWest.! !
!MarsRover methodsFor: 'private' stamp: 'CM 10/25/2020 12:02:04'!
moveWest

	coordinateY := coordinateY - 1.! !

!testRun: #XXTest #test01 stamp: 'CM 10/25/2020 12:02:06'!
PASSED!

!testRun: #XXTest #test02 stamp: 'CM 10/25/2020 12:02:06'!
PASSED!

!testRun: #XXTest #test03 stamp: 'CM 10/25/2020 12:02:06'!
PASSED!

!testRun: #XXTest #test04 stamp: 'CM 10/25/2020 12:02:06'!
PASSED!

!testRun: #XXTest #test05 stamp: 'CM 10/25/2020 12:02:06'!
PASSED!

!testRun: #XXTest #test06 stamp: 'CM 10/25/2020 12:02:06'!
PASSED!
!MarsRover class methodsFor: 'instance creation' stamp: 'CM 10/25/2020 12:02:57'!
startingAtX: startingCoordinateX andY: startingCoordinateY headingTo: aCardinalPoint 
	
	^self new initializeStartingAtX: startingCoordinateX andY: startingCoordinateY headingTo: aCardinalPoint ! !
!XXTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:02:57' prior: 50868019!
test03
	| marsRover |
	
	marsRover := MarsRover startingAtX: 10 andY: 20 headingTo: $N.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(9 20).
	self assert: marsRover headingTo equals: $N.! !
!XXTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:02:57' prior: 50868293!
test06
	| marsRover |
	
	marsRover := MarsRover startingAtX: 10 andY: 20 headingTo: $W.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(10 19).
	self assert: marsRover headingTo equals: $W.! !
!XXTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:02:57' prior: 50867787!
test01
	| marsRover |
	
	marsRover := MarsRover startingAtX: 50 andY: 50 headingTo: $N.

	self assert: marsRover position equals: #(50 50).
	self assert: marsRover headingTo equals: $N.! !
!XXTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:02:57' prior: 50867992!
test02
	| marsRover |
	
	marsRover := MarsRover startingAtX: 10 andY: 20 headingTo: $N.
	marsRover executeCommands: ''.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover headingTo equals: $N.! !
!XXTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:02:57' prior: 50868241!
test05
	| marsRover |
	
	marsRover := MarsRover startingAtX: 10 andY: 20 headingTo: $E.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(10 21).
	self assert: marsRover headingTo equals: $E.! !
!XXTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:02:57' prior: 50868231!
test04
	| marsRover |
	
	marsRover := MarsRover startingAtX: 10 andY: 20 headingTo: $S.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(11 20).
	self assert: marsRover headingTo equals: $S.! !

!methodRemoval: MarsRover class #startingAtX:andY:headintTo: stamp: 'CM 10/25/2020 12:02:57'!
startingAtX: startingCoordinateX andY: startingCoordinateY headintTo: aCardinalPoint 
	
	^self new initializeStartingAtX: startingCoordinateX andY: startingCoordinateY headingTo: aCardinalPoint !

!testRun: #XXTest #test01 stamp: 'CM 10/25/2020 12:03:01'!
PASSED!

!testRun: #XXTest #test02 stamp: 'CM 10/25/2020 12:03:01'!
PASSED!

!testRun: #XXTest #test03 stamp: 'CM 10/25/2020 12:03:01'!
PASSED!

!testRun: #XXTest #test04 stamp: 'CM 10/25/2020 12:03:01'!
PASSED!

!testRun: #XXTest #test05 stamp: 'CM 10/25/2020 12:03:01'!
PASSED!

!testRun: #XXTest #test06 stamp: 'CM 10/25/2020 12:03:01'!
PASSED!

!classRenamed: #XXTest as: #MarsRoverTest stamp: 'CM 10/25/2020 12:03:18'!
Smalltalk renameClassNamed: #XXTest as: #MarsRoverTest!

!testRun: #MarsRoverTest #test01 stamp: 'CM 10/25/2020 12:03:22'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'CM 10/25/2020 12:03:22'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'CM 10/25/2020 12:03:22'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'CM 10/25/2020 12:03:22'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'CM 10/25/2020 12:03:22'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'CM 10/25/2020 12:03:22'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:06:04'!
test01MarsRoverShouldBeLocatedAtStartingPosition
	| marsRover |
	
	marsRover := MarsRover startingAtX: 50 andY: 50 headingTo: $N.

	self assert: marsRover position equals: #(50 50).
	self assert: marsRover headingTo equals: $N.! !

!methodRemoval: MarsRoverTest #test01 stamp: 'CM 10/25/2020 12:06:04'!
test01
	| marsRover |
	
	marsRover := MarsRover startingAtX: 50 andY: 50 headingTo: $N.

	self assert: marsRover position equals: #(50 50).
	self assert: marsRover headingTo equals: $N.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:06:36'!
test02MarsRoverShouldNotMoveWhenGivenEmptyCommands
	| marsRover |
	
	marsRover := MarsRover startingAtX: 10 andY: 20 headingTo: $N.
	marsRover executeCommands: ''.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover headingTo equals: $N.! !

!methodRemoval: MarsRoverTest #test02 stamp: 'CM 10/25/2020 12:06:36'!
test02
	| marsRover |
	
	marsRover := MarsRover startingAtX: 10 andY: 20 headingTo: $N.
	marsRover executeCommands: ''.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover headingTo equals: $N.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:07:46'!
test03MarsRoverShouldMoveForwardWhenHeadingNorth
	| marsRover |
	
	marsRover := MarsRover startingAtX: 10 andY: 20 headingTo: $N.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(9 20).
	self assert: marsRover headingTo equals: $N.! !

!methodRemoval: MarsRoverTest #test03 stamp: 'CM 10/25/2020 12:07:46'!
test03
	| marsRover |
	
	marsRover := MarsRover startingAtX: 10 andY: 20 headingTo: $N.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(9 20).
	self assert: marsRover headingTo equals: $N.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:08:17'!
test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth
	| marsRover |
	
	marsRover := MarsRover startingAtX: 10 andY: 20 headingTo: $N.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(9 20).
	self assert: marsRover headingTo equals: $N.! !

!methodRemoval: MarsRoverTest #test03MarsRoverShouldMoveForwardWhenHeadingNorth stamp: 'CM 10/25/2020 12:08:17'!
test03MarsRoverShouldMoveForwardWhenHeadingNorth
	| marsRover |
	
	marsRover := MarsRover startingAtX: 10 andY: 20 headingTo: $N.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(9 20).
	self assert: marsRover headingTo equals: $N.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:09:13'!
test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth
	| marsRover |
	
	marsRover := MarsRover startingAtX: 10 andY: 20 headingTo: $S.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(11 20).
	self assert: marsRover headingTo equals: $S.! !

!methodRemoval: MarsRoverTest #test04 stamp: 'CM 10/25/2020 12:09:13'!
test04
	| marsRover |
	
	marsRover := MarsRover startingAtX: 10 andY: 20 headingTo: $S.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(11 20).
	self assert: marsRover headingTo equals: $S.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:09:30'!
test05MarsRoverMovesForwardCorrectlyWhenHeadingEast
	| marsRover |
	
	marsRover := MarsRover startingAtX: 10 andY: 20 headingTo: $E.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(10 21).
	self assert: marsRover headingTo equals: $E.! !

!methodRemoval: MarsRoverTest #test05 stamp: 'CM 10/25/2020 12:09:30'!
test05
	| marsRover |
	
	marsRover := MarsRover startingAtX: 10 andY: 20 headingTo: $E.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(10 21).
	self assert: marsRover headingTo equals: $E.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:09:49'!
test06MarsRoverMovesForwardCorrectlyWhenHeadingWest
	| marsRover |
	
	marsRover := MarsRover startingAtX: 10 andY: 20 headingTo: $W.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(10 19).
	self assert: marsRover headingTo equals: $W.! !

!methodRemoval: MarsRoverTest #test06 stamp: 'CM 10/25/2020 12:09:49'!
test06
	| marsRover |
	
	marsRover := MarsRover startingAtX: 10 andY: 20 headingTo: $W.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(10 19).
	self assert: marsRover headingTo equals: $W.!

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtStartingPosition stamp: 'CM 10/25/2020 12:10:00'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 12:10:00'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:10:00'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:10:00'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:10:00'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:10:00'!
PASSED!
!MarsRover class methodsFor: 'instance creation' stamp: 'CM 10/25/2020 12:11:05'!
landingAtX: startingCoordinateX andY: startingCoordinateY pointingTo: aCardinalPoint 
	
	^self new initializeStartingAtX: startingCoordinateX andY: startingCoordinateY headingTo: aCardinalPoint ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:11:05' prior: 50868558!
test05MarsRoverMovesForwardCorrectlyWhenHeadingEast
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $E.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(10 21).
	self assert: marsRover headingTo equals: $E.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:11:05' prior: 50868537!
test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $S.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(11 20).
	self assert: marsRover headingTo equals: $S.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:11:05' prior: 50868514!
test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $N.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(9 20).
	self assert: marsRover headingTo equals: $N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:11:05' prior: 50868474!
test02MarsRoverShouldNotMoveWhenGivenEmptyCommands
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $N.
	marsRover executeCommands: ''.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover headingTo equals: $N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:11:05' prior: 50868579!
test06MarsRoverMovesForwardCorrectlyWhenHeadingWest
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $W.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(10 19).
	self assert: marsRover headingTo equals: $W.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:11:05' prior: 50868456!
test01MarsRoverShouldBeLocatedAtStartingPosition
	| marsRover |
	
	marsRover := MarsRover landingAtX: 50 andY: 50 pointingTo: $N.

	self assert: marsRover position equals: #(50 50).
	self assert: marsRover headingTo equals: $N.! !

!methodRemoval: MarsRover class #startingAtX:andY:headingTo: stamp: 'CM 10/25/2020 12:11:05'!
startingAtX: startingCoordinateX andY: startingCoordinateY headingTo: aCardinalPoint 
	
	^self new initializeStartingAtX: startingCoordinateX andY: startingCoordinateY headingTo: aCardinalPoint !
!MarsRover methodsFor: 'initialization' stamp: 'CM 10/25/2020 12:12:09'!
initializeLandingAtX: startingCoordinateX andY: startingCoordinateY pointingTo: aCardinalPoint 
	
	coordinateX := startingCoordinateX.
	coordinateY := startingCoordinateY.
	direction := aCardinalPoint.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:12:09' prior: 50868622!
landingAtX: startingCoordinateX andY: startingCoordinateY pointingTo: aCardinalPoint 
	
	^self new initializeLandingAtX: startingCoordinateX andY: startingCoordinateY pointingTo: aCardinalPoint ! !

!methodRemoval: MarsRover #initializeStartingAtX:andY:headingTo: stamp: 'CM 10/25/2020 12:12:09'!
initializeStartingAtX: startingCoordinateX andY: startingCoordinateY headingTo: aCardinalPoint 
	
	coordinateX := startingCoordinateX.
	coordinateY := startingCoordinateY.
	direction := aCardinalPoint.!

!classDefinition: #MarsRover category: 'ISW1 - Ejercicio 16' stamp: 'CM 10/25/2020 12:12:57'!
Object subclass: #MarsRover
	instanceVariableNames: 'coordinateX coordinateY pointingTo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:12:57' prior: 50868711!
initializeLandingAtX: startingCoordinateX andY: startingCoordinateY pointingTo: aCardinalPoint 
	
	coordinateX := startingCoordinateX.
	coordinateY := startingCoordinateY.
	pointingTo := aCardinalPoint.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:12:57' prior: 50867957!
headingTo
	^ pointingTo .! !

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtStartingPosition stamp: 'CM 10/25/2020 12:13:02'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 12:13:02'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:13:02'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:13:02'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:13:02'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:13:02'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:14:26'!
test07
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $N.
	marsRover executeCommands: 'ff'.

	self assert: marsRover position equals: #(8 20).
	self assert: marsRover headingTo equals: $N.! !

!testRun: #MarsRoverTest #test07 stamp: 'CM 10/25/2020 12:14:29'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'CM 10/25/2020 12:14:29'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:15:35' prior: 50868183!
executeCommands: aString 
	aString isEmpty ifFalse: [
		aString do: [ :aCharacter | 
			self state moveForward .
		]
	]
	! !

!testRun: #MarsRoverTest #test07 stamp: 'CM 10/25/2020 12:15:37'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtStartingPosition stamp: 'CM 10/25/2020 12:15:39'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 12:15:39'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:15:39'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:15:39'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:15:39'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:15:39'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'CM 10/25/2020 12:15:39'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:15:52' prior: 50868799!
executeCommands: aString 
	
	aString do: [ :aCharacter | 
		self state moveForward .
	]

	! !

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtStartingPosition stamp: 'CM 10/25/2020 12:15:53'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 12:15:53'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:15:53'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:15:54'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:15:54'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:15:54'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'CM 10/25/2020 12:15:54'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:16:34' prior: 50868833!
executeCommands: aCommandList 
	
	aCommandList do: [ :aCommand | 
		self state moveForward .
	]

	! !

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtStartingPosition stamp: 'CM 10/25/2020 12:16:36'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 12:16:36'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:16:36'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:16:36'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:16:36'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:16:36'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'CM 10/25/2020 12:16:36'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:18:31'!
test01MarsRoverShouldBeLocatedAtLandingPosition
	| marsRover |
	
	marsRover := MarsRover landingAtX: 50 andY: 50 pointingTo: $N.

	self assert: marsRover position equals: #(50 50).
	self assert: marsRover headingTo equals: $N.! !

!methodRemoval: MarsRoverTest #test01MarsRoverShouldBeLocatedAtStartingPosition stamp: 'CM 10/25/2020 12:18:31'!
test01MarsRoverShouldBeLocatedAtStartingPosition
	| marsRover |
	
	marsRover := MarsRover landingAtX: 50 andY: 50 pointingTo: $N.

	self assert: marsRover position equals: #(50 50).
	self assert: marsRover headingTo equals: $N.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:19:08'!
test08
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $N.
	marsRover executeCommands: 'b'.

	self assert: marsRover position equals: #(11 20).
	self assert: marsRover headingTo equals: $N.! !

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/25/2020 12:19:10'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 12:19:10'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:19:10'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:19:10'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:19:10'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:19:10'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'CM 10/25/2020 12:19:10'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'CM 10/25/2020 12:19:10'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'CM 10/25/2020 12:19:10'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:20:47' prior: 50868864!
executeCommands: aCommandList 
	
	aCommandList do: [ :aCommand | 
		aCommand = $f ifTrue: [
			self state moveForward .	
		] ifFalse: [
			self state moveBackward .
		]
		
	]

	! !

!testRun: #MarsRoverTest #test08 stamp: 'CM 10/25/2020 12:20:51'!
ERROR!
!MarsRoverHeadingNorthState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:21:03'!
moveBackward
	self shouldBeImplemented.! !
!MarsRoverHeadingNorthState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:21:12' prior: 50868967!
moveBackward
	marsRover moveSouth .! !

!testRun: #MarsRoverTest #test08 stamp: 'CM 10/25/2020 12:21:14'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'CM 10/25/2020 12:21:16'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:21:31'!
test09
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $E.
	marsRover executeCommands: 'b'.

	self assert: marsRover position equals: #(10 19).
	self assert: marsRover headingTo equals: $E.! !

!testRun: #MarsRoverTest #test09 stamp: 'CM 10/25/2020 12:21:33'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'CM 10/25/2020 12:21:33'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'CM 10/25/2020 12:21:37'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'CM 10/25/2020 12:21:49'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'CM 10/25/2020 12:21:49'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'CM 10/25/2020 12:22:01'!
ERROR!
!MarsRoverHeadingEastState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:22:12'!
moveBackward
	self shouldBeImplemented.! !
!MarsRoverHeadingEastState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:22:20' prior: 50869005!
moveBackward
	marsRover moveWest.! !

!testRun: #MarsRoverTest #test09 stamp: 'CM 10/25/2020 12:22:21'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'CM 10/25/2020 12:22:23'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:22:36'!
test10
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $S.
	marsRover executeCommands: 'b'.

	self assert: marsRover position equals: #(9 20).
	self assert: marsRover headingTo equals: $S.! !

!testRun: #MarsRoverTest #test10 stamp: 'CM 10/25/2020 12:22:38'!
ERROR!

!testRun: #MarsRoverTest #test10 stamp: 'CM 10/25/2020 12:22:38'!
ERROR!
!MarsRoverHeadingSouthState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:22:43'!
moveBackward
	self shouldBeImplemented.! !
!MarsRoverHeadingSouthState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:22:50' prior: 50869034!
moveBackward
	marsRover moveNorth.! !

!testRun: #MarsRoverTest #test10 stamp: 'CM 10/25/2020 12:22:51'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'CM 10/25/2020 12:22:53'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:23:06'!
test11
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $W.
	marsRover executeCommands: 'b'.

	self assert: marsRover position equals: #(10 21).
	self assert: marsRover headingTo equals: $W.! !

!testRun: #MarsRoverTest #test11 stamp: 'CM 10/25/2020 12:23:09'!
ERROR!

!testRun: #MarsRoverTest #test11 stamp: 'CM 10/25/2020 12:23:09'!
ERROR!
!MarsRoverHeadingWestState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:23:22'!
moveBackward
	self shouldBeImplemented.! !
!MarsRoverHeadingWestState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:23:29' prior: 50869063!
moveBackward
	marsRover moveEast.! !

!testRun: #MarsRoverTest #test11 stamp: 'CM 10/25/2020 12:23:30'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/25/2020 12:23:33'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 12:23:33'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:23:33'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:23:33'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:23:33'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:23:33'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'CM 10/25/2020 12:23:33'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'CM 10/25/2020 12:23:33'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'CM 10/25/2020 12:23:33'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'CM 10/25/2020 12:23:33'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'CM 10/25/2020 12:23:33'!
PASSED!
!MarsRoverState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:23:43'!
moveBackward
	
	self subclassResponsibility .! !

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/25/2020 12:23:46'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 12:23:46'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:23:46'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:23:46'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:23:46'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:23:46'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'CM 10/25/2020 12:23:46'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'CM 10/25/2020 12:23:46'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'CM 10/25/2020 12:23:46'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'CM 10/25/2020 12:23:46'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'CM 10/25/2020 12:23:46'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:25:03'!
test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $N.
	marsRover executeCommands: 'b'.

	self assert: marsRover position equals: #(11 20).
	self assert: marsRover headingTo equals: $N.! !

!methodRemoval: MarsRoverTest #test08 stamp: 'CM 10/25/2020 12:25:03'!
test08
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $N.
	marsRover executeCommands: 'b'.

	self assert: marsRover position equals: #(11 20).
	self assert: marsRover headingTo equals: $N.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:25:27'!
test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $E.
	marsRover executeCommands: 'b'.

	self assert: marsRover position equals: #(10 19).
	self assert: marsRover headingTo equals: $E.! !

!methodRemoval: MarsRoverTest #test09 stamp: 'CM 10/25/2020 12:25:27'!
test09
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $E.
	marsRover executeCommands: 'b'.

	self assert: marsRover position equals: #(10 19).
	self assert: marsRover headingTo equals: $E.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:25:40'!
test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $S.
	marsRover executeCommands: 'b'.

	self assert: marsRover position equals: #(9 20).
	self assert: marsRover headingTo equals: $S.! !

!methodRemoval: MarsRoverTest #test10 stamp: 'CM 10/25/2020 12:25:40'!
test10
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $S.
	marsRover executeCommands: 'b'.

	self assert: marsRover position equals: #(9 20).
	self assert: marsRover headingTo equals: $S.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:25:51'!
test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $W.
	marsRover executeCommands: 'b'.

	self assert: marsRover position equals: #(10 21).
	self assert: marsRover headingTo equals: $W.! !

!methodRemoval: MarsRoverTest #test11 stamp: 'CM 10/25/2020 12:25:51'!
test11
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $W.
	marsRover executeCommands: 'b'.

	self assert: marsRover position equals: #(10 21).
	self assert: marsRover headingTo equals: $W.!

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/25/2020 12:25:55'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 12:25:55'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:25:55'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:25:55'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:25:55'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:25:55'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'CM 10/25/2020 12:25:55'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:25:55'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:25:55'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:25:55'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:25:55'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:27:19'!
test12
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $W.
	marsRover executeCommands: 'ffbnff'.

	self assert: marsRover position equals: #(10 19).
	self assert: marsRover headingTo equals: $W.! !

!testRun: #MarsRoverTest #test12 stamp: 'CM 10/25/2020 12:27:20'!
FAILURE!

!testRun: #MarsRoverTest #test12 stamp: 'CM 10/25/2020 12:27:20'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:29:00' prior: 50868956!
executeCommands: aCommandList 
	
	aCommandList do: [ :aCommand | 
		aCommand = $f ifTrue: [
			self state moveForward .		
		] ifFalse: [
			aCommand = $b ifTrue: [
				self state moveBackward
			] ifFalse: [
				^ self .
			]
		] 
		
	]

	! !

!testRun: #MarsRoverTest #test12 stamp: 'CM 10/25/2020 12:29:00'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/25/2020 12:29:03'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 12:29:03'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:29:03'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:29:03'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:29:03'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:29:03'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'CM 10/25/2020 12:29:03'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:29:03'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:29:03'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:29:03'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:29:03'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'CM 10/25/2020 12:29:03'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:30:53'!
moveForward

	^ self state moveForward! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:30:53' prior: 50869286!
executeCommands: aCommandList 
	
	aCommandList do: [ :aCommand | 
		aCommand = $f ifTrue: [
			self moveForward .		
		] ifFalse: [
			aCommand = $b ifTrue: [
				self state moveBackward
			] ifFalse: [
				^ self .
			]
		] 
		
	]

	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:31:07'!
moveBackward

	^ self state moveBackward! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:31:07' prior: 50869346!
executeCommands: aCommandList 
	
	aCommandList do: [ :aCommand | 
		aCommand = $f ifTrue: [
			self moveForward .		
		] ifFalse: [
			aCommand = $b ifTrue: [
				self moveBackward
			] ifFalse: [
				^ self .
			]
		] 
		
	]

	! !

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/25/2020 12:31:23'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 12:31:23'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:31:23'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:31:23'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:31:23'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:31:23'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'CM 10/25/2020 12:31:23'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:31:23'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:31:23'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:31:23'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:31:23'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'CM 10/25/2020 12:31:23'!
PASSED!

Object subclass: #MarsRoverCommand
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!

!classDefinition: #MarsRoverCommand category: 'ISW1 - Ejercicio 16' stamp: 'CM 10/25/2020 12:31:51'!
Object subclass: #MarsRoverCommand
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!

Object subclass: #MarsRoverCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!

!classDefinition: #MarsRoverCommand category: 'ISW1 - Ejercicio 16' stamp: 'CM 10/25/2020 12:32:37'!
Object subclass: #MarsRoverCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!
!MarsRoverCommand class methodsFor: 'nil' stamp: 'CM 10/25/2020 12:33:41'!
canHandle: aCommand

	self subclassResponsibility .! !
!MarsRoverCommand class methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:36:51'!
for: aCommand

	^(self subclasses detect: [:aMarsRoverCommandClass | aMarsRoverCommandClass canHandle: aCommand ]) new! !
!MarsRoverCommand methodsFor: 'nil' stamp: 'CM 10/25/2020 12:37:18'!
executeOn: aMarsRover
	
	self subclassResponsibility .! !

MarsRoverCommand subclass: #MarsRoverMoveForwardCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!

!classDefinition: #MarsRoverMoveForwardCommand category: 'ISW1 - Ejercicio 16' stamp: 'CM 10/25/2020 12:37:59'!
MarsRoverCommand subclass: #MarsRoverMoveForwardCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!
!MarsRoverMoveForwardCommand class methodsFor: 'nil' stamp: 'CM 10/25/2020 12:38:29' overrides: 50869438!
canHandle: aCommand
	
	^ aCommand = $f .! !
!MarsRoverMoveForwardCommand methodsFor: 'nil' stamp: 'CM 10/25/2020 12:38:50' overrides: 50869449!
executeOn: aMarsRover
	
	aMarsRover moveForward.! !

MarsRoverCommand subclass: #MarsRoverMoveBackwardCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!

!classDefinition: #MarsRoverMoveBackwardCommand category: 'ISW1 - Ejercicio 16' stamp: 'CM 10/25/2020 12:39:03'!
MarsRoverCommand subclass: #MarsRoverMoveBackwardCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!

MarsRoverMoveBackwardCommand class
	instanceVariableNames: ''!

!classDefinition: 'MarsRoverMoveBackwardCommand class' category: 'ISW1 - Ejercicio 16' stamp: 'CM 10/25/2020 12:39:03'!
MarsRoverMoveBackwardCommand class
	instanceVariableNames: ''!
!MarsRoverMoveBackwardCommand methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:39:03' overrides: 50869449!
executeOn: aMarsRover
	
	aMarsRover moveForward.! !
!MarsRoverMoveBackwardCommand class methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:39:03' overrides: 50869438!
canHandle: aCommand
	
	^ aCommand = $f .! !
!MarsRoverMoveBackwardCommand methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:39:12' prior: 50869500 overrides: 50869449!
executeOn: aMarsRover
	
	aMarsRover moveBackward.! !
!MarsRoverMoveBackwardCommand class methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:39:19' prior: 50869506 overrides: 50869438!
canHandle: aCommand
	
	^ aCommand = $b .! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:42:37' prior: 50869361!
executeCommands: aCommandList 
	
	aCommandList do: [ :aCommand | 
		(MarsRoverCommand for: aCommand) executeOn: self.
	]

	! !

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/25/2020 12:42:40'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 12:42:40'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:42:40'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:42:40'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:42:40'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:42:40'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'CM 10/25/2020 12:42:40'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:42:40'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:42:40'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:42:40'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:42:40'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'CM 10/25/2020 12:42:40'!
ERROR!

!testRun: #MarsRoverTest #test12 stamp: 'CM 10/25/2020 12:42:40'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:45:22' prior: 50869523!
executeCommands: aCommandList 
	
	[ aCommandList do: [ :aCommand | 
		(MarsRoverCommand for: aCommand) executeOn: self.
	] ] on: Error do: [ ^ self ]



	! !

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/25/2020 12:45:26'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 12:45:26'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:45:26'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:45:26'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:45:26'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:45:26'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'CM 10/25/2020 12:45:26'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:45:26'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:45:26'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:45:26'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:45:26'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'CM 10/25/2020 12:45:26'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:45:48' prior: 50869575!
executeCommands: aCommandList 
	
	[ 
		aCommandList do: [ :aCommand | 
			(MarsRoverCommand for: aCommand) executeOn: self.
	
		]
	] on: Error do: [ ^ self ]



	! !

----SNAPSHOT----(25 October 2020 12:47:32) CuisUniversity-4384.image priorSource: 17165798!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:49:38'!
test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $N.
	marsRover executeCommands: 'l'.

	self assert: marsRover position equals: #(10 10).
	self assert: marsRover headingTo equals: $W.! !

!testRun: #MarsRoverTest #test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:49:39'!
FAILURE!

!testRun: #MarsRoverTest #test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:49:39'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:49:53' prior: 50869637!
test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $N.
	marsRover executeCommands: 'l'.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover headingTo equals: $W.! !

!testRun: #MarsRoverTest #test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:49:55'!
FAILURE!

!testRun: #MarsRoverTest #test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:49:55'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:50:35'!
rotateLeft

	^ self state rotateLeft.! !

MarsRoverCommand subclass: #MarsRoverRotateLeftCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!

!classDefinition: #MarsRoverRotateLeftCommand category: 'ISW1 - Ejercicio 16' stamp: 'CM 10/25/2020 12:51:06'!
MarsRoverCommand subclass: #MarsRoverRotateLeftCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!

MarsRoverRotateLeftCommand class
	instanceVariableNames: ''!

!classDefinition: 'MarsRoverRotateLeftCommand class' category: 'ISW1 - Ejercicio 16' stamp: 'CM 10/25/2020 12:51:06'!
MarsRoverRotateLeftCommand class
	instanceVariableNames: ''!
!MarsRoverRotateLeftCommand methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:51:06' overrides: 50869449!
executeOn: aMarsRover
	
	aMarsRover moveForward.! !
!MarsRoverRotateLeftCommand class methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:51:06' overrides: 50869438!
canHandle: aCommand
	
	^ aCommand = $f .! !
!MarsRoverRotateLeftCommand methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:51:15' prior: 50869702 overrides: 50869449!
executeOn: aMarsRover
	
	aMarsRover rotateLeft.! !
!MarsRoverRotateLeftCommand class methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:51:22' prior: 50869708 overrides: 50869438!
canHandle: aCommand
	
	^ aCommand = $l .! !
!MarsRoverHeadingNorthState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:52:07'!
rotateLeft

	marsRover headTo: $W.! !
!MarsRover methodsFor: 'private' stamp: 'CM 10/25/2020 12:52:45'!
headTo: aCardinalPoint

	pointingTo := aCardinalPoint.! !

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/25/2020 12:52:51'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 12:52:51'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:52:51'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:52:51'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:52:51'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:52:51'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'CM 10/25/2020 12:52:51'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:52:51'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:52:51'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:52:51'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:52:51'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'CM 10/25/2020 12:52:51'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:52:51'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:53:07'!
test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $W.
	marsRover executeCommands: 'l'.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover headingTo equals: $S.! !

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:53:08'!
FAILURE!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:53:08'!
FAILURE!
!MarsRoverHeadingWestState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:53:28'!
rotateLeft

	marsRover headTo: $S.! !

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/25/2020 12:53:29'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 12:53:29'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:53:29'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:53:29'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:53:29'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:53:29'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'CM 10/25/2020 12:53:29'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:53:29'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:53:29'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:53:29'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:53:29'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'CM 10/25/2020 12:53:29'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:53:29'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:53:29'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:53:43'!
test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $S.
	marsRover executeCommands: 'l'.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover headingTo equals: $E.! !

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/25/2020 12:53:45'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 12:53:45'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:53:45'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:53:45'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:53:45'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:53:45'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'CM 10/25/2020 12:53:45'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:53:45'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:53:45'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:53:45'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:53:45'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'CM 10/25/2020 12:53:45'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:53:45'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:53:45'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:53:45'!
FAILURE!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:53:45'!
FAILURE!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:53:50'!
FAILURE!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:53:50'!
FAILURE!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:54:04'!
FAILURE!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:54:04'!
FAILURE!
!MarsRoverHeadingSouthState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:54:42'!
rotateLeft

	marsRover headTo: $E.! !

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:54:45'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:55:00'!
test16MarsRoverRotatesLeftCorrectlyWhenHeadingEast
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $E.
	marsRover executeCommands: 'l'.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover headingTo equals: $N.! !

!testRun: #MarsRoverTest #test16MarsRoverRotatesLeftCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:55:40'!
FAILURE!

!testRun: #MarsRoverTest #test16MarsRoverRotatesLeftCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:55:40'!
FAILURE!
!MarsRoverHeadingEastState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:55:47'!
rotateLeft

	marsRover headTo: $N.! !

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/25/2020 12:55:49'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 12:55:49'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:55:49'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:55:49'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:55:49'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:55:49'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'CM 10/25/2020 12:55:49'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:55:49'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:55:49'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:55:49'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:55:49'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'CM 10/25/2020 12:55:49'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:55:49'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 12:55:49'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 12:55:49'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesLeftCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:55:49'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:56:10'!
test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $N.
	marsRover executeCommands: 'l'.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover headingTo equals: $E.! !

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:56:13'!
FAILURE!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:56:13'!
FAILURE!

MarsRoverCommand subclass: #MarsRoverRotateRightCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!

!classDefinition: #MarsRoverRotateRightCommand category: 'ISW1 - Ejercicio 16' stamp: 'CM 10/25/2020 12:56:28'!
MarsRoverCommand subclass: #MarsRoverRotateRightCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!

MarsRoverRotateRightCommand class
	instanceVariableNames: ''!

!classDefinition: 'MarsRoverRotateRightCommand class' category: 'ISW1 - Ejercicio 16' stamp: 'CM 10/25/2020 12:56:28'!
MarsRoverRotateRightCommand class
	instanceVariableNames: ''!
!MarsRoverRotateRightCommand methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:56:28' overrides: 50869449!
executeOn: aMarsRover
	
	aMarsRover rotateLeft.! !
!MarsRoverRotateRightCommand class methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:56:28' overrides: 50869438!
canHandle: aCommand
	
	^ aCommand = $l .! !
!MarsRoverRotateRightCommand methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:56:35' prior: 50870067 overrides: 50869449!
executeOn: aMarsRover
	
	aMarsRover rotateRight.! !
!MarsRoverRotateRightCommand class methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:56:40' prior: 50870073 overrides: 50869438!
canHandle: aCommand
	
	^ aCommand = $r .! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:57:15'!
rotateRight

	^ self state rotateRight.! !
!MarsRoverState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:57:23'!
rotateRight
	
	self subclassResponsibility .! !
!MarsRoverState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:57:26'!
rotateLeft
	
	self subclassResponsibility .! !
!MarsRoverHeadingNorthState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:57:42' overrides: 50870093!
rotateRight

	marsRover headTo: $E.! !

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:57:44'!
FAILURE!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:57:44'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:58:35' prior: 50870025!
test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $N.
	marsRover executeCommands: 'r'.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover headingTo equals: $E.! !

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 12:58:36'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:58:46'!
test17MarsRoverRotatesRightCorrectlyWhenHeadingEast
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $E.
	marsRover executeCommands: 'r'.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover headingTo equals: $S.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:58:57'!
test18MarsRoverRotatesRightCorrectlyWhenHeadingEast
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $E.
	marsRover executeCommands: 'r'.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover headingTo equals: $S.! !

!methodRemoval: MarsRoverTest #test17MarsRoverRotatesRightCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:58:59'!
test17MarsRoverRotatesRightCorrectlyWhenHeadingEast
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $E.
	marsRover executeCommands: 'r'.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover headingTo equals: $S.!

!testRun: #MarsRoverTest #test18MarsRoverRotatesRightCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:59:05'!
FAILURE!

!testRun: #MarsRoverTest #test18MarsRoverRotatesRightCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:59:05'!
FAILURE!
!MarsRoverHeadingEastState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:59:23' overrides: 50870093!
rotateRight

	marsRover headTo: $S.! !

!testRun: #MarsRoverTest #test18MarsRoverRotatesRightCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 12:59:26'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 12:59:38'!
test19MarsRoverRotatesRightCorrectlyWhenHeadingSouth
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $S.
	marsRover executeCommands: 'r'.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover headingTo equals: $W.! !

!testRun: #MarsRoverTest #test19MarsRoverRotatesRightCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:00:01'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverRotatesRightCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:00:01'!
FAILURE!
!MarsRoverHeadingSouthState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:00:14' overrides: 50870093!
rotateRight

	marsRover headTo: $W.! !

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/25/2020 13:00:16'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 13:00:16'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:00:16'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:00:16'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:00:16'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:00:16'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'CM 10/25/2020 13:00:16'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:00:16'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:00:16'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:00:16'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:00:16'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'CM 10/25/2020 13:00:16'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:00:16'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:00:16'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:00:16'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesLeftCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:00:16'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:00:16'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRotatesRightCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:00:16'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverRotatesRightCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:00:16'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:00:29'!
test20MarsRoverRotatesRightCorrectlyWhenHeadingWest
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $W.
	marsRover executeCommands: 'r'.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover headingTo equals: $N.! !

!testRun: #MarsRoverTest #test20MarsRoverRotatesRightCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:00:32'!
FAILURE!

!testRun: #MarsRoverTest #test20MarsRoverRotatesRightCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:00:32'!
FAILURE!
!MarsRoverHeadingWestState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:00:43' overrides: 50870093!
rotateRight

	marsRover headTo: $N.! !

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/25/2020 13:00:44'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 13:00:44'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:00:44'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:00:44'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:00:44'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:00:44'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'CM 10/25/2020 13:00:44'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:00:44'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:00:44'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:00:44'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:00:44'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'CM 10/25/2020 13:00:44'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:00:44'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:00:44'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:00:44'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesLeftCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:00:44'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:00:44'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRotatesRightCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:00:44'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverRotatesRightCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:00:44'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverRotatesRightCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:00:44'!
PASSED!

----SNAPSHOT----(25 October 2020 13:01:21) CuisUniversity-4384.image priorSource: 17215461!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:02:03'!
test07MarsRoverExecutesManyCommandsCorrectly
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $N.
	marsRover executeCommands: 'ff'.

	self assert: marsRover position equals: #(8 20).
	self assert: marsRover headingTo equals: $N.! !

!methodRemoval: MarsRoverTest #test07 stamp: 'CM 10/25/2020 13:02:03'!
test07
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $N.
	marsRover executeCommands: 'ff'.

	self assert: marsRover position equals: #(8 20).
	self assert: marsRover headingTo equals: $N.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:02:52'!
test12MarsRoverStopsExecutionWhenUnknownCommandDetected
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $W.
	marsRover executeCommands: 'ffbnff'.

	self assert: marsRover position equals: #(10 19).
	self assert: marsRover headingTo equals: $W.! !

!methodRemoval: MarsRoverTest #test12 stamp: 'CM 10/25/2020 13:02:52'!
test12
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 pointingTo: $W.
	marsRover executeCommands: 'ffbnff'.

	self assert: marsRover position equals: #(10 19).
	self assert: marsRover headingTo equals: $W.!

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/25/2020 13:03:13'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 13:03:13'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:03:13'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:03:13'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:03:13'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:03:13'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverExecutesManyCommandsCorrectly stamp: 'CM 10/25/2020 13:03:13'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:03:13'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:03:13'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:03:13'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:03:13'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStopsExecutionWhenUnknownCommandDetected stamp: 'CM 10/25/2020 13:03:13'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:03:13'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:03:13'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:03:13'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesLeftCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:03:13'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:03:13'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRotatesRightCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:03:13'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverRotatesRightCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:03:13'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverRotatesRightCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:03:13'!
PASSED!

!classRenamed: #MarsRoverHeadingEastState as: #MarsRoverFacingEastState stamp: 'CM 10/25/2020 13:03:31'!
Smalltalk renameClassNamed: #MarsRoverHeadingEastState as: #MarsRoverFacingEastState!

!classRenamed: #MarsRoverHeadingNorthState as: #MarsRoverFacingNorthState stamp: 'CM 10/25/2020 13:03:43'!
Smalltalk renameClassNamed: #MarsRoverHeadingNorthState as: #MarsRoverFacingNorthState!

!classRenamed: #MarsRoverHeadingSouthState as: #MarsRoverFacingSouthState stamp: 'CM 10/25/2020 13:03:55'!
Smalltalk renameClassNamed: #MarsRoverHeadingSouthState as: #MarsRoverFacingSouthState!

!classRenamed: #MarsRoverHeadingWestState as: #MarsRoverFacingWestState stamp: 'CM 10/25/2020 13:04:04'!
Smalltalk renameClassNamed: #MarsRoverHeadingWestState as: #MarsRoverFacingWestState!

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/25/2020 13:04:07'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 13:04:07'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:04:07'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:04:07'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:04:07'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:04:07'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverExecutesManyCommandsCorrectly stamp: 'CM 10/25/2020 13:04:07'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:04:07'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:04:07'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:04:07'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:04:07'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStopsExecutionWhenUnknownCommandDetected stamp: 'CM 10/25/2020 13:04:07'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:04:07'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:04:07'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:04:07'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesLeftCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:04:07'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:04:07'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRotatesRightCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:04:07'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverRotatesRightCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:04:07'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverRotatesRightCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:04:07'!
PASSED!

----SNAPSHOT----(25 October 2020 13:04:11) CuisUniversity-4384.image priorSource: 17239055!
!MarsRover methodsFor: 'initialization' stamp: 'CM 10/25/2020 13:06:29'!
initializeLandingAtX: startingCoordinateX andY: startingCoordinateY facing: aCardinalPoint 
	
	coordinateX := startingCoordinateX.
	coordinateY := startingCoordinateY.
	pointingTo := aCardinalPoint.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:06:29' prior: 50868721!
landingAtX: startingCoordinateX andY: startingCoordinateY pointingTo: aCardinalPoint 
	
	^self new initializeLandingAtX: startingCoordinateX andY: startingCoordinateY facing: aCardinalPoint ! !

!methodRemoval: MarsRover #initializeLandingAtX:andY:pointingTo: stamp: 'CM 10/25/2020 13:06:29'!
initializeLandingAtX: startingCoordinateX andY: startingCoordinateY pointingTo: aCardinalPoint 
	
	coordinateX := startingCoordinateX.
	coordinateY := startingCoordinateY.
	pointingTo := aCardinalPoint.!
!MarsRover class methodsFor: 'instance creation' stamp: 'CM 10/25/2020 13:06:42'!
landingAtX: startingCoordinateX andY: startingCoordinateY facing: aCardinalPoint 
	
	^self new initializeLandingAtX: startingCoordinateX andY: startingCoordinateY facing: aCardinalPoint ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:06:42' prior: 50869656!
test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $N.
	marsRover executeCommands: 'l'.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover headingTo equals: $W.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:06:42' prior: 50869148!
test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $N.
	marsRover executeCommands: 'b'.

	self assert: marsRover position equals: #(11 20).
	self assert: marsRover headingTo equals: $N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:06:42' prior: 50868656!
test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $N.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(9 20).
	self assert: marsRover headingTo equals: $N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:06:42' prior: 50870142!
test18MarsRoverRotatesRightCorrectlyWhenHeadingEast
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $E.
	marsRover executeCommands: 'r'.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover headingTo equals: $S.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:06:42' prior: 50869853!
test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $S.
	marsRover executeCommands: 'l'.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover headingTo equals: $E.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:06:42' prior: 50868680!
test06MarsRoverMovesForwardCorrectlyWhenHeadingWest
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $W.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(10 19).
	self assert: marsRover headingTo equals: $W.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:06:42' prior: 50869190!
test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $S.
	marsRover executeCommands: 'b'.

	self assert: marsRover position equals: #(9 20).
	self assert: marsRover headingTo equals: $S.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:06:42' prior: 50868668!
test02MarsRoverShouldNotMoveWhenGivenEmptyCommands
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $N.
	marsRover executeCommands: ''.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover headingTo equals: $N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:06:42' prior: 50869211!
test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $W.
	marsRover executeCommands: 'b'.

	self assert: marsRover position equals: #(10 21).
	self assert: marsRover headingTo equals: $W.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:06:42' prior: 50870182!
test19MarsRoverRotatesRightCorrectlyWhenHeadingSouth
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $S.
	marsRover executeCommands: 'r'.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover headingTo equals: $W.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:06:42' prior: 50870394!
test12MarsRoverStopsExecutionWhenUnknownCommandDetected
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $W.
	marsRover executeCommands: 'ffbnff'.

	self assert: marsRover position equals: #(10 19).
	self assert: marsRover headingTo equals: $W.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:06:42' prior: 50870275!
test20MarsRoverRotatesRightCorrectlyWhenHeadingWest
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $W.
	marsRover executeCommands: 'r'.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover headingTo equals: $N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:06:42' prior: 50870374!
test07MarsRoverExecutesManyCommandsCorrectly
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $N.
	marsRover executeCommands: 'ff'.

	self assert: marsRover position equals: #(8 20).
	self assert: marsRover headingTo equals: $N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:06:42' prior: 50868632!
test05MarsRoverMovesForwardCorrectlyWhenHeadingEast
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $E.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(10 21).
	self assert: marsRover headingTo equals: $E.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:06:42' prior: 50870116!
test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $N.
	marsRover executeCommands: 'r'.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover headingTo equals: $E.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:06:43' prior: 50869945!
test16MarsRoverRotatesLeftCorrectlyWhenHeadingEast
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $E.
	marsRover executeCommands: 'l'.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover headingTo equals: $N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:06:43' prior: 50869780!
test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $W.
	marsRover executeCommands: 'l'.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover headingTo equals: $S.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:06:43' prior: 50868644!
test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $S.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(11 20).
	self assert: marsRover headingTo equals: $S.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:06:43' prior: 50868895!
test01MarsRoverShouldBeLocatedAtLandingPosition
	| marsRover |
	
	marsRover := MarsRover landingAtX: 50 andY: 50 facing: $N.

	self assert: marsRover position equals: #(50 50).
	self assert: marsRover headingTo equals: $N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:06:43' prior: 50869169!
test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $E.
	marsRover executeCommands: 'b'.

	self assert: marsRover position equals: #(10 19).
	self assert: marsRover headingTo equals: $E.! !

!methodRemoval: MarsRover class #landingAtX:andY:pointingTo: stamp: 'CM 10/25/2020 13:06:43'!
landingAtX: startingCoordinateX andY: startingCoordinateY pointingTo: aCardinalPoint 
	
	^self new initializeLandingAtX: startingCoordinateX andY: startingCoordinateY facing: aCardinalPoint !

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/25/2020 13:06:46'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 13:06:46'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:06:46'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:06:46'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:06:46'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:06:46'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverExecutesManyCommandsCorrectly stamp: 'CM 10/25/2020 13:06:46'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:06:46'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:06:46'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:06:46'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:06:46'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStopsExecutionWhenUnknownCommandDetected stamp: 'CM 10/25/2020 13:06:46'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:06:46'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:06:46'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:06:46'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesLeftCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:06:46'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:06:46'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRotatesRightCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:06:46'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverRotatesRightCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:06:46'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverRotatesRightCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:06:46'!
PASSED!

Error subclass: #UnknownCommandError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!

!classDefinition: #UnknownCommandError category: 'ISW1 - Ejercicio 16' stamp: 'CM 10/25/2020 13:12:04'!
Error subclass: #UnknownCommandError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:12:30' prior: 50869626!
executeCommands: aCommandList 
	
	[ 
		aCommandList do: [ :aCommand | 
			(MarsRoverCommand for: aCommand) executeOn: self.
		]
	] on: UnknownCommandError do: [ ^ self ]



	! !
!MarsRoverCommand class methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:13:56' prior: 50869443!
for: aCommand
	^(self subclasses detect: [:aMarsRoverCommandClass | aMarsRoverCommandClass canHandle: aCommand ] 
				   ifNone: [ UnknownCommandError signal ]) new! !

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/25/2020 13:13:59'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 13:13:59'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:13:59'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:13:59'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:13:59'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:13:59'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverExecutesManyCommandsCorrectly stamp: 'CM 10/25/2020 13:13:59'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:13:59'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:13:59'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:13:59'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:13:59'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStopsExecutionWhenUnknownCommandDetected stamp: 'CM 10/25/2020 13:13:59'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:13:59'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:13:59'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:13:59'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesLeftCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:13:59'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:13:59'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRotatesRightCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:13:59'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverRotatesRightCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:13:59'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverRotatesRightCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:13:59'!
PASSED!
!MarsRoverFacingNorthState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:21:53' prior: 50868972 overrides: 50869109!
moveBackward

	marsRover moveSouth .! !
!MarsRoverFacingNorthState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:22:06' prior: 50871059 overrides: 50869109!
moveBackward

	marsRover moveSouth.! !
!MarsRoverFacingEastState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:22:10' prior: 50869010 overrides: 50869109!
moveBackward

	marsRover moveWest.! !
!MarsRoverFacingWestState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:22:22' prior: 50869068 overrides: 50869109!
moveBackward

	marsRover moveEast.! !
!MarsRover methodsFor: 'accessing' stamp: 'CM 10/25/2020 13:23:58'!
facingDirection
	^ pointingTo .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:23:58' prior: 50870666!
test18MarsRoverRotatesRightCorrectlyWhenHeadingEast
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $E.
	marsRover executeCommands: 'r'.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover facingDirection equals: $S.! !
!MarsRoverFacingSouthState class methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:23:58' prior: 50868207 overrides: 50868106!
canHandle: aMarsRover

	^ aMarsRover facingDirection = $S.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:23:58' prior: 50870750!
test12MarsRoverStopsExecutionWhenUnknownCommandDetected
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $W.
	marsRover executeCommands: 'ffbnff'.

	self assert: marsRover position equals: #(10 19).
	self assert: marsRover facingDirection equals: $W.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:23:58' prior: 50870726!
test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $W.
	marsRover executeCommands: 'b'.

	self assert: marsRover position equals: #(10 21).
	self assert: marsRover facingDirection equals: $W.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:23:58' prior: 50870702!
test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $S.
	marsRover executeCommands: 'b'.

	self assert: marsRover position equals: #(9 20).
	self assert: marsRover facingDirection equals: $S.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:23:58' prior: 50870810!
test16MarsRoverRotatesLeftCorrectlyWhenHeadingEast
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $E.
	marsRover executeCommands: 'l'.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover facingDirection equals: $N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:23:58' prior: 50870630!
test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $N.
	marsRover executeCommands: 'l'.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover facingDirection equals: $W.! !
!MarsRoverFacingEastState class methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:23:58' prior: 50868269 overrides: 50868106!
canHandle: aMarsRover

	^ aMarsRover facingDirection = $E.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:23:58' prior: 50870846!
test01MarsRoverShouldBeLocatedAtLandingPosition
	| marsRover |
	
	marsRover := MarsRover landingAtX: 50 andY: 50 facing: $N.

	self assert: marsRover position equals: #(50 50).
	self assert: marsRover facingDirection equals: $N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:23:58' prior: 50870738!
test19MarsRoverRotatesRightCorrectlyWhenHeadingSouth
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $S.
	marsRover executeCommands: 'r'.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover facingDirection equals: $W.! !
!MarsRoverFacingWestState class methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:23:58' prior: 50868321 overrides: 50868106!
canHandle: aMarsRover

	^ aMarsRover facingDirection = $W.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:23:58' prior: 50870762!
test20MarsRoverRotatesRightCorrectlyWhenHeadingWest
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $W.
	marsRover executeCommands: 'r'.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover facingDirection equals: $N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:23:58' prior: 50870714!
test02MarsRoverShouldNotMoveWhenGivenEmptyCommands
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $N.
	marsRover executeCommands: ''.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover facingDirection equals: $N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:23:58' prior: 50870786!
test05MarsRoverMovesForwardCorrectlyWhenHeadingEast
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $E.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(10 21).
	self assert: marsRover facingDirection equals: $E.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:23:58' prior: 50870642!
test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $N.
	marsRover executeCommands: 'b'.

	self assert: marsRover position equals: #(11 20).
	self assert: marsRover facingDirection equals: $N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:23:58' prior: 50870690!
test06MarsRoverMovesForwardCorrectlyWhenHeadingWest
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $W.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(10 19).
	self assert: marsRover facingDirection equals: $W.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:23:58' prior: 50870834!
test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $S.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(11 20).
	self assert: marsRover facingDirection equals: $S.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:23:58' prior: 50870678!
test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $S.
	marsRover executeCommands: 'l'.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover facingDirection equals: $E.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:23:58' prior: 50870822!
test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $W.
	marsRover executeCommands: 'l'.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover facingDirection equals: $S.! !
!MarsRoverFacingNorthState class methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:23:58' prior: 50868201 overrides: 50868106!
canHandle: aMarsRover

	^ aMarsRover facingDirection = $N! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:23:58' prior: 50870654!
test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $N.
	marsRover executeCommands: 'f'.

	self assert: marsRover position equals: #(9 20).
	self assert: marsRover facingDirection equals: $N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:23:58' prior: 50870798!
test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $N.
	marsRover executeCommands: 'r'.

	self assert: marsRover position equals: #(10 20).
	self assert: marsRover facingDirection equals: $E.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:23:58' prior: 50870857!
test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $E.
	marsRover executeCommands: 'b'.

	self assert: marsRover position equals: #(10 19).
	self assert: marsRover facingDirection equals: $E.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:23:58' prior: 50870774!
test07MarsRoverExecutesManyCommandsCorrectly
	| marsRover |
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $N.
	marsRover executeCommands: 'ff'.

	self assert: marsRover position equals: #(8 20).
	self assert: marsRover facingDirection equals: $N.! !

!methodRemoval: MarsRover #headingTo stamp: 'CM 10/25/2020 13:23:58'!
headingTo
	^ pointingTo .!
!MarsRoverMoveBackwardCommand class methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:24:32' prior: 50869518 overrides: 50869438!
canHandle: aCommand
	
	^ aCommand = $b.! !
!MarsRoverMoveForwardCommand class methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:24:36' prior: 50869468 overrides: 50869438!
canHandle: aCommand
	
	^ aCommand = $f.! !
!MarsRoverRotateLeftCommand class methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:24:41' prior: 50869720 overrides: 50869438!
canHandle: aCommand
	
	^ aCommand = $l.! !
!MarsRoverRotateRightCommand class methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:24:44' prior: 50870085 overrides: 50869438!
canHandle: aCommand
	
	^ aCommand = $r.! !
!MarsRoverCommand class methodsFor: 'subclass selection' stamp: 'CM 10/25/2020 13:28:48' prior: 50870974!
for: aCommand

	^(self subclasses detect: [:aMarsRoverCommandClass | aMarsRoverCommandClass canHandle: aCommand ] 
				   ifNone: [ UnknownCommandError signal ]) new! !

----SNAPSHOT----(25 October 2020 13:29:33) CuisUniversity-4384.image priorSource: 17246020!
!MarsRoverState class methodsFor: 'instance creation' stamp: 'CM 10/25/2020 13:30:27' prior: 50868097!
for: aMarsRover

	^ self new initializeFor: aMarsRover.! !
!MarsRoverState class methodsFor: 'state selection' stamp: 'CM 10/25/2020 13:30:31' prior: 50868106!
canHandle: aMarsRover

	self subclassResponsibility.! !
!MarsRoverState class methodsFor: 'state selection' stamp: 'CM 10/25/2020 13:30:35' prior: 50868111!
stateFor: aMarsRover

	^(self subclasses detect: [:aMarsRoverStateClass | aMarsRoverStateClass canHandle: aMarsRover ]) for: aMarsRover.! !
!MarsRoverState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:31:36' prior: 50868101!
initializeFor: aMarsRover
	
	marsRover := aMarsRover.! !
!MarsRoverState methodsFor: 'mars-rover actions' stamp: 'CM 10/25/2020 13:32:40' prior: 50870093!
rotateRight
	
	self subclassResponsibility.! !
!MarsRoverState methodsFor: 'mars-rover actions' stamp: 'CM 10/25/2020 13:32:43' prior: 50870098!
rotateLeft
	
	self subclassResponsibility.! !
!MarsRoverState methodsFor: 'mars-rover actions' stamp: 'CM 10/25/2020 13:32:46' prior: 50868118!
moveForward
	
	self subclassResponsibility.! !
!MarsRoverState methodsFor: 'mars-rover actions' stamp: 'CM 10/25/2020 13:32:49' prior: 50869109!
moveBackward
	
	self subclassResponsibility.! !
!MarsRoverFacingSouthState methodsFor: 'mars-rover actions' stamp: 'CM 10/25/2020 13:34:36' prior: 50869039 overrides: 50871426!
moveBackward

	marsRover moveNorth.! !
!MarsRover methodsFor: 'private' stamp: 'CM 10/25/2020 13:35:21'!
moveFaceTo: aCardinalPoint

	pointingTo := aCardinalPoint.! !
!MarsRoverFacingWestState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:35:21' prior: 50870295 overrides: 50871411!
rotateRight

	marsRover moveFaceTo: $N.! !
!MarsRoverFacingSouthState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:35:21' prior: 50869937 overrides: 50871416!
rotateLeft

	marsRover moveFaceTo: $E.! !
!MarsRoverFacingEastState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:35:21' prior: 50870174 overrides: 50871411!
rotateRight

	marsRover moveFaceTo: $S.! !
!MarsRoverFacingEastState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:35:21' prior: 50869964 overrides: 50871416!
rotateLeft

	marsRover moveFaceTo: $N.! !
!MarsRoverFacingNorthState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:35:21' prior: 50869725 overrides: 50871416!
rotateLeft

	marsRover moveFaceTo: $W.! !
!MarsRoverFacingWestState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:35:21' prior: 50869799 overrides: 50871416!
rotateLeft

	marsRover moveFaceTo: $S.! !
!MarsRoverFacingSouthState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:35:21' prior: 50870202 overrides: 50871411!
rotateRight

	marsRover moveFaceTo: $W.! !
!MarsRoverFacingNorthState methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:35:21' prior: 50870104 overrides: 50871411!
rotateRight

	marsRover moveFaceTo: $E.! !

!methodRemoval: MarsRover #headTo: stamp: 'CM 10/25/2020 13:35:21'!
headTo: aCardinalPoint

	pointingTo := aCardinalPoint.!

!classDefinition: #MarsRover category: 'ISW1 - Ejercicio 16' stamp: 'CM 10/25/2020 13:37:17'!
Object subclass: #MarsRover
	instanceVariableNames: 'coordinateX coordinateY facingDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:37:17' prior: 50870592!
initializeLandingAtX: startingCoordinateX andY: startingCoordinateY facing: aCardinalPoint 
	
	coordinateX := startingCoordinateX.
	coordinateY := startingCoordinateY.
	facingDirection := aCardinalPoint.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:37:17' prior: 50871436!
moveFaceTo: aCardinalPoint

	facingDirection := aCardinalPoint.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 13:37:17' prior: 50871081!
facingDirection
	^ facingDirection .! !

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/25/2020 13:37:28'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 13:37:28'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:37:28'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:37:28'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:37:28'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:37:28'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverExecutesManyCommandsCorrectly stamp: 'CM 10/25/2020 13:37:28'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:37:28'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:37:28'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:37:28'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:37:28'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStopsExecutionWhenUnknownCommandDetected stamp: 'CM 10/25/2020 13:37:28'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:37:28'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:37:28'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:37:28'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesLeftCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:37:28'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 13:37:28'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRotatesRightCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 13:37:28'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverRotatesRightCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 13:37:28'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverRotatesRightCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 13:37:28'!
PASSED!
!MarsRover methodsFor: 'private - actions' stamp: 'CM 10/25/2020 13:39:03' prior: 50869356!
moveBackward

	^ self state moveBackward.! !
!MarsRover methodsFor: 'private - actions' stamp: 'CM 10/25/2020 13:39:06' prior: 50869341!
moveForward

	^ self state moveForward.! !

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/25/2020 14:07:19'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 14:07:19'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 14:07:19'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 14:07:19'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 14:07:19'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 14:07:19'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverExecutesManyCommandsCorrectly stamp: 'CM 10/25/2020 14:07:19'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 14:07:19'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 14:07:19'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 14:07:19'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 14:07:19'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStopsExecutionWhenUnknownCommandDetected stamp: 'CM 10/25/2020 14:07:19'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 14:07:19'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 14:07:19'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 14:07:19'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesLeftCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 14:07:19'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 14:07:19'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRotatesRightCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 14:07:19'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverRotatesRightCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 14:07:19'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverRotatesRightCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 14:07:19'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 14:10:42'!
assertExecuting: aCommandList on: aMarsRover movesItTo: aPosition facing: aCardinalPoint
	
	aMarsRover executeCommands: aCommandList.
	
	self assert: aMarsRover position equals: aPosition.
	self assert: aMarsRover facingDirection equals: aCardinalPoint.	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 14:12:38' prior: 50871211!
test02MarsRoverShouldNotMoveWhenGivenEmptyCommands
	
	self 
		assertExecuting: '' 
		on: (MarsRover landingAtX: 10 andY: 20 facing: $N)
	 	movesItTo: #(10 20) 
		facing: $N
	! !

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 14:12:39'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/25/2020 14:12:44'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 14:12:44'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 14:12:44'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 14:12:44'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 14:12:44'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 14:12:44'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverExecutesManyCommandsCorrectly stamp: 'CM 10/25/2020 14:12:44'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 14:12:44'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 14:12:44'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 14:12:44'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 14:12:44'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStopsExecutionWhenUnknownCommandDetected stamp: 'CM 10/25/2020 14:12:44'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 14:12:44'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 14:12:44'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 14:12:44'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesLeftCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 14:12:44'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 14:12:44'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRotatesRightCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 14:12:44'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverRotatesRightCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 14:12:44'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverRotatesRightCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 14:12:44'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 14:13:27' prior: 50871693!
test02MarsRoverShouldNotMoveWhenGivenEmptyCommands
	
	self 
		assertExecuting: '' 
		on: (MarsRover landingAtX: 10 andY: 20 facing: $N)
	 	movesItTo: #(10 20) facing: $N
		
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 14:13:58' prior: 50871337!
test07MarsRoverExecutesManyCommandsCorrectly

	self 
		assertExecuting: 'ff' 
		on: (MarsRover landingAtX: 10 andY: 20 facing: $N)
	 	movesItTo: #(8 20) facing: $N
	! !

!testRun: #MarsRoverTest #test07MarsRoverExecutesManyCommandsCorrectly stamp: 'CM 10/25/2020 14:14:08'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/25/2020 14:14:52' prior: 50871104!
test12MarsRoverStopsExecutionWhenUnknownCommandDetected
	
	self 
		assertExecuting: 'ffbnff' 
		on: (MarsRover landingAtX: 10 andY: 20 facing: $W)
	 	movesItTo: #(10 19) facing: $W
	! !

!testRun: #MarsRoverTest #test12MarsRoverStopsExecutionWhenUnknownCommandDetected stamp: 'CM 10/25/2020 14:14:53'!
PASSED!
!MarsRoverTest methodsFor: 'move forward tests' stamp: 'CM 10/25/2020 14:15:37' prior: 50871301!
test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth

	self 
		assertExecuting: 'f' 
		on: (MarsRover landingAtX: 10 andY: 20 facing: $N)
	 	movesItTo: #(9 20) facing: $N
	! !

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 14:15:39'!
PASSED!
!MarsRoverTest methodsFor: 'move forward tests' stamp: 'CM 10/25/2020 14:15:59' prior: 50871259!
test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth

	self 
		assertExecuting: 'f' 
		on: (MarsRover landingAtX: 10 andY: 20 facing: $S)
	 	movesItTo: #(11 20) facing: $S! !

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 14:16:00'!
PASSED!
!MarsRoverTest methodsFor: 'move forward tests' stamp: 'CM 10/25/2020 14:16:17' prior: 50871223!
test05MarsRoverMovesForwardCorrectlyWhenHeadingEast

	self 
		assertExecuting: 'f' 
		on: (MarsRover landingAtX: 10 andY: 20 facing: $E)
	 	movesItTo: #(10 21) facing: $E! !

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 14:16:18'!
PASSED!
!MarsRoverTest methodsFor: 'move forward tests' stamp: 'CM 10/25/2020 14:16:50' prior: 50871247!
test06MarsRoverMovesForwardCorrectlyWhenHeadingWest

	self 
		assertExecuting: 'f' 
		on: (MarsRover landingAtX: 10 andY: 20 facing: $W)
	 	movesItTo: #(10 19) facing: $W! !

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 14:16:51'!
PASSED!
!MarsRoverTest methodsFor: 'rotate left tests' stamp: 'CM 10/25/2020 14:17:24' prior: 50871152!
test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth
	
	self 
		assertExecuting: 'l' 
		on: (MarsRover landingAtX: 10 andY: 20 facing: $N)
	 	movesItTo: #(10 20) facing: $W
	! !

!testRun: #MarsRoverTest #test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 14:17:27'!
PASSED!
!MarsRoverTest methodsFor: 'rotate left tests' stamp: 'CM 10/25/2020 14:17:39' prior: 50871283!
test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest
	
	self 
		assertExecuting: 'l' 
		on: (MarsRover landingAtX: 10 andY: 20 facing: $W)
	 	movesItTo: #(10 20) facing: $S
	! !

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 14:17:40'!
PASSED!
!MarsRoverTest methodsFor: 'rotate left tests' stamp: 'CM 10/25/2020 14:17:51' prior: 50871271!
test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth
	
	self 
		assertExecuting: 'l' 
		on: (MarsRover landingAtX: 10 andY: 20 facing: $S)
	 	movesItTo: #(10 20) facing: $E
	! !
!MarsRoverTest methodsFor: 'rotate left tests' stamp: 'CM 10/25/2020 14:17:58' prior: 50871140!
test16MarsRoverRotatesLeftCorrectlyWhenHeadingEast
	
	self 
		assertExecuting: 'l' 
		on: (MarsRover landingAtX: 10 andY: 20 facing: $E)
	 	movesItTo: #(10 20) facing: $N
	! !

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/25/2020 14:18:01'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 14:18:01'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 14:18:01'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 14:18:01'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 14:18:01'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 14:18:01'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverExecutesManyCommandsCorrectly stamp: 'CM 10/25/2020 14:18:01'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 14:18:01'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 14:18:01'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 14:18:01'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 14:18:01'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStopsExecutionWhenUnknownCommandDetected stamp: 'CM 10/25/2020 14:18:01'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 14:18:01'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 14:18:01'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 14:18:01'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesLeftCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 14:18:01'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 14:18:01'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRotatesRightCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 14:18:01'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverRotatesRightCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 14:18:01'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverRotatesRightCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 14:18:01'!
PASSED!
!MarsRoverTest methodsFor: 'rotate right tests' stamp: 'CM 10/25/2020 14:19:13' prior: 50871313!
test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth
	
	self 
		assertExecuting: 'r' 
		on: (MarsRover landingAtX: 10 andY: 20 facing: $N)
	 	movesItTo: #(10 20) facing: $E
	! !

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 14:19:14'!
PASSED!
!MarsRoverTest methodsFor: 'rotate right tests' stamp: 'CM 10/25/2020 14:19:27' prior: 50871086!
test18MarsRoverRotatesRightCorrectlyWhenHeadingEast
	
	self 
		assertExecuting: 'r' 
		on: (MarsRover landingAtX: 10 andY: 20 facing: $E)
	 	movesItTo: #(10 20) facing: $S
	! !
!MarsRoverTest methodsFor: 'rotate right tests' stamp: 'CM 10/25/2020 14:19:34' prior: 50871181!
test19MarsRoverRotatesRightCorrectlyWhenHeadingSouth
	
	self 
		assertExecuting: 'r' 
		on: (MarsRover landingAtX: 10 andY: 20 facing: $S)
	 	movesItTo: #(10 20) facing: $W
	! !
!MarsRoverTest methodsFor: 'rotate right tests' stamp: 'CM 10/25/2020 14:19:43' prior: 50871199!
test20MarsRoverRotatesRightCorrectlyWhenHeadingWest
	
	self 
		assertExecuting: 'r' 
		on: (MarsRover landingAtX: 10 andY: 20 facing: $W)
	 	movesItTo: #(10 20) facing: $N
	! !

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 14:19:45'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRotatesRightCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 14:19:45'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverRotatesRightCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 14:19:45'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverRotatesRightCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 14:19:45'!
PASSED!
!MarsRoverTest methodsFor: 'move backward tests' stamp: 'CM 10/25/2020 14:20:13' prior: 50871235!
test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth

	self 
		assertExecuting: 'b' 
		on: (MarsRover landingAtX: 10 andY: 20 facing: $N)
	 	movesItTo: #(11 20) facing: $N
	! !
!MarsRoverTest methodsFor: 'move backward tests' stamp: 'CM 10/25/2020 14:20:31' prior: 50871325!
test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast

	self 
		assertExecuting: 'b' 
		on: (MarsRover landingAtX: 10 andY: 20 facing: $E)
	 	movesItTo: #(10 19) facing: $E
	! !
!MarsRoverTest methodsFor: 'move backward tests' stamp: 'CM 10/25/2020 14:20:47' prior: 50871128!
test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth

	self 
		assertExecuting: 'b' 
		on: (MarsRover landingAtX: 10 andY: 20 facing: $S)
	 	movesItTo: #(9 20) facing: $S
	! !
!MarsRoverTest methodsFor: 'move backward tests' stamp: 'CM 10/25/2020 14:20:59' prior: 50871116!
test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest

	self 
		assertExecuting: 'b' 
		on: (MarsRover landingAtX: 10 andY: 20 facing: $W)
	 	movesItTo: #(10 21) facing: $W
	! !

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 14:21:02'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 14:21:02'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 14:21:02'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 14:21:02'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/25/2020 14:21:04'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/25/2020 14:21:04'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 14:21:04'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 14:21:04'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 14:21:04'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 14:21:04'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverExecutesManyCommandsCorrectly stamp: 'CM 10/25/2020 14:21:04'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 14:21:04'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 14:21:04'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 14:21:04'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 14:21:04'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStopsExecutionWhenUnknownCommandDetected stamp: 'CM 10/25/2020 14:21:04'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 14:21:04'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 14:21:04'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 14:21:04'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesLeftCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 14:21:04'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth stamp: 'CM 10/25/2020 14:21:04'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRotatesRightCorrectlyWhenHeadingEast stamp: 'CM 10/25/2020 14:21:04'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverRotatesRightCorrectlyWhenHeadingSouth stamp: 'CM 10/25/2020 14:21:04'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverRotatesRightCorrectlyWhenHeadingWest stamp: 'CM 10/25/2020 14:21:04'!
PASSED!

----SNAPSHOT----(25 October 2020 14:23:04) CuisUniversity-4384.image priorSource: 17271464!

----QUIT----(25 October 2020 14:28:45) CuisUniversity-4384.image priorSource: 17296502!

----STARTUP---- (26 October 2020 11:03:54) as /home/cmarta/Downloads/parcial/limpio/linux64/CuisUniversity-4384.image!


!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/26/2020 11:04:14'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/26/2020 11:04:14'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 11:04:14'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 11:04:14'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 11:04:14'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 11:04:14'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverExecutesManyCommandsCorrectly stamp: 'CM 10/26/2020 11:04:14'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 11:04:14'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 11:04:14'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 11:04:14'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 11:04:14'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStopsExecutionWhenUnknownCommandDetected stamp: 'CM 10/26/2020 11:04:14'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 11:04:14'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 11:04:14'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 11:04:14'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesLeftCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 11:04:14'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 11:04:14'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRotatesRightCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 11:04:14'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverRotatesRightCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 11:04:14'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverRotatesRightCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 11:04:14'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/26/2020 11:09:16' prior: 50871802!
test12MarsRoverStopsExecutionWhenUnknownCommandDetected
	
	|marsRover|
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $W.
	self should: [
		marsRover executeCommands: 'ffbnff'
	] raise: Error withExceptionDo: [ :error | 
		self assert: marsRover position equals: #(9 20).
		self assert: marsRover facingDirection equals: $W.
	] description: ''.
	
	! !

!testRun: #MarsRoverTest #test12MarsRoverStopsExecutionWhenUnknownCommandDetected stamp: 'CM 10/26/2020 11:09:19'!
FAILURE!

!testRun: #MarsRoverTest #test12MarsRoverStopsExecutionWhenUnknownCommandDetected stamp: 'CM 10/26/2020 11:09:19'!
FAILURE!
!MarsRover methodsFor: 'command execution' stamp: 'CM 10/26/2020 11:09:36' prior: 50870965!
executeCommands: aCommandList 
	
	aCommandList do: [ :aCommand | 
		(MarsRoverCommand for: aCommand) executeOn: self.
	]




	! !
!MarsRoverCommand class methodsFor: 'subclass selection' stamp: 'CM 10/26/2020 11:09:53' prior: 50871376!
for: aCommand

	^(self subclasses detect: [:aMarsRoverCommandClass | aMarsRoverCommandClass canHandle: aCommand ] 
				   ifNone: [ Error signal ]) new! !

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/26/2020 11:09:56'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/26/2020 11:09:56'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 11:09:56'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 11:09:56'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 11:09:56'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 11:09:56'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverExecutesManyCommandsCorrectly stamp: 'CM 10/26/2020 11:09:56'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 11:09:56'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 11:09:56'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 11:09:56'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 11:09:56'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStopsExecutionWhenUnknownCommandDetected stamp: 'CM 10/26/2020 11:09:56'!
FAILURE!

!testRun: #MarsRoverTest #test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 11:09:56'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 11:09:56'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 11:09:56'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesLeftCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 11:09:56'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 11:09:56'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRotatesRightCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 11:09:56'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverRotatesRightCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 11:09:56'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverRotatesRightCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 11:09:56'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStopsExecutionWhenUnknownCommandDetected stamp: 'CM 10/26/2020 11:09:56'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/26/2020 11:10:12' prior: 50872252!
test12MarsRoverStopsExecutionWhenUnknownCommandDetected
	
	|marsRover|
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $W.
	self should: [
		marsRover executeCommands: 'ffbnff'
	] raise: Error withExceptionDo: [ :error | 
		self assert: marsRover position equals: #(10 19).
		self assert: marsRover facingDirection equals: $W.
	] description: ''.
	
	! !

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/26/2020 11:10:16'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/26/2020 11:10:16'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 11:10:16'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 11:10:16'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 11:10:16'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 11:10:16'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverExecutesManyCommandsCorrectly stamp: 'CM 10/26/2020 11:10:16'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 11:10:16'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 11:10:16'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 11:10:16'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 11:10:16'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStopsExecutionWhenUnknownCommandDetected stamp: 'CM 10/26/2020 11:10:16'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 11:10:16'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 11:10:16'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 11:10:16'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesLeftCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 11:10:16'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 11:10:16'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRotatesRightCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 11:10:16'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverRotatesRightCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 11:10:16'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverRotatesRightCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 11:10:16'!
PASSED!

!classRemoval: #UnknownCommandError stamp: 'CM 10/26/2020 11:10:19'!
Error subclass: #UnknownCommandError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1 - Ejercicio 16'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/26/2020 11:11:00' prior: 50872370!
test12MarsRoverStopsExecutionWhenUnknownCommandDetected
	
	|marsRover|
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $W.
	self should: [
		marsRover executeCommands: 'ffbnff'
	] raise: Error withExceptionDo: [ :error | 
		self assert: marsRover position equals: #(10 19).
		self assert: marsRover facingDirection equals: $W.
	] description: MarsRover unknownCommandErrorDescription.
	
	! !

!testRun: #MarsRoverTest #test12MarsRoverStopsExecutionWhenUnknownCommandDetected stamp: 'CM 10/26/2020 11:11:06'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverStopsExecutionWhenUnknownCommandDetected stamp: 'CM 10/26/2020 11:11:06'!
ERROR!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'CM 10/26/2020 11:11:20'!
unknownCommandErrorDescription
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'CM 10/26/2020 11:12:04' prior: 50872490!
unknownCommandErrorDescription
	^ 'Unknown command detected'.! !

!testRun: #MarsRoverTest #test12MarsRoverStopsExecutionWhenUnknownCommandDetected stamp: 'CM 10/26/2020 11:12:05'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStopsExecutionWhenUnknownCommandDetected stamp: 'CM 10/26/2020 11:12:09'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CM 10/26/2020 11:16:06' prior: 50872467!
test12MarsRoverStopsExecutionWhenUnknownCommandDetected
	
	|marsRover|
	
	marsRover := MarsRover landingAtX: 10 andY: 20 facing: $W.
	
	self should: [ marsRover executeCommands: 'ffbnff' ]	
		raise: Error withMessageText: MarsRover unknownCommandErrorDescription.
	
	self assert: marsRover position equals: #(10 19).
	self assert: marsRover facingDirection equals: $W.
	
	! !

!testRun: #MarsRoverTest #test12MarsRoverStopsExecutionWhenUnknownCommandDetected stamp: 'CM 10/26/2020 11:16:12'!
FAILURE!

!testRun: #MarsRoverTest #test12MarsRoverStopsExecutionWhenUnknownCommandDetected stamp: 'CM 10/26/2020 11:16:12'!
FAILURE!
!MarsRover class methodsFor: 'error messages' stamp: 'CM 10/26/2020 11:16:39' prior: 50872496!
unknownCommandErrorDescription

	^ 'Unknown command detected'.! !
!MarsRoverCommand class methodsFor: 'subclass selection' stamp: 'CM 10/26/2020 11:18:56' prior: 50872283!
for: aCommand

	^(self subclasses detect: [:aMarsRoverCommandClass | aMarsRoverCommandClass canHandle: aCommand ] 
				   ifNone: [ self error: MarsRover unknownCommandErrorDescription . ]) new! !

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/26/2020 11:18:59'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/26/2020 11:18:59'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 11:18:59'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 11:18:59'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 11:18:59'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 11:18:59'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverExecutesManyCommandsCorrectly stamp: 'CM 10/26/2020 11:18:59'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 11:18:59'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 11:18:59'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 11:18:59'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 11:18:59'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStopsExecutionWhenUnknownCommandDetected stamp: 'CM 10/26/2020 11:18:59'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 11:18:59'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 11:18:59'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 11:18:59'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesLeftCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 11:18:59'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 11:18:59'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRotatesRightCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 11:18:59'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverRotatesRightCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 11:18:59'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverRotatesRightCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 11:18:59'!
PASSED!

----SNAPSHOT----(26 October 2020 11:20:30) CuisUniversity-4384.image priorSource: 17296595!

----SNAPSHOT----(26 October 2020 11:21:47) CuisUniversity-4384.image priorSource: 17311076!

----STARTUP---- (26 October 2020 12:48:05) as /home/cmarta/Downloads/parcial/limpio/linux64/CuisUniversity-4384.image!

!MarsRoverTest methodsFor: 'rotate right tests' stamp: 'CM 10/26/2020 12:50:39'!
test21MarsRoverCanNotBeCreatedWithInvalidCardinalPoint
	
	self should: [ MarsRover landingAtX: 10 andY: 20 facing: $P ] 
		raise: Error withMessageText: MarsRover invalidCardinalPointErrorDescription
		
	! !

!testRun: #MarsRoverTest #test21MarsRoverCanNotBeCreatedWithInvalidCardinalPoint stamp: 'CM 10/26/2020 12:50:42'!
ERROR!

!testRun: #MarsRoverTest #test21MarsRoverCanNotBeCreatedWithInvalidCardinalPoint stamp: 'CM 10/26/2020 12:50:42'!
ERROR!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'CM 10/26/2020 12:51:01'!
invalidCardinalPointErrorDescription
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'CM 10/26/2020 12:51:32' prior: 50872649!
invalidCardinalPointErrorDescription
	^ 'Invalid cardinal point'.! !

!testRun: #MarsRoverTest #test21MarsRoverCanNotBeCreatedWithInvalidCardinalPoint stamp: 'CM 10/26/2020 12:51:33'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverCanNotBeCreatedWithInvalidCardinalPoint stamp: 'CM 10/26/2020 12:52:47'!
FAILURE!
!MarsRoverState class methodsFor: 'state selection' stamp: 'CM 10/26/2020 12:54:31' prior: 50871398!
stateFor: aMarsRover

	^(self subclasses detect: [ :aMarsRoverStateClass | aMarsRoverStateClass canHandle: aMarsRover ] 
					ifNone: [ self error: MarsRover invalidCardinalPointErrorDescription ]
		) for: aMarsRover.! !

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/26/2020 12:54:36'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/26/2020 12:54:36'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 12:54:36'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 12:54:36'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 12:54:36'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 12:54:36'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverExecutesManyCommandsCorrectly stamp: 'CM 10/26/2020 12:54:36'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 12:54:36'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 12:54:36'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 12:54:36'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 12:54:36'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStopsExecutionWhenUnknownCommandDetected stamp: 'CM 10/26/2020 12:54:36'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 12:54:36'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 12:54:36'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 12:54:36'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesLeftCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 12:54:37'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 12:54:37'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRotatesRightCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 12:54:37'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverRotatesRightCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 12:54:37'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverRotatesRightCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 12:54:37'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverCanNotBeCreatedWithInvalidCardinalPoint stamp: 'CM 10/26/2020 12:54:37'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverCanNotBeCreatedWithInvalidCardinalPoint stamp: 'CM 10/26/2020 12:54:37'!
FAILURE!
!MarsRover methodsFor: 'initialization' stamp: 'CM 10/26/2020 12:55:17' prior: 50871501!
initializeLandingAtX: startingCoordinateX andY: startingCoordinateY facing: aCardinalPoint 
	
	coordinateX := startingCoordinateX.
	coordinateY := startingCoordinateY.
	facingDirection := aCardinalPoint.
	
	self state.! !

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/26/2020 12:55:21'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/26/2020 12:55:21'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 12:55:21'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 12:55:21'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 12:55:21'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 12:55:21'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverExecutesManyCommandsCorrectly stamp: 'CM 10/26/2020 12:55:21'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 12:55:21'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 12:55:21'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 12:55:21'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 12:55:21'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStopsExecutionWhenUnknownCommandDetected stamp: 'CM 10/26/2020 12:55:21'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 12:55:21'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 12:55:21'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 12:55:21'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesLeftCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 12:55:21'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 12:55:21'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRotatesRightCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 12:55:21'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverRotatesRightCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 12:55:21'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverRotatesRightCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 12:55:21'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverCanNotBeCreatedWithInvalidCardinalPoint stamp: 'CM 10/26/2020 12:55:21'!
PASSED!
!MarsRover methodsFor: 'initialization' stamp: 'CM 10/26/2020 12:57:20'!
checkIfStateIsValid

	^ self state! !
!MarsRover methodsFor: 'initialization' stamp: 'CM 10/26/2020 12:57:20' prior: 50872762!
initializeLandingAtX: startingCoordinateX andY: startingCoordinateY facing: aCardinalPoint 
	
	coordinateX := startingCoordinateX.
	coordinateY := startingCoordinateY.
	facingDirection := aCardinalPoint.
	
	self checkIfStateIsValid.! !
!MarsRover methodsFor: 'private' stamp: 'CM 10/26/2020 12:57:40' prior: 50872851!
checkIfStateIsValid

	self state! !

!testRun: #MarsRoverTest #test01MarsRoverShouldBeLocatedAtLandingPosition stamp: 'CM 10/26/2020 12:57:46'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldNotMoveWhenGivenEmptyCommands stamp: 'CM 10/26/2020 12:57:46'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesForwardCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 12:57:46'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMovesForwardCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 12:57:46'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverMovesForwardCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 12:57:46'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverMovesForwardCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 12:57:46'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverExecutesManyCommandsCorrectly stamp: 'CM 10/26/2020 12:57:46'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverMovesBackwardCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 12:57:46'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverMovesBackwardCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 12:57:46'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesBackwardCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 12:57:46'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesBackwardCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 12:57:46'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverStopsExecutionWhenUnknownCommandDetected stamp: 'CM 10/26/2020 12:57:46'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverRotatesLeftCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 12:57:46'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 12:57:46'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 12:57:46'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesLeftCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 12:57:46'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightCorrectlyWhenHeadingNorth stamp: 'CM 10/26/2020 12:57:46'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverRotatesRightCorrectlyWhenHeadingEast stamp: 'CM 10/26/2020 12:57:46'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverRotatesRightCorrectlyWhenHeadingSouth stamp: 'CM 10/26/2020 12:57:46'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverRotatesRightCorrectlyWhenHeadingWest stamp: 'CM 10/26/2020 12:57:46'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverCanNotBeCreatedWithInvalidCardinalPoint stamp: 'CM 10/26/2020 12:57:46'!
PASSED!

----SNAPSHOT----(26 October 2020 12:57:54) CuisUniversity-4384.image priorSource: 17311169!