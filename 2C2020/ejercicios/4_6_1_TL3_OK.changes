----STARTUP---- (26 November 2020 20:34:05) as /home/grosinov/linux64/CuisUniversity-4384.image!

!Cajero methodsFor: 'operations' stamp: 'GR 11/26/2020 20:36:29'!
checkOutCart: aCarrito withCreditCard: aCreditCard on: aDate   
	
	| totalPrice |
	
	self validateCart: aCarrito.
	
	self validateCreditCard: aCreditCard.
	
	totalPrice := aCarrito purchaseValue.
	
	( merchantProcesor processPurchase: totalPrice withCreditCard: aCreditCard ) ifFalse: [ self error: self class invalidCreditCard ].
	
	^ totalPrice
			! !
!CajeroTest methodsFor: 'as yet unclassified' stamp: 'GR 11/26/2020 20:36:29' prior: 50881957!
test01CantCheckOutAnEmptyCart
	
	cart := Carrito withCatalog: catalog.
	
	self
		should: [ cashier checkOutCart: cart withCreditCard: cashierValidatedCreditCard on: GregorianMonthOfYear current ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cajero emptyCartError.! !
!CajeroTest methodsFor: 'as yet unclassified' stamp: 'GR 11/26/2020 20:36:29' prior: 50881713!
test05CanNotCheckOutACreditCardWithNoOwner
	
	self 
		should: [ cashier checkOutCart: cart withCreditCard: noOwnerCreditCard on: GregorianMonthOfYear current ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cajero invalidCreditCard.
	
	
	
	! !
!CajeroTest methodsFor: 'as yet unclassified' stamp: 'GR 11/26/2020 20:36:29' prior: 50881976!
test07CanNotCheckoutIfMerchantProcessorDoesNotValidateCreditCard
	
	cashier := Cajero with: (MerchantProcesorSimulator with: [ :aCreditCard | false ]).
	
	self 
		should: [ cashier checkOutCart: cart withCreditCard: cashierValidatedCreditCard on: GregorianMonthOfYear current ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cajero invalidCreditCard.
	
	
	
	! !
!CajeroTest methodsFor: 'as yet unclassified' stamp: 'GR 11/26/2020 20:36:29' prior: 50881990!
test02CanCheckOutCartWithOneElement

	cart := Carrito withCatalog: catalog.
	
	cart addToCart: #Libro1 withAmount: 1.

	self assert: 10 equals: (cashier checkOutCart: cart withCreditCard: cashierValidatedCreditCard on: GregorianMonthOfYear current)! !
!CajeroTest methodsFor: 'as yet unclassified' stamp: 'GR 11/26/2020 20:36:29' prior: 50881968!
test03CanCheckOutCartWithMoreThanOneElement
	
	self assert: 30 equals: (cashier checkOutCart: cart withCreditCard: cashierValidatedCreditCard on: GregorianMonthOfYear current)! !
!CajeroTest methodsFor: 'as yet unclassified' stamp: 'GR 11/26/2020 20:36:29' prior: 50881664!
test04CanNotCheckOutWithExpiredCreditCard
	
	self 
		should: [ cashier checkOutCart: cart withCreditCard: expiredCreditCard on: GregorianMonthOfYear current ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cajero invalidCreditCard.
	
	
	
	! !
!CajeroTest methodsFor: 'as yet unclassified' stamp: 'GR 11/26/2020 20:36:29' prior: 50881723!
test06CanNotCheckOutWithNegativeCardNumber
	
	self 
		should: [ cashier checkOutCart: cart withCreditCard: negativeNumberCreditCard on: GregorianMonthOfYear current ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cajero invalidCreditCard.
	
	
	
	! !

!methodRemoval: Cajero #checkOutCart:withCreditCard: stamp: 'GR 11/26/2020 20:36:29'!
checkOutCart: aCarrito withCreditCard: aCreditCard  
	
	| totalPrice |
	
	self validateCart: aCarrito.
	
	self validateCreditCard: aCreditCard.
	
	totalPrice := aCarrito purchaseValue.
	
	( merchantProcesor processPurchase: totalPrice withCreditCard: aCreditCard ) ifFalse: [ self error: self class invalidCreditCard ].
	
	^ totalPrice
			!
!Cajero methodsFor: 'private -- operations' stamp: 'GR 11/26/2020 20:37:26' prior: 50880358!
validateCreditCard: aCreditCard

	| aDate |
	(aCreditCard number >= 0) ifFalse: [ self error: self class invalidCreditCard ].
	
	(aCreditCard isExpiredOn: aDate) ifTrue: [ self error: self class invalidCreditCard ].
	
	(aCreditCard owner = '' ) ifTrue: [ self error: self class invalidCreditCard ]! !
!Cajero methodsFor: 'private -- operations' stamp: 'GR 11/26/2020 20:38:07' prior: 50882579!
validateCreditCard: aCreditCard

	| aDaste |
	(aCreditCard number >= 0) ifFalse: [ self error: self class invalidCreditCard ].
	
	(aCreditCard isExpiredOn: aDaste) ifTrue: [ self error: self class invalidCreditCard ].
	
	(aCreditCard owner = '' ) ifTrue: [ self error: self class invalidCreditCard ]! !
!Cajero methodsFor: 'private -- operations' stamp: 'GR 11/26/2020 20:38:30'!
validateCreditCard: aCreditCard on: aDate 

	| aDaste |
	(aCreditCard number >= 0) ifFalse: [ self error: self class invalidCreditCard ].
	
	(aCreditCard isExpiredOn: aDaste) ifTrue: [ self error: self class invalidCreditCard ].
	
	(aCreditCard owner = '' ) ifTrue: [ self error: self class invalidCreditCard ]! !
!Cajero methodsFor: 'as yet unclassified' stamp: 'GR 11/26/2020 20:38:30' prior: 50882470!
checkOutCart: aCarrito withCreditCard: aCreditCard on: aDate   
	
	| totalPrice |
	
	self validateCart: aCarrito.
	
	self validateCreditCard: aCreditCard on: aDate.
	
	totalPrice := aCarrito purchaseValue.
	
	( merchantProcesor processPurchase: totalPrice withCreditCard: aCreditCard ) ifFalse: [ self error: self class invalidCreditCard ].
	
	^ totalPrice
			! !

!methodRemoval: Cajero #validateCreditCard: stamp: 'GR 11/26/2020 20:38:30'!
validateCreditCard: aCreditCard

	| aDaste |
	(aCreditCard number >= 0) ifFalse: [ self error: self class invalidCreditCard ].
	
	(aCreditCard isExpiredOn: aDaste) ifTrue: [ self error: self class invalidCreditCard ].
	
	(aCreditCard owner = '' ) ifTrue: [ self error: self class invalidCreditCard ]!
!Cajero methodsFor: 'private -- operations' stamp: 'GR 11/26/2020 20:38:36' prior: 50882604!
validateCreditCard: aCreditCard on: aDate 

	(aCreditCard number >= 0) ifFalse: [ self error: self class invalidCreditCard ].
	
	(aCreditCard isExpiredOn: aDate) ifTrue: [ self error: self class invalidCreditCard ].
	
	(aCreditCard owner = '' ) ifTrue: [ self error: self class invalidCreditCard ]! !

!testRun: #CajeroTest #test03CanCheckOutCartWithMoreThanOneElement stamp: 'GR 11/26/2020 20:38:50'!
ERROR!
!TarjetaDeCredito methodsFor: 'testing' stamp: 'GR 11/26/2020 20:39:02'!
isExpiredOn: aGregorianMonthOfYear 
	self shouldBeImplemented.! !
!TarjetaDeCredito methodsFor: 'testing' stamp: 'GR 11/26/2020 20:39:21' prior: 50882660!
isExpiredOn: aDate

	expiration < aDate! !

!testRun: #CajeroTest #test03CanCheckOutCartWithMoreThanOneElement stamp: 'GR 11/26/2020 20:39:22'!
ERROR!
!TarjetaDeCredito methodsFor: 'testing' stamp: 'GR 11/26/2020 20:39:33' prior: 50882665!
isExpiredOn: aDate

	^ expiration < aDate! !

!testRun: #CajeroTest #test03CanCheckOutCartWithMoreThanOneElement stamp: 'GR 11/26/2020 20:39:34'!
PASSED!

!testRun: #CajeroTest #test01CantCheckOutAnEmptyCart stamp: 'GR 11/26/2020 20:39:34'!
PASSED!

!testRun: #CajeroTest #test02CanCheckOutCartWithOneElement stamp: 'GR 11/26/2020 20:39:34'!
PASSED!

!testRun: #CajeroTest #test03CanCheckOutCartWithMoreThanOneElement stamp: 'GR 11/26/2020 20:39:34'!
PASSED!

!testRun: #CajeroTest #test04CanNotCheckOutWithExpiredCreditCard stamp: 'GR 11/26/2020 20:39:34'!
PASSED!

!testRun: #CajeroTest #test05CanNotCheckOutACreditCardWithNoOwner stamp: 'GR 11/26/2020 20:39:34'!
PASSED!

!testRun: #CajeroTest #test06CanNotCheckOutWithNegativeCardNumber stamp: 'GR 11/26/2020 20:39:34'!
PASSED!

!testRun: #CajeroTest #test07CanNotCheckoutIfMerchantProcessorDoesNotValidateCreditCard stamp: 'GR 11/26/2020 20:39:34'!
PASSED!

!testRun: #CarritoTest #test01CanCreateNewCartWithNoProducts stamp: 'GR 11/26/2020 20:39:34'!
PASSED!

!testRun: #CarritoTest #test02CanAddAProductToCart stamp: 'GR 11/26/2020 20:39:34'!
PASSED!

!testRun: #CarritoTest #test03CanAddAProductToCartMultipleTimes stamp: 'GR 11/26/2020 20:39:34'!
PASSED!

!testRun: #CarritoTest #test04AddAProductThatIsAlreadyInTheCart stamp: 'GR 11/26/2020 20:39:34'!
PASSED!

!testRun: #CarritoTest #test05CanNotAddABookThatIsNotInTheCatalog stamp: 'GR 11/26/2020 20:39:34'!
PASSED!

!testRun: #CarritoTest #test06EmptyCartListsNoItems stamp: 'GR 11/26/2020 20:39:34'!
PASSED!

!testRun: #CarritoTest #test07CartCanListEveryProductInIt stamp: 'GR 11/26/2020 20:39:34'!
PASSED!

!testRun: #CarritoTest #test08CanNotAddNegativeAmountOfProducts stamp: 'GR 11/26/2020 20:39:34'!
PASSED!

!testRun: #CarritoTest #test09CanNotAddCeroAmountOfProducts stamp: 'GR 11/26/2020 20:39:34'!
PASSED!

!testRun: #CarritoTest #test10CanNotAddNonIntegerAmountOfProducts stamp: 'GR 11/26/2020 20:39:34'!
PASSED!

!testRun: #CatalogoTest #test01CanNotCreateACatalogWithInvalidPriceOfAnyProduct stamp: 'GR 11/26/2020 20:39:34'!
PASSED!
!TarjetaDeCredito methodsFor: 'initialization' stamp: 'GR 11/26/2020 20:40:31' prior: 50878991!
initializeNumber: aCreditCardNumber withExpiration: anExpirationDate withOwner: aName 
	
	(aName = '') ifTrue: [ self error: self class invalidName ].
	
	number := aCreditCardNumber.
	expiration := anExpirationDate.
	owner := aName.! !

!methodRemoval: CajeroTest #test05CanNotCheckOutACreditCardWithNoOwner stamp: 'GR 11/26/2020 20:40:52'!
test05CanNotCheckOutACreditCardWithNoOwner
	
	self 
		should: [ cashier checkOutCart: cart withCreditCard: noOwnerCreditCard on: GregorianMonthOfYear current ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cajero invalidCreditCard.
	
	
	
	!
!CajeroTest methodsFor: 'setUp' stamp: 'GR 11/26/2020 20:41:01' prior: 50881931 overrides: 16927572!
setUp

	catalog := Catalogo with: (Dictionary with: #Libro1->10).
	
	cashier := Cajero with: (MerchantProcesorSimulator with: [ :aCreditCard | true]).
	
	cart := Carrito withCatalog: catalog.
	
	cart addToCart: #Libro1 withAmount: 3.

	cashierValidatedCreditCard := TarjetaDeCredito number: 4659540000978462 withExpiration: August, 2021 withOwner: 'Matias Morales'.
	
	expiredCreditCard := TarjetaDeCredito number: 4659540000978462 withExpiration: August, 2012 withOwner: 'Matias Morales'.
	
	negativeNumberCreditCard := TarjetaDeCredito number: -4659540000978462 withExpiration: August, 2021 withOwner: 'Matias Morales'.! !

TestCase subclass: #CajeroTest
	instanceVariableNames: 'cashier cashier2 cart catalog cashierValidatedCreditCard expiredCreditCard negativeNumberCreditCard emptyCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CajeroTest category: 'TusLibros' stamp: 'GR 11/26/2020 20:41:08'!
TestCase subclass: #CajeroTest
	instanceVariableNames: 'cashier cashier2 cart catalog cashierValidatedCreditCard expiredCreditCard negativeNumberCreditCard emptyCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #TarjetaDeCredito stamp: 'GR 11/26/2020 20:43:33'!
Object subclass: #TarjetaDeCredito
	instanceVariableNames: 'number expiration owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcesorSimulator stamp: 'GR 11/26/2020 20:43:34'!
Object subclass: #MerchantProcesorSimulator
	instanceVariableNames: 'validationCondition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Catalogo stamp: 'GR 11/26/2020 20:43:34'!
Object subclass: #Catalogo
	instanceVariableNames: 'items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Carrito stamp: 'GR 11/26/2020 20:43:34'!
Object subclass: #Carrito
	instanceVariableNames: 'products catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cajero stamp: 'GR 11/26/2020 20:43:34'!
Object subclass: #Cajero
	instanceVariableNames: 'catalog merchantProcesor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CatalogoTest stamp: 'GR 11/26/2020 20:43:35'!
TestCase subclass: #CatalogoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CarritoTest stamp: 'GR 11/26/2020 20:43:35'!
TestCase subclass: #CarritoTest
	instanceVariableNames: 'cart catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CajeroTest stamp: 'GR 11/26/2020 20:43:35'!
TestCase subclass: #CajeroTest
	instanceVariableNames: 'cashier cashier2 cart catalog cashierValidatedCreditCard expiredCreditCard negativeNumberCreditCard emptyCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Transfer stamp: 'GR 11/26/2020 20:43:43'!
Object subclass: #Transfer
	instanceVariableNames: 'value transferEntry transferExit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferNet stamp: 'GR 11/26/2020 20:43:43'!
Report subclass: #TransferNet
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountSummary stamp: 'GR 11/26/2020 20:43:43'!
Report subclass: #AccountSummary
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Report stamp: 'GR 11/26/2020 20:43:44'!
Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Withdraw stamp: 'GR 11/26/2020 20:43:44'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ExitTransfer stamp: 'GR 11/26/2020 20:43:44'!
TransferFeet subclass: #ExitTransfer
	instanceVariableNames: 'receiver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #EntryTransfer stamp: 'GR 11/26/2020 20:43:45'!
TransferFeet subclass: #EntryTransfer
	instanceVariableNames: 'transmitter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferFeet stamp: 'GR 11/26/2020 20:43:45'!
AccountTransaction subclass: #TransferFeet
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'GR 11/26/2020 20:43:45'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'GR 11/26/2020 20:43:45'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'GR 11/26/2020 20:43:46'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'GR 11/26/2020 20:43:46'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'GR 11/26/2020 20:43:46'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReportsTest stamp: 'GR 11/26/2020 20:43:47'!
TestCase subclass: #ReportsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'GR 11/26/2020 20:43:47'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'GR 11/26/2020 20:43:48'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----End fileIn of /home/grosinov/linux64/TusLibros-3.st----!

TestCase subclass: #RESTInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RESTInterfaceTest category: 'TusLibros' stamp: 'GR 11/26/2020 20:47:27'!
TestCase subclass: #RESTInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'GR 11/26/2020 21:17:39'!
Object subclass: #RESTInterface
	instanceVariableNames: 'users'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterfaceTest methodsFor: 'nil' stamp: 'GR 11/26/2020 21:17:11'!
test01CanNotCreateCartWithInvalidUsername

	
	
	| interface |
	interface := RESTInterface with: Dictionary new.
	
	self
		should: [ interface createCart: 'Crocken321' password: 'elMatiPiola321' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidUserError! !

!testRun: #RESTInterfaceTest #test01CanNotCreateCartWithInvalidUsername stamp: 'GR 11/26/2020 21:17:48'!
ERROR!
!RESTInterface class methodsFor: 'instance creation' stamp: 'GR 11/26/2020 21:17:54'!
with: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aDictionary ! !
!RESTInterface class methodsFor: 'instance creation' stamp: 'GR 11/26/2020 21:18:08' prior: 50883550!
with: aUserList

	^self new initializeWith: aUserList ! !

!testRun: #RESTInterfaceTest #test01CanNotCreateCartWithInvalidUsername stamp: 'GR 11/26/2020 21:18:09'!
ERROR!

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'GR 11/26/2020 21:18:15'!
Object subclass: #RESTInterface
	instanceVariableNames: 'users userList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterface methodsFor: 'initialization' stamp: 'GR 11/26/2020 21:18:15'!
initializeWith: aUserList 
	self shouldBeImplemented.
	userList := aUserList.! !
!RESTInterface methodsFor: 'initialization' stamp: 'GR 11/26/2020 21:18:21' prior: 50883574!
initializeWith: aUserList 
	
	userList := aUserList.! !

!testRun: #RESTInterfaceTest #test01CanNotCreateCartWithInvalidUsername stamp: 'GR 11/26/2020 21:18:22'!
ERROR!
!RESTInterface class methodsFor: 'error handling' stamp: 'GR 11/26/2020 21:18:36'!
invalidUserError
	self shouldBeImplemented.! !
!RESTInterface class methodsFor: 'error handling' stamp: 'GR 11/26/2020 21:19:00' prior: 50883588!
invalidUserError
	
	^ '1|invalid_user'! !

!testRun: #RESTInterfaceTest #test01CanNotCreateCartWithInvalidUsername stamp: 'GR 11/26/2020 21:19:01'!
ERROR!
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'GR 11/26/2020 21:19:17'!
createCart: aString password: aString2 
	self shouldBeImplemented.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/26/2020 21:19:32' prior: 50883534!
test01CanNotCreateCartWithInvalidUsername

	
	
	| interface |
	interface := RESTInterface with: Dictionary new.
	
	self
		should: [ interface createCartWithUser: 'Crocken321' andPassword: 'elMatiPiola321' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidUserError! !

!testRun: #RESTInterfaceTest #test01CanNotCreateCartWithInvalidUsername stamp: 'GR 11/26/2020 21:19:34'!
ERROR!
!RESTInterface methodsFor: 'opertaions' stamp: 'GR 11/26/2020 21:19:46'!
createCartWithUser: aString andPassword: aString2 
	self shouldBeImplemented.! !

!methodRemoval: RESTInterface #createCart:password: stamp: 'GR 11/26/2020 21:21:48'!
createCart: aString password: aString2 
	self shouldBeImplemented.!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/26/2020 21:22:46' prior: 50883607!
test01CanNotCreateCartWithInvalidUsername

	| interface |
	interface := RESTInterface with: Dictionary new.
	
	self
		should: [ interface createCartWithUser: 'Crocken321' andPassword: 'elMatiPiola321' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidUserError! !
!RESTInterface class methodsFor: 'error handling' stamp: 'GR 11/26/2020 21:23:00' prior: 50883593!
invalidUserError
	
	^ '1|invalid_user_or_password'! !
!RESTInterface class methodsFor: 'error handling' stamp: 'GR 11/26/2020 21:25:26' prior: 50883647!
invalidUserError
	
	^ 'Invalid username or password'! !

!testRun: #RESTInterfaceTest #test01CanNotCreateCartWithInvalidUsername stamp: 'GR 11/26/2020 21:25:58'!
FAILURE!
!RESTInterface methodsFor: 'opertaions' stamp: 'GR 11/26/2020 21:27:01' prior: 50883623!
createCartWithUser: aUsername andPassword: aPassword 
	
	self error: self class invalidUserError.! !

!testRun: #RESTInterfaceTest #test01CanNotCreateCartWithInvalidUsername stamp: 'GR 11/26/2020 21:27:02'!
PASSED!

!testRun: #RESTInterfaceTest #test01CanNotCreateCartWithInvalidUsername stamp: 'GR 11/26/2020 21:27:02'!
PASSED!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/26/2020 21:28:43'!
test02CanNotCreateCartWithValidUsernameButInvalidPassword

	| interface |
	interface := RESTInterface with: Dictionary with: 'Crocken321'->'lacontraseniamasseguradetodas'.
	
	self
		should: [ interface createCartWithUser: 'Crocken321' andPassword: 'elMatiPiola321' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidUserError! !

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/26/2020 21:29:53'!
ERROR!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/26/2020 21:30:03' prior: 50883674!
test02CanNotCreateCartWithValidUsernameButInvalidPassword

	| interface |
	interface := RESTInterface with: (Dictionary with: 'Crocken321'->'lacontraseniamasseguradetodas').
	
	self
		should: [ interface createCartWithUser: 'Crocken321' andPassword: 'elMatiPiola321' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidUserError! !

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/26/2020 21:30:06'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 11/26/2020 21:30:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 11/26/2020 21:30:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 11/26/2020 21:30:06'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 11/26/2020 21:30:06'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 11/26/2020 21:30:06'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 11/26/2020 21:30:06'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 11/26/2020 21:30:06'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 11/26/2020 21:30:06'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 11/26/2020 21:30:06'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 11/26/2020 21:30:06'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 11/26/2020 21:30:06'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 11/26/2020 21:30:06'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 11/26/2020 21:30:06'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 11/26/2020 21:30:06'!
PASSED!

!testRun: #RESTInterfaceTest #test01CanNotCreateCartWithInvalidUsername stamp: 'GR 11/26/2020 21:30:06'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/26/2020 21:30:06'!
PASSED!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/26/2020 21:48:28'!
test02CanCreateCartWithValidUsernameAndPassword

	| interface |
	interface := RESTInterface with: (Dictionary with: 'Crocken321'->'lacontraseniamasseguradetodas').
	
	self
		should: [ interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidUserError! !

!testRun: #RESTInterfaceTest #test02CanCreateCartWithValidUsernameAndPassword stamp: 'GR 11/26/2020 21:48:31'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 11/26/2020 21:48:31'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 11/26/2020 21:48:31'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 11/26/2020 21:48:31'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 11/26/2020 21:48:31'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 11/26/2020 21:48:31'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 11/26/2020 21:48:31'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 11/26/2020 21:48:31'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 11/26/2020 21:48:31'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 11/26/2020 21:48:31'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 11/26/2020 21:48:31'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 11/26/2020 21:48:31'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 11/26/2020 21:48:31'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 11/26/2020 21:48:31'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 11/26/2020 21:48:31'!
PASSED!

!testRun: #RESTInterfaceTest #test01CanNotCreateCartWithInvalidUsername stamp: 'GR 11/26/2020 21:48:31'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanCreateCartWithValidUsernameAndPassword stamp: 'GR 11/26/2020 21:48:31'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/26/2020 21:48:31'!
PASSED!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/26/2020 21:51:49' prior: 50883765!
test02CanCreateCartWithValidUsernameAndPassword

	| interface |
	interface := RESTInterface with: (Dictionary with: 'Crocken321'->'lacontraseniamasseguradetodas').
	
	self assert: 0 equals: (interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/26/2020 21:52:57'!
test02CreateCartWithValidUsernameAndPasswordReturnsID

	| interface |
	interface := RESTInterface with: (Dictionary with: 'Crocken321'->'lacontraseniamasseguradetodas').
	
	self assert: 0 equals: (interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').! !

!methodRemoval: RESTInterfaceTest #test02CanCreateCartWithValidUsernameAndPassword stamp: 'GR 11/26/2020 21:52:57'!
test02CanCreateCartWithValidUsernameAndPassword

	| interface |
	interface := RESTInterface with: (Dictionary with: 'Crocken321'->'lacontraseniamasseguradetodas').
	
	self assert: 0 equals: (interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/26/2020 21:53:13'!
test02CreateCartWithValidUsernameAndPasswordReturnsCartID

	| interface |
	interface := RESTInterface with: (Dictionary with: 'Crocken321'->'lacontraseniamasseguradetodas').
	
	self assert: 0 equals: (interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').! !

!methodRemoval: RESTInterfaceTest #test02CreateCartWithValidUsernameAndPasswordReturnsID stamp: 'GR 11/26/2020 21:53:13'!
test02CreateCartWithValidUsernameAndPasswordReturnsID

	| interface |
	interface := RESTInterface with: (Dictionary with: 'Crocken321'->'lacontraseniamasseguradetodas').
	
	self assert: 0 equals: (interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/26/2020 21:53:22' prior: 50883878!
test02CreateCartWithValidUsernameAndPasswordReturnsCartID

	| interface |
	
	interface := RESTInterface with: (Dictionary with: 'Crocken321'->'lacontraseniamasseguradetodas').
	
	self assert: 0 equals: (interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').! !

!testRun: #RESTInterfaceTest #test02CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/26/2020 21:53:26'!
ERROR!
!RESTInterface methodsFor: 'opertaions' stamp: 'GR 11/26/2020 21:54:59' prior: 50883661!
createCartWithUser: aUsername andPassword: aPassword 
	
	(userList includes: aUsername) ifFalse: [ self error: self class invalidUserError ].
	
	^ 0! !

!testRun: #RESTInterfaceTest #test02CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/26/2020 21:55:00'!
ERROR!
!RESTInterface methodsFor: 'opertaions' stamp: 'GR 11/26/2020 21:55:24' prior: 50883921!
createCartWithUser: aUsername andPassword: aPassword 
	
	(userList includesKey: aUsername) ifFalse: [ self error: self class invalidUserError ].
	
	^ 0! !

!testRun: #RESTInterfaceTest #test02CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/26/2020 21:55:25'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 11/26/2020 21:55:25'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 11/26/2020 21:55:25'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 11/26/2020 21:55:25'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 11/26/2020 21:55:25'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 11/26/2020 21:55:25'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 11/26/2020 21:55:25'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 11/26/2020 21:55:25'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 11/26/2020 21:55:25'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 11/26/2020 21:55:25'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 11/26/2020 21:55:25'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 11/26/2020 21:55:25'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 11/26/2020 21:55:25'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 11/26/2020 21:55:25'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 11/26/2020 21:55:25'!
PASSED!

!testRun: #RESTInterfaceTest #test01CanNotCreateCartWithInvalidUsername stamp: 'GR 11/26/2020 21:55:25'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/26/2020 21:55:25'!
FAILURE!

!testRun: #RESTInterfaceTest #test02CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/26/2020 21:55:25'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/26/2020 21:55:25'!
FAILURE!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/26/2020 21:55:36'!
test03CreateCartWithValidUsernameAndPasswordReturnsCartID

	| interface |
	
	interface := RESTInterface with: (Dictionary with: 'Crocken321'->'lacontraseniamasseguradetodas').
	
	self assert: 0 equals: (interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').! !

!methodRemoval: RESTInterfaceTest #test02CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/26/2020 21:55:36'!
test02CreateCartWithValidUsernameAndPasswordReturnsCartID

	| interface |
	
	interface := RESTInterface with: (Dictionary with: 'Crocken321'->'lacontraseniamasseguradetodas').
	
	self assert: 0 equals: (interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/26/2020 21:55:42'!
test02CreateCartWithValidUsernameAndPasswordReturnsCartID

	| interface |
	
	interface := RESTInterface with: (Dictionary with: 'Crocken321'->'lacontraseniamasseguradetodas').
	
	self assert: 0 equals: (interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').! !

!methodRemoval: RESTInterfaceTest #test03CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/26/2020 21:55:42'!
test03CreateCartWithValidUsernameAndPasswordReturnsCartID

	| interface |
	
	interface := RESTInterface with: (Dictionary with: 'Crocken321'->'lacontraseniamasseguradetodas').
	
	self assert: 0 equals: (interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/26/2020 21:55:47'!
test03CanNotCreateCartWithValidUsernameButInvalidPassword

	| interface |
	interface := RESTInterface with: (Dictionary with: 'Crocken321'->'lacontraseniamasseguradetodas').
	
	self
		should: [ interface createCartWithUser: 'Crocken321' andPassword: 'elMatiPiola321' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidUserError! !

!methodRemoval: RESTInterfaceTest #test02CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/26/2020 21:55:47'!
test02CanNotCreateCartWithValidUsernameButInvalidPassword

	| interface |
	interface := RESTInterface with: (Dictionary with: 'Crocken321'->'lacontraseniamasseguradetodas').
	
	self
		should: [ interface createCartWithUser: 'Crocken321' andPassword: 'elMatiPiola321' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidUserError!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/26/2020 21:56:03'!
test01CreateCartWithValidUsernameAndPasswordReturnsCartID

	| interface |
	
	interface := RESTInterface with: (Dictionary with: 'Crocken321'->'lacontraseniamasseguradetodas').
	
	self assert: 0 equals: (interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').! !

!methodRemoval: RESTInterfaceTest #test02CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/26/2020 21:56:03'!
test02CreateCartWithValidUsernameAndPasswordReturnsCartID

	| interface |
	
	interface := RESTInterface with: (Dictionary with: 'Crocken321'->'lacontraseniamasseguradetodas').
	
	self assert: 0 equals: (interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/26/2020 21:56:08'!
test02CanNotCreateCartWithInvalidUsername

	| interface |
	interface := RESTInterface with: Dictionary new.
	
	self
		should: [ interface createCartWithUser: 'Crocken321' andPassword: 'elMatiPiola321' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidUserError! !

!methodRemoval: RESTInterfaceTest #test01CanNotCreateCartWithInvalidUsername stamp: 'GR 11/26/2020 21:56:08'!
test01CanNotCreateCartWithInvalidUsername

	| interface |
	interface := RESTInterface with: Dictionary new.
	
	self
		should: [ interface createCartWithUser: 'Crocken321' andPassword: 'elMatiPiola321' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidUserError!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/26/2020 21:56:11'!
FAILURE!
!RESTInterface methodsFor: 'opertaions' stamp: 'GR 11/26/2020 21:58:31' prior: 50883933!
createCartWithUser: aUsername andPassword: aPassword 
	
	(userList includesKey: aUsername) ifFalse: [ self error: self class invalidUserError ].
	
	(userList at: aUsername) = aPassword ifFalse: [ self error: self class invalidUserError ].
	
	^ 0! !

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/26/2020 21:58:33'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 11/26/2020 21:58:33'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 11/26/2020 21:58:33'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 11/26/2020 21:58:33'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 11/26/2020 21:58:33'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 11/26/2020 21:58:33'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 11/26/2020 21:58:33'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 11/26/2020 21:58:33'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 11/26/2020 21:58:33'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 11/26/2020 21:58:33'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 11/26/2020 21:58:33'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 11/26/2020 21:58:33'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 11/26/2020 21:58:33'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 11/26/2020 21:58:33'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 11/26/2020 21:58:33'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/26/2020 21:58:33'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 11/26/2020 21:58:33'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/26/2020 21:58:33'!
PASSED!

----QUIT----(26 November 2020 22:03:47) CuisUniversity-4384.image priorSource: 17626027!

----STARTUP---- (29 November 2020 14:35:02) as /home/grosinov/linux64/CuisUniversity-4384.image!

!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 14:46:18'!
test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach

	| interface |
	
	interface := RESTInterface with: (Dictionary with: 'Crocken321'->'lacontraseniamasseguradetodas').
	
	self assert: 0 equals: (interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').
	self assert: 1 equals: (interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 14:46:57' prior: 50884221!
test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach

	| interface |
	
	interface := RESTInterface with: (Dictionary with: 'Crocken321'->'lacontraseniamasseguradetodas' with: 'ortoPilot'->'ilovemusic').
	
	self assert: 0 equals: (interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').
	self assert: 1 equals: (interface createCartWithUser: 'ortoPilot' andPassword: 'ilovemusic').! !

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 11/29/2020 14:47:07'!
FAILURE!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 14:47:24' prior: 50884088!
test01CreateCartWithValidUsernameAndPasswordReturnsCartID

	| interface |
	
	interface := RESTInterface with: (Dictionary with: 'Crocken321'->'lacontraseniamasseguradetodas').
	
	self assert: '0' equals: (interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 14:47:36' prior: 50884238!
test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach

	| interface |
	
	interface := RESTInterface with: (Dictionary with: 'Crocken321'->'lacontraseniamasseguradetodas' with: 'ortoPilot'->'ilovemusic').
	
	self assert: '0' equals: (interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').
	self assert: '1' equals: (interface createCartWithUser: 'ortoPilot' andPassword: 'ilovemusic').! !

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 11/29/2020 14:47:41'!
FAILURE!

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'GR 11/29/2020 14:48:11'!
Object subclass: #RESTInterface
	instanceVariableNames: 'users userList nextCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterface methodsFor: 'opertaions' stamp: 'GR 11/29/2020 14:48:09' prior: 50884143!
createCartWithUser: aUsername andPassword: aPassword 
	
	(userList includesKey: aUsername) ifFalse: [ self error: self class invalidUserError ].
	
	(userList at: aUsername) = aPassword ifFalse: [ self error: self class invalidUserError ].
	
	^ nextCartID asString! !

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 11/29/2020 14:48:14'!
FAILURE!
!RESTInterface methodsFor: 'initialization' stamp: 'GR 11/29/2020 14:48:57' prior: 50883580!
initializeWith: aUserList 
	
	userList := aUserList.
	nextCartID := 0! !

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 11/29/2020 14:49:01'!
FAILURE!
!RESTInterface methodsFor: 'initialization' stamp: 'GR 11/29/2020 14:49:23' prior: 50884318!
initializeWith: aUserList 
	
	userList := aUserList.
	nextCartID := -1! !
!RESTInterface methodsFor: 'opertaions' stamp: 'GR 11/29/2020 14:49:42' prior: 50884302!
createCartWithUser: aUsername andPassword: aPassword 
	
	(userList includesKey: aUsername) ifFalse: [ self error: self class invalidUserError ].
	
	(userList at: aUsername) = aPassword ifFalse: [ self error: self class invalidUserError ].
	
	nextCartID := nextCartID +1.
	^ nextCartID asString! !

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 11/29/2020 14:49:44'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/29/2020 14:49:44'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 11/29/2020 14:49:44'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/29/2020 14:49:44'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 11/29/2020 14:49:44'!
PASSED!
!RESTInterface methodsFor: 'opertaions' stamp: 'GR 11/29/2020 14:50:10' prior: 50884334!
createCartWithUser: aUsername andPassword: aPassword 
	
	(userList includesKey: aUsername) ifFalse: [ self error: self class invalidUserError ].
	
	(userList at: aUsername) = aPassword ifFalse: [ self error: self class invalidUserError ].
	
	nextCartID := nextCartID +1.
	nextCartID asString! !
!RESTInterface methodsFor: 'opertaions' stamp: 'GR 11/29/2020 14:50:27'!
giveCartID

	nextCartID := nextCartID +1.
	nextCartID asString! !
!RESTInterface methodsFor: 'opertaions' stamp: 'GR 11/29/2020 14:50:27' prior: 50884367!
createCartWithUser: aUsername andPassword: aPassword 
	
	(userList includesKey: aUsername) ifFalse: [ self error: self class invalidUserError ].
	
	(userList at: aUsername) = aPassword ifFalse: [ self error: self class invalidUserError ].
	
	self giveCartID! !
!RESTInterface methodsFor: 'opertaions' stamp: 'GR 11/29/2020 14:50:31' prior: 50884384!
createCartWithUser: aUsername andPassword: aPassword 
	
	(userList includesKey: aUsername) ifFalse: [ self error: self class invalidUserError ].
	
	(userList at: aUsername) = aPassword ifFalse: [ self error: self class invalidUserError ].
	
	^ self giveCartID! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:03:30'!
test05CartIsCreatedAndSaved

	| interface |
	
	interface := RESTInterface with: (Dictionary with: 'Crocken321'->'lacontraseniamasseguradetodas' with: 'ortoPilot'->'ilovemusic').
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self assert: (interface isDefinedTheID: '0').! !

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 11/29/2020 15:03:37'!
ERROR!
!RESTInterface methodsFor: 'accessing' stamp: 'GR 11/29/2020 15:03:43'!
isDefinedTheID: aString 
	self shouldBeImplemented.! !

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'GR 11/29/2020 15:04:16'!
Object subclass: #RESTInterface
	instanceVariableNames: 'users userList nextCartID carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterface methodsFor: 'accessing' stamp: 'GR 11/29/2020 15:04:14' prior: 50884422!
isDefinedTheID: aCartID

	carts includes: aCartID.! !

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 11/29/2020 15:04:17'!
ERROR!
!RESTInterface methodsFor: 'initialization' stamp: 'GR 11/29/2020 15:04:32' prior: 50884328!
initializeWith: aUserList 
	
	userList := aUserList.
	nextCartID := 0! !
!RESTInterface methodsFor: 'initialization' stamp: 'GR 11/29/2020 15:04:43' prior: 50884443!
initializeWith: aUserList 
	
	userList := aUserList.
	nextCartID := 0.
	carts := Dictionary new.! !

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 11/29/2020 15:04:44'!
ERROR!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:04:50' prior: 50884406!
test05CartIsCreatedAndSaved

	| interface |
	
	interface := RESTInterface with: (Dictionary with: 'Crocken321'->'lacontraseniamasseguradetodas' with: 'ortoPilot'->'ilovemusic').
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self assert: (interface isDefinedTheID: '1').! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:04:55' prior: 50884273!
test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach

	| interface |
	
	interface := RESTInterface with: (Dictionary with: 'Crocken321'->'lacontraseniamasseguradetodas' with: 'ortoPilot'->'ilovemusic').
	
	self assert: '1' equals: (interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').
	self assert: '2' equals: (interface createCartWithUser: 'ortoPilot' andPassword: 'ilovemusic').! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:05:02' prior: 50884260!
test01CreateCartWithValidUsernameAndPasswordReturnsCartID

	| interface |
	
	interface := RESTInterface with: (Dictionary with: 'Crocken321'->'lacontraseniamasseguradetodas').
	
	self assert: '1' equals: (interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').! !

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 11/29/2020 15:05:07'!
ERROR!
!RESTInterface methodsFor: 'accessing' stamp: 'GR 11/29/2020 15:05:19' prior: 50884435!
isDefinedTheID: aCartID

	^ carts includes: aCartID.! !

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 11/29/2020 15:05:20'!
FAILURE!
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/29/2020 15:09:09' prior: 50884395!
createCartWithUser: aUsername andPassword: aPassword 
	
	| ID |
	
	(userList includesKey: aUsername) ifFalse: [ self error: self class invalidUserError ].
	
	(userList at: aUsername) = aPassword ifFalse: [ self error: self class invalidUserError ].
	
	ID := self giveCartID.
	
	"carts add: ID->Cart "
	
	^ self giveCartID! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:10:00' prior: 50884491!
test01CreateCartWithValidUsernameAndPasswordReturnsCartID

	| interface |
	
	interface := RESTInterface with: (Dictionary with: 'Crocken321'->'lacontraseniamasseguradetodas').
	
	self assert: '1' equals: (interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').! !
!RESTInterfaceTest methodsFor: 'nil' stamp: 'GR 11/29/2020 15:12:31' overrides: 16927572!
setUp! !

!classDefinition: #RESTInterfaceTest category: 'TusLibros' stamp: 'GR 11/29/2020 15:12:44'!
TestCase subclass: #RESTInterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:12:43' prior: 50884542 overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:13:42' prior: 50884529!
test01CreateCartWithValidUsernameAndPasswordReturnsCartID

	| interface |
	
	interface := RESTInterface withUserList: (Dictionary with: 'Crocken321'->'lacontraseniamasseguradetodas') andCatalog: testObjectsFactory defaultCatalog.
	
	self assert: '1' equals: (interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:14:05' prior: 50884560!
test01CreateCartWithValidUsernameAndPasswordReturnsCartID

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	self assert: '1' equals: (interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').! !
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'GR 11/29/2020 15:14:17'!
userList

	! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:14:44' prior: 50884588!
userList

	Dictionary 
		with: 'Crocken321'->'lacontraseniamasseguradetodas'! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:16:03' prior: 50884592!
userList

	Dictionary 
		with: 'Crocken321'->'lacontraseniamasseguradetodas'
		with: 'ortoPilot'->'ilovemusic'! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:16:44' prior: 50884114!
test02CanNotCreateCartWithInvalidUsername

	| interface |
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	self
		should: [ interface createCartWithUser: 'CheckPoint' andPassword: 'elMatiPiola321' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidUserError! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:16:54' prior: 50884058!
test03CanNotCreateCartWithValidUsernameButInvalidPassword

	| interface |
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	self
		should: [ interface createCartWithUser: 'Crocken321' andPassword: 'elMatiPiola321' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidUserError! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:17:04' prior: 50884473!
test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	self assert: '1' equals: (interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').
	self assert: '2' equals: (interface createCartWithUser: 'ortoPilot' andPassword: 'ilovemusic').! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:17:10' prior: 50884459!
test05CartIsCreatedAndSaved

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self assert: (interface isDefinedTheID: '1').! !

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/29/2020 15:17:13'!
ERROR!
!RESTInterface class methodsFor: 'instance creation' stamp: 'GR 11/29/2020 15:17:22'!
withUserList: aStoreTestObjectsFactory andCatalog: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithUserList: aStoreTestObjectsFactory andCatalog: aDictionary ! !
!RESTInterface class methodsFor: 'instance creation' stamp: 'GR 11/29/2020 15:17:46' prior: 50884669!
withUserList: aUserList andCatalog: aCatalog 
	
	^self new initializeWithUserList: aUserList andCatalog: aCatalog ! !

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/29/2020 15:17:47'!
ERROR!

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'GR 11/29/2020 15:17:53'!
Object subclass: #RESTInterface
	instanceVariableNames: 'users userList nextCartID carts catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterface methodsFor: 'initialization' stamp: 'GR 11/29/2020 15:17:53'!
initializeWithUserList: aUserList andCatalog: aCatalog 
	self shouldBeImplemented.
	userList := aUserList.
	catalog := aCatalog.! !
!RESTInterface methodsFor: 'initialization' stamp: 'GR 11/29/2020 15:17:55' prior: 50884699!
initializeWithUserList: aUserList andCatalog: aCatalog 
	
	userList := aUserList.
	catalog := aCatalog.! !
!RESTInterface methodsFor: 'initialization' stamp: 'GR 11/29/2020 15:18:08' prior: 50884707!
initializeWithUserList: aUserList andCatalog: aCatalog 
	
	userList := aUserList.
	catalog := aCatalog.
	nextCartID := 0.! !

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/29/2020 15:18:09'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:18:46' prior: 50884598!
userList

	^ Dictionary 
		with: 'Crocken321'->'lacontraseniamasseguradetodas'
		with: 'ortoPilot'->'ilovemusic'! !

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/29/2020 15:18:47'!
FAILURE!
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/29/2020 15:20:45' prior: 50884515!
createCartWithUser: aUsername andPassword: aPassword 
	
	| ID |
	
	(userList includesKey: aUsername) ifFalse: [ self error: self class invalidUserError ].
	
	(userList at: aUsername) = aPassword ifFalse: [ self error: self class invalidUserError ].
	
	ID := self giveCartID.
	
	carts add: ID->(Cart acceptingItemsOf: catalog ).
	
	^ ID! !

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/29/2020 15:20:47'!
ERROR!
!RESTInterface methodsFor: 'initialization' stamp: 'GR 11/29/2020 15:21:11' prior: 50884714!
initializeWithUserList: aUserList andCatalog: aCatalog 
	
	userList := aUserList.
	catalog := aCatalog.
	carts := Dictionary new.
	nextCartID := 0.! !

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/29/2020 15:21:12'!
FAILURE!
!RESTInterface methodsFor: 'operations -- private' stamp: 'GR 11/29/2020 15:21:29' prior: 50884379!
giveCartID

	nextCartID := nextCartID +1.
	^nextCartID asString! !

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/29/2020 15:21:32'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/29/2020 15:21:38'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/29/2020 15:21:38'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 11/29/2020 15:21:38'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/29/2020 15:21:38'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 11/29/2020 15:21:38'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 11/29/2020 15:21:38'!
FAILURE!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 11/29/2020 15:21:38'!
FAILURE!
!RESTInterface methodsFor: 'accessing' stamp: 'GR 11/29/2020 15:22:01' prior: 50884507!
isDefinedTheID: aCartID

	^ carts includesKey: aCartID.! !

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 11/29/2020 15:22:02'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/29/2020 15:22:04'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/29/2020 15:22:04'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 11/29/2020 15:22:04'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/29/2020 15:22:04'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 11/29/2020 15:22:04'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 11/29/2020 15:22:04'!
PASSED!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:27:11'!
test06CanAddProductsToCartWithCartID

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface addToCart: '0' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: (interface isDefinedTheID: '1').! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:29:11' prior: 50884835!
test06CanAddProductsToCartWithCartID

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: (interface theCart: '1' hasTheProduct: testObjectsFactory itemSellByTheStore withAmount: 10).! !

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 11/29/2020 15:29:13'!
ERROR!
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/29/2020 15:29:21'!
addToCart: aString theProduct: aString2 withAmount: aSmallInteger 
	self shouldBeImplemented.! !
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/29/2020 15:31:22' prior: 50884870!
addToCart: aCartID theProduct: aProduct withAmount: aProductAmount
 
	(carts at: aCartID) add: aProductAmount of: aProduct.! !

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 11/29/2020 15:31:26'!
ERROR!
!RESTInterface methodsFor: 'testing' stamp: 'GR 11/29/2020 15:31:36'!
theCart: aString hasTheProduct: aString2 withAmount: aSmallInteger 
	self shouldBeImplemented.! !
!RESTInterface methodsFor: 'testing' stamp: 'GR 11/29/2020 15:36:03' prior: 50884886!
theCart: aCartID hasTheProduct: aProduct withAmount: aProductAmount 
	
	| cart amountOfProductInCart |
	
	cart := carts at: aCartID.
	
	amountOfProductInCart := cart occurrencesOf: aProduct.
	
	(cart includes: aProduct) and: (amountOfProductInCart = aProductAmount )! !
!RESTInterface methodsFor: 'testing' stamp: 'GR 11/29/2020 15:36:11' prior: 50884892!
theCart: aCartID hasTheProduct: aProduct withAmount: aProductAmount 
	
	| cart amountOfProductInCart |
	
	cart := carts at: aCartID.
	
	amountOfProductInCart := cart occurrencesOf: aProduct.
	
	^ (cart includes: aProduct) and: (amountOfProductInCart = aProductAmount )! !

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 11/29/2020 15:36:12'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/29/2020 15:36:12'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 11/29/2020 15:36:12'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/29/2020 15:36:12'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 11/29/2020 15:36:12'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 11/29/2020 15:36:12'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 11/29/2020 15:36:12'!
PASSED!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:40:00'!
test07CanNotAddProductsToInvalidCart

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self
		should: [ interface addToCart: '4' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: interface invalidCartError equals: anError messageText.
			self deny: (interface theCart: '4' hasTheProduct: testObjectsFactory itemSellByTheStore withAmount: 10).
			 ]
	
	! !

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 11/29/2020 15:40:04'!
ERROR!
!RESTInterface methodsFor: 'error handling' stamp: 'GR 11/29/2020 15:40:21'!
invalidCartError
	self shouldBeImplemented.! !
!RESTInterface methodsFor: 'error handling' stamp: 'GR 11/29/2020 15:40:46' prior: 50884968!
invalidCartError
	
	^ 'Invalid cart'! !

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 11/29/2020 15:40:49'!
FAILURE!
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/29/2020 15:41:42' prior: 50884876!
addToCart: aCartID theProduct: aProduct withAmount: aProductAmount
 
	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartError ].
	
	(carts at: aCartID) add: aProductAmount of: aProduct.! !

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 11/29/2020 15:41:43'!
ERROR!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:42:05' prior: 50884942!
test07CanNotAddProductsToInvalidCart

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self
		should: [ interface addToCart: '4' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: RESTInterface invalidCartError equals: anError messageText.
			self deny: (interface theCart: '4' hasTheProduct: testObjectsFactory itemSellByTheStore withAmount: 10).
			 ]
	
	! !

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 11/29/2020 15:42:06'!
ERROR!
!RESTInterface class methodsFor: 'error handling' stamp: 'GR 11/29/2020 15:42:22'!
invalidCartError
	self shouldBeImplemented.! !
!RESTInterface class methodsFor: 'error handling' stamp: 'GR 11/29/2020 15:42:28' prior: 50885022!
invalidCartError
	
	^ 'Invalid cart'! !

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 11/29/2020 15:42:29'!
ERROR!
!RESTInterface methodsFor: 'testing' stamp: 'GR 11/29/2020 15:43:07' prior: 50884904!
theCart: aCartID hasTheProduct: aProduct withAmount: aProductAmount 
	
	| cart amountOfProductInCart |
	
	cart := carts at: aCartID ifAbsent: [^false].
	
	amountOfProductInCart := cart occurrencesOf: aProduct.
	
	^ (cart includes: aProduct) and: (amountOfProductInCart = aProductAmount )! !

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 11/29/2020 15:43:11'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/29/2020 15:43:11'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 11/29/2020 15:43:11'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/29/2020 15:43:11'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 11/29/2020 15:43:11'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 11/29/2020 15:43:11'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 11/29/2020 15:43:11'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 11/29/2020 15:43:11'!
PASSED!

!methodRemoval: RESTInterface #invalidCartError stamp: 'GR 11/29/2020 15:43:28'!
invalidCartError
	
	^ 'Invalid cart'!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:44:14'!
test08CanListCart

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self
		should: [ interface addToCart: '4' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: RESTInterface invalidCartError equals: anError messageText.
			self deny: (interface theCart: '4' hasTheProduct: testObjectsFactory itemSellByTheStore withAmount: 10).
			 ]
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:46:36' prior: 50885081!
test08CanListCart

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:47:17'!
test08CanListAnEmptyCart

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	! !

!methodRemoval: RESTInterfaceTest #test08CanListCart stamp: 'GR 11/29/2020 15:47:17'!
test08CanListCart

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:48:05' prior: 50885118!
test08CanListAnEmptyCart

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self assert: Dictionary new equals: (interface listCart: '1')
	
	! !

!testRun: #RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 11/29/2020 15:48:08'!
ERROR!
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/29/2020 15:48:18'!
listCart: aString 
	self shouldBeImplemented.! !
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/29/2020 15:48:32' prior: 50885162!
listCart: aCartID 
	
	^ Dictionary new.! !

!testRun: #RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 11/29/2020 15:48:34'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/29/2020 15:48:34'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 11/29/2020 15:48:34'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/29/2020 15:48:34'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 11/29/2020 15:48:34'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 11/29/2020 15:48:34'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 11/29/2020 15:48:34'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 11/29/2020 15:48:34'!
PASSED!

!testRun: #RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 11/29/2020 15:48:34'!
PASSED!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:49:21'!
test09CanListCartWithOneItem

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self assert: (Dictionary with: testObjectsFactory itemSellByTheStore ) equals: (interface listCart: '1')
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:49:59' prior: 50885204!
test09CanListCartWithOneItem

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 1.
	
	self assert: (Dictionary with: testObjectsFactory itemSellByTheStore->1 ) equals: (interface listCart: '1')
	
	! !

!testRun: #RESTInterfaceTest #test09CanListCartWithOneItem stamp: 'GR 11/29/2020 15:51:47'!
FAILURE!
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/29/2020 15:53:40' prior: 50885167!
listCart: aCartID 
	
	| cart |
	
	cart := carts at: aCartID.
	
	^ cart listCart.! !

!testRun: #RESTInterfaceTest #test09CanListCartWithOneItem stamp: 'GR 11/29/2020 15:53:41'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'GR 11/29/2020 15:53:47'!
listCart
	self shouldBeImplemented.! !
!Cart methodsFor: 'accessing' stamp: 'GR 11/29/2020 15:53:55' prior: 50885248!
listCart
	
	items asBag contents! !

!testRun: #RESTInterfaceTest #test09CanListCartWithOneItem stamp: 'GR 11/29/2020 15:53:56'!
FAILURE!
!Cart methodsFor: 'accessing' stamp: 'GR 11/29/2020 15:54:11' prior: 50885252!
listCart
	
	^ items asBag contents! !

!testRun: #RESTInterfaceTest #test09CanListCartWithOneItem stamp: 'GR 11/29/2020 15:54:15'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/29/2020 15:54:15'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 11/29/2020 15:54:15'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/29/2020 15:54:15'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 11/29/2020 15:54:15'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 11/29/2020 15:54:15'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 11/29/2020 15:54:15'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 11/29/2020 15:54:15'!
PASSED!

!testRun: #RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 11/29/2020 15:54:15'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListCartWithOneItem stamp: 'GR 11/29/2020 15:54:15'!
PASSED!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:54:31' prior: 50885219!
test09CanListCartWithOneItem

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: (Dictionary with: testObjectsFactory itemSellByTheStore->10 ) equals: (interface listCart: '1')
	
	! !

!testRun: #RESTInterfaceTest #test09CanListCartWithOneItem stamp: 'GR 11/29/2020 15:54:33'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/29/2020 15:54:33'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 11/29/2020 15:54:33'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/29/2020 15:54:33'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 11/29/2020 15:54:33'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 11/29/2020 15:54:33'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 11/29/2020 15:54:33'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 11/29/2020 15:54:33'!
PASSED!

!testRun: #RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 11/29/2020 15:54:33'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListCartWithOneItem stamp: 'GR 11/29/2020 15:54:33'!
PASSED!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:54:54'!
test09CanListCart

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: (Dictionary with: testObjectsFactory itemSellByTheStore->10 ) equals: (interface listCart: '1')
	
	! !

!methodRemoval: RESTInterfaceTest #test09CanListCartWithOneItem stamp: 'GR 11/29/2020 15:54:54'!
test09CanListCartWithOneItem

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: (Dictionary with: testObjectsFactory itemSellByTheStore->10 ) equals: (interface listCart: '1')
	
	!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:55:16'!
test09CanListCartWithValidID

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: (Dictionary with: testObjectsFactory itemSellByTheStore->10 ) equals: (interface listCart: '1')
	
	! !

!methodRemoval: RESTInterfaceTest #test09CanListCart stamp: 'GR 11/29/2020 15:55:16'!
test09CanListCart

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: (Dictionary with: testObjectsFactory itemSellByTheStore->10 ) equals: (interface listCart: '1')
	
	!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:55:30'!
test10CanNotListCartWithInvalidID

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: (Dictionary with: testObjectsFactory itemSellByTheStore->10 ) equals: (interface listCart: '1')
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:56:35' prior: 50885422!
test10CanNotListCartWithInvalidID

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self
		should: [ interface listCart: '4' ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidCartError.
	
	! !

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 11/29/2020 15:56:39'!
FAILURE!

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 11/29/2020 15:57:01'!
FAILURE!

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 11/29/2020 15:57:01'!
FAILURE!
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/29/2020 15:58:00' prior: 50885240!
listCart: aCartID 
	
	| cart |
	
	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartError ].
	
	cart := carts at: aCartID.
	
	^ cart listCart.! !

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 11/29/2020 15:58:01'!
PASSED!

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 11/29/2020 15:58:03'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/29/2020 15:58:03'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 11/29/2020 15:58:03'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/29/2020 15:58:03'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 11/29/2020 15:58:03'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 11/29/2020 15:58:03'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 11/29/2020 15:58:03'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 11/29/2020 15:58:03'!
PASSED!

!testRun: #RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 11/29/2020 15:58:03'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListCartWithValidID stamp: 'GR 11/29/2020 15:58:03'!
PASSED!

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 11/29/2020 15:58:03'!
PASSED!

'a' + 1!

'a' asciiValue + 1!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 16:27:10' prior: 50885440!
test10CanNotListCartWithInvalidID

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self
		should: [ interface listCart: '4' ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidCartError.! !

!methodRemoval: RESTInterface #initializeWith: stamp: 'GR 11/29/2020 16:34:45'!
initializeWith: aUserList 
	
	userList := aUserList.
	nextCartID := 0.
	carts := Dictionary new.!

!methodRemoval: RESTInterface class #with: stamp: 'GR 11/29/2020 16:34:52'!
with: aUserList

	^self new initializeWith: aUserList !

Object subclass: #RESTInterface
	instanceVariableNames: 'userList nextCartID carts catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'GR 11/29/2020 16:35:05'!
Object subclass: #RESTInterface
	instanceVariableNames: 'userList nextCartID carts catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #RESTInterface
	instanceVariableNames: 'userList nextCartID carts catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'GR 11/29/2020 16:39:50'!
Object subclass: #RESTInterface
	instanceVariableNames: 'userList nextCartID carts catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 16:41:16'!
test11CanNotCheckoutCartWithInvalidID

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self
		should: [ interface checkout: '4' withCreditCard: testObjectsFactory ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidCartError.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 16:41:36' prior: 50885575!
test11CanNotCheckoutCartWithInvalidID

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self
		should: [ interface checkout: '4' withCreditCard: testObjectsFactory notExpiredCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidCartError.! !

!testRun: #RESTInterfaceTest #test11CanNotCheckoutCartWithInvalidID stamp: 'GR 11/29/2020 16:41:51'!
ERROR!
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/29/2020 16:41:59'!
checkout: aString withCreditCard: aCreditCard 
	self shouldBeImplemented.! !
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/29/2020 16:45:13' prior: 50885619!
checkout: aCartID withCreditCard: aCreditCard 
	
	(carts includesKey: aCartID) ifFalse: [ self error: self class invalidCartError ]! !

!testRun: #RESTInterfaceTest #test11CanNotCheckoutCartWithInvalidID stamp: 'GR 11/29/2020 16:45:14'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/29/2020 16:45:14'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 11/29/2020 16:45:14'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/29/2020 16:45:14'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 11/29/2020 16:45:14'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 11/29/2020 16:45:14'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 11/29/2020 16:45:14'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 11/29/2020 16:45:14'!
PASSED!

!testRun: #RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 11/29/2020 16:45:14'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListCartWithValidID stamp: 'GR 11/29/2020 16:45:14'!
PASSED!

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 11/29/2020 16:45:14'!
PASSED!

!testRun: #RESTInterfaceTest #test11CanNotCheckoutCartWithInvalidID stamp: 'GR 11/29/2020 16:45:14'!
PASSED!

----QUIT----(29 November 2020 16:45:33) CuisUniversity-4384.image priorSource: 17682049!

----STARTUP---- (30 November 2020 18:05:09) as /home/grosinov/linux64/CuisUniversity-4384.image!

!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 18:14:12'!
test12CanNotAddToCartIf30MinutesPassedSinceLastOperation

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self
		should: [ interface checkout: '4' withCreditCard: testObjectsFactory notExpiredCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidCartError.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 18:16:38' prior: 50885681!
test12CanNotAddToCartIf30MinutesPassedSinceLastOperation

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	! !

	self time !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 18:29:34' prior: 50885703!
test12CanNotAddToCartIf30MinutesPassedSinceLastOperation

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	! !

Object subclass: #RESTInterface
	instanceVariableNames: 'userList nextCartID carts catalog cartsPerUser salesPerUser'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'GR 11/30/2020 18:31:55'!
Object subclass: #RESTInterface
	instanceVariableNames: 'userList nextCartID carts catalog cartsPerUser salesPerUser'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #RESTInterface
	instanceVariableNames: 'userList nextCartID carts catalog salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'GR 11/30/2020 18:33:09'!
Object subclass: #RESTInterface
	instanceVariableNames: 'userList nextCartID carts catalog salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #RESTInterface
	instanceVariableNames: 'userList nextCartID catalog carts salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'GR 11/30/2020 18:34:49'!
Object subclass: #RESTInterface
	instanceVariableNames: 'userList nextCartID catalog carts salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 11/30/2020 18:36:18'!
PASSED!

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 11/30/2020 18:36:20'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/30/2020 18:36:20'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 11/30/2020 18:36:20'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/30/2020 18:36:20'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 11/30/2020 18:36:20'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 11/30/2020 18:36:20'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 11/30/2020 18:36:20'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 11/30/2020 18:36:20'!
PASSED!

!testRun: #RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 11/30/2020 18:36:20'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListCartWithValidID stamp: 'GR 11/30/2020 18:36:20'!
PASSED!

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 11/30/2020 18:36:20'!
PASSED!

!testRun: #RESTInterfaceTest #test11CanNotCheckoutCartWithInvalidID stamp: 'GR 11/30/2020 18:36:20'!
PASSED!

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 18:36:20'!
PASSED!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 18:53:04' prior: 50885719!
test12CanNotAddToCartIf30MinutesPassedSinceLastOperation

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	
	
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 18:59:38' prior: 50884849!
test06CanAddProductsToCartWithCartID

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self deny: (interface listCart: '1') isEmpty.! !

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 11/30/2020 18:59:39'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/30/2020 18:59:39'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 11/30/2020 18:59:39'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/30/2020 18:59:39'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 11/30/2020 18:59:39'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 11/30/2020 18:59:39'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 11/30/2020 18:59:39'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 11/30/2020 18:59:39'!
PASSED!

!testRun: #RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 11/30/2020 18:59:39'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListCartWithValidID stamp: 'GR 11/30/2020 18:59:39'!
PASSED!

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 11/30/2020 18:59:39'!
PASSED!

!testRun: #RESTInterfaceTest #test11CanNotCheckoutCartWithInvalidID stamp: 'GR 11/30/2020 18:59:39'!
PASSED!

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 18:59:39'!
PASSED!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 19:00:30' prior: 50884995!
test07CanNotAddProductsToInvalidCart

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self
		should: [ interface addToCart: '4' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: RESTInterface invalidCartError equals: anError messageText.
			self deny: (interface listCart: '4' isEmpty).
			 ]
	
	! !

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 11/30/2020 19:00:31'!
ERROR!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 19:01:54' prior: 50885905!
test07CanNotAddProductsToInvalidCart

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self
		should: [ interface addToCart: '4' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10. ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidCartError. 
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 19:02:35' prior: 50885146!
test08CanListAnEmptyCart

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self assert: (interface listCart: '1') isEmpty
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:48:05' prior: 50885949!
test08CanListAnEmptyCart

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self assert: Dictionary new equals: (interface listCart: '1')
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/29/2020 15:29:11' prior: 50885842!
test06CanAddProductsToCartWithCartID

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: (interface theCart: '1' hasTheProduct: testObjectsFactory itemSellByTheStore withAmount: 10).! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 18:59:38' prior: 50885976!
test06CanAddProductsToCartWithCartID

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self deny: (interface listCart: '1') isEmpty.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 19:10:13'!
test13

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	
	
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 19:11:07'!
test13CheckoutACartReturnsSaleID

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	
	
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	! !

!methodRemoval: RESTInterfaceTest #test13 stamp: 'GR 11/30/2020 19:11:07'!
test13

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	
	
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 19:13:00' prior: 50886024!
test13CheckoutACartReturnsSaleID

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: '1' equals: (interface checkout: '1' withCCN: 4865642166849654 withCCED: August, 2021 withCCO: 'Matias Morales')
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 19:15:46' prior: 50886052!
test13CheckoutACartReturnsSaleID

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: '1' equals: (interface checkout: '1' withCCN: '4865642166849654' withCCED: August, 2021 withCCO: 'Matias Morales')
	
	! !

!testRun: #RESTInterfaceTest #test13CheckoutACartReturnsSaleID stamp: 'GR 11/30/2020 19:17:16'!
ERROR!
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/30/2020 19:17:24'!
checkout: aString withCCN: aString2 withCCED: aGregorianMonthOfYear withCCO: aString4 
	self shouldBeImplemented.! !
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/30/2020 19:19:57' prior: 50886092!
checkout: aCartID withCCN: aCCN withCCED: aCCED withCCO: aCCO 
	
	| creditCard |
	
	creditCard := CreditCard expiringOn: (Month month: aCCED monthOfYear year: aCCED year)! !
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/30/2020 19:26:29' prior: 50886099!
checkout: aCartID withCCN: aCCN withCCED: aCCED withCCO: aCCO 
	
	| creditCard |
	
	creditCard := CreditCard expiringOn: (Month month: aCCED monthOfYear year: aCCED year).! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 19:30:49' prior: 50886071!
test13CheckoutACartReturnsSaleID

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: '1' equals: (interface checkout: '1' withCCN: '4865642166849654' withCCED: August, 2021 withCCO: 'Matias Morales')
	
	! !

TestCase subclass: #RESTInterfaceTest
	instanceVariableNames: 'testObjectsFactory clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RESTInterfaceTest category: 'TusLibros' stamp: 'GR 11/30/2020 20:11:04'!
TestCase subclass: #RESTInterfaceTest
	instanceVariableNames: 'testObjectsFactory clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:28:55' prior: 50885826!
test12CanNotAddToCartIf30MinutesPassedSinceLastOperation

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	
	
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	! !

!classDefinition: #RealTimeClock category: 'TusLibros' stamp: 'GR 11/30/2020 20:30:09'!
Object subclass: #RealTimeClock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:30:04' prior: 50884554 overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.
	
	clock := RealTimeClock new.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:31:10' prior: 50886149!
test12CanNotAddToCartIf30MinutesPassedSinceLastOperation

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self thirtyMinutesTimeWrap.
	
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:34:08' prior: 50886179!
test12CanNotAddToCartIf30MinutesPassedSinceLastOperation

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self thirtyMinutesTimeWrap.
	
	self 
		should: [ interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RESTInterface cartTimeExceededErrorDescription = anError messageText.
			self deny: (interface isDefinedTheID: '1') ]
	
	
	! !

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 20:34:11'!
ERROR!
!RESTInterfaceTest methodsFor: 'timeWrapper' stamp: 'GR 11/30/2020 20:34:23'!
thirtyMinutesTimeWrap
	self shouldBeImplemented.! !

!classDefinition: #WarpedClock category: 'TusLibros' stamp: 'GR 11/30/2020 20:35:40'!
Object subclass: #WarpedClock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterfaceTest methodsFor: 'timeWrapper' stamp: 'GR 11/30/2020 20:35:33' prior: 50886223!
thirtyMinutesTimeWrap
	
	clock := WarpedClock new.! !
!RESTInterfaceTest methodsFor: 'timeWrapper' stamp: 'GR 11/30/2020 20:36:07'!
thirtyMinutesTimeWarp
	
	clock := WarpedClock new.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:36:07' prior: 50886196!
test12CanNotAddToCartIf30MinutesPassedSinceLastOperation

	| interface |
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self thirtyMinutesTimeWarp.
	
	self 
		should: [ interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RESTInterface cartTimeExceededErrorDescription = anError messageText.
			self deny: (interface isDefinedTheID: '1') ]
	
	
	! !

!methodRemoval: RESTInterfaceTest #thirtyMinutesTimeWrap stamp: 'GR 11/30/2020 20:36:07'!
thirtyMinutesTimeWrap
	
	clock := WarpedClock new.!

Object subclass: #Clock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Clock category: 'TusLibros' stamp: 'GR 11/30/2020 20:36:14'!
Object subclass: #Clock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Clock subclass: #RealTimeClock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RealTimeClock category: 'TusLibros' stamp: 'GR 11/30/2020 20:36:20'!
Clock subclass: #RealTimeClock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Clock subclass: #WarpedClock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #WarpedClock category: 'TusLibros' stamp: 'GR 11/30/2020 20:36:27'!
Clock subclass: #WarpedClock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RESTInterfaceTest category: 'TusLibros' stamp: 'GR 11/30/2020 20:37:06'!
TestCase subclass: #RESTInterfaceTest
	instanceVariableNames: 'testObjectsFactory clock interface2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:37:19' prior: 50886245!
test12CanNotAddToCartIf30MinutesPassedSinceLastOperation

	interface2 := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface2 createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self thirtyMinutesTimeWarp.
	
	self 
		should: [ interface2 addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RESTInterface cartTimeExceededErrorDescription = anError messageText.
			self deny: (interface2 isDefinedTheID: '1') ]
	
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:37:31' prior: 50886117!
test13CheckoutACartReturnsSaleID

	| interface |
	
	interface2 := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface2 createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface2 addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: '1' equals: (interface2 checkout: '1' withCCN: '4865642166849654' withCCED: August, 2021 withCCO: 'Matias Morales')
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:37:36' prior: 50886336!
test13CheckoutACartReturnsSaleID

	interface2 := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface2 createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface2 addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: '1' equals: (interface2 checkout: '1' withCCN: '4865642166849654' withCCED: August, 2021 withCCO: 'Matias Morales')
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:37:41' prior: 50885595!
test11CanNotCheckoutCartWithInvalidID

	
	
	interface2 := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface2 createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface2 addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self
		should: [ interface2 checkout: '4' withCreditCard: testObjectsFactory notExpiredCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidCartError.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:37:45' prior: 50886374!
test11CanNotCheckoutCartWithInvalidID

	interface2 := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface2 createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface2 addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self
		should: [ interface2 checkout: '4' withCreditCard: testObjectsFactory notExpiredCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidCartError.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:37:51' prior: 50885521!
test10CanNotListCartWithInvalidID

	
	
	interface2 := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface2 createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface2 addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self
		should: [ interface2 listCart: '4' ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidCartError.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:37:54' prior: 50886416!
test10CanNotListCartWithInvalidID

	interface2 := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface2 createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface2 addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self
		should: [ interface2 listCart: '4' ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidCartError.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:38:06' prior: 50885387!
test09CanListCartWithValidID

	interface2 := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface2 createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface2 addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: (Dictionary with: testObjectsFactory itemSellByTheStore->10 ) equals: (interface2 listCart: '1')
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:38:18' prior: 50885962!
test08CanListAnEmptyCart

	interface2 := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface2 createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self assert: Dictionary new equals: (interface2 listCart: '1')
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:38:24' prior: 50885930!
test07CanNotAddProductsToInvalidCart

	
	
	interface2 := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface2 createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self
		should: [ interface2 addToCart: '4' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10. ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidCartError. 
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:38:28' prior: 50886485!
test07CanNotAddProductsToInvalidCart

	interface2 := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface2 createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self
		should: [ interface2 addToCart: '4' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10. ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidCartError. 
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:38:34' prior: 50885994!
test06CanAddProductsToCartWithCartID

	
	
	interface2 := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface2 createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface2 addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self deny: (interface2 listCart: '1') isEmpty.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:38:37' prior: 50886521!
test06CanAddProductsToCartWithCartID

	interface2 := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface2 createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface2 addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self deny: (interface2 listCart: '1') isEmpty.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:38:44' prior: 50884652!
test05CartIsCreatedAndSaved

	interface2 := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	interface2 createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self assert: (interface2 isDefinedTheID: '1').! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:38:51' prior: 50884635!
test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach

	interface2 := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	self assert: '1' equals: (interface2 createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').
	self assert: '2' equals: (interface2 createCartWithUser: 'ortoPilot' andPassword: 'ilovemusic').! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:38:58' prior: 50884620!
test03CanNotCreateCartWithValidUsernameButInvalidPassword

	interface2 := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	self
		should: [ interface2 createCartWithUser: 'Crocken321' andPassword: 'elMatiPiola321' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidUserError! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:39:04' prior: 50884605!
test02CanNotCreateCartWithInvalidUsername

	interface2 := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	self
		should: [ interface2 createCartWithUser: 'CheckPoint' andPassword: 'elMatiPiola321' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidUserError! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:39:10' prior: 50884575!
test01CreateCartWithValidUsernameAndPasswordReturnsCartID

	interface2 := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	self assert: '1' equals: (interface2 createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:39:16' prior: 50886613!
test01CreateCartWithValidUsernameAndPasswordReturnsCartID

	self assert: '1' equals: (interface2 createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:39:19' prior: 50886172 overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.
	
	interface2 := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	clock := RealTimeClock new.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:39:27' prior: 50886598!
test02CanNotCreateCartWithInvalidUsername

	self
		should: [ interface2 createCartWithUser: 'CheckPoint' andPassword: 'elMatiPiola321' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidUserError! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:39:31' prior: 50886583!
test03CanNotCreateCartWithValidUsernameButInvalidPassword

	self
		should: [ interface2 createCartWithUser: 'Crocken321' andPassword: 'elMatiPiola321' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidUserError! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:39:35' prior: 50886566!
test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach

	self assert: '1' equals: (interface2 createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').
	self assert: '2' equals: (interface2 createCartWithUser: 'ortoPilot' andPassword: 'ilovemusic').! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:39:39' prior: 50886553!
test05CartIsCreatedAndSaved

	interface2 createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self assert: (interface2 isDefinedTheID: '1').! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:39:42' prior: 50886537!
test06CanAddProductsToCartWithCartID

	interface2 createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface2 addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self deny: (interface2 listCart: '1') isEmpty.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:39:46' prior: 50886503!
test07CanNotAddProductsToInvalidCart

	interface2 createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self
		should: [ interface2 addToCart: '4' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10. ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidCartError. 
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:39:51' prior: 50886472!
test08CanListAnEmptyCart

	interface2 createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self assert: Dictionary new equals: (interface2 listCart: '1')
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:39:55' prior: 50886454!
test09CanListCartWithValidID

	interface2 createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface2 addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: (Dictionary with: testObjectsFactory itemSellByTheStore->10 ) equals: (interface2 listCart: '1')
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:39:59' prior: 50886435!
test10CanNotListCartWithInvalidID

	interface2 createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface2 addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self
		should: [ interface2 listCart: '4' ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidCartError.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:40:02' prior: 50886395!
test11CanNotCheckoutCartWithInvalidID

	interface2 createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface2 addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self
		should: [ interface2 checkout: '4' withCreditCard: testObjectsFactory notExpiredCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidCartError.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:40:06' prior: 50886313!
test12CanNotAddToCartIf30MinutesPassedSinceLastOperation

	interface2 createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self thirtyMinutesTimeWarp.
	
	self 
		should: [ interface2 addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RESTInterface cartTimeExceededErrorDescription = anError messageText.
			self deny: (interface2 isDefinedTheID: '1') ]
	
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:40:09' prior: 50886355!
test13CheckoutACartReturnsSaleID

	interface2 createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface2 addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: '1' equals: (interface2 checkout: '1' withCCN: '4865642166849654' withCCED: August, 2021 withCCO: 'Matias Morales')
	
	! !

!classDefinition: #RESTInterfaceTest category: 'TusLibros' stamp: 'GR 11/30/2020 20:40:18'!
TestCase subclass: #RESTInterfaceTest
	instanceVariableNames: 'testObjectsFactory clock interface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:40:18' prior: 50886657!
test03CanNotCreateCartWithValidUsernameButInvalidPassword

	self
		should: [ interface createCartWithUser: 'Crocken321' andPassword: 'elMatiPiola321' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidUserError! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:40:18' prior: 50886792!
test13CheckoutACartReturnsSaleID

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: '1' equals: (interface checkout: '1' withCCN: '4865642166849654' withCCED: August, 2021 withCCO: 'Matias Morales')
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:40:18' prior: 50886702!
test07CanNotAddProductsToInvalidCart

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self
		should: [ interface addToCart: '4' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10. ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidCartError. 
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:40:18' prior: 50886636 overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog.
	
	clock := RealTimeClock new.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:40:18' prior: 50886668!
test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach

	self assert: '1' equals: (interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').
	self assert: '2' equals: (interface createCartWithUser: 'ortoPilot' andPassword: 'ilovemusic').! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:40:18' prior: 50886626!
test01CreateCartWithValidUsernameAndPasswordReturnsCartID

	self assert: '1' equals: (interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas').! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:40:18' prior: 50886740!
test10CanNotListCartWithInvalidID

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self
		should: [ interface listCart: '4' ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidCartError.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:40:18' prior: 50886755!
test11CanNotCheckoutCartWithInvalidID

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self
		should: [ interface checkout: '4' withCreditCard: testObjectsFactory notExpiredCreditCard ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidCartError.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:40:18' prior: 50886726!
test09CanListCartWithValidID

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: (Dictionary with: testObjectsFactory itemSellByTheStore->10 ) equals: (interface listCart: '1')
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:40:18' prior: 50886772!
test12CanNotAddToCartIf30MinutesPassedSinceLastOperation

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self thirtyMinutesTimeWarp.
	
	self 
		should: [ interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RESTInterface cartTimeExceededErrorDescription = anError messageText.
			self deny: (interface isDefinedTheID: '1') ]
	
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:40:18' prior: 50886646!
test02CanNotCreateCartWithInvalidUsername

	self
		should: [ interface createCartWithUser: 'CheckPoint' andPassword: 'elMatiPiola321' ]
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidUserError! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:40:18' prior: 50886681!
test05CartIsCreatedAndSaved

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self assert: (interface isDefinedTheID: '1').! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:40:18' prior: 50886716!
test08CanListAnEmptyCart

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self assert: Dictionary new equals: (interface listCart: '1')
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:40:18' prior: 50886690!
test06CanAddProductsToCartWithCartID

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self deny: (interface listCart: '1') isEmpty.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:40:44' prior: 50886856 overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog withMerchantProcessor: self withClock: self.
	
	clock := RealTimeClock new.! !
!RESTInterface class methodsFor: 'instance creation' stamp: 'GR 11/30/2020 20:41:49'!
withUserList: aUserList andCatalog: aCatalog withMerchantProcessor: aMerchantProcessor  
	
	^self new initializeWithUserList: aUserList andCatalog: aCatalog ! !

!methodRemoval: RESTInterface class #withUserList:andCatalog: stamp: 'GR 11/30/2020 20:41:49'!
withUserList: aUserList andCatalog: aCatalog 
	
	^self new initializeWithUserList: aUserList andCatalog: aCatalog !
!RESTInterface class methodsFor: 'instance creation' stamp: 'GR 11/30/2020 20:42:06'!
withUserList: aUserList andCatalog: aCatalog withMerchantProcessor: aMerchantProcessor withClock: aClock   
	
	^self new initializeWithUserList: aUserList andCatalog: aCatalog ! !

!methodRemoval: RESTInterface class #withUserList:andCatalog:withMerchantProcessor: stamp: 'GR 11/30/2020 20:42:06'!
withUserList: aUserList andCatalog: aCatalog withMerchantProcessor: aMerchantProcessor  
	
	^self new initializeWithUserList: aUserList andCatalog: aCatalog !
!RESTInterface methodsFor: 'initialization' stamp: 'GR 11/30/2020 20:42:43'!
initializeWithUserList: aUserList andCatalog: aCatalog withMerchantProcessor: aMerchantProcessor  
	
	userList := aUserList.
	catalog := aCatalog.
	carts := Dictionary new.
	nextCartID := 0.! !
!RESTInterface class methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:42:43' prior: 50887023!
withUserList: aUserList andCatalog: aCatalog withMerchantProcessor: aMerchantProcessor withClock: aClock   
	
	^self new initializeWithUserList: aUserList andCatalog: aCatalog withMerchantProcessor: aMerchantProcessor ! !

!methodRemoval: RESTInterface #initializeWithUserList:andCatalog: stamp: 'GR 11/30/2020 20:42:43'!
initializeWithUserList: aUserList andCatalog: aCatalog 
	
	userList := aUserList.
	catalog := aCatalog.
	carts := Dictionary new.
	nextCartID := 0.!
!RESTInterface methodsFor: 'initialization' stamp: 'GR 11/30/2020 20:43:07'!
initializeWithUserList: aUserList andCatalog: aCatalog withMerchantProcessor: aMerchantProcessor withClock: aClock   
	
	userList := aUserList.
	catalog := aCatalog.
	carts := Dictionary new.
	nextCartID := 0.! !
!RESTInterface class methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:43:07' prior: 50887050!
withUserList: aUserList andCatalog: aCatalog withMerchantProcessor: aMerchantProcessor withClock: aClock   
	
	^self new initializeWithUserList: aUserList andCatalog: aCatalog withMerchantProcessor: aMerchantProcessor withClock: aClock ! !

!methodRemoval: RESTInterface #initializeWithUserList:andCatalog:withMerchantProcessor: stamp: 'GR 11/30/2020 20:43:07'!
initializeWithUserList: aUserList andCatalog: aCatalog withMerchantProcessor: aMerchantProcessor  
	
	userList := aUserList.
	catalog := aCatalog.
	carts := Dictionary new.
	nextCartID := 0.!

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 20:43:31'!
FAILURE!

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'GR 11/30/2020 20:46:14'!
Object subclass: #RESTInterface
	instanceVariableNames: 'userList nextCartID catalog carts salesBook clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/30/2020 20:46:10' prior: 50884981!
addToCart: aCartID theProduct: aProduct withAmount: aProductAmount

	(clock now - (carts at: aCartID) at: 3 ) >= 30 minutes ifTrue: [ self error: self class cartTimeExceededErrorDescription ].
 
	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartError ].
	
	(carts at: aCartID) add: aProductAmount of: aProduct.! !

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 20:46:21'!
ERROR!
!RESTInterface methodsFor: 'initialization' stamp: 'GR 11/30/2020 20:47:03' prior: 50887068!
initializeWithUserList: aUserList andCatalog: aCatalog withMerchantProcessor: aMerchantProcessor withClock: aClock   
	
	userList := aUserList.
	catalog := aCatalog.
	carts := Dictionary new.
	nextCartID := 0.
	clock := aClock.! !

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 20:47:25'!
ERROR!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:47:38'!
now
	self shouldBeImplemented.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:48:07' prior: 50887143!
now
	
	^ clock now.! !

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 20:48:10'!
ERROR!
!WarpedClock methodsFor: 'time' stamp: 'GR 11/30/2020 20:48:34'!
now
	self shouldBeImplemented.! !
!WarpedClock methodsFor: 'time' stamp: 'GR 11/30/2020 20:48:51' prior: 50887155!
now
	
	^ DateAndTime now + 30 minutes! !

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 20:48:54'!
ERROR!
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/30/2020 20:49:11' prior: 50887111!
addToCart: aCartID theProduct: aProduct withAmount: aProductAmount

	(clock now - ((carts at: aCartID) at: 3) ) >= 30 minutes ifTrue: [ self error: self class cartTimeExceededErrorDescription ].
 
	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartError ].
	
	(carts at: aCartID) add: aProductAmount of: aProduct.! !

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 20:49:16'!
ERROR!
!RESTInterface class methodsFor: 'error handling' stamp: 'GR 11/30/2020 20:49:39'!
cartTimeExceededErrorDescription
	self shouldBeImplemented.! !
!RESTInterface class methodsFor: 'error handling' stamp: 'GR 11/30/2020 20:49:52' prior: 50887186!
cartTimeExceededErrorDescription
	
	^ 'Cart time exceeded'! !

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 20:49:54'!
FAILURE!

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 20:50:26'!
FAILURE!
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/30/2020 20:51:31' prior: 50884737!
createCartWithUser: aUsername andPassword: aPassword 
	
	| ID |
	
	(userList includesKey: aUsername) ifFalse: [ self error: self class invalidUserError ].
	
	(userList at: aUsername) = aPassword ifFalse: [ self error: self class invalidUserError ].
	
	ID := self giveCartID.
	
	carts add: ID->( OrderedCollection with: (Cart acceptingItemsOf: catalog) with: aUsername with: DateAndTime now).
	
	^ ID! !

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 20:52:13'!
FAILURE!
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/30/2020 20:53:39' prior: 50887168!
addToCart: aCartID theProduct: aProduct withAmount: aProductAmount

	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartError ].
	
	(clock now - ((carts at: aCartID) at: 3) ) >= 30 minutes ifTrue: [ 
		carts remove: aCartID.
		self error: self class cartTimeExceededErrorDescription ].
	
	(carts at: aCartID) add: aProductAmount of: aProduct.! !

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 20:53:44'!
FAILURE!

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 20:54:01'!
FAILURE!

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 20:54:16'!
FAILURE!
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/30/2020 20:56:22' prior: 50887225!
addToCart: aCartID theProduct: aProduct withAmount: aProductAmount

	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartError ].
	
	(clock now - ((carts at: aCartID) at: 3) ) >= 30 minutes ifTrue: [ 
		carts removeKey: aCartID.
		self error: self class cartTimeExceededErrorDescription ].
	
	(carts at: aCartID) add: aProductAmount of: aProduct.! !

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 20:56:23'!
PASSED!

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 20:56:25'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/30/2020 20:56:25'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 11/30/2020 20:56:25'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/30/2020 20:56:25'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 11/30/2020 20:56:25'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 11/30/2020 20:56:25'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 11/30/2020 20:56:25'!
ERROR!

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 11/30/2020 20:56:25'!
PASSED!

!testRun: #RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 11/30/2020 20:56:25'!
ERROR!

!testRun: #RESTInterfaceTest #test09CanListCartWithValidID stamp: 'GR 11/30/2020 20:56:25'!
ERROR!

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 11/30/2020 20:56:25'!
ERROR!

!testRun: #RESTInterfaceTest #test11CanNotCheckoutCartWithInvalidID stamp: 'GR 11/30/2020 20:56:25'!
ERROR!

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 20:56:25'!
PASSED!

!testRun: #RESTInterfaceTest #test13CheckoutACartReturnsSaleID stamp: 'GR 11/30/2020 20:56:25'!
ERROR!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 11/30/2020 20:57:51'!
ERROR!
!RealTimeClock methodsFor: 'time' stamp: 'GR 11/30/2020 20:57:59'!
now
	self shouldBeImplemented.! !
!RealTimeClock methodsFor: 'time' stamp: 'GR 11/30/2020 20:58:17' prior: 50887324!
now
	
	^ DateAndTime now.! !

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 11/30/2020 20:58:18'!
ERROR!
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/30/2020 20:59:22' prior: 50887252!
addToCart: aCartID theProduct: aProduct withAmount: aProductAmount

	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartError ].
	
	(clock now - ((carts at: aCartID) at: 3) ) >= 30 minutes ifTrue: [ 
		carts removeKey: aCartID.
		self error: self class cartTimeExceededErrorDescription ].
	
	((carts at: aCartID) at: 1) add: aProductAmount of: aProduct.! !

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 11/30/2020 20:59:24'!
ERROR!
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/30/2020 20:59:37' prior: 50885469!
listCart: aCartID 
	
	| cart |
	
	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartError ].
	
	cart := (carts at: aCartID) at: 1.
	
	^ cart listCart.! !

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 11/30/2020 20:59:38'!
PASSED!

!testRun: #RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 11/30/2020 20:59:40'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListCartWithValidID stamp: 'GR 11/30/2020 20:59:40'!
PASSED!

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 11/30/2020 20:59:41'!
PASSED!

!testRun: #RESTInterfaceTest #test11CanNotCheckoutCartWithInvalidID stamp: 'GR 11/30/2020 20:59:41'!
PASSED!

!testRun: #RESTInterfaceTest #test13CheckoutACartReturnsSaleID stamp: 'GR 11/30/2020 20:59:42'!
ERROR!
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/30/2020 21:00:05' prior: 50886108!
checkout: aCartID withCCN: aCCN withCCED: aCCED withCCO: aCCO 
	
	| creditCard |
	
	creditCard := CreditCard expiringOn: (Month month: aCCED month year: aCCED year).! !

!testRun: #RESTInterfaceTest #test13CheckoutACartReturnsSaleID stamp: 'GR 11/30/2020 21:00:10'!
ERROR!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 21:01:24' prior: 50886826!
test13CheckoutACartReturnsSaleID

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: '1' equals: (interface checkout: '1' withCCN: '4865642166849654' withCCED: (Month month: August year: 2021 ) withCCO: 'Matias Morales')
	
	! !

!testRun: #RESTInterfaceTest #test13CheckoutACartReturnsSaleID stamp: 'GR 11/30/2020 21:01:30'!
ERROR!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 20:40:18' prior: 50887394!
test13CheckoutACartReturnsSaleID

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: '1' equals: (interface checkout: '1' withCCN: '4865642166849654' withCCED: August, 2021 withCCO: 'Matias Morales')
	
	! !

!testRun: #RESTInterfaceTest #test13CheckoutACartReturnsSaleID stamp: 'GR 11/30/2020 21:02:05'!
ERROR!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 21:03:10' prior: 50887413!
test13CheckoutACartReturnsSaleID

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: '1' equals: (interface checkout: '1' withCCN: '4865642166849654' withCCED: (Month month: 8 year: 2021) withCCO: 'Matias Morales')
	
	! !

!testRun: #RESTInterfaceTest #test13CheckoutACartReturnsSaleID stamp: 'GR 11/30/2020 21:03:12'!
ERROR!
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/30/2020 21:03:43' prior: 50887382!
checkout: aCartID withCCN: aCCN withCCED: aCCED withCCO: aCCO 
	
	| creditCard |
	
	creditCard := CreditCard expiringOn: aCCED.! !

!testRun: #RESTInterfaceTest #test13CheckoutACartReturnsSaleID stamp: 'GR 11/30/2020 21:03:46'!
FAILURE!

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 21:04:04'!
PASSED!
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/30/2020 21:10:19' prior: 50887336!
addToCart: aCartID theProduct: aProduct withAmount: aProductAmount

	| cartLastTimeUsed |
	
	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartError ].
	
	cartLastTimeUsed := self lastTimeUsed: aCartID.
	
	(clock now - cartLastTimeUsed ) >= 30 minutes ifTrue: [ 
		carts removeKey: aCartID.
		self error: self class cartTimeExceededErrorDescription ].
	
	((carts at: aCartID) at: 1) add: aProductAmount of: aProduct.! !
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/30/2020 21:11:36' prior: 50887464!
addToCart: aCartID theProduct: aProduct withAmount: aProductAmount

	| cartLastTimeUsed |
	
	cartLastTimeUsed := self lastTimeUsed: aCartID.
	
	(clock now - cartLastTimeUsed ) >= 30 minutes ifTrue: [ 
		carts removeKey: aCartID.
		self error: self class cartTimeExceededErrorDescription ].
	
	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartError ].
	
	((carts at: aCartID) at: 1) add: aProductAmount of: aProduct.! !
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/30/2020 21:11:58'!
checkIfCartTimeExceeded: aCartID

	| cartLastTimeUsed |
	
	cartLastTimeUsed := self lastTimeUsed: aCartID.
	
	(clock now - cartLastTimeUsed ) >= 30 minutes ifTrue: [ 
		carts removeKey: aCartID.
		self error: self class cartTimeExceededErrorDescription ]! !
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/30/2020 21:11:58' prior: 50887481!
addToCart: aCartID theProduct: aProduct withAmount: aProductAmount

	self checkIfCartTimeExceeded: aCartID.
	
	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartError ].
	
	((carts at: aCartID) at: 1) add: aProductAmount of: aProduct.! !
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/30/2020 21:12:05' prior: 50887509!
addToCart: aCartID theProduct: aProduct withAmount: aProductAmount

	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartError ].
	
	self checkIfCartTimeExceeded: aCartID.
	
	((carts at: aCartID) at: 1) add: aProductAmount of: aProduct.! !

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 11/30/2020 21:13:00'!
ERROR!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 11/30/2020 21:13:00'!
ERROR!
!RESTInterface methodsFor: 'accessing' stamp: 'GR 11/30/2020 21:13:09'!
lastTimeUsed: aString 
	self shouldBeImplemented.! !
!RESTInterface methodsFor: 'accessing' stamp: 'GR 11/30/2020 21:13:33' prior: 50887538!
lastTimeUsed: aCartID 
	
	^ (carts at: aCartID) at: 3! !

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 11/30/2020 21:13:34'!
PASSED!
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/30/2020 21:14:13'!
cartWithID: aCartID

	^ (carts at: aCartID) at: 1! !
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/30/2020 21:14:13' prior: 50887520!
addToCart: aCartID theProduct: aProduct withAmount: aProductAmount

	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartError ].
	
	self checkIfCartTimeExceeded: aCartID.
	
	(self cartWithID: aCartID) add: aProductAmount of: aProduct.! !

!methodRemoval: RESTInterface #checkout:withCreditCard: stamp: 'GR 11/30/2020 21:14:52'!
checkout: aCartID withCreditCard: aCreditCard 
	
	(carts includesKey: aCartID) ifFalse: [ self error: self class invalidCartError ]!
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/30/2020 21:15:01' prior: 50887449!
checkout: aCartID withCCN: aCCN withCCED: aCCED withCCO: aCCO 
	
	| creditCard |
	
	(carts includesKey: aCartID) ifFalse: [ self error: self class invalidCartError ].
	
	creditCard := CreditCard expiringOn: aCCED.! !
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/30/2020 21:16:19'!
verificateUsername: aUsername andPassword: aPassword

	(userList includesKey: aUsername) ifFalse: [ self error: self class invalidUserError ].
	
	(userList at: aUsername) = aPassword ifFalse: [ self error: self class invalidUserError ]! !
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/30/2020 21:16:19' prior: 50887205!
createCartWithUser: aUsername andPassword: aPassword 
	
	| ID |
	
	self verificateUsername: aUsername andPassword: aPassword.
	
	ID := self giveCartID.
	
	carts add: ID->( OrderedCollection with: (Cart acceptingItemsOf: catalog) with: aUsername with: DateAndTime now).
	
	^ ID! !
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/30/2020 21:16:46' prior: 50887354!
listCart: aCartID 
	
	| cart |
	
	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartError ].
	
	cart := self cartWithID: aCartID.
	
	^ cart listCart.! !

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/30/2020 21:17:23'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/30/2020 21:17:25'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 11/30/2020 21:17:26'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 11/30/2020 21:17:27'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 11/30/2020 21:17:28'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 11/30/2020 21:17:29'!
PASSED!

!testRun: #RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 11/30/2020 21:17:30'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListCartWithValidID stamp: 'GR 11/30/2020 21:17:31'!
PASSED!

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 11/30/2020 21:17:32'!
PASSED!

!testRun: #RESTInterfaceTest #test11CanNotCheckoutCartWithInvalidID stamp: 'GR 11/30/2020 21:17:33'!
ERROR!

!testRun: #RESTInterfaceTest #test11CanNotCheckoutCartWithInvalidID stamp: 'GR 11/30/2020 21:17:33'!
ERROR!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 21:18:20' prior: 50886903!
test11CanNotCheckoutCartWithInvalidID

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self
		should: [ interface checkout: '4' withCCN: '4865642166849654' withCCED: (Month month: 8 year: 2021) withCCO: 'Matias Morales' ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidCartError.! !

!testRun: #RESTInterfaceTest #test11CanNotCheckoutCartWithInvalidID stamp: 'GR 11/30/2020 21:18:21'!
PASSED!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 21:18:38'!
test12CanNotListCartIf30MinutesPassedSinceLastOperation

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self thirtyMinutesTimeWarp.
	
	self 
		should: [ interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RESTInterface cartTimeExceededErrorDescription = anError messageText.
			self deny: (interface isDefinedTheID: '1') ]
	
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 21:18:45'!
test13CanNotListCartIf30MinutesPassedSinceLastOperation

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self thirtyMinutesTimeWarp.
	
	self 
		should: [ interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RESTInterface cartTimeExceededErrorDescription = anError messageText.
			self deny: (interface isDefinedTheID: '1') ]
	
	
	! !

!methodRemoval: RESTInterfaceTest #test12CanNotListCartIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 21:18:45'!
test12CanNotListCartIf30MinutesPassedSinceLastOperation

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self thirtyMinutesTimeWarp.
	
	self 
		should: [ interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RESTInterface cartTimeExceededErrorDescription = anError messageText.
			self deny: (interface isDefinedTheID: '1') ]
	
	
	!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 21:19:49' prior: 50887695!
test13CanNotListCartIf30MinutesPassedSinceLastOperation

	| cartID |
	
	cartID := interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self thirtyMinutesTimeWarp.
	
	self 
		should: [ interface listCart: cartID ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RESTInterface cartTimeExceededErrorDescription = anError messageText.
			self deny: (interface isDefinedTheID: cartID) ]
	
	
	! !

!testRun: #RESTInterfaceTest #test13CanNotListCartIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 21:19:55'!
FAILURE!
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/30/2020 21:20:16' prior: 50887607!
listCart: aCartID 
	
	| cart |
	
	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartError ].
	
	self checkIfCartTimeExceeded: aCartID.
	
	cart := self cartWithID: aCartID.
	
	^ cart listCart.! !

!testRun: #RESTInterfaceTest #test13CanNotListCartIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 21:20:17'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/30/2020 21:20:17'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 11/30/2020 21:20:17'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/30/2020 21:20:17'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 11/30/2020 21:20:17'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 11/30/2020 21:20:17'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 11/30/2020 21:20:17'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 11/30/2020 21:20:17'!
PASSED!

!testRun: #RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 11/30/2020 21:20:17'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListCartWithValidID stamp: 'GR 11/30/2020 21:20:17'!
PASSED!

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 11/30/2020 21:20:17'!
PASSED!

!testRun: #RESTInterfaceTest #test11CanNotCheckoutCartWithInvalidID stamp: 'GR 11/30/2020 21:20:17'!
PASSED!

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 21:20:17'!
PASSED!

!testRun: #RESTInterfaceTest #test13CanNotListCartIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 21:20:17'!
PASSED!

!testRun: #RESTInterfaceTest #test13CheckoutACartReturnsSaleID stamp: 'GR 11/30/2020 21:20:17'!
FAILURE!

!testRun: #RESTInterfaceTest #test13CheckoutACartReturnsSaleID stamp: 'GR 11/30/2020 21:20:17'!
FAILURE!

!testRun: #RESTInterfaceTest #test13CanNotListCartIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 21:20:28'!
PASSED!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 21:21:12'!
test13CanNotCheckoutIf30MinutesPassedSinceLastOperation

	| cartID |
	
	cartID := interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self thirtyMinutesTimeWarp.
	
	self 
		should: [ interface listCart: cartID ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RESTInterface cartTimeExceededErrorDescription = anError messageText.
			self deny: (interface isDefinedTheID: cartID) ]
	
	
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 21:21:19'!
test14CanNotCheckoutIf30MinutesPassedSinceLastOperation

	| cartID |
	
	cartID := interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self thirtyMinutesTimeWarp.
	
	self 
		should: [ interface listCart: cartID ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RESTInterface cartTimeExceededErrorDescription = anError messageText.
			self deny: (interface isDefinedTheID: cartID) ]
	
	
	! !

!methodRemoval: RESTInterfaceTest #test13CanNotCheckoutIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 21:21:19'!
test13CanNotCheckoutIf30MinutesPassedSinceLastOperation

	| cartID |
	
	cartID := interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self thirtyMinutesTimeWarp.
	
	self 
		should: [ interface listCart: cartID ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RESTInterface cartTimeExceededErrorDescription = anError messageText.
			self deny: (interface isDefinedTheID: cartID) ]
	
	
	!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 11/30/2020 21:21:36' prior: 50887846!
test14CanNotCheckoutIf30MinutesPassedSinceLastOperation

	| cartID |
	
	cartID := interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self thirtyMinutesTimeWarp.
	
	self 
		should: [ interface checkout: cartID withCCN: '4865642166849654' withCCED: (Month month: 8 year: 2021) withCCO: 'Matias Morales' ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RESTInterface cartTimeExceededErrorDescription = anError messageText.
			self deny: (interface isDefinedTheID: cartID) ]
	
	
	! !

!testRun: #RESTInterfaceTest #test14CanNotCheckoutIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 21:21:41'!
FAILURE!
!RESTInterface methodsFor: 'operations' stamp: 'GR 11/30/2020 21:21:59' prior: 50887574!
checkout: aCartID withCCN: aCCN withCCED: aCCED withCCO: aCCO 
	
	| creditCard |
	
	(carts includesKey: aCartID) ifFalse: [ self error: self class invalidCartError ].
	
	self checkIfCartTimeExceeded: aCartID.
	
	creditCard := CreditCard expiringOn: aCCED.! !

!testRun: #RESTInterfaceTest #test14CanNotCheckoutIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 21:22:01'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 11/30/2020 21:22:01'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 11/30/2020 21:22:01'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 11/30/2020 21:22:01'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 11/30/2020 21:22:01'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 11/30/2020 21:22:01'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 11/30/2020 21:22:01'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 11/30/2020 21:22:01'!
PASSED!

!testRun: #RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 11/30/2020 21:22:01'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListCartWithValidID stamp: 'GR 11/30/2020 21:22:01'!
PASSED!

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 11/30/2020 21:22:01'!
PASSED!

!testRun: #RESTInterfaceTest #test11CanNotCheckoutCartWithInvalidID stamp: 'GR 11/30/2020 21:22:01'!
PASSED!

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 21:22:01'!
PASSED!

!testRun: #RESTInterfaceTest #test13CanNotListCartIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 21:22:01'!
PASSED!

!testRun: #RESTInterfaceTest #test13CheckoutACartReturnsSaleID stamp: 'GR 11/30/2020 21:22:01'!
FAILURE!

!testRun: #RESTInterfaceTest #test14CanNotCheckoutIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 21:22:01'!
PASSED!

!testRun: #RESTInterfaceTest #test13CheckoutACartReturnsSaleID stamp: 'GR 11/30/2020 21:22:01'!
FAILURE!

!testRun: #RESTInterfaceTest #test14CanNotCheckoutIf30MinutesPassedSinceLastOperation stamp: 'GR 11/30/2020 21:22:05'!
PASSED!

----QUIT----(30 November 2020 21:22:47) CuisUniversity-4384.image priorSource: 17728762!

----STARTUP---- (1 December 2020 15:15:32) as /home/grosinov/linux64/CuisUniversity-4384.image!


!classDefinition: #RESTInterfaceTest category: 'TusLibros' stamp: 'GR 12/1/2020 15:16:23'!
TestCase subclass: #RESTInterfaceTest
	instanceVariableNames: 'testObjectsFactory clock interface debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 15:16:22' prior: 50886997 overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.
	
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	interface := RESTInterface withUserList: testObjectsFactory userList andCatalog: testObjectsFactory defaultCatalog withMerchantProcessor: self withClock: self.
	
	clock := RealTimeClock new.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 15:16:58'!
test15CheckoutACartReturnsSaleID

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: '1' equals: (interface checkout: '1' withCCN: '4865642166849654' withCCED: (Month month: 8 year: 2021) withCCO: 'Matias Morales')
	
	! !

!methodRemoval: RESTInterfaceTest #test13CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 15:16:58'!
test13CheckoutACartReturnsSaleID

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: '1' equals: (interface checkout: '1' withCCN: '4865642166849654' withCCED: (Month month: 8 year: 2021) withCCO: 'Matias Morales')
	
	!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 15:17:03'!
FAILURE!

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'GR 12/1/2020 15:22:51'!
Object subclass: #RESTInterface
	instanceVariableNames: 'userList nextCartID catalog carts salesBook clock merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterface methodsFor: 'operations' stamp: 'GR 12/1/2020 15:22:48' prior: 50887908!
checkout: aCartID withCCN: aCCN withCCED: aCCED withCCO: aCCO 
	
	| creditCard cashier cart |
	
	(carts includesKey: aCartID) ifFalse: [ self error: self class invalidCartError ].
	
	self checkIfCartTimeExceeded: aCartID.
	
	cart := self cartWithID: aCartID.
	
	creditCard := CreditCard expiringOn: aCCED.
	
	cashier := Cashier 
			toCheckout: cart
			charging: creditCard 
			throught: merchantProcessor 
			on: clock now
			registeringOn: OrderedCollection new.
	
	cashier checkOut.
	
	^ cashier createSale ID.! !

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 15:22:54'!
ERROR!
!RESTInterface methodsFor: 'initialization' stamp: 'GR 12/1/2020 15:23:33' prior: 50887129!
initializeWithUserList: aUserList andCatalog: aCatalog withMerchantProcessor: aMerchantProcessor withClock: aClock   
	
	userList := aUserList.
	catalog := aCatalog.
	carts := Dictionary new.
	nextCartID := 0.
	clock := aClock.! !
!RESTInterface methodsFor: 'initialization' stamp: 'GR 12/1/2020 15:23:56' prior: 50888079!
initializeWithUserList: aUserList andCatalog: aCatalog withMerchantProcessor: aMerchantProcessor withClock: aClock   
	
	userList := aUserList.
	catalog := aCatalog.
	carts := Dictionary new.
	nextCartID := 0.
	clock := aClock.
	merchantProcessor := aMerchantProcessor.! !

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 15:24:01'!
ERROR!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 15:24:09'!
ERROR!
!RESTInterfaceTest methodsFor: 'merchantProcessor' stamp: 'GR 12/1/2020 15:24:27'!
debit: aSmallInteger from: aCreditCard 
	self shouldBeImplemented.! !
!RESTInterfaceTest methodsFor: 'merchantProcessor' stamp: 'GR 12/1/2020 15:24:40' prior: 50888108!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard 
	! !

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 15:24:41'!
ERROR!
!Sale methodsFor: 'accessing' stamp: 'GR 12/1/2020 15:24:46'!
ID
	self shouldBeImplemented.! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'GR 12/1/2020 15:24:54'!
Object subclass: #Sale
	instanceVariableNames: 'total id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'accessing' stamp: 'GR 12/1/2020 15:24:53' prior: 50888123!
ID
	
	^ id! !
!RESTInterface methodsFor: 'operations' stamp: 'GR 12/1/2020 15:26:27' prior: 50888056!
checkout: aCartID withCCN: aCCN withCCED: aCCED withCCO: aCCO 
	
	| creditCard cashier cart saleID |
	
	(carts includesKey: aCartID) ifFalse: [ self error: self class invalidCartError ].
	
	self checkIfCartTimeExceeded: aCartID.
	
	cart := self cartWithID: aCartID.
	
	creditCard := CreditCard expiringOn: aCCED.
	
	cashier := Cashier 
			toCheckout: cart
			charging: creditCard 
			throught: merchantProcessor 
			on: clock now
			registeringOn: OrderedCollection new.
	
	cashier checkOut.
	
	saleID := self getNextSaleID.
	
	^ cashier createSale ID.! !
!RESTInterface methodsFor: 'operations' stamp: 'GR 12/1/2020 15:26:54' prior: 50888137!
checkout: aCartID withCCN: aCCN withCCED: aCCED withCCO: aCCO 
	
	| creditCard cashier cart saleID |
	
	(carts includesKey: aCartID) ifFalse: [ self error: self class invalidCartError ].
	
	self checkIfCartTimeExceeded: aCartID.
	
	cart := self cartWithID: aCartID.
	
	creditCard := CreditCard expiringOn: aCCED.
	
	cashier := Cashier 
			toCheckout: cart
			charging: creditCard 
			throught: merchantProcessor 
			on: clock now
			registeringOn: OrderedCollection new.
	
	cashier checkOut.
	
	saleID := self getNextSaleID.
	
	^ cashier createSale: saleID.! !

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 15:26:58'!
ERROR!
!RESTInterface methodsFor: 'accessing' stamp: 'GR 12/1/2020 15:27:06'!
getNextSaleID
	self shouldBeImplemented.! !

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'GR 12/1/2020 15:27:38'!
Object subclass: #RESTInterface
	instanceVariableNames: 'userList nextCartID catalog carts salesBook clock merchantProcessor nextSaleID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterface methodsFor: 'accessing' stamp: 'GR 12/1/2020 15:27:36' prior: 50888181!
getNextSaleID
	
	nextSaleID := nextSaleID + 1.
	^nextSaleID asString! !

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 15:27:39'!
ERROR!
!RESTInterface methodsFor: 'initialization' stamp: 'GR 12/1/2020 15:28:05' prior: 50888090!
initializeWithUserList: aUserList andCatalog: aCatalog withMerchantProcessor: aMerchantProcessor withClock: aClock   
	
	userList := aUserList.
	catalog := aCatalog.
	carts := Dictionary new.
	nextCartID := 0.
	nextSaleID := 0.
	clock := aClock.
	merchantProcessor := aMerchantProcessor.! !

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'GR 12/1/2020 15:29:50'!
Object subclass: #RESTInterface
	instanceVariableNames: 'userList nextCartID catalog carts salesBook clock merchantProcessor nextSaleID nextID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterface methodsFor: 'initialization' stamp: 'GR 12/1/2020 15:29:48' prior: 50888204!
initializeWithUserList: aUserList andCatalog: aCatalog withMerchantProcessor: aMerchantProcessor withClock: aClock   
	
	userList := aUserList.
	catalog := aCatalog.
	carts := Dictionary new.
	nextID := 0.
	clock := aClock.
	merchantProcessor := aMerchantProcessor.! !

Object subclass: #RESTInterface
	instanceVariableNames: 'userList nextCartID catalog carts salesBook clock merchantProcessor nextSaleID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'GR 12/1/2020 15:30:20'!
Object subclass: #RESTInterface
	instanceVariableNames: 'userList nextCartID catalog carts salesBook clock merchantProcessor nextSaleID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'GR 12/1/2020 15:30:24'!
Object subclass: #RESTInterface
	instanceVariableNames: 'userList nextID catalog carts salesBook clock merchantProcessor nextSaleID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 15:30:24' prior: 50884767!
giveCartID

	nextID := nextID +1.
	^nextID asString! !

Object subclass: #RESTInterface
	instanceVariableNames: 'userList nextID catalog carts salesBook clock merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'GR 12/1/2020 15:30:27'!
Object subclass: #RESTInterface
	instanceVariableNames: 'userList nextID catalog carts salesBook clock merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterface methodsFor: 'operations' stamp: 'GR 12/1/2020 15:30:58' prior: 50888158!
checkout: aCartID withCCN: aCCN withCCED: aCCED withCCO: aCCO 
	
	| creditCard cashier cart saleID |
	
	(carts includesKey: aCartID) ifFalse: [ self error: self class invalidCartError ].
	
	self checkIfCartTimeExceeded: aCartID.
	
	cart := self cartWithID: aCartID.
	
	creditCard := CreditCard expiringOn: aCCED.
	
	cashier := Cashier 
			toCheckout: cart
			charging: creditCard 
			throught: merchantProcessor 
			on: clock now
			registeringOn: OrderedCollection new.
	
	cashier checkOut.
	
	saleID := self getNextID.
	
	^ cashier createSale: saleID.! !
!RESTInterface methodsFor: 'operations -- private' stamp: 'GR 12/1/2020 15:31:22'!
getNextID

	nextID := nextID +1.
	^nextID asString! !
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 15:31:22' prior: 50887595!
createCartWithUser: aUsername andPassword: aPassword 
	
	| ID |
	
	self verificateUsername: aUsername andPassword: aPassword.
	
	ID := self getNextID.
	
	carts add: ID->( OrderedCollection with: (Cart acceptingItemsOf: catalog) with: aUsername with: DateAndTime now).
	
	^ ID! !

!methodRemoval: RESTInterface #giveCartID stamp: 'GR 12/1/2020 15:31:22'!
giveCartID

	nextID := nextID +1.
	^nextID asString!

!methodRemoval: RESTInterface #getNextSaleID stamp: 'GR 12/1/2020 15:31:27'!
getNextSaleID
	
	nextSaleID := nextSaleID + 1.
	^nextSaleID asString!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListCartWithValidID stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #RESTInterfaceTest #test11CanNotCheckoutCartWithInvalidID stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #RESTInterfaceTest #test13CanNotListCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #RESTInterfaceTest #test14CanNotCheckoutIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 15:31:37'!
PASSED!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 15:31:37'!
ERROR!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 15:31:37'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 15:31:49'!
createSale: aString 
	self shouldBeImplemented.! !

!methodRemoval: Cashier #createSale: stamp: 'GR 12/1/2020 15:33:43'!
createSale: aString 
	self shouldBeImplemented.!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 15:35:06'!
ERROR!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 15:35:13'!
ERROR!
!RESTInterface methodsFor: 'operations' stamp: 'GR 12/1/2020 15:44:44' prior: 50888283!
checkout: aCartID withCCN: aCCN withCCED: aCCED withCCO: aCCO 
	
	| creditCard cashier cart |
	
	(carts includesKey: aCartID) ifFalse: [ self error: self class invalidCartError ].
	
	self checkIfCartTimeExceeded: aCartID.
	
	cart := self cartWithID: aCartID.
	
	creditCard := CreditCard expiringOn: aCCED.
	
	cashier := Cashier 
			toCheckout: cart
			charging: creditCard 
			throught: merchantProcessor 
			on: clock now
			registeringOn: OrderedCollection new.
	
	cashier checkOut.
	
	^ cashier getSaleID.! !

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 15:44:49'!
ERROR!
!Cashier methodsFor: 'accessing' stamp: 'GR 12/1/2020 15:44:59'!
getSaleID
	self shouldBeImplemented.! !
!Cashier methodsFor: 'accessing' stamp: 'GR 12/1/2020 15:45:13' prior: 50888467!
getSaleID
	
	^ salesBook last getID. ! !

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 15:45:17'!
ERROR!
!Sale methodsFor: 'accessing' stamp: 'GR 12/1/2020 15:45:26'!
getID
	self shouldBeImplemented.! !
!Sale methodsFor: 'accessing' stamp: 'GR 12/1/2020 15:45:30' prior: 50888478!
getID
	
	^ id.! !

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 15:45:32'!
FAILURE!
!Sale class methodsFor: 'instance creation' stamp: 'GR 12/1/2020 15:47:14' prior: 50883449!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal withID: self getNetxID. ! !

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 15:47:17'!
ERROR!
!Sale class methodsFor: 'instance creation' stamp: 'GR 12/1/2020 15:47:29' prior: 50888489!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal withID: self getNextID. ! !

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 15:47:30'!
ERROR!
!Sale class methodsFor: 'idGenerator' stamp: 'GR 12/1/2020 15:47:46'!
getNextID
	self shouldBeImplemented.! !

!classDefinition: 'Sale class' category: 'TusLibros' stamp: 'GR 12/1/2020 15:48:12'!
Sale class
	instanceVariableNames: 'nextID'!
!Sale class methodsFor: 'idGenerator' stamp: 'GR 12/1/2020 15:48:10' prior: 50888509!
getNextID
	
	nextID := nextID + 1.
	^ nextID.! !

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 15:48:13'!
ERROR!
!Sale class methodsFor: 'instance creation' stamp: 'GR 12/1/2020 15:49:49' prior: 50888499!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal withID: self getNextID. ! !
!Sale class methodsFor: 'idGenerator' stamp: 'GR 12/1/2020 15:49:55' prior: 50888518!
getNextID
	
	nextID ifNil: [ nextID :=0 ].
	nextID := nextID + 1.
	^ nextID.! !

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 15:50:00'!
ERROR!

!classDefinition: #Sale category: 'TusLibros' stamp: 'GR 12/1/2020 15:50:10'!
Object subclass: #Sale
	instanceVariableNames: 'total id renameMe1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'GR 12/1/2020 15:50:10'!
initializeTotal: aTotal withID: aRenameMe1 
	self shouldBeImplemented.
	total := aTotal.
	renameMe1 := aRenameMe1.! !
!Sale methodsFor: 'initialization' stamp: 'GR 12/1/2020 15:50:37' prior: 50888548!
initializeTotal: aTotal withID: anID 
	
	total := aTotal.
	renameMe1 := anID.! !

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 15:50:39'!
FAILURE!
!Sale methodsFor: 'initialization' stamp: 'GR 12/1/2020 15:51:11' prior: 50888555!
initializeTotal: aTotal withID: anID 
	
	total := aTotal.
	id := anID.! !

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 15:51:12'!
FAILURE!

salesBook!

Sale class
	instanceVariableNames: ''!

!classDefinition: 'Sale class' category: 'TusLibros' stamp: 'GR 12/1/2020 15:52:52'!
Sale class
	instanceVariableNames: ''!

!methodRemoval: Sale class #getNextID stamp: 'GR 12/1/2020 15:52:59'!
getNextID
	
	nextID ifNil: [ nextID :=0 ].
	nextID := nextID + 1.
	^ nextID.!
!Sale class methodsFor: 'instance creation' stamp: 'GR 12/1/2020 15:53:04' prior: 50888526!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal! !
!RESTInterface methodsFor: 'operations' stamp: 'GR 12/1/2020 15:26:27' prior: 50888445!
checkout: aCartID withCCN: aCCN withCCED: aCCED withCCO: aCCO 
	
	| creditCard cashier cart saleID |
	
	(carts includesKey: aCartID) ifFalse: [ self error: self class invalidCartError ].
	
	self checkIfCartTimeExceeded: aCartID.
	
	cart := self cartWithID: aCartID.
	
	creditCard := CreditCard expiringOn: aCCED.
	
	cashier := Cashier 
			toCheckout: cart
			charging: creditCard 
			throught: merchantProcessor 
			on: clock now
			registeringOn: OrderedCollection new.
	
	cashier checkOut.
	
	saleID := self getNextSaleID.
	
	^ cashier createSale ID.! !
!RESTInterface methodsFor: 'operations' stamp: 'GR 12/1/2020 15:57:48' prior: 50888589!
checkout: aCartID withCCN: aCCN withCCED: aCCED withCCO: aCCO 
	
	| creditCard cashier cart saleID |
	
	(carts includesKey: aCartID) ifFalse: [ self error: self class invalidCartError ].
	
	self checkIfCartTimeExceeded: aCartID.
	
	cart := self cartWithID: aCartID.
	
	creditCard := CreditCard expiringOn: aCCED.
	
	cashier := Cashier 
			toCheckout: cart
			charging: creditCard 
			throught: merchantProcessor 
			on: clock now
			registeringOn: OrderedCollection new.
	
	saleID := self getNextID.
	
	cashier checkOut.
	
	
	
	^ cashier createSale ID.! !
!RESTInterface methodsFor: 'operations' stamp: 'GR 12/1/2020 15:58:23' prior: 50888610!
checkout: aCartID withCCN: aCCN withCCED: aCCED withCCO: aCCO 
	
	| creditCard cashier cart saleID |
	
	(carts includesKey: aCartID) ifFalse: [ self error: self class invalidCartError ].
	
	self checkIfCartTimeExceeded: aCartID.
	
	cart := self cartWithID: aCartID.
	
	creditCard := CreditCard expiringOn: aCCED.
	
	cashier := Cashier 
			toCheckout: cart
			charging: creditCard 
			throught: merchantProcessor 
			on: clock now
			registeringOn: OrderedCollection new.
	
	saleID := self getNextID.
	
	cashier setSaleID: saleID.
	
	cashier checkOut.
	
	^ cashier saleID.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListCartWithValidID stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #RESTInterfaceTest #test11CanNotCheckoutCartWithInvalidID stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #RESTInterfaceTest #test13CanNotListCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #RESTInterfaceTest #test14CanNotCheckoutIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 15:58:26'!
PASSED!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 15:58:26'!
ERROR!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 15:58:26'!
ERROR!
!Cashier methodsFor: 'converting' stamp: 'GR 12/1/2020 15:59:40'!
setSaleID: aString 
	self shouldBeImplemented.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'GR 12/1/2020 16:00:00'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total nextSaleID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'converting' stamp: 'GR 12/1/2020 15:59:59' prior: 50888754!
setSaleID: aSaleID 
	
	nextSaleID := aSaleID.! !
!Cashier methodsFor: 'checkout - private' stamp: 'GR 12/1/2020 16:00:25' prior: 50883160!
createSale

	^ Sale of: total withID: nextSaleID
! !

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 16:00:27'!
ERROR!
!Sale class methodsFor: 'instance creation' stamp: 'GR 12/1/2020 16:00:33'!
of: aSmallInteger withID: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeOf: aSmallInteger withID: aString ! !
!Sale class methodsFor: 'instance creation' stamp: 'GR 12/1/2020 16:01:00' prior: 50888780!
of: aTotal withID: anID 

	^self new initializeOf: aTotal withID: anID ! !

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 16:01:01'!
ERROR!

!classDefinition: #Sale category: 'TusLibros' stamp: 'GR 12/1/2020 16:01:05'!
Object subclass: #Sale
	instanceVariableNames: 'total id renameMe1 iD'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'GR 12/1/2020 16:01:05'!
initializeOf: aTotal withID: anID 
	self shouldBeImplemented.
	total := aTotal.
	iD := anID.! !
!Sale methodsFor: 'initialization' stamp: 'GR 12/1/2020 16:01:10' prior: 50888804!
initializeOf: aTotal withID: anID 
	
	total := aTotal.
	iD := anID.! !

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 16:01:15'!
ERROR!
!Cashier methodsFor: 'accessing' stamp: 'GR 12/1/2020 16:01:27'!
saleID
	self shouldBeImplemented.! !
!Cashier methodsFor: 'accessing' stamp: 'GR 12/1/2020 16:01:32' prior: 50888818!
saleID
	
	^nextSaleID! !

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 16:01:34'!
FAILURE!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'GR 12/1/2020 16:02:15'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total saleID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 16:02:15' prior: 50888822!
saleID
	
	^saleID! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 16:02:15' prior: 50888767!
setSaleID: aSaleID 
	
	saleID := aSaleID.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 16:02:15' prior: 50888772!
createSale

	^ Sale of: total withID: saleID
! !

!methodRemoval: Cashier #getSaleID stamp: 'GR 12/1/2020 16:02:33'!
getSaleID
	
	^ salesBook last getID. !

!methodRemoval: RESTInterface #theCart:hasTheProduct:withAmount: stamp: 'GR 12/1/2020 16:03:35'!
theCart: aCartID hasTheProduct: aProduct withAmount: aProductAmount 
	
	| cart amountOfProductInCart |
	
	cart := carts at: aCartID ifAbsent: [^false].
	
	amountOfProductInCart := cart occurrencesOf: aProduct.
	
	^ (cart includes: aProduct) and: (amountOfProductInCart = aProductAmount )!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 16:04:28' prior: 50888014!
test15CheckoutACartReturnsSaleID

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: '2' equals: (interface checkout: '1' withCCN: '4865642166849654' withCCED: (Month month: 8 year: 2021) withCCO: 'Matias Morales')
	
	! !

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 16:04:55'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 12/1/2020 16:04:55'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 12/1/2020 16:04:55'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 12/1/2020 16:04:55'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 12/1/2020 16:04:55'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 12/1/2020 16:04:55'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 12/1/2020 16:04:55'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 12/1/2020 16:04:55'!
PASSED!

!testRun: #RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 12/1/2020 16:04:55'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListCartWithValidID stamp: 'GR 12/1/2020 16:04:55'!
PASSED!

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 12/1/2020 16:04:55'!
PASSED!

!testRun: #RESTInterfaceTest #test11CanNotCheckoutCartWithInvalidID stamp: 'GR 12/1/2020 16:04:55'!
PASSED!

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:04:55'!
PASSED!

!testRun: #RESTInterfaceTest #test13CanNotListCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:04:55'!
PASSED!

!testRun: #RESTInterfaceTest #test14CanNotCheckoutIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:04:55'!
PASSED!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 16:04:55'!
PASSED!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 16:07:02' prior: 50888868!
test15CheckoutACartReturnsSaleID

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: '2' equals: (interface checkout: '1' withCCN: '4865642166849654' withCCED: (Month month: 8 year: 2021) withCCO: 'Matias Morales')! !

Object subclass: #Sale
	instanceVariableNames: 'total iD'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'GR 12/1/2020 16:09:14'!
Object subclass: #Sale
	instanceVariableNames: 'total iD'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #Sale
	instanceVariableNames: 'total id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'GR 12/1/2020 16:09:28'!
Object subclass: #Sale
	instanceVariableNames: 'total id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'GR 12/1/2020 16:09:41' prior: 50888810!
initializeOf: aTotal withID: anID 
	
	total := aTotal.
	id := anID.! !

!methodRemoval: Sale class #of: stamp: 'GR 12/1/2020 16:10:05'!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal!

!methodRemoval: Sale #initializeTotal: stamp: 'GR 12/1/2020 16:10:15'!
initializeTotal: aTotal

	total := aTotal !

!methodRemoval: Sale #initializeTotal:withID: stamp: 'GR 12/1/2020 16:10:20'!
initializeTotal: aTotal withID: anID 
	
	total := aTotal.
	id := anID.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListCartWithValidID stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #RESTInterfaceTest #test11CanNotCheckoutCartWithInvalidID stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #RESTInterfaceTest #test13CanNotListCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #RESTInterfaceTest #test14CanNotCheckoutIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 16:10:26'!
PASSED!

!methodRemoval: Sale #ID stamp: 'GR 12/1/2020 16:10:36'!
ID
	
	^ id!

!methodRemoval: Sale #getID stamp: 'GR 12/1/2020 16:10:40'!
getID
	
	^ id.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListCartWithValidID stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #RESTInterfaceTest #test11CanNotCheckoutCartWithInvalidID stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #RESTInterfaceTest #test13CanNotListCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #RESTInterfaceTest #test14CanNotCheckoutIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:10:49'!
PASSED!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 16:10:49'!
PASSED!
!RESTInterface methodsFor: 'operations' stamp: 'GR 12/1/2020 16:11:52' prior: 50888631!
checkout: aCartID withCCN: aCCN withCCED: aCCED withCCO: aCCO 
	
	| creditCard cashier cart saleID |
	
	(carts includesKey: aCartID) ifFalse: [ self error: self class invalidCartError ].
	
	self checkIfCartTimeExceeded: aCartID.
	
	cart := self cartWithID: aCartID.
	
	creditCard := CreditCard expiringOn: aCCED.
	
	cashier := Cashier 
			toCheckout: cart
			charging: creditCard 
			throught: merchantProcessor 
			on: clock now
			registeringOn: OrderedCollection new.
	
	saleID := self getNextID.
	
	cashier checkoutWithID: saleID.
	
	^ cashier saleID.! !
!Cashier methodsFor: 'checkout' stamp: 'GR 12/1/2020 16:12:22'!
checkOutWithID: aSaleID

	self setSaleID: saleID.
	
	self checkOut.! !
!RESTInterface methodsFor: 'operations' stamp: 'GR 12/1/2020 16:12:41' prior: 50889199!
checkout: aCartID withCCN: aCCN withCCED: aCCED withCCO: aCCO 
	
	| creditCard cashier cart saleID |
	
	(carts includesKey: aCartID) ifFalse: [ self error: self class invalidCartError ].
	
	self checkIfCartTimeExceeded: aCartID.
	
	cart := self cartWithID: aCartID.
	
	creditCard := CreditCard expiringOn: aCCED.
	
	cashier := Cashier 
			toCheckout: cart
			charging: creditCard 
			throught: merchantProcessor 
			on: clock now
			registeringOn: OrderedCollection new.
	
	saleID := self getNextID.
	
	cashier checkOutWithID: saleID.
	
	^ cashier saleID.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListCartWithValidID stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #RESTInterfaceTest #test11CanNotCheckoutCartWithInvalidID stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #RESTInterfaceTest #test13CanNotListCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #RESTInterfaceTest #test14CanNotCheckoutIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:12:45'!
PASSED!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 16:12:45'!
FAILURE!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 16:12:45'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'GR 12/1/2020 16:13:07' prior: 50889219!
checkOutWithID: aSaleID

	self setSaleID: aSaleID.
	
	self checkOut.! !

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 16:13:12'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListCartWithValidID stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #RESTInterfaceTest #test11CanNotCheckoutCartWithInvalidID stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #RESTInterfaceTest #test13CanNotListCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #RESTInterfaceTest #test14CanNotCheckoutIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 16:13:24'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListCartWithValidID stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #RESTInterfaceTest #test11CanNotCheckoutCartWithInvalidID stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #RESTInterfaceTest #test13CanNotListCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #RESTInterfaceTest #test14CanNotCheckoutIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 16:13:27'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListCartWithValidID stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #RESTInterfaceTest #test11CanNotCheckoutCartWithInvalidID stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #RESTInterfaceTest #test13CanNotListCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #RESTInterfaceTest #test14CanNotCheckoutIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:13:29'!
PASSED!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 16:13:29'!
PASSED!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 16:16:46'!
test16CheckOutDeletesTheCart

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	interface checkout: '1' withCCN: '4865642166849654' withCCED: (Month month: 8 year: 2021) withCCO: 'Matias Morales'.
	
	self deny: (interface isDefinedTheID: '1').! !

!testRun: #RESTInterfaceTest #test16CheckOutDeletesTheCart stamp: 'GR 12/1/2020 16:16:47'!
FAILURE!
!RESTInterface methodsFor: 'operations' stamp: 'GR 12/1/2020 16:17:17' prior: 50889224!
checkout: aCartID withCCN: aCCN withCCED: aCCED withCCO: aCCO 
	
	| creditCard cashier cart saleID |
	
	(carts includesKey: aCartID) ifFalse: [ self error: self class invalidCartError ].
	
	self checkIfCartTimeExceeded: aCartID.
	
	cart := self cartWithID: aCartID.
	
	creditCard := CreditCard expiringOn: aCCED.
	
	cashier := Cashier 
			toCheckout: cart
			charging: creditCard 
			throught: merchantProcessor 
			on: clock now
			registeringOn: OrderedCollection new.
	
	saleID := self getNextID.
	
	cashier checkOutWithID: saleID.
	
	carts removeKey: aCartID.
	
	^ cashier saleID.! !

!testRun: #RESTInterfaceTest #test16CheckOutDeletesTheCart stamp: 'GR 12/1/2020 16:17:18'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 12/1/2020 16:17:18'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 12/1/2020 16:17:18'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 12/1/2020 16:17:18'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 12/1/2020 16:17:18'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 12/1/2020 16:17:18'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 12/1/2020 16:17:18'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 12/1/2020 16:17:18'!
PASSED!

!testRun: #RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 12/1/2020 16:17:18'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListCartWithValidID stamp: 'GR 12/1/2020 16:17:18'!
PASSED!

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 12/1/2020 16:17:18'!
PASSED!

!testRun: #RESTInterfaceTest #test11CanNotCheckoutCartWithInvalidID stamp: 'GR 12/1/2020 16:17:18'!
PASSED!

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:17:18'!
PASSED!

!testRun: #RESTInterfaceTest #test13CanNotListCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:17:18'!
PASSED!

!testRun: #RESTInterfaceTest #test14CanNotCheckoutIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:17:18'!
PASSED!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 16:17:18'!
PASSED!

!testRun: #RESTInterfaceTest #test16CheckOutDeletesTheCart stamp: 'GR 12/1/2020 16:17:18'!
PASSED!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 16:21:40'!
test17CanNotListPurchasesOfInvalidUsername

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	interface checkout: '1' withCCN: '4865642166849654' withCCED: (Month month: 8 year: 2021) withCCO: 'Matias Morales'.
	
	self
		should: [ interface listPurchases: 'Ete Sech' withPassword: 'hola123' ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidUserError.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 16:21:47' prior: 50889753!
test17CanNotListPurchasesOfInvalidUsername

	self
		should: [ interface listPurchases: 'Ete Sech' withPassword: 'hola123' ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidUserError.! !

!testRun: #RESTInterfaceTest #test17CanNotListPurchasesOfInvalidUsername stamp: 'GR 12/1/2020 16:21:53'!
ERROR!
!RESTInterface methodsFor: 'operations' stamp: 'GR 12/1/2020 16:22:18'!
listPurchases: aString withPassword: aString2 
	self shouldBeImplemented.! !
!RESTInterface methodsFor: 'operations' stamp: 'GR 12/1/2020 16:22:57' prior: 50889786!
listPurchases: aUsername withPassword: aPassword

	self verificateUsername: aUsername andPassword: aPassword.! !

!testRun: #RESTInterfaceTest #test17CanNotListPurchasesOfInvalidUsername stamp: 'GR 12/1/2020 16:22:58'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 12/1/2020 16:22:58'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 12/1/2020 16:22:58'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 12/1/2020 16:22:58'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 12/1/2020 16:22:58'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 12/1/2020 16:22:58'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 12/1/2020 16:22:58'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 12/1/2020 16:22:58'!
PASSED!

!testRun: #RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 12/1/2020 16:22:58'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListCartWithValidID stamp: 'GR 12/1/2020 16:22:58'!
PASSED!

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 12/1/2020 16:22:58'!
PASSED!

!testRun: #RESTInterfaceTest #test11CanNotCheckoutCartWithInvalidID stamp: 'GR 12/1/2020 16:22:58'!
PASSED!

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:22:58'!
PASSED!

!testRun: #RESTInterfaceTest #test13CanNotListCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:22:58'!
PASSED!

!testRun: #RESTInterfaceTest #test14CanNotCheckoutIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:22:58'!
PASSED!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 16:22:58'!
PASSED!

!testRun: #RESTInterfaceTest #test16CheckOutDeletesTheCart stamp: 'GR 12/1/2020 16:22:58'!
PASSED!

!testRun: #RESTInterfaceTest #test17CanNotListPurchasesOfInvalidUsername stamp: 'GR 12/1/2020 16:22:58'!
PASSED!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 16:24:21'!
test18CanListPurchasesOfUserWithNoSales
	
	interface listPurchases: 'C' withPassword: 'hola123'.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 16:24:52' prior: 50889863!
test18CanListPurchasesOfUserWithNoSales
	
	interface listPurchases: 'Crocken321' withPassword: 'lacontraseniamasseguradetodas'.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 16:28:02' prior: 50889870!
test18CanListPurchasesOfUserWithNoSales
	
	self assert: OrderedCollection new equals: (interface listPurchases: 'Crocken321' withPassword: 'lacontraseniamasseguradetodas').! !

!testRun: #RESTInterfaceTest #test18CanListPurchasesOfUserWithNoSales stamp: 'GR 12/1/2020 16:28:05'!
FAILURE!
!RESTInterface methodsFor: 'operations' stamp: 'GR 12/1/2020 16:28:37' prior: 50889792!
listPurchases: aUsername withPassword: aPassword

	self verificateUsername: aUsername andPassword: aPassword.
	
	^ OrderedCollection new.! !

!testRun: #RESTInterfaceTest #test18CanListPurchasesOfUserWithNoSales stamp: 'GR 12/1/2020 16:28:38'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 12/1/2020 16:28:38'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 12/1/2020 16:28:38'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 12/1/2020 16:28:38'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 12/1/2020 16:28:38'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 12/1/2020 16:28:38'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 12/1/2020 16:28:38'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 12/1/2020 16:28:38'!
PASSED!

!testRun: #RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 12/1/2020 16:28:38'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListCartWithValidID stamp: 'GR 12/1/2020 16:28:38'!
PASSED!

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 12/1/2020 16:28:38'!
PASSED!

!testRun: #RESTInterfaceTest #test11CanNotCheckoutCartWithInvalidID stamp: 'GR 12/1/2020 16:28:38'!
PASSED!

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:28:38'!
PASSED!

!testRun: #RESTInterfaceTest #test13CanNotListCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:28:38'!
PASSED!

!testRun: #RESTInterfaceTest #test14CanNotCheckoutIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 16:28:38'!
PASSED!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 16:28:38'!
PASSED!

!testRun: #RESTInterfaceTest #test16CheckOutDeletesTheCart stamp: 'GR 12/1/2020 16:28:38'!
PASSED!

!testRun: #RESTInterfaceTest #test17CanNotListPurchasesOfInvalidUsername stamp: 'GR 12/1/2020 16:28:38'!
PASSED!

!testRun: #RESTInterfaceTest #test18CanListPurchasesOfUserWithNoSales stamp: 'GR 12/1/2020 16:28:38'!
PASSED!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 16:28:51'!
test19CanListPurchasesOfUserWithOneSale
	
	self assert: OrderedCollection new equals: (interface listPurchases: 'Crocken321' withPassword: 'lacontraseniamasseguradetodas').! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 16:30:14' prior: 50889965!
test19CanListPurchasesOfUserWithOneSale
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	interface checkout: '1' withCCN: '4865642166849654' withCCED: (Month month: 8 year: 2021) withCCO: 'Matias Morales'.
	
	self 
		assert: (OrderedCollection with: testObjectsFactory itemSellByTheStore with: 1 with: testObjectsFactory itemSellByTheStorePrice ) 
		equals: (interface listPurchases: 'Crocken321' withPassword: 'lacontraseniamasseguradetodas').! !

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithOneSale stamp: 'GR 12/1/2020 16:30:16'!
FAILURE!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 16:30:49' prior: 50889974!
test19CanListPurchasesOfUserWithOneSale
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 1.
	
	interface checkout: '1' withCCN: '4865642166849654' withCCED: (Month month: 8 year: 2021) withCCO: 'Matias Morales'.
	
	self 
		assert: (OrderedCollection with: testObjectsFactory itemSellByTheStore with: 1 with: testObjectsFactory itemSellByTheStorePrice ) 
		equals: (interface listPurchases: 'Crocken321' withPassword: 'lacontraseniamasseguradetodas').! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 16:34:08' prior: 50890000!
test19CanListPurchasesOfUserWithOneSale
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 1.
	
	interface checkout: '1' withCCN: '4865642166849654' withCCED: (Month month: 8 year: 2021) withCCO: 'Matias Morales'.
	
	self 
		assert: (OrderedCollection with: testObjectsFactory bagWithOneElement with: testObjectsFactory itemSellByTheStorePrice ) 
		equals: (interface listPurchases: 'Crocken321' withPassword: 'lacontraseniamasseguradetodas').! !

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithOneSale stamp: 'GR 12/1/2020 16:34:17'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 16:34:34'!
bagWithOneElement
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 16:35:16' prior: 50890047!
bagWithOneElement
	
	^ Bag with: self itemSellByTheStore ! !

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithOneSale stamp: 'GR 12/1/2020 16:35:17'!
FAILURE!

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithOneSale stamp: 'GR 12/1/2020 16:35:28'!
ERROR!

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithOneSale stamp: 'GR 12/1/2020 16:35:51'!
FAILURE!

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithOneSale stamp: 'GR 12/1/2020 16:35:55'!
ERROR!

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithOneSale stamp: 'GR 12/1/2020 16:36:41'!
ERROR!

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithOneSale stamp: 'GR 12/1/2020 16:36:43'!
FAILURE!
!RESTInterface methodsFor: 'operations' stamp: 'GR 12/1/2020 16:42:05' prior: 50889890!
listPurchases: aUsername withPassword: aPassword

	| items sale sales |
	self verificateUsername: aUsername andPassword: aPassword.
	
	sale := (salesBook at: aUsername) at: 1.
	
	items := sales getPurchases.
	
	^ OrderedCollection with: items with: sales total.! !
!RESTInterface methodsFor: 'operations' stamp: 'GR 12/1/2020 16:42:37' prior: 50890078!
listPurchases: aUsername withPassword: aPassword

	| items sale |
	
	self verificateUsername: aUsername andPassword: aPassword.
	
	sale := (salesBook at: aUsername) at: 1.
	
	items := sale getPurchases.
	
	^ OrderedCollection with: items with: sale total.! !
!RESTInterface methodsFor: 'operations' stamp: 'GR 12/1/2020 16:43:01' prior: 50890090!
listPurchases: aUsername withPassword: aPassword

	| sale |
	
	self verificateUsername: aUsername andPassword: aPassword.
	
	sale := (salesBook at: aUsername) at: 1.
	
	^ OrderedCollection with: sale items with: sale total.! !

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithOneSale stamp: 'GR 12/1/2020 16:43:58'!
ERROR!
!RESTInterface methodsFor: 'initialization' stamp: 'GR 12/1/2020 16:46:19' prior: 50888226!
initializeWithUserList: aUserList andCatalog: aCatalog withMerchantProcessor: aMerchantProcessor withClock: aClock   
	
	userList := aUserList.
	catalog := aCatalog.
	carts := Dictionary new.
	nextID := 0.
	clock := aClock.
	merchantProcessor := aMerchantProcessor.
	userList keysDo: [ :aUsername | salesBook add: aUsername->OrderedCollection new ]! !
!RESTInterface methodsFor: 'initialization' stamp: 'GR 12/1/2020 16:46:51' prior: 50890115!
initializeWithUserList: aUserList andCatalog: aCatalog withMerchantProcessor: aMerchantProcessor withClock: aClock   
	
	userList := aUserList.
	catalog := aCatalog.
	carts := Dictionary new.
	nextID := 0.
	clock := aClock.
	merchantProcessor := aMerchantProcessor.
	salesBook := Dictionary new.
	userList keysDo: [ :aUsername | salesBook add: aUsername->OrderedCollection new ]! !

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithOneSale stamp: 'GR 12/1/2020 16:46:53'!
ERROR!
!RESTInterface methodsFor: 'operations' stamp: 'GR 12/1/2020 16:51:27' prior: 50890101!
listPurchases: aUsername withPassword: aPassword

	| purchases total |
	
	self verificateUsername: aUsername andPassword: aPassword.
	
	purchases := (salesBook at: aUsername) inject: Bag new addingAll: [ :aSale | aSale purchases].
	
	total := (salesBook at: aUsername) inject: 0 into: [ :totalAmount :aSale | totalAmount + aSale total].
	
	^ OrderedCollection with: purchases with: total.! !

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithOneSale stamp: 'GR 12/1/2020 16:51:29'!
FAILURE!

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithOneSale stamp: 'GR 12/1/2020 16:51:37'!
ERROR!

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithOneSale stamp: 'GR 12/1/2020 16:51:43'!
FAILURE!

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithOneSale stamp: 'GR 12/1/2020 16:51:54'!
ERROR!

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithOneSale stamp: 'GR 12/1/2020 16:52:52'!
FAILURE!

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithOneSale stamp: 'GR 12/1/2020 16:52:58'!
ERROR!

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithOneSale stamp: 'GR 12/1/2020 16:53:08'!
FAILURE!

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithOneSale stamp: 'GR 12/1/2020 16:54:56'!
FAILURE!

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithOneSale stamp: 'GR 12/1/2020 16:54:56'!
FAILURE!

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithOneSale stamp: 'GR 12/1/2020 16:55:00'!
ERROR!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 12/1/2020 16:55:03'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 12/1/2020 16:55:04'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 12/1/2020 16:55:06'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 12/1/2020 16:55:07'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 12/1/2020 16:55:08'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 12/1/2020 16:55:09'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 12/1/2020 16:55:11'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 12/1/2020 16:55:12'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 12/1/2020 16:55:13'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 12/1/2020 16:55:14'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 12/1/2020 16:55:15'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 12/1/2020 16:55:15'!
PASSED!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 16:55:20'!
PASSED!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 16:55:21'!
PASSED!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 16:55:22'!
PASSED!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 16:55:23'!
PASSED!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 16:55:23'!
PASSED!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 16:55:24'!
PASSED!

!testRun: #RESTInterfaceTest #test16CheckOutDeletesTheCart stamp: 'GR 12/1/2020 16:55:25'!
PASSED!

!testRun: #RESTInterfaceTest #test16CheckOutDeletesTheCart stamp: 'GR 12/1/2020 16:55:26'!
PASSED!

!testRun: #RESTInterfaceTest #test16CheckOutDeletesTheCart stamp: 'GR 12/1/2020 16:55:27'!
PASSED!

!testRun: #RESTInterfaceTest #test16CheckOutDeletesTheCart stamp: 'GR 12/1/2020 16:55:27'!
PASSED!

!testRun: #RESTInterfaceTest #test16CheckOutDeletesTheCart stamp: 'GR 12/1/2020 16:55:28'!
PASSED!

!testRun: #RESTInterfaceTest #test17CanNotListPurchasesOfInvalidUsername stamp: 'GR 12/1/2020 16:55:30'!
PASSED!

!testRun: #RESTInterfaceTest #test17CanNotListPurchasesOfInvalidUsername stamp: 'GR 12/1/2020 16:55:31'!
PASSED!

!testRun: #RESTInterfaceTest #test17CanNotListPurchasesOfInvalidUsername stamp: 'GR 12/1/2020 16:55:32'!
PASSED!

!testRun: #RESTInterfaceTest #test17CanNotListPurchasesOfInvalidUsername stamp: 'GR 12/1/2020 16:55:32'!
PASSED!

!testRun: #RESTInterfaceTest #test18CanListPurchasesOfUserWithNoSales stamp: 'GR 12/1/2020 16:55:35'!
FAILURE!

!testRun: #RESTInterfaceTest #test18CanListPurchasesOfUserWithNoSales stamp: 'GR 12/1/2020 16:55:35'!
FAILURE!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 16:56:01' prior: 50889878!
test18CanListPurchasesOfUserWithNoSales
	
	self assert: (OrderedCollection with: Bag new with: 0) equals: (interface listPurchases: 'Crocken321' withPassword: 'lacontraseniamasseguradetodas').! !

!testRun: #RESTInterfaceTest #test18CanListPurchasesOfUserWithNoSales stamp: 'GR 12/1/2020 16:56:06'!
PASSED!

!testRun: #RESTInterfaceTest #test18CanListPurchasesOfUserWithNoSales stamp: 'GR 12/1/2020 16:56:08'!
PASSED!

!testRun: #RESTInterfaceTest #test18CanListPurchasesOfUserWithNoSales stamp: 'GR 12/1/2020 16:56:08'!
PASSED!

!testRun: #RESTInterfaceTest #test18CanListPurchasesOfUserWithNoSales stamp: 'GR 12/1/2020 16:56:09'!
PASSED!

!testRun: #RESTInterfaceTest #test18CanListPurchasesOfUserWithNoSales stamp: 'GR 12/1/2020 16:56:09'!
PASSED!

!testRun: #RESTInterfaceTest #test18CanListPurchasesOfUserWithNoSales stamp: 'GR 12/1/2020 16:56:09'!
PASSED!

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithOneSale stamp: 'GR 12/1/2020 16:56:11'!
FAILURE!

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithOneSale stamp: 'GR 12/1/2020 16:56:11'!
FAILURE!

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithOneSale stamp: 'GR 12/1/2020 16:57:48'!
FAILURE!
!RESTInterface methodsFor: 'operations' stamp: 'GR 12/1/2020 16:59:50' prior: 50889671!
checkout: aCartID withCCN: aCCN withCCED: aCCED withCCO: aCCO 
	
	| creditCard cashier cart saleID |
	
	(carts includesKey: aCartID) ifFalse: [ self error: self class invalidCartError ].
	
	self checkIfCartTimeExceeded: aCartID.
	
	cart := self cartWithID: aCartID.
	
	creditCard := CreditCard expiringOn: aCCED.
	
	cashier := Cashier 
			toCheckout: cart
			charging: creditCard 
			throught: merchantProcessor 
			on: clock now
			registeringOn: (self salesOfUserWithTheCart: aCartID).
	
	saleID := self getNextID.
	
	cashier checkOutWithID: saleID.
	
	carts removeKey: aCartID.
	
	^ cashier saleID.! !
!RESTInterface methodsFor: 'operations -- private' stamp: 'GR 12/1/2020 17:00:13'!
salesOfUserWithTheCart: aCartID

	self ! !
!RESTInterface methodsFor: 'operations -- private' stamp: 'GR 12/1/2020 17:01:00' prior: 50890363!
salesOfUserWithTheCart: aCartID

	^ salesBook at: (self userOfCart: aCartID)! !
!RESTInterface methodsFor: 'accessing' stamp: 'GR 12/1/2020 17:02:00'!
userOfCart: aCartID

	(carts at: aCartID) at: 2 ! !
!RESTInterface methodsFor: 'accessing' stamp: 'GR 12/1/2020 17:02:04' prior: 50890373!
userOfCart: aCartID

	^ (carts at: aCartID) at: 2 ! !

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithOneSale stamp: 'GR 12/1/2020 17:02:34'!
ERROR!
!Sale methodsFor: 'accessing' stamp: 'GR 12/1/2020 17:02:43'!
purchases
	self shouldBeImplemented.! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'GR 12/1/2020 17:02:49'!
Object subclass: #Sale
	instanceVariableNames: 'total id purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'accessing' stamp: 'GR 12/1/2020 17:02:47' prior: 50890386!
purchases
	
	^ purchases! !
!Sale class methodsFor: 'instance creation' stamp: 'GR 12/1/2020 17:04:36'!
of: aTotal withID: anID withItems: anItemList  

	^self new initializeOf: aTotal withID: anID ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 17:04:36' prior: 50888847!
createSale

	^ Sale of: total withID: saleID withItems: cart items
! !

!methodRemoval: Sale class #of:withID: stamp: 'GR 12/1/2020 17:04:36'!
of: aTotal withID: anID 

	^self new initializeOf: aTotal withID: anID !
!Sale methodsFor: 'initialization' stamp: 'GR 12/1/2020 17:05:56'!
initializeOf: aTotal withID: anID withItems: anItemList  
	
	total := aTotal.
	id := anID.! !
!Sale class methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 17:05:56' prior: 50890401!
of: aTotal withID: anID withItems: anItemList  

	^self new initializeOf: aTotal withID: anID withItems: anItemList ! !

!methodRemoval: Sale #initializeOf:withID: stamp: 'GR 12/1/2020 17:05:56'!
initializeOf: aTotal withID: anID 
	
	total := aTotal.
	id := anID.!

!classDefinition: #Sale category: 'TusLibros' stamp: 'GR 12/1/2020 17:06:12'!
Object subclass: #Sale
	instanceVariableNames: 'total id purchases items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'GR 12/1/2020 17:06:11' prior: 50890416!
initializeOf: aTotal withID: anID withItems: anItemList  
	
	total := aTotal.
	id := anID.
	items := anItemList.! !
!Sale methodsFor: 'accessing' stamp: 'GR 12/1/2020 17:06:23' prior: 50890397!
purchases
	
	^ items! !

Object subclass: #Sale
	instanceVariableNames: 'total id items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'GR 12/1/2020 17:06:33'!
Object subclass: #Sale
	instanceVariableNames: 'total id items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithOneSale stamp: 'GR 12/1/2020 17:06:51'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 17:07:30'!
items
	self shouldBeImplemented.
	^items! !
!RESTInterface methodsFor: 'operations' stamp: 'GR 12/1/2020 17:08:14' prior: 50887756!
listCart: aCartID 
	
	| cart |
	
	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartError ].
	
	self checkIfCartTimeExceeded: aCartID.
	
	cart := self cartWithID: aCartID.
	
	^ cart listCart contents.! !
!Cart methodsFor: 'accessing' stamp: 'GR 12/1/2020 17:08:25' prior: 50885259!
listCart
	
	^ items asBag! !
!Cashier methodsFor: 'checkout - private' stamp: 'GR 12/1/2020 17:09:02' prior: 50890407!
createSale

	^ Sale of: total withID: saleID withItems: cart listCart
! !

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithOneSale stamp: 'GR 12/1/2020 17:09:07'!
PASSED!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 17:09:56'!
test19CanListPurchasesOfUserWithSales
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 1.
	
	interface checkout: '1' withCCN: '4865642166849654' withCCED: (Month month: 8 year: 2021) withCCO: 'Matias Morales'.
	
	self 
		assert: (OrderedCollection with: testObjectsFactory bagWithOneElement with: testObjectsFactory itemSellByTheStorePrice ) 
		equals: (interface listPurchases: 'Crocken321' withPassword: 'lacontraseniamasseguradetodas').! !

!methodRemoval: RESTInterfaceTest #test19CanListPurchasesOfUserWithOneSale stamp: 'GR 12/1/2020 17:09:56'!
test19CanListPurchasesOfUserWithOneSale
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 1.
	
	interface checkout: '1' withCCN: '4865642166849654' withCCED: (Month month: 8 year: 2021) withCCO: 'Matias Morales'.
	
	self 
		assert: (OrderedCollection with: testObjectsFactory bagWithOneElement with: testObjectsFactory itemSellByTheStorePrice ) 
		equals: (interface listPurchases: 'Crocken321' withPassword: 'lacontraseniamasseguradetodas').!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 17:10:21' prior: 50890493!
test19CanListPurchasesOfUserWithSales
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	interface checkout: '1' withCCN: '4865642166849654' withCCED: (Month month: 8 year: 2021) withCCO: 'Matias Morales'.
	
	self 
		assert: (OrderedCollection with: testObjectsFactory bagWithOneElement with: testObjectsFactory itemSellByTheStorePrice ) 
		equals: (interface listPurchases: 'Crocken321' withPassword: 'lacontraseniamasseguradetodas').! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 17:10:35'!
bagWithElements
	
	^ Bag with: self itemSellByTheStore ! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 17:10:35' prior: 50890536!
test19CanListPurchasesOfUserWithSales
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	interface checkout: '1' withCCN: '4865642166849654' withCCED: (Month month: 8 year: 2021) withCCO: 'Matias Morales'.
	
	self 
		assert: (OrderedCollection with: testObjectsFactory bagWithElements with: testObjectsFactory itemSellByTheStorePrice ) 
		equals: (interface listPurchases: 'Crocken321' withPassword: 'lacontraseniamasseguradetodas').! !

!methodRemoval: StoreTestObjectsFactory #bagWithOneElement stamp: 'GR 12/1/2020 17:10:35'!
bagWithOneElement
	
	^ Bag with: self itemSellByTheStore !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 17:11:51' prior: 50890557!
bagWithElements
	
	^ Bag new add: self itemSellByTheStore withOccurrences: 10.! !

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithSales stamp: 'GR 12/1/2020 17:11:55'!
FAILURE!

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithSales stamp: 'GR 12/1/2020 17:11:55'!
FAILURE!

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithSales stamp: 'GR 12/1/2020 17:13:11'!
FAILURE!

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithSales stamp: 'GR 12/1/2020 17:13:11'!
FAILURE!

OrderedCollection with: testObjectsFactory bagWithElements with: testObjectsFactory itemSellByTheStorePrice!

testObjectsFactory bagWithElements!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 17:14:18' prior: 50890589!
bagWithElements
	
	^ (Bag new add: self itemSellByTheStore withOccurrences: 10).! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 17:14:48' prior: 50890614!
bagWithElements
	
	^ (Bag new add: self itemSellByTheStore withOccurrences: 10).! !

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithSales stamp: 'GR 12/1/2020 17:14:51'!
FAILURE!

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithSales stamp: 'GR 12/1/2020 17:14:51'!
FAILURE!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 17:16:07' prior: 50890620!
bagWithElements
	
	| bag |
	
	bag := Bag new.
	
	bag add: self itemSellByTheStore withOccurrences: 10.
	
	^ bag.! !

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithSales stamp: 'GR 12/1/2020 17:16:12'!
FAILURE!

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithSales stamp: 'GR 12/1/2020 17:16:12'!
FAILURE!

OrderedCollection with: testObjectsFactory bagWithElements with: testObjectsFactory itemSellByTheStorePrice!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 12/1/2020 17:16:45' prior: 50890562!
test19CanListPurchasesOfUserWithSales
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	interface checkout: '1' withCCN: '4865642166849654' withCCED: (Month month: 8 year: 2021) withCCO: 'Matias Morales'.
	
	self 
		assert: (OrderedCollection with: testObjectsFactory bagWithElements with: testObjectsFactory itemSellByTheStorePrice * 10 ) 
		equals: (interface listPurchases: 'Crocken321' withPassword: 'lacontraseniamasseguradetodas').! !

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithSales stamp: 'GR 12/1/2020 17:16:51'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 12/1/2020 17:16:51'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 12/1/2020 17:16:51'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 12/1/2020 17:16:51'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 12/1/2020 17:16:51'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 12/1/2020 17:16:51'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 12/1/2020 17:16:51'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 12/1/2020 17:16:51'!
PASSED!

!testRun: #RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 12/1/2020 17:16:51'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListCartWithValidID stamp: 'GR 12/1/2020 17:16:51'!
PASSED!

!testRun: #RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 12/1/2020 17:16:51'!
PASSED!

!testRun: #RESTInterfaceTest #test11CanNotCheckoutCartWithInvalidID stamp: 'GR 12/1/2020 17:16:51'!
PASSED!

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 17:16:51'!
PASSED!

!testRun: #RESTInterfaceTest #test13CanNotListCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 17:16:51'!
PASSED!

!testRun: #RESTInterfaceTest #test14CanNotCheckoutIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 17:16:51'!
PASSED!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 17:16:51'!
PASSED!

!testRun: #RESTInterfaceTest #test16CheckOutDeletesTheCart stamp: 'GR 12/1/2020 17:16:51'!
PASSED!

!testRun: #RESTInterfaceTest #test17CanNotListPurchasesOfInvalidUsername stamp: 'GR 12/1/2020 17:16:51'!
PASSED!

!testRun: #RESTInterfaceTest #test18CanListPurchasesOfUserWithNoSales stamp: 'GR 12/1/2020 17:16:51'!
PASSED!

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithSales stamp: 'GR 12/1/2020 17:16:51'!
PASSED!
!Sale class methodsFor: 'instance creation' stamp: 'GR 12/1/2020 17:18:28' prior: 50890422!
of: aTotal withID: anID withItems: anItemList  
	
	(aTotal positive) ifFalse: [ self error: self invalidTotalAmountErrorDescription].
	
	^self new initializeOf: aTotal withID: anID withItems: anItemList ! !

0 positive !

0 strictlyPositive !
!Sale class methodsFor: 'instance creation' stamp: 'GR 12/1/2020 17:19:49' prior: 50890743!
of: aTotal withID: anID withItems: anItemList  
	
	(aTotal strictlyPositive ) ifFalse: [ self error: self invalidTotalAmountErrorDescription].
	
	^self new initializeOf: aTotal withID: anID withItems: anItemList ! !
!Sale class methodsFor: 'instance creation' stamp: 'GR 12/1/2020 17:21:01' prior: 50890754!
of: aTotal withID: anID withItems: anItemList  
	
	^self new initializeOf: aTotal withID: anID withItems: anItemList ! !
!Clock methodsFor: 'no messages' stamp: 'GR 12/1/2020 17:22:26'!
now

	self subclassResponsibility.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'GR 12/1/2020 17:25:33'!
test10CanAddProductsToCartWithCartID

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self deny: (interface listCart: '1') isEmpty.! !

!methodRemoval: RESTInterfaceTest #test06CanAddProductsToCartWithCartID stamp: 'GR 12/1/2020 17:25:33'!
test06CanAddProductsToCartWithCartID

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self deny: (interface listCart: '1') isEmpty.!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'GR 12/1/2020 17:25:42'!
test09CanNotListCartWithInvalidID

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self
		should: [ interface listCart: '4' ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidCartError.! !

!methodRemoval: RESTInterfaceTest #test10CanNotListCartWithInvalidID stamp: 'GR 12/1/2020 17:25:42'!
test10CanNotListCartWithInvalidID

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self
		should: [ interface listCart: '4' ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidCartError.!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'GR 12/1/2020 17:25:50'!
test08CanListCartWithValidID

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: (Dictionary with: testObjectsFactory itemSellByTheStore->10 ) equals: (interface listCart: '1')
	
	! !

!methodRemoval: RESTInterfaceTest #test09CanListCartWithValidID stamp: 'GR 12/1/2020 17:25:50'!
test09CanListCartWithValidID

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: (Dictionary with: testObjectsFactory itemSellByTheStore->10 ) equals: (interface listCart: '1')
	
	!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'GR 12/1/2020 17:25:55'!
test07CanListAnEmptyCart

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self assert: Dictionary new equals: (interface listCart: '1')
	
	! !

!methodRemoval: RESTInterfaceTest #test08CanListAnEmptyCart stamp: 'GR 12/1/2020 17:25:55'!
test08CanListAnEmptyCart

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self assert: Dictionary new equals: (interface listCart: '1')
	
	!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'GR 12/1/2020 17:26:14'!
test06CanNotAddProductsToInvalidCart

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self
		should: [ interface addToCart: '4' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10. ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidCartError. 
	
	! !

!methodRemoval: RESTInterfaceTest #test07CanNotAddProductsToInvalidCart stamp: 'GR 12/1/2020 17:26:14'!
test07CanNotAddProductsToInvalidCart

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self
		should: [ interface addToCart: '4' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10. ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidCartError. 
	
	!

!testRun: #RESTInterfaceTest #test17CanNotListPurchasesOfInvalidUsername stamp: 'GR 12/1/2020 17:26:53'!
PASSED!

!testRun: #RESTInterfaceTest #test17CanNotListPurchasesOfInvalidUsername stamp: 'GR 12/1/2020 17:26:55'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 12/1/2020 17:26:55'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 12/1/2020 17:26:55'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 12/1/2020 17:26:55'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 12/1/2020 17:26:55'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 12/1/2020 17:26:55'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanNotAddProductsToInvalidCart stamp: 'GR 12/1/2020 17:26:55'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanListAnEmptyCart stamp: 'GR 12/1/2020 17:26:55'!
PASSED!

!testRun: #RESTInterfaceTest #test08CanListCartWithValidID stamp: 'GR 12/1/2020 17:26:55'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanNotListCartWithInvalidID stamp: 'GR 12/1/2020 17:26:55'!
PASSED!

!testRun: #RESTInterfaceTest #test10CanAddProductsToCartWithCartID stamp: 'GR 12/1/2020 17:26:55'!
PASSED!

!testRun: #RESTInterfaceTest #test11CanNotCheckoutCartWithInvalidID stamp: 'GR 12/1/2020 17:26:55'!
PASSED!

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 17:26:55'!
PASSED!

!testRun: #RESTInterfaceTest #test13CanNotListCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 17:26:55'!
PASSED!

!testRun: #RESTInterfaceTest #test14CanNotCheckoutIf30MinutesPassedSinceLastOperation stamp: 'GR 12/1/2020 17:26:55'!
PASSED!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/1/2020 17:26:55'!
PASSED!

!testRun: #RESTInterfaceTest #test16CheckOutDeletesTheCart stamp: 'GR 12/1/2020 17:26:55'!
PASSED!

!testRun: #RESTInterfaceTest #test17CanNotListPurchasesOfInvalidUsername stamp: 'GR 12/1/2020 17:26:55'!
PASSED!

!testRun: #RESTInterfaceTest #test18CanListPurchasesOfUserWithNoSales stamp: 'GR 12/1/2020 17:26:55'!
PASSED!

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithSales stamp: 'GR 12/1/2020 17:26:55'!
PASSED!

----QUIT----(1 December 2020 17:27:34) CuisUniversity-4384.image priorSource: 17802685!

----STARTUP---- (1 December 2020 17:27:54) as /home/grosinov/linux64/CuisUniversity-4384.image!


----QUIT----(1 December 2020 17:28:25) CuisUniversity-4384.image priorSource: 17898213!

----STARTUP---- (1 December 2020 17:29:17) as /home/grosinov/linux64/CuisUniversity-4384.image!

!RESTInterface methodsFor: 'operations' stamp: 'GR 12/1/2020 17:29:58' prior: 50890148!
listPurchases: aUsername withPassword: aPassword

	| purchases total |
	
	self verificateUsername: aUsername andPassword: aPassword.
	
	purchases := (salesBook at: aUsername) inject: Bag new addingAll: [ :aSale | aSale purchases].
	
	total := (salesBook at: aUsername) inject: 0 into: [ :totalAmount :aSale | totalAmount + aSale total].
	
	^ OrderedCollection with: purchases with: total.! !
!RESTInterface methodsFor: 'operations' stamp: 'GR 12/1/2020 17:30:06'!
purchasesOf: aUsername

	^ salesBook at: aUsername! !
!RESTInterface methodsFor: 'operations' stamp: 'GR 12/1/2020 17:30:06' prior: 50890982!
listPurchases: aUsername withPassword: aPassword

	| purchases total |
	
	self verificateUsername: aUsername andPassword: aPassword.
	
	purchases := (self purchasesOf: aUsername) inject: Bag new addingAll: [ :aSale | aSale purchases].
	
	total := (salesBook at: aUsername) inject: 0 into: [ :totalAmount :aSale | totalAmount + aSale total].
	
	^ OrderedCollection with: purchases with: total.! !
!RESTInterface methodsFor: 'operations' stamp: 'GR 12/1/2020 17:30:18' prior: 50891002!
listPurchases: aUsername withPassword: aPassword

	| purchases total |
	
	self verificateUsername: aUsername andPassword: aPassword.
	
	purchases := (self purchasesOf: aUsername) inject: Bag new addingAll: [ :aSale | aSale purchases].
	
	total := (self purchasesOf: aUsername) inject: 0 into: [ :totalAmount :aSale | totalAmount + aSale total].
	
	^ OrderedCollection with: purchases with: total.! !

----QUIT----(1 December 2020 17:31:07) CuisUniversity-4384.image priorSource: 17898400!

----STARTUP---- (1 December 2020 17:32:02) as /home/grosinov/linux64/CuisUniversity-4384.image!


----QUIT----(1 December 2020 17:32:23) CuisUniversity-4384.image priorSource: 17900239!

----STARTUP---- (2 December 2020 14:49:15) as /home/grosinov/linux64/CuisUniversity-4384.image!

!CreditCard class methodsFor: 'instance creation' stamp: 'GR 12/2/2020 14:54:34'!
withNumber: aName expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GR 12/2/2020 14:54:34' prior: 50883492!
notExpiredCreditCard
	
	^CreditCard withNumber: 'Matias Morales' expiringOn: (Month month: today monthIndex year: today yearNumber + 1)! !
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'GR 12/2/2020 14:54:34' prior: 50890341!
checkout: aCartID withCCN: aCCN withCCED: aCCED withCCO: aCCO 
	
	| creditCard cashier cart saleID |
	
	(carts includesKey: aCartID) ifFalse: [ self error: self class invalidCartError ].
	
	self checkIfCartTimeExceeded: aCartID.
	
	cart := self cartWithID: aCartID.
	
	creditCard := CreditCard withNumber: 'Matias Morales' expiringOn: aCCED.
	
	cashier := Cashier 
			toCheckout: cart
			charging: creditCard 
			throught: merchantProcessor 
			on: clock now
			registeringOn: (self salesOfUserWithTheCart: aCartID).
	
	saleID := self getNextID.
	
	cashier checkOutWithID: saleID.
	
	carts removeKey: aCartID.
	
	^ cashier saleID.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GR 12/2/2020 14:54:34' prior: 50883499!
expiredCreditCard
	
	^CreditCard withNumber: 'Matias Morales' expiringOn: (Month month: today monthIndex year: today yearNumber - 1)! !

!methodRemoval: CreditCard class #expiringOn: stamp: 'GR 12/2/2020 14:54:34'!
expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth!
!RESTInterface methodsFor: 'operations' stamp: 'GR 12/2/2020 14:54:46' prior: 50891059!
checkout: aCartID withCCN: aCCN withCCED: aCCED withCCO: aCCO 
	
	| creditCard cashier cart saleID |
	
	(carts includesKey: aCartID) ifFalse: [ self error: self class invalidCartError ].
	
	self checkIfCartTimeExceeded: aCartID.
	
	cart := self cartWithID: aCartID.
	
	creditCard := CreditCard withNumber: aCCN expiringOn: aCCED.
	
	cashier := Cashier 
			toCheckout: cart
			charging: creditCard 
			throught: merchantProcessor 
			on: clock now
			registeringOn: (self salesOfUserWithTheCart: aCartID).
	
	saleID := self getNextID.
	
	cashier checkOutWithID: saleID.
	
	carts removeKey: aCartID.
	
	^ cashier saleID.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'GR 12/2/2020 14:55:22'!
withNumber: aName expiringOn: aMonth withOwner: anOwner  
	
	^self new initializeExpiringOn: aMonth! !
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'GR 12/2/2020 14:55:22' prior: 50891095!
checkout: aCartID withCCN: aCCN withCCED: aCCED withCCO: aCCO 
	
	| creditCard cashier cart saleID |
	
	(carts includesKey: aCartID) ifFalse: [ self error: self class invalidCartError ].
	
	self checkIfCartTimeExceeded: aCartID.
	
	cart := self cartWithID: aCartID.
	
	creditCard := CreditCard withNumber: aCCN expiringOn: aCCED withOwner: 'Matias Morales'.
	
	cashier := Cashier 
			toCheckout: cart
			charging: creditCard 
			throught: merchantProcessor 
			on: clock now
			registeringOn: (self salesOfUserWithTheCart: aCartID).
	
	saleID := self getNextID.
	
	cashier checkOutWithID: saleID.
	
	carts removeKey: aCartID.
	
	^ cashier saleID.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GR 12/2/2020 14:55:22' prior: 50891083!
expiredCreditCard
	
	^CreditCard withNumber: 'Matias Morales' expiringOn: (Month month: today monthIndex year: today yearNumber - 1) withOwner: 'Matias Morales'! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GR 12/2/2020 14:55:22' prior: 50891051!
notExpiredCreditCard
	
	^CreditCard withNumber: 'Matias Morales' expiringOn: (Month month: today monthIndex year: today yearNumber + 1) withOwner: 'Matias Morales'! !

!methodRemoval: CreditCard class #withNumber:expiringOn: stamp: 'GR 12/2/2020 14:55:22'!
withNumber: aName expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth!
!RESTInterface methodsFor: 'operations' stamp: 'GR 12/2/2020 14:55:33' prior: 50891124!
checkout: aCartID withCCN: aCCN withCCED: aCCED withCCO: aCCO 
	
	| creditCard cashier cart saleID |
	
	(carts includesKey: aCartID) ifFalse: [ self error: self class invalidCartError ].
	
	self checkIfCartTimeExceeded: aCartID.
	
	cart := self cartWithID: aCartID.
	
	creditCard := CreditCard withNumber: aCCN expiringOn: aCCED withOwner: aCCO.
	
	cashier := Cashier 
			toCheckout: cart
			charging: creditCard 
			throught: merchantProcessor 
			on: clock now
			registeringOn: (self salesOfUserWithTheCart: aCartID).
	
	saleID := self getNextID.
	
	cashier checkOutWithID: saleID.
	
	carts removeKey: aCartID.
	
	^ cashier saleID.! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'GR 12/2/2020 14:55:48' prior: 50891148!
expiredCreditCard
	
	^CreditCard withNumber: '4852536874523584' expiringOn: (Month month: today monthIndex year: today yearNumber - 1) withOwner: 'Matias Morales'! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'GR 12/2/2020 14:55:52' prior: 50891157!
notExpiredCreditCard
	
	^CreditCard withNumber: '4852536874523584' expiringOn: (Month month: today monthIndex year: today yearNumber + 1) withOwner: 'Matias Morales'! !
!CreditCard methodsFor: 'initialization' stamp: 'GR 12/2/2020 14:56:06' prior: 50883405!
initializeExpiringOn: aMonth 
	
	expiration := aMonth ! !
!CreditCard methodsFor: 'initialization' stamp: 'GR 12/2/2020 14:56:47'!
initializeWithNumber: aCCN initializeExpiringOn: aMonth 
	
	expiration := aMonth ! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'GR 12/2/2020 14:56:47' prior: 50891117!
withNumber: aName expiringOn: aMonth withOwner: anOwner  
	
	^self new initializeWithNumber: aNumber initializeExpiringOn: aMonth! !

!methodRemoval: CreditCard #initializeExpiringOn: stamp: 'GR 12/2/2020 14:56:47'!
initializeExpiringOn: aMonth 
	
	expiration := aMonth !
!CreditCard methodsFor: 'initialization' stamp: 'GR 12/2/2020 14:57:01'!
initializeWithNumber: aCCN expiringOn: aMonth 
	
	expiration := aMonth ! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'GR 12/2/2020 14:57:01' prior: 50891224!
withNumber: aName expiringOn: aMonth withOwner: anOwner  
	
	^self new initializeWithNumber: aNumber expiringOn: aMonth! !

!methodRemoval: CreditCard #initializeWithNumber:initializeExpiringOn: stamp: 'GR 12/2/2020 14:57:01'!
initializeWithNumber: aCCN initializeExpiringOn: aMonth 
	
	expiration := aMonth !
!CreditCard methodsFor: 'initialization' stamp: 'GR 12/2/2020 14:57:31'!
initializeWithNumber: aCCN expiringOn: aMonth withOwner: aCCO  
	
	expiration := aMonth ! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'GR 12/2/2020 14:57:31' prior: 50891241!
withNumber: aName expiringOn: aMonth withOwner: anOwner  
	
	^self new initializeWithNumber: aNumber expiringOn: aMonth withOwner: anOwner! !

!methodRemoval: CreditCard #initializeWithNumber:expiringOn: stamp: 'GR 12/2/2020 14:57:31'!
initializeWithNumber: aCCN expiringOn: aMonth 
	
	expiration := aMonth !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'GR 12/2/2020 14:58:15'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration numer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'GR 12/2/2020 14:58:16'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration numer owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'GR 12/2/2020 14:58:13' prior: 50891253!
initializeWithNumber: aCCN expiringOn: aMonth withOwner: aCCO  
	
	numer := aCCN.
	expiration := aMonth.
	owner := aCCO. ! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'GR 12/2/2020 14:58:26'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'GR 12/2/2020 14:58:26' prior: 50891286!
initializeWithNumber: aCCN expiringOn: aMonth withOwner: aCCO  
	
	number := aCCN.
	expiration := aMonth.
	owner := aCCO. ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'GR 12/2/2020 14:58:44' prior: 50891259!
withNumber: aCCN expiringOn: aMonth withOwner: aCCO  
	
	^self new initializeWithNumber: aCCN expiringOn: aMonth withOwner: aCCO! !
!CreditCard class methodsFor: 'instance creation' stamp: 'GR 12/2/2020 14:59:10' prior: 50891308!
withNumber: aCCN expiringOn: aMonth withOwner: aCCO 

	(aCCO = '') ifTrue: [ self error: self invalidCreditCard ].
	
	^self new initializeWithNumber: aCCN expiringOn: aMonth withOwner: aCCO! !
!CreditCard class methodsFor: 'nil' stamp: 'GR 12/2/2020 14:59:32'!
invalidCreditCard

	^ 'Invalid credit card'! !
!CreditCard class methodsFor: 'error handling' stamp: 'GR 12/2/2020 14:59:54'!
invalidCreditCardErrorDescription

	^ 'Invalid credit card'! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'GR 12/2/2020 14:59:54' prior: 50891316!
withNumber: aCCN expiringOn: aMonth withOwner: aCCO 

	(aCCO = '') ifTrue: [ self error: self invalidCreditCardErrorDescription ].
	
	^self new initializeWithNumber: aCCN expiringOn: aMonth withOwner: aCCO! !

!methodRemoval: CreditCard class #invalidCreditCard stamp: 'GR 12/2/2020 14:59:54'!
invalidCreditCard

	^ 'Invalid credit card'!

12.5685!

12.5685 trim!

12.5685 rounded !

12.5685 floor!

12.5685 *100 floor!

(12.5685 *100) floor!

(12.5685 *100) floor /100 !

(12.5685 *100) floor asFloat /100!

(12.56865 *100) truncated !

(12.56865 *100) truncated /100 !

(12.56865 *100) truncated /100 asFloat!

12.5864 roundDownTo: 2 !

12.5864 roundDownTo: 1 !

12.5864 roundDownTo: 4 !

12.5864 roundTo: 3 !

12.5864 roundTo: 15!

12.5864 roundTo: 15 !

12.5864 truncateTo: 2 !

12.5864 truncateTo: 12.58 !

12.5854 significand !

12.5854 significand !
!Cashier methodsFor: 'checkout - private' stamp: 'GR 12/2/2020 15:18:52' prior: 50883168!
debitTotal
	
	| trimmedTotal |
	
	trimmedTotal := (total*100) truncated /100 asFloat.
	
	merchantProcessor debit: trimmedTotal from: creditCard.
	! !
!Cashier methodsFor: 'checkout - private' stamp: 'GR 12/2/2020 15:19:46' prior: 50891365!
debitTotal
	
	merchantProcessor debit: total from: creditCard.
	! !
!RESTInterface methodsFor: 'operations' stamp: 'GR 12/2/2020 15:31:38'!
listPurchasesOfUser: aUsername withPassword: aPassword

	| purchases total |
	
	self verificateUsername: aUsername andPassword: aPassword.
	
	purchases := (self purchasesOf: aUsername) inject: Bag new addingAll: [ :aSale | aSale purchases].
	
	total := (self purchasesOf: aUsername) inject: 0 into: [ :totalAmount :aSale | totalAmount + aSale total].
	
	^ OrderedCollection with: purchases with: total.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 12/2/2020 15:31:38' prior: 50890300!
test18CanListPurchasesOfUserWithNoSales
	
	self assert: (OrderedCollection with: Bag new with: 0) equals: (interface listPurchasesOfUser: 'Crocken321' withPassword: 'lacontraseniamasseguradetodas').! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 12/2/2020 15:31:38' prior: 50889773!
test17CanNotListPurchasesOfInvalidUsername

	self
		should: [ interface listPurchasesOfUser: 'Ete Sech' withPassword: 'hola123' ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RESTInterface invalidUserError.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 12/2/2020 15:31:38' prior: 50890651!
test19CanListPurchasesOfUserWithSales
	
	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	interface checkout: '1' withCCN: '4865642166849654' withCCED: (Month month: 8 year: 2021) withCCO: 'Matias Morales'.
	
	self 
		assert: (OrderedCollection with: testObjectsFactory bagWithElements with: testObjectsFactory itemSellByTheStorePrice * 10 ) 
		equals: (interface listPurchasesOfUser: 'Crocken321' withPassword: 'lacontraseniamasseguradetodas').! !

!methodRemoval: RESTInterface #listPurchases:withPassword: stamp: 'GR 12/2/2020 15:31:38'!
listPurchases: aUsername withPassword: aPassword

	| purchases total |
	
	self verificateUsername: aUsername andPassword: aPassword.
	
	purchases := (self purchasesOf: aUsername) inject: Bag new addingAll: [ :aSale | aSale purchases].
	
	total := (self purchasesOf: aUsername) inject: 0 into: [ :totalAmount :aSale | totalAmount + aSale total].
	
	^ OrderedCollection with: purchases with: total.!
!RESTInterface methodsFor: 'operations' stamp: 'GR 12/2/2020 15:39:24' prior: 50890470!
listCart: aCartID 
	
	| cart |
	
	(carts includesKey: aCartID) ifFalse: [self error: self class invalidCartError ].
	
	self checkIfCartTimeExceeded: aCartID.
	
	cart := self cartWithID: aCartID.
	
	^ cart listCart.! !

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 12/2/2020 15:39:29'!
PASSED!

!testRun: #RESTInterfaceTest #test01CreateCartWithValidUsernameAndPasswordReturnsCartID stamp: 'GR 12/2/2020 15:39:29'!
PASSED!

!testRun: #RESTInterfaceTest #test02CanNotCreateCartWithInvalidUsername stamp: 'GR 12/2/2020 15:39:29'!
PASSED!

!testRun: #RESTInterfaceTest #test03CanNotCreateCartWithValidUsernameButInvalidPassword stamp: 'GR 12/2/2020 15:39:29'!
PASSED!

!testRun: #RESTInterfaceTest #test04CreateMoreThanOneCartWithValidUsernameAndPasswordReturnsCartIDForEach stamp: 'GR 12/2/2020 15:39:29'!
PASSED!

!testRun: #RESTInterfaceTest #test05CartIsCreatedAndSaved stamp: 'GR 12/2/2020 15:39:29'!
PASSED!

!testRun: #RESTInterfaceTest #test06CanNotAddProductsToInvalidCart stamp: 'GR 12/2/2020 15:39:29'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanListAnEmptyCart stamp: 'GR 12/2/2020 15:39:29'!
FAILURE!

!testRun: #RESTInterfaceTest #test08CanListCartWithValidID stamp: 'GR 12/2/2020 15:39:29'!
FAILURE!

!testRun: #RESTInterfaceTest #test09CanNotListCartWithInvalidID stamp: 'GR 12/2/2020 15:39:29'!
PASSED!

!testRun: #RESTInterfaceTest #test10CanAddProductsToCartWithCartID stamp: 'GR 12/2/2020 15:39:29'!
PASSED!

!testRun: #RESTInterfaceTest #test11CanNotCheckoutCartWithInvalidID stamp: 'GR 12/2/2020 15:39:29'!
PASSED!

!testRun: #RESTInterfaceTest #test12CanNotAddToCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/2/2020 15:39:29'!
PASSED!

!testRun: #RESTInterfaceTest #test13CanNotListCartIf30MinutesPassedSinceLastOperation stamp: 'GR 12/2/2020 15:39:29'!
PASSED!

!testRun: #RESTInterfaceTest #test14CanNotCheckoutIf30MinutesPassedSinceLastOperation stamp: 'GR 12/2/2020 15:39:29'!
PASSED!

!testRun: #RESTInterfaceTest #test15CheckoutACartReturnsSaleID stamp: 'GR 12/2/2020 15:39:29'!
PASSED!

!testRun: #RESTInterfaceTest #test16CheckOutDeletesTheCart stamp: 'GR 12/2/2020 15:39:29'!
PASSED!

!testRun: #RESTInterfaceTest #test17CanNotListPurchasesOfInvalidUsername stamp: 'GR 12/2/2020 15:39:29'!
PASSED!

!testRun: #RESTInterfaceTest #test18CanListPurchasesOfUserWithNoSales stamp: 'GR 12/2/2020 15:39:29'!
PASSED!

!testRun: #RESTInterfaceTest #test19CanListPurchasesOfUserWithSales stamp: 'GR 12/2/2020 15:39:29'!
PASSED!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'GR 12/2/2020 15:39:34' prior: 50890851!
test07CanListAnEmptyCart

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	self assert: Bag new equals: (interface listCart: '1')
	
	! !

!testRun: #RESTInterfaceTest #test07CanListAnEmptyCart stamp: 'GR 12/2/2020 15:39:36'!
PASSED!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'GR 12/2/2020 15:40:08' prior: 50890825!
test08CanListCartWithValidID

	interface createCartWithUser: 'Crocken321' andPassword: 'lacontraseniamasseguradetodas'.
	
	interface addToCart: '1' theProduct: testObjectsFactory itemSellByTheStore withAmount: 10.
	
	self assert: testObjectsFactory bagWithElements equals: (interface listCart: '1')
	
	! !

!testRun: #RESTInterfaceTest #test08CanListCartWithValidID stamp: 'GR 12/2/2020 15:40:09'!
PASSED!

----QUIT----(2 December 2020 15:40:56) CuisUniversity-4384.image priorSource: 17900426!

----STARTUP---- (2 December 2020 15:41:17) as /home/grosinov/linux64/CuisUniversity-4384.image!


----QUIT----(2 December 2020 15:41:29) CuisUniversity-4384.image priorSource: 17917141!