----STARTUP---- (16 November 2020 17:46:21) as /home/pablo/Documents/Ingenieria1/repoNuestro/20-TusLibros/cuis/CuisUniversity-4384.image!


Object subclass: #TusLibros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!

!classDefinition: #TusLibros category: 'Tus-Libros' stamp: 'PGTA 11/16/2020 18:55:43'!
Object subclass: #TusLibros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!

----SNAPSHOT----(16 November 2020 18:57:52) CuisUniversity-4384.image priorSource: 17155564!

----QUIT----(16 November 2020 18:57:55) CuisUniversity-4384.image priorSource: 17156133!

----STARTUP---- (16 November 2020 18:58:25) as /home/pablo/Documents/Ingenieria1/repoNuestro/20-TusLibros/cuis/CuisUniversity-4384.image!


TestCase subclass: #CarritoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!

!classDefinition: #CarritoTest category: 'Tus-Libros' stamp: 'PGTA 11/16/2020 18:59:47'!
TestCase subclass: #CarritoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!

!classRemoval: #TusLibros stamp: 'PGTA 11/16/2020 18:59:55'!
Object subclass: #TusLibros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!

!classRenamed: #CarritoTest as: #CartTest stamp: 'PGTA 11/16/2020 19:00:46'!
Smalltalk renameClassNamed: #CarritoTest as: #CartTest!

!classDefinition: #Cart category: 'Tus-Libros' stamp: 'PGTA 11/16/2020 19:03:47'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!CartTest methodsFor: 'no messages' stamp: 'PGTA 11/16/2020 19:03:08'!
test01_newCartIsAnEmptyCart
	
	| cart |
	cart := Cart new.
	
	self assert: cart isEmpty.! !

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/16/2020 19:04:19'!
ERROR!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/16/2020 19:04:28'!
ERROR!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/16/2020 19:04:33'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'PGTA 11/16/2020 19:04:44'!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'testing' stamp: 'PGTA 11/16/2020 19:04:51' prior: 50867831!
isEmpty
	^true.! !

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/16/2020 19:04:52'!
PASSED!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/16/2020 19:04:52'!
PASSED!

!classDefinition: #Book category: 'Tus-Libros' stamp: 'PGTA 11/16/2020 19:11:43'!
Object subclass: #Book
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!CartTest methodsFor: 'tests' stamp: 'PGTA 11/16/2020 19:11:31'!
test02_cartWithOneBookIsNotEmpty
	
	| cart book |
	cart := Cart new.
	book := Book new.
	
	self assert: cart isEmpty not.! !

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/16/2020 19:11:52'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'PGTA 11/16/2020 19:12:46' prior: 50867850!
test02_cartWithOneBookIsNotEmpty
	
	| cart book |
	cart := Cart new.
	book := Book new.
	
	cart addBook: book.
	self assert: cart isEmpty not.! !

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/16/2020 19:12:51'!
ERROR!
!Cart methodsFor: 'cart operations' stamp: 'PGTA 11/16/2020 19:13:14'!
addBook: aBook 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'Tus-Libros' stamp: 'PGTA 11/16/2020 19:14:10'!
Object subclass: #Cart
	instanceVariableNames: 'content'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!Cart methodsFor: 'cart operations' stamp: 'PGTA 11/16/2020 19:14:08' prior: 50867870!
addBook: aBook 
	content := aBook! !

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/16/2020 19:14:13'!
FAILURE!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/16/2020 19:14:40'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'PGTA 11/16/2020 19:14:54' prior: 50867860!
test02_cartWithOneBookIsNotEmpty
	
	| cart book |
	cart := Cart new.
	book := Book new.
	
	cart addBook: book.
	self assert: (cart isEmpty not).! !

cart isEmpty!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/16/2020 19:15:26'!
FAILURE!
!Cart methodsFor: 'testing' stamp: 'PGTA 11/16/2020 19:15:45' prior: 50867835!
isEmpty
	^content = nil.! !

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/16/2020 19:15:53'!
PASSED!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/16/2020 19:15:53'!
PASSED!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/16/2020 19:15:53'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'PGTA 11/16/2020 19:19:00'!
test03_addedBookToCartHasTheBook
	
	| cart book |
	cart := Cart new.
	book := Book new.
	
	cart addBook: book.
	self assert: (cart hasBook: book).! !

!testRun: #CartTest #test03_addedBookToCartHasTheBook stamp: 'PGTA 11/16/2020 19:19:01'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'PGTA 11/16/2020 19:19:21'!
hasBook: aBook 
	self shouldBeImplemented.! !
!Cart methodsFor: 'testing' stamp: 'PGTA 11/16/2020 19:19:36' prior: 50867924!
hasBook: aBook 
	^content = aBook.! !

!testRun: #CartTest #test03_addedBookToCartHasTheBook stamp: 'PGTA 11/16/2020 19:19:38'!
PASSED!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/16/2020 19:19:38'!
PASSED!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/16/2020 19:19:38'!
PASSED!

!testRun: #CartTest #test03_addedBookToCartHasTheBook stamp: 'PGTA 11/16/2020 19:19:38'!
PASSED!

!testRun: #CartTest #test03_addedBookToCartHasTheBook stamp: 'PGTA 11/16/2020 19:19:44'!
PASSED!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/16/2020 19:19:44'!
PASSED!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/16/2020 19:19:44'!
PASSED!

!testRun: #CartTest #test03_addedBookToCartHasTheBook stamp: 'PGTA 11/16/2020 19:19:44'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'PGTA 11/16/2020 19:21:19'!
test04_cartContainsAllAddedBooks
	
	| cart book1 book2 |
	cart := Cart new.
	book1 := Book new.
	book2 := Book new.
	
	cart addBook: book1.
	cart addBook: book2.
	self assert: (cart hasBook: book1).
	self assert: (cart hasBook: book2).! !

!testRun: #CartTest #test04_cartContainsAllAddedBooks stamp: 'PGTA 11/16/2020 19:21:21'!
FAILURE!
!Cart methodsFor: 'cart operations' stamp: 'PGTA 11/16/2020 19:22:23' prior: 50867881!
addBook: aBook 
	content add: aBook.! !

!testRun: #CartTest #test04_cartContainsAllAddedBooks stamp: 'PGTA 11/16/2020 19:22:24'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'PGTA 11/16/2020 19:23:06' overrides: 16896425!
initialize
	content = OrderedCollection new.! !
!Cart methodsFor: 'testing' stamp: 'PGTA 11/16/2020 19:23:13' prior: 50867977 overrides: 16896425!
initialize
	content := OrderedCollection new.! !

!testRun: #CartTest #test04_cartContainsAllAddedBooks stamp: 'PGTA 11/16/2020 19:24:29'!
FAILURE!
!Cart methodsFor: 'testing' stamp: 'PGTA 11/16/2020 19:24:57' prior: 50867928!
hasBook: aBook 
	^content includes: aBook.! !

!testRun: #CartTest #test04_cartContainsAllAddedBooks stamp: 'PGTA 11/16/2020 19:24:59'!
PASSED!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/16/2020 19:24:59'!
FAILURE!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/16/2020 19:24:59'!
PASSED!

!testRun: #CartTest #test03_addedBookToCartHasTheBook stamp: 'PGTA 11/16/2020 19:24:59'!
PASSED!

!testRun: #CartTest #test04_cartContainsAllAddedBooks stamp: 'PGTA 11/16/2020 19:24:59'!
PASSED!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/16/2020 19:24:59'!
FAILURE!
!Cart methodsFor: 'testing' stamp: 'PGTA 11/16/2020 19:25:24' prior: 50867902!
isEmpty
	^content isEmpty.! !

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/16/2020 19:25:25'!
PASSED!

!testRun: #CartTest #test04_cartContainsAllAddedBooks stamp: 'PGTA 11/16/2020 19:25:28'!
PASSED!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/16/2020 19:25:28'!
PASSED!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/16/2020 19:25:28'!
PASSED!

!testRun: #CartTest #test03_addedBookToCartHasTheBook stamp: 'PGTA 11/16/2020 19:25:28'!
PASSED!

!testRun: #CartTest #test04_cartContainsAllAddedBooks stamp: 'PGTA 11/16/2020 19:25:28'!
PASSED!

----SNAPSHOT----(16 November 2020 19:35:40) CuisUniversity-4384.image priorSource: 17156227!

----QUIT----(16 November 2020 19:35:45) CuisUniversity-4384.image priorSource: 17164287!

----STARTUP---- (18 November 2020 18:13:03) as /home/pablo/Documents/Ingenieria1/repoNuestro/20-TusLibros/cuis/CuisUniversity-4384.image!


a := set new.
a add: 4.!

a := Set new.
a add: 4.!

a!
!CartTest methodsFor: 'tests' stamp: 'PGTA 11/18/2020 19:07:32'!
test05_cannotAddBookOutsideTheCatalogIntoCart
	
	| book1 isbn1 isbn2 cart catalog |
	
	isbn1 := 12345.	
	isbn2 := 123456.	
	
	catalog := Set new.
	catalog add: isbn1.
	catalog add: isbn2.
	
	cart := Cart new.
	cart addBook: isbn1.
	cart addBook: isbn2.
	
	self should: [cart addBook: 1234567] 
		raise: Error - MessageNotUnderstood 
		withMessageText: cart class ISBNNotInCatalogErrorDescription.! !
!CartTest methodsFor: 'tests' stamp: 'PGTA 11/18/2020 19:07:46' prior: 50868046!
test05_cannotAddBookOutsideTheCatalogIntoCart
	
	| isbn1 isbn2 cart catalog |
	
	isbn1 := 12345.	
	isbn2 := 123456.	
	
	catalog := Set new.
	catalog add: isbn1.
	catalog add: isbn2.
	
	cart := Cart new.
	cart addBook: isbn1.
	cart addBook: isbn2.
	
	self should: [cart addBook: 1234567] 
		raise: Error - MessageNotUnderstood 
		withMessageText: cart class ISBNNotInCatalogErrorDescription.! !

!testRun: #CartTest #test05_cannotAddBookOutsideTheCatalogIntoCart stamp: 'PGTA 11/18/2020 19:07:50'!
ERROR!
!Cart class methodsFor: 'errors' stamp: 'PGTA 11/18/2020 19:08:39'!
ISBNNotInCatalogErrorDescription
	self shouldBeImplemented.! !
!Cart class methodsFor: 'errors' stamp: 'PGTA 11/18/2020 19:09:26' prior: 50868080!
ISBNNotInCatalogErrorDescription
	^'ISBN not in catalog.'! !

!testRun: #CartTest #test05_cannotAddBookOutsideTheCatalogIntoCart stamp: 'PGTA 11/18/2020 19:09:28'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'PGTA 11/18/2020 19:09:59' prior: 50868062!
test05_cannotAddBookOutsideTheCatalogIntoCart
	
	| isbn1 isbn2 cart catalog |
	
	isbn1 := 12345.	
	isbn2 := 123456.	
	
	catalog := Set new.
	catalog add: isbn1.
	catalog add: isbn2.
	
	cart := Cart withCatalog: catalog.
	cart addBook: isbn1.
	cart addBook: isbn2.
	
	self should: [cart addBook: 1234567] 
		raise: Error - MessageNotUnderstood 
		withMessageText: cart class ISBNNotInCatalogErrorDescription.! !

!testRun: #CartTest #test05_cannotAddBookOutsideTheCatalogIntoCart stamp: 'PGTA 11/18/2020 19:10:02'!
ERROR!
!Cart class methodsFor: 'instance creation' stamp: 'PGTA 11/18/2020 19:10:12'!
withCatalog: aSet 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCatalog: aSet ! !
!Cart class methodsFor: 'instance creation' stamp: 'PGTA 11/18/2020 19:10:57' prior: 50868112!
withCatalog: aCatalog

	^self new initializeWithCatalog: aCatalog ! !

!testRun: #CartTest #test05_cannotAddBookOutsideTheCatalogIntoCart stamp: 'PGTA 11/18/2020 19:10:59'!
ERROR!

!classDefinition: #Cart category: 'Tus-Libros' stamp: 'PGTA 11/18/2020 19:11:17'!
Object subclass: #Cart
	instanceVariableNames: 'content catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!Cart methodsFor: 'initialization' stamp: 'PGTA 11/18/2020 19:11:17'!
initializeWithCatalog: aCatalog 
	self shouldBeImplemented.
	catalog := aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'PGTA 11/18/2020 19:11:29' prior: 50868135!
initializeWithCatalog: aCatalog 
	catalog := aCatalog.! !

!testRun: #CartTest #test05_cannotAddBookOutsideTheCatalogIntoCart stamp: 'PGTA 11/18/2020 19:11:31'!
FAILURE!
!Cart methodsFor: 'initialization' stamp: 'PGTA 11/18/2020 19:12:39' prior: 50868141!
initializeWithCatalog: aCatalog
	content := OrderedCollection new.
	catalog := aCatalog.! !

!testRun: #CartTest #test05_cannotAddBookOutsideTheCatalogIntoCart stamp: 'PGTA 11/18/2020 19:12:44'!
FAILURE!
!Cart methodsFor: 'cart operations' stamp: 'PGTA 11/18/2020 19:15:28' prior: 50867970!
addBook: aBook
	(catalog includes: aBook) ifFalse: [ self error: self class ISBNNotInCatalogErrorDescription ].
	content add: aBook.! !

!testRun: #CartTest #test05_cannotAddBookOutsideTheCatalogIntoCart stamp: 'PGTA 11/18/2020 19:15:34'!
PASSED!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/18/2020 19:15:34'!
PASSED!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/18/2020 19:15:34'!
ERROR!

!testRun: #CartTest #test03_addedBookToCartHasTheBook stamp: 'PGTA 11/18/2020 19:15:34'!
ERROR!

!testRun: #CartTest #test04_cartContainsAllAddedBooks stamp: 'PGTA 11/18/2020 19:15:34'!
ERROR!

!testRun: #CartTest #test05_cannotAddBookOutsideTheCatalogIntoCart stamp: 'PGTA 11/18/2020 19:15:34'!
PASSED!
!Cart methodsFor: 'cart operations' stamp: 'PGTA 11/18/2020 19:16:17'!
addBookISBN: aBook
	(catalog includes: aBook) ifFalse: [ self error: self class ISBNNotInCatalogErrorDescription ].
	content add: aBook.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/18/2020 19:16:17' prior: 50867956!
test04_cartContainsAllAddedBooks
	
	| cart book1 book2 |
	cart := Cart new.
	book1 := Book new.
	book2 := Book new.
	
	cart addBookISBN: book1.
	cart addBookISBN: book2.
	self assert: (cart hasBook: book1).
	self assert: (cart hasBook: book2).! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/18/2020 19:16:17' prior: 50867891!
test02_cartWithOneBookIsNotEmpty
	
	| cart book |
	cart := Cart new.
	book := Book new.
	
	cart addBookISBN: book.
	self assert: (cart isEmpty not).! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/18/2020 19:16:17' prior: 50868093!
test05_cannotAddBookOutsideTheCatalogIntoCart
	
	| isbn1 isbn2 cart catalog |
	
	isbn1 := 12345.	
	isbn2 := 123456.	
	
	catalog := Set new.
	catalog add: isbn1.
	catalog add: isbn2.
	
	cart := Cart withCatalog: catalog.
	cart addBookISBN: isbn1.
	cart addBookISBN: isbn2.
	
	self should: [cart addBookISBN: 1234567] 
		raise: Error - MessageNotUnderstood 
		withMessageText: cart class ISBNNotInCatalogErrorDescription.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/18/2020 19:16:17' prior: 50867914!
test03_addedBookToCartHasTheBook
	
	| cart book |
	cart := Cart new.
	book := Book new.
	
	cart addBookISBN: book.
	self assert: (cart hasBook: book).! !

!methodRemoval: Cart #addBook: stamp: 'PGTA 11/18/2020 19:16:17'!
addBook: aBook
	(catalog includes: aBook) ifFalse: [ self error: self class ISBNNotInCatalogErrorDescription ].
	content add: aBook.!
!Cart methodsFor: 'cart operations' stamp: 'PGTA 11/18/2020 19:16:43' prior: 50868185!
addBookISBN: anISBN
	(catalog includes: anISBN) ifFalse: [ self error: self class ISBNNotInCatalogErrorDescription ].
	content add: anISBN.! !
!CartTest methodsFor: 'tests' stamp: 'PGTA 11/18/2020 19:17:30' prior: 50867817!
test01_newCartIsAnEmptyCart
	
	| cart |
	cart := Cart initializeWithCatalog: Set new.
	
	self assert: cart isEmpty.! !
!CartTest methodsFor: 'tests' stamp: 'PGTA 11/18/2020 19:18:27' prior: 50868204!
test02_cartWithOneBookIsNotEmpty
	
	| cart |
	cart := Cart initializeWithCatalog: (Set with: 12345).
	
	cart addBookISBN: 12345.
	self assert: (cart isEmpty not).! !

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/18/2020 19:18:35'!
ERROR!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/18/2020 19:18:35'!
ERROR!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/18/2020 19:18:42'!
ERROR!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/18/2020 19:18:42'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'PGTA 11/18/2020 19:19:30' prior: 50868250!
test01_newCartIsAnEmptyCart
	
	| cart |
	cart := Cart withCatalog: Set new.
	
	self assert: cart isEmpty.! !
!CartTest methodsFor: 'tests' stamp: 'PGTA 11/18/2020 19:19:36' prior: 50868257!
test02_cartWithOneBookIsNotEmpty
	
	| cart |
	cart := Cart withCatalog: (Set with: 12345).
	
	cart addBookISBN: 12345.
	self assert: (cart isEmpty not).! !

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/18/2020 19:19:43'!
PASSED!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/18/2020 19:19:46'!
PASSED!

!methodRemoval: CartTest #test03_addedBookToCartHasTheBook stamp: 'PGTA 11/18/2020 19:21:12'!
test03_addedBookToCartHasTheBook
	
	| cart book |
	cart := Cart new.
	book := Book new.
	
	cart addBookISBN: book.
	self assert: (cart hasBook: book).!
!CartTest methodsFor: 'tests' stamp: 'PGTA 11/18/2020 19:23:54' prior: 50868193!
test04_cartContainsAllAddedBooks
	
	| cart isbn1 isbn2 |
	
	isbn1 := 12345.
	isbn2 := 123456.
	
	cart := Cart withCatalog: (Set with: isbn1 with: isbn2).
	
	cart addBookISBN: isbn1.
	cart addBookISBN: isbn2.
	self assert: (cart content includes: isbn1).
	self assert: (cart content includes: isbn2).! !

!testRun: #CartTest #test04_cartContainsAllAddedBooks stamp: 'PGTA 11/18/2020 19:23:58'!
ERROR!

!testRun: #CartTest #test04_cartContainsAllAddedBooks stamp: 'PGTA 11/18/2020 19:23:58'!
ERROR!

!testRun: #CartTest #test04_cartContainsAllAddedBooks stamp: 'PGTA 11/18/2020 19:24:08'!
ERROR!
!Cart methodsFor: 'private' stamp: 'PGTA 11/18/2020 19:24:56'!
content
	self shouldBeImplemented.
	^content! !
!Cart methodsFor: 'private' stamp: 'PGTA 11/18/2020 19:25:09' prior: 50868326!
content
	^content copy.! !

!testRun: #CartTest #test04_cartContainsAllAddedBooks stamp: 'PGTA 11/18/2020 19:25:10'!
PASSED!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/18/2020 19:25:10'!
PASSED!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/18/2020 19:25:10'!
PASSED!

!testRun: #CartTest #test04_cartContainsAllAddedBooks stamp: 'PGTA 11/18/2020 19:25:10'!
PASSED!

!testRun: #CartTest #test05_cannotAddBookOutsideTheCatalogIntoCart stamp: 'PGTA 11/18/2020 19:25:10'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'PGTA 11/18/2020 19:25:50'!
test03_cannotAddBookOutsideTheCatalogIntoCart
	
	| isbn1 isbn2 cart catalog |
	
	isbn1 := 12345.	
	isbn2 := 123456.	
	
	catalog := Set new.
	catalog add: isbn1.
	catalog add: isbn2.
	
	cart := Cart withCatalog: catalog.
	cart addBookISBN: isbn1.
	cart addBookISBN: isbn2.
	
	self should: [cart addBookISBN: 1234567] 
		raise: Error - MessageNotUnderstood 
		withMessageText: cart class ISBNNotInCatalogErrorDescription.! !

!methodRemoval: CartTest #test05_cannotAddBookOutsideTheCatalogIntoCart stamp: 'PGTA 11/18/2020 19:25:50'!
test05_cannotAddBookOutsideTheCatalogIntoCart
	
	| isbn1 isbn2 cart catalog |
	
	isbn1 := 12345.	
	isbn2 := 123456.	
	
	catalog := Set new.
	catalog add: isbn1.
	catalog add: isbn2.
	
	cart := Cart withCatalog: catalog.
	cart addBookISBN: isbn1.
	cart addBookISBN: isbn2.
	
	self should: [cart addBookISBN: 1234567] 
		raise: Error - MessageNotUnderstood 
		withMessageText: cart class ISBNNotInCatalogErrorDescription.!
!CartTest methodsFor: 'tests' stamp: 'PGTA 11/18/2020 19:26:02'!
test04_cartContainsAllAddedBooksISBN
	
	| cart isbn1 isbn2 |
	
	isbn1 := 12345.
	isbn2 := 123456.
	
	cart := Cart withCatalog: (Set with: isbn1 with: isbn2).
	
	cart addBookISBN: isbn1.
	cart addBookISBN: isbn2.
	self assert: (cart content includes: isbn1).
	self assert: (cart content includes: isbn2).! !

!methodRemoval: CartTest #test04_cartContainsAllAddedBooks stamp: 'PGTA 11/18/2020 19:26:02'!
test04_cartContainsAllAddedBooks
	
	| cart isbn1 isbn2 |
	
	isbn1 := 12345.
	isbn2 := 123456.
	
	cart := Cart withCatalog: (Set with: isbn1 with: isbn2).
	
	cart addBookISBN: isbn1.
	cart addBookISBN: isbn2.
	self assert: (cart content includes: isbn1).
	self assert: (cart content includes: isbn2).!
!CartTest methodsFor: 'tests' stamp: 'PGTA 11/18/2020 19:26:18'!
test03_cannotAddISBNOutsideTheCatalogIntoCart
	
	| isbn1 isbn2 cart catalog |
	
	isbn1 := 12345.	
	isbn2 := 123456.	
	
	catalog := Set new.
	catalog add: isbn1.
	catalog add: isbn2.
	
	cart := Cart withCatalog: catalog.
	cart addBookISBN: isbn1.
	cart addBookISBN: isbn2.
	
	self should: [cart addBookISBN: 1234567] 
		raise: Error - MessageNotUnderstood 
		withMessageText: cart class ISBNNotInCatalogErrorDescription.! !

!methodRemoval: CartTest #test03_cannotAddBookOutsideTheCatalogIntoCart stamp: 'PGTA 11/18/2020 19:26:18'!
test03_cannotAddBookOutsideTheCatalogIntoCart
	
	| isbn1 isbn2 cart catalog |
	
	isbn1 := 12345.	
	isbn2 := 123456.	
	
	catalog := Set new.
	catalog add: isbn1.
	catalog add: isbn2.
	
	cart := Cart withCatalog: catalog.
	cart addBookISBN: isbn1.
	cart addBookISBN: isbn2.
	
	self should: [cart addBookISBN: 1234567] 
		raise: Error - MessageNotUnderstood 
		withMessageText: cart class ISBNNotInCatalogErrorDescription.!

----QUIT----(18 November 2020 19:29:04) CuisUniversity-4384.image priorSource: 17164381!

----STARTUP---- (18 November 2020 20:15:59) as C:\Users\paujimenez\Documents\Ingenieria1\IS1-2c-2020\20-TusLibros\cuis\CuisUniversity-4384.image!


!testRun: #CartTest #test04_cartContainsAllAddedBooksISBN stamp: 'PJ 11/18/2020 20:20:37'!
PASSED!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PJ 11/18/2020 20:20:37'!
PASSED!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PJ 11/18/2020 20:20:37'!
PASSED!

!testRun: #CartTest #test03_cannotAddISBNOutsideTheCatalogIntoCart stamp: 'PJ 11/18/2020 20:20:37'!
PASSED!

!testRun: #CartTest #test04_cartContainsAllAddedBooksISBN stamp: 'PJ 11/18/2020 20:20:37'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'PJ 11/18/2020 21:14:02'!
test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN
	
	| cart isbn1 isbn2 |
	
	isbn1 := 12345.
	isbn2 := 123456.
	
	cart := Cart withCatalog: (Set with: isbn1 with: isbn2).
	
	cart addBookISBN: isbn1 quantity: 2.
	cart addBookISBN: isbn2 quantity: 5.
	
	self assert: 2 equals: (cart content at: isbn1).
	self assert: 5 equals: (cart content at: isbn2).! !

!testRun: #CartTest #test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN stamp: 'PJ 11/18/2020 21:14:13'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'PJ 11/18/2020 21:14:41'!
addBookISBN: aSmallInteger quantity: aSmallInteger2 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'PJ 11/18/2020 21:15:51' prior: 50868477!
addBookISBN: anISBN quantity: aNumberOfCopies 
	! !

!testRun: #CartTest #test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN stamp: 'PJ 11/18/2020 21:15:59'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'PJ 11/18/2020 21:17:38' prior: 50868483!
addBookISBN: anISBN quantity: aNumberOfCopies 
	
	(catalog includes: anISBN) ifFalse: [ ^self error: self class ISBNNotInCatalogErrorDescription ].
	content add: anISBN withOccurrences: aNumberOfCopies.! !

cart content at: isbn1!
!Cart methodsFor: 'initialization' stamp: 'PJ 11/18/2020 21:19:01' prior: 50868149!
initializeWithCatalog: aCatalog
	
	content := Bag new.
	catalog := aCatalog.! !

cart content at: isbn1!

cart content!
!Cart methodsFor: 'private' stamp: 'PJ 11/18/2020 21:20:48' prior: 50868330!
content
	^content content copy.! !

cart content!
!Cart methodsFor: 'private' stamp: 'PJ 11/18/2020 21:21:55' prior: 50868508!
content
	^content contents copy.! !

cart content!

cart content at: isbn1!

cart content at: isbn2!

!testRun: #CartTest #test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN stamp: 'PJ 11/18/2020 21:22:35'!
PASSED!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PJ 11/18/2020 21:22:35'!
PASSED!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PJ 11/18/2020 21:22:35'!
PASSED!

!testRun: #CartTest #test03_cannotAddISBNOutsideTheCatalogIntoCart stamp: 'PJ 11/18/2020 21:22:35'!
PASSED!

!testRun: #CartTest #test04_cartContainsAllAddedBooksISBN stamp: 'PJ 11/18/2020 21:22:35'!
FAILURE!

!testRun: #CartTest #test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN stamp: 'PJ 11/18/2020 21:22:35'!
PASSED!

!testRun: #CartTest #test04_cartContainsAllAddedBooksISBN stamp: 'PJ 11/18/2020 21:22:35'!
FAILURE!

cart content includes: isbn1!

cart content includesKey: isbn1!
!CartTest methodsFor: 'tests' stamp: 'PJ 11/18/2020 21:24:31' prior: 50868381!
test04_cartContainsAllAddedBooksISBN
	
	| cart isbn1 isbn2 |
	
	isbn1 := 12345.
	isbn2 := 123456.
	
	cart := Cart withCatalog: (Set with: isbn1 with: isbn2).
	
	cart addBookISBN: isbn1.
	cart addBookISBN: isbn2.
	self assert: (cart content includesKey: isbn1).
	self assert: (cart content includesKey: isbn2).! !

!testRun: #CartTest #test04_cartContainsAllAddedBooksISBN stamp: 'PJ 11/18/2020 21:24:34'!
PASSED!

!testRun: #CartTest #test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN stamp: 'PJ 11/18/2020 21:24:44'!
PASSED!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PJ 11/18/2020 21:24:44'!
PASSED!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PJ 11/18/2020 21:24:44'!
PASSED!

!testRun: #CartTest #test03_cannotAddISBNOutsideTheCatalogIntoCart stamp: 'PJ 11/18/2020 21:24:44'!
PASSED!

!testRun: #CartTest #test04_cartContainsAllAddedBooksISBN stamp: 'PJ 11/18/2020 21:24:44'!
PASSED!

!testRun: #CartTest #test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN stamp: 'PJ 11/18/2020 21:24:44'!
PASSED!

!methodRemoval: Cart #addBookISBN: stamp: 'PJ 11/18/2020 21:25:34'!
addBookISBN: anISBN
	(catalog includes: anISBN) ifFalse: [ self error: self class ISBNNotInCatalogErrorDescription ].
	content add: anISBN.!

!methodRemoval: Cart #initialize stamp: 'PJ 11/18/2020 21:26:35'!
initialize
	content := OrderedCollection new.!

!classRemoval: #Book stamp: 'PJ 11/18/2020 21:27:57'!
Object subclass: #Book
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!

!testRun: #CartTest #test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN stamp: 'PJ 11/18/2020 21:28:02'!
PASSED!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PJ 11/18/2020 21:28:02'!
PASSED!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PJ 11/18/2020 21:28:02'!
ERROR!

!testRun: #CartTest #test03_cannotAddISBNOutsideTheCatalogIntoCart stamp: 'PJ 11/18/2020 21:28:02'!
ERROR!

!testRun: #CartTest #test04_cartContainsAllAddedBooksISBN stamp: 'PJ 11/18/2020 21:28:02'!
ERROR!

!testRun: #CartTest #test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN stamp: 'PJ 11/18/2020 21:28:02'!
PASSED!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PJ 11/18/2020 21:28:08'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'PJ 11/18/2020 21:28:54' prior: 50868283!
test02_cartWithOneBookIsNotEmpty
	
	| cart |
	cart := Cart withCatalog: (Set with: 12345).
	
	cart addBookISBN: 12345 quantity: 1.
	self assert: (cart isEmpty not).! !

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PJ 11/18/2020 21:28:57'!
PASSED!

!testRun: #CartTest #test03_cannotAddISBNOutsideTheCatalogIntoCart stamp: 'PJ 11/18/2020 21:29:00'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'PJ 11/18/2020 21:29:34' prior: 50868405!
test03_cannotAddISBNOutsideTheCatalogIntoCart
	
	| isbn1 isbn2 cart catalog |
	
	isbn1 := 12345.	
	isbn2 := 123456.	
	
	catalog := Set new.
	catalog add: isbn1.
	catalog add: isbn2.
	
	cart := Cart withCatalog: catalog.
	cart addBookISBN: isbn1 quantity: 1.
	cart addBookISBN: isbn2 quantity: 1.
	
	self should: [cart addBookISBN: 1234567 quantity: 1] 
		raise: Error - MessageNotUnderstood 
		withMessageText: cart class ISBNNotInCatalogErrorDescription.! !

!testRun: #CartTest #test03_cannotAddISBNOutsideTheCatalogIntoCart stamp: 'PJ 11/18/2020 21:29:40'!
PASSED!

!testRun: #CartTest #test04_cartContainsAllAddedBooksISBN stamp: 'PJ 11/18/2020 21:29:42'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'PJ 11/18/2020 21:29:58' prior: 50868543!
test04_cartContainsAllAddedBooksISBN
	
	| cart isbn1 isbn2 |
	
	isbn1 := 12345.
	isbn2 := 123456.
	
	cart := Cart withCatalog: (Set with: isbn1 with: isbn2).
	
	cart addBookISBN: isbn1 quantity: 1.
	cart addBookISBN: isbn2 quantity: 1.
	self assert: (cart content includesKey: isbn1).
	self assert: (cart content includesKey: isbn2).! !

!testRun: #CartTest #test04_cartContainsAllAddedBooksISBN stamp: 'PJ 11/18/2020 21:30:01'!
PASSED!

!testRun: #CartTest #test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN stamp: 'PJ 11/18/2020 21:30:38'!
PASSED!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PJ 11/18/2020 21:30:38'!
PASSED!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PJ 11/18/2020 21:30:38'!
PASSED!

!testRun: #CartTest #test03_cannotAddISBNOutsideTheCatalogIntoCart stamp: 'PJ 11/18/2020 21:30:38'!
PASSED!

!testRun: #CartTest #test04_cartContainsAllAddedBooksISBN stamp: 'PJ 11/18/2020 21:30:38'!
PASSED!

!testRun: #CartTest #test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN stamp: 'PJ 11/18/2020 21:30:38'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'PJ 11/18/2020 21:36:04'!
test06_theNumberOfCopiesToAddOfABookISBNMustBePositive
	
	| cart isbn1 isbn2 |
	
	isbn1 := 12345.
	isbn2 := 123456.
	
	cart := Cart withCatalog: (Set with: isbn1 with: isbn2).
	
	self should: [cart addBookISBN: isbn1 quantity: 0]
		raise: Error - MessageNotUnderstood
		withMessageText: Cart numberOfCopiesMustBePrositiveErrorDescription.! !

!testRun: #CartTest #test06_theNumberOfCopiesToAddOfABookISBNMustBePositive stamp: 'PJ 11/18/2020 21:36:09'!
ERROR!
!Cart class methodsFor: 'errors' stamp: 'PJ 11/18/2020 21:36:36'!
numberOfCopiesMustBePrositiveErrorDescription
	self shouldBeImplemented.! !
!Cart class methodsFor: 'errors' stamp: 'PJ 11/18/2020 21:37:48' prior: 50868708!
numberOfCopiesMustBePrositiveErrorDescription
	^'Number of copies must be positive'! !
!Cart class methodsFor: 'errors' stamp: 'PJ 11/18/2020 21:38:16'!
numberOfCopiesMustBePositiveErrorDescription
	^'Number of copies must be positive'! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/18/2020 21:38:16' prior: 50868691!
test06_theNumberOfCopiesToAddOfABookISBNMustBePositive
	
	| cart isbn1 isbn2 |
	
	isbn1 := 12345.
	isbn2 := 123456.
	
	cart := Cart withCatalog: (Set with: isbn1 with: isbn2).
	
	self should: [cart addBookISBN: isbn1 quantity: 0]
		raise: Error - MessageNotUnderstood
		withMessageText: Cart numberOfCopiesMustBePositiveErrorDescription.! !

!methodRemoval: Cart class #numberOfCopiesMustBePrositiveErrorDescription stamp: 'PJ 11/18/2020 21:38:16'!
numberOfCopiesMustBePrositiveErrorDescription
	^'Number of copies must be positive'!

!testRun: #CartTest #test06_theNumberOfCopiesToAddOfABookISBNMustBePositive stamp: 'PJ 11/18/2020 21:38:41'!
FAILURE!
!Cart methodsFor: 'cart operations' stamp: 'PJ 11/18/2020 21:40:16' prior: 50868491!
addBookISBN: anISBN quantity: aNumberOfCopies 
	
	(catalog includes: anISBN) ifFalse: [ ^self error: self class ISBNNotInCatalogErrorDescription ].
	(aNumberOfCopies > 0) ifFalse: [ ^self error: self class numberOfCopiesMustBePositiveErrorDescription ].
	content add: anISBN withOccurrences: aNumberOfCopies.! !

!testRun: #CartTest #test06_theNumberOfCopiesToAddOfABookISBNMustBePositive stamp: 'PJ 11/18/2020 21:40:18'!
PASSED!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PJ 11/18/2020 21:40:19'!
PASSED!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PJ 11/18/2020 21:40:19'!
PASSED!

!testRun: #CartTest #test03_cannotAddISBNOutsideTheCatalogIntoCart stamp: 'PJ 11/18/2020 21:40:19'!
PASSED!

!testRun: #CartTest #test04_cartContainsAllAddedBooksISBN stamp: 'PJ 11/18/2020 21:40:19'!
PASSED!

!testRun: #CartTest #test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN stamp: 'PJ 11/18/2020 21:40:19'!
PASSED!

!testRun: #CartTest #test06_theNumberOfCopiesToAddOfABookISBNMustBePositive stamp: 'PJ 11/18/2020 21:40:19'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'PJ 11/18/2020 21:47:40' overrides: 16927572!
setUp
	
	! !

Object subclass: #NameOfSubclass
	instanceVariableNames: 'isbn1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!

!classDefinition: #NameOfSubclass category: 'Tus-Libros' stamp: 'PJ 11/18/2020 21:47:54'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'isbn1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!

Object subclass: #NameOfSubclass
	instanceVariableNames: 'isbn1 isbn2 catalog1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!

!classDefinition: #NameOfSubclass category: 'Tus-Libros' stamp: 'PJ 11/18/2020 21:48:16'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'isbn1 isbn2 catalog1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!

TestCase subclass: #CartTest
	instanceVariableNames: 'isbn1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!CartTest methodsFor: 'tests' stamp: 'PJ 11/18/2020 21:52:04' prior: 50868631!
test03_cannotAddISBNOutsideTheCatalogIntoCart
	
	| isbn1s isbn2s cart catalog |
	
	isbn1s := 12345.	
	isbn2s := 123456.	
	
	catalog := Set new.
	catalog add: isbn1s.
	catalog add: isbn2s.
	
	cart := Cart withCatalog: catalog.
	cart addBookISBN: isbn1s quantity: 1.
	cart addBookISBN: isbn2s quantity: 1.
	
	self should: [cart addBookISBN: 1234567 quantity: 1] 
		raise: Error - MessageNotUnderstood 
		withMessageText: cart class ISBNNotInCatalogErrorDescription.! !
!CartTest methodsFor: 'tests' stamp: 'PJ 11/18/2020 21:52:27' prior: 50868655!
test04_cartContainsAllAddedBooksISBN
	
	| cart isbn1s isbn2s |
	
	isbn1s := 12345.
	isbn2s := 123456.
	
	cart := Cart withCatalog: (Set with: isbn1s with: isbn2s).
	
	cart addBookISBN: isbn1s quantity: 1.
	cart addBookISBN: isbn2s quantity: 1.
	self assert: (cart content includesKey: isbn1s).
	self assert: (cart content includesKey: isbn2s).! !
!CartTest methodsFor: 'tests' stamp: 'PJ 11/18/2020 21:52:48' prior: 50868460!
test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN
	
	| cart isbn1s isbn2s |
	
	isbn1s := 12345.
	isbn2s := 123456.
	
	cart := Cart withCatalog: (Set with: isbn1s with: isbn2s).
	
	cart addBookISBN: isbn1s quantity: 2.
	cart addBookISBN: isbn2s quantity: 5.
	
	self assert: 2 equals: (cart content at: isbn1s).
	self assert: 5 equals: (cart content at: isbn2s).! !
!CartTest methodsFor: 'tests' stamp: 'PJ 11/18/2020 21:53:04' prior: 50868724!
test06_theNumberOfCopiesToAddOfABookISBNMustBePositive
	
	| cart isbn1s isbn2s |
	
	isbn1s := 12345.
	isbn2s := 123456.
	
	cart := Cart withCatalog: (Set with: isbn1s with: isbn2s).
	
	self should: [cart addBookISBN: isbn1s quantity: 0]
		raise: Error - MessageNotUnderstood
		withMessageText: Cart numberOfCopiesMustBePositiveErrorDescription.! !

!classDefinition: #CartTest category: 'Tus-Libros' stamp: 'PJ 11/18/2020 21:53:33'!
TestCase subclass: #CartTest
	instanceVariableNames: 'isbn1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!

!classDefinition: #CartTest category: 'Tus-Libros' stamp: 'PJ 11/18/2020 21:53:35'!
TestCase subclass: #CartTest
	instanceVariableNames: 'isbn1 isbn2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!

!classDefinition: #CartTest category: 'Tus-Libros' stamp: 'PJ 11/18/2020 21:53:36'!
TestCase subclass: #CartTest
	instanceVariableNames: 'isbn1 isbn2 catalog1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!CartTest methodsFor: 'tests' stamp: 'PJ 11/18/2020 21:53:32' prior: 50868784 overrides: 16927572!
setUp
	
	isbn1 := 12345.
	isbn2 := 123456.
	
	catalog1 :=Set with: isbn1 with: isbn2.
	! !

!classRemoval: #NameOfSubclass stamp: 'PJ 11/18/2020 21:54:16'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'isbn1 isbn2 catalog1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!CartTest methodsFor: 'tests' stamp: 'PJ 11/18/2020 21:54:53' prior: 50868277!
test01_newCartIsAnEmptyCart
	
	| cart |
	cart := Cart withCatalog: catalog1.
	
	self assert: cart isEmpty.! !
!CartTest methodsFor: 'tests' stamp: 'PJ 11/18/2020 21:55:26' prior: 50868616!
test02_cartWithOneBookIsNotEmpty
	
	| cart |
	cart := Cart withCatalog: catalog1 .
	
	cart addBookISBN: isbn1 quantity: 1.
	self assert: (cart isEmpty not).! !
!CartTest methodsFor: 'tests' stamp: 'PJ 11/18/2020 21:56:22' prior: 50868815!
test03_cannotAddISBNOutsideTheCatalogIntoCart
	
	| cart |
	
	
	cart := Cart withCatalog: catalog1.
	cart addBookISBN: isbn1 quantity: 1.
	cart addBookISBN: isbn2 quantity: 1.
	
	self should: [cart addBookISBN: 1234567 quantity: 1] 
		raise: Error - MessageNotUnderstood 
		withMessageText: cart class ISBNNotInCatalogErrorDescription.! !
!CartTest methodsFor: 'tests' stamp: 'PJ 11/18/2020 21:56:26' prior: 50868923!
test03_cannotAddISBNOutsideTheCatalogIntoCart
	
	| cart |
	
	cart := Cart withCatalog: catalog1.
	cart addBookISBN: isbn1 quantity: 1.
	cart addBookISBN: isbn2 quantity: 1.
	
	self should: [cart addBookISBN: 1234567 quantity: 1] 
		raise: Error - MessageNotUnderstood 
		withMessageText: cart class ISBNNotInCatalogErrorDescription.! !
!CartTest methodsFor: 'tests' stamp: 'PJ 11/18/2020 21:57:08' prior: 50868833!
test04_cartContainsAllAddedBooksISBN
	
	| cart |
	
	cart := Cart withCatalog: catalog1 .
	
	cart addBookISBN: isbn1 quantity: 1.
	cart addBookISBN: isbn2 quantity: 1.
	self assert: (cart content includesKey: isbn1).
	self assert: (cart content includesKey: isbn2).! !
!CartTest methodsFor: 'tests' stamp: 'PJ 11/18/2020 21:57:44' prior: 50868847!
test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN
	
	| cart |
	
	cart := Cart withCatalog: catalog1 .
	
	cart addBookISBN: isbn1 quantity: 2.
	cart addBookISBN: isbn2 quantity: 5.
	
	self assert: 2 equals: (cart content at: isbn1).
	self assert: 5 equals: (cart content at: isbn2).! !
!CartTest methodsFor: 'tests' stamp: 'PJ 11/18/2020 21:58:40' prior: 50868861!
test06_theNumberOfCopiesToAddOfABookISBNMustBePositive
	
	| cart |
	
	cart := Cart withCatalog: catalog1.
	
	self should: [cart addBookISBN: isbn1 quantity: 0]
		raise: Error - MessageNotUnderstood
		withMessageText: Cart numberOfCopiesMustBePositiveErrorDescription.! !

!testRun: #CartTest #test06_theNumberOfCopiesToAddOfABookISBNMustBePositive stamp: 'PJ 11/18/2020 21:58:42'!
PASSED!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PJ 11/18/2020 21:58:42'!
PASSED!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PJ 11/18/2020 21:58:42'!
PASSED!

!testRun: #CartTest #test03_cannotAddISBNOutsideTheCatalogIntoCart stamp: 'PJ 11/18/2020 21:58:42'!
PASSED!

!testRun: #CartTest #test04_cartContainsAllAddedBooksISBN stamp: 'PJ 11/18/2020 21:58:42'!
PASSED!

!testRun: #CartTest #test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN stamp: 'PJ 11/18/2020 21:58:42'!
PASSED!

!testRun: #CartTest #test06_theNumberOfCopiesToAddOfABookISBNMustBePositive stamp: 'PJ 11/18/2020 21:58:42'!
PASSED!

!classDefinition: #CartTest category: 'Tus-Libros' stamp: 'PJ 11/18/2020 22:05:06'!
TestCase subclass: #CartTest
	instanceVariableNames: 'isbn1 isbn2 catalog1 cart1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!CartTest methodsFor: 'setUp/tearDown' stamp: 'PJ 11/18/2020 22:05:04' prior: 50868896 overrides: 16927572!
setUp
	
	isbn1 := 12345.
	isbn2 := 123456.
	
	catalog1 :=Set with: isbn1 with: isbn2.
	
	cart1 := Cart withCatalog: catalog1.
	! !
!CartTest methodsFor: 'tests' stamp: 'PJ 11/18/2020 22:05:25' prior: 50868909!
test01_newCartIsAnEmptyCart
	
	self assert: cart1 isEmpty.! !
!CartTest methodsFor: 'tests' stamp: 'PJ 11/18/2020 22:05:44' prior: 50868915!
test02_cartWithOneBookIsNotEmpty

	cart1 addBookISBN: isbn1 quantity: 1.
	self assert: (cart1 isEmpty not).! !
!CartTest methodsFor: 'tests' stamp: 'PJ 11/18/2020 22:06:19' prior: 50868937!
test03_cannotAddISBNOutsideTheCatalogIntoCart
	
	cart1 addBookISBN: isbn1 quantity: 1.
	cart1 addBookISBN: isbn2 quantity: 1.
	
	self should: [cart1 addBookISBN: 1234567 quantity: 1] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cart ISBNNotInCatalogErrorDescription.! !
!CartTest methodsFor: 'tests' stamp: 'PJ 11/18/2020 22:06:39' prior: 50868950!
test04_cartContainsAllAddedBooksISBN
	
	cart1 addBookISBN: isbn1 quantity: 1.
	cart1 addBookISBN: isbn2 quantity: 1.
	
	self assert: (cart1 content includesKey: isbn1).
	self assert: (cart1 content includesKey: isbn2).! !
!CartTest methodsFor: 'tests' stamp: 'PJ 11/18/2020 22:06:55' prior: 50868961!
test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN
	
	cart1 addBookISBN: isbn1 quantity: 2.
	cart1 addBookISBN: isbn2 quantity: 5.
	
	self assert: 2 equals: (cart1 content at: isbn1).
	self assert: 5 equals: (cart1 content at: isbn2).! !
!CartTest methodsFor: 'tests' stamp: 'PJ 11/18/2020 22:07:07' prior: 50868973!
test06_theNumberOfCopiesToAddOfABookISBNMustBePositive
	
	self should: [cart1 addBookISBN: isbn1 quantity: 0]
		raise: Error - MessageNotUnderstood
		withMessageText: Cart numberOfCopiesMustBePositiveErrorDescription.! !

!testRun: #CartTest #test06_theNumberOfCopiesToAddOfABookISBNMustBePositive stamp: 'PJ 11/18/2020 22:07:12'!
PASSED!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PJ 11/18/2020 22:07:12'!
PASSED!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PJ 11/18/2020 22:07:12'!
PASSED!

!testRun: #CartTest #test03_cannotAddISBNOutsideTheCatalogIntoCart stamp: 'PJ 11/18/2020 22:07:12'!
PASSED!

!testRun: #CartTest #test04_cartContainsAllAddedBooksISBN stamp: 'PJ 11/18/2020 22:07:12'!
PASSED!

!testRun: #CartTest #test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN stamp: 'PJ 11/18/2020 22:07:12'!
PASSED!

!testRun: #CartTest #test06_theNumberOfCopiesToAddOfABookISBNMustBePositive stamp: 'PJ 11/18/2020 22:07:12'!
PASSED!

!testRun: #CartTest #test06_theNumberOfCopiesToAddOfABookISBNMustBePositive stamp: 'PJ 11/18/2020 22:10:50'!
PASSED!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PJ 11/18/2020 22:10:50'!
PASSED!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PJ 11/18/2020 22:10:50'!
PASSED!

!testRun: #CartTest #test03_cannotAddISBNOutsideTheCatalogIntoCart stamp: 'PJ 11/18/2020 22:10:50'!
PASSED!

!testRun: #CartTest #test04_cartContainsAllAddedBooksISBN stamp: 'PJ 11/18/2020 22:10:50'!
PASSED!

!testRun: #CartTest #test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN stamp: 'PJ 11/18/2020 22:10:50'!
PASSED!

!testRun: #CartTest #test06_theNumberOfCopiesToAddOfABookISBNMustBePositive stamp: 'PJ 11/18/2020 22:10:50'!
PASSED!

----QUIT----(18 November 2020 22:15:09) CuisUniversity-4384.image priorSource: 17177175!

----STARTUP---- (19 November 2020 19:23:48) as /home/pablo/Documents/Ingenieria1/cuis_TusLibros2/CuisUniversity-4384.image!


----End fileIn of /home/pablo/Documents/Ingenieria1/cuis_TusLibros2/Tus-Libros.st----!

----SNAPSHOT----(19 November 2020 19:24:09) CuisUniversity-4384.image priorSource: 17155564!
!CartTest methodsFor: 'tests' stamp: 'PGTA 11/19/2020 19:28:26'!
test07_theNumberOfCopiesToAddOfABookISBNMustBeInteger
	
	self should: [cart1 addBookISBN: isbn1 quantity: 3.141592654]
		raise: Error - MessageNotUnderstood
		withMessageText: Cart numberOfCopiesMustBeIntegerErrorDescription.! !

!testRun: #CartTest #test07_theNumberOfCopiesToAddOfABookISBNMustBeInteger stamp: 'PGTA 11/19/2020 19:28:29'!
ERROR!
!Cart class methodsFor: 'errors' stamp: 'PGTA 11/19/2020 19:28:42'!
numberOfCopiesMustBeIntegerErrorDescription
	self shouldBeImplemented.! !
!Cart class methodsFor: 'errors' stamp: 'PGTA 11/19/2020 19:29:31' prior: 50867918!
numberOfCopiesMustBeIntegerErrorDescription
	^'Number of copies must be integer'! !

!testRun: #CartTest #test07_theNumberOfCopiesToAddOfABookISBNMustBeInteger stamp: 'PGTA 11/19/2020 19:29:33'!
FAILURE!

!testRun: #CartTest #test07_theNumberOfCopiesToAddOfABookISBNMustBeInteger stamp: 'PGTA 11/19/2020 19:29:56'!
FAILURE!
!Cart methodsFor: 'cart operations' stamp: 'PGTA 11/19/2020 19:30:59' prior: 50867862!
addBookISBN: anISBN quantity: aNumberOfCopies 
	
	(catalog includes: anISBN) ifFalse: [ ^self error: self class ISBNNotInCatalogErrorDescription ].
	(aNumberOfCopies > 0) ifFalse: [ ^self error: self class numberOfCopiesMustBePositiveErrorDescription ].
	(aNumberOfCopies isKindOf: Integer) ifFalse: [ ^self error: self class numberOfCopiesMustBeIntegerErrorDescription ].
	content add: anISBN withOccurrences: aNumberOfCopies.! !

!testRun: #CartTest #test07_theNumberOfCopiesToAddOfABookISBNMustBeInteger stamp: 'PGTA 11/19/2020 19:31:00'!
PASSED!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/19/2020 19:31:00'!
PASSED!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/19/2020 19:31:00'!
PASSED!

!testRun: #CartTest #test03_cannotAddISBNOutsideTheCatalogIntoCart stamp: 'PGTA 11/19/2020 19:31:00'!
PASSED!

!testRun: #CartTest #test04_cartContainsAllAddedBooksISBN stamp: 'PGTA 11/19/2020 19:31:00'!
PASSED!

!testRun: #CartTest #test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN stamp: 'PGTA 11/19/2020 19:31:00'!
PASSED!

!testRun: #CartTest #test06_theNumberOfCopiesToAddOfABookISBNMustBePositive stamp: 'PGTA 11/19/2020 19:31:00'!
PASSED!

!testRun: #CartTest #test07_theNumberOfCopiesToAddOfABookISBNMustBeInteger stamp: 'PGTA 11/19/2020 19:31:00'!
PASSED!
!Cart methodsFor: 'cart operations' stamp: 'PGTA 11/19/2020 19:34:19'!
add: anISBN quantity: aNumberOfCopies 
	
	(catalog includes: anISBN) ifFalse: [ ^self error: self class ISBNNotInCatalogErrorDescription ].
	(aNumberOfCopies > 0) ifFalse: [ ^self error: self class numberOfCopiesMustBePositiveErrorDescription ].
	(aNumberOfCopies isKindOf: Integer) ifFalse: [ ^self error: self class numberOfCopiesMustBeIntegerErrorDescription ].
	content add: anISBN withOccurrences: aNumberOfCopies.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/19/2020 19:34:19' prior: 50867829!
test06_theNumberOfCopiesToAddOfABookISBNMustBePositive
	
	self should: [cart1 add: isbn1 quantity: 0]
		raise: Error - MessageNotUnderstood
		withMessageText: Cart numberOfCopiesMustBePositiveErrorDescription.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/19/2020 19:34:19' prior: 50867793!
test02_cartWithOneBookIsNotEmpty

	cart1 add: isbn1 quantity: 1.
	self assert: (cart1 isEmpty not).! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/19/2020 19:34:19' prior: 50867810!
test04_cartContainsAllAddedBooksISBN
	
	cart1 add: isbn1 quantity: 1.
	cart1 add: isbn2 quantity: 1.
	
	self assert: (cart1 content includesKey: isbn1).
	self assert: (cart1 content includesKey: isbn2).! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/19/2020 19:34:19' prior: 50867905!
test07_theNumberOfCopiesToAddOfABookISBNMustBeInteger
	
	self should: [cart1 add: isbn1 quantity: 3.141592654]
		raise: Error - MessageNotUnderstood
		withMessageText: Cart numberOfCopiesMustBeIntegerErrorDescription.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/19/2020 19:34:19' prior: 50867799!
test03_cannotAddISBNOutsideTheCatalogIntoCart
	
	cart1 add: isbn1 quantity: 1.
	cart1 add: isbn2 quantity: 1.
	
	self should: [cart1 add: 1234567 quantity: 1] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cart ISBNNotInCatalogErrorDescription.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/19/2020 19:34:19' prior: 50867819!
test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN
	
	cart1 add: isbn1 quantity: 2.
	cart1 add: isbn2 quantity: 5.
	
	self assert: 2 equals: (cart1 content at: isbn1).
	self assert: 5 equals: (cart1 content at: isbn2).! !

!methodRemoval: Cart #addBookISBN:quantity: stamp: 'PGTA 11/19/2020 19:34:19'!
addBookISBN: anISBN quantity: aNumberOfCopies 
	
	(catalog includes: anISBN) ifFalse: [ ^self error: self class ISBNNotInCatalogErrorDescription ].
	(aNumberOfCopies > 0) ifFalse: [ ^self error: self class numberOfCopiesMustBePositiveErrorDescription ].
	(aNumberOfCopies isKindOf: Integer) ifFalse: [ ^self error: self class numberOfCopiesMustBeIntegerErrorDescription ].
	content add: anISBN withOccurrences: aNumberOfCopies.!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/19/2020 19:34:32'!
PASSED!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/19/2020 19:34:32'!
PASSED!

!testRun: #CartTest #test03_cannotAddISBNOutsideTheCatalogIntoCart stamp: 'PGTA 11/19/2020 19:34:32'!
PASSED!

!testRun: #CartTest #test04_cartContainsAllAddedBooksISBN stamp: 'PGTA 11/19/2020 19:34:32'!
PASSED!

!testRun: #CartTest #test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN stamp: 'PGTA 11/19/2020 19:34:32'!
PASSED!

!testRun: #CartTest #test06_theNumberOfCopiesToAddOfABookISBNMustBePositive stamp: 'PGTA 11/19/2020 19:34:32'!
PASSED!

!testRun: #CartTest #test07_theNumberOfCopiesToAddOfABookISBNMustBeInteger stamp: 'PGTA 11/19/2020 19:34:32'!
PASSED!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/19/2020 19:34:37'!
PASSED!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/19/2020 19:34:37'!
PASSED!

!testRun: #CartTest #test03_cannotAddISBNOutsideTheCatalogIntoCart stamp: 'PGTA 11/19/2020 19:34:37'!
PASSED!

!testRun: #CartTest #test04_cartContainsAllAddedBooksISBN stamp: 'PGTA 11/19/2020 19:34:37'!
PASSED!

!testRun: #CartTest #test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN stamp: 'PGTA 11/19/2020 19:34:37'!
PASSED!

!testRun: #CartTest #test06_theNumberOfCopiesToAddOfABookISBNMustBePositive stamp: 'PGTA 11/19/2020 19:34:37'!
PASSED!

!testRun: #CartTest #test07_theNumberOfCopiesToAddOfABookISBNMustBeInteger stamp: 'PGTA 11/19/2020 19:34:37'!
PASSED!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/19/2020 19:34:45'!
PASSED!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/19/2020 19:34:45'!
PASSED!

!testRun: #CartTest #test03_cannotAddISBNOutsideTheCatalogIntoCart stamp: 'PGTA 11/19/2020 19:34:45'!
PASSED!

!testRun: #CartTest #test04_cartContainsAllAddedBooksISBN stamp: 'PGTA 11/19/2020 19:34:45'!
PASSED!

!testRun: #CartTest #test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN stamp: 'PGTA 11/19/2020 19:34:45'!
PASSED!

!testRun: #CartTest #test06_theNumberOfCopiesToAddOfABookISBNMustBePositive stamp: 'PGTA 11/19/2020 19:34:45'!
PASSED!

!testRun: #CartTest #test07_theNumberOfCopiesToAddOfABookISBNMustBeInteger stamp: 'PGTA 11/19/2020 19:34:45'!
PASSED!

!methodRemoval: Cart #hasBook: stamp: 'PGTA 11/19/2020 19:35:03'!
hasBook: aBook 
	^content includes: aBook.!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/19/2020 19:35:23'!
PASSED!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/19/2020 19:35:23'!
PASSED!

!testRun: #CartTest #test03_cannotAddISBNOutsideTheCatalogIntoCart stamp: 'PGTA 11/19/2020 19:35:23'!
PASSED!

!testRun: #CartTest #test04_cartContainsAllAddedBooksISBN stamp: 'PGTA 11/19/2020 19:35:23'!
PASSED!

!testRun: #CartTest #test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN stamp: 'PGTA 11/19/2020 19:35:23'!
PASSED!

!testRun: #CartTest #test06_theNumberOfCopiesToAddOfABookISBNMustBePositive stamp: 'PGTA 11/19/2020 19:35:23'!
PASSED!

!testRun: #CartTest #test07_theNumberOfCopiesToAddOfABookISBNMustBeInteger stamp: 'PGTA 11/19/2020 19:35:23'!
PASSED!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!

!classDefinition: #CashierTest category: 'Tus-Libros' stamp: 'PGTA 11/19/2020 19:39:43'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!

!classDefinition: #Cashier category: 'Tus-Libros' stamp: 'PGTA 11/19/2020 19:45:44'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!CashierTest methodsFor: 'no messages' stamp: 'PGTA 11/19/2020 19:45:34'!
test01_CashierCannotCheckoutAnEmptyCart
	
	| cashier cart |
	cart := Cart withCatalog: (Set new).
	cashier := Cashier new.
	
	self should: [ cashier checkOut: cart ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier cannotCheckoutAnEmptyCartErrorDescription.! !

!testRun: #CashierTest #test01_CashierCannotCheckoutAnEmptyCart stamp: 'PGTA 11/19/2020 19:45:50'!
ERROR!
!Cashier class methodsFor: 'errors' stamp: 'PGTA 11/19/2020 19:46:17'!
cannotCheckoutAnEmptyCartErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'errors' stamp: 'PGTA 11/19/2020 19:46:50' prior: 50868203!
cannotCheckoutAnEmptyCartErrorDescription
	^'Cannot checkout an empty cart'.! !

!testRun: #CashierTest #test01_CashierCannotCheckoutAnEmptyCart stamp: 'PGTA 11/19/2020 19:46:51'!
ERROR!
!Cashier methodsFor: 'operations' stamp: 'PGTA 11/19/2020 19:47:27'!
checkOut: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'operations' stamp: 'PGTA 11/19/2020 19:48:04' prior: 50868216!
checkOut: aCart 
	^self class cannotCheckoutAnEmptyCartErrorDescription.! !

!testRun: #CashierTest #test01_CashierCannotCheckoutAnEmptyCart stamp: 'PGTA 11/19/2020 19:48:06'!
FAILURE!

!testRun: #CashierTest #test01_CashierCannotCheckoutAnEmptyCart stamp: 'PGTA 11/19/2020 19:48:27'!
FAILURE!
!Cashier methodsFor: 'operations' stamp: 'PGTA 11/19/2020 19:49:20' prior: 50868221!
checkOut: aCart 
	^self error: self class cannotCheckoutAnEmptyCartErrorDescription.! !

!testRun: #CashierTest #test01_CashierCannotCheckoutAnEmptyCart stamp: 'PGTA 11/19/2020 19:49:21'!
PASSED!

!testRun: #CashierTest #test01_CashierCannotCheckoutAnEmptyCart stamp: 'PGTA 11/19/2020 19:49:21'!
PASSED!

----QUIT----(20 November 2020 00:28:22) CuisUniversity-4384.image priorSource: 17160061!

----STARTUP---- (22 November 2020 14:37:22) as /home/pablo/Documents/Ingenieria1/cuis_TusLibros2/CuisUniversity-4384.image!


TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!

!classDefinition: #CreditCardTest category: 'Tus-Libros-Iteracion2' stamp: 'PGTA 11/22/2020 15:19:33'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!

!classDefinition: #CreditCard category: 'Tus-Libros-Iteracion2' stamp: 'PGTA 11/22/2020 15:32:11'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!
!CreditCardTest methodsFor: 'no messages' stamp: 'PGTA 11/22/2020 15:32:02'!
test01_newCreditCardCantHaveEmptyNumber
	
	
	self should: [ CreditCard withNumber: '' owner: 'Pepe S�nchez' expirationDate: '022021'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard wrongCreditCardNumberErrorDescription.! !

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 11/22/2020 15:32:21'!
ERROR!
!CreditCard class methodsFor: 'error' stamp: 'PGTA 11/22/2020 15:32:52'!
wrongCreditCardNumberErrorDescription
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error' stamp: 'PGTA 11/22/2020 15:33:15' prior: 50868286!
wrongCreditCardNumberErrorDescription
	^'Wrong credit card number'! !

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 11/22/2020 15:33:17'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'PGTA 11/22/2020 15:33:23'!
withNumber: aString owner: aString2 expirationDate: aString3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithNumber: aString owner: aString2 expirationDate: aString3 ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'PGTA 11/22/2020 15:34:49' prior: 50868300!
withNumber: aCreditCardNumberString owner: aCreditCardOwnerName expirationDate: aCreditCardExpirationDateString
	
	^self new initializeWithNumber: aCreditCardNumberString owner: aCreditCardOwnerName expirationDate: aCreditCardExpirationDateString ! !

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 11/22/2020 15:34:50'!
ERROR!

!classDefinition: #CreditCard category: 'Tus-Libros-Iteracion2' stamp: 'PGTA 11/22/2020 15:35:00'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumberString'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!

!classDefinition: #CreditCard category: 'Tus-Libros-Iteracion2' stamp: 'PGTA 11/22/2020 15:35:00'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumberString creditCardOwnerName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!

!classDefinition: #CreditCard category: 'Tus-Libros-Iteracion2' stamp: 'PGTA 11/22/2020 15:35:00'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumberString creditCardOwnerName creditCardExpirationDateString'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!
!CreditCard methodsFor: 'initialization' stamp: 'PGTA 11/22/2020 15:35:00'!
initializeWithNumber: aCreditCardNumberString owner: aCreditCardOwnerName expirationDate: aCreditCardExpirationDateString 
	self shouldBeImplemented.
	creditCardNumberString := aCreditCardNumberString.
	creditCardOwnerName := aCreditCardOwnerName.
	creditCardExpirationDateString := aCreditCardExpirationDateString.! !
!CreditCard methodsFor: 'initialization' stamp: 'PGTA 11/22/2020 15:36:50' prior: 50868352!
initializeWithNumber: aCreditCardNumberString owner: aCreditCardOwnerName expirationDate: aCreditCardExpirationDateString 
	
	^self error: self class wrongCreditCardNumberErrorDescription 
	"creditCardNumber := aCreditCardNumberString.
	creditCardOwnerName := aCreditCardOwnerName.
	creditCardExpirationDate := aCreditCardExpirationDateString."! !

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 11/22/2020 15:36:53'!
PASSED!

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 11/22/2020 15:36:53'!
PASSED!

Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumberString creditCardOwnerName creditCardExpirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!

!classDefinition: #CreditCard category: 'Tus-Libros-Iteracion2' stamp: 'PGTA 11/22/2020 15:37:28'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumberString creditCardOwnerName creditCardExpirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 15:46:13'!
test02_cannotCreateCreditCardWithInvalidInputStringInNumber
	
	self should: [ CreditCard withNumber: '1234dfgh123' owner: 'Pepe S�nchez' expirationDate: '022021'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard wrongCreditCardNumberErrorDescription.! !

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PGTA 11/22/2020 15:47:10'!
PASSED!

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 11/22/2020 15:47:10'!
PASSED!

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PGTA 11/22/2020 15:47:10'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 15:54:30'!
test02_cannotCreateCreditCardWithEmptyExpirationDate
	
	self should: [ CreditCard withNumber: '1234123' owner: 'Pepe S�nchez' expirationDate: ''. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard wrongCreditCardExpirationDateErrorDescription.! !

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithEmptyExpirationDate stamp: 'PGTA 11/22/2020 15:54:35'!
ERROR!
!CreditCard class methodsFor: 'error' stamp: 'PGTA 11/22/2020 15:54:49'!
wrongCreditCardExpirationDateErrorDescription
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error' stamp: 'PGTA 11/22/2020 15:55:17' prior: 50868440!
wrongCreditCardExpirationDateErrorDescription
	^'Wrong credit card expiration date'! !

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithEmptyExpirationDate stamp: 'PGTA 11/22/2020 15:55:19'!
FAILURE!
!CreditCard methodsFor: 'initialization' stamp: 'PGTA 11/22/2020 15:57:05' prior: 50868365!
initializeWithNumber: aCreditCardNumberString owner: aCreditCardOwnerName expirationDate: aCreditCardExpirationDateString 
	
	aCreditCardNumberString isEmpty ifTrue: [ ^self error: self class wrongCreditCardNumberErrorDescription ].
	aCreditCardExpirationDateString isEmpty ifTrue: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ].
	"creditCardNumber := aCreditCardNumberString.
	creditCardOwnerName := aCreditCardOwnerName.
	creditCardExpirationDate := aCreditCardExpirationDateString."! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 15:57:26'!
test03_cannotCreateCreditCardWithInvalidInputStringInNumber
	
	self should: [ CreditCard withNumber: '1234dfgh123' owner: 'Pepe S�nchez' expirationDate: '022021'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard wrongCreditCardNumberErrorDescription.! !

!methodRemoval: CreditCardTest #test02_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PGTA 11/22/2020 15:57:26'!
test02_cannotCreateCreditCardWithInvalidInputStringInNumber
	
	self should: [ CreditCard withNumber: '1234dfgh123' owner: 'Pepe S�nchez' expirationDate: '022021'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard wrongCreditCardNumberErrorDescription.!

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PGTA 11/22/2020 15:57:36'!
FAILURE!
!CreditCard methodsFor: 'initialization' stamp: 'PGTA 11/22/2020 16:02:03' prior: 50868456!
initializeWithNumber: aCreditCardNumberString owner: aCreditCardOwnerName expirationDate: aCreditCardExpirationDateString 
	
	aCreditCardNumberString isEmpty ifTrue: [ ^self error: self class wrongCreditCardNumberErrorDescription ].
	
	aCreditCardNumberString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardNumberErrorDescription ] ].
	
	aCreditCardExpirationDateString isEmpty ifTrue: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ].
	"creditCardNumber := aCreditCardNumberString.
	creditCardOwnerName := aCreditCardOwnerName.
	creditCardExpirationDate := aCreditCardExpirationDateString."! !

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PGTA 11/22/2020 16:02:05'!
PASSED!

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 11/22/2020 16:02:05'!
PASSED!

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithEmptyExpirationDate stamp: 'PGTA 11/22/2020 16:02:05'!
PASSED!

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PGTA 11/22/2020 16:02:05'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 16:02:38'!
test03_cannotCreateCreditCardWithInvalidInputExpirationDate
	
	self should: [ CreditCard withNumber: '1234dfgh123' owner: 'Pepe S�nchez' expirationDate: '022021'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard wrongCreditCardExpirationDateErrorDescription.! !

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputExpirationDate stamp: 'PGTA 11/22/2020 16:02:38'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 16:03:00' prior: 50868543!
test03_cannotCreateCreditCardWithInvalidInputExpirationDate
	
	self should: [ CreditCard withNumber: '1234123' owner: 'Pepe S�nchez' expirationDate: '022021abc'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard wrongCreditCardExpirationDateErrorDescription.! !

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputExpirationDate stamp: 'PGTA 11/22/2020 16:03:02'!
FAILURE!
!CreditCard methodsFor: 'initialization' stamp: 'PGTA 11/22/2020 16:03:44' prior: 50868504!
initializeWithNumber: aCreditCardNumberString owner: aCreditCardOwnerName expirationDate: aCreditCardExpirationDateString 
	
	aCreditCardNumberString isEmpty ifTrue: [ ^self error: self class wrongCreditCardNumberErrorDescription ].
	aCreditCardNumberString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardNumberErrorDescription ] ].
	
	aCreditCardExpirationDateString isEmpty ifTrue: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ].
	aCreditCardExpirationDateString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ] ].
	"creditCardNumber := aCreditCardNumberString.
	creditCardOwnerName := aCreditCardOwnerName.
	creditCardExpirationDate := aCreditCardExpirationDateString."! !

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputExpirationDate stamp: 'PGTA 11/22/2020 16:03:45'!
PASSED!

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 11/22/2020 16:03:45'!
PASSED!

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithEmptyExpirationDate stamp: 'PGTA 11/22/2020 16:03:45'!
PASSED!

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputExpirationDate stamp: 'PGTA 11/22/2020 16:03:45'!
PASSED!

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PGTA 11/22/2020 16:03:45'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 16:03:55'!
test04_cannotCreateCreditCardWithInvalidInputStringInNumber
	
	self should: [ CreditCard withNumber: '1234dfgh123' owner: 'Pepe S�nchez' expirationDate: '022021'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard wrongCreditCardNumberErrorDescription.! !

!methodRemoval: CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PGTA 11/22/2020 16:03:55'!
test03_cannotCreateCreditCardWithInvalidInputStringInNumber
	
	self should: [ CreditCard withNumber: '1234dfgh123' owner: 'Pepe S�nchez' expirationDate: '022021'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard wrongCreditCardNumberErrorDescription.!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 16:06:24'!
test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate
	
	self should: [ CreditCard withNumber: '1234123' owner: 'Pepe S�nchez' expirationDate: '022021111'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard wrongCreditCardExpirationDateErrorDescription.! !

!testRun: #CreditCardTest #test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate stamp: 'PGTA 11/22/2020 16:06:28'!
FAILURE!

!testRun: #CreditCardTest #test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate stamp: 'PGTA 11/22/2020 16:06:50'!
FAILURE!
!CreditCard methodsFor: 'initialization' stamp: 'PGTA 11/22/2020 16:07:53' prior: 50868576!
initializeWithNumber: aCreditCardNumberString owner: aCreditCardOwnerName expirationDate: aCreditCardExpirationDateString 
	
	aCreditCardNumberString isEmpty ifTrue: [ ^self error: self class wrongCreditCardNumberErrorDescription ].
	aCreditCardNumberString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardNumberErrorDescription ] ].
	
	aCreditCardExpirationDateString isEmpty ifTrue: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ].
	aCreditCardExpirationDateString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ] ].
	aCreditCardExpirationDateString length > 6 ifTrue: [^self error: self class wrongCreditCardExpirationDateErrorDescription]
	"creditCardNumber := aCreditCardNumberString.
	creditCardOwnerName := aCreditCardOwnerName.
	creditCardExpirationDate := aCreditCardExpirationDateString."! !

!testRun: #CreditCardTest #test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate stamp: 'PGTA 11/22/2020 16:07:54'!
ERROR!
!CreditCard methodsFor: 'initialization' stamp: 'PGTA 11/22/2020 16:08:19' prior: 50868669!
initializeWithNumber: aCreditCardNumberString owner: aCreditCardOwnerName expirationDate: aCreditCardExpirationDateString 
	
	aCreditCardNumberString isEmpty ifTrue: [ ^self error: self class wrongCreditCardNumberErrorDescription ].
	aCreditCardNumberString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardNumberErrorDescription ] ].
	
	aCreditCardExpirationDateString isEmpty ifTrue: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ].
	aCreditCardExpirationDateString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ] ].
	(aCreditCardExpirationDateString length) > 6 ifTrue: [^self error: self class wrongCreditCardExpirationDateErrorDescription]
	"creditCardNumber := aCreditCardNumberString.
	creditCardOwnerName := aCreditCardOwnerName.
	creditCardExpirationDate := aCreditCardExpirationDateString."! !
!CreditCard methodsFor: 'initialization' stamp: 'PGTA 11/22/2020 16:08:43' prior: 50868705!
initializeWithNumber: aCreditCardNumberString owner: aCreditCardOwnerName expirationDate: aCreditCardExpirationDateString 
	
	aCreditCardNumberString isEmpty ifTrue: [ ^self error: self class wrongCreditCardNumberErrorDescription ].
	aCreditCardNumberString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardNumberErrorDescription ] ].
	
	aCreditCardExpirationDateString isEmpty ifTrue: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ].
	aCreditCardExpirationDateString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ] ].
	(aCreditCardExpirationDateString length > 6) ifTrue: [^self error: self class wrongCreditCardExpirationDateErrorDescription]
	"creditCardNumber := aCreditCardNumberString.
	creditCardOwnerName := aCreditCardOwnerName.
	creditCardExpirationDate := aCreditCardExpirationDateString."! !

!testRun: #CreditCardTest #test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate stamp: 'PGTA 11/22/2020 16:08:58'!
ERROR!
!CreditCard methodsFor: 'initialization' stamp: 'PGTA 11/22/2020 16:11:16' prior: 50868737!
initializeWithNumber: aCreditCardNumberString owner: aCreditCardOwnerName expirationDate: aCreditCardExpirationDateString 
	
	aCreditCardNumberString isEmpty ifTrue: [ ^self error: self class wrongCreditCardNumberErrorDescription ].
	aCreditCardNumberString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardNumberErrorDescription ] ].
	
	aCreditCardExpirationDateString isEmpty ifTrue: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ].
	aCreditCardExpirationDateString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ] ].
	aCreditCardExpirationDateString size > 6 ifTrue: [^self error: self class wrongCreditCardExpirationDateErrorDescription]
	"creditCardNumber := aCreditCardNumberString.
	creditCardOwnerName := aCreditCardOwnerName.
	creditCardExpirationDate := aCreditCardExpirationDateString."! !

!testRun: #CreditCardTest #test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate stamp: 'PGTA 11/22/2020 16:11:22'!
PASSED!

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 11/22/2020 16:11:22'!
PASSED!

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithEmptyExpirationDate stamp: 'PGTA 11/22/2020 16:11:22'!
PASSED!

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputExpirationDate stamp: 'PGTA 11/22/2020 16:11:22'!
PASSED!

!testRun: #CreditCardTest #test04_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PGTA 11/22/2020 16:11:22'!
PASSED!

!testRun: #CreditCardTest #test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate stamp: 'PGTA 11/22/2020 16:11:22'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 16:23:56'!
test06_cannotCreateCreditCardWithInvalidMonthExpirationDate
	
	self should: [ CreditCard withNumber: '1234123' owner: 'Pepe S�nchez' expirationDate: '322050'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard wrongCreditCardExpirationDateErrorDescription.! !

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PGTA 11/22/2020 16:23:57'!
FAILURE!

'AZREFBZGRE' from: 1 to: 3!

'AZREFBZGRE' first!

'AZREFBZGRE'!

'122025' asDate !

'122025'!

'122025' at: 1!

'122025' collect: True from: 1 to: 4!

'122025' collect: true from: 1 to: 4!

'122025' collect: [] from: 1 to: 4!

'122025' collect: [:arg | true] from: 1 to: 4!

'122025' collect: [:arg | arg] from: 1 to: 4!

('122025' collect: [:arg | arg] from: 1 to: 2) asMonth !

'12' asMonth !

12 asMonth !

'12' asString asMonth!

monthString := ('122025' collect: [:arg | arg] from: 1 to: 2).
yearString := ('122025' collect: [:arg | arg] from: 3 to: 6).

GregorianMonthOfYear yearNumber: yearString monthNumber: monthString!

monthString := ('122025' collect: [:arg | arg] from: 1 to: 2).
yearString := ('122025' collect: [:arg | arg] from: 3 to: 6).

GregorianMonthOfYear yearNumber: yearString monthNumber: monthString!

'2010' asNumber !

monthNumber := ('122025' collect: [:arg | arg] from: 1 to: 2) asNumber.
yearNumber := ('122025' collect: [:arg | arg] from: 3 to: 6) asNumber.

GregorianMonthOfYear yearNumber: yearNumber monthNumber: monthNumber!

monthNumber := ('122025' collect: [:arg | arg] from: 1 to: 2) asNumber.
yearNumber := ('122025' collect: [:arg | arg] from: 3 to: 6) asNumber.

GregorianMonthOfYear yearNumber: (yearNumber+1) monthNumber: monthNumber!

monthNumber := ('122025' collect: [:arg | arg] from: 1 to: 2) asNumber.
yearNumber := ('122025' collect: [:arg | arg] from: 3 to: 6) asNumber.

GregorianMonthOfYear yearNumber: yearNumber monthNumber: (monthNumber+1)!

!classDefinition: #CreditCard category: 'Tus-Libros-Iteracion2' stamp: 'PGTA 11/22/2020 16:56:37'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumberString creditCardOwnerName creditCardExpirationDate expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!
!CreditCard methodsFor: 'initialization' stamp: 'PGTA 11/22/2020 16:56:35' prior: 50868773!
initializeWithNumber: aCreditCardNumberString owner: aCreditCardOwnerName expirationDate: aCreditCardExpirationDateString 

	| yearNumber monthNumber |
	
	aCreditCardNumberString isEmpty ifTrue: [ ^self error: self class wrongCreditCardNumberErrorDescription ].
	aCreditCardNumberString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardNumberErrorDescription ] ].
	
	aCreditCardExpirationDateString isEmpty ifTrue: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ].
	aCreditCardExpirationDateString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ] ].
	aCreditCardExpirationDateString size > 6 ifTrue: [^self error: self class wrongCreditCardExpirationDateErrorDescription].
	
	monthNumber := ('122025' collect: [:arg | arg] from: 1 to: 2) asNumber.
	yearNumber := ('122025' collect: [:arg | arg] from: 3 to: 6) asNumber.

	expirationDate := GregorianMonthOfYear yearNumber: yearNumber monthNumber: monthNumber
	
	"creditCardNumber := aCreditCardNumberString.
	creditCardOwnerName := aCreditCardOwnerName.
	creditCardExpirationDate := aCreditCardExpirationDateString."! !

Object subclass: #CreditCard
	instanceVariableNames: 'number ownerName expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!

!classDefinition: #CreditCard category: 'Tus-Libros-Iteracion2' stamp: 'PGTA 11/22/2020 16:57:17'!
Object subclass: #CreditCard
	instanceVariableNames: 'number ownerName expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PGTA 11/22/2020 16:57:24'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 16:57:58' prior: 50868829!
test06_cannotCreateCreditCardWithInvalidMonthExpirationDate
	
	self should: [ CreditCard withNumber: '1234123' owner: 'Pepe S�nchez' expirationDate: '322050'. ]
		raise: GregorianDate error.! !

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PGTA 11/22/2020 16:57:58'!
ERROR!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 16:58:14' prior: 50868961!
test06_cannotCreateCreditCardWithInvalidMonthExpirationDate
	
	self should: [ CreditCard withNumber: '1234123' owner: 'Pepe S�nchez' expirationDate: '322050'. ]
		raise: Error.! !

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PGTA 11/22/2020 16:58:14'!
FAILURE!
!CreditCard methodsFor: 'initialization' stamp: 'PGTA 11/22/2020 16:59:40' prior: 50868902!
initializeWithNumber: aCreditCardNumberString owner: aCreditCardOwnerName expirationDate: aCreditCardExpirationDateString 

	| yearNumber monthNumber |
	
	aCreditCardNumberString isEmpty ifTrue: [ ^self error: self class wrongCreditCardNumberErrorDescription ].
	aCreditCardNumberString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardNumberErrorDescription ] ].
	
	aCreditCardExpirationDateString isEmpty ifTrue: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ].
	aCreditCardExpirationDateString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ] ].
	aCreditCardExpirationDateString size > 6 ifTrue: [^self error: self class wrongCreditCardExpirationDateErrorDescription].
	
	monthNumber := (aCreditCardExpirationDateString collect: [:digit | digit] from: 1 to: 2) asNumber.
	yearNumber := (aCreditCardExpirationDateString collect: [:digit | digit] from: 3 to: 6) asNumber.

	expirationDate := GregorianMonthOfYear yearNumber: yearNumber monthNumber: monthNumber
	
	"creditCardNumber := aCreditCardNumberString.
	creditCardOwnerName := aCreditCardOwnerName.
	creditCardExpirationDate := aCreditCardExpirationDateString."! !

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PGTA 11/22/2020 16:59:44'!
PASSED!

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 11/22/2020 16:59:44'!
PASSED!

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithEmptyExpirationDate stamp: 'PGTA 11/22/2020 16:59:44'!
PASSED!

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputExpirationDate stamp: 'PGTA 11/22/2020 16:59:44'!
PASSED!

!testRun: #CreditCardTest #test04_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PGTA 11/22/2020 16:59:44'!
PASSED!

!testRun: #CreditCardTest #test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate stamp: 'PGTA 11/22/2020 16:59:44'!
PASSED!

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PGTA 11/22/2020 16:59:44'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 16:59:53' prior: 50868975!
test06_cannotCreateCreditCardWithInvalidMonthExpirationDate
	
	self should: [ CreditCard withNumber: '1234123' owner: 'Pepe S�nchez' expirationDate: '312050'. ]
		raise: Error.! !

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PGTA 11/22/2020 16:59:53'!
PASSED!

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 11/22/2020 16:59:53'!
PASSED!

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithEmptyExpirationDate stamp: 'PGTA 11/22/2020 16:59:53'!
PASSED!

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputExpirationDate stamp: 'PGTA 11/22/2020 16:59:53'!
PASSED!

!testRun: #CreditCardTest #test04_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PGTA 11/22/2020 16:59:53'!
PASSED!

!testRun: #CreditCardTest #test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate stamp: 'PGTA 11/22/2020 16:59:53'!
PASSED!

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PGTA 11/22/2020 16:59:53'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 17:00:00' prior: 50869058!
test06_cannotCreateCreditCardWithInvalidMonthExpirationDate
	
	self should: [ CreditCard withNumber: '1234123' owner: 'Pepe S�nchez' expirationDate: '112050'. ]
		raise: Error.! !

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PGTA 11/22/2020 17:00:00'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 17:00:06' prior: 50869095!
test06_cannotCreateCreditCardWithInvalidMonthExpirationDate
	
	self should: [ CreditCard withNumber: '1234123' owner: 'Pepe S�nchez' expirationDate: '232050'. ]
		raise: Error.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 17:01:27'!
test07_cannotCreateCreditCardWithEmptyOwnerString
	
	self should: [ CreditCard withNumber: '1234123' owner: '' expirationDate: '022021'. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CreditCard wrongCreditCardOwnerErrorDescription.! !

!testRun: #CreditCardTest #test07_cannotCreateCreditCardWithEmptyOwnerString stamp: 'PGTA 11/22/2020 17:01:29'!
ERROR!
!CreditCard class methodsFor: 'error' stamp: 'PGTA 11/22/2020 17:01:40'!
wrongCreditCardOwnerErrorDescription
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error' stamp: 'PGTA 11/22/2020 17:02:29' prior: 50869131!
wrongCreditCardOwnerErrorDescription
	^'Invalid credit card owner'! !

!testRun: #CreditCardTest #test07_cannotCreateCreditCardWithEmptyOwnerString stamp: 'PGTA 11/22/2020 17:02:31'!
FAILURE!

!testRun: #CreditCardTest #test07_cannotCreateCreditCardWithEmptyOwnerString stamp: 'PGTA 11/22/2020 17:02:41'!
FAILURE!
!CreditCard methodsFor: 'initialization' stamp: 'PGTA 11/22/2020 17:03:26' prior: 50868988!
initializeWithNumber: aCreditCardNumberString owner: aCreditCardOwnerName expirationDate: aCreditCardExpirationDateString 

	| yearNumber monthNumber |
	
	aCreditCardNumberString isEmpty ifTrue: [ ^self error: self class wrongCreditCardNumberErrorDescription ].
	aCreditCardNumberString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardNumberErrorDescription ] ].

	aCreditCardOwnerName isEmpty ifTrue: [ ^self error: self class wrongCreditCardOwnerErrorDescription ].
	
	aCreditCardExpirationDateString isEmpty ifTrue: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ].
	aCreditCardExpirationDateString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ] ].
	aCreditCardExpirationDateString size > 6 ifTrue: [^self error: self class wrongCreditCardExpirationDateErrorDescription].
	
	monthNumber := (aCreditCardExpirationDateString collect: [:digit | digit] from: 1 to: 2) asNumber.
	yearNumber := (aCreditCardExpirationDateString collect: [:digit | digit] from: 3 to: 6) asNumber.

	expirationDate := GregorianMonthOfYear yearNumber: yearNumber monthNumber: monthNumber
	
	"creditCardNumber := aCreditCardNumberString.
	creditCardOwnerName := aCreditCardOwnerName.
	creditCardExpirationDate := aCreditCardExpirationDateString."! !

!testRun: #CreditCardTest #test07_cannotCreateCreditCardWithEmptyOwnerString stamp: 'PGTA 11/22/2020 17:03:27'!
PASSED!

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 11/22/2020 17:03:27'!
PASSED!

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithEmptyExpirationDate stamp: 'PGTA 11/22/2020 17:03:27'!
PASSED!

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputExpirationDate stamp: 'PGTA 11/22/2020 17:03:27'!
PASSED!

!testRun: #CreditCardTest #test04_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PGTA 11/22/2020 17:03:27'!
PASSED!

!testRun: #CreditCardTest #test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate stamp: 'PGTA 11/22/2020 17:03:27'!
PASSED!

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PGTA 11/22/2020 17:03:27'!
PASSED!

!testRun: #CreditCardTest #test07_cannotCreateCreditCardWithEmptyOwnerString stamp: 'PGTA 11/22/2020 17:03:27'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 17:07:33'!
test08_creditCardKnowsItsCardNumber
	| ccard |
	
	ccard := CreditCard withNumber: '1234123' owner: 'Pepe' expirationDate: '022021'.
	self assert: ccard cardNumber = '1234123'.! !

!testRun: #CreditCardTest #test08_creditCardKnowsItsCardNumber stamp: 'PGTA 11/22/2020 17:07:35'!
ERROR!
!CreditCard methodsFor: 'accessing' stamp: 'PGTA 11/22/2020 17:07:47'!
cardNumber
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'accessing' stamp: 'PGTA 11/22/2020 17:08:00' prior: 50869238!
cardNumber
	^number.! !

!testRun: #CreditCardTest #test08_creditCardKnowsItsCardNumber stamp: 'PGTA 11/22/2020 17:08:01'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 17:08:25' prior: 50869226!
test08_creditCardKnowsItsCardNumber
	| ccard |
	
	ccard := CreditCard withNumber: '1234123' owner: 'Pepe' expirationDate: '022021'.
	self assert: ccard cardNumber equals: '1234123'.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 17:08:41' prior: 50869250!
test08_creditCardKnowsItsCardNumber
	| ccard |
	
	ccard := CreditCard withNumber: '1234123' owner: 'Pepe' expirationDate: '022021'.
	self assert: '1234123' equals: ccard cardNumber.! !
!CreditCard methodsFor: 'initialization' stamp: 'PGTA 11/22/2020 17:09:40' prior: 50869149!
initializeWithNumber: aCreditCardNumberString owner: aCreditCardOwnerName expirationDate: aCreditCardExpirationDateString 

	| yearNumber monthNumber |
	
	aCreditCardNumberString isEmpty ifTrue: [ ^self error: self class wrongCreditCardNumberErrorDescription ].
	aCreditCardNumberString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardNumberErrorDescription ] ].

	aCreditCardOwnerName isEmpty ifTrue: [ ^self error: self class wrongCreditCardOwnerErrorDescription ].
	
	aCreditCardExpirationDateString isEmpty ifTrue: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ].
	aCreditCardExpirationDateString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ] ].
	aCreditCardExpirationDateString size > 6 ifTrue: [^self error: self class wrongCreditCardExpirationDateErrorDescription].
	
	monthNumber := (aCreditCardExpirationDateString collect: [:digit | digit] from: 1 to: 2) asNumber.
	yearNumber := (aCreditCardExpirationDateString collect: [:digit | digit] from: 3 to: 6) asNumber.

	expirationDate := GregorianMonthOfYear yearNumber: yearNumber monthNumber: monthNumber.
	number := aCreditCardNumberString.
	ownerName := aCreditCardOwnerName.
	"creditCardNumber := aCreditCardNumberString.
	creditCardOwnerName := aCreditCardOwnerName.
	creditCardExpirationDate := aCreditCardExpirationDateString."! !

!testRun: #CreditCardTest #test08_creditCardKnowsItsCardNumber stamp: 'PGTA 11/22/2020 17:09:46'!
PASSED!

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 11/22/2020 17:09:46'!
PASSED!

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithEmptyExpirationDate stamp: 'PGTA 11/22/2020 17:09:46'!
PASSED!

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputExpirationDate stamp: 'PGTA 11/22/2020 17:09:46'!
PASSED!

!testRun: #CreditCardTest #test04_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PGTA 11/22/2020 17:09:46'!
PASSED!

!testRun: #CreditCardTest #test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate stamp: 'PGTA 11/22/2020 17:09:46'!
PASSED!

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PGTA 11/22/2020 17:09:46'!
PASSED!

!testRun: #CreditCardTest #test07_cannotCreateCreditCardWithEmptyOwnerString stamp: 'PGTA 11/22/2020 17:09:46'!
PASSED!

!testRun: #CreditCardTest #test08_creditCardKnowsItsCardNumber stamp: 'PGTA 11/22/2020 17:09:46'!
PASSED!
!CreditCard methodsFor: 'initialization' stamp: 'PGTA 11/22/2020 17:13:06' prior: 50869268!
initializeWithNumber: aCreditCardNumberString owner: aCreditCardOwnerName expirationDate: aCreditCardExpirationDateString 

	| yearNumber monthNumber |
	
	aCreditCardNumberString isEmpty ifTrue: [ ^self error: self class wrongCreditCardNumberErrorDescription ].
	aCreditCardNumberString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardNumberErrorDescription ] ].

	aCreditCardOwnerName isEmpty ifTrue: [ ^self error: self class wrongCreditCardOwnerErrorDescription ].
	
	aCreditCardExpirationDateString isEmpty ifTrue: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ].
	aCreditCardExpirationDateString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ] ].
	aCreditCardExpirationDateString size > 6 ifTrue: [^self error: self class wrongCreditCardExpirationDateErrorDescription].
	
	monthNumber := (aCreditCardExpirationDateString collect: [:digit | digit] from: 1 to: 2) asNumber.
	yearNumber := (aCreditCardExpirationDateString collect: [:digit | digit] from: 3 to: 6) asNumber.

	expirationDate := GregorianMonthOfYear yearNumber: yearNumber monthNumber: monthNumber.
	number := aCreditCardNumberString.
	"ownerName := aCreditCardOwnerName."
	"creditCardNumber := aCreditCardNumberString.
	creditCardOwnerName := aCreditCardOwnerName.
	creditCardExpirationDate := aCreditCardExpirationDateString."! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 17:13:33'!
test09_creditCardKnowsItsOwnerName
	| ccard |
	
	ccard := CreditCard withNumber: '1234123' owner: 'Pepe' expirationDate: '022021'.
	self assert: 'Pepe' equals: ccard cardNumber.! !
!CreditCard methodsFor: 'initialization' stamp: 'PGTA 11/22/2020 17:13:46' prior: 50869350!
initializeWithNumber: aCreditCardNumberString owner: aCreditCardOwnerName expirationDate: aCreditCardExpirationDateString 

	| yearNumber monthNumber |
	
	aCreditCardNumberString isEmpty ifTrue: [ ^self error: self class wrongCreditCardNumberErrorDescription ].
	aCreditCardNumberString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardNumberErrorDescription ] ].

	aCreditCardOwnerName isEmpty ifTrue: [ ^self error: self class wrongCreditCardOwnerErrorDescription ].
	
	aCreditCardExpirationDateString isEmpty ifTrue: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ].
	aCreditCardExpirationDateString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ] ].
	aCreditCardExpirationDateString size > 6 ifTrue: [^self error: self class wrongCreditCardExpirationDateErrorDescription].
	
	monthNumber := (aCreditCardExpirationDateString collect: [:digit | digit] from: 1 to: 2) asNumber.
	yearNumber := (aCreditCardExpirationDateString collect: [:digit | digit] from: 3 to: 6) asNumber.

	expirationDate := GregorianMonthOfYear yearNumber: yearNumber monthNumber: monthNumber.
	number := aCreditCardNumberString.
	ownerName := aCreditCardOwnerName.
	"creditCardNumber := aCreditCardNumberString.
	creditCardOwnerName := aCreditCardOwnerName.
	creditCardExpirationDate := aCreditCardExpirationDateString."! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 17:14:07' prior: 50869397!
test09_creditCardKnowsItsOwnerName
	| ccard |
	
	ccard := CreditCard withNumber: '1234123' owner: 'Pepe' expirationDate: '022021'.
	self assert: 'Pepe' equals: ccard ownerName.! !

!testRun: #CreditCardTest #test09_creditCardKnowsItsOwnerName stamp: 'PGTA 11/22/2020 17:14:14'!
ERROR!
!CreditCard methodsFor: 'accessing' stamp: 'PGTA 11/22/2020 17:14:21'!
ownerName
	self shouldBeImplemented.
	^ownerName! !
!CreditCard methodsFor: 'accessing' stamp: 'PGTA 11/22/2020 17:14:32' prior: 50869466!
ownerName
	^ownerName! !

!testRun: #CreditCardTest #test09_creditCardKnowsItsOwnerName stamp: 'PGTA 11/22/2020 17:14:36'!
PASSED!

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 11/22/2020 17:14:36'!
PASSED!

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithEmptyExpirationDate stamp: 'PGTA 11/22/2020 17:14:36'!
PASSED!

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputExpirationDate stamp: 'PGTA 11/22/2020 17:14:36'!
PASSED!

!testRun: #CreditCardTest #test04_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PGTA 11/22/2020 17:14:36'!
PASSED!

!testRun: #CreditCardTest #test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate stamp: 'PGTA 11/22/2020 17:14:36'!
PASSED!

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PGTA 11/22/2020 17:14:36'!
PASSED!

!testRun: #CreditCardTest #test07_cannotCreateCreditCardWithEmptyOwnerString stamp: 'PGTA 11/22/2020 17:14:36'!
PASSED!

!testRun: #CreditCardTest #test08_creditCardKnowsItsCardNumber stamp: 'PGTA 11/22/2020 17:14:36'!
PASSED!

!testRun: #CreditCardTest #test09_creditCardKnowsItsOwnerName stamp: 'PGTA 11/22/2020 17:14:36'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 17:16:08'!
test10_creditCardKnowsItsExpirationDate
	| ccard expDate |
	
	expDate := GregorianMonthOfYear yearNumber: 2021 month: 02.
	
	ccard := CreditCard withNumber: '1234123' owner: 'Pepe' expirationDate: '022021'.
	self assert: expDate equals: ccard expirationDate.! !

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PGTA 11/22/2020 17:16:10'!
ERROR!
!CreditCard methodsFor: 'accessing' stamp: 'PGTA 11/22/2020 17:16:20'!
expirationDate
	self shouldBeImplemented.
	^expirationDate! !
!CreditCard methodsFor: 'accessing' stamp: 'PGTA 11/22/2020 17:16:28' prior: 50869527!
expirationDate

	^expirationDate! !

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PGTA 11/22/2020 17:16:31'!
FAILURE!

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PGTA 11/22/2020 17:16:50'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 17:17:17' prior: 50869513!
test10_creditCardKnowsItsExpirationDate
	| ccard expDate |
	
	expDate := GregorianMonthOfYear yearNumber: 2021 month: 2.
	
	ccard := CreditCard withNumber: '1234123' owner: 'Pepe' expirationDate: '022021'.
	self assert: expDate equals: ccard expirationDate.! !

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PGTA 11/22/2020 17:17:19'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 17:18:15' prior: 50869544!
test10_creditCardKnowsItsExpirationDate
	| ccard expDate |
	
	expDate := GregorianMonthOfYear yearNumber: 2021 month: 2.
	
	ccard := CreditCard withNumber: '1234123' owner: 'Pepe' expirationDate: '022021'.
	self assert: expDate = ccard expirationDate.! !

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PGTA 11/22/2020 17:18:15'!
FAILURE!

 ccard expirationDate!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 17:19:17' prior: 50869559!
test10_creditCardKnowsItsExpirationDate
	| ccard expDate |
	
	expDate := GregorianMonthOfYear yearNumber: 2021 month: 2.
	
	ccard := CreditCard withNumber: '1234123' owner: 'Pepe' expirationDate: '022021'.
	self assert: expDate month = ccard expirationDate month.
	self assert: expDate year = ccard expirationDate year.! !

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PGTA 11/22/2020 17:19:17'!
FAILURE!

ccard expirationDate month!

expDate month!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 17:19:53' prior: 50869575!
test10_creditCardKnowsItsExpirationDate
	| ccard expDate |
	
	expDate := GregorianMonthOfYear yearNumber: 2021 monthNumber: 2.
	
	ccard := CreditCard withNumber: '1234123' owner: 'Pepe' expirationDate: '022021'.
	self assert: expDate month = ccard expirationDate month.
	self assert: expDate year = ccard expirationDate year.! !

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PGTA 11/22/2020 17:19:53'!
PASSED!

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 11/22/2020 17:19:53'!
PASSED!

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithEmptyExpirationDate stamp: 'PGTA 11/22/2020 17:19:53'!
PASSED!

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputExpirationDate stamp: 'PGTA 11/22/2020 17:19:53'!
PASSED!

!testRun: #CreditCardTest #test04_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PGTA 11/22/2020 17:19:53'!
PASSED!

!testRun: #CreditCardTest #test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate stamp: 'PGTA 11/22/2020 17:19:53'!
PASSED!

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PGTA 11/22/2020 17:19:53'!
PASSED!

!testRun: #CreditCardTest #test07_cannotCreateCreditCardWithEmptyOwnerString stamp: 'PGTA 11/22/2020 17:19:53'!
PASSED!

!testRun: #CreditCardTest #test08_creditCardKnowsItsCardNumber stamp: 'PGTA 11/22/2020 17:19:53'!
PASSED!

!testRun: #CreditCardTest #test09_creditCardKnowsItsOwnerName stamp: 'PGTA 11/22/2020 17:19:53'!
PASSED!

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PGTA 11/22/2020 17:19:53'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 17:20:27' prior: 50869594!
test10_creditCardKnowsItsExpirationDate
	| ccard expDate |
	
	expDate := GregorianMonthOfYear yearNumber: 2021 monthNumber: 2.
	
	ccard := CreditCard withNumber: '1234123' owner: 'Pepe' expirationDate: '022021'.
	self assert: expDate = ccard expirationDate
	
	"self assert: expDate month = ccard expirationDate month.
	self assert: expDate year = ccard expirationDate year."! !

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PGTA 11/22/2020 17:20:27'!
PASSED!

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 11/22/2020 17:20:28'!
PASSED!

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithEmptyExpirationDate stamp: 'PGTA 11/22/2020 17:20:28'!
PASSED!

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputExpirationDate stamp: 'PGTA 11/22/2020 17:20:28'!
PASSED!

!testRun: #CreditCardTest #test04_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PGTA 11/22/2020 17:20:28'!
PASSED!

!testRun: #CreditCardTest #test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate stamp: 'PGTA 11/22/2020 17:20:28'!
PASSED!

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PGTA 11/22/2020 17:20:28'!
PASSED!

!testRun: #CreditCardTest #test07_cannotCreateCreditCardWithEmptyOwnerString stamp: 'PGTA 11/22/2020 17:20:28'!
PASSED!

!testRun: #CreditCardTest #test08_creditCardKnowsItsCardNumber stamp: 'PGTA 11/22/2020 17:20:28'!
PASSED!

!testRun: #CreditCardTest #test09_creditCardKnowsItsOwnerName stamp: 'PGTA 11/22/2020 17:20:28'!
PASSED!

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PGTA 11/22/2020 17:20:28'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 17:20:32' prior: 50869649!
test10_creditCardKnowsItsExpirationDate
	| ccard expDate |
	
	expDate := GregorianMonthOfYear yearNumber: 2021 monthNumber: 2.
	
	ccard := CreditCard withNumber: '1234123' owner: 'Pepe' expirationDate: '022021'.
	self assert: expDate = ccard expirationDate! !

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PGTA 11/22/2020 17:20:35'!
PASSED!

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 11/22/2020 17:20:35'!
PASSED!

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithEmptyExpirationDate stamp: 'PGTA 11/22/2020 17:20:35'!
PASSED!

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputExpirationDate stamp: 'PGTA 11/22/2020 17:20:35'!
PASSED!

!testRun: #CreditCardTest #test04_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PGTA 11/22/2020 17:20:35'!
PASSED!

!testRun: #CreditCardTest #test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate stamp: 'PGTA 11/22/2020 17:20:35'!
PASSED!

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PGTA 11/22/2020 17:20:35'!
PASSED!

!testRun: #CreditCardTest #test07_cannotCreateCreditCardWithEmptyOwnerString stamp: 'PGTA 11/22/2020 17:20:35'!
PASSED!

!testRun: #CreditCardTest #test08_creditCardKnowsItsCardNumber stamp: 'PGTA 11/22/2020 17:20:35'!
PASSED!

!testRun: #CreditCardTest #test09_creditCardKnowsItsOwnerName stamp: 'PGTA 11/22/2020 17:20:35'!
PASSED!

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PGTA 11/22/2020 17:20:35'!
PASSED!

----SNAPSHOT----(22 November 2020 17:20:40) CuisUniversity-4384.image priorSource: 17171023!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 17:24:43'!
test11_creditCardKnowsIfItsExpired
	| ccard expDate |
	
	expDate := GregorianMonthOfYear yearNumber: 2019 monthNumber: 2.
	
	ccard := CreditCard withNumber: '1234123' owner: 'Pepe' expirationDate: '022019'.
	self assert: ccard isExpired.! !

hoy = FixedGregorianDate today.!

hoy < hoy.!

hoy = FixedGregorianDate today.!

FixedGregorianDate today!

hoy := FixedGregorianDate today.
hoy < hoy.!

hoy := FixedGregorianDate today.
manana := FixedGregorianDate tomorrow.
hoy < manana.!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 17:27:28' prior: 50869762!
test11_creditCardKnowsIfItsExpired
	| ccard |
	
	"expDate := GregorianMonthOfYear yearNumber: 2019 monthNumber: 2."
	
	ccard := CreditCard withNumber: '1234123' owner: 'Pepe' expirationDate: '022019'.
	self assert: ccard isExpired.! !

!testRun: #CreditCardTest #test11_creditCardKnowsIfItsExpired stamp: 'PGTA 11/22/2020 17:27:28'!
ERROR!
!CreditCard methodsFor: 'testing' stamp: 'PGTA 11/22/2020 17:27:54'!
isExpired
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'testing' stamp: 'PGTA 11/22/2020 17:29:43' prior: 50869794!
isExpired
	| today |
	today := FixedGregorianDate today.
	
	^expirationDate < GregorianMonthOfYear yearNumber: today year monthNumber: today month.! !

!testRun: #CreditCardTest #test11_creditCardKnowsIfItsExpired stamp: 'PGTA 11/22/2020 17:29:45'!
ERROR!

!testRun: #CreditCardTest #test11_creditCardKnowsIfItsExpired stamp: 'PGTA 11/22/2020 17:29:56'!
ERROR!
!CreditCard methodsFor: 'testing' stamp: 'PGTA 11/22/2020 17:30:13' prior: 50869798!
isExpired
	| today |
	today := FixedGregorianDate today.
	
	^expirationDate < (GregorianMonthOfYear yearNumber: today year monthNumber: today month).! !

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PGTA 11/22/2020 17:30:18'!
PASSED!

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 11/22/2020 17:30:18'!
PASSED!

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithEmptyExpirationDate stamp: 'PGTA 11/22/2020 17:30:18'!
PASSED!

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputExpirationDate stamp: 'PGTA 11/22/2020 17:30:18'!
PASSED!

!testRun: #CreditCardTest #test04_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PGTA 11/22/2020 17:30:18'!
PASSED!

!testRun: #CreditCardTest #test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate stamp: 'PGTA 11/22/2020 17:30:18'!
PASSED!

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PGTA 11/22/2020 17:30:18'!
PASSED!

!testRun: #CreditCardTest #test07_cannotCreateCreditCardWithEmptyOwnerString stamp: 'PGTA 11/22/2020 17:30:18'!
PASSED!

!testRun: #CreditCardTest #test08_creditCardKnowsItsCardNumber stamp: 'PGTA 11/22/2020 17:30:18'!
PASSED!

!testRun: #CreditCardTest #test09_creditCardKnowsItsOwnerName stamp: 'PGTA 11/22/2020 17:30:18'!
PASSED!

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PGTA 11/22/2020 17:30:18'!
PASSED!

!testRun: #CreditCardTest #test11_creditCardKnowsIfItsExpired stamp: 'PGTA 11/22/2020 17:30:18'!
ERROR!

!testRun: #CreditCardTest #test11_creditCardKnowsIfItsExpired stamp: 'PGTA 11/22/2020 17:30:18'!
ERROR!

!testRun: #CreditCardTest #test11_creditCardKnowsIfItsExpired stamp: 'PGTA 11/22/2020 17:30:48'!
ERROR!
!CreditCard methodsFor: 'testing' stamp: 'PGTA 11/22/2020 17:31:35' prior: 50869812!
isExpired
	| today |
	today := FixedGregorianDate today.
	
	^expirationDate < (GregorianMonthOfYear year: today year month: today month).! !

!testRun: #CreditCardTest #test11_creditCardKnowsIfItsExpired stamp: 'PGTA 11/22/2020 17:31:39'!
PASSED!

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PGTA 11/22/2020 17:31:39'!
PASSED!

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithEmptyExpirationDate stamp: 'PGTA 11/22/2020 17:31:39'!
PASSED!

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputExpirationDate stamp: 'PGTA 11/22/2020 17:31:39'!
PASSED!

!testRun: #CreditCardTest #test04_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PGTA 11/22/2020 17:31:39'!
PASSED!

!testRun: #CreditCardTest #test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate stamp: 'PGTA 11/22/2020 17:31:39'!
PASSED!

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PGTA 11/22/2020 17:31:39'!
PASSED!

!testRun: #CreditCardTest #test07_cannotCreateCreditCardWithEmptyOwnerString stamp: 'PGTA 11/22/2020 17:31:39'!
PASSED!

!testRun: #CreditCardTest #test08_creditCardKnowsItsCardNumber stamp: 'PGTA 11/22/2020 17:31:39'!
PASSED!

!testRun: #CreditCardTest #test09_creditCardKnowsItsOwnerName stamp: 'PGTA 11/22/2020 17:31:39'!
PASSED!

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PGTA 11/22/2020 17:31:39'!
PASSED!

!testRun: #CreditCardTest #test11_creditCardKnowsIfItsExpired stamp: 'PGTA 11/22/2020 17:31:39'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 17:31:45' prior: 50869781!
test11_creditCardKnowsIfItsExpired
	| ccard |
	
	ccard := CreditCard withNumber: '1234123' owner: 'Pepe' expirationDate: '022019'.
	self assert: ccard isExpired.! !
!CreditCard methodsFor: 'initialization' stamp: 'PGTA 11/22/2020 17:33:14' prior: 50869406!
initializeWithNumber: aCreditCardNumberString owner: aCreditCardOwnerName expirationDate: aCreditCardExpirationDateString 

	| yearNumber monthNumber |
	
	aCreditCardNumberString isEmpty ifTrue: [ ^self error: self class wrongCreditCardNumberErrorDescription ].
	aCreditCardNumberString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardNumberErrorDescription ] ].

	aCreditCardOwnerName isEmpty ifTrue: [ ^self error: self class wrongCreditCardOwnerErrorDescription ].
	
	aCreditCardExpirationDateString isEmpty ifTrue: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ].
	aCreditCardExpirationDateString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ] ].
	aCreditCardExpirationDateString size > 6 ifTrue: [^self error: self class wrongCreditCardExpirationDateErrorDescription].
	
	monthNumber := (aCreditCardExpirationDateString collect: [:digit | digit] from: 1 to: 2) asNumber.
	yearNumber := (aCreditCardExpirationDateString collect: [:digit | digit] from: 3 to: 6) asNumber.

	expirationDate := GregorianMonthOfYear yearNumber: yearNumber monthNumber: monthNumber.
	number := aCreditCardNumberString.
	ownerName := aCreditCardOwnerName.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 18:21:40'!
test02_cashierXXX
	
	| cashier cart creditCard |
	cart := Cart withCatalog: (Set new).
	cart add: 1234567 quantity: 2.
	
	creditCard := CreditCard withNumber: '1234' owner: 'Pepe'  expirationDate: '062021'.
	cashier := Cashier new.
	
	self should: [ cashier checkOut: cart ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier cannotCheckoutAnEmptyCartErrorDescription.! !

!classDefinition: #CashierTest category: 'Tus-Libros-Iteracion2' stamp: 'PGTA 11/22/2020 18:24:38'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'enabledCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 18:24:27' overrides: 16927572!
setUp
	
	enabledCreditCard := CreditCard withNumber: '1234567812345678' owner: 'Pepe el payaso'  expirationDate: '062021'.
	
	"
	| cashier cart creditCard |
	cart := Cart withCatalog: (Set new).
	cart add: 1234567 quantity: 2.
	
	creditCard := CreditCard withNumber: '1234' owner: 'Pepe'  expirationDate: '062021'.
	cashier := Cashier new.
	
	self should: [ cashier checkOut: cart ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier cannotCheckoutAnEmptyCartErrorDescription."! !

!classDefinition: #CashierTest category: 'Tus-Libros-Iteracion2' stamp: 'PGTA 11/22/2020 18:26:58'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'enabledCreditCard catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 18:26:56' prior: 50870000 overrides: 16927572!
setUp
	
	enabledCreditCard := CreditCard withNumber: '1234567812345678' owner: 'Pepe el payaso'  expirationDate: '062021'.
	catalog := Dictionary new.
	catalog at: 1234512345 put: 300.
	catalog at: 5432154321 put: 600.
	
	"
	| cashier cart creditCard |
	cart := Cart withCatalog: (Set new).
	cart add: 1234567 quantity: 2.
	
	creditCard := CreditCard withNumber: '1234' owner: 'Pepe'  expirationDate: '062021'.
	cashier := Cashier new.
	
	self should: [ cashier checkOut: cart ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier cannotCheckoutAnEmptyCartErrorDescription."! !

!classDefinition: #CashierTest category: 'Tus-Libros-Iteracion2' stamp: 'PGTA 11/22/2020 18:28:20'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'enabledCreditCard catalog cart1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 18:28:18' prior: 50870028 overrides: 16927572!
setUp
	
	enabledCreditCard := CreditCard withNumber: '1234567812345678' owner: 'Pepe el payaso'  expirationDate: '062021'.
	
	catalog := Dictionary new.
	catalog at: 1234512345 put: 300.
	catalog at: 5432154321 put: 600.
	
	cart1 := Cart withCatalog: catalog.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 18:28:46' prior: 50868188!
test01_CashierCannotCheckoutAnEmptyCart
	
	| cashier cart2 |
	cart2 := Cart withCatalog: (Set new).
	cashier := Cashier new.
	
	self should: [ cashier checkOut: cart2 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier cannotCheckoutAnEmptyCartErrorDescription.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 18:28:54' prior: 50869976!
test02_cashierXXX
	
	"| cashier cart creditCard |
	cart := Cart withCatalog: (Set new).
	cart add: 1234567 quantity: 2.
	
	creditCard := CreditCard withNumber: '1234' owner: 'Pepe'  expirationDate: '062021'.
	cashier := Cashier new.
	
	self should: [ cashier checkOut: cart ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier cannotCheckoutAnEmptyCartErrorDescription."! !

!classDefinition: #CashierTest category: 'Tus-Libros-Iteracion2' stamp: 'PGTA 11/22/2020 18:29:02'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'enabledCreditCard catalog cart1 cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 18:29:00' prior: 50870059 overrides: 16927572!
setUp
	
	enabledCreditCard := CreditCard withNumber: '1234567812345678' owner: 'Pepe el payaso'  expirationDate: '062021'.
	
	catalog := Dictionary new.
	catalog at: 1234512345 put: 300.
	catalog at: 5432154321 put: 600.
	
	cart := Cart withCatalog: catalog.! !

TestCase subclass: #CashierTest
	instanceVariableNames: 'enabledCreditCard catalog cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!

!classDefinition: #CashierTest category: 'Tus-Libros-Iteracion2' stamp: 'PGTA 11/22/2020 18:29:08'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'enabledCreditCard catalog cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 18:29:42' prior: 50870083!
test02_cashierXXX
	
	| cashier |
	cashier := Cashier new.
	
	self should: [ cashier checkOut: cart ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier cannotCheckoutAnEmptyCartErrorDescription.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 18:32:08' prior: 50870108 overrides: 16927572!
setUp
	| isbn1 isbn2 |
	isbn1 := 1234512345.
	isbn2 := 5432154321.
	
	enabledCreditCard := CreditCard withNumber: '1234567812345678' owner: 'Pepe el payaso'  expirationDate: '062021'.
	
	catalog := Dictionary new.
	catalog at: isbn1 put: 300.
	catalog at: isbn2 put: 600.
	
	cart := Cart withCatalog: catalog.
	cart add: isbn1 quantity: 1.
	cart add: isbn2 quantity: 2.
	! !

!testRun: #CartTest #test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN stamp: 'PGTA 11/22/2020 18:33:16'!
PASSED!

!testRun: #CartTest #test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN stamp: 'PGTA 11/22/2020 18:33:19'!
PASSED!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/22/2020 18:33:19'!
PASSED!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/22/2020 18:33:19'!
PASSED!

!testRun: #CartTest #test03_cannotAddISBNOutsideTheCatalogIntoCart stamp: 'PGTA 11/22/2020 18:33:19'!
PASSED!

!testRun: #CartTest #test04_cartContainsAllAddedBooksISBN stamp: 'PGTA 11/22/2020 18:33:19'!
PASSED!

!testRun: #CartTest #test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN stamp: 'PGTA 11/22/2020 18:33:19'!
PASSED!

!testRun: #CartTest #test06_theNumberOfCopiesToAddOfABookISBNMustBePositive stamp: 'PGTA 11/22/2020 18:33:19'!
PASSED!

!testRun: #CartTest #test07_theNumberOfCopiesToAddOfABookISBNMustBeInteger stamp: 'PGTA 11/22/2020 18:33:19'!
PASSED!
!CartTest methodsFor: 'setUp/tearDown' stamp: 'PGTA 11/22/2020 18:34:04' prior: 50867782 overrides: 16927572!
setUp
	
	isbn1 := 12345.
	isbn2 := 123456.
	
	catalog1 := Dictionary with: isbn1 with: isbn2.
	
	cart1 := Cart withCatalog: catalog1.
	! !

Dictionary with: 46!

Dictionary newFromPairs: 	(2,3)!

Dictionary newFromPairs: 	#(2,3)!

Dictionary newFromPairs: 	#(2,3)!

Dictionary newFromPairs: 	#(2 3)!

Dictionary newFromPairs: 	#(2 3 4 5)!
!CartTest methodsFor: 'setUp/tearDown' stamp: 'PGTA 11/22/2020 18:37:04' prior: 50870192 overrides: 16927572!
setUp
	
	isbn1 := 12345.
	isbn2 := 123456.
	
	catalog1 := Dictionary newFromPairs: #(isbn1 100 isbn2 30).
	
	cart1 := Cart withCatalog: catalog1.
	! !

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/22/2020 18:37:09'!
PASSED!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/22/2020 18:37:11'!
PASSED!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/22/2020 18:37:11'!
PASSED!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/22/2020 18:37:11'!
ERROR!

!testRun: #CartTest #test03_cannotAddISBNOutsideTheCatalogIntoCart stamp: 'PGTA 11/22/2020 18:37:11'!
ERROR!

!testRun: #CartTest #test04_cartContainsAllAddedBooksISBN stamp: 'PGTA 11/22/2020 18:37:11'!
ERROR!

!testRun: #CartTest #test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN stamp: 'PGTA 11/22/2020 18:37:11'!
ERROR!

!testRun: #CartTest #test06_theNumberOfCopiesToAddOfABookISBNMustBePositive stamp: 'PGTA 11/22/2020 18:37:11'!
FAILURE!

!testRun: #CartTest #test07_theNumberOfCopiesToAddOfABookISBNMustBeInteger stamp: 'PGTA 11/22/2020 18:37:11'!
FAILURE!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/22/2020 18:37:25'!
ERROR!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/22/2020 18:37:55'!
ERROR!

d := Dictionary newFromPairs: 	#(2 3 4 5).!
!Cart methodsFor: 'cart operations' stamp: 'PGTA 11/22/2020 18:38:33' prior: 50867980!
add: anISBN quantity: aNumberOfCopies 
	
	(catalog includesKey: anISBN) ifFalse: [ ^self error: self class ISBNNotInCatalogErrorDescription ].
	(aNumberOfCopies > 0) ifFalse: [ ^self error: self class numberOfCopiesMustBePositiveErrorDescription ].
	(aNumberOfCopies isKindOf: Integer) ifFalse: [ ^self error: self class numberOfCopiesMustBeIntegerErrorDescription ].
	content add: anISBN withOccurrences: aNumberOfCopies.! !

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/22/2020 18:38:34'!
ERROR!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/22/2020 18:38:49'!
FAILURE!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/22/2020 18:38:56'!
ERROR!

catalog!

d := Dictionary newFromPairs: 	#('a' 3 4 5).!

a:= 3.
d := Dictionary newFromPairs: 	#(a 3 4 5).
!

a:= 3.
d := Dictionary newFromPairs: 	#(a 3 4 5).
!

d := Dictionary newFromPairs: 	#((a value) 3 4 5).!

d := Dictionary newFromPairs: (OrderedCollection with: a with: 4).!
!CartTest methodsFor: 'setUp/tearDown' stamp: 'PGTA 11/22/2020 18:43:40' prior: 50870207 overrides: 16927572!
setUp
	
	isbn1 := 12345.
	isbn2 := 123456.
	
	catalog1 := Dictionary newFromPairs: (OrderedCollection with: isbn1 with: 100 with: isbn2 with: 30).
	
	cart1 := Cart withCatalog: catalog1.
	! !

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/22/2020 18:43:43'!
PASSED!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/22/2020 18:43:43'!
PASSED!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/22/2020 18:43:43'!
PASSED!

!testRun: #CartTest #test03_cannotAddISBNOutsideTheCatalogIntoCart stamp: 'PGTA 11/22/2020 18:43:43'!
PASSED!

!testRun: #CartTest #test04_cartContainsAllAddedBooksISBN stamp: 'PGTA 11/22/2020 18:43:43'!
PASSED!

!testRun: #CartTest #test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN stamp: 'PGTA 11/22/2020 18:43:43'!
PASSED!

!testRun: #CartTest #test06_theNumberOfCopiesToAddOfABookISBNMustBePositive stamp: 'PGTA 11/22/2020 18:43:43'!
PASSED!

!testRun: #CartTest #test07_theNumberOfCopiesToAddOfABookISBNMustBeInteger stamp: 'PGTA 11/22/2020 18:43:43'!
PASSED!

!testRun: #CashierTest #test01_CashierCannotCheckoutAnEmptyCart stamp: 'PGTA 11/22/2020 18:43:54'!
PASSED!

!testRun: #CashierTest #test01_CashierCannotCheckoutAnEmptyCart stamp: 'PGTA 11/22/2020 18:43:54'!
PASSED!

!testRun: #CashierTest #test02_cashierXXX stamp: 'PGTA 11/22/2020 18:43:54'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 18:49:17' prior: 50870071!
test01_CashierCannotCheckoutAnEmptyCart
	
	| cashier cart2 |
	cart2 := Cart withCatalog: catalog.
	cashier := Cashier new.
	
	self should: [ cashier checkOut: cart2 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier cannotCheckoutAnEmptyCartErrorDescription.! !

!testRun: #CashierTest #test01_CashierCannotCheckoutAnEmptyCart stamp: 'PGTA 11/22/2020 18:49:19'!
PASSED!

!testRun: #CashierTest #test01_CashierCannotCheckoutAnEmptyCart stamp: 'PGTA 11/22/2020 18:49:19'!
PASSED!

!testRun: #CashierTest #test02_cashierXXX stamp: 'PGTA 11/22/2020 18:49:19'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 18:50:12' prior: 50870134!
test02_cashierXXX
	
	| cashier |
	cashier := Cashier withCatalog: catalog.
	
	self should: [ cashier checkOut: cart ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier cannotCheckoutAnEmptyCartErrorDescription.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 18:53:42' prior: 50870355!
test02_cashierXXX
	
	| cashier |
	cashier := Cashier withCatalog: catalog.
	
	self assert: (cashier checkOut: cart withCard: enabledCreditCard) equals: (Cashier okTransactionMessage).! !

!testRun: #CashierTest #test02_cashierXXX stamp: 'PGTA 11/22/2020 18:53:48'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'PGTA 11/22/2020 18:53:57'!
withCatalog: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCatalog: aDictionary ! !
!Cashier class methodsFor: 'instance creation' stamp: 'PGTA 11/22/2020 18:54:15' prior: 50870378!
withCatalog: aCatalog 
	
	^self new initializeWithCatalog: aCatalog! !

!testRun: #CashierTest #test02_cashierXXX stamp: 'PGTA 11/22/2020 18:54:16'!
ERROR!

!classDefinition: #Cashier category: 'Tus-Libros-Iteracion2' stamp: 'PGTA 11/22/2020 18:54:56'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!
!Cashier methodsFor: 'initialization' stamp: 'PGTA 11/22/2020 18:54:56'!
initializeWithCatalog: aCatalog 
	self shouldBeImplemented.
	catalog := aCatalog.! !
!Cashier methodsFor: 'initialization' stamp: 'PGTA 11/22/2020 18:55:05' prior: 50870402!
initializeWithCatalog: aCatalog 

	catalog := aCatalog.! !

!testRun: #CashierTest #test02_cashierXXX stamp: 'PGTA 11/22/2020 18:55:12'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 18:55:23'!
checkOut: aCart withCard: aCreditCard 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 18:56:24' prior: 50870415!
checkOut: aCart withCard: aCreditCard 
	^self class okTrasnsactionMessage! !

!testRun: #CashierTest #test02_cashierXXX stamp: 'PGTA 11/22/2020 18:56:32'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'PGTA 11/22/2020 18:56:38'!
okTrasnsactionMessage
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeOkTrasnsactionMessage! !
!Cashier class methodsFor: 'instance creation' stamp: 'PGTA 11/22/2020 18:57:21' prior: 50870429!
okTrasnsactionMessage
	^'Transaction successful'! !

!testRun: #CashierTest #test02_cashierXXX stamp: 'PGTA 11/22/2020 18:57:22'!
ERROR!

!testRun: #CashierTest #test02_cashierXXX stamp: 'PGTA 11/22/2020 18:58:22'!
ERROR!
!Cashier class methodsFor: 'messages' stamp: 'PGTA 11/22/2020 18:58:46'!
okTransactionMessage
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'messages' stamp: 'PGTA 11/22/2020 18:58:53' prior: 50870448!
okTransactionMessage
	^'Lalala'! !

!testRun: #CashierTest #test02_cashierXXX stamp: 'PGTA 11/22/2020 18:58:55'!
FAILURE!
!Cashier class methodsFor: 'messages' stamp: 'PGTA 11/22/2020 18:59:19' prior: 50870453!
okTransactionMessage
	^'Transaction successful'! !

!methodRemoval: Cashier class #okTrasnsactionMessage stamp: 'PGTA 11/22/2020 18:59:27'!
okTrasnsactionMessage
	^'Transaction successful'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 19:00:02' prior: 50870421!
checkOut: aCart withCard: aCreditCard 
	^self class okTransactionMessage ! !

!testRun: #CashierTest #test02_cashierXXX stamp: 'PGTA 11/22/2020 19:00:07'!
PASSED!

!testRun: #CashierTest #test01_CashierCannotCheckoutAnEmptyCart stamp: 'PGTA 11/22/2020 19:00:07'!
PASSED!

!testRun: #CashierTest #test02_cashierXXX stamp: 'PGTA 11/22/2020 19:00:07'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 19:00:41'!
test02_cashierReturnsSuccessWithValidTransaction
	
	| cashier |
	cashier := Cashier withCatalog: catalog.
	
	self assert: (cashier checkOut: cart withCard: enabledCreditCard) equals: (Cashier okTransactionMessage).! !

!methodRemoval: CashierTest #test02_cashierXXX stamp: 'PGTA 11/22/2020 19:00:46'!
test02_cashierXXX
	
	| cashier |
	cashier := Cashier withCatalog: catalog.
	
	self assert: (cashier checkOut: cart withCard: enabledCreditCard) equals: (Cashier okTransactionMessage).!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 19:01:16'!
test01_cashierCannotCheckoutAnEmptyCart
	
	| cashier cart2 |
	cart2 := Cart withCatalog: catalog.
	cashier := Cashier new.
	
	self should: [ cashier checkOut: cart2 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier cannotCheckoutAnEmptyCartErrorDescription.! !

!methodRemoval: CashierTest #test01_CashierCannotCheckoutAnEmptyCart stamp: 'PGTA 11/22/2020 19:01:16'!
test01_CashierCannotCheckoutAnEmptyCart
	
	| cashier cart2 |
	cart2 := Cart withCatalog: catalog.
	cashier := Cashier new.
	
	self should: [ cashier checkOut: cart2 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier cannotCheckoutAnEmptyCartErrorDescription.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 19:01:32' prior: 50870501!
test01_cashierCannotCheckoutAnEmptyCart
	
	| cashier cart2 |
	cart2 := Cart withCatalog: catalog.
	cashier := Cashier withCatalog: catalog.
	
	self should: [ cashier checkOut: cart2 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier cannotCheckoutAnEmptyCartErrorDescription.! !

!testRun: #CashierTest #test01_cashierCannotCheckoutAnEmptyCart stamp: 'PGTA 11/22/2020 19:01:33'!
PASSED!

!testRun: #CashierTest #test01_cashierCannotCheckoutAnEmptyCart stamp: 'PGTA 11/22/2020 19:01:33'!
PASSED!

!testRun: #CashierTest #test02_cashierReturnsSuccessWithValidTransaction stamp: 'PGTA 11/22/2020 19:01:33'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 19:09:45'!
test03_cashierRejectsTransactionWithExpiredCreditCard
	
	| cashier |
	cashier := Cashier withCatalog: catalog.
	
	self assert: (cashier checkOut: cart withCard: enabledCreditCard) equals: (Cashier okTransactionMessage).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 19:12:41' prior: 50870548!
test03_cashierRejectsTransactionWithExpiredCreditCard
	
	| cashier expiredCreditCard |
	cashier := Cashier withCatalog: catalog.
	
	expiredCreditCard := CreditCard withNumber: '1234567812345678' owner: 'Juan el irresistible'  expirationDate: '062010'.
	
	self should: [ cashier checkOut: cart withCard: expiredCreditCard ]
		raise: Error - MessageNotUnderstood! !

!testRun: #CashierTest #test03_cashierRejectsTransactionWithExpiredCreditCard stamp: 'PGTA 11/22/2020 19:12:43'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 19:14:58' prior: 50870469!
checkOut: aCart withCard: aCreditCard 
	aCreditCard isExpired ifTrue: [^self error: self class expiredCardErrorDescription ].
	^self class okTransactionMessage! !

!testRun: #CashierTest #test03_cashierRejectsTransactionWithExpiredCreditCard stamp: 'PGTA 11/22/2020 19:15:00'!
ERROR!
!Cashier class methodsFor: 'errors' stamp: 'PGTA 11/22/2020 19:15:09'!
expiredCardErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'errors' stamp: 'PGTA 11/22/2020 19:15:39' prior: 50870590!
expiredCardErrorDescription
	^'Sorry Bob, card is expired'! !

!testRun: #CashierTest #test03_cashierRejectsTransactionWithExpiredCreditCard stamp: 'PGTA 11/22/2020 19:15:40'!
PASSED!

!testRun: #CashierTest #test01_cashierCannotCheckoutAnEmptyCart stamp: 'PGTA 11/22/2020 19:15:40'!
PASSED!

!testRun: #CashierTest #test02_cashierReturnsSuccessWithValidTransaction stamp: 'PGTA 11/22/2020 19:15:40'!
PASSED!

!testRun: #CashierTest #test03_cashierRejectsTransactionWithExpiredCreditCard stamp: 'PGTA 11/22/2020 19:15:40'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 19:16:22' prior: 50870525!
test01_cashierCannotCheckoutAnEmptyCart
	
	| cashier cart2 |
	cart2 := Cart withCatalog: catalog.
	cashier := Cashier withCatalog: catalog.
	
	self should: [ cashier checkOut: cart2 withCard: enabledCreditCard ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier cannotCheckoutAnEmptyCartErrorDescription.! !

!testRun: #CashierTest #test01_cashierCannotCheckoutAnEmptyCart stamp: 'PGTA 11/22/2020 19:16:25'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'PGTA 11/22/2020 19:17:31' prior: 50870578!
checkOut: aCart withCard: aCreditCard 
	aCart isEmpty ifTrue: [^self error: self class cannotCheckoutAnEmptyCartErrorDescription. ].
	aCreditCard isExpired ifTrue: [^self error: self class expiredCardErrorDescription ].
	^self class okTransactionMessage! !

!testRun: #CashierTest #test01_cashierCannotCheckoutAnEmptyCart stamp: 'PGTA 11/22/2020 19:17:32'!
PASSED!

!testRun: #CashierTest #test01_cashierCannotCheckoutAnEmptyCart stamp: 'PGTA 11/22/2020 19:17:32'!
PASSED!

!testRun: #CashierTest #test02_cashierReturnsSuccessWithValidTransaction stamp: 'PGTA 11/22/2020 19:17:32'!
PASSED!

!testRun: #CashierTest #test03_cashierRejectsTransactionWithExpiredCreditCard stamp: 'PGTA 11/22/2020 19:17:32'!
PASSED!

!methodRemoval: Cashier #checkOut: stamp: 'PGTA 11/22/2020 19:17:56'!
checkOut: aCart 
	^self error: self class cannotCheckoutAnEmptyCartErrorDescription.!

----SNAPSHOT----(22 November 2020 19:18:00) CuisUniversity-4384.image priorSource: 17219437!

----SNAPSHOT----(22 November 2020 19:34:30) CuisUniversity-4384.image priorSource: 17248356!

----QUIT----(22 November 2020 19:34:52) CuisUniversity-4384.image priorSource: 17248450!

----STARTUP---- (24 November 2020 18:13:15) as /home/pablo/Documents/Ingenieria1/cuis_TusLibros2/CuisUniversity-4384.image!


!testRun: #CashierTest #test03_cashierRejectsTransactionWithExpiredCreditCard stamp: 'PGTA 11/24/2020 18:14:02'!
PASSED!

!testRun: #CashierTest #test01_cashierCannotCheckoutAnEmptyCart stamp: 'PGTA 11/24/2020 18:14:02'!
PASSED!

!testRun: #CashierTest #test02_cashierReturnsSuccessWithValidTransaction stamp: 'PGTA 11/24/2020 18:14:02'!
PASSED!

!testRun: #CashierTest #test03_cashierRejectsTransactionWithExpiredCreditCard stamp: 'PGTA 11/24/2020 18:14:02'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'PGTA 11/24/2020 18:22:26'!
test08_cartKnowsTotalPurchaseValue
	
	self should: [cart1 add: isbn1 quantity: 3.141592654]
		raise: Error - MessageNotUnderstood
		withMessageText: Cart numberOfCopiesMustBeIntegerErrorDescription.! !
!CartTest methodsFor: 'tests' stamp: 'PGTA 11/24/2020 18:23:19' prior: 50870689!
test08_cartKnowsTotalPurchaseValue
	cart1 add: isbn1 quantity: 1.
	
	
	self should: [cart1 add: isbn1 quantity: 3.141592654]
		raise: Error - MessageNotUnderstood
		withMessageText: Cart numberOfCopiesMustBeIntegerErrorDescription.! !
!CartTest methodsFor: 'tests' stamp: 'PGTA 11/24/2020 18:26:11' prior: 50870698!
test08_cartKnowsTotalPurchaseValue
	
	| total |
	cart1 add: isbn1 quantity: 2.
	cart1 add: isbn2 quantity: 3.
	
	total := 2*100 + 3*30.
	
	self assert: total equals: cart1 purchaseValue.! !

!testRun: #CartTest #test08_cartKnowsTotalPurchaseValue stamp: 'PGTA 11/24/2020 18:26:16'!
ERROR!
!Cart methodsFor: 'cart operations' stamp: 'PGTA 11/24/2020 18:26:28'!
purchaseValue
	self shouldBeImplemented.! !
!Cart methodsFor: 'cart operations' stamp: 'PGTA 11/24/2020 18:28:47' prior: 50870720!
purchaseValue
	| total |
	content do: [:item | total := (total + (catalog at: item)) ].
	^total! !

!testRun: #CartTest #test08_cartKnowsTotalPurchaseValue stamp: 'PGTA 11/24/2020 18:28:50'!
ERROR!
!Cart methodsFor: 'cart operations' stamp: 'PGTA 11/24/2020 18:29:13' prior: 50870725!
purchaseValue
	| total |
	total := 0.
	content do: [:item | total := (total + (catalog at: item)) ].
	^total! !

!testRun: #CartTest #test08_cartKnowsTotalPurchaseValue stamp: 'PGTA 11/24/2020 18:29:19'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'PGTA 11/24/2020 18:30:07' prior: 50870708!
test08_cartKnowsTotalPurchaseValue
	
	| total |
	cart1 add: isbn1 quantity: 2.
	cart1 add: isbn2 quantity: 3.
	
	total := (2*100) + (3*30).
	
	self assert: total equals: cart1 purchaseValue.! !

!testRun: #CartTest #test08_cartKnowsTotalPurchaseValue stamp: 'PGTA 11/24/2020 18:30:08'!
PASSED!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PGTA 11/24/2020 18:30:08'!
PASSED!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PGTA 11/24/2020 18:30:08'!
PASSED!

!testRun: #CartTest #test03_cannotAddISBNOutsideTheCatalogIntoCart stamp: 'PGTA 11/24/2020 18:30:08'!
PASSED!

!testRun: #CartTest #test04_cartContainsAllAddedBooksISBN stamp: 'PGTA 11/24/2020 18:30:08'!
PASSED!

!testRun: #CartTest #test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN stamp: 'PGTA 11/24/2020 18:30:08'!
PASSED!

!testRun: #CartTest #test06_theNumberOfCopiesToAddOfABookISBNMustBePositive stamp: 'PGTA 11/24/2020 18:30:08'!
PASSED!

!testRun: #CartTest #test07_theNumberOfCopiesToAddOfABookISBNMustBeInteger stamp: 'PGTA 11/24/2020 18:30:08'!
PASSED!

!testRun: #CartTest #test08_cartKnowsTotalPurchaseValue stamp: 'PGTA 11/24/2020 18:30:08'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/24/2020 18:37:15'!
test04_cashierPerformsTransactionWithMerchantProcessorIfCreditCardIsValid
	
	| cashier expiredCreditCard |
	cashier := Cashier withCatalog: catalog.
	
	expiredCreditCard := CreditCard withNumber: '1234567812345678' owner: 'Juan el irresistible'  expirationDate: '062010'.
	
	self should: [ cashier checkOut: cart withCard: expiredCreditCard ]
		raise: Error - MessageNotUnderstood! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/24/2020 18:39:38'!
test04_cashierLogsTransactionIfMerchantProcessorSaysOK
	
	| cashier |
	cashier := Cashier withCatalog: catalog.
	
	self assert: 'OK' equals: (cashier checkOut: cart withCard: enabledCreditCard).! !

!methodRemoval: CashierTest #test04_cashierPerformsTransactionWithMerchantProcessorIfCreditCardIsValid stamp: 'PGTA 11/24/2020 18:39:44'!
test04_cashierPerformsTransactionWithMerchantProcessorIfCreditCardIsValid
	
	| cashier expiredCreditCard |
	cashier := Cashier withCatalog: catalog.
	
	expiredCreditCard := CreditCard withNumber: '1234567812345678' owner: 'Juan el irresistible'  expirationDate: '062010'.
	
	self should: [ cashier checkOut: cart withCard: expiredCreditCard ]
		raise: Error - MessageNotUnderstood!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/24/2020 18:46:28' prior: 50870798!
test04_cashierLogsTransactionIfMerchantProcessorSaysOK
	
	| cashier register |
	register := OrderedCollection new.
	cashier := Cashier withRegister: register.
	
	cashier checkOut: cart withCard: enabledCreditCard.
	
	self assert: register first equals: cart.! !

!classDefinition: #MerchantProcessorInterface category: 'Tus-Libros-Iteracion2' stamp: 'PGTA 11/24/2020 18:55:12'!
Object subclass: #MerchantProcessorInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PGTA 11/24/2020 18:55:24' prior: 50870824!
test04_cashierLogsTransactionIfMerchantProcessorSaysOK
	
	| cashier register merchantIface |
	
	merchantIface := MerchantProcessorInterface new.
	register := OrderedCollection new.
	
	cashier := Cashier withRegister: register withMerchant: merchantIface.
	
	cashier checkOut: cart withCard: enabledCreditCard.
	
	self assert: register first equals: cart.! !

----STARTUP---- (24 November 2020 19:09:35) as C:\Users\paujimenez\Documents\Ingenieria1\cuisWindows64\20-windows64-TusLibros2\CuisUniversity-4384.image!


----End fileIn of C:\Users\paujimenez\Documents\Ingenieria1\IS1-2c-2020\20-TusLibros\Tus-Libros-Iteracion2.st----!

!classRenamed: #MerchantProcessorInterface as: #MerchantProcessorInterfaceSimulator stamp: 'PJ 11/24/2020 20:14:54'!
Smalltalk renameClassNamed: #MerchantProcessorInterface as: #MerchantProcessorInterfaceSimulator!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/24/2020 20:14:54' prior: 50867914!
test04_cashierLogsTransactionIfMerchantProcessorSaysOK
	
	| cashier register merchantIface |
	
	merchantIface := MerchantProcessorInterfaceSimulator new.
	register := OrderedCollection new.
	
	cashier := Cashier withRegister: register withMerchant: merchantIface.
	
	cashier checkOut: cart withCard: enabledCreditCard.
	
	self assert: register first equals: cart.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/24/2020 20:19:21' prior: 50868336!
test04_cashierLogsTransactionIfMerchantProcessorSaysOK
	
	| cashier register merchantIface |
	
	merchantIface := MerchantProcessorInterfaceSimulator new.
	register := OrderedCollection new.
	
	cashier := Cashier withRegister: register withMerchant: merchantIface.
	
	cashier checkOut: cart withCard: enabledCreditCard.
	
	self assert: register first equals: cart.! !

!classDefinition: #MPInterfaceSimulatorOpSuccess category: 'Tus-Libros-Iteracion2' stamp: 'PJ 11/24/2020 20:32:41'!
MerchantProcessorInterfaceSimulator subclass: #MPInterfaceSimulatorOpSuccess
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/24/2020 20:32:09' prior: 50868351!
test04_cashierLogsTransactionIfMerchantProcessorSaysOK
	
	| cashier register merchantIface |
	
	merchantIface := MPInterfaceSimulatorOpSuccess new.
	register := OrderedCollection new.
	
	cashier := Cashier withRegister: register withMerchant: merchantIface.
	
	cashier checkOut: cart withCard: enabledCreditCard.
	
	self assert: register first equals: cart.! !

!testRun: #CashierTest #test04_cashierLogsTransactionIfMerchantProcessorSaysOK stamp: 'PJ 11/24/2020 20:42:20'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'PJ 11/24/2020 20:42:58'!
withRegister: anOrderedCollection withMerchant: aMPInterfaceSimulatorOpSuccess 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithRegister: anOrderedCollection withMerchant: aMPInterfaceSimulatorOpSuccess ! !
!Cashier class methodsFor: 'instance creation' stamp: 'PJ 11/24/2020 20:44:36' prior: 50868393!
withRegister: aRegister withMerchant: aMerchantProcesorInterface
	
	^self new initializeWithRegister: aRegister withMerchant: aMerchantProcesorInterface ! !

!testRun: #CashierTest #test04_cashierLogsTransactionIfMerchantProcessorSaysOK stamp: 'PJ 11/24/2020 20:44:41'!
ERROR!

!classDefinition: #Cashier category: 'Tus-Libros-Iteracion2' stamp: 'PJ 11/24/2020 20:45:16'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog register'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!

!classDefinition: #Cashier category: 'Tus-Libros-Iteracion2' stamp: 'PJ 11/24/2020 20:45:16'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog register merchantProcesorInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!
!Cashier methodsFor: 'initialization' stamp: 'PJ 11/24/2020 20:45:16'!
initializeWithRegister: aRegister withMerchant: aMerchantProcesorInterface 
	self shouldBeImplemented.
	register := aRegister.
	merchantProcesorInterface := aMerchantProcesorInterface.! !
!Cashier methodsFor: 'initialization' stamp: 'PJ 11/24/2020 20:45:42' prior: 50868433!
initializeWithRegister: aRegister withMerchant: aMerchantProcesorInterface
	register := aRegister.
	merchantProcesorInterface := aMerchantProcesorInterface.! !

!testRun: #CashierTest #test04_cashierLogsTransactionIfMerchantProcessorSaysOK stamp: 'PJ 11/24/2020 20:45:45'!
ERROR!

----SNAPSHOT----(24 November 2020 20:53:34) CuisUniversity-4384.image priorSource: 17155564!

----SNAPSHOT----(25 November 2020 00:14:04) CuisUniversity-4384.image priorSource: 17177687!

----QUIT----(25 November 2020 00:14:14) CuisUniversity-4384.image priorSource: 17177781!

----STARTUP---- (25 November 2020 20:51:31) as C:\Users\paujimenez\Documents\Ingenieria1\cuisWindows64\20-windows64-TusLibros2\CuisUniversity-4384.image!


!testRun: #CashierTest #test04_cashierLogsTransactionIfMerchantProcessorSaysOK stamp: 'PJ 11/25/2020 20:57:47'!
ERROR!
!Cashier methodsFor: 'operations' stamp: 'PJ 11/25/2020 21:01:23' prior: 50868160!
checkOut: aCart withCard: aCreditCard
 
	aCart isEmpty ifTrue: [^self error: self class cannotCheckoutAnEmptyCartErrorDescription. ].
	aCreditCard isExpired ifTrue: [^self error: self class expiredCardErrorDescription ].
	register add: aCart.
	^self class okTransactionMessage! !

!testRun: #CashierTest #test04_cashierLogsTransactionIfMerchantProcessorSaysOK stamp: 'PJ 11/25/2020 21:01:24'!
PASSED!

!testRun: #CashierTest #test01_cashierCannotCheckoutAnEmptyCart stamp: 'PJ 11/25/2020 21:01:24'!
PASSED!

!testRun: #CashierTest #test02_cashierReturnsSuccessWithValidTransaction stamp: 'PJ 11/25/2020 21:01:24'!
ERROR!

!testRun: #CashierTest #test03_cashierRejectsTransactionWithExpiredCreditCard stamp: 'PJ 11/25/2020 21:01:24'!
PASSED!

!testRun: #CashierTest #test04_cashierLogsTransactionIfMerchantProcessorSaysOK stamp: 'PJ 11/25/2020 21:01:24'!
PASSED!

!testRun: #CashierTest #test02_cashierReturnsSuccessWithValidTransaction stamp: 'PJ 11/25/2020 21:01:24'!
ERROR!

!testRun: #CashierTest #test04_cashierLogsTransactionIfMerchantProcessorSaysOK stamp: 'PJ 11/25/2020 21:02:40'!
PASSED!

!testRun: #CashierTest #test01_cashierCannotCheckoutAnEmptyCart stamp: 'PJ 11/25/2020 21:02:40'!
PASSED!

!testRun: #CashierTest #test02_cashierReturnsSuccessWithValidTransaction stamp: 'PJ 11/25/2020 21:02:40'!
ERROR!

!testRun: #CashierTest #test03_cashierRejectsTransactionWithExpiredCreditCard stamp: 'PJ 11/25/2020 21:02:40'!
PASSED!

!testRun: #CashierTest #test04_cashierLogsTransactionIfMerchantProcessorSaysOK stamp: 'PJ 11/25/2020 21:02:40'!
PASSED!

!testRun: #CashierTest #test02_cashierReturnsSuccessWithValidTransaction stamp: 'PJ 11/25/2020 21:02:40'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/25/2020 21:04:36' prior: 50867876!
test01_cashierCannotCheckoutAnEmptyCart
	
	| cashier register merchantIface |
	
	merchantIface := MPInterfaceSimulatorOpSuccess new.
	register := OrderedCollection new.
	
	cashier := Cashier withRegister: register withMerchant: merchantIface.
	
	self should: [ cashier checkOut: cart withCard: enabledCreditCard ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier cannotCheckoutAnEmptyCartErrorDescription.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/25/2020 21:04:39' prior: 50868527!
test01_cashierCannotCheckoutAnEmptyCart
	
	| cashier register merchantIface |
	
	merchantIface := MPInterfaceSimulatorOpSuccess new.
	register := OrderedCollection new.
	
	cashier := Cashier withRegister: register withMerchant: merchantIface.
	
	self should: [ cashier checkOut: cart withCard: enabledCreditCard ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier cannotCheckoutAnEmptyCartErrorDescription.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/25/2020 21:06:04' prior: 50867889!
test02_cashierReturnsSuccessWithValidTransaction
	
	| cashier register merchantIface |
	
	merchantIface := MPInterfaceSimulatorOpSuccess new.
	register := OrderedCollection new.
	
	cashier := Cashier withRegister: register withMerchant: merchantIface.
	
	self assert: (cashier checkOut: cart withCard: enabledCreditCard) equals: (Cashier okTransactionMessage).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/25/2020 21:07:06' prior: 50867899!
test03_cashierRejectsTransactionWithExpiredCreditCard
	
	| cashier expiredCreditCard register merchantIface |
	
	merchantIface := MPInterfaceSimulatorOpSuccess new.
	register := OrderedCollection new.
	
	cashier := Cashier withRegister: register withMerchant: merchantIface.
	
	expiredCreditCard := CreditCard withNumber: '1234567812345678' owner: 'Juan el irresistible'  expirationDate: '062010'.
	
	self should: [ cashier checkOut: cart withCard: expiredCreditCard ]
		raise: Error - MessageNotUnderstood! !

!testRun: #CashierTest #test04_cashierLogsTransactionIfMerchantProcessorSaysOK stamp: 'PJ 11/25/2020 21:07:19'!
PASSED!

!testRun: #CashierTest #test01_cashierCannotCheckoutAnEmptyCart stamp: 'PJ 11/25/2020 21:07:19'!
FAILURE!

!testRun: #CashierTest #test02_cashierReturnsSuccessWithValidTransaction stamp: 'PJ 11/25/2020 21:07:19'!
PASSED!

!testRun: #CashierTest #test03_cashierRejectsTransactionWithExpiredCreditCard stamp: 'PJ 11/25/2020 21:07:19'!
PASSED!

!testRun: #CashierTest #test04_cashierLogsTransactionIfMerchantProcessorSaysOK stamp: 'PJ 11/25/2020 21:07:19'!
PASSED!

!testRun: #CashierTest #test01_cashierCannotCheckoutAnEmptyCart stamp: 'PJ 11/25/2020 21:07:19'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/25/2020 21:09:58' prior: 50868544!
test01_cashierCannotCheckoutAnEmptyCart
	
	| cashier register merchantIface emptyCart|
	
	merchantIface := MPInterfaceSimulatorOpSuccess new.
	register := OrderedCollection new.
	emptyCart := Cart withCatalog: catalog.
	
	cashier := Cashier withRegister: register withMerchant: merchantIface.
	
	self should: [ cashier checkOut: emptyCart withCard: enabledCreditCard ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier cannotCheckoutAnEmptyCartErrorDescription.! !

!testRun: #CashierTest #test01_cashierCannotCheckoutAnEmptyCart stamp: 'PJ 11/25/2020 21:10:00'!
PASSED!

!testRun: #CashierTest #test01_cashierCannotCheckoutAnEmptyCart stamp: 'PJ 11/25/2020 21:10:00'!
PASSED!

!testRun: #CashierTest #test02_cashierReturnsSuccessWithValidTransaction stamp: 'PJ 11/25/2020 21:10:00'!
PASSED!

!testRun: #CashierTest #test03_cashierRejectsTransactionWithExpiredCreditCard stamp: 'PJ 11/25/2020 21:10:00'!
PASSED!

!testRun: #CashierTest #test04_cashierLogsTransactionIfMerchantProcessorSaysOK stamp: 'PJ 11/25/2020 21:10:00'!
PASSED!

!classDefinition: #MPInterfaceSimulatorStolenCard category: 'Tus-Libros-Iteracion2' stamp: 'PJ 11/25/2020 21:22:14'!
MerchantProcessorInterfaceSimulator subclass: #MPInterfaceSimulatorStolenCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/25/2020 21:21:44'!
test05_cashierFailsTransactionIfMerchantProcessorSaysStolenCard
	
	| cashier register merchantIface |
	
	merchantIface := MPInterfaceSimulatorStolenCard new.
	register := OrderedCollection new.
	
	cashier := Cashier withRegister: register withMerchant: merchantIface.
	
	self should: [cashier checkOut: cart withCard: enabledCreditCard.]
		raise: Error - MessageNotUnderstood.	
	
	self assert: register isEmpty.! !

!testRun: #CashierTest #test05_cashierFailsTransactionIfMerchantProcessorSaysStolenCard stamp: 'PJ 11/25/2020 21:23:10'!
FAILURE!
!Cashier methodsFor: 'operations' stamp: 'PJ 11/25/2020 21:27:10' prior: 50868471!
checkOut: aCart withCard: aCreditCard
 
	aCart isEmpty ifTrue: [^self error: self class cannotCheckoutAnEmptyCartErrorDescription. ].
	aCreditCard isExpired ifTrue: [^self error: self class expiredCardErrorDescription ].
	merchantProcesorInterface debit: aCart purchaseValue from: aCreditCard.
	register add: aCart.
	^self class okTransactionMessage! !

!testRun: #CashierTest #test05_cashierFailsTransactionIfMerchantProcessorSaysStolenCard stamp: 'PJ 11/25/2020 21:27:16'!
ERROR!
!MerchantProcessorInterfaceSimulator methodsFor: 'testing' stamp: 'PJ 11/25/2020 21:27:57'!
debit: aSmallInteger from: aCreditCard 
	self shouldBeImplemented.! !
!MerchantProcessorInterfaceSimulator methodsFor: 'testing' stamp: 'PJ 11/25/2020 21:28:25' prior: 50868700!
debit: aPurchaseValue from: aCreditCard 
	self subclassResponsibility.! !

!testRun: #CashierTest #test05_cashierFailsTransactionIfMerchantProcessorSaysStolenCard stamp: 'PJ 11/25/2020 21:28:26'!
PASSED!

!testRun: #CashierTest #test01_cashierCannotCheckoutAnEmptyCart stamp: 'PJ 11/25/2020 21:28:26'!
PASSED!

!testRun: #CashierTest #test02_cashierReturnsSuccessWithValidTransaction stamp: 'PJ 11/25/2020 21:28:26'!
ERROR!

!testRun: #CashierTest #test03_cashierRejectsTransactionWithExpiredCreditCard stamp: 'PJ 11/25/2020 21:28:26'!
PASSED!

!testRun: #CashierTest #test04_cashierLogsTransactionIfMerchantProcessorSaysOK stamp: 'PJ 11/25/2020 21:28:26'!
ERROR!

!testRun: #CashierTest #test05_cashierFailsTransactionIfMerchantProcessorSaysStolenCard stamp: 'PJ 11/25/2020 21:28:26'!
PASSED!

!testRun: #CashierTest #test02_cashierReturnsSuccessWithValidTransaction stamp: 'PJ 11/25/2020 21:28:30'!
ERROR!
!MPInterfaceSimulatorOpSuccess methodsFor: 'testing' stamp: 'PJ 11/25/2020 21:28:54' overrides: 50868706!
debit: aSmallInteger from: aCreditCard 
	self shouldBeImplemented.! !
!MPInterfaceSimulatorOpSuccess methodsFor: 'testing' stamp: 'PJ 11/25/2020 21:30:24' prior: 50868738 overrides: 50868706!
debit: aPurchaseValue from: aCreditCard 
	! !

!testRun: #CashierTest #test02_cashierReturnsSuccessWithValidTransaction stamp: 'PJ 11/25/2020 21:30:29'!
PASSED!

!testRun: #CashierTest #test04_cashierLogsTransactionIfMerchantProcessorSaysOK stamp: 'PJ 11/25/2020 21:30:31'!
PASSED!

!testRun: #CashierTest #test05_cashierFailsTransactionIfMerchantProcessorSaysStolenCard stamp: 'PJ 11/25/2020 21:30:46'!
PASSED!

!testRun: #CashierTest #test01_cashierCannotCheckoutAnEmptyCart stamp: 'PJ 11/25/2020 21:30:46'!
PASSED!

!testRun: #CashierTest #test02_cashierReturnsSuccessWithValidTransaction stamp: 'PJ 11/25/2020 21:30:46'!
PASSED!

!testRun: #CashierTest #test03_cashierRejectsTransactionWithExpiredCreditCard stamp: 'PJ 11/25/2020 21:30:46'!
PASSED!

!testRun: #CashierTest #test04_cashierLogsTransactionIfMerchantProcessorSaysOK stamp: 'PJ 11/25/2020 21:30:46'!
PASSED!

!testRun: #CashierTest #test05_cashierFailsTransactionIfMerchantProcessorSaysStolenCard stamp: 'PJ 11/25/2020 21:30:46'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/25/2020 21:39:16' prior: 50868662!
test05_cashierFailsTransactionIfMerchantProcessorSaysStolenCard
	
	| cashier register merchantIface |
	
	merchantIface := MPInterfaceSimulatorStolenCard new.
	register := OrderedCollection new.
	
	cashier := Cashier withRegister: register withMerchant: merchantIface.
	
	self should: [cashier checkOut: cart withCard: enabledCreditCard.]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier stolenCardErrorDescription.
	
	self assert: register isEmpty.! !

!testRun: #CashierTest #test05_cashierFailsTransactionIfMerchantProcessorSaysStolenCard stamp: 'PJ 11/25/2020 21:39:21'!
ERROR!
!Cashier class methodsFor: 'errors' stamp: 'PJ 11/25/2020 21:39:36'!
stolenCardErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'errors' stamp: 'PJ 11/25/2020 21:40:15' prior: 50868800!
stolenCardErrorDescription
	^'Stolen Card'! !

!testRun: #CashierTest #test05_cashierFailsTransactionIfMerchantProcessorSaysStolenCard stamp: 'PJ 11/25/2020 21:40:19'!
FAILURE!
!MPInterfaceSimulatorStolenCard methodsFor: 'nil' stamp: 'PJ 11/25/2020 21:42:10' overrides: 50868706!
debit: aPurchaseValue from: aCreditCard 
	^self error: 'MP: Stolen Card'.! !

!testRun: #CashierTest #test05_cashierFailsTransactionIfMerchantProcessorSaysStolenCard stamp: 'PJ 11/25/2020 21:42:28'!
FAILURE!
!Cashier methodsFor: 'operations' stamp: 'PJ 11/25/2020 21:47:36' prior: 50868682!
checkOut: aCart withCard: aCreditCard
 
	aCart isEmpty ifTrue: [^self error: self class cannotCheckoutAnEmptyCartErrorDescription. ].
	aCreditCard isExpired ifTrue: [^self error: self class expiredCardErrorDescription ].
	
	[merchantProcesorInterface debit: aCart purchaseValue from: aCreditCard]
	on: Error
	do: [^self error: self class stolenCardErrorDescription].
	
	register add: aCart.
	^self class okTransactionMessage! !

!testRun: #CashierTest #test05_cashierFailsTransactionIfMerchantProcessorSaysStolenCard stamp: 'PJ 11/25/2020 21:47:39'!
PASSED!

!testRun: #CashierTest #test01_cashierCannotCheckoutAnEmptyCart stamp: 'PJ 11/25/2020 21:47:39'!
PASSED!

!testRun: #CashierTest #test02_cashierReturnsSuccessWithValidTransaction stamp: 'PJ 11/25/2020 21:47:39'!
PASSED!

!testRun: #CashierTest #test03_cashierRejectsTransactionWithExpiredCreditCard stamp: 'PJ 11/25/2020 21:47:39'!
PASSED!

!testRun: #CashierTest #test04_cashierLogsTransactionIfMerchantProcessorSaysOK stamp: 'PJ 11/25/2020 21:47:39'!
PASSED!

!testRun: #CashierTest #test05_cashierFailsTransactionIfMerchantProcessorSaysStolenCard stamp: 'PJ 11/25/2020 21:47:39'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/25/2020 21:51:50'!
test06_cashierFailsTransactionIfMerchantProcessorCardwithNoFunds
	
	| cashier register merchantIface |
	
	merchantIface := MPInterfaceSimulatorStolenCard new.
	register := OrderedCollection new.
	
	cashier := Cashier withRegister: register withMerchant: merchantIface.
	
	self should: [cashier checkOut: cart withCard: enabledCreditCard.]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier noFundsCardErrorDescription.
	
	self assert: register isEmpty.! !

!testRun: #CashierTest #test06_cashierFailsTransactionIfMerchantProcessorCardwithNoFunds stamp: 'PJ 11/25/2020 21:51:55'!
ERROR!
!Cashier class methodsFor: 'errors' stamp: 'PJ 11/25/2020 21:52:17'!
noFundsCardErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'errors' stamp: 'PJ 11/25/2020 21:52:52' prior: 50868884!
noFundsCardErrorDescription
	^'The card has no funds!!'! !

!testRun: #CashierTest #test06_cashierFailsTransactionIfMerchantProcessorCardwithNoFunds stamp: 'PJ 11/25/2020 21:53:06'!
FAILURE!

!classDefinition: #MPInterfaceSimulatorNoFundsCard category: 'Tus-Libros-Iteracion2' stamp: 'PJ 11/25/2020 21:55:05'!
MerchantProcessorInterfaceSimulator subclass: #MPInterfaceSimulatorNoFundsCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/25/2020 21:54:45' prior: 50868779!
test05_cashierFailsTransactionIfMerchantProcessorSaysStolenCard
	
	| cashier register merchantIface |
	
	merchantIface := MPInterfaceSimulatorNoFundsCard new.
	register := OrderedCollection new.
	
	cashier := Cashier withRegister: register withMerchant: merchantIface.
	
	self should: [cashier checkOut: cart withCard: enabledCreditCard.]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier stolenCardErrorDescription.
	
	self assert: register isEmpty.! !

!testRun: #CashierTest #test05_cashierFailsTransactionIfMerchantProcessorSaysStolenCard stamp: 'PJ 11/25/2020 21:55:16'!
PASSED!

!testRun: #CashierTest #test01_cashierCannotCheckoutAnEmptyCart stamp: 'PJ 11/25/2020 21:55:16'!
PASSED!

!testRun: #CashierTest #test02_cashierReturnsSuccessWithValidTransaction stamp: 'PJ 11/25/2020 21:55:16'!
PASSED!

!testRun: #CashierTest #test03_cashierRejectsTransactionWithExpiredCreditCard stamp: 'PJ 11/25/2020 21:55:16'!
PASSED!

!testRun: #CashierTest #test04_cashierLogsTransactionIfMerchantProcessorSaysOK stamp: 'PJ 11/25/2020 21:55:16'!
PASSED!

!testRun: #CashierTest #test05_cashierFailsTransactionIfMerchantProcessorSaysStolenCard stamp: 'PJ 11/25/2020 21:55:16'!
PASSED!

!testRun: #CashierTest #test06_cashierFailsTransactionIfMerchantProcessorCardwithNoFunds stamp: 'PJ 11/25/2020 21:55:16'!
FAILURE!

!testRun: #CashierTest #test06_cashierFailsTransactionIfMerchantProcessorCardwithNoFunds stamp: 'PJ 11/25/2020 21:55:16'!
FAILURE!
!MPInterfaceSimulatorNoFundsCard methodsFor: 'nil' stamp: 'PJ 11/25/2020 21:57:18' overrides: 50868706!
debit: aPurchaseValue from: aCreditCard 
	^self error: 'MP: No Funds'.! !
!Cashier class methodsFor: 'errors' stamp: 'PJ 11/25/2020 22:10:44'!
unableToCompleteTransactionErrorDescription
	^'Unable To Complete Transaction'! !
!Cashier methodsFor: 'operations' stamp: 'PJ 11/25/2020 22:11:34' prior: 50868824!
checkOut: aCart withCard: aCreditCard
 
	aCart isEmpty ifTrue: [^self error: self class cannotCheckoutAnEmptyCartErrorDescription. ].
	aCreditCard isExpired ifTrue: [^self error: self class expiredCardErrorDescription ].
	
	[merchantProcesorInterface debit: aCart purchaseValue from: aCreditCard]
	on: Error
	do: [^self error: self class unableToCompleteTransactionErrorDescription ].
	
	register add: aCart.
	^self class okTransactionMessage! !

!testRun: #CashierTest #test06_cashierFailsTransactionIfMerchantProcessorCardwithNoFunds stamp: 'PJ 11/25/2020 22:11:50'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/25/2020 22:12:12' prior: 50868863!
test06_cashierFailsTransactionIfMerchantProcessorCardwithNoFunds
	
	| cashier register merchantIface |
	
	merchantIface := MPInterfaceSimulatorStolenCard new.
	register := OrderedCollection new.
	
	cashier := Cashier withRegister: register withMerchant: merchantIface.
	
	self should: [cashier checkOut: cart withCard: enabledCreditCard.]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier unableToCompleteTransactionErrorDescription.
	
	self assert: register isEmpty.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/25/2020 22:12:25' prior: 50868908!
test05_cashierFailsTransactionIfMerchantProcessorSaysStolenCard
	
	| cashier register merchantIface |
	
	merchantIface := MPInterfaceSimulatorNoFundsCard new.
	register := OrderedCollection new.
	
	cashier := Cashier withRegister: register withMerchant: merchantIface.
	
	self should: [cashier checkOut: cart withCard: enabledCreditCard.]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier unableToCompleteTransactionErrorDescription.
	
	self assert: register isEmpty.! !

!testRun: #CashierTest #test05_cashierFailsTransactionIfMerchantProcessorSaysStolenCard stamp: 'PJ 11/25/2020 22:12:28'!
PASSED!

!testRun: #CashierTest #test01_cashierCannotCheckoutAnEmptyCart stamp: 'PJ 11/25/2020 22:12:28'!
PASSED!

!testRun: #CashierTest #test02_cashierReturnsSuccessWithValidTransaction stamp: 'PJ 11/25/2020 22:12:28'!
PASSED!

!testRun: #CashierTest #test03_cashierRejectsTransactionWithExpiredCreditCard stamp: 'PJ 11/25/2020 22:12:28'!
PASSED!

!testRun: #CashierTest #test04_cashierLogsTransactionIfMerchantProcessorSaysOK stamp: 'PJ 11/25/2020 22:12:28'!
PASSED!

!testRun: #CashierTest #test05_cashierFailsTransactionIfMerchantProcessorSaysStolenCard stamp: 'PJ 11/25/2020 22:12:28'!
PASSED!

!testRun: #CashierTest #test06_cashierFailsTransactionIfMerchantProcessorCardwithNoFunds stamp: 'PJ 11/25/2020 22:12:28'!
PASSED!

----SNAPSHOT----(25 November 2020 22:12:34) CuisUniversity-4384.image priorSource: 17177875!

!classDefinition: #MPInterfaceSimulatorDown category: 'Tus-Libros-Iteracion2' stamp: 'PJ 11/25/2020 22:42:01'!
MerchantProcessorInterfaceSimulator subclass: #MPInterfaceSimulatorDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/25/2020 22:41:14'!
test07_cashierSavesBatchTransactionIfMerchantProcessorIsDown
	
	| cashier register merchantIface |
	
	merchantIface := MPInterfaceSimulatorDown new.
	register := OrderedCollection new.
	
	cashier := Cashier withRegister: register withMerchant: merchantIface.
	
	self should: [cashier checkOut: cart withCard: enabledCreditCard.]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier transactionWillBeMadeLaterErrorDescription.
	
	self assert: register isEmpty.! !

!testRun: #CashierTest #test07_cashierSavesBatchTransactionIfMerchantProcessorIsDown stamp: 'PJ 11/25/2020 22:42:13'!
ERROR!
!Cashier class methodsFor: 'errors' stamp: 'PJ 11/25/2020 22:42:39'!
transactionWillBeMadeLaterErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'errors' stamp: 'PJ 11/25/2020 22:43:16' prior: 50869087!
transactionWillBeMadeLaterErrorDescription
	^'Merchant Processor Interface Simulator'.! !

!testRun: #CashierTest #test07_cashierSavesBatchTransactionIfMerchantProcessorIsDown stamp: 'PJ 11/25/2020 22:43:18'!
FAILURE!
!MPInterfaceSimulatorDown methodsFor: 'nil' stamp: 'PJ 11/25/2020 22:44:29' overrides: 50868706!
debit: aPurchaseValue from: aCreditCard 
	^self error: 'MP: Offline'.! !

FixedGregorianDate today year !

FixedGregorianDate today yearNumber !

FixedGregorianDate today!

self year !

self year number !

self year number asString !

FixedGregorianDate today month !

FixedGregorianDate today monthOfYear !

FixedGregorianDate today month number !

FixedGregorianDate today day !

FixedGregorianDate today dayOfMonth !

FixedGregorianDate today day number!

FixedGregorianDate today dayNumber !

!classDefinition: #MPException category: 'Tus-Libros-Iteracion2' stamp: 'PJ 11/25/2020 23:02:06'!
Object subclass: #MPException
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!
!Cashier methodsFor: 'operations' stamp: 'PJ 11/25/2020 23:01:56' prior: 50868968!
checkOut: aCart withCard: aCreditCard
 
	aCart isEmpty ifTrue: [^self error: self class cannotCheckoutAnEmptyCartErrorDescription. ].
	aCreditCard isExpired ifTrue: [^self error: self class expiredCardErrorDescription ].
	
	[merchantProcesorInterface debit: aCart purchaseValue from: aCreditCard]
	on: Error
	do: [^self error: self class unableToCompleteTransactionErrorDescription ]
	on: MPException
	do: [ |aStream aFilenameString today|
		today := FixedGregorianDate today.
		aFilenameString := 'TUSLIBROS_INPUT_', today year number asString, today month number, today dayNumber, '.csv'.
		aStream := aFilenameString asFileName appendStreamDo:[:stream | stream nextPutAll: 'test,sdaspp,a sdasdk'].
		].
	
	register add: aCart.
	^self class okTransactionMessage! !
!Cashier methodsFor: 'operations' stamp: 'PJ 11/25/2020 23:02:29' prior: 50869128!
checkOut: aCart withCard: aCreditCard
 
	aCart isEmpty ifTrue: [^self error: self class cannotCheckoutAnEmptyCartErrorDescription. ].
	aCreditCard isExpired ifTrue: [^self error: self class expiredCardErrorDescription ].
	
	[merchantProcesorInterface debit: aCart purchaseValue from: aCreditCard]
	on: Error
	do: [^self error: self class unableToCompleteTransactionErrorDescription ]
	on: MPException
	do: [ |aFilenameString today|
		today := FixedGregorianDate today.
		aFilenameString := 'TUSLIBROS_INPUT_', today year number asString, today month number, today dayNumber, '.csv'.
		aFilenameString asFileName appendStreamDo:[:stream | stream nextPutAll: 'test,sdaspp,a sdasdk'].
		].
	
	register add: aCart.
	^self class okTransactionMessage! !
!MPInterfaceSimulatorDown methodsFor: 'as yet unclassified' stamp: 'PJ 11/25/2020 23:03:32' prior: 50869102 overrides: 50868706!
debit: aPurchaseValue from: aCreditCard 
	"^self error: 'MP: Offline'."
	^MPException new.! !
!Cashier methodsFor: 'operations' stamp: 'PJ 11/25/2020 23:07:49' prior: 50869155!
checkOut: aCart withCard: aCreditCard
 
	aCart isEmpty ifTrue: [^self error: self class cannotCheckoutAnEmptyCartErrorDescription. ].
	aCreditCard isExpired ifTrue: [^self error: self class expiredCardErrorDescription ].
	
	[merchantProcesorInterface debit: aCart purchaseValue from: aCreditCard]
	on: Error
	do: [^self error: self class unableToCompleteTransactionErrorDescription ]
	on: MPException
	do: [ |aFilenameString today|
		today := FixedGregorianDate today.
		aFilenameString := 'TUSLIBROS_INPUT_', today year number asString, today month number, today dayNumber, '.csv'.
		aFilenameString asFileName appendStreamDo:[:stream | stream nextPutAll: 'test,sdaspp,a sdasdk'].
		^self error: self class transactionWillBeMadeLaterErrorDescription
	].
	
	register add: aCart.
	^self class okTransactionMessage! !

!testRun: #CashierTest #test07_cashierSavesBatchTransactionIfMerchantProcessorIsDown stamp: 'PJ 11/25/2020 23:08:02'!
FAILURE!
!Cashier methodsFor: 'operations' stamp: 'PJ 11/25/2020 23:09:02' prior: 50869189!
checkOut: aCart withCard: aCreditCard
 
	aCart isEmpty ifTrue: [^self error: self class cannotCheckoutAnEmptyCartErrorDescription. ].
	aCreditCard isExpired ifTrue: [^self error: self class expiredCardErrorDescription ].
	
	[merchantProcesorInterface debit: aCart purchaseValue from: aCreditCard]
	on: Error
	do: [^self error: self class unableToCompleteTransactionErrorDescription ]
	on: MPException
	do: [ "|aFilenameString today|
		today := FixedGregorianDate today.
		aFilenameString := 'TUSLIBROS_INPUT_', today year number asString, today month number, today dayNumber, '.csv'.
		aFilenameString asFileName appendStreamDo:[:stream | stream nextPutAll: 'test,sdaspp,a sdasdk']."
		^self error: self class transactionWillBeMadeLaterErrorDescription
	].
	
	register add: aCart.
	^self class okTransactionMessage! !

!testRun: #CashierTest #test07_cashierSavesBatchTransactionIfMerchantProcessorIsDown stamp: 'PJ 11/25/2020 23:09:13'!
FAILURE!
!MPInterfaceSimulatorDown methodsFor: 'as yet unclassified' stamp: 'PJ 11/25/2020 23:09:38' prior: 50869183 overrides: 50868706!
debit: aPurchaseValue from: aCreditCard 
	"^self error: 'MP: Offline'."
	^MPException.! !

!testRun: #CashierTest #test07_cashierSavesBatchTransactionIfMerchantProcessorIsDown stamp: 'PJ 11/25/2020 23:09:54'!
FAILURE!

merchantProcesorInterface debit: aCart purchaseValue from: aCreditCard!

MPException!

self value!
!Cashier methodsFor: 'operations' stamp: 'PJ 11/25/2020 23:17:08' prior: 50869222!
checkOut: aCart withCard: aCreditCard
 
	aCart isEmpty ifTrue: [^self error: self class cannotCheckoutAnEmptyCartErrorDescription. ].
	aCreditCard isExpired ifTrue: [^self error: self class expiredCardErrorDescription ].
	
	[merchantProcesorInterface debit: aCart purchaseValue from: aCreditCard]
	on: Error
	do: [^self error: self class unableToCompleteTransactionErrorDescription ]
	on: DomainError
	do: [ "|aFilenameString today|
		today := FixedGregorianDate today.
		aFilenameString := 'TUSLIBROS_INPUT_', today year number asString, today month number, today dayNumber, '.csv'.
		aFilenameString asFileName appendStreamDo:[:stream | stream nextPutAll: 'test,sdaspp,a sdasdk']."
		^self error: self class transactionWillBeMadeLaterErrorDescription
	].
	
	register add: aCart.
	^self class okTransactionMessage! !
!MPInterfaceSimulatorDown methodsFor: 'as yet unclassified' stamp: 'PJ 11/25/2020 23:22:19' prior: 50869256 overrides: 50868706!
debit: aPurchaseValue from: aCreditCard 
	"^self error: 'MP: Offline'."
	^DomainError signal.! !

!testRun: #CashierTest #test07_cashierSavesBatchTransactionIfMerchantProcessorIsDown stamp: 'PJ 11/25/2020 23:22:31'!
FAILURE!

!testRun: #CashierTest #test07_cashierSavesBatchTransactionIfMerchantProcessorIsDown stamp: 'PJ 11/25/2020 23:23:19'!
FAILURE!

MPException subclass: #MPOk
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!

!classDefinition: #MPOk category: 'Tus-Libros-Iteracion2' stamp: 'PJ 11/25/2020 23:25:08'!
MPException subclass: #MPOk
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!

MPException subclass: #MPError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!

!classDefinition: #MPError category: 'Tus-Libros-Iteracion2' stamp: 'PJ 11/25/2020 23:25:18'!
MPException subclass: #MPError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!

MPException subclass: #MPOffline
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!

!classDefinition: #MPOffline category: 'Tus-Libros-Iteracion2' stamp: 'PJ 11/25/2020 23:25:48'!
MPException subclass: #MPOffline
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros-Iteracion2'!
!MPInterfaceSimulatorDown methodsFor: 'as yet unclassified' stamp: 'PJ 11/25/2020 23:26:50' prior: 50869299 overrides: 50868706!
debit: aPurchaseValue from: aCreditCard 
	"^self error: 'MP: Offline'."
	^MPOffline.! !
!MPInterfaceSimulatorNoFundsCard methodsFor: 'as yet unclassified' stamp: 'PJ 11/25/2020 23:28:15' prior: 50868957 overrides: 50868706!
debit: aPurchaseValue from: aCreditCard 
	"^self error: 'MP: No Funds'."
	^MPError ! !
!MPInterfaceSimulatorStolenCard methodsFor: 'as yet unclassified' stamp: 'PJ 11/25/2020 23:28:25' prior: 50868814 overrides: 50868706!
debit: aPurchaseValue from: aCreditCard 
	"^self error: 'MP: Stolen Card'."
	^MPError ! !
!MPInterfaceSimulatorOpSuccess methodsFor: 'testing' stamp: 'PJ 11/25/2020 23:28:43' prior: 50868744 overrides: 50868706!
debit: aPurchaseValue from: aCreditCard 
	^MPOk! !
!Cashier methodsFor: 'operations' stamp: 'PJ 11/25/2020 23:29:39' prior: 50869269!
checkOut: aCart withCard: aCreditCard
 
	aCart isEmpty ifTrue: [^self error: self class cannotCheckoutAnEmptyCartErrorDescription. ].
	aCreditCard isExpired ifTrue: [^self error: self class expiredCardErrorDescription ].
	
	[merchantProcesorInterface debit: aCart purchaseValue from: aCreditCard]
	on: MPError 
	do: [^self error: self class unableToCompleteTransactionErrorDescription ]
	on: DomainError
	do: [ "|aFilenameString today|
		today := FixedGregorianDate today.
		aFilenameString := 'TUSLIBROS_INPUT_', today year number asString, today month number, today dayNumber, '.csv'.
		aFilenameString asFileName appendStreamDo:[:stream | stream nextPutAll: 'test,sdaspp,a sdasdk']."
		^self error: self class transactionWillBeMadeLaterErrorDescription
	].
	
	register add: aCart.
	^self class okTransactionMessage! !

!testRun: #CashierTest #test07_cashierSavesBatchTransactionIfMerchantProcessorIsDown stamp: 'PJ 11/25/2020 23:29:44'!
FAILURE!

!testRun: #CashierTest #test06_cashierFailsTransactionIfMerchantProcessorCardwithNoFunds stamp: 'PJ 11/25/2020 23:30:00'!
FAILURE!
!Cashier methodsFor: 'operations' stamp: 'PJ 11/25/2020 23:32:38' prior: 50869376!
checkOut: aCart withCard: aCreditCard
 
	|answer|
	aCart isEmpty ifTrue: [^self error: self class cannotCheckoutAnEmptyCartErrorDescription. ].
	aCreditCard isExpired ifTrue: [^self error: self class expiredCardErrorDescription ].
	
	answer := merchantProcesorInterface debit: aCart purchaseValue from: aCreditCard.
	(answer isKindOf: MPError) ifTrue: [^self error: self class unableToCompleteTransactionErrorDescription ].
	(answer isKindOf: MPOffline ) ifTrue: [ "|aFilenameString today|
		today := FixedGregorianDate today.
		aFilenameString := 'TUSLIBROS_INPUT_', today year number asString, today month number, today dayNumber, '.csv'.
		aFilenameString asFileName appendStreamDo:[:stream | stream nextPutAll: 'test,sdaspp,a sdasdk']."
		^self error: self class transactionWillBeMadeLaterErrorDescription
	].
	
	register add: aCart.
	^self class okTransactionMessage! !

!testRun: #CashierTest #test07_cashierSavesBatchTransactionIfMerchantProcessorIsDown stamp: 'PJ 11/25/2020 23:32:52'!
FAILURE!

!testRun: #CashierTest #test07_cashierSavesBatchTransactionIfMerchantProcessorIsDown stamp: 'PJ 11/25/2020 23:34:24'!
FAILURE!

answer!

answer isKindOf: MPOffline!

answer!

self class!

answer isKindOf: MPOffline!

answer isMemberOf: MPError!

answer isMemberOf: MPOffline!

answer!

self isKindOf: self!
!MPInterfaceSimulatorDown methodsFor: 'as yet unclassified' stamp: 'PJ 11/25/2020 23:39:47' prior: 50869350 overrides: 50868706!
debit: aPurchaseValue from: aCreditCard 
	"^self error: 'MP: Offline'."
	^MPOffline new.! !
!MPInterfaceSimulatorNoFundsCard methodsFor: 'as yet unclassified' stamp: 'PJ 11/25/2020 23:39:55' prior: 50869357 overrides: 50868706!
debit: aPurchaseValue from: aCreditCard 
	"^self error: 'MP: No Funds'."
	^MPError new ! !
!MPInterfaceSimulatorOpSuccess methodsFor: 'testing' stamp: 'PJ 11/25/2020 23:40:08' prior: 50869371 overrides: 50868706!
debit: aPurchaseValue from: aCreditCard 
	^MPOk new! !
!MPInterfaceSimulatorStolenCard methodsFor: 'as yet unclassified' stamp: 'PJ 11/25/2020 23:40:16' prior: 50869364 overrides: 50868706!
debit: aPurchaseValue from: aCreditCard 
	"^self error: 'MP: Stolen Card'."
	^MPError new! !

answer!

answer isKindOf: MPOffline !

!testRun: #CashierTest #test07_cashierSavesBatchTransactionIfMerchantProcessorIsDown stamp: 'PJ 11/25/2020 23:41:32'!
PASSED!

!testRun: #CashierTest #test01_cashierCannotCheckoutAnEmptyCart stamp: 'PJ 11/25/2020 23:41:32'!
PASSED!

!testRun: #CashierTest #test02_cashierReturnsSuccessWithValidTransaction stamp: 'PJ 11/25/2020 23:41:32'!
PASSED!

!testRun: #CashierTest #test03_cashierRejectsTransactionWithExpiredCreditCard stamp: 'PJ 11/25/2020 23:41:32'!
PASSED!

!testRun: #CashierTest #test04_cashierLogsTransactionIfMerchantProcessorSaysOK stamp: 'PJ 11/25/2020 23:41:32'!
PASSED!

!testRun: #CashierTest #test05_cashierFailsTransactionIfMerchantProcessorSaysStolenCard stamp: 'PJ 11/25/2020 23:41:32'!
PASSED!

!testRun: #CashierTest #test06_cashierFailsTransactionIfMerchantProcessorCardwithNoFunds stamp: 'PJ 11/25/2020 23:41:32'!
PASSED!

!testRun: #CashierTest #test07_cashierSavesBatchTransactionIfMerchantProcessorIsDown stamp: 'PJ 11/25/2020 23:41:32'!
PASSED!

----SNAPSHOT----(25 November 2020 23:41:43) CuisUniversity-4384.image priorSource: 17196890!

!methodRemoval: Cashier #initializeWithCatalog: stamp: 'PJ 11/25/2020 23:42:38'!
initializeWithCatalog: aCatalog 

	catalog := aCatalog.!

!testRun: #CashierTest #test06_cashierFailsTransactionIfMerchantProcessorCardwithNoFunds stamp: 'PJ 11/25/2020 23:42:45'!
PASSED!

!testRun: #CashierTest #test01_cashierCannotCheckoutAnEmptyCart stamp: 'PJ 11/25/2020 23:42:45'!
PASSED!

!testRun: #CashierTest #test02_cashierReturnsSuccessWithValidTransaction stamp: 'PJ 11/25/2020 23:42:45'!
PASSED!

!testRun: #CashierTest #test03_cashierRejectsTransactionWithExpiredCreditCard stamp: 'PJ 11/25/2020 23:42:45'!
PASSED!

!testRun: #CashierTest #test04_cashierLogsTransactionIfMerchantProcessorSaysOK stamp: 'PJ 11/25/2020 23:42:45'!
PASSED!

!testRun: #CashierTest #test05_cashierFailsTransactionIfMerchantProcessorSaysStolenCard stamp: 'PJ 11/25/2020 23:42:45'!
PASSED!

!testRun: #CashierTest #test06_cashierFailsTransactionIfMerchantProcessorCardwithNoFunds stamp: 'PJ 11/25/2020 23:42:45'!
PASSED!

!testRun: #CashierTest #test07_cashierSavesBatchTransactionIfMerchantProcessorIsDown stamp: 'PJ 11/25/2020 23:42:45'!
PASSED!
!Cashier methodsFor: 'operations' stamp: 'PJ 11/25/2020 23:43:00' prior: 50869413!
checkOut: aCart withCard: aCreditCard
 
	|answer|
	aCart isEmpty ifTrue: [^self error: self class cannotCheckoutAnEmptyCartErrorDescription. ].
	aCreditCard isExpired ifTrue: [^self error: self class expiredCardErrorDescription ].
	
	answer := merchantProcesorInterface debit: aCart purchaseValue from: aCreditCard.
	(answer isKindOf: MPError) ifTrue: [^self error: self class unableToCompleteTransactionErrorDescription ].
	(answer isKindOf: MPOffline ) ifTrue: [ |aFilenameString today|
		today := FixedGregorianDate today.
		aFilenameString := 'TUSLIBROS_INPUT_', today year number asString, today month number, today dayNumber, '.csv'.
		aFilenameString asFileName appendStreamDo:[:stream | stream nextPutAll: 'test,sdaspp,a sdasdk'].
		^self error: self class transactionWillBeMadeLaterErrorDescription
	].
	
	register add: aCart.
	^self class okTransactionMessage! !

!testRun: #CashierTest #test07_cashierSavesBatchTransactionIfMerchantProcessorIsDown stamp: 'PJ 11/25/2020 23:43:06'!
ERROR!
!Cashier methodsFor: 'operations' stamp: 'PJ 11/25/2020 23:43:39' prior: 50869555!
checkOut: aCart withCard: aCreditCard
 
	|answer|
	aCart isEmpty ifTrue: [^self error: self class cannotCheckoutAnEmptyCartErrorDescription. ].
	aCreditCard isExpired ifTrue: [^self error: self class expiredCardErrorDescription ].
	
	answer := merchantProcesorInterface debit: aCart purchaseValue from: aCreditCard.
	(answer isKindOf: MPError) ifTrue: [^self error: self class unableToCompleteTransactionErrorDescription ].
	(answer isKindOf: MPOffline ) ifTrue: [ |aFilenameString today|
		today := FixedGregorianDate today.
		aFilenameString := 'TUSLIBROS_INPUT_', today year number asString, today month number asString , today dayNumber asString , '.csv'.
		aFilenameString asFileName appendStreamDo:[:stream | stream nextPutAll: 'test,sdaspp,a sdasdk'].
		^self error: self class transactionWillBeMadeLaterErrorDescription
	].
	
	register add: aCart.
	^self class okTransactionMessage! !

!testRun: #CashierTest #test07_cashierSavesBatchTransactionIfMerchantProcessorIsDown stamp: 'PJ 11/25/2020 23:43:44'!
ERROR!
!CreditCard methodsFor: 'initialization' stamp: 'PJ 11/25/2020 23:53:35' prior: 50868217!
initializeWithNumber: aCreditCardNumberString owner: aCreditCardOwnerName expirationDate: aCreditCardExpirationDateString 

	| yearNumber monthNumber |
	
	aCreditCardNumberString isEmpty ifTrue: [ ^self error: self class wrongCreditCardNumberErrorDescription ].
	aCreditCardNumberString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardNumberErrorDescription ] ].

	aCreditCardOwnerName isEmpty ifTrue: [ ^self error: self class wrongCreditCardOwnerErrorDescription ].
	
	aCreditCardExpirationDateString isEmpty ifTrue: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ].
	aCreditCardExpirationDateString do: [:aChar | aChar isDigit ifFalse: [ ^self error: self class wrongCreditCardExpirationDateErrorDescription ] ].
	aCreditCardExpirationDateString size > 6 ifTrue: [^self error: self class wrongCreditCardExpirationDateErrorDescription].
	
	monthNumber := (aCreditCardExpirationDateString collect: [:digit | digit] from: 1 to: 2) asNumber.
	yearNumber := (aCreditCardExpirationDateString collect: [:digit | digit] from: 3 to: 6) asNumber.

	expirationDate := GregorianMonthOfYear yearNumber: yearNumber monthNumber: monthNumber.
	number := aCreditCardNumberString.
	ownerName := aCreditCardOwnerName.
	! !

FixedGregorianDate today monthOfYear .!

FixedGregorianDate today monthOfYear asString !
!Cashier methodsFor: 'operations' stamp: 'PJ 11/25/2020 23:55:47' prior: 50869589!
checkOut: aCart withCard: aCreditCard
 
	|answer|
	aCart isEmpty ifTrue: [^self error: self class cannotCheckoutAnEmptyCartErrorDescription. ].
	aCreditCard isExpired ifTrue: [^self error: self class expiredCardErrorDescription ].
	
	answer := merchantProcesorInterface debit: aCart purchaseValue from: aCreditCard.
	(answer isKindOf: MPError) ifTrue: [^self error: self class unableToCompleteTransactionErrorDescription ].
	(answer isKindOf: MPOffline ) ifTrue: [ "|aFilenameString today|
		today := FixedGregorianDate today.
		aFilenameString := 'TUSLIBROS_INPUT_', today year number asString, today month number asString , today dayNumber asString , '.csv'.
		aFilenameString asFileName appendStreamDo:[:stream | stream nextPutAll: ('2', aCreditCard cardNumber, aCreditCard expirationDate, aCreditCard ownerName)]."
		^self error: self class transactionWillBeMadeLaterErrorDescription
	].
	
	register add: aCart.
	^self class okTransactionMessage! !

expirationDate := FixedGregorianDate today monthOfYear.!

expirationDate monthNumber asString, expirationDate year number asString !
!CreditCard methodsFor: 'accessing' stamp: 'PJ 11/25/2020 23:57:49' prior: 50868263!
expirationDate

	^expirationDate monthNumber asString, expirationDate year number asString ! !

!testRun: #CashierTest #test07_cashierSavesBatchTransactionIfMerchantProcessorIsDown stamp: 'PJ 11/25/2020 23:58:11'!
PASSED!

!testRun: #CashierTest #test01_cashierCannotCheckoutAnEmptyCart stamp: 'PJ 11/25/2020 23:58:11'!
PASSED!

!testRun: #CashierTest #test02_cashierReturnsSuccessWithValidTransaction stamp: 'PJ 11/25/2020 23:58:11'!
PASSED!

!testRun: #CashierTest #test03_cashierRejectsTransactionWithExpiredCreditCard stamp: 'PJ 11/25/2020 23:58:11'!
PASSED!

!testRun: #CashierTest #test04_cashierLogsTransactionIfMerchantProcessorSaysOK stamp: 'PJ 11/25/2020 23:58:11'!
PASSED!

!testRun: #CashierTest #test05_cashierFailsTransactionIfMerchantProcessorSaysStolenCard stamp: 'PJ 11/25/2020 23:58:11'!
PASSED!

!testRun: #CashierTest #test06_cashierFailsTransactionIfMerchantProcessorCardwithNoFunds stamp: 'PJ 11/25/2020 23:58:11'!
PASSED!

!testRun: #CashierTest #test07_cashierSavesBatchTransactionIfMerchantProcessorIsDown stamp: 'PJ 11/25/2020 23:58:11'!
PASSED!

!testRun: #CreditCardTest #test11_creditCardKnowsIfItsExpired stamp: 'PJ 11/25/2020 23:58:23'!
PASSED!

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PJ 11/25/2020 23:58:23'!
PASSED!

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithEmptyExpirationDate stamp: 'PJ 11/25/2020 23:58:23'!
PASSED!

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputExpirationDate stamp: 'PJ 11/25/2020 23:58:23'!
PASSED!

!testRun: #CreditCardTest #test04_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PJ 11/25/2020 23:58:23'!
PASSED!

!testRun: #CreditCardTest #test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate stamp: 'PJ 11/25/2020 23:58:23'!
PASSED!

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PJ 11/25/2020 23:58:23'!
PASSED!

!testRun: #CreditCardTest #test07_cannotCreateCreditCardWithEmptyOwnerString stamp: 'PJ 11/25/2020 23:58:23'!
PASSED!

!testRun: #CreditCardTest #test08_creditCardKnowsItsCardNumber stamp: 'PJ 11/25/2020 23:58:23'!
PASSED!

!testRun: #CreditCardTest #test09_creditCardKnowsItsOwnerName stamp: 'PJ 11/25/2020 23:58:23'!
PASSED!

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PJ 11/25/2020 23:58:23'!
FAILURE!

!testRun: #CreditCardTest #test11_creditCardKnowsIfItsExpired stamp: 'PJ 11/25/2020 23:58:23'!
PASSED!

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PJ 11/25/2020 23:58:23'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/26/2020 00:00:35' prior: 50868054!
test10_creditCardKnowsItsExpirationDate
	| ccard expDate |
	
	"expDate := GregorianMonthOfYear yearNumber: 2021 monthNumber: 2."
	expDate := '022021'.
	
	ccard := CreditCard withNumber: '1234123' owner: 'Pepe' expirationDate: expDate.
	self assert: expDate = ccard expirationDate! !

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PJ 11/26/2020 00:00:36'!
FAILURE!

expDate!

ccard expirationDate!

FixedGregorianDate today monthOfYear!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PJ 11/26/2020 00:09:07' prior: 50869790!
test10_creditCardKnowsItsExpirationDate
	| ccard expDate |
	
	"expDate := GregorianMonthOfYear yearNumber: 2021 monthNumber: 2."
	expDate := '102021'.
	
	ccard := CreditCard withNumber: '1234123' owner: 'Pepe' expirationDate: expDate.
	self assert: expDate = ccard expirationDate! !

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PJ 11/26/2020 00:09:11'!
PASSED!

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PJ 11/26/2020 00:09:11'!
PASSED!

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithEmptyExpirationDate stamp: 'PJ 11/26/2020 00:09:11'!
PASSED!

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputExpirationDate stamp: 'PJ 11/26/2020 00:09:11'!
PASSED!

!testRun: #CreditCardTest #test04_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PJ 11/26/2020 00:09:11'!
PASSED!

!testRun: #CreditCardTest #test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate stamp: 'PJ 11/26/2020 00:09:11'!
PASSED!

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PJ 11/26/2020 00:09:11'!
PASSED!

!testRun: #CreditCardTest #test07_cannotCreateCreditCardWithEmptyOwnerString stamp: 'PJ 11/26/2020 00:09:11'!
PASSED!

!testRun: #CreditCardTest #test08_creditCardKnowsItsCardNumber stamp: 'PJ 11/26/2020 00:09:11'!
PASSED!

!testRun: #CreditCardTest #test09_creditCardKnowsItsOwnerName stamp: 'PJ 11/26/2020 00:09:11'!
PASSED!

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PJ 11/26/2020 00:09:11'!
PASSED!

!testRun: #CreditCardTest #test11_creditCardKnowsIfItsExpired stamp: 'PJ 11/26/2020 00:09:11'!
PASSED!

!testRun: #CreditCardTest #test11_creditCardKnowsIfItsExpired stamp: 'PJ 11/26/2020 00:09:55'!
PASSED!

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PJ 11/26/2020 00:09:55'!
PASSED!

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithEmptyExpirationDate stamp: 'PJ 11/26/2020 00:09:55'!
PASSED!

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputExpirationDate stamp: 'PJ 11/26/2020 00:09:55'!
PASSED!

!testRun: #CreditCardTest #test04_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PJ 11/26/2020 00:09:55'!
PASSED!

!testRun: #CreditCardTest #test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate stamp: 'PJ 11/26/2020 00:09:55'!
PASSED!

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PJ 11/26/2020 00:09:55'!
PASSED!

!testRun: #CreditCardTest #test07_cannotCreateCreditCardWithEmptyOwnerString stamp: 'PJ 11/26/2020 00:09:55'!
PASSED!

!testRun: #CreditCardTest #test08_creditCardKnowsItsCardNumber stamp: 'PJ 11/26/2020 00:09:55'!
PASSED!

!testRun: #CreditCardTest #test09_creditCardKnowsItsOwnerName stamp: 'PJ 11/26/2020 00:09:55'!
PASSED!

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PJ 11/26/2020 00:09:55'!
PASSED!

!testRun: #CreditCardTest #test11_creditCardKnowsIfItsExpired stamp: 'PJ 11/26/2020 00:09:55'!
PASSED!

!testRun: #CashierTest #test07_cashierSavesBatchTransactionIfMerchantProcessorIsDown stamp: 'PJ 11/26/2020 00:10:02'!
PASSED!

!testRun: #CashierTest #test01_cashierCannotCheckoutAnEmptyCart stamp: 'PJ 11/26/2020 00:10:02'!
PASSED!

!testRun: #CashierTest #test02_cashierReturnsSuccessWithValidTransaction stamp: 'PJ 11/26/2020 00:10:02'!
PASSED!

!testRun: #CashierTest #test03_cashierRejectsTransactionWithExpiredCreditCard stamp: 'PJ 11/26/2020 00:10:02'!
PASSED!

!testRun: #CashierTest #test04_cashierLogsTransactionIfMerchantProcessorSaysOK stamp: 'PJ 11/26/2020 00:10:02'!
PASSED!

!testRun: #CashierTest #test05_cashierFailsTransactionIfMerchantProcessorSaysStolenCard stamp: 'PJ 11/26/2020 00:10:02'!
PASSED!

!testRun: #CashierTest #test06_cashierFailsTransactionIfMerchantProcessorCardwithNoFunds stamp: 'PJ 11/26/2020 00:10:02'!
PASSED!

!testRun: #CashierTest #test07_cashierSavesBatchTransactionIfMerchantProcessorIsDown stamp: 'PJ 11/26/2020 00:10:02'!
PASSED!

!testRun: #CartTest #test01_newCartIsAnEmptyCart stamp: 'PJ 11/26/2020 00:27:06'!
PASSED!

!testRun: #CartTest #test02_cartWithOneBookIsNotEmpty stamp: 'PJ 11/26/2020 00:27:06'!
PASSED!

!testRun: #CartTest #test03_cannotAddISBNOutsideTheCatalogIntoCart stamp: 'PJ 11/26/2020 00:27:06'!
PASSED!

!testRun: #CartTest #test04_cartContainsAllAddedBooksISBN stamp: 'PJ 11/26/2020 00:27:06'!
PASSED!

!testRun: #CartTest #test05_aCartCanAddANumberOfCopiesOfTheSameBookISBN stamp: 'PJ 11/26/2020 00:27:06'!
PASSED!

!testRun: #CartTest #test06_theNumberOfCopiesToAddOfABookISBNMustBePositive stamp: 'PJ 11/26/2020 00:27:06'!
PASSED!

!testRun: #CartTest #test07_theNumberOfCopiesToAddOfABookISBNMustBeInteger stamp: 'PJ 11/26/2020 00:27:06'!
PASSED!

!testRun: #CartTest #test08_cartKnowsTotalPurchaseValue stamp: 'PJ 11/26/2020 00:27:06'!
PASSED!

!testRun: #CashierTest #test01_cashierCannotCheckoutAnEmptyCart stamp: 'PJ 11/26/2020 00:27:06'!
PASSED!

!testRun: #CashierTest #test02_cashierReturnsSuccessWithValidTransaction stamp: 'PJ 11/26/2020 00:27:06'!
PASSED!

!testRun: #CashierTest #test03_cashierRejectsTransactionWithExpiredCreditCard stamp: 'PJ 11/26/2020 00:27:06'!
PASSED!

!testRun: #CashierTest #test04_cashierLogsTransactionIfMerchantProcessorSaysOK stamp: 'PJ 11/26/2020 00:27:06'!
PASSED!

!testRun: #CashierTest #test05_cashierFailsTransactionIfMerchantProcessorSaysStolenCard stamp: 'PJ 11/26/2020 00:27:06'!
PASSED!

!testRun: #CashierTest #test06_cashierFailsTransactionIfMerchantProcessorCardwithNoFunds stamp: 'PJ 11/26/2020 00:27:06'!
PASSED!

!testRun: #CashierTest #test07_cashierSavesBatchTransactionIfMerchantProcessorIsDown stamp: 'PJ 11/26/2020 00:27:06'!
PASSED!

!testRun: #CreditCardTest #test01_newCreditCardCantHaveEmptyNumber stamp: 'PJ 11/26/2020 00:27:06'!
PASSED!

!testRun: #CreditCardTest #test02_cannotCreateCreditCardWithEmptyExpirationDate stamp: 'PJ 11/26/2020 00:27:06'!
PASSED!

!testRun: #CreditCardTest #test03_cannotCreateCreditCardWithInvalidInputExpirationDate stamp: 'PJ 11/26/2020 00:27:06'!
PASSED!

!testRun: #CreditCardTest #test04_cannotCreateCreditCardWithInvalidInputStringInNumber stamp: 'PJ 11/26/2020 00:27:06'!
PASSED!

!testRun: #CreditCardTest #test05_cannotCreateCreditCardWithMoreThanSixDigitsInExpirationDate stamp: 'PJ 11/26/2020 00:27:06'!
PASSED!

!testRun: #CreditCardTest #test06_cannotCreateCreditCardWithInvalidMonthExpirationDate stamp: 'PJ 11/26/2020 00:27:06'!
PASSED!

!testRun: #CreditCardTest #test07_cannotCreateCreditCardWithEmptyOwnerString stamp: 'PJ 11/26/2020 00:27:06'!
PASSED!

!testRun: #CreditCardTest #test08_creditCardKnowsItsCardNumber stamp: 'PJ 11/26/2020 00:27:06'!
PASSED!

!testRun: #CreditCardTest #test09_creditCardKnowsItsOwnerName stamp: 'PJ 11/26/2020 00:27:06'!
PASSED!

!testRun: #CreditCardTest #test10_creditCardKnowsItsExpirationDate stamp: 'PJ 11/26/2020 00:27:06'!
PASSED!

!testRun: #CreditCardTest #test11_creditCardKnowsIfItsExpired stamp: 'PJ 11/26/2020 00:27:06'!
PASSED!

----SNAPSHOT----(26 November 2020 00:27:57) CuisUniversity-4384.image priorSource: 17211700!

----QUIT----(26 November 2020 00:28:39) CuisUniversity-4384.image priorSource: 17228170!