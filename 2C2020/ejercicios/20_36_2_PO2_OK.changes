

----STARTUP---- (2 November 2020 19:15:02) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64\CuisUniversity-4384.image!


----End fileIn of C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64\Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LH 11/2/2020 19:18:20'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LH 11/2/2020 19:18:20'!
FAILURE!

----End fileIn of C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64\Packages\TerseGuide.pck.st----!

5 negated!
!ReceptiveAccount methodsFor: 'balance' stamp: 'LH 11/2/2020 19:24:21' prior: 50867985!
balance

	^transactions sum: [ :aTransaction | aTransaction class = Deposit ifTrue: [aTransaction value] ifFalse:[ aTransaction value negated ]] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LH 11/2/2020 19:24:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LH 11/2/2020 19:24:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LH 11/2/2020 19:24:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LH 11/2/2020 19:24:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LH 11/2/2020 19:24:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LH 11/2/2020 19:24:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LH 11/2/2020 19:24:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LH 11/2/2020 19:24:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LH 11/2/2020 19:24:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LH 11/2/2020 19:24:30'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'LH 11/2/2020 19:25:19' prior: 50870944!
balance

	^transactions sum: [ :aTransaction | aTransaction class = Deposit ifTrue: [aTransaction value] ifFalse:[ aTransaction value negated ]] ifEmpty: [ 0 ]! !
!Deposit methodsFor: 'value' stamp: 'LH 11/2/2020 19:26:00'!
balanceValue

	^ value negated.! !
!Deposit methodsFor: 'value' stamp: 'LH 11/2/2020 19:26:05' prior: 50870997!
balanceValue

	^ value.! !
!Withdraw methodsFor: 'value' stamp: 'LH 11/2/2020 19:26:21'!
balanceValue

	^value negated.! !
!Withdraw methodsFor: 'value' stamp: 'LH 11/2/2020 19:26:53' prior: 50871004!
balanceValue
	"returns the value as how it impacts the balance of an account"
	
	^value negated.! !
!AccountTransaction methodsFor: 'value' stamp: 'LH 11/2/2020 19:27:17'!
balanceValue
	"returns the value as how it impacts the balance of an account"
	
	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'LH 11/2/2020 19:27:39' prior: 50871001 overrides: 50871014!
balanceValue
	"see superclass"

	^ value.! !
!Withdraw methodsFor: 'value' stamp: 'LH 11/2/2020 19:27:46' prior: 50871008 overrides: 50871014!
balanceValue
	"see superclass"
	
	^value negated.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'LH 11/2/2020 19:28:03' prior: 50870990!
balance

	^transactions sum: [ :aTransaction | aTransaction balanceValue] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LH 11/2/2020 19:28:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LH 11/2/2020 19:28:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LH 11/2/2020 19:28:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LH 11/2/2020 19:28:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LH 11/2/2020 19:28:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LH 11/2/2020 19:28:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LH 11/2/2020 19:28:05'!
PASSED!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'LH 11/2/2020 19:54:45'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'LH 11/2/2020 19:55:15'!
test01AnAccountCanBeAddedToAPortfolio

! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'LH 11/2/2020 20:00:20'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'tests' stamp: 'LH 11/2/2020 20:00:04' prior: 50871075!
test01AnAccountCanBeAddedToAPortfolio
	|anAccount aPortfolio|
	
	anAccount := Deposit register: 100 on: AccountTransaction new.
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount.
	
	self assert: (aPortfolio includesAccount: anAccount).
! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 20:00:31'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'LH 11/2/2020 20:01:22' prior: 50871087!
test01AnAccountCanBeAddedToAPortfolio
	|anAccount aPortfolio|
	
	anAccount := Deposit register: 100 on: ReceptiveAccount new.
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount.
	
	self assert: (aPortfolio includesAccount: anAccount).
! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 20:01:23'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LH 11/2/2020 20:02:11'!
addAccount: aDeposit 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LH 11/2/2020 20:02:39' prior: 50871115!
addAccount: anAccount
	! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 20:02:43'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'LH 11/2/2020 20:02:56'!
includesAccount: aDeposit 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'testing' stamp: 'LH 11/2/2020 20:03:03' prior: 50871127!
includesAccount: aDeposit 
	^true.! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 20:03:05'!
PASSED!

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 20:03:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LH 11/2/2020 20:03:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LH 11/2/2020 20:03:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LH 11/2/2020 20:03:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LH 11/2/2020 20:03:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LH 11/2/2020 20:03:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LH 11/2/2020 20:03:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LH 11/2/2020 20:03:05'!
PASSED!

----SNAPSHOT----(2 November 2020 20:04:14) CuisUniversity-4384.image priorSource: 17155564!
!ReceptiveAccount methodsFor: 'balance' stamp: 'LH 11/2/2020 20:35:30' prior: 50871031!
balance
	|aBalance|
	aBalance := 0.
	transactions sum: [ :aTransaction | aTransaction addToBalance: aBalance].
	^aBalance
	
	"
	^transactions sum: [ :aTransaction | aTransaction balanceValue] ifEmpty: [ 0 ]
	"! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LH 11/2/2020 20:35:37'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LH 11/2/2020 20:35:37'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LH 11/2/2020 20:35:37'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LH 11/2/2020 20:35:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LH 11/2/2020 20:35:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LH 11/2/2020 20:35:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LH 11/2/2020 20:35:37'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'LH 11/2/2020 20:36:17' prior: 50871172!
balance
	|aBalance|
	aBalance := 0.
	transactions do: [ :aTransaction | aTransaction addToBalance: aBalance].
	^aBalance
	
	"
	^transactions sum: [ :aTransaction | aTransaction balanceValue] ifEmpty: [ 0 ]
	"! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LH 11/2/2020 20:36:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LH 11/2/2020 20:36:18'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LH 11/2/2020 20:36:18'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LH 11/2/2020 20:36:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LH 11/2/2020 20:36:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LH 11/2/2020 20:36:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LH 11/2/2020 20:36:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LH 11/2/2020 20:36:25'!
ERROR!
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'LH 11/2/2020 20:36:42'!
addToBalance: aSmallInteger 
	self shouldBeImplemented.! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'LH 11/2/2020 20:37:15' prior: 50871248!
addToBalance: aBalance 
	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'LH 11/2/2020 20:38:03' overrides: 50871254!
addToBalance: aBalance
	"see superclass"

	^ aBalance + value.! !
!Withdraw methodsFor: 'balance operations' stamp: 'LH 11/2/2020 20:38:33' overrides: 50871254!
addToBalance: aBalance

	^aBalance - value.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LH 11/2/2020 20:38:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LH 11/2/2020 20:38:36'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LH 11/2/2020 20:38:36'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LH 11/2/2020 20:38:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LH 11/2/2020 20:38:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LH 11/2/2020 20:38:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LH 11/2/2020 20:38:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LH 11/2/2020 20:38:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LH 11/2/2020 20:38:41'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LH 11/2/2020 20:38:41'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LH 11/2/2020 20:38:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LH 11/2/2020 20:38:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LH 11/2/2020 20:38:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LH 11/2/2020 20:38:41'!
PASSED!
!Deposit methodsFor: 'balance operations' stamp: 'LH 11/2/2020 20:39:54' prior: 50871259 overrides: 50871254!
addToBalance: aBalance
	"see superclass"

	^aBalance + value.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'LH 11/2/2020 20:40:03' prior: 50871208!
balance
	|aBalance|
	aBalance := 0.
	transactions do: [ :aTransaction |aBalance:= aTransaction addToBalance: aBalance].
	^aBalance
	
	"
	^transactions sum: [ :aTransaction | aTransaction balanceValue] ifEmpty: [ 0 ]
	"! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LH 11/2/2020 20:40:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LH 11/2/2020 20:40:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LH 11/2/2020 20:40:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LH 11/2/2020 20:40:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LH 11/2/2020 20:40:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LH 11/2/2020 20:40:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LH 11/2/2020 20:40:07'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'LH 11/2/2020 20:43:11'!
test02MoreThanOneAccountCanBeAddedToAPortfolio
	|anAccount1 anAccount2 aPortfolio|
	
	anAccount1 := Deposit register: 100 on: ReceptiveAccount new.
	anAccount2 := Deposit register: 200 on: ReceptiveAccount new.
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount1.
	aPortfolio addAccount: anAccount2.
	
	self assert: (aPortfolio includesAccount: anAccount1).
	self assert: (aPortfolio includesAccount: anAccount2).
! !
!PortfolioTest methodsFor: 'tests' stamp: 'LH 11/2/2020 20:44:11'!
test03aPortfolioDoesNotHaveMoreAccountsThanAdded
	|anAccount1 anAccount2 aPortfolio|
	
	anAccount1 := Deposit register: 100 on: ReceptiveAccount new.
	anAccount2 := Deposit register: 200 on: ReceptiveAccount new.
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount1.
	
	self assert: (aPortfolio includesAccount: anAccount1).
	self deny: (aPortfolio includesAccount: anAccount2).
! !
!PortfolioTest methodsFor: 'tests' stamp: 'LH 11/2/2020 20:44:30'!
test02APortfolioDoesNotHaveMoreAccountsThanAdded
	|anAccount1 anAccount2 aPortfolio|
	
	anAccount1 := Deposit register: 100 on: ReceptiveAccount new.
	anAccount2 := Deposit register: 200 on: ReceptiveAccount new.
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount1.
	
	self assert: (aPortfolio includesAccount: anAccount1).
	self deny: (aPortfolio includesAccount: anAccount2).
! !

!methodRemoval: PortfolioTest #test03aPortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/2/2020 20:44:30'!
test03aPortfolioDoesNotHaveMoreAccountsThanAdded
	|anAccount1 anAccount2 aPortfolio|
	
	anAccount1 := Deposit register: 100 on: ReceptiveAccount new.
	anAccount2 := Deposit register: 200 on: ReceptiveAccount new.
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount1.
	
	self assert: (aPortfolio includesAccount: anAccount1).
	self deny: (aPortfolio includesAccount: anAccount2).
!
!PortfolioTest methodsFor: 'tests' stamp: 'LH 11/2/2020 20:44:35'!
test03MoreThanOneAccountCanBeAddedToAPortfolio
	|anAccount1 anAccount2 aPortfolio|
	
	anAccount1 := Deposit register: 100 on: ReceptiveAccount new.
	anAccount2 := Deposit register: 200 on: ReceptiveAccount new.
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount1.
	aPortfolio addAccount: anAccount2.
	
	self assert: (aPortfolio includesAccount: anAccount1).
	self assert: (aPortfolio includesAccount: anAccount2).
! !

!methodRemoval: PortfolioTest #test02MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 20:44:35'!
test02MoreThanOneAccountCanBeAddedToAPortfolio
	|anAccount1 anAccount2 aPortfolio|
	
	anAccount1 := Deposit register: 100 on: ReceptiveAccount new.
	anAccount2 := Deposit register: 200 on: ReceptiveAccount new.
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount1.
	aPortfolio addAccount: anAccount2.
	
	self assert: (aPortfolio includesAccount: anAccount1).
	self assert: (aPortfolio includesAccount: anAccount2).
!

!testRun: #PortfolioTest #test02APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/2/2020 20:44:44'!
FAILURE!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'LH 11/2/2020 20:46:18'!
Object subclass: #Portfolio
	instanceVariableNames: 'savedAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'LH 11/2/2020 20:46:16' prior: 50871120!
addAccount: anAccount

	savedAccount := anAccount.! !
!Portfolio methodsFor: 'testing' stamp: 'LH 11/2/2020 20:46:49' prior: 50871132!
includesAccount: anAccount 

	^anAccount = savedAccount.! !

!testRun: #PortfolioTest #test02APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/2/2020 20:46:50'!
PASSED!

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 20:46:50'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/2/2020 20:46:50'!
PASSED!

!testRun: #PortfolioTest #test03MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 20:46:50'!
FAILURE!

!testRun: #PortfolioTest #test03MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 20:46:51'!
FAILURE!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'LH 11/2/2020 20:47:29'!
Object subclass: #Portfolio
	instanceVariableNames: 'savedAccount accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'LH 11/2/2020 20:47:27' prior: 50871471!
addAccount: anAccount

	accounts add: anAccount.! !
!Portfolio methodsFor: 'initialization' stamp: 'LH 11/2/2020 20:48:50' overrides: 16896425!
initialize

	accounts := OrderedCollection new.! !

Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'LH 11/2/2020 20:48:56'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'testing' stamp: 'LH 11/2/2020 20:49:20' prior: 50871476!
includesAccount: anAccount 

	^accounts includes: anAccount.! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 20:49:24'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/2/2020 20:49:24'!
PASSED!

!testRun: #PortfolioTest #test03MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 20:49:24'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'LH 11/2/2020 20:52:08'!
test03AnEmptyPortfolioHasABalanceOf0
	|aPortfolio|
	
	aPortfolio := Portfolio new.
	
	self assert: 0 equals: aPortfolio balance.
! !
!PortfolioTest methodsFor: 'tests' stamp: 'LH 11/2/2020 20:52:15'!
test04AnEmptyPortfolioHasABalanceOf0
	|aPortfolio|
	
	aPortfolio := Portfolio new.
	
	self assert: 0 equals: aPortfolio balance.
! !

!methodRemoval: PortfolioTest #test03AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/2/2020 20:52:15'!
test03AnEmptyPortfolioHasABalanceOf0
	|aPortfolio|
	
	aPortfolio := Portfolio new.
	
	self assert: 0 equals: aPortfolio balance.
!

!testRun: #PortfolioTest #test04AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/2/2020 20:52:17'!
ERROR!
!Portfolio methodsFor: 'accesing' stamp: 'LH 11/2/2020 20:52:38'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accesing' stamp: 'LH 11/2/2020 20:52:48' prior: 50871567!
balance
	^0! !

!testRun: #PortfolioTest #test04AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/2/2020 20:52:49'!
PASSED!

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 20:52:50'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/2/2020 20:52:50'!
PASSED!

!testRun: #PortfolioTest #test03MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 20:52:50'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/2/2020 20:52:50'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'LH 11/2/2020 20:56:16'!
test05APortfolioWithOneAccountShouldHaveABalanceEqualToThatOfTheAccount
	|aPortfolio anAccount|
	
	anAccount := Deposit register: 100 on: ReceptiveAccount new .
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: anAccount.
	
	self assert: anAccount balance equals: aPortfolio balance.
! !

!testRun: #PortfolioTest #test05APortfolioWithOneAccountShouldHaveABalanceEqualToThatOfTheAccount stamp: 'LH 11/2/2020 20:56:19'!
ERROR!

Deposit register: 100 on: ReceptiveAccount new!

Deposit register: 100 on: ReceptiveAccount new!
!PortfolioTest methodsFor: 'tests' stamp: 'LH 11/2/2020 20:58:07' prior: 50871591!
test05APortfolioWithOneAccountShouldHaveABalanceEqualToThatOfTheAccount
	|aPortfolio anAccount|
	
	anAccount :=  ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: anAccount.
	
	self assert: anAccount balance equals: aPortfolio balance.
! !

!testRun: #PortfolioTest #test05APortfolioWithOneAccountShouldHaveABalanceEqualToThatOfTheAccount stamp: 'LH 11/2/2020 20:58:12'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'LH 11/2/2020 20:58:28' prior: 50871101!
test01AnAccountCanBeAddedToAPortfolio
	|anAccount aPortfolio|
	
	anAccount :=  ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount.
	
	self assert: (aPortfolio includesAccount: anAccount).
! !
!PortfolioTest methodsFor: 'tests' stamp: 'LH 11/2/2020 20:58:52' prior: 50871395!
test02APortfolioDoesNotHaveMoreAccountsThanAdded
	|anAccount1 anAccount2 aPortfolio|
	
	anAccount1 :=  ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	anAccount2 :=  ReceptiveAccount new.
	Deposit register: 200 on: anAccount2.
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount1.
	
	self assert: (aPortfolio includesAccount: anAccount1).
	self deny: (aPortfolio includesAccount: anAccount2).
! !
!PortfolioTest methodsFor: 'tests' stamp: 'LH 11/2/2020 20:59:00' prior: 50871426!
test03MoreThanOneAccountCanBeAddedToAPortfolio
	|anAccount1 anAccount2 aPortfolio|
	
	anAccount1 :=  ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	anAccount2 :=  ReceptiveAccount new.
	Deposit register: 200 on: anAccount2.
	
	aPortfolio := Portfolio new.
	aPortfolio addAccount: anAccount1.
	aPortfolio addAccount: anAccount2.
	
	self assert: (aPortfolio includesAccount: anAccount1).
	self assert: (aPortfolio includesAccount: anAccount2).
! !

!testRun: #PortfolioTest #test03MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 20:59:01'!
PASSED!

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 20:59:01'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/2/2020 20:59:01'!
PASSED!

!testRun: #PortfolioTest #test03MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 20:59:01'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/2/2020 20:59:01'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioWithOneAccountShouldHaveABalanceEqualToThatOfTheAccount stamp: 'LH 11/2/2020 20:59:01'!
FAILURE!

!testRun: #PortfolioTest #test05APortfolioWithOneAccountShouldHaveABalanceEqualToThatOfTheAccount stamp: 'LH 11/2/2020 20:59:01'!
FAILURE!

!testRun: #PortfolioTest #test05APortfolioWithOneAccountShouldHaveABalanceEqualToThatOfTheAccount stamp: 'LH 11/2/2020 20:59:54'!
FAILURE!
!Portfolio methodsFor: 'accesing' stamp: 'LH 11/2/2020 21:00:52' prior: 50871571!
balance

	^(accounts at: 1) balance.! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 21:00:55'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/2/2020 21:00:55'!
PASSED!

!testRun: #PortfolioTest #test03MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 21:00:55'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/2/2020 21:00:55'!
ERROR!

!testRun: #PortfolioTest #test05APortfolioWithOneAccountShouldHaveABalanceEqualToThatOfTheAccount stamp: 'LH 11/2/2020 21:00:55'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/2/2020 21:00:55'!
ERROR!

accounts!
!Portfolio methodsFor: 'accesing' stamp: 'LH 11/2/2020 21:01:54' prior: 50871703!
balance
	|aBalance|
	aBalance := 0.
	^aBalance + (accounts at: 1) balance.! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 21:01:55'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/2/2020 21:01:55'!
PASSED!

!testRun: #PortfolioTest #test03MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 21:01:55'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/2/2020 21:01:55'!
ERROR!

!testRun: #PortfolioTest #test05APortfolioWithOneAccountShouldHaveABalanceEqualToThatOfTheAccount stamp: 'LH 11/2/2020 21:01:55'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/2/2020 21:01:55'!
ERROR!
!Portfolio methodsFor: 'accesing' stamp: 'LH 11/2/2020 21:10:05' prior: 50871729!
balance
	|aBalance|
	aBalance := 0.
	accounts isEmpty ifFalse:[aBalance := aBalance + (accounts at:1)].
	^aBalance.! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 21:10:07'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/2/2020 21:10:07'!
PASSED!

!testRun: #PortfolioTest #test03MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 21:10:07'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/2/2020 21:10:07'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioWithOneAccountShouldHaveABalanceEqualToThatOfTheAccount stamp: 'LH 11/2/2020 21:10:07'!
ERROR!

!testRun: #PortfolioTest #test05APortfolioWithOneAccountShouldHaveABalanceEqualToThatOfTheAccount stamp: 'LH 11/2/2020 21:10:07'!
ERROR!
!Portfolio methodsFor: 'accesing' stamp: 'LH 11/2/2020 21:10:24' prior: 50871756!
balance
	|aBalance|
	aBalance := 0.
	accounts isEmpty ifFalse:[aBalance := aBalance + (accounts at:1) balance].
	^aBalance.! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 21:10:25'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/2/2020 21:10:25'!
PASSED!

!testRun: #PortfolioTest #test03MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 21:10:25'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/2/2020 21:10:25'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioWithOneAccountShouldHaveABalanceEqualToThatOfTheAccount stamp: 'LH 11/2/2020 21:10:25'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'LH 11/2/2020 21:13:29'!
test06APortfolioWithManyAccountsShouldHaveABalanceEqualToTheSumOfItsAccounts
	|aPortfolio anAccount1 anAccount2|
	
	anAccount1 :=  ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	anAccount2 :=  ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: anAccount1.
	aPortfolio addAccount: anAccount2.
	
	self 
		assert: anAccount1 balance + anAccount2 balance
		equals: aPortfolio balance.
! !

!testRun: #PortfolioTest #test06APortfolioWithManyAccountsShouldHaveABalanceEqualToTheSumOfItsAccounts stamp: 'LH 11/2/2020 21:13:30'!
PASSED!

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 21:13:30'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/2/2020 21:13:30'!
PASSED!

!testRun: #PortfolioTest #test03MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 21:13:30'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/2/2020 21:13:30'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioWithOneAccountShouldHaveABalanceEqualToThatOfTheAccount stamp: 'LH 11/2/2020 21:13:30'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioWithManyAccountsShouldHaveABalanceEqualToTheSumOfItsAccounts stamp: 'LH 11/2/2020 21:13:30'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'LH 11/2/2020 21:13:47' prior: 50871810!
test06APortfolioWithManyAccountsShouldHaveABalanceEqualToTheSumOfItsAccounts
	|aPortfolio anAccount1 anAccount2|
	
	anAccount1 :=  ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	anAccount2 :=  ReceptiveAccount new.
	Deposit register: 200 on: anAccount1.
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: anAccount1.
	aPortfolio addAccount: anAccount2.
	
	self 
		assert: anAccount1 balance + anAccount2 balance
		equals: aPortfolio balance.
! !

!testRun: #PortfolioTest #test06APortfolioWithManyAccountsShouldHaveABalanceEqualToTheSumOfItsAccounts stamp: 'LH 11/2/2020 21:13:48'!
PASSED!

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 21:13:48'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/2/2020 21:13:48'!
PASSED!

!testRun: #PortfolioTest #test03MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 21:13:49'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/2/2020 21:13:49'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioWithOneAccountShouldHaveABalanceEqualToThatOfTheAccount stamp: 'LH 11/2/2020 21:13:49'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioWithManyAccountsShouldHaveABalanceEqualToTheSumOfItsAccounts stamp: 'LH 11/2/2020 21:13:49'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'LH 11/2/2020 21:14:06' prior: 50871855!
test06APortfolioWithManyAccountsShouldHaveABalanceEqualToTheSumOfItsAccounts
	|aPortfolio anAccount1 anAccount2|
	
	anAccount1 :=  ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	anAccount2 :=  ReceptiveAccount new.
	Deposit register: 200 on: anAccount1.
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: anAccount1.
	aPortfolio addAccount: anAccount2.
	
	self 
		assert: (anAccount1 balance + anAccount2 balance)
		equals: aPortfolio balance.
! !

!testRun: #PortfolioTest #test06APortfolioWithManyAccountsShouldHaveABalanceEqualToTheSumOfItsAccounts stamp: 'LH 11/2/2020 21:14:07'!
PASSED!

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 21:14:07'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/2/2020 21:14:07'!
PASSED!

!testRun: #PortfolioTest #test03MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 21:14:07'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/2/2020 21:14:07'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioWithOneAccountShouldHaveABalanceEqualToThatOfTheAccount stamp: 'LH 11/2/2020 21:14:07'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioWithManyAccountsShouldHaveABalanceEqualToTheSumOfItsAccounts stamp: 'LH 11/2/2020 21:14:07'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'LH 11/2/2020 21:14:26' prior: 50871900!
test06APortfolioWithManyAccountsShouldHaveABalanceEqualToTheSumOfItsAccounts
	|aPortfolio anAccount1 anAccount2|
	
	anAccount1 :=  ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	anAccount2 :=  ReceptiveAccount new.
	Deposit register: 200 on: anAccount2.
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: anAccount1.
	aPortfolio addAccount: anAccount2.
	
	self 
		assert: (anAccount1 balance + anAccount2 balance)
		equals: aPortfolio balance.
! !

!testRun: #PortfolioTest #test06APortfolioWithManyAccountsShouldHaveABalanceEqualToTheSumOfItsAccounts stamp: 'LH 11/2/2020 21:14:27'!
FAILURE!
!Portfolio methodsFor: 'accesing' stamp: 'LH 11/2/2020 21:15:50' prior: 50871785!
balance
	|aBalance|
	aBalance := 0.
	accounts do: [:anAccount | aBalance:= aBalance + anAccount balance].
	^aBalance.! !

!testRun: #PortfolioTest #test06APortfolioWithManyAccountsShouldHaveABalanceEqualToTheSumOfItsAccounts stamp: 'LH 11/2/2020 21:15:53'!
PASSED!

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 21:15:53'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/2/2020 21:15:53'!
PASSED!

!testRun: #PortfolioTest #test03MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/2/2020 21:15:53'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/2/2020 21:15:53'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioWithOneAccountShouldHaveABalanceEqualToThatOfTheAccount stamp: 'LH 11/2/2020 21:15:53'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioWithManyAccountsShouldHaveABalanceEqualToTheSumOfItsAccounts stamp: 'LH 11/2/2020 21:15:53'!
PASSED!

----SNAPSHOT----(2 November 2020 21:24:28) CuisUniversity-4384.image priorSource: 17264576!

----QUIT----(2 November 2020 22:00:21) CuisUniversity-4384.image priorSource: 17291194!

----STARTUP---- (5 November 2020 14:21:39) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64\CuisUniversity-4384.image!


----QUIT----(5 November 2020 14:22:14) CuisUniversity-4384.image priorSource: 17291287!

----STARTUP---- (7 November 2020 10:41:14) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64\CuisUniversity-4384.image!


!classRemoval: #ReceptiveAccount stamp: 'LH 11/7/2020 10:41:23'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'LH 11/7/2020 10:41:24'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'LH 11/7/2020 10:41:24'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'LH 11/7/2020 10:41:24'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'LH 11/7/2020 10:41:25'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'LH 11/7/2020 10:41:25'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'LH 11/7/2020 10:41:26'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of C:\Users\Usuario\Desktop\labo\inge1\trabajos\ingeSoft-2020-2c\18-Portfolio\Portfolio-Ejercicio.st----!

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 10:43:30'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/7/2020 10:43:30'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/7/2020 10:43:30'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 10:43:30'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'LH 11/7/2020 10:43:30'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'LH 11/7/2020 10:43:30'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'LH 11/7/2020 10:43:30'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'LH 11/7/2020 10:43:30'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'LH 11/7/2020 10:43:31'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'LH 11/7/2020 10:43:31'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'LH 11/7/2020 10:43:31'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'LH 11/7/2020 10:43:31'!
PASSED!
!PortfolioTest methodsFor: 'invalid topolgies adding accounts in child portfolios' stamp: 'LH 11/7/2020 10:47:07' prior: 50872254!
test13
	
	"no se pueden agregar una cueanta a un portfolio (hijo) de un portfolio (padre), cuando la cuenta ya estaba en el portfolio (padre)"
	
	| portfolio1 portfolio2 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio1 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.

	self should: [	portfolio2 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
! !

!testRun: #PortfolioTest #test13 stamp: 'LH 11/7/2020 10:47:08'!
FAILURE!
!Portfolio methodsFor: 'portfolios' stamp: 'LH 11/7/2020 10:51:34' prior: 50872508!
addPortfolio: aPortfolio
	(self includesPortfolio: aPortfolio) ifTrue: [self error: Portfolio errorMessagePortfolioAlreadyAdded].
	
	portfolios add: aPortfolio.
	aPortfolio addAsFather: self. 
! !

!testRun: #PortfolioTest #test13 stamp: 'LH 11/7/2020 10:51:37'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LH 11/7/2020 10:52:04'!
addAsFather: aPortfolio 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'LH 11/7/2020 10:52:32'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios fatherPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LH 11/7/2020 10:52:30' prior: 50872669!
addAsFather: aPortfolio 

	fatherPortfolios add: aPortfolio.! !

!testRun: #PortfolioTest #test13 stamp: 'LH 11/7/2020 10:52:37'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'LH 11/7/2020 10:53:22' prior: 50872503 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	
	fatherPortfolios := OrderedCollection new.! !

!testRun: #PortfolioTest #test13 stamp: 'LH 11/7/2020 10:53:25'!
FAILURE!
!Portfolio methodsFor: 'accounts' stamp: 'LH 11/7/2020 10:55:01' prior: 50872524!
addAccount: anAccount

	(self includesAccount: anAccount) ifTrue: [^self error: Portfolio errorMessageAccountAlreadyAdded].
	
	accounts add: anAccount.! !
!Portfolio methodsFor: 'initialization' stamp: 'LH 11/7/2020 10:55:32' prior: 50872690 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LH 11/7/2020 10:56:56' prior: 50872682!
addAsFather: aPortfolio 

	fatherPortfolios := aPortfolio.! !

!testRun: #PortfolioTest #test13 stamp: 'LH 11/7/2020 10:56:59'!
FAILURE!
!Portfolio methodsFor: 'accounts' stamp: 'LH 11/7/2020 10:58:12' prior: 50872700!
addAccount: anAccount

	(self includesAccount: anAccount) ifTrue: [^self error: Portfolio errorMessageAccountAlreadyAdded].
	(fatherPortfolios includesAccount: anAccount) ifTrue: [^self error: Portfolio errorMessageAccountAlreadyAdded].
	
	accounts add: anAccount.! !

!testRun: #PortfolioTest #test13 stamp: 'LH 11/7/2020 10:58:13'!
PASSED!

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 10:58:13'!
ERROR!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/7/2020 10:58:13'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/7/2020 10:58:14'!
ERROR!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 10:58:14'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'LH 11/7/2020 10:58:14'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'LH 11/7/2020 10:58:14'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'LH 11/7/2020 10:58:14'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'LH 11/7/2020 10:58:14'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'LH 11/7/2020 10:58:14'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'LH 11/7/2020 10:58:14'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'LH 11/7/2020 10:58:14'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'LH 11/7/2020 10:58:14'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'LH 11/7/2020 10:58:26'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'LH 11/7/2020 10:58:48'!
ERROR!
!Portfolio methodsFor: 'accounts' stamp: 'LH 11/7/2020 11:00:11' prior: 50872722!
addAccount: anAccount

	(self includesAccount: anAccount) ifTrue: [^self error: Portfolio errorMessageAccountAlreadyAdded].
	fatherPortfolios isNil ifFalse: [ (fatherPortfolios includesAccount: anAccount) ifTrue: [^self error: Portfolio errorMessageAccountAlreadyAdded]].
	
	accounts add: anAccount.! !

!testRun: #PortfolioTest #test13 stamp: 'LH 11/7/2020 11:00:12'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'LH 11/7/2020 11:00:16'!
PASSED!

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 11:00:16'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/7/2020 11:00:16'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/7/2020 11:00:16'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 11:00:16'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'LH 11/7/2020 11:00:16'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'LH 11/7/2020 11:00:16'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'LH 11/7/2020 11:00:16'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'LH 11/7/2020 11:00:16'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'LH 11/7/2020 11:00:16'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'LH 11/7/2020 11:00:16'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'LH 11/7/2020 11:00:16'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'LH 11/7/2020 11:00:16'!
PASSED!
!PortfolioTest methodsFor: 'invalid topolgies adding accounts in child portfolios' stamp: 'LH 11/7/2020 11:03:06'!
test14
	
	"no se pueden agregar una cueanta a un portfolio (hijo) de un portfolio (padre), cuando la cuenta ya estaba en el portfolio (padre), con varios padres"
	
	| portfolio1 portfolio2 portfolio3 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio2 addAccount: account1.
	portfolio2 addPortfolio: portfolio3.
	portfolio1 addPortfolio: portfolio3.

	self should: [	portfolio3 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
! !

!testRun: #PortfolioTest #test14 stamp: 'LH 11/7/2020 11:03:07'!
FAILURE!
!Portfolio methodsFor: 'initialization' stamp: 'LH 11/7/2020 11:03:37' prior: 50872709 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	
	fatherPortfolios := OrderedCollection new.
	! !

!testRun: #PortfolioTest #test14 stamp: 'LH 11/7/2020 11:03:53'!
ERROR!
!Portfolio methodsFor: 'accounts' stamp: 'LH 11/7/2020 11:05:33' prior: 50872773!
addAccount: anAccount

	(self includesAccount: anAccount) ifTrue: [^self error: Portfolio errorMessageAccountAlreadyAdded].
	fatherPortfolios do: [:aPortfolio | (aPortfolio includesAccount: anAccount) ifTrue: [^self error: Portfolio errorMessageAccountAlreadyAdded]].
	
	accounts add: anAccount.! !

!testRun: #PortfolioTest #test14 stamp: 'LH 11/7/2020 11:05:34'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LH 11/7/2020 11:06:18' prior: 50872715!
addAsFather: aPortfolio 

	fatherPortfolios add: aPortfolio.! !

!testRun: #PortfolioTest #test14 stamp: 'LH 11/7/2020 11:06:55'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'LH 11/7/2020 11:06:58'!
PASSED!

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 11:06:58'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/7/2020 11:06:58'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/7/2020 11:06:58'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 11:06:58'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'LH 11/7/2020 11:06:58'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'LH 11/7/2020 11:06:58'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'LH 11/7/2020 11:06:58'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'LH 11/7/2020 11:06:58'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'LH 11/7/2020 11:06:58'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'LH 11/7/2020 11:06:58'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'LH 11/7/2020 11:06:58'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'LH 11/7/2020 11:06:59'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'LH 11/7/2020 11:06:59'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'LH 11/7/2020 11:07:25'!
PASSED!

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 11:07:25'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/7/2020 11:07:25'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/7/2020 11:07:25'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 11:07:25'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'LH 11/7/2020 11:07:25'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'LH 11/7/2020 11:07:25'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'LH 11/7/2020 11:07:25'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'LH 11/7/2020 11:07:25'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'LH 11/7/2020 11:07:25'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'LH 11/7/2020 11:07:25'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'LH 11/7/2020 11:07:25'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'LH 11/7/2020 11:07:25'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'LH 11/7/2020 11:07:25'!
PASSED!

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 11:07:33'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/7/2020 11:07:33'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/7/2020 11:07:33'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 11:07:33'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'LH 11/7/2020 11:07:36'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'LH 11/7/2020 11:07:36'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'LH 11/7/2020 11:07:36'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'LH 11/7/2020 11:07:36'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'LH 11/7/2020 11:07:36'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'LH 11/7/2020 11:07:36'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'LH 11/7/2020 11:07:36'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'LH 11/7/2020 11:07:43'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'LH 11/7/2020 11:07:43'!
PASSED!
!PortfolioTest methodsFor: 'portfolios in portfolios' stamp: 'LH 11/7/2020 11:09:53'!
test07
	
	"a un portfolio se le puede agregar mas de un portfolio sin cuentas"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.
	
	self assert: (portfolio1 includesPortfolio: portfolio2).
	self assert: (portfolio1 includesPortfolio: portfolio3).
! !

!methodRemoval: PortfolioTest #test08 stamp: 'LH 11/7/2020 11:09:53'!
test08
	
	"a un portfolio se le puede agregar mas de un portfolio sin cuentas"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.
	
	self assert: (portfolio1 includesPortfolio: portfolio2).
	self assert: (portfolio1 includesPortfolio: portfolio3).
!
!PortfolioTest methodsFor: 'portfolios in portfolios' stamp: 'LH 11/7/2020 11:09:58'!
test08
	
	"a un portfolio se le pueden agregar portfolios"
	
	| portfolio1 portfolio2 portfolio3 portfolio4 account1 account2 account3 account4 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	account4 := ReceptiveAccount new.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.
	portfolio2 addPortfolio: portfolio4. "portfolio anidado"
	
	portfolio2 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio4 addAccount: account4.
	
	self assert: (portfolio1 includesAccount: account1).
	self assert: (portfolio1 includesAccount: account2).
	self assert: (portfolio1 includesAccount: account3).
	self assert: (portfolio1 includesAccount: account4).
! !

!methodRemoval: PortfolioTest #test09 stamp: 'LH 11/7/2020 11:09:58'!
test09
	
	"a un portfolio se le pueden agregar portfolios"
	
	| portfolio1 portfolio2 portfolio3 portfolio4 account1 account2 account3 account4 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	account4 := ReceptiveAccount new.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.
	portfolio2 addPortfolio: portfolio4. "portfolio anidado"
	
	portfolio2 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio4 addAccount: account4.
	
	self assert: (portfolio1 includesAccount: account1).
	self assert: (portfolio1 includesAccount: account2).
	self assert: (portfolio1 includesAccount: account3).
	self assert: (portfolio1 includesAccount: account4).
!
!PortfolioTest methodsFor: 'portfolios in portfolios' stamp: 'LH 11/7/2020 11:10:02'!
test09
	
	"a un portfolio se le pueden agregar portfolios con portfolios"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.

	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self assert: (portfolio1 includesPortfolio: portfolio3).

! !

!methodRemoval: PortfolioTest #test10 stamp: 'LH 11/7/2020 11:10:02'!
test10
	
	"a un portfolio se le pueden agregar portfolios con portfolios"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.

	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self assert: (portfolio1 includesPortfolio: portfolio3).

!
!PortfolioTest methodsFor: 'portfolios in portfolios' stamp: 'LH 11/7/2020 11:10:07'!
test10
	
	"no pueden haber cuentas repetidas en un portfolio"
	
	| portfolio1 portfolio2 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addAccount: account1.

	
	self should: [portfolio1 addAccount: account1] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.

! !

!methodRemoval: PortfolioTest #test11 stamp: 'LH 11/7/2020 11:10:07'!
test11
	
	"no pueden haber cuentas repetidas en un portfolio"
	
	| portfolio1 portfolio2 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addAccount: account1.

	
	self should: [portfolio1 addAccount: account1] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.

!
!PortfolioTest methodsFor: 'portfolios in portfolios' stamp: 'LH 11/7/2020 11:10:18'!
test11
	
	"no pueden haber prtfolios repetidos en un portfolio"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self should: [portfolio1 addPortfolio: portfolio3] raise: Error withMessageText: Portfolio errorMessagePortfolioAlreadyAdded.

! !

!methodRemoval: PortfolioTest #test12 stamp: 'LH 11/7/2020 11:10:18'!
test12
	
	"no pueden haber prtfolios repetidos en un portfolio"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self should: [portfolio1 addPortfolio: portfolio3] raise: Error withMessageText: Portfolio errorMessagePortfolioAlreadyAdded.

!
!PortfolioTest methodsFor: 'invalid topolgies adding accounts in child portfolios' stamp: 'LH 11/7/2020 11:10:26'!
test12
	
	"no se pueden agregar una cueanta a un portfolio (hijo) de un portfolio (padre), cuando la cuenta ya estaba en el portfolio (padre)"
	
	| portfolio1 portfolio2 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio1 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.

	self should: [	portfolio2 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
! !

!methodRemoval: PortfolioTest #test13 stamp: 'LH 11/7/2020 11:10:26'!
test13
	
	"no se pueden agregar una cueanta a un portfolio (hijo) de un portfolio (padre), cuando la cuenta ya estaba en el portfolio (padre)"
	
	| portfolio1 portfolio2 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio1 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.

	self should: [	portfolio2 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
!
!PortfolioTest methodsFor: 'invalid topolgies adding accounts in child portfolios' stamp: 'LH 11/7/2020 11:10:29'!
test13
	
	"no se pueden agregar una cueanta a un portfolio (hijo) de un portfolio (padre), cuando la cuenta ya estaba en el portfolio (padre), con varios padres"
	
	| portfolio1 portfolio2 portfolio3 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio2 addAccount: account1.
	portfolio2 addPortfolio: portfolio3.
	portfolio1 addPortfolio: portfolio3.

	self should: [	portfolio3 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
! !

!methodRemoval: PortfolioTest #test14 stamp: 'LH 11/7/2020 11:10:29'!
test14
	
	"no se pueden agregar una cueanta a un portfolio (hijo) de un portfolio (padre), cuando la cuenta ya estaba en el portfolio (padre), con varios padres"
	
	| portfolio1 portfolio2 portfolio3 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio2 addAccount: account1.
	portfolio2 addPortfolio: portfolio3.
	portfolio1 addPortfolio: portfolio3.

	self should: [	portfolio3 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
!
!Portfolio methodsFor: 'accounts' stamp: 'LH 11/7/2020 11:13:47'!
validateAccountNotAlredyAdded: anAccount


	(self includesAccount: anAccount) ifTrue: [^self error: Portfolio errorMessageAccountAlreadyAdded].
! !
!Portfolio methodsFor: 'accounts' stamp: 'LH 11/7/2020 11:14:28' prior: 50872858!
addAccount: anAccount

	self validateAccountNotAlredyAdded: anAccount.
	fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountNotAlredyAdded: anAccount].
	
	accounts add: anAccount.! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 11:14:29'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/7/2020 11:14:29'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/7/2020 11:14:29'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 11:14:29'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'LH 11/7/2020 11:14:29'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'LH 11/7/2020 11:14:29'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'LH 11/7/2020 11:14:29'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'LH 11/7/2020 11:14:29'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'LH 11/7/2020 11:14:29'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'LH 11/7/2020 11:14:29'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'LH 11/7/2020 11:14:29'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'LH 11/7/2020 11:14:29'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'LH 11/7/2020 11:14:29'!
PASSED!
!PortfolioTest methodsFor: 'invalid topolgies adding accounts in child portfolios' stamp: 'LH 11/7/2020 11:18:05'!
test14
	
	"no se pueden agregar una cueanta a un hijo si esa cuenta est� en el padre de su padre"
	
	| portfolio1 portfolio2 portfolio3 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio1 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self should: [	portfolio3 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
! !

!testRun: #PortfolioTest #test14 stamp: 'LH 11/7/2020 11:18:39'!
FAILURE!
!Portfolio methodsFor: 'accounts' stamp: 'LH 11/7/2020 11:25:23' prior: 50873263!
addAccount: anAccount

	self validateAccountNotAlredyAdded: anAccount.
	fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountNotAlredyAdded: anAccount].
	
	accounts add: anAccount.! !
!Portfolio methodsFor: 'accounts' stamp: 'LH 11/7/2020 11:29:29' prior: 50873330!
addAccount: anAccount

	self validateAccountNotAlredyAdded: anAccount.
	fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountNotAlredyAdded: anAccount.
							aPortfolio validateAccountNotInParents: anAccount. ].
	
	accounts add: anAccount.! !

!testRun: #PortfolioTest #test14 stamp: 'LH 11/7/2020 11:29:34'!
FAILURE!
!Portfolio methodsFor: 'portfolios' stamp: 'LH 11/7/2020 11:31:17'!
validateAccountNotInParents: anAccount

	fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountNotAlredyAdded: anAccount].! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 11:31:35'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/7/2020 11:31:35'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/7/2020 11:31:35'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 11:31:35'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'LH 11/7/2020 11:31:35'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'LH 11/7/2020 11:31:35'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'LH 11/7/2020 11:31:35'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'LH 11/7/2020 11:31:35'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'LH 11/7/2020 11:31:35'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'LH 11/7/2020 11:31:35'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'LH 11/7/2020 11:31:35'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'LH 11/7/2020 11:31:35'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'LH 11/7/2020 11:31:35'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'LH 11/7/2020 11:31:35'!
PASSED!
!Portfolio methodsFor: 'accounts' stamp: 'LH 11/7/2020 11:32:41' prior: 50873339!
addAccount: anAccount

	self validateAccountNotAlredyAdded: anAccount.
	fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountNotAlredyAdded: anAccount ].
	fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountNotInParents: anAccount ].
	
	accounts add: anAccount.! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 11:32:42'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/7/2020 11:32:42'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/7/2020 11:32:42'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 11:32:42'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'LH 11/7/2020 11:32:42'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'LH 11/7/2020 11:32:42'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'LH 11/7/2020 11:32:42'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'LH 11/7/2020 11:32:42'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'LH 11/7/2020 11:32:42'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'LH 11/7/2020 11:32:42'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'LH 11/7/2020 11:32:42'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'LH 11/7/2020 11:32:42'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'LH 11/7/2020 11:32:42'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'LH 11/7/2020 11:32:42'!
PASSED!
!Portfolio methodsFor: 'accounts' stamp: 'LH 11/7/2020 11:33:37' prior: 50873396!
addAccount: anAccount

	self validateAccountNotAlredyAdded: anAccount.
	fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountNotAlredyAdded: anAccount ].
	fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountNotInParents: anAccount ].
	
	accounts add: anAccount.! !
!Portfolio methodsFor: 'portfolios' stamp: 'LH 11/7/2020 11:36:26' prior: 50873352!
validateAccountNotInParents: anAccount
	
	self validateAccountNotAlredyAdded: anAccount.
	fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountNotInParents: anAccount].! !
!Portfolio methodsFor: 'accounts' stamp: 'LH 11/7/2020 11:36:39' prior: 50873445!
addAccount: anAccount

	self validateAccountNotAlredyAdded: anAccount.
	fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountNotInParents: anAccount ].
	
	accounts add: anAccount.! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 11:36:41'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/7/2020 11:36:41'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/7/2020 11:36:41'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 11:36:41'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'LH 11/7/2020 11:36:41'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'LH 11/7/2020 11:36:41'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'LH 11/7/2020 11:36:41'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'LH 11/7/2020 11:36:41'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'LH 11/7/2020 11:36:41'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'LH 11/7/2020 11:36:41'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'LH 11/7/2020 11:36:42'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'LH 11/7/2020 11:36:42'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'LH 11/7/2020 11:36:42'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'LH 11/7/2020 11:36:42'!
PASSED!
!Portfolio methodsFor: 'accounts' stamp: 'LH 11/7/2020 11:37:19' prior: 50873466!
addAccount: anAccount

	"self validateAccountNotAlredyAdded: anAccount."
	fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountNotInParents: anAccount ].
	
	accounts add: anAccount.! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 11:37:19'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/7/2020 11:37:19'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/7/2020 11:37:19'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 11:37:19'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'LH 11/7/2020 11:37:19'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'LH 11/7/2020 11:37:19'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'LH 11/7/2020 11:37:19'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'LH 11/7/2020 11:37:19'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'LH 11/7/2020 11:37:19'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'LH 11/7/2020 11:37:19'!
FAILURE!

!testRun: #PortfolioTest #test11 stamp: 'LH 11/7/2020 11:37:19'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'LH 11/7/2020 11:37:19'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'LH 11/7/2020 11:37:19'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'LH 11/7/2020 11:37:20'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'LH 11/7/2020 11:37:20'!
FAILURE!
!Portfolio methodsFor: 'accounts' stamp: 'LH 11/7/2020 11:37:37' prior: 50873512!
addAccount: anAccount

	self validateAccountNotAlredyAdded: anAccount.
	fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountNotInParents: anAccount ].
	
	accounts add: anAccount.! !
!Portfolio methodsFor: 'accounts' stamp: 'LH 11/7/2020 11:40:30' prior: 50873560!
addAccount: anAccount

	"self validateAccountNotAlredyAdded: anAccount.
	fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountNotInParents: anAccount ]."
	self validateAccountNotInParents: anAccount.
	
	accounts add: anAccount.! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 11:41:24'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/7/2020 11:41:24'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/7/2020 11:41:24'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 11:41:24'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'LH 11/7/2020 11:41:24'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'LH 11/7/2020 11:41:24'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'LH 11/7/2020 11:41:24'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'LH 11/7/2020 11:41:25'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'LH 11/7/2020 11:41:25'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'LH 11/7/2020 11:41:25'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'LH 11/7/2020 11:41:25'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'LH 11/7/2020 11:41:25'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'LH 11/7/2020 11:41:25'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'LH 11/7/2020 11:41:25'!
PASSED!
!Portfolio methodsFor: 'accounts' stamp: 'LH 11/7/2020 11:41:33' prior: 50873569!
addAccount: anAccount

	self validateAccountNotInParents: anAccount.
	
	accounts add: anAccount.! !

----SNAPSHOT----(7 November 2020 11:44:17) CuisUniversity-4384.image priorSource: 17291502!

----QUIT----(7 November 2020 11:50:13) CuisUniversity-4384.image priorSource: 17343108!

----STARTUP---- (7 November 2020 20:21:21) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64\CuisUniversity-4384.image!


!classRemoval: #ReceptiveAccount stamp: 'LH 11/7/2020 20:21:28'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'LH 11/7/2020 20:21:29'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios fatherPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'LH 11/7/2020 20:21:29'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'LH 11/7/2020 20:21:30'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'LH 11/7/2020 20:21:31'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'LH 11/7/2020 20:21:31'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'LH 11/7/2020 20:21:32'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of C:\Users\Usuario\Desktop\labo\inge1\trabajos\ingeSoft-2020-2c\18-Portfolio\Portfolio-Ejercicio.st----!
!PortfolioTest methodsFor: 'errors adding portfolios by parents' stamp: 'LH 11/7/2020 20:45:24'!
test34CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver
	
	"
		no se pueden agregar un portfolio cuando tiene cuentas repetidas en los padres del receptor 
		 p1 -> p3 -x p4 -> a2,a1
		       -> a1
		 p2 -> p3
		      -> a2
	"
	
	| portfolio1 portfolio2 portfolio3 portfolio4 account1 account2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	

	portfolio1 addPortfolio: portfolio3.
	portfolio2 addPortfolio: portfolio3.
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio4 addAccount: account1.
	portfolio4 addAccount: account2.

	self should: [	portfolio3 addPortfolio: portfolio4.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
! !

!testRun: #PortfolioTest #test34CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/7/2020 20:45:28'!
FAILURE!
!Portfolio methodsFor: 'validations' stamp: 'LH 11/7/2020 20:48:27' prior: 50874617!
validatePortfolioBeforeAdding: aPortfolio
	self validateNotAlreadyAddedPortfolio: aPortfolio.
	aPortfolio accounts do:[:anAccount | self validateAccountBeforeAdding: anAccount].
	
	fatherPortfolios do: [ :fatherPortfolio | (fatherPortfolio validatePortfolioBeforeAdding: aPortfolio)].

! !

!testRun: #PortfolioTest #test34CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'LH 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'LH 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'LH 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'LH 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'LH 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'LH 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'LH 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'LH 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'LH 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'LH 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'LH 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'LH 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'LH 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'LH 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'LH 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'LH 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'LH 11/7/2020 20:48:31'!
PASSED!

!testRun: #PortfolioTest #test22 stamp: 'LH 11/7/2020 20:48:31'!
PASSED!

!testRun: #PortfolioTest #test23 stamp: 'LH 11/7/2020 20:48:31'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'LH 11/7/2020 20:48:31'!
PASSED!

!testRun: #PortfolioTest #test25 stamp: 'LH 11/7/2020 20:48:31'!
PASSED!

!testRun: #PortfolioTest #test26 stamp: 'LH 11/7/2020 20:48:31'!
PASSED!

!testRun: #PortfolioTest #test27 stamp: 'LH 11/7/2020 20:48:31'!
PASSED!

!testRun: #PortfolioTest #test28 stamp: 'LH 11/7/2020 20:48:31'!
PASSED!

!testRun: #PortfolioTest #test29 stamp: 'LH 11/7/2020 20:48:31'!
PASSED!

!testRun: #PortfolioTest #test30 stamp: 'LH 11/7/2020 20:48:31'!
PASSED!

!testRun: #PortfolioTest #test31 stamp: 'LH 11/7/2020 20:48:31'!
PASSED!

!testRun: #PortfolioTest #test32 stamp: 'LH 11/7/2020 20:48:31'!
PASSED!

!testRun: #PortfolioTest #test33 stamp: 'LH 11/7/2020 20:48:31'!
PASSED!

!testRun: #PortfolioTest #test34CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/7/2020 20:48:31'!
PASSED!
!PortfolioTest methodsFor: 'errors adding portfolios by parents' stamp: 'LH 11/7/2020 20:53:34' prior: 50874741!
test34CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver
	
	"
		no se pueden agregar un portfolio cuando tiene cuentas repetidas en los padres del receptor 
		p1 ->	p2 -> p4 -x p5 -> a3,a2,a1|
		     -> a1| -> a2|
			 p3 -> p3|
			      -> a3|
	"
	
	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account1 account2 account3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	portfolio5 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.	
	
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio4.
	portfolio3 addPortfolio: portfolio4.
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio5 addAccount: account1.
	portfolio5 addAccount: account2.
	portfolio5 addAccount: account3.

	self should: [	portfolio3 addPortfolio: portfolio4.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
! !

!testRun: #PortfolioTest #test34CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/7/2020 20:53:35'!
FAILURE!
!Portfolio methodsFor: 'validations' stamp: 'LH 11/7/2020 20:56:29' prior: 50874775!
validatePortfolioBeforeAdding: aPortfolio

	self validateNotAlreadyAddedPortfolio: aPortfolio.
	
	aPortfolio accounts do:[:anAccount | self validateAccountBeforeAdding: anAccount].
	
	fatherPortfolios do: [ :fatherPortfolio | (fatherPortfolio validatePortfolioBeforeAdding: aPortfolio)].
! !

!testRun: #PortfolioTest #test34CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/7/2020 20:59:40'!
FAILURE!

!testRun: #PortfolioTest #test34CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/7/2020 20:59:40'!
FAILURE!

!testRun: #PortfolioTest #test34CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/7/2020 21:00:05'!
FAILURE!

!testRun: #PortfolioTest #test34CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/7/2020 21:00:36'!
FAILURE!

!testRun: #PortfolioTest #test34CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/7/2020 21:00:36'!
FAILURE!

!testRun: #PortfolioTest #test34CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/7/2020 21:01:06'!
FAILURE!

!testRun: #PortfolioTest #test34CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/7/2020 21:02:07'!
FAILURE!

!testRun: #PortfolioTest #test34CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/7/2020 21:02:07'!
FAILURE!

self includesPortfolio: aPortfolio!

portfolios includes: aPortfolio!

aPortfolio!
!PortfolioTest methodsFor: 'errors adding portfolios by parents' stamp: 'LH 11/7/2020 21:03:52' prior: 50874878!
test34CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver
	
	"
		no se pueden agregar un portfolio cuando tiene cuentas repetidas en los padres del receptor 
		p1 ->	p2 -> p4 -x p5 -> a3,a2,a1|
		     -> a1| -> a2|
			 p3 -> p3|
			      -> a3|
	"
	
	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account1 account2 account3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	portfolio5 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.	
	
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio4.
	portfolio3 addPortfolio: portfolio4.
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio5 addAccount: account1.
	portfolio5 addAccount: account2.
	portfolio5 addAccount: account3.

	self should: [	portfolio4 addPortfolio: portfolio5.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
! !

!testRun: #PortfolioTest #test34CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/7/2020 21:03:53'!
PASSED!

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 21:03:53'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/7/2020 21:03:53'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/7/2020 21:03:53'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 21:03:53'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'LH 11/7/2020 21:03:53'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'LH 11/7/2020 21:03:53'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'LH 11/7/2020 21:03:53'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'LH 11/7/2020 21:03:53'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'LH 11/7/2020 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'LH 11/7/2020 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'LH 11/7/2020 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'LH 11/7/2020 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'LH 11/7/2020 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'LH 11/7/2020 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'LH 11/7/2020 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'LH 11/7/2020 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'LH 11/7/2020 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'LH 11/7/2020 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'LH 11/7/2020 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'LH 11/7/2020 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'LH 11/7/2020 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test22 stamp: 'LH 11/7/2020 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test23 stamp: 'LH 11/7/2020 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'LH 11/7/2020 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test25 stamp: 'LH 11/7/2020 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test26 stamp: 'LH 11/7/2020 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test27 stamp: 'LH 11/7/2020 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test28 stamp: 'LH 11/7/2020 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test29 stamp: 'LH 11/7/2020 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test30 stamp: 'LH 11/7/2020 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test31 stamp: 'LH 11/7/2020 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test32 stamp: 'LH 11/7/2020 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test33 stamp: 'LH 11/7/2020 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test34CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/7/2020 21:03:55'!
PASSED!
!PortfolioTest methodsFor: 'adding portfolios' stamp: 'LH 11/7/2020 21:11:48'!
test05APortfolioDoesNotHavePortfoliosInitialy
	
	"un portfolio no tiene portfolios inicialmente"
	
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	self deny: (portfolio1 includesPortfolio: portfolio2).
! !

!methodRemoval: PortfolioTest #test05 stamp: 'LH 11/7/2020 21:11:48'!
test05
	
	"un portfolio no tiene portfolios inicialmente"
	
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	self deny: (portfolio1 includesPortfolio: portfolio2).
!
!PortfolioTest methodsFor: 'adding portfolios' stamp: 'LH 11/7/2020 21:12:18'!
test06AnEmptyPortfolioCanBeAddedToAPortfolio
	
	"a un portfolio se le puede agregar un portfolio sin cuentas"
	
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 addPortfolio: portfolio2.
	
	self assert: (portfolio1 includesPortfolio: portfolio2).
! !

!methodRemoval: PortfolioTest #test06 stamp: 'LH 11/7/2020 21:12:18'!
test06
	
	"a un portfolio se le puede agregar un portfolio sin cuentas"
	
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 addPortfolio: portfolio2.
	
	self assert: (portfolio1 includesPortfolio: portfolio2).
!
!PortfolioTest methodsFor: 'adding portfolios' stamp: 'LH 11/7/2020 21:12:42'!
test07VariousEmptyPortfoliosCanBeAddedToAPortfolio
	
	"a un portfolio se le puede agregar mas de un portfolio sin cuentas"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.
	
	self assert: (portfolio1 includesPortfolio: portfolio2).
	self assert: (portfolio1 includesPortfolio: portfolio3).
! !

!methodRemoval: PortfolioTest #test07 stamp: 'LH 11/7/2020 21:12:42'!
test07
	
	"a un portfolio se le puede agregar mas de un portfolio sin cuentas"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.
	
	self assert: (portfolio1 includesPortfolio: portfolio2).
	self assert: (portfolio1 includesPortfolio: portfolio3).
!
!PortfolioTest methodsFor: 'adding portfolios' stamp: 'LH 11/7/2020 21:13:24'!
test08PortfoliosCanBeAddedToAPortfolio
	
	"a un portfolio se le pueden agregar portfolios"
	
	| portfolio1 portfolio2 portfolio3 portfolio4 account1 account2 account3 account4 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	account4 := ReceptiveAccount new.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.
	portfolio2 addPortfolio: portfolio4. "portfolio anidado"
	
	portfolio2 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio4 addAccount: account4.
	
	self assert: (portfolio1 includesAccount: account1).
	self assert: (portfolio1 includesAccount: account2).
	self assert: (portfolio1 includesAccount: account3).
	self assert: (portfolio1 includesAccount: account4).
! !

!methodRemoval: PortfolioTest #test08 stamp: 'LH 11/7/2020 21:13:24'!
test08
	
	"a un portfolio se le pueden agregar portfolios"
	
	| portfolio1 portfolio2 portfolio3 portfolio4 account1 account2 account3 account4 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	account4 := ReceptiveAccount new.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.
	portfolio2 addPortfolio: portfolio4. "portfolio anidado"
	
	portfolio2 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio4 addAccount: account4.
	
	self assert: (portfolio1 includesAccount: account1).
	self assert: (portfolio1 includesAccount: account2).
	self assert: (portfolio1 includesAccount: account3).
	self assert: (portfolio1 includesAccount: account4).
!
!PortfolioTest methodsFor: 'adding portfolios' stamp: 'LH 11/7/2020 21:16:23'!
test09APortfolioWithPortfoliosCanBeAddedToAportfolio
	
	"a un portfolio se le pueden agregar portfolios con portfolios"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.

	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self assert: (portfolio1 includesPortfolio: portfolio3).

! !

!methodRemoval: PortfolioTest #test09 stamp: 'LH 11/7/2020 21:16:23'!
test09
	
	"a un portfolio se le pueden agregar portfolios con portfolios"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.

	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self assert: (portfolio1 includesPortfolio: portfolio3).

!
!PortfolioTest methodsFor: 'errors adding accounts by children' stamp: 'LH 11/7/2020 21:17:16'!
test10CanNotAddAnAccountToAportfolioWhoseParentHasTheAccount
	
	"no se pueden agregar una cueanta a un portfolio (hijo) de un portfolio (padre), cuando la cuenta ya estaba en el portfolio (padre)"
	
	| portfolio1 portfolio2 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio2 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.

	self should: [	portfolio1 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
! !

!methodRemoval: PortfolioTest #test10 stamp: 'LH 11/7/2020 21:17:16'!
test10
	
	"no se pueden agregar una cueanta a un portfolio (hijo) de un portfolio (padre), cuando la cuenta ya estaba en el portfolio (padre)"
	
	| portfolio1 portfolio2 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio2 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.

	self should: [	portfolio1 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
!
!PortfolioTest methodsFor: 'errors adding accounts by children' stamp: 'LH 11/7/2020 21:17:29'!
test10CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount
	
	"no se pueden agregar una cueanta a un portfolio (hijo) de un portfolio (padre), cuando la cuenta ya estaba en el portfolio (padre)"
	
	| portfolio1 portfolio2 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio2 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.

	self should: [	portfolio1 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
! !

!methodRemoval: PortfolioTest #test10CanNotAddAnAccountToAportfolioWhoseParentHasTheAccount stamp: 'LH 11/7/2020 21:17:29'!
test10CanNotAddAnAccountToAportfolioWhoseParentHasTheAccount
	
	"no se pueden agregar una cueanta a un portfolio (hijo) de un portfolio (padre), cuando la cuenta ya estaba en el portfolio (padre)"
	
	| portfolio1 portfolio2 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio2 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.

	self should: [	portfolio1 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
!
!PortfolioTest methodsFor: 'errors adding accounts by children' stamp: 'LH 11/7/2020 21:18:29'!
test11CanNotAddAnAccountToAPortfolioWhoHasAParentWithTheAccount
	
	"no se pueden agregar una cueanta a un portfolio (hijo) de un portfolio (padre), cuando la cuenta ya estaba en el portfolio (padre)"
	
	| portfolio1 portfolio2 portfolio3 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.	

	account1 := ReceptiveAccount new.
	
	portfolio3 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self should: [	portfolio1 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
! !

!methodRemoval: PortfolioTest #test11 stamp: 'LH 11/7/2020 21:18:29'!
test11
	
	"no se pueden agregar una cueanta a un portfolio (hijo) de un portfolio (padre), cuando la cuenta ya estaba en el portfolio (padre)"
	
	| portfolio1 portfolio2 portfolio3 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.	

	account1 := ReceptiveAccount new.
	
	portfolio3 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self should: [	portfolio1 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
!
!PortfolioTest methodsFor: 'errors adding portfolios by childern' stamp: 'LH 11/7/2020 21:20:31'!
test12APortfolioCantHaveRepeatedAccounts
	
	"no pueden haber cuentas repetidas en un portfolio"
	
	| portfolio1 portfolio2 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addAccount: account1.

	
	self should: [portfolio1 addAccount: account1] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.

! !

!methodRemoval: PortfolioTest #test12 stamp: 'LH 11/7/2020 21:20:31'!
test12
	
	"no pueden haber cuentas repetidas en un portfolio"
	
	| portfolio1 portfolio2 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addAccount: account1.

	
	self should: [portfolio1 addAccount: account1] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.

!
!PortfolioTest methodsFor: 'errors adding portfolios by childern' stamp: 'LH 11/7/2020 21:20:56'!
test13APortfolioCanNotHaveRepeatedPortfolios
	
	"no pueden haber prtfolios repetidos en un portfolio"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self should: [portfolio1 addPortfolio: portfolio3] raise: Error withMessageText: Portfolio errorMessagePortfolioAlreadyAdded.

! !

!methodRemoval: PortfolioTest #test13 stamp: 'LH 11/7/2020 21:20:56'!
test13
	
	"no pueden haber prtfolios repetidos en un portfolio"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self should: [portfolio1 addPortfolio: portfolio3] raise: Error withMessageText: Portfolio errorMessagePortfolioAlreadyAdded.

!
!PortfolioTest methodsFor: 'errors adding accounts by children' stamp: 'LH 11/7/2020 21:21:53'!
test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount
	
	"no se pueden agregar una cueanta a un portfolio (hijo) de un portfolio (padre), cuando la cuenta ya estaba en el portfolio (padre)"
	
	| portfolio1 portfolio2 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio2 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.

	self should: [	portfolio1 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
! !

!methodRemoval: PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/7/2020 21:21:53'!
test10CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount
	
	"no se pueden agregar una cueanta a un portfolio (hijo) de un portfolio (padre), cuando la cuenta ya estaba en el portfolio (padre)"
	
	| portfolio1 portfolio2 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio2 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.

	self should: [	portfolio1 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
!
!PortfolioTest methodsFor: 'errors adding accounts by children' stamp: 'LH 11/7/2020 21:22:03'!
test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount
	
	"no se pueden agregar una cueanta a un portfolio (hijo) de un portfolio (padre), cuando la cuenta ya estaba en el portfolio (padre)"
	
	| portfolio1 portfolio2 portfolio3 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.	

	account1 := ReceptiveAccount new.
	
	portfolio3 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self should: [	portfolio1 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
! !

!methodRemoval: PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAParentWithTheAccount stamp: 'LH 11/7/2020 21:22:03'!
test11CanNotAddAnAccountToAPortfolioWhoHasAParentWithTheAccount
	
	"no se pueden agregar una cueanta a un portfolio (hijo) de un portfolio (padre), cuando la cuenta ya estaba en el portfolio (padre)"
	
	| portfolio1 portfolio2 portfolio3 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.	

	account1 := ReceptiveAccount new.
	
	portfolio3 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self should: [	portfolio1 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
!
!PortfolioTest methodsFor: 'errors adding accounts by children' stamp: 'LH 11/7/2020 21:22:42' prior: 50875457!
test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount
	
	"no se pueden agregar una cueanta a un portfolio (padre) con un portfolio (hijo), cuando la cuenta ya estaba en el portfolio (hijo)"
	
	| portfolio1 portfolio2 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio2 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.

	self should: [	portfolio1 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
! !
!PortfolioTest methodsFor: 'errors adding accounts by children' stamp: 'LH 11/7/2020 21:23:19' prior: 50875499!
test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount
	
	"no se pueden agregar una cueanta a un portfolio (padre) con un portfolio (hijo) con un portfolio (nieto), cuando la cuenta ya estaba en el portfolio (nieto)"
	
	| portfolio1 portfolio2 portfolio3 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.	

	account1 := ReceptiveAccount new.
	
	portfolio3 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self should: [	portfolio1 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
! !
!PortfolioTest methodsFor: 'errors adding accounts by parents' stamp: 'LH 11/7/2020 21:24:11'!
test14CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount
	
	"no se pueden agregar una cueanta a un portfolio (hijo) de un portfolio (padre), cuando la cuenta ya estaba en el portfolio (padre)"
	
	| portfolio1 portfolio2 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio1 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.

	self should: [	portfolio2 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
! !

!methodRemoval: PortfolioTest #test14 stamp: 'LH 11/7/2020 21:24:11'!
test14
	
	"no se pueden agregar una cueanta a un portfolio (hijo) de un portfolio (padre), cuando la cuenta ya estaba en el portfolio (padre)"
	
	| portfolio1 portfolio2 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio1 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.

	self should: [	portfolio2 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
!
!PortfolioTest methodsFor: 'errors adding accounts by parents' stamp: 'LH 11/7/2020 21:24:41'!
test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount
	
	"no se pueden agregar una cueanta a un portfolio (hijo) de un portfolio (padre), cuando la cuenta ya estaba en el portfolio (padre), con varios padres"
	
	| portfolio1 portfolio2 portfolio3 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio2 addAccount: account1.
	portfolio2 addPortfolio: portfolio3.
	portfolio1 addPortfolio: portfolio3.

	self should: [	portfolio3 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
! !

!methodRemoval: PortfolioTest #test15 stamp: 'LH 11/7/2020 21:24:41'!
test15
	
	"no se pueden agregar una cueanta a un portfolio (hijo) de un portfolio (padre), cuando la cuenta ya estaba en el portfolio (padre), con varios padres"
	
	| portfolio1 portfolio2 portfolio3 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio2 addAccount: account1.
	portfolio2 addPortfolio: portfolio3.
	portfolio1 addPortfolio: portfolio3.

	self should: [	portfolio3 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
!
!PortfolioTest methodsFor: 'errors adding accounts by parents' stamp: 'LH 11/7/2020 21:25:31'!
test16CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount
	
	"no se pueden agregar una cueanta a un hijo si esa cuenta est� en el padre de su padre"
	
	| portfolio1 portfolio2 portfolio3 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio1 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self should: [	portfolio3 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
! !

!methodRemoval: PortfolioTest #test16 stamp: 'LH 11/7/2020 21:25:31'!
test16
	
	"no se pueden agregar una cueanta a un hijo si esa cuenta est� en el padre de su padre"
	
	| portfolio1 portfolio2 portfolio3 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio1 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self should: [	portfolio3 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
!
!PortfolioTest methodsFor: 'errors adding portfolios by parents' stamp: 'LH 11/7/2020 21:27:04'!
test17CantAddAPortfolioWhenTheParentAlredyHasIt
	
	"
		no se pueden agregar un portfolio cuando el padre ya tiene ese portfolio
		p1 ->  p2 -> p1
	"
	
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.

	portfolio1 addPortfolio: portfolio2.

	self should: [	portfolio2 addPortfolio: portfolio1.] raise: Error withMessageText: Portfolio errorMessagePortfolioAlreadyAdded.
! !

!methodRemoval: PortfolioTest #test17 stamp: 'LH 11/7/2020 21:27:04'!
test17
	
	"
		no se pueden agregar un portfolio cuando el padre ya tiene ese portfolio
		p1 ->  p2 -> p1
	"
	
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.

	portfolio1 addPortfolio: portfolio2.

	self should: [	portfolio2 addPortfolio: portfolio1.] raise: Error withMessageText: Portfolio errorMessagePortfolioAlreadyAdded.
!
!PortfolioTest methodsFor: 'errors adding portfolios by parents' stamp: 'LH 11/7/2020 21:27:39'!
test18CantAddAPortfolioWhenAPredecesorAlredyHasIt
	
	"
		no se pueden agregar un portfolio cuando el padre del padre ya tiene ese portfolio
		p1 ->  p2 -> p3 -> p1
	"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.

	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self should: [	portfolio3 addPortfolio: portfolio1.] raise: Error withMessageText: Portfolio errorMessagePortfolioAlreadyAdded.
! !

!methodRemoval: PortfolioTest #test18 stamp: 'LH 11/7/2020 21:27:39'!
test18
	
	"
		no se pueden agregar un portfolio cuando el padre del padre ya tiene ese portfolio
		p1 ->  p2 -> p3 -> p1
	"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.

	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self should: [	portfolio3 addPortfolio: portfolio1.] raise: Error withMessageText: Portfolio errorMessagePortfolioAlreadyAdded.
!
!PortfolioTest methodsFor: 'errors adding portfolios by parents' stamp: 'LH 11/7/2020 21:28:18'!
test17CantAddAPortfolioWhenItIsAParent
	
	"
		no se pueden agregar un portfolio cuando el padre ya tiene ese portfolio
		p1 ->  p2 -> p1
	"
	
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.

	portfolio1 addPortfolio: portfolio2.

	self should: [	portfolio2 addPortfolio: portfolio1.] raise: Error withMessageText: Portfolio errorMessagePortfolioAlreadyAdded.
! !

!methodRemoval: PortfolioTest #test17CantAddAPortfolioWhenTheParentAlredyHasIt stamp: 'LH 11/7/2020 21:28:18'!
test17CantAddAPortfolioWhenTheParentAlredyHasIt
	
	"
		no se pueden agregar un portfolio cuando el padre ya tiene ese portfolio
		p1 ->  p2 -> p1
	"
	
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.

	portfolio1 addPortfolio: portfolio2.

	self should: [	portfolio2 addPortfolio: portfolio1.] raise: Error withMessageText: Portfolio errorMessagePortfolioAlreadyAdded.
!
!PortfolioTest methodsFor: 'errors adding portfolios by parents' stamp: 'LH 11/7/2020 21:28:30'!
test18CantAddAPortfolioWhenItIsAPredecesor
	
	"
		no se pueden agregar un portfolio cuando el padre del padre ya tiene ese portfolio
		p1 ->  p2 -> p3 -> p1
	"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.

	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self should: [	portfolio3 addPortfolio: portfolio1.] raise: Error withMessageText: Portfolio errorMessagePortfolioAlreadyAdded.
! !

!methodRemoval: PortfolioTest #test18CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/7/2020 21:28:31'!
test18CantAddAPortfolioWhenAPredecesorAlredyHasIt
	
	"
		no se pueden agregar un portfolio cuando el padre del padre ya tiene ese portfolio
		p1 ->  p2 -> p3 -> p1
	"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.

	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self should: [	portfolio3 addPortfolio: portfolio1.] raise: Error withMessageText: Portfolio errorMessagePortfolioAlreadyAdded.
!
!PortfolioTest methodsFor: 'errors adding portfolios by parents' stamp: 'LH 11/7/2020 21:28:54'!
test19CantAddAPortfolioWhenAPredecesorAlredyHasIt
	
	"
		no se pueden agregar un portfolio cuando el padre del padre ya tiene ese portfolio
		p1 ->  p2
		p1 ->  p3 -> p2
	"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.

	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.

	self should: [	portfolio3 addPortfolio: portfolio2.] raise: Error withMessageText: Portfolio errorMessagePortfolioAlreadyAdded.
! !

!methodRemoval: PortfolioTest #test19 stamp: 'LH 11/7/2020 21:28:54'!
test19
	
	"
		no se pueden agregar un portfolio cuando el padre del padre ya tiene ese portfolio
		p1 ->  p2
		p1 ->  p3 -> p2
	"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.

	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.

	self should: [	portfolio3 addPortfolio: portfolio2.] raise: Error withMessageText: Portfolio errorMessagePortfolioAlreadyAdded.
!
!PortfolioTest methodsFor: 'accounts' stamp: 'LH 11/7/2020 21:29:53'!
test20APortfolioKnowsItsDirectAccounts
	
	"un portfolio expone sus cuentas"
	
	| portfolio1 account1 account2 |
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.	

	self assert: (portfolio1 accounts includesAllOf: (OrderedCollection with: account1 with: account2)).

	
! !

!methodRemoval: PortfolioTest #test20 stamp: 'LH 11/7/2020 21:29:54'!
test20
	
	"un portfolio expone sus cuentas"
	
	| portfolio1 account1 account2 |
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.	

	self assert: (portfolio1 accounts includesAllOf: (OrderedCollection with: account1 with: account2)).

	
!
!PortfolioTest methodsFor: 'accounts' stamp: 'LH 11/7/2020 21:30:49'!
test21APortfolioKnowsTheAccountsOfHisPortfolios
	
	"un portfolio expone las cuentas de sus portfolios"
	
	| portfolio1 portfolio2 portfolio3 portfolio4 account1 account2 account3 account4 |

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.	
	account4 := ReceptiveAccount new.	

	portfolio2 addAccount: account1.
	portfolio2 addAccount: account2.	
	portfolio3 addAccount: account3.
	portfolio4 addAccount: account4.

	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.
	portfolio2 addPortfolio: portfolio4.

	self assert: (portfolio1 accounts includesAllOf: (OrderedCollection with: account1 with: account2 with: account3 with: account4)).

	
! !

!methodRemoval: PortfolioTest #test21 stamp: 'LH 11/7/2020 21:30:49'!
test21
	
	"un portfolio expone las cuentas de sus portfolios"
	
	| portfolio1 portfolio2 portfolio3 portfolio4 account1 account2 account3 account4 |

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.	
	account4 := ReceptiveAccount new.	

	portfolio2 addAccount: account1.
	portfolio2 addAccount: account2.	
	portfolio3 addAccount: account3.
	portfolio4 addAccount: account4.

	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.
	portfolio2 addPortfolio: portfolio4.

	self assert: (portfolio1 accounts includesAllOf: (OrderedCollection with: account1 with: account2 with: account3 with: account4)).

	
!
!PortfolioTest methodsFor: 'balance' stamp: 'LH 11/7/2020 21:31:07'!
test22AnEmptyPortfolioHasABalanceOf0

	"un portfolio vacio responde balance 0"

	| portfolio1 |

	portfolio1 := Portfolio new.

	self assert: (portfolio1 balance) equals: 0.
! !

!methodRemoval: PortfolioTest #test22 stamp: 'LH 11/7/2020 21:31:07'!
test22

	"un portfolio vacio responde balance 0"

	| portfolio1 |

	portfolio1 := Portfolio new.

	self assert: (portfolio1 balance) equals: 0.
!
!PortfolioTest methodsFor: 'balance' stamp: 'LH 11/7/2020 21:31:35'!
test23APortfolioWithOneAccountHasTheBalanceOfThatAccount

	"un portfolio reponde por el balance de su unico hijo"

	| portfolio1 account1 |
	
	account1 := ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.

	portfolio1 := Portfolio new.

	portfolio1 addAccount: account1.

	self assert: (portfolio1 balance) equals: 50.
! !

!methodRemoval: PortfolioTest #test23 stamp: 'LH 11/7/2020 21:31:35'!
test23

	"un portfolio reponde por el balance de su unico hijo"

	| portfolio1 account1 |
	
	account1 := ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.

	portfolio1 := Portfolio new.

	portfolio1 addAccount: account1.

	self assert: (portfolio1 balance) equals: 50.
!
!PortfolioTest methodsFor: 'balance' stamp: 'LH 11/7/2020 21:32:03'!
test24APortfolioWithVariousAccountsHasTheBalanceOfTheSumOfHisAccounts

	"un portfolio reponde por el balance de sus hijos"

	| portfolio1 account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account2.

	portfolio1 := Portfolio new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.

	self assert: (portfolio1 balance) equals: 150.
! !

!methodRemoval: PortfolioTest #test24 stamp: 'LH 11/7/2020 21:32:03'!
test24

	"un portfolio reponde por el balance de sus hijos"

	| portfolio1 account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account2.

	portfolio1 := Portfolio new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.

	self assert: (portfolio1 balance) equals: 150.
!
!PortfolioTest methodsFor: 'balance' stamp: 'LH 11/7/2020 21:32:39'!
test25APortfolioHasTheBalanceIsTheSumOfHisAccountsAndHisPortfolios

	"un portfolio reponde por el balance de los hijos de sus portfolios"

	| portfolio1 portfolio2 account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account2.

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.

	portfolio1 addPortfolio: portfolio2.

	portfolio2 addAccount: account1.
	portfolio2 addAccount: account2.

	self assert: (portfolio1 balance) equals: 150.
! !

!methodRemoval: PortfolioTest #test25 stamp: 'LH 11/7/2020 21:32:39'!
test25

	"un portfolio reponde por el balance de los hijos de sus portfolios"

	| portfolio1 portfolio2 account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account2.

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.

	portfolio1 addPortfolio: portfolio2.

	portfolio2 addAccount: account1.
	portfolio2 addAccount: account2.

	self assert: (portfolio1 balance) equals: 150.
!
!PortfolioTest methodsFor: 'balance' stamp: 'LH 11/7/2020 21:33:16'!
test24TheBalanceOfAPortfolioIsTheSumOfHisAccounts

	"un portfolio reponde por el balance de sus hijos"

	| portfolio1 account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account2.

	portfolio1 := Portfolio new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.

	self assert: (portfolio1 balance) equals: 150.
! !

!methodRemoval: PortfolioTest #test24APortfolioWithVariousAccountsHasTheBalanceOfTheSumOfHisAccounts stamp: 'LH 11/7/2020 21:33:16'!
test24APortfolioWithVariousAccountsHasTheBalanceOfTheSumOfHisAccounts

	"un portfolio reponde por el balance de sus hijos"

	| portfolio1 account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account2.

	portfolio1 := Portfolio new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.

	self assert: (portfolio1 balance) equals: 150.
!
!PortfolioTest methodsFor: 'balance' stamp: 'LH 11/7/2020 21:33:48'!
test25TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios

	"un portfolio reponde por el balance de los hijos de sus portfolios"

	| portfolio1 portfolio2 account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account2.

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.

	portfolio1 addPortfolio: portfolio2.

	portfolio2 addAccount: account1.
	portfolio2 addAccount: account2.

	self assert: (portfolio1 balance) equals: 150.
! !

!methodRemoval: PortfolioTest #test25APortfolioHasTheBalanceIsTheSumOfHisAccountsAndHisPortfolios stamp: 'LH 11/7/2020 21:33:48'!
test25APortfolioHasTheBalanceIsTheSumOfHisAccountsAndHisPortfolios

	"un portfolio reponde por el balance de los hijos de sus portfolios"

	| portfolio1 portfolio2 account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account2.

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.

	portfolio1 addPortfolio: portfolio2.

	portfolio2 addAccount: account1.
	portfolio2 addAccount: account2.

	self assert: (portfolio1 balance) equals: 150.
!
!PortfolioTest methodsFor: 'balance' stamp: 'LH 11/7/2020 21:33:58'!
test24TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts

	"un portfolio reponde por el balance de sus hijos"

	| portfolio1 account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account2.

	portfolio1 := Portfolio new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.

	self assert: (portfolio1 balance) equals: 150.
! !

!methodRemoval: PortfolioTest #test24TheBalanceOfAPortfolioIsTheSumOfHisAccounts stamp: 'LH 11/7/2020 21:33:59'!
test24TheBalanceOfAPortfolioIsTheSumOfHisAccounts

	"un portfolio reponde por el balance de sus hijos"

	| portfolio1 account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account2.

	portfolio1 := Portfolio new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.

	self assert: (portfolio1 balance) equals: 150.
!

----SNAPSHOT----(7 November 2020 21:34:40) CuisUniversity-4384.image priorSource: 17343201!
!PortfolioTest methodsFor: 'has registered' stamp: 'LH 11/7/2020 21:35:19'!
test26AnEmptyPortfolioHasNoTransactions

	"un portfolio vacio no registro ninguna transaccion"
	
	| deposit withdraw portfolio1 |
	
	portfolio1 := Portfolio new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (portfolio1 hasRegistered: deposit).
	self deny: (portfolio1 hasRegistered:withdraw).
! !

!methodRemoval: PortfolioTest #test26 stamp: 'LH 11/7/2020 21:35:19'!
test26

	"un portfolio vacio no registro ninguna transaccion"
	
	| deposit withdraw portfolio1 |
	
	portfolio1 := Portfolio new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (portfolio1 hasRegistered: deposit).
	self deny: (portfolio1 hasRegistered:withdraw).
!
!PortfolioTest methodsFor: 'has registered' stamp: 'LH 11/7/2020 21:36:48'!
test27TheTransactionsOfAPortfolioWithOneAccountIsTheAccountsTransactions

	"un portfolio con una cuenta registro sus transacciones"
	
	| deposit withdraw account1 portfolio1 |
	
	account1 := ReceptiveAccount new.
	deposit :=  Deposit register: 100 on: account1.
	withdraw := Withdraw register: 50 on: account1.
	
	portfolio1 := Portfolio new.
	portfolio1 addAccount: account1.

	self assert: (portfolio1 hasRegistered: deposit).
	self assert: (portfolio1 hasRegistered:withdraw).
! !

!methodRemoval: PortfolioTest #test27 stamp: 'LH 11/7/2020 21:36:48'!
test27

	"un portfolio con una cuenta registro sus transacciones"
	
	| deposit withdraw account1 portfolio1 |
	
	account1 := ReceptiveAccount new.
	deposit :=  Deposit register: 100 on: account1.
	withdraw := Withdraw register: 50 on: account1.
	
	portfolio1 := Portfolio new.
	portfolio1 addAccount: account1.

	self assert: (portfolio1 hasRegistered: deposit).
	self assert: (portfolio1 hasRegistered:withdraw).
!
!PortfolioTest methodsFor: 'has registered' stamp: 'LH 11/7/2020 21:37:34'!
test27APortfolioWithOneAccountHasItsTransactions

	"un portfolio con una cuenta registro sus transacciones"
	
	| deposit withdraw account1 portfolio1 |
	
	account1 := ReceptiveAccount new.
	deposit :=  Deposit register: 100 on: account1.
	withdraw := Withdraw register: 50 on: account1.
	
	portfolio1 := Portfolio new.
	portfolio1 addAccount: account1.

	self assert: (portfolio1 hasRegistered: deposit).
	self assert: (portfolio1 hasRegistered:withdraw).
! !

!methodRemoval: PortfolioTest #test27TheTransactionsOfAPortfolioWithOneAccountIsTheAccountsTransactions stamp: 'LH 11/7/2020 21:37:35'!
test27TheTransactionsOfAPortfolioWithOneAccountIsTheAccountsTransactions

	"un portfolio con una cuenta registro sus transacciones"
	
	| deposit withdraw account1 portfolio1 |
	
	account1 := ReceptiveAccount new.
	deposit :=  Deposit register: 100 on: account1.
	withdraw := Withdraw register: 50 on: account1.
	
	portfolio1 := Portfolio new.
	portfolio1 addAccount: account1.

	self assert: (portfolio1 hasRegistered: deposit).
	self assert: (portfolio1 hasRegistered:withdraw).
!
!PortfolioTest methodsFor: 'has registered' stamp: 'LH 11/7/2020 21:37:59'!
test28APortfolioWithManyAccountsHasItsAccountsTransactions

	"un portfolio con varias cuentas registro todas sus transacciones"
	
	| deposit1 deposit2 withdraw1 withdraw2 account1 account2 portfolio1 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 :=  Deposit register: 100 on: account1.
	withdraw1 := Withdraw register: 50 on: account1.
	deposit2 :=  Deposit register: 30 on: account2.
	withdraw2 := Withdraw register: 20 on: account2.

	portfolio1 := Portfolio new.
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.

	self assert: (portfolio1 hasRegistered: deposit1).
	self assert: (portfolio1 hasRegistered:withdraw1).
	self assert: (portfolio1 hasRegistered: deposit2).
	self assert: (portfolio1 hasRegistered:withdraw2).
! !

!methodRemoval: PortfolioTest #test28 stamp: 'LH 11/7/2020 21:37:59'!
test28

	"un portfolio con varias cuentas registro todas sus transacciones"
	
	| deposit1 deposit2 withdraw1 withdraw2 account1 account2 portfolio1 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 :=  Deposit register: 100 on: account1.
	withdraw1 := Withdraw register: 50 on: account1.
	deposit2 :=  Deposit register: 30 on: account2.
	withdraw2 := Withdraw register: 20 on: account2.

	portfolio1 := Portfolio new.
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.

	self assert: (portfolio1 hasRegistered: deposit1).
	self assert: (portfolio1 hasRegistered:withdraw1).
	self assert: (portfolio1 hasRegistered: deposit2).
	self assert: (portfolio1 hasRegistered:withdraw2).
!
!PortfolioTest methodsFor: 'has registered' stamp: 'LH 11/7/2020 21:38:18'!
test29APortfolioHasItsPortfoliosAndAccountsTransactions

	"un portfolio con varias cuentas en sus portfolios registro todas sus transacciones"
	
	| deposit1 deposit2 withdraw1 withdraw2 account1 account2 portfolio1 portfolio2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 :=  Deposit register: 100 on: account1.
	withdraw1 := Withdraw register: 50 on: account1.
	deposit2 :=  Deposit register: 30 on: account2.
	withdraw2 := Withdraw register: 20 on: account2.

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	
	portfolio2 addPortfolio: portfolio1.

	self assert: (portfolio2 hasRegistered: deposit1).
	self assert: (portfolio2 hasRegistered:withdraw1).
	self assert: (portfolio2 hasRegistered: deposit2).
	self assert: (portfolio2 hasRegistered:withdraw2).
! !

!methodRemoval: PortfolioTest #test29 stamp: 'LH 11/7/2020 21:38:18'!
test29

	"un portfolio con varias cuentas en sus portfolios registro todas sus transacciones"
	
	| deposit1 deposit2 withdraw1 withdraw2 account1 account2 portfolio1 portfolio2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 :=  Deposit register: 100 on: account1.
	withdraw1 := Withdraw register: 50 on: account1.
	deposit2 :=  Deposit register: 30 on: account2.
	withdraw2 := Withdraw register: 20 on: account2.

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	
	portfolio2 addPortfolio: portfolio1.

	self assert: (portfolio2 hasRegistered: deposit1).
	self assert: (portfolio2 hasRegistered:withdraw1).
	self assert: (portfolio2 hasRegistered: deposit2).
	self assert: (portfolio2 hasRegistered:withdraw2).
!
!PortfolioTest methodsFor: 'transactions' stamp: 'LH 11/7/2020 21:40:32'!
test30AnEmptyPortfolioHasNoTransactions

	"un portfolio vacio no tiene transacciones"
	
	| portfolio1 |
	
	portfolio1 := Portfolio new.
		
	self assert: (portfolio1 transactions size) equals: 0.

! !

!methodRemoval: PortfolioTest #test30 stamp: 'LH 11/7/2020 21:40:32'!
test30

	"un portfolio vacio no tiene transacciones"
	
	| portfolio1 |
	
	portfolio1 := Portfolio new.
		
	self assert: (portfolio1 transactions size) equals: 0.

!
!PortfolioTest methodsFor: 'transactions' stamp: 'LH 11/7/2020 21:40:59'!
test31APortfolioWithOneAccountHasItsTransactions

	"un portfolio con una cuenta retorna sus transacciones"
	
	| deposit withdraw account1 portfolio1 |
	
	account1 := ReceptiveAccount new.
	deposit :=  Deposit register: 100 on: account1.
	withdraw := Withdraw register: 50 on: account1.
	
	portfolio1 := Portfolio new.
	portfolio1 addAccount: account1.

	self assert: (portfolio1 transactions includesAllOf: (OrderedCollection with: deposit with: withdraw)).

! !

!methodRemoval: PortfolioTest #test31 stamp: 'LH 11/7/2020 21:40:59'!
test31

	"un portfolio con una cuenta retorna sus transacciones"
	
	| deposit withdraw account1 portfolio1 |
	
	account1 := ReceptiveAccount new.
	deposit :=  Deposit register: 100 on: account1.
	withdraw := Withdraw register: 50 on: account1.
	
	portfolio1 := Portfolio new.
	portfolio1 addAccount: account1.

	self assert: (portfolio1 transactions includesAllOf: (OrderedCollection with: deposit with: withdraw)).

!
!PortfolioTest methodsFor: 'transactions' stamp: 'LH 11/7/2020 21:41:17'!
test32APortfolioWithManyAccountsHasItsAccountsTransactions

	"un portfolio con varias cuentas retorna todas sus transacciones"
	
	| deposit1 deposit2 withdraw1 withdraw2 account1 account2 portfolio1 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 :=  Deposit register: 100 on: account1.
	withdraw1 := Withdraw register: 50 on: account1.
	deposit2 :=  Deposit register: 30 on: account2.
	withdraw2 := Withdraw register: 20 on: account2.

	portfolio1 := Portfolio new.
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.

	self assert: (portfolio1 transactions includesAllOf: (OrderedCollection with: deposit1 with: withdraw1 with: deposit2 with: withdraw2)).

! !

!methodRemoval: PortfolioTest #test32 stamp: 'LH 11/7/2020 21:41:17'!
test32

	"un portfolio con varias cuentas retorna todas sus transacciones"
	
	| deposit1 deposit2 withdraw1 withdraw2 account1 account2 portfolio1 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 :=  Deposit register: 100 on: account1.
	withdraw1 := Withdraw register: 50 on: account1.
	deposit2 :=  Deposit register: 30 on: account2.
	withdraw2 := Withdraw register: 20 on: account2.

	portfolio1 := Portfolio new.
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.

	self assert: (portfolio1 transactions includesAllOf: (OrderedCollection with: deposit1 with: withdraw1 with: deposit2 with: withdraw2)).

!
!PortfolioTest methodsFor: 'transactions' stamp: 'LH 11/7/2020 21:41:34'!
test33APortfolioHasItsPortfoliosAndAccountsTransaction

	"un portfolio con varias cuentas en sus portfolios retorna todas sus transacciones"
	
	| deposit1 deposit2 withdraw1 withdraw2 account1 account2 portfolio1 portfolio2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 :=  Deposit register: 100 on: account1.
	withdraw1 := Withdraw register: 50 on: account1.
	deposit2 :=  Deposit register: 30 on: account2.
	withdraw2 := Withdraw register: 20 on: account2.

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	
	portfolio2 addPortfolio: portfolio1.

	self assert: (portfolio2 transactions includesAllOf: (OrderedCollection with: deposit1 with: withdraw1 with: deposit2 with: withdraw2)).

! !

!methodRemoval: PortfolioTest #test33 stamp: 'LH 11/7/2020 21:41:34'!
test33

	"un portfolio con varias cuentas en sus portfolios retorna todas sus transacciones"
	
	| deposit1 deposit2 withdraw1 withdraw2 account1 account2 portfolio1 portfolio2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 :=  Deposit register: 100 on: account1.
	withdraw1 := Withdraw register: 50 on: account1.
	deposit2 :=  Deposit register: 30 on: account2.
	withdraw2 := Withdraw register: 20 on: account2.

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	
	portfolio2 addPortfolio: portfolio1.

	self assert: (portfolio2 transactions includesAllOf: (OrderedCollection with: deposit1 with: withdraw1 with: deposit2 with: withdraw2)).

!
!PortfolioTest methodsFor: 'has registered' stamp: 'LH 11/7/2020 21:42:19'!
test26AnEmptyPortfolioHasNoRegisteredTransactions

	"un portfolio vacio no registro ninguna transaccion"
	
	| deposit withdraw portfolio1 |
	
	portfolio1 := Portfolio new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (portfolio1 hasRegistered: deposit).
	self deny: (portfolio1 hasRegistered:withdraw).
! !

!methodRemoval: PortfolioTest #test26AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/7/2020 21:42:19'!
test26AnEmptyPortfolioHasNoTransactions

	"un portfolio vacio no registro ninguna transaccion"
	
	| deposit withdraw portfolio1 |
	
	portfolio1 := Portfolio new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (portfolio1 hasRegistered: deposit).
	self deny: (portfolio1 hasRegistered:withdraw).
!
!PortfolioTest methodsFor: 'has registered' stamp: 'LH 11/7/2020 21:42:30'!
test27APortfolioWithOneAccountHasItsRegisteredTransactions

	"un portfolio con una cuenta registro sus transacciones"
	
	| deposit withdraw account1 portfolio1 |
	
	account1 := ReceptiveAccount new.
	deposit :=  Deposit register: 100 on: account1.
	withdraw := Withdraw register: 50 on: account1.
	
	portfolio1 := Portfolio new.
	portfolio1 addAccount: account1.

	self assert: (portfolio1 hasRegistered: deposit).
	self assert: (portfolio1 hasRegistered:withdraw).
! !

!methodRemoval: PortfolioTest #test27APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/7/2020 21:42:30'!
test27APortfolioWithOneAccountHasItsTransactions

	"un portfolio con una cuenta registro sus transacciones"
	
	| deposit withdraw account1 portfolio1 |
	
	account1 := ReceptiveAccount new.
	deposit :=  Deposit register: 100 on: account1.
	withdraw := Withdraw register: 50 on: account1.
	
	portfolio1 := Portfolio new.
	portfolio1 addAccount: account1.

	self assert: (portfolio1 hasRegistered: deposit).
	self assert: (portfolio1 hasRegistered:withdraw).
!
!PortfolioTest methodsFor: 'has registered' stamp: 'LH 11/7/2020 21:42:37'!
test28APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions

	"un portfolio con varias cuentas registro todas sus transacciones"
	
	| deposit1 deposit2 withdraw1 withdraw2 account1 account2 portfolio1 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 :=  Deposit register: 100 on: account1.
	withdraw1 := Withdraw register: 50 on: account1.
	deposit2 :=  Deposit register: 30 on: account2.
	withdraw2 := Withdraw register: 20 on: account2.

	portfolio1 := Portfolio new.
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.

	self assert: (portfolio1 hasRegistered: deposit1).
	self assert: (portfolio1 hasRegistered:withdraw1).
	self assert: (portfolio1 hasRegistered: deposit2).
	self assert: (portfolio1 hasRegistered:withdraw2).
! !

!methodRemoval: PortfolioTest #test28APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/7/2020 21:42:37'!
test28APortfolioWithManyAccountsHasItsAccountsTransactions

	"un portfolio con varias cuentas registro todas sus transacciones"
	
	| deposit1 deposit2 withdraw1 withdraw2 account1 account2 portfolio1 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 :=  Deposit register: 100 on: account1.
	withdraw1 := Withdraw register: 50 on: account1.
	deposit2 :=  Deposit register: 30 on: account2.
	withdraw2 := Withdraw register: 20 on: account2.

	portfolio1 := Portfolio new.
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.

	self assert: (portfolio1 hasRegistered: deposit1).
	self assert: (portfolio1 hasRegistered:withdraw1).
	self assert: (portfolio1 hasRegistered: deposit2).
	self assert: (portfolio1 hasRegistered:withdraw2).
!
!PortfolioTest methodsFor: 'has registered' stamp: 'LH 11/7/2020 21:42:45'!
test29APortfolioHasItsPortfoliosAndAccountsREgisteredTransactions

	"un portfolio con varias cuentas en sus portfolios registro todas sus transacciones"
	
	| deposit1 deposit2 withdraw1 withdraw2 account1 account2 portfolio1 portfolio2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 :=  Deposit register: 100 on: account1.
	withdraw1 := Withdraw register: 50 on: account1.
	deposit2 :=  Deposit register: 30 on: account2.
	withdraw2 := Withdraw register: 20 on: account2.

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	
	portfolio2 addPortfolio: portfolio1.

	self assert: (portfolio2 hasRegistered: deposit1).
	self assert: (portfolio2 hasRegistered:withdraw1).
	self assert: (portfolio2 hasRegistered: deposit2).
	self assert: (portfolio2 hasRegistered:withdraw2).
! !

!methodRemoval: PortfolioTest #test29APortfolioHasItsPortfoliosAndAccountsTransactions stamp: 'LH 11/7/2020 21:42:45'!
test29APortfolioHasItsPortfoliosAndAccountsTransactions

	"un portfolio con varias cuentas en sus portfolios registro todas sus transacciones"
	
	| deposit1 deposit2 withdraw1 withdraw2 account1 account2 portfolio1 portfolio2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 :=  Deposit register: 100 on: account1.
	withdraw1 := Withdraw register: 50 on: account1.
	deposit2 :=  Deposit register: 30 on: account2.
	withdraw2 := Withdraw register: 20 on: account2.

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	
	portfolio2 addPortfolio: portfolio1.

	self assert: (portfolio2 hasRegistered: deposit1).
	self assert: (portfolio2 hasRegistered:withdraw1).
	self assert: (portfolio2 hasRegistered: deposit2).
	self assert: (portfolio2 hasRegistered:withdraw2).
!
!PortfolioTest methodsFor: 'has registered' stamp: 'LH 11/7/2020 21:42:51'!
test29APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions

	"un portfolio con varias cuentas en sus portfolios registro todas sus transacciones"
	
	| deposit1 deposit2 withdraw1 withdraw2 account1 account2 portfolio1 portfolio2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 :=  Deposit register: 100 on: account1.
	withdraw1 := Withdraw register: 50 on: account1.
	deposit2 :=  Deposit register: 30 on: account2.
	withdraw2 := Withdraw register: 20 on: account2.

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	
	portfolio2 addPortfolio: portfolio1.

	self assert: (portfolio2 hasRegistered: deposit1).
	self assert: (portfolio2 hasRegistered:withdraw1).
	self assert: (portfolio2 hasRegistered: deposit2).
	self assert: (portfolio2 hasRegistered:withdraw2).
! !

!methodRemoval: PortfolioTest #test29APortfolioHasItsPortfoliosAndAccountsREgisteredTransactions stamp: 'LH 11/7/2020 21:42:52'!
test29APortfolioHasItsPortfoliosAndAccountsREgisteredTransactions

	"un portfolio con varias cuentas en sus portfolios registro todas sus transacciones"
	
	| deposit1 deposit2 withdraw1 withdraw2 account1 account2 portfolio1 portfolio2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 :=  Deposit register: 100 on: account1.
	withdraw1 := Withdraw register: 50 on: account1.
	deposit2 :=  Deposit register: 30 on: account2.
	withdraw2 := Withdraw register: 20 on: account2.

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	
	portfolio2 addPortfolio: portfolio1.

	self assert: (portfolio2 hasRegistered: deposit1).
	self assert: (portfolio2 hasRegistered:withdraw1).
	self assert: (portfolio2 hasRegistered: deposit2).
	self assert: (portfolio2 hasRegistered:withdraw2).
!

!testRun: #PortfolioTest #test34CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/7/2020 21:43:08'!
PASSED!

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 21:43:08'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/7/2020 21:43:08'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/7/2020 21:43:08'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 21:43:08'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/7/2020 21:43:08'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 21:43:08'!
PASSED!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 21:43:08'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 21:43:08'!
PASSED!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/7/2020 21:43:08'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/7/2020 21:43:08'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/7/2020 21:43:09'!
PASSED!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/7/2020 21:43:09'!
PASSED!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/7/2020 21:43:09'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/7/2020 21:43:09'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/7/2020 21:43:09'!
PASSED!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/7/2020 21:43:09'!
PASSED!

!testRun: #PortfolioTest #test17CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/7/2020 21:43:09'!
PASSED!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/7/2020 21:43:09'!
PASSED!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/7/2020 21:43:09'!
PASSED!

!testRun: #PortfolioTest #test20APortfolioKnowsItsDirectAccounts stamp: 'LH 11/7/2020 21:43:09'!
PASSED!

!testRun: #PortfolioTest #test21APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/7/2020 21:43:09'!
PASSED!

!testRun: #PortfolioTest #test22AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/7/2020 21:43:09'!
PASSED!

!testRun: #PortfolioTest #test23APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/7/2020 21:43:09'!
PASSED!

!testRun: #PortfolioTest #test24TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/7/2020 21:43:09'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/7/2020 21:43:09'!
PASSED!

!testRun: #PortfolioTest #test26AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/7/2020 21:43:09'!
PASSED!

!testRun: #PortfolioTest #test27APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/7/2020 21:43:09'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/7/2020 21:43:09'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/7/2020 21:43:09'!
PASSED!

!testRun: #PortfolioTest #test30AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/7/2020 21:43:09'!
PASSED!

!testRun: #PortfolioTest #test31APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/7/2020 21:43:09'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/7/2020 21:43:09'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/7/2020 21:43:09'!
PASSED!

!testRun: #PortfolioTest #test34CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/7/2020 21:43:09'!
PASSED!

----SNAPSHOT----(7 November 2020 21:43:29) CuisUniversity-4384.image priorSource: 17426235!
!Portfolio methodsFor: 'accessing' stamp: 'LH 11/7/2020 21:47:44' prior: 50874626!
accounts
	"Returns all the accounts of the Portfolio and it's portfolios"
	
	| allAccounts |
	allAccounts := accounts copy.
	portfolios do: [ :portfolio | allAccounts addAll: portfolio accounts ].
	^allAccounts.
! !
!Portfolio methodsFor: 'method tools' stamp: 'LH 11/7/2020 21:48:56' prior: 50874634!
accountsAndPortfoliosDo: anAction
	"A method for doing anAction to a Portfolio's accounts and portfolios"

	accounts do: [ :account | anAction value: account.].
	portfolios do: [ :portfolio | anAction value: portfolio.].
! !
!Portfolio methodsFor: 'portfolios' stamp: 'LH 11/7/2020 21:50:16' prior: 50874553!
addAsFather: aPortfolio 
	"Set aPortfolio as a father"

	fatherPortfolios add: aPortfolio.! !
!Portfolio methodsFor: 'portfolios' stamp: 'LH 11/7/2020 21:51:04' prior: 50874558!
addPortfolio: aPortfolio
	"Add a Portfolio to the Portfolio"

	self validatePortfolioBeforeAdding: aPortfolio.

	portfolios add: aPortfolio.
	aPortfolio addAsFather: self. 
! !
!Portfolio methodsFor: 'portfolios' stamp: 'LH 11/7/2020 21:51:16' prior: 50877000!
addPortfolio: aPortfolio
	"Add aPortfolio to the Portfolio"

	self validatePortfolioBeforeAdding: aPortfolio.

	portfolios add: aPortfolio.
	aPortfolio addAsFather: self. 
! !
!Portfolio methodsFor: 'accounts' stamp: 'LH 11/7/2020 21:51:53' prior: 50874578!
addAccount: anAccount
	"add anAccount to the Portfolio"

	self validateAccountBeforeAdding: anAccount.
	
	accounts add: anAccount.! !
!Portfolio methodsFor: 'validations' stamp: 'LH 11/7/2020 21:53:05' prior: 50874591!
validateAccountBeforeAdding: anAccount
	"validate that anAccount is not alredy in the portfolio or it's parents"

	self validateAccountNotAlredyAdded: anAccount.
	fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountBeforeAdding: anAccount].! !
!Portfolio methodsFor: 'validations' stamp: 'LH 11/7/2020 21:53:33' prior: 50874599!
validateAccountNotAlredyAdded: anAccount
	"if anAccount is in the portfolio, return an error"

	(self includesAccount: anAccount) ifTrue: [^self error: Portfolio errorMessageAccountAlreadyAdded].
! !
!Portfolio methodsFor: 'validations' stamp: 'LH 11/7/2020 21:54:48' prior: 50874606!
validateNotAlreadyAddedPortfolio: aPortfolio
	"validate that aPortfolio is not in the portfolio nor it's parents"

	(self includesPortfolio: aPortfolio) ifTrue: [self error: Portfolio errorMessagePortfolioAlreadyAdded].
	(self includesFatherPortfolio: aPortfolio) ifTrue: [self error: Portfolio errorMessagePortfolioAlreadyAdded].
! !
!Portfolio methodsFor: 'validations' stamp: 'LH 11/7/2020 21:56:30' prior: 50874919!
validatePortfolioBeforeAdding: aPortfolio
	"validate that aPortfolio is not in the portfolio nor it's predecesors; and that the portfolio's accounts arent in the portfolio not it's predecesors"

	self validateNotAlreadyAddedPortfolio: aPortfolio.
	
	aPortfolio accounts do:[:anAccount | self validateAccountBeforeAdding: anAccount].
	
	fatherPortfolios do: [ :fatherPortfolio | (fatherPortfolio validatePortfolioBeforeAdding: aPortfolio)].
! !
!Portfolio methodsFor: 'validations' stamp: 'LH 11/7/2020 21:56:37' prior: 50877045!
validateNotAlreadyAddedPortfolio: aPortfolio
	"validate that aPortfolio is not in the portfolio nor it's predecesors"

	(self includesPortfolio: aPortfolio) ifTrue: [self error: Portfolio errorMessagePortfolioAlreadyAdded].
	(self includesFatherPortfolio: aPortfolio) ifTrue: [self error: Portfolio errorMessagePortfolioAlreadyAdded].
! !
!Portfolio methodsFor: 'validations' stamp: 'LH 11/7/2020 21:57:47' prior: 50877076!
validateNotAlreadyAddedPortfolio: aPortfolio
	"If aPortfolio is in the portfolio or it's predecesor, return an error"

	(self includesPortfolio: aPortfolio) ifTrue: [self error: Portfolio errorMessagePortfolioAlreadyAdded].
	(self includesFatherPortfolio: aPortfolio) ifTrue: [self error: Portfolio errorMessagePortfolioAlreadyAdded].
! !
!Portfolio methodsFor: 'validations' stamp: 'LH 11/7/2020 21:57:58' prior: 50877025!
validateAccountBeforeAdding: anAccount
	"validate that anAccount is not alredy in the portfolio or it's predecessors"

	self validateAccountNotAlredyAdded: anAccount.
	fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountBeforeAdding: anAccount].! !
!Portfolio methodsFor: 'accessing' stamp: 'LH 11/7/2020 21:58:52' prior: 50874642 overrides: 50874518!
balance
	"return the balance of the portfolio's accounts's + portfolios's "
	
	| balance |
	balance := 0.
	self accountsAndPortfoliosDo: [ :aThing | balance := balance + aThing balance].
	^balance.
! !
!Portfolio methodsFor: 'accessing' stamp: 'LH 11/7/2020 21:59:29' prior: 50874658 overrides: 50874527!
transactions
	"return the transactions of the portfolio's accounts and portfolios"

	| transactions |
	transactions := OrderedCollection new.
	self accountsAndPortfoliosDo: [ :account | transactions addAll: account transactions].
	^transactions.
! !
!Portfolio methodsFor: 'testing' stamp: 'LH 11/7/2020 22:00:13' prior: 50874650 overrides: 50874522!
hasRegistered: aDeposit
	"return if the portfolio has aDeposit as a transaction"
	
	self accountsAndPortfoliosDo: [ :aThing | (aThing hasRegistered: aDeposit) ifTrue: [^true]].
	^false.
! !
!Portfolio methodsFor: 'testing' stamp: 'LH 11/7/2020 22:01:33' prior: 50874584!
includesAccount: anAccount 
	"return if the portfolio has anAccount or not"

	portfolios do: [ :portfolio | (portfolio includesAccount: anAccount) ifTrue: [^true]].
	^accounts includes: anAccount.! !
!Portfolio methodsFor: 'testing' stamp: 'LH 11/7/2020 22:02:14' prior: 50874565!
includesFatherPortfolio: aPortfolio
	"return if the portfolio has aPortfolio as a father"
	^fatherPortfolios includes: aPortfolio.
! !
!Portfolio methodsFor: 'testing' stamp: 'LH 11/7/2020 22:02:57' prior: 50874570!
includesPortfolio: aPortfolio 
	"return if the portfolio has aPortfolio or not"

	portfolios do: [ :portfolio | (portfolio includesPortfolio: aPortfolio) ifTrue: [^true]].
	
	^portfolios includes: aPortfolio.
! !
!Portfolio methodsFor: 'testing' stamp: 'LH 11/7/2020 22:03:06' prior: 50877156!
includesFatherPortfolio: aPortfolio
	"return if the portfolio has aPortfolio as a father"
	
	^fatherPortfolios includes: aPortfolio.
! !
!Portfolio methodsFor: 'testing' stamp: 'LH 11/7/2020 22:07:22' prior: 50877138 overrides: 50874522!
hasRegistered: aTransaction
	"return if the portfolio has aTransaction as a transaction"
	
	"self accountsAndPortfoliosDo: [ :aThing | (aThing hasRegistered: aDeposit) ifTrue: [^true]]
	^false.."
	
	^self transactions includes: aTransaction.
	
! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 22:07:22'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/7/2020 22:07:23'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/7/2020 22:07:23'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 22:07:23'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/7/2020 22:07:23'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 22:07:23'!
PASSED!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 22:07:23'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 22:07:23'!
PASSED!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/7/2020 22:07:23'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/7/2020 22:07:23'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/7/2020 22:07:23'!
PASSED!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/7/2020 22:07:23'!
PASSED!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/7/2020 22:07:23'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/7/2020 22:07:23'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/7/2020 22:07:23'!
PASSED!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/7/2020 22:07:23'!
PASSED!

!testRun: #PortfolioTest #test17CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/7/2020 22:07:23'!
PASSED!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/7/2020 22:07:23'!
PASSED!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/7/2020 22:07:23'!
PASSED!

!testRun: #PortfolioTest #test20APortfolioKnowsItsDirectAccounts stamp: 'LH 11/7/2020 22:07:23'!
PASSED!

!testRun: #PortfolioTest #test21APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/7/2020 22:07:23'!
PASSED!

!testRun: #PortfolioTest #test22AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/7/2020 22:07:23'!
PASSED!

!testRun: #PortfolioTest #test23APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/7/2020 22:07:24'!
PASSED!

!testRun: #PortfolioTest #test24TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/7/2020 22:07:24'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/7/2020 22:07:24'!
PASSED!

!testRun: #PortfolioTest #test26AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/7/2020 22:07:24'!
PASSED!

!testRun: #PortfolioTest #test27APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/7/2020 22:07:24'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/7/2020 22:07:24'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/7/2020 22:07:24'!
PASSED!

!testRun: #PortfolioTest #test30AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/7/2020 22:07:24'!
PASSED!

!testRun: #PortfolioTest #test31APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/7/2020 22:07:24'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/7/2020 22:07:24'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/7/2020 22:07:24'!
PASSED!

!testRun: #PortfolioTest #test34CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/7/2020 22:07:24'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'LH 11/7/2020 22:07:54' prior: 50877147!
includesAccount: anAccount 
	"return if the portfolio has anAccount or not"

	^ self accounts includes: anAccount.

	"portfolios do: [ :portfolio | (portfolio includesAccount: anAccount) ifTrue: [^true]].
	^accounts includes: anAccount."! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 22:07:59'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/7/2020 22:07:59'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/7/2020 22:07:59'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 22:07:59'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/7/2020 22:07:59'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 22:07:59'!
PASSED!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 22:07:59'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 22:07:59'!
PASSED!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/7/2020 22:07:59'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/7/2020 22:07:59'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/7/2020 22:07:59'!
PASSED!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/7/2020 22:07:59'!
PASSED!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/7/2020 22:07:59'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/7/2020 22:07:59'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/7/2020 22:07:59'!
PASSED!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/7/2020 22:07:59'!
PASSED!

!testRun: #PortfolioTest #test17CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/7/2020 22:07:59'!
PASSED!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/7/2020 22:07:59'!
PASSED!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/7/2020 22:07:59'!
PASSED!

!testRun: #PortfolioTest #test20APortfolioKnowsItsDirectAccounts stamp: 'LH 11/7/2020 22:07:59'!
PASSED!

!testRun: #PortfolioTest #test21APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/7/2020 22:07:59'!
PASSED!

!testRun: #PortfolioTest #test22AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/7/2020 22:08:00'!
PASSED!

!testRun: #PortfolioTest #test23APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/7/2020 22:08:00'!
PASSED!

!testRun: #PortfolioTest #test24TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/7/2020 22:08:00'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/7/2020 22:08:00'!
PASSED!

!testRun: #PortfolioTest #test26AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/7/2020 22:08:00'!
PASSED!

!testRun: #PortfolioTest #test27APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/7/2020 22:08:00'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/7/2020 22:08:00'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/7/2020 22:08:00'!
PASSED!

!testRun: #PortfolioTest #test30AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/7/2020 22:08:00'!
PASSED!

!testRun: #PortfolioTest #test31APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/7/2020 22:08:00'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/7/2020 22:08:00'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/7/2020 22:08:00'!
PASSED!

!testRun: #PortfolioTest #test34CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/7/2020 22:08:00'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'LH 11/7/2020 22:08:43' prior: 50877163!
includesPortfolio: aPortfolio 
	"return if the portfolio has aPortfolio or not"

	portfolios do: [ :portfolio | (portfolio includesPortfolio: aPortfolio) ifTrue: [^true]].
	
	^portfolios includes: aPortfolio.
! !
!PortfolioTest methodsFor: 'errors adding portfolios by childern' stamp: 'LH 11/7/2020 22:11:58'!
test14APortffolioCantHaveItself! !
!PortfolioTest methodsFor: 'errors adding portfolios by childern' stamp: 'LH 11/7/2020 22:13:32' prior: 50877466!
test14APortffolioCantHaveItself
	"un portfolio no se puede tener a si mismo"
	
	| portfolio1 |
	
	portfolio1 := Portfolio new.
	
	self should: [portfolio1 addPortfolio: portfolio1] raise: Error withMessageText: Portfolio errorMessagePortfolioAlreadyAdded.
! !

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/7/2020 22:14:25'!
FAILURE!
!Portfolio methodsFor: 'validations' stamp: 'LH 11/7/2020 22:15:26' prior: 50877090!
validateNotAlreadyAddedPortfolio: aPortfolio
	"If aPortfolio is in the portfolio or it's predecesor, return an error"

	(self includesPortfolio: aPortfolio) ifTrue: [self error: Portfolio errorMessagePortfolioAlreadyAdded].
	(self = aPortfolio) ifTrue:[self error: Portfolio errorMessagePortfolioAlreadyAdded].

	(self includesFatherPortfolio: aPortfolio) ifTrue: [self error: Portfolio errorMessagePortfolioAlreadyAdded].
! !

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/7/2020 22:15:27'!
PASSED!

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 22:15:27'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/7/2020 22:15:27'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/7/2020 22:15:28'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 22:15:28'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/7/2020 22:15:28'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 22:15:28'!
PASSED!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 22:15:28'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 22:15:28'!
PASSED!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/7/2020 22:15:28'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/7/2020 22:15:28'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/7/2020 22:15:28'!
PASSED!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/7/2020 22:15:28'!
PASSED!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/7/2020 22:15:28'!
PASSED!

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/7/2020 22:15:28'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/7/2020 22:15:28'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/7/2020 22:15:28'!
PASSED!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/7/2020 22:15:28'!
PASSED!

!testRun: #PortfolioTest #test17CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/7/2020 22:15:28'!
PASSED!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/7/2020 22:15:28'!
PASSED!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/7/2020 22:15:28'!
PASSED!

!testRun: #PortfolioTest #test20APortfolioKnowsItsDirectAccounts stamp: 'LH 11/7/2020 22:15:28'!
PASSED!

!testRun: #PortfolioTest #test21APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/7/2020 22:15:28'!
PASSED!

!testRun: #PortfolioTest #test22AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/7/2020 22:15:28'!
PASSED!

!testRun: #PortfolioTest #test23APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/7/2020 22:15:28'!
PASSED!

!testRun: #PortfolioTest #test24TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/7/2020 22:15:28'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/7/2020 22:15:28'!
PASSED!

!testRun: #PortfolioTest #test26AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/7/2020 22:15:28'!
PASSED!

!testRun: #PortfolioTest #test27APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/7/2020 22:15:28'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/7/2020 22:15:29'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/7/2020 22:15:29'!
PASSED!

!testRun: #PortfolioTest #test30AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/7/2020 22:15:29'!
PASSED!

!testRun: #PortfolioTest #test31APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/7/2020 22:15:29'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/7/2020 22:15:29'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/7/2020 22:15:29'!
PASSED!

!testRun: #PortfolioTest #test34CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/7/2020 22:15:29'!
PASSED!
!PortfolioTest methodsFor: 'errors adding accounts by parents' stamp: 'LH 11/7/2020 22:15:38'!
test15CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount
	
	"no se pueden agregar una cueanta a un portfolio (hijo) de un portfolio (padre), cuando la cuenta ya estaba en el portfolio (padre)"
	
	| portfolio1 portfolio2 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio1 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.

	self should: [	portfolio2 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
! !

!methodRemoval: PortfolioTest #test14CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/7/2020 22:15:38'!
test14CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount
	
	"no se pueden agregar una cueanta a un portfolio (hijo) de un portfolio (padre), cuando la cuenta ya estaba en el portfolio (padre)"
	
	| portfolio1 portfolio2 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio1 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.

	self should: [	portfolio2 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
!
!PortfolioTest methodsFor: 'errors adding accounts by parents' stamp: 'LH 11/7/2020 22:16:09'!
test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount
	
	"no se pueden agregar una cueanta a un portfolio (hijo) de un portfolio (padre), cuando la cuenta ya estaba en el portfolio (padre)"
	
	| portfolio1 portfolio2 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio1 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.

	self should: [	portfolio2 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
! !

!methodRemoval: PortfolioTest #test15CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/7/2020 22:16:09'!
test15CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount
	
	"no se pueden agregar una cueanta a un portfolio (hijo) de un portfolio (padre), cuando la cuenta ya estaba en el portfolio (padre)"
	
	| portfolio1 portfolio2 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio1 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.

	self should: [	portfolio2 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
!
!PortfolioTest methodsFor: 'errors adding accounts by parents' stamp: 'LH 11/7/2020 22:16:14'!
test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount
	
	"no se pueden agregar una cueanta a un hijo si esa cuenta est� en el padre de su padre"
	
	| portfolio1 portfolio2 portfolio3 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio1 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self should: [	portfolio3 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
! !

!methodRemoval: PortfolioTest #test16CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/7/2020 22:16:14'!
test16CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount
	
	"no se pueden agregar una cueanta a un hijo si esa cuenta est� en el padre de su padre"
	
	| portfolio1 portfolio2 portfolio3 account1 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio1 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self should: [	portfolio3 addAccount: account1.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
!
!PortfolioTest methodsFor: 'errors adding portfolios by parents' stamp: 'LH 11/7/2020 22:16:21'!
test18CantAddAPortfolioWhenItIsAParent
	
	"
		no se pueden agregar un portfolio cuando el padre ya tiene ese portfolio
		p1 ->  p2 -> p1
	"
	
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.

	portfolio1 addPortfolio: portfolio2.

	self should: [	portfolio2 addPortfolio: portfolio1.] raise: Error withMessageText: Portfolio errorMessagePortfolioAlreadyAdded.
! !

!methodRemoval: PortfolioTest #test17CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/7/2020 22:16:21'!
test17CantAddAPortfolioWhenItIsAParent
	
	"
		no se pueden agregar un portfolio cuando el padre ya tiene ese portfolio
		p1 ->  p2 -> p1
	"
	
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.

	portfolio1 addPortfolio: portfolio2.

	self should: [	portfolio2 addPortfolio: portfolio1.] raise: Error withMessageText: Portfolio errorMessagePortfolioAlreadyAdded.
!
!PortfolioTest methodsFor: 'errors adding portfolios by parents' stamp: 'LH 11/7/2020 22:16:32'!
test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver
	
	"
		no se pueden agregar un portfolio cuando tiene cuentas repetidas en los padres del receptor 
		p1 ->	p2 -> p4 -x p5 -> a3,a2,a1|
		     -> a1| -> a2|
			 p3 -> p3|
			      -> a3|
	"
	
	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account1 account2 account3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	portfolio5 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.	
	
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio4.
	portfolio3 addPortfolio: portfolio4.
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio5 addAccount: account1.
	portfolio5 addAccount: account2.
	portfolio5 addAccount: account3.

	self should: [	portfolio4 addPortfolio: portfolio5.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
! !

!methodRemoval: PortfolioTest #test34CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/7/2020 22:16:32'!
test34CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver
	
	"
		no se pueden agregar un portfolio cuando tiene cuentas repetidas en los padres del receptor 
		p1 ->	p2 -> p4 -x p5 -> a3,a2,a1|
		     -> a1| -> a2|
			 p3 -> p3|
			      -> a3|
	"
	
	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account1 account2 account3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	portfolio5 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.	
	
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio4.
	portfolio3 addPortfolio: portfolio4.
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio5 addAccount: account1.
	portfolio5 addAccount: account2.
	portfolio5 addAccount: account3.

	self should: [	portfolio4 addPortfolio: portfolio5.] raise: Error withMessageText: Portfolio errorMessageAccountAlreadyAdded.
!
!PortfolioTest methodsFor: 'transactions' stamp: 'LH 11/7/2020 22:16:38'!
test34APortfolioHasItsPortfoliosAndAccountsTransaction

	"un portfolio con varias cuentas en sus portfolios retorna todas sus transacciones"
	
	| deposit1 deposit2 withdraw1 withdraw2 account1 account2 portfolio1 portfolio2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 :=  Deposit register: 100 on: account1.
	withdraw1 := Withdraw register: 50 on: account1.
	deposit2 :=  Deposit register: 30 on: account2.
	withdraw2 := Withdraw register: 20 on: account2.

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	
	portfolio2 addPortfolio: portfolio1.

	self assert: (portfolio2 transactions includesAllOf: (OrderedCollection with: deposit1 with: withdraw1 with: deposit2 with: withdraw2)).

! !

!methodRemoval: PortfolioTest #test33APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/7/2020 22:16:38'!
test33APortfolioHasItsPortfoliosAndAccountsTransaction

	"un portfolio con varias cuentas en sus portfolios retorna todas sus transacciones"
	
	| deposit1 deposit2 withdraw1 withdraw2 account1 account2 portfolio1 portfolio2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 :=  Deposit register: 100 on: account1.
	withdraw1 := Withdraw register: 50 on: account1.
	deposit2 :=  Deposit register: 30 on: account2.
	withdraw2 := Withdraw register: 20 on: account2.

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	
	portfolio2 addPortfolio: portfolio1.

	self assert: (portfolio2 transactions includesAllOf: (OrderedCollection with: deposit1 with: withdraw1 with: deposit2 with: withdraw2)).

!
!PortfolioTest methodsFor: 'transactions' stamp: 'LH 11/7/2020 22:16:55'!
test33APortfolioWithManyAccountsHasItsAccountsTransactions

	"un portfolio con varias cuentas retorna todas sus transacciones"
	
	| deposit1 deposit2 withdraw1 withdraw2 account1 account2 portfolio1 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 :=  Deposit register: 100 on: account1.
	withdraw1 := Withdraw register: 50 on: account1.
	deposit2 :=  Deposit register: 30 on: account2.
	withdraw2 := Withdraw register: 20 on: account2.

	portfolio1 := Portfolio new.
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.

	self assert: (portfolio1 transactions includesAllOf: (OrderedCollection with: deposit1 with: withdraw1 with: deposit2 with: withdraw2)).

! !

!methodRemoval: PortfolioTest #test32APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/7/2020 22:16:55'!
test32APortfolioWithManyAccountsHasItsAccountsTransactions

	"un portfolio con varias cuentas retorna todas sus transacciones"
	
	| deposit1 deposit2 withdraw1 withdraw2 account1 account2 portfolio1 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 :=  Deposit register: 100 on: account1.
	withdraw1 := Withdraw register: 50 on: account1.
	deposit2 :=  Deposit register: 30 on: account2.
	withdraw2 := Withdraw register: 20 on: account2.

	portfolio1 := Portfolio new.
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.

	self assert: (portfolio1 transactions includesAllOf: (OrderedCollection with: deposit1 with: withdraw1 with: deposit2 with: withdraw2)).

!
!PortfolioTest methodsFor: 'transactions' stamp: 'LH 11/7/2020 22:17:01'!
test32APortfolioWithOneAccountHasItsTransactions

	"un portfolio con una cuenta retorna sus transacciones"
	
	| deposit withdraw account1 portfolio1 |
	
	account1 := ReceptiveAccount new.
	deposit :=  Deposit register: 100 on: account1.
	withdraw := Withdraw register: 50 on: account1.
	
	portfolio1 := Portfolio new.
	portfolio1 addAccount: account1.

	self assert: (portfolio1 transactions includesAllOf: (OrderedCollection with: deposit with: withdraw)).

! !

!methodRemoval: PortfolioTest #test31APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/7/2020 22:17:01'!
test31APortfolioWithOneAccountHasItsTransactions

	"un portfolio con una cuenta retorna sus transacciones"
	
	| deposit withdraw account1 portfolio1 |
	
	account1 := ReceptiveAccount new.
	deposit :=  Deposit register: 100 on: account1.
	withdraw := Withdraw register: 50 on: account1.
	
	portfolio1 := Portfolio new.
	portfolio1 addAccount: account1.

	self assert: (portfolio1 transactions includesAllOf: (OrderedCollection with: deposit with: withdraw)).

!
!PortfolioTest methodsFor: 'transactions' stamp: 'LH 11/7/2020 22:17:11'!
test31AnEmptyPortfolioHasNoTransactions

	"un portfolio vacio no tiene transacciones"
	
	| portfolio1 |
	
	portfolio1 := Portfolio new.
		
	self assert: (portfolio1 transactions size) equals: 0.

! !

!methodRemoval: PortfolioTest #test30AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/7/2020 22:17:12'!
test30AnEmptyPortfolioHasNoTransactions

	"un portfolio vacio no tiene transacciones"
	
	| portfolio1 |
	
	portfolio1 := Portfolio new.
		
	self assert: (portfolio1 transactions size) equals: 0.

!
!PortfolioTest methodsFor: 'has registered' stamp: 'LH 11/7/2020 22:17:22'!
test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions

	"un portfolio con varias cuentas en sus portfolios registro todas sus transacciones"
	
	| deposit1 deposit2 withdraw1 withdraw2 account1 account2 portfolio1 portfolio2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 :=  Deposit register: 100 on: account1.
	withdraw1 := Withdraw register: 50 on: account1.
	deposit2 :=  Deposit register: 30 on: account2.
	withdraw2 := Withdraw register: 20 on: account2.

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	
	portfolio2 addPortfolio: portfolio1.

	self assert: (portfolio2 hasRegistered: deposit1).
	self assert: (portfolio2 hasRegistered:withdraw1).
	self assert: (portfolio2 hasRegistered: deposit2).
	self assert: (portfolio2 hasRegistered:withdraw2).
! !

!methodRemoval: PortfolioTest #test29APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/7/2020 22:17:22'!
test29APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions

	"un portfolio con varias cuentas en sus portfolios registro todas sus transacciones"
	
	| deposit1 deposit2 withdraw1 withdraw2 account1 account2 portfolio1 portfolio2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 :=  Deposit register: 100 on: account1.
	withdraw1 := Withdraw register: 50 on: account1.
	deposit2 :=  Deposit register: 30 on: account2.
	withdraw2 := Withdraw register: 20 on: account2.

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	
	portfolio2 addPortfolio: portfolio1.

	self assert: (portfolio2 hasRegistered: deposit1).
	self assert: (portfolio2 hasRegistered:withdraw1).
	self assert: (portfolio2 hasRegistered: deposit2).
	self assert: (portfolio2 hasRegistered:withdraw2).
!
!PortfolioTest methodsFor: 'has registered' stamp: 'LH 11/7/2020 22:17:29'!
test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions

	"un portfolio con varias cuentas registro todas sus transacciones"
	
	| deposit1 deposit2 withdraw1 withdraw2 account1 account2 portfolio1 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 :=  Deposit register: 100 on: account1.
	withdraw1 := Withdraw register: 50 on: account1.
	deposit2 :=  Deposit register: 30 on: account2.
	withdraw2 := Withdraw register: 20 on: account2.

	portfolio1 := Portfolio new.
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.

	self assert: (portfolio1 hasRegistered: deposit1).
	self assert: (portfolio1 hasRegistered:withdraw1).
	self assert: (portfolio1 hasRegistered: deposit2).
	self assert: (portfolio1 hasRegistered:withdraw2).
! !

!methodRemoval: PortfolioTest #test28APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/7/2020 22:17:29'!
test28APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions

	"un portfolio con varias cuentas registro todas sus transacciones"
	
	| deposit1 deposit2 withdraw1 withdraw2 account1 account2 portfolio1 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 :=  Deposit register: 100 on: account1.
	withdraw1 := Withdraw register: 50 on: account1.
	deposit2 :=  Deposit register: 30 on: account2.
	withdraw2 := Withdraw register: 20 on: account2.

	portfolio1 := Portfolio new.
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.

	self assert: (portfolio1 hasRegistered: deposit1).
	self assert: (portfolio1 hasRegistered:withdraw1).
	self assert: (portfolio1 hasRegistered: deposit2).
	self assert: (portfolio1 hasRegistered:withdraw2).
!
!PortfolioTest methodsFor: 'has registered' stamp: 'LH 11/7/2020 22:17:37'!
test28APortfolioWithOneAccountHasItsRegisteredTransactions

	"un portfolio con una cuenta registro sus transacciones"
	
	| deposit withdraw account1 portfolio1 |
	
	account1 := ReceptiveAccount new.
	deposit :=  Deposit register: 100 on: account1.
	withdraw := Withdraw register: 50 on: account1.
	
	portfolio1 := Portfolio new.
	portfolio1 addAccount: account1.

	self assert: (portfolio1 hasRegistered: deposit).
	self assert: (portfolio1 hasRegistered:withdraw).
! !

!methodRemoval: PortfolioTest #test27APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/7/2020 22:17:37'!
test27APortfolioWithOneAccountHasItsRegisteredTransactions

	"un portfolio con una cuenta registro sus transacciones"
	
	| deposit withdraw account1 portfolio1 |
	
	account1 := ReceptiveAccount new.
	deposit :=  Deposit register: 100 on: account1.
	withdraw := Withdraw register: 50 on: account1.
	
	portfolio1 := Portfolio new.
	portfolio1 addAccount: account1.

	self assert: (portfolio1 hasRegistered: deposit).
	self assert: (portfolio1 hasRegistered:withdraw).
!
!PortfolioTest methodsFor: 'has registered' stamp: 'LH 11/7/2020 22:17:47'!
test27AnEmptyPortfolioHasNoRegisteredTransactions

	"un portfolio vacio no registro ninguna transaccion"
	
	| deposit withdraw portfolio1 |
	
	portfolio1 := Portfolio new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (portfolio1 hasRegistered: deposit).
	self deny: (portfolio1 hasRegistered:withdraw).
! !

!methodRemoval: PortfolioTest #test26AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/7/2020 22:17:47'!
test26AnEmptyPortfolioHasNoRegisteredTransactions

	"un portfolio vacio no registro ninguna transaccion"
	
	| deposit withdraw portfolio1 |
	
	portfolio1 := Portfolio new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (portfolio1 hasRegistered: deposit).
	self deny: (portfolio1 hasRegistered:withdraw).
!
!PortfolioTest methodsFor: 'balance' stamp: 'LH 11/7/2020 22:17:55'!
test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios

	"un portfolio reponde por el balance de los hijos de sus portfolios"

	| portfolio1 portfolio2 account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account2.

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.

	portfolio1 addPortfolio: portfolio2.

	portfolio2 addAccount: account1.
	portfolio2 addAccount: account2.

	self assert: (portfolio1 balance) equals: 150.
! !

!methodRemoval: PortfolioTest #test25TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/7/2020 22:17:55'!
test25TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios

	"un portfolio reponde por el balance de los hijos de sus portfolios"

	| portfolio1 portfolio2 account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account2.

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.

	portfolio1 addPortfolio: portfolio2.

	portfolio2 addAccount: account1.
	portfolio2 addAccount: account2.

	self assert: (portfolio1 balance) equals: 150.
!
!PortfolioTest methodsFor: 'balance' stamp: 'LH 11/7/2020 22:18:02'!
test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts

	"un portfolio reponde por el balance de sus hijos"

	| portfolio1 account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account2.

	portfolio1 := Portfolio new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.

	self assert: (portfolio1 balance) equals: 150.
! !

!methodRemoval: PortfolioTest #test24TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/7/2020 22:18:02'!
test24TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts

	"un portfolio reponde por el balance de sus hijos"

	| portfolio1 account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account2.

	portfolio1 := Portfolio new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.

	self assert: (portfolio1 balance) equals: 150.
!
!PortfolioTest methodsFor: 'balance' stamp: 'LH 11/7/2020 22:18:06'!
test24APortfolioWithOneAccountHasTheBalanceOfThatAccount

	"un portfolio reponde por el balance de su unico hijo"

	| portfolio1 account1 |
	
	account1 := ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.

	portfolio1 := Portfolio new.

	portfolio1 addAccount: account1.

	self assert: (portfolio1 balance) equals: 50.
! !

!methodRemoval: PortfolioTest #test23APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/7/2020 22:18:07'!
test23APortfolioWithOneAccountHasTheBalanceOfThatAccount

	"un portfolio reponde por el balance de su unico hijo"

	| portfolio1 account1 |
	
	account1 := ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.

	portfolio1 := Portfolio new.

	portfolio1 addAccount: account1.

	self assert: (portfolio1 balance) equals: 50.
!
!PortfolioTest methodsFor: 'balance' stamp: 'LH 11/7/2020 22:18:10'!
test23AnEmptyPortfolioHasABalanceOf0

	"un portfolio vacio responde balance 0"

	| portfolio1 |

	portfolio1 := Portfolio new.

	self assert: (portfolio1 balance) equals: 0.
! !

!methodRemoval: PortfolioTest #test22AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/7/2020 22:18:11'!
test22AnEmptyPortfolioHasABalanceOf0

	"un portfolio vacio responde balance 0"

	| portfolio1 |

	portfolio1 := Portfolio new.

	self assert: (portfolio1 balance) equals: 0.
!
!PortfolioTest methodsFor: 'accounts' stamp: 'LH 11/7/2020 22:18:17'!
test22APortfolioKnowsTheAccountsOfHisPortfolios
	
	"un portfolio expone las cuentas de sus portfolios"
	
	| portfolio1 portfolio2 portfolio3 portfolio4 account1 account2 account3 account4 |

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.	
	account4 := ReceptiveAccount new.	

	portfolio2 addAccount: account1.
	portfolio2 addAccount: account2.	
	portfolio3 addAccount: account3.
	portfolio4 addAccount: account4.

	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.
	portfolio2 addPortfolio: portfolio4.

	self assert: (portfolio1 accounts includesAllOf: (OrderedCollection with: account1 with: account2 with: account3 with: account4)).

	
! !

!methodRemoval: PortfolioTest #test21APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/7/2020 22:18:17'!
test21APortfolioKnowsTheAccountsOfHisPortfolios
	
	"un portfolio expone las cuentas de sus portfolios"
	
	| portfolio1 portfolio2 portfolio3 portfolio4 account1 account2 account3 account4 |

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.	
	account4 := ReceptiveAccount new.	

	portfolio2 addAccount: account1.
	portfolio2 addAccount: account2.	
	portfolio3 addAccount: account3.
	portfolio4 addAccount: account4.

	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.
	portfolio2 addPortfolio: portfolio4.

	self assert: (portfolio1 accounts includesAllOf: (OrderedCollection with: account1 with: account2 with: account3 with: account4)).

	
!
!PortfolioTest methodsFor: 'accounts' stamp: 'LH 11/7/2020 22:18:22'!
test22APortfolioKnowsItsDirectAccounts
	
	"un portfolio expone sus cuentas"
	
	| portfolio1 account1 account2 |
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.	

	self assert: (portfolio1 accounts includesAllOf: (OrderedCollection with: account1 with: account2)).

	
! !

!methodRemoval: PortfolioTest #test20APortfolioKnowsItsDirectAccounts stamp: 'LH 11/7/2020 22:18:22'!
test20APortfolioKnowsItsDirectAccounts
	
	"un portfolio expone sus cuentas"
	
	| portfolio1 account1 account2 |
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.	

	self assert: (portfolio1 accounts includesAllOf: (OrderedCollection with: account1 with: account2)).

	
!
!PortfolioTest methodsFor: 'errors adding portfolios by parents' stamp: 'LH 11/7/2020 22:18:32'!
test20CantAddAPortfolioWhenAPredecesorAlredyHasIt
	
	"
		no se pueden agregar un portfolio cuando el padre del padre ya tiene ese portfolio
		p1 ->  p2
		p1 ->  p3 -> p2
	"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.

	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.

	self should: [	portfolio3 addPortfolio: portfolio2.] raise: Error withMessageText: Portfolio errorMessagePortfolioAlreadyAdded.
! !

!methodRemoval: PortfolioTest #test19CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/7/2020 22:18:32'!
test19CantAddAPortfolioWhenAPredecesorAlredyHasIt
	
	"
		no se pueden agregar un portfolio cuando el padre del padre ya tiene ese portfolio
		p1 ->  p2
		p1 ->  p3 -> p2
	"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.

	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.

	self should: [	portfolio3 addPortfolio: portfolio2.] raise: Error withMessageText: Portfolio errorMessagePortfolioAlreadyAdded.
!
!PortfolioTest methodsFor: 'errors adding portfolios by parents' stamp: 'LH 11/7/2020 22:18:37'!
test19CantAddAPortfolioWhenItIsAPredecesor
	
	"
		no se pueden agregar un portfolio cuando el padre del padre ya tiene ese portfolio
		p1 ->  p2 -> p3 -> p1
	"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.

	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self should: [	portfolio3 addPortfolio: portfolio1.] raise: Error withMessageText: Portfolio errorMessagePortfolioAlreadyAdded.
! !

!methodRemoval: PortfolioTest #test18CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/7/2020 22:18:37'!
test18CantAddAPortfolioWhenItIsAPredecesor
	
	"
		no se pueden agregar un portfolio cuando el padre del padre ya tiene ese portfolio
		p1 ->  p2 -> p3 -> p1
	"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.

	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self should: [	portfolio3 addPortfolio: portfolio1.] raise: Error withMessageText: Portfolio errorMessagePortfolioAlreadyAdded.
!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/7/2020 22:18:40'!
PASSED!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test20CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsItsDirectAccounts stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test23AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test24APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test27AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/7/2020 22:18:43'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/7/2020 22:18:44'!
PASSED!

!testRun: #PortfolioTest #test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/7/2020 22:18:44'!
PASSED!

!testRun: #PortfolioTest #test31AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/7/2020 22:18:44'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/7/2020 22:18:44'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/7/2020 22:18:44'!
PASSED!

!testRun: #PortfolioTest #test34APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/7/2020 22:18:44'!
PASSED!

!testRun: #PortfolioTest #test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/7/2020 22:18:44'!
PASSED!
!Portfolio methodsFor: 'validations' stamp: 'LH 11/7/2020 22:19:41' prior: 50877485!
validateNotAlreadyAddedPortfolio: aPortfolio
	"If aPortfolio is in the portfolio or it's predecesor, return an error"

	(self includesPortfolio: aPortfolio) ifTrue: [self error: Portfolio errorMessagePortfolioAlreadyAdded].
	(self = aPortfolio) ifTrue:[self error: Portfolio errorMessagePortfolioAlreadyAdded].

	"(self includesFatherPortfolio: aPortfolio) ifTrue: [self error: Portfolio errorMessagePortfolioAlreadyAdded]."
! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 22:19:42'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/7/2020 22:19:42'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/7/2020 22:19:42'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 22:19:42'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/7/2020 22:19:42'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 22:19:42'!
PASSED!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 22:19:42'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/7/2020 22:19:42'!
PASSED!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/7/2020 22:19:42'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/7/2020 22:19:42'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/7/2020 22:19:42'!
PASSED!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/7/2020 22:19:43'!
PASSED!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/7/2020 22:19:43'!
PASSED!

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/7/2020 22:19:43'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/7/2020 22:19:43'!
PASSED!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/7/2020 22:19:43'!
PASSED!

!testRun: #PortfolioTest #test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/7/2020 22:19:43'!
PASSED!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/7/2020 22:19:43'!
PASSED!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/7/2020 22:19:43'!
PASSED!

!testRun: #PortfolioTest #test20CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/7/2020 22:19:43'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsItsDirectAccounts stamp: 'LH 11/7/2020 22:19:43'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/7/2020 22:19:43'!
PASSED!

!testRun: #PortfolioTest #test23AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/7/2020 22:19:43'!
PASSED!

!testRun: #PortfolioTest #test24APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/7/2020 22:19:43'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/7/2020 22:19:43'!
PASSED!

!testRun: #PortfolioTest #test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/7/2020 22:19:43'!
PASSED!

!testRun: #PortfolioTest #test27AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/7/2020 22:19:43'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/7/2020 22:19:43'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/7/2020 22:19:43'!
PASSED!

!testRun: #PortfolioTest #test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/7/2020 22:19:43'!
PASSED!

!testRun: #PortfolioTest #test31AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/7/2020 22:19:43'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/7/2020 22:19:43'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/7/2020 22:19:43'!
PASSED!

!testRun: #PortfolioTest #test34APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/7/2020 22:19:43'!
PASSED!

!testRun: #PortfolioTest #test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/7/2020 22:19:43'!
PASSED!

----SNAPSHOT----(7 November 2020 22:21:01) CuisUniversity-4384.image priorSource: 17450255!

----SNAPSHOT----(7 November 2020 22:22:10) CuisUniversity-4384.image priorSource: 17509096!

----QUIT----(7 November 2020 22:23:12) CuisUniversity-4384.image priorSource: 17509189!

----STARTUP---- (8 November 2020 15:23:20) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64\CuisUniversity-4384.image!

!Portfolio methodsFor: 'testing' stamp: 'LH 11/8/2020 15:33:41' prior: 50877173!
includesFatherPortfolio: aPortfolio
	"return if the portfolio has aPortfolio as a father"
	
	"^fatherPortfolios includes: aPortfolio."
! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 15:33:42'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/8/2020 15:33:42'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/8/2020 15:33:42'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test20CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsItsDirectAccounts stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test23AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test24APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test27AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test31AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test34APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!testRun: #PortfolioTest #test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/8/2020 15:33:43'!
PASSED!

!methodRemoval: Portfolio #includesFatherPortfolio: stamp: 'LH 11/8/2020 15:33:47'!
includesFatherPortfolio: aPortfolio
	"return if the portfolio has aPortfolio as a father"
	
	"^fatherPortfolios includes: aPortfolio."
!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 15:33:57'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/8/2020 15:33:57'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/8/2020 15:33:57'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 15:33:57'!
PASSED!

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 15:33:57'!
PASSED!

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test20CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsItsDirectAccounts stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test23AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test24APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test27AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test31AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test34APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

!testRun: #PortfolioTest #test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/8/2020 15:34:01'!
PASSED!

----SNAPSHOT----(8 November 2020 15:34:39) CuisUniversity-4384.image priorSource: 17509282!
!AccountTransaction methodsFor: 'balance operations' stamp: 'LH 11/8/2020 15:48:45' prior: 50874398!
addToBalance: aBalance 
	"returns the resulting balance after aplying the net value of this transaction to aBalance"	

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance operations' stamp: 'LH 11/8/2020 15:48:59' prior: 50879118!
addToBalance: aBalance 
	"returns the resulting balance after aplying the net value of this transaction"	

	self subclassResponsibility ! !

!methodRemoval: AccountTransaction #balanceValue stamp: 'LH 11/8/2020 15:49:11'!
balanceValue
	"returns the value as how it impacts the balance of an account"
	
	self subclassResponsibility !

!methodRemoval: Deposit #balanceValue stamp: 'LH 11/8/2020 15:49:16'!
balanceValue
	"see superclass"

	^ value.!

!methodRemoval: Withdraw #balanceValue stamp: 'LH 11/8/2020 15:49:32'!
balanceValue
	"see superclass"
	
	^value negated.!
!Withdraw methodsFor: 'balance operations' stamp: 'LH 11/8/2020 15:49:50' prior: 50874488 overrides: 50879126!
addToBalance: aBalance
	"see superclass"

	^aBalance - value.! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test20CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsItsDirectAccounts stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test23AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test24APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test27AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test31AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test34APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LH 11/8/2020 15:49:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LH 11/8/2020 15:49:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LH 11/8/2020 15:49:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LH 11/8/2020 15:49:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LH 11/8/2020 15:49:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LH 11/8/2020 15:49:53'!
PASSED!
!ReceptiveEntity methodsFor: 'accesing' stamp: 'LH 11/8/2020 15:53:50' prior: 50874518!
balance
	"returns the balance of all transactions included in this entity"
	
	^self subclassResponsibility.
! !
!ReceptiveEntity methodsFor: 'accesing' stamp: 'LH 11/8/2020 15:54:10' prior: 50874527!
transactions
	"returns all transactions included in this entity"

	^self subclassResponsibility.
! !
!ReceptiveEntity methodsFor: 'accesing' stamp: 'LH 11/8/2020 15:54:12' prior: 50879316!
transactions
	"returns all transactions included in this entity"

	^self subclassResponsibility.
! !
!ReceptiveEntity methodsFor: 'testing' stamp: 'LH 11/8/2020 15:56:41' prior: 50874522!
hasRegistered: aTransaction
	"returns true if aTransaction is included in this entity. Returns false otherwise"

	^self subclassResponsibility.
! !
!ReceptiveEntity methodsFor: 'testing' stamp: 'LH 11/8/2020 15:58:50' prior: 50879328!
hasRegistered: aTransaction
	"returns true if a Transaction is included in this entity. Returns false otherwise"

	^self subclassResponsibility.
! !
!ReceptiveEntity methodsFor: 'testing' stamp: 'LH 11/8/2020 15:59:05' prior: 50879336!
hasRegistered: aTransaction
	"returns true if a Transaction is included in this entity"

	^self subclassResponsibility.
! !

!classRenamed: #ReceptiveEntity as: #TransactionContainer stamp: 'LH 11/8/2020 16:00:53'!
Smalltalk renameClassNamed: #ReceptiveEntity as: #TransactionContainer!
!Portfolio methodsFor: 'accessing' stamp: 'LH 11/8/2020 16:01:57' prior: 50876974!
accounts
	"Returns all the accounts of this Portfolio and it's portfolios"
	
	| allAccounts |
	allAccounts := accounts copy.
	portfolios do: [ :portfolio | allAccounts addAll: portfolio accounts ].
	^allAccounts.
! !
!Portfolio methodsFor: 'portfolios' stamp: 'LH 11/8/2020 16:02:44' prior: 50877009!
addPortfolio: aPortfolio
	"Add aPortfolio to this Portfolio"

	self validatePortfolioBeforeAdding: aPortfolio.

	portfolios add: aPortfolio.
	aPortfolio addAsFather: self. 
! !
!Portfolio methodsFor: 'accounts' stamp: 'LH 11/8/2020 16:02:59' prior: 50877018!
addAccount: anAccount
	"add anAccount to this Portfolio"

	self validateAccountBeforeAdding: anAccount.
	
	accounts add: anAccount.! !
!Portfolio methodsFor: 'validations' stamp: 'LH 11/8/2020 16:03:50' prior: 50877104!
validateAccountBeforeAdding: anAccount
	"validate that anAccount is not alredy in this portfolio or it's fathers"

	self validateAccountNotAlredyAdded: anAccount.
	fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountBeforeAdding: anAccount].! !
!Portfolio methodsFor: 'validations' stamp: 'LH 11/8/2020 16:05:04' prior: 50879382!
validateAccountBeforeAdding: anAccount
	"validate that anAccount is not alredy in this portfolio or it's fathers"

	self validateAccountNotAlredyAdded: anAccount.
	fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountBeforeAdding: anAccount].! !
!Portfolio methodsFor: 'validations' stamp: 'LH 11/8/2020 16:06:15'!
validatePortfolioNotAlreadyAdded: aPortfolio
	"If aPortfolio is in the portfolio or it's predecesor, return an error"

	(self includesPortfolio: aPortfolio) ifTrue: [self error: Portfolio errorMessagePortfolioAlreadyAdded].
	(self = aPortfolio) ifTrue:[self error: Portfolio errorMessagePortfolioAlreadyAdded].

	"(self includesFatherPortfolio: aPortfolio) ifTrue: [self error: Portfolio errorMessagePortfolioAlreadyAdded]."
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:06:16' prior: 50877059!
validatePortfolioBeforeAdding: aPortfolio
	"validate that aPortfolio is not in the portfolio nor it's predecesors; and that the portfolio's accounts arent in the portfolio not it's predecesors"

	self validatePortfolioNotAlreadyAdded: aPortfolio.
	
	aPortfolio accounts do:[:anAccount | self validateAccountBeforeAdding: anAccount].
	
	fatherPortfolios do: [ :fatherPortfolio | (fatherPortfolio validatePortfolioBeforeAdding: aPortfolio)].
! !

!methodRemoval: Portfolio #validateNotAlreadyAddedPortfolio: stamp: 'LH 11/8/2020 16:06:16'!
validateNotAlreadyAddedPortfolio: aPortfolio
	"If aPortfolio is in the portfolio or it's predecesor, return an error"

	(self includesPortfolio: aPortfolio) ifTrue: [self error: Portfolio errorMessagePortfolioAlreadyAdded].
	(self = aPortfolio) ifTrue:[self error: Portfolio errorMessagePortfolioAlreadyAdded].

	"(self includesFatherPortfolio: aPortfolio) ifTrue: [self error: Portfolio errorMessagePortfolioAlreadyAdded]."
!

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:06:20'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/8/2020 16:06:20'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/8/2020 16:06:20'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:06:20'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/8/2020 16:06:20'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:06:20'!
PASSED!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:06:20'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:06:20'!
PASSED!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/8/2020 16:06:20'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/8/2020 16:06:20'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/8/2020 16:06:20'!
PASSED!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/8/2020 16:06:20'!
PASSED!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/8/2020 16:06:20'!
PASSED!

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/8/2020 16:06:20'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/8/2020 16:06:20'!
PASSED!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/8/2020 16:06:20'!
PASSED!

!testRun: #PortfolioTest #test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/8/2020 16:06:20'!
PASSED!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/8/2020 16:06:20'!
PASSED!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/8/2020 16:06:20'!
PASSED!

!testRun: #PortfolioTest #test20CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/8/2020 16:06:20'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsItsDirectAccounts stamp: 'LH 11/8/2020 16:06:20'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/8/2020 16:06:20'!
PASSED!

!testRun: #PortfolioTest #test23AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/8/2020 16:06:20'!
PASSED!

!testRun: #PortfolioTest #test24APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/8/2020 16:06:20'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/8/2020 16:06:20'!
PASSED!

!testRun: #PortfolioTest #test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/8/2020 16:06:21'!
PASSED!

!testRun: #PortfolioTest #test27AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/8/2020 16:06:21'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/8/2020 16:06:21'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/8/2020 16:06:21'!
PASSED!

!testRun: #PortfolioTest #test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/8/2020 16:06:21'!
PASSED!

!testRun: #PortfolioTest #test31AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/8/2020 16:06:21'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/8/2020 16:06:21'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/8/2020 16:06:21'!
PASSED!

!testRun: #PortfolioTest #test34APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/8/2020 16:06:21'!
PASSED!

!testRun: #PortfolioTest #test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/8/2020 16:06:21'!
PASSED!
!Portfolio methodsFor: 'validations' stamp: 'LH 11/8/2020 16:07:12' prior: 50877036!
validateAccountNotAlredyAdded: anAccount
	"if anAccount is in this portfolio, return an error"

	(self includesAccount: anAccount) ifTrue: [^self error: Portfolio errorMessageAccountAlreadyAdded].
! !
!Portfolio methodsFor: 'validations' stamp: 'LH 11/8/2020 16:07:36' prior: 50879584!
validateAccountNotAlredyAdded: anAccount
	"validate if an Account is this portfolio"

	(self includesAccount: anAccount) ifTrue: [^self error: Portfolio errorMessageAccountAlreadyAdded].
! !
!Portfolio methodsFor: 'validations' stamp: 'LH 11/8/2020 16:08:46' prior: 50879421!
validatePortfolioBeforeAdding: aPortfolio
	"validate that aPortfolio is not in this portfolio nor it's parents; and that the portfolio's accounts aren't in this portfolio not it's parents"

	self validatePortfolioNotAlreadyAdded: aPortfolio.
	
	aPortfolio accounts do:[:anAccount | self validateAccountBeforeAdding: anAccount].
	
	fatherPortfolios do: [ :fatherPortfolio | (fatherPortfolio validatePortfolioBeforeAdding: aPortfolio)].
! !
!Portfolio methodsFor: 'validations' stamp: 'LH 11/8/2020 16:08:55' prior: 50879393!
validateAccountBeforeAdding: anAccount
	"validate that anAccount is not alredy in this portfolio or it's parents"

	self validateAccountNotAlredyAdded: anAccount.
	fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountBeforeAdding: anAccount].! !
!Portfolio methodsFor: 'validations' stamp: 'LH 11/8/2020 16:09:33' prior: 50879404!
validatePortfolioNotAlreadyAdded: aPortfolio
	"validate if a Portfolio is this portfolio"

	(self includesPortfolio: aPortfolio) ifTrue: [self error: Portfolio errorMessagePortfolioAlreadyAdded].
	(self = aPortfolio) ifTrue:[self error: Portfolio errorMessagePortfolioAlreadyAdded].

	"(self includesFatherPortfolio: aPortfolio) ifTrue: [self error: Portfolio errorMessagePortfolioAlreadyAdded]."
! !
!Portfolio methodsFor: 'accessing' stamp: 'LH 11/8/2020 16:11:40' prior: 50877116 overrides: 50879309!
balance
	"return the balance of this portfolio's accounts's + portfolios's "
	
	| balance |
	balance := 0.
	self accountsAndPortfoliosDo: [ :aThing | balance := balance + aThing balance].
	^balance.
! !
!Portfolio methodsFor: 'accessing' stamp: 'LH 11/8/2020 16:11:46' prior: 50877126 overrides: 50879322!
transactions
	"return the transactions of this portfolio's accounts and portfolios"

	| transactions |
	transactions := OrderedCollection new.
	self accountsAndPortfoliosDo: [ :account | transactions addAll: account transactions].
	^transactions.
! !
!Portfolio methodsFor: 'testing' stamp: 'LH 11/8/2020 16:12:25' prior: 50877181 overrides: 50879344!
hasRegistered: aTransaction
	"return if this portfolio has aTransaction as a transaction"
	
	"self accountsAndPortfoliosDo: [ :aThing | (aThing hasRegistered: aDeposit) ifTrue: [^true]]
	^false.."
	
	^self transactions includes: aTransaction.
	
! !
!Portfolio methodsFor: 'testing' stamp: 'LH 11/8/2020 16:13:09' prior: 50877319!
includesAccount: anAccount 
	"return if this portfolio has anAccount or not"

	^ self accounts includes: anAccount.

	"portfolios do: [ :portfolio | (portfolio includesAccount: anAccount) ifTrue: [^true]].
	^accounts includes: anAccount."! !
!Portfolio methodsFor: 'testing' stamp: 'LH 11/8/2020 16:13:14' prior: 50877456!
includesPortfolio: aPortfolio 
	"return if this portfolio has aPortfolio or not"

	portfolios do: [ :portfolio | (portfolio includesPortfolio: aPortfolio) ifTrue: [^true]].
	
	^portfolios includes: aPortfolio.
! !

----SNAPSHOT----(8 November 2020 16:13:21) CuisUniversity-4384.image priorSource: 17518819!
!Portfolio methodsFor: 'validations' stamp: 'LH 11/8/2020 16:14:57' prior: 50879619!
validateAccountBeforeAdding: anAccount
	"validate that anAccount is not alredy in this portfolio or it's parents"
	
	
	fatherPortfolios size = 0
		ifTrue: [self validateAccountNotAlredyAdded: anAccount.] 
		ifFalse:[fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountBeforeAdding: anAccount]  ].

	! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:15:00'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/8/2020 16:15:00'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/8/2020 16:15:00'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:15:00'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/8/2020 16:15:00'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:15:00'!
PASSED!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:15:00'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:15:00'!
PASSED!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/8/2020 16:15:00'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/8/2020 16:15:00'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/8/2020 16:15:00'!
PASSED!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/8/2020 16:15:00'!
PASSED!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/8/2020 16:15:01'!
PASSED!

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/8/2020 16:15:01'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/8/2020 16:15:01'!
PASSED!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/8/2020 16:15:01'!
PASSED!

!testRun: #PortfolioTest #test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/8/2020 16:15:01'!
PASSED!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/8/2020 16:15:01'!
PASSED!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/8/2020 16:15:01'!
PASSED!

!testRun: #PortfolioTest #test20CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/8/2020 16:15:01'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsItsDirectAccounts stamp: 'LH 11/8/2020 16:15:01'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/8/2020 16:15:01'!
PASSED!

!testRun: #PortfolioTest #test23AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/8/2020 16:15:01'!
PASSED!

!testRun: #PortfolioTest #test24APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/8/2020 16:15:01'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/8/2020 16:15:01'!
PASSED!

!testRun: #PortfolioTest #test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/8/2020 16:15:01'!
PASSED!

!testRun: #PortfolioTest #test27AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/8/2020 16:15:01'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/8/2020 16:15:01'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/8/2020 16:15:01'!
PASSED!

!testRun: #PortfolioTest #test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/8/2020 16:15:01'!
PASSED!

!testRun: #PortfolioTest #test31AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/8/2020 16:15:01'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/8/2020 16:15:01'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/8/2020 16:15:01'!
PASSED!

!testRun: #PortfolioTest #test34APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/8/2020 16:15:01'!
PASSED!

!testRun: #PortfolioTest #test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/8/2020 16:15:01'!
PASSED!
!Portfolio methodsFor: 'validations' stamp: 'LH 11/8/2020 16:16:20' prior: 50879602!
validatePortfolioBeforeAdding: aPortfolio
	"validate that aPortfolio is not in this portfolio nor it's parents; and that the portfolio's accounts aren't in this portfolio not it's parents"


	fatherPortfolios size = 0
		ifTrue: [self validatePortfolioNotAlreadyAdded: aPortfolio.
				aPortfolio accounts do:[:anAccount | self validateAccountBeforeAdding: anAccount] .] 
			
		ifFalse:[fatherPortfolios do: [ :fatherPortfolio | (fatherPortfolio validatePortfolioBeforeAdding: aPortfolio)].  ].

	
	
	
! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test20CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsItsDirectAccounts stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test23AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test24APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test27AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test31AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test34APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/8/2020 16:16:21'!
PASSED!

!testRun: #PortfolioTest #test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/8/2020 16:16:21'!
PASSED!
!Portfolio methodsFor: 'validations' stamp: 'LH 11/8/2020 16:20:55'!
ifItsARootPortfolioDo: rootClosure elseDo: normalPortfolioClosure
	"if this portfolio has no parents, do rootCLosure. else do normalPortfolioClosure"

	fatherPortfolios size = 0
		ifTrue: [rootClosure value] 
			
		ifFalse:[normalPortfolioClosure value].

	
	
	
! !
!Portfolio methodsFor: 'validations' stamp: 'LH 11/8/2020 16:21:35' prior: 50879703!
validateAccountBeforeAdding: anAccount
	"validate that anAccount is not alredy in this portfolio or it's parents"
	
	
	self ifItsARootPortfolioDo: [self validateAccountNotAlredyAdded: anAccount.] 
		elseDo: [fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountBeforeAdding: anAccount]  ].
	
	"fatherPortfolios size = 0
		ifTrue: [self validateAccountNotAlredyAdded: anAccount.] 
		ifFalse:[fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountBeforeAdding: anAccount]  ]."

	! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test20CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsItsDirectAccounts stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test23AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test24APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test27AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test31AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test34APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/8/2020 16:21:37'!
PASSED!

!testRun: #PortfolioTest #test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/8/2020 16:21:37'!
PASSED!
!Portfolio methodsFor: 'validations' stamp: 'LH 11/8/2020 16:22:22' prior: 50879846!
validatePortfolioBeforeAdding: aPortfolio
	"validate that aPortfolio is not in this portfolio nor it's parents; and that the portfolio's accounts aren't in this portfolio not it's parents"


	self ifItsARootPortfolioDo: [self validatePortfolioNotAlreadyAdded: aPortfolio.
							aPortfolio accounts do:[:anAccount | self validateAccountBeforeAdding: anAccount] .] 
						
			 elseDo: [fatherPortfolios do: [ :fatherPortfolio | (fatherPortfolio validatePortfolioBeforeAdding: aPortfolio)].  ].




	"fatherPortfolios size = 0
		ifTrue: [self validatePortfolioNotAlreadyAdded: aPortfolio.
				aPortfolio accounts do:[:anAccount | self validateAccountBeforeAdding: anAccount] .] 
			
		ifFalse:[fatherPortfolios do: [ :fatherPortfolio | (fatherPortfolio validatePortfolioBeforeAdding: aPortfolio)].  ]."

	
	
	
! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/8/2020 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/8/2020 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/8/2020 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/8/2020 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/8/2020 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/8/2020 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/8/2020 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/8/2020 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/8/2020 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/8/2020 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/8/2020 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/8/2020 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/8/2020 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/8/2020 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test20CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/8/2020 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsItsDirectAccounts stamp: 'LH 11/8/2020 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/8/2020 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test23AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/8/2020 16:22:32'!
PASSED!

!testRun: #PortfolioTest #test24APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/8/2020 16:22:32'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/8/2020 16:22:32'!
PASSED!

!testRun: #PortfolioTest #test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/8/2020 16:22:32'!
PASSED!

!testRun: #PortfolioTest #test27AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/8/2020 16:22:32'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/8/2020 16:22:32'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/8/2020 16:22:32'!
PASSED!

!testRun: #PortfolioTest #test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/8/2020 16:22:32'!
PASSED!

!testRun: #PortfolioTest #test31AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/8/2020 16:22:32'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/8/2020 16:22:32'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/8/2020 16:22:32'!
PASSED!

!testRun: #PortfolioTest #test34APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/8/2020 16:22:32'!
PASSED!

!testRun: #PortfolioTest #test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/8/2020 16:22:32'!
PASSED!

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test20CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsItsDirectAccounts stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test23AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test24APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test27AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test31AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test34APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

!testRun: #PortfolioTest #test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/8/2020 16:23:00'!
PASSED!

Portfolio subclass: #RootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #RootPortfolio category: 'Portfolio-Ejercicio' stamp: 'LH 11/8/2020 16:23:41'!
Portfolio subclass: #RootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #RootPortfolio stamp: 'LH 11/8/2020 16:28:41'!
Portfolio subclass: #RootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #PortfolioState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioState category: 'Portfolio-Ejercicio' stamp: 'LH 11/8/2020 16:31:06'!
Object subclass: #PortfolioState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioState stamp: 'LH 11/8/2020 16:33:12'!
Object subclass: #PortfolioState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----SNAPSHOT----(8 November 2020 16:33:15) CuisUniversity-4384.image priorSource: 17537557!

!classRenamed: #Portfolio as: #TransactionPortfolio stamp: 'LH 11/8/2020 16:33:50'!
Smalltalk renameClassNamed: #Portfolio as: #TransactionPortfolio!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:50' prior: 50875630!
test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount
	
	"no se pueden agregar una cueanta a un portfolio (hijo) de un portfolio (padre), cuando la cuenta ya estaba en el portfolio (padre), con varios padres"
	
	| portfolio1 portfolio2 portfolio3 account1 |
	
	portfolio1 := TransactionPortfolio new.
	portfolio2 := TransactionPortfolio new.
	portfolio3 := TransactionPortfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio2 addAccount: account1.
	portfolio2 addPortfolio: portfolio3.
	portfolio1 addPortfolio: portfolio3.

	self should: [	portfolio3 addAccount: account1.] raise: Error withMessageText: TransactionPortfolio errorMessageAccountAlreadyAdded.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:50' prior: 50877929!
test33APortfolioWithManyAccountsHasItsAccountsTransactions

	"un portfolio con varias cuentas retorna todas sus transacciones"
	
	| deposit1 deposit2 withdraw1 withdraw2 account1 account2 portfolio1 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 :=  Deposit register: 100 on: account1.
	withdraw1 := Withdraw register: 50 on: account1.
	deposit2 :=  Deposit register: 30 on: account2.
	withdraw2 := Withdraw register: 20 on: account2.

	portfolio1 := TransactionPortfolio new.
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.

	self assert: (portfolio1 transactions includesAllOf: (OrderedCollection with: deposit1 with: withdraw1 with: deposit2 with: withdraw2)).

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:50' prior: 50875391!
test12APortfolioCantHaveRepeatedAccounts
	
	"no pueden haber cuentas repetidas en un portfolio"
	
	| portfolio1 portfolio2 account1 |
	
	portfolio1 := TransactionPortfolio new.
	portfolio2 := TransactionPortfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addAccount: account1.

	
	self should: [portfolio1 addAccount: account1] raise: Error withMessageText: TransactionPortfolio errorMessageAccountAlreadyAdded.

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:50' prior: 50875424!
test13APortfolioCanNotHaveRepeatedPortfolios
	
	"no pueden haber prtfolios repetidos en un portfolio"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := TransactionPortfolio new.
	portfolio2 := TransactionPortfolio new.
	portfolio3 := TransactionPortfolio new.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self should: [portfolio1 addPortfolio: portfolio3] raise: Error withMessageText: TransactionPortfolio errorMessagePortfolioAlreadyAdded.

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:50' prior: 50877764!
test18CantAddAPortfolioWhenItIsAParent
	
	"
		no se pueden agregar un portfolio cuando el padre ya tiene ese portfolio
		p1 ->  p2 -> p1
	"
	
	| portfolio1 portfolio2 |
	
	portfolio1 := TransactionPortfolio new.
	portfolio2 := TransactionPortfolio new.

	portfolio1 addPortfolio: portfolio2.

	self should: [	portfolio2 addPortfolio: portfolio1.] raise: Error withMessageText: TransactionPortfolio errorMessagePortfolioAlreadyAdded.
! !
!TransactionPortfolio methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:50' prior: 50879630!
validatePortfolioNotAlreadyAdded: aPortfolio
	"validate if a Portfolio is this portfolio"

	(self includesPortfolio: aPortfolio) ifTrue: [self error: TransactionPortfolio errorMessagePortfolioAlreadyAdded].
	(self = aPortfolio) ifTrue:[self error: TransactionPortfolio errorMessagePortfolioAlreadyAdded].

	"(self includesFatherPortfolio: aPortfolio) ifTrue: [self error: Portfolio errorMessagePortfolioAlreadyAdded]."
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50878417!
test22APortfolioKnowsItsDirectAccounts
	
	"un portfolio expone sus cuentas"
	
	| portfolio1 account1 account2 |
	
	portfolio1 := TransactionPortfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.	

	self assert: (portfolio1 accounts includesAllOf: (OrderedCollection with: account1 with: account2)).

	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50875172!
test08PortfoliosCanBeAddedToAPortfolio
	
	"a un portfolio se le pueden agregar portfolios"
	
	| portfolio1 portfolio2 portfolio3 portfolio4 account1 account2 account3 account4 |
	
	portfolio1 := TransactionPortfolio new.
	portfolio2 := TransactionPortfolio new.
	portfolio3 := TransactionPortfolio new.
	portfolio4 := TransactionPortfolio new.
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	account4 := ReceptiveAccount new.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.
	portfolio2 addPortfolio: portfolio4. "portfolio anidado"
	
	portfolio2 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio4 addAccount: account4.
	
	self assert: (portfolio1 includesAccount: account1).
	self assert: (portfolio1 includesAccount: account2).
	self assert: (portfolio1 includesAccount: account3).
	self assert: (portfolio1 includesAccount: account4).
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50878037!
test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions

	"un portfolio con varias cuentas en sus portfolios registro todas sus transacciones"
	
	| deposit1 deposit2 withdraw1 withdraw2 account1 account2 portfolio1 portfolio2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 :=  Deposit register: 100 on: account1.
	withdraw1 := Withdraw register: 50 on: account1.
	deposit2 :=  Deposit register: 30 on: account2.
	withdraw2 := Withdraw register: 20 on: account2.

	portfolio1 := TransactionPortfolio new.
	portfolio2 := TransactionPortfolio new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	
	portfolio2 addPortfolio: portfolio1.

	self assert: (portfolio2 hasRegistered: deposit1).
	self assert: (portfolio2 hasRegistered:withdraw1).
	self assert: (portfolio2 hasRegistered: deposit2).
	self assert: (portfolio2 hasRegistered:withdraw2).
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50878339!
test23AnEmptyPortfolioHasABalanceOf0

	"un portfolio vacio responde balance 0"

	| portfolio1 |

	portfolio1 := TransactionPortfolio new.

	self assert: (portfolio1 balance) equals: 0.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50873717!
test03APortfolioDoesNotHaveMoreAccountsThanAdded

	"una cuenta que no fue agregada a un portfolio no esta en un portfolio"

	|anAccount1 anAccount2 aPortfolio|
	
	anAccount1 :=  ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	anAccount2 :=  ReceptiveAccount new.
	Deposit register: 200 on: anAccount2.
	
	aPortfolio := TransactionPortfolio new.
	aPortfolio addAccount: anAccount1.

	self deny: (aPortfolio includesAccount: anAccount2).
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50875237!
test09APortfolioWithPortfoliosCanBeAddedToAportfolio
	
	"a un portfolio se le pueden agregar portfolios con portfolios"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := TransactionPortfolio new.
	portfolio2 := TransactionPortfolio new.
	portfolio3 := TransactionPortfolio new.

	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self assert: (portfolio1 includesPortfolio: portfolio3).

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50878159!
test28APortfolioWithOneAccountHasItsRegisteredTransactions

	"un portfolio con una cuenta registro sus transacciones"
	
	| deposit withdraw account1 portfolio1 |
	
	account1 := ReceptiveAccount new.
	deposit :=  Deposit register: 100 on: account1.
	withdraw := Withdraw register: 50 on: account1.
	
	portfolio1 := TransactionPortfolio new.
	portfolio1 addAccount: account1.

	self assert: (portfolio1 hasRegistered: deposit).
	self assert: (portfolio1 hasRegistered:withdraw).
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50878101!
test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions

	"un portfolio con varias cuentas registro todas sus transacciones"
	
	| deposit1 deposit2 withdraw1 withdraw2 account1 account2 portfolio1 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 :=  Deposit register: 100 on: account1.
	withdraw1 := Withdraw register: 50 on: account1.
	deposit2 :=  Deposit register: 30 on: account2.
	withdraw2 := Withdraw register: 20 on: account2.

	portfolio1 := TransactionPortfolio new.
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.

	self assert: (portfolio1 hasRegistered: deposit1).
	self assert: (portfolio1 hasRegistered:withdraw1).
	self assert: (portfolio1 hasRegistered: deposit2).
	self assert: (portfolio1 hasRegistered:withdraw2).
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50877471!
test14APortffolioCantHaveItself
	"un portfolio no se puede tener a si mismo"
	
	| portfolio1 |
	
	portfolio1 := TransactionPortfolio new.
	
	self should: [portfolio1 addPortfolio: portfolio1] raise: Error withMessageText: TransactionPortfolio errorMessagePortfolioAlreadyAdded.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50878269!
test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts

	"un portfolio reponde por el balance de sus hijos"

	| portfolio1 account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account2.

	portfolio1 := TransactionPortfolio new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.

	self assert: (portfolio1 balance) equals: 150.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50875139!
test07VariousEmptyPortfoliosCanBeAddedToAPortfolio
	
	"a un portfolio se le puede agregar mas de un portfolio sin cuentas"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := TransactionPortfolio new.
	portfolio2 := TransactionPortfolio new.
	portfolio3 := TransactionPortfolio new.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.
	
	self assert: (portfolio1 includesPortfolio: portfolio2).
	self assert: (portfolio1 includesPortfolio: portfolio3).
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50878489!
test19CantAddAPortfolioWhenItIsAPredecesor
	
	"
		no se pueden agregar un portfolio cuando el padre del padre ya tiene ese portfolio
		p1 ->  p2 -> p3 -> p1
	"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := TransactionPortfolio new.
	portfolio2 := TransactionPortfolio new.
	portfolio3 := TransactionPortfolio new.

	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self should: [	portfolio3 addPortfolio: portfolio1.] raise: Error withMessageText: TransactionPortfolio errorMessagePortfolioAlreadyAdded.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50878196!
test27AnEmptyPortfolioHasNoRegisteredTransactions

	"un portfolio vacio no registro ninguna transaccion"
	
	| deposit withdraw portfolio1 |
	
	portfolio1 := TransactionPortfolio new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (portfolio1 hasRegistered: deposit).
	self deny: (portfolio1 hasRegistered:withdraw).
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50878224!
test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios

	"un portfolio reponde por el balance de los hijos de sus portfolios"

	| portfolio1 portfolio2 account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account2.

	portfolio1 := TransactionPortfolio new.
	portfolio2 := TransactionPortfolio new.

	portfolio1 addPortfolio: portfolio2.

	portfolio2 addAccount: account1.
	portfolio2 addAccount: account2.

	self assert: (portfolio1 balance) equals: 150.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50878449!
test20CantAddAPortfolioWhenAPredecesorAlredyHasIt
	
	"
		no se pueden agregar un portfolio cuando el padre del padre ya tiene ese portfolio
		p1 ->  p2
		p1 ->  p3 -> p2
	"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := TransactionPortfolio new.
	portfolio2 := TransactionPortfolio new.
	portfolio3 := TransactionPortfolio new.

	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.

	self should: [	portfolio3 addPortfolio: portfolio2.] raise: Error withMessageText: TransactionPortfolio errorMessagePortfolioAlreadyAdded.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50878356!
test22APortfolioKnowsTheAccountsOfHisPortfolios
	
	"un portfolio expone las cuentas de sus portfolios"
	
	| portfolio1 portfolio2 portfolio3 portfolio4 account1 account2 account3 account4 |

	portfolio1 := TransactionPortfolio new.
	portfolio2 := TransactionPortfolio new.
	portfolio3 := TransactionPortfolio new.
	portfolio4 := TransactionPortfolio new.

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.	
	account4 := ReceptiveAccount new.	

	portfolio2 addAccount: account1.
	portfolio2 addAccount: account2.	
	portfolio3 addAccount: account3.
	portfolio4 addAccount: account4.

	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.
	portfolio2 addPortfolio: portfolio4.

	self assert: (portfolio1 accounts includesAllOf: (OrderedCollection with: account1 with: account2 with: account3 with: account4)).

	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50875547!
test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount
	
	"no se pueden agregar una cueanta a un portfolio (padre) con un portfolio (hijo), cuando la cuenta ya estaba en el portfolio (hijo)"
	
	| portfolio1 portfolio2 account1 |
	
	portfolio1 := TransactionPortfolio new.
	portfolio2 := TransactionPortfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio2 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.

	self should: [	portfolio1 addAccount: account1.] raise: Error withMessageText: TransactionPortfolio errorMessageAccountAlreadyAdded.
! !
!TransactionPortfolio methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50879593!
validateAccountNotAlredyAdded: anAccount
	"validate if an Account is this portfolio"

	(self includesAccount: anAccount) ifTrue: [^self error: TransactionPortfolio errorMessageAccountAlreadyAdded].
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50877797!
test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver
	
	"
		no se pueden agregar un portfolio cuando tiene cuentas repetidas en los padres del receptor 
		p1 ->	p2 -> p4 -x p5 -> a3,a2,a1|
		     -> a1| -> a2|
			 p3 -> p3|
			      -> a3|
	"
	
	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account1 account2 account3 |
	
	portfolio1 := TransactionPortfolio new.
	portfolio2 := TransactionPortfolio new.
	portfolio3 := TransactionPortfolio new.
	portfolio4 := TransactionPortfolio new.
	portfolio5 := TransactionPortfolio new.
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.	
	
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio4.
	portfolio3 addPortfolio: portfolio4.
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio5 addAccount: account1.
	portfolio5 addAccount: account2.
	portfolio5 addAccount: account3.

	self should: [	portfolio4 addPortfolio: portfolio5.] raise: Error withMessageText: TransactionPortfolio errorMessageAccountAlreadyAdded.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50875568!
test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount
	
	"no se pueden agregar una cueanta a un portfolio (padre) con un portfolio (hijo) con un portfolio (nieto), cuando la cuenta ya estaba en el portfolio (nieto)"
	
	| portfolio1 portfolio2 portfolio3 account1 |
	
	portfolio1 := TransactionPortfolio new.
	portfolio2 := TransactionPortfolio new.
	portfolio3 := TransactionPortfolio new.	

	account1 := ReceptiveAccount new.
	
	portfolio3 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self should: [	portfolio1 addAccount: account1.] raise: Error withMessageText: TransactionPortfolio errorMessageAccountAlreadyAdded.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50878018!
test31AnEmptyPortfolioHasNoTransactions

	"un portfolio vacio no tiene transacciones"
	
	| portfolio1 |
	
	portfolio1 := TransactionPortfolio new.
		
	self assert: (portfolio1 transactions size) equals: 0.

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50873705!
test02APortfolioHasNoAccountsInitially

	"un portfolio no tiene cuentas inicialmente"

	|anAccount1 aPortfolio|
	
	anAccount1 :=  ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	
	aPortfolio := TransactionPortfolio new.

	self deny: (aPortfolio includesAccount: anAccount1).
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50873734!
test04MoreThanOneAccountCanBeAddedToAPortfolio

	"se puede agregar mas de una cuenta a un portfolio"

	|anAccount1 anAccount2 aPortfolio|
	
	anAccount1 :=  ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	anAccount2 :=  ReceptiveAccount new.
	Deposit register: 200 on: anAccount2.
	
	aPortfolio := TransactionPortfolio new.
	aPortfolio addAccount: anAccount1.
	aPortfolio addAccount: anAccount2.
	
	self assert: (aPortfolio includesAccount: anAccount1).
	self assert: (aPortfolio includesAccount: anAccount2).
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50877719!
test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount
	
	"no se pueden agregar una cueanta a un hijo si esa cuenta est� en el padre de su padre"
	
	| portfolio1 portfolio2 portfolio3 account1 |
	
	portfolio1 := TransactionPortfolio new.
	portfolio2 := TransactionPortfolio new.
	portfolio3 := TransactionPortfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio1 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.

	self should: [	portfolio3 addAccount: account1.] raise: Error withMessageText: TransactionPortfolio errorMessageAccountAlreadyAdded.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50877870!
test34APortfolioHasItsPortfoliosAndAccountsTransaction

	"un portfolio con varias cuentas en sus portfolios retorna todas sus transacciones"
	
	| deposit1 deposit2 withdraw1 withdraw2 account1 account2 portfolio1 portfolio2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 :=  Deposit register: 100 on: account1.
	withdraw1 := Withdraw register: 50 on: account1.
	deposit2 :=  Deposit register: 30 on: account2.
	withdraw2 := Withdraw register: 20 on: account2.

	portfolio1 := TransactionPortfolio new.
	portfolio2 := TransactionPortfolio new.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	
	portfolio2 addPortfolio: portfolio1.

	self assert: (portfolio2 transactions includesAllOf: (OrderedCollection with: deposit1 with: withdraw1 with: deposit2 with: withdraw2)).

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50877982!
test32APortfolioWithOneAccountHasItsTransactions

	"un portfolio con una cuenta retorna sus transacciones"
	
	| deposit withdraw account1 portfolio1 |
	
	account1 := ReceptiveAccount new.
	deposit :=  Deposit register: 100 on: account1.
	withdraw := Withdraw register: 50 on: account1.
	
	portfolio1 := TransactionPortfolio new.
	portfolio1 addAccount: account1.

	self assert: (portfolio1 transactions includesAllOf: (OrderedCollection with: deposit with: withdraw)).

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50875095!
test05APortfolioDoesNotHavePortfoliosInitialy
	
	"un portfolio no tiene portfolios inicialmente"
	
	| portfolio1 portfolio2 |
	
	portfolio1 := TransactionPortfolio new.
	portfolio2 := TransactionPortfolio new.
	
	self deny: (portfolio1 includesPortfolio: portfolio2).
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50875115!
test06AnEmptyPortfolioCanBeAddedToAPortfolio
	
	"a un portfolio se le puede agregar un portfolio sin cuentas"
	
	| portfolio1 portfolio2 |
	
	portfolio1 := TransactionPortfolio new.
	portfolio2 := TransactionPortfolio new.
	
	portfolio1 addPortfolio: portfolio2.
	
	self assert: (portfolio1 includesPortfolio: portfolio2).
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50877677!
test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount
	
	"no se pueden agregar una cueanta a un portfolio (hijo) de un portfolio (padre), cuando la cuenta ya estaba en el portfolio (padre)"
	
	| portfolio1 portfolio2 account1 |
	
	portfolio1 := TransactionPortfolio new.
	portfolio2 := TransactionPortfolio new.
	
	account1 := ReceptiveAccount new.
	
	portfolio1 addAccount: account1.
	portfolio1 addPortfolio: portfolio2.

	self should: [	portfolio2 addAccount: account1.] raise: Error withMessageText: TransactionPortfolio errorMessageAccountAlreadyAdded.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50878308!
test24APortfolioWithOneAccountHasTheBalanceOfThatAccount

	"un portfolio reponde por el balance de su unico hijo"

	| portfolio1 account1 |
	
	account1 := ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.

	portfolio1 := TransactionPortfolio new.

	portfolio1 addAccount: account1.

	self assert: (portfolio1 balance) equals: 50.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:33:51' prior: 50873692!
test01AnAccountCanBeAddedToAPortfolio

	"una cuenta puede ser agregada a un prtfolio"

	|anAccount aPortfolio|
	
	anAccount :=  ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	aPortfolio := TransactionPortfolio new.
	aPortfolio addAccount: anAccount.
	
	self assert: (aPortfolio includesAccount: anAccount).
! !

----STARTUP---- (8 November 2020 16:37:01) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64\CuisUniversity-4384.image!


Object subclass: #PortfolioState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioState category: 'Portfolio-Ejercicio' stamp: 'LH 11/8/2020 16:37:41'!
Object subclass: #PortfolioState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioState subclass: #Root
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Root category: 'Portfolio-Ejercicio' stamp: 'LH 11/8/2020 16:37:52'!
PortfolioState subclass: #Root
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioState subclass: #Body
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Body category: 'Portfolio-Ejercicio' stamp: 'LH 11/8/2020 16:37:58'!
PortfolioState subclass: #Body
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Body stamp: 'LH 11/8/2020 16:39:48'!
PortfolioState subclass: #Body
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Root stamp: 'LH 11/8/2020 16:39:52'!
PortfolioState subclass: #Root
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioState stamp: 'LH 11/8/2020 16:40:19'!
Object subclass: #PortfolioState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TransactionContainer subclass: #TransactionPortfolio
	instanceVariableNames: 'accounts portfolios fatherPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TransactionPortfolio category: 'Portfolio-Ejercicio' stamp: 'LH 11/8/2020 16:40:46'!
TransactionContainer subclass: #TransactionPortfolio
	instanceVariableNames: 'accounts portfolios fatherPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TransactionPortfolio class
	instanceVariableNames: ''!

!classDefinition: 'TransactionPortfolio class' category: 'Portfolio-Ejercicio' stamp: 'LH 11/8/2020 16:40:46'!
TransactionPortfolio class
	instanceVariableNames: ''!
!TransactionPortfolio methodsFor: 'initialization' stamp: 'LH 11/8/2020 16:40:46' overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	
	fatherPortfolios := OrderedCollection new.
	! !
!TransactionPortfolio methodsFor: 'portfolios' stamp: 'LH 11/8/2020 16:40:47'!
addPortfolio: aPortfolio
	"Add aPortfolio to this Portfolio"

	self validatePortfolioBeforeAdding: aPortfolio.

	portfolios add: aPortfolio.
	aPortfolio addAsFather: self. 
! !
!TransactionPortfolio methodsFor: 'accounts' stamp: 'LH 11/8/2020 16:40:47'!
addAccount: anAccount
	"add anAccount to this Portfolio"

	self validateAccountBeforeAdding: anAccount.
	
	accounts add: anAccount.! !
!TransactionPortfolio methodsFor: 'validations' stamp: 'LH 11/8/2020 16:40:47'!
ifItsARootPortfolioDo: rootClosure elseDo: normalPortfolioClosure
	"if this portfolio has no parents, do rootCLosure. else do normalPortfolioClosure"

	fatherPortfolios size = 0
		ifTrue: [rootClosure value] 
			
		ifFalse:[normalPortfolioClosure value].

	
	
	
! !
!TransactionPortfolio methodsFor: 'validations' stamp: 'LH 11/8/2020 16:40:47'!
validateAccountBeforeAdding: anAccount
	"validate that anAccount is not alredy in this portfolio or it's parents"
	
	
	self ifItsARootPortfolioDo: [self validateAccountNotAlredyAdded: anAccount.] 
		elseDo: [fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountBeforeAdding: anAccount]  ].
	
	"fatherPortfolios size = 0
		ifTrue: [self validateAccountNotAlredyAdded: anAccount.] 
		ifFalse:[fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountBeforeAdding: anAccount]  ]."

	! !
!TransactionPortfolio methodsFor: 'validations' stamp: 'LH 11/8/2020 16:40:47'!
validateAccountNotAlredyAdded: anAccount
	"validate if an Account is this portfolio"

	(self includesAccount: anAccount) ifTrue: [^self error: Portfolio errorMessageAccountAlreadyAdded].
! !
!TransactionPortfolio methodsFor: 'validations' stamp: 'LH 11/8/2020 16:40:47'!
validatePortfolioBeforeAdding: aPortfolio
	"validate that aPortfolio is not in this portfolio nor it's parents; and that the portfolio's accounts aren't in this portfolio not it's parents"


	self ifItsARootPortfolioDo: [self validatePortfolioNotAlreadyAdded: aPortfolio.
							aPortfolio accounts do:[:anAccount | self validateAccountBeforeAdding: anAccount] .] 
						
			 elseDo: [fatherPortfolios do: [ :fatherPortfolio | (fatherPortfolio validatePortfolioBeforeAdding: aPortfolio)].  ].




	"fatherPortfolios size = 0
		ifTrue: [self validatePortfolioNotAlreadyAdded: aPortfolio.
				aPortfolio accounts do:[:anAccount | self validateAccountBeforeAdding: anAccount] .] 
			
		ifFalse:[fatherPortfolios do: [ :fatherPortfolio | (fatherPortfolio validatePortfolioBeforeAdding: aPortfolio)].  ]."

	
	
	
! !
!TransactionPortfolio methodsFor: 'validations' stamp: 'LH 11/8/2020 16:40:47'!
validatePortfolioNotAlreadyAdded: aPortfolio
	"validate if a Portfolio is this portfolio"

	(self includesPortfolio: aPortfolio) ifTrue: [self error: Portfolio errorMessagePortfolioAlreadyAdded].
	(self = aPortfolio) ifTrue:[self error: Portfolio errorMessagePortfolioAlreadyAdded].

	"(self includesFatherPortfolio: aPortfolio) ifTrue: [self error: Portfolio errorMessagePortfolioAlreadyAdded]."
! !
!TransactionPortfolio methodsFor: 'accessing' stamp: 'LH 11/8/2020 16:40:47'!
accounts
	"Returns all the accounts of this Portfolio and it's portfolios"
	
	| allAccounts |
	allAccounts := accounts copy.
	portfolios do: [ :portfolio | allAccounts addAll: portfolio accounts ].
	^allAccounts.
! !
!TransactionPortfolio methodsFor: 'accessing' stamp: 'LH 11/8/2020 16:40:47' overrides: 50879309!
balance
	"return the balance of this portfolio's accounts's + portfolios's "
	
	| balance |
	balance := 0.
	self accountsAndPortfoliosDo: [ :aThing | balance := balance + aThing balance].
	^balance.
! !
!TransactionPortfolio methodsFor: 'accessing' stamp: 'LH 11/8/2020 16:40:47' overrides: 50879322!
transactions
	"return the transactions of this portfolio's accounts and portfolios"

	| transactions |
	transactions := OrderedCollection new.
	self accountsAndPortfoliosDo: [ :account | transactions addAll: account transactions].
	^transactions.
! !
!TransactionPortfolio methodsFor: 'testing' stamp: 'LH 11/8/2020 16:40:47' overrides: 50879344!
hasRegistered: aTransaction
	"return if this portfolio has aTransaction as a transaction"
	
	"self accountsAndPortfoliosDo: [ :aThing | (aThing hasRegistered: aDeposit) ifTrue: [^true]]
	^false.."
	
	^self transactions includes: aTransaction.
	
! !
!TransactionPortfolio methodsFor: 'testing' stamp: 'LH 11/8/2020 16:40:47'!
includesAccount: anAccount 
	"return if this portfolio has anAccount or not"

	^ self accounts includes: anAccount.

	"portfolios do: [ :portfolio | (portfolio includesAccount: anAccount) ifTrue: [^true]].
	^accounts includes: anAccount."! !
!TransactionPortfolio methodsFor: 'testing' stamp: 'LH 11/8/2020 16:40:47'!
includesPortfolio: aPortfolio 
	"return if this portfolio has aPortfolio or not"

	portfolios do: [ :portfolio | (portfolio includesPortfolio: aPortfolio) ifTrue: [^true]].
	
	^portfolios includes: aPortfolio.
! !
!TransactionPortfolio methodsFor: 'private' stamp: 'LH 11/8/2020 16:40:47'!
accountsAndPortfoliosDo: anAction
	"A method for doing anAction to a Portfolio's accounts and portfolios"

	accounts do: [ :account | anAction value: account.].
	portfolios do: [ :portfolio | anAction value: portfolio.].
! !
!TransactionPortfolio methodsFor: 'private' stamp: 'LH 11/8/2020 16:40:47'!
addAsFather: aPortfolio 
	"Set aPortfolio as a father"

	fatherPortfolios add: aPortfolio.! !
!TransactionPortfolio class methodsFor: 'error messages' stamp: 'LH 11/8/2020 16:40:48'!
errorMessageAccountAlreadyAdded
	^'This protfolio already includes this account.'! !
!TransactionPortfolio class methodsFor: 'error messages' stamp: 'LH 11/8/2020 16:40:48'!
errorMessageAccountInPortfolioAlreadyAdded
	^'An account in the protfolio to be added is already included in this portfolio.'! !
!TransactionPortfolio class methodsFor: 'error messages' stamp: 'LH 11/8/2020 16:40:48'!
errorMessagePortfolioAlreadyAdded
	^'This protfolio already includes the given portfolio.'! !

Object subclass: #PortfolioState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioState category: 'Portfolio-Ejercicio' stamp: 'LH 11/8/2020 16:46:25'!
Object subclass: #PortfolioState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #Root
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Root category: 'Portfolio-Ejercicio' stamp: 'LH 11/8/2020 16:46:51'!
Object subclass: #Root
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

ReceptiveAccountTest subclass: #Root
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Root category: 'Portfolio-Ejercicio' stamp: 'LH 11/8/2020 16:47:02'!
ReceptiveAccountTest subclass: #Root
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioState subclass: #Root
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Root category: 'Portfolio-Ejercicio' stamp: 'LH 11/8/2020 16:47:23'!
PortfolioState subclass: #Root
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioState subclass: #Body
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Body category: 'Portfolio-Ejercicio' stamp: 'LH 11/8/2020 16:47:27'!
PortfolioState subclass: #Body
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioState subclass: #Body
	instanceVariableNames: 'parentPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Body category: 'Portfolio-Ejercicio' stamp: 'LH 11/8/2020 16:47:42'!
PortfolioState subclass: #Body
	instanceVariableNames: 'parentPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Body methodsFor: 'no messages' stamp: 'LH 11/8/2020 16:48:17'!
validateAccountBeforeAdding: anAccount! !
!Root methodsFor: 'no messages' stamp: 'LH 11/8/2020 16:48:24'!
validateAccountBeforeAdding: anAccount! !
!Body methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:48:57'!
validateAccountBeforeAdding: anAccount to: aPortfolio! !

----SNAPSHOT----(8 November 2020 16:49:44) CuisUniversity-4384.image priorSource: 17562487!

!methodRemoval: Body #validateAccountBeforeAdding: stamp: 'LH 11/8/2020 16:49:49'!
validateAccountBeforeAdding: anAccount!
!Body methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:51:01' prior: 50881605!
validateAccountBeforeAdding: anAccount to: aPortfolio
! !
!Body methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:51:53'!
validateAccountBeforeAdding: anAccount
	
	parentPortfolios do: [:aPortfolio | aPortfolio validateAccountBeforeAdding: anAccount].  ! !
!Body methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:52:44' prior: 50881617!
validateAccountBeforeAdding: anAccount to: aPortfolio
	
	parentPortfolios do: [:aParentPortfolio | aParentPortfolio validateAccountBeforeAdding: anAccount].  ! !

!methodRemoval: Body #validateAccountBeforeAdding: stamp: 'LH 11/8/2020 16:52:51'!
validateAccountBeforeAdding: anAccount
	
	parentPortfolios do: [:aPortfolio | aPortfolio validateAccountBeforeAdding: anAccount].  !
!Root methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:53:08'!
validateAccountBeforeAdding: anAccount to: aPortfolio! !
!Root methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 16:53:38' prior: 50881644!
validateAccountBeforeAdding: anAccount to: aPortfolio

	aPortfolio validateAccountNotAlredyAdded: anAccount.! !

!methodRemoval: Root #validateAccountBeforeAdding: stamp: 'LH 11/8/2020 16:53:45'!
validateAccountBeforeAdding: anAccount!
!Body methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 17:06:37'!
addAsFather: aPortfolio
	
	parentPortfolios add: aPortfolio.
	^ self.  ! !
!Root methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 17:07:16'!
addAsFather: aPortfolio
	
	^ Body new addAsFather: aPortfolio.! !

!classRenamed: #PortfolioState as: #ParentPortfoliosState stamp: 'LH 11/8/2020 17:10:41'!
Smalltalk renameClassNamed: #PortfolioState as: #ParentPortfoliosState!
!Portfolio methodsFor: 'initialization' stamp: 'LH 11/8/2020 17:12:51' prior: 50874546 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	
	fatherPortfolios := Root new.
	! !
!Body methodsFor: 'intiliazing' stamp: 'LH 11/8/2020 17:14:33'!
intializeWith: aPortfolio

	parentPortfolios := OrderedCollection with: aPortfolio.! !
!Body class methodsFor: 'no messages' stamp: 'LH 11/8/2020 17:15:05'!
newWith: aPortfolio

	^self basicNew initializeWith: aPortfolio! !
!Root methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 17:15:29' prior: 50881664!
addAsFather: aPortfolio
	
	^ Body newWith: aPortfolio.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'LH 11/8/2020 17:16:51'!
TransactionContainer subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios fatherPortfolios parentState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialization' stamp: 'LH 11/8/2020 17:16:49' prior: 50881675 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	
	fatherPortfolios := OrderedCollection new.
	parentState := Root new.
	! !
!Portfolio methodsFor: 'validations' stamp: 'LH 11/8/2020 17:18:15' prior: 50880005!
validateAccountBeforeAdding: anAccount
	"validate that anAccount is not alredy in this portfolio or it's parents"
	
	
	parentState validateAccountBeforeAdding: anAccount to: self.
	
	"self ifItsARootPortfolioDo: [self validateAccountNotAlredyAdded: anAccount.] 
		elseDo: [fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountBeforeAdding: anAccount]  ]."
	
	"fatherPortfolios size = 0
		ifTrue: [self validateAccountNotAlredyAdded: anAccount.] 
		ifFalse:[fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountBeforeAdding: anAccount]  ]."

	! !
!Portfolio methodsFor: 'private' stamp: 'LH 11/8/2020 17:19:34' prior: 50876994!
addAsFather: aPortfolio 
	"Set aPortfolio as a father"

	fatherPortfolios add: aPortfolio.
	
	parentState := parentState addAsFather: aPortfolio.! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:19:45'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/8/2020 17:19:45'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/8/2020 17:19:45'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:19:45'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/8/2020 17:19:45'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:19:45'!
ERROR!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:19:45'!
ERROR!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:19:45'!
ERROR!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/8/2020 17:19:45'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/8/2020 17:19:45'!
ERROR!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/8/2020 17:19:45'!
ERROR!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/8/2020 17:19:45'!
ERROR!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/8/2020 17:19:45'!
ERROR!

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/8/2020 17:19:45'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/8/2020 17:19:45'!
ERROR!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/8/2020 17:19:45'!
ERROR!

!testRun: #PortfolioTest #test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/8/2020 17:19:45'!
ERROR!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/8/2020 17:19:45'!
ERROR!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/8/2020 17:19:45'!
ERROR!

!testRun: #PortfolioTest #test20CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/8/2020 17:19:46'!
ERROR!

!testRun: #PortfolioTest #test22APortfolioKnowsItsDirectAccounts stamp: 'LH 11/8/2020 17:19:46'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/8/2020 17:19:46'!
ERROR!

!testRun: #PortfolioTest #test23AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/8/2020 17:19:46'!
PASSED!

!testRun: #PortfolioTest #test24APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/8/2020 17:19:46'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/8/2020 17:19:46'!
PASSED!

!testRun: #PortfolioTest #test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/8/2020 17:19:46'!
ERROR!

!testRun: #PortfolioTest #test27AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/8/2020 17:19:46'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/8/2020 17:19:46'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:19:46'!
PASSED!

!testRun: #PortfolioTest #test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:19:46'!
ERROR!

!testRun: #PortfolioTest #test31AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/8/2020 17:19:46'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/8/2020 17:19:46'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/8/2020 17:19:46'!
PASSED!

!testRun: #PortfolioTest #test34APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/8/2020 17:19:46'!
ERROR!

!testRun: #PortfolioTest #test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/8/2020 17:19:46'!
ERROR!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:19:56'!
ERROR!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:20:00'!
ERROR!
!Body class methodsFor: 'instance creation' stamp: 'LH 11/8/2020 17:21:13' prior: 50881686!
newWith: aPortfolio

	^self basicNew initializeWith: aPortfolio! !
!Body methodsFor: 'intiliazing' stamp: 'LH 11/8/2020 17:21:26'!
initializeWith: aPortfolio

	parentPortfolios := OrderedCollection with: aPortfolio.! !

!methodRemoval: Body #intializeWith: stamp: 'LH 11/8/2020 17:21:26'!
intializeWith: aPortfolio

	parentPortfolios := OrderedCollection with: aPortfolio.!

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/8/2020 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/8/2020 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/8/2020 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/8/2020 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/8/2020 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/8/2020 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/8/2020 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/8/2020 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/8/2020 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/8/2020 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/8/2020 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/8/2020 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/8/2020 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/8/2020 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test20CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/8/2020 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsItsDirectAccounts stamp: 'LH 11/8/2020 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/8/2020 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test23AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/8/2020 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test24APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/8/2020 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/8/2020 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/8/2020 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test27AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/8/2020 17:21:37'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/8/2020 17:21:37'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:21:37'!
PASSED!

!testRun: #PortfolioTest #test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:21:37'!
PASSED!

!testRun: #PortfolioTest #test31AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/8/2020 17:21:37'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/8/2020 17:21:37'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/8/2020 17:21:37'!
PASSED!

!testRun: #PortfolioTest #test34APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/8/2020 17:21:37'!
PASSED!

!testRun: #PortfolioTest #test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/8/2020 17:21:37'!
PASSED!
!Body methodsFor: 'validations' stamp: 'LH 11/8/2020 17:23:25'!
validatePortfolioBeforeAdding: anAccount to: aPortfolio
	
	! !
!Root methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 17:24:40'!
validatePortfoliosBeforeAdding: aPortfolioToAdd to: aPortfolio

	self validatePortfolioNotAlreadyAdded: aPortfolioToAdd.
	aPortfolio accounts do:[:anAccount | self validateAccountBeforeAdding: anAccount] .! !
!Body methodsFor: 'validations' stamp: 'LH 11/8/2020 17:25:51' prior: 50882024!
validatePortfolioBeforeAdding: aPortfolioToAdd to: aPortfolio
	
	parentPortfolios do: [ :fatherPortfolio | (fatherPortfolio validatePortfolioBeforeAdding: aPortfolio)].  ! !
!Portfolio methodsFor: 'validations' stamp: 'LH 11/8/2020 17:27:15' prior: 50880154!
validatePortfolioBeforeAdding: aPortfolio
	"validate that aPortfolio is not in this portfolio nor it's parents; and that the portfolio's accounts aren't in this portfolio not it's parents"

	parentState validatePortfoliosBeforeAdding: aPortfolio to: self.
	
	
	"self ifItsARootPortfolioDo: [self validatePortfolioNotAlreadyAdded: aPortfolio.
							aPortfolio accounts do:[:anAccount | self validateAccountBeforeAdding: anAccount] .] 
						
			 elseDo: [fatherPortfolios do: [ :fatherPortfolio | (fatherPortfolio validatePortfolioBeforeAdding: aPortfolio)].  ]."




	"fatherPortfolios size = 0
		ifTrue: [self validatePortfolioNotAlreadyAdded: aPortfolio.
				aPortfolio accounts do:[:anAccount | self validateAccountBeforeAdding: anAccount] .] 
			
		ifFalse:[fatherPortfolios do: [ :fatherPortfolio | (fatherPortfolio validatePortfolioBeforeAdding: aPortfolio)].  ]."

	
	
	
! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:27:17'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/8/2020 17:27:17'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/8/2020 17:27:17'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:27:18'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/8/2020 17:27:18'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:27:18'!
ERROR!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:27:18'!
ERROR!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:27:18'!
ERROR!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/8/2020 17:27:18'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/8/2020 17:27:18'!
ERROR!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/8/2020 17:27:18'!
ERROR!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/8/2020 17:27:18'!
ERROR!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/8/2020 17:27:18'!
ERROR!

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/8/2020 17:27:18'!
FAILURE!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/8/2020 17:27:18'!
ERROR!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/8/2020 17:27:18'!
ERROR!

!testRun: #PortfolioTest #test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/8/2020 17:27:18'!
ERROR!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/8/2020 17:27:18'!
ERROR!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/8/2020 17:27:18'!
ERROR!

!testRun: #PortfolioTest #test20CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/8/2020 17:27:18'!
ERROR!

!testRun: #PortfolioTest #test22APortfolioKnowsItsDirectAccounts stamp: 'LH 11/8/2020 17:27:18'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/8/2020 17:27:18'!
ERROR!

!testRun: #PortfolioTest #test23AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/8/2020 17:27:18'!
PASSED!

!testRun: #PortfolioTest #test24APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/8/2020 17:27:18'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/8/2020 17:27:18'!
PASSED!

!testRun: #PortfolioTest #test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/8/2020 17:27:18'!
ERROR!

!testRun: #PortfolioTest #test27AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/8/2020 17:27:18'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/8/2020 17:27:18'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:27:18'!
PASSED!

!testRun: #PortfolioTest #test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:27:18'!
ERROR!

!testRun: #PortfolioTest #test31AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/8/2020 17:27:18'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/8/2020 17:27:18'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/8/2020 17:27:18'!
PASSED!

!testRun: #PortfolioTest #test34APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/8/2020 17:27:18'!
ERROR!

!testRun: #PortfolioTest #test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/8/2020 17:27:18'!
ERROR!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:27:23'!
ERROR!
!Root methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 17:27:54' prior: 50882029!
validatePortfoliosBeforeAdding: aPortfolioToAdd to: aPortfolio

	aPortfolio validatePortfolioNotAlreadyAdded: aPortfolioToAdd.
	aPortfolioToAdd accounts do:[:anAccount | self validateAccountBeforeAdding: anAccount] .! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:27:58'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/8/2020 17:27:58'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/8/2020 17:27:58'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:27:58'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/8/2020 17:27:58'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:27:58'!
PASSED!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:27:58'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:27:58'!
ERROR!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/8/2020 17:27:58'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/8/2020 17:27:58'!
ERROR!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/8/2020 17:27:58'!
ERROR!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/8/2020 17:27:58'!
PASSED!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/8/2020 17:27:58'!
ERROR!

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/8/2020 17:27:58'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/8/2020 17:27:58'!
PASSED!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/8/2020 17:27:58'!
PASSED!

!testRun: #PortfolioTest #test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/8/2020 17:27:58'!
ERROR!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/8/2020 17:27:58'!
FAILURE!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/8/2020 17:27:58'!
ERROR!

!testRun: #PortfolioTest #test20CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/8/2020 17:27:58'!
FAILURE!

!testRun: #PortfolioTest #test22APortfolioKnowsItsDirectAccounts stamp: 'LH 11/8/2020 17:27:58'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/8/2020 17:27:58'!
ERROR!

!testRun: #PortfolioTest #test23AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/8/2020 17:27:58'!
PASSED!

!testRun: #PortfolioTest #test24APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/8/2020 17:27:58'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/8/2020 17:27:58'!
PASSED!

!testRun: #PortfolioTest #test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/8/2020 17:27:58'!
PASSED!

!testRun: #PortfolioTest #test27AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/8/2020 17:27:58'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/8/2020 17:27:58'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:27:58'!
PASSED!

!testRun: #PortfolioTest #test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:27:58'!
ERROR!

!testRun: #PortfolioTest #test31AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/8/2020 17:27:58'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/8/2020 17:27:58'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/8/2020 17:27:58'!
PASSED!

!testRun: #PortfolioTest #test34APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/8/2020 17:27:58'!
ERROR!

!testRun: #PortfolioTest #test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/8/2020 17:27:58'!
ERROR!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:28:01'!
ERROR!
!Body methodsFor: 'validations' stamp: 'LH 11/8/2020 17:29:10'!
validatePortfoliosBeforeAdding: aPortfolioToAdd to: aPortfolio
	
	parentPortfolios do: [ :fatherPortfolio | (fatherPortfolio validatePortfolioBeforeAdding: aPortfolio)].  ! !

!methodRemoval: Body #validatePortfolioBeforeAdding:to: stamp: 'LH 11/8/2020 17:29:11'!
validatePortfolioBeforeAdding: aPortfolioToAdd to: aPortfolio
	
	parentPortfolios do: [ :fatherPortfolio | (fatherPortfolio validatePortfolioBeforeAdding: aPortfolio)].  !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:29:16'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/8/2020 17:29:17'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/8/2020 17:29:17'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:29:17'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/8/2020 17:29:17'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:29:17'!
PASSED!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:29:17'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:29:17'!
ERROR!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/8/2020 17:29:17'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/8/2020 17:29:17'!
ERROR!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/8/2020 17:29:17'!
ERROR!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/8/2020 17:29:17'!
PASSED!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/8/2020 17:29:17'!
ERROR!

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/8/2020 17:29:17'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/8/2020 17:29:17'!
PASSED!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/8/2020 17:29:17'!
PASSED!

!testRun: #PortfolioTest #test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/8/2020 17:29:17'!
ERROR!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/8/2020 17:29:17'!
PASSED!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/8/2020 17:29:17'!
ERROR!

!testRun: #PortfolioTest #test20CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/8/2020 17:29:17'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsItsDirectAccounts stamp: 'LH 11/8/2020 17:29:17'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/8/2020 17:29:17'!
ERROR!

!testRun: #PortfolioTest #test23AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/8/2020 17:29:17'!
PASSED!

!testRun: #PortfolioTest #test24APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/8/2020 17:29:17'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/8/2020 17:29:17'!
PASSED!

!testRun: #PortfolioTest #test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/8/2020 17:29:17'!
PASSED!

!testRun: #PortfolioTest #test27AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/8/2020 17:29:17'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/8/2020 17:29:17'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:29:17'!
PASSED!

!testRun: #PortfolioTest #test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:29:17'!
ERROR!

!testRun: #PortfolioTest #test31AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/8/2020 17:29:17'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/8/2020 17:29:17'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/8/2020 17:29:17'!
PASSED!

!testRun: #PortfolioTest #test34APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/8/2020 17:29:17'!
ERROR!

!testRun: #PortfolioTest #test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/8/2020 17:29:17'!
ERROR!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:29:19'!
ERROR!
!Body methodsFor: 'validations' stamp: 'LH 11/8/2020 17:30:42' prior: 50882354!
validatePortfoliosBeforeAdding: aPortfolioToAdd to: aPortfolio
	
	parentPortfolios do: [ :aParentPortfolio | (aParentPortfolio validatePortfolioBeforeAdding: aPortfolio)].  ! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:32:42'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/8/2020 17:32:42'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/8/2020 17:32:42'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:32:42'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/8/2020 17:32:42'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:32:42'!
PASSED!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:32:42'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:32:42'!
ERROR!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/8/2020 17:32:42'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/8/2020 17:32:42'!
ERROR!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/8/2020 17:32:42'!
ERROR!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/8/2020 17:32:42'!
PASSED!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/8/2020 17:32:42'!
ERROR!

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/8/2020 17:32:42'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/8/2020 17:32:42'!
PASSED!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/8/2020 17:32:42'!
PASSED!

!testRun: #PortfolioTest #test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/8/2020 17:32:42'!
ERROR!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/8/2020 17:32:42'!
PASSED!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/8/2020 17:32:42'!
ERROR!

!testRun: #PortfolioTest #test20CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/8/2020 17:32:42'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsItsDirectAccounts stamp: 'LH 11/8/2020 17:32:42'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/8/2020 17:32:42'!
ERROR!

!testRun: #PortfolioTest #test23AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/8/2020 17:32:42'!
PASSED!

!testRun: #PortfolioTest #test24APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/8/2020 17:32:42'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/8/2020 17:32:42'!
PASSED!

!testRun: #PortfolioTest #test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/8/2020 17:32:42'!
PASSED!

!testRun: #PortfolioTest #test27AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/8/2020 17:32:42'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/8/2020 17:32:42'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:32:42'!
PASSED!

!testRun: #PortfolioTest #test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:32:42'!
ERROR!

!testRun: #PortfolioTest #test31AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/8/2020 17:32:42'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/8/2020 17:32:42'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/8/2020 17:32:42'!
PASSED!

!testRun: #PortfolioTest #test34APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/8/2020 17:32:42'!
ERROR!

!testRun: #PortfolioTest #test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/8/2020 17:32:42'!
ERROR!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:32:45'!
ERROR!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:33:33'!
ERROR!
!Body methodsFor: 'validations' stamp: 'LH 11/8/2020 17:34:28' prior: 50882503!
validatePortfoliosBeforeAdding: aPortfolioToAdd to: aPortfolio
	
	parentPortfolios do: [ :aParentPortfolio | (aParentPortfolio validatePortfolioBeforeAdding: aPortfolioToAdd)].  ! !

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:34:36'!
PASSED!
!Root methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 17:35:10' prior: 50882212!
validatePortfoliosBeforeAdding: aPortfolioToAdd to: aPortfolio

	aPortfolio validatePortfolioNotAlreadyAdded: aPortfolioToAdd.
	aPortfolioToAdd accounts do:[:anAccount | aPortfolio validateAccountBeforeAdding: anAccount] .! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:35:13'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/8/2020 17:35:13'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/8/2020 17:35:13'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:35:13'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/8/2020 17:35:13'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:35:13'!
PASSED!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:35:13'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:35:13'!
PASSED!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/8/2020 17:35:13'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/8/2020 17:35:13'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/8/2020 17:35:13'!
PASSED!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/8/2020 17:35:13'!
PASSED!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/8/2020 17:35:13'!
PASSED!

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/8/2020 17:35:13'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/8/2020 17:35:13'!
PASSED!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/8/2020 17:35:14'!
PASSED!

!testRun: #PortfolioTest #test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/8/2020 17:35:14'!
PASSED!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/8/2020 17:35:14'!
PASSED!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/8/2020 17:35:14'!
PASSED!

!testRun: #PortfolioTest #test20CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/8/2020 17:35:14'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsItsDirectAccounts stamp: 'LH 11/8/2020 17:35:14'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/8/2020 17:35:14'!
PASSED!

!testRun: #PortfolioTest #test23AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/8/2020 17:35:14'!
PASSED!

!testRun: #PortfolioTest #test24APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/8/2020 17:35:14'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/8/2020 17:35:14'!
PASSED!

!testRun: #PortfolioTest #test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/8/2020 17:35:14'!
PASSED!

!testRun: #PortfolioTest #test27AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/8/2020 17:35:14'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/8/2020 17:35:14'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:35:14'!
PASSED!

!testRun: #PortfolioTest #test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:35:14'!
PASSED!

!testRun: #PortfolioTest #test31AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/8/2020 17:35:14'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/8/2020 17:35:14'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/8/2020 17:35:14'!
PASSED!

!testRun: #PortfolioTest #test34APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/8/2020 17:35:14'!
PASSED!

!testRun: #PortfolioTest #test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/8/2020 17:35:14'!
PASSED!
!Portfolio methodsFor: 'private' stamp: 'LH 11/8/2020 17:36:01' prior: 50881735!
addAsFather: aPortfolio 
	"Set aPortfolio as a father"

	"fatherPortfolios add: aPortfolio."
	
	parentState := parentState addAsFather: aPortfolio.! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test20CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsItsDirectAccounts stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test23AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test24APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test27AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:36:10'!
PASSED!

!testRun: #PortfolioTest #test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:36:11'!
PASSED!

!testRun: #PortfolioTest #test31AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/8/2020 17:36:11'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/8/2020 17:36:11'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/8/2020 17:36:11'!
PASSED!

!testRun: #PortfolioTest #test34APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/8/2020 17:36:11'!
PASSED!

!testRun: #PortfolioTest #test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/8/2020 17:36:11'!
PASSED!
!Portfolio methodsFor: 'initialization' stamp: 'LH 11/8/2020 17:36:37' prior: 50881706 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	
	parentState := Root new.
	
	"fatherPortfolios := OrderedCollection new."! !
!Portfolio methodsFor: 'validations' stamp: 'LH 11/8/2020 17:37:04' prior: 50879994!
ifItsARootPortfolioDo: rootClosure elseDo: normalPortfolioClosure
	"if this portfolio has no parents, do rootCLosure. else do normalPortfolioClosure"

	"fatherPortfolios size = 0
		ifTrue: [rootClosure value] 
			
		ifFalse:[normalPortfolioClosure value]."

	
	
	
! !
!Portfolio methodsFor: 'validations' stamp: 'LH 11/8/2020 17:37:28' prior: 50879630!
validatePortfolioNotAlreadyAdded: aPortfolio
	"validate if a Portfolio is this portfolio"
	
	(self includesPortfolio: aPortfolio) ifTrue: [self error: Portfolio errorMessagePortfolioAlreadyAdded].
	(self = aPortfolio) ifTrue:[self error: Portfolio errorMessagePortfolioAlreadyAdded].

	"(self includesFatherPortfolio: aPortfolio) ifTrue: [self error: Portfolio errorMessagePortfolioAlreadyAdded]."
! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:37:47'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/8/2020 17:37:47'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/8/2020 17:37:47'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:37:47'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/8/2020 17:37:47'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:37:47'!
PASSED!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:37:47'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:37:47'!
PASSED!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/8/2020 17:37:47'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/8/2020 17:37:48'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/8/2020 17:37:48'!
PASSED!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/8/2020 17:37:48'!
PASSED!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/8/2020 17:37:48'!
PASSED!

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/8/2020 17:37:48'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/8/2020 17:37:48'!
PASSED!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/8/2020 17:37:48'!
PASSED!

!testRun: #PortfolioTest #test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/8/2020 17:37:48'!
PASSED!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/8/2020 17:37:48'!
PASSED!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/8/2020 17:37:48'!
PASSED!

!testRun: #PortfolioTest #test20CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/8/2020 17:37:48'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsItsDirectAccounts stamp: 'LH 11/8/2020 17:37:48'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/8/2020 17:37:48'!
PASSED!

!testRun: #PortfolioTest #test23AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/8/2020 17:37:48'!
PASSED!

!testRun: #PortfolioTest #test24APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/8/2020 17:37:48'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/8/2020 17:37:48'!
PASSED!

!testRun: #PortfolioTest #test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/8/2020 17:37:48'!
PASSED!

!testRun: #PortfolioTest #test27AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/8/2020 17:37:48'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/8/2020 17:37:48'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:37:48'!
PASSED!

!testRun: #PortfolioTest #test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:37:48'!
PASSED!

!testRun: #PortfolioTest #test31AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/8/2020 17:37:48'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/8/2020 17:37:48'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/8/2020 17:37:48'!
PASSED!

!testRun: #PortfolioTest #test34APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/8/2020 17:37:48'!
PASSED!

!testRun: #PortfolioTest #test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/8/2020 17:37:48'!
PASSED!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'LH 11/8/2020 17:38:09'!
TransactionContainer subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parentState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'LH 11/8/2020 17:38:27'!
TransactionContainer subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parentPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 17:38:27' prior: 50881714!
validateAccountBeforeAdding: anAccount
	"validate that anAccount is not alredy in this portfolio or it's parents"
	
	
	parentPortfolios validateAccountBeforeAdding: anAccount to: self.
	
	"self ifItsARootPortfolioDo: [self validateAccountNotAlredyAdded: anAccount.] 
		elseDo: [fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountBeforeAdding: anAccount]  ]."
	
	"fatherPortfolios size = 0
		ifTrue: [self validateAccountNotAlredyAdded: anAccount.] 
		ifFalse:[fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountBeforeAdding: anAccount]  ]."

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 17:38:27' prior: 50882938 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	
	parentPortfolios := Root new.
	
	"fatherPortfolios := OrderedCollection new."! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 17:38:27' prior: 50882048!
validatePortfolioBeforeAdding: aPortfolio
	"validate that aPortfolio is not in this portfolio nor it's parents; and that the portfolio's accounts aren't in this portfolio not it's parents"

	parentPortfolios validatePortfoliosBeforeAdding: aPortfolio to: self.
	
	
	"self ifItsARootPortfolioDo: [self validatePortfolioNotAlreadyAdded: aPortfolio.
							aPortfolio accounts do:[:anAccount | self validateAccountBeforeAdding: anAccount] .] 
						
			 elseDo: [fatherPortfolios do: [ :fatherPortfolio | (fatherPortfolio validatePortfolioBeforeAdding: aPortfolio)].  ]."




	"fatherPortfolios size = 0
		ifTrue: [self validatePortfolioNotAlreadyAdded: aPortfolio.
				aPortfolio accounts do:[:anAccount | self validateAccountBeforeAdding: anAccount] .] 
			
		ifFalse:[fatherPortfolios do: [ :fatherPortfolio | (fatherPortfolio validatePortfolioBeforeAdding: aPortfolio)].  ]."

	
	
	
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LH 11/8/2020 17:38:27' prior: 50882800!
addAsFather: aPortfolio 
	"Set aPortfolio as a father"

	"fatherPortfolios add: aPortfolio."
	
	parentPortfolios := parentPortfolios addAsFather: aPortfolio.! !

!classRenamed: #ParentPortfoliosState as: #ParentPortfolios stamp: 'LH 11/8/2020 17:38:35'!
Smalltalk renameClassNamed: #ParentPortfoliosState as: #ParentPortfolios!
!ParentPortfolios class methodsFor: 'no messages' stamp: 'LH 11/8/2020 17:40:12'!
newRoot

	^Root new! !
!Portfolio methodsFor: 'initialization' stamp: 'LH 11/8/2020 17:40:45' prior: 50883143 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	
	parentPortfolios := ParentPortfolios new.
	
	"fatherPortfolios := OrderedCollection new."! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:40:46'!
ERROR!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/8/2020 17:40:46'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/8/2020 17:40:46'!
ERROR!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:40:46'!
ERROR!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/8/2020 17:40:46'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:40:46'!
ERROR!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:40:46'!
ERROR!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:40:46'!
ERROR!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/8/2020 17:40:46'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/8/2020 17:40:46'!
ERROR!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/8/2020 17:40:46'!
ERROR!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/8/2020 17:40:46'!
ERROR!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/8/2020 17:40:46'!
ERROR!

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/8/2020 17:40:46'!
FAILURE!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/8/2020 17:40:46'!
ERROR!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/8/2020 17:40:46'!
ERROR!

!testRun: #PortfolioTest #test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/8/2020 17:40:46'!
ERROR!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/8/2020 17:40:46'!
ERROR!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/8/2020 17:40:46'!
ERROR!

!testRun: #PortfolioTest #test20CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/8/2020 17:40:46'!
ERROR!

!testRun: #PortfolioTest #test22APortfolioKnowsItsDirectAccounts stamp: 'LH 11/8/2020 17:40:46'!
ERROR!

!testRun: #PortfolioTest #test22APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/8/2020 17:40:46'!
ERROR!

!testRun: #PortfolioTest #test23AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/8/2020 17:40:46'!
PASSED!

!testRun: #PortfolioTest #test24APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/8/2020 17:40:46'!
ERROR!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/8/2020 17:40:46'!
ERROR!

!testRun: #PortfolioTest #test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/8/2020 17:40:47'!
ERROR!

!testRun: #PortfolioTest #test27AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/8/2020 17:40:47'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/8/2020 17:40:47'!
ERROR!

!testRun: #PortfolioTest #test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:40:47'!
ERROR!

!testRun: #PortfolioTest #test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:40:47'!
ERROR!

!testRun: #PortfolioTest #test31AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/8/2020 17:40:47'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/8/2020 17:40:47'!
ERROR!

!testRun: #PortfolioTest #test33APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/8/2020 17:40:47'!
ERROR!

!testRun: #PortfolioTest #test34APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/8/2020 17:40:47'!
ERROR!

!testRun: #PortfolioTest #test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/8/2020 17:40:47'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'LH 11/8/2020 17:40:59' prior: 50883201 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	
	parentPortfolios := ParentPortfolios newRoot.
	
	"fatherPortfolios := OrderedCollection new."! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test20CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsItsDirectAccounts stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test23AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test24APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test27AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test31AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test34APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/8/2020 17:41:00'!
PASSED!

!testRun: #PortfolioTest #test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/8/2020 17:41:00'!
PASSED!
!Portfolio methodsFor: 'initialization' stamp: 'LH 11/8/2020 17:41:23' prior: 50883340 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	
	parentPortfolios := ParentPortfolios for: self.
	
	"fatherPortfolios := OrderedCollection new."! !
!Portfolio methodsFor: 'initialization' stamp: 'LH 11/8/2020 17:41:29' prior: 50883480 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	
	parentPortfolios := ParentPortfolios forPortfolio: self.
	
	"fatherPortfolios := OrderedCollection new."! !
!ParentPortfolios class methodsFor: 'instance creation' stamp: 'LH 11/8/2020 17:42:25'!
forPortfolio: aPortfolio

	^Root new initialize: aPortfolio! !

Root class
	instanceVariableNames: 'ofPortfolio'!

!classDefinition: 'Root class' category: 'Portfolio-Ejercicio' stamp: 'LH 11/8/2020 17:42:46'!
Root class
	instanceVariableNames: 'ofPortfolio'!

Root class
	instanceVariableNames: ''!

!classDefinition: 'Root class' category: 'Portfolio-Ejercicio' stamp: 'LH 11/8/2020 17:43:12'!
Root class
	instanceVariableNames: ''!

ParentPortfolios subclass: #Root
	instanceVariableNames: 'ofPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Root category: 'Portfolio-Ejercicio' stamp: 'LH 11/8/2020 17:43:18'!
ParentPortfolios subclass: #Root
	instanceVariableNames: 'ofPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Root methodsFor: 'initialization' stamp: 'LH 11/8/2020 17:44:11'!
initialize: aPortfolio

	ofPortfolio := aPortfolio.! !
!Root methodsFor: 'adding' stamp: 'LH 11/8/2020 17:45:15' prior: 50881691!
addAsFather: aPortfolio
	
	^ Body newWith: aPortfolio for: ofPortfolio.! !
!Body class methodsFor: 'instance creation' stamp: 'LH 11/8/2020 17:45:48'!
newWith: aParentPortfolio for: aPortfolio

	^self basicNew initializeWith: aParentPortfolio for: aPortfolio.! !

!classDefinition: #Body category: 'Portfolio-Ejercicio' stamp: 'LH 11/8/2020 17:46:36'!
ParentPortfolios subclass: #Body
	instanceVariableNames: 'parentPortfolios ofPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Body methodsFor: 'intiliazing' stamp: 'LH 11/8/2020 17:46:34'!
initializeWith: aParentPortfolio for: aPortfolio

	parentPortfolios := OrderedCollection with: aParentPortfolio.
	
	ofPortfolio := aPortfolio.! !

!methodRemoval: Body class #newWith: stamp: 'LH 11/8/2020 17:46:49'!
newWith: aPortfolio

	^self basicNew initializeWith: aPortfolio!

!methodRemoval: Body #initializeWith: stamp: 'LH 11/8/2020 17:47:00'!
initializeWith: aPortfolio

	parentPortfolios := OrderedCollection with: aPortfolio.!

Object subclass: #ParentPortfolios
	instanceVariableNames: 'ofPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #ParentPortfolios
	instanceVariableNames: 'childPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ParentPortfolios category: 'Portfolio-Ejercicio' stamp: 'LH 11/8/2020 17:47:39'!
Object subclass: #ParentPortfolios
	instanceVariableNames: 'childPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

ParentPortfolios subclass: #Body
	instanceVariableNames: 'parentPortfolios '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Body category: 'Portfolio-Ejercicio' stamp: 'LH 11/8/2020 17:47:45'!
ParentPortfolios subclass: #Body
	instanceVariableNames: 'parentPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

ParentPortfolios subclass: #Root
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Root category: 'Portfolio-Ejercicio' stamp: 'LH 11/8/2020 17:47:49'!
ParentPortfolios subclass: #Root
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Root methodsFor: 'adding' stamp: 'LH 11/8/2020 17:48:03' prior: 50883532!
addAsFather: aPortfolio
	
	^ Body newWith: aPortfolio for: childPortfolio.! !
!Root methodsFor: 'initialization' stamp: 'LH 11/8/2020 17:48:16' prior: 50883527!
initialize: aPortfolio

	childPortfolio := aPortfolio.! !
!Body methodsFor: 'intiliazing' stamp: 'LH 11/8/2020 17:48:49' prior: 50883551!
initializeWith: aParentPortfolio for: aPortfolio

	parentPortfolios := OrderedCollection with: aParentPortfolio.
	
	childPortfolio := aPortfolio.! !
!Body methodsFor: 'validations' stamp: 'LH 11/8/2020 17:50:14'!
validateAccountBeforeAdding: anAccount
	
	parentPortfolios do: [:aParentPortfolio | aParentPortfolio validateAccountBeforeAdding: anAccount].  ! !
!Body methodsFor: 'validations' stamp: 'LH 11/8/2020 17:50:35'!
validatePortfoliosBeforeAdding: aPortfolioToAdd
	
	parentPortfolios do: [ :aParentPortfolio | (aParentPortfolio validatePortfolioBeforeAdding: aPortfolioToAdd)].  ! !
!Root methodsFor: 'validations' stamp: 'LH 11/8/2020 17:50:53'!
validateAccountBeforeAdding: anAccount

	childPortfolio validateAccountNotAlredyAdded: anAccount.! !
!Root methodsFor: 'validations' stamp: 'LH 11/8/2020 17:51:08'!
validatePortfoliosBeforeAdding: aPortfolioToAdd

	childPortfolio validatePortfolioNotAlreadyAdded: aPortfolioToAdd.
	aPortfolioToAdd accounts do:[:anAccount | childPortfolio validateAccountBeforeAdding: anAccount] .! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:51:11'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/8/2020 17:51:11'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/8/2020 17:51:11'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:51:11'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/8/2020 17:51:11'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:51:11'!
PASSED!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:51:11'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:51:11'!
PASSED!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/8/2020 17:51:11'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/8/2020 17:51:11'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/8/2020 17:51:11'!
PASSED!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/8/2020 17:51:12'!
PASSED!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/8/2020 17:51:12'!
PASSED!

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/8/2020 17:51:12'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/8/2020 17:51:12'!
PASSED!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/8/2020 17:51:12'!
PASSED!

!testRun: #PortfolioTest #test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/8/2020 17:51:12'!
PASSED!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/8/2020 17:51:12'!
PASSED!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/8/2020 17:51:12'!
PASSED!

!testRun: #PortfolioTest #test20CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/8/2020 17:51:12'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsItsDirectAccounts stamp: 'LH 11/8/2020 17:51:12'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/8/2020 17:51:12'!
PASSED!

!testRun: #PortfolioTest #test23AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/8/2020 17:51:12'!
PASSED!

!testRun: #PortfolioTest #test24APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/8/2020 17:51:12'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/8/2020 17:51:12'!
PASSED!

!testRun: #PortfolioTest #test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/8/2020 17:51:12'!
PASSED!

!testRun: #PortfolioTest #test27AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/8/2020 17:51:12'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/8/2020 17:51:12'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:51:12'!
PASSED!

!testRun: #PortfolioTest #test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:51:12'!
PASSED!

!testRun: #PortfolioTest #test31AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/8/2020 17:51:12'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/8/2020 17:51:12'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/8/2020 17:51:12'!
PASSED!

!testRun: #PortfolioTest #test34APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/8/2020 17:51:12'!
PASSED!

!testRun: #PortfolioTest #test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/8/2020 17:51:12'!
PASSED!
!Portfolio methodsFor: 'validations' stamp: 'LH 11/8/2020 17:51:26' prior: 50883121!
validateAccountBeforeAdding: anAccount
	"validate that anAccount is not alredy in this portfolio or it's parents"
	
	
	parentPortfolios validateAccountBeforeAdding: anAccount.
	
	"self ifItsARootPortfolioDo: [self validateAccountNotAlredyAdded: anAccount.] 
		elseDo: [fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountBeforeAdding: anAccount]  ]."
	
	"fatherPortfolios size = 0
		ifTrue: [self validateAccountNotAlredyAdded: anAccount.] 
		ifFalse:[fatherPortfolios do: [:aPortfolio | aPortfolio validateAccountBeforeAdding: anAccount]  ]."

	! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test20CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsItsDirectAccounts stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test23AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test24APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test27AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test31AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/8/2020 17:51:27'!
PASSED!

!testRun: #PortfolioTest #test34APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/8/2020 17:51:28'!
PASSED!

!testRun: #PortfolioTest #test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/8/2020 17:51:28'!
PASSED!
!Portfolio methodsFor: 'validations' stamp: 'LH 11/8/2020 17:51:38' prior: 50883152!
validatePortfolioBeforeAdding: aPortfolio
	"validate that aPortfolio is not in this portfolio nor it's parents; and that the portfolio's accounts aren't in this portfolio not it's parents"

	parentPortfolios validatePortfoliosBeforeAdding: aPortfolio .
	
	
	"self ifItsARootPortfolioDo: [self validatePortfolioNotAlreadyAdded: aPortfolio.
							aPortfolio accounts do:[:anAccount | self validateAccountBeforeAdding: anAccount] .] 
						
			 elseDo: [fatherPortfolios do: [ :fatherPortfolio | (fatherPortfolio validatePortfolioBeforeAdding: aPortfolio)].  ]."




	"fatherPortfolios size = 0
		ifTrue: [self validatePortfolioNotAlreadyAdded: aPortfolio.
				aPortfolio accounts do:[:anAccount | self validateAccountBeforeAdding: anAccount] .] 
			
		ifFalse:[fatherPortfolios do: [ :fatherPortfolio | (fatherPortfolio validatePortfolioBeforeAdding: aPortfolio)].  ]."

	
	
	
! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test20CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsItsDirectAccounts stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test23AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test24APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test27AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test31AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test34APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!testRun: #PortfolioTest #test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/8/2020 17:51:40'!
PASSED!

!methodRemoval: Body #validateAccountBeforeAdding:to: stamp: 'LH 11/8/2020 17:51:53'!
validateAccountBeforeAdding: anAccount to: aPortfolio
	
	parentPortfolios do: [:aParentPortfolio | aParentPortfolio validateAccountBeforeAdding: anAccount].  !

!methodRemoval: Body #validatePortfoliosBeforeAdding:to: stamp: 'LH 11/8/2020 17:51:55'!
validatePortfoliosBeforeAdding: aPortfolioToAdd to: aPortfolio
	
	parentPortfolios do: [ :aParentPortfolio | (aParentPortfolio validatePortfolioBeforeAdding: aPortfolioToAdd)].  !

!methodRemoval: Root #validateAccountBeforeAdding:to: stamp: 'LH 11/8/2020 17:52:00'!
validateAccountBeforeAdding: anAccount to: aPortfolio

	aPortfolio validateAccountNotAlredyAdded: anAccount.!

!methodRemoval: Root #validatePortfoliosBeforeAdding:to: stamp: 'LH 11/8/2020 17:52:01'!
validatePortfoliosBeforeAdding: aPortfolioToAdd to: aPortfolio

	aPortfolio validatePortfolioNotAlreadyAdded: aPortfolioToAdd.
	aPortfolioToAdd accounts do:[:anAccount | aPortfolio validateAccountBeforeAdding: anAccount] .!
!ParentPortfolios methodsFor: 'no messages' stamp: 'LH 11/8/2020 17:52:41'!
addAsFather: aPortfolio

	self subclassResponsibility ! !
!ParentPortfolios methodsFor: 'validate' stamp: 'LH 11/8/2020 17:53:15'!
validateAccountBeforeAdding: anAccount

	^self subclassResponsibility ! !
!ParentPortfolios methodsFor: 'validate' stamp: 'LH 11/8/2020 17:53:25'!
validatePortfoliosBeforeAdding: anAccount

	^self subclassResponsibility ! !

!testRun: #PortfolioTest #test01AnAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioHasNoAccountsInitially stamp: 'LH 11/8/2020 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioDoesNotHaveMoreAccountsThanAdded stamp: 'LH 11/8/2020 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test04MoreThanOneAccountCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioDoesNotHavePortfoliosInitialy stamp: 'LH 11/8/2020 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test06AnEmptyPortfolioCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test07VariousEmptyPortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test08PortfoliosCanBeAddedToAPortfolio stamp: 'LH 11/8/2020 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test09APortfolioWithPortfoliosCanBeAddedToAportfolio stamp: 'LH 11/8/2020 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAnAccountToAPortfolioWhosePortfolioHasTheAccount stamp: 'LH 11/8/2020 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAnAccountToAPortfolioWhoHasAPortfolioWithTheAccount stamp: 'LH 11/8/2020 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test12APortfolioCantHaveRepeatedAccounts stamp: 'LH 11/8/2020 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test13APortfolioCanNotHaveRepeatedPortfolios stamp: 'LH 11/8/2020 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test14APortffolioCantHaveItself stamp: 'LH 11/8/2020 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAnAccountToAPortfolioWithAParentThatHasTheAccount stamp: 'LH 11/8/2020 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test16CanNotAddAnAccountToAPortfolioWhoseParentHasTheAccount stamp: 'LH 11/8/2020 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test17CanNotAddAnAccountToAPortfolioWithAPredecesorsThatHasTheAccount stamp: 'LH 11/8/2020 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test18CantAddAPortfolioWhenItIsAParent stamp: 'LH 11/8/2020 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test19CantAddAPortfolioWhenItIsAPredecesor stamp: 'LH 11/8/2020 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test20CantAddAPortfolioWhenAPredecesorAlredyHasIt stamp: 'LH 11/8/2020 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsItsDirectAccounts stamp: 'LH 11/8/2020 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test22APortfolioKnowsTheAccountsOfHisPortfolios stamp: 'LH 11/8/2020 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test23AnEmptyPortfolioHasABalanceOf0 stamp: 'LH 11/8/2020 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test24APortfolioWithOneAccountHasTheBalanceOfThatAccount stamp: 'LH 11/8/2020 17:53:30'!
PASSED!

!testRun: #PortfolioTest #test25TheBalanceOfAPortfolioWithNoPortfoliosIsTheSumOfHisAccounts stamp: 'LH 11/8/2020 17:53:30'!
PASSED!

!testRun: #PortfolioTest #test26TheBalanceOfAPortfolioIsTheSumOfHisAccountsAndPortfolios stamp: 'LH 11/8/2020 17:53:30'!
PASSED!

!testRun: #PortfolioTest #test27AnEmptyPortfolioHasNoRegisteredTransactions stamp: 'LH 11/8/2020 17:53:30'!
PASSED!

!testRun: #PortfolioTest #test28APortfolioWithOneAccountHasItsRegisteredTransactions stamp: 'LH 11/8/2020 17:53:30'!
PASSED!

!testRun: #PortfolioTest #test29APortfolioWithManyAccountsHasItsAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:53:30'!
PASSED!

!testRun: #PortfolioTest #test30APortfolioHasItsPortfoliosAndAccountsRegisteredTransactions stamp: 'LH 11/8/2020 17:53:30'!
PASSED!

!testRun: #PortfolioTest #test31AnEmptyPortfolioHasNoTransactions stamp: 'LH 11/8/2020 17:53:30'!
PASSED!

!testRun: #PortfolioTest #test32APortfolioWithOneAccountHasItsTransactions stamp: 'LH 11/8/2020 17:53:30'!
PASSED!

!testRun: #PortfolioTest #test33APortfolioWithManyAccountsHasItsAccountsTransactions stamp: 'LH 11/8/2020 17:53:30'!
PASSED!

!testRun: #PortfolioTest #test34APortfolioHasItsPortfoliosAndAccountsTransaction stamp: 'LH 11/8/2020 17:53:30'!
PASSED!

!testRun: #PortfolioTest #test35CanNotAddAPortfolioWithAccountsAlredyInTheParentsOfTheRevceiver stamp: 'LH 11/8/2020 17:53:30'!
PASSED!

----SNAPSHOT----(8 November 2020 17:53:40) CuisUniversity-4384.image priorSource: 17598680!