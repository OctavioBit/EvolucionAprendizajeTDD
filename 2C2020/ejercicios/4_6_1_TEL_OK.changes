

----STARTUP---- (29 October 2020 17:06:55) as /home/grosinov/linux64/CuisUniversity-4383.image!


TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliTest category: 'Terni Lapilli' stamp: 'GR 10/29/2020 17:19:51'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilliTest methodsFor: 'nil' stamp: 'GR 10/29/2020 17:41:06'!
test01XCanPlaceAPieceInXTurnOnEmptyPosition! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 17:41:31'!
test02XCanNotPlaceAPieceInOTurn! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 17:41:53'!
test01XCanPlaceAPieceInItsTurnOnEmptyPosition! !

!methodRemoval: TerniLapilliTest #test01XCanPlaceAPieceInXTurnOnEmptyPosition stamp: 'GR 10/29/2020 17:41:53'!
test01XCanPlaceAPieceInXTurnOnEmptyPosition!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 17:44:35'!
test03XCanMoveAPieceToEmptyPosition! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 17:46:06'!
test03OCanPlaceAPieceInItsTurnOnEmptyPosition! !

!methodRemoval: TerniLapilliTest #test03XCanMoveAPieceToEmptyPosition stamp: 'GR 10/29/2020 17:46:12'!
test03XCanMoveAPieceToEmptyPosition!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 18:04:31'!
test01GameStartsWithXTurn! !

!methodRemoval: TerniLapilliTest #test01XCanPlaceAPieceInItsTurnOnEmptyPosition stamp: 'GR 10/29/2020 18:04:31'!
test01XCanPlaceAPieceInItsTurnOnEmptyPosition!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 18:04:49'!
test02AfterXTurnIsOTurn! !

!methodRemoval: TerniLapilliTest #test02XCanNotPlaceAPieceInOTurn stamp: 'GR 10/29/2020 18:04:49'!
test02XCanNotPlaceAPieceInOTurn!

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'GR 10/29/2020 18:13:37'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'turn occupiedPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 18:12:11' prior: 50912550!
test01GameStartsWithXTurn

	| juego |

	juego := TerniLapilli new.
	
	self assert: juego isPlayingX.! !

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 18:13:43'!
ERROR!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 18:13:43'!
ERROR!
!TerniLapilli methodsFor: 'accessing' stamp: 'GR 10/29/2020 18:13:50'!
isPlayingX
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'accessing' stamp: 'GR 10/29/2020 18:14:02' prior: 50912587!
isPlayingX
	
	^turn = 'X'! !

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 18:14:34'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 18:15:22' prior: 50912575!
test01GameStartsWithXTurn

	| juego |

	juego := TerniLapilli new.
	
	self assert: juego isPlayingX.! !
!TerniLapilli methodsFor: 'nil' stamp: 'GR 10/29/2020 18:19:27' overrides: 16896425!
initialize

	turn := 'X'.
	occupiedPositions  := OrderedCollection new.! !

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 18:19:41'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 18:19:43'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 18:21:05' prior: 50912559!
test02AfterXTurnIsOTurn

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	
	self assert: juego isPlayingO.
	self deny: juego isPlayingX.! !

!testRun: #TerniLapilliTest #test02AfterXTurnIsOTurn stamp: 'GR 10/29/2020 18:21:10'!
ERROR!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 18:21:43'!
putXAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 18:22:08' prior: 50912628!
putXAt: aPoint 
	
	turn := 'O'! !

!testRun: #TerniLapilliTest #test02AfterXTurnIsOTurn stamp: 'GR 10/29/2020 18:22:10'!
ERROR!
!TerniLapilli methodsFor: 'accessing' stamp: 'GR 10/29/2020 18:22:16'!
isPlayingO
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'accessing' stamp: 'GR 10/29/2020 18:22:28' prior: 50912640!
isPlayingO
	
	^self isPlayingX not! !
!TerniLapilli methodsFor: 'accessing' stamp: 'GR 10/29/2020 18:22:39' prior: 50912644!
isPlayingO
	
	^turn := 'O'! !

!testRun: #TerniLapilliTest #test02AfterXTurnIsOTurn stamp: 'GR 10/29/2020 18:22:45'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterXTurnIsOTurn stamp: 'GR 10/29/2020 18:23:07'!
ERROR!
!TerniLapilli methodsFor: 'accessing' stamp: 'GR 10/29/2020 18:23:21' prior: 50912648!
isPlayingO
	
	^turn = 'O'! !

!testRun: #TerniLapilliTest #test02AfterXTurnIsOTurn stamp: 'GR 10/29/2020 18:23:22'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 18:23:22'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXTurnIsOTurn stamp: 'GR 10/29/2020 18:23:22'!
PASSED!

!testRun: #TerniLapilliTest #test03OCanPlaceAPieceInItsTurnOnEmptyPosition stamp: 'GR 10/29/2020 18:23:22'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 18:23:55'!
test03AfterOTurnIsXTurn! !

!methodRemoval: TerniLapilliTest #test03OCanPlaceAPieceInItsTurnOnEmptyPosition stamp: 'GR 10/29/2020 18:23:55'!
test03OCanPlaceAPieceInItsTurnOnEmptyPosition!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 18:23:59' prior: 50912675!
test03AfterOTurnIsXTurn

	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 18:24:06' prior: 50912685!
test03AfterOTurnIsXTurn

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	
	self assert: juego isPlayingO.
	self deny: juego isPlayingX.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 18:24:24' prior: 50912690!
test03AfterOTurnIsXTurn

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@0).
	
	self deny: juego isPlayingO.
	self assert: juego isPlayingX.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 18:24:32' prior: 50912699!
test03AfterOTurnIsXTurn

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@0).
	
	self assert: juego isPlayingX.
	self deny: juego isPlayingO.! !

!testRun: #TerniLapilliTest #test03AfterOTurnIsXTurn stamp: 'GR 10/29/2020 18:24:34'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterOTurnIsXTurn stamp: 'GR 10/29/2020 18:24:34'!
ERROR!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 18:24:44'!
putOAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 18:24:52' prior: 50912722!
putOAt: aPoint 
	
	turn := 'X'! !

!testRun: #TerniLapilliTest #test03AfterOTurnIsXTurn stamp: 'GR 10/29/2020 18:24:54'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOTurnIsXTurn stamp: 'GR 10/29/2020 18:24:58'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 18:24:58'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXTurnIsOTurn stamp: 'GR 10/29/2020 18:24:58'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOTurnIsXTurn stamp: 'GR 10/29/2020 18:24:58'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 18:25:10' prior: 50912708!
test03AfterOTurnIsXTurn

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	
	self assert: juego isPlayingX.
	self deny: juego isPlayingO.! !

!testRun: #TerniLapilliTest #test03AfterOTurnIsXTurn stamp: 'GR 10/29/2020 18:25:11'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 18:25:11'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXTurnIsOTurn stamp: 'GR 10/29/2020 18:25:11'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOTurnIsXTurn stamp: 'GR 10/29/2020 18:25:11'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 18:33:07'!
test04XCanPlacePieceInEmptyPosition

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	
	self assert: juego isPlayingX.
	self deny: juego isPlayingO.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 18:34:03' prior: 50912768!
test04XCanPlacePieceInEmptyPosition

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	
	self assert: (0@0)! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'turn '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'GR 10/29/2020 18:34:42'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'turn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Object subclass: #TerniLapilli
	instanceVariableNames: 'turn occupiedPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'GR 10/29/2020 18:48:41'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'turn occupiedPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 18:51:50'!
test03AfterOPlaysIsXTurn

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	
	self assert: juego isPlayingX.
	self deny: juego isPlayingO.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 18:52:55' prior: 50912809!
test03AfterOPlaysIsXTurn

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	
	self assert: juego isPlayingX.
	self deny: juego isPlayingO.
	self assert: (juego isOccupied: (0@1))! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 18:53:09'!
test02AfterXPlaysIsOTurn

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	
	self assert: juego isPlayingO.
	self deny: juego isPlayingX.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 18:53:16' prior: 50912828!
test02AfterXPlaysIsOTurn

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	
	self assert: juego isPlayingO.
	self deny: juego isPlayingX.
	self assert: (juego isOccupied: (0@0))! !

!methodRemoval: TerniLapilliTest #test02AfterXTurnIsOTurn stamp: 'GR 10/29/2020 18:53:22'!
test02AfterXTurnIsOTurn

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	
	self assert: juego isPlayingO.
	self deny: juego isPlayingX.!

!methodRemoval: TerniLapilliTest #test03AfterOTurnIsXTurn stamp: 'GR 10/29/2020 18:53:26'!
test03AfterOTurnIsXTurn

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	
	self assert: juego isPlayingX.
	self deny: juego isPlayingO.!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 18:53:42'!
ERROR!
!TerniLapilli methodsFor: 'accessing' stamp: 'GR 10/29/2020 18:53:52'!
isOccupied: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'accessing' stamp: 'GR 10/29/2020 18:54:05' prior: 50912865!
isOccupied: aPoint 
	
	^occupiedPositions includes: aPoint! !

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 18:54:09'!
FAILURE!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 18:54:40' prior: 50912633!
putXAt: aPoint 
	
	occupiedPositions add: aPoint.
	turn := 'O'! !

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 18:54:42'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 18:54:42'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 18:54:42'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 18:54:42'!
FAILURE!

!testRun: #TerniLapilliTest #test04XCanPlacePieceInEmptyPosition stamp: 'GR 10/29/2020 18:54:42'!
ERROR!

!methodRemoval: TerniLapilliTest #test04XCanPlacePieceInEmptyPosition stamp: 'GR 10/29/2020 18:54:55'!
test04XCanPlacePieceInEmptyPosition

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	
	self assert: (0@0)!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 18:54:58'!
FAILURE!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 18:55:19' prior: 50912727!
putOAt: aPoint 
	
	occupiedPositions add: aPoint.
	turn := 'X'! !

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 18:55:27'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 18:55:27'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 18:55:27'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 18:55:27'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 18:55:36' prior: 50912605 overrides: 16896425!
initialize

	turn := 'X'.
	occupiedPositions  := Set new.! !

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 18:55:45'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 18:55:45'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 18:55:45'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 18:55:45'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 18:57:59'!
test04xCanNotPlayInOTurn

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putXAt: (0@1).
	
	self assert: juego isPlayingX.
	self deny: juego isPlayingO.
	self assert: (juego isOccupied: (0@1))! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 18:58:21' prior: 50912944!
test04xCanNotPlayInOTurn

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putXAt: (0@1).
	
	self assert: (juego isOccupied: (0@1)) not! !

!testRun: #TerniLapilliTest #test04xCanNotPlayInOTurn stamp: 'GR 10/29/2020 18:58:22'!
FAILURE!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 18:58:55' prior: 50912878!
putXAt: aPoint 
	
	self isPlayingX ifTrue: [
	occupiedPositions add: aPoint.
	turn := 'O' ]! !

!testRun: #TerniLapilliTest #test04xCanNotPlayInOTurn stamp: 'GR 10/29/2020 18:58:57'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 18:58:57'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 18:58:57'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 18:58:57'!
PASSED!

!testRun: #TerniLapilliTest #test04xCanNotPlayInOTurn stamp: 'GR 10/29/2020 18:58:57'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 18:59:06'!
test04XCanNotPlayInOTurn

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putXAt: (0@1).
	
	self assert: (juego isOccupied: (0@1)) not! !

!methodRemoval: TerniLapilliTest #test04xCanNotPlayInOTurn stamp: 'GR 10/29/2020 18:59:06'!
test04xCanNotPlayInOTurn

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putXAt: (0@1).
	
	self assert: (juego isOccupied: (0@1)) not!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 18:59:45'!
test05OCanNotPlayInXTurn

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putOAt: (1@1).
		
	self assert: (juego isOccupied: (0@1)) not! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 18:59:48' prior: 50913003!
test05OCanNotPlayInXTurn

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putOAt: (1@1).
		
	self assert: (juego isOccupied: (1@1)) not! !

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 18:59:50'!
FAILURE!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 19:00:09' prior: 50912909!
putOAt: aPoint 
	
	self isPlayingO ifTrue: [
	occupiedPositions add: aPoint.
	turn := 'X' ]! !

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 19:00:10'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 19:00:10'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 19:00:10'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 19:00:10'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 19:00:10'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 19:00:10'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 19:02:38'!
test06CanNotPlacePieceOutsideTheBoard

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putOAt: (1@1).
		
	self assert: (juego isOccupied: (1@1)) not! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 19:05:41' prior: 50913048!
test06CanNotPlacePieceOutsideTheBoard

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (4@0).
		
	self assert: (juego isOccupied: (4@1)) not! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 19:06:22' prior: 50912599!
test01GameStartsWithXTurn

	| juego |

	juego := TerniLapilli new.
	
	self assert: juego isPlayingX.
	self assert: juego isEmpty.! !

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 19:06:28'!
ERROR!
!TerniLapilli methodsFor: 'accessing' stamp: 'GR 10/29/2020 19:06:33'!
isEmpty
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'accessing' stamp: 'GR 10/29/2020 19:06:48' prior: 50913076!
isEmpty
	
	^occupiedPositions isEmpty.! !

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 19:06:50'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 19:06:50'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 19:06:50'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 19:06:50'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 19:06:50'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 19:06:50'!
PASSED!

!testRun: #TerniLapilliTest #test06CanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:06:50'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 19:06:59' prior: 50913058!
test06CanNotPlacePieceOutsideTheBoard

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (4@0).
		
	self assert: (juego isOccupied: (4@0)) not! !

!testRun: #TerniLapilliTest #test06CanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:07:00'!
FAILURE!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 19:08:25' prior: 50912966!
putXAt: aPoint 
	
	(self isPlayingX and: ((0@0) eightNeighbors includes: aPoint)) 
		ifTrue: [
	occupiedPositions add: aPoint.
	turn := 'O' ]! !

!testRun: #TerniLapilliTest #test06CanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:08:26'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 19:08:26'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 19:08:26'!
FAILURE!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 19:08:26'!
FAILURE!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 19:08:26'!
FAILURE!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 19:08:26'!
PASSED!

!testRun: #TerniLapilliTest #test06CanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:08:26'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 19:08:40'!
FAILURE!

!testRun: #TerniLapilliTest #test06CanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 19:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 19:09:16'!
FAILURE!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 19:09:16'!
FAILURE!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 19:09:16'!
FAILURE!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 19:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test06CanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 19:09:18'!
FAILURE!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 19:09:54' prior: 50913117!
putXAt: aPoint 
	
	(self isPlayingX and: (((0@0) eightNeighbors includes: aPoint) or: aPoint = (0@0))) 
		ifTrue: [
	occupiedPositions add: aPoint.
	turn := 'O' ]! !

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 19:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test06CanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:09:59'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 19:09:59'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 19:09:59'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 19:09:59'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 19:09:59'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 19:09:59'!
PASSED!

!testRun: #TerniLapilliTest #test06CanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:09:59'!
PASSED!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 19:15:07' prior: 50913175!
putXAt: aPoint 
	
	(self isPlayingX and: (((0@0) eightNeighbors includes: aPoint) or: (aPoint = (0@0)))) 
		ifTrue: [
	occupiedPositions add: aPoint.
	turn := 'O' ]! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 19:16:02' prior: 50913208!
putXAt: aPoint 
	
	(self isPlayingX and: (0@0) eightNeighbors includes: aPoint or: aPoint = (0@0)) 
		ifTrue: [
	occupiedPositions add: aPoint.
	turn := 'O' ]! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 19:16:52' prior: 50913216!
putXAt: aPoint 
	
	(self isPlayingX and: ((0@0) eightNeighbors includes: aPoint) or: aPoint = (0@0)) 
		ifTrue: [
	occupiedPositions add: aPoint.
	turn := 'O' ]! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 19:17:08' prior: 50913224!
putXAt: aPoint 
	
	(self isPlayingX and: (((0@0) eightNeighbors includes: aPoint) or: aPoint = (0@0))) 
		ifTrue: [
	occupiedPositions add: aPoint.
	turn := 'O' ]! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 19:17:49' prior: 50913232!
putXAt: aPoint 
	
	(self isPlayingX and: (self isAValidPosition: aPoint)) 
		ifTrue: [
	occupiedPositions add: aPoint.
	turn := 'O' ]! !

0@0!
!TerniLapilli methodsFor: 'nil' stamp: 'GR 10/29/2020 19:18:09'!
isAValidPosition: aPoint

	^((0@0) eightNeighbors includes: aPoint) or: aPoint = (0@0)! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 19:19:49'!
test06XCanNotPlacePieceOutsideTheBoard

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (4@0).
		
	self assert: (juego isOccupied: (4@0)) not! !

!methodRemoval: TerniLapilliTest #test06CanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:19:49'!
test06CanNotPlacePieceOutsideTheBoard

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (4@0).
		
	self assert: (juego isOccupied: (4@0)) not!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 19:19:57'!
test06OCanNotPlacePieceOutsideTheBoard

	| juego |
	
	juego := TerniLapilli new.
	
	juego putOAt: (4@0).
		
	self assert: (juego isOccupied: (4@0)) not! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 19:20:05'!
test07OCanNotPlacePieceOutsideTheBoard

	| juego |
	
	juego := TerniLapilli new.
	
	juego putOAt: (4@0).
		
	self assert: (juego isOccupied: (4@0)) not! !

!methodRemoval: TerniLapilliTest #test06OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:20:05'!
test06OCanNotPlacePieceOutsideTheBoard

	| juego |
	
	juego := TerniLapilli new.
	
	juego putOAt: (4@0).
		
	self assert: (juego isOccupied: (4@0)) not!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:20:08'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 19:20:08'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 19:20:08'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 19:20:08'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 19:20:08'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 19:20:08'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:20:08'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:20:08'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 19:21:05' prior: 50913277!
test07OCanNotPlacePieceOutsideTheBoard

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (4@0).
		
	self assert: (juego isOccupied: (4@0)) not! !

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:21:08'!
FAILURE!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 19:23:43' prior: 50913024!
putOAt: aPoint 
	
	self isPlayingX ifTrue: [ self error: TerniLapilli canNotPlayInOthersTurn ].
	
	(self isAValidPosition: aPoint) ifFalse: [ self error: TerniLapilli canNotPlacePieceInInvalidPosition ].
	
	occupiedPositions add: aPoint.
	turn := 'X'! !

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:23:47'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'GR 10/29/2020 19:23:56'!
canNotPlacePieceInInvalidPosition
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'GR 10/29/2020 19:24:32' prior: 50913345!
canNotPlacePieceInInvalidPosition
	
	^ 'You are placing a piece in an invalid position!!'! !

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:24:34'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 19:28:15' prior: 50913319!
test07OCanNotPlacePieceOutsideTheBoard

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	
	self 
		should: [ juego putOAt: (4@0) ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotPlacePieceInInvalidPosition = anError errorMessage)
			]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 19:28:31' prior: 50913361!
test07OCanNotPlacePieceOutsideTheBoard

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	
	self 
		should: [ juego putOAt: (4@0) ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotPlacePieceInInvalidPosition = anError messageText)
			]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 19:28:42' prior: 50913374!
test07OCanNotPlacePieceOutsideTheBoard

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	
	self 
		should: [ juego putOAt: (4@0) ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotPlacePieceInInvalidPosition = anError messageText)
			]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 19:29:04' prior: 50913253!
test06XCanNotPlacePieceOutsideTheBoard

	| juego |
	
	juego := TerniLapilli new.
		
	self 
		should: [ juego putXAt: (4@0) ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotPlacePieceInInvalidPosition = anError messageText)
			]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 19:29:28' prior: 50913012!
test05OCanNotPlayInXTurn

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putOAt: (1@1).
		! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 19:29:50' prior: 50913412!
test05OCanNotPlayInXTurn

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	
	self 
		should: [ juego putOAt: (1@1) ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotPlacePieceInInvalidPosition = anError messageText)
			]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 19:30:04' prior: 50913420!
test05OCanNotPlayInXTurn

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	
	self 
		should: [ juego putOAt: (1@1) ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli  = anError messageText)
			]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 19:30:24' prior: 50913433!
test05OCanNotPlayInXTurn

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	
	self 
		should: [ juego putOAt: (1@1) ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotPlayInOthersTurn = anError messageText)
			]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 19:30:42' prior: 50913445!
test05OCanNotPlayInXTurn

	| juego |
	
	juego := TerniLapilli new.
	
	self 
		should: [ juego putOAt: (1@1) ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotPlayInOthersTurn = anError messageText)
			]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 19:31:09' prior: 50912987!
test04XCanNotPlayInOTurn

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	
	self 
		should: [ juego putXAt: (0@1). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotPlayInOthersTurn = anError messageText)
			]! !

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 19:31:12'!
FAILURE!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 19:32:54' prior: 50913240!
putXAt: aPoint 
	
	self isPlayingO ifTrue: [ self error: TerniLapilli canNotPlayInOthersTurn].
	
	( self isAValidPosition: aPoint ) ifFalse: [self Error: TerniLapilli canNotPlacePieceInInvalidPosition ].
	
	occupiedPositions add: aPoint.
	turn := 'O'.! !

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 19:32:56'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'GR 10/29/2020 19:33:10'!
canNotPlayInOthersTurn
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'GR 10/29/2020 19:33:42' prior: 50913498!
canNotPlayInOthersTurn
	
	^ 'You can not play in the other player`s turn!!'! !

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 19:33:43'!
FAILURE!
!TerniLapilli class methodsFor: 'error handling' stamp: 'GR 10/29/2020 19:34:15' prior: 50913503!
canNotPlayInOthersTurn
	
	^ 'You can not play in the other player turn!!'! !

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 19:34:17'!
FAILURE!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 19:35:09'!
FAILURE!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 19:35:27'!
PASSED!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 19:35:52' prior: 50913484!
putXAt: aPoint 
	
	self isPlayingO ifTrue: [ self error: TerniLapilli canNotPlayInOthersTurn ].
	
	( self isAValidPosition: aPoint ) ifFalse: [self Error: TerniLapilli canNotPlacePieceInInvalidPosition ].
	
	occupiedPositions add: aPoint.
	turn := 'O'.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 19:36:13' prior: 50913527!
putXAt: aPoint 
	
	self isPlayingO ifTrue: [ self error: TerniLapilli canNotPlayInOthersTurn ].
	
	( self isAValidPosition: aPoint ) ifFalse: [self error: TerniLapilli canNotPlacePieceInInvalidPosition ].
	
	occupiedPositions add: aPoint.
	turn := 'O'.! !

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 19:36:15'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 19:36:18'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 19:36:18'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 19:36:18'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 19:36:18'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 19:36:18'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 19:36:18'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:36:18'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:36:18'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 19:36:27'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 19:36:27'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 19:36:27'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 19:36:27'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 19:36:27'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 19:36:27'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:36:27'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:36:27'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 19:38:37'!
test08XCanNotPlacePieceOnOccupiedPosition

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	
	self 
		should: [ juego putOAt: (4@0) ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotPlacePieceInInvalidPosition = anError messageText)
			]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 19:38:55' prior: 50913602!
test08XCanNotPlacePieceOnOccupiedPosition

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@0).
	
	self 
		should: [ juego putOAt: (4@0) ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotPlacePieceInInvalidPosition = anError messageText)
			]! !

!testRun: #TerniLapilliTest #test08XCanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/29/2020 19:39:08'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 19:39:08'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 19:39:08'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 19:39:08'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 19:39:08'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 19:39:08'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:39:08'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:39:08'!
PASSED!

!testRun: #TerniLapilliTest #test08XCanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/29/2020 19:39:08'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 19:39:22' prior: 50913615!
test08XCanNotPlacePieceOnOccupiedPosition

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	
	self 
		should: [ juego putXAt: (0@0) ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotPlacePieceInInvalidPosition = anError messageText)
			]! !

!testRun: #TerniLapilliTest #test08XCanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/29/2020 19:39:24'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/29/2020 19:41:42' prior: 50913247!
isAValidPosition: aPoint

	^(((0@0) eightNeighbors includes: aPoint) or: aPoint = (0@0)) and: (occupiedPositions includes: aPoint) not! !

!testRun: #TerniLapilliTest #test08XCanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/29/2020 19:41:54'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 19:41:54'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 19:41:54'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 19:41:54'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 19:41:54'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 19:41:54'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:41:54'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:41:54'!
PASSED!

!testRun: #TerniLapilliTest #test08XCanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/29/2020 19:41:54'!
PASSED!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 19:50:24'!
placesAPieceIn: aPoint

	self isPlayingX ifTrue: [ self error: TerniLapilli canNotPlayInOthersTurn ].
	
	(self isAValidPosition: aPoint) ifFalse: [ self error: TerniLapilli canNotPlacePieceInInvalidPosition ].
	
	occupiedPositions add: aPoint.
	turn := 'X'! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 19:50:24' prior: 50913331!
putOAt: aPoint 
	
	self placesAPieceIn: aPoint! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 19:51:13'!
thePlayer: aPlayer placesAPieceIn: aPoint

	self isPlayingX ifTrue: [ self error: TerniLapilli canNotPlayInOthersTurn ].
	
	(self isAValidPosition: aPoint) ifFalse: [ self error: TerniLapilli canNotPlacePieceInInvalidPosition ].
	
	occupiedPositions add: aPoint.
	turn := 'X'! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 19:51:13' prior: 50913722!
putOAt: aPoint 
	
	self thePlayer: aPlayer placesAPieceIn: aPoint! !

!methodRemoval: TerniLapilli #placesAPieceIn: stamp: 'GR 10/29/2020 19:51:13'!
placesAPieceIn: aPoint

	self isPlayingX ifTrue: [ self error: TerniLapilli canNotPlayInOthersTurn ].
	
	(self isAValidPosition: aPoint) ifFalse: [ self error: TerniLapilli canNotPlacePieceInInvalidPosition ].
	
	occupiedPositions add: aPoint.
	turn := 'X'!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 19:51:36' prior: 50913738!
putOAt: aPoint 
	
	self thePlayer: 'O' placesAPieceIn: aPoint! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 19:53:51' prior: 50913726!
thePlayer: aPlayer placesAPieceIn: aPoint

	self isPlayingX ifTrue: [ self error: TerniLapilli canNotPlayInOthersTurn ].
	
	(self isAValidPosition: aPoint) ifFalse: [ self error: TerniLapilli canNotPlacePieceInInvalidPosition ].
	
	occupiedPositions add: aPoint.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 19:53:57' prior: 50913754!
putOAt: aPoint 
	
	self thePlayer: 'O' placesAPieceIn: aPoint.
	turn := 'X'.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 19:54:42' prior: 50913759!
thePlayer: aPlayer placesAPieceIn: aPoint

	(self isPlaying: aPlayer) ifFalse: [ self error: TerniLapilli canNotPlayInOthersTurn ].
	
	(self isAValidPosition: aPoint) ifFalse: [ self error: TerniLapilli canNotPlacePieceInInvalidPosition ].
	
	occupiedPositions add: aPoint.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 19:56:10' prior: 50913538!
putXAt: aPoint 
	
	self thePlayer: 'X' placesAPieceIn: aPoint.
	turn := 'O'.! !

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:57:08'!
FAILURE!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:57:20'!
FAILURE!
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/29/2020 19:58:05'!
isPlaying: aString 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/29/2020 19:58:25' prior: 50913801!
isPlaying: aPlayer

	^ turn = aPlayer
	
	! !

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 19:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 19:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 19:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 19:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 19:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 19:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test08XCanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/29/2020 19:58:30'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 20:00:30' prior: 50912818!
test03AfterOPlaysIsXTurn

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	
	self assert: (juego isPlaying: #X).
	self deny: (juego isPlaying: #O).
	self assert: (juego isOccupied: (0@1))! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 20:00:43' prior: 50912837!
test02AfterXPlaysIsOTurn

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	
	self assert: (juego isPlaying: #O).
	self deny: (juego isPlaying: #X).
	self assert: (juego isOccupied: (0@0))! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 20:00:49' prior: 50913066!
test01GameStartsWithXTurn

	| juego |

	juego := TerniLapilli new.
	
	self assert: (juego isPlaying: #X).
	self assert: juego isEmpty.! !
!TerniLapilli methodsFor: 'initialization' stamp: 'GR 10/29/2020 20:01:21' prior: 50912927 overrides: 16896425!
initialize

	turn := #X.
	occupiedPositions  := Set new.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 20:01:30' prior: 50913771!
putOAt: aPoint 
	
	self thePlayer: 'O' placesAPieceIn: aPoint.
	turn := #X.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 20:01:46' prior: 50913789!
putXAt: aPoint 
	
	self thePlayer: #X placesAPieceIn: aPoint.
	turn := #O.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 20:01:53' prior: 50913874!
putOAt: aPoint 
	
	self thePlayer: #O placesAPieceIn: aPoint.
	turn := #X.! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/29/2020 20:02:37' prior: 50913675!
isAValidPosition: aPoint

	^(((0@0) eightNeighbors includes: aPoint) or: aPoint = (0@0)) and: (occupiedPositions includes: aPoint) not! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/29/2020 20:03:21' prior: 50913892!
isAValidPosition: aPoint

	^(((0@0) eightNeighbors add: (0@0)) includes: aPoint) and: (occupiedPositions includes: aPoint) not! !

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 20:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 20:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 20:03:27'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 20:03:27'!
ERROR!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 20:03:27'!
ERROR!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 20:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 20:03:27'!
FAILURE!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 20:03:27'!
ERROR!

!testRun: #TerniLapilliTest #test08XCanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/29/2020 20:03:27'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 20:03:31'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/29/2020 20:04:27' prior: 50913899!
isAValidPosition: aPoint
	
	| positions |
	
	positions := (0@0) eightNeighbors add: (0@0).
	
	^(positions includes: aPoint) and: (occupiedPositions includes: aPoint) not! !

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 20:04:31'!
ERROR!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 20:04:40'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/29/2020 20:05:03' prior: 50913937!
isAValidPosition: aPoint
	
	| positions |
	
	positions := (0@0) eightNeighbors.
	positions add: (0@0).
	
	^(positions includes: aPoint) and: (occupiedPositions includes: aPoint) not! !

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 20:05:04'!
ERROR!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 20:05:11'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/29/2020 20:05:27' prior: 50913951!
isAValidPosition: aPoint
	
	| positions |
	
	positions := (0@0) eightNeighbors.
	positions addLast: (0@0).
	
	^(positions includes: aPoint) and: (occupiedPositions includes: aPoint) not! !

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 20:05:37'!
FAILURE!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 20:06:18'!
FAILURE!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 20:06:33'!
FAILURE!

Array!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/29/2020 20:08:24' prior: 50913966!
isAValidPosition: aPoint
	
	| positions |
	
	positions := (0@0) eightNeighbors.
	positions addLast: (0@0).
	
	^(positions includes: aPoint) and: (occupiedPositions includes: aPoint) not! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/29/2020 20:02:37' prior: 50913986!
isAValidPosition: aPoint

	^(((0@0) eightNeighbors includes: aPoint) or: aPoint = (0@0)) and: (occupiedPositions includes: aPoint) not! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/29/2020 19:41:42' prior: 50913995!
isAValidPosition: aPoint

	^(((0@0) eightNeighbors includes: aPoint) or: aPoint = (0@0)) and: (occupiedPositions includes: aPoint) not! !

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 20:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 20:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 20:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 20:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 20:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 20:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 20:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 20:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test08XCanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/29/2020 20:09:16'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 20:09:51'!
test08CanNotPlacePieceOnOccupiedPosition

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	
	self 
		should: [ juego putXAt: (0@0) ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotPlacePieceInInvalidPosition = anError messageText)
			]! !

!methodRemoval: TerniLapilliTest #test08XCanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/29/2020 20:09:51'!
test08XCanNotPlacePieceOnOccupiedPosition

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	
	self 
		should: [ juego putXAt: (0@0) ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotPlacePieceInInvalidPosition = anError messageText)
			]!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 20:12:27'!
test09EachPlayerCanNotPlaceMoreThanThreePieces

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego putXAt: (1@-1) ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotPlaceMoreThanThreePieces = anError messageText)
			]! !

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/29/2020 20:12:40'!
FAILURE!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 20:15:00' prior: 50913777!
thePlayer: aPlayer placesAPieceIn: aPoint

	(self totalPiecesPlayed = 6) ifTrue: [self error: TerniLapilli canNotPlaceMoreThanThreePieces].
	
	(self isPlaying: aPlayer) ifFalse: [ self error: TerniLapilli canNotPlayInOthersTurn ].
	
	(self isAValidPosition: aPoint) ifFalse: [ self error: TerniLapilli canNotPlacePieceInInvalidPosition ].
	
	occupiedPositions add: aPoint.! !

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/29/2020 20:15:02'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/29/2020 20:15:16'!
totalPiecesPlayed
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/29/2020 20:15:24' prior: 50914102!
totalPiecesPlayed
	
	^ occupiedPositions size.! !

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/29/2020 20:15:29'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'GR 10/29/2020 20:15:41'!
canNotPlaceMoreThanThreePieces
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'GR 10/29/2020 20:15:58' prior: 50914115!
canNotPlaceMoreThanThreePieces
	
	^ 'You can not play more than three pieces!!'! !

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/29/2020 20:15:59'!
FAILURE!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/29/2020 20:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 20:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 20:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 20:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 20:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 20:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 20:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 20:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/29/2020 20:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/29/2020 20:18:31'!
PASSED!

!methodRemoval: TerniLapilli #isPlayingO stamp: 'GR 10/29/2020 20:19:15'!
isPlayingO
	
	^turn = 'O'!

!methodRemoval: TerniLapilli #isPlayingX stamp: 'GR 10/29/2020 20:19:18'!
isPlayingX
	
	^turn = 'X'!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 20:20:59'!
test10PlayerCanMoveAPieceToValidPosition
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego putXAt: (1@-1) ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotPlaceMoreThanThreePieces = anError messageText)
			]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 20:21:01' prior: 50914169!
test10PlayerCanMoveAPieceToValidPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego putXAt: (1@-1) ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotPlaceMoreThanThreePieces = anError messageText)
			]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 20:23:08' prior: 50914185!
test10PlayerCanMoveAPieceToValidPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	juego thePlayer: #X movesThePieceIn: (0@0) To: (-1@0).
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 20:23:54' prior: 50914201!
test10PlayerCanMoveAPieceToValidPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	juego thePlayer: #X movesThePieceIn: (0@0) To: (-1@0).
	
	self assert: (juego isOccupied: (-1@0)).
	self deny: (juego isOccupied: (0@0)).
	! !

!testRun: #TerniLapilliTest #test10PlayerCanMoveAPieceToValidPosition stamp: 'GR 10/29/2020 20:23:58'!
ERROR!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 20:24:09'!
thePlayer: aSymbol movesThePieceIn: aPoint To: aPoint3 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 20:24:51' prior: 50914232!
thePlayer: aPlayer movesThePieceIn: aPosition To: anotherPosition 
	
	! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 20:24:57' prior: 50914238!
thePlayer: aPlayer movesThePieceIn: aPosition To: anotherPosition
	
	! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 20:25:51' prior: 50914244!
thePlayer: aPlayer movesThePieceIn: aPosition To: anotherPosition
	
	occupiedPositions remove: aPosition ifAbsent: [].! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 20:26:08' prior: 50914250!
thePlayer: aPlayer movesThePieceIn: aPosition To: anotherPosition
	
	occupiedPositions remove: aPosition ifAbsent: [].
	occupiedPositions add: anotherPosition.! !

!testRun: #TerniLapilliTest #test10PlayerCanMoveAPieceToValidPosition stamp: 'GR 10/29/2020 20:26:09'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 20:26:09'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 20:26:09'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 20:26:09'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 20:26:09'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 20:26:09'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 20:26:09'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 20:26:09'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/29/2020 20:26:09'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/29/2020 20:26:09'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanMoveAPieceToValidPosition stamp: 'GR 10/29/2020 20:26:09'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 20:27:24'!
test11PlayerCanNotMoveAPieceThatIsNotOnTheBoard
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	juego thePlayer: #X movesThePieceIn: (-1@0) To: (-1@-1).
	
	self assert: (juego isOccupied: (-1@0)).
	self deny: (juego isOccupied: (0@0)).
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 20:27:33' prior: 50914301!
test11PlayerCanNotMoveAPieceThatIsNotOnTheBoard
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	
	juego thePlayer: #X movesThePieceIn: (-1@0) To: (-1@-1).
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 20:28:37' prior: 50914316!
test11PlayerCanNotMoveAPieceThatIsNotOnTheBoard
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (-1@0) To: (-1@-1). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotPlaceMoreThanThreePieces = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 20:29:22' prior: 50914329!
test11PlayerCanNotMoveAPieceThatIsNotOnTheBoard
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (-1@0) To: (-1@-1). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/29/2020 20:29:24'!
FAILURE!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 20:30:03' prior: 50914257!
thePlayer: aPlayer movesThePieceIn: aPosition To: anotherPosition
	
	occupiedPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	occupiedPositions add: anotherPosition.! !

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/29/2020 20:30:04'!
ERROR!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 20:30:14'!
canNotDoAnInvalidMove
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 20:30:50' prior: 50914381!
canNotDoAnInvalidMove
	
	^ 'You can not do that move!!'! !

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/29/2020 20:30:52'!
FAILURE!

----SNAPSHOT----(29 October 2020 20:31:03) CuisUniversity-4383.image priorSource: 18587194!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/29/2020 20:31:05'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 20:31:05'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 20:31:05'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 20:31:05'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 20:31:05'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 20:31:05'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 20:31:05'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 20:31:05'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/29/2020 20:31:05'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/29/2020 20:31:05'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanMoveAPieceToValidPosition stamp: 'GR 10/29/2020 20:31:05'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/29/2020 20:31:05'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 20:31:48'!
test11PlayerCanNotMoveAPieceToAnOccupiedPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (-1@0) To: (-1@-1). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 20:31:57' prior: 50914438!
test11PlayerCanNotMoveAPieceToAnOccupiedPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (0@0) To: (0@-1). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/29/2020 20:32:00'!
FAILURE!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 20:33:26' prior: 50914368!
thePlayer: aPlayer movesThePieceIn: aPosition To: anotherPosition
	
	(occupiedPositions includes: anotherPosition) ifTrue: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedPositions add: anotherPosition.! !

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/29/2020 20:33:29'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 20:33:29'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 20:33:29'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 20:33:29'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 20:33:29'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 20:33:29'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 20:33:29'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 20:33:29'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/29/2020 20:33:29'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/29/2020 20:33:29'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanMoveAPieceToValidPosition stamp: 'GR 10/29/2020 20:33:29'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/29/2020 20:33:29'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/29/2020 20:33:29'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 20:33:51'!
test11PlayerCanNotMoveAPieceOutsideTheBoard
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (0@0) To: (0@-1). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 20:33:55' prior: 50914533!
test11PlayerCanNotMoveAPieceOutsideTheBoard
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (0@0) To: (0@4). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/29/2020 20:33:56'!
FAILURE!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 20:34:55' prior: 50914476!
thePlayer: aPlayer movesThePieceIn: aPosition To: anotherPosition
	
	(self isAValidPosition: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	(occupiedPositions includes: anotherPosition) ifTrue: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedPositions add: anotherPosition.! !

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/29/2020 20:35:06'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 20:35:06'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 20:35:06'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 20:35:06'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 20:35:06'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 20:35:06'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 20:35:06'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 20:35:06'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/29/2020 20:35:06'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/29/2020 20:35:06'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanMoveAPieceToValidPosition stamp: 'GR 10/29/2020 20:35:06'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/29/2020 20:35:06'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/29/2020 20:35:06'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/29/2020 20:35:06'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 20:35:40'!
test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (-1@0) To: (-1@-1). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !

!methodRemoval: TerniLapilliTest #test11PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/29/2020 20:35:40'!
test11PlayerCanNotMoveAPieceThatIsNotOnTheBoard
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (-1@0) To: (-1@-1). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 20:35:46'!
test13PlayerCanNotMoveAPieceToAnOccupiedPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (0@0) To: (0@-1). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !

!methodRemoval: TerniLapilliTest #test11PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/29/2020 20:35:46'!
test11PlayerCanNotMoveAPieceToAnOccupiedPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (0@0) To: (0@-1). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 20:36:25'!
test10PlayerCanMoveAPieceToEmptyPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	juego thePlayer: #X movesThePieceIn: (0@0) To: (-1@0).
	
	self assert: (juego isOccupied: (-1@0)).
	self deny: (juego isOccupied: (0@0)).
	! !

!methodRemoval: TerniLapilliTest #test10PlayerCanMoveAPieceToValidPosition stamp: 'GR 10/29/2020 20:36:25'!
test10PlayerCanMoveAPieceToValidPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	juego thePlayer: #X movesThePieceIn: (0@0) To: (-1@0).
	
	self assert: (juego isOccupied: (-1@0)).
	self deny: (juego isOccupied: (0@0)).
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 20:41:38' prior: 50914702!
test10PlayerCanMoveAPieceToEmptyPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	juego thePlayer: #X movesThePieceIn: (0@0) To: (-1@0).
	
	self assert: (juego isOccupied: (-1@0)).
	self deny: (juego isOccupied: (0@0)).
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 20:41:49' prior: 50914732!
test10PlayerCanMoveAPieceToEmptyPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	juego thePlayer: #X movesThePieceIn: (0@0) To: (-1@0).
	
	self assert: (juego isOccupied: (-1@0)).
	self deny: (juego isOccupied: (0@0)).
	
	! !

0 positive!

0 negative !

!methodRemoval: TerniLapilliTest #test10PlayerCanMoveAPieceToEmptyPosition stamp: 'GR 10/29/2020 20:44:44'!
test10PlayerCanMoveAPieceToEmptyPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	juego thePlayer: #X movesThePieceIn: (0@0) To: (-1@0).
	
	self assert: (juego isOccupied: (-1@0)).
	self deny: (juego isOccupied: (0@0)).
	
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 20:46:58'!
test10PlayerCanNotDoMoreThanOnePosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (0@0) To: (0@4). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 20:47:35' prior: 50914777!
test10PlayerCanNotDoMoreThanOnePosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (0@-1) To: (0@1). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 20:47:52' prior: 50914794!
test10PlayerCanNotDoMoreThanOnePosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (-1@-1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (0@-1) To: (0@1). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !

!testRun: #TerniLapilliTest #test10PlayerCanNotDoMoreThanOnePosition stamp: 'GR 10/29/2020 20:48:12'!
FAILURE!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 20:51:04' prior: 50914570!
thePlayer: aPlayer movesThePieceIn: aPosition To: anotherPosition
	
	(self isAValidPosition: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	(occupiedPositions includes: anotherPosition) ifTrue: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedPositions add: anotherPosition.! !

!testRun: #TerniLapilliTest #test10PlayerCanNotDoMoreThanOnePosition stamp: 'GR 10/29/2020 20:51:26'!
FAILURE!

!testRun: #TerniLapilliTest #test10PlayerCanNotDoMoreThanOnePosition stamp: 'GR 10/29/2020 20:51:37'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/29/2020 20:52:13'!
isValidMoveFrom: aPoint to: aPoint2 
	self shouldBeImplemented.! !

	(0@1)-(1@2)!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/29/2020 20:55:26' prior: 50914858!
isValidMoveFrom: aPosition to: anotherPosition
	
	(aPosition - anotherPosition) abs .
	
	! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/29/2020 20:56:18' prior: 50914864!
isValidMoveFrom: aPosition to: anotherPosition
	
	(aPosition - anotherPosition) abs > (1@1) ifTrue: [self error: TerniLapilli canNotDoAnInvalidMove ].
	
	! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 20:57:21' prior: 50914831!
thePlayer: aPlayer movesThePieceIn: aPosition To: anotherPosition
	
	(self isAValidPosition: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	
	
	occupiedPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedPositions add: anotherPosition.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 20:57:31' prior: 50914878!
thePlayer: aPlayer movesThePieceIn: aPosition To: anotherPosition
	
	(self isAValidPosition: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	
	
	occupiedPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedPositions add: anotherPosition.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 20:57:34' prior: 50914895!
thePlayer: aPlayer movesThePieceIn: aPosition To: anotherPosition
	
	(self isAValidPosition: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	(occupiedPositions includes: anotherPosition) ifTrue: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedPositions add: anotherPosition.! !

!testRun: #TerniLapilliTest #test10PlayerCanNotDoMoreThanOnePosition stamp: 'GR 10/29/2020 20:57:38'!
FAILURE!

!testRun: #TerniLapilliTest #test10PlayerCanNotDoMoreThanOnePosition stamp: 'GR 10/29/2020 20:57:41'!
FAILURE!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/29/2020 20:58:22' prior: 50914912!
thePlayer: aPlayer movesThePieceIn: aPosition To: anotherPosition
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedPositions add: anotherPosition.! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/29/2020 20:58:35' prior: 50914870!
isValidMoveFrom: aPosition to: anotherPosition
	
	(aPosition - anotherPosition) abs > (1@1) ifTrue: [self error: TerniLapilli canNotDoAnInvalidMove ].
	
	(self isAValidPosition: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	(occupiedPositions includes: anotherPosition) ifTrue: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/29/2020 20:58:44' prior: 50914952!
isValidMoveFrom: aPosition to: anotherPosition
	
	(self isAValidPosition: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	(aPosition - anotherPosition) abs > (1@1) ifTrue: [self error: TerniLapilli canNotDoAnInvalidMove ].
	
	(occupiedPositions includes: anotherPosition) ifTrue: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/29/2020 21:01:31' prior: 50914967!
isValidMoveFrom: aPosition to: anotherPosition
	
	(self isAValidPosition: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	(self distanceIsGreaterThanOneGoingFrom: aPosition to: anotherPosition) ifTrue: [self error: TerniLapilli canNotDoAnInvalidMove ].
	
	(occupiedPositions includes: anotherPosition) ifTrue: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	! !
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/29/2020 21:02:13'!
distanceIsGreaterThanOnePositionGoingFrom: aPosition to: anotherPosition

	^(aPosition - anotherPosition) abs > (1@1)! !

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/29/2020 21:02:24'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 21:02:24'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 21:02:24'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 21:02:24'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 21:02:24'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 21:02:24'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 21:02:24'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 21:02:24'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/29/2020 21:02:24'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/29/2020 21:02:24'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotDoMoreThanOnePosition stamp: 'GR 10/29/2020 21:02:24'!
FAILURE!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/29/2020 21:02:24'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/29/2020 21:02:24'!
FAILURE!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/29/2020 21:02:24'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 21:02:51'!
test10PlayerCanNotMoveMoreThanOnePosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (-1@-1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (0@-1) To: (0@1). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !

!methodRemoval: TerniLapilliTest #test10PlayerCanNotDoMoreThanOnePosition stamp: 'GR 10/29/2020 21:02:51'!
test10PlayerCanNotDoMoreThanOnePosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (-1@-1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (0@-1) To: (0@1). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/29/2020 21:02:53'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/29/2020 21:03:38' prior: 50914982!
isValidMoveFrom: aPosition to: anotherPosition
	
	(self isAValidPosition: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	(self distanceIsGreaterThanOnePositionGoingFrom: aPosition to: anotherPosition) ifTrue: [self error: TerniLapilli canNotDoAnInvalidMove ].
	
	(occupiedPositions includes: anotherPosition) ifTrue: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	! !

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/29/2020 21:03:41'!
FAILURE!

aPosition - anotherPosition!
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/29/2020 21:06:04' prior: 50914997!
distanceIsGreaterThanOnePositionGoingFrom: aPosition to: anotherPosition

	^((aPosition - anotherPosition) abs < (1@1)) not! !

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/29/2020 21:06:12'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 21:06:12'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 21:06:12'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 21:06:12'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 21:06:12'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 21:06:12'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 21:06:12'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 21:06:12'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/29/2020 21:06:12'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/29/2020 21:06:12'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/29/2020 21:06:12'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/29/2020 21:06:12'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/29/2020 21:06:12'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/29/2020 21:06:12'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 21:08:19'!
test14PlayerCanNotMoveFromAnEdgeToOtherEdge
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (0@0) To: (0@-1). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 21:10:28' prior: 50915162!
test14PlayerCanNotMoveFromAnEdgeToOtherEdge
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (0@-1) To: (1@0). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !

!testRun: #TerniLapilliTest #test14PlayerCanNotMoveFromAnEdgeToOtherEdge stamp: 'GR 10/29/2020 21:10:40'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 21:10:40'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 21:10:40'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 21:10:40'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 21:10:40'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 21:10:40'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 21:10:40'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 21:10:40'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/29/2020 21:10:40'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/29/2020 21:10:40'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/29/2020 21:10:40'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/29/2020 21:10:40'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/29/2020 21:10:40'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/29/2020 21:10:40'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotMoveFromAnEdgeToOtherEdge stamp: 'GR 10/29/2020 21:10:40'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 21:16:40' prior: 50915179!
test14PlayerCanNotMoveFromAnEdgeToOtherEdge
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (0@1) To: (1@0). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !

!testRun: #TerniLapilliTest #test14PlayerCanNotMoveFromAnEdgeToOtherEdge stamp: 'GR 10/29/2020 21:16:42'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 21:16:42'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 21:16:42'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 21:16:42'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 21:16:42'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 21:16:42'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 21:16:42'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 21:16:42'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/29/2020 21:16:42'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/29/2020 21:16:42'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/29/2020 21:16:42'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/29/2020 21:16:42'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/29/2020 21:16:42'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/29/2020 21:16:42'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotMoveFromAnEdgeToOtherEdge stamp: 'GR 10/29/2020 21:16:42'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 21:19:37' prior: 50915247!
test14PlayerCanNotMoveFromAnEdgeToOtherEdge
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (-1@1) To: (-1@0). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !

!testRun: #TerniLapilliTest #test14PlayerCanNotMoveFromAnEdgeToOtherEdge stamp: 'GR 10/29/2020 21:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 21:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 21:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 21:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 21:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 21:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 21:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 21:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/29/2020 21:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/29/2020 21:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/29/2020 21:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/29/2020 21:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/29/2020 21:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/29/2020 21:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotMoveFromAnEdgeToOtherEdge stamp: 'GR 10/29/2020 21:19:38'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 21:22:20' prior: 50915315!
test14PlayerCanNotMoveFromAnEdgeToOtherEdge
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (0@1) To: (-1@0). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 21:38:01'!
test15PlayerCanMoveFromCenterToAnyEmptyPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (0@0) To: (-1@0). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/29/2020 21:38:04'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 21:38:04'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 21:38:04'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 21:38:04'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 21:38:04'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 21:38:04'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 21:38:04'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 21:38:04'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/29/2020 21:38:04'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/29/2020 21:38:04'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/29/2020 21:38:04'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/29/2020 21:38:04'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/29/2020 21:38:04'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/29/2020 21:38:04'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotMoveFromAnEdgeToOtherEdge stamp: 'GR 10/29/2020 21:38:04'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/29/2020 21:38:04'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/29/2020 21:38:55' prior: 50915400!
test15PlayerCanMoveFromCenterToAnyEmptyPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	juego thePlayer: #X movesThePieceIn: (0@0) To: (-1@0).
	
	self assert: (juego isOccupied: (-1@0))
	
	! !

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/29/2020 21:38:57'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/29/2020 21:39:56' prior: 50915088!
isValidMoveFrom: aPosition to: anotherPosition
	
	(self isAValidPosition: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	(aPosition = (0@0)) ifTrue: [ ^ true ].
	
	(self distanceIsGreaterThanOnePositionGoingFrom: aPosition to: anotherPosition) ifTrue: [self error: TerniLapilli canNotDoAnInvalidMove ].
	
	(occupiedPositions includes: anotherPosition) ifTrue: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	! !

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/29/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/29/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/29/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/29/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/29/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/29/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/29/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/29/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/29/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/29/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/29/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/29/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/29/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotMoveFromAnEdgeToOtherEdge stamp: 'GR 10/29/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/29/2020 21:40:07'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/29/2020 21:43:25' prior: 50915489!
isValidMoveFrom: aPosition to: anotherPosition
	
	(self isAValidPosition: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	(occupiedPositions includes: anotherPosition) ifTrue: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	(aPosition = (0@0)) ifTrue: [ ^ true ].
	
	(self distanceIsGreaterThanOnePositionGoingFrom: aPosition to: anotherPosition) ifTrue: [self error: TerniLapilli canNotDoAnInvalidMove ].
	
	
	
	! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/29/2020 21:45:38' prior: 50915561!
isValidMoveFrom: aPosition to: anotherPosition
	
	(self isAValidPosition: anotherPosition) ifFalse: [ ^false ].
	
	(occupiedPositions includes: anotherPosition) ifTrue: [ ^false ].
	
	(aPosition = (0@0)) ifTrue: [ ^ true ].
	
	(self distanceIsGreaterThanOnePositionGoingFrom: aPosition to: anotherPosition) ifTrue: [ ^false ].
	
	^true
	
	
	
	! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/29/2020 21:47:24' prior: 50915578!
isValidMoveFrom: aPosition to: anotherPosition
	
	(self isAValidPosition: anotherPosition) ifFalse: [ ^false ].
	
	(occupiedPositions includes: anotherPosition) ifTrue: [ ^false ].
	
	(aPosition = (0@0)) ifTrue: [ ^ true ].
	
	(self distanceIsGreaterThanOnePositionGoingFrom: aPosition to: anotherPosition) ifTrue: [ ^false ].
	
	^true
	
	
	
	! !

----SNAPSHOT----(29 October 2020 21:49:51) CuisUniversity-4383.image priorSource: 18647794!

----QUIT----(29 October 2020 21:52:22) CuisUniversity-4383.image priorSource: 18686554!

----STARTUP---- (31 October 2020 15:11:36) as /home/grosinov/linux64/CuisUniversity-4383.image!


!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 15:13:05'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 15:13:05'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 15:13:05'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 15:13:05'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 15:13:05'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 15:13:05'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 15:13:05'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 15:13:05'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 15:13:05'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 15:13:05'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 15:13:05'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 15:13:05'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 15:13:05'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 15:13:05'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotMoveFromAnEdgeToOtherEdge stamp: 'GR 10/31/2020 15:13:05'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 15:13:05'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/31/2020 15:17:43'!
test16PlayerCanMoveFromCornerToAdjacentEmptyPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	juego thePlayer: #X movesThePieceIn: (-1@1) To: (-1@0).
	
	self assert: (juego isOccupied: (-1@0))
	
	! !

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromCornerToAdjacentEmptyPosition stamp: 'GR 10/31/2020 15:17:44'!
ERROR!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromCornerToAdjacentEmptyPosition stamp: 'GR 10/31/2020 15:18:00'!
ERROR!
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 15:18:48' prior: 50915108!
distanceIsGreaterThanOnePositionGoingFrom: aPosition to: anotherPosition

	^((aPosition - anotherPosition) abs <= (1@1)) not! !

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromCornerToAdjacentEmptyPosition stamp: 'GR 10/31/2020 15:19:51'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 15:19:51'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 15:19:51'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 15:19:51'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 15:19:51'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 15:19:51'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 15:19:51'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 15:19:51'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 15:19:51'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 15:19:51'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 15:19:51'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 15:19:51'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 15:19:51'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 15:19:51'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotMoveFromAnEdgeToOtherEdge stamp: 'GR 10/31/2020 15:19:51'!
FAILURE!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 15:19:51'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromCornerToAdjacentEmptyPosition stamp: 'GR 10/31/2020 15:19:51'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotMoveFromAnEdgeToOtherEdge stamp: 'GR 10/31/2020 15:19:51'!
FAILURE!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromCornerToAdjacentEmptyPosition stamp: 'GR 10/31/2020 15:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 15:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 15:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 15:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 15:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 15:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 15:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 15:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 15:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 15:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 15:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 15:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 15:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 15:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotMoveFromAnEdgeToOtherEdge stamp: 'GR 10/31/2020 15:19:54'!
FAILURE!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 15:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromCornerToAdjacentEmptyPosition stamp: 'GR 10/31/2020 15:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotMoveFromAnEdgeToOtherEdge stamp: 'GR 10/31/2020 15:19:54'!
FAILURE!

!testRun: #TerniLapilliTest #test14PlayerCanNotMoveFromAnEdgeToOtherEdge stamp: 'GR 10/31/2020 15:20:28'!
FAILURE!

	(0@1) ~= (0@2)!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 15:23:23' prior: 50915592!
isValidMoveFrom: aPosition to: anotherPosition
	
	(self isAValidPosition: anotherPosition) ifFalse: [ ^false ].
	
	(occupiedPositions includes: anotherPosition) ifTrue: [ ^false ].
	
	(aPosition = (0@0)) ifTrue: [ ^ true ].
	
	(self distanceIsGreaterThanOnePositionGoingFrom: aPosition to: anotherPosition) ifTrue: [ ^false ].
	
	((aPosition x ~= anotherPosition x) and: (aPosition y ~= anotherPosition y)) ifTrue: [ ^false ]
	
	^true
	
	
	
	! !

!testRun: #TerniLapilliTest #test14PlayerCanNotMoveFromAnEdgeToOtherEdge stamp: 'GR 10/31/2020 15:23:25'!
FAILURE!

!testRun: #TerniLapilliTest #test14PlayerCanNotMoveFromAnEdgeToOtherEdge stamp: 'GR 10/31/2020 15:23:37'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 15:23:54' prior: 50915827!
isValidMoveFrom: aPosition to: anotherPosition
	
	(self isAValidPosition: anotherPosition) ifFalse: [ ^false ].
	
	(occupiedPositions includes: anotherPosition) ifTrue: [ ^false ].
	
	(aPosition = (0@0)) ifTrue: [ ^ true ].
	
	(self distanceIsGreaterThanOnePositionGoingFrom: aPosition to: anotherPosition) ifTrue: [ ^false ].
	
	((aPosition x ~= anotherPosition x) and: (aPosition y ~= anotherPosition y)) ifTrue: [ ^false ].
	
	^true
	
	
	
	! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 15:24:02' prior: 50915851!
isValidMoveFrom: aPosition to: anotherPosition
	
	(self isAValidPosition: anotherPosition) ifFalse: [ ^false ].
	
	(occupiedPositions includes: anotherPosition) ifTrue: [ ^false ].
	
	(aPosition = (0@0)) ifTrue: [ ^ true ].
	
	(self distanceIsGreaterThanOnePositionGoingFrom: aPosition to: anotherPosition) ifTrue: [ ^false ].
	
	((aPosition x ~= anotherPosition x) and: (aPosition y ~= anotherPosition y)) ifTrue: [ ^false ].
	
	^true
	
	
	
	! !

!testRun: #TerniLapilliTest #test14PlayerCanNotMoveFromAnEdgeToOtherEdge stamp: 'GR 10/31/2020 15:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 15:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 15:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 15:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 15:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 15:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 15:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 15:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 15:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 15:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 15:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 15:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 15:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 15:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotMoveFromAnEdgeToOtherEdge stamp: 'GR 10/31/2020 15:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 15:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromCornerToAdjacentEmptyPosition stamp: 'GR 10/31/2020 15:24:29'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/31/2020 15:25:14'!
test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (0@1) To: (-1@0). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !

!methodRemoval: TerniLapilliTest #test14PlayerCanNotMoveFromAnEdgeToOtherEdge stamp: 'GR 10/31/2020 15:25:14'!
test14PlayerCanNotMoveFromAnEdgeToOtherEdge
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (0@1) To: (-1@0). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 15:27:15' prior: 50915868!
isValidMoveFrom: aPosition to: anotherPosition
	
	(self isAValidPosition: anotherPosition) ifFalse: [ ^false ].
	
	(occupiedPositions includes: anotherPosition) ifTrue: [ ^false ].
	
	(aPosition = (0@0)) ifTrue: [ ^ true ].
	
	(self distanceIsGreaterThanOnePositionGoingFrom: aPosition to: anotherPosition) ifTrue: [ ^false ].
	
	(aPosition x ~= anotherPosition x and: (aPosition y ~= anotherPosition y)) ifTrue: [ ^false ].
	
	^true
	
	
	
	! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 15:27:40'!
doesADiagonalMoveGoingFrom: anotherPosition to: aPosition

	^ aPosition x ~= anotherPosition x and: (aPosition y ~= anotherPosition y)! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 15:27:40' prior: 50915978!
isValidMoveFrom: aPosition to: anotherPosition
	
	(self isAValidPosition: anotherPosition) ifFalse: [ ^false ].
	
	(occupiedPositions includes: anotherPosition) ifTrue: [ ^false ].
	
	(aPosition = (0@0)) ifTrue: [ ^ true ].
	
	(self distanceIsGreaterThanOnePositionGoingFrom: aPosition to: anotherPosition) ifTrue: [ ^false ].
	
	(self doesADiagonalMoveGoingFrom: anotherPosition to: aPosition) ifTrue: [ ^false ].
	
	^true
	
	
	
	! !

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 15:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 15:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 15:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 15:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 15:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 15:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 15:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 15:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 15:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 15:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 15:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 15:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 15:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 15:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 15:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 15:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromCornerToAdjacentEmptyPosition stamp: 'GR 10/31/2020 15:27:54'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/31/2020 15:32:20'!
test17PlayerCanNotMoveAPieceThatIsNotThere
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (-1@-1) To: (-1@0). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !

!testRun: #TerniLapilliTest #test17PlayerCanNotMoveAPieceThatIsNotThere stamp: 'GR 10/31/2020 15:32:24'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 15:32:24'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 15:32:24'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 15:32:24'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 15:32:24'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 15:32:24'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 15:32:24'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 15:32:24'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 15:32:24'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 15:32:24'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 15:32:24'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 15:32:24'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 15:32:24'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 15:32:24'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 15:32:24'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 15:32:24'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromCornerToAdjacentEmptyPosition stamp: 'GR 10/31/2020 15:32:24'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerCanNotMoveAPieceThatIsNotThere stamp: 'GR 10/31/2020 15:32:24'!
PASSED!

!methodRemoval: TerniLapilliTest #test17PlayerCanNotMoveAPieceThatIsNotThere stamp: 'GR 10/31/2020 15:33:09'!
test17PlayerCanNotMoveAPieceThatIsNotThere
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (-1@-1) To: (-1@0). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	!

('S'@4)!

Object subclass: #TerniLapilli
	instanceVariableNames: 'turn occupiedXPositions occupiedOPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'GR 10/31/2020 15:40:29'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'turn occupiedXPositions occupiedOPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 15:40:36'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 15:40:36'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 15:40:36'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 15:40:36'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 15:40:36'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 15:40:36'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 15:40:36'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 15:40:36'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 15:40:36'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 15:40:36'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 15:40:36'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 15:40:36'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 15:40:36'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 15:40:36'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 15:40:36'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 15:40:36'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromCornerToAdjacentEmptyPosition stamp: 'GR 10/31/2020 15:40:36'!
PASSED!
!TerniLapilli methodsFor: 'initialization' stamp: 'GR 10/31/2020 15:41:04' prior: 50913869 overrides: 16896425!
initialize

	turn := #X.
	occupiedXPositions  := Set new.
	occupiedOPositions  := Set new.! !

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 15:41:12'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 15:41:34' prior: 50914107!
totalPiecesPlayed
	
	^ occupiedXPositions size + occupiedOPositions size.! !

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 15:41:39'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 15:43:37' prior: 50914002!
isAValidPosition: aPoint

	^(((0@0) eightNeighbors includes: aPoint) or: aPoint = (0@0)) and: ((occupiedXPositions includes: aPoint) and: (occupiedXPositions includes: aPoint)) not! !

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 15:43:50'!
ERROR!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 15:45:00' prior: 50914084!
thePlayer: aPlayer placesAPieceIn: aPoint

	(self totalPiecesPlayed = 6) ifTrue: [self error: TerniLapilli canNotPlaceMoreThanThreePieces].
	
	(self isPlaying: aPlayer) ifFalse: [ self error: TerniLapilli canNotPlayInOthersTurn ].
	
	(self isAValidPosition: aPoint) ifFalse: [ self error: TerniLapilli canNotPlacePieceInInvalidPosition ].
	
	(aPlayer = #X) 
		ifTrue: [ occupiedXPositions add: aPoint ]
		ifFalse: [ occupiedOPositions add: aPoint ].! !

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 15:45:17'!
FAILURE!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 15:45:31'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 15:46:49' prior: 50916002!
isValidMoveFrom: aPosition to: anotherPosition
	
	(self isAValidPosition: anotherPosition) ifFalse: [ ^false ].
	
	((occupiedXPositions includes: anotherPosition) or: (occupiedOPositions includes: anotherPosition)) ifTrue: [ ^false ].
	
	(aPosition = (0@0)) ifTrue: [ ^ true ].
	
	(self distanceIsGreaterThanOnePositionGoingFrom: aPosition to: anotherPosition) ifTrue: [ ^false ].
	
	(self doesADiagonalMoveGoingFrom: anotherPosition to: aPosition) ifTrue: [ ^false ].
	
	^true
	
	
	
	! !

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 15:47:27'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 15:47:27'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 15:47:27'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 15:47:27'!
ERROR!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 15:47:27'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 15:47:27'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 15:47:27'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 15:47:27'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 15:47:27'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 15:47:27'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 15:47:27'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 15:47:27'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 15:47:27'!
FAILURE!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 15:47:27'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 15:47:27'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 15:47:27'!
ERROR!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromCornerToAdjacentEmptyPosition stamp: 'GR 10/31/2020 15:47:27'!
ERROR!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 15:47:29'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 15:47:55' prior: 50913080!
isEmpty
	
	^occupiedXPositions isEmpty and: (occupiedOPositions isEmpty).! !

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 15:47:56'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 15:47:58'!
ERROR!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 15:48:03'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 15:48:03'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 15:48:03'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 15:48:03'!
ERROR!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 15:48:03'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 15:48:03'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 15:48:03'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 15:48:03'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 15:48:03'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 15:48:03'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 15:48:03'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 15:48:03'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 15:48:03'!
FAILURE!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 15:48:03'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 15:48:03'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 15:48:03'!
ERROR!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromCornerToAdjacentEmptyPosition stamp: 'GR 10/31/2020 15:48:03'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 15:48:04'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 15:48:38' prior: 50912870!
isOccupied: aPoint 
	
	^(occupiedXPositions includes: aPoint) or: (occupiedOPositions includes: aPoint)! !

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 15:48:39'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 15:48:58' prior: 50916303!
isValidMoveFrom: aPosition to: anotherPosition
	
	(self isAValidPosition: anotherPosition) ifFalse: [ ^false ].
	
	(self isOccupied: anotherPosition) ifTrue: [ ^false ].
	
	(aPosition = (0@0)) ifTrue: [ ^ true ].
	
	(self distanceIsGreaterThanOnePositionGoingFrom: aPosition to: anotherPosition) ifTrue: [ ^false ].
	
	(self doesADiagonalMoveGoingFrom: anotherPosition to: aPosition) ifTrue: [ ^false ].
	
	^true
	
	
	
	! !

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 15:49:40'!
FAILURE!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 15:49:46'!
FAILURE!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 15:49:46'!
FAILURE!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 15:49:48'!
FAILURE!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 15:53:14'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 15:55:04' prior: 50916267!
isAValidPosition: aPoint

	^(((0@0) eightNeighbors includes: aPoint) or: aPoint = (0@0)) and: ((occupiedXPositions includes: aPoint) or: (occupiedXPositions includes: aPoint)) not! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 15:55:24' prior: 50916501!
isAValidPosition: aPosition

	^(((0@0) eightNeighbors includes: aPosition) or: aPosition = (0@0)) and: (self isOccupied: aPosition) not! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 15:56:20' prior: 50916466!
isValidMoveFrom: aPosition to: anotherPosition
	
	(self isAValidPosition: anotherPosition) ifFalse: [ ^false ].
	
	(self isAValidPosition: aPosition) ifFalse: [ ^false ].
	
	(aPosition = (0@0)) ifTrue: [ ^ true ].
	
	(self distanceIsGreaterThanOnePositionGoingFrom: aPosition to: anotherPosition) ifTrue: [ ^false ].
	
	(self doesADiagonalMoveGoingFrom: anotherPosition to: aPosition) ifTrue: [ ^false ].
	
	^true
	
	
	
	! !

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 15:56:25'!
FAILURE!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 15:56:32'!
FAILURE!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 15:57:43'!
FAILURE!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 15:57:43'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 16:00:15' prior: 50916517!
isValidMoveFrom: aPosition to: anotherPosition
	
	(self isAValidPosition: anotherPosition) ifFalse: [ ^false ].
	
	(self isOccupied: aPosition) ifFalse: [ ^false ].
	
	(aPosition = (0@0)) ifTrue: [ ^ true ].
	
	(self distanceIsGreaterThanOnePositionGoingFrom: aPosition to: anotherPosition) ifTrue: [ ^false ].
	
	(self doesADiagonalMoveGoingFrom: anotherPosition to: aPosition) ifTrue: [ ^false ].
	
	^true
	
	
	
	! !

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 16:00:17'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 16:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 16:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 16:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 16:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 16:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 16:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 16:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 16:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 16:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 16:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 16:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 16:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 16:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 16:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 16:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 16:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromCornerToAdjacentEmptyPosition stamp: 'GR 10/31/2020 16:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 16:00:20'!
ERROR!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 16:01:37' prior: 50914939!
thePlayer: aPlayer movesThePieceIn: aPosition To: anotherPosition
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	(aPlayer = #X) ifTrue: [
		occupiedXPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
		occupiedXPositions add: anotherPosition.
		]
		ifFalse: [ 
			occupiedOPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
			occupiedOPositions add: anotherPosition. ]
	
	! !

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 16:01:39'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 16:01:43'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 16:01:43'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 16:01:43'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 16:01:43'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 16:01:43'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 16:01:43'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 16:01:43'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 16:01:43'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 16:01:43'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 16:01:43'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 16:01:43'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 16:01:43'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 16:01:43'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 16:01:43'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 16:01:43'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 16:01:43'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromCornerToAdjacentEmptyPosition stamp: 'GR 10/31/2020 16:01:43'!
PASSED!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 16:08:04' prior: 50916279!
thePlayer: aPlayer placesAPieceIn: aPosition

	(self totalPiecesPlayed = 6) ifTrue: [self error: TerniLapilli canNotPlaceMoreThanThreePieces].
	
	(self isPlaying: aPlayer) ifFalse: [ self error: TerniLapilli canNotPlayInOthersTurn ].
	
	(self isAValidPosition: aPosition) ifFalse: [ self error: TerniLapilli canNotPlacePieceInInvalidPosition ].
	
	(aPlayer = #X) 
		ifTrue: [ occupiedXPositions add: aPosition ]
		ifFalse: [ occupiedOPositions add: aPosition ].! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 16:08:14' prior: 50913880!
putXAt: aPosition 
	
	self thePlayer: #X placesAPieceIn: aPosition.
	turn := #O.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 16:08:18' prior: 50913886!
putOAt: aPosition 
	
	self thePlayer: #O placesAPieceIn: aPosition.
	turn := #X.! !
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 16:08:36' prior: 50915995!
doesADiagonalMoveGoingFrom: aPosition to: anotherPosition

	^ aPosition x ~= anotherPosition x and: (aPosition y ~= anotherPosition y)! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'turn playerX playerO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'GR 10/31/2020 16:11:45'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'turn playerX playerO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Object subclass: #TerniLapilli
	instanceVariableNames: 'turn occupiedXPositions occupiedOPositions playerX playerO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'GR 10/31/2020 16:12:06'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'turn occupiedXPositions occupiedOPositions playerX playerO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Object subclass: #Player
	instanceVariableNames: 'turn occupiedXPositions occupiedOPositions playerX playerO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #Player category: 'Terni Lapilli' stamp: 'GR 10/31/2020 16:12:18'!
Object subclass: #Player
	instanceVariableNames: 'turn occupiedXPositions occupiedOPositions playerX playerO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Player subclass: #PlayerX
	instanceVariableNames: 'turn occupiedXPositions occupiedOPositions playerX playerO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Object subclass: #Player
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #Player category: 'Terni Lapilli' stamp: 'GR 10/31/2020 16:12:53'!
Object subclass: #Player
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Player subclass: #PlayerX
	instanceVariableNames: 'occupiedXPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #PlayerX category: 'Terni Lapilli' stamp: 'GR 10/31/2020 16:13:07'!
Player subclass: #PlayerX
	instanceVariableNames: 'occupiedXPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Player subclass: #PlayerO
	instanceVariableNames: 'occupiedOPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #PlayerO category: 'Terni Lapilli' stamp: 'GR 10/31/2020 16:13:15'!
Player subclass: #PlayerO
	instanceVariableNames: 'occupiedOPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'initialization' stamp: 'GR 10/31/2020 16:13:58' prior: 50916248 overrides: 16896425!
initialize

	playerX  := PlayerX new.
	playerO  := PlayerO new.
	turn := playerX.! !
!PlayerX methodsFor: 'no messages' stamp: 'GR 10/31/2020 16:14:24' overrides: 16896425!
initialize

	occupiedXPositions := Set new.! !
!PlayerO methodsFor: 'nil' stamp: 'GR 10/31/2020 16:14:46' overrides: 16896425!
initialize

	occupiedOPositions := Set new.! !

Player subclass: #PlayerO
	instanceVariableNames: 'occupiedPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #PlayerO category: 'Terni Lapilli' stamp: 'GR 10/31/2020 16:15:05'!
Player subclass: #PlayerO
	instanceVariableNames: 'occupiedPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Player subclass: #PlayerX
	instanceVariableNames: 'occupiedPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #PlayerX category: 'Terni Lapilli' stamp: 'GR 10/31/2020 16:15:09'!
Player subclass: #PlayerX
	instanceVariableNames: 'occupiedPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!PlayerX methodsFor: 'initialization' stamp: 'GR 10/31/2020 16:15:13' prior: 50916840 overrides: 16896425!
initialize

	occupiedPositions := Set new.! !
!PlayerO methodsFor: 'initialization' stamp: 'GR 10/31/2020 16:15:18' prior: 50916844 overrides: 16896425!
initialize

	occupiedPositions := Set new.! !
!PlayerO methodsFor: 'nil' stamp: 'GR 10/31/2020 16:15:37'!
occupiedPositions

	^occupiedPositions.! !
!PlayerX methodsFor: 'nil' stamp: 'GR 10/31/2020 16:15:49'!
occupiedPositions

	^occupiedPositions.! !

Player subclass: #PlayerO
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #PlayerO category: 'Terni Lapilli' stamp: 'GR 10/31/2020 16:16:44'!
Player subclass: #PlayerO
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Player subclass: #PlayerX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #PlayerX category: 'Terni Lapilli' stamp: 'GR 10/31/2020 16:16:48'!
Player subclass: #PlayerX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Object subclass: #Player
	instanceVariableNames: 'occupiedPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #Player category: 'Terni Lapilli' stamp: 'GR 10/31/2020 16:16:56'!
Object subclass: #Player
	instanceVariableNames: 'occupiedPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!Player methodsFor: 'nil' stamp: 'GR 10/31/2020 16:17:09' overrides: 16896425!
initialize

	occupiedPositions := Set new.! !
!Player methodsFor: 'nil' stamp: 'GR 10/31/2020 16:17:22'!
occupiedPositions

	^occupiedPositions.! !

!methodRemoval: PlayerO #initialize stamp: 'GR 10/31/2020 16:17:32'!
initialize

	occupiedPositions := Set new.!

!methodRemoval: PlayerO #occupiedPositions stamp: 'GR 10/31/2020 16:17:35'!
occupiedPositions

	^occupiedPositions.!

!methodRemoval: PlayerX #initialize stamp: 'GR 10/31/2020 16:17:39'!
initialize

	occupiedPositions := Set new.!

!methodRemoval: PlayerX #occupiedPositions stamp: 'GR 10/31/2020 16:17:43'!
occupiedPositions

	^occupiedPositions.!

Object subclass: #TerniLapilli
	instanceVariableNames: 'turn playerX playerO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'GR 10/31/2020 16:17:56'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'turn playerX playerO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 16:18:00'!
FAILURE!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 16:18:16'!
FAILURE!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 16:18:16'!
FAILURE!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 16:18:21'!
FAILURE!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 16:18:24'!
FAILURE!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 16:18:33'!
FAILURE!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 16:18:33'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 16:21:19' prior: 50916457!
isOccupied: aPosition 
	
	^(playerX occupiedPositions includes: aPosition) or: (playerO occupiedPositions includes: aPosition)! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 16:22:07' prior: 50916258!
totalPiecesPlayed
	
	^ playerX occupiedPositions size + playerO occupiedPositions size.! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 16:22:40' prior: 50916383!
isEmpty
	
	^playerX occupiedPositions isEmpty.! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 16:24:08' prior: 50916510!
isAValidPosition: aPosition

	^(((0@0) eightNeighbors includes: aPosition) or: aPosition = (0@0)) and: (self isOccupied: aPosition) not! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 16:24:26' prior: 50916998!
isAValidPosition: aPosition

	^(self isInTheBoard: aPosition) and: (self isOccupied: aPosition) not! !
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 16:24:46'!
isInTheBoard: aPosition

	((0@0) eightNeighbors includes: aPosition) or: aPosition = (0@0)! !
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 16:24:54' prior: 50917011!
isInTheBoard: aPosition

	^ ((0@0) eightNeighbors includes: aPosition) or: aPosition = (0@0)! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 16:26:32' prior: 50916631!
thePlayer: aPlayer movesThePieceIn: aPosition To: anotherPosition
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	"(aPlayer = #X) ifTrue: [
		occupiedXPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
		occupiedXPositions add: anotherPosition.
		]
		ifFalse: [ 
			occupiedOPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
			occupiedOPositions add: anotherPosition. ]"
	
	! !

Object subclass: #Player
	instanceVariableNames: 'occupiedPositions terniLapilli'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #Player category: 'Terni Lapilli' stamp: 'GR 10/31/2020 16:26:46'!
Object subclass: #Player
	instanceVariableNames: 'occupiedPositions terniLapilli'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!Player methodsFor: 'initialization' stamp: 'GR 10/31/2020 16:26:54' prior: 50916923 overrides: 16896425!
initialize

	occupiedPositions := Set new.
	! !
!TerniLapilli methodsFor: 'initialization' stamp: 'GR 10/31/2020 16:27:26' prior: 50916834 overrides: 16896425!
initialize

	playerX  := PlayerX newIn: self.
	playerO  := PlayerO newIn: self.
	turn := playerX.! !
!Player class methodsFor: 'no messages' stamp: 'GR 10/31/2020 16:28:06'!
newIn: aTerniLapilli

	^self new initializeNewIn: aTerniLapilli! !
!Player methodsFor: 'initialization' stamp: 'GR 10/31/2020 16:28:31'!
initializeNewIn: aTerniLapilli
	
	terniLapilli := aTerniLapilli.
	occupiedPositions := Set new.! !

!methodRemoval: Player #initialize stamp: 'GR 10/31/2020 16:28:49'!
initialize

	occupiedPositions := Set new.
	!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 16:31:35' prior: 50916738!
putOAt: aPosition 
	
	playerO placesAPieceIn: aPosition.
	"self thePlayer: #O placesAPieceIn: aPosition."
	turn := playerX.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 16:33:15' prior: 50917082!
putOAt: aPosition 
	
	
	playerO placesAPieceIn: aPosition.
	"self thePlayer: #O placesAPieceIn: aPosition."
	turn := playerX.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 16:34:12' prior: 50916732!
putXAt: aPosition 
	
	playerO placesAPieceIn: aPosition.
	turn := playerO.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 16:34:25' prior: 50917096!
putXAt: aPosition 
	
	"Validacion de jugada"
	playerO placesAPieceIn: aPosition.
	turn := playerO.! !
!Player methodsFor: 'nil' stamp: 'GR 10/31/2020 16:34:50'!
placeAPieceIn: aPosition

	occupiedPositions add: aPosition.! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 16:37:18' prior: 50916980!
isOccupied: aPosition 
	
	^(playerX occupies: aPosition) or: (playerO occupies: aPosition)! !
!Player methodsFor: 'accessing' stamp: 'GR 10/31/2020 16:37:54'!
occupies: aPosition

	^occupiedPositions includes: aPosition ! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 16:38:35' prior: 50916714!
thePlayer: aPlayer placesAPieceIn: aPosition

	(self totalPiecesPlayed = 6) ifTrue: [self error: TerniLapilli canNotPlaceMoreThanThreePieces].
	
	(self isPlaying: aPlayer) ifFalse: [ self error: TerniLapilli canNotPlayInOthersTurn ].
	
	(self isAValidPosition: aPosition) ifFalse: [ self error: TerniLapilli canNotPlacePieceInInvalidPosition ].! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 16:43:47'!
thePlayer: aPlayer canPlaceAPieceIn: aPosition

	(self totalPiecesPlayed = 6) ifTrue: [self error: TerniLapilli canNotPlaceMoreThanThreePieces].
	
	(self isPlaying: aPlayer) ifFalse: [ self error: TerniLapilli canNotPlayInOthersTurn ].
	
	(self isAValidPosition: aPosition) ifFalse: [ self error: TerniLapilli canNotPlacePieceInInvalidPosition ].! !
!Player methodsFor: 'actions' stamp: 'GR 10/31/2020 16:44:05'!
placesAPieceIn: aPosition

	occupiedPositions add: aPosition.! !

!methodRemoval: Player #placeAPieceIn: stamp: 'GR 10/31/2020 16:44:05'!
placeAPieceIn: aPosition

	occupiedPositions add: aPosition.!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 16:44:28' prior: 50917089!
putOAt: aPosition 
	
	self thePlayer: playerO canPlaceAPieceIn: aPosition.
	playerO placesAPieceIn: aPosition.
	"self thePlayer: #O placesAPieceIn: aPosition."
	turn := playerX.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 16:44:32' prior: 50917159!
putOAt: aPosition 
	
	self thePlayer: playerO canPlaceAPieceIn: aPosition.
	playerO placesAPieceIn: aPosition.
	turn := playerX.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 16:44:44' prior: 50917102!
putXAt: aPosition 
	
	self thePlayer: playerX canPlaceAPieceIn: aPosition.
	playerO placesAPieceIn: aPosition.
	turn := playerO.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 16:45:37' prior: 50917175!
putXAt: aPosition 
	
	(self thePlayer: playerX canPlaceAPieceIn: aPosition) ifFalse: [  ].
	playerO placesAPieceIn: aPosition.
	turn := playerO.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 16:45:49' prior: 50917182!
putXAt: aPosition 
	
	(self thePlayer: playerX canPlaceAPieceIn: aPosition) ifFalse: [ self error: TerniLapilli canNotPlaceMoreThanThreePieces ].
	playerO placesAPieceIn: aPosition.
	turn := playerO.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 16:46:14' prior: 50917190!
putXAt: aPosition 
	
	self thePlayer: playerX canPlaceAPieceIn: aPosition.
	playerO placesAPieceIn: aPosition.
	turn := playerO.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 16:46:37' prior: 50917200!
putXAt: aPosition 
	
	self thePlayer: playerX canPlaceAPieceIn: aPosition.
	playerX placesAPieceIn: aPosition.
	turn := playerO.! !

!methodRemoval: TerniLapilli #thePlayer:placesAPieceIn: stamp: 'GR 10/31/2020 16:47:11'!
thePlayer: aPlayer placesAPieceIn: aPosition

	(self totalPiecesPlayed = 6) ifTrue: [self error: TerniLapilli canNotPlaceMoreThanThreePieces].
	
	(self isPlaying: aPlayer) ifFalse: [ self error: TerniLapilli canNotPlayInOthersTurn ].
	
	(self isAValidPosition: aPosition) ifFalse: [ self error: TerniLapilli canNotPlacePieceInInvalidPosition ].!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 16:48:58' prior: 50917168!
putOAt: aPosition 
	
	self thePlayer: playerO canPlaceAPieceIn: aPosition.
	playerO placesAPieceIn: aPosition.
	turn := playerX.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 16:49:04' prior: 50917228!
putOAt: aPosition 
	
	playerO placesAPieceIn: aPosition.
	turn := playerX.! !
!Player methodsFor: 'actions' stamp: 'GR 10/31/2020 16:49:27' prior: 50917150!
placesAPieceIn: aPosition
	
	terniLapilli thePlayer: self canPlaceAPieceIn: aPosition.
	occupiedPositions add: aPosition.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 16:51:03' prior: 50917023!
thePlayer: aPlayer movesThePieceIn: aPosition To: anotherPosition
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	aPlayer moveThePieceIn: aPosition to: anotherPosition.
	
	"(aPlayer = #X) ifTrue: [
		occupiedXPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
		occupiedXPositions add: anotherPosition.
		]
		ifFalse: [ 
			occupiedOPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
			occupiedOPositions add: anotherPosition. ]"
	
	! !
!Player methodsFor: 'actions' stamp: 'GR 10/31/2020 16:51:55'!
movesThePieceIn: aPosition to: anotherPosition

	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedPositions add: anotherPosition.! !
!Player methodsFor: 'actions' stamp: 'GR 10/31/2020 16:52:04' prior: 50917268!
movesThePieceIn: aPosition to: anotherPosition

	(terniLapilli isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedPositions add: anotherPosition.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 16:52:45' prior: 50917247!
thePlayer: aPlayer movesThePieceIn: aPosition To: anotherPosition
	
	aPlayer movesThePieceIn: aPosition to: anotherPosition.
	
	! !
!Player methodsFor: 'actions' stamp: 'GR 10/31/2020 16:58:00' prior: 50917281!
movesThePieceIn: aPosition to: anotherPosition

	(terniLapilli isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedPositions add: anotherPosition.
	
	terniLapilli changeTurnTo: self! !
!Player methodsFor: 'actions' stamp: 'GR 10/31/2020 16:58:42' prior: 50917301!
movesThePieceIn: aPosition to: anotherPosition

	(terniLapilli isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedPositions add: anotherPosition.! !
!Player methodsFor: 'actions' stamp: 'GR 10/31/2020 17:01:34' prior: 50917240!
placesAPieceIn: aPosition
	
	self subclassResponsibility.! !
!PlayerO methodsFor: 'no messages' stamp: 'GR 10/31/2020 17:02:10' overrides: 50917328!
placesAPieceIn: aPosition

	terniLapilli thePlayer: self canPlaceAPieceIn: aPosition.
	occupiedPositions add: aPosition.
	terniLapilli changeTurnToPlayerX ! !
!PlayerX methodsFor: 'nil' stamp: 'GR 10/31/2020 17:02:24' overrides: 50917328!
placesAPieceIn: aPosition

	terniLapilli thePlayer: self canPlaceAPieceIn: aPosition.
	occupiedPositions add: aPosition.
	terniLapilli changeTurnToPlayerO! !
!PlayerO methodsFor: 'actions' stamp: 'GR 10/31/2020 17:03:26' overrides: 50917315!
movesThePieceIn: aPosition to: anotherPosition
	
	(terniLapilli isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedPositions add: anotherPosition.! !
!PlayerX methodsFor: 'actions' stamp: 'GR 10/31/2020 17:03:43' overrides: 50917315!
movesThePieceIn: aPosition to: anotherPosition
	
	(terniLapilli isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedPositions add: anotherPosition.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 17:04:38' prior: 50917294!
thePlayer: aPlayer movesThePieceIn: aPosition To: anotherPosition
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	aPlayer movesThePieceIn: aPosition to: anotherPosition.
	
	! !
!PlayerX methodsFor: 'actions' stamp: 'GR 10/31/2020 17:05:05' prior: 50917362 overrides: 50917315!
movesThePieceIn: aPosition to: anotherPosition
	
	occupiedPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedPositions add: anotherPosition.! !
!PlayerO methodsFor: 'actions' stamp: 'GR 10/31/2020 17:05:11' prior: 50917349 overrides: 50917315!
movesThePieceIn: aPosition to: anotherPosition
	
	occupiedPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedPositions add: anotherPosition.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 17:07:25'!
thePlayer: aPlayer palceAPieceIn: aPosition 
	
	self thePlayer: playerX canPlaceAPieceIn: aPosition.
	playerX placesAPieceIn: aPosition.
	turn := playerO.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 17:07:46' prior: 50917405!
thePlayer: aPlayer palceAPieceIn: aPosition 
	
	self thePlayer: aPlayer canPlaceAPieceIn: aPosition.
	aPlayer placesAPieceIn: aPosition.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 17:08:20' prior: 50917413!
thePlayer: aPlayer palceAPieceIn: aPosition 
	
	self thePlayer: aPlayer canPlaceAPieceIn: aPosition.
	
	aPlayer placesAPieceIn: aPosition.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 17:10:26' prior: 50917235!
putOAt: aPosition 
	
	self thePlayer: playerO placesAPieceIn: aPosition.
	turn := playerX.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 17:10:31'!
thePlayer: aPlayer palcesAPieceIn: aPosition 
	
	self thePlayer: aPlayer canPlaceAPieceIn: aPosition.
	
	aPlayer placesAPieceIn: aPosition.! !

!methodRemoval: TerniLapilli #thePlayer:palceAPieceIn: stamp: 'GR 10/31/2020 17:10:31'!
thePlayer: aPlayer palceAPieceIn: aPosition 
	
	self thePlayer: aPlayer canPlaceAPieceIn: aPosition.
	
	aPlayer placesAPieceIn: aPosition.!

!methodRemoval: TerniLapilli #putXAt: stamp: 'GR 10/31/2020 17:11:18'!
putXAt: aPosition 
	
	self thePlayer: playerX canPlaceAPieceIn: aPosition.
	playerX placesAPieceIn: aPosition.
	turn := playerO.!

!methodRemoval: TerniLapilli #putOAt: stamp: 'GR 10/31/2020 17:11:22'!
putOAt: aPosition 
	
	self thePlayer: playerO placesAPieceIn: aPosition.
	turn := playerX.!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 17:12:20'!
changeTurnToPlayerX

	turn := playerX! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 17:12:27'!
changeTurnToPlayerO

	turn := playerO! !
!PlayerX methodsFor: 'actions' stamp: 'GR 10/31/2020 17:12:39' prior: 50917341 overrides: 50917328!
placesAPieceIn: aPosition

	terniLapilli thePlayer: self canPlaceAPieceIn: aPosition.
	
	occupiedPositions add: aPosition.
	
	terniLapilli changeTurnToPlayerO! !
!PlayerO methodsFor: 'actions' stamp: 'GR 10/31/2020 17:12:48' prior: 50917333 overrides: 50917328!
placesAPieceIn: aPosition

	terniLapilli thePlayer: self canPlaceAPieceIn: aPosition.
	
	occupiedPositions add: aPosition.
	
	terniLapilli changeTurnToPlayerX ! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/31/2020 17:14:31' prior: 50913861!
test01GameStartsWithXTurn

	| juego |

	juego := TerniLapilli new.
	
	self assert: (juego isPlaying: #X).
	self assert: juego isEmpty.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 17:14:51' prior: 50917488!
test01GameStartsWithXTurn

	| juego |

	juego := TerniLapilli new.
	
	self assert: (juego isPlaying: juego playerX).
	self assert: juego isEmpty.! !

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 17:14:58'!
ERROR!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 17:14:58'!
ERROR!
!TerniLapilli methodsFor: 'accessing' stamp: 'GR 10/31/2020 17:15:04'!
playerX
	self shouldBeImplemented.
	^playerX! !
!TerniLapilli methodsFor: 'accessing' stamp: 'GR 10/31/2020 17:15:08' prior: 50917509!
playerX
	
	^ playerX! !

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 17:15:10'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 17:15:14'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 17:16:03' prior: 50913851!
test02AfterXPlaysIsOTurn

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	
	self assert: (juego isPlaying: juego playerO).
	self deny: (juego isPlaying: juego playerX).
	self assert: (juego isOccupied: (0@0))! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 17:17:55'!
putXAt: aPosition

	self thePlayer: playerX palcesAPieceIn: aPosition.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 17:18:18'!
putOAt: aPosition

	self thePlayer: playerO palcesAPieceIn: aPosition.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 17:18:43'!
thePlayer: aPlayer placesAPieceIn: aPosition 
	
	self thePlayer: aPlayer canPlaceAPieceIn: aPosition.
	
	aPlayer placesAPieceIn: aPosition.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'GR 10/31/2020 17:18:43' prior: 50917534!
putXAt: aPosition

	self thePlayer: playerX placesAPieceIn: aPosition.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'GR 10/31/2020 17:18:43' prior: 50917539!
putOAt: aPosition

	self thePlayer: playerO placesAPieceIn: aPosition.! !

!methodRemoval: TerniLapilli #thePlayer:palcesAPieceIn: stamp: 'GR 10/31/2020 17:18:43'!
thePlayer: aPlayer palcesAPieceIn: aPosition 
	
	self thePlayer: aPlayer canPlaceAPieceIn: aPosition.
	
	aPlayer placesAPieceIn: aPosition.!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 17:21:05'!
playerXMovesFrom: aPosition to: anotherPosition

	self thePlayer: playerX movesThePieceIn: aPosition to: anotherPosition.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 17:21:46' prior: 50917570!
playerXMovesFrom: aPosition to: anotherPosition
	
	self thePlayer: playerX movesThePieceIn: aPosition to: anotherPosition.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 17:21:52'!
playerOMovesFrom: aPosition to: anotherPosition
	
	self thePlayer: playerO movesThePieceIn: aPosition to: anotherPosition.! !
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 17:22:43'!
thePlayer: aPlayer movesThePieceIn: aPosition to: anotherPosition
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	aPlayer movesThePieceIn: aPosition to: anotherPosition.
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/31/2020 17:22:43' prior: 50915669!
test16PlayerCanMoveFromCornerToAdjacentEmptyPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	juego thePlayer: #X movesThePieceIn: (-1@1) to: (-1@0).
	
	self assert: (juego isOccupied: (-1@0))
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/31/2020 17:22:43' prior: 50915051!
test10PlayerCanNotMoveMoreThanOnePosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (-1@-1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (0@-1) to: (0@1). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/31/2020 17:22:43' prior: 50915944!
test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (0@1) to: (-1@0). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/31/2020 17:22:43' prior: 50914668!
test13PlayerCanNotMoveAPieceToAnOccupiedPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (0@0) to: (0@-1). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/31/2020 17:22:43' prior: 50915472!
test15PlayerCanMoveFromCenterToAnyEmptyPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	juego thePlayer: #X movesThePieceIn: (0@0) to: (-1@0).
	
	self assert: (juego isOccupied: (-1@0))
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/31/2020 17:22:43' prior: 50914634!
test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (-1@0) to: (-1@-1). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'GR 10/31/2020 17:22:43' prior: 50914550!
test11PlayerCanNotMoveAPieceOutsideTheBoard
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego thePlayer: #X movesThePieceIn: (0@0) to: (0@4). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !

!methodRemoval: TerniLapilli #thePlayer:movesThePieceIn:To: stamp: 'GR 10/31/2020 17:22:43'!
thePlayer: aPlayer movesThePieceIn: aPosition To: anotherPosition
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	aPlayer movesThePieceIn: aPosition to: anotherPosition.
	
	!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 17:23:16'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 17:23:16'!
ERROR!
!TerniLapilli methodsFor: 'accessing' stamp: 'GR 10/31/2020 17:23:21'!
playerO
	self shouldBeImplemented.
	^playerO! !
!TerniLapilli methodsFor: 'accessing' stamp: 'GR 10/31/2020 17:23:24' prior: 50917732!
playerO
	
	^playerO! !

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 17:23:27'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 17:23:28'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 17:23:48' prior: 50913840!
test03AfterOPlaysIsXTurn

	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	
	self assert: (juego isPlaying: juego playerX).
	self deny: (juego isPlaying: juego playerO).
	self assert: (juego isOccupied: (0@1))! !

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 17:23:49'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 17:23:53'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 17:23:55'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 17:23:57'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 17:23:57'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 17:23:57'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 17:23:57'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 17:23:57'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 17:23:57'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 17:23:57'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 17:23:57'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 17:23:57'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 17:23:57'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 17:23:57'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 17:23:57'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 17:23:57'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 17:23:57'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 17:23:57'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 17:23:57'!
ERROR!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromCornerToAdjacentEmptyPosition stamp: 'GR 10/31/2020 17:23:57'!
ERROR!
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 17:24:29' prior: 50917616!
test10PlayerCanNotMoveMoreThanOnePosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (-1@-1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego playerXMovesFrom: (0@-1) to: (0@1). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 17:24:36' prior: 50917699!
test11PlayerCanNotMoveAPieceOutsideTheBoard
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego playerXMovesFrom: (0@0) to: (0@4). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 17:24:42' prior: 50917682!
test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego playerXMovesFrom: (-1@0) to: (-1@-1). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 17:24:46' prior: 50917651!
test13PlayerCanNotMoveAPieceToAnOccupiedPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego playerXMovesFrom: (0@0) to: (0@-1). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 17:24:55' prior: 50917633!
test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	self 
		should: [ juego playerXMovesFrom: (0@1) to: (-1@0). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 17:25:03' prior: 50917668!
test15PlayerCanMoveFromCenterToAnyEmptyPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	juego playerXMovesFrom: (0@0) to: (-1@0).
	
	self assert: (juego isOccupied: (-1@0))
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 17:25:08' prior: 50917602!
test16PlayerCanMoveFromCornerToAdjacentEmptyPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	juego playerXMovesFrom: (-1@1) to: (-1@0).
	
	self assert: (juego isOccupied: (-1@0))
	
	! !

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromCornerToAdjacentEmptyPosition stamp: 'GR 10/31/2020 17:25:27'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 17:25:27'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 17:25:27'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 17:25:27'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 17:25:27'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 17:25:27'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 17:25:27'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 17:25:27'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 17:25:27'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 17:25:27'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 17:25:27'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 17:25:27'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 17:25:27'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 17:25:27'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 17:25:27'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 17:25:27'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromCornerToAdjacentEmptyPosition stamp: 'GR 10/31/2020 17:25:27'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromCornerToAdjacentEmptyPosition stamp: 'GR 10/31/2020 17:25:39'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 17:25:39'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 17:25:39'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 17:25:39'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 17:25:39'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 17:25:39'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 17:25:39'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 17:25:39'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 17:25:39'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 17:25:39'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 17:25:39'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 17:25:39'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 17:25:39'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 17:25:39'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 17:25:39'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 17:25:39'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromCornerToAdjacentEmptyPosition stamp: 'GR 10/31/2020 17:25:39'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 17:26:11'!
test17TurnChangesWhenAPlayerMovesPiece
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	juego playerXMovesFrom: (-1@1) to: (-1@0).
	
	self assert: (juego isOccupied: (-1@0))
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 17:26:30' prior: 50918053!
test17TurnChangesWhenAPlayerMovesPiece
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	juego playerXMovesFrom: (-1@1) to: (-1@0).
	
	self assert: (juego isPlaying: juego playerO)
	
	! !

!testRun: #TerniLapilliTest #test17TurnChangesWhenAPlayerMovesPiece stamp: 'GR 10/31/2020 17:26:35'!
FAILURE!
!PlayerX methodsFor: 'actions' stamp: 'GR 10/31/2020 17:27:47' prior: 50917386 overrides: 50917315!
movesThePieceIn: aPosition to: anotherPosition
	
	occupiedPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedPositions add: anotherPosition.
	
	terniLapilli changeTurnToPlayerO.! !

!testRun: #TerniLapilliTest #test17TurnChangesWhenAPlayerMovesPiece stamp: 'GR 10/31/2020 17:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 17:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 17:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 17:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 17:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 17:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 17:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 17:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 17:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 17:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 17:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 17:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 17:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 17:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 17:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 17:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromCornerToAdjacentEmptyPosition stamp: 'GR 10/31/2020 17:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test17TurnChangesWhenAPlayerMovesPiece stamp: 'GR 10/31/2020 17:27:54'!
PASSED!

!methodRemoval: TerniLapilliTest #test17TurnChangesWhenAPlayerMovesPiece stamp: 'GR 10/31/2020 17:28:41'!
test17TurnChangesWhenAPlayerMovesPiece
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	juego playerXMovesFrom: (-1@1) to: (-1@0).
	
	self assert: (juego isPlaying: juego playerO)
	
	!
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 17:29:12' prior: 50917908!
test15PlayerCanMoveFromCenterToAnyEmptyPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	juego playerXMovesFrom: (0@0) to: (-1@0).
	
	self assert: (juego isOccupied: (-1@0)).
	self assert: (juego isPlaying: juego playerO)
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 17:30:13' prior: 50917921!
test16PlayerCanMoveFromCornerToAdjacentEmptyPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	juego playerXMovesFrom: (0@0) to: (-1@0).
	juego playerOMovesFrom: (1@1) to: (0@0).
	
	self assert: (juego isOccupied: (-1@0))
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 17:31:11' prior: 50918184!
test16PlayerCanMoveFromCornerToAdjacentEmptyPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	juego playerXMovesFrom: (0@0) to: (-1@0).
	juego playerOMovesFrom: (1@1) to: (1@0).
	
	self assert: (juego isOccupied: (1@0)).
	self assert: (juego isPlaying: juego playerX)
	
	! !

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromCornerToAdjacentEmptyPosition stamp: 'GR 10/31/2020 17:31:23'!
FAILURE!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromCornerToAdjacentEmptyPosition stamp: 'GR 10/31/2020 17:32:12'!
FAILURE!
!PlayerO methodsFor: 'actions' stamp: 'GR 10/31/2020 17:32:43' prior: 50917396 overrides: 50917315!
movesThePieceIn: aPosition to: anotherPosition
	
	occupiedPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedPositions add: anotherPosition.
	
	terniLapilli changeTurnToPlayerX.! !

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromCornerToAdjacentEmptyPosition stamp: 'GR 10/31/2020 17:32:45'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 17:32:45'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 17:32:45'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 17:32:45'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 17:32:45'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 17:32:45'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 17:32:45'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 17:32:45'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 17:32:45'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 17:32:45'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 17:32:45'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 17:32:45'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 17:32:45'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 17:32:45'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 17:32:45'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 17:32:45'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromCornerToAdjacentEmptyPosition stamp: 'GR 10/31/2020 17:32:45'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 17:35:33'!
test16PlayerCanMoveFromAnywhereToAdjacentPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	juego playerXMovesFrom: (0@0) to: (-1@0).
	juego playerOMovesFrom: (1@1) to: (1@0).
	
	self assert: (juego isOccupied: (1@0)).
	self assert: (juego isPlaying: juego playerX)
	
	! !

!methodRemoval: TerniLapilliTest #test16PlayerCanMoveFromCornerToAdjacentEmptyPosition stamp: 'GR 10/31/2020 17:35:33'!
test16PlayerCanMoveFromCornerToAdjacentEmptyPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	juego playerXMovesFrom: (0@0) to: (-1@0).
	juego playerOMovesFrom: (1@1) to: (1@0).
	
	self assert: (juego isOccupied: (1@0)).
	self assert: (juego isPlaying: juego playerX)
	
	!

Object subclass: #TerniLapilli
	instanceVariableNames: 'turn playerX playerO winner isOver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'GR 10/31/2020 17:44:59'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'turn playerX playerO winner isOver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Object subclass: #TerniLapilli
	instanceVariableNames: 'turn playerX playerO winner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'GR 10/31/2020 17:45:36'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'turn playerX playerO winner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 17:51:20'!
test17
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (0@1).
	juego putOAt: (-1@-1).
	
	juego playerXMovesFrom: (0@0) to: (-1@0).
	juego playerOMovesFrom: (1@1) to: (1@0).
	
	self assert: (juego isOccupied: (1@0)).
	self assert: (juego isPlaying: juego playerX)
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 17:52:57'!
test17PlayerXWinsVertically
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (0@1).
	juego putOAt: (-1@-1).
	
	self assert: (juego hasPlayerXWon).
	self assert: (juego isOver)
	
	! !

!methodRemoval: TerniLapilliTest #test17 stamp: 'GR 10/31/2020 17:53:03'!
test17
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (0@1).
	juego putOAt: (-1@-1).
	
	juego playerXMovesFrom: (0@0) to: (-1@0).
	juego playerOMovesFrom: (1@1) to: (1@0).
	
	self assert: (juego isOccupied: (1@0)).
	self assert: (juego isPlaying: juego playerX)
	
	!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 17:53:19'!
ERROR!
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 17:53:59' prior: 50918365!
test17PlayerXWinsVertically
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (0@-1).
	juego putOAt: (-1@-1).
	
	self assert: (juego hasPlayerXWon).
	self assert: (juego isOver)
	
	! !

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 17:54:00'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 17:54:15'!
hasPlayerXWon
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 17:54:32' prior: 50918409!
hasPlayerXWon
	
	^winner = playerX.! !

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 17:54:36'!
FAILURE!
!PlayerX methodsFor: 'actions' stamp: 'GR 10/31/2020 17:55:48' prior: 50917470 overrides: 50917328!
placesAPieceIn: aPosition

	terniLapilli thePlayer: self canPlaceAPieceIn: aPosition.
	
	occupiedPositions add: aPosition.
	
	terniLapilli changeTurnToPlayerO.
	
	self hasPlayerXWon.! !
!Player methodsFor: 'testing' stamp: 'GR 10/31/2020 17:56:12'!
hasPlayerXWon
	self shouldBeImplemented.! !
!Player methodsFor: 'testing' stamp: 'GR 10/31/2020 18:01:07' prior: 50918430!
hasPlayerXWon
	
	| aPiece |
	
	aPiece := occupiedPositions detect: [ :aPosition | aPosition].
	
	occupiedPositions allSatisfy: [ :aPosition |  ]! !
!Player methodsFor: 'testing' stamp: 'GR 10/31/2020 18:01:13' prior: 50918434!
hasPlayerXWon
	
	| aPiece |
	
	aPiece := occupiedPositions detect: [ :aPosition |].
	
	occupiedPositions allSatisfy: [ :aPosition |  ]! !
!Player methodsFor: 'testing' stamp: 'GR 10/31/2020 18:01:31' prior: 50918442!
hasPlayerXWon
	
	| aPiece |
	
	aPiece := occupiedPositions detect: [ :aPosition |].
	
	occupiedPositions allSatisfy: [ :aPosition |  aPiece x = aPosition x]! !

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:02:29'!
ERROR!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:03:21'!
ERROR!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:03:26'!
ERROR!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:03:30'!
ERROR!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:03:50'!
ERROR!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:03:55'!
ERROR!
!Player methodsFor: 'testing' stamp: 'GR 10/31/2020 18:04:17' prior: 50918449!
hasPlayerXWon
	
	| aPiece |
	
	aPiece := occupiedPositions detect: [ :aPosition | true].
	
	occupiedPositions allSatisfy: [ :aPosition |  aPiece x = aPosition x]! !

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:04:22'!
ERROR!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:04:27'!
FAILURE!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:04:57'!
FAILURE!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:06:24'!
FAILURE!
!Player methodsFor: 'testing' stamp: 'GR 10/31/2020 18:07:52' prior: 50918475!
hasPlayerXWon
	
	| aPiece |
	
	aPiece := occupiedPositions detect: [ :aPosition | true].
	
	( occupiedPositions allSatisfy: [ :aPosition |  aPiece x = aPosition x] ) ifTrue: [ terniLapilli playerXWon].! !
!Player methodsFor: 'testing' stamp: 'GR 10/31/2020 18:09:45' prior: 50918496!
hasPlayerXWon
	
	| aPiece |
	
	(occupiedPositions size < 3) ifTrue: [ ^false ].
	
	aPiece := occupiedPositions detect: [ :aPosition | true].
	
	( occupiedPositions allSatisfy: [ :aPosition |  aPiece x = aPosition x] ) ifTrue: [ 
		terniLapilli playerXWon.
		^true].
	
	! !
!Player methodsFor: 'testing' stamp: 'GR 10/31/2020 18:09:53' prior: 50918505!
hasPlayerXWon
	
	| aPiece |
	
	(occupiedPositions size < 3) ifTrue: [ ^false ].
	
	aPiece := occupiedPositions detect: [ :aPosition | true].
	
	( occupiedPositions allSatisfy: [ :aPosition |  aPiece x = aPosition x] ) ifTrue: [ 
		terniLapilli playerXWon.
		^true ].
	
	! !
!Player methodsFor: 'testing' stamp: 'GR 10/31/2020 18:10:08' prior: 50918516!
hasPlayerXWon
	
	| aPiece |
	
	(occupiedPositions size < 3) ifTrue: [ ^false ].
	
	aPiece := occupiedPositions detect: [ :aPosition | true].
	
	( occupiedPositions allSatisfy: [ :aPosition |  aPiece x = aPosition x] ) ifTrue: [ 
		terniLapilli playerXWon.
		^true ].
	! !

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:10:42'!
ERROR!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 18:10:53'!
playerXWon
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 18:11:00' prior: 50918542!
playerXWon
	
	winner := playerX.! !

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:11:02'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 18:11:19'!
isOver
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 18:11:40' prior: 50918554!
isOver
	
	self hasPlayerXWon or: self hasPlayerXWon ! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 18:11:47' prior: 50918558!
isOver
	
	self hasPlayerXWon or: self hasPlayerOWon ! !

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:11:49'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 18:12:17'!
hasPlayerOWon
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 18:12:22' prior: 50918570!
hasPlayerOWon
	
	winner := playerO! !

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:12:25'!
ERROR!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:12:31'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 18:12:49' prior: 50918563!
isOver
	
	^self hasPlayerXWon or: self hasPlayerOWon ! !

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:12:49'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 18:12:49'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 18:12:49'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 18:12:49'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 18:12:49'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 18:12:49'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:12:49'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:12:49'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 18:12:49'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 18:12:49'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 18:12:49'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 18:12:49'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 18:12:49'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 18:12:49'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 18:12:49'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 18:12:49'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'GR 10/31/2020 18:12:49'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:12:49'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 18:13:15' prior: 50918394!
test17PlayerXWinsVertically
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (0@-1).
	
	self assert: (juego hasPlayerXWon).
	self assert: (juego isOver)
	
	! !
!Player methodsFor: 'testing' stamp: 'GR 10/31/2020 18:14:33' prior: 50918528!
hasPlayerXWon
	
	| aXPosition |
	
	(occupiedPositions size < 3) ifTrue: [ ^false ].
	
	aXPosition := occupiedPositions detect: [ :aPosition | true].
	
	( occupiedPositions allSatisfy: [ :aPosition |  aXPosition x = aPosition x] ) ifTrue: [ 
		terniLapilli playerXWon.
		^true ].
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 18:15:24'!
test17PlayerOWinsVertically
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (1@-1).
	juego putOAt: (0@0).
	juego putXAt: (1@1).
	juego putOAt: (0@1).
	juego putXAt: (1@1).
	juego putOAt: (0@-1).
	
	self assert: (juego hasPlayerXWon).
	self assert: (juego isOver)
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 18:15:27' prior: 50918675!
test17PlayerOWinsVertically
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (1@-1).
	juego putOAt: (0@0).
	juego putXAt: (1@1).
	juego putOAt: (0@1).
	juego putXAt: (1@1).
	juego putOAt: (0@-1).
	
	self assert: (juego hasPlayerOWon).
	self assert: (juego isOver)
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 18:15:36'!
test18PlayerOWinsVertically
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (1@-1).
	juego putOAt: (0@0).
	juego putXAt: (1@1).
	juego putOAt: (0@1).
	juego putXAt: (1@1).
	juego putOAt: (0@-1).
	
	self assert: (juego hasPlayerOWon).
	self assert: (juego isOver)
	
	! !

!methodRemoval: TerniLapilliTest #test17PlayerOWinsVertically stamp: 'GR 10/31/2020 18:15:36'!
test17PlayerOWinsVertically
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (1@-1).
	juego putOAt: (0@0).
	juego putXAt: (1@1).
	juego putOAt: (0@1).
	juego putXAt: (1@1).
	juego putOAt: (0@-1).
	
	self assert: (juego hasPlayerOWon).
	self assert: (juego isOver)
	
	!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 18:15:38'!
ERROR!
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 18:16:05' prior: 50918699!
test18PlayerOWinsVertically
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (1@-1).
	juego putOAt: (0@0).
	juego putXAt: (1@1).
	juego putOAt: (0@1).
	juego putXAt: (-1@-1).
	juego putOAt: (0@-1).
	
	self assert: (juego hasPlayerOWon).
	self assert: (juego isOver)
	
	! !

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 18:16:08'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 18:16:40' prior: 50918575!
hasPlayerOWon
	
	^ winner = playerO! !

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 18:16:41'!
FAILURE!
!PlayerO methodsFor: 'actions' stamp: 'GR 10/31/2020 18:17:05' prior: 50917479 overrides: 50917328!
placesAPieceIn: aPosition

	terniLapilli thePlayer: self canPlaceAPieceIn: aPosition.
	
	occupiedPositions add: aPosition.
	
	terniLapilli changeTurnToPlayerX.
	
	self hasPlayerOWon.! !

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 18:17:08'!
ERROR!
!Player methodsFor: 'testing' stamp: 'GR 10/31/2020 18:17:33'!
hasPlayerOWon
	self shouldBeImplemented.! !
!Player methodsFor: 'testing' stamp: 'GR 10/31/2020 18:17:36' prior: 50918760!
hasPlayerOWon
	
	! !

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 18:17:43'!
ERROR!
!Player methodsFor: 'testing' stamp: 'GR 10/31/2020 18:18:16' prior: 50918663!
hasPlayerXWon
	
	self subclassResponsibility.! !
!PlayerX methodsFor: 'nil' stamp: 'GR 10/31/2020 18:18:23' overrides: 50918771!
hasPlayerXWon
	
	| aXPosition |
	
	(occupiedPositions size < 3) ifTrue: [ ^false ].
	
	aXPosition := occupiedPositions detect: [ :aPosition | true].
	
	( occupiedPositions allSatisfy: [ :aPosition |  aXPosition x = aPosition x] ) ifTrue: [ 
		terniLapilli playerXWon.
		^true ].
	! !

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:18:41'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 18:18:41'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 18:18:41'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 18:18:41'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 18:18:41'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 18:18:41'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:18:41'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:18:41'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 18:18:41'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 18:18:41'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 18:18:41'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 18:18:41'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 18:18:41'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 18:18:41'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 18:18:41'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 18:18:41'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'GR 10/31/2020 18:18:41'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:18:41'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 18:18:41'!
FAILURE!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 18:18:41'!
FAILURE!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 18:20:24'!
ERROR!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 18:20:35'!
ERROR!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'GR 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 18:20:41'!
FAILURE!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 18:20:41'!
FAILURE!

!methodRemoval: Player #hasPlayerOWon stamp: 'GR 10/31/2020 18:21:15'!
hasPlayerOWon
	
	!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 18:21:22'!
ERROR!
!PlayerO methodsFor: 'testing' stamp: 'GR 10/31/2020 18:21:29'!
hasPlayerOWon
	self shouldBeImplemented.! !
!PlayerO methodsFor: 'testing' stamp: 'GR 10/31/2020 18:21:56' prior: 50918936!
hasPlayerOWon

	| aOPosition |
	
	(occupiedPositions size < 3) ifTrue: [ ^false ].
	
	aOPosition := occupiedPositions detect: [ :aPosition | true].
	
	( occupiedPositions allSatisfy: [ :aPosition |  aOPosition x = aPosition x] ) ifTrue: [ 
		terniLapilli playerOWon.
		^true ].
	! !

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 18:21:58'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 18:21:58'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 18:21:58'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 18:21:58'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 18:21:58'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 18:21:58'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:21:58'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:21:58'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 18:21:58'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 18:21:58'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 18:21:58'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 18:21:58'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 18:21:58'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 18:21:58'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 18:21:58'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 18:21:58'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'GR 10/31/2020 18:21:58'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:21:58'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 18:21:58'!
ERROR!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 18:21:58'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 18:22:05'!
playerOWon
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 18:22:15' prior: 50919020!
playerOWon
	
	winner := playerO! !

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 18:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 18:22:31'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 18:22:31'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 18:22:31'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 18:22:31'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 18:22:31'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 18:22:31'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:22:31'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:22:31'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 18:22:31'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 18:22:31'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 18:22:31'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 18:22:31'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 18:22:31'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 18:22:31'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 18:22:31'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 18:22:31'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'GR 10/31/2020 18:22:31'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:22:31'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 18:22:31'!
PASSED!
!PlayerX methodsFor: 'testing' stamp: 'GR 10/31/2020 18:23:53' prior: 50918776 overrides: 50918771!
hasPlayerXWon
	
	| aXPosition |
	
	(occupiedPositions size < 3) ifTrue: [ ^false ].
	
	aXPosition := occupiedPositions detect: [ :aPosition | true].
	
	( occupiedPositions allSatisfy: [ :aPosition |  aXPosition x = aPosition x] ) ifTrue: [ 
		terniLapilli won: self.
		^true ].
	! !
!Player methodsFor: 'testing' stamp: 'GR 10/31/2020 18:24:50'!
won
	
	| anOccupiedPosition |
	
	(occupiedPositions size < 3) ifTrue: [ ^false ].
	
	anOccupiedPosition := occupiedPositions detect: [ :aPosition | true].
	
	( occupiedPositions allSatisfy: [ :aPosition |  aPosition x = aPosition x] ) ifTrue: [ 
		terniLapilli won: self.
		^true ].
	! !
!Player methodsFor: 'testing' stamp: 'GR 10/31/2020 18:24:56' prior: 50919108!
won
	
	| anOccupiedPosition |
	
	(occupiedPositions size < 3) ifTrue: [ ^false ].
	
	anOccupiedPosition := occupiedPositions detect: [ :aPosition | true].
	
	( occupiedPositions allSatisfy: [ :aPosition |  anOccupiedPosition x = aPosition x] ) ifTrue: [ 
		terniLapilli won: self.
		^true ].
	! !

!methodRemoval: Player #hasPlayerXWon stamp: 'GR 10/31/2020 18:25:15'!
hasPlayerXWon
	
	self subclassResponsibility.!
!Player methodsFor: 'testing' stamp: 'GR 10/31/2020 18:25:21'!
hasWon
	
	| anOccupiedPosition |
	
	(occupiedPositions size < 3) ifTrue: [ ^false ].
	
	anOccupiedPosition := occupiedPositions detect: [ :aPosition | true].
	
	( occupiedPositions allSatisfy: [ :aPosition |  anOccupiedPosition x = aPosition x] ) ifTrue: [ 
		terniLapilli won: self.
		^true ].
	! !

!methodRemoval: Player #won stamp: 'GR 10/31/2020 18:25:21'!
won
	
	| anOccupiedPosition |
	
	(occupiedPositions size < 3) ifTrue: [ ^false ].
	
	anOccupiedPosition := occupiedPositions detect: [ :aPosition | true].
	
	( occupiedPositions allSatisfy: [ :aPosition |  anOccupiedPosition x = aPosition x] ) ifTrue: [ 
		terniLapilli won: self.
		^true ].
	!

!methodRemoval: PlayerX #hasPlayerXWon stamp: 'GR 10/31/2020 18:25:30'!
hasPlayerXWon
	
	| aXPosition |
	
	(occupiedPositions size < 3) ifTrue: [ ^false ].
	
	aXPosition := occupiedPositions detect: [ :aPosition | true].
	
	( occupiedPositions allSatisfy: [ :aPosition |  aXPosition x = aPosition x] ) ifTrue: [ 
		terniLapilli won: self.
		^true ].
	!

!methodRemoval: PlayerO #hasPlayerOWon stamp: 'GR 10/31/2020 18:25:34'!
hasPlayerOWon

	| aOPosition |
	
	(occupiedPositions size < 3) ifTrue: [ ^false ].
	
	aOPosition := occupiedPositions detect: [ :aPosition | true].
	
	( occupiedPositions allSatisfy: [ :aPosition |  aOPosition x = aPosition x] ) ifTrue: [ 
		terniLapilli playerOWon.
		^true ].
	!

!methodRemoval: TerniLapilli #playerOWon stamp: 'GR 10/31/2020 18:25:53'!
playerOWon
	
	winner := playerO!

!methodRemoval: TerniLapilli #playerXWon stamp: 'GR 10/31/2020 18:26:04'!
playerXWon
	
	winner := playerX.!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:26:16'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 18:26:16'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 18:26:16'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 18:26:16'!
ERROR!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 18:26:16'!
ERROR!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 18:26:16'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:26:16'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:26:16'!
ERROR!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 18:26:16'!
ERROR!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 18:26:16'!
ERROR!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 18:26:16'!
ERROR!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 18:26:16'!
ERROR!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 18:26:16'!
ERROR!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 18:26:16'!
ERROR!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 18:26:16'!
ERROR!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 18:26:16'!
ERROR!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'GR 10/31/2020 18:26:16'!
ERROR!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:26:16'!
ERROR!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 18:26:16'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 18:26:25'!
ERROR!
!PlayerX methodsFor: 'actions' stamp: 'GR 10/31/2020 18:26:48' prior: 50918422 overrides: 50917328!
placesAPieceIn: aPosition

	terniLapilli thePlayer: self canPlaceAPieceIn: aPosition.
	
	occupiedPositions add: aPosition.
	
	terniLapilli changeTurnToPlayerO.
	
	self hasWon.! !
!PlayerO methodsFor: 'actions' stamp: 'GR 10/31/2020 18:27:05' prior: 50918749 overrides: 50917328!
placesAPieceIn: aPosition

	terniLapilli thePlayer: self canPlaceAPieceIn: aPosition.
	
	occupiedPositions add: aPosition.
	
	terniLapilli changeTurnToPlayerX.
	
	self hasWon.! !

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:27:29'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 18:27:29'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 18:27:29'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 18:27:29'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 18:27:29'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 18:27:29'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:27:29'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:27:29'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 18:27:29'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 18:27:29'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 18:27:29'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 18:27:29'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 18:27:29'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 18:27:29'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 18:27:29'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 18:27:29'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'GR 10/31/2020 18:27:29'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:27:29'!
ERROR!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 18:27:29'!
ERROR!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:27:36'!
ERROR!
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 18:27:45'!
won: aPlayerX 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 18:28:17' prior: 50919340!
won: aPlayer
	
	winner := aPlayer! !

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:28:26'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:28:30'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 18:28:30'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 18:28:30'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 18:28:30'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 18:28:30'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 18:28:30'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:28:30'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:28:30'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 18:28:30'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 18:28:30'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 18:28:30'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 18:28:30'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 18:28:30'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 18:28:30'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 18:28:30'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 18:28:30'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'GR 10/31/2020 18:28:30'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:28:30'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 18:28:30'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 18:29:17'!
test19PlayerXWinsHorizontally
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (1@0).
	juego putOAt: (1@1).
	juego putXAt: (-1@0).
	
	self assert: (juego hasPlayerXWon).
	self assert: (juego isOver)
	
	! !

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'GR 10/31/2020 18:29:19'!
FAILURE!
!Player methodsFor: 'testing' stamp: 'GR 10/31/2020 18:30:06' prior: 50919135!
hasWon
	
	| anOccupiedPosition |
	
	(occupiedPositions size < 3) ifTrue: [ ^false ].
	
	anOccupiedPosition := occupiedPositions detect: [ :aPosition | true].
	
	( occupiedPositions allSatisfy: [ :aPosition |  
		(anOccupiedPosition x = aPosition x) or:
		(anOccupiedPosition y = aPosition y)] ) ifTrue: [ 
		terniLapilli won: self.
		^true ].
	! !

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'GR 10/31/2020 18:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 18:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 18:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 18:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 18:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 18:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 18:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 18:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 18:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 18:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 18:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 18:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 18:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 18:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'GR 10/31/2020 18:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 18:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'GR 10/31/2020 18:30:25'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 18:30:30'!
test19PlayerOWinsHorizontally
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (1@0).
	juego putOAt: (1@1).
	juego putXAt: (-1@0).
	
	self assert: (juego hasPlayerXWon).
	self assert: (juego isOver)
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 18:30:37'!
test20PlayerOWinsHorizontally
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (1@0).
	juego putOAt: (1@1).
	juego putXAt: (-1@0).
	
	self assert: (juego hasPlayerXWon).
	self assert: (juego isOver)
	
	! !

!methodRemoval: TerniLapilliTest #test19PlayerOWinsHorizontally stamp: 'GR 10/31/2020 18:30:37'!
test19PlayerOWinsHorizontally
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (1@0).
	juego putOAt: (1@1).
	juego putXAt: (-1@0).
	
	self assert: (juego hasPlayerXWon).
	self assert: (juego isOver)
	
	!

!testRun: #TerniLapilliTest #test20PlayerOWinsHorizontally stamp: 'GR 10/31/2020 18:30:39'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 18:30:39'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 18:30:39'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 18:30:39'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 18:30:39'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 18:30:39'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:30:39'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:30:39'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 18:30:39'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 18:30:39'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 18:30:39'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 18:30:39'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 18:30:39'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 18:30:39'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 18:30:39'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 18:30:39'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'GR 10/31/2020 18:30:39'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:30:39'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 18:30:39'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'GR 10/31/2020 18:30:39'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerOWinsHorizontally stamp: 'GR 10/31/2020 18:30:39'!
PASSED!

!methodRemoval: TerniLapilliTest #test20PlayerOWinsHorizontally stamp: 'GR 10/31/2020 18:30:55'!
test20PlayerOWinsHorizontally
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (1@0).
	juego putOAt: (1@1).
	juego putXAt: (-1@0).
	
	self assert: (juego hasPlayerXWon).
	self assert: (juego isOver)
	
	!
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 18:31:26'!
test20PlayerOWinsHorizontally
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (1@-1).
	juego putOAt: (0@0).
	juego putXAt: (1@1).
	juego putOAt: (1@0).
	juego putXAt: (-1@-1).
	juego putOAt: (-1@0).
	
	self assert: (juego hasPlayerOWon).
	self assert: (juego isOver)
	
	! !

!testRun: #TerniLapilliTest #test20PlayerOWinsHorizontally stamp: 'GR 10/31/2020 18:31:28'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 18:31:28'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 18:31:28'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 18:31:28'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 18:31:28'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 18:31:28'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:31:28'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:31:28'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 18:31:28'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 18:31:28'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 18:31:28'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 18:31:28'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 18:31:28'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 18:31:28'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 18:31:28'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 18:31:28'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'GR 10/31/2020 18:31:28'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:31:28'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 18:31:28'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'GR 10/31/2020 18:31:28'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerOWinsHorizontally stamp: 'GR 10/31/2020 18:31:28'!
PASSED!

!methodRemoval: TerniLapilliTest #test20PlayerOWinsHorizontally stamp: 'GR 10/31/2020 18:31:53'!
test20PlayerOWinsHorizontally
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (1@-1).
	juego putOAt: (0@0).
	juego putXAt: (1@1).
	juego putOAt: (1@0).
	juego putXAt: (-1@-1).
	juego putOAt: (-1@0).
	
	self assert: (juego hasPlayerOWon).
	self assert: (juego isOver)
	
	!
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 18:33:10'!
test20PlayerWinsDiagonallyLeftToRight
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (1@0).
	juego putOAt: (1@1).
	juego putXAt: (-1@0).
	
	self assert: (juego hasPlayerXWon).
	self assert: (juego isOver)
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 18:33:43' prior: 50919722!
test20PlayerWinsDiagonallyLeftToRight
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (-1@-1).
	juego putOAt: (1@0).
	juego putXAt: (1@1).
	
	self assert: (juego hasPlayerXWon).
	self assert: (juego isOver)
	
	! !

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonallyLeftToRight stamp: 'GR 10/31/2020 18:33:50'!
FAILURE!
!Player methodsFor: 'testing' stamp: 'GR 10/31/2020 18:39:29'!
hasAWinningCondition: anOccupiedPosition

	^ occupiedPositions allSatisfy: [ :aPosition |  
		(anOccupiedPosition x = aPosition x) or:
		(anOccupiedPosition y = aPosition y)]! !
!Player methodsFor: 'testing' stamp: 'GR 10/31/2020 18:39:29' prior: 50919431!
hasWon
	
	| anOccupiedPosition |
	
	(occupiedPositions size < 3) ifTrue: [ ^false ].
	
	anOccupiedPosition := occupiedPositions detect: [ :aPosition | true].
	
	( self hasAWinningCondition: anOccupiedPosition ) ifTrue: [ 
		terniLapilli won: self.
		^true ].
	! !
!Player methodsFor: 'testing' stamp: 'GR 10/31/2020 18:40:01' prior: 50919757!
hasWon
	
	| anOccupiedPosition |
	
	(occupiedPositions size < 3) ifTrue: [ ^false ].
	
	( self hasAWinningCondition: anOccupiedPosition ) ifTrue: [ 
		terniLapilli won: self.
		^true ].
	! !
!Player methodsFor: 'testing' stamp: 'GR 10/31/2020 18:40:19'!
hasAWinningCondition
	
	| anOccupiedPosition |
	
	anOccupiedPosition := occupiedPositions detect: [ :aPosition | true].
	
	^ occupiedPositions allSatisfy: [ :aPosition |  
		(anOccupiedPosition x = aPosition x) or:
		(anOccupiedPosition y = aPosition y)]! !

!methodRemoval: Player #hasAWinningCondition: stamp: 'GR 10/31/2020 18:40:24'!
hasAWinningCondition: anOccupiedPosition

	^ occupiedPositions allSatisfy: [ :aPosition |  
		(anOccupiedPosition x = aPosition x) or:
		(anOccupiedPosition y = aPosition y)]!
!Player methodsFor: 'testing' stamp: 'GR 10/31/2020 18:40:34' prior: 50919768!
hasWon
	
	(occupiedPositions size < 3) ifTrue: [ ^false ].
	
	( self hasAWinningCondition ) ifTrue: [ 
		terniLapilli won: self.
		^true ].
	! !

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 18:44:29'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 18:44:29'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 18:44:29'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 18:44:29'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 18:44:29'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 18:44:29'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:44:29'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:44:29'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 18:44:29'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 18:44:29'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 18:44:29'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 18:44:29'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 18:44:29'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 18:44:29'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 18:44:29'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 18:44:29'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'GR 10/31/2020 18:44:29'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:44:29'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 18:44:29'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'GR 10/31/2020 18:44:29'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonallyLeftToRight stamp: 'GR 10/31/2020 18:44:29'!
FAILURE!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonallyLeftToRight stamp: 'GR 10/31/2020 18:44:29'!
FAILURE!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 18:44:55'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 18:44:55'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 18:44:55'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 18:44:55'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 18:44:55'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 18:44:55'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:44:55'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:44:55'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 18:44:55'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 18:44:55'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 18:44:55'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 18:44:55'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 18:44:55'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 18:44:55'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 18:44:55'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 18:44:55'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'GR 10/31/2020 18:44:55'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:44:55'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 18:44:55'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'GR 10/31/2020 18:44:55'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonallyLeftToRight stamp: 'GR 10/31/2020 18:44:55'!
FAILURE!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonallyLeftToRight stamp: 'GR 10/31/2020 18:44:55'!
FAILURE!
!Player methodsFor: 'private -- testing' stamp: 'GR 10/31/2020 18:46:55' prior: 50919776!
hasAWinningCondition
	
	| anOccupiedPosition |
	
	anOccupiedPosition := occupiedPositions detect: [ :aPosition | true].
	
	^ occupiedPositions allSatisfy: [ :aPosition |  
		(anOccupiedPosition x = aPosition x) or:
		(anOccupiedPosition y = aPosition y) or:
		aPosition x abs = aPosition y abs]! !
!Player methodsFor: 'private -- testing' stamp: 'GR 10/31/2020 18:47:04' prior: 50919953!
hasAWinningCondition
	
	| anOccupiedPosition |
	
	anOccupiedPosition := occupiedPositions detect: [ :aPosition | true].
	
	^ occupiedPositions allSatisfy: [ :aPosition |  
		(anOccupiedPosition x = aPosition x) or:
		(anOccupiedPosition y = aPosition y) or:
		(aPosition x abs = aPosition y abs)]! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 18:48:22'!
test20PlayerWinsDiagonally
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (-1@-1).
	juego putOAt: (1@0).
	juego putXAt: (1@1).
	
	self assert: (juego hasPlayerXWon).
	self assert: (juego isOver)
	
	! !

!methodRemoval: TerniLapilliTest #test20PlayerWinsDiagonallyLeftToRight stamp: 'GR 10/31/2020 18:48:22'!
test20PlayerWinsDiagonallyLeftToRight
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (-1@-1).
	juego putOAt: (1@0).
	juego putXAt: (1@1).
	
	self assert: (juego hasPlayerXWon).
	self assert: (juego isOver)
	
	!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonally stamp: 'GR 10/31/2020 18:48:24'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 18:48:24'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 18:48:24'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 18:48:24'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 18:48:24'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 18:48:24'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:48:24'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 18:48:24'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 18:48:24'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 18:48:24'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 18:48:24'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 18:48:24'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 18:48:24'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 18:48:24'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 18:48:24'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 18:48:24'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'GR 10/31/2020 18:48:24'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 18:48:24'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 18:48:24'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'GR 10/31/2020 18:48:24'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonally stamp: 'GR 10/31/2020 18:48:24'!
PASSED!

Object subclass: #Player
	instanceVariableNames: 'terniLapilli'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #Player category: 'Terni Lapilli' stamp: 'GR 10/31/2020 18:53:07'!
Object subclass: #Player
	instanceVariableNames: 'terniLapilli'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Object subclass: #TerniLapilli
	instanceVariableNames: 'turn playerX playerO occupiedXPositions occupiedOPositions winner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'GR 10/31/2020 18:53:33'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'turn playerX playerO occupiedXPositions occupiedOPositions winner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!PlayerO methodsFor: 'actions' stamp: 'GR 10/31/2020 18:56:05' prior: 50918223 overrides: 50917315!
movesThePieceIn: aPosition to: anotherPosition
	
	terniLapilli thePlayer: self movesThePieceIn: aPosition to: anotherPosition.! !
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 18:56:56' prior: 50917591!
thePlayer: aPlayer movesThePieceIn: aPosition to: anotherPosition
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedXPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedXPositions add: anotherPosition.
	
	self changeTurnToPlayerX.
	
	! !
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 18:57:10'!
playerXmovesThePieceIn: aPosition to: anotherPosition
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedXPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedXPositions add: anotherPosition.
	
	self changeTurnToPlayerX.
	
	! !
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 18:57:16' prior: 50920120!
playerXmovesThePieceIn: aPosition to: anotherPosition
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedXPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedXPositions add: anotherPosition.
	
	self changeTurnToPlayerO.
	
	! !

!methodRemoval: TerniLapilli #thePlayer:movesThePieceIn:to: stamp: 'GR 10/31/2020 18:57:24'!
thePlayer: aPlayer movesThePieceIn: aPosition to: anotherPosition
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedXPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedXPositions add: anotherPosition.
	
	self changeTurnToPlayerX.
	
	!
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 18:57:44'!
playerOmovesThePieceIn: aPosition to: anotherPosition
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedOPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedOPositions add: anotherPosition.
	
	self changeTurnToPlayerX.
	
	! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 18:58:25' prior: 50917577!
playerXMovesFrom: aPosition to: anotherPosition
	
	playerX movesThePieceIn: aPosition to: anotherPosition.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 18:59:33' prior: 50917584!
playerOMovesFrom: aPosition to: anotherPosition
	
	playerO movesThePieceIn: aPosition to: anotherPosition.! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 18:59:53' prior: 50917558!
putOAt: aPosition
	
	playerO placesAPieceIn: aPosition! !
!TerniLapilli methodsFor: 'operations' stamp: 'GR 10/31/2020 19:00:06' prior: 50917552!
putXAt: aPosition
	
	playerX placesAPieceIn: aPosition.! !
!PlayerX methodsFor: 'actions' stamp: 'GR 10/31/2020 19:00:45' prior: 50919255 overrides: 50917328!
placesAPieceIn: aPosition

	terniLapilli playerXPlacesAPieceIn: aPosition.! !
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 19:01:35'!
playerXPlacesAPieceIn: aPosition 
	
	self thePlayer: playerX canPlaceAPieceIn: aPosition.
	
	occupiedXPositions add: aPosition.
	
	turn := playerO.
	
	self hasWon: playerX.! !
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 19:01:54'!
playerOPlacesAPieceIn: aPosition 
	
	self thePlayer: playerO canPlaceAPieceIn: aPosition.
	
	occupiedOPositions add: aPosition.
	
	turn := playerX.
	
	self hasWon: playerO.! !

!methodRemoval: TerniLapilli #thePlayer:placesAPieceIn: stamp: 'GR 10/31/2020 19:02:16'!
thePlayer: aPlayer placesAPieceIn: aPosition 
	
	self thePlayer: aPlayer canPlaceAPieceIn: aPosition.
	
	aPlayer placesAPieceIn: aPosition.!
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 19:02:51' prior: 50920134!
playerXmovesThePieceIn: aPosition to: anotherPosition
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedXPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedXPositions add: anotherPosition.
	
	turn := playerO.
	
	! !
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 19:03:08' prior: 50920229!
playerXmovesThePieceIn: aPosition to: anotherPosition
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedXPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedXPositions add: anotherPosition.
	
	turn := playerO.
	
	! !
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 19:03:31' prior: 50920162!
playerOmovesThePieceIn: aPosition to: anotherPosition
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedOPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedOPositions add: anotherPosition.
	
	turn := playerX
	
	! !
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 19:03:48' prior: 50920257!
playerOmovesThePieceIn: aPosition to: anotherPosition
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedOPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedOPositions add: anotherPosition.
	
	turn := playerX.
	
	! !
!PlayerO methodsFor: 'actions' stamp: 'GR 10/31/2020 19:05:07' prior: 50920099 overrides: 50917315!
movesThePieceIn: aPosition to: anotherPosition
	
	terniLapilli playerOmovesThePieceIn: aPosition to: anotherPosition.! !
!PlayerO methodsFor: 'actions' stamp: 'GR 10/31/2020 19:05:34' prior: 50919264 overrides: 50917328!
placesAPieceIn: aPosition

	terniLapilli playerOPlacesAPieceIn: aPosition.
	
	"terniLapilli thePlayer: self canPlaceAPieceIn: aPosition.
	
	occupiedPositions add: aPosition.
	
	terniLapilli changeTurnToPlayerX.
	
	self hasWon."! !
!PlayerO methodsFor: 'actions' stamp: 'GR 10/31/2020 19:05:37' prior: 50920292 overrides: 50917328!
placesAPieceIn: aPosition

	terniLapilli playerOPlacesAPieceIn: aPosition.! !
!PlayerX methodsFor: 'actions' stamp: 'GR 10/31/2020 19:06:17' prior: 50918083 overrides: 50917315!
movesThePieceIn: aPosition to: anotherPosition
	
	terniLapilli playerXmovesThePieceIn: aPosition to: anotherPosition! !
!Player methodsFor: 'actions' stamp: 'GR 10/31/2020 19:06:32' prior: 50917315!
movesThePieceIn: aPosition to: anotherPosition

	self subclassResponsibility.! !
!Player methodsFor: 'initialization' stamp: 'GR 10/31/2020 19:07:45' prior: 50917072!
initializeNewIn: aTerniLapilli
	
	terniLapilli := aTerniLapilli.! !

!methodRemoval: Player #occupiedPositions stamp: 'GR 10/31/2020 19:07:54'!
occupiedPositions

	^occupiedPositions.!

!methodRemoval: Player #occupies: stamp: 'GR 10/31/2020 19:08:10'!
occupies: aPosition

	^occupiedPositions includes: aPosition !
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 19:11:33' prior: 50920213!
playerOPlacesAPieceIn: aPosition 
	
	self thePlayer: playerO canPlaceAPieceIn: aPosition.
	
	occupiedOPositions add: aPosition.
	
	turn := playerX.
	
	self playerOhasWon.! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 19:12:41' prior: 50918741!
hasPlayerOWon
	
	(occupiedOPositions size < 3) ifTrue: [ ^false ].
	
	( self hasAWinningCondition ) ifTrue: [ 
		winner := playerO.
		^true ].! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 19:13:40' prior: 50920344!
hasPlayerOWon
	
	(occupiedOPositions size < 3) ifTrue: [ ^false ].
	
	( self hasAWinningCondition: occupiedOPositions ) ifTrue: [ 
		winner := playerO.
		^true ].
	
	^false! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 19:14:05' prior: 50918414!
hasPlayerXWon
	
	(occupiedXPositions size < 3) ifTrue: [ ^false ].
	
	( self hasAWinningCondition: occupiedXPositions ) ifTrue: [ 
		winner := playerX.
		^true ].
	
	^false! !
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 19:15:08' prior: 50920205!
playerXPlacesAPieceIn: aPosition 
	
	self thePlayer: playerX canPlaceAPieceIn: aPosition.
	
	occupiedXPositions add: aPosition.
	
	turn := playerO.
	
	self hasPlayerXWon.! !
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 19:15:18' prior: 50920335!
playerOPlacesAPieceIn: aPosition 
	
	self thePlayer: playerO canPlaceAPieceIn: aPosition.
	
	occupiedOPositions add: aPosition.
	
	turn := playerX.
	
	self hasPlayerOWon.! !

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 19:15:30'!
ERROR!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 19:15:30'!
ERROR!

!methodRemoval: TerniLapilli #changeTurnToPlayerO stamp: 'GR 10/31/2020 19:15:46'!
changeTurnToPlayerO

	turn := playerO!

!methodRemoval: TerniLapilli #changeTurnToPlayerX stamp: 'GR 10/31/2020 19:15:50'!
changeTurnToPlayerX

	turn := playerX!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 19:16:06' prior: 50916993!
isEmpty
	
	^ occupiedXPositions isEmpty.! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 19:16:33' prior: 50917113!
isOccupied: aPosition 
	
	^(occupiedXPositions includes: aPosition) or: (occupiedOPositions includes: aPosition)! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 19:17:52' prior: 50916987!
totalPiecesPlayed
	
	^ occupiedXPositions size + occupiedOPositions size.! !

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 19:18:15'!
FAILURE!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'GR 10/31/2020 19:18:24'!
ERROR!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'GR 10/31/2020 19:18:24'!
ERROR!
!TerniLapilli methodsFor: 'initialization' stamp: 'GR 10/31/2020 19:18:52' prior: 50917061 overrides: 16896425!
initialize

	playerX  := PlayerX newIn: self.
	playerO  := PlayerO newIn: self.
	occupiedXPositions  := Set new.
	occupiedOPositions  := Set new.
	turn := playerX.! !

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 19:18:57'!
ERROR!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 19:18:57'!
ERROR!
!TerniLapilli methodsFor: 'private -- testing' stamp: 'GR 10/31/2020 19:19:15'!
hasAWinningCondition: aSet 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'private -- testing' stamp: 'GR 10/31/2020 19:20:47' prior: 50920443!
hasAWinningCondition: aPlayerPieces 
	
	| anOccupiedPosition |
	
	anOccupiedPosition := aPlayerPieces detect: [ :aPosition | true].
	
	^ aPlayerPieces allSatisfy: [ :aPosition |  
		(anOccupiedPosition x = aPosition x) or:
		(anOccupiedPosition y = aPosition y) or:
		(aPosition x abs = aPosition y abs)]! !

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 19:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 19:20:55'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 19:20:55'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 19:20:55'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 19:20:55'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 19:20:55'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 19:20:55'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 19:20:55'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 19:20:55'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 19:20:55'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 19:20:55'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 19:20:55'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 19:20:55'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 19:20:55'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 19:20:55'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 19:20:55'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 19:20:55'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'GR 10/31/2020 19:20:55'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 19:20:55'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 19:20:55'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'GR 10/31/2020 19:20:55'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonally stamp: 'GR 10/31/2020 19:20:55'!
PASSED!

!methodRemoval: Player #hasWon stamp: 'GR 10/31/2020 19:21:23'!
hasWon
	
	(occupiedPositions size < 3) ifTrue: [ ^false ].
	
	( self hasAWinningCondition ) ifTrue: [ 
		terniLapilli won: self.
		^true ].
	!

!methodRemoval: Player #hasAWinningCondition stamp: 'GR 10/31/2020 19:21:25'!
hasAWinningCondition
	
	| anOccupiedPosition |
	
	anOccupiedPosition := occupiedPositions detect: [ :aPosition | true].
	
	^ occupiedPositions allSatisfy: [ :aPosition |  
		(anOccupiedPosition x = aPosition x) or:
		(anOccupiedPosition y = aPosition y) or:
		(aPosition x abs = aPosition y abs)]!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 19:22:15' prior: 50920352!
hasPlayerOWon
	
	( self hasAWinningCondition: occupiedOPositions ) ifTrue: [ 
		winner := playerO.
		^true ].
	
	^false! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 19:22:20' prior: 50920361!
hasPlayerXWon
	
	( self hasAWinningCondition: occupiedXPositions ) ifTrue: [ 
		winner := playerX.
		^true ].
	
	^false! !
!TerniLapilli methodsFor: 'private -- testing' stamp: 'GR 10/31/2020 19:22:32' prior: 50920448!
hasAWinningCondition: aPlayerPieces 
	
	| anOccupiedPosition |
	
	(aPlayerPieces size < 3) ifTrue: [ ^false ].
	
	anOccupiedPosition := aPlayerPieces detect: [ :aPosition | true].
	
	^ aPlayerPieces allSatisfy: [ :aPosition |  
		(anOccupiedPosition x = aPosition x) or:
		(anOccupiedPosition y = aPosition y) or:
		(aPosition x abs = aPosition y abs)]! !

!methodRemoval: TerniLapilli #won: stamp: 'GR 10/31/2020 19:22:54'!
won: aPlayer
	
	winner := aPlayer!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 19:24:12' prior: 50920553!
hasPlayerOWon
	
	^ self hasAWinningCondition: occupiedOPositions! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'turn playerX playerO occupiedXPositions occupiedOPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'GR 10/31/2020 19:24:17'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'turn playerX playerO occupiedXPositions occupiedOPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 19:24:33' prior: 50920560!
hasPlayerXWon
	
	^self hasAWinningCondition: occupiedXPositions! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 19:25:49'!
test21PlayerCanWinWithAMovement
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@0).
	juego putXAt: (0@1).
	juego putOAt: (-1@1).
	juego putXAt: (1@1).
	juego putOAt: (-1@-1).
	
	juego playerXMovesFrom: (1@1) to: (0@-1).
	
	self assert: (juego isOccupied: (1@0)).
	self assert: (juego isPlaying: juego playerX)
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 19:26:05' prior: 50920610!
test21PlayerCanWinWithAMovement
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@0).
	juego putXAt: (0@1).
	juego putOAt: (-1@1).
	juego putXAt: (1@1).
	juego putOAt: (-1@-1).
	
	juego playerXMovesFrom: (1@1) to: (0@-1).
	
	self assert: (juego hasPlayerXWon).
	self assert: (juego isOver)
	
	! !

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'GR 10/31/2020 19:26:22'!
ERROR!

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'GR 10/31/2020 19:27:14'!
ERROR!
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 19:27:48' prior: 50920624!
test21PlayerCanWinWithAMovement
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@0).
	juego putXAt: (0@1).
	juego putOAt: (-1@1).
	juego putXAt: (1@-1).
	juego putOAt: (-1@-1).
	
	juego playerXMovesFrom: (1@1) to: (0@-1).
	
	self assert: (juego hasPlayerXWon).
	self assert: (juego isOver)
	
	! !

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'GR 10/31/2020 19:27:50'!
ERROR!
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 19:28:11' prior: 50920644!
test21PlayerCanWinWithAMovement
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@0).
	juego putXAt: (0@1).
	juego putOAt: (-1@1).
	juego putXAt: (1@-1).
	juego putOAt: (-1@-1).
	
	juego playerXMovesFrom: (1@-1) to: (0@-1).
	
	self assert: (juego hasPlayerXWon).
	self assert: (juego isOver)
	
	! !

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'GR 10/31/2020 19:28:12'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 19:28:12'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 19:28:12'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 19:28:12'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 19:28:12'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 19:28:12'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 19:28:12'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 19:28:12'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 19:28:12'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 19:28:12'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 19:28:12'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 19:28:12'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 19:28:12'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 19:28:12'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 19:28:12'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 19:28:12'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'GR 10/31/2020 19:28:12'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 19:28:12'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 19:28:12'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'GR 10/31/2020 19:28:12'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonally stamp: 'GR 10/31/2020 19:28:12'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'GR 10/31/2020 19:28:12'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 19:33:31'!
test22PlayerCanNotPlayIfGameFinished
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (0@-1).
	
	self assert: (juego hasPlayerXWon).
	self assert: (juego isOver)
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 19:33:37'!
test22PlayerCanNotPlayIfGameIsOver
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (0@-1).
	
	self assert: (juego hasPlayerXWon).
	self assert: (juego isOver)
	
	! !

!methodRemoval: TerniLapilliTest #test22PlayerCanNotPlayIfGameFinished stamp: 'GR 10/31/2020 19:33:42'!
test22PlayerCanNotPlayIfGameFinished
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (0@-1).
	
	self assert: (juego hasPlayerXWon).
	self assert: (juego isOver)
	
	!

Object subclass: #TerniLapilli
	instanceVariableNames: 'turn playerX playerO occupiedXPositions occupiedOPositions isOver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'GR 10/31/2020 19:34:28'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'turn playerX playerO occupiedXPositions occupiedOPositions isOver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'private -- testing' stamp: 'GR 10/31/2020 19:35:48' prior: 50920567!
hasAWinningCondition: aPlayerPieces 
	
	| anOccupiedPosition |
	
	(aPlayerPieces size < 3) ifTrue: [ ^false ].
	
	anOccupiedPosition := aPlayerPieces detect: [ :aPosition | true].
	
	^ isOver := aPlayerPieces allSatisfy: [ :aPosition |  
		(anOccupiedPosition x = aPosition x) or:
		(anOccupiedPosition y = aPosition y) or:
		(aPosition x abs = aPosition y abs)]! !

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 19:36:13'!
PASSED!
!TerniLapilli methodsFor: 'private -- testing' stamp: 'GR 10/31/2020 19:36:40' prior: 50920798!
hasAWinningCondition: aPlayerPieces 
	
	| anOccupiedPosition |
	
	(aPlayerPieces size < 3) ifTrue: [ ^false ].
	
	anOccupiedPosition := aPlayerPieces detect: [ :aPosition | true].
	
	^ aPlayerPieces allSatisfy: [ :aPosition |  
		(anOccupiedPosition x = aPosition x) or:
		(anOccupiedPosition y = aPosition y) or:
		(aPosition x abs = aPosition y abs)]! !

!testRun: #TerniLapilliTest #test22PlayerCanNotPlayIfGameIsOver stamp: 'GR 10/31/2020 19:36:46'!
PASSED!
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 19:37:10' prior: 50920243!
playerXmovesThePieceIn: aPosition to: anotherPosition
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedXPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedXPositions add: anotherPosition.
	
	turn := playerO.
	
	self hasPlayerXWon.! !
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 19:37:18' prior: 50920271!
playerOmovesThePieceIn: aPosition to: anotherPosition
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedOPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedOPositions add: anotherPosition.
	
	turn := playerX.
	
	self hasPlayerOWon.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 19:39:38' prior: 50920759!
test22PlayerCanNotPlayIfGameIsOver
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (0@-1).
	
	self assert: (juego hasPlayerXWon).
	self assert: (juego isOver).
	self
		should: [ juego putOAt: (1@0) ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: TerniLapilli canNotPlayIfGameIsOver = anError messageText ]
	
	! !
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 19:39:51' prior: 50920834!
playerXmovesThePieceIn: aPosition to: anotherPosition
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedXPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedXPositions add: anotherPosition.
	
	turn := playerO.! !
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 19:39:54' prior: 50920848!
playerOmovesThePieceIn: aPosition to: anotherPosition
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedOPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedOPositions add: anotherPosition.
	
	turn := playerX.! !

!testRun: #TerniLapilliTest #test22PlayerCanNotPlayIfGameIsOver stamp: 'GR 10/31/2020 19:40:00'!
FAILURE!

!testRun: #TerniLapilliTest #test22PlayerCanNotPlayIfGameIsOver stamp: 'GR 10/31/2020 19:40:00'!
FAILURE!
!TerniLapilli class methodsFor: 'error handling' stamp: 'GR 10/31/2020 19:41:07'!
canNotPlayIfGameIsOver

	^ 'Game is over!!'! !

!testRun: #TerniLapilliTest #test22PlayerCanNotPlayIfGameIsOver stamp: 'GR 10/31/2020 19:41:19'!
FAILURE!

!testRun: #TerniLapilliTest #test22PlayerCanNotPlayIfGameIsOver stamp: 'GR 10/31/2020 19:41:19'!
FAILURE!
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 19:42:58' prior: 50920379!
playerOPlacesAPieceIn: aPosition 
	
	(self isOver) ifTrue: [ self error: TerniLapilli canNotPlayIfGameIsOver ].
	
	self thePlayer: playerO canPlaceAPieceIn: aPosition.
	
	occupiedOPositions add: aPosition.
	
	turn := playerX.
	
	self hasPlayerOWon.! !

!testRun: #TerniLapilliTest #test22PlayerCanNotPlayIfGameIsOver stamp: 'GR 10/31/2020 19:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerCanNotPlayIfGameIsOver stamp: 'GR 10/31/2020 19:43:24'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 19:43:24'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 19:43:24'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 19:43:24'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 19:43:24'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 19:43:24'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 19:43:24'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 19:43:24'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 19:43:24'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 19:43:24'!
ERROR!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 19:43:24'!
ERROR!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 19:43:24'!
ERROR!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 19:43:24'!
ERROR!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 19:43:24'!
ERROR!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 19:43:24'!
ERROR!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 19:43:24'!
ERROR!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'GR 10/31/2020 19:43:24'!
ERROR!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 19:43:24'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 19:43:24'!
ERROR!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'GR 10/31/2020 19:43:24'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonally stamp: 'GR 10/31/2020 19:43:24'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'GR 10/31/2020 19:43:24'!
ERROR!

!testRun: #TerniLapilliTest #test22PlayerCanNotPlayIfGameIsOver stamp: 'GR 10/31/2020 19:43:24'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 19:43:39'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 19:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 19:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 19:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 19:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 19:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 19:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 19:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 19:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 19:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 19:43:41'!
ERROR!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 19:43:41'!
ERROR!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 19:43:41'!
ERROR!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 19:43:41'!
ERROR!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 19:43:41'!
ERROR!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 19:43:41'!
ERROR!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 19:43:41'!
ERROR!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'GR 10/31/2020 19:43:41'!
ERROR!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 19:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 19:43:41'!
ERROR!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'GR 10/31/2020 19:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonally stamp: 'GR 10/31/2020 19:43:41'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'GR 10/31/2020 19:43:41'!
ERROR!

!testRun: #TerniLapilliTest #test22PlayerCanNotPlayIfGameIsOver stamp: 'GR 10/31/2020 19:43:41'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 19:44:33' prior: 50918585!
isOver
	
	^ isOver! !

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 19:44:36'!
FAILURE!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 19:44:41'!
FAILURE!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 19:44:41'!
FAILURE!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 19:44:43'!
FAILURE!
!TerniLapilli methodsFor: 'initialization' stamp: 'GR 10/31/2020 19:45:02' prior: 50920429 overrides: 16896425!
initialize

	playerX  := PlayerX newIn: self.
	playerO  := PlayerO newIn: self.
	occupiedXPositions  := Set new.
	occupiedOPositions  := Set new.
	isOver := false.
	turn := playerX.! !

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 19:45:05'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 19:45:05'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 19:45:05'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 19:45:05'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 19:45:05'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 19:45:05'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 19:45:05'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 19:45:05'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 19:45:05'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 19:45:05'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 19:45:05'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 19:45:05'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 19:45:05'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 19:45:05'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 19:45:05'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 19:45:05'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'GR 10/31/2020 19:45:05'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 19:45:05'!
FAILURE!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 19:45:05'!
FAILURE!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'GR 10/31/2020 19:45:05'!
FAILURE!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonally stamp: 'GR 10/31/2020 19:45:05'!
FAILURE!

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'GR 10/31/2020 19:45:05'!
FAILURE!

!testRun: #TerniLapilliTest #test22PlayerCanNotPlayIfGameIsOver stamp: 'GR 10/31/2020 19:45:05'!
FAILURE!
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 19:46:47' prior: 50920370!
playerXPlacesAPieceIn: aPosition 

	(self isOver) ifTrue: [ self error: TerniLapilli canNotPlayIfGameIsOver ].
	
	self thePlayer: playerX canPlaceAPieceIn: aPosition.
	
	occupiedXPositions add: aPosition.
	
	turn := playerO.
	
	self hasPlayerXWon.! !

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 19:46:53'!
FAILURE!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 19:47:04'!
FAILURE!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 19:47:13'!
FAILURE!
!TerniLapilli methodsFor: 'private -- testing' stamp: 'GR 10/31/2020 19:47:35' prior: 50920816!
hasAWinningCondition: aPlayerPieces 
	
	| anOccupiedPosition |
	
	(aPlayerPieces size < 3) ifTrue: [ ^false ].
	
	anOccupiedPosition := aPlayerPieces detect: [ :aPosition | true].
	
	^ isOver := aPlayerPieces allSatisfy: [ :aPosition |  
		(anOccupiedPosition x = aPosition x) or:
		(anOccupiedPosition y = aPosition y) or:
		(aPosition x abs = aPosition y abs)]! !

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 19:47:37'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 19:47:37'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 19:47:37'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 19:47:37'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 19:47:37'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 19:47:37'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 19:47:37'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 19:47:37'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 19:47:37'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 19:47:37'!
ERROR!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 19:47:37'!
ERROR!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 19:47:37'!
ERROR!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 19:47:37'!
ERROR!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 19:47:37'!
ERROR!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 19:47:37'!
ERROR!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 19:47:37'!
ERROR!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'GR 10/31/2020 19:47:37'!
ERROR!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 19:47:37'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 19:47:37'!
ERROR!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'GR 10/31/2020 19:47:37'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonally stamp: 'GR 10/31/2020 19:47:37'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'GR 10/31/2020 19:47:37'!
ERROR!

!testRun: #TerniLapilliTest #test22PlayerCanNotPlayIfGameIsOver stamp: 'GR 10/31/2020 19:47:37'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 19:47:43'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 19:47:43'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 19:47:43'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 19:47:43'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 19:47:43'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 19:47:43'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 19:47:43'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 19:47:43'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 19:47:43'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 19:47:43'!
ERROR!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 19:47:43'!
ERROR!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 19:47:43'!
ERROR!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 19:47:43'!
ERROR!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 19:47:43'!
ERROR!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 19:47:43'!
ERROR!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 19:47:43'!
ERROR!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'GR 10/31/2020 19:47:43'!
ERROR!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 19:47:43'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 19:47:43'!
ERROR!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'GR 10/31/2020 19:47:43'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonally stamp: 'GR 10/31/2020 19:47:43'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'GR 10/31/2020 19:47:43'!
ERROR!

!testRun: #TerniLapilliTest #test22PlayerCanNotPlayIfGameIsOver stamp: 'GR 10/31/2020 19:47:43'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 19:47:52'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 19:47:56'!
ERROR!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 19:47:56'!
ERROR!
!TerniLapilli methodsFor: 'private -- testing' stamp: 'GR 10/31/2020 20:05:38' prior: 50921224!
hasAWinningCondition: aPlayerPieces 
	
	| anOccupiedPosition |
	
	(aPlayerPieces size < 3) ifTrue: [ ^false ].
	
	anOccupiedPosition := aPlayerPieces detect: [ :aPosition | true].
	
	isOver := 
		(self winsHorizontally: aPlayerPieces)  or:
		(self winsVertically: aPlayerPieces) or:
		(self winsDiagonally: aPlayerPieces).! !
!TerniLapilli methodsFor: 'private -- testing' stamp: 'GR 10/31/2020 20:07:16'!
winsHorizontally: aPlayerPieces
	
	
	
	| anOccupiedPosition |
	aPlayerPieces allSatisfy: [ :aPosition | (anOccupiedPosition x = aPosition x)]! !
!TerniLapilli methodsFor: 'private -- testing' stamp: 'GR 10/31/2020 20:07:25' prior: 50921415!
winsHorizontally: aPlayerPieces
	
	| anOccupiedPosition |
	
	aPlayerPieces allSatisfy: [ :aPosition | (anOccupiedPosition x = aPosition x)]! !
!TerniLapilli methodsFor: 'private -- testing' stamp: 'GR 10/31/2020 20:08:59' prior: 50921402!
hasAWinningCondition: aPlayerPieces 
	
	| anOccupiedPosition |
	
	(aPlayerPieces size < 3) ifTrue: [ ^false ].
	
	anOccupiedPosition := aPlayerPieces detect: [ :aPosition | true].
	
	isOver := 
		(aPlayerPieces allSatisfy: [ :aPosition | (anOccupiedPosition x = aPosition x)])  or:
		(aPlayerPieces allSatisfy: [ :aPosition | (anOccupiedPosition y = aPosition y)]) or:
		(self winsDiagonally: aPlayerPieces).! !
!TerniLapilli methodsFor: 'private -- testing' stamp: 'GR 10/31/2020 20:10:27' prior: 50921431!
hasAWinningCondition: aPlayerPieces 
	
	| anOccupiedPosition |
	
	(aPlayerPieces size < 3) ifTrue: [ ^false ].
	
	anOccupiedPosition := aPlayerPieces detect: [ :aPosition | true].
	
	isOver := 
		(aPlayerPieces allSatisfy: [ :aPosition | (anOccupiedPosition x = aPosition x)])  or:
		(aPlayerPieces allSatisfy: [ :aPosition | (anOccupiedPosition y = aPosition y)]) or:
		((aPlayerPieces allSatisfy: [ :aPosition | aPosition x abs = aPosition y abs]) and: (aPlayerPieces includes: (0@0)))! !
!TerniLapilli methodsFor: 'private -- testing' stamp: 'GR 10/31/2020 20:10:35' prior: 50921447!
hasAWinningCondition: aPlayerPieces 
	
	| anOccupiedPosition |
	
	(aPlayerPieces size < 3) ifTrue: [ ^false ].
	
	anOccupiedPosition := aPlayerPieces detect: [ :aPosition | true].
	
	^ isOver := 
		(aPlayerPieces allSatisfy: [ :aPosition | (anOccupiedPosition x = aPosition x)])  or:
		(aPlayerPieces allSatisfy: [ :aPosition | (anOccupiedPosition y = aPosition y)]) or:
		((aPlayerPieces allSatisfy: [ :aPosition | aPosition x abs = aPosition y abs]) and: (aPlayerPieces includes: (0@0)))! !

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 20:10:57'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 20:10:57'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 20:10:57'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 20:10:57'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 20:10:57'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 20:10:57'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 20:10:57'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 20:10:57'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 20:10:57'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 20:10:57'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 20:10:57'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 20:10:57'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 20:10:57'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 20:10:57'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 20:10:57'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 20:10:57'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'GR 10/31/2020 20:10:57'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 20:10:57'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 20:10:57'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'GR 10/31/2020 20:10:57'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonally stamp: 'GR 10/31/2020 20:10:57'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'GR 10/31/2020 20:10:57'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerCanNotPlayIfGameIsOver stamp: 'GR 10/31/2020 20:10:57'!
PASSED!

!methodRemoval: TerniLapilli #winsHorizontally: stamp: 'GR 10/31/2020 20:11:22'!
winsHorizontally: aPlayerPieces
	
	| anOccupiedPosition |
	
	aPlayerPieces allSatisfy: [ :aPosition | (anOccupiedPosition x = aPosition x)]!
!TerniLapilli methodsFor: 'private -- testing' stamp: 'GR 10/31/2020 20:13:37'!
winsDiagonally: aPlayerPieces

	^ aPlayerPieces allSatisfy: [ :aPosition | aPosition x abs = aPosition y abs]! !
!TerniLapilli methodsFor: 'private -- testing' stamp: 'GR 10/31/2020 20:13:37' prior: 50921466!
hasAWinningCondition: aPlayerPieces 
	
	| anOccupiedPosition |
	
	(aPlayerPieces size < 3) ifTrue: [ ^false ].
	
	anOccupiedPosition := aPlayerPieces detect: [ :aPosition | true].
	
	^ isOver := 
		(aPlayerPieces allSatisfy: [ :aPosition | (anOccupiedPosition x = aPosition x)])  or:
		(aPlayerPieces allSatisfy: [ :aPosition | (anOccupiedPosition y = aPosition y)]) or:
		((self winsDiagonally: aPlayerPieces) and: (aPlayerPieces includes: (0@0)))! !
!TerniLapilli methodsFor: 'private -- testing' stamp: 'GR 10/31/2020 20:13:47' prior: 50921576!
hasAWinningCondition: aPlayerPieces 
	
	| anOccupiedPosition |
	
	(aPlayerPieces size < 3) ifTrue: [ ^false ].
	
	anOccupiedPosition := aPlayerPieces detect: [ :aPosition | true].
	
	^ isOver := 
		(aPlayerPieces allSatisfy: [ :aPosition | (anOccupiedPosition x = aPosition x)])  or:
		(aPlayerPieces allSatisfy: [ :aPosition | (anOccupiedPosition y = aPosition y)]) or:
		(self winsDiagonally: aPlayerPieces)! !
!TerniLapilli methodsFor: 'private -- testing' stamp: 'GR 10/31/2020 20:13:55' prior: 50921569!
winsDiagonally: aPlayerPieces

	^ (aPlayerPieces allSatisfy: [ :aPosition | aPosition x abs = aPosition y abs])  and: (aPlayerPieces includes: (0@0))! !

!testRun: #TerniLapilliTest #test22PlayerCanNotPlayIfGameIsOver stamp: 'GR 10/31/2020 20:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 20:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 20:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 20:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 20:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 20:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 20:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 20:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 20:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 20:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 20:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 20:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 20:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 20:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 20:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 20:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'GR 10/31/2020 20:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 20:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 20:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'GR 10/31/2020 20:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonally stamp: 'GR 10/31/2020 20:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'GR 10/31/2020 20:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerCanNotPlayIfGameIsOver stamp: 'GR 10/31/2020 20:14:52'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 20:15:20'!
test22PlayerCanNotPlaceAPieceIfGameIsOver
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (0@-1).
	
	self assert: (juego hasPlayerXWon).
	self assert: (juego isOver).
	self
		should: [ juego putOAt: (1@0) ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: TerniLapilli canNotPlayIfGameIsOver = anError messageText ]
	
	! !

!methodRemoval: TerniLapilliTest #test22PlayerCanNotPlayIfGameIsOver stamp: 'GR 10/31/2020 20:15:20'!
test22PlayerCanNotPlayIfGameIsOver
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (0@-1).
	
	self assert: (juego hasPlayerXWon).
	self assert: (juego isOver).
	self
		should: [ juego putOAt: (1@0) ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: TerniLapilli canNotPlayIfGameIsOver = anError messageText ]
	
	!
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 20:16:19'!
test23PlayerCanNotMoveAPieceIfGameIsOver
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (0@-1).
	
	self assert: (juego hasPlayerXWon).
	self assert: (juego isOver).
	self
		should: [ juego putOAt: (1@0) ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: TerniLapilli canNotPlayIfGameIsOver = anError messageText ]
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 20:17:03' prior: 50921728!
test23PlayerCanNotMoveAPieceIfGameIsOver
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (-1@1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (1@-1).
	juego putOAt: (1@0).
	
	self assert: (juego hasPlayerXWon).
	self assert: (juego isOver).
	self
		should: [ juego putOAt: (1@0) ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: TerniLapilli canNotPlayIfGameIsOver = anError messageText ]
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 20:20:01' prior: 50921745!
test23PlayerCanNotMoveAPieceIfGameIsOver
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (-1@1).
	juego putOAt: (0@0).
	juego putXAt: (1@1).
	juego putOAt: (0@1).
	juego putXAt: (1@-1).
	juego putOAt: (0@-1).
	
	self
		should: [ juego playerXMovesFrom: (-1@1) to: (-1@-1) ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: TerniLapilli canNotPlayIfGameIsOver = anError messageText ]
	
	! !

!testRun: #TerniLapilliTest #test23PlayerCanNotMoveAPieceIfGameIsOver stamp: 'GR 10/31/2020 20:20:05'!
FAILURE!
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 20:20:47' prior: 50920880!
playerXmovesThePieceIn: aPosition to: anotherPosition
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedXPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedXPositions add: anotherPosition.
	
	turn := playerO.
	
	self hasPlayerXWon.! !

!testRun: #TerniLapilliTest #test23PlayerCanNotMoveAPieceIfGameIsOver stamp: 'GR 10/31/2020 20:20:59'!
FAILURE!

!testRun: #TerniLapilliTest #test23PlayerCanNotMoveAPieceIfGameIsOver stamp: 'GR 10/31/2020 20:21:11'!
FAILURE!
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 20:22:06' prior: 50921783!
playerXmovesThePieceIn: aPosition to: anotherPosition
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedXPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedXPositions add: anotherPosition.
	
	turn := playerO.! !

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'GR 10/31/2020 20:22:20'!
PASSED!
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 20:23:03' prior: 50920894!
playerOmovesThePieceIn: aPosition to: anotherPosition
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedOPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedOPositions add: anotherPosition.
	
	turn := playerX.
	
	self hasPlayerXWon.! !
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 20:23:11' prior: 50921805!
playerXmovesThePieceIn: aPosition to: anotherPosition
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedXPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedXPositions add: anotherPosition.
	
	turn := playerO.
	
	self hasPlayerOWon.! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'turn playerX playerO occupiedXPositions occupiedOPositions isOver winner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'GR 10/31/2020 20:25:03'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'turn playerX playerO occupiedXPositions occupiedOPositions isOver winner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 20:30:13' prior: 50920585!
hasPlayerOWon
	
	^ (self hasAWinningCondition: occupiedOPositions) ifTrue: [ winner := playerO ]! !
!TerniLapilli methodsFor: 'private -- testing' stamp: 'GR 10/31/2020 20:33:13'!
thePlayer: aPlayer hasAWinningConditionWith: aPlayerPieces 
	
	| anOccupiedPosition |
	
	(aPlayerPieces size < 3) ifTrue: [ ^false ].
	
	anOccupiedPosition := aPlayerPieces detect: [ :aPosition | true].
	
	isOver := 
		(aPlayerPieces allSatisfy: [ :aPosition | (anOccupiedPosition x = aPosition x)])  or:
		(aPlayerPieces allSatisfy: [ :aPosition | (anOccupiedPosition y = aPosition y)]) or:
		(self winsDiagonally: aPlayerPieces).
		
	isOver ifTrue: [winner := aPlayer]! !

!methodRemoval: TerniLapilli #hasAWinningCondition: stamp: 'GR 10/31/2020 20:33:18'!
hasAWinningCondition: aPlayerPieces 
	
	| anOccupiedPosition |
	
	(aPlayerPieces size < 3) ifTrue: [ ^false ].
	
	anOccupiedPosition := aPlayerPieces detect: [ :aPosition | true].
	
	^ isOver := 
		(aPlayerPieces allSatisfy: [ :aPosition | (anOccupiedPosition x = aPosition x)])  or:
		(aPlayerPieces allSatisfy: [ :aPosition | (anOccupiedPosition y = aPosition y)]) or:
		(self winsDiagonally: aPlayerPieces)!
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 20:33:51' prior: 50921866!
hasPlayerOWon
	
	^ self thePlayer: playerO hasAWinningConditionWith: occupiedOPositions! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 20:34:08' prior: 50920605!
hasPlayerXWon
	
	^ self thePlayer: playerX hasAWinningConditionWith: occupiedOPositions! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 20:34:13' prior: 50921911!
hasPlayerXWon
	
	^ self thePlayer: playerX hasAWinningConditionWith: occupiedXPositions! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 20:38:48' prior: 50921905!
hasPlayerOWon
	
	
	
	^ self thePlayer: playerO hasAWinningConditionWith: occupiedOPositions! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 20:39:28' prior: 50921923!
hasPlayerOWon
	
	^ (occupiedOPositions allSatisfy: [ :aPosition | (occupiedOPositions x = aPosition x)])  or:
		(occupiedOPositions allSatisfy: [ :aPosition | (occupiedOPositions y = aPosition y)]) or:
		(self winsDiagonally: occupiedOPositions)! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 20:40:09' prior: 50921929!
hasPlayerOWon
	
	| anOccupiedPosition |
	
	(occupiedOPositions size < 3) ifTrue: [ ^false ].
	
	anOccupiedPosition := occupiedOPositions detect: [ :aPosition | true].
	
	^ (occupiedOPositions allSatisfy: [ :aPosition | (anOccupiedPosition x = aPosition x)])  or:
		(occupiedOPositions allSatisfy: [ :aPosition | (anOccupiedPosition y = aPosition y)]) or:
		(self winsDiagonally: occupiedOPositions)! !
!TerniLapilli methodsFor: 'testing' stamp: 'GR 10/31/2020 20:40:40' prior: 50921917!
hasPlayerXWon
	
	| anOccupiedPosition |
	
	(occupiedXPositions size < 3) ifTrue: [ ^false ].
	
	anOccupiedPosition := occupiedXPositions detect: [ :aPosition | true].
	
	^ (occupiedXPositions allSatisfy: [ :aPosition | (anOccupiedPosition x = aPosition x)])  or:
		(occupiedXPositions allSatisfy: [ :aPosition | (anOccupiedPosition y = aPosition y)]) or:
		(self winsDiagonally: occupiedXPositions).! !
!TerniLapilli methodsFor: 'private -- testing' stamp: 'GR 10/31/2020 20:43:16'!
seeIfPlayerXhasAWinningCondition
	
	isOver := self hasPlayerXWon .! !
!TerniLapilli methodsFor: 'private -- testing' stamp: 'GR 10/31/2020 20:43:19' prior: 50921972!
seeIfPlayerXhasAWinningCondition
	
	isOver := self hasPlayerXWon.! !
!TerniLapilli methodsFor: 'private -- testing' stamp: 'GR 10/31/2020 20:43:28'!
seeIfPlayerOhasAWinningCondition
	
	isOver := self hasPlayerOWon.! !

!methodRemoval: TerniLapilli #thePlayer:hasAWinningConditionWith: stamp: 'GR 10/31/2020 20:43:34'!
thePlayer: aPlayer hasAWinningConditionWith: aPlayerPieces 
	
	| anOccupiedPosition |
	
	(aPlayerPieces size < 3) ifTrue: [ ^false ].
	
	anOccupiedPosition := aPlayerPieces detect: [ :aPosition | true].
	
	isOver := 
		(aPlayerPieces allSatisfy: [ :aPosition | (anOccupiedPosition x = aPosition x)])  or:
		(aPlayerPieces allSatisfy: [ :aPosition | (anOccupiedPosition y = aPosition y)]) or:
		(self winsDiagonally: aPlayerPieces).
		
	isOver ifTrue: [winner := aPlayer]!
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 20:43:45' prior: 50920925!
playerOPlacesAPieceIn: aPosition 
	
	(self isOver) ifTrue: [ self error: TerniLapilli canNotPlayIfGameIsOver ].
	
	self thePlayer: playerO canPlaceAPieceIn: aPosition.
	
	occupiedOPositions add: aPosition.
	
	turn := playerX.
	
	self seeIfPlayerOhasAWinningCondition .! !
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 20:43:51' prior: 50921822!
playerOmovesThePieceIn: aPosition to: anotherPosition
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedOPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedOPositions add: anotherPosition.
	
	turn := playerX.
	
	self seeIfPlayerOhasAWinningCondition .! !
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 20:43:56' prior: 50921203!
playerXPlacesAPieceIn: aPosition 

	(self isOver) ifTrue: [ self error: TerniLapilli canNotPlayIfGameIsOver ].
	
	self thePlayer: playerX canPlaceAPieceIn: aPosition.
	
	occupiedXPositions add: aPosition.
	
	turn := playerO.
	
	self seeIfPlayerXhasAWinningCondition .! !
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 20:44:02' prior: 50921836!
playerXmovesThePieceIn: aPosition to: anotherPosition
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedXPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedXPositions add: anotherPosition.
	
	turn := playerO.
	
	self seeIfPlayerXhasAWinningCondition .! !

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 20:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 20:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 20:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 20:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 20:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 20:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 20:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 20:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 20:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 20:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 20:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 20:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 20:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 20:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 20:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 20:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'GR 10/31/2020 20:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 20:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 20:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'GR 10/31/2020 20:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonally stamp: 'GR 10/31/2020 20:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'GR 10/31/2020 20:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerCanNotPlaceAPieceIfGameIsOver stamp: 'GR 10/31/2020 20:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerCanNotMoveAPieceIfGameIsOver stamp: 'GR 10/31/2020 20:44:05'!
FAILURE!

!testRun: #TerniLapilliTest #test23PlayerCanNotMoveAPieceIfGameIsOver stamp: 'GR 10/31/2020 20:44:05'!
FAILURE!
!TerniLapilliTest methodsFor: 'testing' stamp: 'GR 10/31/2020 20:45:29' prior: 50921763!
test23PlayerCanNotMoveAPieceIfGameIsOver
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (-1@1).
	juego putOAt: (0@0).
	juego putXAt: (1@1).
	juego putOAt: (0@1).
	juego putXAt: (1@-1).
	juego putOAt: (0@-1).
	
	self
		should: [ juego playerXMovesFrom: (-1@1) to: (-1@0) ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: TerniLapilli canNotPlayIfGameIsOver = anError messageText ]
	
	! !

!testRun: #TerniLapilliTest #test23PlayerCanNotMoveAPieceIfGameIsOver stamp: 'GR 10/31/2020 20:45:31'!
FAILURE!

!testRun: #TerniLapilliTest #test23PlayerCanNotMoveAPieceIfGameIsOver stamp: 'GR 10/31/2020 20:46:08'!
FAILURE!
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 20:47:17' prior: 50922045!
playerXmovesThePieceIn: aPosition to: anotherPosition
	
	( self isOver ) ifTrue: [ self error: TerniLapilli canNotPlayIfGameIsOver ].
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedXPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedXPositions add: anotherPosition.
	
	turn := playerO.
	
	self seeIfPlayerXhasAWinningCondition .! !

!testRun: #TerniLapilliTest #test23PlayerCanNotMoveAPieceIfGameIsOver stamp: 'GR 10/31/2020 20:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 20:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 20:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 20:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 20:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 20:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 20:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 20:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 20:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 20:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 20:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 20:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 20:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 20:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 20:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 20:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'GR 10/31/2020 20:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 20:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 20:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'GR 10/31/2020 20:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonally stamp: 'GR 10/31/2020 20:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'GR 10/31/2020 20:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerCanNotPlaceAPieceIfGameIsOver stamp: 'GR 10/31/2020 20:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerCanNotMoveAPieceIfGameIsOver stamp: 'GR 10/31/2020 20:47:32'!
PASSED!

Object subclass: #TerniLapilli
	instanceVariableNames: 'turn playerX playerO occupiedXPositions occupiedOPositions isOver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'GR 10/31/2020 20:55:02'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'turn playerX playerO occupiedXPositions occupiedOPositions isOver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

----SNAPSHOT----(31 October 2020 20:55:11) CuisUniversity-4383.image priorSource: 18686647!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 20:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'GR 10/31/2020 20:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'GR 10/31/2020 20:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'GR 10/31/2020 20:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'GR 10/31/2020 20:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'GR 10/31/2020 20:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 20:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'GR 10/31/2020 20:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'GR 10/31/2020 20:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'GR 10/31/2020 20:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'GR 10/31/2020 20:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'GR 10/31/2020 20:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'GR 10/31/2020 20:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'GR 10/31/2020 20:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'GR 10/31/2020 20:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'GR 10/31/2020 20:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'GR 10/31/2020 20:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'GR 10/31/2020 20:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'GR 10/31/2020 20:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'GR 10/31/2020 20:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonally stamp: 'GR 10/31/2020 20:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'GR 10/31/2020 20:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerCanNotPlaceAPieceIfGameIsOver stamp: 'GR 10/31/2020 20:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerCanNotMoveAPieceIfGameIsOver stamp: 'GR 10/31/2020 20:55:15'!
PASSED!
!TerniLapilli methodsFor: 'private' stamp: 'GR 10/31/2020 20:56:07' prior: 50922018!
playerOmovesThePieceIn: aPosition to: anotherPosition

	(self isOver) ifTrue: [ self error: TerniLapilli canNotPlayIfGameIsOver ].
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedOPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedOPositions add: anotherPosition.
	
	turn := playerX.
	
	self seeIfPlayerOhasAWinningCondition .! !

----QUIT----(31 October 2020 20:57:25) CuisUniversity-4383.image priorSource: 18900195!

----STARTUP---- (31 October 2020 20:58:08) as /home/grosinov/linux64/CuisUniversity-4383.image!


----QUIT----(31 October 2020 20:58:23) CuisUniversity-4383.image priorSource: 18903466!