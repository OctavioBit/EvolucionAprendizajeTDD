----End fileIn of /home/kali/exactas/ing1/ejercicios-isw1/20-TusLibros/20-TusLibros.st----!

!classRemoval: #Cart stamp: 'CJ 11/18/2020 17:37:54'!
Object subclass: #Cart
	instanceVariableNames: 'empty books catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classRemoval: #Book stamp: 'CJ 11/18/2020 17:37:55'!
Object subclass: #Book
	instanceVariableNames: 'isbn'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classRemoval: #CartTest stamp: 'CJ 11/18/2020 17:37:55'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

----End fileIn of /home/kali/exactas/ing1/ejercicios-isw1/20-TusLibros/20-TusLibros.st----!
!Cart methodsFor: 'initialization' stamp: 'CJ 11/18/2020 17:40:31' prior: 50953275!
initializeWithCatalog: aCatalog

	self initialize.
	catalog := aCatalog.! !

!testRun: #CartTest #test01CartWithoutProductsIsEmpty stamp: 'CJ 11/18/2020 17:40:33'!
PASSED!

!testRun: #CartTest #test02CartWithProductsIsNotEmpty stamp: 'CJ 11/18/2020 17:40:33'!
PASSED!

!testRun: #CartTest #test03CartStoresMultipleBooksWithAQuantity stamp: 'CJ 11/18/2020 17:40:33'!
PASSED!

!testRun: #CartTest #test04CartStacksBooksWithSameISBN stamp: 'CJ 11/18/2020 17:40:33'!
PASSED!

!testRun: #CartTest #test05BookQuantityMustBeAtLeast1 stamp: 'CJ 11/18/2020 17:40:33'!
PASSED!

!testRun: #CartTest #test06CartCantAddBooksNotInCatalog stamp: 'CJ 11/18/2020 17:40:33'!
PASSED!

!testRun: #CartTest #test07CartStoresBagOfBooks stamp: 'CJ 11/18/2020 17:40:33'!
PASSED!
!Cart methodsFor: 'evaluating' stamp: 'CJ 11/18/2020 17:40:45' prior: 50953247!
books

	^ books copy! !
!Cart methodsFor: 'initialization' stamp: 'CJ 11/18/2020 17:45:27' prior: 50953309!
initializeWithCatalog: aCatalog

	catalog := aCatalog.! !

!testRun: #CartTest #test01CartWithoutProductsIsEmpty stamp: 'CJ 11/18/2020 17:45:33'!
PASSED!

!testRun: #CartTest #test02CartWithProductsIsNotEmpty stamp: 'CJ 11/18/2020 17:45:33'!
PASSED!

!testRun: #CartTest #test03CartStoresMultipleBooksWithAQuantity stamp: 'CJ 11/18/2020 17:45:33'!
PASSED!

!testRun: #CartTest #test04CartStacksBooksWithSameISBN stamp: 'CJ 11/18/2020 17:45:33'!
PASSED!

!testRun: #CartTest #test05BookQuantityMustBeAtLeast1 stamp: 'CJ 11/18/2020 17:45:33'!
PASSED!

!testRun: #CartTest #test06CartCantAddBooksNotInCatalog stamp: 'CJ 11/18/2020 17:45:33'!
PASSED!

!testRun: #CartTest #test07CartStoresBagOfBooks stamp: 'CJ 11/18/2020 17:45:33'!
PASSED!

!testRun: #CartTest #test02CartWithProductsIsNotEmpty stamp: 'CJ 11/18/2020 17:46:08'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'CJ 11/18/2020 18:12:24' prior: 50953131!
test04CartStacksBooksWithSameISBN
	
	| cart catalog firstBook secondBook |

	firstBook := Book withISBN: '9780553801477'.
	secondBook := Book withISBN: '9780553801477'.
	catalog := Set with: firstBook." with: secondBook."
	cart := Cart withCatalog: catalog.
	
	cart add: firstBook quantity: 3.
	cart add: secondBook quantity: 5.

	self assert: 8 equals: (cart quantityOf: firstBook).
	self assert: 8 equals: (cart quantityOf: secondBook).! !

!testRun: #CartTest #test04CartStacksBooksWithSameISBN stamp: 'CJ 11/18/2020 18:12:25'!
PASSED!

!testRun: #CartTest #test01CartWithoutProductsIsEmpty stamp: 'CJ 11/18/2020 18:12:25'!
PASSED!

!testRun: #CartTest #test02CartWithProductsIsNotEmpty stamp: 'CJ 11/18/2020 18:12:25'!
PASSED!

!testRun: #CartTest #test03CartStoresMultipleBooksWithAQuantity stamp: 'CJ 11/18/2020 18:12:25'!
PASSED!

!testRun: #CartTest #test04CartStacksBooksWithSameISBN stamp: 'CJ 11/18/2020 18:12:25'!
PASSED!

!testRun: #CartTest #test05BookQuantityMustBeAtLeast1 stamp: 'CJ 11/18/2020 18:12:25'!
PASSED!

!testRun: #CartTest #test06CartCantAddBooksNotInCatalog stamp: 'CJ 11/18/2020 18:12:25'!
PASSED!

!testRun: #CartTest #test07CartStoresBagOfBooks stamp: 'CJ 11/18/2020 18:12:25'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'CJ 11/18/2020 18:26:16' prior: 50953104!
test02CartWithProductsIsNotEmpty
	
	| isbn cart catalog |
	
	isbn := '9780553801477'.
	catalog := Set with: isbn.
	cart := Cart withCatalog: catalog.

	cart add: isbn quantity: 1.

	self deny: cart isEmpty.! !

!testRun: #CartTest #test02CartWithProductsIsNotEmpty stamp: 'CJ 11/18/2020 18:26:22'!
PASSED!

!testRun: #CartTest #test01CartWithoutProductsIsEmpty stamp: 'CJ 11/18/2020 18:26:22'!
PASSED!

!testRun: #CartTest #test02CartWithProductsIsNotEmpty stamp: 'CJ 11/18/2020 18:26:22'!
PASSED!

!testRun: #CartTest #test03CartStoresMultipleBooksWithAQuantity stamp: 'CJ 11/18/2020 18:26:22'!
PASSED!

!testRun: #CartTest #test04CartStacksBooksWithSameISBN stamp: 'CJ 11/18/2020 18:26:22'!
PASSED!

!testRun: #CartTest #test05BookQuantityMustBeAtLeast1 stamp: 'CJ 11/18/2020 18:26:22'!
PASSED!

!testRun: #CartTest #test06CartCantAddBooksNotInCatalog stamp: 'CJ 11/18/2020 18:26:22'!
PASSED!

!testRun: #CartTest #test07CartStoresBagOfBooks stamp: 'CJ 11/18/2020 18:26:22'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'CJ 11/18/2020 18:27:49' prior: 50953114!
test03CartStoresMultipleBooksWithAQuantity
	
	| cart catalog firstIsbn secondIsbn |

	firstIsbn := '9780553801477'.
	secondIsbn := '9780575081406'.
	catalog := Set with: firstIsbn with: secondIsbn.
	cart := Cart withCatalog: catalog.
	
	cart add: firstIsbn quantity: 3.
	cart add: secondIsbn quantity: 5.

	self assert: 3 equals: (cart quantityOf: firstIsbn).
	self assert: 5 equals: (cart quantityOf: secondIsbn).! !

!testRun: #CartTest #test03CartStoresMultipleBooksWithAQuantity stamp: 'CJ 11/18/2020 18:27:51'!
PASSED!

!testRun: #CartTest #test01CartWithoutProductsIsEmpty stamp: 'CJ 11/18/2020 18:27:51'!
PASSED!

!testRun: #CartTest #test02CartWithProductsIsNotEmpty stamp: 'CJ 11/18/2020 18:27:51'!
PASSED!

!testRun: #CartTest #test03CartStoresMultipleBooksWithAQuantity stamp: 'CJ 11/18/2020 18:27:51'!
PASSED!

!testRun: #CartTest #test04CartStacksBooksWithSameISBN stamp: 'CJ 11/18/2020 18:27:51'!
PASSED!

!testRun: #CartTest #test05BookQuantityMustBeAtLeast1 stamp: 'CJ 11/18/2020 18:27:51'!
PASSED!

!testRun: #CartTest #test06CartCantAddBooksNotInCatalog stamp: 'CJ 11/18/2020 18:27:51'!
PASSED!

!testRun: #CartTest #test07CartStoresBagOfBooks stamp: 'CJ 11/18/2020 18:27:51'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'CJ 11/18/2020 18:27:54' prior: 50953444!
test03CartStoresMultipleBooksWithAQuantity
	
	| cart catalog firstIsbn secondIsbn |

	firstIsbn := '9780553801477'.
	secondIsbn := '9780575081406'.
	catalog := Set with: firstIsbn with: secondIsbn.
	cart := Cart withCatalog: catalog.
	
	cart add: firstIsbn quantity: 3.
	cart add: secondIsbn quantity: 5.

	self assert: 3 equals: (cart quantityOf: firstIsbn).
	self assert: 5 equals: (cart quantityOf: secondIsbn).! !
!CartTest methodsFor: 'tests' stamp: 'CJ 11/18/2020 18:32:28' prior: 50953369!
test04CartStacksBooksWithSameISBN
	
	| cart catalog firstIsbn secondBook |

	firstIsbn := Book withISBN: '9780553801477'.
	secondBook := Book withISBN: '9780553801477'.
	catalog := Set with: firstIsbn." with: secondBook."
	cart := Cart withCatalog: catalog.
	
	cart add: firstIsbn quantity: 3.
	cart add: secondBook quantity: 5.

	self assert: 8 equals: (cart quantityOf: firstIsbn).
	self assert: 8 equals: (cart quantityOf: secondBook).! !
!CartTest methodsFor: 'tests' stamp: 'CJ 11/18/2020 18:32:38' prior: 50953501!
test04CartStacksBooksWithSameISBN
	
	| cart catalog firstIsbn secondBook |

	firstIsbn := Book withISBN: '9780553801477'.
	secondBook := Book withISBN: '9780553801477'.
	catalog := Set with: firstIsbn." with: secondBook."
	cart := Cart withCatalog: catalog.
	
	cart add: firstIsbn quantity: 3.
	cart add: secondBook quantity: 5.

	self assert: 8 equals: (cart quantityOf: firstIsbn).
	self assert: 8 equals: (cart quantityOf: secondBook).! !
!CartTest methodsFor: 'tests' stamp: 'CJ 11/18/2020 18:32:56' prior: 50953518!
test04CartStacksBooksWithSameISBN
	
	| cart catalog firstIsbn secondIsbn |

	firstIsbn := Book withISBN: '9780553801477'.
	secondIsbn := Book withISBN: '9780553801477'.
	catalog := Set with: firstIsbn." with: secondBook."
	cart := Cart withCatalog: catalog.
	
	cart add: firstIsbn quantity: 3.
	cart add: secondIsbn quantity: 5.

	self assert: 8 equals: (cart quantityOf: firstIsbn).
	self assert: 8 equals: (cart quantityOf: secondIsbn).! !
!CartTest methodsFor: 'tests' stamp: 'CJ 11/18/2020 18:33:10' prior: 50953535!
test04CartStacksBooksWithSameISBN
	
	| cart catalog firstIsbn secondIsbn |

	firstIsbn := Book withISBN: '9780553801477'.
	secondIsbn := Book withISBN: '9780553801477'.
	catalog := Set with: firstIsbn.
	cart := Cart withCatalog: catalog.
	
	cart add: firstIsbn quantity: 3.
	cart add: secondIsbn quantity: 5.

	self assert: 8 equals: (cart quantityOf: firstIsbn).
	self assert: 8 equals: (cart quantityOf: secondIsbn).! !
!CartTest methodsFor: 'tests' stamp: 'CJ 11/18/2020 18:34:17' prior: 50953552!
test04CartStacksBooksWithSameISBN
	
	| cart catalog firstIsbn |

	firstIsbn := Book withISBN: '9780553801477'.
	catalog := Set with: firstIsbn.
	cart := Cart withCatalog: catalog.
	
	cart add: firstIsbn quantity: 3.
	cart add: firstIsbn quantity: 5.

	self assert: 8 equals: (cart quantityOf: firstIsbn).! !
!CartTest methodsFor: 'tests' stamp: 'CJ 11/18/2020 18:34:32' prior: 50953568!
test04CartStacksBooksWithSameISBN
	
	| cart catalog isbn |

	isbn := Book withISBN: '9780553801477'.
	catalog := Set with: isbn.
	cart := Cart withCatalog: catalog.
	
	cart add: isbn quantity: 3.
	cart add: isbn quantity: 5.

	self assert: 8 equals: (cart quantityOf: isbn).! !
!CartTest methodsFor: 'tests' stamp: 'CJ 11/18/2020 18:35:17' prior: 50953148!
test05BookQuantityMustBeAtLeast1
	
	| isbn cart catalog |

	isbn := Book withISBN: '9780553801477'.
	catalog := Set with: isbn.
	cart := Cart withCatalog: catalog.

	self
		should: [ cart add: isbn quantity: 0. ]
		raise: Error
		withMessageText: Cart bookQuantityUnderMinimumErrorDescription.

	self assert: cart isEmpty.! !
!CartTest methodsFor: 'tests' stamp: 'CJ 11/18/2020 18:35:24' prior: 50953593!
test05BookQuantityMustBeAtLeast1
	
	| isbn cart catalog |

	isbn := '9780553801477'.
	catalog := Set with: isbn.
	cart := Cart withCatalog: catalog.

	self
		should: [ cart add: isbn quantity: 0. ]
		raise: Error
		withMessageText: Cart bookQuantityUnderMinimumErrorDescription.

	self assert: cart isEmpty.! !

!testRun: #CartTest #test05BookQuantityMustBeAtLeast1 stamp: 'CJ 11/18/2020 18:35:31'!
PASSED!

!testRun: #CartTest #test01CartWithoutProductsIsEmpty stamp: 'CJ 11/18/2020 18:35:31'!
PASSED!

!testRun: #CartTest #test02CartWithProductsIsNotEmpty stamp: 'CJ 11/18/2020 18:35:31'!
PASSED!

!testRun: #CartTest #test03CartStoresMultipleBooksWithAQuantity stamp: 'CJ 11/18/2020 18:35:31'!
PASSED!

!testRun: #CartTest #test04CartStacksBooksWithSameISBN stamp: 'CJ 11/18/2020 18:35:31'!
PASSED!

!testRun: #CartTest #test05BookQuantityMustBeAtLeast1 stamp: 'CJ 11/18/2020 18:35:31'!
PASSED!

!testRun: #CartTest #test06CartCantAddBooksNotInCatalog stamp: 'CJ 11/18/2020 18:35:31'!
PASSED!

!testRun: #CartTest #test07CartStoresBagOfBooks stamp: 'CJ 11/18/2020 18:35:31'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'CJ 11/18/2020 18:36:08' prior: 50953161!
test06CartCantAddBooksNotInCatalog
	
	| cart |
	
	cart := Cart withCatalog: (Set new).

	self
		should: [ cart add: '9780553801477' quantity: 3. ]
		raise: Error
		withMessageText: Cart bookNotInCatalogErrorDescription.

	self assert: cart isEmpty.! !

!testRun: #CartTest #test06CartCantAddBooksNotInCatalog stamp: 'CJ 11/18/2020 18:36:12'!
PASSED!

!testRun: #CartTest #test01CartWithoutProductsIsEmpty stamp: 'CJ 11/18/2020 18:36:12'!
PASSED!

!testRun: #CartTest #test02CartWithProductsIsNotEmpty stamp: 'CJ 11/18/2020 18:36:12'!
PASSED!

!testRun: #CartTest #test03CartStoresMultipleBooksWithAQuantity stamp: 'CJ 11/18/2020 18:36:12'!
PASSED!

!testRun: #CartTest #test04CartStacksBooksWithSameISBN stamp: 'CJ 11/18/2020 18:36:12'!
PASSED!

!testRun: #CartTest #test05BookQuantityMustBeAtLeast1 stamp: 'CJ 11/18/2020 18:36:12'!
PASSED!

!testRun: #CartTest #test06CartCantAddBooksNotInCatalog stamp: 'CJ 11/18/2020 18:36:12'!
PASSED!

!testRun: #CartTest #test07CartStoresBagOfBooks stamp: 'CJ 11/18/2020 18:36:12'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'CJ 11/18/2020 18:36:40' prior: 50953172!
test07CartStoresBagOfBooks
	
	| cart catalog books |
	
	catalog := Set
		with: '9780553801477'
		with: '9780575081406'
		with: '9780553278224'.

	cart := Cart withCatalog: catalog.

	cart add: (Book withISBN: '9780553801477') quantity: 3.
	cart add: (Book withISBN: '9780575081406') quantity: 2.
	cart add: (Book withISBN: '9780553278224') quantity: 1.
	
	books := cart books.
	
	self assert: 6 equals: books size.
	self assert: 3 equals: (books occurrencesOf: (Book withISBN: '9780553801477')).
	self assert: 2 equals: (books occurrencesOf: (Book withISBN: '9780575081406')).
	self assert: 1 equals: (books occurrencesOf: (Book withISBN: '9780553278224')).! !
!CartTest methodsFor: 'tests' stamp: 'CJ 11/18/2020 18:37:27' prior: 50953678!
test07CartStoresBagOfBooks
	
	| cart catalog books isbn1 isbn2 isbn3 |
	
	isbn1 := '9780553801477'.
	isbn2 := '9780575081406'.
	isbn3 := '9780553278224'.
	
	catalog := Set
		with: '9780553801477'
		with: '9780575081406'
		with: '9780553278224'.

	cart := Cart withCatalog: catalog.

	cart add: (Book withISBN: '9780553801477') quantity: 3.
	cart add: (Book withISBN: '9780575081406') quantity: 2.
	cart add: (Book withISBN: '9780553278224') quantity: 1.
	
	books := cart books.
	
	self assert: 6 equals: books size.
	self assert: 3 equals: (books occurrencesOf: (Book withISBN: '9780553801477')).
	self assert: 2 equals: (books occurrencesOf: (Book withISBN: '9780575081406')).
	self assert: 1 equals: (books occurrencesOf: (Book withISBN: '9780553278224')).! !
!CartTest methodsFor: 'tests' stamp: 'CJ 11/18/2020 18:38:09' prior: 50953702!
test07CartStoresBagOfBooks
	
	| cart catalog books isbn1 isbn2 isbn3 |
	
	isbn1 := '9780553801477'.
	isbn2 := '9780575081406'.
	isbn3 := '9780553278224'.
	
	catalog := Set with: isbn1 with: isbn2 with: isbn3.

	cart := Cart withCatalog: catalog.

	cart add: (Book withISBN: '9780553801477') quantity: 3.
	cart add: (Book withISBN: '9780575081406') quantity: 2.
	cart add: (Book withISBN: '9780553278224') quantity: 1.
	
	books := cart books.
	
	self assert: 6 equals: books size.
	self assert: 3 equals: (books occurrencesOf: (Book withISBN: '9780553801477')).
	self assert: 2 equals: (books occurrencesOf: (Book withISBN: '9780575081406')).
	self assert: 1 equals: (books occurrencesOf: (Book withISBN: '9780553278224')).! !
!CartTest methodsFor: 'tests' stamp: 'CJ 11/18/2020 18:38:33' prior: 50953729!
test07CartStoresBagOfBooks
	
	| cart catalog books isbn1 isbn2 isbn3 |
	
	isbn1 := '9780553801477'.
	isbn2 := '9780575081406'.
	isbn3 := '9780553278224'.
	
	catalog := Set with: isbn1 with: isbn2 with: isbn3.

	cart := Cart withCatalog: catalog.

	cart add: isbn1 quantity: 3.
	cart add: isbn2 quantity: 2.
	cart add: isbn3 quantity: 1.
	
	books := cart books.
	
	self assert: 6 equals: books size.
	self assert: 3 equals: (books occurrencesOf: (Book withISBN: '9780553801477')).
	self assert: 2 equals: (books occurrencesOf: (Book withISBN: '9780575081406')).
	self assert: 1 equals: (books occurrencesOf: (Book withISBN: '9780553278224')).! !
!CartTest methodsFor: 'tests' stamp: 'CJ 11/18/2020 18:38:56' prior: 50953755!
test07CartStoresBagOfBooks
	
	| cart catalog books isbn1 isbn2 isbn3 |
	
	isbn1 := '9780553801477'.
	isbn2 := '9780575081406'.
	isbn3 := '9780553278224'.
	
	catalog := Set with: isbn1 with: isbn2 with: isbn3.

	cart := Cart withCatalog: catalog.

	cart add: isbn1 quantity: 3.
	cart add: isbn2 quantity: 2.
	cart add: isbn3 quantity: 1.
	
	books := cart books.
	
	self assert: 6 equals: books size.
	self assert: 3 equals: (books occurrencesOf: isbn1).
	self assert: 2 equals: (books occurrencesOf: isbn2).
	self assert: 1 equals: (books occurrencesOf: isbn3).! !

!testRun: #CartTest #test07CartStoresBagOfBooks stamp: 'CJ 11/18/2020 18:39:00'!
PASSED!

!testRun: #CartTest #test01CartWithoutProductsIsEmpty stamp: 'CJ 11/18/2020 18:39:00'!
PASSED!

!testRun: #CartTest #test02CartWithProductsIsNotEmpty stamp: 'CJ 11/18/2020 18:39:00'!
PASSED!

!testRun: #CartTest #test03CartStoresMultipleBooksWithAQuantity stamp: 'CJ 11/18/2020 18:39:00'!
PASSED!

!testRun: #CartTest #test04CartStacksBooksWithSameISBN stamp: 'CJ 11/18/2020 18:39:00'!
PASSED!

!testRun: #CartTest #test05BookQuantityMustBeAtLeast1 stamp: 'CJ 11/18/2020 18:39:00'!
PASSED!

!testRun: #CartTest #test06CartCantAddBooksNotInCatalog stamp: 'CJ 11/18/2020 18:39:00'!
PASSED!

!testRun: #CartTest #test07CartStoresBagOfBooks stamp: 'CJ 11/18/2020 18:39:00'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'CJ 11/18/2020 18:39:30' prior: 50953581!
test04CartStacksBooksWithSameISBN
	
	| cart catalog isbn |

	isbn := '9780553801477'.
	catalog := Set with: isbn.
	cart := Cart withCatalog: catalog.
	
	cart add: isbn quantity: 3.
	cart add: isbn quantity: 5.

	self assert: 8 equals: (cart quantityOf: isbn).! !

!classRemoval: #Book stamp: 'CJ 11/18/2020 18:42:13'!
Object subclass: #Book
	instanceVariableNames: 'isbn'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!Cart methodsFor: 'adding' stamp: 'CJ 11/19/2020 14:54:50' prior: 50953257!
add: isbnToAdd quantity: copiesOfBookToAdd

	copiesOfBookToAdd >= self minQuantityPerBook ifFalse: [ self error: self class bookQuantityUnderMinimumErrorDescription. ].
	(catalog includes: isbnToAdd) ifFalse: [ self error: self class bookNotInCatalogErrorDescription . ].

	books add: isbnToAdd withOccurrences: copiesOfBookToAdd.! !
!Cart methodsFor: 'adding' stamp: 'CJ 11/19/2020 14:55:17' prior: 50953840!
add: bookToAddISBN quantity: copiesOfBookToAdd

	copiesOfBookToAdd >= self minQuantityPerBook ifFalse: [ self error: self class bookQuantityUnderMinimumErrorDescription. ].
	(catalog includes: bookToAddISBN) ifFalse: [ self error: self class bookNotInCatalogErrorDescription . ].

	books add: bookToAddISBN withOccurrences: copiesOfBookToAdd.! !
!CartTest methodsFor: 'tests' stamp: 'CJ 11/19/2020 14:56:33'!
test08
	
	| cart catalog books isbn1 isbn2 isbn3 |
	
	isbn1 := '9780553801477'.
	isbn2 := '9780575081406'.
	isbn3 := '9780553278224'.
	
	catalog := Set with: isbn1 with: isbn2 with: isbn3.

	cart := Cart withCatalog: catalog.

	cart add: isbn1 quantity: 3.
	cart add: isbn2 quantity: 2.
	cart add: isbn3 quantity: 1.
	
	books := cart books.
	
	self assert: 6 equals: books size.
	self assert: 3 equals: (books occurrencesOf: isbn1).
	self assert: 2 equals: (books occurrencesOf: isbn2).
	self assert: 1 equals: (books occurrencesOf: isbn3).! !
!CartTest methodsFor: 'tests' stamp: 'CJ 11/19/2020 14:56:54' prior: 50953866!
test08
	
	| cart catalog books isbn1 isbn2 isbn3 |
	
	isbn1 := '9780553801477'.
	isbn2 := '9780575081406'.
	isbn3 := '9780553278224'.
	
	catalog := Set with: isbn1 with: isbn2 with: isbn3.

	cart := Cart withCatalog: catalog.

	cart add: isbn1 quantity: 3.
	cart add: isbn2 quantity: 2.
	cart add: isbn3 quantity: 1.
	
	books := cart books.
	
	self assert: 6 equals: books size.
	self assert: 3 equals: (books occurrencesOf: isbn1).
	self assert: 2 equals: (books occurrencesOf: isbn2).
	self assert: 1 equals: (books occurrencesOf: isbn3).! !
!CartTest methodsFor: 'tests' stamp: 'CJ 11/19/2020 14:58:23'!
test08BooksReturnsCopy
	
	| cart catalog books isbn1 |
	
	isbn1 := '9780553801477'.
	
	catalog := Set with: isbn1.

	cart := Cart withCatalog: catalog.

	cart add: isbn1 quantity: 3.
	
	books := cart books.
	books add: isbn1 withOccurrences: 1.

	self assert: 3 equals: (books occurrencesOf: isbn1).! !

!testRun: #CartTest #test08BooksReturnsCopy stamp: 'CJ 11/19/2020 14:58:30'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'CJ 11/19/2020 14:58:46' prior: 50953905!
test08BooksReturnsCopy
	
	| cart catalog books isbn1 |
	
	isbn1 := '9780553801477'.
	
	catalog := Set with: isbn1.

	cart := Cart withCatalog: catalog.

	cart add: isbn1 quantity: 3.
	
	books := cart books.
	books add: isbn1 withOccurrences: 1.

	self assert: 3 equals: (cart quantityOf: isbn1).! !

!testRun: #CartTest #test08BooksReturnsCopy stamp: 'CJ 11/19/2020 14:58:47'!
PASSED!

!testRun: #CartTest #test01CartWithoutProductsIsEmpty stamp: 'CJ 11/19/2020 14:58:47'!
PASSED!

!testRun: #CartTest #test02CartWithProductsIsNotEmpty stamp: 'CJ 11/19/2020 14:58:47'!
PASSED!

!testRun: #CartTest #test03CartStoresMultipleBooksWithAQuantity stamp: 'CJ 11/19/2020 14:58:47'!
PASSED!

!testRun: #CartTest #test04CartStacksBooksWithSameISBN stamp: 'CJ 11/19/2020 14:58:47'!
PASSED!

!testRun: #CartTest #test05BookQuantityMustBeAtLeast1 stamp: 'CJ 11/19/2020 14:58:47'!
PASSED!

!testRun: #CartTest #test06CartCantAddBooksNotInCatalog stamp: 'CJ 11/19/2020 14:58:47'!
PASSED!

!testRun: #CartTest #test07CartStoresBagOfBooks stamp: 'CJ 11/19/2020 14:58:47'!
PASSED!

!testRun: #CartTest #test08 stamp: 'CJ 11/19/2020 14:58:47'!
PASSED!

!testRun: #CartTest #test08BooksReturnsCopy stamp: 'CJ 11/19/2020 14:58:47'!
PASSED!

!methodRemoval: CartTest #test08 stamp: 'CJ 11/19/2020 14:58:53'!
test08
	
	| cart catalog books isbn1 isbn2 isbn3 |
	
	isbn1 := '9780553801477'.
	isbn2 := '9780575081406'.
	isbn3 := '9780553278224'.
	
	catalog := Set with: isbn1 with: isbn2 with: isbn3.

	cart := Cart withCatalog: catalog.

	cart add: isbn1 quantity: 3.
	cart add: isbn2 quantity: 2.
	cart add: isbn3 quantity: 1.
	
	books := cart books.
	
	self assert: 6 equals: books size.
	self assert: 3 equals: (books occurrencesOf: isbn1).
	self assert: 2 equals: (books occurrencesOf: isbn2).
	self assert: 1 equals: (books occurrencesOf: isbn3).!
!CartTest methodsFor: 'tests' stamp: 'CJ 11/19/2020 15:12:51'!
test09
	
	| cart catalog books isbn1 |
	
	isbn1 := '9780553801477'.
	
	catalog := Set with: isbn1.

	cart := Cart withCatalog: catalog.

	cart add: isbn1 quantity: 3.
	
	books := cart books.
	books add: isbn1 withOccurrences: 1.

	self assert: 3 equals: (cart quantityOf: isbn1).! !
!CartTest methodsFor: 'tests' stamp: 'CJ 11/19/2020 15:13:18' prior: 50953980!
test09
	
	| cart catalog isbn1 |
	
	isbn1 := '9780553801477'.
	
	catalog := Set with: isbn1.

	cart := Cart withCatalog: catalog.

	cart add: isbn1 quantity: 1.5.

	"self assert: 3 equals: (cart quantityOf: isbn1)."! !

!testRun: #CartTest #test09 stamp: 'CJ 11/19/2020 15:15:10'!
PASSED!

----End fileIn of /home/kali/exactas/ing1/ejercicios-isw1/20-TusLibros/Iteracion2/20-TusLibros.st----!

!classRemoval: #Cashier stamp: 'CJ 11/21/2020 17:02:58'!
Object subclass: #Cashier
	instanceVariableNames: 'priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classRemoval: #Cart stamp: 'CJ 11/21/2020 17:02:58'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classRemoval: #CashierTest stamp: 'CJ 11/21/2020 17:02:58'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classRemoval: #CartTest stamp: 'CJ 11/21/2020 17:02:59'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

----End fileIn of /home/kali/exactas/ing1/ejercicios-isw1/20-TusLibros/Iteracion2/20-TusLibros.st----!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/21/2020 17:17:57' prior: 50954453!
test01CannotCheckoutOnEmptyCart

	| cart cashier |
	
	cashier := Cashier withPriceList: self emptyPriceList.
	cart := self emptyCart.
	
	self
		should: [ cashier checkout: cart ]
		raise: Error
		withMessageText: Cashier emptyCartErrorDescription.
		! !

!methodRemoval: CashierTest #test02CannotCheckoutIfCartItemsAreNotInPriceList stamp: 'CJ 11/21/2020 17:18:30'!
test02CannotCheckoutIfCartItemsAreNotInPriceList

	| cart cashier |
	cashier := Cashier withPriceList: self emptyPriceList.
	cart := self defaultCart.
	
	self
		should: [ cashier checkout: cart ]
		raise: Error
		withMessageText: Cashier itemNotInPriceListErrorDescription.!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/21/2020 17:18:38'!
test02CheckoutReturnsChargedAmount

	| cart cashier amount |

	cashier := Cashier withPriceList: self defaultPriceList.
	cart := self defaultCart.
	
	amount := cashier checkout: cart.

	self assert: 125 equals: amount value.! !

!methodRemoval: CashierTest #test03CheckoutReturnsChargedAmount stamp: 'CJ 11/21/2020 17:18:38'!
test03CheckoutReturnsChargedAmount

	| cart cashier amount |

	cashier := Cashier withPriceList: self defaultPriceList.
	cart := self defaultCart.
	
	amount := cashier checkout: cart.

	self assert: 125 equals: amount value.!

!testRun: #CashierTest #test02CheckoutReturnsChargedAmount stamp: 'CJ 11/21/2020 17:18:39'!
PASSED!
!CartTest methodsFor: 'support' stamp: 'CJ 11/21/2020 17:19:53'!
itemSoldByStore
	
	^ 'validBook'! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/21/2020 17:19:53' prior: 50954415!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSoldByStore.
	self assert: (cart occurrencesOf: self itemSoldByStore) = 2! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/21/2020 17:19:53' prior: 50954408!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createCart.
	
	self deny: (cart includes: self itemSoldByStore)! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/21/2020 17:19:54' prior: 50954429!
defaultCatalog
	
	^ Array with: self itemSoldByStore! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/21/2020 17:19:54' prior: 50954400!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSoldByStore.
	self assert: (cart includes: self itemSoldByStore)! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/21/2020 17:19:54' prior: 50954366!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSoldByStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/21/2020 17:19:54' prior: 50954374!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: self itemSoldByStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !

!methodRemoval: CartTest #itemSellByTheStore stamp: 'CJ 11/21/2020 17:19:54'!
itemSellByTheStore
	
	^ 'validBook'!
!CartTest methodsFor: 'support' stamp: 'CJ 11/21/2020 17:20:17'!
itemNotSoldByStore
	
	^'invalidBook'! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/21/2020 17:20:17' prior: 50954353!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: self itemNotSoldByStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/21/2020 17:20:17' prior: 50954387!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSoldByStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!methodRemoval: CartTest #itemNotSellByTheStore stamp: 'CJ 11/21/2020 17:20:17'!
itemNotSellByTheStore
	
	^'invalidBook'!
!CartTest methodsFor: 'support' stamp: 'CJ 11/21/2020 17:22:57' prior: 50954713!
defaultCatalog
	
	| catalog |
	catalog := Dictionary new.! !
!CartTest methodsFor: 'support' stamp: 'CJ 11/21/2020 17:23:50' prior: 50954785!
defaultCatalog
	
	| catalog |
	
	catalog := Dictionary new.
	catalog add: self itemSoldByStore -> self itemSoldByStorePrice.
	^ catalog.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/21/2020 17:23:55'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJ 11/21/2020 17:23:55'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJ 11/21/2020 17:23:55'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJ 11/21/2020 17:23:55'!
ERROR!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CJ 11/21/2020 17:23:55'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CJ 11/21/2020 17:23:55'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJ 11/21/2020 17:23:55'!
ERROR!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJ 11/21/2020 17:23:55'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/21/2020 17:23:57'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'CJ 11/21/2020 17:24:12'!
itemSoldByStorePrice
	self shouldBeImplemented.! !
!CartTest methodsFor: 'support' stamp: 'CJ 11/21/2020 17:24:19' prior: 50954825!
itemSoldByStorePrice
	
	^ 10! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/21/2020 17:24:20'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/21/2020 17:24:22'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJ 11/21/2020 17:24:22'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJ 11/21/2020 17:24:22'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJ 11/21/2020 17:24:22'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CJ 11/21/2020 17:24:22'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CJ 11/21/2020 17:24:22'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJ 11/21/2020 17:24:22'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJ 11/21/2020 17:24:22'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJ 11/21/2020 17:24:23'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'CJ 11/21/2020 17:24:39' prior: 50954532!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJ 11/21/2020 17:24:42'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/21/2020 17:24:44'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJ 11/21/2020 17:24:44'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJ 11/21/2020 17:24:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CJ 11/21/2020 17:24:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJ 11/21/2020 17:24:44'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJ 11/21/2020 17:24:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CJ 11/21/2020 17:24:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJ 11/21/2020 17:24:44'!
PASSED!
!Cart methodsFor: 'queries' stamp: 'CJ 11/21/2020 17:25:32' prior: 50954553!
occurrencesOf: anItem

	^ items occurrencesOf: anItem  ! !
!CartTest methodsFor: 'tests' stamp: 'CJ 11/21/2020 17:26:16'!
test09

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSoldByStore.
	self assert: (cart occurrencesOf: self itemSoldByStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'CJ 11/21/2020 17:29:08' prior: 50954906!
test09

	| cart |
	
	cart := self createCart.
	
	cart add: 1 of: self itemSoldByStore.
	self assert: (cart totalItemCost) = self itemSoldByStorePrice ! !

!testRun: #CartTest #test09 stamp: 'CJ 11/21/2020 17:29:10'!
ERROR!
!Cart methodsFor: 'queries' stamp: 'CJ 11/21/2020 17:29:33'!
totalItemCost
	self shouldBeImplemented.! !
!Cart methodsFor: 'queries' stamp: 'CJ 11/21/2020 17:29:44' prior: 50954923!
totalItemCost
	
	^ 10! !

!testRun: #CartTest #test09 stamp: 'CJ 11/21/2020 17:29:48'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/21/2020 17:29:48'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJ 11/21/2020 17:29:48'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJ 11/21/2020 17:29:48'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJ 11/21/2020 17:29:48'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CJ 11/21/2020 17:29:48'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CJ 11/21/2020 17:29:48'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJ 11/21/2020 17:29:48'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJ 11/21/2020 17:29:48'!
PASSED!

!testRun: #CartTest #test09 stamp: 'CJ 11/21/2020 17:29:48'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'CJ 11/21/2020 17:30:12'!
test10

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSoldByStore.
	self assert: (cart totalItemCost) = self itemSoldByStorePrice * 2! !

!testRun: #CartTest #test10 stamp: 'CJ 11/21/2020 17:30:13'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'CJ 11/21/2020 17:30:31' prior: 50954960!
test10

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSoldByStore.
	self assert: (cart totalItemCost) = (self itemSoldByStorePrice) * 2! !

!testRun: #CartTest #test10 stamp: 'CJ 11/21/2020 17:30:32'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'CJ 11/21/2020 17:30:43' prior: 50954970!
test10

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSoldByStore.
	self assert: (cart totalItemCost) = (self itemSoldByStorePrice * 2)! !

!testRun: #CartTest #test10 stamp: 'CJ 11/21/2020 17:30:44'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'CJ 11/21/2020 17:31:08' prior: 50954980!
test10

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSoldByStore.
	self assert: cart totalItemCost = (self itemSoldByStorePrice * 2)! !
!Cart methodsFor: 'queries' stamp: 'CJ 11/21/2020 17:32:15' prior: 50954927!
totalItemCost
	
	^ items sum: [ :aCartItem |
		catalog at: aCartItem 
		]! !
!Cart methodsFor: 'queries' stamp: 'CJ 11/21/2020 17:32:23' prior: 50954998!
totalItemCost
	
	^ items sum: [ :aCartItem | catalog at: aCartItem ].! !

!testRun: #CartTest #test10 stamp: 'CJ 11/21/2020 17:32:26'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/21/2020 17:32:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJ 11/21/2020 17:32:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJ 11/21/2020 17:32:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJ 11/21/2020 17:32:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CJ 11/21/2020 17:32:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CJ 11/21/2020 17:32:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJ 11/21/2020 17:32:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJ 11/21/2020 17:32:27'!
PASSED!

!testRun: #CartTest #test09 stamp: 'CJ 11/21/2020 17:32:27'!
PASSED!

!testRun: #CartTest #test10 stamp: 'CJ 11/21/2020 17:32:27'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'CJ 11/21/2020 17:34:49' prior: 50954990!
test10

	| cart expectedTotal |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSoldByStore.
	cart add: 3 of: self anotherItemSoldByStore.
	
	expectedTotal := (self itemSoldByStorePrice * 2) + (self anotherItemSoldByStorePrice * 3).

	self assert: cart totalItemCost = expectedTotal.! !

!testRun: #CartTest #test10 stamp: 'CJ 11/21/2020 17:34:59'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'CJ 11/21/2020 17:35:11'!
anotherItemSoldByStore
	self shouldBeImplemented.! !
!CartTest methodsFor: 'support' stamp: 'CJ 11/21/2020 17:35:26' prior: 50955054!
anotherItemSoldByStore
	
	^ 'anotherValidBook'! !

!testRun: #CartTest #test10 stamp: 'CJ 11/21/2020 17:35:27'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'CJ 11/21/2020 17:36:41' prior: 50954790!
defaultCatalog
	
	| catalog |
	
	catalog := Dictionary new.
	catalog
		add: self itemSoldByStore -> self itemSoldByStorePrice;
		add: self anotherItemSoldByStore -> self anotherItemSoldByStorePrice.
	
	^ catalog.! !

!testRun: #CartTest #test10 stamp: 'CJ 11/21/2020 17:36:49'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'CJ 11/21/2020 17:36:57'!
anotherItemSoldByStorePrice
	self shouldBeImplemented.! !
!CartTest methodsFor: 'support' stamp: 'CJ 11/21/2020 17:37:01' prior: 50955077!
anotherItemSoldByStorePrice
	
	^ 15! !

!testRun: #CartTest #test10 stamp: 'CJ 11/21/2020 17:37:02'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/21/2020 17:37:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJ 11/21/2020 17:37:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJ 11/21/2020 17:37:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJ 11/21/2020 17:37:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CJ 11/21/2020 17:37:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CJ 11/21/2020 17:37:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJ 11/21/2020 17:37:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJ 11/21/2020 17:37:02'!
PASSED!

!testRun: #CartTest #test09 stamp: 'CJ 11/21/2020 17:37:02'!
PASSED!

!testRun: #CartTest #test10 stamp: 'CJ 11/21/2020 17:37:02'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'CJ 11/21/2020 17:37:37'!
test09CartCalculatesPriceOfSingleItemCorrectly

	| cart |
	
	cart := self createCart.
	
	cart add: 1 of: self itemSoldByStore.
	self assert: (cart totalItemCost) = self itemSoldByStorePrice ! !

!methodRemoval: CartTest #test09 stamp: 'CJ 11/21/2020 17:37:37'!
test09

	| cart |
	
	cart := self createCart.
	
	cart add: 1 of: self itemSoldByStore.
	self assert: (cart totalItemCost) = self itemSoldByStorePrice !
!CartTest methodsFor: 'tests' stamp: 'CJ 11/21/2020 17:37:52'!
test10CartCalculatesCostOfManyItemsCorrectly

	| cart expectedTotal |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSoldByStore.
	cart add: 3 of: self anotherItemSoldByStore.
	
	expectedTotal := (self itemSoldByStorePrice * 2) + (self anotherItemSoldByStorePrice * 3).

	self assert: cart totalItemCost = expectedTotal.! !

!methodRemoval: CartTest #test10 stamp: 'CJ 11/21/2020 17:37:53'!
test10

	| cart expectedTotal |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSoldByStore.
	cart add: 3 of: self anotherItemSoldByStore.
	
	expectedTotal := (self itemSoldByStorePrice * 2) + (self anotherItemSoldByStorePrice * 3).

	self assert: cart totalItemCost = expectedTotal.!
!CartTest methodsFor: 'tests' stamp: 'CJ 11/21/2020 17:38:03'!
test09CartCalculatesCostOfSingleItemCorrectly

	| cart |
	
	cart := self createCart.
	
	cart add: 1 of: self itemSoldByStore.
	self assert: (cart totalItemCost) = self itemSoldByStorePrice ! !

!methodRemoval: CartTest #test09CartCalculatesPriceOfSingleItemCorrectly stamp: 'CJ 11/21/2020 17:38:03'!
test09CartCalculatesPriceOfSingleItemCorrectly

	| cart |
	
	cart := self createCart.
	
	cart add: 1 of: self itemSoldByStore.
	self assert: (cart totalItemCost) = self itemSoldByStorePrice !

!testRun: #CartTest #test09CartCalculatesCostOfSingleItemCorrectly stamp: 'CJ 11/21/2020 17:38:05'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/21/2020 17:38:11'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJ 11/21/2020 17:38:11'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJ 11/21/2020 17:38:11'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJ 11/21/2020 17:38:11'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CJ 11/21/2020 17:38:11'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CJ 11/21/2020 17:38:11'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJ 11/21/2020 17:38:11'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJ 11/21/2020 17:38:11'!
PASSED!

!testRun: #CartTest #test09CartCalculatesCostOfSingleItemCorrectly stamp: 'CJ 11/21/2020 17:38:11'!
PASSED!

!testRun: #CartTest #test10CartCalculatesCostOfManyItemsCorrectly stamp: 'CJ 11/21/2020 17:38:11'!
PASSED!

!methodRemoval: CashierTest #defaultCatalog stamp: 'CJ 11/21/2020 17:39:08'!
defaultCatalog
	^ Array with: 'item1' with: 'item2'.!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/21/2020 17:39:19'!
defaultCatalog

	| priceList |

	priceList := Dictionary new.
	priceList
		add: 'item1'->50;
		add: 'item2'->75.

	^ priceList! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/21/2020 17:39:19' prior: 50954669!
test02CheckoutReturnsChargedAmount

	| cart cashier amount |

	cashier := Cashier withPriceList: self defaultCatalog.
	cart := self defaultCart.
	
	amount := cashier checkout: cart.

	self assert: 125 equals: amount value.! !

!methodRemoval: CashierTest #defaultPriceList stamp: 'CJ 11/21/2020 17:39:19'!
defaultPriceList

	| priceList |

	priceList := Dictionary new.
	priceList
		add: 'item1'->50;
		add: 'item2'->75.

	^ priceList!

!methodRemoval: CashierTest #emptyPriceList stamp: 'CJ 11/21/2020 17:39:37'!
emptyPriceList
	^ Dictionary new!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/21/2020 17:40:01' prior: 50954503!
emptyCart

	^ Cart acceptingItemsOf: self defaultCatalog.! !
!CashierTest methodsFor: 'support' stamp: 'CJ 11/21/2020 17:40:50' prior: 50954484!
defaultCart

	| catalog cart |

	catalog := self defaultCatalog.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: catalog first.
	cart add: 1 of: catalog second.

	^ cart.! !
!CartTest methodsFor: 'tests' stamp: 'CJ 11/21/2020 17:41:43'!
test05CanNotAddMoreThanOneItemNotSoldByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSoldByStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!methodRemoval: CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CJ 11/21/2020 17:41:43'!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSoldByStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/21/2020 17:42:23' prior: 50954646!
test01CannotCheckoutOnEmptyCart

	| cart cashier |
	
	cashier := Cashier new.
	cart := self emptyCart.
	
	self
		should: [ cashier checkout: cart ]
		raise: Error
		withMessageText: Cashier emptyCartErrorDescription.
		! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/21/2020 17:42:34' prior: 50955223!
test02CheckoutReturnsChargedAmount

	| cart cashier amount |

	cashier := Cashier new.
	cart := self defaultCart.
	
	amount := cashier checkout: cart.

	self assert: 125 equals: amount value.! !

!testRun: #CashierTest #test02CheckoutReturnsChargedAmount stamp: 'CJ 11/21/2020 17:43:59'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/21/2020 17:44:18' prior: 50955248!
defaultCart

	| catalog cart |

	catalog := self defaultCatalog.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: catalog keys first.
	cart add: 1 of: catalog keys second.

	^ cart.! !

!testRun: #CashierTest #test02CheckoutReturnsChargedAmount stamp: 'CJ 11/21/2020 17:44:20'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'CJ 11/21/2020 17:44:32' prior: 50954606!
checkout: aCart

	self assertCartNotEmpty: aCart.

	^ aCart items sum: [ :anItem | priceList at: anItem ].! !
!Cashier methodsFor: 'checkout' stamp: 'CJ 11/21/2020 17:44:44' prior: 50955316!
checkout: aCart

	self assertCartNotEmpty: aCart.

	^ 125.! !

!testRun: #CashierTest #test02CheckoutReturnsChargedAmount stamp: 'CJ 11/21/2020 17:44:49'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/21/2020 17:44:49'!
PASSED!

!testRun: #CashierTest #test02CheckoutReturnsChargedAmount stamp: 'CJ 11/21/2020 17:44:49'!
PASSED!
!Cashier methodsFor: 'checkout' stamp: 'CJ 11/21/2020 17:45:19' prior: 50955322!
checkout: aCart

	self assertCartNotEmpty: aCart.

	^ aCart totalItemCost.! !

!testRun: #CashierTest #test02CheckoutReturnsChargedAmount stamp: 'CJ 11/21/2020 17:45:24'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/21/2020 17:45:24'!
PASSED!

!testRun: #CashierTest #test02CheckoutReturnsChargedAmount stamp: 'CJ 11/21/2020 17:45:24'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/21/2020 17:48:11'!
test03

	| cart cashier amount |

	cashier := Cashier new.
	cart := self defaultCart.
	
	amount := cashier checkout: cart.

	self assert: 125 equals: amount value.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/21/2020 17:51:06' prior: 50955350!
test03

	| cart cashier amount |

	cashier := Cashier new.
	cart := self defaultCart.
	
	amount := cashier checkout: cart withCreditCard: self defaultCreditCard.

	self assert: 125 equals: amount value.! !

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 17:51:17'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/21/2020 17:51:25'!
defaultCreditCard
	self shouldBeImplemented.! !

!classDefinition: #CreditCard category: '20-TusLibros' stamp: 'CJ 11/21/2020 17:55:26'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/21/2020 17:55:14' prior: 50955369!
defaultCreditCard
	
	^ CreditCard
		withNumber: '751111'
		ownedBy: 'Norbert Degoas'
		expiringOn: February / 2023.! !

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 17:55:31'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/21/2020 17:56:05' prior: 50955380!
defaultCreditCard
	
	^ CreditCard
		withNumber: '751111'
		ownedBy: 'Norbert Degoas'
		expiringOn: 2023/February.! !

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 17:56:07'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/21/2020 17:56:54' prior: 50955389!
defaultCreditCard
	
	^ CreditCard
		withNumber: '751111'
		ownedBy: 'Norbert Degoas'
		expiringOn: (February of: 2023).! !

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 17:57:01'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'CJ 11/21/2020 17:57:14'!
withNumber: aString ownedBy: aString2 expiringOn: aGregorianMonthOfYear 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithNumber: aString ownedBy: aString2 expiringOn: aGregorianMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'CJ 11/21/2020 17:57:48' prior: 50955407!
withNumber: creditCardNumber ownedBy: ownerName expiringOn: expirationDate 
	
	^ self new initializeWithNumber: creditCardNumber ownedBy: ownerName expiringOn: expirationDate.! !

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 17:57:50'!
ERROR!

!classDefinition: #CreditCard category: '20-TusLibros' stamp: 'CJ 11/21/2020 17:58:02'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classDefinition: #CreditCard category: '20-TusLibros' stamp: 'CJ 11/21/2020 17:58:02'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber_CHANGE_ME ownerName_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classDefinition: #CreditCard category: '20-TusLibros' stamp: 'CJ 11/21/2020 17:58:02'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber_CHANGE_ME ownerName_CHANGE_ME expirationDate_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'CJ 11/21/2020 17:58:02'!
initializeWithNumber: creditCardNumber ownedBy: ownerName expiringOn: expirationDate 
	self shouldBeImplemented.
	creditCardNumber_CHANGE_ME := creditCardNumber.
	ownerName_CHANGE_ME := ownerName.
	expirationDate_CHANGE_ME := expirationDate.! !

!classDefinition: #CreditCard category: '20-TusLibros' stamp: 'CJ 11/21/2020 17:58:58'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber_CHANGE_ME ownerName_CHANGE_ME expirationDate_CHANGE_ME number'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classDefinition: #CreditCard category: '20-TusLibros' stamp: 'CJ 11/21/2020 17:59:02'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber_CHANGE_ME ownerName_CHANGE_ME expirationDate_CHANGE_ME number name'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classDefinition: #CreditCard category: '20-TusLibros' stamp: 'CJ 11/21/2020 17:59:04'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber_CHANGE_ME ownerName_CHANGE_ME expirationDate_CHANGE_ME number name validUntil'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'CJ 11/21/2020 17:58:48' prior: 50955455!
initializeWithNumber: creditCardNumber ownedBy: ownerName expiringOn: expirationDate 
	
	number := creditCardNumber.
	name := ownerName.
	validUntil := expirationDate.! !

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 17:59:26'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'CJ 11/21/2020 17:59:41'!
checkout: aCart withCreditCard: aCreditCard 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CJ 11/21/2020 18:02:30' prior: 50955504!
checkout: aCart withCreditCard: aCreditCard 

	self assertCartNotEmpty: aCart.
	self assertCardIsValid: aCreditCard.

	^ aCart totalItemCost.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CJ 11/21/2020 18:06:06' prior: 50955510!
checkout: aCart withCreditCard: aCreditCard 

	self assertCartNotEmpty: aCart.
	self assertCardNotExpired: aCreditCard.

	^ aCart totalItemCost.! !

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 18:06:10'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'CJ 11/21/2020 18:09:47'!
assertCardNotExpired: aCreditCard 
	self shouldBeImplemented.! !

!methodRemoval: Cashier #assertCardNotExpired: stamp: 'CJ 11/21/2020 18:10:00'!
assertCardNotExpired: aCreditCard 
	self shouldBeImplemented.!
!Cashier methodsFor: 'as yet unclassified' stamp: 'CJ 11/21/2020 18:10:06' prior: 50955518!
checkout: aCart withCreditCard: aCreditCard 

	self assertCartNotEmpty: aCart.

	^ aCart totalItemCost.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CJ 11/21/2020 18:10:39' prior: 50955538!
checkout: aCart withCreditCard: aCreditCard 

	self assertCartNotEmpty: aCart.

	^ aCart totalItemCost.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/21/2020 18:11:22' prior: 50955292!
test02CheckoutReturnsChargedAmount

	| cart cashier amount |

	cashier := Cashier new.
	cart := self defaultCart.
	
	amount := cashier checkout: cart withCreditCard: self defaultCreditCard.

	self assert: 125 equals: amount value.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/21/2020 18:14:20' prior: 50955358!
test03

	| cart cashier |

	cashier := Cashier new.
	cart := self defaultCart.
	
	self
		should: [ cashier checkout: cart withCreditCard: self expiredCreditCard. ]
		raise: Error
		withMessageText: ''.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/21/2020 18:15:34' prior: 50955561!
test03

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self defaultCart.
	
	self
		should: [ cashier checkout: cart withCreditCard: self expiredCreditCard. ]
		raise: Error
		withMessageText: ''.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/21/2020 18:16:40' prior: 50955570!
test03

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self expiredCardMerchantProcessor.
	cart := self defaultCart.
	
	self
		should: [ cashier checkout: cart withCreditCard: self defaultCreditCard. ]
		raise: Error
		withMessageText: ''.! !

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 18:16:48'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/21/2020 18:16:59'!
expiredCardMerchantProcessor
	self shouldBeImplemented.! !

!classDefinition: #MerchantProcessor category: '20-TusLibros' stamp: 'CJ 11/21/2020 18:17:43'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/21/2020 18:17:37' prior: 50955594!
expiredCardMerchantProcessor
	
	^ MerchantProcessor new.! !

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 18:17:57'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'CJ 11/21/2020 18:18:08'!
withMerchantProcessor: aMerchantProcessor 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithMerchantProcessor: aMerchantProcessor ! !
!Cashier class methodsFor: 'instance creation' stamp: 'CJ 11/21/2020 18:18:19' prior: 50955613!
withMerchantProcessor: aMerchantProcessor 
	
	^self new initializeWithMerchantProcessor: aMerchantProcessor ! !

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 18:18:21'!
ERROR!

!classDefinition: #Cashier category: '20-TusLibros' stamp: 'CJ 11/21/2020 18:18:33'!
Object subclass: #Cashier
	instanceVariableNames: 'priceList merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'CJ 11/21/2020 18:18:33'!
initializeWithMerchantProcessor: aMerchantProcessor 
	self shouldBeImplemented.
	merchantProcessor := aMerchantProcessor.! !
!Cashier methodsFor: 'initialization' stamp: 'CJ 11/21/2020 18:18:38' prior: 50955639!
initializeWithMerchantProcessor: aMerchantProcessor 

	merchantProcessor := aMerchantProcessor.! !

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 18:18:40'!
FAILURE!

!classRenamed: #MerchantProcessor as: #MerchantProcessorSimulator stamp: 'CJ 11/21/2020 18:18:48'!
Smalltalk renameClassNamed: #MerchantProcessor as: #MerchantProcessorSimulator!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/21/2020 18:18:48' prior: 50955606!
expiredCardMerchantProcessor
	
	^ MerchantProcessorSimulator new.! !

!classDefinition: #MerchantProcessor category: '20-TusLibros' stamp: 'CJ 11/21/2020 18:22:56'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/21/2020 18:22:49' prior: 50955581!
test03

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self expiredCardMerchantProcessor.
	cart := self defaultCart.
	
	self
		should: [ cashier checkout: cart withCreditCard: self defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor expiredCardErrorDescription.! !

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 18:23:30'!
ERROR!
!MerchantProcessor class methodsFor: 'error handling' stamp: 'CJ 11/21/2020 18:23:42'!
expiredCardErrorDescription
	self shouldBeImplemented.! !
!MerchantProcessor class methodsFor: 'error handling' stamp: 'CJ 11/21/2020 18:24:09' prior: 50955688!
expiredCardErrorDescription
	
	^ 'The provided credit card has expired'.! !

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 18:24:17'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'CJ 11/21/2020 18:25:33' prior: 50955545!
checkout: aCart withCreditCard: aCreditCard 

	self assertCartNotEmpty: aCart.
	
	self error: MerchantProcessor expiredCardErrorDescription.

	^ aCart totalItemCost.! !

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 18:25:45'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/21/2020 18:25:45'!
PASSED!

!testRun: #CashierTest #test02CheckoutReturnsChargedAmount stamp: 'CJ 11/21/2020 18:25:45'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 18:25:45'!
PASSED!

!testRun: #CashierTest #test02CheckoutReturnsChargedAmount stamp: 'CJ 11/21/2020 18:25:45'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'CJ 11/21/2020 18:31:02' prior: 50955702!
checkout: aCart withCreditCard: aCreditCard 

	| total |
	self assertCartNotEmpty: aCart.
	
	total := aCart totalItemCost.
	merchantProcessor debit: total from: aCreditCard.
	
	^ total.! !
!Cashier methodsFor: 'checkout' stamp: 'CJ 11/21/2020 18:31:12' prior: 50955724!
checkout: aCart withCreditCard: aCreditCard 

	| total |

	self assertCartNotEmpty: aCart.
	
	total := aCart totalItemCost.
	merchantProcessor debit: total from: aCreditCard.
	
	^ total.! !

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/21/2020 18:31:14'!
PASSED!

!testRun: #CashierTest #test02CheckoutReturnsChargedAmount stamp: 'CJ 11/21/2020 18:31:14'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 18:31:14'!
FAILURE!

!testRun: #CashierTest #test02CheckoutReturnsChargedAmount stamp: 'CJ 11/21/2020 18:31:17'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/21/2020 18:31:50' prior: 50955551!
test02CheckoutReturnsChargedAmount

	| cart cashier amount |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self defaultCart.
	
	amount := cashier checkout: cart withCreditCard: self defaultCreditCard.

	self assert: 125 equals: amount value.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/21/2020 18:32:05' prior: 50955754!
test02CheckoutReturnsChargedAmount

	"| cart cashier amount |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self defaultCart.
	
	amount := cashier checkout: cart withCreditCard: self defaultCreditCard.

	self assert: 125 equals: amount value."! !

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/21/2020 18:32:08'!
PASSED!

!testRun: #CashierTest #test02CheckoutReturnsChargedAmount stamp: 'CJ 11/21/2020 18:32:08'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 18:32:08'!
FAILURE!

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 18:32:08'!
FAILURE!

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/21/2020 18:32:30'!
PASSED!

!testRun: #CashierTest #test02CheckoutReturnsChargedAmount stamp: 'CJ 11/21/2020 18:32:30'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 18:32:30'!
FAILURE!

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 18:32:30'!
FAILURE!
!MerchantProcessorSimulator methodsFor: 'processing' stamp: 'CJ 11/21/2020 18:33:03'!
debit: aSmallInteger from: aCreditCard 
	self shouldBeImplemented.! !
!MerchantProcessorSimulator methodsFor: 'processing' stamp: 'CJ 11/21/2020 18:33:29' prior: 50955800!
debit: amount from: aCreditCard 
	
	self error: MerchantProcessor expiredCardErrorDescription.! !

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 18:33:38'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/21/2020 18:33:43'!
PASSED!

!testRun: #CashierTest #test02CheckoutReturnsChargedAmount stamp: 'CJ 11/21/2020 18:33:43'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 18:33:43'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/21/2020 18:34:37' prior: 50955766!
test02CheckoutReturnsChargedAmount

	| cart cashier amount |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self defaultCart.
	
	amount := cashier checkout: cart withCreditCard: self defaultCreditCard.

	self assert: 125 equals: amount value.! !

!testRun: #CashierTest #test02CheckoutReturnsChargedAmount stamp: 'CJ 11/21/2020 18:34:47'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/21/2020 18:35:09'!
workingMerchantProcessor
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'support' stamp: 'CJ 11/21/2020 18:35:21' prior: 50955838!
workingMerchantProcessor
	
	^ MerchantProcessorSimulator new.! !

!testRun: #CashierTest #test02CheckoutReturnsChargedAmount stamp: 'CJ 11/21/2020 18:35:23'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/21/2020 18:38:03' prior: 50955843!
workingMerchantProcessor
	
	^ MerchantProcessorSimulator working.! !

!testRun: #CashierTest #test02CheckoutReturnsChargedAmount stamp: 'CJ 11/21/2020 18:38:12'!
ERROR!
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/21/2020 18:38:18'!
working
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWorking! !

!classDefinition: #WorkingMerchantProcessorSimulator category: '20-TusLibros' stamp: 'CJ 11/21/2020 18:38:53'!
MerchantProcessorSimulator subclass: #WorkingMerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/21/2020 18:38:40' prior: 50955860!
working
	
	^ WorkingMerchantProcessorSimulator new.! !

!testRun: #CashierTest #test02CheckoutReturnsChargedAmount stamp: 'CJ 11/21/2020 18:38:56'!
ERROR!
!WorkingMerchantProcessorSimulator methodsFor: 'nil' stamp: 'CJ 11/21/2020 18:39:34' overrides: 50955806!
debit: amount from: aCreditCard! !

!testRun: #CashierTest #test02CheckoutReturnsChargedAmount stamp: 'CJ 11/21/2020 18:39:39'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/21/2020 18:39:39'!
PASSED!

!testRun: #CashierTest #test02CheckoutReturnsChargedAmount stamp: 'CJ 11/21/2020 18:39:39'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 18:39:39'!
PASSED!

MerchantProcessorSimulator subclass: #ExpiredCardMerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classDefinition: #ExpiredCardMerchantProcessorSimulator category: '20-TusLibros' stamp: 'CJ 11/21/2020 18:40:40'!
MerchantProcessorSimulator subclass: #ExpiredCardMerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!ExpiredCardMerchantProcessorSimulator methodsFor: 'nil' stamp: 'CJ 11/21/2020 18:41:04' overrides: 50955806!
debit: amount from: aCreditCard 
	
	self error: MerchantProcessor expiredCardErrorDescription.! !
!MerchantProcessorSimulator methodsFor: 'processing' stamp: 'CJ 11/21/2020 18:41:14' prior: 50955806!
debit: amount from: aCreditCard 
	
	self subclassResponsibility ! !

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/21/2020 18:41:18'!
PASSED!

!testRun: #CashierTest #test02CheckoutReturnsChargedAmount stamp: 'CJ 11/21/2020 18:41:18'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 18:41:18'!
FAILURE!

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 18:41:18'!
FAILURE!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/21/2020 18:41:44' prior: 50955661!
expiredCardMerchantProcessor
	
	^ MerchantProcessorSimulator expiredCard.! !

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 18:41:59'!
FAILURE!
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/21/2020 18:42:20'!
expired
	
	^ ExpiredCardMerchantProcessorSimulator new.! !

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/21/2020 18:42:27'!
PASSED!

!testRun: #CashierTest #test02CheckoutReturnsChargedAmount stamp: 'CJ 11/21/2020 18:42:27'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 18:42:27'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 18:42:27'!
ERROR!
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/21/2020 18:42:41'!
expiredCard
	
	^ ExpiredCardMerchantProcessorSimulator new.! !

!methodRemoval: MerchantProcessorSimulator class #expired stamp: 'CJ 11/21/2020 18:42:41'!
expired
	
	^ ExpiredCardMerchantProcessorSimulator new.!

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/21/2020 18:42:45'!
PASSED!

!testRun: #CashierTest #test02CheckoutReturnsChargedAmount stamp: 'CJ 11/21/2020 18:42:45'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'CJ 11/21/2020 18:42:45'!
PASSED!

!methodRemoval: CashierTest #expiredCardMerchantProcessor stamp: 'CJ 11/22/2020 16:48:53'!
expiredCardMerchantProcessor
	
	^ MerchantProcessorSimulator expiredCard.!

!methodRemoval: MerchantProcessorSimulator class #expiredCard stamp: 'CJ 11/22/2020 16:49:08'!
expiredCard
	
	^ ExpiredCardMerchantProcessorSimulator new.!

!classRemoval: #ExpiredCardMerchantProcessorSimulator stamp: 'CJ 11/22/2020 16:49:16'!
MerchantProcessorSimulator subclass: #ExpiredCardMerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!methodRemoval: CashierTest #test03 stamp: 'CJ 11/22/2020 16:50:57'!
test03

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self expiredCardMerchantProcessor.
	cart := self defaultCart.
	
	self
		should: [ cashier checkout: cart withCreditCard: self defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor expiredCardErrorDescription.!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 16:51:18'!
test03CheckoutReturnsChargedAmount

	| cart cashier amount |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self defaultCart.
	
	amount := cashier checkout: cart withCreditCard: self defaultCreditCard.

	self assert: 125 equals: amount value.! !

!methodRemoval: CashierTest #test02CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 16:51:18'!
test02CheckoutReturnsChargedAmount

	| cart cashier amount |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self defaultCart.
	
	amount := cashier checkout: cart withCreditCard: self defaultCreditCard.

	self assert: 125 equals: amount value.!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 16:52:19'!
test02NewCashierHasNoPurchases

	| cart cashier |
	
	cashier := Cashier new.
	cart := self emptyCart.
	
	self
		should: [ cashier checkout: cart ]
		raise: Error
		withMessageText: Cashier emptyCartErrorDescription.
		! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 16:52:57' prior: 50956035!
test02NewCashierHasNoPurchases

	| cart cashier |
	
	cashier := Cashier new.
	
	"self assert: "! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 16:53:39' prior: 50955282!
test01CannotCheckoutOnEmptyCart

	| cart cashier |
	
	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self emptyCart.
	
	self
		should: [ cashier checkout: cart ]
		raise: Error
		withMessageText: Cashier emptyCartErrorDescription.
		! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 16:55:08'!
defaultCashier

	^ Cashier withMerchantProcessor: self workingMerchantProcessor! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 16:55:08' prior: 50956051!
test01CannotCheckoutOnEmptyCart

	| cart cashier |
	
	cashier := self defaultCashier.
	cart := self emptyCart.
	
	self
		should: [ cashier checkout: cart ]
		raise: Error
		withMessageText: Cashier emptyCartErrorDescription.
		! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 16:53:39' prior: 50956068!
test01CannotCheckoutOnEmptyCart

	| cart cashier |
	
	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self emptyCart.
	
	self
		should: [ cashier checkout: cart ]
		raise: Error
		withMessageText: Cashier emptyCartErrorDescription.
		! !

!methodRemoval: CashierTest #defaultCashier stamp: 'CJ 11/22/2020 16:55:39'!
defaultCashier

	^ Cashier withMerchantProcessor: self workingMerchantProcessor!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 16:56:07' prior: 50956045!
test02NewCashierHasNoPurchases

	| cashier |
	
	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	
	"self assert: "! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 16:56:53' prior: 50956095!
test02NewCashierHasNoPurchases

	| cashier |
	
	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	
	self assert: 0 equals: cashier numberOfSales.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 16:56:59'!
test02NewCashierHasNoSales

	| cashier |
	
	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	
	self assert: 0 equals: cashier numberOfSales.! !

!methodRemoval: CashierTest #test02NewCashierHasNoPurchases stamp: 'CJ 11/22/2020 16:57:07'!
test02NewCashierHasNoPurchases

	| cashier |
	
	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	
	self assert: 0 equals: cashier numberOfSales.!

!testRun: #CashierTest #test02NewCashierHasNoSales stamp: 'CJ 11/22/2020 16:57:10'!
ERROR!
!Cashier methodsFor: 'accessing' stamp: 'CJ 11/22/2020 16:57:27'!
numberOfSales
	self shouldBeImplemented.! !
!Cashier methodsFor: 'accessing' stamp: 'CJ 11/22/2020 16:57:33' prior: 50956130!
numberOfSales
	
	^ 1! !

!testRun: #CashierTest #test02NewCashierHasNoSales stamp: 'CJ 11/22/2020 16:57:34'!
FAILURE!
!Cashier methodsFor: 'accessing' stamp: 'CJ 11/22/2020 16:57:43' prior: 50956134!
numberOfSales
	
	^ 0! !

!testRun: #CashierTest #test02NewCashierHasNoSales stamp: 'CJ 11/22/2020 16:57:46'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/22/2020 16:57:46'!
PASSED!

!testRun: #CashierTest #test02NewCashierHasNoSales stamp: 'CJ 11/22/2020 16:57:46'!
PASSED!

!testRun: #CashierTest #test03CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 16:57:46'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 16:58:40'!
test03CashierRegistersSaleOnCheckout

	| cart cashier amount |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self defaultCart.
	
	amount := cashier checkout: cart withCreditCard: self defaultCreditCard.

	self assert: 125 equals: amount value.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 16:58:58'!
test99CheckoutReturnsChargedAmount

	| cart cashier amount |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self defaultCart.
	
	amount := cashier checkout: cart withCreditCard: self defaultCreditCard.

	self assert: 125 equals: amount value.! !

!methodRemoval: CashierTest #test03CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 16:58:58'!
test03CheckoutReturnsChargedAmount

	| cart cashier amount |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self defaultCart.
	
	amount := cashier checkout: cart withCreditCard: self defaultCreditCard.

	self assert: 125 equals: amount value.!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 16:59:26' prior: 50956156!
test03CashierRegistersSaleOnCheckout

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self defaultCart.
	
	cashier checkout: cart withCreditCard: self defaultCreditCard.

	self assert: 1 equals: cashier numberOfSales.! !

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 16:59:52'!
FAILURE!

!classDefinition: #Cashier category: '20-TusLibros' stamp: 'CJ 11/22/2020 17:00:47'!
Object subclass: #Cashier
	instanceVariableNames: 'priceList merchantProcessor salesMade'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!Cashier methodsFor: 'checkout' stamp: 'CJ 11/22/2020 17:00:45' prior: 50955733!
checkout: aCart withCreditCard: aCreditCard 

	| total |

	self assertCartNotEmpty: aCart.
	
	total := aCart totalItemCost.
	merchantProcessor debit: total from: aCreditCard.
	salesMade := salesMade + 1.
	
	^ total.! !

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 17:00:52'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/22/2020 17:00:52'!
PASSED!

!testRun: #CashierTest #test02NewCashierHasNoSales stamp: 'CJ 11/22/2020 17:00:52'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 17:00:52'!
ERROR!

!testRun: #CashierTest #test99CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 17:00:52'!
ERROR!

!methodRemoval: Cashier class #withPriceList: stamp: 'CJ 11/22/2020 17:01:38'!
withPriceList: aPriceList 
	^ self new initializeWithPriceList: aPriceList !

!methodRemoval: Cashier #initializeWithPriceList: stamp: 'CJ 11/22/2020 17:01:41'!
initializeWithPriceList: aPriceList
	priceList := aPriceList.!
!Cashier methodsFor: 'initialization' stamp: 'CJ 11/22/2020 17:02:10' overrides: 16896425!
initialize

	salesMade := 0.! !

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/22/2020 17:02:14'!
PASSED!

!testRun: #CashierTest #test02NewCashierHasNoSales stamp: 'CJ 11/22/2020 17:02:14'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 17:02:14'!
FAILURE!

!testRun: #CashierTest #test99CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 17:02:14'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 17:02:14'!
FAILURE!

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/22/2020 17:02:22'!
PASSED!

!testRun: #CashierTest #test02NewCashierHasNoSales stamp: 'CJ 11/22/2020 17:02:22'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 17:02:22'!
FAILURE!

!testRun: #CashierTest #test99CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 17:02:22'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 17:02:22'!
FAILURE!
!Cashier methodsFor: 'accessing' stamp: 'CJ 11/22/2020 17:02:32' prior: 50956141!
numberOfSales
	
	^ salesMade! !

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 17:02:35'!
PASSED!

!classDefinition: #Cashier category: '20-TusLibros' stamp: 'CJ 11/22/2020 17:02:46'!
Object subclass: #Cashier
	instanceVariableNames: 'priceList merchantProcessor numberOfSales'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'CJ 11/22/2020 17:02:46' prior: 50956214!
checkout: aCart withCreditCard: aCreditCard 

	| total |

	self assertCartNotEmpty: aCart.
	
	total := aCart totalItemCost.
	merchantProcessor debit: total from: aCreditCard.
	numberOfSales := numberOfSales + 1.
	
	^ total.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CJ 11/22/2020 17:02:46' prior: 50956249 overrides: 16896425!
initialize

	numberOfSales := 0.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CJ 11/22/2020 17:02:46' prior: 50956284!
numberOfSales
	
	^ numberOfSales! !

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/22/2020 17:02:52'!
PASSED!

!testRun: #CashierTest #test02NewCashierHasNoSales stamp: 'CJ 11/22/2020 17:02:52'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 17:02:52'!
PASSED!

!testRun: #CashierTest #test99CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 17:02:52'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 17:08:04'!
test04

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self defaultCart.
	
	cashier checkout: cart withCreditCard: self defaultCreditCard.

	self assert: 1 equals: cashier numberOfSales.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 17:08:14' prior: 50956330!
test04

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self expiredMerchantProcessor.
	cart := self defaultCart.
	
	cashier checkout: cart withCreditCard: self defaultCreditCard.

	self assert: 1 equals: cashier numberOfSales.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 17:08:21' prior: 50956341!
test04

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self expiredMerchantProcessor.
	cart := self defaultCart.
	
	cashier checkout: cart withCreditCard: self defaultCreditCard.

	self assert: 0 equals: cashier numberOfSales.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 17:10:57' prior: 50956352!
test04

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self insufficientFundsMerchantProcessor.
	cart := self defaultCart.

	self
		should: [ cashier checkout: cart withCreditCard: self defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor insufficientFundsErrorDescription.
	
	self assert: 0 equals: cashier numberOfSales.! !

!testRun: #CashierTest #test04 stamp: 'CJ 11/22/2020 17:11:04'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/22/2020 17:11:12'!
insufficientFundsMerchantProcessor
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'support' stamp: 'CJ 11/22/2020 17:11:24' prior: 50956379!
insufficientFundsMerchantProcessor
	
	^ MerchantProcessorSimulator insufficientFunds.! !

!testRun: #CashierTest #test04 stamp: 'CJ 11/22/2020 17:11:31'!
ERROR!
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/22/2020 17:11:38'!
insufficientFunds
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeInsufficientFunds! !

!classDefinition: #InsufficientFundsMerchantProcessorSimulator category: '20-TusLibros' stamp: 'CJ 11/22/2020 17:12:09'!
MerchantProcessorSimulator subclass: #InsufficientFundsMerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/22/2020 17:11:57' prior: 50956393!
insufficientFunds
	
	^ InsufficientFundsMerchantProcessorSimulator new.! !

!testRun: #CashierTest #test04 stamp: 'CJ 11/22/2020 17:12:11'!
ERROR!
!MerchantProcessor class methodsFor: 'error handling' stamp: 'CJ 11/22/2020 17:12:21'!
insufficientFundsErrorDescription
	self shouldBeImplemented.! !
!MerchantProcessor class methodsFor: 'error handling' stamp: 'CJ 11/22/2020 17:12:43' prior: 50956419!
insufficientFundsErrorDescription
	
	^ 'The provided credit card does not have enough funds to complete the transaction'! !

!testRun: #CashierTest #test04 stamp: 'CJ 11/22/2020 17:12:45'!
FAILURE!
!InsufficientFundsMerchantProcessorSimulator methodsFor: 'processing' stamp: 'CJ 11/22/2020 17:13:06' overrides: 50955924!
debit: aSmallInteger from: aCreditCard 
	self shouldBeImplemented.! !
!InsufficientFundsMerchantProcessorSimulator methodsFor: 'processing' stamp: 'CJ 11/22/2020 17:13:59' prior: 50956436 overrides: 50955924!
debit: amount from: aCreditCard 
	
	self error: MerchantProcessor insufficientFundsErrorDescription.! !

!testRun: #CashierTest #test04 stamp: 'CJ 11/22/2020 17:14:00'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/22/2020 17:14:00'!
PASSED!

!testRun: #CashierTest #test02NewCashierHasNoSales stamp: 'CJ 11/22/2020 17:14:00'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 17:14:00'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'CJ 11/22/2020 17:14:00'!
PASSED!

!testRun: #CashierTest #test99CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 17:14:00'!
PASSED!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/22/2020 17:20:25' prior: 50955398!
defaultCreditCard
	
	^ CreditCard
		withNumber: '751111'
		ownedBy: 'Norbert Degoas'
		expiringOn: (self futureDate).! !

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/22/2020 17:20:28'!
PASSED!

!testRun: #CashierTest #test02NewCashierHasNoSales stamp: 'CJ 11/22/2020 17:20:28'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 17:20:28'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'CJ 11/22/2020 17:20:28'!
FAILURE!

!testRun: #CashierTest #test99CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 17:20:28'!
ERROR!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 17:20:30'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/22/2020 17:20:38'!
futureDate
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'support' stamp: 'CJ 11/22/2020 17:21:08' prior: 50956490!
futureDate

	| today |
	today := GregorianDate today.! !
!CashierTest methodsFor: 'support' stamp: 'CJ 11/22/2020 17:21:50' prior: 50956494!
futureDate

	| today |

	today := GregorianDate today.
	^ December of: today year + 1.! !

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 17:21:58'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/22/2020 17:24:49' prior: 50956499!
futureDate

	| currentYear |

	currentYear := GregorianDate today.
	^ December of: currentYear year + 1.! !
!CashierTest methodsFor: 'support' stamp: 'CJ 11/22/2020 17:25:35' prior: 50956508!
futureDate

	^ December of: GregorianYear current + 1.! !

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 17:25:38'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/22/2020 17:26:34' prior: 50956514!
futureDate

	^ December of: GregorianYear current next.! !

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 17:26:35'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/22/2020 17:30:34' prior: 50956522!
futureDate

	^ GregorianMonthOfYear decemberOf: GregorianYear current next! !

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 17:30:36'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/22/2020 17:30:44'!
PASSED!

!testRun: #CashierTest #test02NewCashierHasNoSales stamp: 'CJ 11/22/2020 17:30:44'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 17:30:44'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'CJ 11/22/2020 17:30:44'!
PASSED!

!testRun: #CashierTest #test99CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 17:30:44'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 17:31:27'!
test04CheckoutWithInsufficientFundsIsRejected

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self insufficientFundsMerchantProcessor.
	cart := self defaultCart.

	self
		should: [ cashier checkout: cart withCreditCard: self defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor insufficientFundsErrorDescription.
	
	self assert: 0 equals: cashier numberOfSales.! !

!methodRemoval: CashierTest #test04 stamp: 'CJ 11/22/2020 17:31:27'!
test04

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self insufficientFundsMerchantProcessor.
	cart := self defaultCart.

	self
		should: [ cashier checkout: cart withCreditCard: self defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor insufficientFundsErrorDescription.
	
	self assert: 0 equals: cashier numberOfSales.!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 17:31:39'!
test05

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self insufficientFundsMerchantProcessor.
	cart := self defaultCart.

	self
		should: [ cashier checkout: cart withCreditCard: self defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor insufficientFundsErrorDescription.
	
	self assert: 0 equals: cashier numberOfSales.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 17:31:45' prior: 50956581!
test05

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self defaultCart.

	self
		should: [ cashier checkout: cart withCreditCard: self defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor insufficientFundsErrorDescription.
	
	self assert: 0 equals: cashier numberOfSales.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 17:32:25' prior: 50956595!
test05

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self defaultCart.

	self
		should: [ cashier checkout: cart withCreditCard: self expiredCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor insufficientFundsErrorDescription.
	
	self assert: 0 equals: cashier numberOfSales.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 17:32:51' prior: 50956609!
test05

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self defaultCart.

	self
		should: [ cashier checkout: cart withCreditCard: self expiredCreditCard. ]
		raise: Error
		withMessageText: Cashier expiredCreditCardErrorDescription.
	
	self assert: 0 equals: cashier numberOfSales.! !

!testRun: #CashierTest #test05 stamp: 'CJ 11/22/2020 17:32:59'!
ERROR!
!Cashier class methodsFor: 'error descriptions' stamp: 'CJ 11/22/2020 17:33:12'!
expiredCreditCardErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error descriptions' stamp: 'CJ 11/22/2020 17:33:26' prior: 50956639!
expiredCreditCardErrorDescription
	
	^ 'Cannot perform checkout with an expired credit card'! !

!testRun: #CashierTest #test05 stamp: 'CJ 11/22/2020 17:33:28'!
FAILURE!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/22/2020 17:33:53'!
expiredCreditCard
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'support' stamp: 'CJ 11/22/2020 17:34:09' prior: 50956653!
expiredCreditCard
	
	^ CreditCard ! !

!testRun: #CashierTest #test05 stamp: 'CJ 11/22/2020 17:34:10'!
FAILURE!

!methodRemoval: CashierTest #expiredCreditCard stamp: 'CJ 11/22/2020 17:34:22'!
expiredCreditCard
	
	^ CreditCard !
!CashierTest methodsFor: 'support' stamp: 'CJ 11/22/2020 17:34:35'!
expiredCreditCard
	
	^ CreditCard
		withNumber: '751111'
		ownedBy: 'Norbert Degoas'
		expiringOn: (self pastDate).! !
!CashierTest methodsFor: 'support' stamp: 'CJ 11/22/2020 17:35:14'!
pastDate

	^ GregorianMonthOfYear decemberOf: GregorianYear current previous! !
!CashierTest methodsFor: 'support' stamp: 'CJ 11/22/2020 17:41:12'!
dateForNonExpired

	^ GregorianMonthOfYear decemberOf: GregorianYear current next! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/22/2020 17:41:12' prior: 50956466!
defaultCreditCard
	
	^ CreditCard
		withNumber: '751111'
		ownedBy: 'Norbert Degoas'
		expiringOn: (self dateForNonExpired).! !

!methodRemoval: CashierTest #futureDate stamp: 'CJ 11/22/2020 17:41:12'!
futureDate

	^ GregorianMonthOfYear decemberOf: GregorianYear current next!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/22/2020 17:41:31'!
dateForExpired

	^ GregorianMonthOfYear decemberOf: GregorianYear current previous! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/22/2020 17:41:31' prior: 50956668!
expiredCreditCard
	
	^ CreditCard
		withNumber: '751111'
		ownedBy: 'Norbert Degoas'
		expiringOn: (self dateForExpired).! !

!methodRemoval: CashierTest #pastDate stamp: 'CJ 11/22/2020 17:41:31'!
pastDate

	^ GregorianMonthOfYear decemberOf: GregorianYear current previous!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/22/2020 17:44:45' prior: 50956679!
dateForNonExpired

	^ GregorianMonthOfYear year: GregorianYear current month: GregorianMonth current! !

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/22/2020 17:44:47'!
PASSED!

!testRun: #CashierTest #test02NewCashierHasNoSales stamp: 'CJ 11/22/2020 17:44:47'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 17:44:47'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/22/2020 17:44:47'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'CJ 11/22/2020 17:44:47'!
FAILURE!

!testRun: #CashierTest #test99CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 17:44:47'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'CJ 11/22/2020 17:44:47'!
FAILURE!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/22/2020 17:45:05' prior: 50956696!
dateForExpired

	^ GregorianMonthOfYear year: GregorianYear current previous month: GregorianMonth current! !
!CashierTest methodsFor: 'support' stamp: 'CJ 11/22/2020 17:45:09' prior: 50956741!
dateForExpired

	^ GregorianMonthOfYear year: GregorianYear current month: GregorianMonth current previous! !

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/22/2020 17:45:11'!
PASSED!

!testRun: #CashierTest #test02NewCashierHasNoSales stamp: 'CJ 11/22/2020 17:45:11'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 17:45:11'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/22/2020 17:45:11'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'CJ 11/22/2020 17:45:11'!
FAILURE!

!testRun: #CashierTest #test99CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 17:45:11'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'CJ 11/22/2020 17:45:11'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 17:45:47' prior: 50956078!
test01CannotCheckoutOnEmptyCart

	| cart cashier |
	
	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self emptyCart.
	
	self
		should: [ cashier checkout: cart withCreditCard: self defaultCreditCard ]
		raise: Error
		withMessageText: Cashier emptyCartErrorDescription.
		! !

!methodRemoval: Cashier #checkout: stamp: 'CJ 11/22/2020 17:45:53'!
checkout: aCart

	self assertCartNotEmpty: aCart.

	^ aCart totalItemCost.!
!Cashier methodsFor: 'checkout' stamp: 'CJ 11/22/2020 17:46:41' prior: 50956299!
checkout: aCart withCreditCard: aCreditCard 

	| total |

	self assertCartNotEmpty: aCart.
	self assertCreditCardNotExpired: aCreditCard.
	
	total := aCart totalItemCost.
	merchantProcessor debit: total from: aCreditCard.
	numberOfSales := numberOfSales + 1.
	
	^ total.! !

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/22/2020 17:46:44'!
PASSED!

!testRun: #CashierTest #test02NewCashierHasNoSales stamp: 'CJ 11/22/2020 17:46:44'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 17:46:44'!
ERROR!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/22/2020 17:46:44'!
FAILURE!

!testRun: #CashierTest #test05 stamp: 'CJ 11/22/2020 17:46:44'!
FAILURE!

!testRun: #CashierTest #test99CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 17:46:44'!
ERROR!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 17:46:46'!
ERROR!
!Cashier methodsFor: 'assertions' stamp: 'CJ 11/22/2020 17:46:53'!
assertCreditCardNotExpired: aCreditCard 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'assertions' stamp: 'CJ 11/22/2020 17:53:29' prior: 50956824!
assertCreditCardNotExpired: aCreditCard 
	
	aCreditCard isExpired ifTrue: [ self error: self class expiredCreditCardErrorDescription ].! !

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 17:53:35'!
ERROR!
!CreditCard methodsFor: 'testing' stamp: 'CJ 11/22/2020 17:53:43'!
isExpired
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'testing' stamp: 'CJ 11/22/2020 17:54:53' prior: 50956839!
isExpired
	
	^ validUntil >= FixedGregorianDate today! !

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 17:54:55'!
ERROR!
!Cashier methodsFor: 'assertions' stamp: 'CJ 11/22/2020 17:56:09' prior: 50954600!
assertCartNotEmpty: aCart

	aCart isEmpty ifTrue: [ self error: self class emptyCartErrorDescription. ]! !
!Cashier methodsFor: 'assertions' stamp: 'CJ 11/22/2020 17:56:16' prior: 50956851!
assertCartNotEmpty: aCart

	aCart isEmpty ifTrue: [ self error: self class emptyCartErrorDescription ].! !
!CreditCard methodsFor: 'testing' stamp: 'CJ 11/22/2020 17:57:31' prior: 50956843!
isExpired
	
	^ validUntil >= (GregorianMonthOfYear year: GregorianYear current month: GregorianMonth current)! !

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/22/2020 17:58:39'!
PASSED!

!testRun: #CashierTest #test02NewCashierHasNoSales stamp: 'CJ 11/22/2020 17:58:39'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 17:58:39'!
ERROR!

!testRun: #CashierTest #test99CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 17:58:39'!
ERROR!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/22/2020 17:58:39'!
FAILURE!

!testRun: #CashierTest #test05 stamp: 'CJ 11/22/2020 17:58:39'!
FAILURE!

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/22/2020 17:58:40'!
PASSED!

!testRun: #CashierTest #test02NewCashierHasNoSales stamp: 'CJ 11/22/2020 17:58:40'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 17:58:40'!
ERROR!

!testRun: #CashierTest #test99CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 17:58:40'!
ERROR!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/22/2020 17:58:40'!
FAILURE!

!testRun: #CashierTest #test05 stamp: 'CJ 11/22/2020 17:58:40'!
FAILURE!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 17:58:41'!
ERROR!
!CreditCard methodsFor: 'testing' stamp: 'CJ 11/22/2020 18:00:08' prior: 50956863!
isExpired
	
	^ validUntil < (GregorianMonthOfYear year: GregorianYear current month: GregorianMonth current)! !

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/22/2020 18:00:15'!
PASSED!

!testRun: #CashierTest #test02NewCashierHasNoSales stamp: 'CJ 11/22/2020 18:00:15'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 18:00:15'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/22/2020 18:00:15'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'CJ 11/22/2020 18:00:15'!
PASSED!

!testRun: #CashierTest #test99CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 18:00:15'!
PASSED!
!CreditCard methodsFor: 'testing' stamp: 'CJ 11/22/2020 18:00:27' prior: 50956909!
isExpired
	
	^ validUntil < GregorianDate today! !

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/22/2020 18:00:30'!
PASSED!

!testRun: #CashierTest #test02NewCashierHasNoSales stamp: 'CJ 11/22/2020 18:00:30'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 18:00:30'!
ERROR!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/22/2020 18:00:30'!
FAILURE!

!testRun: #CashierTest #test05 stamp: 'CJ 11/22/2020 18:00:30'!
FAILURE!

!testRun: #CashierTest #test99CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 18:00:30'!
ERROR!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 18:00:33'!
ERROR!
!CreditCard methodsFor: 'testing' stamp: 'CJ 11/22/2020 18:00:50' prior: 50956934!
isExpired
	
	^ validUntil < FixedGregorianDate today! !

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/22/2020 18:00:52'!
PASSED!

!testRun: #CashierTest #test02NewCashierHasNoSales stamp: 'CJ 11/22/2020 18:00:52'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 18:00:52'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/22/2020 18:00:52'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'CJ 11/22/2020 18:00:52'!
PASSED!

!testRun: #CashierTest #test99CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 18:00:52'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/22/2020 18:01:06'!
PASSED!

!testRun: #CashierTest #test02NewCashierHasNoSales stamp: 'CJ 11/22/2020 18:01:06'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 18:01:06'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/22/2020 18:01:06'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'CJ 11/22/2020 18:01:06'!
PASSED!

!testRun: #CashierTest #test99CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 18:01:06'!
PASSED!
!CreditCard methodsFor: 'testing' stamp: 'CJ 11/22/2020 18:00:08' prior: 50956960!
isExpired
	
	^ validUntil < (GregorianMonthOfYear year: GregorianYear current month: GregorianMonth current)! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 18:01:53'!
test05CheckoutWithExpiredCreditCardIsRejected

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self defaultCart.

	self
		should: [ cashier checkout: cart withCreditCard: self expiredCreditCard. ]
		raise: Error
		withMessageText: Cashier expiredCreditCardErrorDescription.
	
	self assert: 0 equals: cashier numberOfSales.! !

!methodRemoval: CashierTest #test05 stamp: 'CJ 11/22/2020 18:01:53'!
test05

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self defaultCart.

	self
		should: [ cashier checkout: cart withCreditCard: self expiredCreditCard. ]
		raise: Error
		withMessageText: Cashier expiredCreditCardErrorDescription.
	
	self assert: 0 equals: cashier numberOfSales.!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 18:02:01'!
test01NewCashierHasNoSales

	| cashier |
	
	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	
	self assert: 0 equals: cashier numberOfSales.! !

!methodRemoval: CashierTest #test02NewCashierHasNoSales stamp: 'CJ 11/22/2020 18:02:01'!
test02NewCashierHasNoSales

	| cashier |
	
	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	
	self assert: 0 equals: cashier numberOfSales.!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 18:02:07'!
test02CannotCheckoutOnEmptyCart

	| cart cashier |
	
	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self emptyCart.
	
	self
		should: [ cashier checkout: cart withCreditCard: self defaultCreditCard ]
		raise: Error
		withMessageText: Cashier emptyCartErrorDescription.
		! !

!methodRemoval: CashierTest #test01CannotCheckoutOnEmptyCart stamp: 'CJ 11/22/2020 18:02:07'!
test01CannotCheckoutOnEmptyCart

	| cart cashier |
	
	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self emptyCart.
	
	self
		should: [ cashier checkout: cart withCreditCard: self defaultCreditCard ]
		raise: Error
		withMessageText: Cashier emptyCartErrorDescription.
		!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 18:02:42' prior: 50957050!
test02CannotCheckoutOnEmptyCart

	| cart cashier |
	
	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self emptyCart.
	
	self
		should: [ cashier checkout: cart withCreditCard: self defaultCreditCard ]
		raise: Error
		withMessageText: Cashier emptyCartErrorDescription.
	
	self assert: 0 equals: cashier numberOfSales.! !

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/22/2020 18:02:51'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/22/2020 18:02:51'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/22/2020 18:02:51'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 18:02:51'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/22/2020 18:02:51'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/22/2020 18:02:51'!
PASSED!

!testRun: #CashierTest #test99CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 18:02:51'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 18:10:06'!
test06CheckoutWithCancelledCreditCardIsRejected

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self defaultCart.

	self
		should: [ cashier checkout: cart withCreditCard: self expiredCreditCard. ]
		raise: Error
		withMessageText: Cashier expiredCreditCardErrorDescription.
	
	self assert: 0 equals: cashier numberOfSales.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 18:11:23' prior: 50957111!
test06CheckoutWithCancelledCreditCardIsRejected

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self cancelledCreditCardMerchantProcessor.
	cart := self defaultCart.

	self
		should: [ cashier checkout: cart withCreditCard: self defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor cancelledCreditCardErrorDescription.
	
	self assert: 0 equals: cashier numberOfSales.! !

!testRun: #CashierTest #test06CheckoutWithCancelledCreditCardIsRejected stamp: 'CJ 11/22/2020 18:11:29'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/22/2020 18:11:40'!
cancelledCreditCardMerchantProcessor
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'support' stamp: 'CJ 11/22/2020 18:11:56' prior: 50957145!
cancelledCreditCardMerchantProcessor
	
	^ MerchantProcessorSimulator cancelledCreditCard.! !

!testRun: #CashierTest #test06CheckoutWithCancelledCreditCardIsRejected stamp: 'CJ 11/22/2020 18:11:59'!
ERROR!
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/22/2020 18:12:42'!
cancelledCreditCard
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeCancelledCreditCard! !

!classDefinition: #CancelledCreditCardMerchantProcessorSimulator category: '20-TusLibros' stamp: 'CJ 11/22/2020 18:13:14'!
MerchantProcessorSimulator subclass: #CancelledCreditCardMerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/22/2020 18:13:03' prior: 50957160!
cancelledCreditCard

	^ CancelledCreditCardMerchantProcessorSimulator new.! !

!testRun: #CashierTest #test06CheckoutWithCancelledCreditCardIsRejected stamp: 'CJ 11/22/2020 18:13:16'!
ERROR!
!MerchantProcessor class methodsFor: 'error handling' stamp: 'CJ 11/22/2020 18:13:29'!
cancelledCreditCardErrorDescription
	self shouldBeImplemented.! !
!MerchantProcessor class methodsFor: 'error handling' stamp: 'CJ 11/22/2020 18:13:48' prior: 50957188!
cancelledCreditCardErrorDescription
	
	^ 'The provided credit card has been cancelled'! !

!testRun: #CashierTest #test06CheckoutWithCancelledCreditCardIsRejected stamp: 'CJ 11/22/2020 18:13:50'!
FAILURE!
!CancelledCreditCardMerchantProcessorSimulator methodsFor: 'processing' stamp: 'CJ 11/22/2020 18:14:25' overrides: 50955924!
debit: aSmallInteger from: aCreditCard 
	self shouldBeImplemented.! !
!CancelledCreditCardMerchantProcessorSimulator methodsFor: 'processing' stamp: 'CJ 11/22/2020 18:15:00' prior: 50957205 overrides: 50955924!
debit: amount from: aCreditCard 
	
	self error: MerchantProcessor cancelledCreditCardErrorDescription! !

!testRun: #CashierTest #test06CheckoutWithCancelledCreditCardIsRejected stamp: 'CJ 11/22/2020 18:15:02'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/22/2020 18:15:02'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/22/2020 18:15:02'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 18:15:02'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/22/2020 18:15:02'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/22/2020 18:15:02'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithCancelledCreditCardIsRejected stamp: 'CJ 11/22/2020 18:15:02'!
PASSED!

!testRun: #CashierTest #test99CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 18:15:02'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 18:17:08'!
test06CheckoutWithInvalidCreditCardIsRejected

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self cancelledCreditCardMerchantProcessor.
	cart := self defaultCart.

	self
		should: [ cashier checkout: cart withCreditCard: self defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor cancelledCreditCardErrorDescription.
	
	self assert: 0 equals: cashier numberOfSales.! !

!methodRemoval: CashierTest #test06CheckoutWithCancelledCreditCardIsRejected stamp: 'CJ 11/22/2020 18:17:08'!
test06CheckoutWithCancelledCreditCardIsRejected

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self cancelledCreditCardMerchantProcessor.
	cart := self defaultCart.

	self
		should: [ cashier checkout: cart withCreditCard: self defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor cancelledCreditCardErrorDescription.
	
	self assert: 0 equals: cashier numberOfSales.!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/22/2020 18:17:29'!
invalidCreditCardMerchantProcessor
	
	^ MerchantProcessorSimulator cancelledCreditCard.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/22/2020 18:17:29' prior: 50957244!
test06CheckoutWithInvalidCreditCardIsRejected

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self invalidCreditCardMerchantProcessor.
	cart := self defaultCart.

	self
		should: [ cashier checkout: cart withCreditCard: self defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor cancelledCreditCardErrorDescription.
	
	self assert: 0 equals: cashier numberOfSales.! !

!methodRemoval: CashierTest #cancelledCreditCardMerchantProcessor stamp: 'CJ 11/22/2020 18:17:29'!
cancelledCreditCardMerchantProcessor
	
	^ MerchantProcessorSimulator cancelledCreditCard.!
!MerchantProcessor class methodsFor: 'error handling' stamp: 'CJ 11/22/2020 18:18:10' prior: 50957194!
cancelledCreditCardErrorDescription
	
	^ 'The provided credit card is not valid'! !
!MerchantProcessor class methodsFor: 'error handling' stamp: 'CJ 11/22/2020 18:18:52'!
invalidCreditCardErrorDescription
	
	^ 'The provided credit card is not valid'! !
!CancelledCreditCardMerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'CJ 11/22/2020 18:18:52' prior: 50957212 overrides: 50955924!
debit: amount from: aCreditCard 
	
	self error: MerchantProcessor invalidCreditCardErrorDescription! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/22/2020 18:18:52' prior: 50957281!
test06CheckoutWithInvalidCreditCardIsRejected

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self invalidCreditCardMerchantProcessor.
	cart := self defaultCart.

	self
		should: [ cashier checkout: cart withCreditCard: self defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor invalidCreditCardErrorDescription.
	
	self assert: 0 equals: cashier numberOfSales.! !

!methodRemoval: MerchantProcessor class #cancelledCreditCardErrorDescription stamp: 'CJ 11/22/2020 18:18:52'!
cancelledCreditCardErrorDescription
	
	^ 'The provided credit card is not valid'!

!classRenamed: #CancelledCreditCardMerchantProcessorSimulator as: #InvalidCreditCardMerchantProcessorSimulator stamp: 'CJ 11/22/2020 18:20:09'!
Smalltalk renameClassNamed: #CancelledCreditCardMerchantProcessorSimulator as: #InvalidCreditCardMerchantProcessorSimulator!
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'CJ 11/22/2020 18:20:09' prior: 50957179!
cancelledCreditCard

	^ InvalidCreditCardMerchantProcessorSimulator new.! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/22/2020 18:20:29'!
invalidCreditCard

	^ InvalidCreditCardMerchantProcessorSimulator new.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/22/2020 18:20:29' prior: 50957275!
invalidCreditCardMerchantProcessor
	
	^ MerchantProcessorSimulator invalidCreditCard.! !

!methodRemoval: MerchantProcessorSimulator class #cancelledCreditCard stamp: 'CJ 11/22/2020 18:20:29'!
cancelledCreditCard

	^ InvalidCreditCardMerchantProcessorSimulator new.!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/22/2020 18:21:06'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/22/2020 18:21:06'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 18:21:06'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/22/2020 18:21:06'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/22/2020 18:21:06'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/22/2020 18:21:06'!
PASSED!

!testRun: #CashierTest #test99CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 18:21:06'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 18:21:46'!
test07CheckoutReturnsChargedAmount

	| cart cashier amount |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self defaultCart.
	
	amount := cashier checkout: cart withCreditCard: self defaultCreditCard.

	self assert: 125 equals: amount value.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 18:22:03' prior: 50957401!
test07CheckoutReturnsChargedAmount

	| cart cashier receipt |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self defaultCart.
	
	receipt := cashier checkout: cart withCreditCard: self defaultCreditCard.

	self assert: 125 equals: receipt value.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 18:24:08' prior: 50957413!
test07CheckoutReturnsChargedAmount

	| cart cashier receipt creditCard |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self defaultCart.
	creditCard := self defaultCreditCard.
	
	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assert: 125 equals: receipt value.
	self assert: creditCard ownerName equals: receipt madeTo.! !

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 18:24:16'!
ERROR!
!CreditCard methodsFor: 'accessing' stamp: 'CJ 11/22/2020 18:24:23'!
ownerName
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'accessing' stamp: 'CJ 11/22/2020 18:24:30' prior: 50957443!
ownerName
	
	^ name! !

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 18:24:35'!
ERROR!

!classDefinition: #Receipt category: '20-TusLibros' stamp: 'CJ 11/22/2020 18:25:25'!
Object subclass: #Receipt
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!Cashier methodsFor: 'checkout' stamp: 'CJ 11/22/2020 18:25:18' prior: 50956792!
checkout: aCart withCreditCard: aCreditCard 

	| total |

	self assertCartNotEmpty: aCart.
	self assertCreditCardNotExpired: aCreditCard.
	
	total := aCart totalItemCost.
	merchantProcessor debit: total from: aCreditCard.
	numberOfSales := numberOfSales + 1.
	
	^ Receipt madeTo: 'Norbert Degoas' for: total.! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/22/2020 18:25:38'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/22/2020 18:25:38'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 18:25:38'!
ERROR!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/22/2020 18:25:38'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/22/2020 18:25:38'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/22/2020 18:25:38'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 18:25:38'!
ERROR!

!testRun: #CashierTest #test99CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 18:25:38'!
ERROR!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 18:25:40'!
ERROR!
!Receipt class methodsFor: 'instance creation' stamp: 'CJ 11/22/2020 18:25:49'!
madeTo: aString for: aSmallInteger 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeMadeTo: aString for: aSmallInteger ! !
!Receipt class methodsFor: 'instance creation' stamp: 'CJ 11/22/2020 18:26:58' prior: 50957502!
madeTo: cardOwnerName for: amount 
	
	^self new initializeMadeTo: cardOwnerName for: amount ! !

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 18:27:00'!
ERROR!

!classDefinition: #Receipt category: '20-TusLibros' stamp: 'CJ 11/22/2020 18:27:18'!
Object subclass: #Receipt
	instanceVariableNames: 'cardOwnerName_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classDefinition: #Receipt category: '20-TusLibros' stamp: 'CJ 11/22/2020 18:27:19'!
Object subclass: #Receipt
	instanceVariableNames: 'cardOwnerName_CHANGE_ME amount_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!Receipt methodsFor: 'initialization' stamp: 'CJ 11/22/2020 18:27:19'!
initializeMadeTo: cardOwnerName for: amount 
	self shouldBeImplemented.
	cardOwnerName_CHANGE_ME := cardOwnerName.
	amount_CHANGE_ME := amount.! !

!classDefinition: #Receipt category: '20-TusLibros' stamp: 'CJ 11/22/2020 18:27:40'!
Object subclass: #Receipt
	instanceVariableNames: 'cardOwnerName_CHANGE_ME amount_CHANGE_ME name'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classDefinition: #Receipt category: '20-TusLibros' stamp: 'CJ 11/22/2020 18:27:41'!
Object subclass: #Receipt
	instanceVariableNames: 'cardOwnerName_CHANGE_ME amount_CHANGE_ME name amountCharged'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!Receipt methodsFor: 'initialization' stamp: 'CJ 11/22/2020 18:27:36' prior: 50957535!
initializeMadeTo: cardOwnerName for: amount 
	
	name := cardOwnerName.
	amountCharged := amount.! !

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/22/2020 18:28:01'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 18:28:03'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/22/2020 18:28:27' prior: 50957425!
test07CheckoutReturnsChargedAmount

	| cart cashier receipt creditCard |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self defaultCart.
	creditCard := self defaultCreditCard.
	
	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assert: 125 equals: receipt amountCharged.
	self assert: creditCard ownerName equals: receipt madeTo.! !

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 18:28:34'!
ERROR!
!Receipt methodsFor: 'accessing' stamp: 'CJ 11/22/2020 18:28:39'!
amountCharged
	self shouldBeImplemented.
	^amountCharged! !
!Receipt methodsFor: 'accessing' stamp: 'CJ 11/22/2020 18:28:42' prior: 50957590!
amountCharged
	
	^ amountCharged! !

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 18:28:43'!
ERROR!
!Receipt methodsFor: 'accessing' stamp: 'CJ 11/22/2020 18:28:48'!
madeTo
	self shouldBeImplemented.! !
!Receipt methodsFor: 'accessing' stamp: 'CJ 11/22/2020 18:28:52' prior: 50957602!
madeTo
	
	^ name! !

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 18:28:53'!
PASSED!

!testRun: #CashierTest #test99CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 18:28:56'!
FAILURE!

!methodRemoval: CashierTest #test99CheckoutReturnsChargedAmount stamp: 'CJ 11/22/2020 18:29:09'!
test99CheckoutReturnsChargedAmount

	| cart cashier amount |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self defaultCart.
	
	amount := cashier checkout: cart withCreditCard: self defaultCreditCard.

	self assert: 125 equals: amount value.!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/23/2020 14:09:21' prior: 50957572!
test07CheckoutReturnsChargedAmount

	| cart cashier receipt creditCard |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self defaultCart.
	creditCard := self defaultCreditCard.
	
	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assert: cart totalItemCost equals: receipt amountCharged.
	self assert: creditCard ownerName equals: receipt madeTo.! !

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:09:22'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/23/2020 14:09:22'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/23/2020 14:09:22'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/23/2020 14:09:22'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 14:09:22'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/23/2020 14:09:22'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/23/2020 14:09:22'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:09:22'!
PASSED!
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/23/2020 14:22:04' prior: 50956411!
insufficientFunds
	
	^ MerchantProcessorSimulator withAction: [ self error: MerchantProcessor insufficientFundsErrorDescription ].! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/23/2020 14:22:12'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/23/2020 14:22:12'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/23/2020 14:22:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 14:22:12'!
ERROR!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/23/2020 14:22:12'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/23/2020 14:22:12'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:22:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 14:22:12'!
ERROR!
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/23/2020 14:22:22'!
withAction: aBlockClosure 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithAction: aBlockClosure ! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/23/2020 14:22:49' prior: 50957705!
withAction: blockToRunOnDebitFrom 
	
	^self new initializeWithAction: blockToRunOnDebitFrom ! !

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 14:22:53'!
ERROR!

!classDefinition: #MerchantProcessorSimulator category: '20-TusLibros' stamp: 'CJ 11/23/2020 14:23:10'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'blockToRunOnDebitFrom_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!MerchantProcessorSimulator methodsFor: 'initialization' stamp: 'CJ 11/23/2020 14:23:10'!
initializeWithAction: blockToRunOnDebitFrom 
	self shouldBeImplemented.
	blockToRunOnDebitFrom_CHANGE_ME := blockToRunOnDebitFrom.! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/23/2020 14:23:51' prior: 50957715!
withAction: aBlockToRunOnDebitFrom 
	
	^self new initializeWithAction: aBlockToRunOnDebitFrom ! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/23/2020 14:24:11' prior: 50957742!
withAction: aBlockToRunOnDebitFrom 
	
	^ self new initializeWithAction: aBlockToRunOnDebitFrom ! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/23/2020 14:24:12'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/23/2020 14:24:12'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/23/2020 14:24:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 14:24:12'!
ERROR!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/23/2020 14:24:12'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/23/2020 14:24:12'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:24:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 14:24:12'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'initialization' stamp: 'CJ 11/23/2020 14:24:38' prior: 50957734!
initializeWithAction: aBlockToRunOnDebitFrom
	
	blockToRunOnDebitFrom_CHANGE_ME := aBlockToRunOnDebitFrom.! !

!classDefinition: #MerchantProcessorSimulator category: '20-TusLibros' stamp: 'CJ 11/23/2020 14:24:47'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'blockToRunOnDebitFrom_CHANGE_ME blockToRunOnDebitFrom'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!MerchantProcessorSimulator methodsFor: 'initialization' stamp: 'CJ 11/23/2020 14:24:45' prior: 50957782!
initializeWithAction: aBlockToRunOnDebitFrom
	
	blockToRunOnDebitFrom := aBlockToRunOnDebitFrom.! !

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 14:24:51'!
FAILURE!
!MerchantProcessorSimulator methodsFor: 'processing' stamp: 'CJ 11/23/2020 14:25:22' prior: 50955924!
debit: amount from: aCreditCard 
	
	blockToRunOnDebitFrom run.! !

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 14:25:24'!
FAILURE!
!MerchantProcessorSimulator methodsFor: 'processing' stamp: 'CJ 11/23/2020 14:25:34' prior: 50957809!
debit: amount from: aCreditCard 
	
	blockToRunOnDebitFrom value.! !

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 14:25:35'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/23/2020 14:25:37'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/23/2020 14:25:37'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/23/2020 14:25:37'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 14:25:37'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/23/2020 14:25:37'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/23/2020 14:25:37'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:25:37'!
PASSED!
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/23/2020 14:26:47' prior: 50957361!
invalidCreditCard

	^ MerchantProcessorSimulator withAction: [ self error: MerchantProcessor invalidCreditCardErrorDescription ].! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/23/2020 14:26:56'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/23/2020 14:26:56'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/23/2020 14:26:56'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 14:26:56'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/23/2020 14:26:56'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/23/2020 14:26:56'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:26:56'!
PASSED!
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/23/2020 14:27:02' prior: 50955877!
working
	
	^ WorkingMerchantProcessorSimulator withAction: [].! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/23/2020 14:27:05'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/23/2020 14:27:05'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/23/2020 14:27:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 14:27:05'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/23/2020 14:27:05'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/23/2020 14:27:05'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:27:05'!
PASSED!

!classRemoval: #InsufficientFundsMerchantProcessorSimulator stamp: 'CJ 11/23/2020 14:27:32'!
MerchantProcessorSimulator subclass: #InsufficientFundsMerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classRemoval: #InvalidCreditCardMerchantProcessorSimulator stamp: 'CJ 11/23/2020 14:27:35'!
MerchantProcessorSimulator subclass: #InvalidCreditCardMerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/23/2020 14:27:45' prior: 50957882!
working
	
	^ MerchantProcessorSimulator withAction: [].! !

!classRemoval: #WorkingMerchantProcessorSimulator stamp: 'CJ 11/23/2020 14:27:50'!
MerchantProcessorSimulator subclass: #WorkingMerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/23/2020 14:27:57'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/23/2020 14:27:57'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/23/2020 14:27:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 14:27:57'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/23/2020 14:27:57'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/23/2020 14:27:57'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:27:57'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/23/2020 14:29:53' prior: 50957628!
test07CheckoutReturnsChargedAmount

	| cart cashier receipt creditCard |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self defaultCart.
	creditCard := self defaultCreditCard.
	
	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assert: cart totalItemCost equals: receipt amountCharged.
	self assert: creditCard ownerName equals: receipt madeTo.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/23/2020 14:30:06' prior: 50957964!
test07CheckoutReturnsChargedAmount

	| cart cashier receipt creditCard |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self defaultCart.
	creditCard := self defaultCreditCard.
	
	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assert: cart totalItemCost equals: receipt amountCharged.
	self assert: creditCard ownerName equals: receipt madeTo.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/23/2020 14:33:54' prior: 50957980!
test07CheckoutReturnsChargedAmount

	| cart cashier receipt creditCard |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self defaultCart.
	creditCard := self defaultCreditCard.
	
	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assert: cart totalItemCost equals: receipt amountCharged.
	self assert: creditCard ownerName equals: receipt madeTo.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/23/2020 14:34:41' prior: 50957996!
test07CheckoutReturnsChargedAmount

	| cart cashier receipt creditCard items |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self defaultCart.
	creditCard := self defaultCreditCard.
	
	items := cart items.
	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assert: cart totalItemCost equals: receipt amountCharged.
	self assert: creditCard ownerName equals: receipt madeTo.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/23/2020 14:35:45' prior: 50958012!
test07CheckoutReturnsChargedAmount

	| cart cashier receipt creditCard items |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithOneItem.
	creditCard := self defaultCreditCard.
	
	items := cart items.
	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assert: cart totalItemCost equals: receipt amountCharged.
	self assert: creditCard ownerName equals: receipt madeTo.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/23/2020 14:36:04' prior: 50958029!
test07CheckoutReturnsChargedAmount

	| cart cashier receipt creditCard items catalog |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithOneItem.
	creditCard := self defaultCreditCard.
	
	items := cart items.
	catalog := cart catalog.
	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assert: cart totalItemCost equals: receipt amountCharged.
	self assert: creditCard ownerName equals: receipt madeTo.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/23/2020 14:37:02' prior: 50958046!
test07CheckoutReturnsChargedAmount

	| cart cashier receipt creditCard items catalog |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithOneItem.
	creditCard := self defaultCreditCard.
	
	items := cart items.
	catalog := cart catalog.
	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assert: cart totalItemCost equals: receipt amountCharged.
	self assert: (catalog at: items first) equals: receipt amountCharged.
	self assert: creditCard ownerName equals: receipt madeTo.! !

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:37:13'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/23/2020 14:37:23'!
cartWithOneItem
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'support' stamp: 'CJ 11/23/2020 14:38:15' prior: 50958087!
cartWithOneItem

	| catalog cart |

	catalog := self defaultCatalog.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: catalog keys first.

	^ cart.! !

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:38:26'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'CJ 11/23/2020 14:38:32'!
catalog
	self shouldBeImplemented.
	^catalog! !
!Cart methodsFor: 'accessing' stamp: 'CJ 11/23/2020 14:38:38' prior: 50958103!
catalog
	
	^ catalog copy! !

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:38:39'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/23/2020 14:38:39'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/23/2020 14:38:39'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/23/2020 14:38:39'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 14:38:40'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/23/2020 14:38:40'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/23/2020 14:38:40'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:38:40'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/23/2020 14:38:59'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/23/2020 14:38:59'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/23/2020 14:38:59'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 14:38:59'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/23/2020 14:38:59'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/23/2020 14:38:59'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:38:59'!
PASSED!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/23/2020 14:39:16'!
cartWithManyItems

	| catalog cart |

	catalog := self defaultCatalog.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: catalog keys first.
	cart add: 1 of: catalog keys second.

	^ cart.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/23/2020 14:39:16' prior: 50957324!
test06CheckoutWithInvalidCreditCardIsRejected

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self invalidCreditCardMerchantProcessor.
	cart := self cartWithManyItems.

	self
		should: [ cashier checkout: cart withCreditCard: self defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor invalidCreditCardErrorDescription.
	
	self assert: 0 equals: cashier numberOfSales.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/23/2020 14:39:16' prior: 50956191!
test03CashierRegistersSaleOnCheckout

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithManyItems.
	
	cashier checkout: cart withCreditCard: self defaultCreditCard.

	self assert: 1 equals: cashier numberOfSales.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/23/2020 14:39:16' prior: 50957007!
test05CheckoutWithExpiredCreditCardIsRejected

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithManyItems.

	self
		should: [ cashier checkout: cart withCreditCard: self expiredCreditCard. ]
		raise: Error
		withMessageText: Cashier expiredCreditCardErrorDescription.
	
	self assert: 0 equals: cashier numberOfSales.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/23/2020 14:39:16' prior: 50956553!
test04CheckoutWithInsufficientFundsIsRejected

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self insufficientFundsMerchantProcessor.
	cart := self cartWithManyItems.

	self
		should: [ cashier checkout: cart withCreditCard: self defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor insufficientFundsErrorDescription.
	
	self assert: 0 equals: cashier numberOfSales.! !

!methodRemoval: CashierTest #defaultCart stamp: 'CJ 11/23/2020 14:39:16'!
defaultCart

	| catalog cart |

	catalog := self defaultCatalog.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: catalog keys first.
	cart add: 1 of: catalog keys second.

	^ cart.!

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:39:59'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/23/2020 14:39:59'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/23/2020 14:39:59'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/23/2020 14:39:59'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 14:39:59'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/23/2020 14:39:59'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/23/2020 14:39:59'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:39:59'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/23/2020 14:40:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJ 11/23/2020 14:40:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJ 11/23/2020 14:40:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJ 11/23/2020 14:40:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSoldByTheStore stamp: 'CJ 11/23/2020 14:40:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CJ 11/23/2020 14:40:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJ 11/23/2020 14:40:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJ 11/23/2020 14:40:10'!
PASSED!

!testRun: #CartTest #test09CartCalculatesCostOfSingleItemCorrectly stamp: 'CJ 11/23/2020 14:40:10'!
PASSED!

!testRun: #CartTest #test10CartCalculatesCostOfManyItemsCorrectly stamp: 'CJ 11/23/2020 14:40:10'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/23/2020 14:40:10'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/23/2020 14:40:10'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/23/2020 14:40:10'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 14:40:10'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/23/2020 14:40:10'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/23/2020 14:40:10'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:40:10'!
PASSED!
!MerchantProcessorSimulator methodsFor: 'processing' stamp: 'CJ 11/23/2020 14:42:05' prior: 50957818!
debit: amount from: aCreditCard 
	
	^ blockToRunOnDebitFrom value.! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/23/2020 14:43:08' prior: 50957928!
working
	
	^ MerchantProcessorSimulator withAction: [ ^ 200 ].! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/23/2020 14:43:25'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/23/2020 14:43:25'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/23/2020 14:43:25'!
ERROR!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 14:43:25'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/23/2020 14:43:25'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/23/2020 14:43:25'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:43:25'!
ERROR!
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/23/2020 14:43:40' prior: 50958325!
working
	
	^ MerchantProcessorSimulator withAction: [ 200 ].! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/23/2020 14:43:41'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/23/2020 14:43:41'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/23/2020 14:43:41'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 14:43:41'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/23/2020 14:43:41'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/23/2020 14:43:41'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:43:41'!
PASSED!
!Cashier class methodsFor: 'instance creation' stamp: 'CJ 11/23/2020 14:43:54' prior: 50955623!
withMerchantProcessor: aMerchantProcessor 
	
	^ self new initializeWithMerchantProcessor: aMerchantProcessor ! !
!Cashier methodsFor: 'checkout' stamp: 'CJ 11/23/2020 14:44:37' prior: 50957460!
checkout: aCart withCreditCard: aCreditCard 

	| total transactionID |

	self assertCartNotEmpty: aCart.
	self assertCreditCardNotExpired: aCreditCard.
	
	total := aCart totalItemCost.
	transactionID := merchantProcessor debit: total from: aCreditCard.
	numberOfSales := numberOfSales + 1.
	
	^ Receipt madeTo: 'Norbert Degoas' for: total.! !
!Cashier methodsFor: 'checkout' stamp: 'CJ 11/23/2020 14:45:01' prior: 50958389!
checkout: aCart withCreditCard: aCreditCard 

	| total transactionID |

	self assertCartNotEmpty: aCart.
	self assertCreditCardNotExpired: aCreditCard.
	
	total := aCart totalItemCost.
	transactionID := merchantProcessor debit: total from: aCreditCard.
	numberOfSales := numberOfSales + 1.
	
	^ Receipt withID: transactionID madeTo: 'Norbert Degoas' for: total.! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/23/2020 14:45:04'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/23/2020 14:45:04'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/23/2020 14:45:04'!
ERROR!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 14:45:04'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/23/2020 14:45:04'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/23/2020 14:45:04'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:45:04'!
ERROR!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/23/2020 14:45:10'!
ERROR!
!Receipt class methodsFor: 'instance creation' stamp: 'CJ 11/23/2020 14:45:58'!
withID: aTransactionID madeTo: aCardOwnerName for: anAmount 
	
	^ self new initializeWithID: aTransactionID madeTo: aCardOwnerName for: anAmount ! !
!Receipt methodsFor: 'initialization' stamp: 'CJ 11/23/2020 14:46:20'!
initializeWithID: aTransactionID madeTo: aCardOwnerName for: anAmount 
	
	name := aCardOwnerName.
	amountCharged := anAmount.! !

!classDefinition: #Receipt category: '20-TusLibros' stamp: 'CJ 11/23/2020 14:46:31'!
Object subclass: #Receipt
	instanceVariableNames: 'cardOwnerName_CHANGE_ME amount_CHANGE_ME name amountCharged transactionID'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!Receipt methodsFor: 'initialization' stamp: 'CJ 11/23/2020 14:46:30' prior: 50958450!
initializeWithID: aTransactionID madeTo: aCardOwnerName for: anAmount 
	
	transactionID := aTransactionID.
	name := aCardOwnerName.
	amountCharged := anAmount.! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/23/2020 14:46:36'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/23/2020 14:46:36'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/23/2020 14:46:36'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 14:46:36'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/23/2020 14:46:36'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/23/2020 14:46:36'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:46:36'!
PASSED!
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/23/2020 14:48:16' prior: 50958354!
working
	
	^ MerchantProcessorSimulator withAction: [ self class defaultTransactionID ].! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/23/2020 14:48:27' prior: 50957671!
insufficientFunds
	
	^ MerchantProcessorSimulator withAction: [ self error: self class insufficientFundsErrorDescription ].! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/23/2020 14:48:31' prior: 50957851!
invalidCreditCard

	^ MerchantProcessorSimulator withAction: [ self error: self class invalidCreditCardErrorDescription ].! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/23/2020 14:48:35'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/23/2020 14:48:35'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/23/2020 14:48:35'!
ERROR!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 14:48:35'!
FAILURE!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/23/2020 14:48:35'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/23/2020 14:48:35'!
FAILURE!

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:48:35'!
ERROR!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/23/2020 14:48:36'!
ERROR!
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/23/2020 14:48:54' prior: 50958498!
working
	
	^ MerchantProcessorSimulator withAction: [ self defaultTransactionID ].! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/23/2020 14:48:56'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/23/2020 14:48:56'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/23/2020 14:48:56'!
ERROR!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 14:48:56'!
FAILURE!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/23/2020 14:48:56'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/23/2020 14:48:56'!
FAILURE!

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:48:56'!
ERROR!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/23/2020 14:48:58'!
ERROR!
!MerchantProcessorSimulator class methodsFor: 'accessing' stamp: 'CJ 11/23/2020 14:49:46'!
defaultTransactionID
	self shouldBeImplemented.! !
!MerchantProcessorSimulator class methodsFor: 'accessing' stamp: 'CJ 11/23/2020 14:50:24' prior: 50958579!
defaultTransactionID
	
	^ 1! !

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/23/2020 14:50:27'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:50:28'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 14:50:29'!
FAILURE!
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/23/2020 14:26:47' prior: 50958513!
invalidCreditCard

	^ MerchantProcessorSimulator withAction: [ self error: MerchantProcessor invalidCreditCardErrorDescription ].! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/23/2020 14:22:04' prior: 50958505!
insufficientFunds
	
	^ MerchantProcessorSimulator withAction: [ self error: MerchantProcessor insufficientFundsErrorDescription ].! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/23/2020 14:51:37'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/23/2020 14:51:37'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/23/2020 14:51:37'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 14:51:37'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/23/2020 14:51:37'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/23/2020 14:51:37'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:51:37'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/23/2020 14:52:27' prior: 50958064!
test07CheckoutReturnsChargedAmount

	| cart cashier receipt creditCard items catalog |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithOneItem.
	creditCard := self defaultCreditCard.
	
	items := cart items.
	catalog := cart catalog.
	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assert: cart totalItemCost equals: receipt amountCharged.
	self assert: (catalog at: items first) equals: receipt amountCharged.
	self assert: creditCard ownerName equals: receipt madeTo.
	self assert: receipt transactionID equals: MerchantProcessorSimulator defaultTransactionID.! !

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:52:31'!
ERROR!
!Receipt methodsFor: 'queries' stamp: 'CJ 11/23/2020 14:52:42'!
transactionID
	self shouldBeImplemented.
	^transactionID! !
!Receipt methodsFor: 'queries' stamp: 'CJ 11/23/2020 14:52:48' prior: 50958662!
transactionID
	
	^ transactionID! !

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:52:49'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/23/2020 14:52:49'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/23/2020 14:52:49'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/23/2020 14:52:49'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 14:52:49'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/23/2020 14:52:49'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/23/2020 14:52:49'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:52:49'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/23/2020 14:53:19'!
test07CheckoutReturnsCorrectInformationForCartWithOneItem

	| cart cashier receipt creditCard items catalog |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithOneItem.
	creditCard := self defaultCreditCard.
	
	items := cart items.
	catalog := cart catalog.
	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assert: cart totalItemCost equals: receipt amountCharged.
	self assert: (catalog at: items first) equals: receipt amountCharged.
	self assert: creditCard ownerName equals: receipt madeTo.
	self assert: receipt transactionID equals: MerchantProcessorSimulator defaultTransactionID.! !

!methodRemoval: CashierTest #test07CheckoutReturnsChargedAmount stamp: 'CJ 11/23/2020 14:53:19'!
test07CheckoutReturnsChargedAmount

	| cart cashier receipt creditCard items catalog |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithOneItem.
	creditCard := self defaultCreditCard.
	
	items := cart items.
	catalog := cart catalog.
	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assert: cart totalItemCost equals: receipt amountCharged.
	self assert: (catalog at: items first) equals: receipt amountCharged.
	self assert: creditCard ownerName equals: receipt madeTo.
	self assert: receipt transactionID equals: MerchantProcessorSimulator defaultTransactionID.!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/23/2020 14:53:32'!
test08

	| cart cashier receipt creditCard items catalog |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithOneItem.
	creditCard := self defaultCreditCard.
	
	items := cart items.
	catalog := cart catalog.
	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assert: cart totalItemCost equals: receipt amountCharged.
	self assert: (catalog at: items first) equals: receipt amountCharged.
	self assert: creditCard ownerName equals: receipt madeTo.
	self assert: receipt transactionID equals: MerchantProcessorSimulator defaultTransactionID.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/23/2020 14:53:41' prior: 50958743!
test08

	| cart cashier receipt creditCard items catalog |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithManyItems.
	creditCard := self defaultCreditCard.
	
	items := cart items.
	catalog := cart catalog.
	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assert: cart totalItemCost equals: receipt amountCharged.
	self assert: (catalog at: items first) equals: receipt amountCharged.
	self assert: creditCard ownerName equals: receipt madeTo.
	self assert: receipt transactionID equals: MerchantProcessorSimulator defaultTransactionID.! !

!testRun: #CashierTest #test08 stamp: 'CJ 11/23/2020 14:53:51'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/23/2020 14:56:33' prior: 50958765!
test08

	| cart cashier receipt creditCard items catalog |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithManyItems.
	creditCard := self defaultCreditCard.
	
	items := cart items.
	catalog := cart catalog.
	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assert: cart totalItemCost equals: receipt amountCharged.
	self assert: (items sum: [:anItemToSumPriceOf | catalog at: anItemToSumPriceOf]) equals: receipt amountCharged.
	self assert: creditCard ownerName equals: receipt madeTo.
	self assert: receipt transactionID equals: MerchantProcessorSimulator defaultTransactionID.! !

!testRun: #CashierTest #test08 stamp: 'CJ 11/23/2020 14:56:35'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/23/2020 14:56:35'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/23/2020 14:56:35'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/23/2020 14:56:35'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 14:56:35'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/23/2020 14:56:35'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/23/2020 14:56:35'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/23/2020 14:56:35'!
PASSED!

!testRun: #CashierTest #test08 stamp: 'CJ 11/23/2020 14:56:35'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/23/2020 14:56:43' prior: 50958789!
test08

	| cart cashier receipt creditCard items catalog |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithManyItems.
	creditCard := self defaultCreditCard.
	
	items := cart items.
	catalog := cart catalog.
	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assert: cart totalItemCost equals: receipt amountCharged.
	self assert: (items sum: [:anItemToSumPriceOf | catalog at: anItemToSumPriceOf]) equals: receipt amountCharged.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/23/2020 14:57:23'!
test08CheckoutReturnsCorrectAmountForCartWithManyItems

	| cart cashier receipt creditCard items catalog |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithManyItems.
	creditCard := self defaultCreditCard.
	
	items := cart items.
	catalog := cart catalog.
	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assert: cart totalItemCost equals: receipt amountCharged.
	self assert: (items sum: [:anItemToSumPriceOf | catalog at: anItemToSumPriceOf]) equals: receipt amountCharged.! !

!methodRemoval: CashierTest #test08 stamp: 'CJ 11/23/2020 14:57:23'!
test08

	| cart cashier receipt creditCard items catalog |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithManyItems.
	creditCard := self defaultCreditCard.
	
	items := cart items.
	catalog := cart catalog.
	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assert: cart totalItemCost equals: receipt amountCharged.
	self assert: (items sum: [:anItemToSumPriceOf | catalog at: anItemToSumPriceOf]) equals: receipt amountCharged.!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/23/2020 15:09:49' prior: 50958697!
test07CheckoutReturnsCorrectInformationForCartWithOneItem

	| cart cashier receipt creditCard items catalog |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithOneItem.
	creditCard := self defaultCreditCard.
	
	items := cart items.
	catalog := cart catalog.
	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assert: items first equals: receipt purchases first.
	self assert: (catalog at: items first) equals: receipt amountCharged.
	self assert: cart totalItemCost equals: receipt amountCharged.
	self assert: creditCard ownerName equals: receipt madeTo.
	self assert: receipt transactionID equals: MerchantProcessorSimulator defaultTransactionID.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/23/2020 15:10:20' prior: 50958897!
test07CheckoutReturnsCorrectInformationForCartWithOneItem

	| cart cashier receipt creditCard items catalog |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithOneItem.
	creditCard := self defaultCreditCard.
	
	items := cart items.
	catalog := cart catalog.
	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assert: 1 equals: receipt purchases size.
	self assert: items first equals: receipt purchases first.
	self assert: (catalog at: items first) equals: receipt amountCharged.
	self assert: cart totalItemCost equals: receipt amountCharged.
	self assert: creditCard ownerName equals: receipt madeTo.
	self assert: receipt transactionID equals: MerchantProcessorSimulator defaultTransactionID.! !

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/23/2020 15:10:26'!
ERROR!
!Receipt methodsFor: 'queries' stamp: 'CJ 11/23/2020 15:10:59'!
purchases
	self shouldBeImplemented.! !

!classDefinition: #Receipt category: '20-TusLibros' stamp: 'CJ 11/23/2020 15:11:08'!
Object subclass: #Receipt
	instanceVariableNames: 'cardOwnerName_CHANGE_ME amount_CHANGE_ME name amountCharged transactionID purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!Receipt methodsFor: 'queries' stamp: 'CJ 11/23/2020 15:11:06' prior: 50958952!
purchases
	
	^ purchases copy! !
!Cashier methodsFor: 'checkout' stamp: 'CJ 11/23/2020 15:13:26' prior: 50958403!
checkout: aCart withCreditCard: aCreditCard 

	| total purchasedItems transactionID |

	self assertCartNotEmpty: aCart.
	self assertCreditCardNotExpired: aCreditCard.
	
	total := aCart totalItemCost.
	purchasedItems := aCart items.
	transactionID := merchantProcessor debit: total from: aCreditCard.
	numberOfSales := numberOfSales + 1.
	
	^ Receipt withID: transactionID madeTo: 'Norbert Degoas' for: purchasedItems costing: total.! !
!Receipt methodsFor: 'initialization' stamp: 'CJ 11/23/2020 15:14:19'!
initializeWithID: aTransactionID madeTo: aCardOwnerName for: somePurchasedItems costing: anAmount 
	
	transactionID := aTransactionID.
	name := aCardOwnerName.
	amountCharged := anAmount.! !

!classDefinition: #Receipt category: '20-TusLibros' stamp: 'CJ 11/23/2020 15:15:32'!
Object subclass: #Receipt
	instanceVariableNames: 'cardOwnerName_CHANGE_ME amount_CHANGE_ME name amountCharged transactionID purchases purchasedItems'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!Receipt methodsFor: 'initialization' stamp: 'CJ 11/23/2020 15:14:32' prior: 50958985!
initializeWithID: aTransactionID madeTo: aCardOwnerName for: somePurchasedItems costing: anAmount 
	
	transactionID := aTransactionID.
	name := aCardOwnerName.
	purchasedItems := somePurchasedItems.
	amountCharged := anAmount.! !
!Receipt methodsFor: 'queries' stamp: 'CJ 11/23/2020 15:15:51'!
purchasedItems
	
	^ purchases copy! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/23/2020 15:15:51' prior: 50958922!
test07CheckoutReturnsCorrectInformationForCartWithOneItem

	| cart cashier receipt creditCard items catalog |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithOneItem.
	creditCard := self defaultCreditCard.
	
	items := cart items.
	catalog := cart catalog.
	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assert: 1 equals: receipt purchasedItems size.
	self assert: items first equals: receipt purchasedItems first.
	self assert: (catalog at: items first) equals: receipt amountCharged.
	self assert: cart totalItemCost equals: receipt amountCharged.
	self assert: creditCard ownerName equals: receipt madeTo.
	self assert: receipt transactionID equals: MerchantProcessorSimulator defaultTransactionID.! !

!methodRemoval: Receipt #purchases stamp: 'CJ 11/23/2020 15:15:51'!
purchases
	
	^ purchases copy!
!Receipt methodsFor: 'queries' stamp: 'CJ 11/23/2020 15:15:56' prior: 50959014!
purchasedItems
	
	^ purchasedItems copy! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/23/2020 15:16:50' prior: 50959019!
test07CheckoutReturnsCorrectInformationForCartWithOneItem

	| cart cashier receipt creditCard items catalog |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithOneItem.
	creditCard := self defaultCreditCard.
	
	items := cart items.
	catalog := cart catalog.
	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assert: 1 equals: receipt purchasedItems size.
	self assert: items first equals: receipt purchasedItems first.
	self assert: (catalog at: items first) equals: receipt amountCharged.
	self assert: cart totalItemCost equals: receipt amountCharged.
	
	self assert: creditCard ownerName equals: receipt madeTo.
	self assert: receipt transactionID equals: MerchantProcessorSimulator defaultTransactionID.! !

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/23/2020 15:16:52'!
ERROR!
!Receipt class methodsFor: 'instance creation' stamp: 'CJ 11/23/2020 15:17:28'!
withID: aSmallInteger madeTo: aString for: anOrderedCollection costing: aSmallInteger4 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithID: aSmallInteger madeTo: aString for: anOrderedCollection costing: aSmallInteger4 ! !
!Receipt class methodsFor: 'instance creation' stamp: 'CJ 11/23/2020 15:17:59' prior: 50959084!
withID: aTransactionID madeTo: aCardOwnerName for: somePurchasedItems costing: anAmount 
	
	^ self new initializeWithID: aTransactionID madeTo: aCardOwnerName for: somePurchasedItems costing: anAmount ! !

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/23/2020 15:18:00'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/23/2020 15:18:00'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/23/2020 15:18:00'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/23/2020 15:18:00'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 15:18:00'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/23/2020 15:18:00'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/23/2020 15:18:00'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/23/2020 15:18:00'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/23/2020 15:18:00'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/23/2020 15:18:55'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/23/2020 15:18:55'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/23/2020 15:18:55'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/23/2020 15:18:55'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/23/2020 15:18:55'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/23/2020 15:18:55'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/23/2020 15:18:55'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/23/2020 15:18:55'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/23/2020 15:21:01' prior: 50958859!
test08CheckoutReturnsCorrectAmountForCartWithManyItems

	| cart cashier receipt creditCard items catalog |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithManyItems.
	creditCard := self defaultCreditCard.
	
	items := cart items.
	catalog := cart catalog.
	receipt := cashier checkout: cart withCreditCard: creditCard.
	
	self assert: 2 equals: receipt purchasedItems size.
	self assert: items first equals: receipt purchasedItems first.
	self assert: items second equals: receipt purchasedItems second.
	self assert: cart totalItemCost equals: receipt amountCharged.
	self assert: (items sum: [:anItemToSumPriceOf | catalog at: anItemToSumPriceOf]) equals: receipt amountCharged.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 16:16:02'!
test09

	| cart cashier receipt creditCard items catalog |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithManyItems.
	creditCard := self defaultCreditCard.
	
	items := cart items.
	catalog := cart catalog.
	receipt := cashier checkout: cart withCreditCard: creditCard.
	
	self assert: 2 equals: receipt purchasedItems size.
	self assert: items first equals: receipt purchasedItems first.
	self assert: items second equals: receipt purchasedItems second.
	self assert: cart totalItemCost equals: receipt amountCharged.
	self assert: (items sum: [:anItemToSumPriceOf | catalog at: anItemToSumPriceOf]) equals: receipt amountCharged.! !
!Cashier methodsFor: 'checkout' stamp: 'CJ 11/24/2020 16:21:05' prior: 50958969!
checkout: aCart withCreditCard: aCreditCard 

	| total purchasedItems transactionID |

	self assertCartNotEmpty: aCart.
	self assertCreditCardNotExpired: aCreditCard.
	
	total := aCart totalItemCost.
	purchasedItems := aCart items.
	transactionID := merchantProcessor debit: total from: aCreditCard.
	numberOfSales := numberOfSales + 1.
	
	^ Receipt withID: transactionID madeTo: aCreditCard ownerName for: purchasedItems costing: total.! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/24/2020 16:43:18'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/24/2020 16:43:18'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/24/2020 16:43:18'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/24/2020 16:43:18'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/24/2020 16:43:18'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/24/2020 16:43:18'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/24/2020 16:43:18'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/24/2020 16:43:18'!
PASSED!

!testRun: #CashierTest #test09 stamp: 'CJ 11/24/2020 16:43:18'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 16:46:36' prior: 50959190!
test09

	| cart1 cart2 cashier receipt1 receipt2 creditCard salesMade |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart1 := self cartWithManyItems.
	cart2 := self cartWithManyItems.
	creditCard := self defaultCreditCard.
	
	receipt1 := cashier checkout: cart1 withCreditCard: creditCard.
	receipt2 := cashier checkout: cart1 withCreditCard: creditCard.
	salesMade := cashier salesMade.
	
	self assert: 2 equals: salesMade size.
	self assert: (salesMade includes: receipt1).
	self assert: (salesMade includes: receipt2).! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 16:46:47' prior: 50959260!
test09

	| cart1 cart2 cashier receipt1 receipt2 creditCard salesMade |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart1 := self cartWithManyItems.
	cart2 := self cartWithManyItems.
	creditCard := self defaultCreditCard.
	
	receipt1 := cashier checkout: cart1 withCreditCard: creditCard.
	receipt2 := cashier checkout: cart2 withCreditCard: creditCard.
	salesMade := cashier salesMade.
	
	self assert: 2 equals: salesMade size.
	self assert: (salesMade includes: receipt1).
	self assert: (salesMade includes: receipt2).! !

!testRun: #CashierTest #test09 stamp: 'CJ 11/24/2020 16:46:49'!
ERROR!
!Cashier methodsFor: 'queries' stamp: 'CJ 11/24/2020 16:47:11'!
salesMade
	self shouldBeImplemented.! !

!classDefinition: #Cashier category: '20-TusLibros' stamp: 'CJ 11/24/2020 16:47:25'!
Object subclass: #Cashier
	instanceVariableNames: 'priceList merchantProcessor numberOfSales salesMade'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!Cashier methodsFor: 'queries' stamp: 'CJ 11/24/2020 16:47:22' prior: 50959302!
salesMade
	
	^ salesMade copy! !

!testRun: #CashierTest #test09 stamp: 'CJ 11/24/2020 16:47:28'!
ERROR!
!Cashier methodsFor: 'initialization' stamp: 'CJ 11/24/2020 16:47:53' prior: 50956310 overrides: 16896425!
initialize

	numberOfSales := 0.
	salesMade := OrderedCollection new.! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/24/2020 16:47:56'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/24/2020 16:47:56'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/24/2020 16:47:56'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/24/2020 16:47:56'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/24/2020 16:47:56'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/24/2020 16:47:56'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/24/2020 16:47:56'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/24/2020 16:47:56'!
PASSED!

!testRun: #CashierTest #test09 stamp: 'CJ 11/24/2020 16:47:56'!
FAILURE!

!testRun: #CashierTest #test09 stamp: 'CJ 11/24/2020 16:47:56'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'CJ 11/24/2020 16:50:31' prior: 50959214!
checkout: aCart withCreditCard: aCreditCard 

	| total purchasedItems transactionID receipt |

	self assertCartNotEmpty: aCart.
	self assertCreditCardNotExpired: aCreditCard.
	
	total := aCart totalItemCost.
	transactionID := merchantProcessor debit: total from: aCreditCard.

	purchasedItems := aCart items.
	receipt := Receipt withID: transactionID madeTo: aCreditCard ownerName for: purchasedItems costing: total.
	salesMade add: receipt.
	numberOfSales := numberOfSales + 1.
	
	^ Receipt copy.! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/24/2020 16:50:43'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/24/2020 16:50:43'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/24/2020 16:50:43'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/24/2020 16:50:43'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/24/2020 16:50:43'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/24/2020 16:50:43'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/24/2020 16:50:43'!
ERROR!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/24/2020 16:50:43'!
ERROR!

!testRun: #CashierTest #test09 stamp: 'CJ 11/24/2020 16:50:43'!
FAILURE!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/24/2020 16:50:46'!
ERROR!
!Receipt class methodsFor: 'as yet unclassified' stamp: 'CJ 11/24/2020 16:51:06'!
purchasedItems
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checkout' stamp: 'CJ 11/24/2020 16:51:17' prior: 50959358!
checkout: aCart withCreditCard: aCreditCard 

	| total purchasedItems transactionID receipt |

	self assertCartNotEmpty: aCart.
	self assertCreditCardNotExpired: aCreditCard.
	
	total := aCart totalItemCost.
	transactionID := merchantProcessor debit: total from: aCreditCard.

	purchasedItems := aCart items.
	receipt := Receipt withID: transactionID madeTo: aCreditCard ownerName for: purchasedItems costing: total.
	salesMade add: receipt.
	numberOfSales := numberOfSales + 1.
	
	^ receipt copy.! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/24/2020 16:52:02'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/24/2020 16:52:02'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/24/2020 16:52:02'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/24/2020 16:52:02'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/24/2020 16:52:02'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/24/2020 16:52:02'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/24/2020 16:52:02'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/24/2020 16:52:02'!
PASSED!

!testRun: #CashierTest #test09 stamp: 'CJ 11/24/2020 16:52:02'!
FAILURE!

!testRun: #CashierTest #test09 stamp: 'CJ 11/24/2020 16:52:02'!
FAILURE!
!Receipt methodsFor: 'nil' stamp: 'CJ 11/24/2020 16:53:11' overrides: 16881029!
= anotherReceipt

	^ transactionID = anotherReceipt transactionID.! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/24/2020 16:53:29'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/24/2020 16:53:29'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/24/2020 16:53:29'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/24/2020 16:53:29'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/24/2020 16:53:29'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/24/2020 16:53:30'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/24/2020 16:53:30'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/24/2020 16:53:30'!
PASSED!

!testRun: #CashierTest #test09 stamp: 'CJ 11/24/2020 16:53:30'!
PASSED!

dic1 := Dictionary new.!

dic2 add: #wendy->#('la tetita' 'la cerveza').!

dic1 := Dictionary new.
dic1 add: #delfin->'torres gemelas'.
dic1 add: #wendy->#('la tetita' 'la cerveza').

dic2 := Dictionary new.
dic2 add: #delfin->'torres gemelas'.
dic2 add: #wendy->#('la tetita' 'la cerveza').!

dic1 := Dictionary new.
dic1 add: #delfin->'torres gemelas'.
dic1 add: #wendy->#('la tetita' 'la cerveza').

dic2 := Dictionary new.
dic2 add: #delfin->'torres gemelas'.
dic2 add: #wendy->#('la tetita' 'la cerveza').

dic1 = dic2.!

!methodRemoval: Receipt #= stamp: 'CJ 11/24/2020 16:55:43'!
= anotherReceipt

	^ transactionID = anotherReceipt transactionID.!
!Cashier methodsFor: 'checkout' stamp: 'CJ 11/24/2020 16:57:54' prior: 50959414!
checkout: aCart withCreditCard: aCreditCard 

	| total purchasedItems transactionID receipt |

	self assertCartNotEmpty: aCart.
	self assertCreditCardNotExpired: aCreditCard.
	
	total := aCart totalItemCost.
	transactionID := merchantProcessor debit: total from: aCreditCard.

	purchasedItems := aCart items.
	receipt := Dictionary new.
	receipt
		add: #transactionID -> transactionID;
		add: #madeTo -> aCreditCard ownerName;
		add: #items -> purchasedItems copy;
		add: #cost -> total.
	
	salesMade add: receipt.
	numberOfSales := numberOfSales + 1.
	
	^ receipt copy.! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/24/2020 16:58:04'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/24/2020 16:58:04'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/24/2020 16:58:04'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/24/2020 16:58:04'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/24/2020 16:58:04'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/24/2020 16:58:04'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/24/2020 16:58:04'!
ERROR!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/24/2020 16:58:04'!
ERROR!

!testRun: #CashierTest #test09 stamp: 'CJ 11/24/2020 16:58:04'!
PASSED!
!Cashier methodsFor: 'checkout' stamp: 'CJ 11/24/2020 16:58:32' prior: 50959520!
checkout: aCart withCreditCard: aCreditCard 

	| total purchasedItems transactionID receipt |

	self assertCartNotEmpty: aCart.
	self assertCreditCardNotExpired: aCreditCard.
	
	total := aCart totalItemCost.
	transactionID := merchantProcessor debit: total from: aCreditCard.

	purchasedItems := aCart items.
	receipt := Dictionary new.
	receipt
		add: #transactionID -> transactionID;
		add: #madeTo -> aCreditCard ownerName;
		add: #purchasedItems -> purchasedItems copy;
		add: #cost -> total.
	
	salesMade add: receipt.
	numberOfSales := numberOfSales + 1.
	
	^ receipt copy.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 17:00:41' prior: 50959053!
test07CheckoutReturnsCorrectInformationForCartWithOneItem

	| cart cashier receipt creditCard items purchasedItems catalog |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithOneItem.
	creditCard := self defaultCreditCard.
	
	items := cart items.
	catalog := cart catalog.
	receipt := cashier checkout: cart withCreditCard: creditCard.
	purchasedItems := receipt at: #purchasedItems.

	self assert: 1 equals: (receipt at: #purchasedItems) size.
	self assert: items first equals: (receipt at: #purchasedItems) first.
	self assert: (catalog at: items first) equals: (receipt at: #amountCharged).
	self assert: cart totalItemCost equals: (receipt at: #amountCharged).
	
	self assert: creditCard ownerName equals: receipt madeTo.
	self assert: receipt transactionID equals: MerchantProcessorSimulator defaultTransactionID.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 17:00:49' prior: 50959592!
test07CheckoutReturnsCorrectInformationForCartWithOneItem

	| cart cashier receipt creditCard items catalog |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithOneItem.
	creditCard := self defaultCreditCard.
	
	items := cart items.
	catalog := cart catalog.
	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assert: 1 equals: (receipt at: #purchasedItems) size.
	self assert: items first equals: (receipt at: #purchasedItems) first.
	self assert: (catalog at: items first) equals: (receipt at: #amountCharged).
	self assert: cart totalItemCost equals: (receipt at: #amountCharged).
	
	self assert: creditCard ownerName equals: receipt madeTo.
	self assert: receipt transactionID equals: MerchantProcessorSimulator defaultTransactionID.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 17:01:14' prior: 50959622!
test07CheckoutReturnsCorrectInformationForCartWithOneItem

	| cart cashier receipt creditCard items catalog |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithOneItem.
	creditCard := self defaultCreditCard.
	
	items := cart items.
	catalog := cart catalog.
	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assert: 1 equals: (receipt at: #purchasedItems) size.
	self assert: items first equals: (receipt at: #purchasedItems) first.
	self assert: (catalog at: items first) equals: (receipt at: #amountCharged).
	self assert: cart totalItemCost equals: (receipt at: #amountCharged).
	
	self assert: creditCard ownerName equals: (receipt at: #madeTo).
	self assert: (receipt at: #transactionID) equals: MerchantProcessorSimulator defaultTransactionID.! !

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/24/2020 17:01:19'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'CJ 11/24/2020 17:01:39' prior: 50959571!
checkout: aCart withCreditCard: aCreditCard 

	| total purchasedItems transactionID receipt |

	self assertCartNotEmpty: aCart.
	self assertCreditCardNotExpired: aCreditCard.
	
	total := aCart totalItemCost.
	transactionID := merchantProcessor debit: total from: aCreditCard.

	purchasedItems := aCart items.
	receipt := Dictionary new.
	receipt
		add: #transactionID -> transactionID;
		add: #madeTo -> aCreditCard ownerName;
		add: #purchasedItems -> purchasedItems copy;
		add: #amountCharged -> total.
	
	salesMade add: receipt.
	numberOfSales := numberOfSales + 1.
	
	^ receipt copy.! !

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/24/2020 17:01:52'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/24/2020 17:01:53'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 17:04:20' prior: 50959165!
test08CheckoutReturnsCorrectAmountForCartWithManyItems

	| cart cashier receipt creditCard items catalog |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithManyItems.
	creditCard := self defaultCreditCard.
	
	items := cart items.
	catalog := cart catalog.
	receipt := cashier checkout: cart withCreditCard: creditCard.
	
	self assert: 2 equals: (receipt at: #purchasedItems) size.
	self assert: (receipt at: #purchasedItems) includes: items first.
	self assert: (receipt at: #purchasedItems) includes: items second.
	self assert: cart totalItemCost equals: (receipt at: #amountCharged).
	self
		assert: (items sum: [:anItemToSumPriceOf | catalog at: anItemToSumPriceOf])
		equals: (receipt at: #amountCharged).! !

!testRun: #CashierTest #test09 stamp: 'CJ 11/24/2020 17:04:45'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 17:05:03'!
test09SalesAreRecordedCorrectly

	| cart1 cart2 cashier receipt1 receipt2 creditCard salesMade |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart1 := self cartWithManyItems.
	cart2 := self cartWithManyItems.
	creditCard := self defaultCreditCard.
	
	receipt1 := cashier checkout: cart1 withCreditCard: creditCard.
	receipt2 := cashier checkout: cart2 withCreditCard: creditCard.
	salesMade := cashier salesMade.
	
	self assert: 2 equals: salesMade size.
	self assert: (salesMade includes: receipt1).
	self assert: (salesMade includes: receipt2).! !

!methodRemoval: CashierTest #test09 stamp: 'CJ 11/24/2020 17:05:03'!
test09

	| cart1 cart2 cashier receipt1 receipt2 creditCard salesMade |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart1 := self cartWithManyItems.
	cart2 := self cartWithManyItems.
	creditCard := self defaultCreditCard.
	
	receipt1 := cashier checkout: cart1 withCreditCard: creditCard.
	receipt2 := cashier checkout: cart2 withCreditCard: creditCard.
	salesMade := cashier salesMade.
	
	self assert: 2 equals: salesMade size.
	self assert: (salesMade includes: receipt1).
	self assert: (salesMade includes: receipt2).!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 11/24/2020 17:05:05'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/24/2020 17:05:05'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/24/2020 17:05:05'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/24/2020 17:05:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/24/2020 17:05:05'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/24/2020 17:05:05'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/24/2020 17:05:05'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/24/2020 17:05:05'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/24/2020 17:05:05'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 11/24/2020 17:05:05'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 17:05:30' prior: 50958213!
test04CheckoutWithInsufficientFundsIsRejected

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self insufficientFundsMerchantProcessor.
	cart := self cartWithManyItems.

	self
		should: [ cashier checkout: cart withCreditCard: self defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor insufficientFundsErrorDescription.
	
	self assert: 0 equals: cashier numberOfSales.
	self assert: cashier salesMade isEmpty.! !

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/24/2020 17:05:31'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/24/2020 17:05:31'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/24/2020 17:05:31'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/24/2020 17:05:31'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/24/2020 17:05:31'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/24/2020 17:05:31'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/24/2020 17:05:31'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/24/2020 17:05:31'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/24/2020 17:05:31'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 11/24/2020 17:05:31'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 17:05:41' prior: 50958197!
test05CheckoutWithExpiredCreditCardIsRejected

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithManyItems.

	self
		should: [ cashier checkout: cart withCreditCard: self expiredCreditCard. ]
		raise: Error
		withMessageText: Cashier expiredCreditCardErrorDescription.
	
	self assert: 0 equals: cashier numberOfSales.
	self assert: cashier salesMade isEmpty.! !

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/24/2020 17:05:42'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/24/2020 17:05:42'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/24/2020 17:05:42'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/24/2020 17:05:42'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/24/2020 17:05:42'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/24/2020 17:05:42'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/24/2020 17:05:42'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/24/2020 17:05:42'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/24/2020 17:05:42'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 11/24/2020 17:05:42'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 17:05:48' prior: 50958169!
test06CheckoutWithInvalidCreditCardIsRejected

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self invalidCreditCardMerchantProcessor.
	cart := self cartWithManyItems.

	self
		should: [ cashier checkout: cart withCreditCard: self defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor invalidCreditCardErrorDescription.
	
	self assert: 0 equals: cashier numberOfSales.
	self assert: cashier salesMade isEmpty.! !

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/24/2020 17:05:49'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/24/2020 17:05:49'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/24/2020 17:05:49'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/24/2020 17:05:49'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/24/2020 17:05:49'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/24/2020 17:05:49'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/24/2020 17:05:49'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/24/2020 17:05:49'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/24/2020 17:05:49'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 11/24/2020 17:05:49'!
PASSED!

!classRemoval: #Receipt stamp: 'CJ 11/24/2020 17:07:51'!
Object subclass: #Receipt
	instanceVariableNames: 'cardOwnerName_CHANGE_ME amount_CHANGE_ME name amountCharged transactionID purchases purchasedItems'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!Cashier methodsFor: 'checkout' stamp: 'CJ 11/24/2020 17:10:50'!
recordSale: receipt

	salesMade add: receipt.
	numberOfSales := numberOfSales + 1! !
!Cashier methodsFor: 'checkout' stamp: 'CJ 11/24/2020 17:10:50' prior: 50959682!
checkout: aCart withCreditCard: aCreditCard 

	| total purchasedItems transactionID receipt |

	self assertCartNotEmpty: aCart.
	self assertCreditCardNotExpired: aCreditCard.
	
	total := aCart totalItemCost.
	transactionID := merchantProcessor debit: total from: aCreditCard.

	purchasedItems := aCart items.
	receipt := Dictionary new.
	receipt
		add: #transactionID -> transactionID;
		add: #madeTo -> aCreditCard ownerName;
		add: #purchasedItems -> purchasedItems copy;
		add: #amountCharged -> total.
	
	self recordSale: receipt.
	
	^ receipt copy.! !
!Cashier methodsFor: 'checkout' stamp: 'CJ 11/24/2020 17:11:46'!
xxx: aCart withCreditCard: aCreditCard 

	| total purchasedItems transactionID receipt |

	self assertCartNotEmpty: aCart.
	self assertCreditCardNotExpired: aCreditCard.
	
	total := aCart totalItemCost.
	transactionID := merchantProcessor debit: total from: aCreditCard.

	purchasedItems := aCart items.
	receipt := Dictionary new.
	receipt
		add: #transactionID -> transactionID;
		add: #madeTo -> aCreditCard ownerName;
		add: #purchasedItems -> purchasedItems copy;
		add: #amountCharged -> total.
	
	self recordSale: receipt.
	
	^ receipt copy.! !
!Cashier methodsFor: 'checkout' stamp: 'CJ 11/24/2020 17:14:07'!
xxx: aCart yyy: aCreditCard zzz: transactionID

	| purchasedItems receipt |

	purchasedItems := aCart items.
	receipt := Dictionary new.
	receipt
		add: #transactionID -> transactionID;
		add: #madeTo -> aCreditCard ownerName;
		add: #purchasedItems -> purchasedItems copy;
		add: #amountCharged -> aCart totalItemCost.! !
!Cashier methodsFor: 'private' stamp: 'CJ 11/24/2020 17:14:58'!
recordSaleOf: aCart for: aCreditCard withID: transactionID

	| purchasedItems receipt |

	purchasedItems := aCart items.
	receipt := Dictionary new.
	receipt
		add: #transactionID -> transactionID;
		add: #madeTo -> aCreditCard ownerName;
		add: #purchasedItems -> purchasedItems copy;
		add: #amountCharged -> aCart totalItemCost.! !
!Cashier methodsFor: 'private' stamp: 'CJ 11/24/2020 17:15:56' prior: 50960033!
recordSaleOf: aCart for: aCreditCard withID: transactionID

	| purchasedItems receipt |

	purchasedItems := aCart items.
	receipt := Dictionary new.
	receipt
		add: #transactionID -> transactionID;
		add: #madeTo -> aCreditCard ownerName;
		add: #purchasedItems -> purchasedItems copy;
		add: #amountCharged -> aCart totalItemCost.
	
	self recordSale: receipt.
	
	^ receipt copy.! !
!Cashier methodsFor: 'private' stamp: 'CJ 11/24/2020 17:16:46' prior: 50960046!
recordSaleOf: aCart for: aCreditCard withID: transactionID

	| receipt |

	receipt := Dictionary new.
	receipt
		add: #transactionID -> transactionID;
		add: #madeTo -> aCreditCard ownerName;
		add: #purchasedItems -> aCart items;
		add: #amountCharged -> aCart totalItemCost.
	
	self recordSale: receipt.
	
	^ receipt copy.! !

!methodRemoval: Cashier #recordSaleOf:for:withID: stamp: 'CJ 11/24/2020 17:16:53'!
recordSaleOf: aCart for: aCreditCard withID: transactionID

	| receipt |

	receipt := Dictionary new.
	receipt
		add: #transactionID -> transactionID;
		add: #madeTo -> aCreditCard ownerName;
		add: #purchasedItems -> aCart items;
		add: #amountCharged -> aCart totalItemCost.
	
	self recordSale: receipt.
	
	^ receipt copy.!

!methodRemoval: Cashier #xxx:yyy:zzz: stamp: 'CJ 11/24/2020 17:16:56'!
xxx: aCart yyy: aCreditCard zzz: transactionID

	| purchasedItems receipt |

	purchasedItems := aCart items.
	receipt := Dictionary new.
	receipt
		add: #transactionID -> transactionID;
		add: #madeTo -> aCreditCard ownerName;
		add: #purchasedItems -> purchasedItems copy;
		add: #amountCharged -> aCart totalItemCost.!
!Cashier methodsFor: 'checkout' stamp: 'CJ 11/24/2020 17:23:36'!
xxx: aCart withCreditCard: aCreditCard yyy: transactionID

	| receipt |

	receipt := Dictionary new.
	receipt
		add: #transactionID -> transactionID;
		add: #madeTo -> aCreditCard ownerName;
		add: #purchasedItems -> aCart items copy;
		add: #amountCharged -> aCart totalItemCost.
	
	self recordSale: receipt.
	
	^ receipt copy.! !
!Cashier methodsFor: 'checkout' stamp: 'CJ 11/24/2020 17:24:00'!
recordSaleOf: aCart withCreditCard: aCreditCard withID: transactionID

	| receipt |

	receipt := Dictionary new.
	receipt
		add: #transactionID -> transactionID;
		add: #madeTo -> aCreditCard ownerName;
		add: #purchasedItems -> aCart items copy;
		add: #amountCharged -> aCart totalItemCost.
	
	self recordSale: receipt.
	
	^ receipt copy.! !
!Cashier methodsFor: 'checkout' stamp: 'CJ 11/24/2020 17:24:55' prior: 50959980!
checkout: aCart withCreditCard: aCreditCard 

	| total transactionID |

	self assertCartNotEmpty: aCart.
	self assertCreditCardNotExpired: aCreditCard.
	
	total := aCart totalItemCost.
	transactionID := merchantProcessor debit: total from: aCreditCard.

	^ self recordSaleOf: aCart withCreditCard: aCreditCard withID: transactionID.! !
!Cashier methodsFor: 'checkout' stamp: 'CJ 11/24/2020 17:25:18' prior: 50960126!
checkout: aCart withCreditCard: aCreditCard 

	| transactionID |

	self assertCartNotEmpty: aCart.
	self assertCreditCardNotExpired: aCreditCard.
	
	transactionID := merchantProcessor debit: aCart totalItemCost from: aCreditCard.

	^ self recordSaleOf: aCart withCreditCard: aCreditCard withID: transactionID.! !

!methodRemoval: Cashier #xxx:withCreditCard: stamp: 'CJ 11/24/2020 17:25:36'!
xxx: aCart withCreditCard: aCreditCard 

	| total purchasedItems transactionID receipt |

	self assertCartNotEmpty: aCart.
	self assertCreditCardNotExpired: aCreditCard.
	
	total := aCart totalItemCost.
	transactionID := merchantProcessor debit: total from: aCreditCard.

	purchasedItems := aCart items.
	receipt := Dictionary new.
	receipt
		add: #transactionID -> transactionID;
		add: #madeTo -> aCreditCard ownerName;
		add: #purchasedItems -> purchasedItems copy;
		add: #amountCharged -> total.
	
	self recordSale: receipt.
	
	^ receipt copy.!

!methodRemoval: Cashier #xxx:withCreditCard:yyy: stamp: 'CJ 11/24/2020 17:25:38'!
xxx: aCart withCreditCard: aCreditCard yyy: transactionID

	| receipt |

	receipt := Dictionary new.
	receipt
		add: #transactionID -> transactionID;
		add: #madeTo -> aCreditCard ownerName;
		add: #purchasedItems -> aCart items copy;
		add: #amountCharged -> aCart totalItemCost.
	
	self recordSale: receipt.
	
	^ receipt copy.!
!CreditCard methodsFor: 'initialization' stamp: 'CJ 11/24/2020 17:26:53' prior: 50955494!
initializeWithNumber: creditCardNumber ownedBy: aName expiringOn: expirationDate 
	
	number := creditCardNumber.
	name := aName.
	validUntil := expirationDate.! !

Object subclass: #CreditCard
	instanceVariableNames: 'number name validUntil'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classDefinition: #CreditCard category: '20-TusLibros' stamp: 'CJ 11/24/2020 17:27:45'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name validUntil'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classDefinition: #CreditCard category: '20-TusLibros' stamp: 'CJ 11/24/2020 17:27:51'!
Object subclass: #CreditCard
	instanceVariableNames: 'number ownerName validUntil'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'CJ 11/24/2020 17:27:51' prior: 50960186!
initializeWithNumber: creditCardNumber ownedBy: aName expiringOn: expirationDate 
	
	number := creditCardNumber.
	ownerName := aName.
	validUntil := expirationDate.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'CJ 11/24/2020 17:27:51' prior: 50957447!
ownerName
	
	^ ownerName! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/24/2020 17:27:56'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/24/2020 17:27:56'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/24/2020 17:27:56'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/24/2020 17:27:56'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/24/2020 17:27:56'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/24/2020 17:27:56'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/24/2020 17:27:56'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/24/2020 17:27:56'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 11/24/2020 17:27:56'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 17:28:45' prior: 50959650!
test07CheckoutReturnsCorrectInformationForCartWithOneItem

	| cart cashier receipt creditCard items catalog |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithOneItem.
	creditCard := self defaultCreditCard.
	
	items := cart items.
	catalog := cart catalog.
	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assert: 1 equals: (receipt at: #purchasedItems) size.
	self assert: (receipt at: #purchasedItems) includes: items first.
	self assert: (catalog at: items first) equals: (receipt at: #amountCharged).
	self assert: cart totalItemCost equals: (receipt at: #amountCharged).
	
	self assert: creditCard ownerName equals: (receipt at: #madeTo).
	self assert: (receipt at: #transactionID) equals: MerchantProcessorSimulator defaultTransactionID.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 17:29:38' prior: 50960257!
test07CheckoutReturnsCorrectInformationForCartWithOneItem

	| cart cashier receipt creditCard items catalog |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithOneItem.
	creditCard := self defaultCreditCard.
	
	items := cart items.
	catalog := cart catalog.
	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assert: 1 equals: (receipt at: #purchasedItems) size.
	self assert: (receipt at: #purchasedItems) includes: items first.
	self assert: cart totalItemCost equals: (receipt at: #amountCharged).
	self assert: (catalog at: items first) equals: (receipt at: #amountCharged).
	
	self assert: creditCard ownerName equals: (receipt at: #madeTo).
	self assert: (receipt at: #transactionID) equals: MerchantProcessorSimulator defaultTransactionID.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 17:31:50'!
xxx: receipt yyy: cart

	| items catalog |
	
	items := cart items.
	catalog := cart catalog.

	self assert: items size equals: (receipt at: #purchasedItems) size.
	self assert: (receipt at: #purchasedItems) includes: items first.
	self assert: cart totalItemCost equals: (receipt at: #amountCharged).
	self assert: (catalog at: items first) equals: (receipt at: #amountCharged).! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 17:32:59' prior: 50960314!
xxx: receipt yyy: cart

	| items catalog |
	
	items := cart items.
	catalog := cart catalog.

	self assert: items size equals: (receipt at: #purchasedItems) size.
	items do: [ :itemToCheck | self assert: (receipt at: #purchasedItems) includes: itemToCheck. ].
	self assert: cart totalItemCost equals: (receipt at: #amountCharged).
	self assert: (catalog at: items first) equals: (receipt at: #amountCharged).! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 17:33:40' prior: 50960329!
xxx: receipt yyy: cart

	| items catalog |
	
	items := cart items.
	catalog := cart catalog.

	self assert: items size equals: (receipt at: #purchasedItems) size.
	items do: [ :itemToCheck | self assert: (receipt at: #purchasedItems) includes: itemToCheck. ].
	self assert: cart totalItemCost equals: (receipt at: #amountCharged).
	self
		assert: (items sum: [:itemToSumPriceOf | catalog at: itemToSumPriceOf])
		equals: (receipt at: #amountCharged).! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 17:34:03'!
assertReceipt: receipt isCorrectForCart: cart

	| items catalog |
	
	items := cart items.
	catalog := cart catalog.

	self assert: items size equals: (receipt at: #purchasedItems) size.
	items do: [ :itemToCheck | self assert: (receipt at: #purchasedItems) includes: itemToCheck. ].
	self assert: cart totalItemCost equals: (receipt at: #amountCharged).
	self
		assert: (items sum: [:itemToSumPriceOf | catalog at: itemToSumPriceOf])
		equals: (receipt at: #amountCharged).! !

!methodRemoval: CashierTest #xxx:yyy: stamp: 'CJ 11/24/2020 17:34:03'!
xxx: receipt yyy: cart

	| items catalog |
	
	items := cart items.
	catalog := cart catalog.

	self assert: items size equals: (receipt at: #purchasedItems) size.
	items do: [ :itemToCheck | self assert: (receipt at: #purchasedItems) includes: itemToCheck. ].
	self assert: cart totalItemCost equals: (receipt at: #amountCharged).
	self
		assert: (items sum: [:itemToSumPriceOf | catalog at: itemToSumPriceOf])
		equals: (receipt at: #amountCharged).!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 17:34:19' prior: 50960362!
assertReceipt: receipt isCorrectForCart: cart

	| items catalog |
	
	items := cart items.
	catalog := cart catalog.

	self assert: items size equals: (receipt at: #purchasedItems) size.
	items do: [ :itemToCheck | self assert: (receipt at: #purchasedItems) includes: itemToCheck. ].
	
	self assert: cart totalItemCost equals: (receipt at: #amountCharged).
	self
		assert: (items sum: [:itemToSumPriceOf | catalog at: itemToSumPriceOf])
		equals: (receipt at: #amountCharged).! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 17:35:27' prior: 50960286!
test07CheckoutReturnsCorrectInformationForCartWithOneItem

	| cart cashier receipt creditCard |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithOneItem.
	creditCard := self defaultCreditCard.

	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assertReceipt: receipt isCorrectForCart: cart.
	self assert: creditCard ownerName equals: (receipt at: #madeTo).
	self assert: (receipt at: #transactionID) equals: MerchantProcessorSimulator defaultTransactionID.! !

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/24/2020 17:35:31'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/24/2020 17:35:31'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/24/2020 17:35:31'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/24/2020 17:35:31'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/24/2020 17:35:31'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/24/2020 17:35:31'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/24/2020 17:35:31'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/24/2020 17:35:31'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/24/2020 17:35:31'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 11/24/2020 17:35:31'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 17:35:51' prior: 50959711!
test08CheckoutReturnsCorrectAmountForCartWithManyItems

	| cart cashier receipt creditCard items catalog |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithManyItems.
	creditCard := self defaultCreditCard.
	
	items := cart items.
	catalog := cart catalog.
	receipt := cashier checkout: cart withCreditCard: creditCard.
	
	self assertReceipt: receipt isCorrectForCart: cart.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 17:36:02' prior: 50960468!
test08CheckoutReturnsCorrectAmountForCartWithManyItems

	| cart cashier receipt creditCard |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithManyItems.
	creditCard := self defaultCreditCard.
	
	receipt := cashier checkout: cart withCreditCard: creditCard.
	
	self assertReceipt: receipt isCorrectForCart: cart.! !

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/24/2020 17:36:05'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/24/2020 17:36:05'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/24/2020 17:36:05'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/24/2020 17:36:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/24/2020 17:36:05'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/24/2020 17:36:05'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/24/2020 17:36:05'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/24/2020 17:36:05'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/24/2020 17:36:05'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 11/24/2020 17:36:05'!
PASSED!
!Cashier methodsFor: 'private' stamp: 'CJ 11/24/2020 17:38:12'!
recordReceipt: receipt

	salesMade add: receipt.
	numberOfSales := numberOfSales + 1! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CJ 11/24/2020 17:38:12' prior: 50960112!
recordSaleOf: aCart withCreditCard: aCreditCard withID: transactionID

	| receipt |

	receipt := Dictionary new.
	receipt
		add: #transactionID -> transactionID;
		add: #madeTo -> aCreditCard ownerName;
		add: #purchasedItems -> aCart items copy;
		add: #amountCharged -> aCart totalItemCost.
	
	self recordReceipt: receipt.
	
	^ receipt copy.! !

!methodRemoval: Cashier #recordSale: stamp: 'CJ 11/24/2020 17:38:12'!
recordSale: receipt

	salesMade add: receipt.
	numberOfSales := numberOfSales + 1!
!Cashier methodsFor: 'private' stamp: 'CJ 11/24/2020 17:39:14'!
processSaleOf: aCart withCreditCard: aCreditCard withID: transactionID

	| receipt |

	receipt := Dictionary new.
	receipt
		add: #transactionID -> transactionID;
		add: #madeTo -> aCreditCard ownerName;
		add: #purchasedItems -> aCart items copy;
		add: #amountCharged -> aCart totalItemCost.
	
	self recordReceipt: receipt.
	
	^ receipt copy.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'CJ 11/24/2020 17:39:14' prior: 50960140!
checkout: aCart withCreditCard: aCreditCard 

	| transactionID |

	self assertCartNotEmpty: aCart.
	self assertCreditCardNotExpired: aCreditCard.
	
	transactionID := merchantProcessor debit: aCart totalItemCost from: aCreditCard.

	^ self processSaleOf: aCart withCreditCard: aCreditCard withID: transactionID.! !

!methodRemoval: Cashier #recordSaleOf:withCreditCard:withID: stamp: 'CJ 11/24/2020 17:39:14'!
recordSaleOf: aCart withCreditCard: aCreditCard withID: transactionID

	| receipt |

	receipt := Dictionary new.
	receipt
		add: #transactionID -> transactionID;
		add: #madeTo -> aCreditCard ownerName;
		add: #purchasedItems -> aCart items copy;
		add: #amountCharged -> aCart totalItemCost.
	
	self recordReceipt: receipt.
	
	^ receipt copy.!
!Cashier methodsFor: 'private' stamp: 'CJ 11/24/2020 17:39:25' prior: 50960532!
recordReceipt: receipt

	salesMade add: receipt.
	numberOfSales := numberOfSales + 1.! !

TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classDefinition: #CreditCardTest category: '20-TusLibros' stamp: 'CJ 11/24/2020 17:42:48'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!CreditCardTest methodsFor: 'nil' stamp: 'CJ 11/24/2020 17:45:04'!
test01

	self
		should: [ CreditCard withNumber: self numberWithFewerDigits ownedBy: self defaultName expiringOn: self defaultDate ]
		raise: Error
		withMessageText: CreditCard invalidNumberLengthErrorDescription.! !

!testRun: #CreditCardTest #test01 stamp: 'CJ 11/24/2020 17:45:12'!
ERROR!
!CreditCard class methodsFor: 'error descriptions' stamp: 'CJ 11/24/2020 17:45:31'!
invalidNumberLengthErrorDescription
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'CJ 11/24/2020 17:45:45' prior: 50960626!
invalidNumberLengthErrorDescription
	
	^ 'Invalid length for credit card number'! !

!testRun: #CreditCardTest #test01 stamp: 'CJ 11/24/2020 17:45:47'!
FAILURE!
!CreditCardTest methodsFor: 'support' stamp: 'CJ 11/24/2020 17:46:08'!
numberWithFewerDigits
	self shouldBeImplemented.! !
!CreditCardTest methodsFor: 'support' stamp: 'CJ 11/24/2020 17:47:09' prior: 50960640!
numberWithFewerDigits
	
	^ '751111751111751'! !

!testRun: #CreditCardTest #test01 stamp: 'CJ 11/24/2020 17:47:13'!
FAILURE!
!CreditCardTest methodsFor: 'support' stamp: 'CJ 11/24/2020 17:47:35'!
defaultName
	self shouldBeImplemented.! !
!CreditCardTest methodsFor: 'support' stamp: 'CJ 11/24/2020 17:47:41' prior: 50960652!
defaultName
	
	^ 'Norbert Degoas'! !

!testRun: #CreditCardTest #test01 stamp: 'CJ 11/24/2020 17:47:43'!
FAILURE!
!CreditCardTest methodsFor: 'support' stamp: 'CJ 11/24/2020 17:48:05'!
defaultDate
	self shouldBeImplemented.! !
!CreditCardTest methodsFor: 'support' stamp: 'CJ 11/24/2020 17:48:20' prior: 50960663!
defaultDate
	
	^ GregorianMonthOfYear year: GregorianYear current month: GregorianMonth current! !
!CreditCardTest methodsFor: 'support' stamp: 'CJ 11/24/2020 17:48:40' prior: 50960668!
defaultDate
	
	^ GregorianMonthOfYear year: 2023 month: December! !
!CreditCardTest methodsFor: 'support' stamp: 'CJ 11/24/2020 17:49:21' prior: 50960674!
defaultDate
	
	^ GregorianMonthOfYear year: GregorianYear current month: GregorianMonth current! !

!testRun: #CreditCardTest #test01 stamp: 'CJ 11/24/2020 17:49:26'!
FAILURE!
!CreditCardTest methodsFor: 'support' stamp: 'CJ 11/24/2020 17:50:03'!
dateForNonExpired
	
	^ GregorianMonthOfYear year: GregorianYear current month: GregorianMonth current! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/24/2020 17:50:03' prior: 50960614!
test01

	self
		should: [ CreditCard withNumber: self numberWithFewerDigits ownedBy: self defaultName expiringOn: self dateForNonExpired ]
		raise: Error
		withMessageText: CreditCard invalidNumberLengthErrorDescription.! !

!methodRemoval: CreditCardTest #defaultDate stamp: 'CJ 11/24/2020 17:50:03'!
defaultDate
	
	^ GregorianMonthOfYear year: GregorianYear current month: GregorianMonth current!
!CreditCard methodsFor: 'initialization' stamp: 'CJ 11/24/2020 17:50:44' prior: 50960214!
initializeWithNumber: creditCardNumber ownedBy: aName expiringOn: expirationDate

	self assertValidNumber: creditCardNumber.
	
	number := creditCardNumber.
	ownerName := aName.
	validUntil := expirationDate.! !

!testRun: #CreditCardTest #test01 stamp: 'CJ 11/24/2020 17:50:47'!
FAILURE!

!testRun: #CreditCardTest #test01 stamp: 'CJ 11/24/2020 17:50:47'!
FAILURE!
!CreditCard methodsFor: 'assertions' stamp: 'CJ 11/24/2020 17:51:04'!
assertValidNumber: aString 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'assertions' stamp: 'CJ 11/24/2020 17:51:51' prior: 50960724!
assertValidNumber: potentialCreditCardNumber
	
	^ potentialCreditCardNumber size >= 16! !
!CreditCard methodsFor: 'assertions' stamp: 'CJ 11/24/2020 17:52:22' prior: 50960729!
assertValidNumber: potentialCreditCardNumber
	
	potentialCreditCardNumber size >= 16
		ifFalse: [ self error: self class invalidNumberLengthErrorDescription ].! !

!testRun: #CreditCardTest #test01 stamp: 'CJ 11/24/2020 17:52:25'!
PASSED!

!testRun: #CreditCardTest #test01 stamp: 'CJ 11/24/2020 17:52:43'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 17:53:03' prior: 50960694!
test01

	self
		should: [ CreditCard withNumber: self numberWithFewerDigits ownedBy: self defaultName expiringOn: self dateForNonExpired ]
		raise: Error
		withMessageText: CreditCard invalidNumberLengthErrorDescription.
		
	self
		should: [ CreditCard withNumber: self numberWithMoreDigits ownedBy: self defaultName expiringOn: self dateForNonExpired ]
		raise: Error
		withMessageText: CreditCard invalidNumberLengthErrorDescription.! !

!testRun: #CreditCardTest #test01 stamp: 'CJ 11/24/2020 17:53:06'!
FAILURE!
!CreditCardTest methodsFor: 'support' stamp: 'CJ 11/24/2020 17:53:22'!
numberWithMoreDigits
	self shouldBeImplemented.! !
!CreditCardTest methodsFor: 'support' stamp: 'CJ 11/24/2020 17:53:36' prior: 50960767!
numberWithMoreDigits
	
	^ '75111175111175111'! !

!testRun: #CreditCardTest #test01 stamp: 'CJ 11/24/2020 17:53:40'!
FAILURE!
!CreditCard methodsFor: 'assertions' stamp: 'CJ 11/24/2020 17:54:08' prior: 50960735!
assertValidNumber: potentialCreditCardNumber
	
	potentialCreditCardNumber size ~= 16
		ifFalse: [ self error: self class invalidNumberLengthErrorDescription ].! !

!testRun: #CreditCardTest #test01 stamp: 'CJ 11/24/2020 17:54:12'!
FAILURE!

!testRun: #CreditCardTest #test01 stamp: 'CJ 11/24/2020 17:54:12'!
FAILURE!
!CreditCard methodsFor: 'assertions' stamp: 'CJ 11/24/2020 17:54:24' prior: 50960779!
assertValidNumber: potentialCreditCardNumber
	
	potentialCreditCardNumber size = 16
		ifFalse: [ self error: self class invalidNumberLengthErrorDescription ].! !

!testRun: #CreditCardTest #test01 stamp: 'CJ 11/24/2020 17:54:26'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 17:56:00'!
test01NumberLengthMustBeCorrect

	self
		should: [ CreditCard withNumber: self numberWithFewerDigits ownedBy: self defaultName expiringOn: self dateForNonExpired ]
		raise: Error
		withMessageText: CreditCard invalidNumberLengthErrorDescription.
		
	self
		should: [ CreditCard withNumber: self numberWithMoreDigits ownedBy: self defaultName expiringOn: self dateForNonExpired ]
		raise: Error
		withMessageText: CreditCard invalidNumberLengthErrorDescription.! !

!methodRemoval: CreditCardTest #test01 stamp: 'CJ 11/24/2020 17:56:00'!
test01

	self
		should: [ CreditCard withNumber: self numberWithFewerDigits ownedBy: self defaultName expiringOn: self dateForNonExpired ]
		raise: Error
		withMessageText: CreditCard invalidNumberLengthErrorDescription.
		
	self
		should: [ CreditCard withNumber: self numberWithMoreDigits ownedBy: self defaultName expiringOn: self dateForNonExpired ]
		raise: Error
		withMessageText: CreditCard invalidNumberLengthErrorDescription.!
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 17:56:23'!
test02

	self
		should: [ CreditCard withNumber: self numberWithNonNumericCharacter ownedBy: self defaultName expiringOn: self dateForNonExpired ]
		raise: Error
		withMessageText: CreditCard invalidNumberLengthErrorDescription.! !

!testRun: #CreditCardTest #test02 stamp: 'CJ 11/24/2020 17:56:30'!
FAILURE!
!CreditCardTest methodsFor: 'support' stamp: 'CJ 11/24/2020 17:56:44'!
numberWithNonNumericCharacter
	self shouldBeImplemented.! !
!CreditCardTest methodsFor: 'support' stamp: 'CJ 11/24/2020 17:57:03' prior: 50960847!
numberWithNonNumericCharacter
	
	^ '75a1117511117511'! !

!testRun: #CreditCardTest #test02 stamp: 'CJ 11/24/2020 17:57:08'!
FAILURE!

'7434a' asNumber !
!String methodsFor: 'testing' stamp: 'CJ 11/24/2020 18:00:51'!
isNumeric
	"Answer true if the receiver contains only letters or digits."
	^ self allSatisfy: [:each| each isAlphaNumeric]! !
!String methodsFor: 'testing' stamp: 'CJ 11/24/2020 18:01:00' prior: 50960859!
isNumeric
	"Answer true if the receiver contains only digits."
	^ self allSatisfy: [:each| each isNumeric]! !
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 18:01:58' prior: 50960835!
test02

	self
		should: [ CreditCard withNumber: self numberWithNonNumericCharacter ownedBy: self defaultName expiringOn: self dateForNonExpired ]
		raise: Error
		withMessageText: CreditCard invalidDigitErrorDescription.! !
!CreditCard methodsFor: 'assertions' stamp: 'CJ 11/24/2020 18:02:15' prior: 50960792!
assertValidNumber: potentialCreditCardNumber
	
	potentialCreditCardNumber size = 16
		ifFalse: [ self error: self class invalidNumberLengthErrorDescription ].
	potentialCreditCardNumber isNumeric
		ifFalse: [ self error: self class invalidDigitErrorDescription ].! !

!testRun: #CreditCardTest #test01NumberLengthMustBeCorrect stamp: 'CJ 11/24/2020 18:02:17'!
PASSED!

!testRun: #CreditCardTest #test02 stamp: 'CJ 11/24/2020 18:02:17'!
ERROR!

!testRun: #CreditCardTest #test02 stamp: 'CJ 11/24/2020 18:02:17'!
ERROR!
!CreditCard class methodsFor: 'error descriptions' stamp: 'CJ 11/24/2020 18:02:26'!
invalidDigitErrorDescription
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'CJ 11/24/2020 18:02:38' prior: 50960902!
invalidDigitErrorDescription
	
	^ 'The provided number contains one or more invalid digits'! !

!testRun: #CreditCardTest #test02 stamp: 'CJ 11/24/2020 18:02:40'!
FAILURE!
!String methodsFor: 'testing' stamp: 'CJ 11/24/2020 18:03:09' prior: 50960866!
isNumeric
	"Answer true if the receiver contains only digits."
	^ self allSatisfy: [:each| each isDigit]! !

!testRun: #CreditCardTest #test02 stamp: 'CJ 11/24/2020 18:03:16'!
FAILURE!

!testRun: #CreditCardTest #test01NumberLengthMustBeCorrect stamp: 'CJ 11/24/2020 18:03:20'!
PASSED!

!testRun: #CreditCardTest #test02 stamp: 'CJ 11/24/2020 18:03:20'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 18:03:49'!
test02NumberMustOnlyContainDigits

	self
		should: [ CreditCard withNumber: self numberWithNonNumericCharacter ownedBy: self defaultName expiringOn: self dateForNonExpired ]
		raise: Error
		withMessageText: CreditCard invalidDigitErrorDescription.! !

!methodRemoval: CreditCardTest #test02 stamp: 'CJ 11/24/2020 18:03:49'!
test02

	self
		should: [ CreditCard withNumber: self numberWithNonNumericCharacter ownedBy: self defaultName expiringOn: self dateForNonExpired ]
		raise: Error
		withMessageText: CreditCard invalidDigitErrorDescription.!
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 18:04:20' prior: 50960929!
test02NumberMustOnlyContainDigits

	| badNumbers |
	self
		should: [ CreditCard withNumber: self numberWithNonNumericCharacter ownedBy: self defaultName expiringOn: self dateForNonExpired ]
		raise: Error
		withMessageText: CreditCard invalidDigitErrorDescription.! !
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 18:04:34' prior: 50960949!
test02NumberMustOnlyContainDigits

	| badNumbers |
	
	badNumbers := #().
	self
		should: [ CreditCard withNumber: self numberWithNonNumericCharacter ownedBy: self defaultName expiringOn: self dateForNonExpired ]
		raise: Error
		withMessageText: CreditCard invalidDigitErrorDescription.! !
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 18:04:52' prior: 50960961!
test02NumberMustOnlyContainDigits

	| badNumbers |
	
	badNumbers := #().
	badNumbers do: [ :a].
	self
		should: [ CreditCard withNumber: self numberWithNonNumericCharacter ownedBy: self defaultName expiringOn: self dateForNonExpired ]
		raise: Error
		withMessageText: CreditCard invalidDigitErrorDescription.! !
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 18:05:34' prior: 50960973!
test02NumberMustOnlyContainDigits

	| badNumbers |
	
	badNumbers := #().
	badNumbers do: [ :aBadNumber |
		self
			should: [ CreditCard withNumber: self numberWithNonNumericCharacter ownedBy: self defaultName expiringOn: self dateForNonExpired ]
			raise: Error
			withMessageText: CreditCard invalidDigitErrorDescription.
		].
	! !
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 18:05:58' prior: 50960986!
test02NumberMustOnlyContainDigits

	| badNumbers |
	
	badNumbers := #().
	badNumbers do: [ :aBadNumber |
		self
			should: [ CreditCard withNumber: aBadNumber ownedBy: self defaultName expiringOn: self dateForNonExpired ]
			raise: Error
			withMessageText: CreditCard invalidDigitErrorDescription.
		].
	! !

!methodRemoval: CreditCardTest #numberWithNonNumericCharacter stamp: 'CJ 11/24/2020 18:06:03'!
numberWithNonNumericCharacter
	
	^ '75a1117511117511'!
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 18:06:21' prior: 50961000!
test02NumberMustOnlyContainDigits

	| badNumbers |
	
	badNumbers := #('75a1117511117511' '75111.7511117511').
	badNumbers do: [ :aBadNumber |
		self
			should: [ CreditCard withNumber: aBadNumber ownedBy: self defaultName expiringOn: self dateForNonExpired ]
			raise: Error
			withMessageText: CreditCard invalidDigitErrorDescription.
		].
	! !
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 18:06:37' prior: 50961018!
test02NumberMustOnlyContainDigits

	| badNumbers |
	
	badNumbers := #('75a1117511117511' '75111.7511117511' '7511175111#17511').
	badNumbers do: [ :aBadNumber |
		self
			should: [ CreditCard withNumber: aBadNumber ownedBy: self defaultName expiringOn: self dateForNonExpired ]
			raise: Error
			withMessageText: CreditCard invalidDigitErrorDescription.
		].
	! !
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 18:06:45' prior: 50961032!
test02NumberMustOnlyContainDigits

	| badNumbers |
	
	badNumbers := #('75a1117511117511' '75111.7511117511').
	badNumbers do: [ :aBadNumber |
		self
			should: [ CreditCard withNumber: aBadNumber ownedBy: self defaultName expiringOn: self dateForNonExpired ]
			raise: Error
			withMessageText: CreditCard invalidDigitErrorDescription.
		].
	! !
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 18:06:56' prior: 50961047!
test02NumberMustOnlyContainDigits

	| badNumbers |
	
	badNumbers := #('75a1117511117511' '75111.7511117511' '75111.7511117511').
	badNumbers do: [ :aBadNumber |
		self
			should: [ CreditCard withNumber: aBadNumber ownedBy: self defaultName expiringOn: self dateForNonExpired ]
			raise: Error
			withMessageText: CreditCard invalidDigitErrorDescription.
		].
	! !
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 18:08:25' prior: 50961061!
test02NumberMustOnlyContainDigits

	| badNumbers |
	
	badNumbers := #('75a1117511117511' '75111.7511117511' '7511175111�17511').
	badNumbers do: [ :aBadNumber |
		self
			should: [ CreditCard withNumber: aBadNumber ownedBy: self defaultName expiringOn: self dateForNonExpired ]
			raise: Error
			withMessageText: CreditCard invalidDigitErrorDescription.
		].
	! !

!testRun: #CreditCardTest #test02NumberMustOnlyContainDigits stamp: 'CJ 11/24/2020 18:08:41'!
PASSED!

!testRun: #CreditCardTest #test01NumberLengthMustBeCorrect stamp: 'CJ 11/24/2020 18:08:41'!
PASSED!

!testRun: #CreditCardTest #test02NumberMustOnlyContainDigits stamp: 'CJ 11/24/2020 18:08:41'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 18:09:18'!
test03CardValidUntilLastMonthIsExpired

	| badNumbers |
	
	badNumbers := #('75a1117511117511' '75111.7511117511' '7511175111�17511').
	badNumbers do: [ :aBadNumber |
		self
			should: [ CreditCard withNumber: aBadNumber ownedBy: self defaultName expiringOn: self dateForNonExpired ]
			raise: Error
			withMessageText: CreditCard invalidDigitErrorDescription.
		].
	! !
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 18:10:05' prior: 50961100!
test03CardValidUntilLastMonthIsExpired

	| card |
	card := CreditCard withNumber: self defaultNumber ownedBy: self defaultName expiringOn: self lastMonth.
	self assert: card isExpired.! !
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 18:10:13' prior: 50961115!
test03CardValidUntilLastMonthIsExpired

	| card |
	
	card := CreditCard withNumber: self defaultNumber ownedBy: self defaultName expiringOn: self lastMonth.
	self assert: card isExpired.! !

!testRun: #CreditCardTest #test03CardValidUntilLastMonthIsExpired stamp: 'CJ 11/24/2020 18:10:14'!
ERROR!
!CreditCardTest methodsFor: 'support' stamp: 'CJ 11/24/2020 18:10:32'!
defaultNumber
	self shouldBeImplemented.! !
!CreditCardTest methodsFor: 'support' stamp: 'CJ 11/24/2020 18:10:48' prior: 50961136!
defaultNumber
	
	^ '7511117511117511'! !

!testRun: #CreditCardTest #test03CardValidUntilLastMonthIsExpired stamp: 'CJ 11/24/2020 18:10:49'!
ERROR!
!CreditCardTest methodsFor: 'support' stamp: 'CJ 11/24/2020 18:10:59'!
lastMonth
	self shouldBeImplemented.! !
!CreditCardTest methodsFor: 'support' stamp: 'CJ 11/24/2020 18:11:32' prior: 50961148!
lastMonth
	
	^ GregorianMonthOfYear year: GregorianYear current month: GregorianMonth current previous! !

!testRun: #CreditCardTest #test03CardValidUntilLastMonthIsExpired stamp: 'CJ 11/24/2020 18:11:37'!
PASSED!

!testRun: #CreditCardTest #test01NumberLengthMustBeCorrect stamp: 'CJ 11/24/2020 18:11:37'!
PASSED!

!testRun: #CreditCardTest #test02NumberMustOnlyContainDigits stamp: 'CJ 11/24/2020 18:11:37'!
PASSED!

!testRun: #CreditCardTest #test03CardValidUntilLastMonthIsExpired stamp: 'CJ 11/24/2020 18:11:37'!
PASSED!

!testRun: #CreditCardTest #test01NumberLengthMustBeCorrect stamp: 'CJ 11/24/2020 18:12:03'!
PASSED!

!testRun: #CreditCardTest #test02NumberMustOnlyContainDigits stamp: 'CJ 11/24/2020 18:12:03'!
PASSED!

!testRun: #CreditCardTest #test03CardValidUntilLastMonthIsExpired stamp: 'CJ 11/24/2020 18:12:03'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 18:12:26'!
test04CardValidUntilThisMonthIsNotExpired

	| card |
	
	card := CreditCard withNumber: self defaultNumber ownedBy: self defaultName expiringOn: self lastMonth.
	self assert: card isExpired.! !
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 18:12:33' prior: 50961181!
test04CardValidUntilThisMonthIsNotExpired

	| card |
	
	card := CreditCard withNumber: self defaultNumber ownedBy: self defaultName expiringOn: self thisMonth.
	self assert: card isExpired.! !
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 11/24/2020 18:12:42' prior: 50961190!
test04CardValidUntilThisMonthIsNotExpired

	| card |
	
	card := CreditCard withNumber: self defaultNumber ownedBy: self defaultName expiringOn: self thisMonth.
	self deny: card isExpired.! !

!testRun: #CreditCardTest #test04CardValidUntilThisMonthIsNotExpired stamp: 'CJ 11/24/2020 18:12:43'!
ERROR!
!CreditCardTest methodsFor: 'support' stamp: 'CJ 11/24/2020 18:12:59'!
thisMonth
	
	^ GregorianMonthOfYear year: GregorianYear current month: GregorianMonth current! !

!testRun: #CreditCardTest #test01NumberLengthMustBeCorrect stamp: 'CJ 11/24/2020 18:13:01'!
PASSED!

!testRun: #CreditCardTest #test02NumberMustOnlyContainDigits stamp: 'CJ 11/24/2020 18:13:01'!
PASSED!

!testRun: #CreditCardTest #test03CardValidUntilLastMonthIsExpired stamp: 'CJ 11/24/2020 18:13:01'!
PASSED!

!testRun: #CreditCardTest #test04CardValidUntilThisMonthIsNotExpired stamp: 'CJ 11/24/2020 18:13:01'!
PASSED!
!CreditCard methodsFor: 'assertions' stamp: 'CJ 11/26/2020 13:11:17' prior: 50960883!
assertValidNumber: potentialCreditCardNumber
	
	potentialCreditCardNumber size = 16
		ifFalse: [ self error: self class invalidNumberLengthErrorDescription ].
	(potentialCreditCardNumber allSatisfy: [:aCharacter | aCharacter isDigit])
		ifFalse: [ self error: self class invalidDigitErrorDescription ].! !

!testRun: #CreditCardTest #test01NumberLengthMustBeCorrect stamp: 'CJ 11/26/2020 13:11:29'!
PASSED!

!testRun: #CreditCardTest #test02NumberMustOnlyContainDigits stamp: 'CJ 11/26/2020 13:11:29'!
PASSED!

!testRun: #CreditCardTest #test03CardValidUntilLastMonthIsExpired stamp: 'CJ 11/26/2020 13:11:29'!
PASSED!

!testRun: #CreditCardTest #test04CardValidUntilThisMonthIsNotExpired stamp: 'CJ 11/26/2020 13:11:29'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/26/2020 13:11:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJ 11/26/2020 13:11:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJ 11/26/2020 13:11:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJ 11/26/2020 13:11:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSoldByTheStore stamp: 'CJ 11/26/2020 13:11:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CJ 11/26/2020 13:11:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJ 11/26/2020 13:11:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJ 11/26/2020 13:11:34'!
PASSED!

!testRun: #CartTest #test09CartCalculatesCostOfSingleItemCorrectly stamp: 'CJ 11/26/2020 13:11:34'!
PASSED!

!testRun: #CartTest #test10CartCalculatesCostOfManyItemsCorrectly stamp: 'CJ 11/26/2020 13:11:34'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/26/2020 13:11:34'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/26/2020 13:11:34'!
FAILURE!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/26/2020 13:11:34'!
ERROR!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/26/2020 13:11:34'!
FAILURE!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/26/2020 13:11:34'!
FAILURE!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/26/2020 13:11:34'!
FAILURE!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/26/2020 13:11:34'!
ERROR!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/26/2020 13:11:34'!
ERROR!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 11/26/2020 13:11:34'!
ERROR!

!testRun: #CreditCardTest #test01NumberLengthMustBeCorrect stamp: 'CJ 11/26/2020 13:11:34'!
PASSED!

!testRun: #CreditCardTest #test02NumberMustOnlyContainDigits stamp: 'CJ 11/26/2020 13:11:34'!
PASSED!

!testRun: #CreditCardTest #test03CardValidUntilLastMonthIsExpired stamp: 'CJ 11/26/2020 13:11:34'!
PASSED!

!testRun: #CreditCardTest #test04CardValidUntilThisMonthIsNotExpired stamp: 'CJ 11/26/2020 13:11:34'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/26/2020 13:11:36'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/26/2020 13:12:23' prior: 50956685!
defaultCreditCard
	
	^ CreditCard
		withNumber: '7511117511117511'
		ownedBy: 'Norbert Degoas'
		expiringOn: (self dateForNonExpired).! !
!CashierTest methodsFor: 'support' stamp: 'CJ 11/26/2020 13:12:32' prior: 50956702!
expiredCreditCard
	
	^ CreditCard
		withNumber: '7511117511117511'
		ownedBy: 'Norbert Degoas'
		expiringOn: (self dateForExpired).! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/26/2020 13:12:39'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/26/2020 13:12:39'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/26/2020 13:12:39'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/26/2020 13:12:39'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/26/2020 13:12:39'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/26/2020 13:12:39'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/26/2020 13:12:39'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/26/2020 13:12:39'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 11/26/2020 13:12:39'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/26/2020 13:12:43'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJ 11/26/2020 13:12:43'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJ 11/26/2020 13:12:43'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJ 11/26/2020 13:12:43'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSoldByTheStore stamp: 'CJ 11/26/2020 13:12:43'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CJ 11/26/2020 13:12:43'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJ 11/26/2020 13:12:43'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJ 11/26/2020 13:12:43'!
PASSED!

!testRun: #CartTest #test09CartCalculatesCostOfSingleItemCorrectly stamp: 'CJ 11/26/2020 13:12:43'!
PASSED!

!testRun: #CartTest #test10CartCalculatesCostOfManyItemsCorrectly stamp: 'CJ 11/26/2020 13:12:43'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/26/2020 13:12:43'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/26/2020 13:12:43'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/26/2020 13:12:43'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/26/2020 13:12:43'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/26/2020 13:12:43'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/26/2020 13:12:43'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/26/2020 13:12:43'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/26/2020 13:12:43'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 11/26/2020 13:12:43'!
PASSED!

!testRun: #CreditCardTest #test01NumberLengthMustBeCorrect stamp: 'CJ 11/26/2020 13:12:43'!
PASSED!

!testRun: #CreditCardTest #test02NumberMustOnlyContainDigits stamp: 'CJ 11/26/2020 13:12:43'!
PASSED!

!testRun: #CreditCardTest #test03CardValidUntilLastMonthIsExpired stamp: 'CJ 11/26/2020 13:12:43'!
PASSED!

!testRun: #CreditCardTest #test04CardValidUntilThisMonthIsNotExpired stamp: 'CJ 11/26/2020 13:12:43'!
PASSED!

----SNAPSHOT----(26 November 2020 13:17:45) CuisUniversity-4384.image priorSource: 19800256!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/26/2020 13:32:36' prior: 50960396!
assertReceipt: receipt isCorrectForCart: cart

	| items catalog |
	
	items := cart items.
	catalog := cart catalog.

	self assert: items size equals: (receipt at: #purchasedItems) size.
	items do: [ :itemToCheck |
		self
			assert: (items occurrencesOf: itemToCheck)
			equals: ((receipt at: #purchasedItems) occurrencesOf: itemToCheck). 
		].
	
	self assert: cart totalItemCost equals: (receipt at: #amountCharged).
	self
		assert: (items sum: [:itemToSumPriceOf | catalog at: itemToSumPriceOf])
		equals: (receipt at: #amountCharged).! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/26/2020 13:32:38'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/26/2020 13:32:38'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/26/2020 13:32:38'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/26/2020 13:32:38'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/26/2020 13:32:38'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/26/2020 13:32:38'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/26/2020 13:32:38'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/26/2020 13:32:38'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 11/26/2020 13:32:38'!
PASSED!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/26/2020 13:33:03'!
assertReceipt: receipt isForItems: items

	self assert: items size equals: (receipt at: #purchasedItems) size.
	items do: [ :itemToCheck |
		self
			assert: (items occurrencesOf: itemToCheck)
			equals: ((receipt at: #purchasedItems) occurrencesOf: itemToCheck). 
		]! !
!CashierTest methodsFor: 'support' stamp: 'CJ 11/26/2020 13:33:03' prior: 50961459!
assertReceipt: receipt isCorrectForCart: cart

	| items catalog |
	
	items := cart items.
	catalog := cart catalog.

	self assertReceipt: receipt isForItems: items.
	
	self assert: cart totalItemCost equals: (receipt at: #amountCharged).
	self
		assert: (items sum: [:itemToSumPriceOf | catalog at: itemToSumPriceOf])
		equals: (receipt at: #amountCharged).! !
!CashierTest methodsFor: 'support' stamp: 'CJ 11/26/2020 13:33:48' prior: 50961521!
assertReceipt: receipt isCorrectForCart: cart

	| items catalog |
	
	items := cart items.
	catalog := cart catalog.

	self assertReceipt: receipt isForItems: items.
	
	self assert: cart totalItemCost equals: (receipt at: #amountCharged).
	self
		assert: (cart items sum: [:itemToSumPriceOf | catalog at: itemToSumPriceOf])
		equals: (receipt at: #amountCharged).! !
!CashierTest methodsFor: 'support' stamp: 'CJ 11/26/2020 13:34:34' prior: 50961535!
assertReceipt: receipt isCorrectForCart: cart

	| items |
	
	items := cart items.

	self assertReceipt: receipt isForItems: items.
	
	self assert: cart totalItemCost equals: (receipt at: #amountCharged).
	self
		assert: (cart items sum: [:itemToSumPriceOf | cart catalog at: itemToSumPriceOf])
		equals: (receipt at: #amountCharged).! !
!CashierTest methodsFor: 'support' stamp: 'CJ 11/26/2020 13:34:50' prior: 50961550!
assertReceipt: receipt isCorrectForCart: cart

	| items |
	
	items := cart items.

	self assertReceipt: receipt isForItems: cart items.
	
	self assert: cart totalItemCost equals: (receipt at: #amountCharged).
	self
		assert: (cart items sum: [:itemToSumPriceOf | cart catalog at: itemToSumPriceOf])
		equals: (receipt at: #amountCharged).! !
!CashierTest methodsFor: 'support' stamp: 'CJ 11/26/2020 13:34:59' prior: 50961564!
assertReceipt: receipt isCorrectForCart: cart

	self assertReceipt: receipt isForItems: cart items.
	
	self assert: cart totalItemCost equals: (receipt at: #amountCharged).
	self
		assert: (cart items sum: [:itemToSumPriceOf | cart catalog at: itemToSumPriceOf])
		equals: (receipt at: #amountCharged).! !
!CashierTest methodsFor: 'support' stamp: 'CJ 11/26/2020 13:35:37'!
assertReceipt: receipt chargesCostOf: cart

	self assert: cart totalItemCost equals: (receipt at: #amountCharged).
	self
		assert: (cart items sum: [:itemToSumPriceOf | cart catalog at: itemToSumPriceOf])
		equals: (receipt at: #amountCharged)! !
!CashierTest methodsFor: 'support' stamp: 'CJ 11/26/2020 13:35:38' prior: 50961578!
assertReceipt: receipt isCorrectForCart: cart

	self assertReceipt: receipt isForItems: cart items.
	
	self assertReceipt: receipt chargesCostOf: cart.! !
!CashierTest methodsFor: 'support' stamp: 'CJ 11/26/2020 13:35:44' prior: 50961601!
assertReceipt: receipt isCorrectForCart: cart

	self assertReceipt: receipt isForItems: cart items.	
	self assertReceipt: receipt chargesCostOf: cart.! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/26/2020 13:35:46'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/26/2020 13:35:46'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/26/2020 13:35:46'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/26/2020 13:35:46'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/26/2020 13:35:46'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/26/2020 13:35:46'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/26/2020 13:35:46'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/26/2020 13:35:46'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 11/26/2020 13:35:46'!
PASSED!
!CashierTest methodsFor: 'support' stamp: 'CJ 11/26/2020 13:36:50' prior: 50961590!
assertReceipt: receipt chargesCostOf: cart

	| catalog |
	
	catalog := cart catalog.

	self assert: cart totalItemCost equals: (receipt at: #amountCharged).
	self
		assert: (cart items sum: [:itemToSumPriceOf | catalog at: itemToSumPriceOf])
		equals: (receipt at: #amountCharged)! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/26/2020 13:39:34' prior: 50957034!
test01NewCashierHasNoSales

	| cashier |
	
	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	
	self assert: cashier salesMade isEmpty.! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/26/2020 13:39:35'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/26/2020 13:39:35'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/26/2020 13:39:35'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/26/2020 13:39:35'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/26/2020 13:39:35'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/26/2020 13:39:35'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/26/2020 13:39:35'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/26/2020 13:39:35'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/26/2020 13:39:35'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 11/26/2020 13:39:35'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/26/2020 13:39:41' prior: 50957075!
test02CannotCheckoutOnEmptyCart

	| cart cashier |
	
	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self emptyCart.
	
	self
		should: [ cashier checkout: cart withCreditCard: self defaultCreditCard ]
		raise: Error
		withMessageText: Cashier emptyCartErrorDescription.
	
	self assert: cashier salesMade isEmpty.! !

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/26/2020 13:39:44'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/26/2020 13:39:44'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/26/2020 13:39:44'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/26/2020 13:39:44'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/26/2020 13:39:44'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/26/2020 13:39:44'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/26/2020 13:39:44'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/26/2020 13:39:44'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/26/2020 13:39:44'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 11/26/2020 13:39:44'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/26/2020 13:40:03' prior: 50958185!
test03CashierRegistersSaleOnCheckout

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithManyItems.
	
	cashier checkout: cart withCreditCard: self defaultCreditCard.

	self assert: 1 equals: cashier salesMade size.! !

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/26/2020 13:40:05'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/26/2020 13:40:05'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/26/2020 13:40:05'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/26/2020 13:40:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/26/2020 13:40:05'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/26/2020 13:40:05'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/26/2020 13:40:05'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/26/2020 13:40:05'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/26/2020 13:40:05'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 11/26/2020 13:40:05'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/26/2020 13:40:30' prior: 50959814!
test04CheckoutWithInsufficientFundsIsRejected

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self insufficientFundsMerchantProcessor.
	cart := self cartWithManyItems.

	self
		should: [ cashier checkout: cart withCreditCard: self defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor insufficientFundsErrorDescription.
	
	self assert: cashier salesMade isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/26/2020 13:40:36' prior: 50959865!
test05CheckoutWithExpiredCreditCardIsRejected

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self workingMerchantProcessor.
	cart := self cartWithManyItems.

	self
		should: [ cashier checkout: cart withCreditCard: self expiredCreditCard. ]
		raise: Error
		withMessageText: Cashier expiredCreditCardErrorDescription.
	
	self assert: cashier salesMade isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 11/26/2020 13:40:46' prior: 50959915!
test06CheckoutWithInvalidCreditCardIsRejected

	| cart cashier |

	cashier := Cashier withMerchantProcessor: self invalidCreditCardMerchantProcessor.
	cart := self cartWithManyItems.

	self
		should: [ cashier checkout: cart withCreditCard: self defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor invalidCreditCardErrorDescription.
	
	self assert: cashier salesMade isEmpty.! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/26/2020 13:41:11'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/26/2020 13:41:11'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/26/2020 13:41:11'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/26/2020 13:41:11'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/26/2020 13:41:11'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/26/2020 13:41:11'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/26/2020 13:41:11'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/26/2020 13:41:11'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 11/26/2020 13:41:11'!
PASSED!

!methodRemoval: Cashier #numberOfSales stamp: 'CJ 11/26/2020 13:41:20'!
numberOfSales
	
	^ numberOfSales!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/26/2020 13:41:22'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/26/2020 13:41:22'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/26/2020 13:41:22'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/26/2020 13:41:22'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/26/2020 13:41:22'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/26/2020 13:41:22'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/26/2020 13:41:22'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/26/2020 13:41:22'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 11/26/2020 13:41:22'!
PASSED!

----SNAPSHOT----(26 November 2020 13:42:09) CuisUniversity-4384.image priorSource: 20153747!

