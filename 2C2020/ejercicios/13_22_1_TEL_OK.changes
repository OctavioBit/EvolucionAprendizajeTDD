

----STARTUP---- (29 October 2020 17:33:04) as C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CuisNew\CuisUniversity-4383.image!


TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'AM 10/29/2020 17:33:55'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'AM 10/29/2020 17:37:53'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliTest methodsFor: 'nil' stamp: 'AM 10/29/2020 17:37:44'!
test01NewGameIsNotOver

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	self deny: terniLapilli isOver.	
	! !

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 10/29/2020 17:38:18'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 17:38:24'!
isOver
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 17:38:31' prior: 50879922!
isOver
	^false.! !

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 10/29/2020 17:38:33'!
PASSED!

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 10/29/2020 17:38:33'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 17:40:12'!
test02XStartsPlaying

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	self assert: terniLapilli isPlayingX.	
	! !

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 10/29/2020 17:40:18'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/29/2020 17:40:34'!
isPlayingX
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/29/2020 17:40:47' prior: 50879946!
isPlayingX
	
	^true.! !

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 10/29/2020 17:40:48'!
PASSED!

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 10/29/2020 17:40:48'!
PASSED!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 10/29/2020 17:40:48'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 17:47:36'!
test03
	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 0@1.
	
	self assert: terniLapilli isPlayingO.	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 17:47:59'!
test03OPlaysAfterX

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 0@1.
	
	self assert: terniLapilli isPlayingO.	
	! !

!methodRemoval: TerniLapilliTest #test03 stamp: 'AM 10/29/2020 17:48:09'!
test03
	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 0@1.
	
	self assert: terniLapilli isPlayingO.	
	!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 10/29/2020 17:48:13'!
ERROR!
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 17:48:38'!
putXat: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 17:48:52' prior: 50879987!
putXat: aPoint 
	
	! !

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 10/29/2020 17:48:55'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 17:49:14'!
isPlayingO
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 17:49:34' prior: 50879999!
isPlayingO
	
	^true.! !

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 10/29/2020 17:49:38'!
PASSED!

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 10/29/2020 17:49:38'!
PASSED!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 10/29/2020 17:49:38'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 10/29/2020 17:49:38'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 17:50:39' prior: 50879970!
test03OPlaysAfterX

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 0@1.
	
	self deny: terniLapilli isPlayingX.
	self assert: terniLapilli isPlayingO.	
	! !

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 10/29/2020 17:50:41'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:12:50' prior: 50879937!
test02XStartsPlaying

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	self deny: terniLapilli isPlayingO.
	self assert: terniLapilli isPlayingX.	
	! !

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 10/29/2020 18:14:09'!
FAILURE!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 10/29/2020 18:14:38'!
PASSED!

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 10/29/2020 18:14:38'!
PASSED!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 10/29/2020 18:14:38'!
FAILURE!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 10/29/2020 18:14:38'!
FAILURE!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 10/29/2020 18:14:40'!
FAILURE!

Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'AM 10/29/2020 18:15:24'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

Object subclass: #TerniLapilli
	instanceVariableNames: 'playerTurn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'AM 10/29/2020 18:17:13'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'playerTurn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/29/2020 18:17:45' prior: 50880004!
isPlayingO
	
	^(playerTurn = #O).! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/29/2020 18:18:04' prior: 50879950!
isPlayingX
	
	^(playerTurn = #X).! !
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 18:18:18' prior: 50879992!
putXat: aPoint 
	
	! !
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 18:18:54' overrides: 16896425!
initialize

	playerTurn := #X.! !

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 10/29/2020 18:19:15'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 10/29/2020 18:19:19'!
FAILURE!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 10/29/2020 18:19:19'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 18:19:36' prior: 50880088!
putXat: aPoint 
	
	playerTurn := #O! !
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 18:19:37' prior: 50880105!
putXat: aPoint 
	
	playerTurn := #O.! !

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 10/29/2020 18:19:41'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:21:41'!
test04XPlaysAfterO

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 0@1.
	terniLapilli putOat: 0@2.
	
	self deny: terniLapilli isPlayingO.
	self assert: terniLapilli isPlayingX.	
	! !

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'AM 10/29/2020 18:21:50'!
ERROR!
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 18:21:58'!
putOat: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 18:22:19' prior: 50880128!
putOat: aPoint 
	
	playerTurn := #X.! !

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'AM 10/29/2020 18:22:21'!
PASSED!

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 10/29/2020 18:22:21'!
PASSED!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 10/29/2020 18:22:21'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 10/29/2020 18:22:21'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'AM 10/29/2020 18:22:21'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:25:06'!
test05CantPlayOnOtherPlayersTurn

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	self
		should: [terniLapilli putOat: 0@2.]	
		raise: Error
		
	! !

self!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:30:40' prior: 50880152!
test05CantPlayOnOtherPlayersTurn

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	self
		should: [ terniLapilli putOat: 0@1]
		raise: Error
		withMessageText: TerniLapilli incorrectPlayerTurnErrorDescription.
		
	! !

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 10/29/2020 18:30:45'!
ERROR!
!TerniLapilli class methodsFor: 'error messages' stamp: 'AM 10/29/2020 18:31:30'!
incorrectPlayerTurnErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'AM 10/29/2020 18:32:14' prior: 50880174!
incorrectPlayerTurnErrorDescription
	
	^'Its not players turn' ! !

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 10/29/2020 18:32:16'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 18:35:20' prior: 50880133!
putOat: aPoint 
	
	self isPlayingO ifFalse: [self signal].
	playerTurn := #X.! !
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 18:35:41' prior: 50880189!
putOat: aPoint 
	
	self isPlayingO ifFalse: [self signalIncorrectPlayerTurn].
	playerTurn := #X.! !
!TerniLapilli methodsFor: 'error signals' stamp: 'AM 10/29/2020 18:36:36'!
signalIncorrectPlayerTurn

	^self error: self class incorrectPlayerTurnErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:37:05' prior: 50880161!
test05CantPlayOnOtherPlayersTurn

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	self
		should: [ terniLapilli putOat: 0@1]
		raise: Error
		withMessageText: TerniLapilli incorrectPlayerTurnErrorDescription.
		
	! !

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 10/29/2020 18:37:05'!
PASSED!

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 10/29/2020 18:37:05'!
PASSED!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 10/29/2020 18:37:05'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 10/29/2020 18:37:05'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'AM 10/29/2020 18:37:05'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 10/29/2020 18:37:05'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:38:15' prior: 50880208!
test05CantPlayOnOtherPlayersTurn

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	self
		should: [ terniLapilli putOat: 0@1]
		raise: Error
		withMessageText: TerniLapilli incorrectPlayerTurnErrorDescription.
		
	terniLapilli putXat: 0@1.
	
	self
		should: [ terniLapilli putXat: 0@2]
		raise: Error
		withMessageText: TerniLapilli incorrectPlayerTurnErrorDescription.
		
	! !

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 10/29/2020 18:38:17'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 18:38:37' prior: 50880109!
putXat: aPoint 
	
	self isPlayingX ifFalse: [self signalIncorrectPlayerTurn].
	playerTurn := #O.! !

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 10/29/2020 18:38:40'!
PASSED!

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 10/29/2020 18:38:40'!
PASSED!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 10/29/2020 18:38:40'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 10/29/2020 18:38:40'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'AM 10/29/2020 18:38:40'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 10/29/2020 18:38:40'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:42:00'!
test06

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 0@0.
	
	self assert: (terniLapilli at: 0@0)	 equals: #X.
	! !

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 18:42:02'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:42:31' prior: 50880280!
test06

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 0@0.
	
	self assert: (terniLapilli atPosition: 0@0)	 equals: #X.
	! !

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 18:42:33'!
ERROR!
!TerniLapilli methodsFor: 'accessing' stamp: 'AM 10/29/2020 18:42:45'!
atPosition: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'accessing' stamp: 'AM 10/29/2020 18:42:59' prior: 50880301!
atPosition: aPoint 
	
	^0@0.! !

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 18:43:00'!
FAILURE!
!TerniLapilli methodsFor: 'accessing' stamp: 'AM 10/29/2020 18:43:24' prior: 50880306!
atPosition: aPoint 
	
	^#X.! !

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 18:43:33'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 18:44:13'!
PASSED!

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 10/29/2020 18:44:13'!
PASSED!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 10/29/2020 18:44:13'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 10/29/2020 18:44:13'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'AM 10/29/2020 18:44:13'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 10/29/2020 18:44:13'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 18:44:13'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:45:02'!
test06XCanPlaceCorrectly

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 0@0.
	
	self assert: (terniLapilli atPosition: 0@0)	 equals: #X.
	! !

!methodRemoval: TerniLapilliTest #test06 stamp: 'AM 10/29/2020 18:45:02'!
test06

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 0@0.
	
	self assert: (terniLapilli atPosition: 0@0)	 equals: #X.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:46:00'!
test07OCanPlaceCorrectly

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 0@0.
	terniLapilli putOat: 1@1.
	
	self assert: (terniLapilli atPosition: 1@1)	 equals: #O.
	! !

!testRun: #TerniLapilliTest #test07OCanPlaceCorrectly stamp: 'AM 10/29/2020 18:46:02'!
FAILURE!

Object subclass: #TerniLapilli
	instanceVariableNames: 'playerTurn board'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'AM 10/29/2020 18:52:16'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'playerTurn board'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'initialization' stamp: 'AM 10/29/2020 18:52:46' prior: 50880092 overrides: 16896425!
initialize
	
	board := Array2D.
	playerTurn := #X.! !
!TerniLapilli methodsFor: 'initialization' stamp: 'AM 10/29/2020 18:53:20' prior: 50880380 overrides: 16896425!
initialize
	
	board := Array2D new: 3@3.
	playerTurn := #X.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:53:58' prior: 50880355!
test07OCanPlaceCorrectly

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1.
	terniLapilli putOat: 0@0.
	
	self assert: (terniLapilli atPosition: 1@1)	 equals: #O.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:54:02' prior: 50880392!
test07OCanPlaceCorrectly

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1.
	terniLapilli putOat: 2@2.
	
	self assert: (terniLapilli atPosition: 1@1)	 equals: #O.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:54:08' prior: 50880402!
test07OCanPlaceCorrectly

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1.
	terniLapilli putOat: 2@2.
	
	self assert: (terniLapilli atPosition: 2@2)	 equals: #O.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:54:17' prior: 50880339!
test06XCanPlaceCorrectly

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1.
	
	self assert: (terniLapilli atPosition: 1@1)	 equals: #X.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:54:30' prior: 50880237!
test05CantPlayOnOtherPlayersTurn

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	self
		should: [ terniLapilli putOat: 1@2]
		raise: Error
		withMessageText: TerniLapilli incorrectPlayerTurnErrorDescription.
		
	terniLapilli putXat: 1@2.
	
	self
		should: [ terniLapilli putXat: 1@3]
		raise: Error
		withMessageText: TerniLapilli incorrectPlayerTurnErrorDescription.
		
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:54:41' prior: 50880116!
test04XPlaysAfterO

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@2.
	terniLapilli putOat: 1@3.
	
	self deny: terniLapilli isPlayingO.
	self assert: terniLapilli isPlayingX.	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:54:46' prior: 50880020!
test03OPlaysAfterX

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@2.
	
	self deny: terniLapilli isPlayingX.
	self assert: terniLapilli isPlayingO.	
	! !
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 18:56:39' prior: 50880195!
putOat: aPoint 
	
	self isPlayingO ifFalse: [self signalIncorrectPlayerTurn].
	
	playerTurn := #X.! !
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 18:57:49' prior: 50880466!
putOat: aPoint 
	
	self isPlayingO ifFalse: [self signalIncorrectPlayerTurn].
	board at: aPoint put: #O.
	playerTurn := #X.! !
!TerniLapilli methodsFor: 'accessing' stamp: 'AM 10/29/2020 18:58:08' prior: 50880313!
atPosition: aPoint 
	
	^board at: aPoint.! !
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 18:58:31' prior: 50880256!
putXat: aPoint 
	
	self isPlayingX ifFalse: [self signalIncorrectPlayerTurn].
	board at: aPoint put: #X.
	playerTurn := #O.! !

!testRun: #TerniLapilliTest #test06XCanPlaceCorrectly stamp: 'AM 10/29/2020 18:58:35'!
ERROR!

!testRun: #TerniLapilliTest #test06XCanPlaceCorrectly stamp: 'AM 10/29/2020 18:58:35'!
ERROR!
!TerniLapilli methodsFor: 'initialization' stamp: 'AM 10/29/2020 18:59:17' prior: 50880386 overrides: 16896425!
initialize
	
	board := Array2D newSize: 3@3.
	playerTurn := #X.! !

!testRun: #TerniLapilliTest #test06XCanPlaceCorrectly stamp: 'AM 10/29/2020 18:59:20'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPlaceCorrectly stamp: 'AM 10/29/2020 18:59:24'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 19:01:42'!
test08CantPlaceOnOccupiedPostition

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1.
	
	self 
		should: [terniLapilli putOat: 1@1]
		raise: Error
		withMessageText: TerniLapilli invalidPlacePositionErrorDescription.
		
	self assert: (terniLapilli atPosition: 1@1) equals: #X.	! !

!testRun: #TerniLapilliTest #test08CantPlaceOnOccupiedPostition stamp: 'AM 10/29/2020 19:01:46'!
ERROR!
!TerniLapilli class methodsFor: 'error messages' stamp: 'AM 10/29/2020 19:02:04'!
invalidPlacePositionErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'AM 10/29/2020 19:02:26' prior: 50880525!
invalidPlacePositionErrorDescription
	
	^'Postition already occupied'! !

!testRun: #TerniLapilliTest #test08CantPlaceOnOccupiedPostition stamp: 'AM 10/29/2020 19:02:27'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 19:03:39' prior: 50880472!
putOat: aPoint 
	
	self isPlayingO ifFalse: [self signalIncorrectPlayerTurn].
	board at: aPoint.
	board at: aPoint put: #O.
	playerTurn := #X.! !
!TerniLapilli methodsFor: 'initialization' stamp: 'AM 10/29/2020 19:03:56' prior: 50880498 overrides: 16896425!
initialize
	
	board := Array2D newSize: 3@3.
	board fillWith: #E.
	playerTurn := #X.! !
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 19:04:58' prior: 50880540!
putOat: aPoint 
	
	self isPlayingO ifFalse: [self signalIncorrectPlayerTurn].
	(board at: aPoint) = #E ifFalse: [self signalIncorrectPlacePosition].
	board at: aPoint put: #O.
	playerTurn := #X.! !
!TerniLapilli methodsFor: 'error signals' stamp: 'AM 10/29/2020 19:05:43'!
signalInvalidPlacePosition

	^self error: self class invalidPlacePositionErrorDescription.! !
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 19:05:53' prior: 50880555!
putOat: aPoint 
	
	self isPlayingO ifFalse: [self signalIncorrectPlayerTurn].
	(board at: aPoint) = #E ifFalse: [self signalInvalidPlacePosition].
	board at: aPoint put: #O.
	playerTurn := #X.! !

!testRun: #TerniLapilliTest #test08CantPlaceOnOccupiedPostition stamp: 'AM 10/29/2020 19:06:09'!
ERROR!

!testRun: #TerniLapilliTest #test08CantPlaceOnOccupiedPostition stamp: 'AM 10/29/2020 19:06:09'!
ERROR!
!TerniLapilli methodsFor: 'initialization' stamp: 'AM 10/29/2020 19:08:51' prior: 50880549 overrides: 16896425!
initialize
	
	board := Array2D newSize: 3@3.
	board fillWithArrayOfArrays: #(#E #E #E #E #E #E #E #E #E).
	playerTurn := #X.! !

!testRun: #TerniLapilliTest #test08CantPlaceOnOccupiedPostition stamp: 'AM 10/29/2020 19:08:57'!
ERROR!

!testRun: #TerniLapilliTest #test08CantPlaceOnOccupiedPostition stamp: 'AM 10/29/2020 19:08:57'!
ERROR!
!TerniLapilli methodsFor: 'initialization' stamp: 'AM 10/29/2020 19:09:29' prior: 50880587 overrides: 16896425!
initialize
	
	board := Array2D newSize: 3@3.
	board fillWithArrayOfArrays: #(#(#E #E #E) #(#E #E #E) #(#E #E #E)).
	playerTurn := #X.! !

!testRun: #TerniLapilliTest #test08CantPlaceOnOccupiedPostition stamp: 'AM 10/29/2020 19:09:33'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 19:09:52'!
test08OCantPlaceOnOccupiedPostition

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1.
	
	self 
		should: [terniLapilli putOat: 1@1]
		raise: Error
		withMessageText: TerniLapilli invalidPlacePositionErrorDescription.
		
	self assert: (terniLapilli atPosition: 1@1) equals: #X.	! !

!methodRemoval: TerniLapilliTest #test08CantPlaceOnOccupiedPostition stamp: 'AM 10/29/2020 19:09:52'!
test08CantPlaceOnOccupiedPostition

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1.
	
	self 
		should: [terniLapilli putOat: 1@1]
		raise: Error
		withMessageText: TerniLapilli invalidPlacePositionErrorDescription.
		
	self assert: (terniLapilli atPosition: 1@1) equals: #X.	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 19:10:43'!
test09XCantPlaceOnOccupiedPostition

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1.
	terniLapilli putOat: 2@2.
	self 
		should: [terniLapilli putXat: 2@2]
		raise: Error
		withMessageText: TerniLapilli invalidPlacePositionErrorDescription.
		
	self assert: (terniLapilli atPosition: 2@2) equals: #X.	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 19:10:46' prior: 50880639!
test09XCantPlaceOnOccupiedPostition

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1.
	terniLapilli putOat: 2@2.
	self 
		should: [terniLapilli putXat: 2@2]
		raise: Error
		withMessageText: TerniLapilli invalidPlacePositionErrorDescription.
		
	self assert: (terniLapilli atPosition: 2@2) equals: #O.	! !

!testRun: #TerniLapilliTest #test09XCantPlaceOnOccupiedPostition stamp: 'AM 10/29/2020 19:10:47'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 19:11:02' prior: 50880484!
putXat: aPoint 
	
	self isPlayingX ifFalse: [self signalIncorrectPlayerTurn].
	(board at: aPoint) = #E ifFalse: [self signalInvalidPlacePosition].
	board at: aPoint put: #X.
	playerTurn := #O.! !

!testRun: #TerniLapilliTest #test09XCantPlaceOnOccupiedPostition stamp: 'AM 10/29/2020 19:11:07'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 19:13:15'!
test10CantPlaceOutOfBounds

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	self 
		should: [terniLapilli putXat: 4@4]
		raise: Error
		withMessageText: TerniLapilli outOfBoundsPlacePositionErrorDescription.
			! !

!testRun: #TerniLapilliTest #test10CantPlaceOutOfBounds stamp: 'AM 10/29/2020 19:13:23'!
ERROR!
!TerniLapilli class methodsFor: 'error messages' stamp: 'AM 10/29/2020 19:13:33'!
outOfBoundsPlacePositionErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'AM 10/29/2020 19:13:49' prior: 50880696!
outOfBoundsPlacePositionErrorDescription
	
	^'Position is out of bounds'! !

!testRun: #TerniLapilliTest #test10CantPlaceOutOfBounds stamp: 'AM 10/29/2020 19:13:50'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 19:15:11' prior: 50880570!
putOat: aPoint 
	
	self isPlayingO ifFalse: [self signalIncorrectPlayerTurn].
	self assertPointIsInRange: aPoint.
	(board at: aPoint) = #E ifFalse: [self signalInvalidPlacePosition].
	board at: aPoint put: #O.
	playerTurn := #X.! !
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 10/29/2020 19:15:56'!
assert! !
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 10/29/2020 19:18:07'!
assertPointIsInRange: aPoint

	aPoint x between: 1 and: 3 do: [aPoint y between: 1 and: 3 do: [^true].].
	self signalInvalidPlacePosition.! !

!methodRemoval: TerniLapilli #assert stamp: 'AM 10/29/2020 19:18:11'!
assert!

!testRun: #TerniLapilliTest #test10CantPlaceOutOfBounds stamp: 'AM 10/29/2020 19:18:22'!
FAILURE!

!testRun: #TerniLapilliTest #test10CantPlaceOutOfBounds stamp: 'AM 10/29/2020 19:18:22'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 19:19:36' prior: 50880670!
putXat: aPoint 
	
	self isPlayingX ifFalse: [self signalIncorrectPlayerTurn].
	self assertPointIsInRange: aPoint.
	(board at: aPoint) = #E ifFalse: [self signalInvalidPlacePosition].
	board at: aPoint put: #X.
	playerTurn := #O.! !

!testRun: #TerniLapilliTest #test10CantPlaceOutOfBounds stamp: 'AM 10/29/2020 19:19:40'!
FAILURE!

!testRun: #TerniLapilliTest #test10CantPlaceOutOfBounds stamp: 'AM 10/29/2020 19:19:40'!
FAILURE!
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 10/29/2020 19:21:29' prior: 50880724!
assertPointIsInRange: aPoint

	(((aPoint x) between: 1 and: 3) and: [(aPoint y) between: 1 and: 3]) ifFalse:[self signalInvalidPlacePosition.].
	! !

!testRun: #TerniLapilliTest #test10CantPlaceOutOfBounds stamp: 'AM 10/29/2020 19:21:52'!
FAILURE!

!testRun: #TerniLapilliTest #test10CantPlaceOutOfBounds stamp: 'AM 10/29/2020 19:21:52'!
FAILURE!
!TerniLapilli methodsFor: 'error signals' stamp: 'AM 10/29/2020 19:23:17'!
signalOutOfBoundsPlacePosition

	^self error: self class outOfBoundsPlacePositionErrorDescription.! !

!testRun: #TerniLapilliTest #test10CantPlaceOutOfBounds stamp: 'AM 10/29/2020 19:23:21'!
FAILURE!

!testRun: #TerniLapilliTest #test10CantPlaceOutOfBounds stamp: 'AM 10/29/2020 19:23:21'!
FAILURE!
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 10/29/2020 19:23:36' prior: 50880757!
assertPointIsInRange: aPoint

	(((aPoint x) between: 1 and: 3) and: [(aPoint y) between: 1 and: 3]) ifFalse:[self signalOutOfBoundsPlacePosition].
	! !

!testRun: #TerniLapilliTest #test10CantPlaceOutOfBounds stamp: 'AM 10/29/2020 19:23:40'!
PASSED!

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 10/29/2020 19:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 10/29/2020 19:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 10/29/2020 19:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'AM 10/29/2020 19:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 10/29/2020 19:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPlaceCorrectly stamp: 'AM 10/29/2020 19:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPlaceCorrectly stamp: 'AM 10/29/2020 19:24:30'!
PASSED!

!testRun: #TerniLapilliTest #test08OCantPlaceOnOccupiedPostition stamp: 'AM 10/29/2020 19:24:30'!
PASSED!

!testRun: #TerniLapilliTest #test09XCantPlaceOnOccupiedPostition stamp: 'AM 10/29/2020 19:24:30'!
PASSED!

!testRun: #TerniLapilliTest #test10CantPlaceOutOfBounds stamp: 'AM 10/29/2020 19:24:30'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 19:28:56'!
test11CantPlaceMoreThanSixPieces

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 2@1; putXat: 2@2; putOat: 2@3.
	
	self 
		should: [terniLapilli putXat: 3@1]
		raise: Error
		withMessageText: TerniLapilli maxAmountOfPiecesOnBoardErrorDescription.
			! !

!testRun: #TerniLapilliTest #test11CantPlaceMoreThanSixPieces stamp: 'AM 10/29/2020 19:29:02'!
ERROR!
!TerniLapilli class methodsFor: 'error messages' stamp: 'AM 10/29/2020 19:29:13'!
maxAmountOfPiecesOnBoardErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'AM 10/29/2020 19:29:43' prior: 50880841!
maxAmountOfPiecesOnBoardErrorDescription
	
	^'No more pieces can be place, a piece should be moved'! !

!testRun: #TerniLapilliTest #test11CantPlaceMoreThanSixPieces stamp: 'AM 10/29/2020 19:29:45'!
FAILURE!

Object subclass: #TerniLapilli
	instanceVariableNames: 'playerTurn board'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'AM 10/29/2020 19:33:06'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'playerTurn board'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/29/2020 19:35:35'!
isTied

	^(6 = board sum: [:piece | piece = #X or: piece = #O])! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/29/2020 19:35:56' prior: 50880868!
isTied

	^(6 = board sum: [:piece | ((piece = #X) or: [piece = #O])])! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/29/2020 19:36:01' prior: 50880873!
isTied

	^(6 = board sum: [:piece | ((piece = #X) or: [piece = #O])]).! !
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 19:37:31' prior: 50880740!
putXat: aPoint 
	
	self isPlayingX ifFalse: [self signalIncorrectPlayerTurn].
	self assertPointIsInRange: aPoint.
	self isTied ifTrue:[self signalMaxAmountOfPieces].
	(board at: aPoint) = #E ifFalse: [self signalInvalidPlacePosition].
	board at: aPoint put: #X.
	playerTurn := #O.! !
!TerniLapilli methodsFor: 'error signals' stamp: 'AM 10/29/2020 19:38:34'!
signalMaxAmountOfPieces

 	^self error: self class maxAmountOfPiecesOnBoardErrorDescription.! !
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 19:39:00' prior: 50880711!
putOat: aPoint 
	
	self isPlayingO ifFalse: [self signalIncorrectPlayerTurn].
	self assertPointIsInRange: aPoint.
	self isTied ifTrue:[self signalMaxAmountOfPieces].
	(board at: aPoint) = #E ifFalse: [self signalInvalidPlacePosition].
	board at: aPoint put: #O.
	playerTurn := #X.! !

!testRun: #TerniLapilliTest #test11CantPlaceMoreThanSixPieces stamp: 'AM 10/29/2020 19:39:05'!
ERROR!

!testRun: #TerniLapilliTest #test11CantPlaceMoreThanSixPieces stamp: 'AM 10/29/2020 19:39:05'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/29/2020 19:39:31' prior: 50880878!
isTied

	^(6 = (board sum: [:piece | ((piece = #X) or: [piece = #O])])).! !

!testRun: #TerniLapilliTest #test11CantPlaceMoreThanSixPieces stamp: 'AM 10/29/2020 19:39:36'!
ERROR!

!testRun: #TerniLapilliTest #test11CantPlaceMoreThanSixPieces stamp: 'AM 10/29/2020 19:39:36'!
ERROR!

Array2D newSize: 3@3!

self sum: [:elem | elem = nil] ifEmpty: [].!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/29/2020 19:44:53' prior: 50880919!
isTied
	| sum |
	
	board do: [:piece | (piece = #X) or: [piece = #O]].
	
	^(6 = (board sum: [:piece | ((piece = #X) or: [piece = #O])])).! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/29/2020 19:46:17' prior: 50880933!
isTied
	| sum |
	sum := 0.
	
	board do: [:piece | ((piece = #X) or: [piece = #O]) ifTrue: [sum := sum + 1]].
	
	^(6 = sum).! !

!testRun: #TerniLapilliTest #test11CantPlaceMoreThanSixPieces stamp: 'AM 10/29/2020 19:46:22'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 19:47:36'!
test10XCantPlaceOutOfBounds

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	self 
		should: [terniLapilli putXat: 4@4]
		raise: Error
		withMessageText: TerniLapilli outOfBoundsPlacePositionErrorDescription.
			! !

!methodRemoval: TerniLapilliTest #test10CantPlaceOutOfBounds stamp: 'AM 10/29/2020 19:47:41'!
test10CantPlaceOutOfBounds

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	self 
		should: [terniLapilli putXat: 4@4]
		raise: Error
		withMessageText: TerniLapilli outOfBoundsPlacePositionErrorDescription.
			!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 19:47:50'!
test12CantPlaceMoreThanSixPieces

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 2@1; putXat: 2@2; putOat: 2@3.
	
	self 
		should: [terniLapilli putXat: 3@1]
		raise: Error
		withMessageText: TerniLapilli maxAmountOfPiecesOnBoardErrorDescription.
			! !

!methodRemoval: TerniLapilliTest #test11CantPlaceMoreThanSixPieces stamp: 'AM 10/29/2020 19:47:50'!
test11CantPlaceMoreThanSixPieces

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 2@1; putXat: 2@2; putOat: 2@3.
	
	self 
		should: [terniLapilli putXat: 3@1]
		raise: Error
		withMessageText: TerniLapilli maxAmountOfPiecesOnBoardErrorDescription.
			!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 19:48:04'!
test11OCantPlaceOutOfBounds

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	self 
		should: [terniLapilli putOat: 4@4]
		raise: Error
		withMessageText: TerniLapilli outOfBoundsPlacePositionErrorDescription.
			! !

!testRun: #TerniLapilliTest #test11OCantPlaceOutOfBounds stamp: 'AM 10/29/2020 19:48:08'!
FAILURE!

!testRun: #TerniLapilliTest #test11OCantPlaceOutOfBounds stamp: 'AM 10/29/2020 19:48:08'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 19:48:34' prior: 50880998!
test11OCantPlaceOutOfBounds

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	terniLapilli putXat: 1@1.
	
	self 
		should: [terniLapilli putOat: 4@4]
		raise: Error
		withMessageText: TerniLapilli outOfBoundsPlacePositionErrorDescription.
			! !

!testRun: #TerniLapilliTest #test11OCantPlaceOutOfBounds stamp: 'AM 10/29/2020 19:48:36'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 19:49:33' prior: 50880971!
test12CantPlaceMoreThanSixPieces

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 2@1; putXat: 2@2; putOat: 2@3.
	
	self 
		should: [terniLapilli putXat: 3@1]
		raise: Error
		withMessageText: TerniLapilli maxAmountOfPiecesOnBoardErrorDescription.
	! !

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 10/29/2020 19:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 10/29/2020 19:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 10/29/2020 19:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'AM 10/29/2020 19:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 10/29/2020 19:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPlaceCorrectly stamp: 'AM 10/29/2020 19:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPlaceCorrectly stamp: 'AM 10/29/2020 19:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test08OCantPlaceOnOccupiedPostition stamp: 'AM 10/29/2020 19:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test09XCantPlaceOnOccupiedPostition stamp: 'AM 10/29/2020 19:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test10XCantPlaceOutOfBounds stamp: 'AM 10/29/2020 19:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test11OCantPlaceOutOfBounds stamp: 'AM 10/29/2020 19:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test12CantPlaceMoreThanSixPieces stamp: 'AM 10/29/2020 19:49:36'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/29/2020 20:17:33' prior: 50880941!
isTied

	| sum |
	
	sum := 0.
	
	board do: [:piece | ((piece = #X) or: [piece = #O]) ifTrue: [sum := sum + 1]].
	
	^(6 = sum).! !

!testRun: #TerniLapilliTest #test12CantPlaceMoreThanSixPieces stamp: 'AM 10/29/2020 20:17:38'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 20:24:15'!
test13XCanWinOnMove6

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 2@2; putXat: 1@2; putOat: 2@1; putXat: 1@3.
	
	self assert: terniLapilli isOver.
	self assert: terniLapilli hasPlayerXWon.! !

!testRun: #TerniLapilliTest #test13XCanWinOnMove6 stamp: 'AM 10/29/2020 20:24:49'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/29/2020 20:40:47'!
hasWon: aPlayerSymbol

	| hasWon |
	
	hasWon := false.
	
	"Horizontales"
	
	1 to: 3 do: [:row | hasWon := (hasWon = (board at: row@1)) or: [(board at: row@1) = (board at: row@2) and: [(board at: row@2) = (board at: row@3)]]].
	
	1 to: 3 do: []! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/29/2020 20:50:05' prior: 50881103!
hasWon: aPlayerSymbol

	| hasWon |
	
	hasWon := false.
	
	"Horizontales"
	
	1 to: 3 do: [:row | hasWon := hasWon or: 
									[aPlayerSymbol = (board at: row@1) 
											and: [(board at: row@1) = (board at: row@2) 
												and: [(board at: row@2) = (board at: row@3)]]]].
	
	"Verticales"
	
	1 to: 3 do: [:column | hasWon := hasWon or: 
									[aPlayerSymbol = (board at: 1@column)
											and: [(board at: 1@column) = (board at: 2@column) 
												and: [(board at: 2@column) = (board at: 3@column)]]]].
	
	"Diagonal1"
	
	hasWon := hasWon or: 
					[aPlayerSymbol = (board at: 1@1) 
							and: [(board at: 1@1) = (board at: 2@2)
								and: [(board at: 2@2) = (board at: 3@3)]]].
						
	"Diagonal2"
	
	hasWon := hasWon or: 
					[aPlayerSymbol = (board at: 1@3) 
							and: [(board at: 1@3) = (board at: 2@2)
								and: [(board at: 2@2) = (board at: 3@1)]]].! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/29/2020 20:50:17' prior: 50881114!
hasWon: aPlayerSymbol

	| hasWon |
	
	hasWon := false.
	
	"Horizontales"
	
	1 to: 3 do: [:row | hasWon := hasWon or: 
									[aPlayerSymbol = (board at: row@1) 
											and: [(board at: row@1) = (board at: row@2) 
												and: [(board at: row@2) = (board at: row@3)]]]].
	
	"Verticales"
	
	1 to: 3 do: [:column | hasWon := hasWon or: 
									[aPlayerSymbol = (board at: 1@column)
											and: [(board at: 1@column) = (board at: 2@column) 
												and: [(board at: 2@column) = (board at: 3@column)]]]].
	
	"Diagonal1"
	
	hasWon := hasWon or: 
					[aPlayerSymbol = (board at: 1@1) 
							and: [(board at: 1@1) = (board at: 2@2)
								and: [(board at: 2@2) = (board at: 3@3)]]].
						
	"Diagonal2"
	
	hasWon := hasWon or: 
					[aPlayerSymbol = (board at: 1@3) 
							and: [(board at: 1@3) = (board at: 2@2)
								and: [(board at: 2@2) = (board at: 3@1)]]].
						
	^hasWon.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 20:51:52' prior: 50881090!
test13XCanWinOnMove6

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 2@2; putXat: 1@2; putOat: 2@1; putXat: 1@3.
	
	self assert: terniLapilli hasWon: #X.
	self assert: terniLapilli isOver.! !

!testRun: #TerniLapilliTest #test13XCanWinOnMove6 stamp: 'AM 10/29/2020 20:51:55'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 20:52:17' prior: 50881177!
test13XCanWinOnMove6

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 2@2; putXat: 1@2; putOat: 2@1; putXat: 1@3.
	
	self assert: (terniLapilli hasWon: #X).
	self assert: terniLapilli isOver.! !

!testRun: #TerniLapilliTest #test13XCanWinOnMove6 stamp: 'AM 10/29/2020 20:52:19'!
FAILURE!

!testRun: #TerniLapilliTest #test13XCanWinOnMove6 stamp: 'AM 10/29/2020 20:52:39'!
FAILURE!

!testRun: #TerniLapilliTest #test13XCanWinOnMove6 stamp: 'AM 10/29/2020 20:52:39'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/29/2020 20:53:42' prior: 50879927!
isOver
	
	^(self hasWon: #X) or: [self hasWon: #O].! !

!testRun: #TerniLapilliTest #test13XCanWinOnMove6 stamp: 'AM 10/29/2020 20:53:47'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 20:57:31' prior: 50881191!
test13XCanWinOnMove6

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 2@1; putXat: 2@2; putOat: 2@3.
	
	terniLapilli moveXFrom: 2@2 to: 3@2.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 20:58:58' prior: 50881218!
test13XCanWinOnMove6

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 2@1; putXat: 2@2; putOat: 2@3.
	
	terniLapilli moveXFrom: 2@2 to: 3@2.
	
	self assert: (terniLapilli atPosition: 3@2) equals: #X.
	self assert: (terniLapilli atPosition: 2@2) equals: #E.! !

!testRun: #TerniLapilliTest #test13XCanWinOnMove6 stamp: 'AM 10/29/2020 20:59:02'!
ERROR!
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 20:59:10'!
moveXFrom: aPoint to: aPoint2 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 10/29/2020 21:01:38'!
assertValidPlacePostition: aPoint

	(((aPoint x) between: 1 and: 3) and: [(aPoint y) between: 1 and: 3]) ifFalse:[self signalOutOfBoundsPlacePosition].
	(board at: aPoint) = #E ifFalse: [self signalInvalidPlacePosition].! !
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 21:02:13' prior: 50880901!
putOat: aPoint 
	
	self isPlayingO ifFalse: [self signalIncorrectPlayerTurn].
	self assertValidPlacePostition: aPoint.
	self isTied ifTrue:[self signalMaxAmountOfPieces].
	board at: aPoint put: #O.
	playerTurn := #X.! !
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 21:02:26' prior: 50880883!
putXat: aPoint 
	
	self isPlayingX ifFalse: [self signalIncorrectPlayerTurn].
	self assertValidPlacePostition: aPoint.
	self isTied ifTrue:[self signalMaxAmountOfPieces].
	board at: aPoint put: #X.
	playerTurn := #O.! !

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 10/29/2020 21:02:29'!
PASSED!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 10/29/2020 21:02:29'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 10/29/2020 21:02:29'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'AM 10/29/2020 21:02:29'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 10/29/2020 21:02:29'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPlaceCorrectly stamp: 'AM 10/29/2020 21:02:29'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPlaceCorrectly stamp: 'AM 10/29/2020 21:02:29'!
PASSED!

!testRun: #TerniLapilliTest #test08OCantPlaceOnOccupiedPostition stamp: 'AM 10/29/2020 21:02:29'!
PASSED!

!testRun: #TerniLapilliTest #test09XCantPlaceOnOccupiedPostition stamp: 'AM 10/29/2020 21:02:29'!
PASSED!

!testRun: #TerniLapilliTest #test10XCantPlaceOutOfBounds stamp: 'AM 10/29/2020 21:02:29'!
PASSED!

!testRun: #TerniLapilliTest #test11OCantPlaceOutOfBounds stamp: 'AM 10/29/2020 21:02:29'!
PASSED!

!testRun: #TerniLapilliTest #test12CantPlaceMoreThanSixPieces stamp: 'AM 10/29/2020 21:02:29'!
PASSED!

!testRun: #TerniLapilliTest #test13XCanWinOnMove6 stamp: 'AM 10/29/2020 21:02:29'!
ERROR!

!testRun: #TerniLapilliTest #test13XCanWinOnMove6 stamp: 'AM 10/29/2020 21:02:29'!
ERROR!
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 10/29/2020 21:09:21'!
assertBoardAt: aPoint has: aPlayerSymbol ifNone: failureBlock

	(((aPoint x) between: 1 and: 3) and: [(aPoint y) between: 1 and: 3]) ifFalse:[self signalOutOfBoundsPlacePosition].
	(board at: aPoint) = aPlayerSymbol ifFalse: failureBlock.! !
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 21:10:28' prior: 50881259!
putOat: aPoint 
	
	self isPlayingO ifFalse: [self signalIncorrectPlayerTurn].
	self assertBoardAt: aPoint has: #E ifNone: [self signalInvalidPlacePosition].
	self isTied ifTrue:[self signalMaxAmountOfPieces].
	board at: aPoint put: #O.
	playerTurn := #X.! !
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 21:11:03' prior: 50881269!
putXat: aPoint 
	
	self isPlayingX ifFalse: [self signalIncorrectPlayerTurn].
	self assertBoardAt: aPoint has: #E ifNone: [self signalInvalidPlacePosition].
	self isTied ifTrue:[self signalMaxAmountOfPieces].
	board at: aPoint put: #X.
	playerTurn := #O.! !
!TerniLapilli methodsFor: 'actions' stamp: 'AM 10/29/2020 21:13:53' prior: 50881244!
moveXFrom: anOriginPoint to: aDestinationPoint
	
	self assertBoardAt: anOriginPoint has: #X ifNone: [self signalInvalidMoveOrigin].
	self assertBoardAt: aDestinationPoint has: #E ifNone: [self signalInvalidMoveDestination].
	
	board at: anOriginPoint put: #E.
	board at: aDestinationPoint put: #X.
	
	
	! !

!testRun: #TerniLapilliTest #test13XCanWinOnMove6 stamp: 'AM 10/29/2020 21:13:57'!
PASSED!

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 10/29/2020 21:13:57'!
PASSED!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 10/29/2020 21:13:57'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 10/29/2020 21:13:57'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'AM 10/29/2020 21:13:57'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 10/29/2020 21:13:57'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPlaceCorrectly stamp: 'AM 10/29/2020 21:13:57'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPlaceCorrectly stamp: 'AM 10/29/2020 21:13:57'!
PASSED!

!testRun: #TerniLapilliTest #test08OCantPlaceOnOccupiedPostition stamp: 'AM 10/29/2020 21:13:57'!
PASSED!

!testRun: #TerniLapilliTest #test09XCantPlaceOnOccupiedPostition stamp: 'AM 10/29/2020 21:13:57'!
PASSED!

!testRun: #TerniLapilliTest #test10XCantPlaceOutOfBounds stamp: 'AM 10/29/2020 21:13:57'!
PASSED!

!testRun: #TerniLapilliTest #test11OCantPlaceOutOfBounds stamp: 'AM 10/29/2020 21:13:57'!
PASSED!

!testRun: #TerniLapilliTest #test12CantPlaceMoreThanSixPieces stamp: 'AM 10/29/2020 21:13:57'!
PASSED!

!testRun: #TerniLapilliTest #test13XCanWinOnMove6 stamp: 'AM 10/29/2020 21:13:57'!
PASSED!
!TerniLapilli methodsFor: 'error signals' stamp: 'AM 10/29/2020 21:15:11'!
signalInvalidMoveOrigin

	^self error: self class invalidMoveOriginErrorDescription.! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'AM 10/29/2020 21:16:05'!
invalidMoveOriginErrorDescription

	^'Move origin does not contain the correct piece'! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'AM 10/29/2020 21:16:22' prior: 50881415!
invalidMoveOriginErrorDescription

	^'Trying to move an invalid piece'! !
!TerniLapilli methodsFor: 'error signals' stamp: 'AM 10/29/2020 21:17:03'!
signalInvalidMoveDestination

	^self error: self class invalidMoveDestinationErrorDescription.! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'AM 10/29/2020 21:17:34'!
invalidMoveDestinationErrorDescription

	^'Move destination contains a piece'! !

!testRun: #TerniLapilliTest #test13XCanWinOnMove6 stamp: 'AM 10/29/2020 21:18:09'!
PASSED!

----SNAPSHOT----(29 October 2020 21:19:47) CuisUniversity-4383.image priorSource: 17352351!

----QUIT----(29 October 2020 21:24:33) CuisUniversity-4383.image priorSource: 17593260!

----STARTUP---- (1 November 2020 17:25:34) as C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CuisNew\CuisUniversity-4383.image!


!testRun: #TerniLapilliTest #test13XCanWinOnMove6 stamp: 'AM 11/1/2020 17:30:56'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:39:29'!
test13XCantMakeInvalidMove

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 3@3; putXat: 3@2; putOat: 2@3.
	
	self
	should: [terniLapilli moveXFrom: 3@2 to: 2@1]
	raise: Error
	withMessageText: TerniLapilli invalidMoveErrorDescription.
	
	self
	should: [terniLapilli moveXFrom: 2@2 to: 4@2]
	raise: Error
	withMessageText: TerniLapilli invalidMoveErrorDescription.		! !

!testRun: #TerniLapilliTest #test13XCantMakeInvalidMove stamp: 'AM 11/1/2020 17:39:33'!
ERROR!
!TerniLapilli class methodsFor: 'error messages' stamp: 'AM 11/1/2020 17:39:48'!
invalidMoveErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'AM 11/1/2020 17:40:03' prior: 50881473!
invalidMoveErrorDescription
	
	^'Move is not valid'! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'AM 11/1/2020 17:40:11' prior: 50881478!
invalidMoveErrorDescription
	
	^'Move is out of bounds or invalid'! !

!testRun: #TerniLapilliTest #test13XCantMakeInvalidMove stamp: 'AM 11/1/2020 17:40:13'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'AM 11/1/2020 17:41:16' prior: 50881354!
moveXFrom: anOriginPoint to: aDestinationPoint
	
	self assertBoardAt: anOriginPoint has: #X ifNone: [self signalInvalidMoveOrigin].
	self assertBoardAt: aDestinationPoint has: #E ifNone: [self signalInvalidMoveDestination].
	self assertValidMove: anOriginPoint to: aDestinationPoint.
	board at: anOriginPoint put: #E.
	board at: aDestinationPoint put: #X.
	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:41:27'!
test14XCantMakeInvalidMove

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 3@3; putXat: 3@2; putOat: 2@3.
	
	self
	should: [terniLapilli moveXFrom: 3@2 to: 2@1]
	raise: Error
	withMessageText: TerniLapilli invalidMoveErrorDescription.
	
	self
	should: [terniLapilli moveXFrom: 2@2 to: 4@2]
	raise: Error
	withMessageText: TerniLapilli invalidMoveErrorDescription.		! !

!methodRemoval: TerniLapilliTest #test13XCantMakeInvalidMove stamp: 'AM 11/1/2020 17:41:31'!
test13XCantMakeInvalidMove

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 3@3; putXat: 3@2; putOat: 2@3.
	
	self
	should: [terniLapilli moveXFrom: 3@2 to: 2@1]
	raise: Error
	withMessageText: TerniLapilli invalidMoveErrorDescription.
	
	self
	should: [terniLapilli moveXFrom: 2@2 to: 4@2]
	raise: Error
	withMessageText: TerniLapilli invalidMoveErrorDescription.		!

!testRun: #TerniLapilliTest #test14XCantMakeInvalidMove stamp: 'AM 11/1/2020 17:41:33'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'AM 11/1/2020 17:44:16' prior: 50881491!
moveXFrom: anOriginPoint to: aDestinationPoint
	
	self assertBoardAt: anOriginPoint has: #X ifNone: [self signalInvalidMoveOrigin].
	self assertBoardAt: aDestinationPoint has: #E ifNone: [self signalInvalidMoveDestination].
	board at: anOriginPoint put: #E.
	board at: aDestinationPoint put: #X.
	
	
	! !

!methodRemoval: TerniLapilliTest #test14XCantMakeInvalidMove stamp: 'AM 11/1/2020 17:44:43'!
test14XCantMakeInvalidMove

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 3@3; putXat: 3@2; putOat: 2@3.
	
	self
	should: [terniLapilli moveXFrom: 3@2 to: 2@1]
	raise: Error
	withMessageText: TerniLapilli invalidMoveErrorDescription.
	
	self
	should: [terniLapilli moveXFrom: 2@2 to: 4@2]
	raise: Error
	withMessageText: TerniLapilli invalidMoveErrorDescription.		!

Object subclass: #TerniLapilliGameStage
	instanceVariableNames: 'terniLapilli'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliGameStage category: 'TerniLapilli' stamp: 'AM 11/1/2020 17:45:45'!
Object subclass: #TerniLapilliGameStage
	instanceVariableNames: 'terniLapilli'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliGameStage class methodsFor: 'nil' stamp: 'AM 11/1/2020 17:46:14'!
for: aTerniLapilli

	self ! !

----End fileIn of C:\Users\Chara\Desktop\Facultad\Ingenieria 1\entregaParcial\ISW1-2020-2C-Parcial-Enunciado.st----!
!TerniLapilliGameStage class methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:47:12' prior: 50881585!
for: aTerniLapilli

	^self new initializeFor: aTerniLapilli.! !
!TerniLapilliGameStage methodsFor: 'nil' stamp: 'AM 11/1/2020 17:47:27'!
initializeFor: aTerniLapilli

	! !
!TerniLapilliGameStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:47:51' prior: 50882754!
initializeFor: aTerniLapilli

	terniLapilli := aTerniLapilli.! !

TerniLapilliGameStage subclass: #PiecePlacingStage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #PiecePlacingStage category: 'TerniLapilli' stamp: 'AM 11/1/2020 17:49:01'!
TerniLapilliGameStage subclass: #PiecePlacingStage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TerniLapilliGameStage subclass: #PieceMovingStage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #PieceMovingStage category: 'TerniLapilli' stamp: 'AM 11/1/2020 17:49:16'!
TerniLapilliGameStage subclass: #PieceMovingStage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TerniLapilliGameStage subclass: #GameOverStage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #GameOverStage category: 'TerniLapilli' stamp: 'AM 11/1/2020 17:49:32'!
TerniLapilliGameStage subclass: #GameOverStage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!GameOverStage methodsFor: 'nil' stamp: 'AM 11/1/2020 17:51:36'!
putXat: aPoint

	! !
!GameOverStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:52:20' prior: 50882800!
putXat: aPoint

	terniLapilli signalMaxAmountOfPieces.! !
!GameOverStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:52:28'!
putOat: aPoint

	terniLapilli signalMaxAmountOfPieces.! !
!PieceMovingStage methodsFor: 'nil' stamp: 'AM 11/1/2020 17:52:55'!
putXat: aPoint

	terniLapilli signalMaxAmountOfPieces.! !
!PieceMovingStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:53:02'!
putOat: aPoint

	terniLapilli signalMaxAmountOfPieces.! !
!PiecePlacingStage methodsFor: 'nil' stamp: 'AM 11/1/2020 17:53:13'!
putXat: aPoint

	! !
!PiecePlacingStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:56:16' prior: 50882822!
putXat: aPoint

	self isPlayingX ifFalse: [self signalIncorrectPlayerTurn].
	self assertBoardAt: aPoint has: #E ifNone: [self signalInvalidPlacePosition].
	self isTied ifTrue:[self signalMaxAmountOfPieces].
	"board at: aPoint put: #X.
	playerTurn := #O."! !
!PiecePlacingStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:59:16' prior: 50882826!
putXat: aPoint

	self isPlayingX ifFalse: [self signalIncorrectPlayerTurn].
	terniLapilli assertBoardAt: aPoint has: #E ifNone: [terniLapilli signalInvalidPlacePosition].
	"board at: aPoint put: #X.
	playerTurn := #O."! !
!TerniLapilli methodsFor: 'nil' stamp: 'AM 11/1/2020 18:00:10'!
place: aPiece at: aPoint

	board ! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:00:32' prior: 50882847!
place: aPiece at: aPoint

	board at: aPoint put: aPiece.! !
!PiecePlacingStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:02:39' prior: 50882838!
putXat: aPoint

	self isPlayingX ifFalse: [self signalIncorrectPlayerTurn].
	terniLapilli assertBoardAt: aPoint has: #E ifNone: [terniLapilli signalInvalidPlacePosition].
	terniLapilli place: #X at: aPoint.
	! !

Object subclass: #TerniLapilliPlayer
	instanceVariableNames: 'terniLapilli'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliPlayer category: 'TerniLapilli' stamp: 'AM 11/1/2020 18:03:15'!
Object subclass: #TerniLapilliPlayer
	instanceVariableNames: 'terniLapilli'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TerniLapilliPlayer subclass: #X
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #X category: 'TerniLapilli' stamp: 'AM 11/1/2020 18:03:34'!
TerniLapilliPlayer subclass: #X
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TerniLapilliPlayer subclass: #O
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #O category: 'TerniLapilli' stamp: 'AM 11/1/2020 18:03:37'!
TerniLapilliPlayer subclass: #O
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliPlayer class methodsFor: 'nil' stamp: 'AM 11/1/2020 18:04:09'!
for: aTerniLapilli

	^self new initializeFor: aTerniLapilli.! !
!TerniLapilliPlayer methodsFor: 'nil' stamp: 'AM 11/1/2020 18:04:36'!
initializeFor: aTerniLapilli

	terniLapilli := aTerniLapilli.! !
!O methodsFor: 'nil' stamp: 'AM 11/1/2020 18:05:07'!
putXat: aPoint

	! !
!O methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:05:20' prior: 50882910!
putXat: aPoint

	^terniLapilli signalIncorrectPlayerTurn.! !
!O methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:05:40'!
putOat: aPoint

	^terniLapilli.! !
!PiecePlacingStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:06:21' prior: 50882858!
putXat: aPoint

	self isPlayingX ifFalse: [self signalIncorrectPlayerTurn].
	terniLapilli assertBoardAt: aPoint has: #E ifNone: [terniLapilli signalInvalidPlacePosition].
	terniLapilli putXat: aPoint.
	! !
!TerniLapilli methodsFor: 'actions' stamp: 'AM 11/1/2020 18:06:33' prior: 50881343!
putXat: aPoint 
	
	! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'playerTurn board gameStage'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'AM 11/1/2020 18:06:57'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'playerTurn board gameStage'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'initialization' stamp: 'AM 11/1/2020 18:07:22' prior: 50880602 overrides: 16896425!
initialize
	
	board := Array2D newSize: 3@3.
	board fillWithArrayOfArrays: #(#(#E #E #E) #(#E #E #E) #(#E #E #E)).
	playerTurn := X for: self.! !
!TerniLapilli methodsFor: 'initialization' stamp: 'AM 11/1/2020 18:07:50' prior: 50882951 overrides: 16896425!
initialize
	
	board := Array2D newSize: 3@3.
	board fillWithArrayOfArrays: #(#(#E #E #E) #(#E #E #E) #(#E #E #E)).
	gameStage := PiecePlacingStage for: self.
	playerTurn := X for: self.! !
!TerniLapilli methodsFor: 'actions' stamp: 'AM 11/1/2020 18:10:23' prior: 50882934!
putXat: aPoint 
	
	gameStage putXat: aPoint.! !
!PiecePlacingStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:11:24' prior: 50882924!
putXat: aPoint

	self isPlayingX ifFalse: [self signalIncorrectPlayerTurn].
	terniLapilli assertBoardAt: aPoint has: #E ifNone: [terniLapilli signalInvalidPlacePosition].
	terniLapilli placeXat: aPoint.
	! !
!PiecePlacingStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:12:14' prior: 50882974!
putXat: aPoint

	self isPlayingX ifFalse: [self signalIncorrectPlayerTurn].
	terniLapilli assertBoardAt: aPoint has: #E ifNone: [terniLapilli signalInvalidPlacePosition].
	terniLapilli putXatAssertingTurn: aPoint.
	! !
!TerniLapilli methodsFor: 'actions private' stamp: 'AM 11/1/2020 18:12:59'!
putXatAssertingTurn: aPoint

	playerTurn putXat: aPoint.! !
!X methodsFor: 'nil' stamp: 'AM 11/1/2020 18:14:23'!
putXat: aPoint

	terniLapilli place: #X at: aPoint. ! !
!O methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:14:47' prior: 50882919!
putOat: aPoint

	terniLapilli place: #O at: aPoint.! !
!X methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:15:23'!
putOat: aPoint

	^terniLapilli signalIncorrectPlayerTurn ! !
!PiecePlacingStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:16:13' prior: 50882984!
putXat: aPoint

	terniLapilli assertBoardAt: aPoint has: #E ifNone: [terniLapilli signalInvalidPlacePosition].
	terniLapilli putXatAssertingTurn: aPoint.
	! !
!TerniLapilli methodsFor: 'actions' stamp: 'AM 11/1/2020 18:17:06' prior: 50881332!
putOat: aPoint 
	
	gameStage putOat: aPoint.! !
!TerniLapilli methodsFor: 'actions private' stamp: 'AM 11/1/2020 18:17:49'!
putOatAssertingTurn: aPoint

	playerTurn putOat: aPoint.! !
!PiecePlacingStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:18:07'!
putOat: aPoint

	terniLapilli assertBoardAt: aPoint has: #E ifNone: [terniLapilli signalInvalidPlacePosition].
	terniLapilli putOatAssertingTurn: aPoint.
	! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'playerTurn board gameStage piecesPlaced'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'AM 11/1/2020 18:19:07'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'playerTurn board gameStage piecesPlaced'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'initialization' stamp: 'AM 11/1/2020 18:19:37' prior: 50882960 overrides: 16896425!
initialize
	
	board := Array2D newSize: 3@3.
	board fillWithArrayOfArrays: #(#(#E #E #E) #(#E #E #E) #(#E #E #E)).
	gameStage := PiecePlacingStage for: self.
	playerTurn := X for: self.
	piecesPlaced := 0.! !
!TerniLapilli methodsFor: 'actions private' stamp: 'AM 11/1/2020 18:21:13'!
numberOfPiecesPlusOne

	! !
!TerniLapilli methodsFor: 'actions private' stamp: 'AM 11/1/2020 18:21:32' prior: 50883061!
numberOfPiecesPlusOne

	piecesPlaced := piecesPlaced + 1.! !

!methodRemoval: TerniLapilli #numberOfPiecesPlusOne stamp: 'AM 11/1/2020 18:22:01'!
numberOfPiecesPlusOne

	piecesPlaced := piecesPlaced + 1.!
!TerniLapilli methodsFor: 'actions private' stamp: 'AM 11/1/2020 18:22:14' prior: 50882852!
place: aPiece at: aPoint
	
	piecesPlaced := piecesPlaced + 1.
	board at: aPoint put: aPiece.! !
!O methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:23:13' prior: 50883003!
putOat: aPoint
	
	terniLapilli changeStageIfMaxPiecesReached.
	terniLapilli place: #O at: aPoint.! !
!TerniLapilli methodsFor: 'actions private' stamp: 'AM 11/1/2020 18:23:40'!
changeStateIfMaxPiecesReached! !
!TerniLapilli methodsFor: 'actions private' stamp: 'AM 11/1/2020 18:24:43' prior: 50883087!
changeStateIfMaxPiecesReached
	
	(piecesPlaced = 6) ifTrue: [gameStage := PieceMovingStage for: self]! !
!O methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:25:39' prior: 50883081!
putOat: aPoint
	
	terniLapilli changeStageIfEndGameReached.
	terniLapilli changeStageIfMaxPiecesReached.
	terniLapilli place: #O at: aPoint.! !
!X methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:26:08' prior: 50882998!
putXat: aPoint
	
	terniLapilli changeStageIfGameOverReached.
	terniLapilli place: #X at: aPoint. ! !
!O methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:26:28' prior: 50883097!
putOat: aPoint
	
	terniLapilli changeStageIfGameOverReached.
	terniLapilli changeStageIfMaxPiecesReached.
	terniLapilli place: #O at: aPoint.! !
!TerniLapilli methodsFor: 'actions private' stamp: 'AM 11/1/2020 18:26:46'!
changeStageIfGameOverReached

	! !
!TerniLapilli methodsFor: 'actions private' stamp: 'AM 11/1/2020 18:28:26' prior: 50883118!
changeStageIfGameOverReached

	(self isOver) ifTrue: [gameStage := GameOverStage for: self]! !

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 11/1/2020 18:28:43'!
PASSED!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 11/1/2020 18:28:43'!
FAILURE!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 11/1/2020 18:28:43'!
FAILURE!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'AM 11/1/2020 18:28:43'!
ERROR!

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 11/1/2020 18:28:43'!
FAILURE!

!testRun: #TerniLapilliTest #test06XCanPlaceCorrectly stamp: 'AM 11/1/2020 18:28:43'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPlaceCorrectly stamp: 'AM 11/1/2020 18:28:43'!
ERROR!

!testRun: #TerniLapilliTest #test08OCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 18:28:43'!
PASSED!

!testRun: #TerniLapilliTest #test09XCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 18:28:43'!
ERROR!

!testRun: #TerniLapilliTest #test10XCantPlaceOutOfBounds stamp: 'AM 11/1/2020 18:28:43'!
PASSED!

!testRun: #TerniLapilliTest #test11OCantPlaceOutOfBounds stamp: 'AM 11/1/2020 18:28:43'!
PASSED!

!testRun: #TerniLapilliTest #test12CantPlaceMoreThanSixPieces stamp: 'AM 11/1/2020 18:28:43'!
ERROR!

!testRun: #TerniLapilliTest #test13XCanWinOnMove6 stamp: 'AM 11/1/2020 18:28:43'!
ERROR!
!O methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:30:17' prior: 50883111!
putOat: aPoint
	
	terniLapilli changeStageIfGameOverReached.
	terniLapilli changeStateIfMaxPiecesReached.
	terniLapilli place: #O at: aPoint.! !
!X methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:30:38' prior: 50883105!
putXat: aPoint
	
	terniLapilli place: #X at: aPoint. 
	terniLapilli changeStageIfGameOverReached.! !
!O methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:31:01' prior: 50883167!
putOat: aPoint
	
	terniLapilli place: #O at: aPoint.
	terniLapilli changeStageIfGameOverReached.
	terniLapilli changeStateIfMaxPiecesReached.! !

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 11/1/2020 18:31:18'!
PASSED!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 11/1/2020 18:31:18'!
FAILURE!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 11/1/2020 18:31:18'!
FAILURE!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'AM 11/1/2020 18:31:18'!
ERROR!

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 11/1/2020 18:31:18'!
FAILURE!

!testRun: #TerniLapilliTest #test06XCanPlaceCorrectly stamp: 'AM 11/1/2020 18:31:18'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPlaceCorrectly stamp: 'AM 11/1/2020 18:31:18'!
ERROR!

!testRun: #TerniLapilliTest #test08OCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 18:31:18'!
PASSED!

!testRun: #TerniLapilliTest #test09XCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 18:31:18'!
ERROR!

!testRun: #TerniLapilliTest #test10XCantPlaceOutOfBounds stamp: 'AM 11/1/2020 18:31:18'!
PASSED!

!testRun: #TerniLapilliTest #test11OCantPlaceOutOfBounds stamp: 'AM 11/1/2020 18:31:18'!
PASSED!

!testRun: #TerniLapilliTest #test12CantPlaceMoreThanSixPieces stamp: 'AM 11/1/2020 18:31:18'!
ERROR!

!testRun: #TerniLapilliTest #test13XCanWinOnMove6 stamp: 'AM 11/1/2020 18:31:18'!
ERROR!
!TerniLapilli methodsFor: 'actions private' stamp: 'AM 11/1/2020 18:32:32'!
setPlayerXTurn

	playerTurn := X for: self.! !
!TerniLapilli methodsFor: 'actions private' stamp: 'AM 11/1/2020 18:32:38'!
setPlayerOTurn

	playerTurn := O for: self.! !
!O methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:32:54' prior: 50883181!
putOat: aPoint
	
	terniLapilli place: #O at: aPoint.
	terniLapilli changeStageIfGameOverReached.
	terniLapilli changeStateIfMaxPiecesReached.
	terniLapilli setPlayerXTurn.! !
!X methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:33:06' prior: 50883175!
putXat: aPoint
	
	terniLapilli place: #X at: aPoint. 
	terniLapilli changeStageIfGameOverReached.
	terniLapilli setPlayerOTurn.! !

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 11/1/2020 18:33:09'!
PASSED!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 11/1/2020 18:33:09'!
FAILURE!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 11/1/2020 18:33:09'!
FAILURE!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'AM 11/1/2020 18:33:09'!
FAILURE!

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 11/1/2020 18:33:09'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPlaceCorrectly stamp: 'AM 11/1/2020 18:33:09'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPlaceCorrectly stamp: 'AM 11/1/2020 18:33:09'!
PASSED!

!testRun: #TerniLapilliTest #test08OCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 18:33:09'!
PASSED!

!testRun: #TerniLapilliTest #test09XCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 18:33:09'!
PASSED!

!testRun: #TerniLapilliTest #test10XCantPlaceOutOfBounds stamp: 'AM 11/1/2020 18:33:09'!
PASSED!

!testRun: #TerniLapilliTest #test11OCantPlaceOutOfBounds stamp: 'AM 11/1/2020 18:33:09'!
PASSED!

!testRun: #TerniLapilliTest #test12CantPlaceMoreThanSixPieces stamp: 'AM 11/1/2020 18:33:09'!
PASSED!

!testRun: #TerniLapilliTest #test13XCanWinOnMove6 stamp: 'AM 11/1/2020 18:33:09'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 11/1/2020 18:34:00' prior: 50880080!
isPlayingO
	
	^(playerTurn class= O).! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 11/1/2020 18:34:06' prior: 50880084!
isPlayingX
	
	^(playerTurn class= X).! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 11/1/2020 18:34:08' prior: 50883297!
isPlayingX
	
	^(playerTurn class = X).! !

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 11/1/2020 18:34:11'!
PASSED!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 11/1/2020 18:34:11'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 11/1/2020 18:34:11'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'AM 11/1/2020 18:34:11'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 11/1/2020 18:34:11'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPlaceCorrectly stamp: 'AM 11/1/2020 18:34:11'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPlaceCorrectly stamp: 'AM 11/1/2020 18:34:11'!
PASSED!

!testRun: #TerniLapilliTest #test08OCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 18:34:11'!
PASSED!

!testRun: #TerniLapilliTest #test09XCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 18:34:11'!
PASSED!

!testRun: #TerniLapilliTest #test10XCantPlaceOutOfBounds stamp: 'AM 11/1/2020 18:34:11'!
PASSED!

!testRun: #TerniLapilliTest #test11OCantPlaceOutOfBounds stamp: 'AM 11/1/2020 18:34:11'!
PASSED!

!testRun: #TerniLapilliTest #test12CantPlaceMoreThanSixPieces stamp: 'AM 11/1/2020 18:34:11'!
PASSED!

!testRun: #TerniLapilliTest #test13XCanWinOnMove6 stamp: 'AM 11/1/2020 18:34:11'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:35:41'!
test14XCanMovePiece

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 2@1; putXat: 2@2; putOat: 2@3.
	
	terniLapilli moveXFrom: 2@2 to: 3@2.
	
	self assert: (terniLapilli atPosition: 3@2) equals: #X.
	self assert: (terniLapilli atPosition: 2@2) equals: #E.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:36:44'!
test13XCanMovePiece

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 2@1; putXat: 2@2; putOat: 2@3.
	
	terniLapilli moveXFrom: 2@2 to: 3@2.
	
	self assert: (terniLapilli atPosition: 3@2) equals: #X.
	self assert: (terniLapilli atPosition: 2@2) equals: #E.! !

!methodRemoval: TerniLapilliTest #test14XCanMovePiece stamp: 'AM 11/1/2020 18:36:51'!
test14XCanMovePiece

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 2@1; putXat: 2@2; putOat: 2@3.
	
	terniLapilli moveXFrom: 2@2 to: 3@2.
	
	self assert: (terniLapilli atPosition: 3@2) equals: #X.
	self assert: (terniLapilli atPosition: 2@2) equals: #E.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:37:12'!
test14XCantMovePieceToInvalidLocation

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 2@1; putXat: 2@2; putOat: 2@3.
	
	terniLapilli moveXFrom: 2@2 to: 3@2.
	
	self assert: (terniLapilli atPosition: 3@2) equals: #X.
	self assert: (terniLapilli atPosition: 2@2) equals: #E.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:37:19'!
test14XCantMovePieceOutOfBounds

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 2@1; putXat: 2@2; putOat: 2@3.
	
	terniLapilli moveXFrom: 2@2 to: 3@2.
	
	self assert: (terniLapilli atPosition: 3@2) equals: #X.
	self assert: (terniLapilli atPosition: 2@2) equals: #E.! !

!methodRemoval: TerniLapilliTest #test14XCantMovePieceToInvalidLocation stamp: 'AM 11/1/2020 18:37:22'!
test14XCantMovePieceToInvalidLocation

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 2@1; putXat: 2@2; putOat: 2@3.
	
	terniLapilli moveXFrom: 2@2 to: 3@2.
	
	self assert: (terniLapilli atPosition: 3@2) equals: #X.
	self assert: (terniLapilli atPosition: 2@2) equals: #E.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:37:31' prior: 50883398!
test14XCantMovePieceOutOfBounds

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 2@1; putXat: 2@2; putOat: 2@3.
	
	terniLapilli moveXFrom: 2@2 to: 4@2.
	
	self assert: (terniLapilli atPosition: 3@2) equals: #X.
	self assert: (terniLapilli atPosition: 2@2) equals: #E.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:38:25' prior: 50883426!
test14XCantMovePieceOutOfBounds

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 2@1; putXat: 2@2; putOat: 2@3.
	
	self
	should: [terniLapilli moveXFrom: 2@2 to: 4@2]
	raise: Error
	withMessageText: TerniLapilli invalidMoveDestinationErrorDescription.! !

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 11/1/2020 18:38:29'!
PASSED!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 11/1/2020 18:38:29'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 11/1/2020 18:38:29'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'AM 11/1/2020 18:38:29'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 11/1/2020 18:38:29'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPlaceCorrectly stamp: 'AM 11/1/2020 18:38:29'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPlaceCorrectly stamp: 'AM 11/1/2020 18:38:29'!
PASSED!

!testRun: #TerniLapilliTest #test08OCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 18:38:29'!
PASSED!

!testRun: #TerniLapilliTest #test09XCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 18:38:29'!
PASSED!

!testRun: #TerniLapilliTest #test10XCantPlaceOutOfBounds stamp: 'AM 11/1/2020 18:38:29'!
PASSED!

!testRun: #TerniLapilliTest #test11OCantPlaceOutOfBounds stamp: 'AM 11/1/2020 18:38:29'!
PASSED!

!testRun: #TerniLapilliTest #test12CantPlaceMoreThanSixPieces stamp: 'AM 11/1/2020 18:38:29'!
PASSED!

!testRun: #TerniLapilliTest #test13XCanMovePiece stamp: 'AM 11/1/2020 18:38:29'!
PASSED!

!testRun: #TerniLapilliTest #test13XCanWinOnMove6 stamp: 'AM 11/1/2020 18:38:29'!
PASSED!

!testRun: #TerniLapilliTest #test14XCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 18:38:29'!
FAILURE!

!testRun: #TerniLapilliTest #test14XCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 18:38:29'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'AM 11/1/2020 18:40:38' prior: 50881543!
moveXFrom: anOriginPoint to: aDestinationPoint
	
	self assertInRange: anOriginPoint and: aDestinationPoint.
	self assertBoardAt: anOriginPoint has: #X ifNone: [self signalInvalidMoveOrigin].
	self assertBoardAt: aDestinationPoint has: #E ifNone: [self signalInvalidMoveDestination].
	board at: anOriginPoint put: #E.
	board at: aDestinationPoint put: #X.
	
	
	! !
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 18:43:05'!
assertInRange: anOriginPoint and: aDestinationPoint

	(((anOriginPoint x) between: 1 and: 3) and: [(anOriginPoint y) between: 1 and: 3]) ifFalse: [self ].! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'AM 11/1/2020 18:43:26'!
outOfBoundsPositionErrorDescription
	
	^'Position is out of bounds'! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:44:01' prior: 50883440!
test14XCantMovePieceOutOfBounds

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 2@1; putXat: 2@2; putOat: 2@3.
	
	self
	should: [terniLapilli moveXFrom: 2@2 to: 4@2]
	raise: Error
	withMessageText: TerniLapilli outOfBoundsPositionErrorDescription.! !
!TerniLapilli methodsFor: 'error signals' stamp: 'AM 11/1/2020 18:44:41'!
signalOutOfBoundsPosition

	^self error: self class outOfBoundsPlacePositionErrorDescription.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:44:41' prior: 50880784!
assertPointIsInRange: aPoint

	(((aPoint x) between: 1 and: 3) and: [(aPoint y) between: 1 and: 3]) ifFalse:[self signalOutOfBoundsPosition].
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:44:41' prior: 50881321!
assertBoardAt: aPoint has: aPlayerSymbol ifNone: failureBlock

	(((aPoint x) between: 1 and: 3) and: [(aPoint y) between: 1 and: 3]) ifFalse:[self signalOutOfBoundsPosition].
	(board at: aPoint) = aPlayerSymbol ifFalse: failureBlock.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 18:44:41' prior: 50881249!
assertValidPlacePostition: aPoint

	(((aPoint x) between: 1 and: 3) and: [(aPoint y) between: 1 and: 3]) ifFalse:[self signalOutOfBoundsPosition].
	(board at: aPoint) = #E ifFalse: [self signalInvalidPlacePosition].! !

!methodRemoval: TerniLapilli #signalOutOfBoundsPlacePosition stamp: 'AM 11/1/2020 18:44:41'!
signalOutOfBoundsPlacePosition

	^self error: self class outOfBoundsPlacePositionErrorDescription.!

!testRun: #TerniLapilliTest #test10XCantPlaceOutOfBounds stamp: 'AM 11/1/2020 19:13:22'!
PASSED!

!testRun: #TerniLapilliTest #test14XCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 19:14:08'!
PASSED!

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 11/1/2020 19:14:11'!
PASSED!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 11/1/2020 19:14:12'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 11/1/2020 19:14:12'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'AM 11/1/2020 19:14:12'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 11/1/2020 19:14:12'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPlaceCorrectly stamp: 'AM 11/1/2020 19:14:12'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPlaceCorrectly stamp: 'AM 11/1/2020 19:14:12'!
PASSED!

!testRun: #TerniLapilliTest #test08OCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 19:14:12'!
PASSED!

!testRun: #TerniLapilliTest #test09XCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 19:14:12'!
PASSED!

!testRun: #TerniLapilliTest #test10XCantPlaceOutOfBounds stamp: 'AM 11/1/2020 19:14:12'!
PASSED!

!testRun: #TerniLapilliTest #test11OCantPlaceOutOfBounds stamp: 'AM 11/1/2020 19:14:12'!
PASSED!

!testRun: #TerniLapilliTest #test12CantPlaceMoreThanSixPieces stamp: 'AM 11/1/2020 19:14:12'!
PASSED!

!testRun: #TerniLapilliTest #test13XCanMovePiece stamp: 'AM 11/1/2020 19:14:12'!
PASSED!

!testRun: #TerniLapilliTest #test13XCanWinOnMove6 stamp: 'AM 11/1/2020 19:14:12'!
PASSED!

!testRun: #TerniLapilliTest #test14XCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 19:14:12'!
PASSED!
!PiecePlacingStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:16:28'!
move: anOriginPoint to: aDestinationPoint
	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:16:41'!
test14OCantMovePieceOutOfBounds

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 2@1; putXat: 2@2; putOat: 2@3.
	
	self
	should: [terniLapilli moveXFrom: 2@2 to: 4@2]
	raise: Error
	withMessageText: TerniLapilli outOfBoundsPositionErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:16:47'!
test15OCantMovePieceOutOfBounds

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 2@1; putXat: 2@2; putOat: 2@3.
	
	self
	should: [terniLapilli moveXFrom: 2@2 to: 4@2]
	raise: Error
	withMessageText: TerniLapilli outOfBoundsPositionErrorDescription.! !

!methodRemoval: TerniLapilliTest #test14OCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 19:16:53'!
test14OCantMovePieceOutOfBounds

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 2@1; putXat: 2@2; putOat: 2@3.
	
	self
	should: [terniLapilli moveXFrom: 2@2 to: 4@2]
	raise: Error
	withMessageText: TerniLapilli outOfBoundsPositionErrorDescription.!
!PieceMovingStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:17:36'!
move: anOriginPoint to: aDestinationPoint

	! !
!PieceMovingStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:19:02' prior: 50883681!
move: anOriginPoint to: aDestinationPoint
	
	self assertInRange: anOriginPoint and: aDestinationPoint.
	
	
	
! !
!PieceMovingStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:22:05'!
moveX: anOriginPoint to: aDestinationPoint
	
	self assertInRange: anOriginPoint and: aDestinationPoint.
	terniLapilli moveXassertingTurn: anOriginPoint to: 	aDestinationPoint.
	self assertBoardAt: anOriginPoint has: #X ifNone: [self signalInvalidMoveOrigin].
	self assertBoardAt: aDestinationPoint has: #E ifNone: [self signalInvalidMoveDestination].
	terniLapilli at: anOriginPoint put: #E.
	terniLapilli at: aDestinationPoint put: #X.
	
	
! !
!PieceMovingStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:22:58' prior: 50883693!
moveX: anOriginPoint to: aDestinationPoint
	
	self assertInRange: anOriginPoint and: aDestinationPoint.
	self assertBoardAt: anOriginPoint has: #X ifNone: [self signalInvalidMoveOrigin].
	self assertBoardAt: aDestinationPoint has: #E ifNone: [self signalInvalidMoveDestination].
	terniLapilli moveXassertingTurn: anOriginPoint to: 	aDestinationPoint.
	
	
! !
!TerniLapilli methodsFor: 'actions private' stamp: 'AM 11/1/2020 19:23:52'!
moveXAssertingTurn: anOriginPoint to: aDestinationPoint

	playerTurn! !
!PieceMovingStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:25:19' prior: 50883711!
moveX: anOriginPoint to: aDestinationPoint
	
	self assertInRange: anOriginPoint and: aDestinationPoint.
	self assertBoardAt: anOriginPoint has: #X ifNone: [self signalInvalidMoveOrigin].
	self assertBoardAt: aDestinationPoint has: #E ifNone: [self signalInvalidMoveDestination].
	terniLapilli moveXAssertingTurn: anOriginPoint to: 	aDestinationPoint.
	
	
! !
!TerniLapilli methodsFor: 'actions private' stamp: 'AM 11/1/2020 19:25:41' prior: 50883725!
moveXAssertingTurn: anOriginPoint to: aDestinationPoint

	playerTurn moveX: anOriginPoint to: aDestinationPoint.! !
!O methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:26:08'!
moveX: anOriginPoint to: aDestinationPoint

	! !

!methodRemoval: PieceMovingStage #move:to: stamp: 'AM 11/1/2020 19:26:14'!
move: anOriginPoint to: aDestinationPoint
	
	self assertInRange: anOriginPoint and: aDestinationPoint.
	
	
	
!
!O methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:26:34' prior: 50883752!
moveX: anOriginPoint to: aDestinationPoint

	^terniLapilli signalIncorrectPlayerTurn.! !
!O methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:27:10' prior: 50883763!
moveX: anOriginPoint to: aDestinationPoint

	terniLapilli at: anOriginPoint put: #E.
	terniLapilli at: aDestinationPoint put: #X.
	^terniLapilli signalIncorrectPlayerTurn.! !
!X methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:27:26'!
moveX: anOriginPoint to: aDestinationPoint

	terniLapilli at: anOriginPoint put: #E.
	terniLapilli at: aDestinationPoint put: #X.! !
!O methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:27:32' prior: 50883769!
moveX: anOriginPoint to: aDestinationPoint

	^terniLapilli signalIncorrectPlayerTurn.! !
!X methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:27:41' prior: 50883777!
moveX: anOriginPoint to: aDestinationPoint
	
	terniLapilli at: anOriginPoint put: #E.
	terniLapilli at: aDestinationPoint put: #X.! !
!PieceMovingStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:28:35'!
moveO: anOriginPoint to: aDestinationPoint
	
	self assertInRange: anOriginPoint and: aDestinationPoint.
	self assertBoardAt: anOriginPoint has: #O ifNone: [self signalInvalidMoveOrigin].
	self assertBoardAt: aDestinationPoint has: #E ifNone: [self signalInvalidMoveDestination].
	terniLapilli moveOAssertingTurn: anOriginPoint to: 	aDestinationPoint.
	
	
! !
!TerniLapilli methodsFor: 'actions private' stamp: 'AM 11/1/2020 19:28:47'!
moveOAssertingTurn: anOriginPoint to: aDestinationPoint

	playerTurn moveO: anOriginPoint to: aDestinationPoint.! !
!O methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:28:53'!
moveO: anOriginPoint to: aDestinationPoint

	^terniLapilli signalIncorrectPlayerTurn.! !
!O methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:29:09' prior: 50883817!
moveO: anOriginPoint to: aDestinationPoint

		terniLapilli at: anOriginPoint put: #E.
		terniLapilli at: aDestinationPoint put: #O.! !
!X methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:29:20'!
moveO: anOriginPoint to: aDestinationPoint
	
	^terniLapilli signalIncorrectPlayerTurn.! !
!O methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:30:25' prior: 50883823!
moveO: anOriginPoint to: aDestinationPoint

		terniLapilli at: anOriginPoint put: #E.
		terniLapilli at: aDestinationPoint put: #O.
		terniLapilli changeStageIfGameOverReached.! !
!X methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:30:33' prior: 50883790!
moveX: anOriginPoint to: aDestinationPoint
	
	terniLapilli at: anOriginPoint put: #E.
	terniLapilli at: aDestinationPoint put: #X.
	terniLapilli changeStageIfGameOverReached.! !
!PieceMovingStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:31:37' prior: 50883731!
moveX: anOriginPoint to: aDestinationPoint
	
	terniLapilli assertInRange: anOriginPoint and: aDestinationPoint.
	terniLapilli assertBoardAt: anOriginPoint has: #X ifNone: [self signalInvalidMoveOrigin].
	terniLapilli assertBoardAt: aDestinationPoint has: #E ifNone: [self signalInvalidMoveDestination].
	terniLapilli moveXAssertingTurn: anOriginPoint to: 	aDestinationPoint.
	
	
! !
!PieceMovingStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:31:52' prior: 50883797!
moveO: anOriginPoint to: aDestinationPoint
	
	terniLapilli assertInRange: anOriginPoint and: aDestinationPoint.
	terniLapilli assertBoardAt: anOriginPoint has: #O ifNone: [self signalInvalidMoveOrigin].
	terniLapilli assertBoardAt: aDestinationPoint has: #E ifNone: [self signalInvalidMoveDestination].
	terniLapilli moveOAssertingTurn: anOriginPoint to: 	aDestinationPoint.
	
	
! !
!PieceMovingStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:32:48' prior: 50883854!
moveX: anOriginPoint to: aDestinationPoint
	
	terniLapilli assertInRange: anOriginPoint and: aDestinationPoint.
	terniLapilli. 
	terniLapilli assertBoardAt: anOriginPoint has: #X ifNone: [self signalInvalidMoveOrigin].
	terniLapilli assertBoardAt: aDestinationPoint has: #E ifNone: [self signalInvalidMoveDestination].
	terniLapilli moveXAssertingTurn: anOriginPoint to: 	aDestinationPoint.
	
	
! !
!PieceMovingStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:33:22' prior: 50883886!
moveX: anOriginPoint to: aDestinationPoint
	
	terniLapilli assertInRange: anOriginPoint and: aDestinationPoint.
	terniLapilli assertValidMove: anOriginPoint and: aDestinationPoint. 
	terniLapilli assertBoardAt: anOriginPoint has: #X ifNone: [self signalInvalidMoveOrigin].
	terniLapilli assertBoardAt: aDestinationPoint has: #E ifNone: [self signalInvalidMoveDestination].
	terniLapilli moveXAssertingTurn: anOriginPoint to: 	aDestinationPoint.
	
	
! !
!PieceMovingStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:33:39' prior: 50883870!
moveO: anOriginPoint to: aDestinationPoint
	
	terniLapilli assertInRange: anOriginPoint and: aDestinationPoint.
	terniLapilli assertValidMove: anOriginPoint and: aDestinationPoint.
	terniLapilli assertBoardAt: anOriginPoint has: #O ifNone: [self signalInvalidMoveOrigin].
	terniLapilli assertBoardAt: aDestinationPoint has: #E ifNone: [self signalInvalidMoveDestination].
	terniLapilli moveOAssertingTurn: anOriginPoint to: 	aDestinationPoint.
	
	
! !
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 19:36:49'!
assertValidMove: anOriginPoint and: aDestinationPoint

	| moveLengthIsOne |
	
	moveLengthIsOne := ((anOriginPoint x - aDestinationPoint x) abs < 2) and: [(anOriginPoint y- aDestinationPoint y) abs < 2]! !
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 19:37:10' prior: 50883937!
assertValidMove: anOriginPoint and: aDestinationPoint

	| moveLengthIsOne |
	
	moveLengthIsOne := (((anOriginPoint x - aDestinationPoint x) abs) < 2) and: [((anOriginPoint y- aDestinationPoint y) abs) < 2].
	
! !
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 19:41:16' prior: 50883947!
assertValidMove: anOriginPoint and: aDestinationPoint

	| moveLengthIsOne isDiagonal moveOnValidDiagonal |
	
	moveLengthIsOne := (((anOriginPoint x - aDestinationPoint x) abs) < 2) and: [((anOriginPoint y- aDestinationPoint y) abs) < 2].
	
	isDiagonal := (((anOriginPoint x - aDestinationPoint x) abs) + ((anOriginPoint y- aDestinationPoint y) abs)) = 2
	
! !
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 19:46:27' prior: 50883957!
assertValidMove: anOriginPoint and: aDestinationPoint

	| moveLengthIsOne isDiagonal moveOnValidDiagonal centerAndCornerPoints|
	
	centerAndCornerPoints := OrderedCollection with: 1@1 with: 1@3 with: 2@2 with: 3@1 with: 3@3.
		
	moveLengthIsOne := (((anOriginPoint x - aDestinationPoint x) abs) < 2) and: [((anOriginPoint y- aDestinationPoint y) abs) < 2].
	
	isDiagonal := (((anOriginPoint x - aDestinationPoint x) abs) + ((anOriginPoint y- aDestinationPoint y) abs)) = 2.
	
	isDiagonal ifTrue: [centerAndCornerPoints detect: [:point | aDestinationPoint = point] ifNone: [self signalInvalidMoveDestination]].! !
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 19:46:39' prior: 50883971!
assertValidMove: anOriginPoint and: aDestinationPoint

	| moveLengthIsOne isDiagonal centerAndCornerPoints|
	
	centerAndCornerPoints := OrderedCollection with: 1@1 with: 1@3 with: 2@2 with: 3@1 with: 3@3.
		
	moveLengthIsOne := (((anOriginPoint x - aDestinationPoint x) abs) < 2) and: [((anOriginPoint y- aDestinationPoint y) abs) < 2].
	
	isDiagonal := (((anOriginPoint x - aDestinationPoint x) abs) + ((anOriginPoint y- aDestinationPoint y) abs)) = 2.
	
	isDiagonal ifTrue: [centerAndCornerPoints detect: [:point | aDestinationPoint = point] ifNone: [self signalInvalidMoveDestination]].! !
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 19:48:17' prior: 50883993!
assertValidMove: anOriginPoint and: aDestinationPoint

	| isDiagonal centerAndCornerPoints|
	
	centerAndCornerPoints := OrderedCollection with: 1@1 with: 1@3 with: 2@2 with: 3@1 with: 3@3.
		
	((((anOriginPoint x - aDestinationPoint x) abs) < 2) and: [((anOriginPoint y- aDestinationPoint y) abs) < 2]) ifFalse: [self signalInvalidMoveDestination ].
	
	isDiagonal := (((anOriginPoint x - aDestinationPoint x) abs) + ((anOriginPoint y- aDestinationPoint y) abs)) = 2.
	
	isDiagonal ifTrue: [centerAndCornerPoints detect: [:point | aDestinationPoint = point] ifNone: [self signalInvalidMoveDestination]].! !

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 11/1/2020 19:48:33'!
PASSED!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 11/1/2020 19:48:33'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 11/1/2020 19:48:33'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'AM 11/1/2020 19:48:33'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 11/1/2020 19:48:33'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPlaceCorrectly stamp: 'AM 11/1/2020 19:48:33'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPlaceCorrectly stamp: 'AM 11/1/2020 19:48:33'!
PASSED!

!testRun: #TerniLapilliTest #test08OCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 19:48:33'!
PASSED!

!testRun: #TerniLapilliTest #test09XCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 19:48:33'!
PASSED!

!testRun: #TerniLapilliTest #test10XCantPlaceOutOfBounds stamp: 'AM 11/1/2020 19:48:33'!
PASSED!

!testRun: #TerniLapilliTest #test11OCantPlaceOutOfBounds stamp: 'AM 11/1/2020 19:48:33'!
PASSED!

!testRun: #TerniLapilliTest #test12CantPlaceMoreThanSixPieces stamp: 'AM 11/1/2020 19:48:33'!
PASSED!

!testRun: #TerniLapilliTest #test13XCanMovePiece stamp: 'AM 11/1/2020 19:48:33'!
PASSED!

!testRun: #TerniLapilliTest #test13XCanWinOnMove6 stamp: 'AM 11/1/2020 19:48:33'!
PASSED!

!testRun: #TerniLapilliTest #test14XCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 19:48:33'!
PASSED!

!testRun: #TerniLapilliTest #test15OCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 19:48:33'!
PASSED!

!methodRemoval: PiecePlacingStage #move:to: stamp: 'AM 11/1/2020 19:48:55'!
move: anOriginPoint to: aDestinationPoint
	
	
	!
!PiecePlacingStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:50:12'!
moveO: anOriginPoint to: aDestinationPoint

	^terniLapilli signalInvalidActionError.! !
!PiecePlacingStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:50:17'!
moveX: anOriginPoint to: aDestinationPoint

	^terniLapilli signalInvalidActionError.! !
!TerniLapilli methodsFor: 'error signals' stamp: 'AM 11/1/2020 19:50:31'!
signalInvalidActionError! !
!TerniLapilli methodsFor: 'error signals' stamp: 'AM 11/1/2020 19:51:10' prior: 50884101!
signalInvalidActionError

	^self error: TerniLapilli invalidActionErrorDescription.! !
!TerniLapilli methodsFor: 'error signals' stamp: 'AM 11/1/2020 19:51:24' prior: 50884105!
signalInvalidActionError

	^self error: self class invalidActionErrorDescription.! !
!TerniLapilli methodsFor: 'error signals' stamp: 'AM 11/1/2020 19:51:28'!
signalInvalidAction

	^self error: self class invalidActionErrorDescription.! !

!methodRemoval: TerniLapilli #signalInvalidActionError stamp: 'AM 11/1/2020 19:51:33'!
signalInvalidActionError

	^self error: self class invalidActionErrorDescription.!
!PiecePlacingStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:51:43' prior: 50884095!
moveX: anOriginPoint to: aDestinationPoint

	^terniLapilli signalInvalidAction.! !
!PiecePlacingStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:51:47' prior: 50884089!
moveO: anOriginPoint to: aDestinationPoint

	^terniLapilli signalInvalidAction.! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'AM 11/1/2020 19:52:21'!
invalidActionErrorDescription

	^'Cant perform this action at this stage'! !
!GameOverStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:52:43'!
moveO: anOriginPoint to: aDestinationPoint

	^terniLapilli signalInvalidAction.! !
!GameOverStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:52:51'!
moveX: anOriginPoint to: aDestinationPoint

	^terniLapilli signalInvalidAction.! !

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 11/1/2020 19:52:57'!
PASSED!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 11/1/2020 19:52:57'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 11/1/2020 19:52:57'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'AM 11/1/2020 19:52:57'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 11/1/2020 19:52:57'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPlaceCorrectly stamp: 'AM 11/1/2020 19:52:57'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPlaceCorrectly stamp: 'AM 11/1/2020 19:52:57'!
PASSED!

!testRun: #TerniLapilliTest #test08OCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 19:52:57'!
PASSED!

!testRun: #TerniLapilliTest #test09XCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 19:52:57'!
PASSED!

!testRun: #TerniLapilliTest #test10XCantPlaceOutOfBounds stamp: 'AM 11/1/2020 19:52:57'!
PASSED!

!testRun: #TerniLapilliTest #test11OCantPlaceOutOfBounds stamp: 'AM 11/1/2020 19:52:57'!
PASSED!

!testRun: #TerniLapilliTest #test12CantPlaceMoreThanSixPieces stamp: 'AM 11/1/2020 19:52:57'!
PASSED!

!testRun: #TerniLapilliTest #test13XCanMovePiece stamp: 'AM 11/1/2020 19:52:57'!
PASSED!

!testRun: #TerniLapilliTest #test13XCanWinOnMove6 stamp: 'AM 11/1/2020 19:52:57'!
PASSED!

!testRun: #TerniLapilliTest #test14XCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 19:52:57'!
PASSED!

!testRun: #TerniLapilliTest #test15OCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 19:52:57'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:55:22'!
test15XCantMoveOnInvalidDiagonal
	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 2@1; putXat: 2@2; putOat: 3@3.
	
	self
	should: [terniLapilli moveXFrom: 1@2 to: 2@3]
	raise: Error
	withMessageText: TerniLapilli invalidMoveDestinationErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:55:28'!
test16XCantMoveOnInvalidDiagonal
	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 2@1; putXat: 2@2; putOat: 3@3.
	
	self
	should: [terniLapilli moveXFrom: 1@2 to: 2@3]
	raise: Error
	withMessageText: TerniLapilli invalidMoveDestinationErrorDescription.! !

!methodRemoval: TerniLapilliTest #test15XCantMoveOnInvalidDiagonal stamp: 'AM 11/1/2020 19:55:31'!
test15XCantMoveOnInvalidDiagonal
	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 2@1; putXat: 2@2; putOat: 3@3.
	
	self
	should: [terniLapilli moveXFrom: 1@2 to: 2@3]
	raise: Error
	withMessageText: TerniLapilli invalidMoveDestinationErrorDescription.!

!testRun: #TerniLapilliTest #test16XCantMoveOnInvalidDiagonal stamp: 'AM 11/1/2020 19:55:34'!
FAILURE!

!testRun: #TerniLapilliTest #test16XCantMoveOnInvalidDiagonal stamp: 'AM 11/1/2020 19:55:34'!
FAILURE!
!TerniLapilli class methodsFor: 'error messages' stamp: 'AM 11/1/2020 19:56:20' prior: 50881432!
invalidMoveDestinationErrorDescription

	^'Move destination is invalid'! !

!testRun: #TerniLapilliTest #test16XCantMoveOnInvalidDiagonal stamp: 'AM 11/1/2020 19:56:27'!
FAILURE!

!testRun: #TerniLapilliTest #test16XCantMoveOnInvalidDiagonal stamp: 'AM 11/1/2020 19:56:27'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 19:56:54' prior: 50884217!
test16XCantMoveOnInvalidDiagonal
	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@2; putOat: 3@1; putXat: 1@3; putOat: 2@1; putXat: 2@2; putOat: 3@3.
	
	self
	should: [terniLapilli moveXFrom: 1@2 to: 2@3]
	raise: Error
	withMessageText: TerniLapilli invalidMoveDestinationErrorDescription.! !

!testRun: #TerniLapilliTest #test16XCantMoveOnInvalidDiagonal stamp: 'AM 11/1/2020 19:56:56'!
FAILURE!

!testRun: #TerniLapilliTest #test16XCantMoveOnInvalidDiagonal stamp: 'AM 11/1/2020 19:56:56'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'AM 11/1/2020 19:58:51' prior: 50883502!
moveXFrom: anOriginPoint to: aDestinationPoint
	
	gameStage moveX: anOriginPoint to: aDestinationPoint.
	
	! !
!TerniLapilli methodsFor: 'actions' stamp: 'AM 11/1/2020 19:58:58'!
moveOFrom: anOriginPoint to: aDestinationPoint
	
	gameStage moveO: anOriginPoint to: aDestinationPoint.
	
	! !

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 11/1/2020 19:59:01'!
PASSED!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 11/1/2020 19:59:01'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 11/1/2020 19:59:01'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'AM 11/1/2020 19:59:01'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 11/1/2020 19:59:01'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPlaceCorrectly stamp: 'AM 11/1/2020 19:59:01'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPlaceCorrectly stamp: 'AM 11/1/2020 19:59:01'!
PASSED!

!testRun: #TerniLapilliTest #test08OCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 19:59:01'!
PASSED!

!testRun: #TerniLapilliTest #test09XCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 19:59:01'!
PASSED!

!testRun: #TerniLapilliTest #test10XCantPlaceOutOfBounds stamp: 'AM 11/1/2020 19:59:01'!
PASSED!

!testRun: #TerniLapilliTest #test11OCantPlaceOutOfBounds stamp: 'AM 11/1/2020 19:59:01'!
PASSED!

!testRun: #TerniLapilliTest #test12CantPlaceMoreThanSixPieces stamp: 'AM 11/1/2020 19:59:01'!
PASSED!

!testRun: #TerniLapilliTest #test13XCanMovePiece stamp: 'AM 11/1/2020 19:59:01'!
ERROR!

!testRun: #TerniLapilliTest #test13XCanWinOnMove6 stamp: 'AM 11/1/2020 19:59:01'!
ERROR!

!testRun: #TerniLapilliTest #test14XCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 19:59:01'!
FAILURE!

!testRun: #TerniLapilliTest #test15OCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 19:59:01'!
FAILURE!

!testRun: #TerniLapilliTest #test16XCantMoveOnInvalidDiagonal stamp: 'AM 11/1/2020 19:59:01'!
PASSED!

!testRun: #TerniLapilliTest #test13XCanMovePiece stamp: 'AM 11/1/2020 19:59:12'!
ERROR!

!testRun: #TerniLapilliTest #test13XCanMovePiece stamp: 'AM 11/1/2020 19:59:12'!
ERROR!
!X methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:00:45' prior: 50883845!
moveX: anOriginPoint to: aDestinationPoint
	
	terniLapilli place: #E at: anOriginPoint .
	terniLapilli place: #X at: aDestinationPoint.
	terniLapilli changeStageIfGameOverReached.! !
!O methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:01:17' prior: 50883836!
moveO: anOriginPoint to: aDestinationPoint

		terniLapilli place: #E at: anOriginPoint.
		terniLapilli place: #O at: aDestinationPoint.
		terniLapilli changeStageIfGameOverReached.! !

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 11/1/2020 20:01:21'!
PASSED!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 11/1/2020 20:01:21'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 11/1/2020 20:01:21'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'AM 11/1/2020 20:01:21'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 11/1/2020 20:01:21'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPlaceCorrectly stamp: 'AM 11/1/2020 20:01:21'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPlaceCorrectly stamp: 'AM 11/1/2020 20:01:21'!
PASSED!

!testRun: #TerniLapilliTest #test08OCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 20:01:21'!
PASSED!

!testRun: #TerniLapilliTest #test09XCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 20:01:21'!
PASSED!

!testRun: #TerniLapilliTest #test10XCantPlaceOutOfBounds stamp: 'AM 11/1/2020 20:01:21'!
PASSED!

!testRun: #TerniLapilliTest #test11OCantPlaceOutOfBounds stamp: 'AM 11/1/2020 20:01:21'!
PASSED!

!testRun: #TerniLapilliTest #test12CantPlaceMoreThanSixPieces stamp: 'AM 11/1/2020 20:01:21'!
PASSED!

!testRun: #TerniLapilliTest #test13XCanMovePiece stamp: 'AM 11/1/2020 20:01:21'!
PASSED!

!testRun: #TerniLapilliTest #test13XCanWinOnMove6 stamp: 'AM 11/1/2020 20:01:21'!
PASSED!

!testRun: #TerniLapilliTest #test14XCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 20:01:21'!
FAILURE!

!testRun: #TerniLapilliTest #test15OCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 20:01:21'!
FAILURE!

!testRun: #TerniLapilliTest #test16XCantMoveOnInvalidDiagonal stamp: 'AM 11/1/2020 20:01:21'!
PASSED!

!testRun: #TerniLapilliTest #test14XCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 20:01:30'!
FAILURE!

!testRun: #TerniLapilliTest #test14XCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 20:01:30'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:02:10' prior: 50883530!
test14XCantMovePieceOutOfBounds

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 2@1; putXat: 2@2; putOat: 2@3.
	
	self
	should: [terniLapilli moveXFrom: 2@2 to: 4@2]
	raise: Error
	withMessageText: TerniLapilli invalidMoveDestinationErrorDescription.! !
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 20:03:07' prior: 50883516!
assertInRange: anOriginPoint and: aDestinationPoint

	(((anOriginPoint x) between: 1 and: 3) and: [(anOriginPoint y) between: 1 and: 3]) ifFalse: [self signalOutOfBoundsPosition].! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:03:23' prior: 50884429!
test14XCantMovePieceOutOfBounds

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 2@1; putXat: 2@2; putOat: 2@3.
	
	self
	should: [terniLapilli moveXFrom: 2@2 to: 4@2]
	raise: Error
	withMessageText: TerniLapilli outOfBoundsPositionErrorDescription.! !

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 11/1/2020 20:03:28'!
PASSED!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 11/1/2020 20:03:28'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 11/1/2020 20:03:28'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'AM 11/1/2020 20:03:28'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 11/1/2020 20:03:28'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPlaceCorrectly stamp: 'AM 11/1/2020 20:03:28'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPlaceCorrectly stamp: 'AM 11/1/2020 20:03:28'!
PASSED!

!testRun: #TerniLapilliTest #test08OCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 20:03:28'!
PASSED!

!testRun: #TerniLapilliTest #test09XCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 20:03:28'!
PASSED!

!testRun: #TerniLapilliTest #test10XCantPlaceOutOfBounds stamp: 'AM 11/1/2020 20:03:28'!
PASSED!

!testRun: #TerniLapilliTest #test11OCantPlaceOutOfBounds stamp: 'AM 11/1/2020 20:03:28'!
PASSED!

!testRun: #TerniLapilliTest #test12CantPlaceMoreThanSixPieces stamp: 'AM 11/1/2020 20:03:28'!
PASSED!

!testRun: #TerniLapilliTest #test13XCanMovePiece stamp: 'AM 11/1/2020 20:03:28'!
PASSED!

!testRun: #TerniLapilliTest #test13XCanWinOnMove6 stamp: 'AM 11/1/2020 20:03:28'!
PASSED!

!testRun: #TerniLapilliTest #test14XCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 20:03:28'!
FAILURE!

!testRun: #TerniLapilliTest #test15OCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 20:03:28'!
FAILURE!

!testRun: #TerniLapilliTest #test16XCantMoveOnInvalidDiagonal stamp: 'AM 11/1/2020 20:03:28'!
PASSED!

!testRun: #TerniLapilliTest #test15OCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 20:03:33'!
FAILURE!

!testRun: #TerniLapilliTest #test15OCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 20:03:43'!
FAILURE!

!testRun: #TerniLapilliTest #test14XCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 20:04:47'!
FAILURE!
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 20:06:07' prior: 50884442!
assertInRange: anOriginPoint and: aDestinationPoint

	(((anOriginPoint x) between: 1 and: 3) and: [(anOriginPoint y) between: 1 and: 3]) ifFalse: [self signalOutOfBoundsPosition].
	(((aDestinationPoint x) between: 1 and: 3) and: [(aDestinationPoint y) between: 1 and: 3]) ifFalse: [self signalOutOfBoundsPosition].! !

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 11/1/2020 20:06:11'!
PASSED!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 11/1/2020 20:06:11'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 11/1/2020 20:06:11'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'AM 11/1/2020 20:06:11'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 11/1/2020 20:06:11'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPlaceCorrectly stamp: 'AM 11/1/2020 20:06:11'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPlaceCorrectly stamp: 'AM 11/1/2020 20:06:11'!
PASSED!

!testRun: #TerniLapilliTest #test08OCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 20:06:11'!
PASSED!

!testRun: #TerniLapilliTest #test09XCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 20:06:11'!
PASSED!

!testRun: #TerniLapilliTest #test10XCantPlaceOutOfBounds stamp: 'AM 11/1/2020 20:06:11'!
PASSED!

!testRun: #TerniLapilliTest #test11OCantPlaceOutOfBounds stamp: 'AM 11/1/2020 20:06:11'!
PASSED!

!testRun: #TerniLapilliTest #test12CantPlaceMoreThanSixPieces stamp: 'AM 11/1/2020 20:06:12'!
PASSED!

!testRun: #TerniLapilliTest #test13XCanMovePiece stamp: 'AM 11/1/2020 20:06:12'!
PASSED!

!testRun: #TerniLapilliTest #test13XCanWinOnMove6 stamp: 'AM 11/1/2020 20:06:12'!
PASSED!

!testRun: #TerniLapilliTest #test14XCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 20:06:12'!
PASSED!

!testRun: #TerniLapilliTest #test15OCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 20:06:12'!
PASSED!

!testRun: #TerniLapilliTest #test16XCantMoveOnInvalidDiagonal stamp: 'AM 11/1/2020 20:06:12'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:07:34'!
test17OCantMoveOnInvalidDiagonal
	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@2; putOat: 3@1; putXat: 1@3; putOat: 2@1; putXat: 2@2; putOat: 3@3.
	
	self
	should: [terniLapilli moveOFrom: 2@1 to: 3@2]
	raise: Error
	withMessageText: TerniLapilli invalidMoveDestinationErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:07:40' prior: 50883655!
test15OCantMovePieceOutOfBounds

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 2@1; putXat: 2@2; putOat: 2@3.
	
	self
	should: [terniLapilli moveOFrom: 2@2 to: 4@2]
	raise: Error
	withMessageText: TerniLapilli outOfBoundsPositionErrorDescription.! !

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 11/1/2020 20:07:57'!
PASSED!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 11/1/2020 20:07:57'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 11/1/2020 20:07:57'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'AM 11/1/2020 20:07:57'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 11/1/2020 20:07:57'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPlaceCorrectly stamp: 'AM 11/1/2020 20:07:57'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPlaceCorrectly stamp: 'AM 11/1/2020 20:07:57'!
PASSED!

!testRun: #TerniLapilliTest #test08OCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 20:07:57'!
PASSED!

!testRun: #TerniLapilliTest #test09XCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 20:07:57'!
PASSED!

!testRun: #TerniLapilliTest #test10XCantPlaceOutOfBounds stamp: 'AM 11/1/2020 20:07:57'!
PASSED!

!testRun: #TerniLapilliTest #test11OCantPlaceOutOfBounds stamp: 'AM 11/1/2020 20:07:57'!
PASSED!

!testRun: #TerniLapilliTest #test12CantPlaceMoreThanSixPieces stamp: 'AM 11/1/2020 20:07:57'!
PASSED!

!testRun: #TerniLapilliTest #test13XCanMovePiece stamp: 'AM 11/1/2020 20:07:57'!
PASSED!

!testRun: #TerniLapilliTest #test13XCanWinOnMove6 stamp: 'AM 11/1/2020 20:07:57'!
PASSED!

!testRun: #TerniLapilliTest #test14XCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 20:07:57'!
PASSED!

!testRun: #TerniLapilliTest #test15OCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 20:07:57'!
PASSED!

!testRun: #TerniLapilliTest #test16XCantMoveOnInvalidDiagonal stamp: 'AM 11/1/2020 20:07:57'!
PASSED!

!testRun: #TerniLapilliTest #test17OCantMoveOnInvalidDiagonal stamp: 'AM 11/1/2020 20:07:57'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:10:28'!
test18CantMoveAfterGameIsOver
	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 2@1; putXat: 1@2; putOat: 2@2; putXat: 2@3; putOat: 3@1.
	terniLapilli moveXFrom: 2@3 to: 1@3.
	self
	should: [terniLapilli moveOFrom: 2@1 to: 3@1]
	raise: Error
	withMessageText: TerniLapilli invalidActionErrorDescription.! !

!testRun: #TerniLapilliTest #test18CantMoveAfterGameIsOver stamp: 'AM 11/1/2020 20:10:31'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:11:43'!
test19CantMoveOnOtherPlayersTurn
	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 2@1; putXat: 1@2; putOat: 2@2; putXat: 2@3; putOat: 3@1.
	self
	should: [terniLapilli moveOFrom: 2@1 to: 3@1]
	raise: Error
	withMessageText: TerniLapilli .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:12:38' prior: 50884690!
test19CantMoveOnOtherPlayersTurn
	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 2@1; putXat: 1@2; putOat: 2@2; putXat: 2@3; putOat: 3@1.
	self
	should: [terniLapilli moveOFrom: 2@1 to: 3@1]
	raise: Error
	withMessageText: TerniLapilli incorrectPlayerTurnErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:13:55' prior: 50884703!
test19CantMoveOnOtherPlayersTurn
	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 2@1; putXat: 1@2; putOat: 2@2; putXat: 2@3; putOat: 3@1.
	self
	should: [terniLapilli moveOFrom: 2@1 to: 3@1]
	raise: Error
	withMessageText: TerniLapilli incorrectPlayerTurnErrorDescription.
	
	terniLapilli moveXFrom: 2@3 to: 3@3.
	
	self
	should: [terniLapilli moveXFrom: 3@3 to: 2@3]
	raise: Error
	withMessageText: TerniLapilli incorrectPlayerTurnErrorDescription.! !

!testRun: #TerniLapilliTest #test19CantMoveOnOtherPlayersTurn stamp: 'AM 11/1/2020 20:14:03'!
FAILURE!

!testRun: #TerniLapilliTest #test19CantMoveOnOtherPlayersTurn stamp: 'AM 11/1/2020 20:14:03'!
FAILURE!

!testRun: #TerniLapilliTest #test19CantMoveOnOtherPlayersTurn stamp: 'AM 11/1/2020 20:15:22'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:16:01' prior: 50884717!
test19CantMoveOnOtherPlayersTurn
	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 2@1; putXat: 1@2; putOat: 2@2; putXat: 2@3; putOat: 3@1.
	self
	should: [terniLapilli moveOFrom: 2@2 to: 3@2]
	raise: Error
	withMessageText: TerniLapilli incorrectPlayerTurnErrorDescription.
	
	terniLapilli moveXFrom: 2@3 to: 3@3.
	
	self
	should: [terniLapilli moveXFrom: 3@3 to: 2@3]
	raise: Error
	withMessageText: TerniLapilli incorrectPlayerTurnErrorDescription.! !

!testRun: #TerniLapilliTest #test19CantMoveOnOtherPlayersTurn stamp: 'AM 11/1/2020 20:16:04'!
FAILURE!

!testRun: #TerniLapilliTest #test19CantMoveOnOtherPlayersTurn stamp: 'AM 11/1/2020 20:16:04'!
FAILURE!

!testRun: #TerniLapilliTest #test19CantMoveOnOtherPlayersTurn stamp: 'AM 11/1/2020 20:16:16'!
FAILURE!

!testRun: #TerniLapilliTest #test19CantMoveOnOtherPlayersTurn stamp: 'AM 11/1/2020 20:16:16'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:18:10' prior: 50884746!
test19CantMoveOnOtherPlayersTurn
	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 2@1; putXat: 1@2; putOat: 2@2; putXat: 2@3; putOat: 3@1.
	self
	should: [terniLapilli moveOFrom: 2@2 to: 3@2]
	raise: Error
	withMessageText: TerniLapilli incorrectPlayerTurnErrorDescription.
	
	! !

!testRun: #TerniLapilliTest #test19CantMoveOnOtherPlayersTurn stamp: 'AM 11/1/2020 20:18:13'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:18:16' prior: 50884778!
test19CantMoveOnOtherPlayersTurn
	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 2@1; putXat: 1@2; putOat: 2@2; putXat: 2@3; putOat: 3@1.
	self
	should: [terniLapilli moveOFrom: 2@2 to: 3@2]
	raise: Error
	withMessageText: TerniLapilli incorrectPlayerTurnErrorDescription.
	
	terniLapilli moveXFrom: 2@3 to: 3@3.
	
	self
	should: [terniLapilli moveXFrom: 3@3 to: 2@3]
	raise: Error
	withMessageText: TerniLapilli incorrectPlayerTurnErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:18:29' prior: 50884795!
test19CantMoveOnOtherPlayersTurn
	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 2@1; putXat: 1@2; putOat: 2@2; putXat: 2@3; putOat: 3@1.
	self
	should: [terniLapilli moveOFrom: 2@2 to: 3@2]
	raise: Error
	withMessageText: TerniLapilli incorrectPlayerTurnErrorDescription.
	
	terniLapilli moveXFrom: 2@3 to: 3@3.
	
	! !

!testRun: #TerniLapilliTest #test19CantMoveOnOtherPlayersTurn stamp: 'AM 11/1/2020 20:18:31'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:18:36' prior: 50884814!
test19CantMoveOnOtherPlayersTurn
	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 2@1; putXat: 1@2; putOat: 2@2; putXat: 2@3; putOat: 3@1.
	self
	should: [terniLapilli moveOFrom: 2@2 to: 3@2]
	raise: Error
	withMessageText: TerniLapilli incorrectPlayerTurnErrorDescription.
	
	terniLapilli moveXFrom: 2@3 to: 3@3.
	
	self
	should: [terniLapilli moveXFrom: 3@3 to: 2@3]
	raise: Error
	withMessageText: TerniLapilli incorrectPlayerTurnErrorDescription.! !
!X methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:20:34' prior: 50884352!
moveX: anOriginPoint to: aDestinationPoint
	
	terniLapilli place: #E at: anOriginPoint .
	terniLapilli place: #X at: aDestinationPoint.
	terniLapilli setPlayerOTurn.
	terniLapilli changeStageIfGameOverReached.! !
!O methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:20:41' prior: 50884361!
moveO: anOriginPoint to: aDestinationPoint

		terniLapilli place: #E at: anOriginPoint.
		terniLapilli place: #O at: aDestinationPoint.
		terniLapilli setPlayerXTurn.
		terniLapilli changeStageIfGameOverReached.! !

!testRun: #TerniLapilliTest #test19CantMoveOnOtherPlayersTurn stamp: 'AM 11/1/2020 20:20:46'!
PASSED!

!methodRemoval: TerniLapilliTest #test13XCanWinOnMove6 stamp: 'AM 11/1/2020 20:21:04'!
test13XCanWinOnMove6

	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 1@2; putXat: 1@3; putOat: 2@1; putXat: 2@2; putOat: 2@3.
	
	terniLapilli moveXFrom: 2@2 to: 3@2.
	
	self assert: (terniLapilli atPosition: 3@2) equals: #X.
	self assert: (terniLapilli atPosition: 2@2) equals: #E.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:22:00'!
test20XCanWinOnFifthMove
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:22:24' prior: 50884887!
test20XCanWinOnFifthMove
	
	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 2@1; putXat: 1@2; putOat: 2@2; putXat: 1@3.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:22:45' prior: 50884892!
test20XCanWinOnFifthMove
	
	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 2@1; putXat: 1@2; putOat: 2@2; putXat: 1@3.
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:24:16' prior: 50884901!
test20XCanWinOnFifthMove
	
	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 2@1; putXat: 1@2; putOat: 2@2; putXat: 1@3.
	
	self assert: (terniLapilli hasWon: #X).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:24:29' prior: 50884910!
test20XCanWinOnFifthMove
	
	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 2@1; putXat: 1@2; putOat: 2@2; putXat: 1@3.
	
	self assert: (terniLapilli hasWon: #X).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:25:39'!
test21OCanWinOnSixthMove
	
	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 2@1; putXat: 1@2; putOat: 2@2; putXat: 3@3; putOat: 2@3.
	
	self assert: (terniLapilli hasWon: #X).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:25:41' prior: 50884930!
test21OCanWinOnSixthMove
	
	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 2@1; putXat: 1@2; putOat: 2@2; putXat: 3@3; putOat: 2@3.
	
	self assert: (terniLapilli hasWon: #O).! !

!testRun: #TerniLapilliTest #test21OCanWinOnSixthMove stamp: 'AM 11/1/2020 20:25:44'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:26:17'!
test22OCantPlaceAfterGameIsOver
	
	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 2@1; putXat: 1@2; putOat: 2@2; putXat: 3@3; putOat: 2@3.
	
	self assert: (terniLapilli hasWon: #O).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:27:41' prior: 50884954!
test22OCantPlaceAfterGameIsOver
	
	| terniLapilli |
	
	terniLapilli := TerniLapilli new. 
	
	terniLapilli putXat: 1@1; putOat: 2@1; putXat: 1@2; putOat: 2@2; putXat: 1@3.
	
	self
	should: [terniLapilli putOat: 3@3]
	raise: Error
	withMessageText: TerniLapilli invalidActionErrorDescription.! !

!testRun: #TerniLapilliTest #test22OCantPlaceAfterGameIsOver stamp: 'AM 11/1/2020 20:27:46'!
FAILURE!

!testRun: #TerniLapilliTest #test22OCantPlaceAfterGameIsOver stamp: 'AM 11/1/2020 20:27:46'!
FAILURE!
!GameOverStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:28:35' prior: 50882804!
putXat: aPoint

	terniLapilli signalInvalidAction.! !

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 11/1/2020 20:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 11/1/2020 20:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 11/1/2020 20:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'AM 11/1/2020 20:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 11/1/2020 20:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPlaceCorrectly stamp: 'AM 11/1/2020 20:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPlaceCorrectly stamp: 'AM 11/1/2020 20:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test08OCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 20:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test09XCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 20:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test10XCantPlaceOutOfBounds stamp: 'AM 11/1/2020 20:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test11OCantPlaceOutOfBounds stamp: 'AM 11/1/2020 20:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test12CantPlaceMoreThanSixPieces stamp: 'AM 11/1/2020 20:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test13XCanMovePiece stamp: 'AM 11/1/2020 20:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test14XCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 20:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test15OCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 20:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test16XCantMoveOnInvalidDiagonal stamp: 'AM 11/1/2020 20:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test17OCantMoveOnInvalidDiagonal stamp: 'AM 11/1/2020 20:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test18CantMoveAfterGameIsOver stamp: 'AM 11/1/2020 20:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test19CantMoveOnOtherPlayersTurn stamp: 'AM 11/1/2020 20:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test20XCanWinOnFifthMove stamp: 'AM 11/1/2020 20:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test21OCanWinOnSixthMove stamp: 'AM 11/1/2020 20:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test22OCantPlaceAfterGameIsOver stamp: 'AM 11/1/2020 20:28:41'!
FAILURE!

!testRun: #TerniLapilliTest #test22OCantPlaceAfterGameIsOver stamp: 'AM 11/1/2020 20:28:41'!
FAILURE!

!testRun: #TerniLapilliTest #test22OCantPlaceAfterGameIsOver stamp: 'AM 11/1/2020 20:28:50'!
FAILURE!

!testRun: #TerniLapilliTest #test22OCantPlaceAfterGameIsOver stamp: 'AM 11/1/2020 20:28:50'!
FAILURE!

!testRun: #TerniLapilliTest #test21OCanWinOnSixthMove stamp: 'AM 11/1/2020 20:29:30'!
PASSED!
!GameOverStage methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 20:29:53' prior: 50882809!
putOat: aPoint

	terniLapilli signalInvalidAction.! !

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 11/1/2020 20:29:56'!
PASSED!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 11/1/2020 20:29:56'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 11/1/2020 20:29:56'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'AM 11/1/2020 20:29:56'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 11/1/2020 20:29:56'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPlaceCorrectly stamp: 'AM 11/1/2020 20:29:56'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPlaceCorrectly stamp: 'AM 11/1/2020 20:29:56'!
PASSED!

!testRun: #TerniLapilliTest #test08OCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 20:29:56'!
PASSED!

!testRun: #TerniLapilliTest #test09XCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 20:29:56'!
PASSED!

!testRun: #TerniLapilliTest #test10XCantPlaceOutOfBounds stamp: 'AM 11/1/2020 20:29:56'!
PASSED!

!testRun: #TerniLapilliTest #test11OCantPlaceOutOfBounds stamp: 'AM 11/1/2020 20:29:56'!
PASSED!

!testRun: #TerniLapilliTest #test12CantPlaceMoreThanSixPieces stamp: 'AM 11/1/2020 20:29:56'!
PASSED!

!testRun: #TerniLapilliTest #test13XCanMovePiece stamp: 'AM 11/1/2020 20:29:56'!
PASSED!

!testRun: #TerniLapilliTest #test14XCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 20:29:56'!
PASSED!

!testRun: #TerniLapilliTest #test15OCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 20:29:56'!
PASSED!

!testRun: #TerniLapilliTest #test16XCantMoveOnInvalidDiagonal stamp: 'AM 11/1/2020 20:29:56'!
PASSED!

!testRun: #TerniLapilliTest #test17OCantMoveOnInvalidDiagonal stamp: 'AM 11/1/2020 20:29:56'!
PASSED!

!testRun: #TerniLapilliTest #test18CantMoveAfterGameIsOver stamp: 'AM 11/1/2020 20:29:56'!
PASSED!

!testRun: #TerniLapilliTest #test19CantMoveOnOtherPlayersTurn stamp: 'AM 11/1/2020 20:29:56'!
PASSED!

!testRun: #TerniLapilliTest #test20XCanWinOnFifthMove stamp: 'AM 11/1/2020 20:29:56'!
PASSED!

!testRun: #TerniLapilliTest #test21OCanWinOnSixthMove stamp: 'AM 11/1/2020 20:29:56'!
PASSED!

!testRun: #TerniLapilliTest #test22OCantPlaceAfterGameIsOver stamp: 'AM 11/1/2020 20:29:56'!
PASSED!

!testRun: #TerniLapilliTest #test01NewGameIsNotOver stamp: 'AM 11/1/2020 20:30:24'!
PASSED!

!testRun: #TerniLapilliTest #test02XStartsPlaying stamp: 'AM 11/1/2020 20:30:24'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'AM 11/1/2020 20:30:24'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'AM 11/1/2020 20:30:24'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPlayOnOtherPlayersTurn stamp: 'AM 11/1/2020 20:30:24'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanPlaceCorrectly stamp: 'AM 11/1/2020 20:30:24'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanPlaceCorrectly stamp: 'AM 11/1/2020 20:30:24'!
PASSED!

!testRun: #TerniLapilliTest #test08OCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 20:30:24'!
PASSED!

!testRun: #TerniLapilliTest #test09XCantPlaceOnOccupiedPostition stamp: 'AM 11/1/2020 20:30:24'!
PASSED!

!testRun: #TerniLapilliTest #test10XCantPlaceOutOfBounds stamp: 'AM 11/1/2020 20:30:24'!
PASSED!

!testRun: #TerniLapilliTest #test11OCantPlaceOutOfBounds stamp: 'AM 11/1/2020 20:30:24'!
PASSED!

!testRun: #TerniLapilliTest #test12CantPlaceMoreThanSixPieces stamp: 'AM 11/1/2020 20:30:24'!
PASSED!

!testRun: #TerniLapilliTest #test13XCanMovePiece stamp: 'AM 11/1/2020 20:30:24'!
PASSED!

!testRun: #TerniLapilliTest #test14XCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 20:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test15OCantMovePieceOutOfBounds stamp: 'AM 11/1/2020 20:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test16XCantMoveOnInvalidDiagonal stamp: 'AM 11/1/2020 20:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test17OCantMoveOnInvalidDiagonal stamp: 'AM 11/1/2020 20:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test18CantMoveAfterGameIsOver stamp: 'AM 11/1/2020 20:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test19CantMoveOnOtherPlayersTurn stamp: 'AM 11/1/2020 20:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test20XCanWinOnFifthMove stamp: 'AM 11/1/2020 20:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test21OCanWinOnSixthMove stamp: 'AM 11/1/2020 20:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test22OCantPlaceAfterGameIsOver stamp: 'AM 11/1/2020 20:30:25'!
PASSED!

----QUIT----(1 November 2020 20:30:37) CuisUniversity-4383.image priorSource: 17593353!