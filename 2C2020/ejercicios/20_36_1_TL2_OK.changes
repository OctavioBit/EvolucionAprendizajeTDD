----STARTUP---- (18 November 2020 16:17:47) as /Users/ilanolkies/uba/ingsoft1/macos64/CuisUniversity-4384.image!


!classRemoval: #TusLibrosShop stamp: 'IO 11/18/2020 16:17:57'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'books catalog usersAndPasswords carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #TusLibrosShopTest stamp: 'IO 11/18/2020 16:17:57'!
TestCase subclass: #TusLibrosShopTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

----End fileIn of /Users/ilanolkies/uba/ingsoft1/macos64/Ejercicio-20-Tus-Libros.st----!
!TusLibrosShopTest methodsFor: 'tests carrito' stamp: 'IO 11/18/2020 16:18:15' prior: 50867953!
test01ANewCartIsEmpty
	| aShop aCatalog |
	aCatalog := Dictionary newFromPairs: #('admin', 'password').
	aShop := TusLibrosShop withCatalog: OrderedCollection new andUsers: aCatalog.
	aShop createCartFor: 'admin' withPassword: 'password'. 
	
	self assert: Bag new equals: (aShop listCart: 1).! !

!classRenamed: #TusLibrosShop as: #TusLibrosShop2 stamp: 'IO 11/18/2020 16:19:49'!
Smalltalk renameClassNamed: #TusLibrosShop as: #TusLibrosShop2!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:19:49' prior: 50867965!
test02ABookCanBeAddedToTheCart
	|aShop bookBag aDictionaryOfUsers aCatalog|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aCatalog := OrderedCollection with: '0-7645-2641-3'.
	aShop := TusLibrosShop2 withCatalog: aCatalog andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	
	aShop createCartFor: 'admin' withPassword: 'password'. 
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 1.
	bookBag add: '0-7645-2641-3'.
	
	self assert: bookBag equals: (aShop listCart: 1).   ! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:19:49' prior: 50867984!
test03ManyBooksCanBeAddedToTheCart
	|aShop bookBag aDictionaryOfUsers aCatalog|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aCatalog := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'.
	aShop := TusLibrosShop2 withCatalog: aCatalog andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	
	aShop createCartFor: 'admin' withPassword: 'password'. 
	
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 1.
	bookBag add: '0-7645-2641-3'.
	aShop addToCart: 1 theBook: '0-7645-2641-4' times: 1.
	bookBag add: '0-7645-2641-4'.
	
	self assert: bookBag equals: (aShop listCart: 1).   
	! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:19:49' prior: 50868085!
test01ANewCartIsEmpty
	| aShop aCatalog |
	aCatalog := Dictionary newFromPairs: #('admin', 'password').
	aShop := TusLibrosShop2 withCatalog: OrderedCollection new andUsers: aCatalog.
	aShop createCartFor: 'admin' withPassword: 'password'. 
	
	self assert: Bag new equals: (aShop listCart: 1).! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:19:49' prior: 50868006!
test04CanAddMoreThanOneFromTheSameBook
	|aShop bookBag aDictionaryOfUsers aCatalog|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aCatalog := OrderedCollection with: '0-7645-2641-3'.
	aShop := TusLibrosShop2 withCatalog: aCatalog andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	
	aShop createCartFor: 'admin' withPassword: 'password'. 
	
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 2.
	bookBag add: '0-7645-2641-3' withOccurrences: 2.
	
	self assert: bookBag equals: (aShop listCart: 1).   ! !

!classRenamed: #TusLibrosShopTest as: #TusLibrosShop2Test stamp: 'IO 11/18/2020 16:19:55'!
Smalltalk renameClassNamed: #TusLibrosShopTest as: #TusLibrosShop2Test!

TestCase subclass: #TusLibrosShopTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosShopTest category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 16:20:11'!
TestCase subclass: #TusLibrosShopTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 16:24:20'!
Object subclass: #TusLibrosShop
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShopTest methodsFor: 'no messages' stamp: 'IO 11/18/2020 16:24:11'!
test01

	| tusLibros users catalogue |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	! !

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:24:33'!
ERROR!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:27:07' prior: 50868203!
test01

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId size).

	! !

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:27:11'!
ERROR!
!TusLibrosShop class methodsFor: 'instance creation' stamp: 'IO 11/18/2020 16:27:18'!
fromCatalogue: anOrderedCollection users: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFromCatalogue: anOrderedCollection users: aDictionary ! !
!TusLibrosShop class methodsFor: 'instance creation' stamp: 'IO 11/18/2020 16:27:21' prior: 50868233!
fromCatalogue: anOrderedCollection users: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"

	^self new initializeFromCatalogue: anOrderedCollection users: aDictionary ! !

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:27:22'!
ERROR!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 16:27:36'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'orderedCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 16:27:36'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'orderedCollection dictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 16:27:36'!
initializeFromCatalogue: anOrderedCollection users: aDictionary 
	self shouldBeImplemented.
	orderedCollection := anOrderedCollection.
	dictionary := aDictionary.! !
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 16:28:03' prior: 50868272!
initializeFromCatalogue: aCatalogue users: users 
	! !

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:28:05'!
ERROR!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:28:05'!
ERROR!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:28:09'!
ERROR!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:28:22'!
newCartForUser: aString Password: aString2 
	self shouldBeImplemented.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:28:25' prior: 50868293!
newCartForUser: aString Password: aString2 
! !

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:28:27'!
ERROR!
!TusLibrosShop methodsFor: 'error handling' stamp: 'IO 11/18/2020 16:28:30' overrides: 16881409!
error: aString 
	self shouldBeImplemented.! !

!methodRemoval: TusLibrosShop #error: stamp: 'IO 11/18/2020 16:28:51'!
error: aString 
	self shouldBeImplemented.!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:28:53'!
ERROR!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:28:53'!
ERROR!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:29:34'!
ERROR!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:29:34'!
ERROR!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:29:57' prior: 50868216!
test01

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: ((tusLibros listCart: cartId) size).

	! !

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:29:59'!
ERROR!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:30:08'!
listCart: aTusLibrosShop 
	self shouldBeImplemented.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:30:18' prior: 50868339!
listCart: aTusLibrosShop 
	^OrderedCollection new.! !

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:30:20'!
PASSED!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:30:20'!
PASSED!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:30:22'!
PASSED!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:30:22'!
PASSED!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:30:27' prior: 50868323!
test01

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.

	! !

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:30:28'!
PASSED!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:30:28'!
PASSED!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:30:34' prior: 50868359!
test01

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:30:45'!
test01NewCartIsEmtpy

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:30:55'!
test01NewCartIsEmpty

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !

!methodRemoval: TusLibrosShopTest #test01NewCartIsEmtpy stamp: 'IO 11/18/2020 16:30:55'!
test01NewCartIsEmtpy

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
!

!methodRemoval: TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:30:57'!
test01

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:31:27'!
test02CanAddAproductToCart

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:31:53' prior: 50868450!
test02CanAddAproductToCart

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:31:59' prior: 50868408!
test01NewCartIsEmpty

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'..
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:32:06' prior: 50868481!
test01NewCartIsEmpty

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'..
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:32:40'!
newTusLibros

	| tusLibros users catalogue |
	
	catalogue := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'..
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.

	^tusLibros.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:33:06' prior: 50868497!
test01NewCartIsEmpty

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:33:20' prior: 50868465!
test02CanAddAproductToCart

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:34:21'!
test02CanAddABookProductToCart

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '' bookQuantity: 1.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !

!methodRemoval: TusLibrosShopTest #test02CanAddAproductToCart stamp: 'IO 11/18/2020 16:34:26'!
test02CanAddAproductToCart

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:34:39' prior: 50868545!
test02CanAddABookProductToCart

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:34:40'!
ERROR!
!TusLibrosShop methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:34:47'!
addToCart: aTusLibrosShop booksIsbn: aString bookQuantity: aSmallInteger 
	self shouldBeImplemented.! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:36:14' prior: 50868567!
test02CanAddABookProductToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag.
	self assert: cart equals: (tusLibros listCart: cartId).
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:36:44' prior: 50868589!
test02CanAddABookProductToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:36:49' prior: 50868602!
test02CanAddABookProductToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:36:50'!
ERROR!
!TusLibrosShop methodsFor: 'error handling' stamp: 'IO 11/18/2020 16:37:01' overrides: 16881409!
error: aString 
	self shouldBeImplemented.! !

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 16:37:29'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'orderedCollection dictionary hasTheBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'error handling' stamp: 'IO 11/18/2020 16:37:26' prior: 50868633 overrides: 16881409!
error: aString 
	hasTheBook := true.
! !

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:37:33'!
ERROR!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:37:43' prior: 50868616!
test02CanAddABookProductToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag new.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:37:44'!
FAILURE!

!methodRemoval: TusLibrosShop #error: stamp: 'IO 11/18/2020 16:38:02'!
error: aString 
	hasTheBook := true.
!
!TusLibrosShop methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:38:15' prior: 50868582!
addToCart: aTusLibrosShop booksIsbn: aString bookQuantity: aSmallInteger 
	hasTheBook := true.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:38:51' prior: 50868344!
listCart: aTusLibrosShop 
	(hasTheBook) ifTrue: [^Bag new with: '']
	^OrderedCollection new.! !
!TusLibrosShop methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:39:06' prior: 50868676!
addToCart: aTusLibrosShop booksIsbn: aString bookQuantity: aSmallInteger 
	hasTheBook := aString.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:39:26' prior: 50868682!
listCart: aTusLibrosShop 
	(hasTheBook notNil) ifTrue: [^Bag new with: hasTheBook]
	^OrderedCollection new.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:39:28' prior: 50868695!
listCart: aTusLibrosShop 
	(hasTheBook notNil) ifTrue: [^Bag new with: hasTheBook].
	^OrderedCollection new.! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:39:29'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:39:29'!
ERROR!

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:39:29'!
ERROR!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:39:38' prior: 50868702!
listCart: aTusLibrosShop 
	(hasTheBook notNil) ifTrue: [^Bag new add: hasTheBook].
	^OrderedCollection new.! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:39:38'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:39:38'!
FAILURE!

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:39:38'!
FAILURE!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:40:03' prior: 50868718!
listCart: aTusLibrosShop 
	(hasTheBook notNil) ifTrue: [^Bag with: hasTheBook].
	^OrderedCollection new.! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:40:04'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:40:04'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:40:07'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:40:07'!
PASSED!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:40:24'!
test03CanAddDifferentBooksToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag new.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:40:33'!
test02CanAddABookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag new.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !

!methodRemoval: TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:40:33'!
test02CanAddABookProductToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag new.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:40:42' prior: 50868513!
newTusLibros

	| tusLibros users catalogue |
	
	catalogue := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.

	^tusLibros.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:41:41' prior: 50868753!
test03CanAddDifferentBooksToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 1.

	cart := Bag new.
	cart add: '0-7645-2641-3'.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:41:44' prior: 50868807!
test03CanAddDifferentBooksToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 1.

	cart := Bag new.
	cart add: '0-7645-2641-3'.
	cart add: '0-7645-2641-4'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:41:45'!
FAILURE!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 16:43:08'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'orderedCollection dictionary hasTheBook books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:43:20' prior: 50868689!
addToCart: cartId booksIsbn: isbn bookQuantity: quantity 
	books add: isbn.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:43:37' prior: 50868734!
listCart: aTusLibrosShop 
	^books copy.! !
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 16:43:57' prior: 50868281!
initializeFromCatalogue: aCatalogue users: users 
	books := Bag new.
! !

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:44:07'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:44:07'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:44:07'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:44:07'!
PASSED!

Object subclass: #TusLibrosShop
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 16:44:18'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:44:20'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:44:20'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:44:20'!
PASSED!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:45:29'!
test03CanAddMoreThanOneBookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 2.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 3.
	cart add: '0-7645-2641-4' withOccurrences: 2.

	self assert: cart equals: (tusLibros listCart: cartId).

! !

!testRun: #TusLibrosShopTest #test03CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:45:30'!
FAILURE!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:45:52' prior: 50868855!
addToCart: cartId booksIsbn: isbn bookQuantity: quantity 
	books add: isbn withOccurrences: quantity.! !

!testRun: #TusLibrosShop2Test #test01ANewCartIsEmpty stamp: 'IO 11/18/2020 16:45:54'!
PASSED!

!testRun: #TusLibrosShop2Test #test02ABookCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:45:54'!
PASSED!

!testRun: #TusLibrosShop2Test #test03ManyBooksCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:45:54'!
PASSED!

!testRun: #TusLibrosShop2Test #test04CanAddMoreThanOneFromTheSameBook stamp: 'IO 11/18/2020 16:45:54'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:45:54'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:45:54'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:45:54'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:45:54'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:45:58'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:45:58'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:45:58'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:45:58'!
PASSED!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:46:33'!
test04CanAddMoreThanOneBookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 2.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 3.
	cart add: '0-7645-2641-4' withOccurrences: 2.

	self assert: cart equals: (tusLibros listCart: cartId).

! !

!methodRemoval: TusLibrosShopTest #test03CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:46:33'!
test03CanAddMoreThanOneBookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 2.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 3.
	cart add: '0-7645-2641-4' withOccurrences: 2.

	self assert: cart equals: (tusLibros listCart: cartId).

!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:47:40'!
test05CanAddMoreThanOneCart

	| tusLibros cartId cartId2 cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	cartId2 := tusLibros newCartForUser: 'admin2' Password: 'password'.

	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 2.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 3.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 5.
	cart add: '0-7645-2641-4' withOccurrences: 3.

	self assert: cart equals: (tusLibros listCart: cartId2).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:48:22' prior: 50868795!
newTusLibros

	| tusLibros users catalogue |
	
	catalogue := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'.
	users := Dictionary newFromPairs: #('admin', 'password', 'admin2', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.

	^tusLibros.
! !

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:48:25'!
FAILURE!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 16:48:59'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'books carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 16:48:58' prior: 50868866!
initializeFromCatalogue: aCatalogue users: users 
	books := Bag new.
	carts := OrderedCollection new.
! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:49:20' prior: 50868298!
newCartForUser: aString Password: aString2 
	carts add: Bag new.
! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:49:31' prior: 50868861!
listCart: cartId 
	^books copy.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:49:39' prior: 50868928!
addToCart: cartId booksIsbn: isbn bookQuantity: quantity
	books add: isbn withOccurrences: quantity.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:50:13' prior: 50869075!
addToCart: cartId booksIsbn: isbn bookQuantity: quantity
	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:50:18' prior: 50869081!
addToCart: cartId booksIsbn: isbn bookQuantity: quantity
	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:50:43' prior: 50869071!
listCart: cartId 
	^carts at: cartId copy.! !

!testRun: #TusLibrosShop2Test #test01ANewCartIsEmpty stamp: 'IO 11/18/2020 16:50:44'!
PASSED!

!testRun: #TusLibrosShop2Test #test02ABookCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:50:44'!
PASSED!

!testRun: #TusLibrosShop2Test #test03ManyBooksCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:50:44'!
PASSED!

!testRun: #TusLibrosShop2Test #test04CanAddMoreThanOneFromTheSameBook stamp: 'IO 11/18/2020 16:50:44'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:50:44'!
ERROR!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:50:44'!
ERROR!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:50:44'!
ERROR!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:50:44'!
ERROR!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:50:44'!
ERROR!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:50:56' prior: 50869066!
newCartForUser: aString Password: aString2 
	carts add: Bag new.
	^carts size - 1.
! !

!testRun: #TusLibrosShop2Test #test01ANewCartIsEmpty stamp: 'IO 11/18/2020 16:50:57'!
PASSED!

!testRun: #TusLibrosShop2Test #test02ABookCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:50:57'!
PASSED!

!testRun: #TusLibrosShop2Test #test03ManyBooksCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:50:57'!
PASSED!

!testRun: #TusLibrosShop2Test #test04CanAddMoreThanOneFromTheSameBook stamp: 'IO 11/18/2020 16:50:57'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:50:57'!
ERROR!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:50:57'!
ERROR!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:50:57'!
ERROR!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:50:57'!
ERROR!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:50:57'!
ERROR!

!testRun: #TusLibrosShop2Test #test01ANewCartIsEmpty stamp: 'IO 11/18/2020 16:51:03'!
PASSED!

!testRun: #TusLibrosShop2Test #test02ABookCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:51:03'!
PASSED!

!testRun: #TusLibrosShop2Test #test03ManyBooksCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:51:03'!
PASSED!

!testRun: #TusLibrosShop2Test #test04CanAddMoreThanOneFromTheSameBook stamp: 'IO 11/18/2020 16:51:03'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:51:03'!
ERROR!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:51:03'!
ERROR!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:51:03'!
ERROR!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:51:03'!
ERROR!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:51:03'!
ERROR!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:51:32' prior: 50869095!
listCart: cartId 
	^(carts at: cartId) copy.! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:51:35'!
ERROR!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:51:40'!
ERROR!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:51:40'!
ERROR!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:51:40'!
ERROR!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:51:40'!
ERROR!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:51:40'!
ERROR!

carts at: 0.!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:52:22' prior: 50869128!
newCartForUser: aString Password: aString2 
	carts add: Bag new.
	^carts size.
! !

!testRun: #TusLibrosShop2Test #test01ANewCartIsEmpty stamp: 'IO 11/18/2020 16:52:23'!
PASSED!

!testRun: #TusLibrosShop2Test #test02ABookCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:52:23'!
PASSED!

!testRun: #TusLibrosShop2Test #test03ManyBooksCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:52:23'!
PASSED!

!testRun: #TusLibrosShop2Test #test04CanAddMoreThanOneFromTheSameBook stamp: 'IO 11/18/2020 16:52:23'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:52:23'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:52:23'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:52:23'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:52:23'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:52:23'!
FAILURE!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:52:23'!
FAILURE!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:52:40' prior: 50869010!
test05CanAddMoreThanOneCart

	| tusLibros cartId cartId2 cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	cartId2 := tusLibros newCartForUser: 'admin2' Password: 'password'.

	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 2.
	
	tusLibros addToCart: cartId2 booksIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId2 booksIsbn: '0-7645-2641-4' bookQuantity: 3.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 5.
	cart add: '0-7645-2641-4' withOccurrences: 3.

	self assert: cart equals: (tusLibros listCart: cartId2).

! !

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:52:41'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:52:41'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:52:41'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:52:41'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:52:41'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:52:41'!
PASSED!

Object subclass: #TusLibrosShop
	instanceVariableNames: 'carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 16:53:10'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 16:53:18' prior: 50869060!
initializeFromCatalogue: aCatalogue users: users 

	carts := OrderedCollection new.
! !

!classRemoval: #TusLibrosShop2Test stamp: 'IO 11/18/2020 16:54:49'!
TestCase subclass: #TusLibrosShop2Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #TusLibrosShop2 stamp: 'IO 11/18/2020 16:54:52'!
Object subclass: #TusLibrosShop2
	instanceVariableNames: 'books catalog usersAndPasswords carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:59:03'!
test05AClientInitialyHasNowPurchases

	| tusLibros cartId purchases |

	tusLibros := self newTusLibros.
	
	purchases := Bag new.

	self assert: purchases equals: (tusLibros listPurchases: cartId).
	self assert: 0 equals: (tusLibros listPurchases: cartId) size.

! !

!testRun: #TusLibrosShopTest #test05AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 16:59:10'!
ERROR!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 16:59:22'!
listPurchases: anUndefinedObject 
	self shouldBeImplemented.! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 16:59:28' prior: 50869343!
listPurchases: anUndefinedObject 
	^Bag new.! !

!testRun: #TusLibrosShopTest #test05AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 16:59:31'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:59:31'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:59:31'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:59:31'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:59:31'!
PASSED!

!testRun: #TusLibrosShopTest #test05AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 16:59:31'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:59:31'!
PASSED!

!testRun: #TusLibrosShopTest #test05AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 16:59:33'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:59:33'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:59:33'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:59:33'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:59:33'!
PASSED!

!testRun: #TusLibrosShopTest #test05AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 16:59:33'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:59:33'!
PASSED!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:00:13'!
listPurchases 
	^Bag new.! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:00:32'!
listPurchasesFor: aClient password: password
	^Bag new.! !

!methodRemoval: TusLibrosShop #listPurchases stamp: 'IO 11/18/2020 17:00:34'!
listPurchases 
	^Bag new.!

!methodRemoval: TusLibrosShop #listPurchases: stamp: 'IO 11/18/2020 17:00:37'!
listPurchases: anUndefinedObject 
	^Bag new.!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:00:52'!
test06AClientInitialyHasNowPurchases

	| tusLibros cartId purchases |

	tusLibros := self newTusLibros.
	
	purchases := Bag new.

	self assert: purchases equals: (tusLibros listPurchases: cartId).
	self assert: 0 equals: (tusLibros listPurchases: cartId) size.

! !

!methodRemoval: TusLibrosShopTest #test05AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:00:52'!
test05AClientInitialyHasNowPurchases

	| tusLibros cartId purchases |

	tusLibros := self newTusLibros.
	
	purchases := Bag new.

	self assert: purchases equals: (tusLibros listPurchases: cartId).
	self assert: 0 equals: (tusLibros listPurchases: cartId) size.

!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:02:24' prior: 50869413!
test06AClientInitialyHasNowPurchases

	| tusLibros purchases |

	tusLibros := self newTusLibros.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	self assert: (Bag new) equals: purchases.
	self assert: 0 equals: purchases size.

! !

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:02:28'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:02:28'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:02:28'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:02:28'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:02:28'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:02:28'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:02:28'!
PASSED!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:02:41'!
test07AClientCanCheckoutACart

	| tusLibros purchases |

	tusLibros := self newTusLibros.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	self assert: (Bag new) equals: purchases.
	self assert: 0 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:03:38' prior: 50869471!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '' bookQuantity: 2.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	self assert: (Bag new) equals: purchases.
	self assert: 0 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:04:57' prior: 50869483!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrencies: 2.

	self assert: (Bag new) equals: purchases.
	self assert: 0 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:05:07' prior: 50869499!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 2.

	self assert: (Bag new) equals: purchases.
	self assert: 0 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:05:16' prior: 50869519!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 2.

	self assert: (Bag new) equals: purchases.
	self assert: 2 equals: purchases size.

! !

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:05:19'!
FAILURE!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:05:32' prior: 50869539!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 2.

	self assert: expectedPurchases equals: purchases.
	self assert: 2 equals: purchases size.

! !

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:05:32'!
FAILURE!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:07:45' prior: 50869562!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 2.

	self assert: expectedPurchases equals: purchases.
	self assert: 2 equals: purchases size.

! !

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:07:47'!
ERROR!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:07:59'!
checkoutCart: aSmallInteger ccn: aString cced: aString3 cco: aString4 
	self shouldBeImplemented.! !

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 17:08:35'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'carts checkout'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:08:43' prior: 50869610!
checkoutCart: aSmallInteger ccn: aString cced: aString3 cco: aString4 
	checkout := carts at: aSmallInteger.
! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:09:10' prior: 50869625!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	checkout := carts at: cartId.
! !

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:09:15'!
FAILURE!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:09:33'!
FAILURE!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:10:01' prior: 50869401!
listPurchasesFor: aClient password: password
	(checkout notNil) ifTrue: checkout copy.
	^Bag new.! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:10:02'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:10:02'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:10:02'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:10:02'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:10:02'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:10:02'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:10:02'!
FAILURE!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:10:02'!
FAILURE!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:10:13' prior: 50869632!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	checkout := carts at: cartId copy.
! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:10:13'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:10:13'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:10:13'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:10:13'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:10:13'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:10:13'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:10:13'!
FAILURE!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:10:13'!
FAILURE!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:10:45' prior: 50869585!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 2.

	self assert: expectedPurchases equals: purchases.
	self assert: 2 equals: purchases size.

! !

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:10:46'!
FAILURE!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:11:23' prior: 50869644!
listPurchasesFor: aClient password: password
	(checkout notNil) ifTrue: [^checkout copy].
	^Bag new.! !

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:11:24'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:11:24'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:11:24'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:11:24'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:11:24'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:11:24'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:11:24'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:11:24'!
PASSED!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:12:59'!
test08AClientCanCheckoutManyTimes

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 7.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 10 equals: purchases size.

! !

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:13:01'!
FAILURE!
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 17:15:06' prior: 50869309!
initializeFromCatalogue: aCatalogue users: users 

	carts := OrderedCollection new.
	checkout := Bag new.
! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:15:34' prior: 50869676!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	checkout addAll: (carts at: cartId).
! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:15:40'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:15:40'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:15:40'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:15:40'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:15:40'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:15:40'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:15:40'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:15:40'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:15:45'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:15:45'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:15:45'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:15:45'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:15:45'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:15:45'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:15:45'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:15:45'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:15:45'!
PASSED!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:16:09'!
test09ManyClientsCanCheckout

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForUser: 'admin2' Password: 'password'.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 7.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 10 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:16:19' prior: 50869869!
test09ManyClientsCanCheckout

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForUser: 'admin2' Password: 'password'.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 5.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 8 equals: purchases size.

! !

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:16:32'!
FAILURE!

Object subclass: #TusLibrosShop
	instanceVariableNames: 'carts cartClients checkout'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 17:17:42'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'carts cartClients checkout'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 17:18:25' prior: 50869214!
newCartForUser: user Password: password 
	carts add: Bag new.
	cartClients add: user.
	^carts size.
! !
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 17:18:54' prior: 50869802!
initializeFromCatalogue: aCatalogue users: users 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	checkout := Dictionary new.
! !

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 17:19:12'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'carts cartClients checkout checkouts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:19:10' prior: 50869733!
listPurchasesFor: aClient password: password
	
	^checkouts! !
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 17:19:16' prior: 50869960!
initializeFromCatalogue: aCatalogue users: users 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	checkouts := Dictionary new.
! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:19:33' prior: 50869977!
listPurchasesFor: user password: password
	
	^checkouts at: user.! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:19:38' prior: 50869990!
listPurchasesFor: user password: password
	
	^checkouts at: user copy.! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:20:07' prior: 50869809!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	
! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:22:35' prior: 50870001!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| clientId  |
	clientId := cartClients at: cartId.
	checkout := checkouts at: clientId.
	
! !

Object subclass: #TusLibrosShop
	instanceVariableNames: 'carts cartClients checkouts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 17:22:41'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'carts cartClients checkouts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:24:05' prior: 50870006!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := checkouts at: clientId.
	checkout addAll: cart.

	
! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:24:07'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:24:07'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:24:07'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:24:07'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:24:07'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:24:07'!
ERROR!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:24:07'!
ERROR!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:24:07'!
ERROR!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:24:07'!
ERROR!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:24:15'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:24:15'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:24:15'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:24:15'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:24:15'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:24:15'!
ERROR!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:24:15'!
ERROR!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:24:15'!
ERROR!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:24:15'!
ERROR!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:24:29'!
ERROR!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:24:43'!
ERROR!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:25:11'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:25:11'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:25:11'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:25:11'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:25:11'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:25:11'!
ERROR!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:25:11'!
ERROR!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:25:11'!
ERROR!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:25:11'!
ERROR!

checkouts at: 'asd'.!

checkouts!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:27:12' prior: 50869995!
listPurchasesFor: user password: password
	
	^checkouts at: user ifAbsent: (Bag new) copy.! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:27:21'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:27:21'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:27:21'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:27:21'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:27:21'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:27:21'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:27:21'!
ERROR!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:27:21'!
ERROR!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:27:21'!
ERROR!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:27:48' prior: 50870131!
listPurchasesFor: user password: password
	
	^checkouts at: user ifAbsent: [^Bag new] copy.! !

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:27:51'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:27:53'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:27:53'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:27:53'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:27:53'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:27:53'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:27:53'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:27:53'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:27:53'!
ERROR!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:27:53'!
ERROR!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:27:53'!
ERROR!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:28:05'!
ERROR!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:28:09'!
ERROR!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:28:09'!
ERROR!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:29:00'!
ERROR!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:30:03' prior: 50870028!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := checkouts at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.

	
! !

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:30:05'!
FAILURE!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:30:48' prior: 50870220!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := checkouts at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	checkouts at: clientId put: checkout.

	
! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:31:05'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:31:05'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:31:05'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:31:05'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:31:05'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:31:05'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:31:05'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:31:05'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:31:05'!
FAILURE!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:31:05'!
FAILURE!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:31:14'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:31:14'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:31:14'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:31:14'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:31:14'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:31:14'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:31:14'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:31:14'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:31:14'!
FAILURE!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:31:14'!
FAILURE!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:31:39' prior: 50869903!
test09ManyClientsCanCheckout

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForUser: 'admin2' Password: 'password'.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin2' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 5.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 8 equals: purchases size.

! !

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

----SNAPSHOT----(18 November 2020 17:35:01) CuisUniversity-4384.image priorSource: 17160590!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:39:34'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:39:34'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:39:34'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:39:34'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:39:34'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:39:34'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:39:34'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:39:34'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:39:34'!
PASSED!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 17:39:42'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'carts cartClients purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:39:42' prior: 50870234!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := purchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	purchases at: clientId put: checkout.

	
! !
!TusLibrosShop methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:39:42' prior: 50869982!
initializeFromCatalogue: aCatalogue users: users 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	purchases := Dictionary new.
! !
!TusLibrosShop methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:39:42' prior: 50870166!
listPurchasesFor: user password: password
	
	^purchases at: user ifAbsent: [^Bag new] copy.! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:39:45'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:39:45'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:39:45'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:39:45'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:39:45'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:39:45'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:39:45'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:39:45'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:39:45'!
PASSED!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 17:40:14'!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity
	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.! !

!methodRemoval: TusLibrosShop #addToCart:booksIsbn:bookQuantity: stamp: 'IO 11/18/2020 17:40:14'!
addToCart: cartId booksIsbn: isbn bookQuantity: quantity
	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:40:17'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:40:17'!
ERROR!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:40:17'!
ERROR!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:40:17'!
ERROR!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:40:17'!
ERROR!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:40:17'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:40:17'!
ERROR!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:40:17'!
ERROR!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:40:17'!
ERROR!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 17:40:25'!
addToCart: cartId booksIsbn: isbn bookQuantity: quantity
	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.! !

!methodRemoval: TusLibrosShop #addToCart:bookIsbn:bookQuantity: stamp: 'IO 11/18/2020 17:40:25'!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity
	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 17:40:30'!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity
	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:40:30' prior: 50868767!
test02CanAddABookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag new.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:40:31' prior: 50868825!
test03CanAddDifferentBooksToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 1.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 1.

	cart := Bag new.
	cart add: '0-7645-2641-3'.
	cart add: '0-7645-2641-4'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:40:31' prior: 50869252!
test05CanAddMoreThanOneCart

	| tusLibros cartId cartId2 cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	cartId2 := tusLibros newCartForUser: 'admin2' Password: 'password'.

	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 2.
	
	tusLibros addToCart: cartId2 bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId2 bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 5.
	cart add: '0-7645-2641-4' withOccurrences: 3.

	self assert: cart equals: (tusLibros listCart: cartId2).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:40:31' prior: 50869708!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 2.

	self assert: expectedPurchases equals: purchases.
	self assert: 2 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:40:31' prior: 50869765!
test08AClientCanCheckoutManyTimes

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 7.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 10 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:40:31' prior: 50870310!
test09ManyClientsCanCheckout

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForUser: 'admin2' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin2' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 5.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 8 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:40:31' prior: 50868973!
test04CanAddMoreThanOneBookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 2.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 3.
	cart add: '0-7645-2641-4' withOccurrences: 2.

	self assert: cart equals: (tusLibros listCart: cartId).

! !

!methodRemoval: TusLibrosShop #addToCart:booksIsbn:bookQuantity: stamp: 'IO 11/18/2020 17:40:31'!
addToCart: cartId booksIsbn: isbn bookQuantity: quantity
	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:40:33'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:40:33'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:40:33'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:40:33'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:40:33'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:40:33'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:40:33'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:40:33'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:40:33'!
PASSED!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 17:40:38' prior: 50869191!
listCart: cartId 
	^(carts at: cartId) copy.
! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 17:40:42' prior: 50870738!
listCart: cartId 
	^carts at: cartId copy.
! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:40:42'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:40:42'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:40:42'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:40:42'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:40:42'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:40:42'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:40:42'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:40:42'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:40:42'!
PASSED!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 17:40:56' prior: 50869953!
newCartForUser: user Password: password
	carts add: Bag new.
	cartClients add: user.
	^carts size.
! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:40:57'!
PASSED!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 17:41:29'!
newCartForClientId: user Password: password
	carts add: Bag new.
	cartClients add: user.
	^carts size.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:41:29' prior: 50870650!
test09ManyClientsCanCheckout

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForClientId: 'admin2' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin2' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 5.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 8 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:41:29' prior: 50870593!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 2.

	self assert: expectedPurchases equals: purchases.
	self assert: 2 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:41:29' prior: 50870616!
test08AClientCanCheckoutManyTimes

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 7.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 10 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:41:29' prior: 50870684!
test04CanAddMoreThanOneBookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 2.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 3.
	cart add: '0-7645-2641-4' withOccurrences: 2.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:41:29' prior: 50870567!
test05CanAddMoreThanOneCart

	| tusLibros cartId cartId2 cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	cartId2 := tusLibros newCartForClientId: 'admin2' Password: 'password'.

	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 2.
	
	tusLibros addToCart: cartId2 bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId2 bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 5.
	cart add: '0-7645-2641-4' withOccurrences: 3.

	self assert: cart equals: (tusLibros listCart: cartId2).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:41:29' prior: 50870535!
test02CanAddABookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag new.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:41:29' prior: 50870549!
test03CanAddDifferentBooksToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 1.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 1.

	cart := Bag new.
	cart add: '0-7645-2641-3'.
	cart add: '0-7645-2641-4'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:41:29' prior: 50868525!
test01NewCartIsEmpty

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !

!methodRemoval: TusLibrosShop #newCartForUser:Password: stamp: 'IO 11/18/2020 17:41:29'!
newCartForUser: user Password: password
	carts add: Bag new.
	cartClients add: user.
	^carts size.
!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:41:31'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:41:31'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:41:31'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:41:31'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:41:31'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:41:31'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:41:31'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:41:31'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:41:31'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:45:47'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:45:47'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:45:47'!
PASSED!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:46:13' prior: 50870416!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := purchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	purchases at: clientId put: checkout.
! !
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 17:48:46'!
initializeWithCatalogue: aCatalogue withUsers: users 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	purchases := Dictionary new.
! !
!TusLibrosShop class methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:48:46' prior: 50868244!
fromCatalogue: anOrderedCollection users: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"

	^self new initializeWithCatalogue: anOrderedCollection withUsers: aDictionary ! !

!methodRemoval: TusLibrosShop #initializeFromCatalogue:users: stamp: 'IO 11/18/2020 17:48:46'!
initializeFromCatalogue: aCatalogue users: users 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	purchases := Dictionary new.
!
!TusLibrosShop class methodsFor: 'instance creation' stamp: 'IO 11/18/2020 17:49:02'!
withCatalogue: anOrderedCollection withClients: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"

	^self new initializeWithCatalogue: anOrderedCollection withUsers: aDictionary ! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:49:02' prior: 50869036!
newTusLibros

	| tusLibros users catalogue |
	
	catalogue := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'.
	users := Dictionary newFromPairs: #('admin', 'password', 'admin2', 'password').
	tusLibros := TusLibrosShop withCatalogue: catalogue withClients: users.

	^tusLibros.
! !

!methodRemoval: TusLibrosShop class #fromCatalogue:users: stamp: 'IO 11/18/2020 17:49:02'!
fromCatalogue: anOrderedCollection users: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"

	^self new initializeWithCatalogue: anOrderedCollection withUsers: aDictionary !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:49:04'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:49:04'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:49:04'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:49:04'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:49:04'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:49:04'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:49:04'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:49:04'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:49:04'!
PASSED!
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 17:49:17'!
initializeWithCatalogue: aCatalogue withClients: users 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	purchases := Dictionary new.
! !
!TusLibrosShop class methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:49:17' prior: 50871077!
withCatalogue: anOrderedCollection withClients: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"

	^self new initializeWithCatalogue: anOrderedCollection withClients: aDictionary ! !

!methodRemoval: TusLibrosShop #initializeWithCatalogue:withUsers: stamp: 'IO 11/18/2020 17:49:17'!
initializeWithCatalogue: aCatalogue withUsers: users 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	purchases := Dictionary new.
!
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 17:49:48' prior: 50871137!
initializeWithCatalogue: aCatalogue withClients: clients 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	purchases := Dictionary new.
! !
!TusLibrosShop class methodsFor: 'instance creation' stamp: 'IO 11/18/2020 17:50:12' prior: 50871146!
withCatalogue: aCatalogue withClients: clients 

	^self new initializeWithCatalogue: aCatalogue withClients: clients.
 ! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:50:27' prior: 50870436!
listPurchasesFor: user password: password
	
	^purchases at: user ifAbsent: [^Bag new] copy.
! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:51:06' prior: 50871180!
listPurchasesFor: clientId password: password
	
	^purchases at: clientId ifAbsent: [^Bag new] copy.
! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 17:51:16' prior: 50870810!
newCartForClientId: clientId Password: password
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibros category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 17:52:51'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #TusLibros stamp: 'IO 11/18/2020 17:52:54'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRenamed: #TusLibrosShop as: #TusLibros stamp: 'IO 11/18/2020 17:52:57'!
Smalltalk renameClassNamed: #TusLibrosShop as: #TusLibros!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:52:57' prior: 50871087!
newTusLibros

	| tusLibros users catalogue |
	
	catalogue := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'.
	users := Dictionary newFromPairs: #('admin', 'password', 'admin2', 'password').
	tusLibros := TusLibros withCatalogue: catalogue withClients: users.

	^tusLibros.
! !

!classRenamed: #TusLibrosShopTest as: #TusLibrosTest stamp: 'IO 11/18/2020 17:53:03'!
Smalltalk renameClassNamed: #TusLibrosShopTest as: #TusLibrosTest!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:53:05'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:53:05'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:53:05'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:53:05'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:53:05'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:53:05'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:53:05'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:53:05'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:53:05'!
PASSED!

!classDefinition: #TusLibros category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 17:53:38'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clientPurchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:53:38' prior: 50871039!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientPurchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	clientPurchases at: clientId put: checkout.
! !
!TusLibros methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:53:38' prior: 50871164!
initializeWithCatalogue: aCatalogue withClients: clients 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientPurchases := Dictionary new.
! !
!TusLibros methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:53:38' prior: 50871186!
listPurchasesFor: clientId password: password
	
	^clientPurchases at: clientId ifAbsent: [^Bag new] copy.
! !

!classDefinition: #TusLibros category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 17:53:52'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clientsPurchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:53:52' prior: 50871277!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	clientsPurchases at: clientId put: checkout.
! !
!TusLibros methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:53:52' prior: 50871289!
initializeWithCatalogue: aCatalogue withClients: clients 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !
!TusLibros methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:53:52' prior: 50871298!
listPurchasesFor: clientId password: password
	
	^clientsPurchases at: clientId ifAbsent: [^Bag new] copy.
! !

Object subclass: #TusLibrosClientPurchases
	instanceVariableNames: 'purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosClientPurchases category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 17:54:13'!
Object subclass: #TusLibrosClientPurchases
	instanceVariableNames: 'purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:55:12' prior: 50871313!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [TusLibrosClientPurchases new].
	checkout addAll: cart.
	clientsPurchases at: clientId put: checkout.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:55:24' prior: 50871354!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [TusLibrosClientPurchases new].
	checkout addCart: cart.
	clientsPurchases at: clientId put: checkout.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:55:29' prior: 50871367!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [TusLibrosClientPurchases new].
	checkout addCart: cart.
! !
!TusLibrosClientPurchases methodsFor: 'no messages' stamp: 'IO 11/18/2020 17:55:56'!
addCart: aCart
	purchases addAll: aCart.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:56:39' prior: 50871334!
listPurchasesFor: clientId password: password
	
	^clientsPurchases at: clientId ifAbsent: [^TusLibrosClientPurchases new] copy.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:57:06' prior: 50871380!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [TusLibrosClientPurchases new].
	checkout addCart: cart.
	clientsPurchases at: clientId put: checkout.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:58:23' prior: 50871396!
listPurchasesFor: clientId password: password
	
	
	^clientsPurchases at: clientId ifAbsent: [^Bag new] copy.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:58:27' prior: 50871403!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [Bag new].
	checkout addCart: cart.
	clientsPurchases at: clientId put: checkout.
! !

!classRemoval: #TusLibrosClientPurchases stamp: 'IO 11/18/2020 17:58:30'!
Object subclass: #TusLibrosClientPurchases
	instanceVariableNames: 'purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:58:31'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:58:31'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:58:31'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:58:31'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:58:31'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:58:31'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:58:31'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:58:31'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:58:31'!
ERROR!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:58:41' prior: 50871423!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [Bag new].
	checkout add: cart.
	clientsPurchases at: clientId put: checkout.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:58:42'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:58:42'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:58:42'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:58:42'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:58:42'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:58:42'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:58:42'!
FAILURE!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:58:42'!
FAILURE!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:58:42'!
FAILURE!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:58:46' prior: 50871470!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	clientsPurchases at: clientId put: checkout.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:58:47'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:58:47'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:58:47'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:58:47'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:58:47'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:58:47'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:58:47'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:58:47'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:58:47'!
PASSED!

Object subclass: #TusLibrosClientCarts
	instanceVariableNames: 'clientId carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosClientCarts category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 18:00:25'!
Object subclass: #TusLibrosClientCarts
	instanceVariableNames: 'clientId carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:00:51' prior: 50871192!
newCartForClientId: clientId Password: password
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clientsPurchases clientsCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibros category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 18:01:01'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clientsPurchases clientsCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:01:35' prior: 50871562!
newCartForClientId: clientId Password: password
	carts add: Bag new.
	cartClients add: clientId.
	clientsCarts add: TusLibrosClientCarts new.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:01:40'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:01:40'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:01:40'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:01:40'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:01:40'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:01:40'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:01:40'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:01:40'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:01:40'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:01:51'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:01:51'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:01:51'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:01:51'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:01:51'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:01:51'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:01:51'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:01:51'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:01:51'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:01:56'!
ERROR!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 18:02:44' prior: 50871325!
initializeWithCatalogue: aCatalogue withClients: clients 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsCarts := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:02:45'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:02:45'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:02:45'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:02:45'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:02:45'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:02:45'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:02:45'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:02:45'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:02:45'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:02:59' prior: 50870527!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity
	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:04:22' prior: 50871686!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart clientCart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
	
	clientCart add: isbn withOccurrences: quantity.! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:04:38' prior: 50871693!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart clientCart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
	
	clientCart := clientsCarts at: cartId.
	clientCart add: isbn withOccurrences: quantity.! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:04:39'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:04:39'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:04:39'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:04:39'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:04:39'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:04:39'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:04:39'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:04:39'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:04:39'!
ERROR!
!TusLibrosClientCarts methodsFor: 'nil' stamp: 'IO 11/18/2020 18:04:49'!
add: isbn withOccurrences: quantity.
	! !

!classDefinition: #TusLibrosClientCarts category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 18:05:13'!
Object subclass: #TusLibrosClientCarts
	instanceVariableNames: 'clientId carts bag'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:05:39' prior: 50871702!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart clientCart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
	! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:05:41' prior: 50871753!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:05:50' prior: 50871583!
newCartForClientId: clientId Password: password
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clientsPurchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibros category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 18:05:55'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clientsPurchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:05:57'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:05:57'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:05:57'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:05:57'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:05:57'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:05:57'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:05:57'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:05:57'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:05:57'!
PASSED!

!classRemoval: #TusLibrosClientCarts stamp: 'IO 11/18/2020 18:06:00'!
Object subclass: #TusLibrosClientCarts
	instanceVariableNames: 'clientId carts bag'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:06:01'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:06:01'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:06:01'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:06:01'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:06:01'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:06:01'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:06:01'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:06:01'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:06:01'!
PASSED!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 18:06:07' prior: 50871649!
initializeWithCatalogue: aCatalogue withClients: clients 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.

	clientsPurchases := Dictionary new.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:06:08'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:06:08'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:06:08'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:06:08'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:06:08'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:06:08'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:06:08'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:06:08'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:06:08'!
PASSED!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 18:06:10' prior: 50871851!
initializeWithCatalogue: aCatalogue withClients: clients 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !
!TusLibrosTest methodsFor: 'cart' stamp: 'IO 11/18/2020 18:08:38'!
test10ClientIdExists

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin3' Password: 'password'.
	
	self should: [] raise: Error withMessageText: TusLibros inexistentClient.
! !
!TusLibrosTest methodsFor: 'cart' stamp: 'IO 11/18/2020 18:08:58' prior: 50871895!
test10ClientIdExists

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros newCartForClientId: 'admin3' Password: 'password'.]
		raise: Error
		withMessageText: TusLibros inexistentClient.
! !

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:09:01'!
ERROR!
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:09:23'!
inexistentClient
	self shouldBeImplemented.! !
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:09:39' prior: 50871917!
inexistentClient
	^'Client id not existent'.
! !

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:09:42'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:10:06' prior: 50871768!
newCartForClientId: clientId Password: password
	
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !
!TusLibros class methodsFor: 'instance creation' stamp: 'IO 11/18/2020 18:10:56' prior: 50871173!
withCatalogue: aCatalogue withClients: aClientList 

	^self new initializeWithCatalogue: aCatalogue withClients: aClientList.
 ! !
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 18:11:07' prior: 50871887!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !

!classDefinition: #TusLibros category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 18:11:16'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clientsPurchases clients'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 18:11:14' prior: 50871943!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	clients := aClientList.

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:12:20' prior: 50871929!
newCartForClientId: clientId Password: password
	(clients ) ifTrue: [^self error: TusLibros].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:12:32'!
inexistentClientErrorMessage
	^'Client id not existent'.
! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 18:12:32' prior: 50871905!
test10ClientIdExists

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros newCartForClientId: 'admin3' Password: 'password'.]
		raise: Error
		withMessageText: TusLibros inexistentClientErrorMessage.
! !

!methodRemoval: TusLibros class #inexistentClient stamp: 'IO 11/18/2020 18:12:32'!
inexistentClient
	^'Client id not existent'.
!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:12:43' prior: 50871970!
newCartForClientId: clientId Password: password
	(clients ) ifTrue: [^self error: TusLibros inexistentClientErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:13:51' prior: 50871997!
newCartForClientId: clientId Password: password
	(clients includes: clientId negated) ifTrue: [^self error: TusLibros inexistentClientErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:13:53'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:13:53'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:13:53'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:13:53'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:13:53'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:13:53'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:13:53'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:13:53'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:13:53'!
ERROR!

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:13:53'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:14:10' prior: 50872006!
newCartForClientId: clientId Password: password
	(clients includesKey: clientId negated) ifTrue: [^self error: TusLibros inexistentClientErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:14:11'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:14:11'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:14:11'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:14:11'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:14:11'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:14:11'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:14:11'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:14:11'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:14:11'!
ERROR!

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:14:11'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:14:26' prior: 50872046!
newCartForClientId: clientId Password: password
	((clients includesKey: clientId) negated) ifTrue: [^self error: TusLibros inexistentClientErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:14:27'!
ERROR!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:14:37' prior: 50872086!
newCartForClientId: clientId Password: password
	((clients includesKey: clientId) not) ifTrue: [^self error: TusLibros inexistentClientErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:14:38'!
PASSED!
!TusLibrosTest methodsFor: 'newCart validations' stamp: 'IO 11/18/2020 18:15:37'!
test11ClientPasswordMatches

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros newCartForClientId: 'admin' Password: 'password2'.]
		raise: Error
		withMessageText: TusLibros invalidPasswordErrorMessage.
! !

!testRun: #TusLibrosTest #test11ClientPasswordMatches stamp: 'IO 11/18/2020 18:15:39'!
ERROR!
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:15:51'!
invalidPasswordErrorMessage
	self shouldBeImplemented.! !
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:16:09' prior: 50872152!
invalidPasswordErrorMessage
	^'Invalid password'.
! !

!testRun: #TusLibrosTest #test11ClientPasswordMatches stamp: 'IO 11/18/2020 18:16:14'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:17:28' prior: 50872099!
newCartForClientId: clientId Password: password
	((clients includesKey: clientId) not) ifTrue: [^self error: TusLibros inexistentClientErrorMessage].
	((clients at: clientId) equals: password not) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:17:31'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:17:31'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:17:31'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:17:31'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:17:31'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:17:31'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:17:31'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:17:31'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:17:31'!
ERROR!

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:17:31'!
PASSED!

!testRun: #TusLibrosTest #test11ClientPasswordMatches stamp: 'IO 11/18/2020 18:17:31'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:18:21' prior: 50872165!
newCartForClientId: clientId Password: password
	((clients includesKey: clientId) not) ifTrue: [^self error: TusLibros inexistentClientErrorMessage].
	(((clients at: clientId) equals: password) not) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:18:23'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:18:23'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:18:23'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:18:23'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:18:23'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:18:23'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:18:23'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:18:23'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:18:23'!
ERROR!

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:18:23'!
PASSED!

!testRun: #TusLibrosTest #test11ClientPasswordMatches stamp: 'IO 11/18/2020 18:18:23'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:18:37' prior: 50872211!
newCartForClientId: clientId Password: password
	((clients includesKey: clientId) not) ifTrue: [^self error: TusLibros inexistentClientErrorMessage].
	(((clients at: clientId) = password) not) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:18:38'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:18:38'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:18:38'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:18:38'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:18:38'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:18:38'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:18:38'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:18:38'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:18:38'!
ERROR!

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:18:38'!
PASSED!

!testRun: #TusLibrosTest #test11ClientPasswordMatches stamp: 'IO 11/18/2020 18:18:38'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:18:44' prior: 50872257!
newCartForClientId: clientId Password: password
	((clients includesKey: clientId) not) ifTrue: [^self error: TusLibros inexistentClientErrorMessage].
	(((clients at: clientId) = password) not) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:18:45'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:18:45'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:18:45'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:18:45'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:18:45'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:18:45'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:18:45'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:18:45'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:18:45'!
ERROR!

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:18:45'!
PASSED!

!testRun: #TusLibrosTest #test11ClientPasswordMatches stamp: 'IO 11/18/2020 18:18:45'!
PASSED!

clients at: clientId!

clients at: 1!

clients at: 'admin'!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:19:38'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:19:38'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:19:38'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:19:38'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:19:38'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:19:38'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:19:38'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:19:38'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:19:38'!
ERROR!

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:19:38'!
PASSED!

!testRun: #TusLibrosTest #test11ClientPasswordMatches stamp: 'IO 11/18/2020 18:19:38'!
PASSED!

users!

users at: 'admin'!
!TusLibrosTest methodsFor: 'valid instances' stamp: 'IO 11/18/2020 18:20:03' prior: 50871224!
newTusLibros

	| tusLibros users catalogue |
	
	catalogue := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'.
	users := Dictionary newFromPairs: #('admin' 'password' 'admin2' 'password').
	tusLibros := TusLibros withCatalogue: catalogue withClients: users.

	^tusLibros.
! !

users at: 'admin'!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:20:17'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test11ClientPasswordMatches stamp: 'IO 11/18/2020 18:20:20'!
PASSED!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:21:14'!
test11CreateCartClientPasswordMatches

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros newCartForClientId: 'admin' Password: 'password2'.]
		raise: Error
		withMessageText: TusLibros invalidPasswordErrorMessage.
! !

!methodRemoval: TusLibrosTest #test11ClientPasswordMatches stamp: 'IO 11/18/2020 18:21:14'!
test11ClientPasswordMatches

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros newCartForClientId: 'admin' Password: 'password2'.]
		raise: Error
		withMessageText: TusLibros invalidPasswordErrorMessage.
!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:21:20'!
test10CreateCartClientIdExists

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros newCartForClientId: 'admin3' Password: 'password'.]
		raise: Error
		withMessageText: TusLibros inexistentClientErrorMessage.
! !

!methodRemoval: TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:21:20'!
test10ClientIdExists

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros newCartForClientId: 'admin3' Password: 'password'.]
		raise: Error
		withMessageText: TusLibros inexistentClientErrorMessage.
!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:21:50' prior: 50872303!
newCartForClientId: clientId Password: password

	(((clients at: clientId ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password) not) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:21:51'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:22:41' prior: 50872476!
newCartForClientId: clientId Password: password
	(
		(
			(clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password
			) not
	) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:22:42'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:22:51' prior: 50872522!
newCartForClientId: clientId Password: password
	(
		(
			(clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password) not
	) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:22:57' prior: 50872568!
newCartForClientId: clientId Password: password
	(
		((clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password) not
	) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:22:58'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:23:07' prior: 50872580!
newCartForClientId: clientId Password: password
	(
		(clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password not
	) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:23:08'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:23:08'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:23:08'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:23:08'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:23:08'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:23:08'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:23:08'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:23:08'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:23:08'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:23:08'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:23:08'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:23:11' prior: 50872626!
newCartForClientId: clientId Password: password
	(
		((clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password) not
	) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:23:12'!
PASSED!
!TusLibrosTest methodsFor: 'cart' stamp: 'IO 11/18/2020 18:25:02'!
test12AddToCartHasValidCartId

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := 1.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag new.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:25:21'!
ERROR!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:26:04' prior: 50872718!
test12AddToCartHasValidCartId

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros addToCart: 1 bookIsbn: '0-7645-2641-3' bookQuantity: 1.]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:26:08'!
ERROR!
!TusLibros class methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 18:26:16'!
invalidCartIdErrorMessage
	self shouldBeImplemented.! !
!TusLibros class methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 18:26:25' prior: 50872747!
invalidCartIdErrorMessage
	'Invalid cart id'.! !

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:26:27'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:27:10' prior: 50871761!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |
	(cartId > carts size) ifTrue: [^self error: TusLibros invalidCartIdErrorMessage ].
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:27:12' prior: 50872760!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |
	(cartId > carts size) ifTrue: [^self error: TusLibros invalidCartIdErrorMessage].
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:27:13'!
PASSED!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:28:32'!
test13AddToCartHasValidISBN

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [ | cartId |tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 1.]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:28:59' prior: 50872817!
test13AddToCartHasValidISBN

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	self should: [ tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 1.]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:29:00'!
FAILURE!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:29:12' prior: 50872828!
test13AddToCartHasValidISBN

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	self should: [ tusLibros addToCart: cartId bookIsbn: 'bad isbn' bookQuantity: 1.]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:29:13'!
FAILURE!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:29:17' prior: 50872844!
test13AddToCartHasValidISBN

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	self should: [ tusLibros addToCart: cartId bookIsbn: 'bad isbn' bookQuantity: 1.]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.

! !

!classDefinition: #TusLibros category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 18:29:35'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clientsPurchases clients catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 18:29:32' prior: 50871961!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := aClientList.

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:30:22' prior: 50872770!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |
	(cartId > carts size) ifTrue: [^self error: TusLibros invalidCartIdErrorMessage].
	(catalogue includes: isbn) ifFalse: [^self error: TusLibros invalidIsbn].
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !
!TusLibros class methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 18:30:40'!
invalidIsbn
	^'Isbn not in catalogue'.
! !
!TusLibros class methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 18:30:44'!
invalidIsbnErrorMessage
	^'Isbn not in catalogue'.
! !

!methodRemoval: TusLibros class #invalidIsbn stamp: 'IO 11/18/2020 18:30:47'!
invalidIsbn
	^'Isbn not in catalogue'.
!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:30:58' prior: 50872892!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |
	(cartId > carts size) ifTrue: [^self error: TusLibros invalidCartIdErrorMessage].
	(catalogue includes: isbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:31:04' prior: 50872860!
test13AddToCartHasValidISBN

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	self should: [ tusLibros addToCart: cartId bookIsbn: 'bad isbn' bookQuantity: 1.]
		raise: Error
		withMessageText: TusLibros invalidIsbnErrorMessage.

! !

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:31:05'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:31:05'!
PASSED!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:31:23'!
test14AddToCartHasValidQuantity

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	self should: [ tusLibros addToCart: cartId bookIsbn: 'bad isbn' bookQuantity: 1.]
		raise: Error
		withMessageText: TusLibros invalidIsbnErrorMessage.

! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:31:51' prior: 50872985!
test14AddToCartHasValidQuantity

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	self should: [ tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 0.]
		raise: Error
		withMessageText: TusLibros invalidQuantityErrorMessage.

! !

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:31:53'!
ERROR!
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:32:01'!
invalidQuantityErrorMessage
	self shouldBeImplemented.! !
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:32:12' prior: 50873014!
invalidQuantityErrorMessage
	^'Quantity added must be more than 0'.! !

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:32:15'!
FAILURE!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:32:19'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:32:49' prior: 50872916!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |
	(cartId > carts size) ifTrue: [^self error: TusLibros invalidCartIdErrorMessage].
	(catalogue includes: isbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	(quantity < 1) ifTrue: [^self error: TusLibros invalidQuantityErrorMessage].
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:32:50'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:33:10' prior: 50873030!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |
	(cartId > carts size) ifTrue: [^self error: TusLibros invalidCartIdErrorMessage].
	(catalogue includes: isbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	(quantity < 1) ifTrue: [^self error: TusLibros invalidQuantityErrorMessage].
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:33:11'!
PASSED!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:33:54'!
test15ListCartHasValidCartId

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros listCart: 1]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 18:33:55'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:34:12' prior: 50870743!
listCart: cartId 
	(cartId > carts size) ifTrue: [^self error: TusLibros invalidCartIdErrorMessage].
	^carts at: cartId copy.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 18:34:12'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:34:38'!
errorInvalidCartId
	^self error: TusLibros invalidCartIdErrorMessage.! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:35:02' prior: 50873088!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |
	(cartId > carts size) ifTrue: [^self errorInvalidCartId].
	(catalogue includes: isbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	(quantity < 1) ifTrue: [^self error: TusLibros invalidQuantityErrorMessage].
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:35:10' prior: 50873158!
listCart: cartId 
	(cartId > carts size) ifTrue: [^self errorInvalidCartId].
	^carts at: cartId copy.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 18:35:10'!
PASSED!
!TusLibros methodsFor: 'validations' stamp: 'IO 11/18/2020 18:35:31'!
validateCartId
	^self error: TusLibros invalidCartIdErrorMessage.! !
!TusLibros methodsFor: 'validations' stamp: 'IO 11/18/2020 18:35:51'!
validateCartId: cartId
	(cartId > carts size) ifTrue: [^self error: TusLibros invalidCartIdErrorMessage].! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:36:07' prior: 50873216!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |
	self validateCartId: cartId.
	(catalogue includes: isbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	(quantity < 1) ifTrue: [^self error: TusLibros invalidQuantityErrorMessage].
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:36:13' prior: 50873230!
listCart: cartId 
	self validateCartId: cartId.
	^carts at: cartId copy.
! !

!methodRemoval: TusLibros #errorInvalidCartId stamp: 'IO 11/18/2020 18:36:17'!
errorInvalidCartId
	^self error: TusLibros invalidCartIdErrorMessage.!

!methodRemoval: TusLibros #validateCartId stamp: 'IO 11/18/2020 18:36:18'!
validateCartId
	^self error: TusLibros invalidCartIdErrorMessage.!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 18:36:20'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:38:14' prior: 50872672!
newCartForClientId: clientId Password: password
	(
		((clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password)
	) ifFalse: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 18:38:15'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:38:20' prior: 50873367!
newCartForClientId: clientId Password: password
	(
		(clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password
	) ifFalse: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 18:38:21'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:38:26' prior: 50873425!
newCartForClientId: clientId Password: password
	(
		(clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password
	) ifFalse: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:41:52'!
test17ChackoutHasValidCartId

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros listCart: 1]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:41:55'!
test16ChackoutHasValidCartId

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros listCart: 1]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !

!methodRemoval: TusLibrosTest #test17ChackoutHasValidCartId stamp: 'IO 11/18/2020 18:41:58'!
test17ChackoutHasValidCartId

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros listCart: 1]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:42:02'!
test16CheckoutHasValidCartId

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros listCart: 1]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !

!methodRemoval: TusLibrosTest #test16ChackoutHasValidCartId stamp: 'IO 11/18/2020 18:42:02'!
test16ChackoutHasValidCartId

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros listCart: 1]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:43:21' prior: 50873522!
test16CheckoutHasValidCartId

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	self should: [tusLibros checkoutCart: 3 ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 18:43:22'!
FAILURE!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 18:44:02' prior: 50871509!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	self validateCartId: cartId.
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	clientsPurchases at: clientId put: checkout.
! !

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 18:44:06'!
PASSED!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:48:22'!
test17CheckoutHasCartWithBooks

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.

	self should: [tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros emptyCartErrorMessage.


! !

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 18:48:25'!
ERROR!
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:48:33'!
emptyCartErrorMessage
	self shouldBeImplemented.! !
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:48:48' prior: 50873643!
emptyCartErrorMessage
	'The cart cannot be empty'.! !

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 18:48:49'!
FAILURE!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 18:49:29' prior: 50873560!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	self validateCartId: cartId.
	cart := carts at: cartId.
	(cart size = 0) ifTrue: [self error: TusLibros emptyCartErrorMessage].
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	clientsPurchases at: clientId put: checkout.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 18:51:18'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:53:15' prior: 50873293!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |

	self validateCartId: cartId.
	(catalogue includes: isbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	(quantity < 1) ifTrue: [^self error: TusLibros invalidQuantityErrorMessage].

	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:53:22' prior: 50873306!
listCart: cartId

	self validateCartId: cartId.

	^carts at: cartId copy.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:53:27' prior: 50873483!
newCartForClientId: clientId Password: password
	(
		(clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password
	) ifFalse: [^self error: TusLibros invalidPasswordErrorMessage].

	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 18:53:34' prior: 50873656!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |

	self validateCartId: cartId.
	cart := carts at: cartId.
	(cart size = 0) ifTrue: [self error: TusLibros emptyCartErrorMessage].

	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	clientsPurchases at: clientId put: checkout.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 18:53:38' prior: 50871416!
listPurchasesFor: clientId password: password
	
	^clientsPurchases at: clientId ifAbsent: [^Bag new] copy.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 18:53:38' prior: 50873772!
listPurchasesFor: clientId password: password

	^clientsPurchases at: clientId ifAbsent: [^Bag new] copy.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 18:53:55' prior: 50873757!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |

	self validateCartId: cartId.
	cart := carts at: cartId.
	(cart size = 0) ifTrue: [self error: TusLibros emptyCartErrorMessage].
	self validateCcn: ccn.

	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	clientsPurchases at: clientId put: checkout.
! !
!TusLibros methodsFor: 'validations' stamp: 'IO 11/18/2020 18:54:07'!
validateCcn: ccn
	! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:54:43'!
test18CheckoutHasValidCcn

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	self should: [tusLibros checkoutCart: cartId ccn: '5500 0000 000 0004' cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros emptyCartErrorMessage.


! !

!testRun: #TusLibrosTest #test18CheckoutHasValidCcn stamp: 'IO 11/18/2020 18:54:46'!
FAILURE!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:54:58' prior: 50873804!
test18CheckoutHasValidCcn

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	self should: [tusLibros checkoutCart: cartId ccn: '5500 0000 000 0004' cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros invalidCcnErrorMessage.


! !

!testRun: #TusLibrosTest #test18CheckoutHasValidCcn stamp: 'IO 11/18/2020 18:55:00'!
ERROR!
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:55:09'!
invalidCcnErrorMessage
	self shouldBeImplemented.! !
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:55:17' prior: 50873844!
invalidCcnErrorMessage
	^'Invalid credit card number'.! !

!testRun: #TusLibrosTest #test18CheckoutHasValidCcn stamp: 'IO 11/18/2020 18:55:20'!
FAILURE!
!TusLibros methodsFor: 'validations' stamp: 'IO 11/18/2020 18:55:54' prior: 50873801!
validateCcn: ccn
	| number |
	number := ccn ! !
!TusLibrosTest methodsFor: 'purchases' stamp: 'IO 11/18/2020 18:56:19' prior: 50870851!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	tusLibros checkoutCart: cartId ccn: 5500000000000004 cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 2.

	self assert: expectedPurchases equals: purchases.
	self assert: 2 equals: purchases size.

! !
!TusLibrosTest methodsFor: 'purchases' stamp: 'IO 11/18/2020 18:56:28' prior: 50870874!
test08AClientCanCheckoutManyTimes

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: 5500000000000004 cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 7.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 10 equals: purchases size.

! !
!TusLibrosTest methodsFor: 'purchases' stamp: 'IO 11/18/2020 18:56:33' prior: 50870817!
test09ManyClientsCanCheckout

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: 5500000000000004 cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForClientId: 'admin2' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin2' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 5.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 8 equals: purchases size.

! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:56:49' prior: 50873824!
test18CheckoutHasValidCcn

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	self should: [tusLibros checkoutCart: cartId ccn: 5500000000000003 cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros invalidCcnErrorMessage.


! !
!TusLibros methodsFor: 'validations' stamp: 'IO 11/18/2020 18:57:10' prior: 50873857!
validateCcn: ccn
	| number |

	"ref: https://www.freeformatter.com/credit-card-number-generator-validator.html"
	number := ccn ! !

!methodRemoval: TusLibrosTest #test18CheckoutHasValidCcn stamp: 'IO 11/18/2020 19:04:18'!
test18CheckoutHasValidCcn

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	self should: [tusLibros checkoutCart: cartId ccn: 5500000000000003 cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros invalidCcnErrorMessage.


!

!methodRemoval: TusLibros #validateCcn: stamp: 'IO 11/18/2020 19:04:44'!
validateCcn: ccn
	| number |

	"ref: https://www.freeformatter.com/credit-card-number-generator-validator.html"
	number := ccn !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 19:04:51' prior: 50873786!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |

	self validateCartId: cartId.
	cart := carts at: cartId.
	(cart size = 0) ifTrue: [self error: TusLibros emptyCartErrorMessage].

	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	clientsPurchases at: clientId put: checkout.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 19:04:52'!
PASSED!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 19:06:30'!
test18ListPurchasesHasValidUser

	| tusLibros cartId |

	tusLibros := self newTusLibros.
	
	

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.

	self should: [tusLibros listPurchasesFor: 'admin3' password: 'password']
		raise: Error
		withMessageText: TusLibros 


! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 19:06:33' prior: 50874066!
test18ListPurchasesHasValidUser

	| tusLibros cartId |

	tusLibros := self newTusLibros.
	
	

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.

	self should: [tusLibros listPurchasesFor: 'admin3' password: 'password']
		raise: Error
		withMessageText: TusLibros .


! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 19:06:39' prior: 50874079!
test18ListPurchasesHasValidUser

	| tusLibros cartId |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.

	self should: [tusLibros listPurchasesFor: 'admin3' password: 'password']
		raise: Error
		withMessageText: TusLibros .


! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 19:06:46' prior: 50873625!
test17CheckoutHasCartWithBooks

	| tusLibros cartId |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.

	self should: [tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros emptyCartErrorMessage.


! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 19:06:50' prior: 50873540!
test16CheckoutHasValidCartId

	| tusLibros cartId |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	self should: [tusLibros checkoutCart: 3 ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 19:07:12' prior: 50874093!
test18ListPurchasesHasValidUser

	| tusLibros cartId |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.

	self should: [tusLibros listPurchasesFor: 'admin3' password: 'password']
		raise: Error
		withMessageText: TusLibros inexistentClientErrorMessage.


! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 19:07:20' prior: 50874135!
test18ListPurchasesHasValidUser

	| tusLibros |

	tusLibros := self newTusLibros.

	self should: [tusLibros listPurchasesFor: 'admin3' password: 'password']
		raise: Error
		withMessageText: TusLibros inexistentClientErrorMessage.


! !

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 19:07:23'!
FAILURE!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 19:07:55'!
test19ListPurchasesHasMatchingPassword

	| tusLibros |

	tusLibros := self newTusLibros.

	self should: [tusLibros listPurchasesFor: 'admin' password: 'wrong password']
		raise: Error
		withMessageText: TusLibros invalidPasswordErrorMessage.


! !

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 19:07:57'!
FAILURE!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 19:07:57'!
FAILURE!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 19:08:01'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 19:08:36'!
validateClientId: clientId withPassword: password
	(
		(clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password
	) ifFalse: [^self error: TusLibros invalidPasswordErrorMessage].
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 19:08:46'!
newCartForClientId: clientId password: password
	(
		(clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password
	) ifFalse: [^self error: TusLibros invalidPasswordErrorMessage].

	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50870967!
test03CanAddDifferentBooksToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 1.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 1.

	cart := Bag new.
	cart add: '0-7645-2641-3'.
	cart add: '0-7645-2641-4'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50872929!
test13AddToCartHasValidISBN

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	
	self should: [ tusLibros addToCart: cartId bookIsbn: 'bad isbn' bookQuantity: 1.]
		raise: Error
		withMessageText: TusLibros invalidIsbnErrorMessage.

! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50873862!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	tusLibros checkoutCart: cartId ccn: 5500000000000004 cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 2.

	self assert: expectedPurchases equals: purchases.
	self assert: 2 equals: purchases size.

! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50874119!
test16CheckoutHasValidCartId

	| tusLibros cartId |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	self should: [tusLibros checkoutCart: 3 ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50873884!
test08AClientCanCheckoutManyTimes

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: 5500000000000004 cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 7.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 10 equals: purchases size.

! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50870908!
test04CanAddMoreThanOneBookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 2.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 3.
	cart add: '0-7645-2641-4' withOccurrences: 2.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50873918!
test09ManyClientsCanCheckout

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: 5500000000000004 cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForClientId: 'admin2' password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin2' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 5.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 8 equals: purchases size.

! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50870953!
test02CanAddABookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag new.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50872456!
test10CreateCartClientIdExists

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros newCartForClientId: 'admin3' password: 'password'.]
		raise: Error
		withMessageText: TusLibros inexistentClientErrorMessage.
! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50872435!
test11CreateCartClientPasswordMatches

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros newCartForClientId: 'admin' password: 'password2'.]
		raise: Error
		withMessageText: TusLibros invalidPasswordErrorMessage.
! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50872998!
test14AddToCartHasValidQuantity

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	
	self should: [ tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 0.]
		raise: Error
		withMessageText: TusLibros invalidQuantityErrorMessage.

! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50870985!
test01NewCartIsEmpty

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50870927!
test05CanAddMoreThanOneCart

	| tusLibros cartId cartId2 cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	cartId2 := tusLibros newCartForClientId: 'admin2' password: 'password'.

	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 2.
	
	tusLibros addToCart: cartId2 bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId2 bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 5.
	cart add: '0-7645-2641-4' withOccurrences: 3.

	self assert: cart equals: (tusLibros listCart: cartId2).

! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50874105!
test17CheckoutHasCartWithBooks

	| tusLibros cartId |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.

	self should: [tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros emptyCartErrorMessage.


! !

!methodRemoval: TusLibros #newCartForClientId:Password: stamp: 'IO 11/18/2020 19:08:46'!
newCartForClientId: clientId Password: password
	(
		(clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password
	) ifFalse: [^self error: TusLibros invalidPasswordErrorMessage].

	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 19:09:01' prior: 50874191!
newCartForClientId: clientId password: password
	self validateClientId: clientId withPassword: password.

	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 19:09:02'!
FAILURE!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 19:09:02'!
FAILURE!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 19:09:13' prior: 50873779!
listPurchasesFor: clientId password: password
	self validateClientId: clientId withPassword: password.

	^clientsPurchases at: clientId ifAbsent: [^Bag new] copy.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

----SNAPSHOT----(18 November 2020 19:13:42) CuisUniversity-4384.image priorSource: 17239174!

----QUIT----(18 November 2020 19:15:14) CuisUniversity-4384.image priorSource: 17374527!

----STARTUP---- (18 November 2020 19:47:07) as /Users/ilanolkies/uba/ingsoft1/macos64/CuisUniversity-4384.image!


!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

Object subclass: #TusLibrosClient
	instanceVariableNames: 'password purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosClient category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 19:48:02'!
Object subclass: #TusLibrosClient
	instanceVariableNames: 'password purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosClient class methodsFor: 'no messages' stamp: 'IO 11/18/2020 19:48:45'!
with: password

	^self basicNew with: password.! !
!TusLibrosClient methodsFor: 'nil' stamp: 'IO 11/18/2020 19:49:20'!
with: aPassword

	password := aPassword
! !
!TusLibrosClient methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:49:32' prior: 50874691!
with: aPassword

	password := aPassword.
	purchases := Bag new.

! !
!TusLibrosClient methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:49:55'!
checkout: aCart
	purchases addAll: aCart.
! !
!TusLibrosClient methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:51:01'!
validatePassword: aPassword
	(password = aPassword) ifFalse: [^self error: TusLibros invalidPasswordErrorMessage].
! !
!TusLibrosClient methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:51:17'!
purchases
	^purchases copy.! !
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 19:52:18' prior: 50872882!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := aClientList.
	
	clients keysDo: [ :key |  ].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 19:53:16' prior: 50874717!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	
	aClientList keysDo: [ :clientId | clients add: (TusLibrosClient for: (aClientList at: clientId))].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !
!TusLibros methodsFor: 'validations' stamp: 'IO 11/18/2020 19:54:48' prior: 50874181!
validateClientId: clientId withPassword: password
	(clients at: clientId ifAbsent: [
		^self error: TusLibros inexistentClientErrorMessage]) validatePassword: password.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 19:54:50'!
ERROR!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 19:54:50'!
ERROR!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 19:54:50'!
ERROR!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 19:54:50'!
ERROR!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 19:54:50'!
ERROR!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 19:56:52' prior: 50874538!
listPurchasesFor: clientId password: password
	self validateClientId: clientId withPassword: password.

	^clientsPurchases at: clientId purchases.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 19:57:29' prior: 50873999!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId |

	self validateCartId: cartId.
	cart := carts at: cartId.
	(cart size = 0) ifTrue: [self error: TusLibros emptyCartErrorMessage].

	clientId := cartClients at: cartId.
	(clients at: clientId) checkout: cart.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:57:39'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:57:43'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:57:43'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:57:56'!
ERROR!

aClientList at: clientId!
!TusLibrosClient class methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:59:00'!
for: aPassword

	^self basicNew with: aPassword.! !

!methodRemoval: TusLibrosClient class #with: stamp: 'IO 11/18/2020 19:59:06'!
with: password

	^self basicNew with: password.!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:59:41'!
ERROR!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:01:22' prior: 50874728!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	"(TusLibrosClient for: (aClientList at: clientId))"
	aClientList keysDo: [ :clientId | clients ].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:01:56' prior: 50874968!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.
	""
	aClientList keysDo: [ :clientId | clients ].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:02:01'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:02:01'!
FAILURE!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:02:01'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:02:01'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:02:01'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:02:01'!
FAILURE!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:02:05' prior: 50874981!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.
	"(TusLibrosClient for: (aClientList at: clientId))"
	aClientList keysDo: [ :clientId | clients ].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:04:38' prior: 50875051!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.
	"(TusLibrosClient for: (aClientList at: clientId))"
	aClientList keysDo: [ :clientId | clients associationAt: Association].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:05:13' prior: 50875065!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.
	"(TusLibrosClient for: (aClientList at: clientId))"
	aClientList keysDo: [ :clientId | clients associationAt: (
		Association key: clientId value: (TusLibrosClient for: (aClientList at: clientId)))].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:05:47'!
ERROR!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:06:01' prior: 50875079!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.
	"(TusLibrosClient for: (aClientList at: clientId))"
	aClientList keysDo: [ :clientId | clients add: (
		Association key: clientId value: (TusLibrosClient for: (aClientList at: clientId)))].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:06:02'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:06:02'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:06:02'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:06:02'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:06:10'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:06:10'!
ERROR!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:07:09' prior: 50874808!
listPurchasesFor: clientId password: password
	self validateClientId: clientId withPassword: password.

	^clientsPurchases value: clientId purchases.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:07:11'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:07:11'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:07:11'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:07:11'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:07:23'!
ERROR!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:07:34' prior: 50875296!
listPurchasesFor: clientId password: password
	self validateClientId: clientId withPassword: password.

	^(clientsPurchases value: clientId) purchases.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:07:35'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:07:35'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:07:35'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:07:35'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:07:35'!
PASSED!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:07:59' prior: 50875366!
listPurchasesFor: clientId password: password
	self validateClientId: clientId withPassword: password.

	^(clients value: clientId) purchases.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:08:00'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:08:00'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:08:00'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:08:00'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:08:00'!
PASSED!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:08:12' prior: 50875433!
listPurchasesFor: clientId password: password
	self validateClientId: clientId withPassword: password.

	^(clients at: clientId) purchases.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clients catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibros category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 20:08:24'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clients catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:08:27'!
PASSED!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:08:55' prior: 50875215!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.
	"(TusLibrosClient for: (aClientList at: clientId))"
	aClientList keysDo: [ :clientId | clients add: (
		Association key: clientId value: (TusLibrosClient for: (aClientList at: clientId)))].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.

! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:08:56'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:08:56'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:08:56'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:08:57'!
PASSED!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:08:59' prior: 50875697!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.

	aClientList keysDo: [ :clientId | clients add: (
		Association key: clientId value: (TusLibrosClient for: (aClientList at: clientId)))].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.

! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:09:00'!
PASSED!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:09:15' prior: 50875771!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.

	aClientList keysDo: [ :clientId | clients add: (
		Association key: clientId value: (TusLibrosClient for: (aClientList at: clientId)))].

	carts := OrderedCollection new.


! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:09:16'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:09:16'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:09:16'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:09:16'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:09:16'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:09:16'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:09:16'!
PASSED!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:09:19' prior: 50875843!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.

	aClientList keysDo: [ :clientId | clients add: (
		Association key: clientId value: (TusLibrosClient for: (aClientList at: clientId)))].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.

! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:09:35' prior: 50874471!
newCartForClientId: clientId password: password
	self validateClientId: clientId withPassword: password.

	carts add: Bag new.

	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:09:35'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:09:35'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:09:35'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:09:35'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:09:38' prior: 50875927!
newCartForClientId: clientId password: password
	self validateClientId: clientId withPassword: password.

	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

Object subclass: #TusLibrosCarts
	instanceVariableNames: 'clientId books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosCarts category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 20:11:32'!
Object subclass: #TusLibrosCarts
	instanceVariableNames: 'clientId books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosCarts class methodsFor: 'no messages' stamp: 'IO 11/18/2020 20:12:18'!
for: clientId
	^self basicNew initializeFor: clientId.! !
!TusLibrosCarts methodsFor: 'no messages' stamp: 'IO 11/18/2020 20:12:38'!
initializeFor: aClientId
	clientId := aClientId.
	books := Bag new.! !
!TusLibrosCarts methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 20:13:34'!
add: aBook withQuantity: aQuantity
	books add: aBook withOcurrences: aQuantity.
! !
!TusLibrosCarts methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 20:13:51' prior: 50876083!
add: aBook withQuantity: aQuantity
	books add: aBook withOccurrences: aQuantity.
! !
!TusLibrosCarts methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 20:14:51'!
books
	^books copy.! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:16:13'!
checkout: aCart for: clientId
	(clients at: clientId) checkout: aCart.
! !
!TusLibrosCarts methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 20:17:14'!
checkoutOn: aTusLibros
	aTusLibros checkout: self purchases for: clientId.
! !

!classRenamed: #TusLibrosCarts as: #TusLibrosCart stamp: 'IO 11/18/2020 20:17:47'!
Smalltalk renameClassNamed: #TusLibrosCarts as: #TusLibrosCart!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:18:24' prior: 50875993!
newCartForClientId: clientId password: password
	self validateClientId: clientId withPassword: password.

	carts add: (TusLibrosCart for: clientId).
	^carts size.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:18:43' prior: 50873726!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |

	self validateCartId: cartId.
	(catalogue includes: isbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	(quantity < 1) ifTrue: [^self error: TusLibros invalidQuantityErrorMessage].

	cart := carts at: cartId.
	cart add: isbn withQuantity: quantity.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:18:52' prior: 50876121!
addToCart: cartId bookIsbn: isbn bookQuantity: aQuantity

	| cart |

	self validateCartId: cartId.
	(catalogue includes: isbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	(aQuantity < 1) ifTrue: [^self error: TusLibros invalidQuantityErrorMessage].

	cart := carts at: cartId.
	cart add: isbn withQuantity: aQuantity.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:18:58' prior: 50876134!
addToCart: cartId bookIsbn: anIsbn bookQuantity: aQuantity

	| cart |

	self validateCartId: cartId.
	(catalogue includes: anIsbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	(aQuantity < 1) ifTrue: [^self error: TusLibros invalidQuantityErrorMessage].

	cart := carts at: cartId.
	cart add: anIsbn withQuantity: aQuantity.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:19:03' prior: 50876148!
addToCart: aCartId bookIsbn: anIsbn bookQuantity: aQuantity

	| cart |

	self validateCartId: aCartId.
	(catalogue includes: anIsbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	(aQuantity < 1) ifTrue: [^self error: TusLibros invalidQuantityErrorMessage].

	cart := carts at: aCartId.
	cart add: anIsbn withQuantity: aQuantity.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:19:39' prior: 50873740!
listCart: cartId

	self validateCartId: cartId.

	^carts at: cartId books.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:20:09' prior: 50874816!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart |

	self validateCartId: cartId.
	cart := carts at: cartId.
	(cart size = 0) ifTrue: [self error: TusLibros emptyCartErrorMessage].
	
	cart checkoutOn: self.

! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:20:18'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:20:18'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:20:18'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:20:18'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:20:18'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:20:18'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:20:18'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:20:18'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:20:18'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:20:18'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:20:18'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:20:18'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:20:18'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:20:18'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:20:18'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:20:18'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:20:18'!
FAILURE!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:20:18'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:20:18'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:20:43' prior: 50876176!
listCart: cartId

	self validateCartId: cartId.

	^(carts at: cartId) books.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:20:44'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:20:44'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:20:44'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:20:44'!
FAILURE!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:20:57'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:21:01'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:21:01'!
ERROR!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:21:40' prior: 50876182!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart |

	self validateCartId: cartId.
	cart := carts at: cartId.
	cart checkoutOn: self.

! !
!TusLibrosCart methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 20:21:50' prior: 50876103!
checkoutOn: aTusLibros
	(books size = 0) ifTrue: [self error: TusLibros emptyCartErrorMessage].
	aTusLibros checkout: self purchases for: clientId.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:21:51'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:21:51'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:21:51'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:22:12'!
ERROR!
!TusLibrosCart methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 20:22:23' prior: 50876331!
checkoutOn: aTusLibros
	(books size = 0) ifTrue: [self error: TusLibros emptyCartErrorMessage].
	aTusLibros checkout: books purchases for: clientId.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:22:24'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:22:24'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:22:24'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:22:24'!
PASSED!
!TusLibrosCart methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 20:22:43' prior: 50876401!
checkoutOn: aTusLibros
	(books size = 0) ifTrue: [self error: TusLibros emptyCartErrorMessage].
	aTusLibros checkout: self books for: clientId.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:22:47'!
PASSED!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:23:09' prior: 50875914!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.

	aClientList keysDo: [ :clientId | clients add: (
		Association key: clientId value: (TusLibrosClient for: (aClientList at: clientId)))].

	carts := OrderedCollection new.


! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:23:10'!
PASSED!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:23:29' prior: 50876535!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.

	carts := OrderedCollection new.

	clients := Dictionary new.
	aClientList keysDo: [ :clientId | clients add: (
		Association key: clientId value: (TusLibrosClient for: (aClientList at: clientId)))].
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:23:32'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:23:40' prior: 50876113!
newCartForClientId: clientId password: password

	self validateClientId: clientId withPassword: password.

	carts add: (TusLibrosCart for: clientId).
	^carts size.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:25:23' prior: 50876323!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 

	self validateCartId: cartId.

	(carts at: cartId) checkoutOn: self.

! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:25:24' prior: 50876685!
checkoutCart: cartId ccn: ccn cced: cced cco: cco

	self validateCartId: cartId.

	(carts at: cartId) checkoutOn: self.

! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:25:25'!
PASSED!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:25:29' prior: 50876098!
checkout: aCart for: clientId

	(clients at: clientId) checkout: aCart.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:25:30'!
PASSED!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:25:36' prior: 50875499!
listPurchasesFor: clientId password: password

	self validateClientId: clientId withPassword: password.

	^(clients at: clientId) purchases.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

----SNAPSHOT----(18 November 2020 20:26:25) CuisUniversity-4384.image priorSource: 17374621!

----STARTUP---- (19 November 2020 12:05:05) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64\CuisUniversity-4384.image!


!classRemoval: #TusLibros stamp: 'LH 11/19/2020 12:05:10'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clientsPurchases clients catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #TusLibrosTest stamp: 'LH 11/19/2020 12:05:11'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

----End fileIn of C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64\Ejercicio-20-Tus-Libros.st----!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 12:15:33'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'LH 11/19/2020 12:15:33'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'LH 11/19/2020 12:15:33'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'LH 11/19/2020 12:15:33'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'LH 11/19/2020 12:15:33'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'LH 11/19/2020 12:15:33'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'LH 11/19/2020 12:15:33'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'LH 11/19/2020 12:15:33'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

----QUIT----(19 November 2020 12:16:51) CuisUniversity-4384.image priorSource: 17205931!

----STARTUP---- (19 November 2020 17:44:28) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros malo\CuisUniversity-4384.image!


TestCase subclass: #ShoppingCartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #ShoppingCartTest category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/19/2020 17:45:01'!
TestCase subclass: #ShoppingCartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/19/2020 17:46:43'!
Object subclass: #ShoppingCart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCartTest methodsFor: 'no messages' stamp: 'LH 11/19/2020 17:46:38'!
test01NewCartIsEmpty
	|aCart|
	
	aCart := ShoppingCart new.
	
	self assert: aCart listCart size equals: 0.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 17:46:47'!
ERROR!
!ShoppingCart methodsFor: 'accesing' stamp: 'LH 11/19/2020 17:47:03'!
listCart
	self shouldBeImplemented.! !
!ShoppingCart methodsFor: 'accesing' stamp: 'LH 11/19/2020 17:47:14' prior: 50870021!
listCart
	^OrderedCollection new.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 17:47:16'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 17:47:16'!
PASSED!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 17:49:04'!
test02CanAddABookToACart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart add: ''.
	
	self assert: aCart listCart size equals: 0.! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 17:49:41' prior: 50870035!
test02CanAddABookToACart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart add: ''.
	
	self assert: aCart listCart size equals: 1.
	self assert: (aCart listCart includes: '').! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 17:50:09' prior: 50870043!
test02CanAddABookToACart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart add: '0-7645-2641-3'.
	
	self assert: aCart listCart size equals: 1.
	self assert: (aCart listCart includes: '0-7645-2641-3').! !

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 17:50:45'!
ERROR!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 17:50:58'!
add: aString 
	self shouldBeImplemented.! !

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/19/2020 17:51:22'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 17:51:21' prior: 50870064!
add: anISBN 

	books add: anISBN.! !

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 17:51:31'!
ERROR!
!ShoppingCart methodsFor: 'initialization' stamp: 'LH 11/19/2020 17:52:21' overrides: 16896425!
initialize

	books := OrderedCollection new.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 17:52:25'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 17:52:25'!
FAILURE!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 17:52:25'!
FAILURE!
!ShoppingCart methodsFor: 'accessing' stamp: 'LH 11/19/2020 17:53:12' prior: 50870025!
listCart
	^books copy.! !

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 17:53:13'!
PASSED!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 17:53:27' prior: 50870012!
test01NewCartIsEmpty
	|aCart|
	
	aCart := ShoppingCart new.
	
	self assert: 0 equals: aCart listCart size.! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 17:53:37' prior: 50870052!
test02CanAddABookToACart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart add: '0-7645-2641-3'.
	
	self assert: 1 equals: aCart listCart size.
	self assert: (aCart listCart includes: '0-7645-2641-3').! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 17:54:33'!
test02CanAddManyBooksToACart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart add: '0-7645-2641-3'.
	aCart add: '0-7645-2641-4'.
	
	self assert: 2 equals: aCart listCart size.
	self assert: (aCart listCart includes: '0-7645-2641-3').
	self assert: (aCart listCart includes: '0-7645-2641-4').! !

!testRun: #ShoppingCartTest #test02CanAddManyBooksToACart stamp: 'LH 11/19/2020 17:54:35'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 17:54:35'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 17:54:35'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddManyBooksToACart stamp: 'LH 11/19/2020 17:54:35'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 17:54:41'!
test03CanAddManyBooksToACart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart add: '0-7645-2641-3'.
	aCart add: '0-7645-2641-4'.
	
	self assert: 2 equals: aCart listCart size.
	self assert: (aCart listCart includes: '0-7645-2641-3').
	self assert: (aCart listCart includes: '0-7645-2641-4').! !

!methodRemoval: ShoppingCartTest #test02CanAddManyBooksToACart stamp: 'LH 11/19/2020 17:54:41'!
test02CanAddManyBooksToACart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart add: '0-7645-2641-3'.
	aCart add: '0-7645-2641-4'.
	
	self assert: 2 equals: aCart listCart size.
	self assert: (aCart listCart includes: '0-7645-2641-3').
	self assert: (aCart listCart includes: '0-7645-2641-4').!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 17:55:50'!
test04CanMoreFromTheSameBookToACart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart add: '0-7645-2641-3' withQuantity: 2.
	
	self assert: 2 equals: aCart listCart size.
	
	aCart add: '0-7645-2641-3'.
	
	self assert: 3 equals: aCart listCart size.! !

!testRun: #ShoppingCartTest #test04CanMoreFromTheSameBookToACart stamp: 'LH 11/19/2020 17:55:56'!
ERROR!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 17:56:04'!
add: aString withQuantity: aSmallInteger 
	self shouldBeImplemented.! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 17:56:37' prior: 50870183!
add: aString withQuantity: aSmallInteger 
	1 to: aSmallInteger do: [books add: aString]! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 17:56:44' prior: 50870188!
add: anISBN withQuantity: aSmallInteger 
	1 to: aSmallInteger do: [books add: anISBN]! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 17:56:50' prior: 50870194!
add: anISBN withQuantity: aQuantity 
	1 to: aQuantity do: [books add: anISBN]! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 17:56:54' prior: 50870200!
add: anISBN withQuantity: aQuantity 

	1 to: aQuantity do: [books add: anISBN]! !

!testRun: #ShoppingCartTest #test04CanMoreFromTheSameBookToACart stamp: 'LH 11/19/2020 17:56:55'!
ERROR!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 17:57:34' prior: 50870206!
add: anISBN withQuantity: aQuantity 

	1 to: aQuantity do: [:index | books add: anISBN]! !

!testRun: #ShoppingCartTest #test04CanMoreFromTheSameBookToACart stamp: 'LH 11/19/2020 17:57:35'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 17:57:35'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 17:57:35'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/19/2020 17:57:36'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreFromTheSameBookToACart stamp: 'LH 11/19/2020 17:57:36'!
PASSED!
!ShoppingCart methodsFor: 'initialization' stamp: 'LH 11/19/2020 17:57:48' prior: 50870084 overrides: 16896425!
initialize

	books := Bag new.! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 17:58:29' prior: 50870215!
add: anISBN withQuantity: aQuantity 

	books add: anISBN withOccurences: aQuantity.! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 17:58:47' prior: 50870242!
add: anISBN withQuantity: aQuantity 

	books add: anISBN withOccurrences: aQuantity.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 17:58:48'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 17:58:48'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/19/2020 17:58:48'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreFromTheSameBookToACart stamp: 'LH 11/19/2020 17:58:48'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 17:59:15'!
test04CanMoreThanOneFromTheSameBookToACart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart add: '0-7645-2641-3' withQuantity: 2.
	
	self assert: 2 equals: aCart listCart size.
	
	aCart add: '0-7645-2641-3'.
	
	self assert: 3 equals: aCart listCart size.! !

!methodRemoval: ShoppingCartTest #test04CanMoreFromTheSameBookToACart stamp: 'LH 11/19/2020 17:59:15'!
test04CanMoreFromTheSameBookToACart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart add: '0-7645-2641-3' withQuantity: 2.
	
	self assert: 2 equals: aCart listCart size.
	
	aCart add: '0-7645-2641-3'.
	
	self assert: 3 equals: aCart listCart size.!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 18:03:52'!
test05CanNotAddABookWithInvalidISBN
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	
	self should: [aCart add: '0-7645-2641-3']
		raise: Error
		withMessageText: ShoppingCart invalidISBNErrorMessage.
	
! !

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:03:56'!
ERROR!
!ShoppingCart class methodsFor: 'instance creation' stamp: 'LH 11/19/2020 18:04:06'!
withCatalogue: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCatalogue: anOrderedCollection ! !
!ShoppingCart class methodsFor: 'instance creation' stamp: 'LH 11/19/2020 18:04:15' prior: 50870302!
withCatalogue: anOrderedCollection 

	^self new initializeWithCatalogue: anOrderedCollection ! !

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:04:17'!
ERROR!

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/19/2020 18:04:27'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books orderedCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCart methodsFor: 'initialization' stamp: 'LH 11/19/2020 18:04:27'!
initializeWithCatalogue: anOrderedCollection 
	self shouldBeImplemented.
	orderedCollection := anOrderedCollection.! !
!ShoppingCart methodsFor: 'initialization' stamp: 'LH 11/19/2020 18:04:42' prior: 50870330!
initializeWithCatalogue: aCatalgue 

	orderedCollection := aCatalgue.! !

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/19/2020 18:04:48'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books catalgue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 18:04:49' prior: 50870337!
initializeWithCatalogue: aCatalgue 

	catalgue := aCatalgue.! !

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:04:51'!
ERROR!
!ShoppingCart class methodsFor: 'Error Description' stamp: 'LH 11/19/2020 18:05:04'!
invalidISBNErrorMessage
	self shouldBeImplemented.! !
!ShoppingCart class methodsFor: 'Error Description' stamp: 'LH 11/19/2020 18:05:22' prior: 50870359!
invalidISBNErrorMessage
	^'ISBN is no in the Catalogue'! !

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:05:23'!
FAILURE!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 18:06:37' prior: 50870076!
add: anISBN 
	
	(catalgue includes: anISBN) ifFalse:[^self error: ShoppingCart invalidISBNErrorMessage].
	
	books add: anISBN.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 18:06:38'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 18:06:38'!
ERROR!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/19/2020 18:06:38'!
ERROR!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/19/2020 18:06:38'!
ERROR!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:06:38'!
FAILURE!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 18:06:58' prior: 50870105!
test01NewCartIsEmpty
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	
	self assert: 0 equals: aCart listCart size.! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 18:07:02' prior: 50870112!
test02CanAddABookToACart
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	
	self assert: 1 equals: aCart listCart size.
	self assert: (aCart listCart includes: '0-7645-2641-3').! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 18:07:05' prior: 50870145!
test03CanAddManyBooksToACart
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	aCart add: '0-7645-2641-4'.
	
	self assert: 2 equals: aCart listCart size.
	self assert: (aCart listCart includes: '0-7645-2641-3').
	self assert: (aCart listCart includes: '0-7645-2641-4').! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 18:07:10' prior: 50870266!
test04CanMoreThanOneFromTheSameBookToACart
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	
	self assert: 2 equals: aCart listCart size.
	
	aCart add: '0-7645-2641-3'.
	
	self assert: 3 equals: aCart listCart size.! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 18:07:21' prior: 50870414!
test03CanAddManyBooksToACart
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3'.
	aCart add: '0-7645-2641-4'.
	
	self assert: 2 equals: aCart listCart size.
	self assert: (aCart listCart includes: '0-7645-2641-3').
	self assert: (aCart listCart includes: '0-7645-2641-4').! !

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:07:24'!
FAILURE!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:07:24'!
FAILURE!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 18:07:47' prior: 50870288!
test05CanNotAddABookWithInvalidISBN
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection new).
	
	self should: [aCart add: '0-7645-2641-3']
		raise: Error
		withMessageText: ShoppingCart invalidISBNErrorMessage.
	
! !

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:07:48'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:07:51'!
PASSED!

----SNAPSHOT----(19 November 2020 18:08:34) CuisUniversity-4384.image priorSource: 17226676!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 18:11:25'!
test06CanNotAdd0Books
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	
	self should: [aCart add: '0-7645-2641-3' withQuantity: 0]
		raise: Error
		withMessageText: ShoppingCart invalidQuantityErrorMessage.
	
! !

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/19/2020 18:11:27'!
ERROR!
!ShoppingCart class methodsFor: 'Error Description' stamp: 'LH 11/19/2020 18:11:39'!
invalidQuantityErrorMessage
	self shouldBeImplemented.! !
!ShoppingCart class methodsFor: 'Error Description' stamp: 'LH 11/19/2020 18:12:19' prior: 50870496!
invalidQuantityErrorMessage
	^'Should only add a positive whole number of books'! !

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/19/2020 18:12:20'!
FAILURE!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 18:13:20' prior: 50870248!
add: anISBN withQuantity: aQuantity 
	
	aQuantity = 0 ifTrue:[^self error: ShoppingCart invalidQuantityErrorMessage ].
	
	books add: anISBN withOccurrences: aQuantity.! !

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/19/2020 18:13:22'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 18:13:22'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 18:13:22'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/19/2020 18:13:22'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/19/2020 18:13:22'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:13:22'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/19/2020 18:13:22'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 18:13:34'!
test07CanNotAddMinusBooks
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	
	self should: [aCart add: '0-7645-2641-3' withQuantity: -1]
		raise: Error
		withMessageText: ShoppingCart invalidQuantityErrorMessage.
	
! !

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/19/2020 18:13:36'!
FAILURE!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 18:13:48' prior: 50870510!
add: anISBN withQuantity: aQuantity 
	
	aQuantity <= 0 ifTrue:[^self error: ShoppingCart invalidQuantityErrorMessage ].
	
	books add: anISBN withOccurrences: aQuantity.! !

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/19/2020 18:13:49'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 18:13:49'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 18:13:49'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/19/2020 18:13:49'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/19/2020 18:13:49'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:13:49'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/19/2020 18:13:49'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/19/2020 18:13:50'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 18:14:06'!
test07CanNotAddNotWholeBooks
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	
	self should: [aCart add: '0-7645-2641-3' withQuantity: 1.5]
		raise: Error
		withMessageText: ShoppingCart invalidQuantityErrorMessage.
	
! !

1,5!

1.5!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 18:14:40'!
test08CanNotAddNotWholeBooks
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	
	self should: [aCart add: '0-7645-2641-3' withQuantity: 1.5]
		raise: Error
		withMessageText: ShoppingCart invalidQuantityErrorMessage.
	
! !

!methodRemoval: ShoppingCartTest #test07CanNotAddNotWholeBooks stamp: 'LH 11/19/2020 18:14:40'!
test07CanNotAddNotWholeBooks
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	
	self should: [aCart add: '0-7645-2641-3' withQuantity: 1.5]
		raise: Error
		withMessageText: ShoppingCart invalidQuantityErrorMessage.
	
!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/19/2020 18:14:48'!
FAILURE!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 18:15:42' prior: 50870554!
add: anISBN withQuantity: aQuantity 
	
	aQuantity isInteger ifFalse:[^self error: ShoppingCart invalidQuantityErrorMessage ].
	
	books add: anISBN withOccurrences: aQuantity.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 18:15:43'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 18:15:43'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/19/2020 18:15:43'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/19/2020 18:15:43'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:15:43'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/19/2020 18:15:43'!
FAILURE!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/19/2020 18:15:43'!
FAILURE!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/19/2020 18:15:43'!
PASSED!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 18:16:35' prior: 50870624!
add: anISBN withQuantity: aQuantity 
	
	(aQuantity isInteger or: aQuantity > 0) ifFalse:[^self error: ShoppingCart invalidQuantityErrorMessage ].
	
	books add: anISBN withOccurrences: aQuantity.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 18:16:36'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 18:16:36'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/19/2020 18:16:36'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/19/2020 18:16:36'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:16:36'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/19/2020 18:16:36'!
FAILURE!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/19/2020 18:16:36'!
FAILURE!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/19/2020 18:16:36'!
FAILURE!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 18:16:50' prior: 50870658!
add: anISBN withQuantity: aQuantity 
	
	(aQuantity isInteger and: aQuantity > 0) ifFalse:[^self error: ShoppingCart invalidQuantityErrorMessage ].
	
	books add: anISBN withOccurrences: aQuantity.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 18:16:51'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 18:16:51'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/19/2020 18:16:51'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/19/2020 18:16:51'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:16:51'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/19/2020 18:16:51'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/19/2020 18:16:51'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/19/2020 18:16:51'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/19/2020 18:16:54'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 18:16:54'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 18:16:54'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/19/2020 18:16:54'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/19/2020 18:16:54'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:16:54'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/19/2020 18:16:54'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/19/2020 18:16:54'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/19/2020 18:16:54'!
PASSED!

!classRemoval: #TusLibrosTest stamp: 'LH 11/19/2020 18:17:34'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'cart' stamp: 'LH 11/19/2020 18:18:04' prior: 50869733!
newCartForClientId: clientId password: password

	self validateClientId: clientId withPassword: password.

	
	^carts size.
! !

!classRemoval: #TusLibrosCart stamp: 'LH 11/19/2020 18:18:09'!
Object subclass: #TusLibrosCart
	instanceVariableNames: 'clientId books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'initialization' stamp: 'LH 11/19/2020 18:18:22' prior: 50869702!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.

	carts := OrderedCollection new.

	clients := Dictionary new.
! !

!classRemoval: #TusLibrosClient stamp: 'LH 11/19/2020 18:18:27'!
Object subclass: #TusLibrosClient
	instanceVariableNames: 'password purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #TusLibros stamp: 'LH 11/19/2020 18:18:31'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clients catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 18:18:35'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 18:18:35'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/19/2020 18:18:35'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/19/2020 18:18:35'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:18:35'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/19/2020 18:18:35'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/19/2020 18:18:35'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/19/2020 18:18:36'!
PASSED!

----SNAPSHOT----(19 November 2020 18:18:55) CuisUniversity-4384.image priorSource: 17242494!

TestCase subclass: #ShoppingCashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #ShoppingCashierTest category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/19/2020 18:34:32'!
TestCase subclass: #ShoppingCashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCashierTest methodsFor: 'no messages' stamp: 'LH 11/19/2020 18:34:50'!
test01AnEmptyCartCannotBeCheckedOut! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 18:48:22' prior: 50870838!
test01AnEmptyCartCannotBeCheckedOut
	|aCashier aCart|! !

!classDefinition: #ShoppingCashier category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/19/2020 18:53:36'!
Object subclass: #ShoppingCashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 18:53:31' prior: 50870843!
test01AnEmptyCartCannotBeCheckedOut
	|aCashier aCart|
	
	aCart := ShoppingCart with: OrderedCollection new.
	
	aCashier := ShoppingCashier new.
	
	self should: [aCashier checkOut: aCart withCardNumber: 0 ExpirationDate: Date today andCardOwner: 'Juan Pablo']
		raise: Error
		withMessageText: ShoppingCashier invalidCartErrorMessage.! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 18:53:46'!
ERROR!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 18:54:00' prior: 50870856!
test01AnEmptyCartCannotBeCheckedOut
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: OrderedCollection new.
	
	aCashier := ShoppingCashier new.
	
	self should: [aCashier checkOut: aCart withCardNumber: 0 ExpirationDate: Date today andCardOwner: 'Juan Pablo']
		raise: Error
		withMessageText: ShoppingCashier invalidCartErrorMessage.! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 18:54:01'!
ERROR!
!ShoppingCashier class methodsFor: 'error Description' stamp: 'LH 11/19/2020 18:54:15'!
invalidCartErrorMessage
	self shouldBeImplemented.! !
!ShoppingCashier class methodsFor: 'error Description' stamp: 'LH 11/19/2020 18:54:33' prior: 50870891!
invalidCartErrorMessage
	^'The Cart Has no Books'! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 18:54:34'!
FAILURE!
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/19/2020 18:56:18'!
checkOut: aShoppingCart withCardNumber: aSmallInteger ExpirationDate: aDate andCardOwner: aString 
	self shouldBeImplemented.! !
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/19/2020 18:57:50' prior: 50870904!
checkOut: aShoppingCart withCardNumber: aSmallInteger ExpirationDate: aDate andCardOwner: aString 

	^self error: ShoppingCashier invalidCartErrorMessage.! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 18:57:51'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 18:57:53'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 18:57:53'!
PASSED!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 19:05:40'!
test02ACartWith1BookWillCheckOutCorrectly
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '').
	aCart add: ''.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('' 100)) .
	
	self assert: 100 equals: (aCashier checkOut: aCart withCardNumber: 0 ExpirationDate: Date yesterday andCardOwner: 'Juan Pablo').! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 19:06:01' prior: 50870929!
test02ACartWith1BookWillCheckOutCorrectly
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('' 100)) .
	
	self assert: 100 equals: (aCashier checkOut: aCart withCardNumber: 0 ExpirationDate: Date yesterday andCardOwner: 'Juan Pablo').! !
!ShoppingCart methodsFor: 'initialization' stamp: 'LH 11/19/2020 19:06:56' prior: 50870351!
initializeWithCatalogue: aCatalgue 

	catalgue := aCatalgue.
	books := Bag new.! !

!methodRemoval: ShoppingCart #initialize stamp: 'LH 11/19/2020 19:07:00'!
initialize

	books := Bag new.!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 19:07:02'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 19:07:02'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/19/2020 19:07:02'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/19/2020 19:07:02'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 19:07:02'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/19/2020 19:07:02'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/19/2020 19:07:02'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/19/2020 19:07:02'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:08:11'!
ERROR!
!ShoppingCashier class methodsFor: 'instance creation' stamp: 'LH 11/19/2020 19:08:17'!
withPriceCatalogue: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithPriceCatalogue: aDictionary ! !
!ShoppingCashier class methodsFor: 'instance creation' stamp: 'LH 11/19/2020 19:08:45' prior: 50870998!
withPriceCatalogue: aPriceCatalogue 

	^self new initializeWithPriceCatalogue: aPriceCatalogue ! !

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:08:45'!
ERROR!

!classDefinition: #ShoppingCashier category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/19/2020 19:09:12'!
Object subclass: #ShoppingCashier
	instanceVariableNames: 'priceCatalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCashier methodsFor: 'initialization' stamp: 'LH 11/19/2020 19:09:12'!
initializeWithPriceCatalogue: aPriceCatalogue 
	self shouldBeImplemented.
	priceCatalogue := aPriceCatalogue.! !
!ShoppingCashier methodsFor: 'initialization' stamp: 'LH 11/19/2020 19:09:18' prior: 50871026!
initializeWithPriceCatalogue: aPriceCatalogue 

	priceCatalogue := aPriceCatalogue.! !

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:09:20'!
ERROR!
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/19/2020 19:15:11' prior: 50870911!
checkOut: aShoppingCart withCardNumber: aSmallInteger ExpirationDate: aDate andCardOwner: aString 

	aShoppingCart listCart size = 0 ifTrue:[^self error: ShoppingCashier invalidCartErrorMessage].
	^100.! !

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:15:14'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 19:15:14'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:15:14'!
PASSED!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 19:18:19' prior: 50870874!
test01AnEmptyCartCannotBeCheckedOut
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: OrderedCollection new.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary new).
	
	self should: [aCashier checkOut: aCart withCardNumber: 0 ExpirationDate: Date today andCardOwner: 'Juan Pablo']
		raise: Error
		withMessageText: ShoppingCashier invalidCartErrorMessage.! !

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:18:23'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:18:28'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 19:18:29'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:18:29'!
PASSED!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 19:19:25'!
test03ACartWithManyBooksWillCheckOutCorrectly
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: ''.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('' 100 '' 100)) .
	
	self assert: 300 equals: (aCashier checkOut: aCart withCardNumber: 0 ExpirationDate: Date yesterday andCardOwner: 'Juan Pablo').! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 19:19:56' prior: 50871093!
test03ACartWithManyBooksWillCheckOutCorrectly
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)) .
	
	self assert: 300 equals: (aCashier checkOut: aCart withCardNumber: 0 ExpirationDate: Date yesterday andCardOwner: 'Juan Pablo').! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 19:20:00' prior: 50870944!
test02ACartWith1BookWillCheckOutCorrectly
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)) .
	
	self assert: 100 equals: (aCashier checkOut: aCart withCardNumber: 0 ExpirationDate: Date yesterday andCardOwner: 'Juan Pablo').! !

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:20:09'!
FAILURE!
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/19/2020 19:28:18' prior: 50871043!
checkOut: aShoppingCart withCardNumber: aSmallInteger ExpirationDate: aDate andCardOwner: aString 
	|aSumOfPrices|
	
	aShoppingCart listCart size = 0 ifTrue:[^self error: ShoppingCashier invalidCartErrorMessage].
	
	aSumOfPrices := 0.
	aShoppingCart listCart do:[:anISBN | aSumOfPrices := aSumOfPrices + (priceCatalogue at: anISBN)].
	^aSumOfPrices.! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 19:28:19'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:28:20'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:28:20'!
PASSED!
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/19/2020 19:31:37' prior: 50871150!
checkOut: aShoppingCart withCardNumber: aSmallInteger ExpirationDate: aDate andCardOwner: aString 
	|aSumOfPrices|
	
	aShoppingCart listCart size = 0 ifTrue:[^self error: ShoppingCashier invalidCartErrorMessage].
	
	^ aShoppingCart listCart inject: 0 into: [:anISBN | priceCatalogue at: anISBN].
	
	"aSumOfPrices := 0.
	aShoppingCart listCart do:[:anISBN | aSumOfPrices := aSumOfPrices + (priceCatalogue at: anISBN)].
	^aSumOfPrices."! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 19:31:41'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:31:41'!
ERROR!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:31:41'!
ERROR!

----End fileIn of C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros malo\Packages\TerseGuide.pck.st----!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:33:03'!
ERROR!
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/19/2020 19:34:39' prior: 50871175!
checkOut: aShoppingCart withCardNumber: aSmallInteger ExpirationDate: aDate andCardOwner: aString 
	|aSumOfPrices|
	
	aShoppingCart listCart size = 0 ifTrue:[^self error: ShoppingCashier invalidCartErrorMessage].
	
	^ aShoppingCart listCart inject: 0 into: [:theSum :anISBN | theSum + priceCatalogue at: anISBN].
	
	"aSumOfPrices := 0.
	aShoppingCart listCart do:[:anISBN | aSumOfPrices := aSumOfPrices + (priceCatalogue at: anISBN)].
	^aSumOfPrices."! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 19:34:42'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:34:42'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:34:42'!
PASSED!
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/19/2020 19:34:54' prior: 50874143!
checkOut: aShoppingCart withCardNumber: aSmallInteger ExpirationDate: aDate andCardOwner: aString 

	aShoppingCart listCart size = 0 ifTrue:[^self error: ShoppingCashier invalidCartErrorMessage].
	
	^ aShoppingCart listCart inject: 0 into: [:theSum :anISBN | theSum + priceCatalogue at: anISBN].! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 19:34:55'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:34:55'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:34:55'!
PASSED!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 19:40:54' prior: 50871064!
test01AnEmptyCartCannotBeCheckedOut
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: OrderedCollection new.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary new).
	
	self should: [aCashier checkOut: aCart withCardNumber: '0000000000000000' ExpirationDate: Date yesterday andCardOwner: 'Juan Pablo']
		raise: Error
		withMessageText: ShoppingCashier invalidCartErrorMessage.! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 19:41:05' prior: 50871130!
test02ACartWith1BookWillCheckOutCorrectly
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)) .
	
	self assert: 100 equals: (aCashier checkOut: aCart withCardNumber: '0000000000000000' ExpirationDate: Date yesterday andCardOwner: 'Juan Pablo').! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 19:41:09' prior: 50871111!
test03ACartWithManyBooksWillCheckOutCorrectly
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)) .
	
	self assert: 300 equals: (aCashier checkOut: aCart withCardNumber: '0000000000000000' ExpirationDate: Date yesterday andCardOwner: 'Juan Pablo').! !

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:41:10'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 19:41:10'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:41:11'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:41:11'!
PASSED!
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/19/2020 19:42:40' prior: 50874171!
checkOut: aShoppingCart withCardNumber: aCreditCardNumber ExpirationDate: anExpirationDate andCardOwner: aName 

	aShoppingCart listCart size = 0 ifTrue:[^self error: ShoppingCashier invalidCartErrorMessage].
	
	^ aShoppingCart listCart inject: 0 into: [:theSum :anISBN | theSum + priceCatalogue at: anISBN].! !

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:42:47'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 19:42:47'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:42:47'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:42:47'!
PASSED!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 19:47:02'!
test04TheCardShouldNotBeExpired
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)) .
	
	self should: (aCashier checkOut: aCart withCardNumber: '0000000000000000' ExpirationDate: Date tomorrow andCardOwner: 'Juan Pablo')
		raise: Error
		withMessageText: ShoppingCashier invalidCreditCard.! !

Date today month!

Month today!

Month newFrom: Date today!

(Month newFrom: Date today) next!

(Month newFrom: Date today)!

Month!

Month!

(Month newFrom: Date today)!

(Month newFrom: Date today + 1 month)!

(Month newFrom: Date today + 2 months)!

(Month newFrom: Date today	) next !

(Month newFrom: Date today	) !

 Date today	next!

Date today + 31 months!

Date today + 31 days!

Date today + Date today daysInMonth!

Date today + Date today daysInMonth!

Date today + Date today daysInMonth!

Date today + (Date today daysInMonth)!

Date today + 31 days !

Date today daysInMonth!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 20:14:33' prior: 50874290!
test04TheCardShouldNotBeExpired
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)) .
	
	self should: (aCashier checkOut: aCart withCardNumber: '0000000000000000' ExpirationDate: (Date today + (Date today daysInMonth days) ) andCardOwner: 'Juan Pablo')
		raise: Error
		withMessageText: ShoppingCashier invalidCreditCard.
		! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 20:15:02'!
invalidDate

	^Date today + (Date today daysInMonth days)
		! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 20:15:10'!
validDate

	^Date today - (Date today daysInMonth days)
		! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 20:16:08' prior: 50874346!
invalidDate

	^Date today + (Date today daysInMonth days) month
		! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 20:16:22' prior: 50874351!
validDate

	^Date today - (Date today daysInMonth days) month
		! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 20:16:34' prior: 50874195!
test01AnEmptyCartCannotBeCheckedOut
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: OrderedCollection new.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary new).
	
	self should: [aCashier checkOut: aCart withCardNumber: '0000000000000000' ExpirationDate: self validDate andCardOwner: 'Juan Pablo']
		raise: Error
		withMessageText: ShoppingCashier invalidCartErrorMessage.! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 20:16:42' prior: 50874211!
test02ACartWith1BookWillCheckOutCorrectly
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)) .
	
	self assert: 100 equals: (aCashier checkOut: aCart withCardNumber: '0000000000000000' ExpirationDate: self validDate andCardOwner: 'Juan Pablo').! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 20:16:46' prior: 50874228!
test03ACartWithManyBooksWillCheckOutCorrectly
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)) .
	
	self assert: 300 equals: (aCashier checkOut: aCart withCardNumber: '0000000000000000' ExpirationDate: self validDate andCardOwner: 'Juan Pablo').! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 20:16:53' prior: 50874327!
test04TheCardShouldNotBeExpired
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)) .
	
	self should: (aCashier checkOut: aCart withCardNumber: '0000000000000000' ExpirationDate: self validDate andCardOwner: 'Juan Pablo')
		raise: Error
		withMessageText: ShoppingCashier invalidCreditCard.
		! !

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/19/2020 20:51:32'!
ERROR!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 20:51:57' prior: 50874363!
validDate

	^(Date today - (Date today daysInMonth days)) month
		! !

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/19/2020 20:51:58'!
ERROR!
!ShoppingCashier class methodsFor: 'error Description' stamp: 'LH 11/19/2020 20:52:18'!
invalidCreditCard
	self shouldBeImplemented.! !
!ShoppingCashier class methodsFor: 'error Description' stamp: 'LH 11/19/2020 20:52:32' prior: 50874453!
invalidCreditCard
	^'invalid credit card information'! !

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/19/2020 20:52:34'!
FAILURE!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 20:53:01' prior: 50874422!
test04TheCardShouldNotBeExpired
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)) .
	
	self should: (aCashier checkOut: aCart withCardNumber: '0000000000000000' ExpirationDate: self invalidDate andCardOwner: 'Juan Pablo')
		raise: Error
		withMessageText: ShoppingCashier invalidCreditCard.
		! !

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/19/2020 20:53:03'!
ERROR!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 20:53:13' prior: 50874357!
invalidDate

	^(Date today + (Date today daysInMonth days)) month
		! !

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/19/2020 20:53:15'!
FAILURE!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 20:53:31' prior: 50874467!
test04TheCardShouldNotBeExpired
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)) .
	
	self should:[ (aCashier checkOut: aCart withCardNumber: '0000000000000000' ExpirationDate: self invalidDate andCardOwner: 'Juan Pablo')]
		raise: Error
		withMessageText: ShoppingCashier invalidCreditCard.
		! !

anExpirationDate <= Date today month!

Date today month < anExpirationDate!
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/19/2020 21:00:09' prior: 50874262!
checkOut: aShoppingCart withCardNumber: aCreditCardNumber ExpirationDate: anExpirationDate andCardOwner: aName 

	aShoppingCart listCart size = 0 ifTrue:[^self error: ShoppingCashier invalidCartErrorMessage].
	 (anExpirationDate to: Date today month )< 0 ifTrue: [^self error: ShoppingCashier invalidCreditCard ].
	
	^ aShoppingCart listCart inject: 0 into: [:theSum :anISBN | theSum + priceCatalogue at: anISBN].! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 21:00:10'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 21:00:10'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/19/2020 21:00:10'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/19/2020 21:00:10'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 21:00:10'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/19/2020 21:00:10'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/19/2020 21:00:10'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/19/2020 21:00:10'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 21:00:10'!
PASSED!
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/19/2020 21:04:58' prior: 50874519!
checkOut: aShoppingCart withCardNumber: aCreditCardNumber ExpirationDate: anExpirationDate andCardOwner: aName 

	aShoppingCart listCart size = 0 ifTrue:[^self error: ShoppingCashier invalidCartErrorMessage].
	 (anExpirationDate yearNumber <= Date today yearNumber or: anExpirationDate monthIndex <= Date today monthIndex)
			 ifTrue: [^self error: ShoppingCashier invalidCreditCard ].
	
	^ aShoppingCart listCart inject: 0 into: [:theSum :anISBN | theSum + priceCatalogue at: anISBN].! !

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/19/2020 21:04:59'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 21:04:59'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 21:04:59'!
ERROR!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 21:04:59'!
ERROR!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/19/2020 21:04:59'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 21:05:06'!
ERROR!
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/19/2020 21:14:20' prior: 50874564!
checkOut: aShoppingCart withCardNumber: aCreditCardNumber ExpirationDate: anExpirationDate andCardOwner: aName 

	aShoppingCart listCart size = 0 ifTrue:[^self error: ShoppingCashier invalidCartErrorMessage].
	
	(anExpirationDate yearNumber < Date today yearNumber)
			ifTrue:[ ^self error: ShoppingCashier invalidCreditCard].  
	(anExpirationDate yearNumber = Date today yearNumber and: anExpirationDate monthIndex <= Date today monthIndex) 
			ifTrue: [^self error: ShoppingCashier invalidCreditCard ].
	
	^ aShoppingCart listCart inject: 0 into: [:theSum :anISBN | theSum + priceCatalogue at: anISBN].! !

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 21:14:21'!
ERROR!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 21:14:39'!
FAILURE!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 21:15:08' prior: 50874444!
validDate

	^(Date today + (Date today daysInMonth days)) month
		! !

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 21:15:10'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/19/2020 21:15:19'!
FAILURE!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/19/2020 21:15:19'!
FAILURE!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 21:15:37' prior: 50874489!
invalidDate

	^(Date today - (Date today daysInMonth days)) month
		! !

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/19/2020 21:15:38'!
PASSED!

----QUIT----(19 November 2020 21:17:03) CuisUniversity-4384.image priorSource: 17253487!

----STARTUP---- (21 November 2020 17:18:55) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\CuisUniversity-4384.image!


TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #CreditCardTest category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/21/2020 17:20:27'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #CreditCard category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/21/2020 17:26:03'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:25:59'!
test01ACreditCardCanBeNotExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today + Date today daysInMonth months) month belongingTo: 'Juan Pablo'.
	
	self deny: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:26:09'!
ERROR!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:26:23' prior: 50874685!
test01ACreditCardCanBeNotExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today + Date today daysInMonth days) month belongingTo: 'Juan Pablo'.
	
	self deny: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:26:24'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'LH 11/21/2020 17:26:31'!
withNumber: aString expirationDate: aMonth belongingTo: aString3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithNumber: aString expirationDate: aMonth belongingTo: aString3 ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'LH 11/21/2020 17:27:22' prior: 50874713!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:27:23'!
ERROR!

!classDefinition: #CreditCard category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/21/2020 17:27:49'!
Object subclass: #CreditCard
	instanceVariableNames: 'cCNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #CreditCard category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/21/2020 17:27:49'!
Object subclass: #CreditCard
	instanceVariableNames: 'cCNumber expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #CreditCard category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/21/2020 17:27:49'!
Object subclass: #CreditCard
	instanceVariableNames: 'cCNumber expirationDate name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!CreditCard methodsFor: 'initialization' stamp: 'LH 11/21/2020 17:27:49'!
initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	self shouldBeImplemented.
	cCNumber := aCCNumber.
	expirationDate := anExpirationDate.
	name := aName.! !
!CreditCard methodsFor: 'initialization' stamp: 'LH 11/21/2020 17:28:03' prior: 50874760!
initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	cCNumber := aCCNumber.
	expirationDate := anExpirationDate.
	name := aName.! !

!classDefinition: #CreditCard category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/21/2020 17:28:10'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber expirationDate name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'LH 11/21/2020 17:28:10' prior: 50874769!
initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	creditCardNumber := aCCNumber.
	expirationDate := anExpirationDate.
	name := aName.! !

!classDefinition: #CreditCard category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/21/2020 17:28:28'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber expirationDate nameOfOwner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'LH 11/21/2020 17:28:28' prior: 50874786!
initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	creditCardNumber := aCCNumber.
	expirationDate := anExpirationDate.
	nameOfOwner := aName.! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:28:34'!
ERROR!
!CreditCard methodsFor: 'testing' stamp: 'LH 11/21/2020 17:28:45'!
isExpired
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'testing' stamp: 'LH 11/21/2020 17:29:02' prior: 50874815!
isExpired
	^false.! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:29:05'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:29:05'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:30:37'!
test02ACreditCardWithExpirationDatingThisMonthIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: Date today month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthIsExpired stamp: 'LH 11/21/2020 17:30:38'!
FAILURE!

aCreditCard isExpired!
!CreditCard methodsFor: 'testing' stamp: 'LH 11/21/2020 17:32:10' prior: 50874819!
isExpired

	^expirationDate = Date today month.! !

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthIsExpired stamp: 'LH 11/21/2020 17:32:14'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:32:14'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthIsExpired stamp: 'LH 11/21/2020 17:32:14'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:32:23'!
test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: Date today month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !

!methodRemoval: CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthIsExpired stamp: 'LH 11/21/2020 17:32:23'!
test02ACreditCardWithExpirationDatingThisMonthIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: Date today month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:32:55'!
test03ACreditCardWithExpirationDatingaPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: Date today month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:34:01' prior: 50874880!
test03ACreditCardWithExpirationDatingaPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today - Date today daysInMonth days) month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingaPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 17:34:02'!
FAILURE!
!CreditCard methodsFor: 'testing' stamp: 'LH 11/21/2020 17:34:38' prior: 50874844!
isExpired

	^expirationDate monthIndex <= Date today monthIndex.! !

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingaPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 17:34:39'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:34:39'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 17:34:39'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingaPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 17:34:39'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:35:41'!
test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today - Date today daysInMonth days) month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !

!methodRemoval: CreditCardTest #test03ACreditCardWithExpirationDatingaPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 17:35:42'!
test03ACreditCardWithExpirationDatingaPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today - Date today daysInMonth days) month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:36:45'!
test04ACreditCardWithExpirationDatingAPastYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today - 365 days) month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:36:51'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:36:51'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 17:36:51'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 17:36:51'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:36:51'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:37:32' prior: 50874951!
test04ACreditCardWithExpirationDatingAPastYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today - 365 days + Date today daysInMonth days) month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:37:33'!
FAILURE!

expirationDate!

Date today!
!CreditCard methodsFor: 'testing' stamp: 'LH 11/21/2020 17:38:59' prior: 50874907!
isExpired

	^(expirationDate monthIndex <= Date today monthIndex) or: expirationDate year < Date today year.! !

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:40:10'!
ERROR!
!CreditCard methodsFor: 'testing' stamp: 'LH 11/21/2020 17:40:34' prior: 50874998!
isExpired

	^(expirationDate monthIndex <= Date today monthIndex) or: expirationDate yearNumber < Date today yearNumber.! !

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:40:35'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:40:35'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 17:40:35'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 17:40:35'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:40:35'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:42:54'!
test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today + 365 days) month belongingTo: 'Juan Pablo'.
	
	self deny: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 17:42:56'!
FAILURE!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 17:43:18'!
FAILURE!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 17:43:18'!
FAILURE!
!CreditCard methodsFor: 'testing' stamp: 'LH 11/21/2020 17:44:50' prior: 50875008!
isExpired

	^((expirationDate monthIndex <= Date today monthIndex) and: expirationDate yearNumber = Date today yearNumber) or: expirationDate yearNumber < Date today yearNumber.! !

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 17:44:52'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:44:58'!
test05ACreditCardWithExpirationDatingAPastYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today - 365 days + Date today daysInMonth days) month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !

!methodRemoval: CreditCardTest #test04ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:44:58'!
test04ACreditCardWithExpirationDatingAPastYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today - 365 days + Date today daysInMonth days) month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:45:02'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:45:04'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:45:04'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 17:45:04'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 17:45:04'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 17:45:04'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:45:04'!
PASSED!
!CreditCard methodsFor: 'testing' stamp: 'LH 11/21/2020 17:51:47' prior: 50875057!
isExpired
	|expirationDateYear currentMonth currentYear|
	
	expirationDateYear := expirationDate yearNumber.
	currentMonth := Date today monthIndex.
	currentYear := Date today yearNumber.
	
	
	^	(expirationDate monthIndex <= currentMonth 
			and: expirationDateYear = currentYear)
			
		or: expirationDateYear < currentYear.! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:51:48'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 17:51:48'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 17:51:48'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 17:51:48'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:51:48'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:51:51'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 17:51:51'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 17:51:51'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 17:51:51'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:51:51'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:53:12'!
daysThisMonth

	^Date today daysInMonth days.
	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:53:47' prior: 50874699!
test01ACreditCardCanBeNotExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today + self daysThisMonth) month belongingTo: 'Juan Pablo'.
	
	self deny: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:54:20' prior: 50874927!
test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today - self daysThisMonth) month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 17:54:22'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:54:22'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 17:54:22'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 17:54:22'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 17:54:22'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:54:22'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:54:46' prior: 50875069!
test05ACreditCardWithExpirationDatingAPastYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today - 365 days + self daysThisMonth) month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:55:28'!
daysInYear
	
	^365 days 

	! !

----SNAPSHOT----(21 November 2020 17:55:31) CuisUniversity-4384.image priorSource: 17376241!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:55:33'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 17:55:33'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 17:55:33'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 17:55:33'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:55:33'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:55:43' prior: 50875034!
test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today + self daysInYear) month belongingTo: 'Juan Pablo'.
	
	self deny: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:55:53' prior: 50875223!
test05ACreditCardWithExpirationDatingAPastYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today - self daysInYear + self daysThisMonth) month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:02:06'!
test06CreditCarNumberCantHaveAnythingBut16Digits
	
	self should: [CreditCard     withNumber: '0000000000000000' 
							expirationDate: (Date today - self daysInYear + self daysThisMonth) month 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
	
	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:02:24' prior: 50874859!
test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard     withNumber: '0000000000000000' 
							expirationDate: Date today month 
							belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:02:45' prior: 50875188!
test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard     withNumber: '0000000000000000' 
							expirationDate: (Date today - self daysThisMonth) month 
							belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:02:58' prior: 50875260!
test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired
	|aCreditCard|
	
	aCreditCard := CreditCard     withNumber: '0000000000000000' 
							expirationDate: (Date today + self daysInYear) month 
							belongingTo: 'Juan Pablo'.
	
	self deny: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:03:10' prior: 50875271!
test05ACreditCardWithExpirationDatingAPastYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard     withNumber: '0000000000000000' 
							expirationDate: (Date today - self daysInYear + self daysThisMonth) month 
							belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:03:16' prior: 50875282!
test06CreditCarNumberCantHaveAnythingBut16Digits
	
	self should: [CreditCard         withNumber: '0000000000000000' 
							expirationDate: (Date today - self daysInYear + self daysThisMonth) month 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
	
	! !

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Digits stamp: 'LH 11/21/2020 18:03:17'!
ERROR!
!CreditCard class methodsFor: 'error description' stamp: 'LH 11/21/2020 18:03:32'!
invalidCreditCardNumber
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error description' stamp: 'LH 11/21/2020 18:05:13' prior: 50875358!
invalidCreditCardNumber
	^'CreditCard number can only have exactly 16 numbers and nothing else'! !

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Digits stamp: 'LH 11/21/2020 18:05:18'!
FAILURE!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Digits stamp: 'LH 11/21/2020 18:07:08'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'LH 11/21/2020 18:09:39' prior: 50874724!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	aCCNumber size = 16 ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Digits stamp: 'LH 11/21/2020 18:09:40'!
FAILURE!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:10:02' prior: 50875342!
test06CreditCarNumberCantHaveAnythingBut16Digits
	
	self should: [CreditCard         withNumber: '00000000000000000' 
							expirationDate: (Date today - self daysInYear + self daysThisMonth) month 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
		
	self should: [CreditCard         withNumber: '000000000000000' 
							expirationDate: (Date today - self daysInYear + self daysThisMonth) month 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
	
	! !

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Digits stamp: 'LH 11/21/2020 18:10:03'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 18:10:03'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 18:10:03'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 18:10:03'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 18:10:04'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 18:10:04'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Digits stamp: 'LH 11/21/2020 18:10:04'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:10:34'!
test06CreditCarNumberCantHaveAnythingBut16Symbols
	
	self should: [CreditCard         withNumber: '00000000000000000' 
							expirationDate: (Date today - self daysInYear + self daysThisMonth) month 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
		
	self should: [CreditCard         withNumber: '000000000000000' 
							expirationDate: (Date today - self daysInYear + self daysThisMonth) month 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
	
	! !

!methodRemoval: CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Digits stamp: 'LH 11/21/2020 18:10:34'!
test06CreditCarNumberCantHaveAnythingBut16Digits
	
	self should: [CreditCard         withNumber: '00000000000000000' 
							expirationDate: (Date today - self daysInYear + self daysThisMonth) month 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
		
	self should: [CreditCard         withNumber: '000000000000000' 
							expirationDate: (Date today - self daysInYear + self daysThisMonth) month 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
	
	!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:11:55'!
test07CreditCarNumberCantHaveAnythingButNumbers
	
	self should: [CreditCard         withNumber: '000000000000000O' 
							expirationDate: (Date today - self daysInYear + self daysThisMonth) month 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
	
	! !

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:11:57'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'LH 11/21/2020 18:17:29' prior: 50875377!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	aCCNumber size = 16 ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	(aCCNumber allSatisfy: [:aDigit | aDigit isDigit]) ifFalse:[^self error: CreditCard invalidCreditCardNumber].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:17:31'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 18:17:31'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 18:17:31'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 18:17:31'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 18:17:31'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 18:17:31'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/21/2020 18:17:31'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:17:31'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:20:19'!
test08TheNameOfACreditCardOwnerCanNotBeBlank
	
	self should: [CreditCard         withNumber: '000000000000000O' 
							expirationDate: (Date today - self daysInYear + self daysThisMonth) month 
							belongingTo: ''.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardOwnerName.
	
	! !

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:20:22'!
ERROR!
!CreditCard class methodsFor: 'error description' stamp: 'LH 11/21/2020 18:20:33'!
invalidCreditCardOwnerName
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error description' stamp: 'LH 11/21/2020 18:20:48' prior: 50875559!
invalidCreditCardOwnerName
	^'Invalid Owner Name'! !

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:20:50'!
FAILURE!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:21:18' prior: 50875543!
test08TheNameOfACreditCardOwnerCanNotBeBlank
	
	self should: [CreditCard         withNumber: '0000000000000000' 
							expirationDate: (Date today - self daysInYear + self daysThisMonth) month 
							belongingTo: ''.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardOwnerName.
	
	! !

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:21:18'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'LH 11/21/2020 18:22:21' prior: 50875498!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [:aDigit | aDigit isDigit]) ifFalse:[^self error: CreditCard invalidCreditCardNumber].
	aCCNumber size = 16 ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName ].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'LH 11/21/2020 18:22:59' prior: 50875589!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [:aDigit | aDigit isDigit]) ifFalse:[^self error: CreditCard invalidCreditCardNumber].
	aCCNumber size = 16 ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:23:17'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 18:23:17'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 18:23:17'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 18:23:17'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 18:23:17'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 18:23:18'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/21/2020 18:23:18'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:23:18'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:23:18'!
PASSED!
!CreditCard methodsFor: 'testing' stamp: 'LH 11/21/2020 18:24:29' prior: 50875121!
isExpired
	"returns if this credit card is expired"
	|expirationDateYear currentMonth currentYear|
	
	expirationDateYear := expirationDate yearNumber.
	currentMonth := Date today monthIndex.
	currentYear := Date today yearNumber.
	
	
	^	(expirationDate monthIndex <= currentMonth 
			and: expirationDateYear = currentYear)
			
		or: expirationDateYear < currentYear.! !
!CreditCard class methodsFor: 'error description' stamp: 'LH 11/21/2020 18:25:03' prior: 50875564!
invalidCreditCardOwnerName
	^'The Name of the Owner can not be blank'! !
!CreditCard class methodsFor: 'instance creation' stamp: 'LH 11/21/2020 18:28:55'!
invalidCreditCardError
	
	^self error: CreditCard invalidCreditCardNumber

! !
!CreditCard class methodsFor: 'instance creation' stamp: 'LH 11/21/2020 18:29:19' prior: 50875607!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [:aDigit | aDigit isDigit]) ifFalse:[^self error: CreditCard invalidCreditCardNumber].
	aCCNumber size = 16 ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!methodRemoval: CreditCard class #invalidCreditCardError stamp: 'LH 11/21/2020 18:29:21'!
invalidCreditCardError
	
	^self error: CreditCard invalidCreditCardNumber

!
!CreditCard class methodsFor: 'instance creation' stamp: 'LH 11/21/2020 18:31:06'!
throwCardNumberErrorIfTheNextBlockIsFalse: aBlock
	
	aBlock value ifFalse:[^self error: CreditCard invalidCreditCardNumber].
	! !
!CreditCard class methodsFor: 'instance creation' stamp: 'LH 11/21/2020 18:32:00' prior: 50875684!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber allSatisfy: [:aDigit | aDigit isDigit]].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	(aCCNumber allSatisfy: [:aDigit | aDigit isDigit]) ifFalse:[^self error: CreditCard invalidCreditCardNumber].
	aCCNumber size = 16 ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 18:32:02'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 18:32:02'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 18:32:02'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 18:32:02'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 18:32:02'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/21/2020 18:32:02'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:32:02'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:32:02'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'LH 11/21/2020 18:32:06' prior: 50875714!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber allSatisfy: [:aDigit | aDigit isDigit]].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 18:32:08'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 18:32:08'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 18:32:08'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 18:32:08'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 18:32:08'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/21/2020 18:32:08'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:32:08'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:32:08'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:32:38' prior: 50875178!
test01ACreditCardCanBeNotExpired
	|aCreditCard|
	
	aCreditCard := CreditCard     withNumber: '0000000000000000' 
							expirationDate: (Date today + self daysThisMonth) month 
							belongingTo: 'Juan Pablo'.
	
	self deny: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:34:04'!
standardCreditCardWithTheExpirationDate: anExpirationDate
	
	 ^CreditCard  withNumber: '0000000000000000' 
				expirationDate: anExpirationDate 
				belongingTo: 'Juan Pablo'.
	


	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:34:39' prior: 50875814!
test01ACreditCardCanBeNotExpired
	|aCreditCard|
	
	aCreditCard := self standardCreditCardWithTheExpirationDate: (Date today + self daysThisMonth) month.
	
	self deny: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 18:34:40'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 18:34:40'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 18:34:40'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 18:34:41'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 18:34:41'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 18:34:41'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/21/2020 18:34:41'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:34:41'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:34:41'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:34:58' prior: 50875295!
test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired
	|aCreditCard|
	
	aCreditCard := self standardCreditCardWithTheExpirationDate: Date today month.
	
	self assert: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 18:35:00'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 18:35:00'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 18:35:00'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 18:35:00'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 18:35:00'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 18:35:00'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/21/2020 18:35:00'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:35:00'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:35:00'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:35:16' prior: 50875306!
test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := self standardCreditCardWithTheExpirationDate: (Date today - self daysThisMonth) month.
	
	self assert: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 18:35:20'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 18:35:20'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 18:35:20'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 18:35:20'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 18:35:20'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 18:35:20'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/21/2020 18:35:20'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:35:20'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:35:20'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:35:35' prior: 50875318!
test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired
	|aCreditCard|
	
	aCreditCard := self standardCreditCardWithTheExpirationDate: (Date today + self daysInYear) month .
	
	self deny: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 18:35:38'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 18:35:38'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 18:35:38'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 18:35:38'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 18:35:38'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 18:35:38'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/21/2020 18:35:38'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:35:38'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:35:38'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:35:55' prior: 50875330!
test05ACreditCardWithExpirationDatingAPastYearIsExpired
	|aCreditCard|
	
	aCreditCard := self standardCreditCardWithTheExpirationDate: (Date today - self daysInYear + self daysThisMonth) month.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:39:36'!
assertInvalidCardNumberErrorWithNumber: aCCNumber 
	
	self should: [CreditCard         withNumber: aCCNumber
							expirationDate: Date today month 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
	
	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:40:19' prior: 50875439!
test06CreditCarNumberCantHaveAnythingBut16Symbols
	
	self assertInvalidCardNumberErrorWithNumber: '00000000000000000'.
	self assertInvalidCardNumberErrorWithNumber: '000000000000000'.
	! !

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/21/2020 18:40:20'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 18:40:20'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 18:40:20'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 18:40:20'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 18:40:20'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 18:40:20'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/21/2020 18:40:20'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:40:20'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:40:20'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:40:48' prior: 50875481!
test07CreditCarNumberCantHaveAnythingButNumbers
	
	self assertInvalidCardNumberErrorWithNumber: '000000000000000O'.
	
	! !

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:40:51'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 18:40:51'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 18:40:51'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 18:40:51'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 18:40:51'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 18:40:51'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/21/2020 18:40:51'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:40:51'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:40:51'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 18:41:47'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 18:41:47'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 18:41:47'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 18:41:47'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 18:41:47'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/21/2020 18:41:47'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:41:47'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:41:47'!
PASSED!
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/21/2020 18:42:58'!
checkOut: aShoppingCart withCreditCard: aCreditCard

	aShoppingCart listCart size = 0 ifTrue:[^self error: ShoppingCashier invalidCartErrorMessage].
	
	aCreditCard isExpired ifTrue:[ ^self error: ShoppingCashier invalidCreditCard].
	
	^ aShoppingCart listCart inject: 0 into: [:theSum :anISBN | theSum + priceCatalogue at: anISBN].! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/21/2020 18:45:09' prior: 50874369!
test01AnEmptyCartCannotBeCheckedOut
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: OrderedCollection new.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'. 
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary new).
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: ShoppingCashier invalidCartErrorMessage.! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/21/2020 18:45:11'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/21/2020 18:45:11'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/21/2020 18:45:11'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/21/2020 18:45:11'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/21/2020 18:45:11'!
PASSED!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/21/2020 18:45:51' prior: 50874385!
test02ACartWith1BookWillCheckOutCorrectly
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)) .
	
	self assert: 100 equals: (aCashier checkOut: aCart withCreditCard: aCreditCard).! !

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/21/2020 18:45:52'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/21/2020 18:45:52'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/21/2020 18:45:52'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/21/2020 18:45:52'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/21/2020 18:45:52'!
PASSED!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/21/2020 18:46:28' prior: 50874402!
test03ACartWithManyBooksWillCheckOutCorrectly
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)) .
	
	self assert: 300 equals: (aCashier checkOut: aCart withCreditCard: aCreditCard).! !

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/21/2020 18:46:29'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/21/2020 18:46:29'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/21/2020 18:46:29'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/21/2020 18:46:29'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/21/2020 18:46:29'!
PASSED!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/21/2020 18:47:02' prior: 50874498!
test04TheCardShouldNotBeExpired
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self invalidDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)) .
	
	self should:[ (aCashier checkOut: aCart withCardNumber: '0000000000000000' ExpirationDate: self invalidDate andCardOwner: 'Juan Pablo')]
		raise: Error
		withMessageText: ShoppingCashier invalidCreditCard.
		! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/21/2020 18:47:36' prior: 50876273!
test04TheCardShouldNotBeExpired
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self invalidDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)) .
	
	self should:[ aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: ShoppingCashier invalidCreditCard.
		! !

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/21/2020 18:47:37'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/21/2020 18:47:38'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/21/2020 18:47:38'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/21/2020 18:47:38'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/21/2020 18:47:38'!
PASSED!

----SNAPSHOT----(21 November 2020 18:49:11) CuisUniversity-4384.image priorSource: 17394782!

----STARTUP---- (22 November 2020 16:22:59) as /Users/ilanolkies/uba/ingsoft1/macos64/CuisUniversity-4384.image!


----End fileIn of /Users/ilanolkies/uba/ingsoft1/ingeSoft-2020-2c/20-TusLibros-2/Ejercicio-20-Tus-Libros-2.st----!
!CreditCard methodsFor: 'testing' stamp: 'IO 11/22/2020 16:26:31' prior: 50877288!
isExpired
	"returns if this credit card is expired"
	|expirationDateYear currentMonth currentYear|
	
	expirationDateYear := expirationDate yearNumber.
	currentMonth := Date today monthIndex.
	currentYear := Date today yearNumber.
	
	
	^(
		expirationDate monthIndex <= currentMonth  and: expirationDateYear = currentYear)	
		or: expirationDateYear < currentYear.! !
!CreditCard methodsFor: 'initialization' stamp: 'IO 11/22/2020 16:26:39' prior: 50877280!
initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	creditCardNumber := aCCNumber.
	expirationDate := anExpirationDate.
	nameOfOwner := aName.
! !
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:28:19' prior: 50877318!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	((aCCNumber allSatisfy: [:aDigit | aDigit isDigit]) or: aCCNumber size = 16)
		self error: CreditCard invalidCreditCardNumber.
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber allSatisfy: [:aDigit | aDigit isDigit]].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:28:21'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:28:21'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:28:21'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:28:21'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:28:21'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:28:21'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:28:21'!
FAILURE!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:28:21'!
FAILURE!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:28:21'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:28:21'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 16:28:21'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:28:21'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 16:28:21'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:28:21'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:28:21'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:28:21'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 16:28:21'!
ERROR!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 16:28:21'!
ERROR!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 16:28:21'!
ERROR!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 16:28:21'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:28:26' prior: 50877514!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber allSatisfy: [:aDigit | aDigit isDigit]].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 16:28:27'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:28:44' prior: 50877604!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit]) or: aCCNumber size = 16)
		self error: CreditCard invalidCreditCardNumber.
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber allSatisfy: [:aDigit | aDigit isDigit]].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:29:08' prior: 50877690!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit]) and: aCCNumber size = 16)
		ifFalse:	 (self error: CreditCard invalidCreditCardNumber).
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber allSatisfy: [:aDigit | aDigit isDigit]].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:29:09'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:29:09'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:29:09'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:29:09'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:29:09'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:29:09'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:29:09'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:29:09'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:29:13' prior: 50877711!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit]) or: aCCNumber size = 16)
		ifFalse:	 (self error: CreditCard invalidCreditCardNumber).
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber allSatisfy: [:aDigit | aDigit isDigit]].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:29:13'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:29:13'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:29:13'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:29:13'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:29:13'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:29:13'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:29:13'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:29:13'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:29:19' prior: 50877763!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit]) or: aCCNumber size = 16)
		ifTrue:	 (self error: CreditCard invalidCreditCardNumber).
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber allSatisfy: [:aDigit | aDigit isDigit]].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:29:20'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:29:20'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:29:20'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:29:20'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:29:20'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:29:20'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:29:20'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:29:20'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:29:40' prior: 50877815!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit])
		ifFalse:	 (self error: CreditCard invalidCreditCardNumber).
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber allSatisfy: [:aDigit | aDigit isDigit]].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:29:41'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:29:41'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:29:41'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:29:41'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:29:41'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:29:41'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:29:41'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:29:41'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:29:46' prior: 50877867!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	


	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber allSatisfy: [:aDigit | aDigit isDigit]].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:29:46'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:29:46'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:29:46'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:29:46'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:29:46'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:29:46'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:29:46'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:29:46'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:29:48'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:29:48'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:29:48'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:29:48'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:29:48'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:29:48'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:29:48'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:29:48'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:30:33' prior: 50877918!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [:aDigit | aDigit isDigit]) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	self throwCardNumberErrorIfTheNextBlockIsFalse: [].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:30:34'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:30:34'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:30:34'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:30:34'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:30:34'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:30:34'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:30:34'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:30:34'!
FAILURE!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:30:43'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:30:43'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:30:43'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:30:43'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:30:43'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:30:43'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:30:43'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:30:43'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:30:51' prior: 50877996!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [:aDigit | aDigit isDigit]) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	self throwCardNumberErrorIfTheNextBlockIsFalse: [].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:31:07' prior: 50878076!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit]) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	self throwCardNumberErrorIfTheNextBlockIsFalse: [].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:31:08' prior: 50878095!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	self throwCardNumberErrorIfTheNextBlockIsFalse: [].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:31:09'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:31:09'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:31:09'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:31:09'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:31:09'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:31:09'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:31:09'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:31:09'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:31:20' prior: 50878114!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) ifFalse: [^self error: CreditCard invalidCreditCardNumber].


	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:31:20'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:31:20'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:31:20'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:31:20'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:31:20'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:31:20'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:31:20'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:31:20'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:31:45' prior: 50878163!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and: (aCCNumber size = 16)) ifFalse: [^self error: CreditCard invalidCreditCardNumber].


	self throwCardNumberErrorIfTheNextBlockIsFalse: [].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:31:46'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:31:46'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:31:46'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:31:46'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:31:46'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:31:46'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:31:46'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:31:46'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:31:50' prior: 50878211!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) or: (aCCNumber size = 16)) ifFalse: [^self error: CreditCard invalidCreditCardNumber].


	self throwCardNumberErrorIfTheNextBlockIsFalse: [].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:31:50'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:31:50'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:31:50'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:31:50'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:31:50'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:31:50'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:31:50'!
FAILURE!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:31:50'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:32:11' prior: 50878259!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	(aCCNumber size = 16) ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:32:12'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:32:12'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:32:12'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:32:12'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:32:12'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:32:12'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:32:12'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:32:12'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:32:47' prior: 50878307!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ] not) ifTrue: [^self error: CreditCard invalidCreditCardNumber].

	(aCCNumber size = 16) ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:32:48'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:32:48'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:32:48'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:32:48'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:32:48'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:32:48'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:32:48'!
FAILURE!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:32:48'!
FAILURE!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:32:55'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:32:55'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:32:55'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:32:55'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:32:55'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:32:55'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:32:55'!
FAILURE!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:32:55'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:33:00' prior: 50878355!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ] negated ) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	(aCCNumber size = 16) ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:33:01'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:33:01'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:33:01'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:33:01'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:33:01'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:33:01'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:33:01'!
FAILURE!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:33:01'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:33:06' prior: 50878434!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ] negated ) ifTrue: [^self error: CreditCard invalidCreditCardNumber].

	(aCCNumber size = 16) ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:33:07'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:33:07'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:33:07'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:33:07'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:33:07'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:33:07'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:33:07'!
FAILURE!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:33:07'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:33:12' prior: 50878482!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	(aCCNumber size = 16) ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:33:13'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:33:13'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:33:13'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:33:13'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:33:13'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:33:13'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:33:13'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:33:13'!
PASSED!

true negated !

true not !
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:33:40' prior: 50878530!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ] not) ifTrue: [^self error: CreditCard invalidCreditCardNumber].

	(aCCNumber size = 16) ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:33:41'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:33:41'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:33:41'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:33:41'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:33:41'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:33:41'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:33:41'!
FAILURE!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:33:41'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:33:49' prior: 50878579!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) not) ifTrue: [^self error: CreditCard invalidCreditCardNumber].

	(aCCNumber size = 16) ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:33:50'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:33:50'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:33:50'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:33:50'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:33:50'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:33:50'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:33:50'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:33:50'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:34:16' prior: 50878627!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) not) ifTrue: [^self error: CreditCard invalidCreditCardNumber].

	((aCCNumber size = 16) not) ifTrue: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:34:16'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:34:16'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:34:16'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:34:16'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:34:16'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:34:16'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:34:16'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:34:16'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:34:52' prior: 50878675!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) not) or:
		((aCCNumber size = 16) not)
	) ifTrue: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:34:53'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:34:53'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:34:53'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:34:53'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:34:53'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:34:53'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:34:53'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:34:53'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:35:03' prior: 50878723!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ])) and:
		((aCCNumber size = 16)) not
	) ifTrue: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:35:04'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:35:04'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:35:04'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:35:04'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:35:04'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:35:04'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:35:04'!
FAILURE!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:35:04'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:35:04'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:35:12' prior: 50878770!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		(((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ])) and:
		((aCCNumber size = 16))) not
	) ifTrue: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:35:13'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:35:13'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:35:13'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:35:13'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:35:13'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:35:13'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:35:13'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:35:13'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:35:19' prior: 50878821!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		(((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ])) and:
		((aCCNumber size = 16)))
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:35:20'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:35:20'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:35:20'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:35:20'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:35:20'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:35:20'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:35:20'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:35:20'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:35:31' prior: 50878868!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		((aCCNumber size = 16)))
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:35:31'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:35:31'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:35:31'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:35:31'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:35:31'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:35:31'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:35:31'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:35:31'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:35:42' prior: 50878915!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		(aCCNumber size = 16))
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:35:43'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:35:43'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:35:43'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:35:43'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:35:43'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:35:43'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:35:43'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:35:43'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:36:06' prior: 50878962!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		aCCNumber size = 16)
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:36:06'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:36:06'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:36:06'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:36:06'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:36:06'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:36:06'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:36:06'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:36:06'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:36:11' prior: 50879009!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		aCCNumber size = 16
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:36:12'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:36:12'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:36:12'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:36:12'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:36:12'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:36:12'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:36:12'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:36:12'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:36:26' prior: 50879056!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		aCCNumber size = 16
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:36:26'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:36:26'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:36:26'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:36:26'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:36:27'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:36:27'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:36:27'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:36:27'!
PASSED!

!methodRemoval: CreditCard class #throwCardNumberErrorIfTheNextBlockIsFalse: stamp: 'IO 11/22/2020 16:36:32'!
throwCardNumberErrorIfTheNextBlockIsFalse: aBlock
	
	aBlock value ifFalse:[^self error: CreditCard invalidCreditCardNumber].
	!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:36:34'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:36:34'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:36:34'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:36:34'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:36:34'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:36:34'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:36:34'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:36:34'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:36:53' prior: 50879103!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		aCCNumber size = 16
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	aName isEmpty ifTrue: [^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:36:54'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:36:54'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:36:54'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:36:54'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:36:54'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:36:54'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:36:54'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:36:54'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:37:02' prior: 50879187!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		aCCNumber size = 16
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	aName notEmpty ifFalse: [^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:37:03'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:37:03'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:37:03'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:37:03'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:37:03'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:37:03'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:37:03'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:37:03'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:37:07' prior: 50879234!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		aCCNumber size = 16
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	aName notEmpty ifFalse: [^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName.
! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:37:07'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:37:07'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:37:07'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:37:07'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:37:07'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:37:07'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:37:07'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:37:07'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:38:41'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:38:41'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:38:41'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:38:41'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:38:41'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:38:41'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:38:41'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:38:41'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'IO 11/22/2020 16:41:27'!
validCreditCardWithTheExpirationDate: anExpirationDate
	
	 ^CreditCard  withNumber: '0000000000000000' 
				expirationDate: anExpirationDate 
				belongingTo: 'Juan Pablo'.
	


	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 16:41:27' prior: 50877026!
test05ACreditCardWithExpirationDatingAPastYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (Date today - self daysInYear + self daysThisMonth) month.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 16:41:27' prior: 50877006!
test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (Date today - self daysThisMonth) month.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 16:41:27' prior: 50877016!
test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (Date today + self daysInYear) month .
	
	self deny: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 16:41:27' prior: 50876988!
test01ACreditCardCanBeNotExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (Date today + self daysThisMonth) month.
	
	self deny: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 16:41:27' prior: 50876997!
test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: Date today month.
	
	self assert: aCreditCard isExpired.

	! !

!methodRemoval: CreditCardTest #standardCreditCardWithTheExpirationDate: stamp: 'IO 11/22/2020 16:41:27'!
standardCreditCardWithTheExpirationDate: anExpirationDate
	
	 ^CreditCard  withNumber: '0000000000000000' 
				expirationDate: anExpirationDate 
				belongingTo: 'Juan Pablo'.
	


	!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:43:04'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:43:04'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:43:04'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:43:04'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:43:04'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:43:04'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:43:04'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:43:04'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:43:48'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'IO 11/22/2020 16:43:53' prior: 50879468!
test01ACreditCardCanBeNotExpired

	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (Date today + self daysThisMonth) month.
	
	self deny: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:43:53'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:43:53'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:43:53'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:43:53'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:43:53'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:43:53'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:43:53'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:43:53'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:43:53'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'IO 11/22/2020 16:47:01'!
newShoppingCartWithAProduct
	
	^ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'IO 11/22/2020 16:47:09' prior: 50877076!
test01NewCartIsEmpty
	|aCart|
	
	aCart := self newShoppingCartWithAProduct.
	
	self assert: 0 equals: aCart listCart size.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:47:11'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:47:11'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:47:11'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 16:47:11'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:47:11'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 16:47:11'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:47:11'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:47:11'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:47:11'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'IO 11/22/2020 16:47:16' prior: 50877084!
test02CanAddABookToACart
	|aCart|
	
	aCart := self newShoppingCartWithAProduct.
	aCart add: '0-7645-2641-3'.
	
	self assert: 1 equals: aCart listCart size.
	self assert: (aCart listCart includes: '0-7645-2641-3').! !

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:47:16'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:47:16'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:47:16'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 16:47:16'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:47:16'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 16:47:16'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:47:16'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:47:16'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:47:17'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'IO 11/22/2020 16:47:43' prior: 50877109!
test04CanMoreThanOneFromTheSameBookToACart
	|aCart|
	
	aCart := self newShoppingCartWithAProduct.
	aCart add: '0-7645-2641-3' withQuantity: 2.
	
	self assert: 2 equals: aCart listCart size.
	
	aCart add: '0-7645-2641-3'.
	
	self assert: 3 equals: aCart listCart size.! !

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:47:44'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:47:44'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:47:44'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 16:47:44'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:47:44'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 16:47:44'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:47:44'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:47:44'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:47:44'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'IO 11/22/2020 16:47:51' prior: 50877131!
test06CanNotAdd0Books
	|aCart|
	
	aCart := self newShoppingCartWithAProduct.
	
	self should: [aCart add: '0-7645-2641-3' withQuantity: 0]
		raise: Error
		withMessageText: ShoppingCart invalidQuantityErrorMessage.
	
! !

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:47:52'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:47:52'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:47:52'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 16:47:52'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:47:52'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 16:47:52'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:47:52'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:47:52'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:47:52'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'IO 11/22/2020 16:47:58' prior: 50877142!
test07CanNotAddMinusBooks
	|aCart|
	
	aCart := self newShoppingCartWithAProduct.
	
	self should: [aCart add: '0-7645-2641-3' withQuantity: -1]
		raise: Error
		withMessageText: ShoppingCart invalidQuantityErrorMessage.
	
! !

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:47:58'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:47:58'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:47:58'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 16:47:58'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:47:58'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 16:47:58'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:47:58'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:47:58'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:47:58'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'IO 11/22/2020 16:48:02' prior: 50877153!
test08CanNotAddNotWholeBooks
	|aCart|
	
	aCart := self newShoppingCartWithAProduct.
	
	self should: [aCart add: '0-7645-2641-3' withQuantity: 1.5]
		raise: Error
		withMessageText: ShoppingCart invalidQuantityErrorMessage.
	
! !

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:48:03'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:48:03'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:48:03'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 16:48:03'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:48:03'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 16:48:03'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:48:03'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:48:03'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:48:03'!
PASSED!
!ShoppingCart methodsFor: 'accessing' stamp: 'IO 11/22/2020 16:48:37' prior: 50877363!
listCart
	^books.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:48:37'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:48:37'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 16:48:37'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:48:37'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 16:48:37'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:48:37'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:48:37'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:48:37'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'IO 11/22/2020 16:50:21'!
test09CannotEditCartList
	| aCart list |
	
	aCart := self newShoppingCartWithAProduct.
	aCart add: '0-7645-2641-3'.
	
	list := aCart listCart.
	
	self assert: 1 equals: aCart listCart size.
	
	self assert: (aCart listCart includes: '0-7645-2641-3').
	self deny: (aCart listCart includes: '0-7645-2641-3').! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'IO 11/22/2020 16:50:53' prior: 50879904!
test09CannotEditCartList
	| aCart list |
	
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3'.

	
	list := aCart listCart.
	list add: '0-7645-2641-4'.

	self assert: 1 equals: aCart listCart size.

	self assert: (aCart listCart includes: '0-7645-2641-3').
	self deny: (aCart listCart includes: '0-7645-2641-4').! !

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'IO 11/22/2020 16:50:54'!
FAILURE!
!ShoppingCart methodsFor: 'accessing' stamp: 'IO 11/22/2020 16:51:08' prior: 50879876!
listCart
	^books copy.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:51:09'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:51:09'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 16:51:09'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:51:09'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 16:51:09'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:51:09'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:51:09'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:51:09'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'IO 11/22/2020 16:51:09'!
PASSED!

!methodRemoval: ShoppingCashier #checkOut:withCardNumber:ExpirationDate:andCardOwner: stamp: 'IO 11/22/2020 16:52:45'!
checkOut: aShoppingCart withCardNumber: aCreditCardNumber ExpirationDate: anExpirationDate andCardOwner: aName 

	aShoppingCart listCart size = 0 ifTrue:[^self error: ShoppingCashier invalidCartErrorMessage].
	
	(anExpirationDate yearNumber < Date today yearNumber)
			ifTrue:[ ^self error: ShoppingCashier invalidCreditCard].  
	(anExpirationDate yearNumber = Date today yearNumber and: anExpirationDate monthIndex <= Date today monthIndex) 
			ifTrue: [^self error: ShoppingCashier invalidCreditCard ].
	
	^ aShoppingCart listCart inject: 0 into: [:theSum :anISBN | theSum + priceCatalogue at: anISBN].!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 16:53:02'!
PASSED!
!ShoppingCashier methodsFor: 'checkOut' stamp: 'IO 11/22/2020 16:54:16' prior: 50877443!
checkOut: aShoppingCart withCreditCard: aCreditCard

	aShoppingCart listCart size = 0 ifTrue: [^self error: ShoppingCashier invalidCartErrorMessage].
	
	aCreditCard isExpired ifTrue:[ ^self error: ShoppingCashier invalidCreditCard].
	
	^ aShoppingCart listCart inject: 0 into: [:theSum :anISBN | theSum + priceCatalogue at: anISBN].! !
!ShoppingCashier methodsFor: 'checkOut' stamp: 'IO 11/22/2020 16:54:22' prior: 50880063!
checkOut: aShoppingCart withCreditCard: aCreditCard

	aShoppingCart listCart size = 0 ifTrue: [^self error: ShoppingCashier invalidCartErrorMessage].
	
	aCreditCard isExpired ifTrue: [^self error: ShoppingCashier invalidCreditCard].
	
	^ aShoppingCart listCart inject: 0 into: [:theSum :anISBN | theSum + priceCatalogue at: anISBN].! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 16:54:23'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 16:54:23'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 16:54:23'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 16:54:23'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 17:11:21'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 17:11:21'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 17:11:21'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 17:11:21'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 17:11:21'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 17:11:21'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 17:11:21'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 17:11:21'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'IO 11/22/2020 17:11:21'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'IO 11/22/2020 17:17:47' prior: 50877051!
test08TheNameOfACreditCardOwnerCanNotBeBlank
	
	self should: [CreditCard withNumber: '0000000000000000'
		expirationDate: (Date today - self daysInYear + self daysThisMonth) month
		belongingTo: ''.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardOwnerName.
	
	! !

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 17:17:57'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 17:17:57'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 17:17:57'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 17:17:57'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 17:17:57'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 17:17:57'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 17:17:57'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 17:17:58'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 17:17:58'!
PASSED!

'' size!

'Juan Pablo de la Cierra Gigante' size!
!CreditCardTest methodsFor: 'tests' stamp: 'IO 11/22/2020 17:19:56'!
test08TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars
	
	self should: [CreditCard withNumber: '0000000000000000'
		expirationDate: (Date today - self daysInYear + self daysThisMonth) month
		belongingTo: 'Juan Pablo de la Cierra Gigante'.] "31 chars"
		raise: Error
		withMessageText: CreditCard invalidCreditCardOwnerName.
	
	! !

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:19:57'!
FAILURE!
!CreditCardTest methodsFor: 'tests' stamp: 'IO 11/22/2020 17:20:02'!
test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars
	
	self should: [CreditCard withNumber: '0000000000000000'
		expirationDate: (Date today - self daysInYear + self daysThisMonth) month
		belongingTo: 'Juan Pablo de la Cierra Gigante'.] "31 chars"
		raise: Error
		withMessageText: CreditCard invalidCreditCardOwnerName.
	
	! !

!methodRemoval: CreditCardTest #test08TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:20:02'!
test08TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars
	
	self should: [CreditCard withNumber: '0000000000000000'
		expirationDate: (Date today - self daysInYear + self daysThisMonth) month
		belongingTo: 'Juan Pablo de la Cierra Gigante'.] "31 chars"
		raise: Error
		withMessageText: CreditCard invalidCreditCardOwnerName.
	
	!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:20:03'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 17:20:53' prior: 50879281!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		aCCNumber size = 16
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	(aName notEmpty or: (aName size > 30)) ifFalse: [^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName.
! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 17:20:54'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 17:20:54'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 17:20:54'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 17:20:54'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 17:20:54'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 17:20:54'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 17:20:54'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 17:20:54'!
PASSED!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:20:54'!
FAILURE!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:20:54'!
FAILURE!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 17:21:00'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 17:21:00'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 17:21:00'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 17:21:00'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 17:21:00'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 17:21:00'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 17:21:01'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 17:21:01'!
PASSED!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:21:01'!
FAILURE!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:21:01'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 17:21:50' prior: 50880229!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		aCCNumber size = 16
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	(aName notEmpty or: (aName size <= 30)) ifFalse: [^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName.
! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 17:21:51'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 17:21:51'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 17:21:51'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 17:21:51'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 17:21:51'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 17:21:51'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 17:21:51'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 17:21:51'!
FAILURE!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:21:51'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 17:21:54' prior: 50880323!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		aCCNumber size = 16
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	(aName notEmpty or: (aName size < 30)) ifFalse: [^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName.
! !

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:21:56'!
FAILURE!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:21:59'!
FAILURE!

aName size < 30!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 17:22:36' prior: 50880374!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		aCCNumber size = 16
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	(aName notEmpty and: (aName size < 30)) ifFalse: [^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName.
! !

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:22:38'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 17:22:38'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 17:22:38'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 17:22:38'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 17:22:38'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 17:22:38'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 17:22:38'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 17:22:38'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 17:22:38'!
PASSED!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:22:38'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 17:22:41'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 17:22:41'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 17:22:41'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 17:22:41'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 17:22:41'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 17:22:41'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 17:22:41'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 17:22:41'!
PASSED!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:22:41'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:22:43'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 17:22:43'!
PASSED!
!ShoppingCashier class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 17:23:48'!
withPriceCatalogue: aPriceCatalogue andProcessor: aMerchantProcessor

	^self new initializeWithPriceCatalogue: aPriceCatalogue andProcessor: aMerchantProcessor.! !
!ShoppingCashier class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 17:23:56' prior: 50877480!
withPriceCatalogue: aPriceCatalogue 

	^self new initializeWithPriceCatalogue: aPriceCatalogue ! !

!methodRemoval: ShoppingCashier class #withPriceCatalogue:andProcessor: stamp: 'IO 11/22/2020 17:23:59'!
withPriceCatalogue: aPriceCatalogue andProcessor: aMerchantProcessor

	^self new initializeWithPriceCatalogue: aPriceCatalogue andProcessor: aMerchantProcessor.!

!classDefinition: #DummyMerchantProcessor category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/22/2020 17:25:40'!
Object subclass: #DummyMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCashierTest methodsFor: 'tests' stamp: 'IO 11/22/2020 17:25:35'!
test05ACartShouldFailIfMerchantProcessorFails

	|aCashier aCart aCreditCard aMerchantProcessor|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aMerchantProcessor := DummyMerchantProcessor newWithFailure.

	aCashier := ShoppingCashier
		withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100))
		andMerchantProcessor: aMerchantProcessor.
	
	self assert: 300 equals: (aCashier checkOut: aCart withCreditCard: aCreditCard).! !

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:25:45'!
ERROR!
!DummyMerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 17:25:54'!
newWithFailure
	self shouldBeImplemented.! !
!DummyMerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 17:26:11' prior: 50880627!
newWithFailure
	self basicNew initializeWithFailure.
! !

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:26:14'!
ERROR!
!DummyMerchantProcessor methodsFor: 'initialization' stamp: 'IO 11/22/2020 17:26:21'!
initializeWithFailure
	self shouldBeImplemented.! !

!classDefinition: #DummyMerchantProcessor category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/22/2020 17:26:28'!
Object subclass: #DummyMerchantProcessor
	instanceVariableNames: 'failure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!DummyMerchantProcessor methodsFor: 'initialization' stamp: 'IO 11/22/2020 17:26:26' prior: 50880641!
initializeWithFailure
	failure := true.! !

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:26:31'!
ERROR!
!ShoppingCashier class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 17:26:38'!
withPriceCatalogue: aDictionary andMerchantProcessor: aClass 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithPriceCatalogue: aDictionary andMerchantProcessor: aClass ! !
!ShoppingCashier class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 17:26:48' prior: 50880663!
withPriceCatalogue: aDictionary andMerchantProcessor: aClass 

	^self new initializeWithPriceCatalogue: aDictionary andMerchantProcessor: aClass ! !

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:27:01'!
ERROR!

!classDefinition: #ShoppingCashier category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/22/2020 17:28:20'!
Object subclass: #ShoppingCashier
	instanceVariableNames: 'priceCatalogue dictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #ShoppingCashier category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/22/2020 17:28:20'!
Object subclass: #ShoppingCashier
	instanceVariableNames: 'priceCatalogue dictionary class'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCashier methodsFor: 'initialization' stamp: 'IO 11/22/2020 17:28:20'!
initializeWithPriceCatalogue: aDictionary andMerchantProcessor: aClass 
	self shouldBeImplemented.
	dictionary := aDictionary.
	class := aClass.! !

!classDefinition: #ShoppingCashier category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/22/2020 17:28:45'!
Object subclass: #ShoppingCashier
	instanceVariableNames: 'priceCatalogue dictionary class merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCashier methodsFor: 'initialization' stamp: 'IO 11/22/2020 17:28:44' prior: 50880703!
initializeWithPriceCatalogue: aDictionary andMerchantProcessor: aMerchantProcessor 

	dictionary := aDictionary.
	merchantProcessor := aMerchantProcessor.! !

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:28:48'!
ERROR!

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:29:01'!
ERROR!

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:29:24'!
ERROR!
!ShoppingCashier methodsFor: 'initialization' stamp: 'IO 11/22/2020 17:30:08' prior: 50880720!
initializeWithPriceCatalogue: aPriceCatalogue andMerchantProcessor: aMerchantProcessor 

	priceCatalogue := aPriceCatalogue.
	merchantProcessor := aMerchantProcessor.! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 17:30:08'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:30:08'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:30:08'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 17:30:08'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:30:08'!
PASSED!

Object subclass: #ShoppingCashier
	instanceVariableNames: 'priceCatalogue merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #ShoppingCashier category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/22/2020 17:30:26'!
Object subclass: #ShoppingCashier
	instanceVariableNames: 'priceCatalogue merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 17:31:03'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 17:31:03'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 17:31:03'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 17:31:03'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 17:31:03'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 17:31:03'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 17:31:03'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 17:31:03'!
PASSED!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:31:03'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 17:31:04'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 17:31:04'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 17:31:04'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 17:31:04'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 17:31:04'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 17:31:04'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 17:31:04'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 17:31:04'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'IO 11/22/2020 17:31:04'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 17:31:04'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:31:04'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:31:04'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 17:31:04'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:31:04'!
PASSED!
!ShoppingCashierTest methodsFor: 'tests' stamp: 'IO 11/22/2020 17:31:50' prior: 50880598!
test05ACartShouldFailIfMerchantProcessorFails

	|aCashier aCart aCreditCard aMerchantProcessor|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aMerchantProcessor := DummyMerchantProcessor newWithFailure.

	aCashier := ShoppingCashier
		withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100))
		andMerchantProcessor: aMerchantProcessor.
	
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: DummyMerchantProcessor dummyError.
! !

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:31:54'!
ERROR!
!DummyMerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 17:32:15'!
dummyError
	self shouldBeImplemented.! !
!DummyMerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 17:33:01'!
dummyErrorMessage
	^'Merchant Processor error message'.
! !

!methodRemoval: DummyMerchantProcessor class #dummyError stamp: 'IO 11/22/2020 17:33:04'!
dummyError
	self shouldBeImplemented.!
!ShoppingCashierTest methodsFor: 'tests' stamp: 'IO 11/22/2020 17:33:21' prior: 50880941!
test05ACartShouldFailIfMerchantProcessorFails

	|aCashier aCart aCreditCard aMerchantProcessor|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aMerchantProcessor := DummyMerchantProcessor newWithFailure.

	aCashier := ShoppingCashier
		withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100))
		andMerchantProcessor: aMerchantProcessor.
	
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: DummyMerchantProcessor dummyErrorMessage.
! !

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:33:22'!
FAILURE!

Object subclass: #MerchantProcessor
	instanceVariableNames: 'failure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #MerchantProcessor category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/22/2020 17:34:04'!
Object subclass: #MerchantProcessor
	instanceVariableNames: 'failure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

MerchantProcessor subclass: #DummyMerchantProcessor
	instanceVariableNames: 'failure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #MerchantProcessor category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/22/2020 17:34:25'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

MerchantProcessor subclass: #DummyMerchantProcessor
	instanceVariableNames: 'failure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #DummyMerchantProcessor category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/22/2020 17:34:30'!
MerchantProcessor subclass: #DummyMerchantProcessor
	instanceVariableNames: 'failure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

MerchantProcessor subclass: #NullMerchantProcessor
	instanceVariableNames: 'failure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #NullMerchantProcessor category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/22/2020 17:34:35'!
MerchantProcessor subclass: #NullMerchantProcessor
	instanceVariableNames: 'failure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!MerchantProcessor methodsFor: 'no messages' stamp: 'IO 11/22/2020 17:35:10'!
checkoutWith: aCreditCard for: anAmount
	^self subclassResponsibility.
! !
!DummyMerchantProcessor methodsFor: 'nil' stamp: 'IO 11/22/2020 17:35:41' overrides: 50881076!
checkoutWith: aCreditCard for: anAmount
	^self error: DummyMerchantProcessor dummyErrorMessage.
! !
!NullMerchantProcessor methodsFor: 'no messages' stamp: 'IO 11/22/2020 17:35:54' overrides: 50881076!
checkoutWith: aCreditCard for: anAmount

! !
!ShoppingCashier methodsFor: 'checkOut' stamp: 'IO 11/22/2020 17:36:08' prior: 50880077!
checkOut: aShoppingCart withCreditCard: aCreditCard

	aShoppingCart listCart size = 0 ifTrue: [^self error: ShoppingCashier invalidCartErrorMessage].
	aCreditCard isExpired ifTrue: [^self error: ShoppingCashier invalidCreditCard].
	
	^ aShoppingCart listCart inject: 0 into: [:theSum :anISBN | theSum + priceCatalogue at: anISBN].! !
!NullMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 17:36:29'!
debitWith: aCreditCard for: anAmount

! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 17:36:29'!
debitWith: aCreditCard for: anAmount
	^self subclassResponsibility.
! !
!DummyMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 17:36:29' overrides: 50881112!
debitWith: aCreditCard for: anAmount
	^self error: DummyMerchantProcessor dummyErrorMessage.
! !

!methodRemoval: NullMerchantProcessor #checkoutWith:for: stamp: 'IO 11/22/2020 17:36:29'!
checkoutWith: aCreditCard for: anAmount

!

!methodRemoval: MerchantProcessor #checkoutWith:for: stamp: 'IO 11/22/2020 17:36:29'!
checkoutWith: aCreditCard for: anAmount
	^self subclassResponsibility.
!

!methodRemoval: DummyMerchantProcessor #checkoutWith:for: stamp: 'IO 11/22/2020 17:36:29'!
checkoutWith: aCreditCard for: anAmount
	^self error: DummyMerchantProcessor dummyErrorMessage.
!
!ShoppingCashier methodsFor: 'initialization' stamp: 'IO 11/22/2020 17:36:51' prior: 50877456!
initializeWithPriceCatalogue: aPriceCatalogue 

	priceCatalogue := aPriceCatalogue.
	merchantProcessor := NullMerchantProcessor new.! !
!ShoppingCashier methodsFor: 'checkOut' stamp: 'IO 11/22/2020 17:37:31' prior: 50881094!
checkOut: aShoppingCart withCreditCard: aCreditCard

	| total |
	aShoppingCart listCart size = 0 ifTrue: [^self error: ShoppingCashier invalidCartErrorMessage].
	aCreditCard isExpired ifTrue: [^self error: ShoppingCashier invalidCreditCard].
	
	total := aShoppingCart listCart inject: 0 into: [:theSum :anISBN | theSum + priceCatalogue at: anISBN].
	merchantProcessor debitWith: aCreditCard for: total.
	^total.! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 17:37:31'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:37:31'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:37:31'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 17:37:31'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:37:31'!
FAILURE!

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:37:31'!
FAILURE!
!DummyMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 17:38:23' prior: 50881118 overrides: 50881112!
debitWith: aCreditCard for: anAmount
	^self error: DummyMerchantProcessor dummyErrorMessage.
! !

!classRenamed: #DummyMerchantProcessor as: #ErroredMerchantProcessor stamp: 'IO 11/22/2020 17:38:46'!
Smalltalk renameClassNamed: #DummyMerchantProcessor as: #ErroredMerchantProcessor!
!ErroredMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 17:38:46' prior: 50881187 overrides: 50881112!
debitWith: aCreditCard for: anAmount
	^self error: ErroredMerchantProcessor dummyErrorMessage.
! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 17:38:46' prior: 50880986!
test05ACartShouldFailIfMerchantProcessorFails

	|aCashier aCart aCreditCard aMerchantProcessor|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aMerchantProcessor := ErroredMerchantProcessor newWithFailure.

	aCashier := ShoppingCashier
		withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100))
		andMerchantProcessor: aMerchantProcessor.
	
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: ErroredMerchantProcessor dummyErrorMessage.
! !

!methodRemoval: ErroredMerchantProcessor #initializeWithFailure stamp: 'IO 11/22/2020 17:39:03'!
initializeWithFailure
	failure := true.!

!methodRemoval: ErroredMerchantProcessor class #newWithFailure stamp: 'IO 11/22/2020 17:39:09'!
newWithFailure
	self basicNew initializeWithFailure.
!
!ShoppingCashierTest methodsFor: 'tests' stamp: 'IO 11/22/2020 17:39:18' prior: 50881207!
test05ACartShouldFailIfMerchantProcessorFails

	|aCashier aCart aCreditCard aMerchantProcessor|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aMerchantProcessor := ErroredMerchantProcessor new.

	aCashier := ShoppingCashier
		withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100))
		andMerchantProcessor: aMerchantProcessor.
	
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: ErroredMerchantProcessor dummyErrorMessage.
! !

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:39:19'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 17:39:19'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:39:19'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:39:19'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 17:39:19'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:39:19'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:39:21'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 17:39:21'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:39:21'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:39:21'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 17:39:21'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:39:21'!
PASSED!
!ShoppingCashier methodsFor: 'initialization' stamp: 'IO 11/22/2020 17:41:36' prior: 50881140!
initializeWithPriceCatalogue: aPriceCatalogue 

	self initializeWithPriceCatalogue: aPriceCatalogue andMerchantProcessor: NullMerchantProcessor new.
! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 17:41:37'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:41:37'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:41:37'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 17:41:37'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:41:37'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:41:39'!
PASSED!
!CreditCard methodsFor: 'testing' stamp: 'IO 11/22/2020 17:51:37' prior: 50877490!
isExpired
	"returns if this credit card is expired"
	|expirationDateYear currentMonth currentYear|
	
	expirationDateYear := expirationDate yearNumber.
	currentMonth := Date today monthIndex.
	currentYear := Date today yearNumber.
	
	
	^(
		expirationDate monthIndex <= currentMonth  and: expirationDateYear = currentYear
	) or: expirationDateYear < currentYear.! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 17:51:38'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 17:51:38'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 17:51:38'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 17:51:38'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 17:51:38'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 17:51:38'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 17:51:38'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 17:51:38'!
PASSED!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:51:38'!
PASSED!
!ShoppingCashierTest methodsFor: 'tests' stamp: 'IO 11/22/2020 17:56:34'!
test05ACartShouldNotCheckoutIfMerchantProcessorFails

	|aCashier aCart aCreditCard aMerchantProcessor|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aMerchantProcessor := ErroredMerchantProcessor new.

	aCashier := ShoppingCashier
		withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100))
		andMerchantProcessor: aMerchantProcessor.
	
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: ErroredMerchantProcessor dummyErrorMessage.
! !

!methodRemoval: ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:56:34'!
test05ACartShouldFailIfMerchantProcessorFails

	|aCashier aCart aCreditCard aMerchantProcessor|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aMerchantProcessor := ErroredMerchantProcessor new.

	aCashier := ShoppingCashier
		withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100))
		andMerchantProcessor: aMerchantProcessor.
	
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: ErroredMerchantProcessor dummyErrorMessage.
!
!ShoppingCashierTest methodsFor: 'tests' stamp: 'IO 11/22/2020 17:56:41' prior: 50881470!
test05ACartShouldNotCheckoutIfMerchantProcessorFails

	|aCashier aCart aCreditCard aMerchantProcessor|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aMerchantProcessor := ErroredMerchantProcessor new.

	aCashier := ShoppingCashier
		withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100))
		andMerchantProcessor: aMerchantProcessor.
	
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: ErroredMerchantProcessor dummyErrorMessage.
		
	
! !

!methodRemoval: ShoppingCartTest #test09CannotEditCartList stamp: 'IO 11/22/2020 18:10:27'!
test09CannotEditCartList
	| aCart list |
	
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3'.

	
	list := aCart listCart.
	list add: '0-7645-2641-4'.

	self assert: 1 equals: aCart listCart size.

	self assert: (aCart listCart includes: '0-7645-2641-3').
	self deny: (aCart listCart includes: '0-7645-2641-4').!
!ShoppingCartTest methodsFor: 'tests' stamp: 'IO 11/22/2020 18:11:44'!
test09CannotEditCartList
	| aCart list |
	
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3'.

	
	list := aCart listCart.
	list add: '0-7645-2641-4'.

	self assert: 1 equals: aCart listCart size.

	self assert: (aCart listCart includes: '0-7645-2641-3').
	self deny: (aCart listCart includes: '0-7645-2641-4').! !

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'IO 11/22/2020 18:11:45'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 18:11:45'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 18:11:45'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 18:11:45'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 18:11:45'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 18:11:45'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 18:11:45'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 18:11:45'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 18:11:45'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'IO 11/22/2020 18:11:45'!
PASSED!

!methodRemoval: CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 18:11:50'!
test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars
	
	self should: [CreditCard withNumber: '0000000000000000'
		expirationDate: (Date today - self daysInYear + self daysThisMonth) month
		belongingTo: 'Juan Pablo de la Cierra Gigante'.] "31 chars"
		raise: Error
		withMessageText: CreditCard invalidCreditCardOwnerName.
	
	!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 18:12:01' prior: 50880400!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		aCCNumber size = 16
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	(aName notEmpty) ifFalse: [^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName.
! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 18:12:02'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 18:12:02'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 18:12:02'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 18:12:02'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 18:12:02'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 18:12:02'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 18:12:02'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 18:12:02'!
PASSED!

----SNAPSHOT----(22 November 2020 18:13:19) CuisUniversity-4384.image priorSource: 17449337!

----STARTUP---- (23 November 2020 17:08:22) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\CuisUniversity-4384.image!


!classRemoval: #ShoppingCashier stamp: 'LH 11/23/2020 17:36:54'!
Object subclass: #ShoppingCashier
	instanceVariableNames: 'priceCatalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #ShoppingCart stamp: 'LH 11/23/2020 17:36:54'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books catalgue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #CreditCard stamp: 'LH 11/23/2020 17:36:55'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber expirationDate nameOfOwner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #ShoppingCashierTest stamp: 'LH 11/23/2020 17:36:55'!
TestCase subclass: #ShoppingCashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #ShoppingCartTest stamp: 'LH 11/23/2020 17:36:55'!
TestCase subclass: #ShoppingCartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #CreditCardTest stamp: 'LH 11/23/2020 17:36:56'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

----End fileIn of C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\Ejercicio-20-Tus-Libros-2.st----!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/23/2020 17:39:53' prior: 50876920!
add: anISBN withQuantity: aQuantity 
	
	(aQuantity isInteger and: aQuantity > 0) ifFalse:[^self error: ShoppingCart invalidQuantityErrorMessage ].
	(catalgue includes: anISBN) ifFalse:[^self error: ShoppingCart invalidISBNErrorMessage].
	
	books add: anISBN withOccurrences: aQuantity.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/23/2020 17:39:54'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/23/2020 17:39:54'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/23/2020 17:39:54'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/23/2020 17:39:54'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/23/2020 17:39:54'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/23/2020 17:39:54'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/23/2020 17:39:54'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/23/2020 17:39:54'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'LH 11/23/2020 17:39:54'!
PASSED!
!NullMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'LH 11/23/2020 17:40:54' prior: 50876888 overrides: 50876831!
debitWith: aCreditCard for: anAmount

	^anAmount
! !
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/23/2020 17:41:59' prior: 50876969!
checkOut: aShoppingCart withCreditCard: aCreditCard

	| total |
	aShoppingCart listCart size = 0 ifTrue: [^self error: ShoppingCashier invalidCartErrorMessage].
	aCreditCard isExpired ifTrue: [^self error: ShoppingCashier invalidCreditCard].
	
	total := aShoppingCart listCart inject: 0 into: [:theSum :anISBN | theSum + priceCatalogue at: anISBN].
	merchantProcessor debitWith: aCreditCard for: total.
	^total.! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/23/2020 17:42:00'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/23/2020 17:42:00'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/23/2020 17:42:00'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/23/2020 17:42:00'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldNotCheckoutIfMerchantProcessorFails stamp: 'LH 11/23/2020 17:42:00'!
PASSED!
!ShoppingCartTest methodsFor: 'util' stamp: 'LH 11/23/2020 17:46:18' prior: 50876611!
newShoppingCartWithAProduct
	
	^ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)).
! !
!ShoppingCartTest methodsFor: 'util' stamp: 'LH 11/23/2020 17:47:05' prior: 50877118!
newShoppingCartWithAProduct
	
	^ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)).
! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/23/2020 17:47:29' prior: 50876530!
test03CanAddManyBooksToACart
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)).
	aCart add: '0-7645-2641-3'.
	aCart add: '0-7645-2641-4'.
	
	self assert: 2 equals: aCart listCart size.
	self assert: (aCart listCart includes: '0-7645-2641-3').
	self assert: (aCart listCart includes: '0-7645-2641-4').! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/23/2020 17:47:45' prior: 50876595!
test09CannotEditCartList
	| aCart list |
	
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)).
	aCart add: '0-7645-2641-3'.

	
	list := aCart listCart.
	list add: '0-7645-2641-4'.

	self assert: 1 equals: aCart listCart size.

	self assert: (aCart listCart includes: '0-7645-2641-3').
	self deny: (aCart listCart includes: '0-7645-2641-4').! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/23/2020 17:48:38' prior: 50876913!
add: anISBN 
	
	(catalgue includesKey: anISBN) ifFalse:[^self error: ShoppingCart invalidISBNErrorMessage].
	
	books add: anISBN.! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/23/2020 17:48:44' prior: 50877037!
add: anISBN withQuantity: aQuantity 
	
	(aQuantity isInteger and: aQuantity > 0) ifFalse:[^self error: ShoppingCart invalidQuantityErrorMessage ].
	(catalgue includesKey: anISBN) ifFalse:[^self error: ShoppingCart invalidISBNErrorMessage].
	
	books add: anISBN withOccurrences: aQuantity.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/23/2020 17:48:47'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/23/2020 17:48:47'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/23/2020 17:48:47'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/23/2020 17:48:47'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/23/2020 17:48:47'!
FAILURE!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/23/2020 17:48:47'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/23/2020 17:48:47'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/23/2020 17:48:47'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'LH 11/23/2020 17:48:47'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/23/2020 17:48:47'!
FAILURE!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/23/2020 17:49:09'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/23/2020 17:49:09'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/23/2020 17:49:09'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/23/2020 17:49:09'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/23/2020 17:49:09'!
FAILURE!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/23/2020 17:49:09'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/23/2020 17:49:10'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/23/2020 17:49:10'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'LH 11/23/2020 17:49:10'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/23/2020 17:49:10'!
FAILURE!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/23/2020 17:49:29' prior: 50876555!
test05CanNotAddABookWithInvalidISBN
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (Dictionary new).
	
	self should: [aCart add: '0-7645-2641-3']
		raise: Error
		withMessageText: ShoppingCart invalidISBNErrorMessage.
	
! !

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/23/2020 17:49:31'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/23/2020 17:49:31'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/23/2020 17:49:31'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/23/2020 17:49:31'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/23/2020 17:49:31'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/23/2020 17:49:31'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/23/2020 17:49:31'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/23/2020 17:49:31'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/23/2020 17:49:31'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'LH 11/23/2020 17:49:31'!
PASSED!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/23/2020 17:50:25'!
validateISBNInCatalogue: anISBN

	(catalgue includesKey: anISBN) ifFalse:[^self error: ShoppingCart invalidISBNErrorMessage].
	! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/23/2020 17:50:59' prior: 50877170!
add: anISBN withQuantity: aQuantity 
	
	(aQuantity isInteger and: aQuantity > 0) ifFalse:[^self error: ShoppingCart invalidQuantityErrorMessage ].
	self validateISBNInCatalogue: anISBN.
	books add: anISBN withOccurrences: aQuantity.! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/23/2020 17:51:01' prior: 50877293!
add: anISBN withQuantity: aQuantity 
	
	(aQuantity isInteger and: aQuantity > 0) ifFalse:[^self error: ShoppingCart invalidQuantityErrorMessage ].
	self validateISBNInCatalogue: anISBN.
	
	books add: anISBN withOccurrences: aQuantity.! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/23/2020 17:51:34' prior: 50877163!
add: anISBN 

	^self add: anISBN withQuantity:1.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/23/2020 17:51:36'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/23/2020 17:51:36'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/23/2020 17:51:36'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/23/2020 17:51:36'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/23/2020 17:51:36'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/23/2020 17:51:36'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/23/2020 17:51:36'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/23/2020 17:51:36'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'LH 11/23/2020 17:51:36'!
PASSED!
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/23/2020 17:52:25' prior: 50876630!
test01AnEmptyCartCannotBeCheckedOut
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: Dictionary new.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'. 
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary new).
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: ShoppingCashier invalidCartErrorMessage.! !
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/23/2020 17:52:39' prior: 50876648!
test02ACartWith1BookWillCheckOutCorrectly
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)).
	aCart add: '0-7645-2641-3'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)) .
	
	self assert: 100 equals: (aCashier checkOut: aCart withCreditCard: aCreditCard).! !
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/23/2020 17:52:49' prior: 50876666!
test03ACartWithManyBooksWillCheckOutCorrectly
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)).
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)) .
	
	self assert: 300 equals: (aCashier checkOut: aCart withCreditCard: aCreditCard).! !
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/23/2020 17:52:54' prior: 50876687!
test04TheCardShouldNotBeExpired
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)).
	aCart add: '0-7645-2641-3'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self invalidDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)) .
	
	self should:[ aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: ShoppingCashier invalidCreditCard.
		! !
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/23/2020 17:53:12' prior: 50876707!
test05ACartShouldNotCheckoutIfMerchantProcessorFails

	|aCashier aCart aCreditCard aMerchantProcessor|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)).
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aMerchantProcessor := ErroredMerchantProcessor new.

	aCashier := ShoppingCashier
		withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100))
		andMerchantProcessor: aMerchantProcessor.
	
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: ErroredMerchantProcessor dummyErrorMessage.
		
	
! !

!testRun: #ShoppingCashierTest #test05ACartShouldNotCheckoutIfMerchantProcessorFails stamp: 'LH 11/23/2020 17:53:17'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/23/2020 17:53:17'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/23/2020 17:53:17'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/23/2020 17:53:18'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/23/2020 17:53:18'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldNotCheckoutIfMerchantProcessorFails stamp: 'LH 11/23/2020 17:53:18'!
PASSED!
!CreditCardTest methodsFor: 'util' stamp: 'LH 11/23/2020 18:06:30' prior: 50876488!
daysThisMonth

	^GregorianMonthOfYear numberOfDays days.
	! !
!CreditCardTest methodsFor: 'util' stamp: 'LH 11/23/2020 18:07:36' prior: 50876473!
assertInvalidCardNumberErrorWithNumber: aCCNumber 
	
	self should: [CreditCard         withNumber: aCCNumber
							expirationDate: (GregorianMonth current next: self daysThisMonth) 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
	
	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:08:10' prior: 50876397!
test01ACreditCardCanBeNotExpired

	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (GregorianDayOfMonth current next: self daysThisMonth).
	
	self deny: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:08:45' prior: 50876406!
test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: GregorianDayOfMonth current.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:10:27' prior: 50876415!
test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (GregorianDayOfMonth current next:  self daysThisMonth negated) month.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:10:51' prior: 50876425!
test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (GregorianDayOfMonth current next: self daysInYear) .
	
	self deny: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:12:37' prior: 50876435!
test05ACreditCardWithExpirationDatingAPastYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (GregorianDayOfMonth current next: self daysThisMonth - self daysInYear) .
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:13:00' prior: 50876461!
test08TheNameOfACreditCardOwnerCanNotBeBlank
	
	self should: [CreditCard withNumber: '0000000000000000'
		expirationDate: (GregorianDayOfMonth current next: self daysThisMonth)
		belongingTo: ''.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardOwnerName.
	
	! !
!CreditCard methodsFor: 'testing' stamp: 'LH 11/23/2020 18:14:30' prior: 50876768!
isExpired
	"returns if this credit card is expired"
	"|expirationDateYear currentMonth currentYear|"
	
	
	^expirationDate < GregorianMonthOfYear current or: expirationDate = GregorianMonthOfYear current.
	
	"expirationDateYear := expirationDate yearNumber.
	currentMonth := Date today monthIndex.
	currentYear := Date today yearNumber.
	
	
	^(
		expirationDate monthIndex <= currentMonth  and: expirationDateYear = currentYear
	) or: expirationDateYear < currentYear."! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 18:14:33'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/23/2020 18:14:33'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/23/2020 18:14:33'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/23/2020 18:14:33'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/23/2020 18:14:33'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/23/2020 18:14:33'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/23/2020 18:14:33'!
FAILURE!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/23/2020 18:14:33'!
FAILURE!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 18:14:41'!
ERROR!
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:15:03' prior: 50877496!
test01ACreditCardCanBeNotExpired

	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (GregorianMonthOfYear current next: self daysThisMonth).
	
	self deny: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 18:15:04'!
ERROR!
!CreditCardTest methodsFor: 'util' stamp: 'LH 11/23/2020 18:15:21' prior: 50877478!
daysThisMonth

	^GregorianMonthOfYear current numberOfDays days.
	! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 18:15:22'!
ERROR!
!CreditCardTest methodsFor: 'util' stamp: 'LH 11/23/2020 18:15:29' prior: 50877626!
daysThisMonth

	^GregorianMonthOfYear current numberOfDays.
	! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 18:15:32'!
ERROR!
!CreditCardTest methodsFor: 'util' stamp: 'LH 11/23/2020 18:19:40' prior: 50877635!
daysThisMonth

	^1 month.
	! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 18:19:41'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/23/2020 18:19:41'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/23/2020 18:19:41'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/23/2020 18:19:41'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/23/2020 18:19:41'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/23/2020 18:19:41'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/23/2020 18:19:41'!
FAILURE!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/23/2020 18:19:41'!
FAILURE!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 18:19:44'!
ERROR!
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:21:08' prior: 50877613!
test01ACreditCardCanBeNotExpired

	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (GregorianMonthOfYear current next).
	
	self deny: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 18:21:10'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 18:21:10'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/23/2020 18:21:10'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/23/2020 18:21:10'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/23/2020 18:21:10'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/23/2020 18:21:10'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/23/2020 18:21:10'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/23/2020 18:21:10'!
FAILURE!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/23/2020 18:21:10'!
FAILURE!
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:21:32' prior: 50877516!
test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (GregorianDayOfMonth current previous) month.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:21:38' prior: 50877724!
test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (GregorianDayOfMonth current previous).
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:21:50' prior: 50877735!
test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: GregorianDayOfMonth current previous.
	
	self assert: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/23/2020 18:21:51'!
ERROR!
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:22:06' prior: 50877506!
test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: GregorianMonthOfYear current.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:22:09' prior: 50877745!
test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: GregorianMonthOfYear current previous.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:22:13' prior: 50877527!
test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (GregorianMonthOfYear current next: self daysInYear) .
	
	self deny: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:24:05' prior: 50877538!
test05ACreditCardWithExpirationDatingAPastYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (GregorianMonthOfYear current next: self daysThisMonth - self daysInYear) .
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:24:32' prior: 50877549!
test08TheNameOfACreditCardOwnerCanNotBeBlank
	
	self should: [CreditCard withNumber: '0000000000000000'
		expirationDate: (GregorianMonthOfYear current next: self daysThisMonth)
		belongingTo: ''.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardOwnerName.
	
	! !
!CreditCardTest methodsFor: 'util' stamp: 'LH 11/23/2020 18:24:37' prior: 50877483!
assertInvalidCardNumberErrorWithNumber: aCCNumber 
	
	self should: [CreditCard         withNumber: aCCNumber
							expirationDate: (GregorianMonthOfYear current next: self daysThisMonth) 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
	
	! !
!CreditCardTest methodsFor: 'util' stamp: 'LH 11/23/2020 18:25:32' prior: 50877643!
daysThisMonth

	^GregorianMonthOfYear current numberOfDays.
	! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 18:25:46'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/23/2020 18:25:46'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/23/2020 18:25:46'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/23/2020 18:25:46'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/23/2020 18:25:46'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/23/2020 18:25:46'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/23/2020 18:25:46'!
FAILURE!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/23/2020 18:25:46'!
FAILURE!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/23/2020 18:25:57'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/23/2020 18:26:58'!
FAILURE!
!CreditCardTest methodsFor: 'util' stamp: 'LH 11/23/2020 18:27:55' prior: 50877814!
assertInvalidCardNumberErrorWithNumber: aCCNumber 
	
	self should: [CreditCard         withNumber: aCCNumber
							expirationDate: (GregorianMonthOfYear current next) 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
	
	! !

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/23/2020 18:27:57'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/23/2020 18:28:01'!
FAILURE!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/23/2020 18:28:03'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/23/2020 18:28:06'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:28:50'!
test03ACreditCardWithExpirationDatedInThePastIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: GregorianMonthOfYear current previous.
	
	self assert: aCreditCard isExpired.

	! !

!methodRemoval: CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/23/2020 18:29:13'!
test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: GregorianMonthOfYear current previous.
	
	self assert: aCreditCard isExpired.

	!

!methodRemoval: CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/23/2020 18:29:35'!
test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (GregorianMonthOfYear current next: self daysInYear) .
	
	self deny: aCreditCard isExpired.

	!

!methodRemoval: CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/23/2020 18:29:44'!
test05ACreditCardWithExpirationDatingAPastYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (GregorianMonthOfYear current next: self daysThisMonth - self daysInYear) .
	
	self assert: aCreditCard isExpired.

	!
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:29:51'!
test04CreditCarNumberCantHaveAnythingBut16Symbols
	
	self assertInvalidCardNumberErrorWithNumber: '00000000000000000'.
	self assertInvalidCardNumberErrorWithNumber: '000000000000000'.
	! !

!methodRemoval: CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/23/2020 18:29:51'!
test06CreditCarNumberCantHaveAnythingBut16Symbols
	
	self assertInvalidCardNumberErrorWithNumber: '00000000000000000'.
	self assertInvalidCardNumberErrorWithNumber: '000000000000000'.
	!
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:29:57'!
test05CreditCarNumberCantHaveAnythingButNumbers
	
	self assertInvalidCardNumberErrorWithNumber: '000000000000000O'.
	
	! !

!methodRemoval: CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/23/2020 18:29:57'!
test07CreditCarNumberCantHaveAnythingButNumbers
	
	self assertInvalidCardNumberErrorWithNumber: '000000000000000O'.
	
	!
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:30:02'!
test06TheNameOfACreditCardOwnerCanNotBeBlank
	
	self should: [CreditCard withNumber: '0000000000000000'
		expirationDate: (GregorianMonthOfYear current next: self daysThisMonth)
		belongingTo: ''.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardOwnerName.
	
	! !

!methodRemoval: CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/23/2020 18:30:03'!
test08TheNameOfACreditCardOwnerCanNotBeBlank
	
	self should: [CreditCard withNumber: '0000000000000000'
		expirationDate: (GregorianMonthOfYear current next: self daysThisMonth)
		belongingTo: ''.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardOwnerName.
	
	!

!methodRemoval: CreditCardTest #daysInYear stamp: 'LH 11/23/2020 18:30:46'!
daysInYear
	
	^365 days 

	!

!testRun: #CreditCardTest #test06TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/23/2020 18:30:50'!
FAILURE!
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:31:06' prior: 50877972!
test06TheNameOfACreditCardOwnerCanNotBeBlank
	
	self should: [CreditCard withNumber: '0000000000000000'
		expirationDate: (GregorianMonthOfYear current next)
		belongingTo: ''.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardOwnerName.
	
	! !

!testRun: #CreditCardTest #test06TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/23/2020 18:31:10'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 18:31:10'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/23/2020 18:31:10'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatedInThePastIsExpired stamp: 'LH 11/23/2020 18:31:10'!
PASSED!

!testRun: #CreditCardTest #test04CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/23/2020 18:31:10'!
PASSED!

!testRun: #CreditCardTest #test05CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/23/2020 18:31:10'!
PASSED!

!testRun: #CreditCardTest #test06TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/23/2020 18:31:10'!
PASSED!
!CreditCard methodsFor: 'testing' stamp: 'LH 11/23/2020 18:31:29' prior: 50877561!
isExpired
	"returns if this credit card is expired"
	
	^expirationDate < GregorianMonthOfYear current or: expirationDate = GregorianMonthOfYear current.! !
!ShoppingCashierTest methodsFor: 'util' stamp: 'LH 11/23/2020 18:32:10' prior: 50876735!
invalidDate

	^GregorianMonthOfYear current previous
		! !
!ShoppingCashierTest methodsFor: 'util' stamp: 'LH 11/23/2020 18:32:26' prior: 50876740!
validDate

	^GregorianMonthOfYear current next
		! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/23/2020 18:32:31'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/23/2020 18:32:31'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/23/2020 18:32:31'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/23/2020 18:32:31'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldNotCheckoutIfMerchantProcessorFails stamp: 'LH 11/23/2020 18:32:32'!
PASSED!

----SNAPSHOT----(23 November 2020 18:33:07) CuisUniversity-4384.image priorSource: 17429928!

!methodRemoval: CreditCardTest #daysThisMonth stamp: 'LH 11/23/2020 18:33:29'!
daysThisMonth

	^GregorianMonthOfYear current numberOfDays.
	!
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:34:35'!
validMonthOfYear

	^GregorianMonthOfYear current next
	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:34:52' prior: 50877681!
test01ACreditCardCanBeNotExpired

	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: self validMonthOfYear.
	
	self deny: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:35:04' prior: 50878003!
test06TheNameOfACreditCardOwnerCanNotBeBlank
	
	self should: [CreditCard withNumber: '0000000000000000'
		expirationDate: self validMonthOfYear
		belongingTo: ''.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardOwnerName.
	
	! !
!CreditCardTest methodsFor: 'util' stamp: 'LH 11/23/2020 18:35:22' prior: 50877870!
assertInvalidCardNumberErrorWithNumber: aCCNumber 
	
	self should: [CreditCard         withNumber: aCCNumber
							expirationDate: self validMonthOfYear 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
	
	! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 18:35:26'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/23/2020 18:35:26'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatedInThePastIsExpired stamp: 'LH 11/23/2020 18:35:26'!
PASSED!

!testRun: #CreditCardTest #test04CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/23/2020 18:35:26'!
PASSED!

!testRun: #CreditCardTest #test05CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/23/2020 18:35:26'!
PASSED!

!testRun: #CreditCardTest #test06TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/23/2020 18:35:26'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 18:35:30'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/23/2020 18:35:30'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatedInThePastIsExpired stamp: 'LH 11/23/2020 18:35:30'!
PASSED!

!testRun: #CreditCardTest #test04CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/23/2020 18:35:30'!
PASSED!

!testRun: #CreditCardTest #test05CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #CreditCardTest #test06TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldNotCheckoutIfMerchantProcessorFails stamp: 'LH 11/23/2020 18:35:31'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:37:25'!
test10TheValueOfAnEmptyCartsProductsIs0
	| aCart |
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)).
	self assert: 0 equals: aCart valueOfProducts.! !

!testRun: #ShoppingCartTest #test10TheValueOfAnEmptyCartsProductsIs0 stamp: 'LH 11/23/2020 18:37:28'!
ERROR!
!ShoppingCart methodsFor: 'product value' stamp: 'LH 11/23/2020 18:38:04'!
valueOfProducts
	self shouldBeImplemented.! !
!ShoppingCart methodsFor: 'product value' stamp: 'LH 11/23/2020 18:38:09' prior: 50878223!
valueOfProducts
	^0! !

!testRun: #ShoppingCartTest #test10TheValueOfAnEmptyCartsProductsIs0 stamp: 'LH 11/23/2020 18:38:12'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/23/2020 18:38:12'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/23/2020 18:38:12'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/23/2020 18:38:12'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/23/2020 18:38:12'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/23/2020 18:38:12'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/23/2020 18:38:12'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/23/2020 18:38:12'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/23/2020 18:38:12'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'LH 11/23/2020 18:38:12'!
PASSED!

!testRun: #ShoppingCartTest #test10TheValueOfAnEmptyCartsProductsIs0 stamp: 'LH 11/23/2020 18:38:12'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:39:44'!
test11TheValueOfProductsOfACartWithOneProductShouldBeThatProduct
	| aCart |
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)).
	aCart add: '0-7645-2641-3'.
	
	self assert: 0 equals: aCart valueOfProducts.! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:40:03' prior: 50878210!
test10TheValueOfAnEmptyCartsProductsIs0
	| aCart |
	
	aCart := ShoppingCart withCatalogue: (Dictionary new).
	self assert: 0 equals: aCart valueOfProducts.! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:40:32' prior: 50878266!
test11TheValueOfProductsOfACartWithOneProductShouldBeThatProduct
	| aCart |
	
	aCart := self newShoppingCartWithAProduct .
	aCart add: '0-7645-2641-3'.
	
	self assert: 100 equals: aCart valueOfProducts.! !

!testRun: #ShoppingCartTest #test11TheValueOfProductsOfACartWithOneProductShouldBeThatProduct stamp: 'LH 11/23/2020 18:40:33'!
FAILURE!
!ShoppingCart methodsFor: 'product value' stamp: 'LH 11/23/2020 18:41:48' prior: 50878228!
valueOfProducts
	books isEmpty ifFalse:[^100].
	^0! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/23/2020 18:41:51'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/23/2020 18:41:51'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/23/2020 18:41:51'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/23/2020 18:41:51'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/23/2020 18:41:51'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/23/2020 18:41:51'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/23/2020 18:41:51'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/23/2020 18:41:51'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'LH 11/23/2020 18:41:51'!
PASSED!

!testRun: #ShoppingCartTest #test10TheValueOfAnEmptyCartsProductsIs0 stamp: 'LH 11/23/2020 18:41:51'!
PASSED!

!testRun: #ShoppingCartTest #test11TheValueOfProductsOfACartWithOneProductShouldBeThatProduct stamp: 'LH 11/23/2020 18:41:51'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:42:47'!
test11TheValueOfProductsOfACartWithManyProductShouldBeTheirSum
	| aCart |
	
	aCart := self newShoppingCartWithAProduct .
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4' withQuantity: 2.
	
	self assert: 400 equals: aCart valueOfProducts.! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:43:02'!
test12TheValueOfProductsOfACartWithManyProductShouldBeTheirSum
	| aCart |
	
	aCart := self newShoppingCartWithAProduct .
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4' withQuantity: 2.
	
	self assert: 400 equals: aCart valueOfProducts.! !

!methodRemoval: ShoppingCartTest #test11TheValueOfProductsOfACartWithManyProductShouldBeTheirSum stamp: 'LH 11/23/2020 18:43:02'!
test11TheValueOfProductsOfACartWithManyProductShouldBeTheirSum
	| aCart |
	
	aCart := self newShoppingCartWithAProduct .
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4' withQuantity: 2.
	
	self assert: 400 equals: aCart valueOfProducts.!
!ShoppingCartTest methodsFor: 'util' stamp: 'LH 11/23/2020 18:43:51'!
newShoppingCartWithTwoProducts
	
	^ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 50))
! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:44:36' prior: 50877132!
test03CanAddManyBooksToACart
	|aCart|
	
	aCart := self newShoppingCartWithTwoProducts .
	aCart add: '0-7645-2641-3'.
	aCart add: '0-7645-2641-4'.
	
	self assert: 2 equals: aCart listCart size.
	self assert: (aCart listCart includes: '0-7645-2641-3').
	self assert: (aCart listCart includes: '0-7645-2641-4').! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:44:54' prior: 50877147!
test09CannotEditCartList
	| aCart list |
	
	
	aCart := self newShoppingCartWithTwoProducts.
	aCart add: '0-7645-2641-3'.

	
	list := aCart listCart.
	list add: '0-7645-2641-4'.

	self assert: 1 equals: aCart listCart size.

	self assert: (aCart listCart includes: '0-7645-2641-3').
	self deny: (aCart listCart includes: '0-7645-2641-4').! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:45:08' prior: 50878351!
test12TheValueOfProductsOfACartWithManyProductShouldBeTheirSum
	| aCart |
	
	aCart := self newShoppingCartWithTwoProducts .
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4' withQuantity: 2.
	
	self assert: 400 equals: aCart valueOfProducts.! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:45:15' prior: 50878409!
test12TheValueOfProductsOfACartWithManyProductShouldBeTheirSum
	| aCart |
	
	aCart := self newShoppingCartWithTwoProducts .
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4' withQuantity: 2.
	
	self assert: 300 equals: aCart valueOfProducts.! !

!testRun: #ShoppingCartTest #test12TheValueOfProductsOfACartWithManyProductShouldBeTheirSum stamp: 'LH 11/23/2020 18:45:16'!
FAILURE!
!ShoppingCart methodsFor: 'product value' stamp: 'LH 11/23/2020 18:46:22' prior: 50878300!
valueOfProducts
	^books inject: 0 into: [:theSum :anISBN | theSum + catalgue at: anISBN]! !

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/23/2020 18:46:32'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'LH 11/23/2020 18:46:32' prior: 50878437!
valueOfProducts
	^books inject: 0 into: [:theSum :anISBN | theSum + catalogue at: anISBN]! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'LH 11/23/2020 18:46:33' prior: 50876905!
initializeWithCatalogue: aCatalgue 

	catalogue := aCatalgue.
	books := Bag new.! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'LH 11/23/2020 18:46:33' prior: 50877286!
validateISBNInCatalogue: anISBN

	(catalogue includesKey: anISBN) ifFalse:[^self error: ShoppingCart invalidISBNErrorMessage].
	! !

!testRun: #ShoppingCartTest #test12TheValueOfProductsOfACartWithManyProductShouldBeTheirSum stamp: 'LH 11/23/2020 18:46:34'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/23/2020 18:46:34'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/23/2020 18:46:34'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/23/2020 18:46:34'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/23/2020 18:46:34'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/23/2020 18:46:34'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/23/2020 18:46:34'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/23/2020 18:46:34'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/23/2020 18:46:35'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'LH 11/23/2020 18:46:35'!
PASSED!

!testRun: #ShoppingCartTest #test10TheValueOfAnEmptyCartsProductsIs0 stamp: 'LH 11/23/2020 18:46:35'!
PASSED!

!testRun: #ShoppingCartTest #test11TheValueOfProductsOfACartWithOneProductShouldBeThatProduct stamp: 'LH 11/23/2020 18:46:35'!
PASSED!

!testRun: #ShoppingCartTest #test12TheValueOfProductsOfACartWithManyProductShouldBeTheirSum stamp: 'LH 11/23/2020 18:46:35'!
PASSED!
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/23/2020 18:53:41' prior: 50877084!
checkOut: aShoppingCart withCreditCard: aCreditCard

	aShoppingCart listCart size = 0 ifTrue: [^self error: ShoppingCashier invalidCartErrorMessage].
	aCreditCard isExpired ifTrue: [^self error: ShoppingCashier invalidCreditCard].
	
	^merchantProcessor debitWith: aCreditCard for: aShoppingCart valueOfProducts.
! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/23/2020 18:53:42'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/23/2020 18:53:42'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/23/2020 18:53:42'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/23/2020 18:53:42'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldNotCheckoutIfMerchantProcessorFails stamp: 'LH 11/23/2020 18:53:42'!
PASSED!
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'LH 11/23/2020 18:54:56' prior: 50876831!
debitWith: aCreditCard for: anAmount
	"simulator for an interaction with a Merchant Procesor"
	^self subclassResponsibility.
! !
!ErroredMerchantProcessor methodsFor: 'debit operaions' stamp: 'LH 11/23/2020 18:55:39' prior: 50876852 overrides: 50878546!
debitWith: aCreditCard for: anAmount
	"see superclass"
	^self error: ErroredMerchantProcessor dummyErrorMessage.
! !
!NullMerchantProcessor methodsFor: 'debit operations' stamp: 'LH 11/23/2020 18:55:51' prior: 50877079 overrides: 50878546!
debitWith: aCreditCard for: anAmount
	"see superclass"
	^anAmount
! !
!ShoppingCart methodsFor: 'product value' stamp: 'LH 11/23/2020 18:56:13' prior: 50878451!
valueOfProducts
	"returns the accumulated value of all products in this cart"
	
	^books inject: 0 into: [:theSum :anISBN | theSum + catalogue at: anISBN]! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/23/2020 18:57:03' prior: 50877304!
add: anISBN withQuantity: aQuantity 
	"adds a quantity of the ISBN's book to this cart"

	(aQuantity isInteger and: aQuantity > 0) ifFalse:[^self error: ShoppingCart invalidQuantityErrorMessage ].
	self validateISBNInCatalogue: anISBN.
	
	books add: anISBN withOccurrences: aQuantity.! !
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/23/2020 18:57:57' prior: 50878514!
checkOut: aShoppingCart withCreditCard: aCreditCard
	"debits the credit card for the contents of the cart"
	
	aShoppingCart listCart size = 0 ifTrue: [^self error: ShoppingCashier invalidCartErrorMessage].
	aCreditCard isExpired ifTrue: [^self error: ShoppingCashier invalidCreditCard].
	
	^merchantProcessor debitWith: aCreditCard for: aShoppingCart valueOfProducts.
! !
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/23/2020 19:01:56' prior: 50877348!
test01AnEmptyCartCannotBeCheckedOut
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: Dictionary new.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'. 
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new.
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: ShoppingCashier invalidCartErrorMessage.! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/23/2020 19:02:27'!
ERROR!
!ShoppingCashier class methodsFor: 'instance creation' stamp: 'LH 11/23/2020 19:02:33'!
withMerchanProcessor: aNullMerchantProcessor 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithMerchanProcessor: aNullMerchantProcessor ! !
!ShoppingCashier class methodsFor: 'instance creation' stamp: 'LH 11/23/2020 19:02:50' prior: 50878625!
withMerchanProcessor: aMerchantProcessor 

	^self new initializeWithMerchanProcessor: aMerchantProcessor ! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/23/2020 19:02:54'!
ERROR!
!ShoppingCashier methodsFor: 'initialization' stamp: 'LH 11/23/2020 19:03:05'!
initializeWithMerchanProcessor: aMerchantProcessor 
	self shouldBeImplemented.
	merchantProcessor := aMerchantProcessor.! !
!ShoppingCashier methodsFor: 'initialization' stamp: 'LH 11/23/2020 19:03:13' prior: 50878645!
initializeWithMerchanProcessor: aMerchantProcessor 

	merchantProcessor := aMerchantProcessor.! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/23/2020 19:03:18'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/23/2020 19:03:18'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/23/2020 19:03:18'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/23/2020 19:03:18'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/23/2020 19:03:18'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldNotCheckoutIfMerchantProcessorFails stamp: 'LH 11/23/2020 19:03:18'!
PASSED!
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/23/2020 19:03:39' prior: 50877366!
test02ACartWith1BookWillCheckOutCorrectly
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)).
	aCart add: '0-7645-2641-3'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new .
	
	self assert: 100 equals: (aCashier checkOut: aCart withCreditCard: aCreditCard).! !
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/23/2020 19:03:47' prior: 50877385!
test03ACartWithManyBooksWillCheckOutCorrectly
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)).
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new .
	
	self assert: 300 equals: (aCashier checkOut: aCart withCreditCard: aCreditCard).! !
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/23/2020 19:03:53' prior: 50877407!
test04TheCardShouldNotBeExpired
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)).
	aCart add: '0-7645-2641-3'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self invalidDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new .
	
	self should:[ aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: ShoppingCashier invalidCreditCard.
		! !
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/23/2020 19:04:37' prior: 50877428!
test05ACartShouldNotCheckoutIfMerchantProcessorFails

	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)).
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.

	aCashier := ShoppingCashier withMerchanProcessor: ErroredMerchantProcessor new.
	
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: ErroredMerchantProcessor dummyErrorMessage.
		
	
! !

!testRun: #ShoppingCashierTest #test05ACartShouldNotCheckoutIfMerchantProcessorFails stamp: 'LH 11/23/2020 19:04:41'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/23/2020 19:04:41'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/23/2020 19:04:41'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/23/2020 19:04:41'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/23/2020 19:04:41'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldNotCheckoutIfMerchantProcessorFails stamp: 'LH 11/23/2020 19:04:41'!
PASSED!

!methodRemoval: ShoppingCashier class #withPriceCatalogue: stamp: 'LH 11/23/2020 19:04:53'!
withPriceCatalogue: aPriceCatalogue 

	^self new initializeWithPriceCatalogue: aPriceCatalogue !

!methodRemoval: ShoppingCashier class #withPriceCatalogue:andMerchantProcessor: stamp: 'LH 11/23/2020 19:04:55'!
withPriceCatalogue: aDictionary andMerchantProcessor: aClass 

	^self new initializeWithPriceCatalogue: aDictionary andMerchantProcessor: aClass !

Object subclass: #ShoppingCashier
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #ShoppingCashier category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/23/2020 19:05:01'!
Object subclass: #ShoppingCashier
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/23/2020 19:05:03'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/23/2020 19:05:03'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/23/2020 19:05:03'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/23/2020 19:05:03'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldNotCheckoutIfMerchantProcessorFails stamp: 'LH 11/23/2020 19:05:03'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatedInThePastIsExpired stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #CreditCardTest #test04CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #CreditCardTest #test05CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #CreditCardTest #test06TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCartTest #test10TheValueOfAnEmptyCartsProductsIs0 stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCartTest #test11TheValueOfProductsOfACartWithOneProductShouldBeThatProduct stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCartTest #test12TheValueOfProductsOfACartWithManyProductShouldBeTheirSum stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldNotCheckoutIfMerchantProcessorFails stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!methodRemoval: ShoppingCashier #initializeWithPriceCatalogue: stamp: 'LH 11/23/2020 19:09:21'!
initializeWithPriceCatalogue: aPriceCatalogue 

	self initializeWithPriceCatalogue: aPriceCatalogue andMerchantProcessor: NullMerchantProcessor new.
!

!methodRemoval: ShoppingCashier #initializeWithPriceCatalogue:andMerchantProcessor: stamp: 'LH 11/23/2020 19:09:22'!
initializeWithPriceCatalogue: aPriceCatalogue andMerchantProcessor: aMerchantProcessor 

	priceCatalogue := aPriceCatalogue.
	merchantProcessor := aMerchantProcessor.!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/23/2020 19:09:29'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/23/2020 19:09:29'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/23/2020 19:09:29'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/23/2020 19:09:29'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldNotCheckoutIfMerchantProcessorFails stamp: 'LH 11/23/2020 19:09:29'!
PASSED!

----SNAPSHOT----(23 November 2020 19:10:28) CuisUniversity-4384.image priorSource: 17485594!

----QUIT----(23 November 2020 19:10:42) CuisUniversity-4384.image priorSource: 17513405!