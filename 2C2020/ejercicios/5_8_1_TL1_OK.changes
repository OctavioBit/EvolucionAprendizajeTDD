

----STARTUP---- (18 November 2020 16:38:55) as E:\!!NUEVO\Programas\CuisUniversity\v4383.1\CuisUniversity-4383.image!


TestCase subclass: #ShoppingCartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ShoppingCartTest category: 'TusLibros' stamp: 'FR 11/18/2020 16:39:27'!
TestCase subclass: #ShoppingCartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ShoppingCart category: 'TusLibros' stamp: 'FR 11/18/2020 16:40:15'!
Object subclass: #ShoppingCart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ShoppingCartTest methodsFor: 'tests' stamp: 'FR 11/18/2020 16:39:57'!
test01ShoppingCartStartsEmpty

	| aShoppingCart |
	
	aShoppingCart := ShoppingCart new.
	
	self assert: aShoppingCart isEmpty! !

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 16:40:17'!
ERROR!

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 16:40:17'!
ERROR!
!ShoppingCart methodsFor: 'testing' stamp: 'FR 11/18/2020 16:40:24'!
isEmpty
	self shouldBeImplemented.! !
!ShoppingCart methodsFor: 'testing' stamp: 'FR 11/18/2020 16:40:32' prior: 51189697!
isEmpty
	
	^ true! !

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 16:40:33'!
PASSED!

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 16:40:34'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'FR 11/18/2020 16:40:46'!
test02ShoppingCartIsNotEmptyAfterAddingABook

	| aShoppingCart aBook |
	
	aBook := 9.
	aShoppingCart := ShoppingCart withCatalog: (Set with: aBook).
	
	aShoppingCart addToCart: aBook.
	
	self deny: aShoppingCart isEmpty! !

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 16:40:51'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyAfterAddingABook stamp: 'FR 11/18/2020 16:40:51'!
ERROR!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyAfterAddingABook stamp: 'FR 11/18/2020 16:40:51'!
ERROR!
!ShoppingCart class methodsFor: 'instance creation' stamp: 'FR 11/18/2020 16:40:56'!
withCatalog: aSet 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCatalog: aSet ! !
!ShoppingCart class methodsFor: 'instance creation' stamp: 'FR 11/18/2020 16:41:18' prior: 51189731!
withCatalog: aCatalog
	
	^ self new! !

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyAfterAddingABook stamp: 'FR 11/18/2020 16:41:19'!
ERROR!
!ShoppingCart methodsFor: 'adding' stamp: 'FR 11/18/2020 16:41:25'!
addToCart: aSmallInteger 
	self shouldBeImplemented.! !

!classDefinition: #ShoppingCart category: 'TusLibros' stamp: 'FR 11/18/2020 16:42:41'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'empty'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ShoppingCart methodsFor: 'adding' stamp: 'FR 11/18/2020 16:42:40' prior: 51189747!
addToCart: aBook

	empty := false! !
!ShoppingCart methodsFor: 'testing' stamp: 'FR 11/18/2020 16:42:48' prior: 51189701!
isEmpty
	
	^ empty! !

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 16:42:49'!
ERROR!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyAfterAddingABook stamp: 'FR 11/18/2020 16:42:49'!
PASSED!

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 16:42:49'!
ERROR!

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 16:42:52'!
ERROR!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyAfterAddingABook stamp: 'FR 11/18/2020 16:42:53'!
PASSED!

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 16:42:53'!
ERROR!
!ShoppingCart methodsFor: 'initialization' stamp: 'FR 11/18/2020 16:43:11' overrides: 16896425!
initialize

	empty := false! !
!ShoppingCart methodsFor: 'initialization' stamp: 'FR 11/18/2020 16:43:13' prior: 51189787 overrides: 16896425!
initialize

	empty := true! !

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 16:43:15'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyAfterAddingABook stamp: 'FR 11/18/2020 16:43:15'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'FR 11/18/2020 16:43:33'!
test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks

	| aShoppingCart aBook |
	
	aBook := 9.
	aShoppingCart := ShoppingCart withCatalog: (Set with: aBook).
	
	aShoppingCart addToCart: 4 of: aBook.
	
	self deny: aShoppingCart isEmpty! !

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 16:43:37'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyAfterAddingABook stamp: 'FR 11/18/2020 16:43:37'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks stamp: 'FR 11/18/2020 16:43:37'!
ERROR!

!testRun: #ShoppingCartTest #test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks stamp: 'FR 11/18/2020 16:43:37'!
ERROR!
!ShoppingCart methodsFor: 'adding' stamp: 'FR 11/18/2020 16:43:41'!
addToCart: aSmallInteger of: aSmallInteger2 
	self shouldBeImplemented.! !
!ShoppingCart methodsFor: 'adding' stamp: 'FR 11/18/2020 16:44:00' prior: 51189826!
addToCart: anAmount of: aBook 

	empty := true! !

!testRun: #ShoppingCartTest #test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks stamp: 'FR 11/18/2020 16:44:02'!
FAILURE!
!ShoppingCart methodsFor: 'adding' stamp: 'FR 11/18/2020 16:44:12' prior: 51189831!
addToCart: anAmount of: aBook 

	empty := false! !

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 16:44:13'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyAfterAddingABook stamp: 'FR 11/18/2020 16:44:13'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks stamp: 'FR 11/18/2020 16:44:13'!
PASSED!
!ShoppingCart methodsFor: 'adding' stamp: 'FR 11/18/2020 16:44:35' prior: 51189759!
addToCart: aBook

	self addToCart: 1 of: aBook! !

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 16:44:38'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyAfterAddingABook stamp: 'FR 11/18/2020 16:44:38'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks stamp: 'FR 11/18/2020 16:44:38'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'FR 11/18/2020 16:45:49'!
test04ShoppingCartListsBooksCorrectlyAfterAddingThem

	| aShoppingCart aBook |
	
	aBook := 9.
	aShoppingCart := ShoppingCart withCatalog: (Set with: aBook).
	
	aShoppingCart addToCart: 4 of: aBook.
	
	self assert: aShoppingCart list equals: (Bag withAll: {aBook. aBook. aBook. aBook})! !

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 16:45:51'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyAfterAddingABook stamp: 'FR 11/18/2020 16:45:51'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks stamp: 'FR 11/18/2020 16:45:51'!
PASSED!

!testRun: #ShoppingCartTest #test04ShoppingCartListsBooksCorrectlyAfterAddingThem stamp: 'FR 11/18/2020 16:45:51'!
ERROR!

!testRun: #ShoppingCartTest #test04ShoppingCartListsBooksCorrectlyAfterAddingThem stamp: 'FR 11/18/2020 16:45:51'!
ERROR!
!ShoppingCart methodsFor: 'accessing' stamp: 'FR 11/18/2020 16:45:55'!
list
	self shouldBeImplemented.! !

!classDefinition: #ShoppingCart category: 'TusLibros' stamp: 'FR 11/18/2020 16:47:50'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'empty contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ShoppingCart methodsFor: 'initialization' stamp: 'FR 11/18/2020 16:46:17' prior: 51189792 overrides: 16896425!
initialize

	empty := true.
	contents := Bag new! !
!ShoppingCart methodsFor: 'adding' stamp: 'FR 11/18/2020 16:48:13' prior: 51189840!
addToCart: anAmount of: aBook 

	empty := false.
	contents add: aBook withOccurrences: anAmount ! !
!ShoppingCart methodsFor: 'accessing' stamp: 'FR 11/18/2020 16:48:32' prior: 51189900!
list
	
	^ contents copy! !
!ShoppingCart methodsFor: 'testing' stamp: 'FR 11/18/2020 16:48:40' prior: 51189763!
isEmpty
	
	^ contents isEmpty! !
!ShoppingCart methodsFor: 'adding' stamp: 'FR 11/18/2020 16:48:47' prior: 51189917!
addToCart: anAmount of: aBook 

	contents add: aBook withOccurrences: anAmount ! !

Object subclass: #ShoppingCart
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ShoppingCart category: 'TusLibros' stamp: 'FR 11/18/2020 16:48:51'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 16:48:52'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyAfterAddingABook stamp: 'FR 11/18/2020 16:48:52'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks stamp: 'FR 11/18/2020 16:48:52'!
PASSED!

!testRun: #ShoppingCartTest #test04ShoppingCartListsBooksCorrectlyAfterAddingThem stamp: 'FR 11/18/2020 16:48:52'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'FR 11/18/2020 16:49:24'!
test05CantAddBookNotInCatalogue

	| aShoppingCart aBook anotherBook |
	
	aBook := 9.
	aShoppingCart := ShoppingCart withCatalog: (Set with: aBook).
	anotherBook := 8.
	
	self  should: [ aShoppingCart addToCart: anotherBook ]
		raise: Error - MessageNotUnderstood
		withMessageText: ShoppingCart bookNotCataloguedErrorDesciption! !

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 16:49:27'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyAfterAddingABook stamp: 'FR 11/18/2020 16:49:27'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks stamp: 'FR 11/18/2020 16:49:27'!
PASSED!

!testRun: #ShoppingCartTest #test04ShoppingCartListsBooksCorrectlyAfterAddingThem stamp: 'FR 11/18/2020 16:49:27'!
PASSED!

!testRun: #ShoppingCartTest #test05CantAddBookNotInCatalogue stamp: 'FR 11/18/2020 16:49:27'!
ERROR!

!testRun: #ShoppingCartTest #test05CantAddBookNotInCatalogue stamp: 'FR 11/18/2020 16:49:27'!
ERROR!
!ShoppingCart class methodsFor: 'error description' stamp: 'FR 11/18/2020 16:49:34'!
bookNotCataloguedErrorDesciption
	self shouldBeImplemented.! !
!ShoppingCart class methodsFor: 'error description' stamp: 'FR 11/18/2020 16:49:46' prior: 51189996!
bookNotCataloguedErrorDesciption
	
	^ 'This book is not available!!'! !

!testRun: #ShoppingCartTest #test05CantAddBookNotInCatalogue stamp: 'FR 11/18/2020 16:49:47'!
FAILURE!
!ShoppingCart class methodsFor: 'instance creation' stamp: 'FR 11/18/2020 16:50:29' prior: 51189740!
withCatalog: aCatalog
	
	^ self new initializeWith: aCatalog! !

!classDefinition: #ShoppingCart category: 'TusLibros' stamp: 'FR 11/18/2020 16:50:49'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'contents catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ShoppingCart methodsFor: 'initialization' stamp: 'FR 11/18/2020 16:50:48'!
initializeWith: aCatalog

	catalog := aCatalog.
	contents := Bag new! !
!ShoppingCart methodsFor: 'initialization' stamp: 'FR 11/18/2020 16:51:15' prior: 51189912 overrides: 16896425!
initialize

	self initializeWith: Set new! !
!ShoppingCart methodsFor: 'adding' stamp: 'FR 11/18/2020 16:52:30' prior: 51189931!
addToCart: anAmount of: aBook 

	(catalog includes: aBook) ifFalse: [ self error: self class bookNotCataloguedErrorDesciption ].
	
	contents add: aBook withOccurrences: anAmount ! !

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 16:52:32'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyAfterAddingABook stamp: 'FR 11/18/2020 16:52:32'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks stamp: 'FR 11/18/2020 16:52:32'!
PASSED!

!testRun: #ShoppingCartTest #test04ShoppingCartListsBooksCorrectlyAfterAddingThem stamp: 'FR 11/18/2020 16:52:32'!
PASSED!

!testRun: #ShoppingCartTest #test05CantAddBookNotInCatalogue stamp: 'FR 11/18/2020 16:52:32'!
PASSED!
!ShoppingCart methodsFor: 'adding' stamp: 'FR 11/18/2020 16:53:09'!
assertIsInCatalog: aBook

	^ (catalog includes: aBook) ifFalse: [ self error: self class bookNotCataloguedErrorDesciption ]! !
!ShoppingCart methodsFor: 'adding' stamp: 'FR 11/18/2020 16:53:09' prior: 51190034!
addToCart: anAmount of: aBook 

	self assertIsInCatalog: aBook.
	
	contents add: aBook withOccurrences: anAmount ! !

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 16:53:11'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyAfterAddingABook stamp: 'FR 11/18/2020 16:53:11'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks stamp: 'FR 11/18/2020 16:53:11'!
PASSED!

!testRun: #ShoppingCartTest #test04ShoppingCartListsBooksCorrectlyAfterAddingThem stamp: 'FR 11/18/2020 16:53:11'!
PASSED!

!testRun: #ShoppingCartTest #test05CantAddBookNotInCatalogue stamp: 'FR 11/18/2020 16:53:11'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'FR 11/18/2020 16:54:47'!
test06CantAddZeroBooks

	| aShoppingCart aBook |
	
	aBook := 9.
	aShoppingCart := ShoppingCart withCatalog: (Set with: aBook).
	
	self  should: [ aShoppingCart addToCart: 0 of: aBook ]
		raise: Error - MessageNotUnderstood
		withMessageText: ShoppingCart invalidAmountErrorDesciption! !

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 16:54:51'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyAfterAddingABook stamp: 'FR 11/18/2020 16:54:51'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks stamp: 'FR 11/18/2020 16:54:51'!
PASSED!

!testRun: #ShoppingCartTest #test04ShoppingCartListsBooksCorrectlyAfterAddingThem stamp: 'FR 11/18/2020 16:54:51'!
PASSED!

!testRun: #ShoppingCartTest #test05CantAddBookNotInCatalogue stamp: 'FR 11/18/2020 16:54:51'!
PASSED!

!testRun: #ShoppingCartTest #test06CantAddZeroBooks stamp: 'FR 11/18/2020 16:54:51'!
ERROR!

!testRun: #ShoppingCartTest #test06CantAddZeroBooks stamp: 'FR 11/18/2020 16:54:51'!
ERROR!
!ShoppingCart class methodsFor: 'error description' stamp: 'FR 11/18/2020 16:55:01'!
invalidAmountErrorDesciption
	self shouldBeImplemented.! !
!ShoppingCart class methodsFor: 'error description' stamp: 'FR 11/18/2020 16:55:26' prior: 51190127!
invalidAmountErrorDesciption
	
	^ 'Amount must not be zero!!'! !

!testRun: #ShoppingCartTest #test06CantAddZeroBooks stamp: 'FR 11/18/2020 16:55:27'!
FAILURE!
!ShoppingCart methodsFor: 'adding' stamp: 'FR 11/18/2020 16:55:52' prior: 51190067!
addToCart: anAmount of: aBook 

	self assertIsInCatalog: aBook.
	anAmount = 0 ifTrue: [ self error: self class invalidAmountErrorDesciption ].
	
	contents add: aBook withOccurrences: anAmount ! !

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 16:55:53'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyAfterAddingABook stamp: 'FR 11/18/2020 16:55:53'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks stamp: 'FR 11/18/2020 16:55:53'!
PASSED!

!testRun: #ShoppingCartTest #test04ShoppingCartListsBooksCorrectlyAfterAddingThem stamp: 'FR 11/18/2020 16:55:53'!
PASSED!

!testRun: #ShoppingCartTest #test05CantAddBookNotInCatalogue stamp: 'FR 11/18/2020 16:55:53'!
PASSED!

!testRun: #ShoppingCartTest #test06CantAddZeroBooks stamp: 'FR 11/18/2020 16:55:53'!
PASSED!
!ShoppingCart methodsFor: 'adding' stamp: 'FR 11/18/2020 16:56:21'!
assertIsValidAmount: anAmount

	^ anAmount = 0 ifTrue: [ self error: self class invalidAmountErrorDesciption ]! !
!ShoppingCart methodsFor: 'adding' stamp: 'FR 11/18/2020 16:56:21' prior: 51190140!
addToCart: anAmount of: aBook 

	self assertIsInCatalog: aBook.
	self assertIsValidAmount: anAmount.
	
	contents add: aBook withOccurrences: anAmount ! !

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 16:56:28'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyAfterAddingABook stamp: 'FR 11/18/2020 16:56:28'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks stamp: 'FR 11/18/2020 16:56:28'!
PASSED!

!testRun: #ShoppingCartTest #test04ShoppingCartListsBooksCorrectlyAfterAddingThem stamp: 'FR 11/18/2020 16:56:28'!
PASSED!

!testRun: #ShoppingCartTest #test05CantAddBookNotInCatalogue stamp: 'FR 11/18/2020 16:56:28'!
PASSED!

!testRun: #ShoppingCartTest #test06CantAddZeroBooks stamp: 'FR 11/18/2020 16:56:28'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'FR 11/18/2020 16:56:43'!
test06CantAddANegativeAmountOfBooks

	| aShoppingCart aBook |
	
	aBook := 9.
	aShoppingCart := ShoppingCart withCatalog: (Set with: aBook).
	
	self  should: [ aShoppingCart addToCart: -3 of: aBook ]
		raise: Error - MessageNotUnderstood
		withMessageText: ShoppingCart invalidAmountErrorDesciption! !

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 16:56:45'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyAfterAddingABook stamp: 'FR 11/18/2020 16:56:45'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks stamp: 'FR 11/18/2020 16:56:45'!
PASSED!

!testRun: #ShoppingCartTest #test04ShoppingCartListsBooksCorrectlyAfterAddingThem stamp: 'FR 11/18/2020 16:56:45'!
PASSED!

!testRun: #ShoppingCartTest #test05CantAddBookNotInCatalogue stamp: 'FR 11/18/2020 16:56:45'!
PASSED!

!testRun: #ShoppingCartTest #test06CantAddANegativeAmountOfBooks stamp: 'FR 11/18/2020 16:56:45'!
FAILURE!

!testRun: #ShoppingCartTest #test06CantAddZeroBooks stamp: 'FR 11/18/2020 16:56:45'!
PASSED!

!testRun: #ShoppingCartTest #test06CantAddANegativeAmountOfBooks stamp: 'FR 11/18/2020 16:56:45'!
FAILURE!
!ShoppingCart methodsFor: 'adding' stamp: 'FR 11/18/2020 16:56:53' prior: 51190169!
assertIsValidAmount: anAmount

	^ anAmount <= 0 ifTrue: [ self error: self class invalidAmountErrorDesciption ]! !

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 16:56:55'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyAfterAddingABook stamp: 'FR 11/18/2020 16:56:55'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks stamp: 'FR 11/18/2020 16:56:55'!
PASSED!

!testRun: #ShoppingCartTest #test04ShoppingCartListsBooksCorrectlyAfterAddingThem stamp: 'FR 11/18/2020 16:56:55'!
PASSED!

!testRun: #ShoppingCartTest #test05CantAddBookNotInCatalogue stamp: 'FR 11/18/2020 16:56:55'!
PASSED!

!testRun: #ShoppingCartTest #test06CantAddANegativeAmountOfBooks stamp: 'FR 11/18/2020 16:56:55'!
PASSED!

!testRun: #ShoppingCartTest #test06CantAddZeroBooks stamp: 'FR 11/18/2020 16:56:55'!
PASSED!
!ShoppingCart methodsFor: 'private - assertions' stamp: 'FR 11/18/2020 16:57:42'!
notCataloguedError

	^ self error: self class bookNotCataloguedErrorDesciption! !
!ShoppingCart methodsFor: 'private - assertions' stamp: 'FR 11/18/2020 16:57:42' prior: 51190060!
assertIsInCatalog: aBook

	^ (catalog includes: aBook) ifFalse: [ self notCataloguedError ]! !
!ShoppingCart methodsFor: 'private - assertions' stamp: 'FR 11/18/2020 16:57:54'!
invalidAmountError

	^ self error: self class invalidAmountErrorDesciption! !
!ShoppingCart methodsFor: 'private - assertions' stamp: 'FR 11/18/2020 16:57:54' prior: 51190244!
assertIsValidAmount: anAmount

	^ anAmount <= 0 ifTrue: [ self invalidAmountError ]! !

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 16:57:58'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyAfterAddingABook stamp: 'FR 11/18/2020 16:57:58'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks stamp: 'FR 11/18/2020 16:57:58'!
PASSED!

!testRun: #ShoppingCartTest #test04ShoppingCartListsBooksCorrectlyAfterAddingThem stamp: 'FR 11/18/2020 16:57:58'!
PASSED!

!testRun: #ShoppingCartTest #test05CantAddBookNotInCatalogue stamp: 'FR 11/18/2020 16:57:58'!
PASSED!

!testRun: #ShoppingCartTest #test06CantAddANegativeAmountOfBooks stamp: 'FR 11/18/2020 16:57:58'!
PASSED!

!testRun: #ShoppingCartTest #test06CantAddZeroBooks stamp: 'FR 11/18/2020 16:57:58'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'FR 11/18/2020 16:58:03'!
test07CantAddZeroBooks

	| aShoppingCart aBook |
	
	aBook := 9.
	aShoppingCart := ShoppingCart withCatalog: (Set with: aBook).
	
	self  should: [ aShoppingCart addToCart: 0 of: aBook ]
		raise: Error - MessageNotUnderstood
		withMessageText: ShoppingCart invalidAmountErrorDesciption! !

!methodRemoval: ShoppingCartTest #test06CantAddZeroBooks stamp: 'FR 11/18/2020 16:58:03'!
test06CantAddZeroBooks

	| aShoppingCart aBook |
	
	aBook := 9.
	aShoppingCart := ShoppingCart withCatalog: (Set with: aBook).
	
	self  should: [ aShoppingCart addToCart: 0 of: aBook ]
		raise: Error - MessageNotUnderstood
		withMessageText: ShoppingCart invalidAmountErrorDesciption!
!ShoppingCartTest methodsFor: 'tests - adding' stamp: 'FR 11/18/2020 17:00:50' prior: 51189802!
test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks

	| aShoppingCart aBook |
	
	aBook := 8.
	aShoppingCart := ShoppingCart withCatalog: (Set with: aBook).
	
	aShoppingCart addToCart: 4 of: aBook.
	
	self deny: aShoppingCart isEmpty! !
!ShoppingCartTest methodsFor: 'private - assertions' stamp: 'FR 11/18/2020 17:03:18'!
assertAdding: bookToAdd withAmount: anAmount shouldFailWith: errorMessage

	| aShoppingCart aBook |
	
	aBook := 9.
	aShoppingCart := ShoppingCart withCatalog: (Set with: aBook).
	
	self  should: [ aShoppingCart addToCart: anAmount of: bookToAdd ]
		raise: Error - MessageNotUnderstood
		withMessageText: errorMessage! !
!ShoppingCartTest methodsFor: 'tests - errors' stamp: 'FR 11/18/2020 17:05:16' prior: 51189962!
test05CantAddBookNotInCatalogue

	self  assertAdding: 8
		withAmount: 1
		shouldFailWith: ShoppingCart bookNotCataloguedErrorDesciption! !
!ShoppingCartTest methodsFor: 'tests - errors' stamp: 'FR 11/18/2020 17:06:22' prior: 51190204!
test06CantAddANegativeAmountOfBooks

	self  assertAdding: 9
		withAmount: -3
		shouldFailWith: ShoppingCart invalidAmountErrorDesciption! !
!ShoppingCartTest methodsFor: 'tests - errors' stamp: 'FR 11/18/2020 17:06:40' prior: 51190322!
test07CantAddZeroBooks

	self  assertAdding: 9
		withAmount: 0
		shouldFailWith: ShoppingCart invalidAmountErrorDesciption! !
!ShoppingCartTest methodsFor: 'tests - errors' stamp: 'FR 11/18/2020 17:06:57'!
aBook

	^ 9! !
!ShoppingCartTest methodsFor: 'tests - errors' stamp: 'FR 11/18/2020 17:06:57' prior: 51190386!
test07CantAddZeroBooks

	self  assertAdding: self aBook
		withAmount: 0
		shouldFailWith: ShoppingCart invalidAmountErrorDesciption! !
!ShoppingCartTest methodsFor: 'tests - errors' stamp: 'FR 11/18/2020 17:07:12'!
aDifferentBook

	^ 8! !
!ShoppingCartTest methodsFor: 'tests - errors' stamp: 'FR 11/18/2020 17:07:13' prior: 51190370!
test05CantAddBookNotInCatalogue

	self  assertAdding: self aDifferentBook
		withAmount: 1
		shouldFailWith: ShoppingCart bookNotCataloguedErrorDesciption! !
!ShoppingCartTest methodsFor: 'tests - errors' stamp: 'FR 11/18/2020 17:07:18' prior: 51190378!
test06CantAddANegativeAmountOfBooks

	self  assertAdding: self aBook
		withAmount: -3
		shouldFailWith: ShoppingCart invalidAmountErrorDesciption! !
!ShoppingCartTest methodsFor: 'private - assertions' stamp: 'FR 11/18/2020 17:07:53' prior: 51190357!
assertAdding: bookToAdd withAmount: anAmount shouldFailWith: errorMessage

	| aShoppingCart aBook |
	
	aBook := self aBook.
	aShoppingCart := ShoppingCart withCatalog: (Set with: aBook).
	
	self  should: [ aShoppingCart addToCart: anAmount of: bookToAdd ]
		raise: Error - MessageNotUnderstood
		withMessageText: errorMessage! !
!ShoppingCartTest methodsFor: 'private - assertions' stamp: 'FR 11/18/2020 17:08:27' prior: 51190424!
assertAdding: bookToAdd withAmount: anAmount shouldFailWith: errorMessage

	| aShoppingCart |
	
	aShoppingCart := ShoppingCart withCatalog: (Set with: self aBook).
	
	self  should: [ aShoppingCart addToCart: anAmount of: bookToAdd ]
		raise: Error - MessageNotUnderstood
		withMessageText: errorMessage! !
!ShoppingCartTest methodsFor: 'private - assertions' stamp: 'FR 11/18/2020 17:09:04'!
aShoppingCart

	^ ShoppingCart withCatalog: (Set with: self aBook)! !
!ShoppingCartTest methodsFor: 'private - assertions' stamp: 'FR 11/18/2020 17:09:04' prior: 51190438!
assertAdding: bookToAdd withAmount: anAmount shouldFailWith: errorMessage

	| aShoppingCart |
	
	aShoppingCart := self aShoppingCart.
	
	self  should: [ aShoppingCart addToCart: anAmount of: bookToAdd ]
		raise: Error - MessageNotUnderstood
		withMessageText: errorMessage! !
!ShoppingCartTest methodsFor: 'private - assertions' stamp: 'FR 11/18/2020 17:09:16' prior: 51190457!
assertAdding: bookToAdd withAmount: anAmount shouldFailWith: errorMessage
	
	self  should: [ self aShoppingCart addToCart: anAmount of: bookToAdd ]
		raise: Error - MessageNotUnderstood
		withMessageText: errorMessage! !
!ShoppingCartTest methodsFor: 'private - instances' stamp: 'FR 11/18/2020 17:09:58'!
aShoppingCartWithABook

	^ ShoppingCart withCatalog: (Set with: self aBook)! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'FR 11/18/2020 17:09:58' prior: 51190469!
assertAdding: bookToAdd withAmount: anAmount shouldFailWith: errorMessage
	
	self  should: [ self aShoppingCartWithABook addToCart: anAmount of: bookToAdd ]
		raise: Error - MessageNotUnderstood
		withMessageText: errorMessage! !

!methodRemoval: ShoppingCartTest #aShoppingCart stamp: 'FR 11/18/2020 17:09:59'!
aShoppingCart

	^ ShoppingCart withCatalog: (Set with: self aBook)!
!ShoppingCartTest methodsFor: 'tests - creation' stamp: 'FR 11/18/2020 17:10:21'!
anEmptyShoppingCart

	^ ShoppingCart new! !
!ShoppingCartTest methodsFor: 'tests - creation' stamp: 'FR 11/18/2020 17:10:21' prior: 51189684!
test01ShoppingCartStartsEmpty

	| aShoppingCart |
	
	aShoppingCart := self anEmptyShoppingCart.
	
	self assert: aShoppingCart isEmpty! !
!ShoppingCartTest methodsFor: 'tests - creation' stamp: 'FR 11/18/2020 17:10:28' prior: 51190505!
test01ShoppingCartStartsEmpty

	self assert: self anEmptyShoppingCart isEmpty! !
!ShoppingCartTest methodsFor: 'tests - adding' stamp: 'FR 11/18/2020 17:11:47' prior: 51189711!
test02ShoppingCartIsNotEmptyAfterAddingABook

	| aShoppingCart |
	
	aShoppingCart := self aShoppingCartWithABook.
	
	aShoppingCart addToCart: self aBook.
	
	self deny: aShoppingCart isEmpty! !
!ShoppingCartTest methodsFor: 'private - instances' stamp: 'FR 11/18/2020 17:12:30'!
aShoppingCartWithADifferentBook

	^ ShoppingCart withCatalog: (Set with: self aDifferentBook)! !
!ShoppingCartTest methodsFor: 'tests - adding' stamp: 'FR 11/18/2020 17:13:12' prior: 51190346!
test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks

	| aShoppingCart |
	
	aShoppingCart := self aShoppingCartWithADifferentBook.
	
	aShoppingCart addToCart: 4 of: self aDifferentBook.
	
	self deny: aShoppingCart isEmpty! !
!ShoppingCartTest methodsFor: 'tests - list' stamp: 'FR 11/18/2020 17:18:08' prior: 51189870!
test04ShoppingCartListsBooksCorrectlyAfterAddingThem

	| aShoppingCart |
	
	aShoppingCart := self aShoppingCartWithABook.
	
	aShoppingCart addToCart: 4 of: self aBook.
	
	self assert: aShoppingCart list equals: (Bag new add: self aBook withOccurrences: 4; yourself )! !

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 17:18:12'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyAfterAddingABook stamp: 'FR 11/18/2020 17:18:12'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks stamp: 'FR 11/18/2020 17:18:12'!
PASSED!

!testRun: #ShoppingCartTest #test04ShoppingCartListsBooksCorrectlyAfterAddingThem stamp: 'FR 11/18/2020 17:18:12'!
PASSED!

!testRun: #ShoppingCartTest #test05CantAddBookNotInCatalogue stamp: 'FR 11/18/2020 17:18:12'!
PASSED!

!testRun: #ShoppingCartTest #test06CantAddANegativeAmountOfBooks stamp: 'FR 11/18/2020 17:18:12'!
PASSED!

!testRun: #ShoppingCartTest #test07CantAddZeroBooks stamp: 'FR 11/18/2020 17:18:12'!
PASSED!
!ShoppingCartTest methodsFor: 'private - assertions' stamp: 'FR 11/18/2020 17:21:20'!
assertCartIsNotEmptyAfterDoing: aBlock to: aShoppingCart

	| shoppingCart |
	
	shoppingCart := aShoppingCart.
	
	aBlock value: shoppingCart.
		
	self deny: shoppingCart isEmpty! !
!ShoppingCartTest methodsFor: 'tests - adding' stamp: 'FR 11/18/2020 17:22:31' prior: 51190519!
test02ShoppingCartIsNotEmptyAfterAddingABook

	self  assertCartIsNotEmptyAfterDoing: [ :cart | cart addToCart: self aBook ]
		to: self aShoppingCartWithABook! !
!ShoppingCartTest methodsFor: 'tests - adding' stamp: 'FR 11/18/2020 17:22:49' prior: 51190535!
test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks

	self  assertCartIsNotEmptyAfterDoing: [ :cart | cart addToCart: 4 of: self aDifferentBook ]
		to: self aShoppingCartWithABook! !
!ShoppingCartTest methodsFor: 'private - instances' stamp: 'FR 11/18/2020 17:23:40'!
anShoppingCartWithEmptyCatalog

	^ ShoppingCart new! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'FR 11/18/2020 17:23:40' prior: 51190513!
test01ShoppingCartStartsEmpty

	self assert: self anShoppingCartWithEmptyCatalog isEmpty! !

!methodRemoval: ShoppingCartTest #anEmptyShoppingCart stamp: 'FR 11/18/2020 17:23:40'!
anEmptyShoppingCart

	^ ShoppingCart new!
!ShoppingCartTest methodsFor: 'private - instances' stamp: 'FR 11/18/2020 17:23:47'!
aShoppingCartWithADifferentBookInCatalog

	^ ShoppingCart withCatalog: (Set with: self aDifferentBook)! !

!methodRemoval: ShoppingCartTest #aShoppingCartWithADifferentBook stamp: 'FR 11/18/2020 17:23:47'!
aShoppingCartWithADifferentBook

	^ ShoppingCart withCatalog: (Set with: self aDifferentBook)!
!ShoppingCartTest methodsFor: 'private - instances' stamp: 'FR 11/18/2020 17:23:55'!
aShoppingCartWithABookInCatalog

	^ ShoppingCart withCatalog: (Set with: self aBook)! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'FR 11/18/2020 17:23:56' prior: 51190545!
test04ShoppingCartListsBooksCorrectlyAfterAddingThem

	| aShoppingCart |
	
	aShoppingCart := self aShoppingCartWithABookInCatalog.
	
	aShoppingCart addToCart: 4 of: self aBook.
	
	self assert: aShoppingCart list equals: (Bag new add: self aBook withOccurrences: 4; yourself )! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'FR 11/18/2020 17:23:56' prior: 51190485!
assertAdding: bookToAdd withAmount: anAmount shouldFailWith: errorMessage
	
	self  should: [ self aShoppingCartWithABookInCatalog addToCart: anAmount of: bookToAdd ]
		raise: Error - MessageNotUnderstood
		withMessageText: errorMessage! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'FR 11/18/2020 17:23:56' prior: 51190599!
test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks

	self  assertCartIsNotEmptyAfterDoing: [ :cart | cart addToCart: 4 of: self aDifferentBook ]
		to: self aShoppingCartWithABookInCatalog! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'FR 11/18/2020 17:23:56' prior: 51190590!
test02ShoppingCartIsNotEmptyAfterAddingABook

	self  assertCartIsNotEmptyAfterDoing: [ :cart | cart addToCart: self aBook ]
		to: self aShoppingCartWithABookInCatalog! !

!methodRemoval: ShoppingCartTest #aShoppingCartWithABook stamp: 'FR 11/18/2020 17:23:56'!
aShoppingCartWithABook

	^ ShoppingCart withCatalog: (Set with: self aBook)!
!ShoppingCartTest methodsFor: 'private - assertions' stamp: 'FR 11/18/2020 17:25:36'!
assert: anAssertionOnTheCart afterDoing: aBlock to: aShoppingCart

	| shoppingCart |
	
	shoppingCart := aShoppingCart.
	
	aBlock value: shoppingCart.
		
	self assert: (anAssertionOnTheCart value: shoppingCart)! !
!ShoppingCartTest methodsFor: 'private - assertions' stamp: 'FR 11/18/2020 17:26:53' prior: 51190581!
assertCartIsNotEmptyAfterDoing: aBlock to: aShoppingCart

	self  assert: [ :cart | cart isEmpty not ]
		afterDoing: [ :cart | aBlock value: cart ]
		to: aShoppingCart! !
!ShoppingCartTest methodsFor: 'tests - list' stamp: 'FR 11/18/2020 17:28:04' prior: 51190642!
test04ShoppingCartListsBooksCorrectlyAfterAddingThem

	self  assert: [ :cart | cart list = (Bag new add: self aBook withOccurrences: 4; yourself ) ]
		afterDoing: [ :cart | cart addToCart: 4 of: self aBook]
		to: self aShoppingCartWithABookInCatalog! !
!ShoppingCartTest methodsFor: 'private - instances' stamp: 'FR 11/18/2020 17:28:42'!
aShoppingCartWithEmptyCatalog

	^ ShoppingCart new! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'FR 11/18/2020 17:28:42' prior: 51190613!
test01ShoppingCartStartsEmpty

	self assert: self aShoppingCartWithEmptyCatalog isEmpty! !

!methodRemoval: ShoppingCartTest #anShoppingCartWithEmptyCatalog stamp: 'FR 11/18/2020 17:28:42'!
anShoppingCartWithEmptyCatalog

	^ ShoppingCart new!
!ShoppingCartTest methodsFor: 'tests - adding' stamp: 'FR 11/18/2020 17:30:01' prior: 51190665!
test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks

	self  assertCartIsNotEmptyAfterDoing: [ :cart | cart addToCart: 4 of: self aDifferentBook ]
		to: self aShoppingCartWithADifferentBookInCatalog! !

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 17:30:36'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyAfterAddingABook stamp: 'FR 11/18/2020 17:30:36'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks stamp: 'FR 11/18/2020 17:30:36'!
PASSED!

!testRun: #ShoppingCartTest #test04ShoppingCartListsBooksCorrectlyAfterAddingThem stamp: 'FR 11/18/2020 17:30:36'!
PASSED!

!testRun: #ShoppingCartTest #test05CantAddBookNotInCatalogue stamp: 'FR 11/18/2020 17:30:36'!
PASSED!

!testRun: #ShoppingCartTest #test06CantAddANegativeAmountOfBooks stamp: 'FR 11/18/2020 17:30:36'!
PASSED!

!testRun: #ShoppingCartTest #test07CantAddZeroBooks stamp: 'FR 11/18/2020 17:30:36'!
PASSED!
!ShoppingCartTest methodsFor: 'tests - list' stamp: 'FR 11/18/2020 17:32:16' prior: 51190708!
test04ShoppingCartListsBooksCorrectlyAfterAddingThem

	self  assert: [ :cart | self shoppingCart: cart hasListEqualTo: { self aBook. self aBook. self aBook. self aBook} ]
		afterDoing: [ :cart | cart addToCart: 4 of: self aBook]
		to: self aShoppingCartWithABookInCatalog! !

{ 4 factorial. 2 factorial } asBag!
!ShoppingCartTest methodsFor: 'tests - list' stamp: 'FR 11/18/2020 17:34:00' prior: 51190769!
test04ShoppingCartListsBooksCorrectlyAfterAddingThem

	self  assert: [ :cart | cart list = { self aBook. self aBook. self aBook. self aBook} asBag ]
		afterDoing: [ :cart | cart addToCart: 4 of: self aBook]
		to: self aShoppingCartWithABookInCatalog! !

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 17:34:07'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyAfterAddingABook stamp: 'FR 11/18/2020 17:34:07'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks stamp: 'FR 11/18/2020 17:34:07'!
PASSED!

!testRun: #ShoppingCartTest #test04ShoppingCartListsBooksCorrectlyAfterAddingThem stamp: 'FR 11/18/2020 17:34:07'!
PASSED!

!testRun: #ShoppingCartTest #test05CantAddBookNotInCatalogue stamp: 'FR 11/18/2020 17:34:07'!
PASSED!

!testRun: #ShoppingCartTest #test06CantAddANegativeAmountOfBooks stamp: 'FR 11/18/2020 17:34:07'!
PASSED!

!testRun: #ShoppingCartTest #test07CantAddZeroBooks stamp: 'FR 11/18/2020 17:34:07'!
PASSED!

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/18/2020 17:35:25'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyAfterAddingABook stamp: 'FR 11/18/2020 17:35:26'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks stamp: 'FR 11/18/2020 17:35:26'!
PASSED!

!testRun: #ShoppingCartTest #test04ShoppingCartListsBooksCorrectlyAfterAddingThem stamp: 'FR 11/18/2020 17:35:26'!
PASSED!

!testRun: #ShoppingCartTest #test05CantAddBookNotInCatalogue stamp: 'FR 11/18/2020 17:35:26'!
PASSED!

!testRun: #ShoppingCartTest #test06CantAddANegativeAmountOfBooks stamp: 'FR 11/18/2020 17:35:26'!
PASSED!

!testRun: #ShoppingCartTest #test07CantAddZeroBooks stamp: 'FR 11/18/2020 17:35:26'!
PASSED!

----STARTUP---- (19 November 2020 00:24:43) as E:\!!NUEVO\Programas\CuisUniversity\v4383.1\CuisUniversity-4383.image!


----End fileIn of E:\!!NUEVO\Programas\CuisUniversity\v4383.1\TusLibros.st----!

----STARTUP---- (19 November 2020 15:31:26) as E:\!!NUEVO\Programas\CuisUniversity\v4383.1\CuisUniversity-4383.image!


----End fileIn of E:\!!NUEVO\Programas\CuisUniversity\v4383.1\TusLibros\IngSoft1-Repositorio\20-TusLibros\TusLibros-1\TusLibros-1.st----!
!ShoppingCartTest methodsFor: 'tests - list' stamp: 'FR 11/19/2020 15:34:36'!
test04ShoppingCartListsBookCorrectlyAfterAddingOne

	self  assert: [ :cart | cart list = Bag with: self aBook ]
		afterDoing: [ :cart | cart addToCart: self aBook]
		to: self aShoppingCartWithABookInCatalog! !
!ShoppingCartTest methodsFor: 'tests - list' stamp: 'FR 11/19/2020 15:34:48'!
test04ShoppingCartListsBooksCorrectlyAfterAddingMultiple

	self  assert: [ :cart | cart list = { self aBook. self aBook. self aBook. self aBook} asBag ]
		afterDoing: [ :cart | cart addToCart: 4 of: self aBook]
		to: self aShoppingCartWithABookInCatalog! !

!methodRemoval: ShoppingCartTest #test04ShoppingCartListsBooksCorrectlyAfterAddingThem stamp: 'FR 11/19/2020 15:34:48'!
test04ShoppingCartListsBooksCorrectlyAfterAddingThem

	self  assert: [ :cart | cart list = { self aBook. self aBook. self aBook. self aBook} asBag ]
		afterDoing: [ :cart | cart addToCart: 4 of: self aBook]
		to: self aShoppingCartWithABookInCatalog!
!ShoppingCartTest methodsFor: 'tests - list' stamp: 'FR 11/19/2020 15:35:06'!
test05ShoppingCartListsBooksCorrectlyAfterAddingMultiple

	self  assert: [ :cart | cart list = { self aBook. self aBook. self aBook. self aBook} asBag ]
		afterDoing: [ :cart | cart addToCart: 4 of: self aBook]
		to: self aShoppingCartWithABookInCatalog! !

!methodRemoval: ShoppingCartTest #test04ShoppingCartListsBooksCorrectlyAfterAddingMultiple stamp: 'FR 11/19/2020 15:35:06'!
test04ShoppingCartListsBooksCorrectlyAfterAddingMultiple

	self  assert: [ :cart | cart list = { self aBook. self aBook. self aBook. self aBook} asBag ]
		afterDoing: [ :cart | cart addToCart: 4 of: self aBook]
		to: self aShoppingCartWithABookInCatalog!
!ShoppingCartTest methodsFor: 'tests - errors' stamp: 'FR 11/19/2020 15:35:12'!
test06CantAddBookNotInCatalogue

	self  assertAdding: self aDifferentBook
		withAmount: 1
		shouldFailWith: ShoppingCart bookNotCataloguedErrorDesciption! !

!methodRemoval: ShoppingCartTest #test05CantAddBookNotInCatalogue stamp: 'FR 11/19/2020 15:35:12'!
test05CantAddBookNotInCatalogue

	self  assertAdding: self aDifferentBook
		withAmount: 1
		shouldFailWith: ShoppingCart bookNotCataloguedErrorDesciption!
!ShoppingCartTest methodsFor: 'tests - errors' stamp: 'FR 11/19/2020 15:35:17'!
test07CantAddANegativeAmountOfBooks

	self  assertAdding: self aBook
		withAmount: -3
		shouldFailWith: ShoppingCart invalidAmountErrorDesciption! !

!methodRemoval: ShoppingCartTest #test06CantAddANegativeAmountOfBooks stamp: 'FR 11/19/2020 15:35:18'!
test06CantAddANegativeAmountOfBooks

	self  assertAdding: self aBook
		withAmount: -3
		shouldFailWith: ShoppingCart invalidAmountErrorDesciption!
!ShoppingCartTest methodsFor: 'tests - errors' stamp: 'FR 11/19/2020 15:35:20'!
test08CantAddZeroBooks

	self  assertAdding: self aBook
		withAmount: 0
		shouldFailWith: ShoppingCart invalidAmountErrorDesciption! !

!methodRemoval: ShoppingCartTest #test07CantAddZeroBooks stamp: 'FR 11/19/2020 15:35:21'!
test07CantAddZeroBooks

	self  assertAdding: self aBook
		withAmount: 0
		shouldFailWith: ShoppingCart invalidAmountErrorDesciption!
!ShoppingCartTest methodsFor: 'private - assertions' stamp: 'FR 11/19/2020 15:38:58'!
assertCartListIs: expectedCartList afterDoing: aBlock to: aShoppingCart
	
	self  assert: [ :cart | cart list = expectedCartList ]
		afterDoing: [ :cart | aBlock value: cart ]
		to: aShoppingCart! !
!ShoppingCartTest methodsFor: 'private - assertions' stamp: 'FR 11/19/2020 15:41:15' prior: 51192167!
assertCartIsNotEmptyAfterDoing: aBlock to: aShoppingCart

	self  assert: [ :cart | cart isEmpty not ]
		afterDoing: aBlock
		to: aShoppingCart! !
!ShoppingCartTest methodsFor: 'private - assertions' stamp: 'FR 11/19/2020 15:41:19' prior: 51192365!
assertCartListIs: expectedCartList afterDoing: aBlock to: aShoppingCart
	
	self  assert: [ :cart | cart list = expectedCartList ]
		afterDoing: aBlock
		to: aShoppingCart! !
!ShoppingCartTest methodsFor: 'tests - list' stamp: 'FR 11/19/2020 15:42:31' prior: 51192297!
test05ShoppingCartListsBooksCorrectlyAfterAddingMultiple

	self  assertCartListIs: { self aBook. self aBook. self aBook. self aBook} asBag
		afterDoing: [ :cart | cart addToCart: 4 of: self aBook]
		to: self aShoppingCartWithABookInCatalog! !
!ShoppingCartTest methodsFor: 'tests - list' stamp: 'FR 11/19/2020 15:42:57' prior: 51192265!
test04ShoppingCartListsBookCorrectlyAfterAddingOne

	self  assertCartListIs: {self aBook} asBag
		afterDoing: [ :cart | cart addToCart: self aBook]
		to: self aShoppingCartWithABookInCatalog! !

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/19/2020 15:43:05'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyAfterAddingABook stamp: 'FR 11/19/2020 15:43:05'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks stamp: 'FR 11/19/2020 15:43:05'!
PASSED!

!testRun: #ShoppingCartTest #test04ShoppingCartListsBookCorrectlyAfterAddingOne stamp: 'FR 11/19/2020 15:43:05'!
PASSED!

!testRun: #ShoppingCartTest #test05ShoppingCartListsBooksCorrectlyAfterAddingMultiple stamp: 'FR 11/19/2020 15:43:05'!
PASSED!

!testRun: #ShoppingCartTest #test06CantAddBookNotInCatalogue stamp: 'FR 11/19/2020 15:43:05'!
PASSED!

!testRun: #ShoppingCartTest #test07CantAddANegativeAmountOfBooks stamp: 'FR 11/19/2020 15:43:05'!
PASSED!

!testRun: #ShoppingCartTest #test08CantAddZeroBooks stamp: 'FR 11/19/2020 15:43:05'!
PASSED!

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/19/2020 15:43:12'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyAfterAddingABook stamp: 'FR 11/19/2020 15:43:13'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks stamp: 'FR 11/19/2020 15:43:13'!
PASSED!

!testRun: #ShoppingCartTest #test04ShoppingCartListsBookCorrectlyAfterAddingOne stamp: 'FR 11/19/2020 15:43:13'!
PASSED!

!testRun: #ShoppingCartTest #test05ShoppingCartListsBooksCorrectlyAfterAddingMultiple stamp: 'FR 11/19/2020 15:43:13'!
PASSED!

!testRun: #ShoppingCartTest #test06CantAddBookNotInCatalogue stamp: 'FR 11/19/2020 15:43:13'!
PASSED!

!testRun: #ShoppingCartTest #test07CantAddANegativeAmountOfBooks stamp: 'FR 11/19/2020 15:43:13'!
PASSED!

!testRun: #ShoppingCartTest #test08CantAddZeroBooks stamp: 'FR 11/19/2020 15:43:13'!
PASSED!

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'FR 11/19/2020 15:47:59'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyAfterAddingABook stamp: 'FR 11/19/2020 15:48:00'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartIsNotEmptyAfterAddingSeveralBooks stamp: 'FR 11/19/2020 15:48:00'!
PASSED!

!testRun: #ShoppingCartTest #test04ShoppingCartListsBookCorrectlyAfterAddingOne stamp: 'FR 11/19/2020 15:48:00'!
PASSED!

!testRun: #ShoppingCartTest #test05ShoppingCartListsBooksCorrectlyAfterAddingMultiple stamp: 'FR 11/19/2020 15:48:00'!
PASSED!

!testRun: #ShoppingCartTest #test06CantAddBookNotInCatalogue stamp: 'FR 11/19/2020 15:48:00'!
PASSED!

!testRun: #ShoppingCartTest #test07CantAddANegativeAmountOfBooks stamp: 'FR 11/19/2020 15:48:00'!
PASSED!

!testRun: #ShoppingCartTest #test08CantAddZeroBooks stamp: 'FR 11/19/2020 15:48:00'!
PASSED!