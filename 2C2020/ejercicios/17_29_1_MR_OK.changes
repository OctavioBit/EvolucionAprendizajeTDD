

Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

!classDefinition: #MarsRover category: 'MarsRoverExercise' stamp: 'CR 10/25/2020 23:29:39'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

Object subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

!classDefinition: #MarsRoverTest category: 'MarsRoverExercise' stamp: 'CR 10/25/2020 23:29:52'!
Object subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

!classRemoval: #MarsRover stamp: 'CR 10/25/2020 23:29:56'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

!classDefinition: #MarsRover category: 'MarsRoverExercise' stamp: 'CR 10/25/2020 23:47:44'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!
!MarsRoverTest methodsFor: 'nil' stamp: 'CR 10/25/2020 23:47:26'!
test01xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	self assert: (aMarsRover performInstructions: '') equals: 'Cant perform invalid instruction'.
	! !

TestSuite subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

!classDefinition: #MarsRoverTest category: 'MarsRoverExercise' stamp: 'CR 10/25/2020 23:48:52'!
TestSuite subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

!classDefinition: #MarsRoverTest category: 'MarsRoverExercise' stamp: 'CR 10/25/2020 23:49:05'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/25/2020 23:49:08'!
ERROR!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/25/2020 23:49:08'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'CR 10/25/2020 23:49:34'!
withPosition: aPoint andDirection: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithPosition: aPoint andDirection: aString ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'CR 10/25/2020 23:51:59' prior: 50877909!
withPosition: aCardinalPointToStartOn andDirection: aCardinalOrientationToPointTo
	
	^self new initializeWithPosition: aCardinalPointToStartOn andDirection: aCardinalOrientationToPointTo.! !

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/25/2020 23:52:09'!
ERROR!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/25/2020 23:52:09'!
ERROR!

!classDefinition: #MarsRover category: 'MarsRoverExercise' stamp: 'CR 10/25/2020 23:52:29'!
Object subclass: #MarsRover
	instanceVariableNames: 'cardinalPointToStartOn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

!classDefinition: #MarsRover category: 'MarsRoverExercise' stamp: 'CR 10/25/2020 23:52:29'!
Object subclass: #MarsRover
	instanceVariableNames: 'cardinalPointToStartOn cardinalOrientationToPointTo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!
!MarsRover methodsFor: 'initialization' stamp: 'CR 10/25/2020 23:52:29'!
initializeWithPosition: aCardinalPointToStartOn andDirection: aCardinalOrientationToPointTo 
	self shouldBeImplemented.
	cardinalPointToStartOn := aCardinalPointToStartOn.
	cardinalOrientationToPointTo := aCardinalOrientationToPointTo.! !

!classDefinition: #MarsRover category: 'MarsRoverExercise' stamp: 'CR 10/25/2020 23:54:59'!
Object subclass: #MarsRover
	instanceVariableNames: 'cardinalPointToStartOn cardinalOrientationToPointTo currentPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

!classDefinition: #MarsRover category: 'MarsRoverExercise' stamp: 'CR 10/25/2020 23:55:01'!
Object subclass: #MarsRover
	instanceVariableNames: 'cardinalPointToStartOn cardinalOrientationToPointTo currentPosition currentDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!
!MarsRover methodsFor: 'initialization' stamp: 'CR 10/25/2020 23:54:50' prior: 50877949!
initializeWithPosition: aCardinalPointToStartOn andDirection: aCardinalOrientationToPointTo 
	
	currentPosition := aCardinalPointToStartOn.
	currentDirection := aCardinalOrientationToPointTo.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CR 10/25/2020 23:55:10'!
Carditest01xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	self assert: (aMarsRover performInstructions: '') equals: 'Cant perform invalid instruction'.
	! !

Object subclass: #MarsRover
	instanceVariableNames: 'currentPosition currentDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

!classDefinition: #MarsRover category: 'MarsRoverExercise' stamp: 'CR 10/25/2020 23:55:27'!
Object subclass: #MarsRover
	instanceVariableNames: 'currentPosition currentDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

!methodRemoval: MarsRoverTest #Carditest01xxx stamp: 'CR 10/25/2020 23:55:36'!
Carditest01xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	self assert: (aMarsRover performInstructions: '') equals: 'Cant perform invalid instruction'.
	!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/25/2020 23:55:41'!
ERROR!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/25/2020 23:55:41'!
ERROR!
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/25/2020 23:55:56'!
performInstructions: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/25/2020 23:57:05' prior: 50878023!
performInstructions: instructionSequenceToPerform
	
	^self signalInvalidInstruction.! !

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/25/2020 23:57:21'!
ERROR!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/25/2020 23:57:21'!
ERROR!
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/25/2020 23:57:54' prior: 50878028!
performInstructions: instructionSequenceToPerform
	
	^self class signalInvalidInstruction.! !

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/25/2020 23:57:58'!
ERROR!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/25/2020 23:57:58'!
ERROR!
!MarsRover class methodsFor: 'error messages' stamp: 'CR 10/25/2020 23:58:12'!
signalInvalidInstruction
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'error messages' stamp: 'CR 10/26/2020 00:01:33' prior: 50878050!
signalInvalidInstruction
	self error: MarsRover cantPerformInvalidAction.! !

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 00:01:40'!
ERROR!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 00:02:03'!
cantPerformInvalidAction
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 00:02:31' prior: 50878063!
cantPerformInvalidAction
	
	^'Cant perform invalid instruction'! !

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 00:02:54'!
ERROR!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 00:02:54'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 00:06:33' prior: 50877872!
test01xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	self assert: (aMarsRover performInstructions: '') equals: 'Cant perform invalid instruction'.
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 00:07:46' prior: 50878078!
test01xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	self 
		should: [aMarsRover performInstructions: '']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: 'Cant perform invalid instruction' ].
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 00:08:10' prior: 50878087!
test01xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	self 
		should: [aMarsRover performInstructions: '']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: MarsRover cantPerformInvalidAction ].
	
	! !

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 00:08:14'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 00:08:37'!
test02xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	self 
		should: [aMarsRover performInstructions: '']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: MarsRover cantPerformInvalidAction ].
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 00:10:35' prior: 50878113!
test02xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	self aMarsRover performInstructions: 'f'.
	self assert: aMarsRover position equals: 0@1.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 00:11:15' prior: 50878125!
test02xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'f'.
	self assert: aMarsRover position equals: 0@1.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 00:12:23' prior: 50878134!
test02xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'f'.
	self assert: aMarsRover position equals: 0@1.
	
	! !

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 00:12:27'!
ERROR!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 00:12:27'!
ERROR!
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 00:14:03' prior: 50878039!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 00:16:58' prior: 50878157!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	currentPosition := currentPosition x @ currentPosition y + 1.
	 ! !

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 00:17:03'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 00:17:04'!
ERROR!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 00:17:04'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'CR 10/26/2020 00:17:38'!
position
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'accessing' stamp: 'CR 10/26/2020 00:17:45' prior: 50878181!
position
	^currentPosition.! !

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 00:17:52'!
FAILURE!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 00:17:58'!
FAILURE!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 00:17:58'!
FAILURE!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 00:18:19'!
FAILURE!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 00:18:19'!
FAILURE!
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 00:18:37' prior: 50878165!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	currentPosition := currentPosition x @ (currentPosition y + 1).
	 ! !

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 00:18:41'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 00:19:15'!
test03xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'b'.
	self assert: aMarsRover position equals: 0@(-1).
	
	! !

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 00:19:17'!
FAILURE!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 00:19:17'!
FAILURE!
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 00:21:05' prior: 50878201!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	(instructionSequenceToPerform isEqualTo: 'f')  ifTrue: [currentPosition := currentPosition x @ (currentPosition y + 1).] ifFalse: [currentPosition := currentPosition x @ (currentPosition y - 1 ).]
	
	 ! !

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 00:21:10'!
PASSED!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 00:21:23'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 00:21:23'!
PASSED!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 00:21:23'!
PASSED!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 00:22:13'!
test04xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'l'.
	self assert: aMarsRover direction equals: 'O'.
	
	! !

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 00:22:19'!
ERROR!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 00:22:19'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'CR 10/26/2020 00:22:34'!
direction
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'accessing' stamp: 'CR 10/26/2020 00:22:43' prior: 50878263!
direction
	^currentDirection.! !

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 00:22:47'!
FAILURE!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 00:23:02'!
FAILURE!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 00:23:02'!
FAILURE!
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 00:25:01' prior: 50878227!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	(instructionSequenceToPerform isEqualTo: 'f')  ifTrue: [currentPosition := currentPosition x @ (currentPosition y + 1).].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [currentPosition := currentPosition x @ (currentPosition y - 1 ).].
	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection := 'O'].
	
	 ! !

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 00:25:05'!
PASSED!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 00:25:08'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 00:25:08'!
PASSED!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 00:25:08'!
PASSED!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 00:25:08'!
PASSED!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 00:25:20'!
test05xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'r'.
	self assert: aMarsRover direction equals: 'E'.
	
	! !

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 00:25:27'!
FAILURE!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 00:25:27'!
FAILURE!
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 00:25:53' prior: 50878279!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	(instructionSequenceToPerform isEqualTo: 'f')  ifTrue: [currentPosition := currentPosition x @ (currentPosition y + 1).].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [currentPosition := currentPosition x @ (currentPosition y - 1 ).].
	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection := 'O'].
	(instructionSequenceToPerform isEqualTo: 'r') ifTrue: [currentDirection := 'E'].
	
	
	 ! !

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 00:25:58'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 00:25:58'!
PASSED!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 00:25:58'!
PASSED!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 00:25:58'!
PASSED!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 00:25:58'!
PASSED!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 00:40:39' prior: 50878143!
test02xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'E'.
	aMarsRover performInstructions: 'f'.
	self assert: aMarsRover position equals: 1@0.
	
	! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 00:40:49' prior: 50878356!
test02xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'f'.
	self assert: aMarsRover position equals: 0@1.
	
	! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 00:40:59'!
test06xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'E'.
	aMarsRover performInstructions: 'f'.
	self assert: aMarsRover position equals: 1@0.
	
	! !

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 00:41:02'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 00:41:02'!
PASSED!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 00:41:02'!
PASSED!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 00:41:02'!
PASSED!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 00:41:02'!
PASSED!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 00:41:02'!
FAILURE!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 00:41:02'!
FAILURE!
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 00:43:36' prior: 50878323!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	(currentDirection isEqualTo: 'N') ifTrue: [
	(instructionSequenceToPerform isEqualTo: 'f')  ifTrue: [currentPosition := currentPosition x @ (currentPosition y + 1).].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [currentPosition := currentPosition x @ (currentPosition y - 1 ).].
	].
	(currentDirection isEqualTo: 'E') ifTrue: [
	(instructionSequenceToPerform isEqualTo: 'f')  ifTrue: [currentPosition := (currentPosition x + 1 )@ currentPosition y.].
	].
	
	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection := 'O'].
	(instructionSequenceToPerform isEqualTo: 'r') ifTrue: [currentDirection := 'E'].
	
	
	 ! !

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 00:43:41'!
PASSED!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 00:43:44'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 00:43:44'!
PASSED!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 00:43:44'!
PASSED!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 00:43:44'!
PASSED!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 00:43:44'!
PASSED!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 00:43:44'!
PASSED!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 00:48:04'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 00:48:04'!
PASSED!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 00:48:04'!
PASSED!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 00:48:04'!
PASSED!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 00:48:04'!
PASSED!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 00:48:04'!
PASSED!

Object subclass: #Direction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

!classDefinition: #Direction category: 'MarsRoverExercise' stamp: 'CR 10/26/2020 00:48:23'!
Object subclass: #Direction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

Direction subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

!classDefinition: #North category: 'MarsRoverExercise' stamp: 'CR 10/26/2020 00:48:44'!
Direction subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

Object subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

!classDefinition: #South category: 'MarsRoverExercise' stamp: 'CR 10/26/2020 00:48:53'!
Object subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

!classRemoval: #South stamp: 'CR 10/26/2020 00:48:57'!
Object subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

Direction subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

!classDefinition: #South category: 'MarsRoverExercise' stamp: 'CR 10/26/2020 00:49:06'!
Direction subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

!classRemoval: #South stamp: 'CR 10/26/2020 00:49:14'!
Direction subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

Direction subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

!classDefinition: #East category: 'MarsRoverExercise' stamp: 'CR 10/26/2020 00:49:23'!
Direction subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 00:51:50' prior: 50878399!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	
	(instructionSequenceToPerform isEqualTo: 'f') ifTrue: [
		currentDirection moveForwardMarsRover: self.
		].
	  
	(currentDirection isEqualTo: 'N') ifTrue: [
	(instructionSequenceToPerform isEqualTo: 'f')  ifTrue: [currentPosition := currentPosition x @ (currentPosition y + 1).].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [currentPosition := currentPosition x @ (currentPosition y - 1 ).].
	].
	(currentDirection isEqualTo: 'E') ifTrue: [
	(instructionSequenceToPerform isEqualTo: 'f')  ifTrue: [currentPosition := (currentPosition x + 1 )@ currentPosition y.].
	].
	
	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection := 'O'].
	(instructionSequenceToPerform isEqualTo: 'r') ifTrue: [currentDirection := 'E'].
	
	
	 ! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 00:52:16' prior: 50878099!
test01xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: North new.
	self 
		should: [aMarsRover performInstructions: '']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: MarsRover cantPerformInvalidAction ].
	
	! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 00:52:24' prior: 50878365!
test02xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: North new.
	aMarsRover performInstructions: 'f'.
	self assert: aMarsRover position equals: 0@1.
	
	! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 00:52:32' prior: 50878213!
test03xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: North new.
	aMarsRover performInstructions: 'b'.
	self assert: aMarsRover position equals: 0@(-1).
	
	! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 00:52:37' prior: 50878250!
test04xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: North new.
	aMarsRover performInstructions: 'l'.
	self assert: aMarsRover direction equals: 'O'.
	
	! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 00:52:43' prior: 50878309!
test05xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: North new.
	aMarsRover performInstructions: 'r'.
	self assert: aMarsRover direction equals: 'E'.
	
	! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 00:53:44' prior: 50878595!
test05xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: North new.
	aMarsRover performInstructions: 'r'.
	self assert: aMarsRover direction class = East.
	
	! !

Direction subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

!classDefinition: #West category: 'MarsRoverExercise' stamp: 'CR 10/26/2020 00:54:15'!
Direction subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 00:54:18' prior: 50878586!
test04xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: North new.
	aMarsRover performInstructions: 'l'.
	self assert: aMarsRover direction class = West.
	
	! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 00:54:27' prior: 50878373!
test06xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: East new.
	aMarsRover performInstructions: 'f'.
	self assert: aMarsRover position equals: 1@0.
	
	! !
!MarsRover methodsFor: 'initialization' stamp: 'CR 10/26/2020 00:56:35' prior: 50877979!
initializeWithPosition: aCardinalPointToStartOn andDirection: aCardinalOrientationToPointTo 
	
	currentPosition := aCardinalPointToStartOn.
	currentDirection := aCardinalOrientationToPointTo.! !

Object subclass: #Direction
	instanceVariableNames: 'mars'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

!classDefinition: #Direction category: 'MarsRoverExercise' stamp: 'CR 10/26/2020 00:57:57'!
Object subclass: #Direction
	instanceVariableNames: 'mars'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!
!MarsRover methodsFor: 'initialization' stamp: 'CR 10/26/2020 01:02:24' prior: 50878642!
initializeWithPosition: aCardinalPointToStartOn andDirection: aCardinalOrientationToPointTo 
	| aCardinalDirectionToStartOn | 
	(aCardinalPointToStartOn isEqualTo: 'N') ifTrue: [aCardinalDirectionToStartOn := North for: self].
	(aCardinalPointToStartOn isEqualTo: 'W') ifTrue: [aCardinalDirectionToStartOn := West for: self].
	(aCardinalPointToStartOn isEqualTo: 'E') ifTrue: [aCardinalDirectionToStartOn := East for: self].
	currentPosition := aCardinalPointToStartOn.
	currentDirection := aCardinalDirectionToStartOn.
	! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 00:52:16' prior: 50878556!
test01xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: North new.
	self 
		should: [aMarsRover performInstructions: '']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: MarsRover cantPerformInvalidAction ].
	
	! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 00:52:16' prior: 50878683!
test01xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: North new.
	self 
		should: [aMarsRover performInstructions: '']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: MarsRover cantPerformInvalidAction ].
	
	! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 00:08:10' prior: 50878695!
test01xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	self 
		should: [aMarsRover performInstructions: '']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: MarsRover cantPerformInvalidAction ].
	
	! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 00:40:49' prior: 50878568!
test02xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'f'.
	self assert: aMarsRover position equals: 0@1.
	
	! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 00:19:15' prior: 50878577!
test03xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'b'.
	self assert: aMarsRover position equals: 0@(-1).
	
	! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 00:22:13' prior: 50878624!
test04xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'l'.
	self assert: aMarsRover direction equals: 'O'.
	
	! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 00:25:20' prior: 50878604!
test05xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'r'.
	self assert: aMarsRover direction equals: 'E'.
	
	! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 00:40:59' prior: 50878633!
test06xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'E'.
	aMarsRover performInstructions: 'f'.
	self assert: aMarsRover position equals: 1@0.
	
	! !

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 01:05:03'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 01:05:03'!
ERROR!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 01:05:03'!
FAILURE!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 01:05:03'!
PASSED!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 01:05:03'!
PASSED!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 01:05:03'!
ERROR!

Object subclass: #Direction
	instanceVariableNames: 'marsRoverAttachedTo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

!classDefinition: #Direction category: 'MarsRoverExercise' stamp: 'CR 10/26/2020 01:05:22'!
Object subclass: #Direction
	instanceVariableNames: 'marsRoverAttachedTo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!
!Direction class methodsFor: 'nil' stamp: 'CR 10/26/2020 01:05:48'!
for: aMarsRoverToBeAttachedTo
	self subclassResponsibility.! !
!Direction class methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 01:06:26' prior: 50878790!
for: aMarsRoverToBeAttachedTo
	
	^self new initializeWith: aMarsRoverToBeAttachedTo. ! !
!Direction methodsFor: 'nil' stamp: 'CR 10/26/2020 01:07:36'!
initializeWith: aMarsRoverToBeAttachedTo
	
	marsRoverAttachedTo := aMarsRoverToBeAttachedTo.! !

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 01:07:58'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 01:07:58'!
ERROR!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 01:07:58'!
FAILURE!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 01:07:58'!
PASSED!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 01:07:58'!
PASSED!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 01:07:58'!
ERROR!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 01:08:01'!
ERROR!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 01:09:24'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 01:09:26'!
ERROR!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 01:09:26'!
ERROR!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 01:09:36'!
ERROR!

aCardinalPointToStartOn isEqualTo: 'N'!
!MarsRover methodsFor: 'initialization' stamp: 'CR 10/26/2020 01:10:39' prior: 50878663!
initializeWithPosition: aCardinalPointToStartOn andDirection: aCardinalOrientationToPointTo 
	| aCardinalDirectionToStartOn | 
	(aCardinalOrientationToPointTo isEqualTo: 'N') ifTrue: [aCardinalDirectionToStartOn := North for: self].
	(aCardinalOrientationToPointTo isEqualTo: 'W') ifTrue: [aCardinalDirectionToStartOn := West for: self].
	(aCardinalOrientationToPointTo isEqualTo: 'E') ifTrue: [aCardinalDirectionToStartOn := East for: self].
	currentPosition := aCardinalPointToStartOn.
	currentDirection := aCardinalDirectionToStartOn.
	! !

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 01:10:50'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 01:10:50'!
ERROR!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 01:10:50'!
FAILURE!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 01:10:50'!
PASSED!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 01:10:50'!
PASSED!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 01:10:50'!
ERROR!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 01:10:51'!
ERROR!
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:11:13' prior: 50878525!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	
	(instructionSequenceToPerform isEqualTo: 'f') ifTrue: [
		currentDirection moveForward: self.
		].
	  
	(currentDirection isEqualTo: 'N') ifTrue: [
	(instructionSequenceToPerform isEqualTo: 'f')  ifTrue: [currentPosition := currentPosition x @ (currentPosition y + 1).].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [currentPosition := currentPosition x @ (currentPosition y - 1 ).].
	].
	(currentDirection isEqualTo: 'E') ifTrue: [
	(instructionSequenceToPerform isEqualTo: 'f')  ifTrue: [currentPosition := (currentPosition x + 1 )@ currentPosition y.].
	].
	
	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection := 'O'].
	(instructionSequenceToPerform isEqualTo: 'r') ifTrue: [currentDirection := 'E'].
	
	
	 ! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:12:06' prior: 50878872!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	
	(instructionSequenceToPerform isEqualTo: 'f') ifTrue: [
		currentDirection moveForward: self.
		].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackwards: self.
		].
	  
	(currentDirection isEqualTo: 'N') ifTrue: [
	(instructionSequenceToPerform isEqualTo: 'f')  ifTrue: [currentPosition := currentPosition x @ (currentPosition y + 1).].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [currentPosition := currentPosition x @ (currentPosition y - 1 ).].
	].
	(currentDirection isEqualTo: 'E') ifTrue: [
	(instructionSequenceToPerform isEqualTo: 'f')  ifTrue: [currentPosition := (currentPosition x + 1 )@ currentPosition y.].
	].
	
	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection := 'O'].
	(instructionSequenceToPerform isEqualTo: 'r') ifTrue: [currentDirection := 'E'].
	
	
	 ! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:12:28' prior: 50878903!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	
	(instructionSequenceToPerform isEqualTo: 'f') ifTrue: [
		currentDirection moveForward: self.
		].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackward: self.
		].
	  
	(currentDirection isEqualTo: 'N') ifTrue: [
	(instructionSequenceToPerform isEqualTo: 'f')  ifTrue: [currentPosition := currentPosition x @ (currentPosition y + 1).].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [currentPosition := currentPosition x @ (currentPosition y - 1 ).].
	].
	(currentDirection isEqualTo: 'E') ifTrue: [
	(instructionSequenceToPerform isEqualTo: 'f')  ifTrue: [currentPosition := (currentPosition x + 1 )@ currentPosition y.].
	].
	
	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection := 'O'].
	(instructionSequenceToPerform isEqualTo: 'r') ifTrue: [currentDirection := 'E'].
	
	
	 ! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:12:54' prior: 50878937!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	
	(instructionSequenceToPerform isEqualTo: 'f') ifTrue: [
		currentDirection moveForward.
		].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackward.
		].
	  
	(currentDirection isEqualTo: 'N') ifTrue: [
	(instructionSequenceToPerform isEqualTo: 'f')  ifTrue: [currentPosition := currentPosition x @ (currentPosition y + 1).].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [currentPosition := currentPosition x @ (currentPosition y - 1 ).].
	].
	(currentDirection isEqualTo: 'E') ifTrue: [
	(instructionSequenceToPerform isEqualTo: 'f')  ifTrue: [currentPosition := (currentPosition x + 1 )@ currentPosition y.].
	].
	
	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection := 'O'].
	(instructionSequenceToPerform isEqualTo: 'r') ifTrue: [currentDirection := 'E'].
	
	
	 ! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:14:20'!
moveOnyAxisPositive

	^ currentPosition := currentPosition x @ (currentPosition y + 1)! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:14:20' prior: 50878971!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	
	(instructionSequenceToPerform isEqualTo: 'f') ifTrue: [
		currentDirection moveForward.
		].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackward.
		].
	  
	(currentDirection isEqualTo: 'N') ifTrue: [
	(instructionSequenceToPerform isEqualTo: 'f')  ifTrue: [self moveOnyAxisPositive.].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [currentPosition := currentPosition x @ (currentPosition y - 1 ).].
	].
	(currentDirection isEqualTo: 'E') ifTrue: [
	(instructionSequenceToPerform isEqualTo: 'f')  ifTrue: [currentPosition := (currentPosition x + 1 )@ currentPosition y.].
	].
	
	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection := 'O'].
	(instructionSequenceToPerform isEqualTo: 'r') ifTrue: [currentDirection := 'E'].
	
	
	 ! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:14:52'!
moveNorth

	^ currentPosition := currentPosition x @ (currentPosition y + 1)! !

!methodRemoval: MarsRover #moveOnyAxisPositive stamp: 'CR 10/26/2020 01:14:56'!
moveOnyAxisPositive

	^ currentPosition := currentPosition x @ (currentPosition y + 1)!
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:15:23' prior: 50879010!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	
	(instructionSequenceToPerform isEqualTo: 'f') ifTrue: [
		currentDirection moveForward.
		].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackward.
		].
	  
	(currentDirection isEqualTo: 'N') ifTrue: [
	(instructionSequenceToPerform isEqualTo: 'f')  ifTrue: [self moveNorth.].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [currentPosition := currentPosition x @ (currentPosition y - 1 ).].
	].
	(currentDirection isEqualTo: 'E') ifTrue: [
	(instructionSequenceToPerform isEqualTo: 'f')  ifTrue: [currentPosition := (currentPosition x + 1 )@ currentPosition y.].
	].
	
	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection := 'O'].
	(instructionSequenceToPerform isEqualTo: 'r') ifTrue: [currentDirection := 'E'].
	
	
	 ! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:15:33'!
moveSouth

	^ currentPosition := currentPosition x @ (currentPosition y - 1 )! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:15:33' prior: 50879053!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	
	(instructionSequenceToPerform isEqualTo: 'f') ifTrue: [
		currentDirection moveForward.
		].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackward.
		].
	  
	(currentDirection isEqualTo: 'N') ifTrue: [
	(instructionSequenceToPerform isEqualTo: 'f')  ifTrue: [self moveNorth.].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [self moveSouth.].
	].
	(currentDirection isEqualTo: 'E') ifTrue: [
	(instructionSequenceToPerform isEqualTo: 'f')  ifTrue: [currentPosition := (currentPosition x + 1 )@ currentPosition y.].
	].
	
	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection := 'O'].
	(instructionSequenceToPerform isEqualTo: 'r') ifTrue: [currentDirection := 'E'].
	
	
	 ! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:16:02'!
moveEast

	^ currentPosition := (currentPosition x + 1 )@ currentPosition y! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:16:02' prior: 50879091!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	
	(instructionSequenceToPerform isEqualTo: 'f') ifTrue: [
		currentDirection moveForward.
		].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackward.
		].
	  
	(currentDirection isEqualTo: 'N') ifTrue: [
	(instructionSequenceToPerform isEqualTo: 'f')  ifTrue: [self moveNorth.].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [self moveSouth.].
	].
	(currentDirection isEqualTo: 'E') ifTrue: [
	(instructionSequenceToPerform isEqualTo: 'f')  ifTrue: [self moveEast.].
	].
	
	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection := 'O'].
	(instructionSequenceToPerform isEqualTo: 'r') ifTrue: [currentDirection := 'E'].
	
	
	 ! !
!Direction methodsFor: 'nil' stamp: 'CR 10/26/2020 01:16:31'!
moveForward
	self subclassResponsibility.! !
!Direction methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 01:16:35'!
moveBackward
	self subclassResponsibility.! !
!East methodsFor: 'nil' stamp: 'CR 10/26/2020 01:17:04' overrides: 50879155!
moveForward
	marsRoverAttachedTo moveEast.! !
!East methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 01:18:33' overrides: 50879159!
moveBackward
	marsRoverAttachedTo moveWest.! !
!North methodsFor: 'nil' stamp: 'CR 10/26/2020 01:18:51' overrides: 50879155!
moveForward
	marsRoverAttachedTo moveNorth.! !
!North methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 01:19:00' overrides: 50879159!
moveBackward
	marsRoverAttachedTo moveSouth.! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 01:19:35'!
test07xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'E'.
	aMarsRover performInstructions: 'b'.
	self assert: aMarsRover position equals: 1@0.
	
	! !

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 01:19:39'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 01:19:39'!
PASSED!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 01:19:39'!
PASSED!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 01:19:39'!
PASSED!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 01:19:39'!
PASSED!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 01:19:39'!
PASSED!

!testRun: #MarsRoverTest #test07xxx stamp: 'CR 10/26/2020 01:19:39'!
ERROR!

!testRun: #MarsRoverTest #test07xxx stamp: 'CR 10/26/2020 01:19:39'!
ERROR!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 01:19:51'!
PASSED!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 01:20:06' prior: 50879181!
test07xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'E'.
	aMarsRover performInstructions: 'b'.
	self assert: aMarsRover position equals: -1@0.
	
	! !

!testRun: #MarsRoverTest #test07xxx stamp: 'CR 10/26/2020 01:20:08'!
ERROR!

!testRun: #MarsRoverTest #test07xxx stamp: 'CR 10/26/2020 01:20:08'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 01:20:16'!
moveWest
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:20:46' prior: 50879121!
moveEast

	currentPosition := (currentPosition x + 1 )@ currentPosition y! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:20:50' prior: 50879042!
moveNorth

	currentPosition := currentPosition x @ (currentPosition y + 1)! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:20:53' prior: 50879085!
moveSouth

	currentPosition := currentPosition x @ (currentPosition y - 1 )! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:21:15' prior: 50879225!
moveWest

	currentPosition := (currentPosition x - 1 )@ currentPosition y! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:21:19' prior: 50879247!
moveWest

	currentPosition := (currentPosition x - 1 ) @ currentPosition y! !

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 01:21:27'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 01:21:27'!
PASSED!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 01:21:27'!
PASSED!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 01:21:27'!
PASSED!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 01:21:27'!
PASSED!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 01:21:27'!
PASSED!

!testRun: #MarsRoverTest #test07xxx stamp: 'CR 10/26/2020 01:21:27'!
PASSED!
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:21:53' prior: 50879127!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	
	(instructionSequenceToPerform isEqualTo: 'f') ifTrue: [
		currentDirection moveForward.
		].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackward.
		].

	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection := 'O'].
	(instructionSequenceToPerform isEqualTo: 'r') ifTrue: [currentDirection := 'E'].
	
	
	 ! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:22:19' prior: 50879276!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	
	(instructionSequenceToPerform isEqualTo: 'f') ifTrue: [
		currentDirection moveForward.
		].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackward.
		].

	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection := 'O'].
	(instructionSequenceToPerform isEqualTo: 'r') ifTrue: [currentDirection := 'E'].
	
	
	 ! !

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 01:22:22'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 01:22:22'!
PASSED!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 01:22:22'!
PASSED!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 01:22:22'!
PASSED!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 01:22:22'!
PASSED!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 01:22:22'!
PASSED!

!testRun: #MarsRoverTest #test07xxx stamp: 'CR 10/26/2020 01:22:22'!
PASSED!
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:23:14' prior: 50879295!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	
	(instructionSequenceToPerform isEqualTo: 'f') ifTrue: [
		currentDirection moveForward.
		].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackward.
		].

	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection := West for: self].
	(instructionSequenceToPerform isEqualTo: 'r') ifTrue: [currentDirection := East for: self].
	
	
	 ! !

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 01:23:31'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 01:23:31'!
PASSED!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 01:23:31'!
PASSED!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 01:23:31'!
FAILURE!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 01:23:31'!
FAILURE!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 01:23:31'!
PASSED!

!testRun: #MarsRoverTest #test07xxx stamp: 'CR 10/26/2020 01:23:31'!
PASSED!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 01:23:52' prior: 50878737!
test04xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'l'.
	self assert: aMarsRover direction class equals: West.
	
	! !

1 isKindOf: MarsRover !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 01:25:05' prior: 50879368!
test04xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'l'.
	self assert: aMarsRover direction.
	
	! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 01:26:06' prior: 50878746!
test05xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'r'.
	self assert: (aMarsRover direction isKindOf: East).
	
	! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 01:26:25' prior: 50879378!
test04xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'l'.
	self assert: (aMarsRover direction isKindOf: West).
	
	! !

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 01:26:40'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 01:26:40'!
PASSED!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 01:26:40'!
PASSED!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 01:26:40'!
PASSED!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 01:26:40'!
PASSED!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 01:26:40'!
PASSED!

!testRun: #MarsRoverTest #test07xxx stamp: 'CR 10/26/2020 01:26:40'!
PASSED!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 01:27:36' prior: 50879395!
test04xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'E'.
	aMarsRover performInstructions: 'l'.
	self assert: (aMarsRover direction isKindOf: North).
	
	! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 01:27:47' prior: 50879421!
test04xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'E'.
	aMarsRover performInstructions: 'l'.
	self assert: (aMarsRover direction isKindOf: West).
	
	! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 01:27:56'!
test08xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'E'.
	aMarsRover performInstructions: 'l'.
	self assert: (aMarsRover direction isKindOf: North).
	
	! !

Direction subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!

!classDefinition: #South category: 'MarsRoverExercise' stamp: 'CR 10/26/2020 01:28:36'!
Direction subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExercise'!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 01:28:38'!
test09xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'E'.
	aMarsRover performInstructions: 'r'.
	self assert: (aMarsRover direction isKindOf: South).
	
	! !

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 01:28:47'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 01:28:47'!
PASSED!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 01:28:47'!
PASSED!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 01:28:47'!
PASSED!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 01:28:47'!
PASSED!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 01:28:47'!
PASSED!

!testRun: #MarsRoverTest #test07xxx stamp: 'CR 10/26/2020 01:28:47'!
PASSED!

!testRun: #MarsRoverTest #test08xxx stamp: 'CR 10/26/2020 01:28:47'!
FAILURE!

!testRun: #MarsRoverTest #test09xxx stamp: 'CR 10/26/2020 01:28:47'!
FAILURE!
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:31:17' prior: 50879331!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	
	(instructionSequenceToPerform isEqualTo: 'f') ifTrue: [
		currentDirection moveForward.
		].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackward.
		].
	
	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection moveLeft].
	(instructionSequenceToPerform isEqualTo: 'r') ifTrue: [currentDirection moveRight].
	
	
	 ! !

!testRun: #MarsRoverTest #test08xxx stamp: 'CR 10/26/2020 01:31:27'!
ERROR!

!testRun: #MarsRoverTest #test08xxx stamp: 'CR 10/26/2020 01:31:27'!
ERROR!
!East methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 01:31:41'!
moveLeft
	self shouldBeImplemented.! !
!East methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 01:33:04'!
rotateLeft
	marsRoverAttachedTo pointToSouth.! !

!methodRemoval: East #moveLeft stamp: 'CR 10/26/2020 01:33:09'!
moveLeft
	self shouldBeImplemented.!
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:33:21' prior: 50879489!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	
	(instructionSequenceToPerform isEqualTo: 'f') ifTrue: [
		currentDirection moveForward.
		].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackward.
		].
	
	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection rotateLeft].
	(instructionSequenceToPerform isEqualTo: 'r') ifTrue: [currentDirection rotateRight].
	
	
	 ! !
!MarsRover methodsFor: 'nil' stamp: 'CR 10/26/2020 01:34:40'!
pointToSouth
	
	currentDirection := South for: self.! !

!testRun: #MarsRoverTest #test08xxx stamp: 'CR 10/26/2020 01:34:57'!
FAILURE!

!testRun: #MarsRoverTest #test08xxx stamp: 'CR 10/26/2020 01:34:57'!
FAILURE!

----SNAPSHOT----(26 October 2020 01:35:05) CuisUniversity-4384.image priorSource: 17477735!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 01:35:34' prior: 50879430!
test04xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'l'.
	self assert: (aMarsRover direction isKindOf: West).
	
	! !

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 01:35:42'!
ERROR!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 01:35:42'!
ERROR!

!testRun: #MarsRoverTest #test09xxx stamp: 'CR 10/26/2020 01:36:11'!
ERROR!

!testRun: #MarsRoverTest #test09xxx stamp: 'CR 10/26/2020 01:36:11'!
ERROR!
!East methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 01:36:22' prior: 50879517!
rotateLeft
	marsRoverAttachedTo pointToNorth.! !
!East methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 01:36:30'!
rotateRight
	marsRoverAttachedTo pointToSouth.! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:36:41'!
pointToNorth
	
	currentDirection := North for: self.! !

!testRun: #MarsRoverTest #test08xxx stamp: 'CR 10/26/2020 01:36:45'!
PASSED!

!testRun: #MarsRoverTest #test09xxx stamp: 'CR 10/26/2020 01:36:47'!
PASSED!
!North methodsFor: 'nil' stamp: 'CR 10/26/2020 01:37:22'!
rotateLeft
	marsRoverAttachedTo pointToWest. ! !
!North methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 01:37:35'!
rotateRight
	marsRoverAttachedTo pointToEast. ! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:37:50'!
pointToWest
	
	currentDirection := West for: self.! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:37:57'!
pointToEast
	
	currentDirection := East for: self.! !

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 01:38:02'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 01:38:02'!
PASSED!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 01:38:02'!
PASSED!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 01:38:02'!
PASSED!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 01:38:02'!
PASSED!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 01:38:02'!
PASSED!

!testRun: #MarsRoverTest #test07xxx stamp: 'CR 10/26/2020 01:38:02'!
PASSED!

!testRun: #MarsRoverTest #test08xxx stamp: 'CR 10/26/2020 01:38:02'!
PASSED!

!testRun: #MarsRoverTest #test09xxx stamp: 'CR 10/26/2020 01:38:02'!
PASSED!
!MarsRover methodsFor: 'initialization' stamp: 'CR 10/26/2020 01:39:26' prior: 50878835!
initializeWithPosition: aCardinalPointToStartOn andDirection: aCardinalOrientationToPointTo 
	(aCardinalOrientationToPointTo isEqualTo: 'N') ifTrue: [self pointToNorth].
	(aCardinalOrientationToPointTo isEqualTo: 'W') ifTrue: [self pointToWest].
	(aCardinalOrientationToPointTo isEqualTo: 'E') ifTrue: [self pointToEast].
	currentPosition := aCardinalPointToStartOn.
	! !
!MarsRover methodsFor: 'initialization' stamp: 'CR 10/26/2020 01:39:47' prior: 50879631!
initializeWithPosition: aCardinalPointToStartOn andDirection: aCardinalOrientationToPointTo 
	(aCardinalOrientationToPointTo isEqualTo: 'N') ifTrue: [self pointToNorth].
	(aCardinalOrientationToPointTo isEqualTo: 'E') ifTrue: [self pointToEast].
	currentPosition := aCardinalPointToStartOn.
	! !

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 01:39:55'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 01:39:55'!
PASSED!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 01:39:55'!
PASSED!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 01:39:55'!
PASSED!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 01:39:55'!
PASSED!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 01:39:55'!
PASSED!

!testRun: #MarsRoverTest #test07xxx stamp: 'CR 10/26/2020 01:39:55'!
PASSED!

!testRun: #MarsRoverTest #test08xxx stamp: 'CR 10/26/2020 01:39:55'!
PASSED!

!testRun: #MarsRoverTest #test09xxx stamp: 'CR 10/26/2020 01:39:55'!
PASSED!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 01:42:34'!
test10xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'S'.
	aMarsRover performInstructions: 'rr'.
	self assert: (aMarsRover direction isKindOf: North).
	
	! !
!MarsRover methodsFor: 'initialization' stamp: 'CR 10/26/2020 01:43:08' prior: 50879646!
initializeWithPosition: aCardinalPointToStartOn andDirection: aCardinalOrientationToPointTo 
	(aCardinalOrientationToPointTo isEqualTo: 'N') ifTrue: [self pointToNorth].
	(aCardinalOrientationToPointTo isEqualTo: 'E') ifTrue: [self pointToEast].
	(aCardinalOrientationToPointTo isEqualTo: 'S') ifTrue: [self pointToSouth].
	currentPosition := aCardinalPointToStartOn.
	! !

!testRun: #MarsRoverTest #test10xxx stamp: 'CR 10/26/2020 01:43:14'!
FAILURE!

!testRun: #MarsRoverTest #test10xxx stamp: 'CR 10/26/2020 01:43:14'!
FAILURE!

aMarsRover direction!
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:46:48' prior: 50879525!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	
	(instructionSequenceToPerform isEqualTo: 'f') ifTrue: [
		currentDirection moveForward.
		].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackward.
		].
	
	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection rotateLeft].
	(instructionSequenceToPerform isEqualTo: 'r') ifTrue: [currentDirection rotateRight].
	
	
	 ! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:53:51' prior: 50879709!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	
	instructionSequenceToPerform do: [ : anInstructionToPerform |
		 (anInstructionToPerform in: 'fbrl') ifTrue: [
			(anInstructionToPerform isEqualTo: 'f') ifTrue: [
			currentDirection moveForward.		].
			(anInstructionToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackward. ].
			(anInstructionToPerform isEqualTo: 'l') ifTrue: [currentDirection rotateLeft].
			(anInstructionToPerform isEqualTo: 'r') ifTrue: [currentDirection rotateRight].		
			] ifFalse:[
			self signalInvalidInstruction.		
			]
		
		].
	(instructionSequenceToPerform isEqualTo: 'f') ifTrue: [
		currentDirection moveForward.
		].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackward.
		].
	
	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection rotateLeft].
	(instructionSequenceToPerform isEqualTo: 'r') ifTrue: [currentDirection rotateRight].
	
	
	 ! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:54:30' prior: 50879728!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	
	instructionSequenceToPerform do: [ : anInstructionToPerform |
		 (anInstructionToPerform in: 'fbrl') ifTrue: [
			(anInstructionToPerform isEqualTo: 'f') ifTrue: [
			currentDirection moveForward.		].
			(anInstructionToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackward. ].
			(anInstructionToPerform isEqualTo: 'l') ifTrue: [currentDirection rotateLeft].
			(anInstructionToPerform isEqualTo: 'r') ifTrue: [currentDirection rotateRight].		
			] ifFalse:[
			self signalInvalidInstruction.		
			]
		
		].
	(instructionSequenceToPerform isEqualTo: 'f') ifTrue: [
		currentDirection moveForward.
		].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackward.
		].
	
	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection rotateLeft].
	(instructionSequenceToPerform isEqualTo: 'r') ifTrue: [currentDirection rotateRight].
	
	
	 ! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:54:56' prior: 50879764!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	
	instructionSequenceToPerform do: [ : anInstructionToPerform |
		 (anInstructionToPerform in: 'fbrl') ifTrue: [
			(anInstructionToPerform isEqualTo: 'f') ifTrue: [
			currentDirection moveForward.		].
			(anInstructionToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackward. ].
			(anInstructionToPerform isEqualTo: 'l') ifTrue: [currentDirection rotateLeft].
			(anInstructionToPerform isEqualTo: 'r') ifTrue: [currentDirection rotateRight].		
			] ifFalse:[
			self signalInvalidInstruction.		
			]
		
		].
	"
	(instructionSequenceToPerform isEqualTo: 'f') ifTrue: [
		currentDirection moveForward.
		].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackward.
		].
	
	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection rotateLeft].
	(instructionSequenceToPerform isEqualTo: 'r') ifTrue: [currentDirection rotateRight].
	"
	 ! !

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 01:55:04'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 01:55:04'!
ERROR!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 01:55:04'!
ERROR!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 01:55:04'!
ERROR!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 01:55:04'!
ERROR!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 01:55:04'!
ERROR!

!testRun: #MarsRoverTest #test07xxx stamp: 'CR 10/26/2020 01:55:04'!
ERROR!

!testRun: #MarsRoverTest #test08xxx stamp: 'CR 10/26/2020 01:55:04'!
ERROR!

!testRun: #MarsRoverTest #test09xxx stamp: 'CR 10/26/2020 01:55:04'!
ERROR!

!testRun: #MarsRoverTest #test10xxx stamp: 'CR 10/26/2020 01:55:04'!
ERROR!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 01:55:17'!
ERROR!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 01:55:17'!
ERROR!
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 01:56:26' prior: 50879800!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	
	instructionSequenceToPerform do: [ : anInstructionToPerform |
		 ( 'fbrl' includes: anInstructionToPerform) ifTrue: [
			(anInstructionToPerform isEqualTo: 'f') ifTrue: [
			currentDirection moveForward.		].
			(anInstructionToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackward. ].
			(anInstructionToPerform isEqualTo: 'l') ifTrue: [currentDirection rotateLeft].
			(anInstructionToPerform isEqualTo: 'r') ifTrue: [currentDirection rotateRight].		
			] ifFalse:[
			self signalInvalidInstruction.		
			]
		
		].
	"
	(instructionSequenceToPerform isEqualTo: 'f') ifTrue: [
		currentDirection moveForward.
		].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackward.
		].
	
	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection rotateLeft].
	(instructionSequenceToPerform isEqualTo: 'r') ifTrue: [currentDirection rotateRight].
	"
	 ! !

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 01:56:32'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 01:56:32'!
FAILURE!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 01:56:32'!
FAILURE!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 01:56:32'!
FAILURE!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 01:56:32'!
FAILURE!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 01:56:32'!
FAILURE!

!testRun: #MarsRoverTest #test07xxx stamp: 'CR 10/26/2020 01:56:32'!
FAILURE!

!testRun: #MarsRoverTest #test08xxx stamp: 'CR 10/26/2020 01:56:32'!
FAILURE!

!testRun: #MarsRoverTest #test09xxx stamp: 'CR 10/26/2020 01:56:32'!
FAILURE!

!testRun: #MarsRoverTest #test10xxx stamp: 'CR 10/26/2020 01:56:32'!
FAILURE!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 01:56:37'!
FAILURE!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 01:56:37'!
FAILURE!

(self at: index)!

(self indexOf: anObject) ~= 0!

anInstructionToPerform isEqualTo: 'f'!
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 02:00:31' prior: 50879865!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	
	instructionSequenceToPerform do: [ : anInstructionToPerform |
		 ( 'fbrl' includes: anInstructionToPerform) ifTrue: [
			(anInstructionToPerform isEqualTo: $f) ifTrue: [
			currentDirection moveForward.		].
			(anInstructionToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackward. ].
			(anInstructionToPerform isEqualTo: 'l') ifTrue: [currentDirection rotateLeft].
			(anInstructionToPerform isEqualTo: 'r') ifTrue: [currentDirection rotateRight].		
			] ifFalse:[
			self signalInvalidInstruction.		
			]
		
		].
	"
	(instructionSequenceToPerform isEqualTo: 'f') ifTrue: [
		currentDirection moveForward.
		].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackward.
		].
	
	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection rotateLeft].
	(instructionSequenceToPerform isEqualTo: 'r') ifTrue: [currentDirection rotateRight].
	"
	 ! !

'r'!
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 02:01:04' prior: 50879933!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	
	instructionSequenceToPerform do: [ : anInstructionToPerform |
		 ( 'fbrl' includes: anInstructionToPerform) ifTrue: [
			(anInstructionToPerform isEqualTo: $f) ifTrue: [
			currentDirection moveForward.		].
			(anInstructionToPerform isEqualTo: $b) ifTrue: [
		currentDirection moveBackward. ].
			(anInstructionToPerform isEqualTo: $l) ifTrue: [currentDirection rotateLeft].
			(anInstructionToPerform isEqualTo: $r) ifTrue: [currentDirection rotateRight].		
			] ifFalse:[
			self signalInvalidInstruction.		
			]
		
		].
	"
	(instructionSequenceToPerform isEqualTo: 'f') ifTrue: [
		currentDirection moveForward.
		].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackward.
		].
	
	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection rotateLeft].
	(instructionSequenceToPerform isEqualTo: 'r') ifTrue: [currentDirection rotateRight].
	"
	 ! !

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 02:01:10'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 02:01:10'!
PASSED!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 02:01:10'!
PASSED!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 02:01:10'!
PASSED!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 02:01:10'!
PASSED!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 02:01:10'!
PASSED!

!testRun: #MarsRoverTest #test07xxx stamp: 'CR 10/26/2020 02:01:10'!
PASSED!

!testRun: #MarsRoverTest #test08xxx stamp: 'CR 10/26/2020 02:01:10'!
PASSED!

!testRun: #MarsRoverTest #test09xxx stamp: 'CR 10/26/2020 02:01:10'!
PASSED!

!testRun: #MarsRoverTest #test10xxx stamp: 'CR 10/26/2020 02:01:10'!
ERROR!

!testRun: #MarsRoverTest #test10xxx stamp: 'CR 10/26/2020 02:01:10'!
ERROR!

----SNAPSHOT----(26 October 2020 02:01:21) CuisUniversity-4384.image priorSource: 17532853!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 02:01:39' prior: 50879680!
test10xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'S'.
	aMarsRover performInstructions: 'rr'.
	self assert: (aMarsRover direction isKindOf: North).
	
	! !

----SNAPSHOT----(26 October 2020 02:04:46) CuisUniversity-4384.image priorSource: 17548168!

----QUIT----(26 October 2020 02:04:50) CuisUniversity-4384.image priorSource: 17548539!

----STARTUP---- (26 October 2020 15:17:58) as /Users/celeste/facultad/ing1/si-exercises/CuisUniversity-4384.image!

!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 15:23:39'!
test022xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'f'.
	self assert: aMarsRover position equals: 0@1.
	
	! !

!methodRemoval: MarsRoverTest #test022xxx stamp: 'CR 10/26/2020 15:24:01'!
test022xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'f'.
	self assert: aMarsRover position equals: 0@1.
	
	!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 15:25:25'!
test011xxx
	| aMarsRover |
	self 
		should: [aMarsRover := MarsRover withPosition: 0@0 andDirection: 'X'.]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: MarsRover cantCreateMarsRoverWithInvalidDirection ].
	
	! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 15:25:46' prior: 50880068!
test011xxx
	self 
		should: [  | aMarsRover |
			aMarsRover := MarsRover withPosition: 0@0 andDirection: 'X'.]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: MarsRover cantCreateMarsRoverWithInvalidDirection ].
	
	! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 15:26:16' prior: 50880079!
test011xxx
	self 
		should: [MarsRover withPosition: 0@0 andDirection: 'X'.]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: MarsRover cantCreateMarsRoverWithInvalidDirection ].
	
	! !

!testRun: #MarsRoverTest #test011xxx stamp: 'CR 10/26/2020 15:26:23'!
FAILURE!

!testRun: #MarsRoverTest #test011xxx stamp: 'CR 10/26/2020 15:26:23'!
FAILURE!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 15:27:13'!
cantCreateMarsRoverWithInvalidDirection
	
	^'Cant create MarsRover with invalid direction'! !
!MarsRover class methodsFor: 'error messages' stamp: 'CR 10/26/2020 15:27:32'!
signalInvalidDirection
	self error: MarsRover cantCreateMarsRoverWithInvalidDirection.! !
!MarsRover methodsFor: 'initialization' stamp: 'CR 10/26/2020 15:28:06' prior: 50879689!
initializeWithPosition: aCardinalPointToStartOn andDirection: aCardinalOrientationToPointTo 
	(aCardinalOrientationToPointTo = 'N') ifTrue: [self pointToNorth].
	(aCardinalOrientationToPointTo = 'E') ifTrue: [self pointToEast].
	(aCardinalOrientationToPointTo = 'S') ifTrue: [self pointToSouth].
	currentPosition := aCardinalPointToStartOn.
	! !

!testRun: #MarsRoverTest #test011xxx stamp: 'CR 10/26/2020 15:28:10'!
FAILURE!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 15:28:10'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 15:28:10'!
PASSED!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 15:28:10'!
PASSED!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 15:28:10'!
PASSED!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 15:28:10'!
PASSED!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 15:28:10'!
PASSED!

!testRun: #MarsRoverTest #test07xxx stamp: 'CR 10/26/2020 15:28:10'!
PASSED!

!testRun: #MarsRoverTest #test08xxx stamp: 'CR 10/26/2020 15:28:10'!
PASSED!

!testRun: #MarsRoverTest #test09xxx stamp: 'CR 10/26/2020 15:28:10'!
PASSED!

!testRun: #MarsRoverTest #test10xxx stamp: 'CR 10/26/2020 15:28:10'!
ERROR!

'NES' includes: 'NE'!
!MarsRover methodsFor: 'initialization' stamp: 'CR 10/26/2020 15:30:23' prior: 50880117!
initializeWithPosition: aCardinalPointToStartOn andDirection: aCardinalOrientationToPointTo 
	('NES' includes: aCardinalOrientationToPointTo) ifFalse: [self signalInvalidDirection ].
	(aCardinalOrientationToPointTo = 'N') ifTrue: [self pointToNorth].
	(aCardinalOrientationToPointTo = 'E') ifTrue: [self pointToEast].
	(aCardinalOrientationToPointTo = 'S') ifTrue: [self pointToSouth].
	currentPosition := aCardinalPointToStartOn.
	! !

!testRun: #MarsRoverTest #test011xxx stamp: 'CR 10/26/2020 15:30:35'!
FAILURE!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 15:30:35'!
ERROR!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 15:30:35'!
ERROR!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 15:30:35'!
ERROR!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 15:30:35'!
ERROR!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 15:30:35'!
ERROR!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 15:30:35'!
ERROR!

!testRun: #MarsRoverTest #test07xxx stamp: 'CR 10/26/2020 15:30:35'!
ERROR!

!testRun: #MarsRoverTest #test08xxx stamp: 'CR 10/26/2020 15:30:35'!
ERROR!

!testRun: #MarsRoverTest #test09xxx stamp: 'CR 10/26/2020 15:30:35'!
ERROR!

!testRun: #MarsRoverTest #test10xxx stamp: 'CR 10/26/2020 15:30:35'!
ERROR!

!testRun: #MarsRoverTest #test011xxx stamp: 'CR 10/26/2020 15:31:14'!
FAILURE!

!testRun: #MarsRoverTest #test011xxx stamp: 'CR 10/26/2020 15:31:14'!
FAILURE!

!testRun: #MarsRoverTest #test011xxx stamp: 'CR 10/26/2020 15:31:43'!
FAILURE!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 15:31:48'!
ERROR!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 15:31:48'!
ERROR!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 15:31:57'!
ERROR!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 15:31:57'!
ERROR!
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 15:33:20' prior: 50879969!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	
	instructionSequenceToPerform do: [ : anInstructionToPerform |
		 ( 'fbrl' includes: anInstructionToPerform) ifTrue: [
			(anInstructionToPerform isEqualTo: $f) ifTrue: [
			currentDirection moveForward.		].
			(anInstructionToPerform isEqualTo: $b) ifTrue: [
		currentDirection moveBackward. ].
			(anInstructionToPerform isEqualTo: $l) ifTrue: [currentDirection rotateLeft].
			(anInstructionToPerform isEqualTo: $r) ifTrue: [currentDirection rotateRight].		
			] ifFalse:[
			self class signalInvalidInstruction.		
			]
		
		].
	"
	(instructionSequenceToPerform isEqualTo: 'f') ifTrue: [
		currentDirection moveForward.
		].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackward.
		].
	
	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection rotateLeft].
	(instructionSequenceToPerform isEqualTo: 'r') ifTrue: [currentDirection rotateRight].
	"
	 ! !
!MarsRover methodsFor: 'initialization' stamp: 'CR 10/26/2020 15:33:31' prior: 50880159!
initializeWithPosition: aCardinalPointToStartOn andDirection: aCardinalOrientationToPointTo 
	('NES' includes: aCardinalOrientationToPointTo) ifFalse: [self class signalInvalidDirection ].
	(aCardinalOrientationToPointTo = 'N') ifTrue: [self pointToNorth].
	(aCardinalOrientationToPointTo = 'E') ifTrue: [self pointToEast].
	(aCardinalOrientationToPointTo = 'S') ifTrue: [self pointToSouth].
	currentPosition := aCardinalPointToStartOn.
	! !

!testRun: #MarsRoverTest #test011xxx stamp: 'CR 10/26/2020 15:33:37'!
PASSED!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 15:33:37'!
ERROR!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 15:33:37'!
ERROR!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 15:33:37'!
ERROR!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 15:33:37'!
ERROR!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 15:33:37'!
ERROR!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 15:33:37'!
ERROR!

!testRun: #MarsRoverTest #test07xxx stamp: 'CR 10/26/2020 15:33:37'!
ERROR!

!testRun: #MarsRoverTest #test08xxx stamp: 'CR 10/26/2020 15:33:37'!
ERROR!

!testRun: #MarsRoverTest #test09xxx stamp: 'CR 10/26/2020 15:33:37'!
ERROR!

!testRun: #MarsRoverTest #test10xxx stamp: 'CR 10/26/2020 15:33:37'!
ERROR!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 15:33:43'!
ERROR!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 15:33:43'!
ERROR!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 15:33:57'!
ERROR!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 15:33:57'!
ERROR!
!MarsRover methodsFor: 'initialization' stamp: 'CR 10/26/2020 15:34:38' prior: 50880255!
initializeWithPosition: aCardinalPointToStartOn andDirection: aCardinalOrientationToPointTo 
	('NES' includes: aCardinalOrientationToPointTo) ifFalse: [self class signalInvalidDirection ].
	(aCardinalOrientationToPointTo = 'N') ifTrue: [self pointToNorth].
	(aCardinalOrientationToPointTo = 'E') ifTrue: [self pointToEast].
	(aCardinalOrientationToPointTo = 'S') ifTrue: [self pointToSouth].
	currentPosition := aCardinalPointToStartOn.
	! !

'NES' includes: aCardinalOrientationToPointTo!
!MarsRover methodsFor: 'initialization' stamp: 'CR 10/26/2020 15:36:24' prior: 50880308!
initializeWithPosition: aCardinalPointToStartOn andDirection: aCardinalOrientationToPointTo 
	('NES' includes: (aCardinalOrientationToPointTo at: 1)) ifFalse: [self class signalInvalidDirection ].
	(aCardinalOrientationToPointTo = 'N') ifTrue: [self pointToNorth].
	(aCardinalOrientationToPointTo = 'E') ifTrue: [self pointToEast].
	(aCardinalOrientationToPointTo = 'S') ifTrue: [self pointToSouth].
	currentPosition := aCardinalPointToStartOn.
	! !

!testRun: #MarsRoverTest #test011xxx stamp: 'CR 10/26/2020 15:36:28'!
PASSED!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 15:36:28'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 15:36:28'!
PASSED!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 15:36:28'!
PASSED!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 15:36:28'!
PASSED!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 15:36:28'!
PASSED!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 15:36:28'!
PASSED!

!testRun: #MarsRoverTest #test07xxx stamp: 'CR 10/26/2020 15:36:28'!
PASSED!

!testRun: #MarsRoverTest #test08xxx stamp: 'CR 10/26/2020 15:36:28'!
PASSED!

!testRun: #MarsRoverTest #test09xxx stamp: 'CR 10/26/2020 15:36:28'!
PASSED!

!testRun: #MarsRoverTest #test10xxx stamp: 'CR 10/26/2020 15:36:28'!
ERROR!

!testRun: #MarsRoverTest #test10xxx stamp: 'CR 10/26/2020 15:36:28'!
ERROR!
!South methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 15:36:42'!
rotateRight
	self shouldBeImplemented.! !
!South methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 15:37:22' prior: 50880373!
rotateRight
	marsRoverAttachedTo moveWest.! !

!testRun: #MarsRoverTest #test011xxx stamp: 'CR 10/26/2020 15:37:36'!
PASSED!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 15:37:36'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 15:37:36'!
PASSED!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 15:37:36'!
PASSED!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 15:37:36'!
PASSED!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 15:37:36'!
PASSED!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 15:37:36'!
PASSED!

!testRun: #MarsRoverTest #test07xxx stamp: 'CR 10/26/2020 15:37:36'!
PASSED!

!testRun: #MarsRoverTest #test08xxx stamp: 'CR 10/26/2020 15:37:36'!
PASSED!

!testRun: #MarsRoverTest #test09xxx stamp: 'CR 10/26/2020 15:37:36'!
PASSED!

!testRun: #MarsRoverTest #test10xxx stamp: 'CR 10/26/2020 15:37:36'!
FAILURE!

!testRun: #MarsRoverTest #test10xxx stamp: 'CR 10/26/2020 15:37:36'!
FAILURE!
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 15:38:51' prior: 50880219!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	
	instructionSequenceToPerform do: [ : anInstructionToPerform |
		 ( 'fbrl' includes: anInstructionToPerform) ifTrue: [
			(anInstructionToPerform = $f) ifTrue: [
			currentDirection moveForward.		].
			(anInstructionToPerform = $b) ifTrue: [
		currentDirection moveBackward. ].
			(anInstructionToPerform = $l) ifTrue: [currentDirection rotateLeft].
			(anInstructionToPerform = $r) ifTrue: [currentDirection rotateRight].		
			] ifFalse:[
			self class signalInvalidInstruction.		
			]
		
		].
	"
	(instructionSequenceToPerform isEqualTo: 'f') ifTrue: [
		currentDirection moveForward.
		].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackward.
		].
	
	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection rotateLeft].
	(instructionSequenceToPerform isEqualTo: 'r') ifTrue: [currentDirection rotateRight].
	"
	 ! !

!testRun: #MarsRoverTest #test10xxx stamp: 'CR 10/26/2020 15:39:13'!
FAILURE!

!testRun: #MarsRoverTest #test10xxx stamp: 'CR 10/26/2020 15:39:13'!
FAILURE!

aMarsRover direction!
!South methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 15:41:06' prior: 50880378!
rotateRight
	marsRoverAttachedTo pointToWest.! !

!testRun: #MarsRoverTest #test011xxx stamp: 'CR 10/26/2020 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 15:41:14'!
PASSED!

!testRun: #MarsRoverTest #test07xxx stamp: 'CR 10/26/2020 15:41:14'!
PASSED!

!testRun: #MarsRoverTest #test08xxx stamp: 'CR 10/26/2020 15:41:14'!
PASSED!

!testRun: #MarsRoverTest #test09xxx stamp: 'CR 10/26/2020 15:41:14'!
PASSED!

!testRun: #MarsRoverTest #test10xxx stamp: 'CR 10/26/2020 15:41:14'!
ERROR!

!testRun: #MarsRoverTest #test10xxx stamp: 'CR 10/26/2020 15:41:14'!
ERROR!
!West methodsFor: 'nil' stamp: 'CR 10/26/2020 15:41:43'!
rotateRight
	marsRoverAttachedTo pointToNorth.! !

!testRun: #MarsRoverTest #test011xxx stamp: 'CR 10/26/2020 15:41:45'!
PASSED!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 15:41:45'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 15:41:45'!
PASSED!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 15:41:45'!
PASSED!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 15:41:45'!
PASSED!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 15:41:45'!
PASSED!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 15:41:45'!
PASSED!

!testRun: #MarsRoverTest #test07xxx stamp: 'CR 10/26/2020 15:41:45'!
PASSED!

!testRun: #MarsRoverTest #test08xxx stamp: 'CR 10/26/2020 15:41:45'!
PASSED!

!testRun: #MarsRoverTest #test09xxx stamp: 'CR 10/26/2020 15:41:45'!
PASSED!

!testRun: #MarsRoverTest #test10xxx stamp: 'CR 10/26/2020 15:41:45'!
PASSED!
!MarsRover methodsFor: 'initialization' stamp: 'CR 10/26/2020 15:42:41'!
verifyThatCardinalOrientationIsValid: aCardinalOrientationToPointTo

	^ ('NES' includes: (aCardinalOrientationToPointTo at: 1)) ifFalse: [self class signalInvalidDirection ]! !
!MarsRover methodsFor: 'initialization' stamp: 'CR 10/26/2020 15:42:41' prior: 50880327!
initializeWithPosition: aCardinalPointToStartOn andDirection: aCardinalOrientationToPointTo 
	self verifyThatCardinalOrientationIsValid: aCardinalOrientationToPointTo.
	(aCardinalOrientationToPointTo = 'N') ifTrue: [self pointToNorth].
	(aCardinalOrientationToPointTo = 'E') ifTrue: [self pointToEast].
	(aCardinalOrientationToPointTo = 'S') ifTrue: [self pointToSouth].
	currentPosition := aCardinalPointToStartOn.
	! !
!MarsRover methodsFor: 'initialization' stamp: 'CR 10/26/2020 15:45:39' prior: 50880517!
verifyThatCardinalOrientationIsValid: aCardinalOrientationToPointTo

	^ (('NES' includes: (aCardinalOrientationToPointTo at: 1)) and: [aCardinalOrientationToPointTo size = 1]) ifFalse: [self class signalInvalidDirection ]! !
!MarsRover methodsFor: 'initialization' stamp: 'CR 10/26/2020 15:46:38'!
isACardinalPoint: aCardinalOrientationToPointTo

	^ ('NES' includes: (aCardinalOrientationToPointTo at: 1)) and: [aCardinalOrientationToPointTo size = 1]! !
!MarsRover methodsFor: 'initialization' stamp: 'CR 10/26/2020 15:46:38' prior: 50880542!
verifyThatCardinalOrientationIsValid: aCardinalOrientationToPointTo

	^ (self isACardinalPoint: aCardinalOrientationToPointTo) ifFalse: [self class signalInvalidDirection ]! !
!MarsRover methodsFor: 'initialization' stamp: 'CR 10/26/2020 15:47:04' prior: 50880560!
verifyThatCardinalOrientationIsValid: aCardinalOrientationToPointTo

	(self isACardinalPoint: aCardinalOrientationToPointTo) ifFalse: [self class signalInvalidDirection ]! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 15:48:00'!
isAValidInstruction: anInstructionToPerform

	^ 'fbrl' includes: anInstructionToPerform! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 15:48:00' prior: 50880412!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	
	instructionSequenceToPerform do: [ : anInstructionToPerform |
		 ( self isAValidInstruction: anInstructionToPerform) ifTrue: [
			(anInstructionToPerform = $f) ifTrue: [
			currentDirection moveForward.		].
			(anInstructionToPerform = $b) ifTrue: [
		currentDirection moveBackward. ].
			(anInstructionToPerform = $l) ifTrue: [currentDirection rotateLeft].
			(anInstructionToPerform = $r) ifTrue: [currentDirection rotateRight].		
			] ifFalse:[
			self class signalInvalidInstruction.		
			]
		
		].
	"
	(instructionSequenceToPerform isEqualTo: 'f') ifTrue: [
		currentDirection moveForward.
		].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackward.
		].
	
	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection rotateLeft].
	(instructionSequenceToPerform isEqualTo: 'r') ifTrue: [currentDirection rotateRight].
	"
	 ! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 15:48:42' prior: 50880583!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	
	instructionSequenceToPerform do: [ : anInstructionToPerform |
		 ( self isAValidInstruction: anInstructionToPerform) ifTrue: [
			
			(anInstructionToPerform = $f) ifTrue: [
			currentDirection moveForward.		].
			(anInstructionToPerform = $b) ifTrue: [
		currentDirection moveBackward. ].
			(anInstructionToPerform = $l) ifTrue: [currentDirection rotateLeft].
			(anInstructionToPerform = $r) ifTrue: [currentDirection rotateRight].		
			] ifFalse:[
			self class signalInvalidInstruction.		
			]
		
		].
	"
	(instructionSequenceToPerform isEqualTo: 'f') ifTrue: [
		currentDirection moveForward.
		].
	(instructionSequenceToPerform isEqualTo: 'b') ifTrue: [
		currentDirection moveBackward.
		].
	
	(instructionSequenceToPerform isEqualTo: 'l') ifTrue: [currentDirection rotateLeft].
	(instructionSequenceToPerform isEqualTo: 'r') ifTrue: [currentDirection rotateRight].
	"
	 ! !
!MarsRover methodsFor: 'nil' stamp: 'CR 10/26/2020 15:50:29'!
performActionWithMarsRover: anInstructionToPerform

(anInstructionToPerform = $f) ifTrue: [
			currentDirection moveForward.		].
			(anInstructionToPerform = $b) ifTrue: [
		currentDirection moveBackward. ].
			(anInstructionToPerform = $l) ifTrue: [currentDirection rotateLeft].
			(anInstructionToPerform = $r) ifTrue: [currentDirection rotateRight].		
			! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 15:51:11' prior: 50880618!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	
	instructionSequenceToPerform do: [ : anInstructionToPerform |
		 ( self isAValidInstruction: anInstructionToPerform) ifTrue: [
			self performActionWithMarsRover: anInstructionToPerform
			] ifFalse:[
			self class signalInvalidInstruction.		
			]	
		].
	 ! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 15:52:04' prior: 50880666!
performInstructions: instructionSequenceToPerform

	"(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction]."
	
	instructionSequenceToPerform do: [ : anInstructionToPerform |
		 ( self isAValidInstruction: anInstructionToPerform) ifTrue: [
			self performActionWithMarsRover: anInstructionToPerform
			] ifFalse:[
			self class signalInvalidInstruction.		
			]	
		].
	 ! !

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 15:52:10'!
FAILURE!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 15:52:10'!
FAILURE!

!testRun: #MarsRoverTest #test011xxx stamp: 'CR 10/26/2020 15:52:17'!
PASSED!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 15:52:17'!
FAILURE!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 15:52:17'!
PASSED!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 15:52:17'!
PASSED!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 15:52:17'!
PASSED!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 15:52:17'!
PASSED!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 15:52:17'!
PASSED!

!testRun: #MarsRoverTest #test07xxx stamp: 'CR 10/26/2020 15:52:17'!
PASSED!

!testRun: #MarsRoverTest #test08xxx stamp: 'CR 10/26/2020 15:52:17'!
PASSED!

!testRun: #MarsRoverTest #test09xxx stamp: 'CR 10/26/2020 15:52:17'!
PASSED!

!testRun: #MarsRoverTest #test10xxx stamp: 'CR 10/26/2020 15:52:17'!
PASSED!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 15:52:17'!
FAILURE!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 15:52:53'!
FAILURE!
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 15:54:14' prior: 50880682!
performInstructions: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].
	
	instructionSequenceToPerform do: [ : anInstructionToPerform |
		 ( self isAValidInstruction: anInstructionToPerform) ifTrue: [
			self performActionWithMarsRover: anInstructionToPerform
			] ifFalse:[
			self class signalInvalidInstruction.		
			]	
		].
	 ! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 15:55:23'!
verifyThatInstructionsSequenceIsNotEmpty: instructionSequenceToPerform

	^ (instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction]! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 15:55:23' prior: 50880735!
performInstructions: instructionSequenceToPerform

	self verifyThatInstructionsSequenceIsNotEmpty: instructionSequenceToPerform.
	
	instructionSequenceToPerform do: [ : anInstructionToPerform |
		 ( self isAValidInstruction: anInstructionToPerform) ifTrue: [
			self performActionWithMarsRover: anInstructionToPerform
			] ifFalse:[
			self class signalInvalidInstruction.		
			]	
		].
	 ! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 15:55:33' prior: 50880750!
verifyThatInstructionsSequenceIsNotEmpty: instructionSequenceToPerform

	(instructionSequenceToPerform isEmpty) ifTrue: [self class signalInvalidInstruction].! !

!testRun: #MarsRoverTest #test011xxx stamp: 'CR 10/26/2020 15:55:40'!
PASSED!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 15:55:40'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 15:55:40'!
PASSED!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 15:55:40'!
PASSED!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 15:55:40'!
PASSED!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 15:55:40'!
PASSED!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 15:55:40'!
PASSED!

!testRun: #MarsRoverTest #test07xxx stamp: 'CR 10/26/2020 15:55:40'!
PASSED!

!testRun: #MarsRoverTest #test08xxx stamp: 'CR 10/26/2020 15:55:40'!
PASSED!

!testRun: #MarsRoverTest #test09xxx stamp: 'CR 10/26/2020 15:55:40'!
PASSED!

!testRun: #MarsRoverTest #test10xxx stamp: 'CR 10/26/2020 15:55:40'!
PASSED!
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 15:56:47' prior: 50880758!
performInstructions: instructionsSequenceToPerform

	self verifyThatInstructionsSequenceIsNotEmpty: instructionsSequenceToPerform.
	
	instructionsSequenceToPerform do: [ : anInstructionToPerform |
		 ( self isAValidInstruction: anInstructionToPerform) ifTrue: [
			self performActionWithMarsRover: anInstructionToPerform
			] ifFalse:[
			self class signalInvalidInstruction.		
			]	
		].
	 ! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 15:57:27' prior: 50880808!
performInstructions: instructionsSequenceToPerform

	self verifyThatInstructionsSequenceIsNotEmpty: instructionsSequenceToPerform.

	instructionsSequenceToPerform do: [ : anInstructionToPerform |
		 ( self isAValidInstruction: anInstructionToPerform) ifTrue: [
			self performActionWithMarsRover: anInstructionToPerform
			] ifFalse:[
			self class signalInvalidInstruction.		
			]	
		].
	 ! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 15:57:46'!
processInstructionsSequence: instructionsSequenceToPerform

	^ instructionsSequenceToPerform do: [ : anInstructionToPerform |
		 ( self isAValidInstruction: anInstructionToPerform) ifTrue: [
			self performActionWithMarsRover: anInstructionToPerform
			] ifFalse:[
			self class signalInvalidInstruction.		
			]	
		]! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 15:57:46' prior: 50880824!
performInstructions: instructionsSequenceToPerform

	self verifyThatInstructionsSequenceIsNotEmpty: instructionsSequenceToPerform.

	self processInstructionsSequence: instructionsSequenceToPerform.
	 ! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 15:57:54' prior: 50880839!
processInstructionsSequence: instructionsSequenceToPerform

	instructionsSequenceToPerform do: [ : anInstructionToPerform |
		 ( self isAValidInstruction: anInstructionToPerform) ifTrue: [
			self performActionWithMarsRover: anInstructionToPerform
			] ifFalse:[
			self class signalInvalidInstruction.		
			]	
		]! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 15:57:56' prior: 50880862!
processInstructionsSequence: instructionsSequenceToPerform

	instructionsSequenceToPerform do: [ : anInstructionToPerform |
		 ( self isAValidInstruction: anInstructionToPerform) ifTrue: [
			self performActionWithMarsRover: anInstructionToPerform
			] ifFalse:[
			self class signalInvalidInstruction.		
			]	
		].! !
!MarsRover methodsFor: 'nil' stamp: 'CR 10/26/2020 15:58:53'!
checkIfValidInstructionAndPerform: anInstructionToPerform

	( self isAValidInstruction: anInstructionToPerform) ifTrue: [
			self performActionWithMarsRover: anInstructionToPerform
			] ifFalse:[
			self class signalInvalidInstruction.		
	].! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 15:59:23' prior: 50880875!
processInstructionsSequence: instructionsSequenceToPerform

	instructionsSequenceToPerform do: [ : anInstructionToPerform |
		 self checkIfValidInstructionAndPerform: anInstructionToPerform.
		].! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 15:59:27' prior: 50880898!
processInstructionsSequence: instructionsSequenceToPerform

	instructionsSequenceToPerform do: [ : anInstructionToPerform |
		 self checkIfValidInstructionAndPerform: anInstructionToPerform.
	].! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 15:59:48' prior: 50880652!
performActionWithMarsRover: anInstructionToPerform

	(anInstructionToPerform = $f) ifTrue: [
			currentDirection moveForward.		].
			(anInstructionToPerform = $b) ifTrue: [
		currentDirection moveBackward. ].
			(anInstructionToPerform = $l) ifTrue: [currentDirection rotateLeft].
			(anInstructionToPerform = $r) ifTrue: [currentDirection rotateRight].		
			! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 16:00:18' prior: 50880916!
performActionWithMarsRover: anInstructionToPerform

	(anInstructionToPerform = $f) ifTrue: [
			currentDirection moveForward.		].
		
	(anInstructionToPerform = $b) ifTrue: [currentDirection moveBackward. ].
	(anInstructionToPerform = $l) ifTrue: [currentDirection rotateLeft].
	(anInstructionToPerform = $r) ifTrue: [currentDirection rotateRight].
			! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 16:00:26' prior: 50880931!
performActionWithMarsRover: anInstructionToPerform

	(anInstructionToPerform = $f) ifTrue: [currentDirection moveForward.		].
	(anInstructionToPerform = $b) ifTrue: [currentDirection moveBackward. ].
	(anInstructionToPerform = $l) ifTrue: [currentDirection rotateLeft].
	(anInstructionToPerform = $r) ifTrue: [currentDirection rotateRight].
			! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 16:01:17'!
ifActionIsMoveForward: anInstructionToPerform

	^ anInstructionToPerform = $f! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 16:01:17' prior: 50880945!
performActionWithMarsRover: anInstructionToPerform

	((self ifActionIsMoveForward: anInstructionToPerform)) ifTrue: [currentDirection moveForward.		].
	(anInstructionToPerform = $b) ifTrue: [currentDirection moveBackward. ].
	(anInstructionToPerform = $l) ifTrue: [currentDirection rotateLeft].
	(anInstructionToPerform = $r) ifTrue: [currentDirection rotateRight].
			! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 16:01:31' prior: 50880965!
performActionWithMarsRover: anInstructionToPerform

	(self ifActionIsMoveForward: anInstructionToPerform) ifTrue: [currentDirection moveForward.		].
	(anInstructionToPerform = $b) ifTrue: [currentDirection moveBackward. ].
	(anInstructionToPerform = $l) ifTrue: [currentDirection rotateLeft].
	(anInstructionToPerform = $r) ifTrue: [currentDirection rotateRight].
			! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 16:01:51'!
ifActionIsMoveBackward: anInstructionToPerform

	^ anInstructionToPerform = $b! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 16:01:51' prior: 50880980!
performActionWithMarsRover: anInstructionToPerform

	(self ifActionIsMoveForward: anInstructionToPerform) ifTrue: [currentDirection moveForward.		].
	((self ifActionIsMoveBackward: anInstructionToPerform)) ifTrue: [currentDirection moveBackward. ].
	(anInstructionToPerform = $l) ifTrue: [currentDirection rotateLeft].
	(anInstructionToPerform = $r) ifTrue: [currentDirection rotateRight].
			! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 16:02:15' prior: 50881000!
performActionWithMarsRover: anInstructionToPerform

	(self ifActionIsMoveForward: anInstructionToPerform) ifTrue: [currentDirection moveForward.		].
	(self ifActionIsMoveBackward: anInstructionToPerform) ifTrue: [currentDirection moveBackward. ].
	(anInstructionToPerform = $l) ifTrue: [currentDirection rotateLeft].
	(anInstructionToPerform = $r) ifTrue: [currentDirection rotateRight].
			! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 16:02:33'!
ifActionIsRotateLeft: anInstructionToPerform

	^ anInstructionToPerform = $l! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 16:02:33' prior: 50881016!
performActionWithMarsRover: anInstructionToPerform

	(self ifActionIsMoveForward: anInstructionToPerform) ifTrue: [currentDirection moveForward.		].
	(self ifActionIsMoveBackward: anInstructionToPerform) ifTrue: [currentDirection moveBackward. ].
	((self ifActionIsRotateLeft: anInstructionToPerform)) ifTrue: [currentDirection rotateLeft].
	(anInstructionToPerform = $r) ifTrue: [currentDirection rotateRight].
			! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 16:02:41' prior: 50881037!
performActionWithMarsRover: anInstructionToPerform

	(self ifActionIsMoveForward: anInstructionToPerform) ifTrue: [currentDirection moveForward.		].
	(self ifActionIsMoveBackward: anInstructionToPerform) ifTrue: [currentDirection moveBackward. ].
	(self ifActionIsRotateLeft: anInstructionToPerform) ifTrue: [currentDirection rotateLeft].
	(anInstructionToPerform = $r) ifTrue: [currentDirection rotateRight].
			! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 16:02:53'!
ifActionIsRotateRight: anInstructionToPerform

	^ anInstructionToPerform = $r! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 16:02:53' prior: 50881053!
performActionWithMarsRover: anInstructionToPerform

	(self ifActionIsMoveForward: anInstructionToPerform) ifTrue: [currentDirection moveForward.		].
	(self ifActionIsMoveBackward: anInstructionToPerform) ifTrue: [currentDirection moveBackward. ].
	(self ifActionIsRotateLeft: anInstructionToPerform) ifTrue: [currentDirection rotateLeft].
	((self ifActionIsRotateRight: anInstructionToPerform)) ifTrue: [currentDirection rotateRight].
			! !
!MarsRover methodsFor: 'instruction' stamp: 'CR 10/26/2020 16:02:58' prior: 50881075!
performActionWithMarsRover: anInstructionToPerform

	(self ifActionIsMoveForward: anInstructionToPerform) ifTrue: [currentDirection moveForward.		].
	(self ifActionIsMoveBackward: anInstructionToPerform) ifTrue: [currentDirection moveBackward. ].
	(self ifActionIsRotateLeft: anInstructionToPerform) ifTrue: [currentDirection rotateLeft].
	(self ifActionIsRotateRight: anInstructionToPerform) ifTrue: [currentDirection rotateRight].
			! !

!testRun: #MarsRoverTest #test011xxx stamp: 'CR 10/26/2020 16:06:01'!
PASSED!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 16:06:01'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 16:06:01'!
PASSED!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 16:06:01'!
PASSED!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 16:06:01'!
PASSED!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 16:06:01'!
PASSED!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 16:06:01'!
PASSED!

!testRun: #MarsRoverTest #test07xxx stamp: 'CR 10/26/2020 16:06:01'!
PASSED!

!testRun: #MarsRoverTest #test08xxx stamp: 'CR 10/26/2020 16:06:01'!
PASSED!

!testRun: #MarsRoverTest #test09xxx stamp: 'CR 10/26/2020 16:06:01'!
PASSED!

!testRun: #MarsRoverTest #test10xxx stamp: 'CR 10/26/2020 16:06:01'!
PASSED!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 16:06:24'!
test11xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'S'.
	aMarsRover performInstructions: 'll'.
	self assert: (aMarsRover direction isKindOf: North).
	
	! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 16:07:33' prior: 50881135!
test11xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'W'.
	aMarsRover performInstructions: 'll'.
	self assert: (aMarsRover direction isKindOf: East).
	
	! !

!testRun: #MarsRoverTest #test11xxx stamp: 'CR 10/26/2020 16:07:35'!
ERROR!

!testRun: #MarsRoverTest #test11xxx stamp: 'CR 10/26/2020 16:07:35'!
ERROR!
!MarsRover methodsFor: 'initialization' stamp: 'CR 10/26/2020 16:08:10' prior: 50880526!
initializeWithPosition: aCardinalPointToStartOn andDirection: aCardinalOrientationToPointTo 
	self verifyThatCardinalOrientationIsValid: aCardinalOrientationToPointTo.
	(aCardinalOrientationToPointTo = 'N') ifTrue: [self pointToNorth].
	(aCardinalOrientationToPointTo = 'E') ifTrue: [self pointToEast].
	(aCardinalOrientationToPointTo = 'W') ifTrue: [self pointToWest].
	(aCardinalOrientationToPointTo = 'S') ifTrue: [self pointToSouth].
	currentPosition := aCardinalPointToStartOn.
	! !

!testRun: #MarsRoverTest #test011xxx stamp: 'CR 10/26/2020 16:08:15'!
PASSED!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 16:08:15'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 16:08:15'!
PASSED!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 16:08:15'!
PASSED!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 16:08:15'!
PASSED!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 16:08:15'!
PASSED!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 16:08:15'!
PASSED!

!testRun: #MarsRoverTest #test07xxx stamp: 'CR 10/26/2020 16:08:15'!
PASSED!

!testRun: #MarsRoverTest #test08xxx stamp: 'CR 10/26/2020 16:08:15'!
PASSED!

!testRun: #MarsRoverTest #test09xxx stamp: 'CR 10/26/2020 16:08:15'!
PASSED!

!testRun: #MarsRoverTest #test10xxx stamp: 'CR 10/26/2020 16:08:15'!
PASSED!

!testRun: #MarsRoverTest #test11xxx stamp: 'CR 10/26/2020 16:08:15'!
ERROR!

!testRun: #MarsRoverTest #test11xxx stamp: 'CR 10/26/2020 16:08:15'!
ERROR!

!testRun: #MarsRoverTest #test11xxx stamp: 'CR 10/26/2020 16:08:24'!
ERROR!

!testRun: #MarsRoverTest #test11xxx stamp: 'CR 10/26/2020 16:08:24'!
ERROR!
!MarsRover methodsFor: 'testing' stamp: 'CR 10/26/2020 16:09:05' prior: 50880552!
isACardinalPoint: aCardinalOrientationToPointTo

	^ ('NEWS' includes: (aCardinalOrientationToPointTo at: 1)) and: [aCardinalOrientationToPointTo size = 1]! !

!testRun: #MarsRoverTest #test11xxx stamp: 'CR 10/26/2020 16:09:11'!
ERROR!

!testRun: #MarsRoverTest #test11xxx stamp: 'CR 10/26/2020 16:09:12'!
ERROR!
!West methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 16:09:19'!
rotateLeft
	self shouldBeImplemented.! !
!West methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 16:09:42' prior: 50881226!
rotateLeft
	marsRoverAttachedTo pointToSouth.! !

!testRun: #MarsRoverTest #test11xxx stamp: 'CR 10/26/2020 16:09:48'!
ERROR!

!testRun: #MarsRoverTest #test11xxx stamp: 'CR 10/26/2020 16:09:48'!
ERROR!
!South methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 16:09:55'!
rotateLeft
	self shouldBeImplemented.! !
!South methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 16:10:07' prior: 50881240!
rotateLeft
	marsRoverAttachedTo pointToEast. ! !

----SNAPSHOT----(26 October 2020 16:12:52) CuisUniversity-4384.image priorSource: 17548632!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 16:13:57'!
test12xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'W'.
	aMarsRover performInstructions: 'flf'.
	self assert: (aMarsRover direction isKindOf: South).
	
	! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 16:14:17' prior: 50881252!
test12xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'W'.
	aMarsRover performInstructions: 'flf'.
	self assert: (aMarsRover direction isKindOf: South).
	self assert: aMarsRover position equals: -1@-1.
	
	! !

!testRun: #MarsRoverTest #test12xxx stamp: 'CR 10/26/2020 16:14:45'!
ERROR!

!testRun: #MarsRoverTest #test12xxx stamp: 'CR 10/26/2020 16:14:45'!
ERROR!
!West methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 16:14:54' overrides: 50879155!
moveForward
	self shouldBeImplemented.! !
!West methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 16:15:11' prior: 50881277 overrides: 50879155!
moveForward
	marsRoverAttachedTo moveWest.! !

!testRun: #MarsRoverTest #test12xxx stamp: 'CR 10/26/2020 16:15:15'!
ERROR!

!testRun: #MarsRoverTest #test12xxx stamp: 'CR 10/26/2020 16:15:15'!
ERROR!
!South methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 16:15:21' overrides: 50879155!
moveForward
	self shouldBeImplemented.! !
!South methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 16:15:30' prior: 50881292 overrides: 50879155!
moveForward
	marsRoverAttachedTo moveSouth.! !

!testRun: #MarsRoverTest #test12xxx stamp: 'CR 10/26/2020 16:15:34'!
PASSED!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 16:15:58'!
test13xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'W'.
	aMarsRover performInstructions: 'blb'.
	self assert: (aMarsRover direction isKindOf: South).
	self assert: aMarsRover position equals: 1@1.
	
	! !

!testRun: #MarsRoverTest #test13xxx stamp: 'CR 10/26/2020 16:16:12'!
ERROR!

!testRun: #MarsRoverTest #test13xxx stamp: 'CR 10/26/2020 16:16:12'!
ERROR!
!West methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 16:16:21' overrides: 50879159!
moveBackward
	self shouldBeImplemented.! !
!West methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 16:16:40' prior: 50881320 overrides: 50879159!
moveBackward
	marsRoverAttachedTo moveEast.! !

!testRun: #MarsRoverTest #test13xxx stamp: 'CR 10/26/2020 16:16:47'!
ERROR!

!testRun: #MarsRoverTest #test13xxx stamp: 'CR 10/26/2020 16:16:47'!
ERROR!
!South methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 16:16:54' overrides: 50879159!
moveBackward
	self shouldBeImplemented.! !
!South methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 16:17:05' prior: 50881335 overrides: 50879159!
moveBackward
	marsRoverAttachedTo moveNorth.! !

!testRun: #MarsRoverTest #test13xxx stamp: 'CR 10/26/2020 16:17:09'!
PASSED!

!testRun: #MarsRoverTest #test011xxx stamp: 'CR 10/26/2020 16:17:13'!
PASSED!

!testRun: #MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 16:17:13'!
PASSED!

!testRun: #MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 16:17:13'!
PASSED!

!testRun: #MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 16:17:13'!
PASSED!

!testRun: #MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 16:17:13'!
PASSED!

!testRun: #MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 16:17:13'!
PASSED!

!testRun: #MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 16:17:13'!
PASSED!

!testRun: #MarsRoverTest #test07xxx stamp: 'CR 10/26/2020 16:17:13'!
PASSED!

!testRun: #MarsRoverTest #test08xxx stamp: 'CR 10/26/2020 16:17:13'!
PASSED!

!testRun: #MarsRoverTest #test09xxx stamp: 'CR 10/26/2020 16:17:13'!
PASSED!

!testRun: #MarsRoverTest #test10xxx stamp: 'CR 10/26/2020 16:17:13'!
PASSED!

!testRun: #MarsRoverTest #test11xxx stamp: 'CR 10/26/2020 16:17:13'!
PASSED!

!testRun: #MarsRoverTest #test12xxx stamp: 'CR 10/26/2020 16:17:13'!
PASSED!

!testRun: #MarsRoverTest #test13xxx stamp: 'CR 10/26/2020 16:17:13'!
PASSED!
!Direction methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 16:17:39'!
rotateRight
	self subclassResponsibility.! !
!Direction methodsFor: 'as yet unclassified' stamp: 'CR 10/26/2020 16:17:46'!
rotateLeft
	self subclassResponsibility.! !
!MarsRoverTest methodsFor: 'creation' stamp: 'CR 10/26/2020 16:20:52'!
test01creatingMarsRoverWithInvalidDirectionRaisesError
	self 
		should: [MarsRover withPosition: 0@0 andDirection: 'X'.]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: MarsRover cantCreateMarsRoverWithInvalidDirection ].
	
	! !

!methodRemoval: MarsRoverTest #test011xxx stamp: 'CR 10/26/2020 16:20:54'!
test011xxx
	self 
		should: [MarsRover withPosition: 0@0 andDirection: 'X'.]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: MarsRover cantCreateMarsRoverWithInvalidDirection ].
	
	!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 16:21:37'!
test02performingEmptyInstructionRaisesError
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	self 
		should: [aMarsRover performInstructions: '']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: MarsRover cantPerformInvalidAction ].
	
	! !

!methodRemoval: MarsRoverTest #test01xxx stamp: 'CR 10/26/2020 16:21:41'!
test01xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	self 
		should: [aMarsRover performInstructions: '']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: MarsRover cantPerformInvalidAction ].
	
	!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 16:22:37'!
test02moveForwardOnNorthMovesNorth
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'f'.
	self assert: aMarsRover position equals: 0@1.
	
	! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 16:22:54'!
test03moveForwardOnNorthMovesNorth
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'f'.
	self assert: aMarsRover position equals: 0@1.
	
	! !

!methodRemoval: MarsRoverTest #test02xxx stamp: 'CR 10/26/2020 16:22:59'!
test02xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'f'.
	self assert: aMarsRover position equals: 0@1.
	
	!

!methodRemoval: MarsRoverTest #test02moveForwardOnNorthMovesNorth stamp: 'CR 10/26/2020 16:23:02'!
test02moveForwardOnNorthMovesNorth
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'f'.
	self assert: aMarsRover position equals: 0@1.
	
	!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 16:23:42'!
test04movingBackwardOnNorthMovesSouth
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'b'.
	self assert: aMarsRover position equals: 0@(-1).
	
	! !

!methodRemoval: MarsRoverTest #test03xxx stamp: 'CR 10/26/2020 16:23:46'!
test03xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'b'.
	self assert: aMarsRover position equals: 0@(-1).
	
	!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 16:23:50'!
test03movingForwardOnNorthMovesNorth
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'f'.
	self assert: aMarsRover position equals: 0@1.
	
	! !

!methodRemoval: MarsRoverTest #test03moveForwardOnNorthMovesNorth stamp: 'CR 10/26/2020 16:23:52'!
test03moveForwardOnNorthMovesNorth
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'f'.
	self assert: aMarsRover position equals: 0@1.
	
	!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 16:25:19'!
test05rotatingLeftPointingNorthPointsWest
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'l'.
	self assert: (aMarsRover direction isKindOf: West).
	
	! !

!methodRemoval: MarsRoverTest #test04xxx stamp: 'CR 10/26/2020 16:25:24'!
test04xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'l'.
	self assert: (aMarsRover direction isKindOf: West).
	
	!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 16:25:49'!
test06rotatingRightPointingNorthPointsEast
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'r'.
	self assert: (aMarsRover direction isKindOf: East).
	
	! !

!methodRemoval: MarsRoverTest #test05xxx stamp: 'CR 10/26/2020 16:25:51'!
test05xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'N'.
	aMarsRover performInstructions: 'r'.
	self assert: (aMarsRover direction isKindOf: East).
	
	!

----SNAPSHOT----(26 October 2020 16:25:54) CuisUniversity-4384.image priorSource: 17587152!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 16:26:38'!
test07movingForwardOnEastMovesEast
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'E'.
	aMarsRover performInstructions: 'f'.
	self assert: aMarsRover position equals: 1@0.
	
	! !

!methodRemoval: MarsRoverTest #test06xxx stamp: 'CR 10/26/2020 16:26:42'!
test06xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'E'.
	aMarsRover performInstructions: 'f'.
	self assert: aMarsRover position equals: 1@0.
	
	!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 16:27:03'!
test08movingBackwardOnEastMovesWest
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'E'.
	aMarsRover performInstructions: 'b'.
	self assert: aMarsRover position equals: -1@0.
	
	! !

!methodRemoval: MarsRoverTest #test07xxx stamp: 'CR 10/26/2020 16:27:05'!
test07xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'E'.
	aMarsRover performInstructions: 'b'.
	self assert: aMarsRover position equals: -1@0.
	
	!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 16:27:29'!
test09rotatingLeftOnEastPointsNorth
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'E'.
	aMarsRover performInstructions: 'l'.
	self assert: (aMarsRover direction isKindOf: North).
	
	! !

!methodRemoval: MarsRoverTest #test08xxx stamp: 'CR 10/26/2020 16:27:31'!
test08xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'E'.
	aMarsRover performInstructions: 'l'.
	self assert: (aMarsRover direction isKindOf: North).
	
	!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 16:28:00'!
test10rotatingRightOnEastPointsToSouth
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'E'.
	aMarsRover performInstructions: 'r'.
	self assert: (aMarsRover direction isKindOf: South).
	
	! !

!methodRemoval: MarsRoverTest #test09xxx stamp: 'CR 10/26/2020 16:28:01'!
test09xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'E'.
	aMarsRover performInstructions: 'r'.
	self assert: (aMarsRover direction isKindOf: South).
	
	!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 16:29:46'!
test11performManyInstructions
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'S'.
	aMarsRover performInstructions: 'rr'.
	self assert: (aMarsRover direction isKindOf: North).
	
	! !
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 16:31:37'!
test11performManyInstructionsWorks
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'S'.
	aMarsRover performInstructions: 'rr'.
	self assert: (aMarsRover direction isKindOf: North).
	
	! !

!methodRemoval: MarsRoverTest #test11performManyInstructions stamp: 'CR 10/26/2020 16:31:40'!
test11performManyInstructions
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'S'.
	aMarsRover performInstructions: 'rr'.
	self assert: (aMarsRover direction isKindOf: North).
	
	!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 16:31:59'!
test11performManyInstructionsWorksCorrectly
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'S'.
	aMarsRover performInstructions: 'rr'.
	self assert: (aMarsRover direction isKindOf: North).
	
	! !

!methodRemoval: MarsRoverTest #test11performManyInstructionsWorks stamp: 'CR 10/26/2020 16:32:00'!
test11performManyInstructionsWorks
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'S'.
	aMarsRover performInstructions: 'rr'.
	self assert: (aMarsRover direction isKindOf: North).
	
	!

!methodRemoval: MarsRoverTest #test10xxx stamp: 'CR 10/26/2020 16:32:05'!
test10xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'S'.
	aMarsRover performInstructions: 'rr'.
	self assert: (aMarsRover direction isKindOf: North).
	
	!

!methodRemoval: MarsRoverTest #test11xxx stamp: 'CR 10/26/2020 16:32:38'!
test11xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'W'.
	aMarsRover performInstructions: 'll'.
	self assert: (aMarsRover direction isKindOf: East).
	
	!
!MarsRoverTest methodsFor: 'actions' stamp: 'CR 10/26/2020 16:34:24'!
test12movingDiagonallyOnWestMovesSouthWest
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'W'.
	aMarsRover performInstructions: 'flf'.
	self assert: (aMarsRover direction isKindOf: South).
	self assert: aMarsRover position equals: -1@-1.
	
	! !

!methodRemoval: MarsRoverTest #test12xxx stamp: 'CR 10/26/2020 16:34:35'!
test12xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'W'.
	aMarsRover performInstructions: 'flf'.
	self assert: (aMarsRover direction isKindOf: South).
	self assert: aMarsRover position equals: -1@-1.
	
	!

!methodRemoval: MarsRoverTest #test13xxx stamp: 'CR 10/26/2020 16:35:25'!
test13xxx
	| aMarsRover |
	aMarsRover := MarsRover withPosition: 0@0 andDirection: 'W'.
	aMarsRover performInstructions: 'blb'.
	self assert: (aMarsRover direction isKindOf: South).
	self assert: aMarsRover position equals: 1@1.
	
	!
!MarsRover methodsFor: 'initialization' stamp: 'CR 10/26/2020 16:36:54' prior: 50881158!
initializeWithPosition: aCardinalPointToStartOn andDirection: aCardinalOrientationToPointTo 
	self verifyThatCardinalOrientationIsValid: aCardinalOrientationToPointTo.
	(aCardinalOrientationToPointTo = 'N') ifTrue: [self pointToNorth].
	(aCardinalOrientationToPointTo = 'E') ifTrue: [self pointToEast].
	(aCardinalOrientationToPointTo = 'W') ifTrue: [self pointToWest].
	(aCardinalOrientationToPointTo = 'S') ifTrue: [self pointToSouth].
	currentPosition := aCardinalPointToStartOn.
	! !
!MarsRover methodsFor: 'initialization' stamp: 'CR 10/26/2020 16:37:06'!
setDirectionTo: aCardinalOrientationToPointTo

	(aCardinalOrientationToPointTo = 'N') ifTrue: [self pointToNorth].
	(aCardinalOrientationToPointTo = 'E') ifTrue: [self pointToEast].
	(aCardinalOrientationToPointTo = 'W') ifTrue: [self pointToWest].
	(aCardinalOrientationToPointTo = 'S') ifTrue: [self pointToSouth]! !
!MarsRover methodsFor: 'initialization' stamp: 'CR 10/26/2020 16:37:06' prior: 50881706!
initializeWithPosition: aCardinalPointToStartOn andDirection: aCardinalOrientationToPointTo 
	self verifyThatCardinalOrientationIsValid: aCardinalOrientationToPointTo.
	self setDirectionTo: aCardinalOrientationToPointTo.
	currentPosition := aCardinalPointToStartOn.
	! !
!MarsRover methodsFor: 'instruction processing' stamp: 'CR 10/26/2020 16:39:42' prior: 50880887!
checkIfValidInstructionAndPerform: anInstructionToPerform

	(self isAValidInstruction: anInstructionToPerform) ifTrue: [
			self performActionWithMarsRover: anInstructionToPerform
			] ifFalse:[
			self class signalInvalidInstruction.		
	].! !
!MarsRover methodsFor: 'instruction processing' stamp: 'CR 10/26/2020 16:40:27' prior: 50881749!
checkIfValidInstructionAndPerform: anInstructionToPerform

		(self isAValidInstruction: anInstructionToPerform) 
		ifTrue: [self performActionWithMarsRover: anInstructionToPerform] 
		ifFalse: 	[self class signalInvalidInstruction.		].! !
!MarsRover methodsFor: 'instruction processing' stamp: 'CR 10/26/2020 16:40:42' prior: 50880852!
performInstructions: instructionsSequenceToPerform

	self verifyThatInstructionsSequenceIsNotEmpty: instructionsSequenceToPerform.
	self processInstructionsSequence: instructionsSequenceToPerform.
	 ! !

!testRun: #MarsRoverTest #test01creatingMarsRoverWithInvalidDirectionRaisesError stamp: 'CR 10/26/2020 16:40:54'!
PASSED!

!testRun: #MarsRoverTest #test02performingEmptyInstructionRaisesError stamp: 'CR 10/26/2020 16:40:57'!
PASSED!

!testRun: #MarsRoverTest #test03movingForwardOnNorthMovesNorth stamp: 'CR 10/26/2020 16:40:57'!
PASSED!

!testRun: #MarsRoverTest #test04movingBackwardOnNorthMovesSouth stamp: 'CR 10/26/2020 16:40:57'!
PASSED!

!testRun: #MarsRoverTest #test05rotatingLeftPointingNorthPointsWest stamp: 'CR 10/26/2020 16:40:57'!
PASSED!

!testRun: #MarsRoverTest #test06rotatingRightPointingNorthPointsEast stamp: 'CR 10/26/2020 16:40:57'!
PASSED!

!testRun: #MarsRoverTest #test07movingForwardOnEastMovesEast stamp: 'CR 10/26/2020 16:40:57'!
PASSED!

!testRun: #MarsRoverTest #test08movingBackwardOnEastMovesWest stamp: 'CR 10/26/2020 16:40:57'!
PASSED!

!testRun: #MarsRoverTest #test09rotatingLeftOnEastPointsNorth stamp: 'CR 10/26/2020 16:40:57'!
PASSED!

!testRun: #MarsRoverTest #test10rotatingRightOnEastPointsToSouth stamp: 'CR 10/26/2020 16:40:57'!
PASSED!

!testRun: #MarsRoverTest #test11performManyInstructionsWorksCorrectly stamp: 'CR 10/26/2020 16:40:57'!
PASSED!

!testRun: #MarsRoverTest #test12movingDiagonallyOnWestMovesSouthWest stamp: 'CR 10/26/2020 16:40:57'!
PASSED!

----SNAPSHOT----(26 October 2020 16:41:06) CuisUniversity-4384.image priorSource: 17596413!

----QUIT----(26 October 2020 16:41:08) CuisUniversity-4384.image priorSource: 17605446!