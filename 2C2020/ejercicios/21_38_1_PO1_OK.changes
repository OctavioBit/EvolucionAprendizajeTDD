

----STARTUP---- (2 November 2020 18:29:35) as /home/kali/exactas/ing1/cuis/CuisUniversity-4384.image!


----End fileIn of /home/kali/exactas/ing1/ejercicios-isw1/18-Portfolio1/Portfolio-Ejercicio.st----!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'CJ 11/2/2020 18:32:33'!
test08 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.
		
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).
! !

!methodRemoval: ReceptiveAccountTest #test08 stamp: 'CJ 11/2/2020 18:34:03'!
test08 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.
		
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).
!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'CJ 11/2/2020 18:34:22'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'CJ 11/2/2020 18:34:55'!
test01
	! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJ 11/2/2020 18:36:10'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:36:03' prior: 50927108!
test01
	
	| emptyPortfolio |
	emptyPortfolio := Portfolio new.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:36:33' prior: 50927119!
test01
	
	| emptyPortfolio |
	
	emptyPortfolio := Portfolio new.
	
	self assert: emptyPortfolio balance = 0.! !

!testRun: #PortfolioTest #test01 stamp: 'CJ 11/2/2020 18:36:37'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'CJ 11/2/2020 18:36:45'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accessing' stamp: 'CJ 11/2/2020 18:36:49' prior: 50927133!
balance
	
	^ 0.! !

!testRun: #PortfolioTest #test01 stamp: 'CJ 11/2/2020 18:36:53'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'CJ 11/2/2020 18:36:53'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:38:07'!
test02
	
	| portfolioWithOneAccount account |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	self assert: portfolioWithOneAccount balance = 0.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:38:43' prior: 50927145!
test02
	
	| portfolioWithOneAccount account |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account.
	
	self assert: portfolioWithOneAccount balance = 0.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:39:21' prior: 50927154!
test02
	
	| portfolioWithOneAccount account |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account. 
	
	self assert: portfolioWithOneAccount balance = 0.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:39:46' prior: 50927164!
test02
	
	| portfolioWithOneAccount account |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account.
	Deposit register: 100 on: account.
	
	self assert: portfolioWithOneAccount balance = 100.! !

!testRun: #PortfolioTest #test02 stamp: 'CJ 11/2/2020 18:39:53'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:40:03'!
add: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:40:58' prior: 50927187!
add: aReceptiveAccount! !

!testRun: #PortfolioTest #test02 stamp: 'CJ 11/2/2020 18:40:59'!
FAILURE!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJ 11/2/2020 18:42:43'!
Object subclass: #Portfolio
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:42:41' prior: 50927192!
add: aReceptiveAccount

	account := aReceptiveAccount.! !
!Portfolio methodsFor: 'accessing' stamp: 'CJ 11/2/2020 18:42:59' prior: 50927137!
balance
	
	^ account balance.! !

!testRun: #PortfolioTest #test01 stamp: 'CJ 11/2/2020 18:43:06'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'CJ 11/2/2020 18:43:06'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'CJ 11/2/2020 18:43:06'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'CJ 11/2/2020 18:44:17' prior: 50927211!
balance
	
	account isNil ifTrue: [^0].
	account isNil ifFalse: [ ^ account balance ].! !

!testRun: #PortfolioTest #test01 stamp: 'CJ 11/2/2020 18:44:19'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'CJ 11/2/2020 18:44:21'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'CJ 11/2/2020 18:44:21'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:44:47'!
test03
	
	| portfolioWithOneAccount account |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account.
	Deposit register: 100 on: account.
	
	self assert: portfolioWithOneAccount balance = 100.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:45:44' prior: 50927235!
test03
	
	| portfolioWithOneAccount account1 account2 |
	
	portfolioWithOneAccount := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account1.
	portfolioWithOneAccount add: account2.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account2.
	
	self assert: portfolioWithOneAccount balance = 150.! !

!testRun: #PortfolioTest #test03 stamp: 'CJ 11/2/2020 18:45:46'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:46:52' prior: 50927247!
test03
	
	| portfolioWithOneAccount account1 account2 |
	
	portfolioWithOneAccount := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account1.
	portfolioWithOneAccount add: account2.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account2.
	
	self assert: portfolioWithOneAccount balance equals: 150.! !

!testRun: #PortfolioTest #test03 stamp: 'CJ 11/2/2020 18:46:53'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:47:18' prior: 50927265!
test03
	
	| portfolioWithOneAccount account1 account2 |
	
	portfolioWithOneAccount := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account1.
	portfolioWithOneAccount add: account2.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account2.
	
	self assert: 150 equals: portfolioWithOneAccount balance.! !

!testRun: #PortfolioTest #test03 stamp: 'CJ 11/2/2020 18:47:19'!
FAILURE!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJ 11/2/2020 18:48:21'!
Object subclass: #Portfolio
	instanceVariableNames: 'account accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:48:18' prior: 50927206!
add: aReceptiveAccount

	accounts add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test03 stamp: 'CJ 11/2/2020 18:48:25'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'CJ 11/2/2020 18:48:25'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'CJ 11/2/2020 18:48:25'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'CJ 11/2/2020 18:48:25'!
ERROR!
!Portfolio methodsFor: 'nil' stamp: 'CJ 11/2/2020 18:48:52' overrides: 16896425!
initialize

	accounts := OrderedCollection new.! !

!testRun: #PortfolioTest #test01 stamp: 'CJ 11/2/2020 18:48:55'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'CJ 11/2/2020 18:48:55'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'CJ 11/2/2020 18:48:55'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'CJ 11/2/2020 18:48:57'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'CJ 11/2/2020 18:49:47' prior: 50927222!
balance
	
	^ accounts sum: [ :anAccount | anAccount balance ].! !

!testRun: #PortfolioTest #test02 stamp: 'CJ 11/2/2020 18:49:52'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'CJ 11/2/2020 18:49:54'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'CJ 11/2/2020 18:49:55'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'CJ 11/2/2020 18:49:55'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'CJ 11/2/2020 18:49:55'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'CJ 11/2/2020 18:49:55'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'CJ 11/2/2020 18:50:16' prior: 50927337!
balance
	
	^ accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [^0].! !

!testRun: #PortfolioTest #test01 stamp: 'CJ 11/2/2020 18:50:17'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'CJ 11/2/2020 18:50:19'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'CJ 11/2/2020 18:50:19'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'CJ 11/2/2020 18:50:19'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:50:53'!
test01EmptyPorfolioBalanceIs0
	
	| emptyPortfolio |
	
	emptyPortfolio := Portfolio new.
	
	self assert: emptyPortfolio balance = 0.! !

!methodRemoval: PortfolioTest #test01 stamp: 'CJ 11/2/2020 18:50:53'!
test01
	
	| emptyPortfolio |
	
	emptyPortfolio := Portfolio new.
	
	self assert: emptyPortfolio balance = 0.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:51:14'!
test02PortfolioWithOneAccountBalanceIsCorrect
	
	| portfolioWithOneAccount account |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account.
	Deposit register: 100 on: account.
	
	self assert: portfolioWithOneAccount balance = 100.! !

!methodRemoval: PortfolioTest #test02 stamp: 'CJ 11/2/2020 18:51:14'!
test02
	
	| portfolioWithOneAccount account |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account.
	Deposit register: 100 on: account.
	
	self assert: portfolioWithOneAccount balance = 100.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:51:34'!
test03PortfolioWithManyAccountsBalanceIsCorrect
	
	| portfolioWithOneAccount account1 account2 |
	
	portfolioWithOneAccount := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account1.
	portfolioWithOneAccount add: account2.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account2.
	
	self assert: 150 equals: portfolioWithOneAccount balance.! !

!methodRemoval: PortfolioTest #test03 stamp: 'CJ 11/2/2020 18:51:34'!
test03
	
	| portfolioWithOneAccount account1 account2 |
	
	portfolioWithOneAccount := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account1.
	portfolioWithOneAccount add: account2.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account2.
	
	self assert: 150 equals: portfolioWithOneAccount balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:51:47'!
test04
	
	| portfolioWithOneAccount account1 account2 |
	
	portfolioWithOneAccount := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account1.
	portfolioWithOneAccount add: account2.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account2.
	
	self assert: 150 equals: portfolioWithOneAccount balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:51:59' prior: 50927438!
test04
	
	| outerPortfolio account1 account2 |
	
	outerPortfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	outerPortfolio add: account1.
	outerPortfolio add: account2.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account2.
	
	self assert: 150 equals: outerPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:52:07' prior: 50927454!
test04
	
	| outerPortfolio account account2 |
	
	outerPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	outerPortfolio add: account.
	outerPortfolio add: account2.
	Deposit register: 100 on: account.
	Deposit register: 50 on: account2.
	
	self assert: 150 equals: outerPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:52:18' prior: 50927468!
test04
	
	| outerPortfolio account innerPortfolio |
	
	outerPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	innerPortfolio := ReceptiveAccount new.
	
	outerPortfolio add: account.
	outerPortfolio add: innerPortfolio.
	Deposit register: 100 on: account.
	Deposit register: 50 on: innerPortfolio.
	
	self assert: 150 equals: outerPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:52:45' prior: 50927482!
test04
	
	| outerPortfolio account innerPortfolio |
	
	outerPortfolio := Portfolio new.
	innerPortfolio := ReceptiveAccount new.
	account := ReceptiveAccount new.
	
	outerPortfolio add: account.
	outerPortfolio add: innerPortfolio.
	Deposit register: 100 on: account.
	Deposit register: 50 on: innerPortfolio.
	
	self assert: 150 equals: outerPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:52:54' prior: 50927497!
test04
	
	| outerPortfolio account innerPortfolio |
	
	outerPortfolio := Portfolio new.
	innerPortfolio := ReceptiveAccount new.
	account := ReceptiveAccount new.
	
	outerPortfolio add: account.
	outerPortfolio add: innerPortfolio.
	Deposit register: 100 on: account.
	Deposit register: 50 on: innerPortfolio.
	
	self assert: 150 equals: outerPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:53:11' prior: 50927512!
test04
	
	| outerPortfolio outerPortfolioAccount innerPortfolio |
	
	outerPortfolio := Portfolio new.
	innerPortfolio := ReceptiveAccount new.
	outerPortfolioAccount := ReceptiveAccount new.
	
	outerPortfolio add: outerPortfolioAccount.
	outerPortfolio add: innerPortfolio.
	Deposit register: 100 on: outerPortfolioAccount.
	Deposit register: 50 on: innerPortfolio.
	
	self assert: 150 equals: outerPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:53:42' prior: 50927527!
test04
	
	| outerPortfolio outerPortfolioAccount innerPortfolio |
	
	outerPortfolio := Portfolio new.
	innerPortfolio := ReceptiveAccount new.
	outerPortfolioAccount := ReceptiveAccount new.
	
	outerPortfolio add: outerPortfolioAccount.
	outerPortfolio add: innerPortfolio.
	Deposit register: 100 on: outerPortfolioAccount.
	
	self assert: 100 equals: outerPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:53:53' prior: 50927544!
test04
	
	| outerPortfolio outerPortfolioAccount innerPortfolio |
	
	outerPortfolio := Portfolio new.
	innerPortfolio := ReceptiveAccount new.
	outerPortfolioAccount := Portfolio new.
	
	outerPortfolio add: outerPortfolioAccount.
	outerPortfolio add: innerPortfolio.
	Deposit register: 100 on: outerPortfolioAccount.
	
	self assert: 100 equals: outerPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:54:11' prior: 50927559!
test04
	
	| outerPortfolio outerPortfolioAccount innerPortfolio |
	
	outerPortfolio := Portfolio new.
	innerPortfolio := Portfolio new.
	outerPortfolioAccount := ReceptiveAccount new.
	
	outerPortfolio add: outerPortfolioAccount.
	outerPortfolio add: innerPortfolio.
	Deposit register: 100 on: outerPortfolioAccount.
	
	self assert: 100 equals: outerPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:54:26' prior: 50927574!
test04
	
	| outerPortfolio account innerPortfolio |
	
	outerPortfolio := Portfolio new.
	innerPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	outerPortfolio add: account.
	outerPortfolio add: innerPortfolio.
	Deposit register: 100 on: account.
	
	self assert: 100 equals: outerPortfolio balance.! !

!testRun: #PortfolioTest #test04 stamp: 'CJ 11/2/2020 18:54:31'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/2/2020 18:54:31'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/2/2020 18:54:31'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/2/2020 18:54:31'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CJ 11/2/2020 18:54:31'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CJ 11/2/2020 18:54:34'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/2/2020 18:54:34'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/2/2020 18:54:34'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/2/2020 18:54:34'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CJ 11/2/2020 18:54:34'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:55:03' prior: 50927589!
test04
	
	| outerPortfolio outerPortfolioAccount innerPortfolio |
	
	outerPortfolio := Portfolio new.
	innerPortfolio := Portfolio new.
	outerPortfolioAccount := ReceptiveAccount new.
	
	outerPortfolio add: outerPortfolioAccount.
	outerPortfolio add: innerPortfolio.
	Deposit register: 100 on: outerPortfolioAccount.
	
	self assert: 100 equals: outerPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:55:12' prior: 50927632!
test04
	
	| outerPortfolio outerPortfolioAccount innerPortfolio innerPortfolioAccount |
	
	outerPortfolio := Portfolio new.
	innerPortfolio := Portfolio new.
	outerPortfolioAccount := ReceptiveAccount new.
	
	outerPortfolio add: outerPortfolioAccount.
	outerPortfolio add: innerPortfolio.
	Deposit register: 100 on: outerPortfolioAccount.
	
	self assert: 100 equals: outerPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:56:41' prior: 50927647!
test04
	
	| outerPortfolio outerPortfolioAccount innerPortfolio innerPortfolioAccount |
	
	outerPortfolio := Portfolio new.
	innerPortfolio := Portfolio new.
	outerPortfolioAccount := ReceptiveAccount new.
	innerPortfolioAccount := ReceptiveAccount new.
	
	outerPortfolio add: outerPortfolioAccount.
	outerPortfolio add: innerPortfolio.
	Deposit register: 100 on: outerPortfolioAccount.
	
	innerPortfolio add: innerPortfolioAccount.
	Deposit register: 50 on: innerPortfolioAccount.
	
	self assert: 150 equals: outerPortfolio balance.! !

!testRun: #PortfolioTest #test04 stamp: 'CJ 11/2/2020 18:56:43'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/2/2020 18:56:43'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/2/2020 18:56:43'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/2/2020 18:56:43'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CJ 11/2/2020 18:56:43'!
PASSED!

!methodRemoval: PortfolioTest #test04 stamp: 'CJ 11/2/2020 18:57:52'!
test04
	
	| outerPortfolio outerPortfolioAccount innerPortfolio innerPortfolioAccount |
	
	outerPortfolio := Portfolio new.
	innerPortfolio := Portfolio new.
	outerPortfolioAccount := ReceptiveAccount new.
	innerPortfolioAccount := ReceptiveAccount new.
	
	outerPortfolio add: outerPortfolioAccount.
	outerPortfolio add: innerPortfolio.
	Deposit register: 100 on: outerPortfolioAccount.
	
	innerPortfolio add: innerPortfolioAccount.
	Deposit register: 50 on: innerPortfolioAccount.
	
	self assert: 150 equals: outerPortfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:57:57'!
test04
	
	| portfolioWithOneAccount account |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account.
	Deposit register: 100 on: account.
	
	self assert: portfolioWithOneAccount balance = 100.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'CJ 11/2/2020 18:58:30'!
test01ReceptiveAccountHasZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance.
! !

!methodRemoval: ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJ 11/2/2020 18:58:30'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance.
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:59:28' prior: 50927717!
test04
	
	| portfolioWithOneAccount account deposit |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account.
	deposit := Deposit register: 100 on: account.
	
	self assert: portfolioWithOneAccount hasRegistered: deposit.! !

!testRun: #PortfolioTest #test04 stamp: 'CJ 11/2/2020 18:59:34'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:59:43' prior: 50927744!
test04
	
	| portfolioWithOneAccount account deposit |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account.
	deposit := Deposit register: 100 on: account.
	
	self assert: (portfolioWithOneAccount hasRegistered: deposit).! !

!testRun: #PortfolioTest #test04 stamp: 'CJ 11/2/2020 18:59:44'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'CJ 11/2/2020 18:59:53'!
hasRegistered: aDeposit 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accessing' stamp: 'CJ 11/2/2020 18:59:58' prior: 50927773!
hasRegistered: aDeposit 
	
	^ true! !

!testRun: #PortfolioTest #test04 stamp: 'CJ 11/2/2020 19:00:05'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/2/2020 19:00:05'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/2/2020 19:00:05'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/2/2020 19:00:05'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CJ 11/2/2020 19:00:05'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 19:01:15' prior: 50927759!
test04
	
	| portfolioWithOneAccount account deposit withdraw |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 100 on: account.
	
	self assert: (portfolioWithOneAccount hasRegistered: deposit).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 19:01:31' prior: 50927797!
test04
	
	| portfolioWithOneAccount account deposit withdraw |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 100 on: account.
	
	self assert: (portfolioWithOneAccount hasRegistered: deposit).	
	self assert: (portfolioWithOneAccount hasRegistered: withdraw).! !

!testRun: #PortfolioTest #test04 stamp: 'CJ 11/2/2020 19:01:32'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/2/2020 19:01:32'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/2/2020 19:01:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/2/2020 19:01:32'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CJ 11/2/2020 19:01:32'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 19:02:09' prior: 50927811!
test04
	
	| portfolioWithOneAccount account deposit |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account.
	deposit := Deposit register: 100 on: account.
	
	self assert: (portfolioWithOneAccount hasRegistered: deposit).	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 19:02:16'!
test05
	
	| portfolioWithOneAccount account deposit |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account.
	deposit := Deposit register: 100 on: account.
	
	self assert: (portfolioWithOneAccount hasRegistered: deposit).	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 19:02:26' prior: 50927854!
test05
	
	| portfolioWithOneAccount account deposit |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account.
	
	self deny: (portfolioWithOneAccount hasRegistered: deposit).	! !

!testRun: #PortfolioTest #test05 stamp: 'CJ 11/2/2020 19:02:28'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'CJ 11/2/2020 19:03:50' prior: 50927778!
hasRegistered: aTransaction
	
	^ accounts anySatisfy: [:anAccount | anAccount hasRegistered: aTransaction ].! !

!testRun: #PortfolioTest #test05 stamp: 'CJ 11/2/2020 19:03:54'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/2/2020 19:03:54'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/2/2020 19:03:54'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/2/2020 19:03:54'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CJ 11/2/2020 19:03:54'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'CJ 11/2/2020 19:03:54'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 19:04:07'!
test06
	
	| portfolioWithOneAccount account deposit |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account.
	
	self deny: (portfolioWithOneAccount hasRegistered: deposit).	! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'CJ 11/2/2020 19:05:29'!
test06ReceptiveAccountDoesNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !

!methodRemoval: ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJ 11/2/2020 19:05:29'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 19:07:25' prior: 50927904!
test06
	
	| portfolioWithOneAccount account deposit |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account.
	
	self assert: 1 equals: (portfolioWithOneAccount transactions size).
	"self assert: (OrderedCollection with: ) equals:" ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 19:07:53' prior: 50927940!
test06
	
	| portfolioWithOneAccount account deposit |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account.
	
	self assert: 1 equals: (portfolioWithOneAccount transactions size).
	self assert: (portfolioWithOneAccount transactions includes: deposit).! !

!testRun: #PortfolioTest #test06 stamp: 'CJ 11/2/2020 19:07:55'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'CJ 11/2/2020 19:08:01'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accessing' stamp: 'CJ 11/2/2020 19:08:37' prior: 50927968!
transactions
	
	^ accounts first transactions.! !

!testRun: #PortfolioTest #test06 stamp: 'CJ 11/2/2020 19:08:39'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 19:08:56' prior: 50927953!
test06
	
	| portfolioWithOneAccount account deposit |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account.
	deposit := Deposit register: 100 on: account.
	
	self assert: 1 equals: (portfolioWithOneAccount transactions size).
	self assert: (portfolioWithOneAccount transactions includes: deposit).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 19:09:07' prior: 50927867!
test05
	
	| emptyPortfolio account deposit |
	
	emptyPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account.
	
	self deny: (emptyPortfolio hasRegistered: deposit).	! !

!testRun: #PortfolioTest #test06 stamp: 'CJ 11/2/2020 19:09:11'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/2/2020 19:09:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/2/2020 19:09:15'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/2/2020 19:09:15'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CJ 11/2/2020 19:09:15'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'CJ 11/2/2020 19:09:15'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'CJ 11/2/2020 19:09:15'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 19:09:33'!
test07
	
	| portfolioWithOneAccount account deposit |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account.
	deposit := Deposit register: 100 on: account.
	
	self assert: 1 equals: (portfolioWithOneAccount transactions size).
	self assert: (portfolioWithOneAccount transactions includes: deposit).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 19:10:12' prior: 50928023!
test07
	
	| portfolioWithOneAccount account deposit |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account.
	deposit := Deposit register: 100 on: account.
	
	self assert: 1 equals: (portfolioWithOneAccount transactions size).
	self assert: (portfolioWithOneAccount transactions includes: deposit).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 19:10:17' prior: 50928038!
test07
	
	| portfolioWithOneAccount account1 deposit |
	
	portfolioWithOneAccount := Portfolio new.
	account1 := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account1.
	deposit := Deposit register: 100 on: account1.
	
	self assert: 1 equals: (portfolioWithOneAccount transactions size).
	self assert: (portfolioWithOneAccount transactions includes: deposit).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 19:10:23' prior: 50928053!
test07
	
	| portfolioWithOneAccount account1 account2 deposit |
	
	portfolioWithOneAccount := Portfolio new.
	account1 := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account1.
	deposit := Deposit register: 100 on: account1.
	
	self assert: 1 equals: (portfolioWithOneAccount transactions size).
	self assert: (portfolioWithOneAccount transactions includes: deposit).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 19:10:32' prior: 50928068!
test07
	
	| portfolioWithOneAccount account1 account2 deposit withdraw |
	
	portfolioWithOneAccount := Portfolio new.
	account1 := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account1.
	deposit := Deposit register: 100 on: account1.
	
	self assert: 1 equals: (portfolioWithOneAccount transactions size).
	self assert: (portfolioWithOneAccount transactions includes: deposit).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 19:11:22' prior: 50928083!
test07
	
	| portfolioWithOneAccount account1 account2 deposit withdraw |
	
	portfolioWithOneAccount := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
		
	portfolioWithOneAccount add: account1.
	portfolioWithOneAccount add: account2.
	deposit := Deposit register: 100 on: account1.
	withdraw := Withdraw register: 40 on: account2.
	
	self assert: 1 equals: (portfolioWithOneAccount transactions size).
	self assert: (portfolioWithOneAccount transactions includes: deposit).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 19:11:30' prior: 50928099!
test07
	
	| portfolioWithOneAccount account1 account2 deposit withdraw |
	
	portfolioWithOneAccount := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
		
	portfolioWithOneAccount add: account1.
	portfolioWithOneAccount add: account2.
	deposit := Deposit register: 100 on: account1.
	withdraw := Withdraw register: 40 on: account2.
	
	self assert: 2 equals: (portfolioWithOneAccount transactions size).
	self assert: (portfolioWithOneAccount transactions includes: deposit).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 19:11:40' prior: 50928119!
test07
	
	| portfolioWithOneAccount account1 account2 deposit withdraw |
	
	portfolioWithOneAccount := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
		
	portfolioWithOneAccount add: account1.
	portfolioWithOneAccount add: account2.
	deposit := Deposit register: 100 on: account1.
	withdraw := Withdraw register: 40 on: account2.
	
	self assert: 2 equals: (portfolioWithOneAccount transactions size).
	self assert: (portfolioWithOneAccount transactions includes: deposit).
	self assert: (portfolioWithOneAccount transactions includes: withdraw).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 19:11:49' prior: 50928139!
test07
	
	| portfolioWithManyAccounts account1 account2 deposit withdraw |
	
	portfolioWithManyAccounts := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
		
	portfolioWithManyAccounts add: account1.
	portfolioWithManyAccounts add: account2.
	deposit := Deposit register: 100 on: account1.
	withdraw := Withdraw register: 40 on: account2.
	
	self assert: 2 equals: (portfolioWithManyAccounts transactions size).
	self assert: (portfolioWithManyAccounts transactions includes: deposit).
	self assert: (portfolioWithManyAccounts transactions includes: withdraw).! !

!testRun: #PortfolioTest #test07 stamp: 'CJ 11/2/2020 19:12:06'!
FAILURE!

#(1),#(2)!
!Portfolio methodsFor: 'accessing' stamp: 'CJ 11/3/2020 20:51:26' prior: 50927972!
transactions
	
	^ accounts fold: [ :portfolioItem1 :portfolioItem2 |
		portfolioItem1 transactions, portfolioItem2 transactions.
		]! !
!Portfolio methodsFor: 'accessing' stamp: 'CJ 11/3/2020 20:51:29' prior: 50928186!
transactions
	
	^ accounts fold: [ :portfolioItem1 :portfolioItem2 |
		portfolioItem1 transactions, portfolioItem2 transactions.
		].! !

!testRun: #PortfolioTest #test07 stamp: 'CJ 11/3/2020 20:51:40'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/3/2020 20:51:40'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/3/2020 20:51:40'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/3/2020 20:51:40'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CJ 11/3/2020 20:51:40'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'CJ 11/3/2020 20:51:40'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'CJ 11/3/2020 20:51:40'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'CJ 11/3/2020 20:51:40'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'CJ 11/3/2020 20:51:40'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/3/2020 20:53:07' prior: 50927979!
test06
	
	| portfolioWithOneAccount account deposit |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account.
	deposit := Deposit register: 100 on: account.
	
	"self assert: 1 equals: (portfolioWithOneAccount transactions size)."
	"self assert: (portfolioWithOneAccount transactions includes: deposit)."! !

!testRun: #PortfolioTest #test06 stamp: 'CJ 11/3/2020 20:53:13'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/3/2020 20:53:13'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/3/2020 20:53:13'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/3/2020 20:53:13'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CJ 11/3/2020 20:53:13'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'CJ 11/3/2020 20:53:13'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'CJ 11/3/2020 20:53:13'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'CJ 11/3/2020 20:53:13'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'CJ 11/3/2020 20:53:16'!
PASSED!

#(1) fold: [:a :b | a, b]!

#(1 2) fold: [:a :b | a, b]!

#(#(1)) fold: [:a :b | a, b]!

#(#(1), #(2)) fold: [:a :b | a, b]!

#(#(1) #(2)) fold: [:a :b | a, b]!

#(#(1) #(2 3)) fold: [:a :b | a, b]!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/3/2020 20:56:13' prior: 50928225!
test06
	
	| portfolioWithOneAccount account deposit |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account.
	deposit := Deposit register: 100 on: account.
	
	self assert: 1 equals: (portfolioWithOneAccount transactions size).
	self assert: (portfolioWithOneAccount transactions includes: deposit).! !

!testRun: #PortfolioTest #test06 stamp: 'CJ 11/3/2020 20:56:15'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'CJ 11/3/2020 21:00:24' prior: 50928193!
transactions
	
	^ accounts fold: [ :portfolioItem1 :portfolioItem2 |
		| item |
		item := portfolioItem1 transactions, portfolioItem2 transactions.
		item
		].! !
!Portfolio methodsFor: 'accessing' stamp: 'CJ 11/3/2020 21:01:54' prior: 50928287!
transactions
	
	^ accounts fold: [ :portfolioItem1 :portfolioItem2 |
		portfolioItem1 transactions, portfolioItem2 transactions.
		].! !
!Portfolio methodsFor: 'accessing' stamp: 'CJ 11/3/2020 21:03:35' prior: 50928295!
transactions
	accounts size = 1
		ifTrue: [^accounts first transactions.]
		ifFalse: [
			^ accounts fold: [ :portfolioItem1 :portfolioItem2 |
				portfolioItem1 transactions, portfolioItem2 transactions.
				].
			]
	 ! !
!Portfolio methodsFor: 'accessing' stamp: 'CJ 11/3/2020 21:03:43' prior: 50928302!
transactions
	accounts size = 1
		ifTrue: [^accounts first transactions.]
		ifFalse: [
			^ accounts fold: [ :portfolioItem1 :portfolioItem2 |
				portfolioItem1 transactions, portfolioItem2 transactions.
				].
			].! !

!testRun: #PortfolioTest #test06 stamp: 'CJ 11/3/2020 21:03:48'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/3/2020 21:03:48'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/3/2020 21:03:48'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/3/2020 21:03:48'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CJ 11/3/2020 21:03:48'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'CJ 11/3/2020 21:03:48'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'CJ 11/3/2020 21:03:48'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'CJ 11/3/2020 21:03:48'!
PASSED!

----STARTUP---- (7 November 2020 17:16:10) as /home/kali/exactas/ing1/cuis/CuisUniversity-4384.image!


----End fileIn of /home/kali/exactas/ing1/ejercicios-isw1/18-Portfolio1/Portfolio-Ejercicio.st----!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'CJ 11/7/2020 17:28:11'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'CJ 11/7/2020 17:28:11'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'CJ 11/2/2020 18:34:55'!
test01
	! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJ 11/7/2020 17:28:11'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'accessing' stamp: 'CJ 11/2/2020 18:36:45'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accessing' stamp: 'CJ 11/2/2020 18:36:49' prior: 50928638!
balance
	
	^ 0.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:38:07'!
test02
	
	| portfolioWithOneAccount account |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	self assert: portfolioWithOneAccount balance = 0.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:38:43' prior: 50928646!
test02
	
	| portfolioWithOneAccount account |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account.
	
	self assert: portfolioWithOneAccount balance = 0.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:39:21' prior: 50928655!
test02
	
	| portfolioWithOneAccount account |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account. 
	
	self assert: portfolioWithOneAccount balance = 0.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:39:46' prior: 50928665!
test02
	
	| portfolioWithOneAccount account |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account.
	Deposit register: 100 on: account.
	
	self assert: portfolioWithOneAccount balance = 100.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:40:03'!
add: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:40:58' prior: 50928686!
add: aReceptiveAccount! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJ 11/7/2020 17:29:16'!
Object subclass: #Portfolio
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:42:41' prior: 50928691!
add: aReceptiveAccount

	account := aReceptiveAccount.! !
!Portfolio methodsFor: 'accessing' stamp: 'CJ 11/2/2020 18:42:59' prior: 50928642!
balance
	
	^ account balance.! !
!Portfolio methodsFor: 'accessing' stamp: 'CJ 11/2/2020 18:44:17' prior: 50928708!
balance
	
	account isNil ifTrue: [^0].
	account isNil ifFalse: [ ^ account balance ].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:44:47'!
test03
	
	| portfolioWithOneAccount account |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account.
	Deposit register: 100 on: account.
	
	self assert: portfolioWithOneAccount balance = 100.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:45:44' prior: 50928718!
test03
	
	| portfolioWithOneAccount account1 account2 |
	
	portfolioWithOneAccount := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account1.
	portfolioWithOneAccount add: account2.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account2.
	
	self assert: portfolioWithOneAccount balance = 150.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:46:52' prior: 50928730!
test03
	
	| portfolioWithOneAccount account1 account2 |
	
	portfolioWithOneAccount := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account1.
	portfolioWithOneAccount add: account2.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account2.
	
	self assert: portfolioWithOneAccount balance equals: 150.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:47:18' prior: 50928746!
test03
	
	| portfolioWithOneAccount account1 account2 |
	
	portfolioWithOneAccount := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account1.
	portfolioWithOneAccount add: account2.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account2.
	
	self assert: 150 equals: portfolioWithOneAccount balance.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJ 11/7/2020 17:29:16'!
Object subclass: #Portfolio
	instanceVariableNames: 'account accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:48:18' prior: 50928703!
add: aReceptiveAccount

	accounts add: aReceptiveAccount.! !
!Portfolio methodsFor: 'nil' stamp: 'CJ 11/2/2020 18:48:52' overrides: 16896425!
initialize

	accounts := OrderedCollection new.! !
!Portfolio methodsFor: 'accessing' stamp: 'CJ 11/2/2020 18:49:47' prior: 50928712!
balance
	
	^ accounts sum: [ :anAccount | anAccount balance ].! !
!Portfolio methodsFor: 'accessing' stamp: 'CJ 11/2/2020 18:50:16' prior: 50928795!
balance
	
	^ accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [^0].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:50:53'!
test01EmptyPorfolioBalanceIs0
	
	| emptyPortfolio |
	
	emptyPortfolio := Portfolio new.
	
	self assert: emptyPortfolio balance = 0.! !

!methodRemoval: PortfolioTest #test01 stamp: 'CJ 11/7/2020 17:29:17'!
test01
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:51:14'!
test02PortfolioWithOneAccountBalanceIsCorrect
	
	| portfolioWithOneAccount account |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account.
	Deposit register: 100 on: account.
	
	self assert: portfolioWithOneAccount balance = 100.! !

!methodRemoval: PortfolioTest #test02 stamp: 'CJ 11/7/2020 17:29:17'!
test02
	
	| portfolioWithOneAccount account |
	
	portfolioWithOneAccount := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account.
	Deposit register: 100 on: account.
	
	self assert: portfolioWithOneAccount balance = 100.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:51:34'!
test03PortfolioWithManyAccountsBalanceIsCorrect
	
	| portfolioWithOneAccount account1 account2 |
	
	portfolioWithOneAccount := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account1.
	portfolioWithOneAccount add: account2.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account2.
	
	self assert: 150 equals: portfolioWithOneAccount balance.! !

!methodRemoval: PortfolioTest #test03 stamp: 'CJ 11/7/2020 17:29:17'!
test03
	
	| portfolioWithOneAccount account1 account2 |
	
	portfolioWithOneAccount := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account1.
	portfolioWithOneAccount add: account2.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account2.
	
	self assert: 150 equals: portfolioWithOneAccount balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:51:47'!
test04
	
	| portfolioWithOneAccount account1 account2 |
	
	portfolioWithOneAccount := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolioWithOneAccount add: account1.
	portfolioWithOneAccount add: account2.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account2.
	
	self assert: 150 equals: portfolioWithOneAccount balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:51:59' prior: 50928870!
test04
	
	| outerPortfolio account1 account2 |
	
	outerPortfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	outerPortfolio add: account1.
	outerPortfolio add: account2.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account2.
	
	self assert: 150 equals: outerPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:52:07' prior: 50928886!
test04
	
	| outerPortfolio account account2 |
	
	outerPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	outerPortfolio add: account.
	outerPortfolio add: account2.
	Deposit register: 100 on: account.
	Deposit register: 50 on: account2.
	
	self assert: 150 equals: outerPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:52:18' prior: 50928900!
test04
	
	| outerPortfolio account innerPortfolio |
	
	outerPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	innerPortfolio := ReceptiveAccount new.
	
	outerPortfolio add: account.
	outerPortfolio add: innerPortfolio.
	Deposit register: 100 on: account.
	Deposit register: 50 on: innerPortfolio.
	
	self assert: 150 equals: outerPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:52:45' prior: 50928914!
test04
	
	| outerPortfolio account innerPortfolio |
	
	outerPortfolio := Portfolio new.
	innerPortfolio := ReceptiveAccount new.
	account := ReceptiveAccount new.
	
	outerPortfolio add: account.
	outerPortfolio add: innerPortfolio.
	Deposit register: 100 on: account.
	Deposit register: 50 on: innerPortfolio.
	
	self assert: 150 equals: outerPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:52:54' prior: 50928929!
test04
	
	| outerPortfolio account innerPortfolio |
	
	outerPortfolio := Portfolio new.
	innerPortfolio := ReceptiveAccount new.
	account := ReceptiveAccount new.
	
	outerPortfolio add: account.
	outerPortfolio add: innerPortfolio.
	Deposit register: 100 on: account.
	Deposit register: 50 on: innerPortfolio.
	
	self assert: 150 equals: outerPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:53:11' prior: 50928944!
test04
	
	| outerPortfolio outerPortfolioAccount innerPortfolio |
	
	outerPortfolio := Portfolio new.
	innerPortfolio := ReceptiveAccount new.
	outerPortfolioAccount := ReceptiveAccount new.
	
	outerPortfolio add: outerPortfolioAccount.
	outerPortfolio add: innerPortfolio.
	Deposit register: 100 on: outerPortfolioAccount.
	Deposit register: 50 on: innerPortfolio.
	
	self assert: 150 equals: outerPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:53:42' prior: 50928959!
test04
	
	| outerPortfolio outerPortfolioAccount innerPortfolio |
	
	outerPortfolio := Portfolio new.
	innerPortfolio := ReceptiveAccount new.
	outerPortfolioAccount := ReceptiveAccount new.
	
	outerPortfolio add: outerPortfolioAccount.
	outerPortfolio add: innerPortfolio.
	Deposit register: 100 on: outerPortfolioAccount.
	
	self assert: 100 equals: outerPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:53:53' prior: 50928976!
test04
	
	| outerPortfolio outerPortfolioAccount innerPortfolio |
	
	outerPortfolio := Portfolio new.
	innerPortfolio := ReceptiveAccount new.
	outerPortfolioAccount := Portfolio new.
	
	outerPortfolio add: outerPortfolioAccount.
	outerPortfolio add: innerPortfolio.
	Deposit register: 100 on: outerPortfolioAccount.
	
	self assert: 100 equals: outerPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:54:11' prior: 50928991!
test04
	
	| outerPortfolio outerPortfolioAccount innerPortfolio |
	
	outerPortfolio := Portfolio new.
	innerPortfolio := Portfolio new.
	outerPortfolioAccount := ReceptiveAccount new.
	
	outerPortfolio add: outerPortfolioAccount.
	outerPortfolio add: innerPortfolio.
	Deposit register: 100 on: outerPortfolioAccount.
	
	self assert: 100 equals: outerPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/2/2020 18:54:26' prior: 50929006!
test04
	
	| outerPortfolio account innerPortfolio |
	
	outerPortfolio := Portfolio new.
	innerPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	outerPortfolio add: account.
	outerPortfolio add: innerPortfolio.
	Deposit register: 100 on: account.
	
	self assert: 100 equals: outerPortfolio balance.! !

!classDefinition: #BecomeTestExperiment category: 'BaseImageTests-Kernel' stamp: 'CJ 11/7/2020 17:29:34'!
Object subclass: #BecomeTestExperiment
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'BaseImageTests-Kernel'!

!classDefinition: #BecomeTestExperiment category: 'BaseImageTests-Kernel' stamp: 'CJ 11/7/2020 17:29:34'!
Object subclass: #BecomeTestExperiment
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'BaseImageTests-Kernel'!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'CJ 11/7/2020 17:29:34'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'CJ 11/7/2020 17:29:34'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'CJ 11/7/2020 17:29:35'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'CJ 11/7/2020 17:29:35'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'CJ 11/7/2020 17:29:35'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'CJ 11/7/2020 17:29:35'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'CJ 11/7/2020 17:29:35'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'CJ 11/7/2020 17:29:36'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'CJ 11/7/2020 17:29:36'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'CJ 11/7/2020 17:29:36'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'CJ 11/7/2020 17:29:36'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'CJ 11/7/2020 17:29:36'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:36'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:09'!
griffle [ var1 := 1. goo := 1. ^goo + var1 ]! !

!classRemoval: #CompilerTestDataClass__ stamp: 'CJ 11/7/2020 17:29:37'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:37'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:10'!
griffle [|var1| var1 := 1.goo := 1.^ goo + var1]! !

!classRemoval: #CompilerTestDataClass__ stamp: 'CJ 11/7/2020 17:29:37'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:37'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:11'!
griffle [ :var1 | goo := 1.^ goo + var1]! !

!classRemoval: #CompilerTestDataClass__ stamp: 'CJ 11/7/2020 17:29:38'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:38'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:11'!
griffle [ :var1 | | | goo := 1.^ goo + var1]! !

!classRemoval: #CompilerTestDataClass__ stamp: 'CJ 11/7/2020 17:29:38'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:38'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:12'!
griffle var1 := 1. [ goo := 1. ^goo + var1 ]! !

!classRemoval: #CompilerTestDataClass__ stamp: 'CJ 11/7/2020 17:29:38'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:38'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:13'!
griffle |var1| var1 := 1.goo := 1.^ goo + var1! !

!classRemoval: #CompilerTestDataClass__ stamp: 'CJ 11/7/2020 17:29:39'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:39'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:13'!
griffle [|goo| goo := 1. ^goo ]. [goo1:=1.^ goo1]! !

!classRemoval: #CompilerTestDataClass__ stamp: 'CJ 11/7/2020 17:29:39'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:39'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:14'!
griffle [ :var1 | | foo | foo := 2. goo := 1.^ goo + var1 + foo ]! !

!classRemoval: #CompilerTestDataClass__ stamp: 'CJ 11/7/2020 17:29:39'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:39'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:17'!
griffle [ | goo | ]. [ | goo | ]! !

!classRemoval: #CompilerTestDataClass__ stamp: 'CJ 11/7/2020 17:29:40'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:40'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:18'!
griffle | goo |! !

!classRemoval: #CompilerTestDataClass__ stamp: 'CJ 11/7/2020 17:29:40'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:40'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:19'!
griffle | goo a | a := 1. ^a! !

!classRemoval: #CompilerTestDataClass__ stamp: 'CJ 11/7/2020 17:29:40'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:40'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:19'!
griffle [ | goo | ]! !

!classRemoval: #CompilerTestDataClass__ stamp: 'CJ 11/7/2020 17:29:41'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:41'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:20'!
griffle | goo |! !

!classRemoval: #CompilerTestDataClass__ stamp: 'CJ 11/7/2020 17:29:41'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:41'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:21'!
griffle [ || goo := 1.^ goo ]! !

!classRemoval: #CompilerTestDataClass__ stamp: 'CJ 11/7/2020 17:29:41'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:41'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:21'!
griffle || goo := 1.^ goo! !

!classRemoval: #CompilerTestDataClass__ stamp: 'CJ 11/7/2020 17:29:42'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:42'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #CompilerTestDataClass__ stamp: 'CJ 11/7/2020 17:29:42'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:42'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #CompilerTestDataClass__ stamp: 'CJ 11/7/2020 17:29:43'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:43'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #CompilerTestDataClass__ stamp: 'CJ 11/7/2020 17:29:43'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:43'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #CompilerTestDataClass__ stamp: 'CJ 11/7/2020 17:29:43'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:43'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddInstVar stamp: 'CJ 11/7/2020 17:29:44'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithInstVar category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:44'!
RefactoringClassTestData subclass: #SuperclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:44'!
SuperclassWithInstVar subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddInstVar stamp: 'CJ 11/7/2020 17:29:44'!
SuperclassWithInstVar subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassWithInstVar stamp: 'CJ 11/7/2020 17:29:44'!
RefactoringClassTestData subclass: #SuperclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:44'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithInstVar category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:44'!
ClassToAddInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SubclassWithInstVar stamp: 'CJ 11/7/2020 17:29:45'!
ClassToAddInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddInstVar stamp: 'CJ 11/7/2020 17:29:45'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:45'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:45'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddInstVar stamp: 'CJ 11/7/2020 17:29:45'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:45'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:41'!
m1 | a | a := 10.! !

!classRemoval: #ClassToAddInstVar stamp: 'CJ 11/7/2020 17:29:46'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:46'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:42'!
m1:a! !

!classRemoval: #ClassToAddInstVar stamp: 'CJ 11/7/2020 17:29:46'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:46'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:43'!
m1 [ :a | ] value: 1! !

!classRemoval: #ClassToAddInstVar stamp: 'CJ 11/7/2020 17:29:46'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:46'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:43'!
m1 [ | a | ] value! !

!classRemoval: #ClassToAddInstVar stamp: 'CJ 11/7/2020 17:29:47'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:47'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassOfClassToRefactor category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:47'!
ClassToAddInstVar subclass: #SubclassOfClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassOfClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:44'!
m1 | a | ! !

!classRemoval: #SubclassOfClassToRefactor stamp: 'CJ 11/7/2020 17:29:47'!
ClassToAddInstVar subclass: #SubclassOfClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddInstVar stamp: 'CJ 11/7/2020 17:29:47'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:47'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddInstVar stamp: 'CJ 11/7/2020 17:29:48'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:48'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:45'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:45'!
sender_m1 self m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:45'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:45' prior: 50929775!
sender_m1 self m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'CJ 11/7/2020 17:29:48'!
m1!

!classRemoval: #ClassToAddParameter stamp: 'CJ 11/7/2020 17:29:48'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:48'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:46'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:46'!
sender_m1 self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:46'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:46' prior: 50929809!
sender_m1 self m1: 1 m2: 2! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'CJ 11/7/2020 17:29:48'!
m1: oldParam!

!classRemoval: #ClassToAddParameter stamp: 'CJ 11/7/2020 17:29:48'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:49'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47'!
sender_m1 self m1: 1. self m1: 1.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47' prior: 50929845!
sender_m1 self m1: 1 m2: 2. self m1: 1 m2: 2.! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'CJ 11/7/2020 17:29:49'!
m1: oldParam!

!classRemoval: #ClassToAddParameter stamp: 'CJ 11/7/2020 17:29:49'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:49'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47'!
sender_m1 self m1: self size.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47' prior: 50929882!
sender_m1 self m1: self size m2: 2.! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'CJ 11/7/2020 17:29:49'!
m1: oldParam!

!classRemoval: #ClassToAddParameter stamp: 'CJ 11/7/2020 17:29:49'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:49'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:48'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:48'!
sender_m1 self m1: self size + 4.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:48'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:48' prior: 50929918!
sender_m1 self m1: self size + 4 m2: 2.! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'CJ 11/7/2020 17:29:49'!
m1: oldParam!

!classRemoval: #ClassToAddParameter stamp: 'CJ 11/7/2020 17:29:50'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:50'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49'!
sender_m1 self m1: (self at: 1 put: 2).! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49' prior: 50929954!
sender_m1 self m1: (self at: 1 put: 2) m2: 2.! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'CJ 11/7/2020 17:29:50'!
m1: oldParam!

!classRemoval: #ClassToAddParameter stamp: 'CJ 11/7/2020 17:29:50'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:50'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49'!
sender_m1 #m1 size! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49' prior: 50929991!
sender_m1 #m1: size! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'CJ 11/7/2020 17:29:50'!
m1!

!classRemoval: #ClassToAddParameter stamp: 'CJ 11/7/2020 17:29:50'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:50'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:50'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:50'!
sender_m1 #m1: size.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:50'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:50' prior: 50930025!
sender_m1 #m1:m2: size.! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'CJ 11/7/2020 17:29:51'!
m1: oldParam!

!classRemoval: #ClassToAddParameter stamp: 'CJ 11/7/2020 17:29:51'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:51'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: 'newParam'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:53'!
m1! !

!classRemoval: #ClassToAddParameter stamp: 'CJ 11/7/2020 17:29:51'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: 'newParam'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:51'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:54'!
m1:newParam! !

!classRemoval: #ClassToAddParameter stamp: 'CJ 11/7/2020 17:29:52'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:52'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58'!
sender_m1 self m1
	! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58' prior: 50930100!
sender_m1 self m1: 1
	! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'CJ 11/7/2020 17:29:52'!
m1!

!classRemoval: #ClassToAddParameter stamp: 'CJ 11/7/2020 17:29:52'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:52'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58'!
sender_m1 self m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58' prior: 50930134!
sender_m1 self m1: (self at: 1)! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'CJ 11/7/2020 17:29:52'!
m1!

!classRemoval: #ClassToAddParameter stamp: 'CJ 11/7/2020 17:29:52'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:52'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:59'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:59'!
sender_m1 self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:59'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:59' prior: 50930169!
sender_m1 self m1: 1 m2: (self at: 1)! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'CJ 11/7/2020 17:29:52'!
m1: oldParam!

!classRemoval: #ClassToAddParameter stamp: 'CJ 11/7/2020 17:29:53'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:53'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:00'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:00'!
sender_m1 self m1:[ 1 factorial ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:00'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:00' prior: 50930205!
sender_m1 self m1:[ 1 factorial ] m2: 1! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'CJ 11/7/2020 17:29:53'!
m1: oldParam!

!classRemoval: #ClassToAddParameter stamp: 'CJ 11/7/2020 17:29:53'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:53'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01'!
sender self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01'!
m2: newParam m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01' prior: 50930241!
sender self m2: 2 m1: 1! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'CJ 11/7/2020 17:29:53'!
m1: p1!

!classRemoval: #ClassToAddParameter stamp: 'CJ 11/7/2020 17:29:53'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:53'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01'!
sender self m1: 1 m3: 3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01'!
m1: p1 m2: newParam m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01' prior: 50930276!
sender self m1: 1 m2: 2 m3: 3! !

!methodRemoval: ClassToAddParameter #m1:m3: stamp: 'CJ 11/7/2020 17:29:54'!
m1: p1 m3: p3!

!classRemoval: #ClassToAddParameter stamp: 'CJ 11/7/2020 17:29:54'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:54'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:02'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:02'!
sender
	self m1: 1 m3: 3.
	self
		m1: 4
		m3: 6! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:02'!
m1: p1 m2: newParam m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:02' prior: 50930312!
sender
	self m1: 1 m2: 2 m3: 3.
	self
		m1: 4
		m2: 2 m3: 6! !

!methodRemoval: ClassToAddParameter #m1:m3: stamp: 'CJ 11/7/2020 17:29:54'!
m1: p1 m3: p3!

!classRemoval: #ClassToAddParameter stamp: 'CJ 11/7/2020 17:29:54'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:54'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:04'!
m1

! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:04'!
sender_m1 self m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:04'!
m1: newParam

! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:04' prior: 50930349!
sender_m1 self m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'CJ 11/7/2020 17:29:54'!
m1

!

!classRemoval: #ClassToAddParameter stamp: 'CJ 11/7/2020 17:29:55'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:55'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddParameter stamp: 'CJ 11/7/2020 17:29:55'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeSelectorOrder category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:55'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:06'!
m1: p1 m2: p2! !
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:06'!
m2: p2 m1: p1! !

!methodRemoval: ClassToChangeSelectorOrder #m1:m2: stamp: 'CJ 11/7/2020 17:29:55'!
m1: p1 m2: p2!

!classRemoval: #ClassToChangeSelectorOrder stamp: 'CJ 11/7/2020 17:29:55'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeSelectorOrder category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:55'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:07'!
m1: p1 m2: p2! !
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:07'!
m2: p2 m1: p1! !

!methodRemoval: ClassToChangeSelectorOrder #m1:m2: stamp: 'CJ 11/7/2020 17:29:55'!
m1: p1 m2: p2!

!classRemoval: #ClassToChangeSelectorOrder stamp: 'CJ 11/7/2020 17:29:56'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeSelectorOrder category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:56'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:08'!
m1: p1 m2: p2 m3: p3! !
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:08'!
m2: p2 m3: p3 m1: p1! !

!methodRemoval: ClassToChangeSelectorOrder #m1:m2:m3: stamp: 'CJ 11/7/2020 17:29:56'!
m1: p1 m2: p2 m3: p3!

!classRemoval: #ClassToChangeSelectorOrder stamp: 'CJ 11/7/2020 17:29:56'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:56'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:09'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:09'!
m1 ^ 8! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:29:56'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:56'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:09'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:09'!
m1 ^ 8! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:29:57'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:57'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:10'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:10'!
m1 ^ 8! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:29:57'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:57'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:11'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:11'!
m1 ^ 8! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:29:57'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:57'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:11'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:11'!
m1 ^ 8! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:29:58'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:58'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:12'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:29:58'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:58'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:13'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:29:59'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:59'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:13'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:13'!
m1 ^ localVar + ((4))! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:29:59'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:59'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:14'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:14'!
m1 ^ 4! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:14'!
m2

	^ 4! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:14' prior: 50930733!
m1 ^ self m2! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:29:59'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:29:59'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:15'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:15'!
m1 ^ 8! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:00'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:00'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:15'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:15'!
m1 | localVar | ^ localVar + 3! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:00'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:00'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:16'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:16'!
m1 <annoyingPragma>! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:01'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:01'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:17'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:17'!
m1 ^ 3 + ((4))! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:01'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:01'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:17'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:01'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:01'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:18'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:18'!
m1 self m3.
	self m4: 5! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:18'!
m2

	self m3.
	self m4: 5! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:18' prior: 50930924!
m1 self m2! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:02'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:02'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:19'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:19'!
m1 ^ 'hey true'! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:02'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:02'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:19'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:19'!
m1 ^ '^ 3' size! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:20'!
m2

	^ '^ 3' size! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:20' prior: 50930994!
m1 ^ self m2! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:02'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:02'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:20'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:20'!
m1
	
	self m3.
	self m4: 5.! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:20'!
m2

	self m3.
	self m4: 5! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:20' prior: 50931033!
m1
	
	self m2.! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:03'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:03'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:21'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:21'!
m1 ^ ((42))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:21'!
m2

	^ 42! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:21' prior: 50931072!
m1 ^ ((self m2))! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:03'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:03'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:22'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:22'!
m1 | local | ^ local + 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:22'!
m2: local

	^ local + 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:22' prior: 50931110!
m1 | local | ^ self m2: local! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:04'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:04'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:22'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:22'!
m1 ^ (9) * 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:22'!
m2

	^ (9) * 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:22' prior: 50931149!
m1 ^ self m2! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:04'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:04'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:23'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:23'!
m1 | localVar | ^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:23'!
m2: localVar

	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:23' prior: 50931187!
m1 | localVar | ^ self m2: localVar! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:04'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:04'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:24'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:05'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:05'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:24'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:24'!
m1 | localVar | localVar _ 8! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:05'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:05'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:25'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:25'!
m1 ^ 8! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:06'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:06'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:26'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:26'!
m1 ^ [ |something| something _ 3 ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:26'!
m2

	^ [ |something| something _ 3 ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:26' prior: 50931318!
m1 ^ self m2! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:06'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:06'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:26'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:26'!
m1 ^ 2 ifNil: [ #boo ] ifNotNil: [ #yay ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:26'!
m2

	^ 2 ifNil: [ #boo ] ifNotNil: [ #yay ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:26' prior: 50931358!
m1 ^ self m2! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:06'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:06'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:27'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:27'!
m1 | localVar | ^ #foo! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:07'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:07'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:28'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:28'!
m1: arg ^ 2 + arg * 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:28'!
m2: arg

	^ 2 + arg! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:28' prior: 50931429!
m1: arg ^ (self m2: arg) * 3! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:07'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:07'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:28'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:28'!
m1 ^ `3 + 4`! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:28'!
m2

	^ `3 + 4`! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:28' prior: 50931468!
m1 ^ self m2! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:08'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:08'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:29'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:29'!
m1 ^ 2 factorial ifNotNil: [ #boo ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:29'!
m2

	^ 2 factorial ifNotNil: [ #boo ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:29' prior: 50931506!
m1 ^ self m2! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:08'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:08'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:30'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:30'!
m1 ^ [ | a | a _ 3 factorial ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:30'!
m2

	| a | a _ 3 factorial! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:30' prior: 50931546!
m1 ^ [ self m2 ]! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:08'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:08'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:31'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:31'!
m1 | a | a _ 3 factorial! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:31'!
m2

	| a | a _ 3 factorial! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:31' prior: 50931585!
m1 self m2! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:09'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:09'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:31'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:31'!
m1 | localVar1 localVar2 | ^ localVar1 + localVar2 + 2! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:09'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:09'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:32'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:32'!
m1 | localVar1 localVar2 | ^ localVar1 + localVar2 + 2! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:10'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:10'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:33'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:33'!
m1 ^ (3 + 2) factorial; yourself! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:33'!
m2

	^ (3 + 2) factorial; yourself! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:33' prior: 50931688!
m1 ^ self m2! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:10'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:10'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:33'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:33'!
m1 | temp | []! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:33'!
m2

	| temp | []! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:33' prior: 50931728!
m1 self m2! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:10'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:10'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:34'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:34'!
m1 ^ (  (3 + 4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:34'!
m2

	^ 3 + 4! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:34' prior: 50931766!
m1 ^ (  (self m2))! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:11'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:11'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:35'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:35'!
m1 ^ 42! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:11'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:11'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:35'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:35'!
m1 |var| var _ 42. ^ var! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:12'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:12'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:36'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:36'!
m1: arg ^ self! !

!classRemoval: #ClassToExtractMethod stamp: 'CJ 11/7/2020 17:30:12'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:12'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:37'!
m1 ^ 2! !

!classRemoval: #ClassToDoExtractTemporary stamp: 'CJ 11/7/2020 17:30:12'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:12'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:37'!
m1 ^ 2! !

!classRemoval: #ClassToDoExtractTemporary stamp: 'CJ 11/7/2020 17:30:13'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:13'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:38'!
m1 | new | ^ 2! !

!classRemoval: #ClassToDoExtractTemporary stamp: 'CJ 11/7/2020 17:30:13'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:13'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:13'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:39'!
m1 ^ 78! !

!classRemoval: #ClassToDoExtractTemporary stamp: 'CJ 11/7/2020 17:30:13'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:13'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRefactorSuperclass category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:14'!
RefactoringClassTestData subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:39'!
m1 ^ 78! !

!classRemoval: #ClassToRefactorSuperclass stamp: 'CJ 11/7/2020 17:30:14'!
RefactoringClassTestData subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToDoExtractTemporary stamp: 'CJ 11/7/2020 17:30:14'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:14'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:40'!
m1 ^ 1! !

!classRemoval: #ClassToDoExtractTemporary stamp: 'CJ 11/7/2020 17:30:15'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:15'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:41'!
m1 ^ 1! !

!classRemoval: #ClassToDoExtractTemporary stamp: 'CJ 11/7/2020 17:30:15'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:15'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:42'!
m1 ^ 1 + 3! !

!classRemoval: #ClassToDoExtractTemporary stamp: 'CJ 11/7/2020 17:30:15'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:15'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:42'!
m1 1+2. 3+4! !

!classRemoval: #ClassToDoExtractTemporary stamp: 'CJ 11/7/2020 17:30:16'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:16'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:43'!
m1 ^ 1! !

!classRemoval: #ClassToDoExtractTemporary stamp: 'CJ 11/7/2020 17:30:16'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:16'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:44'!
m1 ^ 1! !

!classRemoval: #ClassToDoExtractTemporary stamp: 'CJ 11/7/2020 17:30:16'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:16'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:44'!
m1

	^ 42! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:44' prior: 50932143!
m1

	| new |
	new _ 42.
	^ new! !

!classRemoval: #ClassToDoExtractTemporary stamp: 'CJ 11/7/2020 17:30:17'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:17'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:45'!
m1

	| four |
	four _ 4.
	^ four + 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:45' prior: 50932168!
m1

	| four two |
	four _ 4.
	two _ 2.
	^ four + two! !

!classRemoval: #ClassToDoExtractTemporary stamp: 'CJ 11/7/2020 17:30:17'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:17'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:46'!
m1

	| |
	^ 3 factorial! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:46' prior: 50932195!
m1

	| f |
	f _ 3 factorial.
	^ f! !

!classRemoval: #ClassToDoExtractTemporary stamp: 'CJ 11/7/2020 17:30:17'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:17'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:46'!
m1

	^ 42! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:46' prior: 50932221!
m1

	| new |
	new := 42.
	^ new! !

!classRemoval: #ClassToDoExtractTemporary stamp: 'CJ 11/7/2020 17:30:18'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:18'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:47'!
m1

	^ [ self m2 ]! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:47' prior: 50932246!
m1

	^ [ | new |
	new _ self m2 ]! !

!classRemoval: #ClassToDoExtractTemporary stamp: 'CJ 11/7/2020 17:30:18'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:18'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:48'!
m1 ^ 1! !

!classRemoval: #ClassToDoExtractTemporary stamp: 'CJ 11/7/2020 17:30:18'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:18'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:48'!
m1 ^ self m2! !

!classRemoval: #ClassToDoExtractTemporary stamp: 'CJ 11/7/2020 17:30:19'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:19'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:49'!
m1

	^ 42! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:49' prior: 50932314!
m1

	| new |
	new _ 42.
	^ new! !

!classRemoval: #ClassToDoExtractTemporary stamp: 'CJ 11/7/2020 17:30:19'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:19'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:50'!
m1

	^ []! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:50' prior: 50932339!
m1

	| new |
	new _ [].
	^ new! !

!classRemoval: #ClassToDoExtractTemporary stamp: 'CJ 11/7/2020 17:30:19'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:19'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:50'!
m1 | existing | existing := 2! !

!classRemoval: #ClassToDoExtractTemporary stamp: 'CJ 11/7/2020 17:30:20'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:20'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:51'!
m1

	^ 3 factorial; yourself! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:51' prior: 50932385!
m1

	| new |
	new _ 3 factorial; yourself.
	^ new! !

!classRemoval: #ClassToDoExtractTemporary stamp: 'CJ 11/7/2020 17:30:20'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:20'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52'!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52' prior: 50932412!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52' prior: 50932416!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52' prior: 50932420!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52' prior: 50932424!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52' prior: 50932428!
m1 ^ 2! !

!classRemoval: #ClassToDoExtractTemporary stamp: 'CJ 11/7/2020 17:30:21'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:21'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52'!
m1

	self run! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52' prior: 50932453!
m1

	| action |
	action _ self run! !

!classRemoval: #ClassToDoExtractTemporary stamp: 'CJ 11/7/2020 17:30:21'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:21'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:53'!
m1: arg ^ self! !

!classRemoval: #ClassToDoExtractTemporary stamp: 'CJ 11/7/2020 17:30:21'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:21'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:21'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'CJ 11/7/2020 17:30:21'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddSuperclass stamp: 'CJ 11/7/2020 17:30:22'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AddedSuperclass stamp: 'CJ 11/7/2020 17:30:22'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

----STARTUP---- (8 November 2020 09:43:46) as /home/kali/exactas/ing1/cuis/CuisUniversity-4384.image!


----End fileIn of /home/kali/exactas/ing1/ejercicios-isw1/18-Portfolio1/Portfolio-Ejercicio.st----!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 10:07:14'!
test10AddingDepth1DuplicateToPortfolioWithOneElementSignalsError
	
	| outerPortfolio innerPortfolio innerPortfolioAccount |
	
	outerPortfolio := Portfolio new.
	innerPortfolio := Portfolio new.
	innerPortfolioAccount := ReceptiveAccount new.
	
	innerPortfolio add: innerPortfolioAccount.
	outerPortfolio add: innerPortfolio.
	
	self 
		should: [ outerPortfolio add: innerPortfolioAccount ]
		raise: Error
		withMessageText: Portfolio cannotHaveDuplicateAccounts! !

!methodRemoval: PortfolioTest #test10 stamp: 'CJ 11/8/2020 10:07:14'!
test10
	
	| outerPortfolio innerPortfolio innerPortfolioAccount |
	
	outerPortfolio := Portfolio new.
	innerPortfolio := Portfolio new.
	innerPortfolioAccount := ReceptiveAccount new.
	
	innerPortfolio add: innerPortfolioAccount.
	outerPortfolio add: innerPortfolio.
	
	self 
		should: [ outerPortfolio add: innerPortfolioAccount ]
		raise: Error
		withMessageText: Portfolio cannotHaveDuplicateAccounts!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 10:07:45'!
test11AddingDepth1DuplicateToPortfolioWithManyElementsSignalsError
	
	| outerPortfolio firstInnerPortfolio secondInnerPortfolio firstInnerPortfolioAccount secondInnerPortfolioAccount |
	
	outerPortfolio := Portfolio new.
	
	firstInnerPortfolio := Portfolio new.
	firstInnerPortfolioAccount := ReceptiveAccount new.
	firstInnerPortfolio add: firstInnerPortfolioAccount.
	
	secondInnerPortfolio := Portfolio new.
	secondInnerPortfolioAccount := ReceptiveAccount new.
	secondInnerPortfolio add: secondInnerPortfolioAccount.
	
	outerPortfolio add: firstInnerPortfolio.
	outerPortfolio add: secondInnerPortfolio.	
	
	self 
		should: [ outerPortfolio add: secondInnerPortfolioAccount ]
		raise: Error
		withMessageText: Portfolio cannotHaveDuplicateAccounts! !

!methodRemoval: PortfolioTest #test11 stamp: 'CJ 11/8/2020 10:07:45'!
test11
	
	| outerPortfolio firstInnerPortfolio secondInnerPortfolio firstInnerPortfolioAccount secondInnerPortfolioAccount |
	
	outerPortfolio := Portfolio new.
	
	firstInnerPortfolio := Portfolio new.
	firstInnerPortfolioAccount := ReceptiveAccount new.
	firstInnerPortfolio add: firstInnerPortfolioAccount.
	
	secondInnerPortfolio := Portfolio new.
	secondInnerPortfolioAccount := ReceptiveAccount new.
	secondInnerPortfolio add: secondInnerPortfolioAccount.
	
	outerPortfolio add: firstInnerPortfolio.
	outerPortfolio add: secondInnerPortfolio.	
	
	self 
		should: [ outerPortfolio add: secondInnerPortfolioAccount ]
		raise: Error
		withMessageText: Portfolio cannotHaveDuplicateAccounts!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 10:09:01'!
test12AddingDepthAbove1DuplicateSignalsError
	
	| outerPortfolio firstInnerPortfolio secondInnerPortfolio secondInnerPortfolioAccount |
	
	outerPortfolio := Portfolio new.
	
	firstInnerPortfolio := Portfolio new.
	
	secondInnerPortfolio := Portfolio new.
	secondInnerPortfolioAccount := ReceptiveAccount new.
	secondInnerPortfolio add: secondInnerPortfolioAccount.
	
	firstInnerPortfolio add: secondInnerPortfolio.	
	outerPortfolio add: firstInnerPortfolio.
	
	self 
		should: [ outerPortfolio add: secondInnerPortfolioAccount ]
		raise: Error
		withMessageText: Portfolio cannotHaveDuplicateAccounts! !

!methodRemoval: PortfolioTest #test12 stamp: 'CJ 11/8/2020 10:09:01'!
test12
	
	| outerPortfolio firstInnerPortfolio secondInnerPortfolio secondInnerPortfolioAccount |
	
	outerPortfolio := Portfolio new.
	
	firstInnerPortfolio := Portfolio new.
	
	secondInnerPortfolio := Portfolio new.
	secondInnerPortfolioAccount := ReceptiveAccount new.
	secondInnerPortfolio add: secondInnerPortfolioAccount.
	
	firstInnerPortfolio add: secondInnerPortfolio.	
	outerPortfolio add: firstInnerPortfolio.
	
	self 
		should: [ outerPortfolio add: secondInnerPortfolioAccount ]
		raise: Error
		withMessageText: Portfolio cannotHaveDuplicateAccounts!

----QUIT----(8 November 2020 12:06:58) CuisUniversity-4384.image priorSource: 19044892!

----STARTUP---- (8 November 2020 13:17:52) as /home/kali/exactas/ing1/cuis/CuisUniversity-4384.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:19:10'!
test13
	
	| outerPortfolio innerPortfolio innerPortfolioAccount |
	
	outerPortfolio := Portfolio new.
	innerPortfolio := Portfolio new.
	innerPortfolioAccount := ReceptiveAccount new.
	
	innerPortfolio add: innerPortfolioAccount.
	outerPortfolio add: innerPortfolio.
	
	self 
		should: [ outerPortfolio add: innerPortfolioAccount ]
		raise: Error
		withMessageText: Portfolio cannotHaveDuplicateAccounts! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:19:32' prior: 50933228!
test13
	
	| outerPortfolio innerPortfolio outerPortfolioAccount |
	
	outerPortfolio := Portfolio new.
	innerPortfolio := Portfolio new.
	outerPortfolioAccount := ReceptiveAccount new.
	
	innerPortfolio add: outerPortfolioAccount.
	outerPortfolio add: innerPortfolio.
	
	self 
		should: [ outerPortfolio add: outerPortfolioAccount ]
		raise: Error
		withMessageText: Portfolio cannotHaveDuplicateAccounts! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:19:45' prior: 50933244!
test13
	
	| outerPortfolio innerPortfolio outerPortfolioAccount |
	
	outerPortfolio := Portfolio new.
	innerPortfolio := Portfolio new.
	outerPortfolioAccount := ReceptiveAccount new.
	
	outerPortfolio add: outerPortfolioAccount.
	outerPortfolio add: innerPortfolio.
	
	self 
		should: [ innerPortfolio add: outerPortfolioAccount ]
		raise: Error
		withMessageText: Portfolio cannotHaveDuplicateAccounts! !

!testRun: #PortfolioTest #test13 stamp: 'CJ 11/8/2020 13:19:46'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'CJ 11/8/2020 13:21:34' prior: 50933003!
add: anAccountOrPortfolio

	(self isDuplicate: anAccountOrPortfolio) ifTrue: [ self error: self class cannotHaveDuplicateAccounts ].
	
	anAccountOrPortfolio setParent: self.

	accountsAndPortfolios add: anAccountOrPortfolio.! !

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/8/2020 13:21:40'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/8/2020 13:21:40'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/8/2020 13:21:40'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesntHaveTransaction stamp: 'CJ 11/8/2020 13:21:40'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAccountAndPortfolioHasAllTransactions stamp: 'CJ 11/8/2020 13:21:40'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithOneAccountHasCorrectTransactions stamp: 'CJ 11/8/2020 13:21:40'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithManyAccountsHasCorrectTransactions stamp: 'CJ 11/8/2020 13:21:40'!
ERROR!

!testRun: #PortfolioTest #test08AddingSameAccountTwiceSignalsError stamp: 'CJ 11/8/2020 13:21:40'!
ERROR!

!testRun: #PortfolioTest #test09AddingPortfolioToItselfSignalsError stamp: 'CJ 11/8/2020 13:21:40'!
PASSED!

!testRun: #PortfolioTest #test10AddingDepth1DuplicateToPortfolioWithOneElementSignalsError stamp: 'CJ 11/8/2020 13:21:40'!
ERROR!

!testRun: #PortfolioTest #test11AddingDepth1DuplicateToPortfolioWithManyElementsSignalsError stamp: 'CJ 11/8/2020 13:21:40'!
ERROR!

!testRun: #PortfolioTest #test12AddingDepthAbove1DuplicateSignalsError stamp: 'CJ 11/8/2020 13:21:40'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'CJ 11/8/2020 13:21:40'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/8/2020 13:21:43'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:21:57'!
setParent: aPortfolio 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:22:14' prior: 50933337!
setParent: aPortfolio 
	
	| parent |
	parent := aPortfolio.! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'CJ 11/8/2020 13:22:41'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions parentPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:22:36' prior: 50933342!
setParent: aPortfolio 
	
	parentPortfolio := aPortfolio.! !

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/8/2020 13:22:44'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/8/2020 13:22:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAccountAndPortfolioHasAllTransactions stamp: 'CJ 11/8/2020 13:22:47'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:22:52'!
setParent: aPortfolio 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJ 11/8/2020 13:23:02'!
Object subclass: #Portfolio
	instanceVariableNames: 'accountsAndPortfolios parentPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:22:59' prior: 50933372!
setParent: aPortfolio 
	
	parentPortfolio := aPortfolio.! !

!testRun: #PortfolioTest #test05PortfolioWithAccountAndPortfolioHasAllTransactions stamp: 'CJ 11/8/2020 13:23:04'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithOneAccountHasCorrectTransactions stamp: 'CJ 11/8/2020 13:23:05'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithManyAccountsHasCorrectTransactions stamp: 'CJ 11/8/2020 13:23:06'!
PASSED!

!testRun: #PortfolioTest #test08AddingSameAccountTwiceSignalsError stamp: 'CJ 11/8/2020 13:23:07'!
PASSED!

!testRun: #PortfolioTest #test10AddingDepth1DuplicateToPortfolioWithOneElementSignalsError stamp: 'CJ 11/8/2020 13:23:07'!
PASSED!

!testRun: #PortfolioTest #test11AddingDepth1DuplicateToPortfolioWithManyElementsSignalsError stamp: 'CJ 11/8/2020 13:23:08'!
PASSED!

!testRun: #PortfolioTest #test12AddingDepthAbove1DuplicateSignalsError stamp: 'CJ 11/8/2020 13:23:08'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'CJ 11/8/2020 13:23:09'!
FAILURE!
!Portfolio methodsFor: 'initialization' stamp: 'CJ 11/8/2020 13:23:28' prior: 50932999 overrides: 16896425!
initialize

	accountsAndPortfolios := OrderedCollection new.
	parentPortfolio := self.! !

!testRun: #PortfolioTest #test13 stamp: 'CJ 11/8/2020 13:26:09'!
FAILURE!
!Portfolio methodsFor: 'private' stamp: 'CJ 11/8/2020 13:29:48' prior: 50933027!
isDuplicate: anAccountOrPortfolio

	^ (self = anAccountOrPortfolio)
		or: [ self hasAccountOrPortfolio: anAccountOrPortfolio ]
		or: [ parentPortfolio hasAccountOrPortfolio: anAccountOrPortfolio ].! !

!testRun: #PortfolioTest #test13 stamp: 'CJ 11/8/2020 13:29:53'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/8/2020 13:29:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/8/2020 13:29:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/8/2020 13:29:53'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesntHaveTransaction stamp: 'CJ 11/8/2020 13:29:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAccountAndPortfolioHasAllTransactions stamp: 'CJ 11/8/2020 13:29:53'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithOneAccountHasCorrectTransactions stamp: 'CJ 11/8/2020 13:29:53'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithManyAccountsHasCorrectTransactions stamp: 'CJ 11/8/2020 13:29:53'!
PASSED!

!testRun: #PortfolioTest #test08AddingSameAccountTwiceSignalsError stamp: 'CJ 11/8/2020 13:29:53'!
PASSED!

!testRun: #PortfolioTest #test09AddingPortfolioToItselfSignalsError stamp: 'CJ 11/8/2020 13:29:53'!
PASSED!

!testRun: #PortfolioTest #test10AddingDepth1DuplicateToPortfolioWithOneElementSignalsError stamp: 'CJ 11/8/2020 13:29:53'!
PASSED!

!testRun: #PortfolioTest #test11AddingDepth1DuplicateToPortfolioWithManyElementsSignalsError stamp: 'CJ 11/8/2020 13:29:53'!
PASSED!

!testRun: #PortfolioTest #test12AddingDepthAbove1DuplicateSignalsError stamp: 'CJ 11/8/2020 13:29:53'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'CJ 11/8/2020 13:29:53'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'CJ 11/8/2020 13:29:56'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/8/2020 13:29:56'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/8/2020 13:29:56'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/8/2020 13:29:56'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesntHaveTransaction stamp: 'CJ 11/8/2020 13:29:56'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAccountAndPortfolioHasAllTransactions stamp: 'CJ 11/8/2020 13:29:56'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithOneAccountHasCorrectTransactions stamp: 'CJ 11/8/2020 13:29:56'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithManyAccountsHasCorrectTransactions stamp: 'CJ 11/8/2020 13:29:56'!
PASSED!

!testRun: #PortfolioTest #test08AddingSameAccountTwiceSignalsError stamp: 'CJ 11/8/2020 13:29:56'!
PASSED!

!testRun: #PortfolioTest #test09AddingPortfolioToItselfSignalsError stamp: 'CJ 11/8/2020 13:29:56'!
PASSED!

!testRun: #PortfolioTest #test10AddingDepth1DuplicateToPortfolioWithOneElementSignalsError stamp: 'CJ 11/8/2020 13:29:56'!
PASSED!

!testRun: #PortfolioTest #test11AddingDepth1DuplicateToPortfolioWithManyElementsSignalsError stamp: 'CJ 11/8/2020 13:29:56'!
PASSED!

!testRun: #PortfolioTest #test12AddingDepthAbove1DuplicateSignalsError stamp: 'CJ 11/8/2020 13:29:56'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'CJ 11/8/2020 13:29:56'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:32:52'!
test14
	
	| outerPortfolio firstInnerPortfolio secondInnerPortfolio secondInnerPortfolioAccount |
	
	outerPortfolio := Portfolio new.
	
	firstInnerPortfolio := Portfolio new.
	
	secondInnerPortfolio := Portfolio new.
	secondInnerPortfolioAccount := ReceptiveAccount new.
	secondInnerPortfolio add: secondInnerPortfolioAccount.
	
	firstInnerPortfolio add: secondInnerPortfolio.	
	outerPortfolio add: firstInnerPortfolio.
	
	self 
		should: [ outerPortfolio add: secondInnerPortfolioAccount ]
		raise: Error
		withMessageText: Portfolio cannotHaveDuplicateAccounts! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:33:08' prior: 50933534!
test14
	
	| outerPortfolio firstInnerPortfolio secondInnerPortfolio outerPortfolioAccount |
	
	outerPortfolio := Portfolio new.
	
	firstInnerPortfolio := Portfolio new.
	
	secondInnerPortfolio := Portfolio new.
	outerPortfolioAccount := ReceptiveAccount new.
	secondInnerPortfolio add: outerPortfolioAccount.
	
	firstInnerPortfolio add: secondInnerPortfolio.	
	outerPortfolio add: firstInnerPortfolio.
	
	self 
		should: [ outerPortfolio add: outerPortfolioAccount ]
		raise: Error
		withMessageText: Portfolio cannotHaveDuplicateAccounts! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:33:25' prior: 50933555!
test14
	
	| outerPortfolio firstInnerPortfolio secondInnerPortfolio outerPortfolioAccount |
	
	outerPortfolio := Portfolio new.
	
	firstInnerPortfolio := Portfolio new.
	
	secondInnerPortfolio := Portfolio new.
	outerPortfolioAccount := ReceptiveAccount new.
	outerPortfolio add: outerPortfolioAccount.
	
	firstInnerPortfolio add: secondInnerPortfolio.	
	outerPortfolio add: firstInnerPortfolio.
	
	self 
		should: [ secondInnerPortfolio add: outerPortfolioAccount ]
		raise: Error
		withMessageText: Portfolio cannotHaveDuplicateAccounts! !

!testRun: #PortfolioTest #test14 stamp: 'CJ 11/8/2020 13:33:26'!
FAILURE!
!Portfolio methodsFor: 'private' stamp: 'CJ 11/8/2020 13:34:38' prior: 50933428!
isDuplicate: anAccountOrPortfolio

	^ (self = anAccountOrPortfolio)
		or: [ self hasAccountOrPortfolio: anAccountOrPortfolio ]
		or: [ parentPortfolio hasAccountOrPortfolio: anAccountOrPortfolio ]
		or: [ parentPortfolio parentHasAccountOrPortfolio: anAccountOrPortfolio ].! !

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/8/2020 13:35:03'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/8/2020 13:35:03'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/8/2020 13:35:03'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesntHaveTransaction stamp: 'CJ 11/8/2020 13:35:03'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAccountAndPortfolioHasAllTransactions stamp: 'CJ 11/8/2020 13:35:03'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithOneAccountHasCorrectTransactions stamp: 'CJ 11/8/2020 13:35:03'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithManyAccountsHasCorrectTransactions stamp: 'CJ 11/8/2020 13:35:03'!
ERROR!

!testRun: #PortfolioTest #test08AddingSameAccountTwiceSignalsError stamp: 'CJ 11/8/2020 13:35:03'!
ERROR!

!testRun: #PortfolioTest #test09AddingPortfolioToItselfSignalsError stamp: 'CJ 11/8/2020 13:35:03'!
PASSED!

!testRun: #PortfolioTest #test10AddingDepth1DuplicateToPortfolioWithOneElementSignalsError stamp: 'CJ 11/8/2020 13:35:03'!
ERROR!

!testRun: #PortfolioTest #test11AddingDepth1DuplicateToPortfolioWithManyElementsSignalsError stamp: 'CJ 11/8/2020 13:35:03'!
ERROR!

!testRun: #PortfolioTest #test12AddingDepthAbove1DuplicateSignalsError stamp: 'CJ 11/8/2020 13:35:03'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'CJ 11/8/2020 13:35:03'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'CJ 11/8/2020 13:35:03'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/8/2020 13:35:05'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:35:22'!
parentHasAccountOrPortfolio: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:35:53' prior: 50933660!
parentHasAccountOrPortfolio: anAccountOrPortfolio
	
	parentPortfolio hasAccountOrPortfolio: anAccountOrPortfolio.! !

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/8/2020 13:35:55'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:36:10' prior: 50933666!
parentHasAccountOrPortfolio: anAccountOrPortfolio
	
	^ parentPortfolio hasAccountOrPortfolio: anAccountOrPortfolio.! !

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/8/2020 13:36:13'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/8/2020 13:36:13'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/8/2020 13:36:13'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesntHaveTransaction stamp: 'CJ 11/8/2020 13:36:13'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAccountAndPortfolioHasAllTransactions stamp: 'CJ 11/8/2020 13:36:13'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithOneAccountHasCorrectTransactions stamp: 'CJ 11/8/2020 13:36:13'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithManyAccountsHasCorrectTransactions stamp: 'CJ 11/8/2020 13:36:13'!
PASSED!

!testRun: #PortfolioTest #test08AddingSameAccountTwiceSignalsError stamp: 'CJ 11/8/2020 13:36:13'!
PASSED!

!testRun: #PortfolioTest #test09AddingPortfolioToItselfSignalsError stamp: 'CJ 11/8/2020 13:36:13'!
PASSED!

!testRun: #PortfolioTest #test10AddingDepth1DuplicateToPortfolioWithOneElementSignalsError stamp: 'CJ 11/8/2020 13:36:13'!
PASSED!

!testRun: #PortfolioTest #test11AddingDepth1DuplicateToPortfolioWithManyElementsSignalsError stamp: 'CJ 11/8/2020 13:36:13'!
PASSED!

!testRun: #PortfolioTest #test12AddingDepthAbove1DuplicateSignalsError stamp: 'CJ 11/8/2020 13:36:13'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'CJ 11/8/2020 13:36:13'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'CJ 11/8/2020 13:36:13'!
PASSED!
!Portfolio methodsFor: 'private' stamp: 'CJ 11/8/2020 13:37:43' prior: 50933597!
isDuplicate: anAccountOrPortfolio

	^ (self = anAccountOrPortfolio)
		or: [ self hasAccountOrPortfolio: anAccountOrPortfolio ]
		or: [ parentPortfolio ancestorsHaveAccountOrPortfolio: anAccountOrPortfolio ].
		
		"or: [ parentPortfolio hasAccountOrPortfolio: anAccountOrPortfolio ]
		or: [ parentPortfolio parentHasAccountOrPortfolio: anAccountOrPortfolio ]."! !

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/8/2020 13:37:47'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/8/2020 13:37:47'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/8/2020 13:37:47'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesntHaveTransaction stamp: 'CJ 11/8/2020 13:37:47'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAccountAndPortfolioHasAllTransactions stamp: 'CJ 11/8/2020 13:37:47'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithOneAccountHasCorrectTransactions stamp: 'CJ 11/8/2020 13:37:47'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithManyAccountsHasCorrectTransactions stamp: 'CJ 11/8/2020 13:37:47'!
ERROR!

!testRun: #PortfolioTest #test08AddingSameAccountTwiceSignalsError stamp: 'CJ 11/8/2020 13:37:47'!
ERROR!

!testRun: #PortfolioTest #test09AddingPortfolioToItselfSignalsError stamp: 'CJ 11/8/2020 13:37:47'!
PASSED!

!testRun: #PortfolioTest #test10AddingDepth1DuplicateToPortfolioWithOneElementSignalsError stamp: 'CJ 11/8/2020 13:37:47'!
ERROR!

!testRun: #PortfolioTest #test11AddingDepth1DuplicateToPortfolioWithManyElementsSignalsError stamp: 'CJ 11/8/2020 13:37:47'!
ERROR!

!testRun: #PortfolioTest #test12AddingDepthAbove1DuplicateSignalsError stamp: 'CJ 11/8/2020 13:37:47'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'CJ 11/8/2020 13:37:47'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'CJ 11/8/2020 13:37:47'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/8/2020 13:37:49'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'CJ 11/8/2020 13:37:59'!
ancestorsHaveAccountOrPortfolio: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'testing' stamp: 'CJ 11/8/2020 13:39:05' prior: 50933797!
ancestorsHaveAccountOrPortfolio: anAccountOrPortfolio
	
	^ (parentPortfolio hasAccountOrPortfolio: anAccountOrPortfolio)
		or: [ parentPortfolio ancestorsHaveAccountOrPortfolio: anAccountOrPortfolio ].! !

Portfolio subclass: #RootPortfolio
	instanceVariableNames: 'accountsAndPortfolios parentPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Portfolio subclass: #RootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #RootPortfolio category: 'Portfolio-Ejercicio' stamp: 'CJ 11/8/2020 13:40:17'!
Portfolio subclass: #RootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!RootPortfolio methodsFor: 'nil' stamp: 'CJ 11/8/2020 13:41:33' overrides: 50933803!
ancestorsHaveAccountOrPortfolio: anAccountOrPortfolio
	
	^ false! !
!Portfolio methodsFor: 'initialization' stamp: 'CJ 11/8/2020 13:41:56' prior: 50933420 overrides: 16896425!
initialize

	accountsAndPortfolios := OrderedCollection new.
	parentPortfolio := RootPortfolio new.! !
!Portfolio methodsFor: 'testing' stamp: 'CJ 11/8/2020 13:45:42' prior: 50933803!
ancestorsHaveAccountOrPortfolio: anAccountOrPortfolio
	
	^ parentPortfolio ancestorsHaveAccountOrPortfolio: anAccountOrPortfolio.! !
!Portfolio methodsFor: 'private' stamp: 'CJ 11/8/2020 13:29:48' prior: 50933732!
isDuplicate: anAccountOrPortfolio

	^ (self = anAccountOrPortfolio)
		or: [ self hasAccountOrPortfolio: anAccountOrPortfolio ]
		or: [ parentPortfolio hasAccountOrPortfolio: anAccountOrPortfolio ].! !

!methodRemoval: Portfolio #ancestorsHaveAccountOrPortfolio: stamp: 'CJ 11/8/2020 13:53:44'!
ancestorsHaveAccountOrPortfolio: anAccountOrPortfolio
	
	^ parentPortfolio ancestorsHaveAccountOrPortfolio: anAccountOrPortfolio.!
!Portfolio methodsFor: 'initialization' stamp: 'CJ 11/8/2020 13:41:56' prior: 50933836 overrides: 16896425!
initialize

	accountsAndPortfolios := OrderedCollection new.
	parentPortfolio := RootPortfolio new.! !
!Portfolio methodsFor: 'initialization' stamp: 'CJ 11/8/2020 13:41:56' prior: 50933866 overrides: 16896425!
initialize

	accountsAndPortfolios := OrderedCollection new.
	parentPortfolio := RootPortfolio new.! !
!Portfolio methodsFor: 'initialization' stamp: 'CJ 11/8/2020 13:23:28' prior: 50933873 overrides: 16896425!
initialize

	accountsAndPortfolios := OrderedCollection new.
	parentPortfolio := self.! !
!Portfolio methodsFor: 'accessing' stamp: 'CJ 11/8/2020 13:55:00' prior: 50932989!
transactions

	| allTransactions |

	allTransactions := OrderedCollection new.

	accountsAndPortfolios do: [ :anAccountOrPortfolio | allTransactions addAll: anAccountOrPortfolio transactions ].

	^ allTransactions.! !

!classRemoval: #RootPortfolio stamp: 'CJ 11/8/2020 13:55:16'!
Portfolio subclass: #RootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 14:22:46' prior: 50933575!
test14
	
	| outerPortfolio firstInnerPortfolio secondInnerPortfolio outerPortfolioAccount |
	
	outerPortfolio := Portfolio new.
	firstInnerPortfolio := Portfolio new.
	secondInnerPortfolio := Portfolio new.
	outerPortfolioAccount := ReceptiveAccount new.
	
	outerPortfolio add: outerPortfolioAccount.
	firstInnerPortfolio add: secondInnerPortfolio.	
	outerPortfolio add: firstInnerPortfolio.
	
	self 
		should: [ secondInnerPortfolio add: outerPortfolioAccount ]
		raise: Error
		withMessageText: Portfolio cannotHaveDuplicateAccounts! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 14:23:06' prior: 50933180!
test12AddingDepthAbove1DuplicateSignalsError
	
	| outerPortfolio firstInnerPortfolio secondInnerPortfolio secondInnerPortfolioAccount |
	
	outerPortfolio := Portfolio new.
	firstInnerPortfolio := Portfolio new.
	secondInnerPortfolio := Portfolio new.
	secondInnerPortfolioAccount := ReceptiveAccount new.
	
	secondInnerPortfolio add: secondInnerPortfolioAccount.
	firstInnerPortfolio add: secondInnerPortfolio.	
	outerPortfolio add: firstInnerPortfolio.
	
	self 
		should: [ outerPortfolio add: secondInnerPortfolioAccount ]
		raise: Error
		withMessageText: Portfolio cannotHaveDuplicateAccounts! !

----STARTUP---- (9 November 2020 11:02:30) as /home/kali/exactas/ing1/cuis/CuisUniversity-4384.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:19:10'!
test13
	
	| outerPortfolio innerPortfolio innerPortfolioAccount |
	
	outerPortfolio := Portfolio new.
	innerPortfolio := Portfolio new.
	innerPortfolioAccount := ReceptiveAccount new.
	
	innerPortfolio add: innerPortfolioAccount.
	outerPortfolio add: innerPortfolio.
	
	self 
		should: [ outerPortfolio add: innerPortfolioAccount ]
		raise: Error
		withMessageText: Portfolio cannotHaveDuplicateAccounts! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:19:32' prior: 50933948!
test13
	
	| outerPortfolio innerPortfolio outerPortfolioAccount |
	
	outerPortfolio := Portfolio new.
	innerPortfolio := Portfolio new.
	outerPortfolioAccount := ReceptiveAccount new.
	
	innerPortfolio add: outerPortfolioAccount.
	outerPortfolio add: innerPortfolio.
	
	self 
		should: [ outerPortfolio add: outerPortfolioAccount ]
		raise: Error
		withMessageText: Portfolio cannotHaveDuplicateAccounts! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:19:45' prior: 50933964!
test13
	
	| outerPortfolio innerPortfolio outerPortfolioAccount |
	
	outerPortfolio := Portfolio new.
	innerPortfolio := Portfolio new.
	outerPortfolioAccount := ReceptiveAccount new.
	
	outerPortfolio add: outerPortfolioAccount.
	outerPortfolio add: innerPortfolio.
	
	self 
		should: [ innerPortfolio add: outerPortfolioAccount ]
		raise: Error
		withMessageText: Portfolio cannotHaveDuplicateAccounts! !
!Portfolio methodsFor: 'adding' stamp: 'CJ 11/8/2020 13:21:34' prior: 50933003!
add: anAccountOrPortfolio

	(self isDuplicate: anAccountOrPortfolio) ifTrue: [ self error: self class cannotHaveDuplicateAccounts ].
	
	anAccountOrPortfolio setParent: self.

	accountsAndPortfolios add: anAccountOrPortfolio.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:21:57'!
setParent: aPortfolio 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:22:14' prior: 50934006!
setParent: aPortfolio 
	
	| parent |
	parent := aPortfolio.! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'CJ 11/9/2020 11:02:37'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions parentPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:22:36' prior: 50934011!
setParent: aPortfolio 
	
	parentPortfolio := aPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:22:52'!
setParent: aPortfolio 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJ 11/9/2020 11:02:37'!
Object subclass: #Portfolio
	instanceVariableNames: 'accountsAndPortfolios parentPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:22:59' prior: 50934030!
setParent: aPortfolio 
	
	parentPortfolio := aPortfolio.! !
!Portfolio methodsFor: 'initialization' stamp: 'CJ 11/8/2020 13:23:28' prior: 50932999 overrides: 16896425!
initialize

	accountsAndPortfolios := OrderedCollection new.
	parentPortfolio := self.! !
!Portfolio methodsFor: 'private' stamp: 'CJ 11/8/2020 13:29:48' prior: 50933027!
isDuplicate: anAccountOrPortfolio

	^ (self = anAccountOrPortfolio)
		or: [ self hasAccountOrPortfolio: anAccountOrPortfolio ]
		or: [ parentPortfolio hasAccountOrPortfolio: anAccountOrPortfolio ].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:32:52'!
test14
	
	| outerPortfolio firstInnerPortfolio secondInnerPortfolio secondInnerPortfolioAccount |
	
	outerPortfolio := Portfolio new.
	
	firstInnerPortfolio := Portfolio new.
	
	secondInnerPortfolio := Portfolio new.
	secondInnerPortfolioAccount := ReceptiveAccount new.
	secondInnerPortfolio add: secondInnerPortfolioAccount.
	
	firstInnerPortfolio add: secondInnerPortfolio.	
	outerPortfolio add: firstInnerPortfolio.
	
	self 
		should: [ outerPortfolio add: secondInnerPortfolioAccount ]
		raise: Error
		withMessageText: Portfolio cannotHaveDuplicateAccounts! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:33:08' prior: 50934064!
test14
	
	| outerPortfolio firstInnerPortfolio secondInnerPortfolio outerPortfolioAccount |
	
	outerPortfolio := Portfolio new.
	
	firstInnerPortfolio := Portfolio new.
	
	secondInnerPortfolio := Portfolio new.
	outerPortfolioAccount := ReceptiveAccount new.
	secondInnerPortfolio add: outerPortfolioAccount.
	
	firstInnerPortfolio add: secondInnerPortfolio.	
	outerPortfolio add: firstInnerPortfolio.
	
	self 
		should: [ outerPortfolio add: outerPortfolioAccount ]
		raise: Error
		withMessageText: Portfolio cannotHaveDuplicateAccounts! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:33:25' prior: 50934085!
test14
	
	| outerPortfolio firstInnerPortfolio secondInnerPortfolio outerPortfolioAccount |
	
	outerPortfolio := Portfolio new.
	
	firstInnerPortfolio := Portfolio new.
	
	secondInnerPortfolio := Portfolio new.
	outerPortfolioAccount := ReceptiveAccount new.
	outerPortfolio add: outerPortfolioAccount.
	
	firstInnerPortfolio add: secondInnerPortfolio.	
	outerPortfolio add: firstInnerPortfolio.
	
	self 
		should: [ secondInnerPortfolio add: outerPortfolioAccount ]
		raise: Error
		withMessageText: Portfolio cannotHaveDuplicateAccounts! !
!Portfolio methodsFor: 'private' stamp: 'CJ 11/8/2020 13:34:38' prior: 50934055!
isDuplicate: anAccountOrPortfolio

	^ (self = anAccountOrPortfolio)
		or: [ self hasAccountOrPortfolio: anAccountOrPortfolio ]
		or: [ parentPortfolio hasAccountOrPortfolio: anAccountOrPortfolio ]
		or: [ parentPortfolio parentHasAccountOrPortfolio: anAccountOrPortfolio ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:35:22'!
parentHasAccountOrPortfolio: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:35:53' prior: 50934137!
parentHasAccountOrPortfolio: anAccountOrPortfolio
	
	parentPortfolio hasAccountOrPortfolio: anAccountOrPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 13:36:10' prior: 50934143!
parentHasAccountOrPortfolio: anAccountOrPortfolio
	
	^ parentPortfolio hasAccountOrPortfolio: anAccountOrPortfolio.! !
!Portfolio methodsFor: 'private' stamp: 'CJ 11/8/2020 13:37:43' prior: 50934125!
isDuplicate: anAccountOrPortfolio

	^ (self = anAccountOrPortfolio)
		or: [ self hasAccountOrPortfolio: anAccountOrPortfolio ]
		or: [ parentPortfolio ancestorsHaveAccountOrPortfolio: anAccountOrPortfolio ].
		
		"or: [ parentPortfolio hasAccountOrPortfolio: anAccountOrPortfolio ]
		or: [ parentPortfolio parentHasAccountOrPortfolio: anAccountOrPortfolio ]."! !
!Portfolio methodsFor: 'testing' stamp: 'CJ 11/8/2020 13:37:59'!
ancestorsHaveAccountOrPortfolio: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'testing' stamp: 'CJ 11/8/2020 13:39:05' prior: 50934171!
ancestorsHaveAccountOrPortfolio: anAccountOrPortfolio
	
	^ (parentPortfolio hasAccountOrPortfolio: anAccountOrPortfolio)
		or: [ parentPortfolio ancestorsHaveAccountOrPortfolio: anAccountOrPortfolio ].! !

!classDefinition: #RootPortfolio category: 'Portfolio-Ejercicio' stamp: 'CJ 11/9/2020 11:02:37'!
Portfolio subclass: #RootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #RootPortfolio category: 'Portfolio-Ejercicio' stamp: 'CJ 11/9/2020 11:02:37'!
Portfolio subclass: #RootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!RootPortfolio methodsFor: 'nil' stamp: 'CJ 11/8/2020 13:41:33' overrides: 50934177!
ancestorsHaveAccountOrPortfolio: anAccountOrPortfolio
	
	^ false! !
!Portfolio methodsFor: 'initialization' stamp: 'CJ 11/8/2020 13:41:56' prior: 50934049 overrides: 16896425!
initialize

	accountsAndPortfolios := OrderedCollection new.
	parentPortfolio := RootPortfolio new.! !
!Portfolio methodsFor: 'testing' stamp: 'CJ 11/8/2020 13:45:42' prior: 50934177!
ancestorsHaveAccountOrPortfolio: anAccountOrPortfolio
	
	^ parentPortfolio ancestorsHaveAccountOrPortfolio: anAccountOrPortfolio.! !
!Portfolio methodsFor: 'private' stamp: 'CJ 11/8/2020 13:29:48' prior: 50934157!
isDuplicate: anAccountOrPortfolio

	^ (self = anAccountOrPortfolio)
		or: [ self hasAccountOrPortfolio: anAccountOrPortfolio ]
		or: [ parentPortfolio hasAccountOrPortfolio: anAccountOrPortfolio ].! !

!methodRemoval: Portfolio #ancestorsHaveAccountOrPortfolio: stamp: 'CJ 11/9/2020 11:02:37'!
ancestorsHaveAccountOrPortfolio: anAccountOrPortfolio
	
	^ parentPortfolio ancestorsHaveAccountOrPortfolio: anAccountOrPortfolio.!
!Portfolio methodsFor: 'initialization' stamp: 'CJ 11/8/2020 13:41:56' prior: 50934208 overrides: 16896425!
initialize

	accountsAndPortfolios := OrderedCollection new.
	parentPortfolio := RootPortfolio new.! !
!Portfolio methodsFor: 'initialization' stamp: 'CJ 11/8/2020 13:41:56' prior: 50934238 overrides: 16896425!
initialize

	accountsAndPortfolios := OrderedCollection new.
	parentPortfolio := RootPortfolio new.! !
!Portfolio methodsFor: 'initialization' stamp: 'CJ 11/8/2020 13:23:28' prior: 50934245 overrides: 16896425!
initialize

	accountsAndPortfolios := OrderedCollection new.
	parentPortfolio := self.! !
!Portfolio methodsFor: 'accessing' stamp: 'CJ 11/8/2020 13:55:00' prior: 50932989!
transactions

	| allTransactions |

	allTransactions := OrderedCollection new.

	accountsAndPortfolios do: [ :anAccountOrPortfolio | allTransactions addAll: anAccountOrPortfolio transactions ].

	^ allTransactions.! !

!classRemoval: #RootPortfolio stamp: 'CJ 11/9/2020 11:02:37'!
Portfolio subclass: #RootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 14:22:46' prior: 50934105!
test14
	
	| outerPortfolio firstInnerPortfolio secondInnerPortfolio outerPortfolioAccount |
	
	outerPortfolio := Portfolio new.
	firstInnerPortfolio := Portfolio new.
	secondInnerPortfolio := Portfolio new.
	outerPortfolioAccount := ReceptiveAccount new.
	
	outerPortfolio add: outerPortfolioAccount.
	firstInnerPortfolio add: secondInnerPortfolio.	
	outerPortfolio add: firstInnerPortfolio.
	
	self 
		should: [ secondInnerPortfolio add: outerPortfolioAccount ]
		raise: Error
		withMessageText: Portfolio cannotHaveDuplicateAccounts! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/8/2020 14:23:06' prior: 50933180!
test12AddingDepthAbove1DuplicateSignalsError
	
	| outerPortfolio firstInnerPortfolio secondInnerPortfolio secondInnerPortfolioAccount |
	
	outerPortfolio := Portfolio new.
	firstInnerPortfolio := Portfolio new.
	secondInnerPortfolio := Portfolio new.
	secondInnerPortfolioAccount := ReceptiveAccount new.
	
	secondInnerPortfolio add: secondInnerPortfolioAccount.
	firstInnerPortfolio add: secondInnerPortfolio.	
	outerPortfolio add: firstInnerPortfolio.
	
	self 
		should: [ outerPortfolio add: secondInnerPortfolioAccount ]
		raise: Error
		withMessageText: Portfolio cannotHaveDuplicateAccounts! !

!classRemoval: #ReceptiveAccount stamp: 'CJ 11/9/2020 11:02:59'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions parentPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'CJ 11/9/2020 11:02:59'!
Object subclass: #Portfolio
	instanceVariableNames: 'accountsAndPortfolios parentPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'CJ 11/9/2020 11:03:00'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'CJ 11/9/2020 11:03:00'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'CJ 11/9/2020 11:03:00'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountBalance stamp: 'CJ 11/9/2020 11:03:01'!
Object subclass: #AccountBalance
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'CJ 11/9/2020 11:03:01'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'CJ 11/9/2020 11:03:01'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /home/kali/exactas/ing1/ejercicios-isw1/18-Portfolio1/Portfolio-Ejercicio.st----!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'CJ 11/9/2020 11:03:49'!
addParent: aPortfolio 
	
	parentPortfolio := aPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJ 11/9/2020 11:03:49'!
addParent: aPortfolio 
	
	parentPortfolio add: aPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJ 11/9/2020 11:03:49' prior: 50934897!
add: anAccountOrPortfolio

	(self isDuplicate: anAccountOrPortfolio) ifTrue: [ self error: self class cannotHaveDuplicateAccounts ].
	
	anAccountOrPortfolio addParent: self.

	accountsAndPortfolios add: anAccountOrPortfolio.! !

!methodRemoval: ReceptiveAccount #setParent: stamp: 'CJ 11/9/2020 11:03:49'!
setParent: aPortfolio 
	
	parentPortfolio := aPortfolio.!

!methodRemoval: Portfolio #setParent: stamp: 'CJ 11/9/2020 11:03:49'!
setParent: aPortfolio 
	
	parentPortfolio add: aPortfolio.!

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/9/2020 11:05:02'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/9/2020 11:05:02'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/9/2020 11:05:02'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesntHaveTransaction stamp: 'CJ 11/9/2020 11:05:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAccountAndPortfolioHasAllTransactions stamp: 'CJ 11/9/2020 11:05:02'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithOneAccountHasCorrectTransactions stamp: 'CJ 11/9/2020 11:05:02'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithManyAccountsHasCorrectTransactions stamp: 'CJ 11/9/2020 11:05:02'!
PASSED!

!testRun: #PortfolioTest #test08AddingSameAccountTwiceSignalsError stamp: 'CJ 11/9/2020 11:05:02'!
PASSED!

!testRun: #PortfolioTest #test09AddingPortfolioToItselfSignalsError stamp: 'CJ 11/9/2020 11:05:02'!
PASSED!

!testRun: #PortfolioTest #test10AddingAccountIncludedInSingleChildPortfolioSignalsError stamp: 'CJ 11/9/2020 11:05:02'!
PASSED!

!testRun: #PortfolioTest #test11AddingAccountIncludedInChildrenPortfoliosSignalsError stamp: 'CJ 11/9/2020 11:05:02'!
PASSED!

!testRun: #PortfolioTest #test12AddingAccountIncludedInNestedPortfoliosSignalsError stamp: 'CJ 11/9/2020 11:05:02'!
PASSED!

!testRun: #PortfolioTest #test13AddingAccountIncludedInParentPorfolioSignalsError stamp: 'CJ 11/9/2020 11:05:02'!
PASSED!

!testRun: #PortfolioTest #test14AddingAccountWithManyParentsSignalsError stamp: 'CJ 11/9/2020 11:05:02'!
PASSED!
!Portfolio methodsFor: 'private' stamp: 'CJ 11/9/2020 11:08:41'!
anAncestorHasDuplicate: anAccountOrPortfolio

	^ parentPortfolio anySatisfy: [ :aPortfolio | aPortfolio isDuplicate: anAccountOrPortfolio ]! !
!Portfolio methodsFor: 'private' stamp: 'CJ 11/9/2020 11:08:41' prior: 50934915!
isDuplicate: anAccountOrPortfolio

	^ (self = anAccountOrPortfolio)
		or: [ self hasAccountOrPortfolio: anAccountOrPortfolio ]
		or: [ self anAncestorHasDuplicate: anAccountOrPortfolio ]! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJ 11/9/2020 11:09:32'!
Object subclass: #Portfolio
	instanceVariableNames: 'accountsAndPortfolios parentPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJ 11/9/2020 11:09:32' prior: 50935026!
addParent: aPortfolio 
	
	parentPortfolios add: aPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJ 11/9/2020 11:09:32' prior: 50934891 overrides: 16896425!
initialize

	accountsAndPortfolios := OrderedCollection new.
	parentPortfolios := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJ 11/9/2020 11:09:32' prior: 50934932!
parentHasAccountOrPortfolio: anAccountOrPortfolio
	
	^ parentPortfolios hasAccountOrPortfolio: anAccountOrPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CJ 11/9/2020 11:09:32' prior: 50935100!
anAncestorHasDuplicate: anAccountOrPortfolio

	^ parentPortfolios anySatisfy: [ :aPortfolio | aPortfolio isDuplicate: anAccountOrPortfolio ]! !
!Portfolio methodsFor: 'adding' stamp: 'CJ 11/9/2020 11:10:37' prior: 50935031!
add: anAccountOrPortfolio

	(self isDuplicate: anAccountOrPortfolio) ifTrue: [ self error: self class cannotHaveDuplicateAccounts ].

	anAccountOrPortfolio addParent: self.

	accountsAndPortfolios add: anAccountOrPortfolio.! !

!methodRemoval: Portfolio #parentHasAccountOrPortfolio: stamp: 'CJ 11/9/2020 11:11:24'!
parentHasAccountOrPortfolio: anAccountOrPortfolio
	
	^ parentPortfolios hasAccountOrPortfolio: anAccountOrPortfolio.!

Object subclass: #FinancialEntity
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #FinancialEntity category: 'Portfolio-Ejercicio' stamp: 'CJ 11/9/2020 11:14:20'!
Object subclass: #FinancialEntity
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialEntity subclass: #Portfolio
	instanceVariableNames: 'accountsAndPortfolios parentPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJ 11/9/2020 11:14:35'!
FinancialEntity subclass: #Portfolio
	instanceVariableNames: 'accountsAndPortfolios parentPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialEntity subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions parentPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'CJ 11/9/2020 11:14:52'!
FinancialEntity subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions parentPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/9/2020 11:15:25'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/9/2020 11:15:25'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/9/2020 11:15:25'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesntHaveTransaction stamp: 'CJ 11/9/2020 11:15:25'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAccountAndPortfolioHasAllTransactions stamp: 'CJ 11/9/2020 11:15:25'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithOneAccountHasCorrectTransactions stamp: 'CJ 11/9/2020 11:15:25'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithManyAccountsHasCorrectTransactions stamp: 'CJ 11/9/2020 11:15:25'!
PASSED!

!testRun: #PortfolioTest #test08AddingSameAccountTwiceSignalsError stamp: 'CJ 11/9/2020 11:15:25'!
PASSED!

!testRun: #PortfolioTest #test09AddingPortfolioToItselfSignalsError stamp: 'CJ 11/9/2020 11:15:25'!
PASSED!

!testRun: #PortfolioTest #test10AddingAccountIncludedInSingleChildPortfolioSignalsError stamp: 'CJ 11/9/2020 11:15:25'!
PASSED!

!testRun: #PortfolioTest #test11AddingAccountIncludedInChildrenPortfoliosSignalsError stamp: 'CJ 11/9/2020 11:15:25'!
PASSED!

!testRun: #PortfolioTest #test12AddingAccountIncludedInNestedPortfoliosSignalsError stamp: 'CJ 11/9/2020 11:15:25'!
PASSED!

!testRun: #PortfolioTest #test13AddingAccountIncludedInParentPorfolioSignalsError stamp: 'CJ 11/9/2020 11:15:25'!
PASSED!

!testRun: #PortfolioTest #test14AddingAccountWithManyParentsSignalsError stamp: 'CJ 11/9/2020 11:15:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJ 11/9/2020 11:15:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJ 11/9/2020 11:15:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJ 11/9/2020 11:15:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJ 11/9/2020 11:15:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJ 11/9/2020 11:15:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJ 11/9/2020 11:15:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJ 11/9/2020 11:15:28'!
PASSED!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJ 11/9/2020 11:15:53'!
FinancialEntity subclass: #Portfolio
	instanceVariableNames: 'parentPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #FinancialEntity category: 'Portfolio-Ejercicio' stamp: 'CJ 11/9/2020 11:15:53'!
Object subclass: #FinancialEntity
	instanceVariableNames: 'accountsAndPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #FinancialEntity
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #FinancialEntity category: 'Portfolio-Ejercicio' stamp: 'CJ 11/9/2020 11:16:02'!
Object subclass: #FinancialEntity
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialEntity subclass: #Portfolio
	instanceVariableNames: 'parentPortfolios accountsAndPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJ 11/9/2020 11:16:06'!
FinancialEntity subclass: #Portfolio
	instanceVariableNames: 'parentPortfolios accountsAndPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/9/2020 11:16:08'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/9/2020 11:16:08'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/9/2020 11:16:08'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesntHaveTransaction stamp: 'CJ 11/9/2020 11:16:08'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAccountAndPortfolioHasAllTransactions stamp: 'CJ 11/9/2020 11:16:08'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithOneAccountHasCorrectTransactions stamp: 'CJ 11/9/2020 11:16:08'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithManyAccountsHasCorrectTransactions stamp: 'CJ 11/9/2020 11:16:08'!
PASSED!

!testRun: #PortfolioTest #test08AddingSameAccountTwiceSignalsError stamp: 'CJ 11/9/2020 11:16:08'!
PASSED!

!testRun: #PortfolioTest #test09AddingPortfolioToItselfSignalsError stamp: 'CJ 11/9/2020 11:16:08'!
PASSED!

!testRun: #PortfolioTest #test10AddingAccountIncludedInSingleChildPortfolioSignalsError stamp: 'CJ 11/9/2020 11:16:08'!
PASSED!

!testRun: #PortfolioTest #test11AddingAccountIncludedInChildrenPortfoliosSignalsError stamp: 'CJ 11/9/2020 11:16:08'!
PASSED!

!testRun: #PortfolioTest #test12AddingAccountIncludedInNestedPortfoliosSignalsError stamp: 'CJ 11/9/2020 11:16:08'!
PASSED!

!testRun: #PortfolioTest #test13AddingAccountIncludedInParentPorfolioSignalsError stamp: 'CJ 11/9/2020 11:16:08'!
PASSED!

!testRun: #PortfolioTest #test14AddingAccountWithManyParentsSignalsError stamp: 'CJ 11/9/2020 11:16:08'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/9/2020 11:16:10'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/9/2020 11:16:10'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/9/2020 11:16:10'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesntHaveTransaction stamp: 'CJ 11/9/2020 11:16:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAccountAndPortfolioHasAllTransactions stamp: 'CJ 11/9/2020 11:16:10'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithOneAccountHasCorrectTransactions stamp: 'CJ 11/9/2020 11:16:10'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithManyAccountsHasCorrectTransactions stamp: 'CJ 11/9/2020 11:16:10'!
PASSED!

!testRun: #PortfolioTest #test08AddingSameAccountTwiceSignalsError stamp: 'CJ 11/9/2020 11:16:10'!
PASSED!

!testRun: #PortfolioTest #test09AddingPortfolioToItselfSignalsError stamp: 'CJ 11/9/2020 11:16:10'!
PASSED!

!testRun: #PortfolioTest #test10AddingAccountIncludedInSingleChildPortfolioSignalsError stamp: 'CJ 11/9/2020 11:16:10'!
PASSED!

!testRun: #PortfolioTest #test11AddingAccountIncludedInChildrenPortfoliosSignalsError stamp: 'CJ 11/9/2020 11:16:10'!
PASSED!

!testRun: #PortfolioTest #test12AddingAccountIncludedInNestedPortfoliosSignalsError stamp: 'CJ 11/9/2020 11:16:10'!
PASSED!

!testRun: #PortfolioTest #test13AddingAccountIncludedInParentPorfolioSignalsError stamp: 'CJ 11/9/2020 11:16:10'!
PASSED!

!testRun: #PortfolioTest #test14AddingAccountWithManyParentsSignalsError stamp: 'CJ 11/9/2020 11:16:10'!
PASSED!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CJ 11/9/2020 11:16:34'!
FinancialEntity subclass: #Portfolio
	instanceVariableNames: 'accountsAndPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #FinancialEntity category: 'Portfolio-Ejercicio' stamp: 'CJ 11/9/2020 11:16:34'!
Object subclass: #FinancialEntity
	instanceVariableNames: 'parentPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialEntity subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'CJ 11/9/2020 11:16:43'!
FinancialEntity subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!methodRemoval: ReceptiveAccount #addParent: stamp: 'CJ 11/9/2020 11:16:59'!
addParent: aPortfolio 
	
	parentPortfolio := aPortfolio.!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJ 11/9/2020 11:17:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJ 11/9/2020 11:17:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJ 11/9/2020 11:17:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJ 11/9/2020 11:17:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJ 11/9/2020 11:17:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJ 11/9/2020 11:17:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJ 11/9/2020 11:17:01'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/9/2020 11:17:03'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/9/2020 11:17:03'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/9/2020 11:17:03'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesntHaveTransaction stamp: 'CJ 11/9/2020 11:17:03'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAccountAndPortfolioHasAllTransactions stamp: 'CJ 11/9/2020 11:17:03'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithOneAccountHasCorrectTransactions stamp: 'CJ 11/9/2020 11:17:03'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithManyAccountsHasCorrectTransactions stamp: 'CJ 11/9/2020 11:17:03'!
ERROR!

!testRun: #PortfolioTest #test08AddingSameAccountTwiceSignalsError stamp: 'CJ 11/9/2020 11:17:03'!
ERROR!

!testRun: #PortfolioTest #test09AddingPortfolioToItselfSignalsError stamp: 'CJ 11/9/2020 11:17:03'!
PASSED!

!testRun: #PortfolioTest #test10AddingAccountIncludedInSingleChildPortfolioSignalsError stamp: 'CJ 11/9/2020 11:17:03'!
ERROR!

!testRun: #PortfolioTest #test11AddingAccountIncludedInChildrenPortfoliosSignalsError stamp: 'CJ 11/9/2020 11:17:03'!
ERROR!

!testRun: #PortfolioTest #test12AddingAccountIncludedInNestedPortfoliosSignalsError stamp: 'CJ 11/9/2020 11:17:03'!
ERROR!

!testRun: #PortfolioTest #test13AddingAccountIncludedInParentPorfolioSignalsError stamp: 'CJ 11/9/2020 11:17:03'!
ERROR!

!testRun: #PortfolioTest #test14AddingAccountWithManyParentsSignalsError stamp: 'CJ 11/9/2020 11:17:03'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/9/2020 11:17:05'!
ERROR!
!FinancialEntity methodsFor: 'adding' stamp: 'CJ 11/9/2020 11:17:27'!
addParent: aPortfolio 
	
	parentPortfolios add: aPortfolio.! !

!methodRemoval: Portfolio #addParent: stamp: 'CJ 11/9/2020 11:17:27'!
addParent: aPortfolio 
	
	parentPortfolios add: aPortfolio.!

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/9/2020 11:17:33'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/9/2020 11:17:33'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/9/2020 11:17:33'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesntHaveTransaction stamp: 'CJ 11/9/2020 11:17:33'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAccountAndPortfolioHasAllTransactions stamp: 'CJ 11/9/2020 11:17:33'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithOneAccountHasCorrectTransactions stamp: 'CJ 11/9/2020 11:17:33'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithManyAccountsHasCorrectTransactions stamp: 'CJ 11/9/2020 11:17:33'!
ERROR!

!testRun: #PortfolioTest #test08AddingSameAccountTwiceSignalsError stamp: 'CJ 11/9/2020 11:17:33'!
ERROR!

!testRun: #PortfolioTest #test09AddingPortfolioToItselfSignalsError stamp: 'CJ 11/9/2020 11:17:33'!
PASSED!

!testRun: #PortfolioTest #test10AddingAccountIncludedInSingleChildPortfolioSignalsError stamp: 'CJ 11/9/2020 11:17:33'!
ERROR!

!testRun: #PortfolioTest #test11AddingAccountIncludedInChildrenPortfoliosSignalsError stamp: 'CJ 11/9/2020 11:17:33'!
ERROR!

!testRun: #PortfolioTest #test12AddingAccountIncludedInNestedPortfoliosSignalsError stamp: 'CJ 11/9/2020 11:17:33'!
ERROR!

!testRun: #PortfolioTest #test13AddingAccountIncludedInParentPorfolioSignalsError stamp: 'CJ 11/9/2020 11:17:33'!
ERROR!

!testRun: #PortfolioTest #test14AddingAccountWithManyParentsSignalsError stamp: 'CJ 11/9/2020 11:17:33'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/9/2020 11:17:36'!
ERROR!
!FinancialEntity methodsFor: 'nil' stamp: 'CJ 11/9/2020 11:18:34' overrides: 16896425!
initialize

	parentPortfolios := OrderedCollection new.! !

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/9/2020 11:19:23'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/9/2020 11:19:23'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/9/2020 11:19:23'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesntHaveTransaction stamp: 'CJ 11/9/2020 11:19:23'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAccountAndPortfolioHasAllTransactions stamp: 'CJ 11/9/2020 11:19:23'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithOneAccountHasCorrectTransactions stamp: 'CJ 11/9/2020 11:19:23'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithManyAccountsHasCorrectTransactions stamp: 'CJ 11/9/2020 11:19:23'!
ERROR!

!testRun: #PortfolioTest #test08AddingSameAccountTwiceSignalsError stamp: 'CJ 11/9/2020 11:19:23'!
ERROR!

!testRun: #PortfolioTest #test09AddingPortfolioToItselfSignalsError stamp: 'CJ 11/9/2020 11:19:23'!
PASSED!

!testRun: #PortfolioTest #test10AddingAccountIncludedInSingleChildPortfolioSignalsError stamp: 'CJ 11/9/2020 11:19:23'!
ERROR!

!testRun: #PortfolioTest #test11AddingAccountIncludedInChildrenPortfoliosSignalsError stamp: 'CJ 11/9/2020 11:19:23'!
ERROR!

!testRun: #PortfolioTest #test12AddingAccountIncludedInNestedPortfoliosSignalsError stamp: 'CJ 11/9/2020 11:19:23'!
ERROR!

!testRun: #PortfolioTest #test13AddingAccountIncludedInParentPorfolioSignalsError stamp: 'CJ 11/9/2020 11:19:23'!
ERROR!

!testRun: #PortfolioTest #test14AddingAccountWithManyParentsSignalsError stamp: 'CJ 11/9/2020 11:19:23'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJ 11/9/2020 11:19:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJ 11/9/2020 11:19:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJ 11/9/2020 11:19:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJ 11/9/2020 11:19:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJ 11/9/2020 11:19:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJ 11/9/2020 11:19:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJ 11/9/2020 11:19:23'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/9/2020 11:19:25'!
ERROR!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'CJ 11/9/2020 11:19:41' prior: 50934980 overrides: 50935608!
initialize
	
	super initialize.
	transactions := OrderedCollection new.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJ 11/9/2020 11:19:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJ 11/9/2020 11:19:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJ 11/9/2020 11:19:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJ 11/9/2020 11:19:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJ 11/9/2020 11:19:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJ 11/9/2020 11:19:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJ 11/9/2020 11:19:43'!
PASSED!
!Portfolio methodsFor: 'initialization' stamp: 'CJ 11/9/2020 11:20:02' prior: 50935131 overrides: 50935608!
initialize

	super initialize.
	accountsAndPortfolios := OrderedCollection new.! !

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/9/2020 11:20:05'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/9/2020 11:20:05'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/9/2020 11:20:05'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesntHaveTransaction stamp: 'CJ 11/9/2020 11:20:05'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAccountAndPortfolioHasAllTransactions stamp: 'CJ 11/9/2020 11:20:05'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithOneAccountHasCorrectTransactions stamp: 'CJ 11/9/2020 11:20:05'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithManyAccountsHasCorrectTransactions stamp: 'CJ 11/9/2020 11:20:05'!
PASSED!

!testRun: #PortfolioTest #test08AddingSameAccountTwiceSignalsError stamp: 'CJ 11/9/2020 11:20:05'!
PASSED!

!testRun: #PortfolioTest #test09AddingPortfolioToItselfSignalsError stamp: 'CJ 11/9/2020 11:20:05'!
PASSED!

!testRun: #PortfolioTest #test10AddingAccountIncludedInSingleChildPortfolioSignalsError stamp: 'CJ 11/9/2020 11:20:05'!
PASSED!

!testRun: #PortfolioTest #test11AddingAccountIncludedInChildrenPortfoliosSignalsError stamp: 'CJ 11/9/2020 11:20:05'!
PASSED!

!testRun: #PortfolioTest #test12AddingAccountIncludedInNestedPortfoliosSignalsError stamp: 'CJ 11/9/2020 11:20:05'!
PASSED!

!testRun: #PortfolioTest #test13AddingAccountIncludedInParentPorfolioSignalsError stamp: 'CJ 11/9/2020 11:20:05'!
PASSED!

!testRun: #PortfolioTest #test14AddingAccountWithManyParentsSignalsError stamp: 'CJ 11/9/2020 11:20:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJ 11/9/2020 11:21:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJ 11/9/2020 11:21:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJ 11/9/2020 11:21:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJ 11/9/2020 11:21:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJ 11/9/2020 11:21:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJ 11/9/2020 11:21:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJ 11/9/2020 11:21:03'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/9/2020 11:21:04'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/9/2020 11:21:04'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/9/2020 11:21:04'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesntHaveTransaction stamp: 'CJ 11/9/2020 11:21:04'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAccountAndPortfolioHasAllTransactions stamp: 'CJ 11/9/2020 11:21:04'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithOneAccountHasCorrectTransactions stamp: 'CJ 11/9/2020 11:21:04'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithManyAccountsHasCorrectTransactions stamp: 'CJ 11/9/2020 11:21:04'!
PASSED!

!testRun: #PortfolioTest #test08AddingSameAccountTwiceSignalsError stamp: 'CJ 11/9/2020 11:21:04'!
PASSED!

!testRun: #PortfolioTest #test09AddingPortfolioToItselfSignalsError stamp: 'CJ 11/9/2020 11:21:04'!
PASSED!

!testRun: #PortfolioTest #test10AddingAccountIncludedInSingleChildPortfolioSignalsError stamp: 'CJ 11/9/2020 11:21:04'!
PASSED!

!testRun: #PortfolioTest #test11AddingAccountIncludedInChildrenPortfoliosSignalsError stamp: 'CJ 11/9/2020 11:21:04'!
PASSED!

!testRun: #PortfolioTest #test12AddingAccountIncludedInNestedPortfoliosSignalsError stamp: 'CJ 11/9/2020 11:21:04'!
PASSED!

!testRun: #PortfolioTest #test13AddingAccountIncludedInParentPorfolioSignalsError stamp: 'CJ 11/9/2020 11:21:04'!
PASSED!

!testRun: #PortfolioTest #test14AddingAccountWithManyParentsSignalsError stamp: 'CJ 11/9/2020 11:21:04'!
PASSED!
!FinancialEntity methodsFor: 'nil' stamp: 'CJ 11/9/2020 11:21:32'!
balance
	
	self subclassResponsibility! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'CJ 11/9/2020 11:22:04' prior: 50935008!
hasRegistered: aTransaction

	^ transactions includes: aTransaction.
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'CJ 11/9/2020 11:22:06' prior: 50935865!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!FinancialEntity methodsFor: 'nil' stamp: 'CJ 11/9/2020 11:22:16'!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Portfolio methodsFor: 'accessing' stamp: 'CJ 11/9/2020 11:23:16' prior: 50934883!
transactions

	| allTransactions |

	allTransactions := OrderedCollection new.
	self addAllTransactionsTo: allTransactions.
	^ allTransactions.! !
!FinancialEntity methodsFor: 'transactions' stamp: 'CJ 11/9/2020 11:23:32'!
transactions

	self subclassResponsibility ! !
!FinancialEntity methodsFor: 'adding' stamp: 'CJ 11/9/2020 11:24:14'!
addAllTransactionsTo: aTransactionCollection
	
	self subclassResponsibility ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJ 11/9/2020 11:58:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJ 11/9/2020 11:58:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJ 11/9/2020 11:58:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJ 11/9/2020 11:58:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJ 11/9/2020 11:58:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJ 11/9/2020 11:58:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJ 11/9/2020 11:58:54'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/9/2020 11:58:55'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/9/2020 11:58:55'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/9/2020 11:58:55'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesntHaveTransaction stamp: 'CJ 11/9/2020 11:58:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAccountAndPortfolioHasAllTransactions stamp: 'CJ 11/9/2020 11:58:55'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithOneAccountHasCorrectTransactions stamp: 'CJ 11/9/2020 11:58:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithManyAccountsHasCorrectTransactions stamp: 'CJ 11/9/2020 11:58:55'!
PASSED!

!testRun: #PortfolioTest #test08AddingSameAccountTwiceSignalsError stamp: 'CJ 11/9/2020 11:58:55'!
PASSED!

!testRun: #PortfolioTest #test09AddingPortfolioToItselfSignalsError stamp: 'CJ 11/9/2020 11:58:55'!
PASSED!

!testRun: #PortfolioTest #test10AddingAccountIncludedInSingleChildPortfolioSignalsError stamp: 'CJ 11/9/2020 11:58:55'!
PASSED!

!testRun: #PortfolioTest #test11AddingAccountIncludedInChildrenPortfoliosSignalsError stamp: 'CJ 11/9/2020 11:58:55'!
PASSED!

!testRun: #PortfolioTest #test12AddingAccountIncludedInNestedPortfoliosSignalsError stamp: 'CJ 11/9/2020 11:58:55'!
PASSED!

!testRun: #PortfolioTest #test13AddingAccountIncludedInParentPorfolioSignalsError stamp: 'CJ 11/9/2020 11:58:55'!
PASSED!

!testRun: #PortfolioTest #test14AddingAccountWithManyParentsSignalsError stamp: 'CJ 11/9/2020 11:58:55'!
PASSED!
!Portfolio methodsFor: 'private' stamp: 'CJ 11/9/2020 12:00:06' prior: 50934907!
childrenHaveAccountOrPortfolio: anAccountOrPortfolio

	^ accountsAndPortfolios anySatisfy: [ :aPortfolio | aPortfolio hasAccountOrPortfolio: anAccountOrPortfolio ].! !

!methodRemoval: Portfolio #portfolios stamp: 'CJ 11/9/2020 12:00:29'!
portfolios
	^ accountsAndPortfolios select: [ :anAccountOrPortfolio | anAccountOrPortfolio isKindOf: self class ]!

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/9/2020 12:00:31'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/9/2020 12:00:31'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/9/2020 12:00:31'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesntHaveTransaction stamp: 'CJ 11/9/2020 12:00:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAccountAndPortfolioHasAllTransactions stamp: 'CJ 11/9/2020 12:00:31'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithOneAccountHasCorrectTransactions stamp: 'CJ 11/9/2020 12:00:31'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithManyAccountsHasCorrectTransactions stamp: 'CJ 11/9/2020 12:00:31'!
ERROR!

!testRun: #PortfolioTest #test08AddingSameAccountTwiceSignalsError stamp: 'CJ 11/9/2020 12:00:31'!
PASSED!

!testRun: #PortfolioTest #test09AddingPortfolioToItselfSignalsError stamp: 'CJ 11/9/2020 12:00:31'!
PASSED!

!testRun: #PortfolioTest #test10AddingAccountIncludedInSingleChildPortfolioSignalsError stamp: 'CJ 11/9/2020 12:00:31'!
PASSED!

!testRun: #PortfolioTest #test11AddingAccountIncludedInChildrenPortfoliosSignalsError stamp: 'CJ 11/9/2020 12:00:31'!
ERROR!

!testRun: #PortfolioTest #test12AddingAccountIncludedInNestedPortfoliosSignalsError stamp: 'CJ 11/9/2020 12:00:31'!
PASSED!

!testRun: #PortfolioTest #test13AddingAccountIncludedInParentPorfolioSignalsError stamp: 'CJ 11/9/2020 12:00:31'!
ERROR!

!testRun: #PortfolioTest #test14AddingAccountWithManyParentsSignalsError stamp: 'CJ 11/9/2020 12:00:31'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/9/2020 12:00:40'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/9/2020 12:00:40'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/9/2020 12:00:40'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesntHaveTransaction stamp: 'CJ 11/9/2020 12:00:40'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAccountAndPortfolioHasAllTransactions stamp: 'CJ 11/9/2020 12:00:40'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioWithOneAccountHasCorrectTransactions stamp: 'CJ 11/9/2020 12:00:40'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithManyAccountsHasCorrectTransactions stamp: 'CJ 11/9/2020 12:00:40'!
ERROR!

!testRun: #PortfolioTest #test08AddingSameAccountTwiceSignalsError stamp: 'CJ 11/9/2020 12:00:40'!
PASSED!

!testRun: #PortfolioTest #test09AddingPortfolioToItselfSignalsError stamp: 'CJ 11/9/2020 12:00:40'!
PASSED!

!testRun: #PortfolioTest #test10AddingAccountIncludedInSingleChildPortfolioSignalsError stamp: 'CJ 11/9/2020 12:00:40'!
PASSED!

!testRun: #PortfolioTest #test11AddingAccountIncludedInChildrenPortfoliosSignalsError stamp: 'CJ 11/9/2020 12:00:40'!
ERROR!

!testRun: #PortfolioTest #test12AddingAccountIncludedInNestedPortfoliosSignalsError stamp: 'CJ 11/9/2020 12:00:40'!
PASSED!

!testRun: #PortfolioTest #test13AddingAccountIncludedInParentPorfolioSignalsError stamp: 'CJ 11/9/2020 12:00:40'!
ERROR!

!testRun: #PortfolioTest #test14AddingAccountWithManyParentsSignalsError stamp: 'CJ 11/9/2020 12:00:40'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJ 11/9/2020 12:00:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJ 11/9/2020 12:00:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJ 11/9/2020 12:00:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJ 11/9/2020 12:00:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJ 11/9/2020 12:00:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJ 11/9/2020 12:00:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJ 11/9/2020 12:00:40'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/9/2020 12:00:41'!
ERROR!
!FinancialEntity methodsFor: 'testing' stamp: 'CJ 11/9/2020 12:00:55'!
hasAccountOrPortfolio: aReceptiveAccount 
	self shouldBeImplemented.! !
!FinancialEntity methodsFor: 'testing' stamp: 'CJ 11/9/2020 12:01:10' prior: 50936120!
hasAccountOrPortfolio: anAccountOrPortfolio
	
	^ false! !

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/9/2020 12:01:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAccountAndPortfolioHasAllTransactions stamp: 'CJ 11/9/2020 12:01:13'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithManyAccountsHasCorrectTransactions stamp: 'CJ 11/9/2020 12:01:13'!
PASSED!

!testRun: #PortfolioTest #test11AddingAccountIncludedInChildrenPortfoliosSignalsError stamp: 'CJ 11/9/2020 12:01:13'!
PASSED!

!testRun: #PortfolioTest #test13AddingAccountIncludedInParentPorfolioSignalsError stamp: 'CJ 11/9/2020 12:01:14'!
PASSED!

!testRun: #PortfolioTest #test14AddingAccountWithManyParentsSignalsError stamp: 'CJ 11/9/2020 12:01:14'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPorfolioBalanceIs0 stamp: 'CJ 11/9/2020 12:01:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountBalanceIsCorrect stamp: 'CJ 11/9/2020 12:01:16'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesntHaveTransaction stamp: 'CJ 11/9/2020 12:01:16'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithOneAccountHasCorrectTransactions stamp: 'CJ 11/9/2020 12:01:16'!
PASSED!

!testRun: #PortfolioTest #test08AddingSameAccountTwiceSignalsError stamp: 'CJ 11/9/2020 12:01:16'!
PASSED!

!testRun: #PortfolioTest #test09AddingPortfolioToItselfSignalsError stamp: 'CJ 11/9/2020 12:01:16'!
PASSED!

!testRun: #PortfolioTest #test10AddingAccountIncludedInSingleChildPortfolioSignalsError stamp: 'CJ 11/9/2020 12:01:16'!
PASSED!

!testRun: #PortfolioTest #test12AddingAccountIncludedInNestedPortfoliosSignalsError stamp: 'CJ 11/9/2020 12:01:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CJ 11/9/2020 12:01:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CJ 11/9/2020 12:01:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CJ 11/9/2020 12:01:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CJ 11/9/2020 12:01:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CJ 11/9/2020 12:01:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CJ 11/9/2020 12:01:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CJ 11/9/2020 12:01:16'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsBalanceIsCorrect stamp: 'CJ 11/9/2020 12:01:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAccountAndPortfolioHasAllTransactions stamp: 'CJ 11/9/2020 12:01:16'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithManyAccountsHasCorrectTransactions stamp: 'CJ 11/9/2020 12:01:16'!
PASSED!

!testRun: #PortfolioTest #test11AddingAccountIncludedInChildrenPortfoliosSignalsError stamp: 'CJ 11/9/2020 12:01:16'!
PASSED!

!testRun: #PortfolioTest #test13AddingAccountIncludedInParentPorfolioSignalsError stamp: 'CJ 11/9/2020 12:01:16'!
PASSED!

!testRun: #PortfolioTest #test14AddingAccountWithManyParentsSignalsError stamp: 'CJ 11/9/2020 12:01:16'!
PASSED!