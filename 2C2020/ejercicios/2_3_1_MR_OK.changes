

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'FC 10/25/2020 17:10:23'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'FC 10/25/2020 17:13:07'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'no messages' stamp: 'FC 10/25/2020 17:13:20'!
test01
	
	| rover |
	rover := MarsRover withPosition: 1@1 facing: #N.
	rover makeMovements: ''.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: #N.! !

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 17:13:34'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 17:13:34'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'FC 10/25/2020 17:13:40'!
withPosition: aPoint facing: aSymbol 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithPosition: aPoint facing: aSymbol ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'FC 10/25/2020 17:14:14' prior: 50899737!
withPosition: aCoordinate facing: aCardinalPoint 

	^self new initializeWithPosition: aCoordinate facing: aCardinalPoint ! !

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 17:14:15'!
ERROR!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'FC 10/25/2020 17:14:25'!
Object subclass: #MarsRover
	instanceVariableNames: 'coordinate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'FC 10/25/2020 17:14:25'!
Object subclass: #MarsRover
	instanceVariableNames: 'coordinate cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialize' stamp: 'FC 10/25/2020 17:14:25'!
initializeWithPosition: aCoordinate facing: aCardinalPoint 
	self shouldBeImplemented.
	coordinate := aCoordinate.
	cardinalPoint := aCardinalPoint.! !
!MarsRover methodsFor: 'initialize' stamp: 'FC 10/25/2020 17:14:35' prior: 50899770!
initializeWithPosition: aCoordinate facing: aCardinalPoint 
	coordinate := aCoordinate.
	cardinalPoint := aCardinalPoint.! !

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 17:14:42'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:14:50'!
makeMovements: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:14:57' prior: 50899787!
makeMovements: aString 
	! !

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 17:14:59'!
ERROR!
!MarsRover methodsFor: 'acessing' stamp: 'FC 10/25/2020 17:15:10'!
currentPosition
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'acessing' stamp: 'FC 10/25/2020 17:15:23' prior: 50899798!
currentPosition
 	^1@1.! !

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 17:15:25'!
ERROR!
!MarsRover methodsFor: 'acessing' stamp: 'FC 10/25/2020 17:15:33'!
currentDirection
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'acessing' stamp: 'FC 10/25/2020 17:15:52' prior: 50899809!
currentDirection
	^#N.! !

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 17:15:55'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 17:16:02'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:16:45'!
test02
	
	| rover |
	rover := MarsRover withPosition: 1@1 facing: #N.
	rover makeMovements: 'f'.
	
	self assert: rover currentPosition equals: 0@1.
	self assert: rover currentDirection equals: #N.! !

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 17:16:48'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 17:16:48'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 17:16:57'!
FAILURE!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'FC 10/25/2020 17:17:39'!
Object subclass: #MarsRover
	instanceVariableNames: 'coordinate cardinalPoint position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:17:32' prior: 50899792!
makeMovements: aString
	position := 0@1. 
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:17:58' prior: 50899847!
makeMovements: aString
	coordinate := 0@1. 
	! !

Object subclass: #MarsRover
	instanceVariableNames: 'coordinate cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'FC 10/25/2020 17:18:02'!
Object subclass: #MarsRover
	instanceVariableNames: 'coordinate cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 17:18:11'!
FAILURE!
!MarsRover methodsFor: 'acessing' stamp: 'FC 10/25/2020 17:18:20' prior: 50899803!
currentPosition
 	^coordinate.! !

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'FC 10/25/2020 17:18:50'!
Object subclass: #MarsRover
	instanceVariableNames: 'position cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:18:50' prior: 50899778!
initializeWithPosition: aCoordinate facing: aCardinalPoint 
	position := aCoordinate.
	cardinalPoint := aCardinalPoint.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:18:50' prior: 50899852!
makeMovements: aString
	position := 0@1. 
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:18:50' prior: 50899871!
currentPosition
 	^position.! !

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'FC 10/25/2020 17:19:00'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:19:00' prior: 50899883!
initializeWithPosition: aCoordinate facing: aCardinalPoint 
	position := aCoordinate.
	direction := aCardinalPoint.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:19:40' prior: 50899890!
makeMovements: aString
	aString size > 0 ifTrue: [
		position := 0@1. 
	]	
! !

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 17:19:46'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 17:19:46'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:20:21' prior: 50899823!
test02
	
	| rover |
	rover := MarsRover withPosition: 1@1 facing: #N.
	rover makeMovements: 'r'.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: #E.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:20:26'!
test03
	
	| rover |
	rover := MarsRover withPosition: 1@1 facing: #N.
	rover makeMovements: 'r'.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: #E.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:16:45' prior: 50899925!
test02
	
	| rover |
	rover := MarsRover withPosition: 1@1 facing: #N.
	rover makeMovements: 'f'.
	
	self assert: rover currentPosition equals: 0@1.
	self assert: rover currentDirection equals: #N.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:22:08' prior: 50899914!
makeMovements: aString
	
	aString = 'f' ifTrue: [
		position := 0@1 
	].

	aString = 'r' ifTrue	: [
		
	]
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:22:16' prior: 50899954!
makeMovements: aString
	
	aString = 'f' ifTrue: [
		position := 0@1 
	].

	aString = 'r' ifTrue	: [
		
	]
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:22:30' prior: 50899961!
makeMovements: aString
	
	aString = 'f' ifTrue: [
		position := 0@1 
	].

	aString = 'r' ifTrue	: [
		direction := #E
	]
! !

!testRun: #MarsRoverTest #test03 stamp: 'FC 10/25/2020 17:22:34'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'FC 10/25/2020 17:22:34'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:22:45' prior: 50899968!
makeMovements: aString
	
	aString = 'f' ifTrue: [
		position := 0@1 
	].

	(aString = 'r') ifTrue	: [
		direction := #E
	]
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:22:52' prior: 50899980!
makeMovements: aString
	
	(aString = 'f') ifTrue: [
		position := 0@1 
	].

	(aString = 'r') ifTrue	: [
		direction := #E
	]
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:23:06' prior: 50899987!
makeMovements: aString
	
	(aString = 'f') ifTrue: [
		position := 0@1 
	].

	(aString = 'r') ifTrue	: [
		direction := #E
	].
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:23:15' prior: 50899994!
makeMovements: aString
	
	(aString = 'f') ifTrue: [
		position := 0@1.
	].

	(aString = 'r') ifTrue	: [
		direction := #E.
	].
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:24:30' prior: 50900001!
makeMovements: aString
	
	aString = 'f' ifTrue: [
		position := 0@1.
		].
	
	aString = 'r' ifTrue: [
		direction := #E.
		]! !

!testRun: #MarsRoverTest #test03 stamp: 'FC 10/25/2020 17:24:33'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'FC 10/25/2020 17:24:33'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 17:24:43'!
PASSED!
!MarsRover methodsFor: 'accessing' stamp: 'FC 10/25/2020 17:24:54' prior: 50899814!
currentDirection
	^direction.! !

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 17:24:57'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 17:24:57'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FC 10/25/2020 17:24:57'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:29:06' prior: 50900009!
makeMovements: aCommandSequence
	
	(aCommandSequence = 'f' or: [aCommandSequence = 'b'])
	 ifTrue: [
		self moveBasedOnDirection: aCommandSequence
		].
	
	(aCommandSequence = 'r' or: [aCommandSequence = 'l'])
	ifTrue: [
		self rotate: aCommandSequence.
		]! !

!testRun: #MarsRoverTest #test03 stamp: 'FC 10/25/2020 17:29:16'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'FC 10/25/2020 17:29:16'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:29:23'!
rotate: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:29:40' prior: 50900050!
rotate: aCommand 
	^#E.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:29:52' prior: 50900055!
rotate: aCommand 
	direction := #E.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:30:09'!
moveBasedOnDirection: aCommand 
	position := 0@1.! !

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 17:30:12'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 17:30:12'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FC 10/25/2020 17:30:12'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:31:07'!
test04
	
	| rover |
	rover := MarsRover withPosition: 1@1 facing: #N.
	rover makeMovements: 'b'.
	
	self assert: rover currentPosition equals: 2@1.
	self assert: rover currentDirection equals: #N.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:35:09' prior: 50900063!
moveBasedOnDirection: aCommand 
	
	|directionToMove|
	
	directionToMove := self facingPoint.
	
	aCommand = 'f' ifTrue: [ position := position + directionToMove ]
				  ifFalse:[ position := position  - directionToMove ] ! !
!MarsRover methodsFor: 'accessing' stamp: 'FC 10/25/2020 17:36:36'!
facingPoint
 	
	position = #N ifTrue: [^-1@0].
	position = #E ifTrue: [^0@1].
	position = #S ifTrue: [^1@0].
	position = #W ifTrue:[^0@-1].! !

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 17:36:41'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 17:36:41'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'FC 10/25/2020 17:36:41'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FC 10/25/2020 17:36:41'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 17:36:44'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 17:37:26'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 17:37:27'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'FC 10/25/2020 17:38:18' prior: 50900095!
facingPoint
 	
	direction = #N ifTrue: [^-1@0].
	direction = #E ifTrue: [^0@1].
	direction = #S ifTrue: [^1@0].
	direction = #W ifTrue:[^0@-1].! !

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 17:38:22'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 17:38:22'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FC 10/25/2020 17:38:22'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FC 10/25/2020 17:38:22'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:38:48'!
test05
	
	| rover |
	rover := MarsRover withPosition: 1@1 facing: #N.
	rover makeMovements: 'l'.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: #W.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:39:40' prior: 50900059!
rotate: aCommand
	aCommand = 'l' ifTrue: [ direction := #W ] ifFalse: 
	[	direction := #E. ]! !

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 17:39:45'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 17:39:45'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FC 10/25/2020 17:39:45'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FC 10/25/2020 17:39:45'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FC 10/25/2020 17:39:45'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:40:27' prior: 50900146!
rotate: aCommand

	aCommand = 'l' ifTrue: [ direction := #W ] ifFalse: 
	[	direction := #E. ]! !

Object subclass: #CardinalPoint
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #CardinalPoint category: 'MarsRover' stamp: 'FC 10/25/2020 17:40:40'!
Object subclass: #CardinalPoint
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!CardinalPoint methodsFor: 'nil' stamp: 'FC 10/25/2020 17:41:35'!
facingPoint
	self subclassResponsibility.! !
!CardinalPoint methodsFor: 'nil' stamp: 'FC 10/25/2020 17:41:51'!
leftRotate
	self subclassResponsibility ! !
!CardinalPoint methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:41:57'!
rightRotate
	self subclassResponsibility ! !

CardinalPoint subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #North category: 'MarsRover' stamp: 'FC 10/25/2020 17:42:11'!
CardinalPoint subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalPoint subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #East category: 'MarsRover' stamp: 'FC 10/25/2020 17:42:13'!
CardinalPoint subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalPoint subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #South category: 'MarsRover' stamp: 'FC 10/25/2020 17:42:15'!
CardinalPoint subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalPoint subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #West category: 'MarsRover' stamp: 'FC 10/25/2020 17:42:18'!
CardinalPoint subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!East methodsFor: 'no messages' stamp: 'FC 10/25/2020 17:42:52' overrides: 50900180!
facingPoint
	^'a'! !
!East methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:43:14' prior: 50900235 overrides: 50900180!
facingPoint
	^0@1! !
!North methodsFor: 'nil' stamp: 'FC 10/25/2020 17:43:28' overrides: 50900180!
facingPoint
	^-1@0.! !
!South methodsFor: 'no messages' stamp: 'FC 10/25/2020 17:43:45' overrides: 50900180!
facingPoint
	^1@0.! !
!West methodsFor: 'no messages' stamp: 'FC 10/25/2020 17:43:58' overrides: 50900180!
facingPoint
	^0@-1.! !
!North methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:44:27' overrides: 50900184!
leftRotate
	^East.! !
!North methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:44:34' overrides: 50900188!
rightRotate
	^West.! !
!South methodsFor: 'nil' stamp: 'FC 10/25/2020 17:44:50' overrides: 50900184!
leftRotate
	^West.! !
!South methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:44:55' overrides: 50900188!
rightRotate
	^East.! !
!West methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:45:12' overrides: 50900184!
leftRotate
	^North.! !
!West methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:45:33' prior: 50900272 overrides: 50900184!
leftRotate
	^North.! !
!West methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:45:39' prior: 50900277 overrides: 50900184!
leftRotate
	^South.! !
!West methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:45:45' overrides: 50900188!
rightRotate
	^North.! !
!South methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:45:52' prior: 50900268 overrides: 50900188!
rightRotate
	^West.! !
!South methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:46:06' prior: 50900291 overrides: 50900188!
rightRotate
	^East.! !
!North methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:47:03' prior: 50900256 overrides: 50900184!
leftRotate
	^West.! !
!North methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:47:07' prior: 50900260 overrides: 50900188!
rightRotate
	^East.! !
!South methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:47:19' prior: 50900296 overrides: 50900188!
rightRotate
	^West.! !
!South methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:47:24' prior: 50900264 overrides: 50900184!
leftRotate
	^East.! !
!East methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:47:42' overrides: 50900184!
leftRotate
	^North.! !
!East methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:47:49' overrides: 50900188!
rightRotate
	^South.! !

!methodRemoval: MarsRover #facingPoint stamp: 'FC 10/25/2020 17:48:02'!
facingPoint
 	
	direction = #N ifTrue: [^-1@0].
	direction = #E ifTrue: [^0@1].
	direction = #S ifTrue: [^1@0].
	direction = #W ifTrue:[^0@-1].!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:48:37' prior: 50900085!
moveBasedOnDirection: aCommand 
	
	|directionToMove|
	
	directionToMove := self direction facingPoint.
	
	aCommand = 'f' ifTrue: [ position := position + directionToMove ]
				  ifFalse:[ position := position  - directionToMove ] ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:48:48' prior: 50899723!
test01
	
	| rover |
	rover := MarsRover withPosition: 1@1 facing: North new.
	rover makeMovements: ''.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: #N.! !

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 17:48:51'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 17:48:51'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:49:26' prior: 50900346!
test01
	
	| rover north|
	
	north := North new.
	
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: ''.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: north.! !

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 17:49:30'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:49:50' prior: 50899944!
test02
	
	| rover north|
	
	north := North new.
	rover := MarsRover withPosition: 1@1 facing: north.
	
	rover makeMovements: 'f'.
	
	self assert: rover currentPosition equals: 0@1.
	self assert: rover currentDirection equals: #N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:49:53' prior: 50900374!
test02
	
	| rover north|
	
	north := North new.
	rover := MarsRover withPosition: 1@1 facing: north.
	
	rover makeMovements: 'f'.
	
	self assert: rover currentPosition equals: 0@1.
	self assert: rover currentDirection equals: north.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:50:02' prior: 50899934!
test03
	
	| rover north|
	
	north := North new.
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: 'r'.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: #E.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:50:10' prior: 50900396!
test03
	
	| rover north east|
	
	north := North new.
	east := East new.
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: 'r'.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: #E.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:50:17' prior: 50900407!
test03
	
	| rover north east|
	
	north := North new.
	east := East new.
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: 'r'.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: east.! !

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'FC 10/25/2020 17:56:36'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'north2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'FC 10/25/2020 17:56:37'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'north2 east2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'FC 10/25/2020 17:56:38'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'north2 east2 south2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'FC 10/25/2020 17:56:39'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'north2 east2 south2 west2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:56:35'!
setup
	north2 := North new.
	east2 := East new.
	south2 := South new.
	west2 := West new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:56:48' prior: 50900361!
test01
	
	| rover |
	
	north2 := North new.
	
	rover := MarsRover withPosition: 1@1 facing: north2.
	rover makeMovements: ''.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: north2.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:56:57' prior: 50900385!
test02
	
	| rover north|
	
	north := North new.
	rover := MarsRover withPosition: 1@1 facing: north2.
	
	rover makeMovements: 'f'.
	
	self assert: rover currentPosition equals: 0@1.
	self assert: rover currentDirection equals: north2.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:57:03' prior: 50900477!
test02
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: north2.
	
	rover makeMovements: 'f'.
	
	self assert: rover currentPosition equals: 0@1.
	self assert: rover currentDirection equals: north2.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:57:13' prior: 50900419!
test03
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: north2.
	rover makeMovements: 'r'.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: east2.! !

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'FC 10/25/2020 17:57:32'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'north east2 south2 west2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:57:32' prior: 50900460!
setup
	north := North new.
	east2 := East new.
	south2 := South new.
	west2 := West new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:57:32' prior: 50900498!
test03
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: 'r'.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: east2.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:57:32' prior: 50900466!
test01
	
	| rover |
	
	north := North new.
	
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: ''.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: north.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:57:32' prior: 50900488!
test02
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: north.
	
	rover makeMovements: 'f'.
	
	self assert: rover currentPosition equals: 0@1.
	self assert: rover currentDirection equals: north.! !

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'FC 10/25/2020 17:57:38'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'north east south2 west2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:57:38' prior: 50900516!
setup
	north := North new.
	east := East new.
	south2 := South new.
	west2 := West new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:57:38' prior: 50900522!
test03
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: 'r'.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: east.! !

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'FC 10/25/2020 17:57:42'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'north east south west2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:57:42' prior: 50900561!
setup
	north := North new.
	east := East new.
	south := South new.
	west2 := West new.! !

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'FC 10/25/2020 17:57:46'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'north east south west'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:57:46' prior: 50900585!
setup
	north := North new.
	east := East new.
	south := South new.
	west := West new.! !
!West methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:58:00' prior: 50900282 overrides: 50900184!
leftRotate
	^South new.! !
!West methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:58:04' prior: 50900286 overrides: 50900188!
rightRotate
	^North new.! !
!South methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:58:10' prior: 50900311 overrides: 50900188!
rightRotate
	^West new.! !
!South methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:58:13' prior: 50900316 overrides: 50900184!
leftRotate
	^East new.! !
!North methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:58:19' prior: 50900301 overrides: 50900184!
leftRotate
	^West new.! !
!North methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:58:23' prior: 50900306 overrides: 50900188!
rightRotate
	^East new.! !
!East methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:58:28' prior: 50900320 overrides: 50900184!
leftRotate
	^North new.! !
!East methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:58:31' prior: 50900324 overrides: 50900188!
rightRotate
	^South new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:59:25' prior: 50900075!
test04
	
	| rover |
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: 'b'.
	
	self assert: rover currentPosition equals: 2@1.
	self assert: rover currentDirection equals: north.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 17:59:34' prior: 50900136!
test05
	
	| rover |
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: 'l'.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: west.! !

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 17:59:38'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 17:59:38'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'FC 10/25/2020 17:59:38'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'FC 10/25/2020 17:59:38'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'FC 10/25/2020 17:59:38'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:00:06' prior: 50900164!
rotate: aCommand

	aCommand = 'l' ifTrue: [ direction := #W ] ifFalse: 
	[	direction := #E. ]! !

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 18:00:06'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 18:00:06'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'FC 10/25/2020 18:00:06'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'FC 10/25/2020 18:00:06'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'FC 10/25/2020 18:00:06'!
FAILURE!

!methodRemoval: MarsRover #rotate: stamp: 'FC 10/25/2020 18:00:31'!
rotate: aCommand

	aCommand = 'l' ifTrue: [ direction := #W ] ifFalse: 
	[	direction := #E. ]!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:02:13' prior: 50900034!
makeMovements: aCommandSequence
	
	(aCommandSequence = 'f' or: [aCommandSequence = 'b'])
	 ifTrue: [
		self moveBasedOnDirection: aCommandSequence
		].
	
	aCommandSequence = 'r' 
	ifTrue: [
		direction := direction rightRotate.
		].
	
	aCommandSequence = 'l'
	ifTrue: [
		direction := direction leftRotate.
		]
	
	
	! !

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 18:02:17'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 18:02:17'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'FC 10/25/2020 18:02:17'!
ERROR!

!testRun: #MarsRoverTest #test04 stamp: 'FC 10/25/2020 18:02:17'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'FC 10/25/2020 18:02:17'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 18:02:22'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 18:02:26'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:02:46' prior: 50900335!
moveBasedOnDirection: aCommand 
	
	|directionToMove|
	
	directionToMove := direction facingPoint.
	
	aCommand = 'f' ifTrue: [ position := position + directionToMove ]
				  ifFalse:[ position := position  - directionToMove ] ! !

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 18:02:48'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 18:02:48'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'FC 10/25/2020 18:02:48'!
ERROR!

!testRun: #MarsRoverTest #test04 stamp: 'FC 10/25/2020 18:02:48'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'FC 10/25/2020 18:02:48'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 18:02:52'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 18:03:19'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 18:03:26'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 18:03:26'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 18:03:35'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 18:03:46'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 18:03:51'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 18:04:00'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 18:04:00'!
ERROR!

North new.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:05:11' overrides: 16927572!
setUp
	north := North new.
	east := East new.
	south := South new.
	west := West new.! !

!methodRemoval: MarsRoverTest #setup stamp: 'FC 10/25/2020 18:05:13'!
setup
	north := North new.
	east := East new.
	south := South new.
	west := West new.!

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 18:05:15'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 18:05:15'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FC 10/25/2020 18:05:15'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'FC 10/25/2020 18:05:15'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FC 10/25/2020 18:05:15'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'FC 10/25/2020 18:05:17'!
FAILURE!

East new = East new.!

East new == East new.!
!CardinalPoint methodsFor: 'nil' stamp: 'FC 10/25/2020 18:07:07' overrides: 16881029!
= anObject
	self class = anObject class.! !

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 18:07:12'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 18:07:12'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'FC 10/25/2020 18:07:12'!
ERROR!

!testRun: #MarsRoverTest #test04 stamp: 'FC 10/25/2020 18:07:12'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'FC 10/25/2020 18:07:12'!
ERROR!

East new = East new.!
!CardinalPoint methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:07:43' prior: 50900801 overrides: 16881029!
= anObject
	^self class = anObject class.! !

East new = East new.!

East new = West new.!

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 18:07:54'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 18:07:54'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FC 10/25/2020 18:07:54'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FC 10/25/2020 18:07:54'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FC 10/25/2020 18:07:54'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:09:36'!
test07
	
	| rover |
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: 'bbbrff'.
	
	self assert: rover currentPosition equals: 4@3.
	self assert: rover currentDirection equals: east.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:09:47'!
test06
	
	| rover |
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: 'bbbrff'.
	
	self assert: rover currentPosition equals: 4@3.
	self assert: rover currentDirection equals: east.! !

!methodRemoval: MarsRoverTest #test07 stamp: 'FC 10/25/2020 18:09:49'!
test07
	
	| rover |
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: 'bbbrff'.
	
	self assert: rover currentPosition equals: 4@3.
	self assert: rover currentDirection equals: east.!

!testRun: #MarsRoverTest #test06 stamp: 'FC 10/25/2020 18:10:03'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'FC 10/25/2020 18:10:03'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:11:27' prior: 50900700!
makeMovements: aCommandSequence
	
	aCommandSequence do: [ :aCommand |
	
	(aCommand = $f or: [ aCommand = $b ])
	 ifTrue: [
		self moveBasedOnDirection: aCommand
		].
	
	aCommand = $r 
	ifTrue: [
		direction := direction rightRotate.
		].
	
	aCommand = $l
	ifTrue: [
		direction := direction leftRotate.
		]
	
	]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:11:41' prior: 50900730!
moveBasedOnDirection: aCommand 
	
	|directionToMove|
	
	directionToMove := direction facingPoint.
	
	aCommand = $f ifTrue: [ position := position + directionToMove ]
				  ifFalse:[ position := position  - directionToMove ] ! !

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 18:11:43'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 18:11:43'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FC 10/25/2020 18:11:43'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FC 10/25/2020 18:11:43'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FC 10/25/2020 18:11:44'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FC 10/25/2020 18:11:44'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:13:18' prior: 50900870!
makeMovements: aCommandSequence
	
	aCommandSequence do: [ :aCommand |
	
	(aCommand = $f or: [ aCommand = $b ])
	 ifTrue: [
		self moveBasedOnDirection: aCommand
		].
	
	aCommand = $r 
	ifTrue: [
		direction := direction rightRotate.
		].
	
	aCommand = $l
	ifTrue: [
		direction := direction leftRotate.
		].
	
	]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:14:37'!
makeMove: aCommand	

	(aCommand = $f or: [ aCommand = $b ])
	 ifTrue: [
		self moveBasedOnDirection: aCommand
		].
	
	aCommand = $r 
	ifTrue: [
		direction := direction rightRotate.
		].
	
	aCommand = $l
	ifTrue: [
		direction := direction leftRotate.
		].! !

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 18:14:48'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 18:14:48'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FC 10/25/2020 18:14:48'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FC 10/25/2020 18:14:48'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FC 10/25/2020 18:14:48'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FC 10/25/2020 18:14:48'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:15:21'!
isMovement: aCommand

	^ aCommand = $f or: [ aCommand = $b ]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:15:21' prior: 50900921!
makeMove: aCommand	

	(self isMovement: aCommand)
	 ifTrue: [
		self moveBasedOnDirection: aCommand
		].
	
	aCommand = $r 
	ifTrue: [
		direction := direction rightRotate.
		].
	
	aCommand = $l
	ifTrue: [
		direction := direction leftRotate.
		].! !

!testRun: #MarsRoverTest #test01 stamp: 'FC 10/25/2020 18:16:52'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FC 10/25/2020 18:16:52'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FC 10/25/2020 18:16:52'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FC 10/25/2020 18:16:52'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FC 10/25/2020 18:16:52'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FC 10/25/2020 18:16:52'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:17:13'!
test01RoverWithNoCommandsStaysTheSame
	
	| rover |
	
	north := North new.
	
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: ''.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: north.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:17:36'!
test01RoverWithNoCommandsRemainsTheSame
	
	| rover |
	
	north := North new.
	
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: ''.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: north.! !

!methodRemoval: MarsRoverTest #test01RoverWithNoCommandsStaysTheSame stamp: 'FC 10/25/2020 18:17:36'!
test01RoverWithNoCommandsStaysTheSame
	
	| rover |
	
	north := North new.
	
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: ''.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: north.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:17:46'!
test02RoverMovesForward
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: north.
	
	rover makeMovements: 'f'.
	
	self assert: rover currentPosition equals: 0@1.
	self assert: rover currentDirection equals: north.! !

!methodRemoval: MarsRoverTest #test02 stamp: 'FC 10/25/2020 18:17:49'!
test02
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: north.
	
	rover makeMovements: 'f'.
	
	self assert: rover currentPosition equals: 0@1.
	self assert: rover currentDirection equals: north.!

!methodRemoval: MarsRoverTest #test01 stamp: 'FC 10/25/2020 18:17:51'!
test01
	
	| rover |
	
	north := North new.
	
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: ''.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: north.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:18:08'!
test03RoverRotatesRight
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: 'r'.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: east.! !

!methodRemoval: MarsRoverTest #test03 stamp: 'FC 10/25/2020 18:18:08'!
test03
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: 'r'.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: east.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:18:23'!
test04MovesBackwards
	
	| rover |
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: 'b'.
	
	self assert: rover currentPosition equals: 2@1.
	self assert: rover currentDirection equals: north.! !

!methodRemoval: MarsRoverTest #test04 stamp: 'FC 10/25/2020 18:18:23'!
test04
	
	| rover |
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: 'b'.
	
	self assert: rover currentPosition equals: 2@1.
	self assert: rover currentDirection equals: north.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:18:33'!
test05RoverRotatesLeft
	
	| rover |
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: 'l'.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: west.! !

!methodRemoval: MarsRoverTest #test05 stamp: 'FC 10/25/2020 18:18:33'!
test05
	
	| rover |
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: 'l'.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: west.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:19:01'!
test06RoverUnderstandsMoreThanOneCommand
	
	| rover |
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: 'bbbrff'.
	
	self assert: rover currentPosition equals: 4@3.
	self assert: rover currentDirection equals: east.! !

!methodRemoval: MarsRoverTest #test06 stamp: 'FC 10/25/2020 18:19:01'!
test06
	
	| rover |
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: 'bbbrff'.
	
	self assert: rover currentPosition equals: 4@3.
	self assert: rover currentDirection equals: east.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:20:31'!
test07RoverStopsAfterInvalidCommand
	
	| rover |
	rover := MarsRover withPosition: 1@1 facing: north.
	self should: [ rover makeMovements: 'bbbcrff' ]  raise: Error.
	
	self assert: rover currentPosition equals: 4@1.
	self assert: rover currentDirection equals: north.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:20:48' prior: 50901114!
test07RoverStopsAfterInvalidCommand
	
	| rover |
	rover := MarsRover withPosition: 1@1 facing: north.
	
	self should: [ rover makeMovements: 'bbbcrff' ]  raise: Error.
	
	self assert: rover currentPosition equals: 4@1.
	self assert: rover currentDirection equals: north.! !

!testRun: #MarsRoverTest #test07RoverStopsAfterInvalidCommand stamp: 'FC 10/25/2020 18:20:51'!
FAILURE!

!testRun: #MarsRoverTest #test07RoverStopsAfterInvalidCommand stamp: 'FC 10/25/2020 18:20:51'!
FAILURE!
!MarsRover class methodsFor: 'instance creation' stamp: 'FC 10/25/2020 18:21:17'!
invalidCommandMessage
	^'Comando inv�lido'.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:23:08'!
isValidCommand: aCommand

	^ 'fbrl' includes: aCommand.! !

	'fbrl' includes: $a.!

	'fbrl' includes: $f.!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:23:28' prior: 50901148!
isValidCommand: aCommand

	^ 'fbrl' includes: aCommand.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:24:07'!
validCommands

	^ 'fbrl'! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:24:07' prior: 50901155!
isValidCommand: aCommand

	^ self validCommands includes: aCommand.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:25:11' prior: 50900951!
makeMove: aCommand	
	(self isValidCommand: aCommand) ifTrue: [
		(self isMovement: aCommand)
		 ifTrue: [
			self moveBasedOnDirection: aCommand
			].
		
		aCommand = $r 
		ifTrue: [
			direction := direction rightRotate.
			].
		
		aCommand = $l
		ifTrue: [
			direction := direction leftRotate.
			].
	]
	ifFalse: [
		self error: self class invalidCommandMessage.
		]! !

!testRun: #MarsRoverTest #test01RoverWithNoCommandsRemainsTheSame stamp: 'FC 10/25/2020 18:25:17'!
PASSED!

!testRun: #MarsRoverTest #test02RoverMovesForward stamp: 'FC 10/25/2020 18:25:17'!
PASSED!

!testRun: #MarsRoverTest #test03RoverRotatesRight stamp: 'FC 10/25/2020 18:25:17'!
PASSED!

!testRun: #MarsRoverTest #test04MovesBackwards stamp: 'FC 10/25/2020 18:25:17'!
PASSED!

!testRun: #MarsRoverTest #test05RoverRotatesLeft stamp: 'FC 10/25/2020 18:25:17'!
PASSED!

!testRun: #MarsRoverTest #test06RoverUnderstandsMoreThanOneCommand stamp: 'FC 10/25/2020 18:25:17'!
PASSED!

!testRun: #MarsRoverTest #test07RoverStopsAfterInvalidCommand stamp: 'FC 10/25/2020 18:25:17'!
FAILURE!

!testRun: #MarsRoverTest #test07RoverStopsAfterInvalidCommand stamp: 'FC 10/25/2020 18:25:17'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FC 10/25/2020 18:26:24' prior: 50900908!
makeMovements: aCommandSequence
	
	aCommandSequence do: [ :aCommand |
		self makeMove: aCommand.
	]! !

!testRun: #MarsRoverTest #test01RoverWithNoCommandsRemainsTheSame stamp: 'FC 10/25/2020 18:26:30'!
PASSED!

!testRun: #MarsRoverTest #test02RoverMovesForward stamp: 'FC 10/25/2020 18:26:30'!
PASSED!

!testRun: #MarsRoverTest #test03RoverRotatesRight stamp: 'FC 10/25/2020 18:26:30'!
PASSED!

!testRun: #MarsRoverTest #test04MovesBackwards stamp: 'FC 10/25/2020 18:26:30'!
PASSED!

!testRun: #MarsRoverTest #test05RoverRotatesLeft stamp: 'FC 10/25/2020 18:26:30'!
PASSED!

!testRun: #MarsRoverTest #test06RoverUnderstandsMoreThanOneCommand stamp: 'FC 10/25/2020 18:26:30'!
PASSED!

!testRun: #MarsRoverTest #test07RoverStopsAfterInvalidCommand stamp: 'FC 10/25/2020 18:26:30'!
PASSED!

!methodRemoval: MarsRover #validCommands stamp: 'FC 10/25/2020 18:32:35'!
validCommands

	^ 'fbrl'!
!MarsRover class methodsFor: 'error' stamp: 'FC 10/25/2020 18:32:58'!
validCommands

	^ 'fbrl'! !
!MarsRover methodsFor: 'testing - private' stamp: 'FC 10/25/2020 18:33:44' prior: 50901164!
isValidCommand: aCommand

	^ self class validCommands includes: aCommand.! !

!testRun: #MarsRoverTest #test01RoverWithNoCommandsRemainsTheSame stamp: 'FC 10/25/2020 18:33:47'!
PASSED!

!testRun: #MarsRoverTest #test02RoverMovesForward stamp: 'FC 10/25/2020 18:33:47'!
PASSED!

!testRun: #MarsRoverTest #test03RoverRotatesRight stamp: 'FC 10/25/2020 18:33:47'!
PASSED!

!testRun: #MarsRoverTest #test04MovesBackwards stamp: 'FC 10/25/2020 18:33:47'!
PASSED!

!testRun: #MarsRoverTest #test05RoverRotatesLeft stamp: 'FC 10/25/2020 18:33:47'!
PASSED!

!testRun: #MarsRoverTest #test06RoverUnderstandsMoreThanOneCommand stamp: 'FC 10/25/2020 18:33:47'!
PASSED!

!testRun: #MarsRoverTest #test07RoverStopsAfterInvalidCommand stamp: 'FC 10/25/2020 18:33:47'!
PASSED!

!testRun: #MarsRoverTest #test01RoverWithNoCommandsRemainsTheSame stamp: 'FC 10/25/2020 18:34:49'!
PASSED!

!testRun: #MarsRoverTest #test02RoverMovesForward stamp: 'FC 10/25/2020 18:34:49'!
PASSED!

!testRun: #MarsRoverTest #test03RoverRotatesRight stamp: 'FC 10/25/2020 18:34:50'!
PASSED!

!testRun: #MarsRoverTest #test04MovesBackwards stamp: 'FC 10/25/2020 18:34:50'!
PASSED!

!testRun: #MarsRoverTest #test05RoverRotatesLeft stamp: 'FC 10/25/2020 18:34:50'!
PASSED!

!testRun: #MarsRoverTest #test06RoverUnderstandsMoreThanOneCommand stamp: 'FC 10/25/2020 18:34:50'!
PASSED!

!testRun: #MarsRoverTest #test07RoverStopsAfterInvalidCommand stamp: 'FC 10/25/2020 18:34:50'!
PASSED!

----SNAPSHOT----(25 October 2020 18:34:56) CuisUniversity-4383.image priorSource: 18175733!

----SNAPSHOT----(25 October 2020 18:34:59) CuisUniversity-4383.image priorSource: 18228518!

----STARTUP---- (26 October 2020 15:37:04) as C:\Users\Felip\Desktop\Dev\Inge 1\ST\windows64\CuisUniversity-4383.image!

!MarsRoverTest methodsFor: 'tests' stamp: 'FC 10/26/2020 15:39:29'!
test02RoverMovesForwardWhenFacingNorth
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: north.
	
	rover makeMovements: 'f'.
	
	self assert: rover currentPosition equals: 0@1.
	self assert: rover currentDirection equals: north.! !

!methodRemoval: MarsRoverTest #test02RoverMovesForward stamp: 'FC 10/26/2020 15:39:29'!
test02RoverMovesForward
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: north.
	
	rover makeMovements: 'f'.
	
	self assert: rover currentPosition equals: 0@1.
	self assert: rover currentDirection equals: north.!
!MarsRoverTest methodsFor: 'tests' stamp: 'FC 10/26/2020 15:44:06'!
test03RoverMovesAndRotatesWhenFacingNorth
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: 'ffbr'.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: east.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'FC 10/26/2020 15:44:34'!
test02RoverRotatesLeftWhenFacingNorth
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: north.
	
	rover makeMovements: 'l'.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: west.! !

!methodRemoval: MarsRoverTest #test02RoverMovesForwardWhenFacingNorth stamp: 'FC 10/26/2020 15:44:39'!
test02RoverMovesForwardWhenFacingNorth
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: north.
	
	rover makeMovements: 'f'.
	
	self assert: rover currentPosition equals: 0@1.
	self assert: rover currentDirection equals: north.!
!MarsRoverTest methodsFor: 'tests' stamp: 'FC 10/26/2020 15:44:58' prior: 50901321!
test03RoverMovesAndRotatesWhenFacingNorth
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: 'ffbr'.
	
	self assert: rover currentPosition equals: 0@1.
	self assert: rover currentDirection equals: east.! !

!testRun: #MarsRoverTest #test03RoverMovesAndRotatesWhenFacingNorth stamp: 'FC 10/26/2020 15:45:11'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'FC 10/26/2020 15:45:39'!
test04RoverRotatesLeftWhenFacingEast
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: east.
	rover makeMovements: 'r'.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: north.! !

!testRun: #MarsRoverTest #test04RoverRotatesLeftWhenFacingEast stamp: 'FC 10/26/2020 15:45:42'!
FAILURE!

!testRun: #MarsRoverTest #test04RoverRotatesLeftWhenFacingEast stamp: 'FC 10/26/2020 15:45:42'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'FC 10/26/2020 15:45:50' prior: 50901366!
test04RoverRotatesLeftWhenFacingEast
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: east.
	rover makeMovements: 'r'.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: south.! !

!testRun: #MarsRoverTest #test04RoverRotatesLeftWhenFacingEast stamp: 'FC 10/26/2020 15:45:54'!
PASSED!

!testRun: #MarsRoverTest #test04RoverRotatesLeftWhenFacingEast stamp: 'FC 10/26/2020 15:45:58'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'FC 10/26/2020 15:47:09'!
test05RoverMovesAndRotatesWhenFacingEast
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: east.
	rover makeMovements: 'ffbr'.
	
	self assert: rover currentPosition equals: 1@2.
	self assert: rover currentDirection equals: north.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'FC 10/26/2020 15:47:19' prior: 50901383!
test04RoverRotatesLeftWhenFacingEast
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: east.
	rover makeMovements: 'l'.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: north.! !

!testRun: #MarsRoverTest #test05RoverMovesAndRotatesWhenFacingEast stamp: 'FC 10/26/2020 15:47:24'!
FAILURE!

!testRun: #MarsRoverTest #test05RoverMovesAndRotatesWhenFacingEast stamp: 'FC 10/26/2020 15:47:24'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'FC 10/26/2020 15:47:30' prior: 50901400!
test05RoverMovesAndRotatesWhenFacingEast
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: east.
	rover makeMovements: 'ffbr'.
	
	self assert: rover currentPosition equals: 1@2.
	self assert: rover currentDirection equals: south.! !

!testRun: #MarsRoverTest #test05RoverMovesAndRotatesWhenFacingEast stamp: 'FC 10/26/2020 15:47:32'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'FC 10/26/2020 15:48:19'!
test06RoverRotatesLeftWhenFacingSouth
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: south.
	rover makeMovements: 'l'.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: west.! !

!testRun: #MarsRoverTest #test06RoverRotatesLeftWhenFacingSouth stamp: 'FC 10/26/2020 15:48:22'!
FAILURE!

!testRun: #MarsRoverTest #test06RoverRotatesLeftWhenFacingSouth stamp: 'FC 10/26/2020 15:48:22'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'FC 10/26/2020 15:48:26' prior: 50901442!
test06RoverRotatesLeftWhenFacingSouth
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: south.
	rover makeMovements: 'l'.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: East.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'FC 10/26/2020 15:48:34' prior: 50901459!
test06RoverRotatesLeftWhenFacingSouth
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: south.
	rover makeMovements: 'l'.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: east.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'FC 10/26/2020 15:49:10'!
test07RoverMovesAndRotatesWhenFacingSouth
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: south.
	rover makeMovements: 'ffbr'.
	
	self assert: rover currentPosition equals: 2@1.
	self assert: rover currentDirection equals: west.! !

!testRun: #MarsRoverTest #test07RoverMovesAndRotatesWhenFacingSouth stamp: 'FC 10/26/2020 15:49:13'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'FC 10/26/2020 15:49:35'!
test08RoverRotatesLeftWhenFacingWest
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: west.
	rover makeMovements: 'l'.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: north.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'FC 10/26/2020 15:49:38' prior: 50901494!
test08RoverRotatesLeftWhenFacingWest
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: west.
	rover makeMovements: 'l'.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: south.! !

!testRun: #MarsRoverTest #test08RoverRotatesLeftWhenFacingWest stamp: 'FC 10/26/2020 15:49:41'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'FC 10/26/2020 15:50:04'!
test07RoverMovesAndRotatesWhenFacingWest
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: west.
	rover makeMovements: 'ffbr'.
	
	self assert: rover currentPosition equals: 1@0.
	self assert: rover currentDirection equals: north.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'FC 10/26/2020 15:50:07'!
test09RoverMovesAndRotatesWhenFacingWest
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: west.
	rover makeMovements: 'ffbr'.
	
	self assert: rover currentPosition equals: 1@0.
	self assert: rover currentDirection equals: north.! !

!testRun: #MarsRoverTest #test09RoverMovesAndRotatesWhenFacingWest stamp: 'FC 10/26/2020 15:50:09'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'FC 10/26/2020 15:50:17'!
test10RoverStopsAfterInvalidCommand
	
	| rover |
	rover := MarsRover withPosition: 1@1 facing: north.
	
	self should: [ rover makeMovements: 'bbbcrff' ]  raise: Error.
	
	self assert: rover currentPosition equals: 4@1.
	self assert: rover currentDirection equals: north.! !

!methodRemoval: MarsRoverTest #test04MovesBackwards stamp: 'FC 10/26/2020 15:50:20'!
test04MovesBackwards
	
	| rover |
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: 'b'.
	
	self assert: rover currentPosition equals: 2@1.
	self assert: rover currentDirection equals: north.!

!methodRemoval: MarsRoverTest #test03RoverRotatesRight stamp: 'FC 10/26/2020 15:50:21'!
test03RoverRotatesRight
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: 'r'.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: east.!

!methodRemoval: MarsRoverTest #test05RoverRotatesLeft stamp: 'FC 10/26/2020 15:50:22'!
test05RoverRotatesLeft
	
	| rover |
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: 'l'.
	
	self assert: rover currentPosition equals: 1@1.
	self assert: rover currentDirection equals: west.!

!methodRemoval: MarsRoverTest #test07RoverStopsAfterInvalidCommand stamp: 'FC 10/26/2020 15:50:25'!
test07RoverStopsAfterInvalidCommand
	
	| rover |
	rover := MarsRover withPosition: 1@1 facing: north.
	
	self should: [ rover makeMovements: 'bbbcrff' ]  raise: Error.
	
	self assert: rover currentPosition equals: 4@1.
	self assert: rover currentDirection equals: north.!

!methodRemoval: MarsRoverTest #test06RoverUnderstandsMoreThanOneCommand stamp: 'FC 10/26/2020 15:50:29'!
test06RoverUnderstandsMoreThanOneCommand
	
	| rover |
	rover := MarsRover withPosition: 1@1 facing: north.
	rover makeMovements: 'bbbrff'.
	
	self assert: rover currentPosition equals: 4@3.
	self assert: rover currentDirection equals: east.!

!methodRemoval: MarsRoverTest #test07RoverMovesAndRotatesWhenFacingWest stamp: 'FC 10/26/2020 15:50:34'!
test07RoverMovesAndRotatesWhenFacingWest
	
	| rover |
	
	rover := MarsRover withPosition: 1@1 facing: west.
	rover makeMovements: 'ffbr'.
	
	self assert: rover currentPosition equals: 1@0.
	self assert: rover currentDirection equals: north.!

!testRun: #MarsRoverTest #test01RoverWithNoCommandsRemainsTheSame stamp: 'FC 10/26/2020 15:50:42'!
PASSED!

!testRun: #MarsRoverTest #test02RoverRotatesLeftWhenFacingNorth stamp: 'FC 10/26/2020 15:50:42'!
PASSED!

!testRun: #MarsRoverTest #test03RoverMovesAndRotatesWhenFacingNorth stamp: 'FC 10/26/2020 15:50:42'!
PASSED!

!testRun: #MarsRoverTest #test04RoverRotatesLeftWhenFacingEast stamp: 'FC 10/26/2020 15:50:42'!
PASSED!

!testRun: #MarsRoverTest #test05RoverMovesAndRotatesWhenFacingEast stamp: 'FC 10/26/2020 15:50:42'!
PASSED!

!testRun: #MarsRoverTest #test06RoverRotatesLeftWhenFacingSouth stamp: 'FC 10/26/2020 15:50:42'!
PASSED!

!testRun: #MarsRoverTest #test07RoverMovesAndRotatesWhenFacingSouth stamp: 'FC 10/26/2020 15:50:42'!
PASSED!

!testRun: #MarsRoverTest #test08RoverRotatesLeftWhenFacingWest stamp: 'FC 10/26/2020 15:50:42'!
PASSED!

!testRun: #MarsRoverTest #test09RoverMovesAndRotatesWhenFacingWest stamp: 'FC 10/26/2020 15:50:42'!
PASSED!

!testRun: #MarsRoverTest #test10RoverStopsAfterInvalidCommand stamp: 'FC 10/26/2020 15:50:42'!
PASSED!
!MarsRover methodsFor: 'operations - private' stamp: 'FC 10/26/2020 15:52:23' prior: 50901170!
makeMove: aCommand	
	(self isValidCommand: aCommand) ifTrue: [
		(self isMovement: aCommand)
		 ifTrue: [
			self moveBasedOnDirection: aCommand
			].
		
		aCommand = $r 
		ifTrue: [
			direction := direction rightRotate.
			].
		
		aCommand = $l
		ifTrue: [
			direction := direction leftRotate.
			].
	]
	ifFalse: [
		self error: self class invalidCommandMessage.
		]! !
!MarsRover methodsFor: 'operations - private' stamp: 'FC 10/26/2020 15:52:48'!
errorInvalidCommand

	^ self error: self class invalidCommandMessage! !
!MarsRover methodsFor: 'operations - private' stamp: 'FC 10/26/2020 15:52:48' prior: 50901650!
makeMove: aCommand	
	(self isValidCommand: aCommand) ifTrue: [
		(self isMovement: aCommand)
		 ifTrue: [
			self moveBasedOnDirection: aCommand
			].
		
		aCommand = $r 
		ifTrue: [
			direction := direction rightRotate.
			].
		
		aCommand = $l
		ifTrue: [
			direction := direction leftRotate.
			].
	]
	ifFalse: [
		self errorInvalidCommand.
		]! !

!testRun: #MarsRoverTest #test01RoverWithNoCommandsRemainsTheSame stamp: 'FC 10/26/2020 15:53:01'!
PASSED!

!testRun: #MarsRoverTest #test02RoverRotatesLeftWhenFacingNorth stamp: 'FC 10/26/2020 15:53:01'!
PASSED!

!testRun: #MarsRoverTest #test03RoverMovesAndRotatesWhenFacingNorth stamp: 'FC 10/26/2020 15:53:01'!
PASSED!

!testRun: #MarsRoverTest #test04RoverRotatesLeftWhenFacingEast stamp: 'FC 10/26/2020 15:53:01'!
PASSED!

!testRun: #MarsRoverTest #test05RoverMovesAndRotatesWhenFacingEast stamp: 'FC 10/26/2020 15:53:01'!
PASSED!

!testRun: #MarsRoverTest #test06RoverRotatesLeftWhenFacingSouth stamp: 'FC 10/26/2020 15:53:01'!
PASSED!

!testRun: #MarsRoverTest #test07RoverMovesAndRotatesWhenFacingSouth stamp: 'FC 10/26/2020 15:53:01'!
PASSED!

!testRun: #MarsRoverTest #test08RoverRotatesLeftWhenFacingWest stamp: 'FC 10/26/2020 15:53:01'!
PASSED!

!testRun: #MarsRoverTest #test09RoverMovesAndRotatesWhenFacingWest stamp: 'FC 10/26/2020 15:53:01'!
PASSED!

!testRun: #MarsRoverTest #test10RoverStopsAfterInvalidCommand stamp: 'FC 10/26/2020 15:53:01'!
PASSED!

!testRun: #MarsRoverTest #test01RoverWithNoCommandsRemainsTheSame stamp: 'FC 10/26/2020 15:53:08'!
PASSED!

!testRun: #MarsRoverTest #test02RoverRotatesLeftWhenFacingNorth stamp: 'FC 10/26/2020 15:53:08'!
PASSED!

!testRun: #MarsRoverTest #test03RoverMovesAndRotatesWhenFacingNorth stamp: 'FC 10/26/2020 15:53:08'!
PASSED!

!testRun: #MarsRoverTest #test04RoverRotatesLeftWhenFacingEast stamp: 'FC 10/26/2020 15:53:08'!
PASSED!

!testRun: #MarsRoverTest #test05RoverMovesAndRotatesWhenFacingEast stamp: 'FC 10/26/2020 15:53:08'!
PASSED!

!testRun: #MarsRoverTest #test06RoverRotatesLeftWhenFacingSouth stamp: 'FC 10/26/2020 15:53:08'!
PASSED!

!testRun: #MarsRoverTest #test07RoverMovesAndRotatesWhenFacingSouth stamp: 'FC 10/26/2020 15:53:08'!
PASSED!

!testRun: #MarsRoverTest #test08RoverRotatesLeftWhenFacingWest stamp: 'FC 10/26/2020 15:53:08'!
PASSED!

!testRun: #MarsRoverTest #test09RoverMovesAndRotatesWhenFacingWest stamp: 'FC 10/26/2020 15:53:08'!
PASSED!

!testRun: #MarsRoverTest #test10RoverStopsAfterInvalidCommand stamp: 'FC 10/26/2020 15:53:08'!
PASSED!