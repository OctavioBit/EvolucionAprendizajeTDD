
!classRemoval: #ReceptiveAccount stamp: 'FC 11/2/2020 19:13:48'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'FC 11/2/2020 19:13:48'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'FC 11/2/2020 19:13:48'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'FC 11/2/2020 19:13:49'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'FC 11/2/2020 19:13:49'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of C:\Users\Felip\Desktop\Dev\Inge 1\2020-2c\18-Portfolio1\Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 19:16:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'FC 11/2/2020 19:16:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'FC 11/2/2020 19:16:12'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'FC 11/2/2020 19:16:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'FC 11/2/2020 19:16:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'FC 11/2/2020 19:16:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'FC 11/2/2020 19:16:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'FC 11/2/2020 19:16:12'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'FC 11/2/2020 19:17:22' prior: 50912998!
balance

	^transactions sum: [ :aTransaction | 
		aTransaction class = Deposit ifTrue: [aTransaction value] 
		ifFalse: [aTransaction value *-1 ]] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 19:17:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'FC 11/2/2020 19:17:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'FC 11/2/2020 19:17:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'FC 11/2/2020 19:17:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'FC 11/2/2020 19:17:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'FC 11/2/2020 19:17:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'FC 11/2/2020 19:17:23'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'FC 11/2/2020 19:17:30' prior: 50913042!
balance

	^transactions sum: [ :aTransaction | 
		aTransaction class = Deposit 
		ifTrue: [aTransaction value] 
		ifFalse: [aTransaction value *-1 ]] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'FC 11/2/2020 19:18:52' prior: 50913077!
balance

	^transactions sum: [ :aTransaction | 
		aTransaction class = Deposit 
		ifTrue: [aTransaction value] 
		ifFalse: [aTransaction value * -1 ]] ifEmpty: [ 0 ]! !

Object subclass: #Account
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Account category: 'Portfolio-Ejercicio' stamp: 'FC 11/2/2020 19:20:36'!
Object subclass: #Account
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Account subclass: #ReceptiveAccount
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'FC 11/2/2020 19:20:52'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Account category: 'Portfolio-Ejercicio' stamp: 'FC 11/2/2020 19:21:01'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'FC 11/2/2020 19:21:08'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Account subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'FC 11/2/2020 19:21:30'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'FC 11/2/2020 19:24:38'!
test08PortfolioHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'FC 11/2/2020 19:24:49' prior: 50913158!
test08PortfolioHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := Portfolio new.

	self assert: 0 equals: account balance.
! !

!testRun: #ReceptiveAccountTest #test08PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 19:24:50'!
ERROR!
!Portfolio methodsFor: 'nil' stamp: 'FC 11/2/2020 19:25:01'!
balance
	^0! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 19:25:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'FC 11/2/2020 19:25:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'FC 11/2/2020 19:25:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'FC 11/2/2020 19:25:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'FC 11/2/2020 19:25:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'FC 11/2/2020 19:25:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'FC 11/2/2020 19:25:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test08PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 19:25:03'!
PASSED!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'FC 11/2/2020 19:25:26'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'nil' stamp: 'FC 11/2/2020 19:25:38'!
test01PortfolioHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := Portfolio new.

	self assert: 0 equals: account balance.
! !

!methodRemoval: ReceptiveAccountTest #test08PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 19:25:41'!
test08PortfolioHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := Portfolio new.

	self assert: 0 equals: account balance.
!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 19:25:43'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:27:03'!
test02PortfolioHaveBalanceOfAddedReceptiveAccount 

	| account receptiveAccount |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	
	self assert: 0 equals: account balance.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:27:48' prior: 50913239!
test02PortfolioHaveBalanceOfAddedReceptiveAccount 

	| account receptiveAccount |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	Deposit register: 100 on: receptiveAccount.
	self assert: receptiveAccount balance equals: account balance.
! !

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/2/2020 19:27:56'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:28:16' prior: 50913249!
test02PortfolioHaveBalanceOfAddedReceptiveAccount 

	| account receptiveAccount |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	Deposit register: 100 on: receptiveAccount.
	account add: receptiveAccount.
	self assert: receptiveAccount balance equals: account balance.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:28:47'!
add: anAccount
	accounts add: anAccount.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:29:03' overrides: 16896425!
initialize
	accounts := OrderedCollection new.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 19:29:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'FC 11/2/2020 19:29:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'FC 11/2/2020 19:29:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'FC 11/2/2020 19:29:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'FC 11/2/2020 19:29:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'FC 11/2/2020 19:29:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'FC 11/2/2020 19:29:06'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 19:29:08'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/2/2020 19:29:08'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/2/2020 19:29:08'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:30:24' prior: 50913176!
balance
	accounts size = 0 ifTrue: [
			^0
		]
		ifFalse: [
			^ accounts first balance
		]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 19:30:25'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/2/2020 19:30:25'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:31:43'!
test03PortfolioHaveBalanceOfMultipleAddedReceptiveAccounts

	| account receptiveAccount anotherReceptiveAccount |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: receptiveAccount.
	Deposit register: 200 on: anotherReceptiveAccount.
	
	account add: receptiveAccount.
	account add: anotherReceptiveAccount.
	
	self assert: 300 equals: account balance.
! !

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfMultipleAddedReceptiveAccounts stamp: 'FC 11/2/2020 19:31:44'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:32:27' prior: 50913324!
balance
	^accounts sum: [:anAccount | anAccount balance ] ifEmpty:[0]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 19:32:28'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/2/2020 19:32:28'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfMultipleAddedReceptiveAccounts stamp: 'FC 11/2/2020 19:32:28'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:32:42' prior: 50913359!
balance
	^accounts sum: [:anAccount | anAccount balance ] ifEmpty: [0]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:34:20'!
test04PortfolioKnowsRegisteredTransactions 

	| account receptiveAccount anotherReceptiveAccount |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: receptiveAccount.
	Deposit register: 200 on: anotherReceptiveAccount.
	
	account add: receptiveAccount.
	account add: anotherReceptiveAccount.
	
	self assert: 300 equals: account balance.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:34:37'!
test04PortfolioKnowsRegisteredTransactionsOfChildren 

	| account receptiveAccount anotherReceptiveAccount |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: receptiveAccount.
	Deposit register: 200 on: anotherReceptiveAccount.
	
	account add: receptiveAccount.
	account add: anotherReceptiveAccount.
	
	self assert: 300 equals: account balance.
! !

!methodRemoval: PortfolioTest #test04PortfolioKnowsRegisteredTransactions stamp: 'FC 11/2/2020 19:34:37'!
test04PortfolioKnowsRegisteredTransactions 

	| account receptiveAccount anotherReceptiveAccount |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: receptiveAccount.
	Deposit register: 200 on: anotherReceptiveAccount.
	
	account add: receptiveAccount.
	account add: anotherReceptiveAccount.
	
	self assert: 300 equals: account balance.
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:34:58'!
test04PortfolioKnowsRegisteredTransactionsOfItsAccounts 

	| account receptiveAccount anotherReceptiveAccount |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: receptiveAccount.
	Deposit register: 200 on: anotherReceptiveAccount.
	
	account add: receptiveAccount.
	account add: anotherReceptiveAccount.
	
	self assert: 300 equals: account balance.
! !

!methodRemoval: PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfChildren stamp: 'FC 11/2/2020 19:34:59'!
test04PortfolioKnowsRegisteredTransactionsOfChildren 

	| account receptiveAccount anotherReceptiveAccount |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: receptiveAccount.
	Deposit register: 200 on: anotherReceptiveAccount.
	
	account add: receptiveAccount.
	account add: anotherReceptiveAccount.
	
	self assert: 300 equals: account balance.
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:35:31' prior: 50913432!
test04PortfolioKnowsRegisteredTransactionsOfItsAccounts 

	| account receptiveAccount anotherReceptiveAccount |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: receptiveAccount.
	
	account add: receptiveAccount.
	
	self assert: 300 equals: account balance.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:35:54' prior: 50913467!
test04PortfolioKnowsRegisteredTransactionsOfItsAccounts 

	| account receptiveAccount deposit |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: receptiveAccount.
	
	account add: receptiveAccount.
	
	self assert: 300 equals: account balance.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:36:34' prior: 50913480!
test04PortfolioKnowsRegisteredTransactionsOfItsAccounts 

	| account receptiveAccount deposit |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: receptiveAccount.
	
	account add: receptiveAccount.
	
	self assert: (account hasRegistered: deposit).
! !

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfItsAccounts stamp: 'FC 11/2/2020 19:36:35'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:37:10'!
hasRegistered: aTransaction
	^true.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 19:37:11'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/2/2020 19:37:11'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfMultipleAddedReceptiveAccounts stamp: 'FC 11/2/2020 19:37:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfItsAccounts stamp: 'FC 11/2/2020 19:37:11'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:37:35'!
test05PortfolioDoesntKnowRegisteredTransactionsOfItsAccounts 

	| account receptiveAccount deposit |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: receptiveAccount.
	
	account add: receptiveAccount.
	
	self assert: (account hasRegistered: deposit).
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:37:55'!
test05PortfolioDoesNotKnowRegisteredTransactionsOfItsAccounts 

	| account receptiveAccount deposit |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: receptiveAccount.
	
	account add: receptiveAccount.
	
	self assert: (account hasRegistered: deposit).
! !

!methodRemoval: PortfolioTest #test05PortfolioDoesntKnowRegisteredTransactionsOfItsAccounts stamp: 'FC 11/2/2020 19:37:55'!
test05PortfolioDoesntKnowRegisteredTransactionsOfItsAccounts 

	| account receptiveAccount deposit |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: receptiveAccount.
	
	account add: receptiveAccount.
	
	self assert: (account hasRegistered: deposit).
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:38:04'!
test05PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts 

	| account receptiveAccount deposit |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: receptiveAccount.
	
	account add: receptiveAccount.
	
	self assert: (account hasRegistered: deposit).
! !

!methodRemoval: PortfolioTest #test05PortfolioDoesNotKnowRegisteredTransactionsOfItsAccounts stamp: 'FC 11/2/2020 19:38:04'!
test05PortfolioDoesNotKnowRegisteredTransactionsOfItsAccounts 

	| account receptiveAccount deposit |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: receptiveAccount.
	
	account add: receptiveAccount.
	
	self assert: (account hasRegistered: deposit).
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:38:22' prior: 50913569!
test05PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts 

	| account receptiveAccount deposit |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: receptiveAccount.
	
	
	self assert: (account hasRegistered: deposit).
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:38:26' prior: 50913596!
test05PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts 

	| account receptiveAccount deposit |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: receptiveAccount.
	
	
	self deny: (account hasRegistered: deposit).
! !

!testRun: #PortfolioTest #test05PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/2/2020 19:38:27'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:39:08' prior: 50913510!
hasRegistered: aTransaction
	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ].! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 19:39:09'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/2/2020 19:39:09'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfMultipleAddedReceptiveAccounts stamp: 'FC 11/2/2020 19:39:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfItsAccounts stamp: 'FC 11/2/2020 19:39:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/2/2020 19:39:09'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 19:39:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/2/2020 19:39:16'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfMultipleAddedReceptiveAccounts stamp: 'FC 11/2/2020 19:39:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfItsAccounts stamp: 'FC 11/2/2020 19:39:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/2/2020 19:39:16'!
PASSED!

array := #()!

array anySatisfy: [ :element | element = 1 ].!

array anySatisfy: [ :element | element = 1 ].!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:41:43'!
test06PortfolioKnowsItsTransactions 

	| account receptiveAccount deposit |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: receptiveAccount.
	
	account add: receptiveAccount.
		
	self deny: (account hasRegistered: deposit).
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:42:34' prior: 50913674!
test06PortfolioKnowsItsTransactions 

	| account receptiveAccount deposit |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: receptiveAccount.
	
	account add: receptiveAccount.
	
	self assert: account transactions size equals: 1.
	self assert: (account transactions includes: deposit).

! !

array1,array2.!

array1 := #(0).
array2 := #(1).!

array1,array2.!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:45:57'!
transactions
	^accounts inject: #() into: [ :transactions :anAccount | transactions,anAccount transactions] . ! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 19:45:59'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/2/2020 19:45:59'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfMultipleAddedReceptiveAccounts stamp: 'FC 11/2/2020 19:45:59'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfItsAccounts stamp: 'FC 11/2/2020 19:45:59'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/2/2020 19:45:59'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioKnowsItsTransactions stamp: 'FC 11/2/2020 19:45:59'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:46:45'!
test07PortfolioKnowsTransactionsOfMoreThanOneAccount 

	| account receptiveAccount deposit |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: receptiveAccount.
	
	account add: receptiveAccount.
	
	self assert: account transactions size equals: 2.
	self assert: (account transactions includes: deposit).

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:47:42' prior: 50913732!
test07PortfolioKnowsTransactionsOfMoreThanOneAccount 

	| account receptiveAccount deposit anotherReceptiveAccount anotherDeposit |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: receptiveAccount.
	anotherDeposit := Deposit register: 200 on: anotherReceptiveAccount.
	
	account add: receptiveAccount.
	account add: anotherReceptiveAccount.
	
	
	self assert: account transactions size equals: 2.
	self assert: (account transactions includes: deposit).
	self assert: (account transactions includes: anotherDeposit).

! !

!testRun: #PortfolioTest #test07PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/2/2020 19:47:42'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 19:47:42'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/2/2020 19:47:42'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfMultipleAddedReceptiveAccounts stamp: 'FC 11/2/2020 19:47:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfItsAccounts stamp: 'FC 11/2/2020 19:47:42'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/2/2020 19:47:42'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioKnowsItsTransactions stamp: 'FC 11/2/2020 19:47:42'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/2/2020 19:47:42'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 19:47:48' prior: 50913747!
test07PortfolioKnowsTransactionsOfMoreThanOneAccount 

	| account receptiveAccount deposit anotherReceptiveAccount anotherDeposit |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: receptiveAccount.
	anotherDeposit := Deposit register: 200 on: anotherReceptiveAccount.
	
	account add: receptiveAccount.
	account add: anotherReceptiveAccount.
	
	self assert: account transactions size equals: 2.
	self assert: (account transactions includes: deposit).
	self assert: (account transactions includes: anotherDeposit).

! !
!Deposit methodsFor: 'value' stamp: 'FC 11/2/2020 20:00:02'!
addBalanceFor: anAccount

	^ anAccount addDeposit: self.! !
!Withdraw methodsFor: 'value' stamp: 'FC 11/2/2020 20:00:19'!
addBalanceFor: anAccount

	^ value! !
!Withdraw methodsFor: 'value' stamp: 'FC 11/2/2020 20:00:38' prior: 50913826!
addBalanceFor: anAccount

	^ anAccount addWithdraw: self.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'FC 11/2/2020 20:01:12'!
addDeposit: aDeposit
	^ aDeposit value.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'FC 11/2/2020 20:01:33'!
addWithdraw: aWithdrawal
	^ aWithdrawal value * -1.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'FC 11/2/2020 20:01:59' prior: 50913085!
balance

	^transactions sum: [ :aTransaction | 
		aTransaction addBalanceFor: self.] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 20:01:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'FC 11/2/2020 20:01:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'FC 11/2/2020 20:01:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'FC 11/2/2020 20:01:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'FC 11/2/2020 20:01:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'FC 11/2/2020 20:01:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'FC 11/2/2020 20:01:59'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 20:19:25'!
test04PortfolioKnowsRegisteredTransactionsOfAnAccount 

	| account receptiveAccount deposit |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: receptiveAccount.
	
	account add: receptiveAccount.
	
	self assert: (account hasRegistered: deposit).
! !

!methodRemoval: PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfItsAccounts stamp: 'FC 11/2/2020 20:19:28'!
test04PortfolioKnowsRegisteredTransactionsOfItsAccounts 

	| account receptiveAccount deposit |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: receptiveAccount.
	
	account add: receptiveAccount.
	
	self assert: (account hasRegistered: deposit).
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 20:19:33'!
test06PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts 

	| account receptiveAccount deposit |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: receptiveAccount.
	
	
	self deny: (account hasRegistered: deposit).
! !

!methodRemoval: PortfolioTest #test05PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/2/2020 20:19:33'!
test05PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts 

	| account receptiveAccount deposit |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: receptiveAccount.
	
	
	self deny: (account hasRegistered: deposit).
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 20:19:40'!
test07PortfolioKnowsItsTransactions 

	| account receptiveAccount deposit |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: receptiveAccount.
	
	account add: receptiveAccount.
	
	self assert: account transactions size equals: 1.
	self assert: (account transactions includes: deposit).

! !

!methodRemoval: PortfolioTest #test06PortfolioKnowsItsTransactions stamp: 'FC 11/2/2020 20:19:40'!
test06PortfolioKnowsItsTransactions 

	| account receptiveAccount deposit |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: receptiveAccount.
	
	account add: receptiveAccount.
	
	self assert: account transactions size equals: 1.
	self assert: (account transactions includes: deposit).

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 20:19:45'!
test08PortfolioKnowsTransactionsOfMoreThanOneAccount 

	| account receptiveAccount deposit anotherReceptiveAccount anotherDeposit |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: receptiveAccount.
	anotherDeposit := Deposit register: 200 on: anotherReceptiveAccount.
	
	account add: receptiveAccount.
	account add: anotherReceptiveAccount.
	
	self assert: account transactions size equals: 2.
	self assert: (account transactions includes: deposit).
	self assert: (account transactions includes: anotherDeposit).

! !

!methodRemoval: PortfolioTest #test07PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/2/2020 20:19:45'!
test07PortfolioKnowsTransactionsOfMoreThanOneAccount 

	| account receptiveAccount deposit anotherReceptiveAccount anotherDeposit |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: receptiveAccount.
	anotherDeposit := Deposit register: 200 on: anotherReceptiveAccount.
	
	account add: receptiveAccount.
	account add: anotherReceptiveAccount.
	
	self assert: account transactions size equals: 2.
	self assert: (account transactions includes: deposit).
	self assert: (account transactions includes: anotherDeposit).

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 20:24:02'!
test05PortfolioKnowsRegisteredTransactionsOfManyAccounts 

	| account aPortfolio receptiveAccount deposit anotherDeposit 
	portfolioReceptiveAccount |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	portfolioReceptiveAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: receptiveAccount.
	anotherDeposit := Deposit register: 150 on: portfolioReceptiveAccount.
	
	portfolioReceptiveAccount add: receptiveAccount.
	
	account add: receptiveAccount.
	account add: portfolioReceptiveAccount.
	
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: anotherDeposit).
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 20:24:22' prior: 50914002!
test05PortfolioKnowsRegisteredTransactionsOfManyAccounts 

	| account aPortfolio receptiveAccount deposit anotherDeposit 
	portfolioReceptiveAccount |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	portfolioReceptiveAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: receptiveAccount.
	anotherDeposit := Deposit register: 150 on: portfolioReceptiveAccount.
	
	aPortfolio add: portfolioReceptiveAccount.
	
	account add: receptiveAccount.
	account add: aPortfolio.
	
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: anotherDeposit).
! !

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/2/2020 20:24:23'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 20:24:23'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/2/2020 20:24:23'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfMultipleAddedReceptiveAccounts stamp: 'FC 11/2/2020 20:24:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfAnAccount stamp: 'FC 11/2/2020 20:24:23'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/2/2020 20:24:23'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/2/2020 20:24:23'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsItsTransactions stamp: 'FC 11/2/2020 20:24:23'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/2/2020 20:24:23'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/2/2020 20:29:33'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 20:29:33'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/2/2020 20:29:33'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfMultipleAddedReceptiveAccounts stamp: 'FC 11/2/2020 20:29:33'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfAnAccount stamp: 'FC 11/2/2020 20:29:33'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/2/2020 20:29:33'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/2/2020 20:29:33'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsItsTransactions stamp: 'FC 11/2/2020 20:29:33'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/2/2020 20:29:33'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 20:30:23' prior: 50913337!
test03PortfolioHaveBalanceOfMultipleAddedReceptiveAccounts

	| account receptiveAccount anotherReceptiveAccount aPortfolio anotherDeposit deposit portfolioReceptiveAccount |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	portfolioReceptiveAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: receptiveAccount.
	anotherDeposit := Deposit register: 150 on: portfolioReceptiveAccount.
	
	aPortfolio add: portfolioReceptiveAccount.
	
	account add: receptiveAccount.
	account add: aPortfolio.
	
	self assert: 300 equals: account balance.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 20:30:48' prior: 50914117!
test03PortfolioHaveBalanceOfMultipleAddedReceptiveAccounts

	| account receptiveAccount aPortfolio anotherDeposit deposit portfolioReceptiveAccount |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	portfolioReceptiveAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: receptiveAccount.
	anotherDeposit := Deposit register: 150 on: portfolioReceptiveAccount.
	
	aPortfolio add: portfolioReceptiveAccount.
	
	account add: receptiveAccount.
	account add: aPortfolio.
	
	self assert: 250 equals: account balance.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 20:31:02' prior: 50914140!
test03PortfolioHaveBalanceOfMultipleAddedReceptiveAccounts

	| account receptiveAccount aPortfolio portfolioReceptiveAccount |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	portfolioReceptiveAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: receptiveAccount.
	Deposit register: 150 on: portfolioReceptiveAccount.
	
	aPortfolio add: portfolioReceptiveAccount.
	
	account add: receptiveAccount.
	account add: aPortfolio.
	
	self assert: 250 equals: account balance.
! !

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfMultipleAddedReceptiveAccounts stamp: 'FC 11/2/2020 20:31:05'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 20:31:05'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/2/2020 20:31:05'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfMultipleAddedReceptiveAccounts stamp: 'FC 11/2/2020 20:31:05'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfAnAccount stamp: 'FC 11/2/2020 20:31:05'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/2/2020 20:31:05'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/2/2020 20:31:05'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsItsTransactions stamp: 'FC 11/2/2020 20:31:05'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/2/2020 20:31:05'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 20:31:27'!
test03PortfolioHaveBalanceOfManyAddedReceptiveAccounts

	| account receptiveAccount aPortfolio portfolioReceptiveAccount |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	portfolioReceptiveAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: receptiveAccount.
	Deposit register: 150 on: portfolioReceptiveAccount.
	
	aPortfolio add: portfolioReceptiveAccount.
	
	account add: receptiveAccount.
	account add: aPortfolio.
	
	self assert: 250 equals: account balance.
! !

!methodRemoval: PortfolioTest #test03PortfolioHaveBalanceOfMultipleAddedReceptiveAccounts stamp: 'FC 11/2/2020 20:31:28'!
test03PortfolioHaveBalanceOfMultipleAddedReceptiveAccounts

	| account receptiveAccount aPortfolio portfolioReceptiveAccount |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	portfolioReceptiveAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: receptiveAccount.
	Deposit register: 150 on: portfolioReceptiveAccount.
	
	aPortfolio add: portfolioReceptiveAccount.
	
	account add: receptiveAccount.
	account add: aPortfolio.
	
	self assert: 250 equals: account balance.
!

----SNAPSHOT----(2 November 2020 20:33:09) CuisUniversity-4383.image priorSource: 18587669!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 20:36:40'!
test09CantAddSameReceptiveAccountTwiceOnPortfolio
	| account  receptiveAccount |
	
	account := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	
	account add: receptiveAccount.
	
	self should: [account add: receptiveAccount ] raise: Error withMessageText: Portfolio duplicateAccountMessage.
	

! !

!testRun: #PortfolioTest #test09CantAddSameReceptiveAccountTwiceOnPortfolio stamp: 'FC 11/2/2020 20:36:45'!
ERROR!

!testRun: #PortfolioTest #test09CantAddSameReceptiveAccountTwiceOnPortfolio stamp: 'FC 11/2/2020 20:36:53'!
ERROR!
!Portfolio class methodsFor: 'error' stamp: 'FC 11/2/2020 20:36:59'!
duplicateAccountMessage
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'error' stamp: 'FC 11/2/2020 20:37:11' prior: 50914279!
duplicateAccountMessage
	^'Cuenta ya presente en el Portfolio'.! !

!testRun: #PortfolioTest #test09CantAddSameReceptiveAccountTwiceOnPortfolio stamp: 'FC 11/2/2020 20:37:14'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 20:38:06' prior: 50913277!
add: anAccount
	(accounts includes: anAccount) ifTrue: [self error: self class duplicateAccountMessage ].
	accounts add: anAccount.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 20:38:06'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/2/2020 20:38:06'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfManyAddedReceptiveAccounts stamp: 'FC 11/2/2020 20:38:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfAnAccount stamp: 'FC 11/2/2020 20:38:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/2/2020 20:38:07'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/2/2020 20:38:07'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsItsTransactions stamp: 'FC 11/2/2020 20:38:07'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/2/2020 20:38:07'!
PASSED!

!testRun: #PortfolioTest #test09CantAddSameReceptiveAccountTwiceOnPortfolio stamp: 'FC 11/2/2020 20:38:07'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 20:40:09'!
test10
	| account receptiveAccount aPortfolio |
	
	account := Portfolio new.
	aPortfolio := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	
	aPortfolio add: receptiveAccount.
	account add: aPortfolio.
	
	
	self should: [account add: receptiveAccount ] raise: Error withMessageText: Portfolio duplicateAccountMessage.
	

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 20:40:11' prior: 50914334!
test10
	| account receptiveAccount aPortfolio |
	
	account := Portfolio new.
	aPortfolio := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	
	aPortfolio add: receptiveAccount.
	account add: aPortfolio.
	
	self should: [account add: receptiveAccount ] raise: Error withMessageText: Portfolio duplicateAccountMessage.
	

! !

!testRun: #PortfolioTest #test10 stamp: 'FC 11/2/2020 20:40:12'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 20:40:54' prior: 50914293!
add: anAccount

	(accounts hasChild: anAccount) ifTrue: [self error: self class duplicateAccountMessage ].
	accounts add: anAccount.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'FC 11/2/2020 20:41:17'!
hasChild: anAccount
	^false.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 20:43:14'!
hasChild: anAccount
	^(accounts includes: anAccount) or: [ accounts anySatisfy: [ :account | account hasChild: anAccount ]]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 20:43:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/2/2020 20:43:15'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfManyAddedReceptiveAccounts stamp: 'FC 11/2/2020 20:43:15'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfAnAccount stamp: 'FC 11/2/2020 20:43:15'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/2/2020 20:43:15'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/2/2020 20:43:15'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsItsTransactions stamp: 'FC 11/2/2020 20:43:15'!
ERROR!

!testRun: #PortfolioTest #test08PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/2/2020 20:43:15'!
ERROR!

!testRun: #PortfolioTest #test09CantAddSameReceptiveAccountTwiceOnPortfolio stamp: 'FC 11/2/2020 20:43:15'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'FC 11/2/2020 20:43:15'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 20:44:06'!
isPresent: anAccount
	^accounts anySatisfy: [ :account | account hasChild: anAccount ]! !

!methodRemoval: Portfolio #hasChild: stamp: 'FC 11/2/2020 20:44:10'!
hasChild: anAccount
	^(accounts includes: anAccount) or: [ accounts anySatisfy: [ :account | account hasChild: anAccount ]]!
!ReceptiveAccount methodsFor: 'testing - private' stamp: 'FC 11/2/2020 20:44:24'!
isPresent: anAccount
	^anAccount = self.! !

!methodRemoval: ReceptiveAccount #hasChild: stamp: 'FC 11/2/2020 20:44:27'!
hasChild: anAccount
	^false.!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 20:44:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'FC 11/2/2020 20:44:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'FC 11/2/2020 20:44:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'FC 11/2/2020 20:44:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'FC 11/2/2020 20:44:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'FC 11/2/2020 20:44:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'FC 11/2/2020 20:44:29'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 20:44:31'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/2/2020 20:44:31'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfManyAddedReceptiveAccounts stamp: 'FC 11/2/2020 20:44:31'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfAnAccount stamp: 'FC 11/2/2020 20:44:31'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/2/2020 20:44:31'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/2/2020 20:44:31'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsItsTransactions stamp: 'FC 11/2/2020 20:44:31'!
ERROR!

!testRun: #PortfolioTest #test08PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/2/2020 20:44:31'!
ERROR!

!testRun: #PortfolioTest #test09CantAddSameReceptiveAccountTwiceOnPortfolio stamp: 'FC 11/2/2020 20:44:31'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'FC 11/2/2020 20:44:31'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 20:44:45' prior: 50914364!
add: anAccount

	(accounts isPresent: anAccount) ifTrue: [self error: self class duplicateAccountMessage ].
	accounts add: anAccount.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 20:44:46'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/2/2020 20:44:46'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfManyAddedReceptiveAccounts stamp: 'FC 11/2/2020 20:44:46'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfAnAccount stamp: 'FC 11/2/2020 20:44:46'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/2/2020 20:44:46'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/2/2020 20:44:46'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsItsTransactions stamp: 'FC 11/2/2020 20:44:46'!
ERROR!

!testRun: #PortfolioTest #test08PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/2/2020 20:44:46'!
ERROR!

!testRun: #PortfolioTest #test09CantAddSameReceptiveAccountTwiceOnPortfolio stamp: 'FC 11/2/2020 20:44:46'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'FC 11/2/2020 20:44:46'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/2/2020 20:44:57'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/2/2020 20:44:57'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 20:45:10' prior: 50914499!
add: anAccount

	(self isPresent: anAccount) ifTrue: [self error: self class duplicateAccountMessage ].
	accounts add: anAccount.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 20:45:13'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/2/2020 20:45:13'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfManyAddedReceptiveAccounts stamp: 'FC 11/2/2020 20:45:13'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfAnAccount stamp: 'FC 11/2/2020 20:45:13'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/2/2020 20:45:13'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/2/2020 20:45:13'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsItsTransactions stamp: 'FC 11/2/2020 20:45:13'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/2/2020 20:45:14'!
ERROR!

!testRun: #PortfolioTest #test09CantAddSameReceptiveAccountTwiceOnPortfolio stamp: 'FC 11/2/2020 20:45:14'!
FAILURE!

!testRun: #PortfolioTest #test10 stamp: 'FC 11/2/2020 20:45:14'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 20:45:30' prior: 50914417!
isPresent: anAccount
	^accounts anySatisfy: [ :account | account isPresent: anAccount ]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 20:45:31'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/2/2020 20:45:31'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfManyAddedReceptiveAccounts stamp: 'FC 11/2/2020 20:45:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfAnAccount stamp: 'FC 11/2/2020 20:45:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/2/2020 20:45:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/2/2020 20:45:31'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsItsTransactions stamp: 'FC 11/2/2020 20:45:31'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/2/2020 20:45:31'!
PASSED!

!testRun: #PortfolioTest #test09CantAddSameReceptiveAccountTwiceOnPortfolio stamp: 'FC 11/2/2020 20:45:31'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'FC 11/2/2020 20:45:31'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 20:45:58'!
test10CantAddSameReceptiveAccountTwiceOnDifferentLevels
	| account receptiveAccount aPortfolio |
	
	account := Portfolio new.
	aPortfolio := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	
	aPortfolio add: receptiveAccount.
	account add: aPortfolio.
	
	self should: [account add: receptiveAccount ] raise: Error withMessageText: Portfolio duplicateAccountMessage.
	

! !

!methodRemoval: PortfolioTest #test10 stamp: 'FC 11/2/2020 20:46:00'!
test10
	| account receptiveAccount aPortfolio |
	
	account := Portfolio new.
	aPortfolio := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	
	aPortfolio add: receptiveAccount.
	account add: aPortfolio.
	
	self should: [account add: receptiveAccount ] raise: Error withMessageText: Portfolio duplicateAccountMessage.
	

!

----SNAPSHOT----(2 November 2020 20:47:16) CuisUniversity-4383.image priorSource: 18643366!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 20:47:29'!
test11PortfolioCantAddToItself
	| account receptiveAccount aPortfolio |
	
	account := Portfolio new.
	aPortfolio := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	
	aPortfolio add: receptiveAccount.
	account add: aPortfolio.
	
	self should: [account add: receptiveAccount ] raise: Error withMessageText: Portfolio duplicateAccountMessage.
	

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 20:47:47' prior: 50914664!
test11PortfolioCantAddToItself
	| account |
	
	account := Portfolio new.
	

	
	self should: [	account add: account.] raise: Error withMessageText: Portfolio duplicateAccountMessage.
	

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 20:47:51' prior: 50914679!
test11PortfolioCantAddToItself
	| account |
	
	account := Portfolio new.
	
	self should: [	account add: account.] raise: Error withMessageText: Portfolio duplicateAccountMessage.
	

! !

!testRun: #PortfolioTest #test11PortfolioCantAddToItself stamp: 'FC 11/2/2020 20:47:52'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 20:48:44' prior: 50914592!
isPresent: anAccount
	^self = anAccount or: [ accounts anySatisfy: [ :account | account isPresent: anAccount ]]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 20:48:45'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/2/2020 20:48:45'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfManyAddedReceptiveAccounts stamp: 'FC 11/2/2020 20:48:45'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfAnAccount stamp: 'FC 11/2/2020 20:48:45'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/2/2020 20:48:45'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/2/2020 20:48:45'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsItsTransactions stamp: 'FC 11/2/2020 20:48:45'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/2/2020 20:48:45'!
PASSED!

!testRun: #PortfolioTest #test09CantAddSameReceptiveAccountTwiceOnPortfolio stamp: 'FC 11/2/2020 20:48:45'!
PASSED!

!testRun: #PortfolioTest #test10CantAddSameReceptiveAccountTwiceOnDifferentLevels stamp: 'FC 11/2/2020 20:48:45'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantAddToItself stamp: 'FC 11/2/2020 20:48:45'!
PASSED!
!Account methodsFor: 'nil' stamp: 'FC 11/2/2020 20:52:30'!
hasRegistered: aTransaction
	self subclassResponsibility.! !
!Account methodsFor: 'as yet unclassified' stamp: 'FC 11/2/2020 20:52:39'!
balance
	self subclassResponsibility.! !
!Account methodsFor: 'nil' stamp: 'FC 11/2/2020 20:52:54'!
transactions
	self subclassResponsibility.! !

----SNAPSHOT----(2 November 2020 20:53:22) CuisUniversity-4383.image priorSource: 18656337!

----SNAPSHOT----(2 November 2020 20:54:56) CuisUniversity-4383.image priorSource: 18659469!

----SNAPSHOT----(2 November 2020 20:58:49) CuisUniversity-4383.image priorSource: 18659562!

portfolio1 add: portfolio2.!

portfolio1 := Portfolio new.
portfolio2 := Portfolio new.
portfolio3 := Portfolio new.
!

portfolio1 add: portfolio2.
!

portfolio1.!

portfolio2 add: portfolio1.!

portfolio2 add: portfolio1.!

portfiolio1!

portfolio1.!

portfolio2!

portfolio1!

portfolio1 := Portfolio new.
portfolio2 := Portfolio new.
portfolio3 := Portfolio new.
!

portfolio1 := Portfolio new.
portfolio2 := Portfolio new.
!


portfolio1 add: portfolio2.
portfolio2 add: portfolio1.
!

portfolio1 := Portfolio new.
portfolio2 := Portfolio new.
!

portfolio2 add: portfolio1.
portfolio1 add: portfolio2.

!
!Portfolio methodsFor: 'adding' stamp: 'FC 11/2/2020 21:03:46' prior: 50914549!
add: anAccount

	((self isPresent: anAccount) or: [anAccount isPresent: self]) ifTrue: [self error: self class duplicateAccountMessage ].
	accounts add: anAccount.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 21:03:46'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/2/2020 21:03:46'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfManyAddedReceptiveAccounts stamp: 'FC 11/2/2020 21:03:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfAnAccount stamp: 'FC 11/2/2020 21:03:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/2/2020 21:03:46'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/2/2020 21:03:46'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsItsTransactions stamp: 'FC 11/2/2020 21:03:46'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/2/2020 21:03:46'!
PASSED!

!testRun: #PortfolioTest #test09CantAddSameReceptiveAccountTwiceOnPortfolio stamp: 'FC 11/2/2020 21:03:46'!
PASSED!

!testRun: #PortfolioTest #test10CantAddSameReceptiveAccountTwiceOnDifferentLevels stamp: 'FC 11/2/2020 21:03:46'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantAddToItself stamp: 'FC 11/2/2020 21:03:46'!
PASSED!

portfolio1 := Portfolio new.
portfolio2 := Portfolio new.

portfolio2 add: portfolio1.
portfolio1 add: portfolio2.

!

portfolio2 add: portfolio3.!

portfolio2 add: portfolio1.!

portfolio1 := Portfolio new.
portfolio2 := Portfolio new.!


portfolio1 add: portfolio2.
portfolio2 add: portfolio1.

!
!PortfolioTest methodsFor: 'tests' stamp: 'FC 11/2/2020 21:06:01'!
test12PortfolioCantAddToItselfOnChild
	| account aPortfolio |
	
	account := Portfolio new.
	aPortfolio := Portfolio new.
	account add: aPortfolio.
	
	self should: [	aPortfolio add: account.] raise: Error withMessageText: Portfolio duplicateAccountMessage.
	

! !

!testRun: #PortfolioTest #test12PortfolioCantAddToItselfOnChild stamp: 'FC 11/2/2020 21:06:02'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/2/2020 21:06:02'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/2/2020 21:06:02'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfManyAddedReceptiveAccounts stamp: 'FC 11/2/2020 21:06:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfAnAccount stamp: 'FC 11/2/2020 21:06:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/2/2020 21:06:02'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/2/2020 21:06:02'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsItsTransactions stamp: 'FC 11/2/2020 21:06:02'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/2/2020 21:06:02'!
PASSED!

!testRun: #PortfolioTest #test09CantAddSameReceptiveAccountTwiceOnPortfolio stamp: 'FC 11/2/2020 21:06:02'!
PASSED!

!testRun: #PortfolioTest #test10CantAddSameReceptiveAccountTwiceOnDifferentLevels stamp: 'FC 11/2/2020 21:06:02'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantAddToItself stamp: 'FC 11/2/2020 21:06:02'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddToItselfOnChild stamp: 'FC 11/2/2020 21:06:02'!
PASSED!

portfolio1 := Portfolio new.
portfolio2 := Portfolio new.
portfolio3 := Portfolio new.!

account := Portfolio new.
aPortfolio := Portfolio new.
receptiveAccount := ReceptiveAccount new.
!

aPortfolio add: receptiveAccount.
account add: aPortfolio.
account add: receptiveAccount.!

account := Portfolio new.
aPortfolio := Portfolio new.
receptiveAccount := ReceptiveAccount new.!

account := Portfolio new.
aPortfolio := Portfolio new.
receptiveAccount := ReceptiveAccount new.!

account add: receptiveAccount.
account add: aPortfolio.
aPortfolio add: receptiveAccount.!

account := Portfolio new.
aPortfolio := Portfolio new.
receptiveAccount := ReceptiveAccount new.!

account := Portfolio new.
aPortfolio := Portfolio new.
receptiveAccount := ReceptiveAccount new.!

----SNAPSHOT----(2 November 2020 22:46:26) CuisUniversity-4383.image priorSource: 18659655!

----SNAPSHOT----(2 November 2020 22:46:43) CuisUniversity-4383.image priorSource: 18664801!

----QUIT----(2 November 2020 22:46:46) CuisUniversity-4383.image priorSource: 18664894!

----STARTUP---- (4 November 2020 17:26:35) as C:\Users\Felip\Desktop\Dev\Inge 1\ST\windows64\CuisUniversity-4383.image!


Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'FC 11/4/2020 17:30:18'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'tests' stamp: 'FC 11/4/2020 17:31:22' prior: 50914634!
test10CantAddSameReceptiveAccountTwiceOnDifferentLevels
	| account receptiveAccount aPortfolio |
	
	account := Portfolio new.
	aPortfolio := Portfolio new.
	receptiveAccount := ReceptiveAccount new.

	account add: receptiveAccount.
	account add: aPortfolio.

	self should: [	aPortfolio add: receptiveAccount ] raise: Error withMessageText: Portfolio duplicateAccountMessage.
	

! !
!PortfolioTest methodsFor: 'tests' stamp: 'FC 11/4/2020 17:31:28'!
test13
	| account receptiveAccount aPortfolio |
	
	account := Portfolio new.
	aPortfolio := Portfolio new.
	receptiveAccount := ReceptiveAccount new.

	account add: receptiveAccount.
	account add: aPortfolio.

	self should: [	aPortfolio add: receptiveAccount ] raise: Error withMessageText: Portfolio duplicateAccountMessage.
	

! !
!PortfolioTest methodsFor: 'tests' stamp: 'FC 11/2/2020 20:45:58' prior: 50914951!
test10CantAddSameReceptiveAccountTwiceOnDifferentLevels
	| account receptiveAccount aPortfolio |
	
	account := Portfolio new.
	aPortfolio := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
	
	aPortfolio add: receptiveAccount.
	account add: aPortfolio.
	
	self should: [account add: receptiveAccount ] raise: Error withMessageText: Portfolio duplicateAccountMessage.
	

! !

!testRun: #PortfolioTest #test10CantAddSameReceptiveAccountTwiceOnDifferentLevels stamp: 'FC 11/4/2020 17:31:42'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/4/2020 17:31:42'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/4/2020 17:31:42'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfManyAddedReceptiveAccounts stamp: 'FC 11/4/2020 17:31:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfAnAccount stamp: 'FC 11/4/2020 17:31:42'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/4/2020 17:31:42'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/4/2020 17:31:42'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsItsTransactions stamp: 'FC 11/4/2020 17:31:42'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/4/2020 17:31:42'!
PASSED!

!testRun: #PortfolioTest #test09CantAddSameReceptiveAccountTwiceOnPortfolio stamp: 'FC 11/4/2020 17:31:42'!
PASSED!

!testRun: #PortfolioTest #test10CantAddSameReceptiveAccountTwiceOnDifferentLevels stamp: 'FC 11/4/2020 17:31:42'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantAddToItself stamp: 'FC 11/4/2020 17:31:42'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddToItselfOnChild stamp: 'FC 11/4/2020 17:31:42'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'FC 11/4/2020 17:31:42'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'FC 11/4/2020 17:31:42'!
FAILURE!
!Portfolio methodsFor: 'initialization' stamp: 'FC 11/4/2020 17:31:55' prior: 50913282 overrides: 16896425!
initialize
	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'adding' stamp: 'FC 11/4/2020 17:34:05' prior: 50914787!
add: anAccount

	((self isPresent: anAccount) or: [anAccount isPresent: self]) ifTrue: [self error: self class duplicateAccountMessage ].
	anAccount addParent: self.
	
	accounts add: anAccount.! !
!Portfolio methodsFor: 'nil' stamp: 'FC 11/4/2020 17:34:35'!
addParent: anAccount
	self parents add: anAccount.! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'FC 11/4/2020 17:34:56'!
addParent: anAccount! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'FC 11/4/2020 17:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'FC 11/4/2020 17:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'FC 11/4/2020 17:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'FC 11/4/2020 17:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'FC 11/4/2020 17:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'FC 11/4/2020 17:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'FC 11/4/2020 17:34:59'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/4/2020 17:35:01'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/4/2020 17:35:01'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfManyAddedReceptiveAccounts stamp: 'FC 11/4/2020 17:35:01'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfAnAccount stamp: 'FC 11/4/2020 17:35:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/4/2020 17:35:01'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/4/2020 17:35:01'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsItsTransactions stamp: 'FC 11/4/2020 17:35:01'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/4/2020 17:35:01'!
PASSED!

!testRun: #PortfolioTest #test09CantAddSameReceptiveAccountTwiceOnPortfolio stamp: 'FC 11/4/2020 17:35:01'!
PASSED!

!testRun: #PortfolioTest #test10CantAddSameReceptiveAccountTwiceOnDifferentLevels stamp: 'FC 11/4/2020 17:35:01'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioCantAddToItself stamp: 'FC 11/4/2020 17:35:01'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddToItselfOnChild stamp: 'FC 11/4/2020 17:35:01'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'FC 11/4/2020 17:35:01'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/4/2020 17:35:07'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/4/2020 17:35:07'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfManyAddedReceptiveAccounts stamp: 'FC 11/4/2020 17:35:07'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfAnAccount stamp: 'FC 11/4/2020 17:35:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/4/2020 17:35:07'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/4/2020 17:35:07'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsItsTransactions stamp: 'FC 11/4/2020 17:35:07'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/4/2020 17:35:07'!
PASSED!

!testRun: #PortfolioTest #test09CantAddSameReceptiveAccountTwiceOnPortfolio stamp: 'FC 11/4/2020 17:35:07'!
PASSED!

!testRun: #PortfolioTest #test10CantAddSameReceptiveAccountTwiceOnDifferentLevels stamp: 'FC 11/4/2020 17:35:07'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioCantAddToItself stamp: 'FC 11/4/2020 17:35:07'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddToItselfOnChild stamp: 'FC 11/4/2020 17:35:07'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'FC 11/4/2020 17:35:07'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfManyAddedReceptiveAccounts stamp: 'FC 11/4/2020 17:35:16'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfManyAddedReceptiveAccounts stamp: 'FC 11/4/2020 17:35:16'!
ERROR!
!Portfolio methodsFor: 'adding - private' stamp: 'FC 11/4/2020 17:35:32' prior: 50915062!
addParent: anAccount
	parents add: anAccount.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'FC 11/4/2020 17:35:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'FC 11/4/2020 17:35:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'FC 11/4/2020 17:35:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'FC 11/4/2020 17:35:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'FC 11/4/2020 17:35:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'FC 11/4/2020 17:35:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'FC 11/4/2020 17:35:35'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/4/2020 17:35:36'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/4/2020 17:35:36'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfManyAddedReceptiveAccounts stamp: 'FC 11/4/2020 17:35:36'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfAnAccount stamp: 'FC 11/4/2020 17:35:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/4/2020 17:35:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/4/2020 17:35:36'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsItsTransactions stamp: 'FC 11/4/2020 17:35:36'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/4/2020 17:35:36'!
PASSED!

!testRun: #PortfolioTest #test09CantAddSameReceptiveAccountTwiceOnPortfolio stamp: 'FC 11/4/2020 17:35:36'!
PASSED!

!testRun: #PortfolioTest #test10CantAddSameReceptiveAccountTwiceOnDifferentLevels stamp: 'FC 11/4/2020 17:35:37'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantAddToItself stamp: 'FC 11/4/2020 17:35:37'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddToItselfOnChild stamp: 'FC 11/4/2020 17:35:37'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'FC 11/4/2020 17:35:37'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'FC 11/4/2020 17:35:37'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'FC 11/4/2020 17:40:32'!
roots
	parents isEmpty ifTrue: [^self].
	^parents inject: #() into: [ :roots :aParent |  roots , aParent roots  ]! !

----SNAPSHOT----(4 November 2020 17:40:35) CuisUniversity-4383.image priorSource: 18664987!
!Portfolio methodsFor: 'adding' stamp: 'FC 11/4/2020 17:41:05'!
validateAdd: anAccount

	^ ((self isPresent: anAccount) or: [anAccount isPresent: self]) ifTrue: [self error: self class duplicateAccountMessage ]! !
!Portfolio methodsFor: 'adding' stamp: 'FC 11/4/2020 17:41:05' prior: 50915053!
add: anAccount

	self validateAdd: anAccount.
	anAccount addParent: self.
	
	accounts add: anAccount.! !
!Portfolio methodsFor: 'adding' stamp: 'FC 11/4/2020 17:43:13' prior: 50915283!
validateAdd: anAccount

	^ ((self roots anySatisfy: [ :aRoot | aRoot isPresent: anAccount ]) or: [anAccount roots anySatisfy: [:aRoot | aRoot isPresent: self]]) 
		ifTrue: [self error: self class duplicateAccountMessage ]. 
	"((self isPresent: anAccount) or: [anAccount isPresent: self])" ! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/4/2020 17:43:14'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/4/2020 17:43:14'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfManyAddedReceptiveAccounts stamp: 'FC 11/4/2020 17:43:14'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfAnAccount stamp: 'FC 11/4/2020 17:43:14'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/4/2020 17:43:14'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/4/2020 17:43:14'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsItsTransactions stamp: 'FC 11/4/2020 17:43:14'!
ERROR!

!testRun: #PortfolioTest #test08PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/4/2020 17:43:14'!
ERROR!

!testRun: #PortfolioTest #test09CantAddSameReceptiveAccountTwiceOnPortfolio stamp: 'FC 11/4/2020 17:43:14'!
ERROR!

!testRun: #PortfolioTest #test10CantAddSameReceptiveAccountTwiceOnDifferentLevels stamp: 'FC 11/4/2020 17:43:14'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioCantAddToItself stamp: 'FC 11/4/2020 17:43:14'!
FAILURE!

!testRun: #PortfolioTest #test12PortfolioCantAddToItselfOnChild stamp: 'FC 11/4/2020 17:43:14'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'FC 11/4/2020 17:43:14'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'FC 11/4/2020 17:43:24' prior: 50915297!
validateAdd: anAccount

	^ ((self roots anySatisfy: [ :aRoot | aRoot isPresent: anAccount ]) or: [anAccount roots anySatisfy: [:aRoot | aRoot isPresent: self]]) 
		ifTrue: [self error: self class duplicateAccountMessage ]. 
	
	"((self isPresent: anAccount) or: [anAccount isPresent: self])" ! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/4/2020 17:43:24'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/4/2020 17:43:24'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfManyAddedReceptiveAccounts stamp: 'FC 11/4/2020 17:43:24'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfAnAccount stamp: 'FC 11/4/2020 17:43:24'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/4/2020 17:43:24'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/4/2020 17:43:24'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsItsTransactions stamp: 'FC 11/4/2020 17:43:24'!
ERROR!

!testRun: #PortfolioTest #test08PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/4/2020 17:43:24'!
ERROR!

!testRun: #PortfolioTest #test09CantAddSameReceptiveAccountTwiceOnPortfolio stamp: 'FC 11/4/2020 17:43:24'!
ERROR!

!testRun: #PortfolioTest #test10CantAddSameReceptiveAccountTwiceOnDifferentLevels stamp: 'FC 11/4/2020 17:43:24'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioCantAddToItself stamp: 'FC 11/4/2020 17:43:24'!
FAILURE!

!testRun: #PortfolioTest #test12PortfolioCantAddToItselfOnChild stamp: 'FC 11/4/2020 17:43:24'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'FC 11/4/2020 17:43:24'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/4/2020 17:43:30'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/4/2020 17:43:30'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'FC 11/4/2020 17:44:29' prior: 50915274!
roots
	parents isEmpty ifTrue: [^#(self)].
	^parents inject: #() into: [ :roots :aParent |  roots , aParent roots  ]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/4/2020 17:44:30'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/4/2020 17:44:30'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfManyAddedReceptiveAccounts stamp: 'FC 11/4/2020 17:44:30'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfAnAccount stamp: 'FC 11/4/2020 17:44:30'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/4/2020 17:44:30'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/4/2020 17:44:30'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsItsTransactions stamp: 'FC 11/4/2020 17:44:30'!
ERROR!

!testRun: #PortfolioTest #test08PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/4/2020 17:44:30'!
ERROR!

!testRun: #PortfolioTest #test09CantAddSameReceptiveAccountTwiceOnPortfolio stamp: 'FC 11/4/2020 17:44:30'!
ERROR!

!testRun: #PortfolioTest #test10CantAddSameReceptiveAccountTwiceOnDifferentLevels stamp: 'FC 11/4/2020 17:44:30'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioCantAddToItself stamp: 'FC 11/4/2020 17:44:30'!
FAILURE!

!testRun: #PortfolioTest #test12PortfolioCantAddToItselfOnChild stamp: 'FC 11/4/2020 17:44:30'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'FC 11/4/2020 17:44:30'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/4/2020 17:44:37'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/4/2020 17:44:37'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/4/2020 17:45:18'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/4/2020 17:45:18'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'FC 11/4/2020 17:46:20' prior: 50915420!
roots
	parents isEmpty ifTrue: [^#() add: self].
	^parents inject: #() into: [ :roots :aParent |  roots , aParent roots  ]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/4/2020 17:46:20'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/4/2020 17:46:20'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfManyAddedReceptiveAccounts stamp: 'FC 11/4/2020 17:46:20'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfAnAccount stamp: 'FC 11/4/2020 17:46:20'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/4/2020 17:46:20'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/4/2020 17:46:20'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsItsTransactions stamp: 'FC 11/4/2020 17:46:20'!
ERROR!

!testRun: #PortfolioTest #test08PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/4/2020 17:46:20'!
ERROR!

!testRun: #PortfolioTest #test09CantAddSameReceptiveAccountTwiceOnPortfolio stamp: 'FC 11/4/2020 17:46:20'!
ERROR!

!testRun: #PortfolioTest #test10CantAddSameReceptiveAccountTwiceOnDifferentLevels stamp: 'FC 11/4/2020 17:46:21'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioCantAddToItself stamp: 'FC 11/4/2020 17:46:21'!
FAILURE!

!testRun: #PortfolioTest #test12PortfolioCantAddToItselfOnChild stamp: 'FC 11/4/2020 17:46:21'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'FC 11/4/2020 17:46:21'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/4/2020 17:46:32'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/4/2020 17:46:32'!
ERROR!

account := Portfolio new.
aPortfolio := Portfolio new.
receptiveAccount := ReceptiveAccount new.
!

account!

#(account)!
!Portfolio methodsFor: 'adding' stamp: 'FC 11/4/2020 17:47:40' prior: 50915487!
roots
	parents isEmpty ifTrue: [^Array with: self].
	^parents inject: #() into: [ :roots :aParent |  roots , aParent roots  ]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/4/2020 17:47:41'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/4/2020 17:47:41'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfManyAddedReceptiveAccounts stamp: 'FC 11/4/2020 17:47:41'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfAnAccount stamp: 'FC 11/4/2020 17:47:41'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/4/2020 17:47:41'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/4/2020 17:47:41'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsItsTransactions stamp: 'FC 11/4/2020 17:47:41'!
ERROR!

!testRun: #PortfolioTest #test08PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/4/2020 17:47:41'!
ERROR!

!testRun: #PortfolioTest #test09CantAddSameReceptiveAccountTwiceOnPortfolio stamp: 'FC 11/4/2020 17:47:41'!
ERROR!

!testRun: #PortfolioTest #test10CantAddSameReceptiveAccountTwiceOnDifferentLevels stamp: 'FC 11/4/2020 17:47:41'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioCantAddToItself stamp: 'FC 11/4/2020 17:47:41'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddToItselfOnChild stamp: 'FC 11/4/2020 17:47:41'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'FC 11/4/2020 17:47:41'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/4/2020 17:47:47'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/4/2020 17:47:47'!
ERROR!

----SNAPSHOT----(4 November 2020 17:49:28) CuisUniversity-4383.image priorSource: 18676148!
!Portfolio methodsFor: 'adding' stamp: 'FC 11/4/2020 17:56:59' prior: 50915355!
validateAdd: anAccount

	^ (self roots anySatisfy: [ :aRoot | aRoot isPresent: anAccount ])		ifTrue: [self error: self class duplicateAccountMessage ]. 
	
	"((self isPresent: anAccount) or: [anAccount isPresent: self])" ! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/4/2020 17:57:00'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/4/2020 17:57:00'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfManyAddedReceptiveAccounts stamp: 'FC 11/4/2020 17:57:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfAnAccount stamp: 'FC 11/4/2020 17:57:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/4/2020 17:57:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/4/2020 17:57:00'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsItsTransactions stamp: 'FC 11/4/2020 17:57:00'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/4/2020 17:57:00'!
PASSED!

!testRun: #PortfolioTest #test09CantAddSameReceptiveAccountTwiceOnPortfolio stamp: 'FC 11/4/2020 17:57:00'!
PASSED!

!testRun: #PortfolioTest #test10CantAddSameReceptiveAccountTwiceOnDifferentLevels stamp: 'FC 11/4/2020 17:57:00'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantAddToItself stamp: 'FC 11/4/2020 17:57:00'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddToItselfOnChild stamp: 'FC 11/4/2020 17:57:00'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'FC 11/4/2020 17:57:00'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/4/2020 17:57:17'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/4/2020 17:57:17'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfManyAddedReceptiveAccounts stamp: 'FC 11/4/2020 17:57:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfAnAccount stamp: 'FC 11/4/2020 17:57:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/4/2020 17:57:17'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/4/2020 17:57:17'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsItsTransactions stamp: 'FC 11/4/2020 17:57:17'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/4/2020 17:57:17'!
PASSED!

!testRun: #PortfolioTest #test09CantAddSameReceptiveAccountTwiceOnPortfolio stamp: 'FC 11/4/2020 17:57:17'!
PASSED!

!testRun: #PortfolioTest #test10CantAddSameReceptiveAccountTwiceOnDifferentLevels stamp: 'FC 11/4/2020 17:57:17'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantAddToItself stamp: 'FC 11/4/2020 17:57:17'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddToItselfOnChild stamp: 'FC 11/4/2020 17:57:17'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'FC 11/4/2020 17:57:17'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'FC 11/4/2020 17:57:57' prior: 50915614!
validateAdd: anAccount

	^ (self roots anySatisfy: [ :aRoot | aRoot isPresent: anAccount ])		ifTrue: [self error: self class duplicateAccountMessage ]. 
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'FC 11/4/2020 18:00:40'!
test13PortfolioCantAddAccountWhenParentHasIt
	| account receptiveAccount aPortfolio |
	
	account := Portfolio new.
	aPortfolio := Portfolio new.
	receptiveAccount := ReceptiveAccount new.

	account add: receptiveAccount.
	account add: aPortfolio.

	self should: [	aPortfolio add: receptiveAccount ] raise: Error withMessageText: Portfolio duplicateAccountMessage.
	

! !

!methodRemoval: PortfolioTest #test13 stamp: 'FC 11/4/2020 18:00:41'!
test13
	| account receptiveAccount aPortfolio |
	
	account := Portfolio new.
	aPortfolio := Portfolio new.
	receptiveAccount := ReceptiveAccount new.

	account add: receptiveAccount.
	account add: aPortfolio.

	self should: [	aPortfolio add: receptiveAccount ] raise: Error withMessageText: Portfolio duplicateAccountMessage.
	

!
!PortfolioTest methodsFor: 'tests' stamp: 'FC 11/4/2020 18:04:50'!
test14PortfolioCantAddAccountWhenParentHasIt
	| rootPortfolio1 receptiveAccount rootPortfolio2  childPortfolio grandChildPortfolio|
	
	rootPortfolio1 := Portfolio new.
	rootPortfolio2 := Portfolio new.
	childPortfolio := Portfolio new.
	grandChildPortfolio := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
		
	rootPortfolio1 add: childPortfolio.
	rootPortfolio2 add: childPortfolio.
	childPortfolio add: receptiveAccount.
	childPortfolio add: grandChildPortfolio.

	self should: [	grandChildPortfolio add: receptiveAccount ] raise: Error withMessageText: Portfolio duplicateAccountMessage.
	

! !

!testRun: #PortfolioTest #test14PortfolioCantAddAccountWhenParentHasIt stamp: 'FC 11/4/2020 18:04:51'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/4/2020 18:04:51'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/4/2020 18:04:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfManyAddedReceptiveAccounts stamp: 'FC 11/4/2020 18:04:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfAnAccount stamp: 'FC 11/4/2020 18:04:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/4/2020 18:04:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/4/2020 18:04:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsItsTransactions stamp: 'FC 11/4/2020 18:04:51'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/4/2020 18:04:51'!
PASSED!

!testRun: #PortfolioTest #test09CantAddSameReceptiveAccountTwiceOnPortfolio stamp: 'FC 11/4/2020 18:04:51'!
PASSED!

!testRun: #PortfolioTest #test10CantAddSameReceptiveAccountTwiceOnDifferentLevels stamp: 'FC 11/4/2020 18:04:51'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantAddToItself stamp: 'FC 11/4/2020 18:04:51'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddToItselfOnChild stamp: 'FC 11/4/2020 18:04:51'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountWhenParentHasIt stamp: 'FC 11/4/2020 18:04:51'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAccountWhenParentHasIt stamp: 'FC 11/4/2020 18:04:51'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'FC 11/4/2020 18:05:26'!
test14PortfolioCantAddAccountWhenManyParentsHasIt
	| rootPortfolio1 receptiveAccount rootPortfolio2  childPortfolio grandChildPortfolio|
	
	rootPortfolio1 := Portfolio new.
	rootPortfolio2 := Portfolio new.
	childPortfolio := Portfolio new.
	grandChildPortfolio := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
		
	rootPortfolio1 add: childPortfolio.
	rootPortfolio2 add: childPortfolio.
	childPortfolio add: receptiveAccount.
	childPortfolio add: grandChildPortfolio.

	self should: [	grandChildPortfolio add: receptiveAccount ] raise: Error withMessageText: Portfolio duplicateAccountMessage.
	

! !

!methodRemoval: PortfolioTest #test14PortfolioCantAddAccountWhenParentHasIt stamp: 'FC 11/4/2020 18:05:36'!
test14PortfolioCantAddAccountWhenParentHasIt
	| rootPortfolio1 receptiveAccount rootPortfolio2  childPortfolio grandChildPortfolio|
	
	rootPortfolio1 := Portfolio new.
	rootPortfolio2 := Portfolio new.
	childPortfolio := Portfolio new.
	grandChildPortfolio := Portfolio new.
	receptiveAccount := ReceptiveAccount new.
		
	rootPortfolio1 add: childPortfolio.
	rootPortfolio2 add: childPortfolio.
	childPortfolio add: receptiveAccount.
	childPortfolio add: grandChildPortfolio.

	self should: [	grandChildPortfolio add: receptiveAccount ] raise: Error withMessageText: Portfolio duplicateAccountMessage.
	

!

!testRun: #PortfolioTest #test14PortfolioCantAddAccountWhenManyParentsHasIt stamp: 'FC 11/4/2020 18:06:26'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/4/2020 18:06:26'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/4/2020 18:06:26'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfManyAddedReceptiveAccounts stamp: 'FC 11/4/2020 18:06:26'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfAnAccount stamp: 'FC 11/4/2020 18:06:26'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/4/2020 18:06:26'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/4/2020 18:06:26'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsItsTransactions stamp: 'FC 11/4/2020 18:06:26'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/4/2020 18:06:26'!
PASSED!

!testRun: #PortfolioTest #test09CantAddSameReceptiveAccountTwiceOnPortfolio stamp: 'FC 11/4/2020 18:06:26'!
PASSED!

!testRun: #PortfolioTest #test10CantAddSameReceptiveAccountTwiceOnDifferentLevels stamp: 'FC 11/4/2020 18:06:26'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantAddToItself stamp: 'FC 11/4/2020 18:06:26'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddToItselfOnChild stamp: 'FC 11/4/2020 18:06:26'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountWhenParentHasIt stamp: 'FC 11/4/2020 18:06:26'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAccountWhenManyParentsHasIt stamp: 'FC 11/4/2020 18:06:26'!
PASSED!

----SNAPSHOT----(4 November 2020 18:07:48) CuisUniversity-4383.image priorSource: 18686714!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'FC 11/4/2020 18:08:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHaveBalanceOfAddedReceptiveAccount stamp: 'FC 11/4/2020 18:08:16'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHaveBalanceOfManyAddedReceptiveAccounts stamp: 'FC 11/4/2020 18:08:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioKnowsRegisteredTransactionsOfAnAccount stamp: 'FC 11/4/2020 18:08:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsRegisteredTransactionsOfManyAccounts stamp: 'FC 11/4/2020 18:08:17'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotKnowNotRegisteredTransactionsOfItsAccounts stamp: 'FC 11/4/2020 18:08:17'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsItsTransactions stamp: 'FC 11/4/2020 18:08:17'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsTransactionsOfMoreThanOneAccount stamp: 'FC 11/4/2020 18:08:17'!
PASSED!

!testRun: #PortfolioTest #test09CantAddSameReceptiveAccountTwiceOnPortfolio stamp: 'FC 11/4/2020 18:08:17'!
PASSED!

!testRun: #PortfolioTest #test10CantAddSameReceptiveAccountTwiceOnDifferentLevels stamp: 'FC 11/4/2020 18:08:17'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantAddToItself stamp: 'FC 11/4/2020 18:08:17'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddToItselfOnChild stamp: 'FC 11/4/2020 18:08:17'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountWhenParentHasIt stamp: 'FC 11/4/2020 18:08:17'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAccountWhenManyParentsHasIt stamp: 'FC 11/4/2020 18:08:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'FC 11/4/2020 18:08:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'FC 11/4/2020 18:08:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'FC 11/4/2020 18:08:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'FC 11/4/2020 18:08:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'FC 11/4/2020 18:08:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'FC 11/4/2020 18:08:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'FC 11/4/2020 18:08:17'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXShouldStart stamp: 'FC 11/4/2020 18:08:20'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXShouldEndTurnAfterPlaying stamp: 'FC 11/4/2020 18:08:20'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOShouldNotBeAbleToPlayAtGameStart stamp: 'FC 11/4/2020 18:08:20'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerXShouldGoAfterO stamp: 'FC 11/4/2020 18:08:20'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXShouldNotBeAbleToPlayWhenIsOsTurn stamp: 'FC 11/4/2020 18:08:20'!
PASSED!

!testRun: #TerniLapilliTest #test06XTokenShouldBePlacedOnBoard stamp: 'FC 11/4/2020 18:08:20'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokenShouldBePlacedOnBoard stamp: 'FC 11/4/2020 18:08:20'!
PASSED!

!testRun: #TerniLapilliTest #test10OPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 11/4/2020 18:08:20'!
PASSED!

!testRun: #TerniLapilliTest #test11XPlayerShouldNotBeAbleToPlayOnOccupiedCell stamp: 'FC 11/4/2020 18:08:20'!
PASSED!

!testRun: #TerniLapilliTest #test12XPlayerShouldNotBeAbleToPlayOnOutOfBoundsCell stamp: 'FC 11/4/2020 18:08:20'!
PASSED!

!testRun: #TerniLapilliTest #test13GameShouldNotBeOverAtStart stamp: 'FC 11/4/2020 18:08:20'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerShouldWinWhenCompletingARow stamp: 'FC 11/4/2020 18:08:20'!
PASSED!

!testRun: #TerniLapilliTest #test15XPlayerShouldWinWhenCompletingARow stamp: 'FC 11/4/2020 18:08:20'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerShouldWinWhenCompletingAColumn stamp: 'FC 11/4/2020 18:08:20'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerShouldWinWhenCompletingAColumn stamp: 'FC 11/4/2020 18:08:20'!
PASSED!

!testRun: #TerniLapilliTest #test18XPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 11/4/2020 18:08:20'!
PASSED!

!testRun: #TerniLapilliTest #test19OPlayerShouldWinWhenCompletingADiagonal stamp: 'FC 11/4/2020 18:08:20'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerShouldNotBeAbleToPlayOnGameOver stamp: 'FC 11/4/2020 18:08:20'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerShouldNotHaveMoreThanThreeTokens stamp: 'FC 11/4/2020 18:08:20'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerShouldMoveCorrectly stamp: 'FC 11/4/2020 18:08:21'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerShouldNotMoveInvalidToken stamp: 'FC 11/4/2020 18:08:21'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerShouldNotOverlapTokens stamp: 'FC 11/4/2020 18:08:21'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerShouldNotMoveWhenIsOTurn stamp: 'FC 11/4/2020 18:08:21'!
PASSED!

!testRun: #TerniLapilliTest #test26XPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 11/4/2020 18:08:21'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 11/4/2020 18:08:21'!
PASSED!

!testRun: #TerniLapilliTest #test28OPlayerShouldMoveCorrectly stamp: 'FC 11/4/2020 18:08:21'!
PASSED!

!testRun: #TerniLapilliTest #test29OPlayerShouldNotMoveInvalidToken stamp: 'FC 11/4/2020 18:08:21'!
PASSED!

!testRun: #TerniLapilliTest #test30OPlayerShouldNotOverlapTokens stamp: 'FC 11/4/2020 18:08:21'!
PASSED!

!testRun: #TerniLapilliTest #test31OPlayerShouldNotMoveWhenIsXTurn stamp: 'FC 11/4/2020 18:08:21'!
PASSED!

!testRun: #TerniLapilliTest #test32OPlayerShouldNotMoveMoreThanOneSlot stamp: 'FC 11/4/2020 18:08:21'!
PASSED!

!testRun: #TerniLapilliTest #test33OPlayerShouldNotMoveBeforePlacingAllTokens stamp: 'FC 11/4/2020 18:08:21'!
PASSED!